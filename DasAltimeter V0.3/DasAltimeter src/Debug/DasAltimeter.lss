
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006704  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000d8  20000000  00006704  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000500  200000d8  000067e0  000200d8  2**3
                  ALLOC
  3 .stack        00002000  200005d8  00006ce0  000200d8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002730b  00000000  00000000  00020159  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d0a  00000000  00000000  00047464  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000029a4  00000000  00000000  0004a16e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004f8  00000000  00000000  0004cb12  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d60  00000000  00000000  0004d00a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016927  00000000  00000000  0004dd6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a944  00000000  00000000  00064691  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072c1e  00000000  00000000  0006efd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001170  00000000  00000000  000e1bf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	200025d8 	.word	0x200025d8
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000a5d 	.word	0x00000a5d
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	000010f1 	.word	0x000010f1
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00001125 	.word	0x00001125
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	000011c5 	.word	0x000011c5
      90:	0000122d 	.word	0x0000122d
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000d8 	.word	0x200000d8
      d4:	00000000 	.word	0x00000000
      d8:	00006704 	.word	0x00006704

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000dc 	.word	0x200000dc
     108:	00006704 	.word	0x00006704
     10c:	00006704 	.word	0x00006704
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	00006704 	.word	0x00006704
     1a4:	20000000 	.word	0x20000000
     1a8:	200000d8 	.word	0x200000d8
     1ac:	200000d8 	.word	0x200000d8
     1b0:	200005d8 	.word	0x200005d8
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00006599 	.word	0x00006599
     1d0:	000009d5 	.word	0x000009d5

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady() {
     1e6:	b570      	push	{r4, r5, r6, lr}
     1e8:	4c08      	ldr	r4, [pc, #32]	; (20c <AT25SFHoldTillReady+0x28>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	6163      	str	r3, [r4, #20]
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_READSTATUS);
     1ee:	2105      	movs	r1, #5
     1f0:	2001      	movs	r0, #1
     1f2:	4b07      	ldr	r3, [pc, #28]	; (210 <AT25SFHoldTillReady+0x2c>)
     1f4:	4798      	blx	r3
    while (spiDataIn(MEM_SPI) & 0x01);
     1f6:	2501      	movs	r5, #1
     1f8:	2001      	movs	r0, #1
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <AT25SFHoldTillReady+0x30>)
     1fc:	4798      	blx	r3
     1fe:	4228      	tst	r0, r5
     200:	d1fa      	bne.n	1f8 <AT25SFHoldTillReady+0x14>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     202:	2380      	movs	r3, #128	; 0x80
     204:	02db      	lsls	r3, r3, #11
     206:	61a3      	str	r3, [r4, #24]
    pinHigh(cs_mem);
}
     208:	bd70      	pop	{r4, r5, r6, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	41004400 	.word	0x41004400
     210:	00002dc1 	.word	0x00002dc1
     214:	00002dd9 	.word	0x00002dd9

00000218 <AT25SFChipErase>:
void AT25SFChipErase() {
     218:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     21a:	2580      	movs	r5, #128	; 0x80
     21c:	4c06      	ldr	r4, [pc, #24]	; (238 <AT25SFChipErase+0x20>)
     21e:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     220:	4e06      	ldr	r6, [pc, #24]	; (23c <AT25SFChipErase+0x24>)
     222:	6165      	str	r5, [r4, #20]
     224:	2106      	movs	r1, #6
     226:	2001      	movs	r0, #1
     228:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_CHIP_ERASE);
     22c:	2160      	movs	r1, #96	; 0x60
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     22e:	6165      	str	r5, [r4, #20]
     230:	2001      	movs	r0, #1
     232:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     234:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     236:	bd70      	pop	{r4, r5, r6, pc}
     238:	41004400 	.word	0x41004400
     23c:	00002dc1 	.word	0x00002dc1

00000240 <AT25SFWriteBytes>:
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     242:	2780      	movs	r7, #128	; 0x80
     244:	0006      	movs	r6, r0
     246:	4d14      	ldr	r5, [pc, #80]	; (298 <AT25SFWriteBytes+0x58>)

    AT25SFHoldTillReady();
     248:	4b14      	ldr	r3, [pc, #80]	; (29c <AT25SFWriteBytes+0x5c>)
     24a:	02ff      	lsls	r7, r7, #11
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     24c:	9201      	str	r2, [sp, #4]
     24e:	9100      	str	r1, [sp, #0]

    AT25SFHoldTillReady();
     250:	4798      	blx	r3

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     252:	4c13      	ldr	r4, [pc, #76]	; (2a0 <AT25SFWriteBytes+0x60>)
     254:	616f      	str	r7, [r5, #20]
     256:	2106      	movs	r1, #6
     258:	2001      	movs	r0, #1
     25a:	47a0      	blx	r4
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     25c:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     25e:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     260:	616f      	str	r7, [r5, #20]
     262:	2001      	movs	r0, #1
     264:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0xFF0000) >> 16));
     266:	0c31      	lsrs	r1, r6, #16
     268:	b2c9      	uxtb	r1, r1
     26a:	2001      	movs	r0, #1
     26c:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x00FF00) >>  8));
     26e:	0a31      	lsrs	r1, r6, #8
     270:	b2c9      	uxtb	r1, r1
     272:	2001      	movs	r0, #1
     274:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x0000FF) >>  0));
     276:	b2f1      	uxtb	r1, r6
     278:	2001      	movs	r0, #1
     27a:	47a0      	blx	r4
     27c:	9e01      	ldr	r6, [sp, #4]
     27e:	9b00      	ldr	r3, [sp, #0]
     280:	18f7      	adds	r7, r6, r3

    for (u8_t pos = 0; pos < len; ++pos) {
     282:	42be      	cmp	r6, r7
     284:	d004      	beq.n	290 <AT25SFWriteBytes+0x50>
        spiDataOut(MEM_SPI, bytes[pos]);
     286:	7831      	ldrb	r1, [r6, #0]
     288:	2001      	movs	r0, #1
     28a:	47a0      	blx	r4
     28c:	3601      	adds	r6, #1
     28e:	e7f8      	b.n	282 <AT25SFWriteBytes+0x42>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     290:	2380      	movs	r3, #128	; 0x80
     292:	02db      	lsls	r3, r3, #11
     294:	61ab      	str	r3, [r5, #24]
    }

    pinHigh(cs_mem);

}
     296:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     298:	41004400 	.word	0x41004400
     29c:	000001e5 	.word	0x000001e5
     2a0:	00002dc1 	.word	0x00002dc1

000002a4 <AT25SEWritePage>:
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2a6:	2780      	movs	r7, #128	; 0x80
     2a8:	0006      	movs	r6, r0
     2aa:	4d13      	ldr	r5, [pc, #76]	; (2f8 <AT25SEWritePage+0x54>)
     2ac:	02ff      	lsls	r7, r7, #11

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2ae:	4c13      	ldr	r4, [pc, #76]	; (2fc <AT25SEWritePage+0x58>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2b0:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2b2:	2001      	movs	r0, #1
     2b4:	616f      	str	r7, [r5, #20]
     2b6:	2106      	movs	r1, #6
     2b8:	47a0      	blx	r4
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ba:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     2bc:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2be:	616f      	str	r7, [r5, #20]
     2c0:	2001      	movs	r0, #1
     2c2:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     2c4:	0c31      	lsrs	r1, r6, #16
     2c6:	b2c9      	uxtb	r1, r1
     2c8:	2001      	movs	r0, #1
     2ca:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     2cc:	0a31      	lsrs	r1, r6, #8
     2ce:	b2c9      	uxtb	r1, r1
     2d0:	2001      	movs	r0, #1
     2d2:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     2d4:	b2f1      	uxtb	r1, r6
     2d6:	2001      	movs	r0, #1
     2d8:	47a0      	blx	r4
     2da:	9e01      	ldr	r6, [sp, #4]
     2dc:	1c77      	adds	r7, r6, #1
     2de:	37ff      	adds	r7, #255	; 0xff


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        spiDataOut(SPI1,data[pos]);
     2e0:	7831      	ldrb	r1, [r6, #0]
     2e2:	2001      	movs	r0, #1
     2e4:	3601      	adds	r6, #1
     2e6:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     2e8:	42be      	cmp	r6, r7
     2ea:	d1f9      	bne.n	2e0 <AT25SEWritePage+0x3c>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ec:	2380      	movs	r3, #128	; 0x80
     2ee:	02db      	lsls	r3, r3, #11
     2f0:	61ab      	str	r3, [r5, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     2f2:	2000      	movs	r0, #0
     2f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	41004400 	.word	0x41004400
     2fc:	00002dc1 	.word	0x00002dc1

00000300 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     300:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     304:	0005      	movs	r5, r0
     306:	000f      	movs	r7, r1
     308:	4e11      	ldr	r6, [pc, #68]	; (350 <AT25SEreadSample+0x50>)
     30a:	02db      	lsls	r3, r3, #11
     30c:	9201      	str	r2, [sp, #4]

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     30e:	4c11      	ldr	r4, [pc, #68]	; (354 <AT25SEreadSample+0x54>)
     310:	6173      	str	r3, [r6, #20]
     312:	210b      	movs	r1, #11
     314:	2001      	movs	r0, #1
     316:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     318:	0c29      	lsrs	r1, r5, #16
     31a:	b2c9      	uxtb	r1, r1
     31c:	2001      	movs	r0, #1
     31e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     320:	0a29      	lsrs	r1, r5, #8
     322:	b2c9      	uxtb	r1, r1
     324:	2001      	movs	r0, #1
     326:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     328:	b2e9      	uxtb	r1, r5
     32a:	2001      	movs	r0, #1
     32c:	47a0      	blx	r4
    spiDataOut(MEM_SPI, 0xFF);
     32e:	21ff      	movs	r1, #255	; 0xff
     330:	2001      	movs	r0, #1
     332:	47a0      	blx	r4
     334:	9c01      	ldr	r4, [sp, #4]
     336:	19e7      	adds	r7, r4, r7


    for (u8_t pos = 0; pos < len; ++pos) {
     338:	42bc      	cmp	r4, r7
     33a:	d005      	beq.n	348 <AT25SEreadSample+0x48>
        data[pos] = spiDataIn(MEM_SPI);
     33c:	2001      	movs	r0, #1
     33e:	4b06      	ldr	r3, [pc, #24]	; (358 <AT25SEreadSample+0x58>)
     340:	4798      	blx	r3
     342:	7020      	strb	r0, [r4, #0]
     344:	3401      	adds	r4, #1
     346:	e7f7      	b.n	338 <AT25SEreadSample+0x38>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     348:	2380      	movs	r3, #128	; 0x80
     34a:	02db      	lsls	r3, r3, #11
     34c:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);

}
     34e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     350:	41004400 	.word	0x41004400
     354:	00002dc1 	.word	0x00002dc1
     358:	00002dd9 	.word	0x00002dd9

0000035c <AT25SEreadPage>:

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     35e:	2380      	movs	r3, #128	; 0x80
     360:	0007      	movs	r7, r0
     362:	000c      	movs	r4, r1
     364:	4e10      	ldr	r6, [pc, #64]	; (3a8 <AT25SEreadPage+0x4c>)
     366:	02db      	lsls	r3, r3, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     368:	4d10      	ldr	r5, [pc, #64]	; (3ac <AT25SEreadPage+0x50>)
     36a:	6173      	str	r3, [r6, #20]
     36c:	210b      	movs	r1, #11
     36e:	2001      	movs	r0, #1
     370:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     372:	0c39      	lsrs	r1, r7, #16
     374:	b2c9      	uxtb	r1, r1
     376:	2001      	movs	r0, #1
     378:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     37a:	0a39      	lsrs	r1, r7, #8
     37c:	b2c9      	uxtb	r1, r1
     37e:	2001      	movs	r0, #1
     380:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     382:	b2f9      	uxtb	r1, r7
     384:	2001      	movs	r0, #1
     386:	47a8      	blx	r5
    spiDataOut(MEM_SPI, 0xFF);
     388:	21ff      	movs	r1, #255	; 0xff
     38a:	2001      	movs	r0, #1
     38c:	47a8      	blx	r5
     38e:	1c65      	adds	r5, r4, #1
     390:	35ff      	adds	r5, #255	; 0xff

    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataIn(MEM_SPI);
     392:	2001      	movs	r0, #1
     394:	4b06      	ldr	r3, [pc, #24]	; (3b0 <AT25SEreadPage+0x54>)
     396:	4798      	blx	r3
     398:	7020      	strb	r0, [r4, #0]
     39a:	3401      	adds	r4, #1
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
    spiDataOut(MEM_SPI, 0xFF);

    for (u16_t pos = 0; pos < 256; ++pos) {
     39c:	42ac      	cmp	r4, r5
     39e:	d1f8      	bne.n	392 <AT25SEreadPage+0x36>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3a0:	2380      	movs	r3, #128	; 0x80
     3a2:	02db      	lsls	r3, r3, #11
     3a4:	61b3      	str	r3, [r6, #24]
        data[pos] = spiDataIn(MEM_SPI);
    }
    pinHigh(cs_mem);

}
     3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3a8:	41004400 	.word	0x41004400
     3ac:	00002dc1 	.word	0x00002dc1
     3b0:	00002dd9 	.word	0x00002dd9

000003b4 <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>

u32_t readMS5803AdcResults() {
     3b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b6:	2780      	movs	r7, #128	; 0x80
     3b8:	4e0b      	ldr	r6, [pc, #44]	; (3e8 <readMS5803AdcResults+0x34>)
     3ba:	01ff      	lsls	r7, r7, #7

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, cmdAdcRead_);
     3bc:	2100      	movs	r1, #0
     3be:	4b0b      	ldr	r3, [pc, #44]	; (3ec <readMS5803AdcResults+0x38>)
     3c0:	6177      	str	r7, [r6, #20]
     3c2:	2002      	movs	r0, #2
     3c4:	4798      	blx	r3
    u8_t _byte1 = spiDataIn(SPI2);
     3c6:	4d0a      	ldr	r5, [pc, #40]	; (3f0 <readMS5803AdcResults+0x3c>)
     3c8:	2002      	movs	r0, #2
     3ca:	47a8      	blx	r5
     3cc:	0004      	movs	r4, r0
    u8_t _byte2 = spiDataIn(SPI2);
     3ce:	2002      	movs	r0, #2
     3d0:	47a8      	blx	r5
     3d2:	9001      	str	r0, [sp, #4]
    u8_t _byte3 = spiDataIn(SPI2);
     3d4:	2002      	movs	r0, #2
     3d6:	47a8      	blx	r5
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3d8:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     3da:	9b01      	ldr	r3, [sp, #4]
     3dc:	0424      	lsls	r4, r4, #16
     3de:	021b      	lsls	r3, r3, #8
     3e0:	431c      	orrs	r4, r3
     3e2:	4320      	orrs	r0, r4
}
     3e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	41004400 	.word	0x41004400
     3ec:	00002dc1 	.word	0x00002dc1
     3f0:	00002dd9 	.word	0x00002dd9

000003f4 <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3f6:	b087      	sub	sp, #28
     3f8:	9304      	str	r3, [sp, #16]
    const u16_t C1 = coefficients_[1];
     3fa:	4b24      	ldr	r3, [pc, #144]	; (48c <ConvertPressureTemperature+0x98>)

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3fc:	9003      	str	r0, [sp, #12]
     3fe:	0014      	movs	r4, r2
    const u16_t C1 = coefficients_[1];
     400:	885a      	ldrh	r2, [r3, #2]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     402:	4f23      	ldr	r7, [pc, #140]	; (490 <ConvertPressureTemperature+0x9c>)
    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
     404:	9201      	str	r2, [sp, #4]
    const u16_t C2 = coefficients_[2];
     406:	889a      	ldrh	r2, [r3, #4]
     408:	9200      	str	r2, [sp, #0]
    const u16_t C3 = coefficients_[3];
    const u16_t C4 = coefficients_[4];
     40a:	891a      	ldrh	r2, [r3, #8]
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
    const u16_t C2 = coefficients_[2];
    const u16_t C3 = coefficients_[3];
     40c:	88dd      	ldrh	r5, [r3, #6]
    const u16_t C4 = coefficients_[4];
     40e:	9202      	str	r2, [sp, #8]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     410:	895e      	ldrh	r6, [r3, #10]
     412:	0236      	lsls	r6, r6, #8
     414:	1b8e      	subs	r6, r1, r6
     416:	17f2      	asrs	r2, r6, #31
     418:	9205      	str	r2, [sp, #20]
     41a:	8998      	ldrh	r0, [r3, #12]
     41c:	0032      	movs	r2, r6
     41e:	17f3      	asrs	r3, r6, #31
     420:	2100      	movs	r1, #0
     422:	47b8      	blx	r7
     424:	23fa      	movs	r3, #250	; 0xfa
     426:	0249      	lsls	r1, r1, #9
     428:	0dc0      	lsrs	r0, r0, #23
     42a:	4308      	orrs	r0, r1
     42c:	00db      	lsls	r3, r3, #3
     42e:	18c0      	adds	r0, r0, r3
     430:	6020      	str	r0, [r4, #0]

    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
    const  int64_t SENS  =  ((int64_t)C1 << 16) + ((C3 * (int64_t)dT) >> 7);
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     432:	0032      	movs	r2, r6
     434:	17f3      	asrs	r3, r6, #31
     436:	0028      	movs	r0, r5
     438:	2100      	movs	r1, #0
     43a:	47b8      	blx	r7
     43c:	064c      	lsls	r4, r1, #25
     43e:	11cb      	asrs	r3, r1, #7
     440:	2100      	movs	r1, #0
     442:	09c2      	lsrs	r2, r0, #7
     444:	4322      	orrs	r2, r4
     446:	9c01      	ldr	r4, [sp, #4]
     448:	0420      	lsls	r0, r4, #16
     44a:	1880      	adds	r0, r0, r2
     44c:	4159      	adcs	r1, r3
     44e:	9a03      	ldr	r2, [sp, #12]
     450:	2300      	movs	r3, #0
     452:	47b8      	blx	r7
     454:	02cb      	lsls	r3, r1, #11
     456:	0d44      	lsrs	r4, r0, #21
     458:	0032      	movs	r2, r6
     45a:	431c      	orrs	r4, r3
     45c:	154d      	asrs	r5, r1, #21
     45e:	9b05      	ldr	r3, [sp, #20]
     460:	9802      	ldr	r0, [sp, #8]
     462:	2100      	movs	r1, #0
     464:	47b8      	blx	r7
     466:	068b      	lsls	r3, r1, #26
     468:	118f      	asrs	r7, r1, #6
     46a:	9900      	ldr	r1, [sp, #0]
     46c:	0986      	lsrs	r6, r0, #6
     46e:	431e      	orrs	r6, r3
     470:	044a      	lsls	r2, r1, #17
     472:	0bcb      	lsrs	r3, r1, #15
     474:	1992      	adds	r2, r2, r6
     476:	417b      	adcs	r3, r7
     478:	1aa4      	subs	r4, r4, r2
     47a:	419d      	sbcs	r5, r3
     47c:	046b      	lsls	r3, r5, #17
     47e:	0be4      	lsrs	r4, r4, #15
     480:	431c      	orrs	r4, r3
     482:	9b04      	ldr	r3, [sp, #16]
     484:	601c      	str	r4, [r3, #0]

}
     486:	b007      	add	sp, #28
     488:	bdf0      	pop	{r4, r5, r6, r7, pc}
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	20000266 	.word	0x20000266
     490:	000044b5 	.word	0x000044b5

00000494 <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     494:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/100)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     496:	4b0c      	ldr	r3, [pc, #48]	; (4c8 <paToFeetNOAA+0x34>)
     498:	4798      	blx	r3
     49a:	4c0c      	ldr	r4, [pc, #48]	; (4cc <paToFeetNOAA+0x38>)
     49c:	2200      	movs	r2, #0
     49e:	4b0c      	ldr	r3, [pc, #48]	; (4d0 <paToFeetNOAA+0x3c>)
     4a0:	47a0      	blx	r4
     4a2:	2200      	movs	r2, #0
     4a4:	4b0b      	ldr	r3, [pc, #44]	; (4d4 <paToFeetNOAA+0x40>)
     4a6:	47a0      	blx	r4
     4a8:	4a0b      	ldr	r2, [pc, #44]	; (4d8 <paToFeetNOAA+0x44>)
     4aa:	4b0c      	ldr	r3, [pc, #48]	; (4dc <paToFeetNOAA+0x48>)
     4ac:	4c0c      	ldr	r4, [pc, #48]	; (4e0 <paToFeetNOAA+0x4c>)
     4ae:	47a0      	blx	r4
    return altFeet;
     4b0:	4c0c      	ldr	r4, [pc, #48]	; (4e4 <paToFeetNOAA+0x50>)
double paToFeetNOAA(int32_t pressureMbar) {

    double lower =(((double)(pressureMbar)/100)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     4b2:	0002      	movs	r2, r0
     4b4:	000b      	movs	r3, r1
    return altFeet;
     4b6:	2000      	movs	r0, #0
     4b8:	490b      	ldr	r1, [pc, #44]	; (4e8 <paToFeetNOAA+0x54>)
     4ba:	47a0      	blx	r4
     4bc:	4a0b      	ldr	r2, [pc, #44]	; (4ec <paToFeetNOAA+0x58>)
     4be:	4b0c      	ldr	r3, [pc, #48]	; (4f0 <paToFeetNOAA+0x5c>)
     4c0:	4c0c      	ldr	r4, [pc, #48]	; (4f4 <paToFeetNOAA+0x60>)
     4c2:	47a0      	blx	r4

}
     4c4:	bd10      	pop	{r4, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	0000629d 	.word	0x0000629d
     4cc:	00004e0d 	.word	0x00004e0d
     4d0:	40590000 	.word	0x40590000
     4d4:	408faa00 	.word	0x408faa00
     4d8:	e279dd3c 	.word	0xe279dd3c
     4dc:	3fc85b39 	.word	0x3fc85b39
     4e0:	000030ed 	.word	0x000030ed
     4e4:	00005b49 	.word	0x00005b49
     4e8:	3ff00000 	.word	0x3ff00000
     4ec:	9999999a 	.word	0x9999999a
     4f0:	4101beb3 	.word	0x4101beb3
     4f4:	00005655 	.word	0x00005655

000004f8 <readMS5803Coefficients>:



void readMS5803Coefficients() {
     4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     4fa:	24a2      	movs	r4, #162	; 0xa2
     4fc:	4d11      	ldr	r5, [pc, #68]	; (544 <readMS5803Coefficients+0x4c>)

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
        delay_us(600);
     4fe:	2096      	movs	r0, #150	; 0x96
     500:	4e11      	ldr	r6, [pc, #68]	; (548 <readMS5803Coefficients+0x50>)
     502:	0080      	lsls	r0, r0, #2
     504:	47b0      	blx	r6
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
        delay_us(600);
     506:	2096      	movs	r0, #150	; 0x96
     508:	0080      	lsls	r0, r0, #2
     50a:	47b0      	blx	r6
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     50c:	2380      	movs	r3, #128	; 0x80
     50e:	4e0f      	ldr	r6, [pc, #60]	; (54c <readMS5803Coefficients+0x54>)
     510:	01db      	lsls	r3, r3, #7
        pinLow(cs_baro);
        spiDataOut(SPI2, _cmd);
     512:	0021      	movs	r1, r4
     514:	6173      	str	r3, [r6, #20]
     516:	2002      	movs	r0, #2
     518:	4b0d      	ldr	r3, [pc, #52]	; (550 <readMS5803Coefficients+0x58>)
     51a:	4798      	blx	r3
        u8_t _byte1 = spiDataIn(SPI2);
     51c:	4f0d      	ldr	r7, [pc, #52]	; (554 <readMS5803Coefficients+0x5c>)
     51e:	2002      	movs	r0, #2
     520:	47b8      	blx	r7
     522:	9001      	str	r0, [sp, #4]
        u8_t _byte2 = spiDataIn(SPI2);
     524:	2002      	movs	r0, #2
     526:	47b8      	blx	r7
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     528:	2380      	movs	r3, #128	; 0x80
     52a:	01db      	lsls	r3, r3, #7
     52c:	61b3      	str	r3, [r6, #24]
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     52e:	9b01      	ldr	r3, [sp, #4]
     530:	3402      	adds	r4, #2
     532:	021b      	lsls	r3, r3, #8
     534:	4318      	orrs	r0, r3
     536:	b2e4      	uxtb	r4, r4
     538:	8028      	strh	r0, [r5, #0]
     53a:	3502      	adds	r5, #2



void readMS5803Coefficients() {

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
     53c:	2cae      	cmp	r4, #174	; 0xae
     53e:	d1de      	bne.n	4fe <readMS5803Coefficients+0x6>
        u8_t _byte2 = spiDataIn(SPI2);
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     540:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     542:	46c0      	nop			; (mov r8, r8)
     544:	20000268 	.word	0x20000268
     548:	000010c1 	.word	0x000010c1
     54c:	41004400 	.word	0x41004400
     550:	00002dc1 	.word	0x00002dc1
     554:	00002dd9 	.word	0x00002dd9

00000558 <initMS5803Barometer>:

void initMS5803Barometer() {
     558:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     55a:	2580      	movs	r5, #128	; 0x80
     55c:	4c06      	ldr	r4, [pc, #24]	; (578 <initMS5803Barometer+0x20>)
     55e:	01ed      	lsls	r5, r5, #7


    pinLow(cs_baro);
    spiDataOut(BARO_SPI, MS5803_CMD_RES);
     560:	211e      	movs	r1, #30
     562:	6165      	str	r5, [r4, #20]
     564:	2002      	movs	r0, #2
     566:	4b05      	ldr	r3, [pc, #20]	; (57c <initMS5803Barometer+0x24>)
     568:	4798      	blx	r3
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     56a:	61a5      	str	r5, [r4, #24]

    pinHigh(cs_baro);
    delay_ms(200);
     56c:	20c8      	movs	r0, #200	; 0xc8
     56e:	4b04      	ldr	r3, [pc, #16]	; (580 <initMS5803Barometer+0x28>)
     570:	4798      	blx	r3
    readMS5803Coefficients();
     572:	4b04      	ldr	r3, [pc, #16]	; (584 <initMS5803Barometer+0x2c>)
     574:	4798      	blx	r3

}
     576:	bd70      	pop	{r4, r5, r6, pc}
     578:	41004400 	.word	0x41004400
     57c:	00002dc1 	.word	0x00002dc1
     580:	000010f5 	.word	0x000010f5
     584:	000004f9 	.word	0x000004f9

00000588 <MS5803_CRC4>:
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     588:	4b02      	ldr	r3, [pc, #8]	; (594 <MS5803_CRC4+0xc>)
    return (n_rem & 0x00);
}
     58a:	2000      	movs	r0, #0
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     58c:	7b9a      	ldrb	r2, [r3, #14]
     58e:	81da      	strh	r2, [r3, #14]
    return (n_rem & 0x00);
}
     590:	4770      	bx	lr
     592:	46c0      	nop			; (mov r8, r8)
     594:	20000266 	.word	0x20000266

00000598 <init>:


void init() {

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     598:	211e      	movs	r1, #30
#include <boardDefines.h>
#include "math.h"



void init() {
     59a:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     59c:	4afc      	ldr	r2, [pc, #1008]	; (990 <init+0x3f8>)
#include <boardDefines.h>
#include "math.h"



void init() {
     59e:	b085      	sub	sp, #20

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     5a0:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5a2:	2401      	movs	r4, #1
     5a4:	438b      	bics	r3, r1
     5a6:	391c      	subs	r1, #28
     5a8:	430b      	orrs	r3, r1
     5aa:	6053      	str	r3, [r2, #4]

    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     5ac:	4af9      	ldr	r2, [pc, #996]	; (994 <init+0x3fc>)
     5ae:	3106      	adds	r1, #6
     5b0:	6993      	ldr	r3, [r2, #24]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5b2:	260f      	movs	r6, #15
     5b4:	430b      	orrs	r3, r1
     5b6:	6193      	str	r3, [r2, #24]

    SystemInit();
     5b8:	4bf7      	ldr	r3, [pc, #988]	; (998 <init+0x400>)
     5ba:	4798      	blx	r3
    GclkInit(0);
     5bc:	2000      	movs	r0, #0
     5be:	4bf7      	ldr	r3, [pc, #988]	; (99c <init+0x404>)
     5c0:	4798      	blx	r3
    RtcInit();
     5c2:	4bf7      	ldr	r3, [pc, #988]	; (9a0 <init+0x408>)
     5c4:	4798      	blx	r3
    delayInit();
     5c6:	4bf7      	ldr	r3, [pc, #988]	; (9a4 <init+0x40c>)
     5c8:	4798      	blx	r3
    adcInit();
     5ca:	4bf7      	ldr	r3, [pc, #988]	; (9a8 <init+0x410>)
     5cc:	4798      	blx	r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5ce:	4bf7      	ldr	r3, [pc, #988]	; (9ac <init+0x414>)
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5d0:	2002      	movs	r0, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5d2:	0019      	movs	r1, r3
     5d4:	3154      	adds	r1, #84	; 0x54
     5d6:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5d8:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5da:	43a2      	bics	r2, r4
     5dc:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5de:	2280      	movs	r2, #128	; 0x80
     5e0:	0352      	lsls	r2, r2, #13
     5e2:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5e4:	3533      	adds	r5, #51	; 0x33
     5e6:	782a      	ldrb	r2, [r5, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5e8:	390e      	subs	r1, #14

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5ea:	43b2      	bics	r2, r6
     5ec:	4322      	orrs	r2, r4
     5ee:	702a      	strb	r2, [r5, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f0:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5f2:	001f      	movs	r7, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f4:	4322      	orrs	r2, r4
     5f6:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5f8:	001a      	movs	r2, r3
     5fa:	3247      	adds	r2, #71	; 0x47
     5fc:	7811      	ldrb	r1, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5fe:	3794      	adds	r7, #148	; 0x94
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     600:	43a1      	bics	r1, r4
     602:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     604:	7811      	ldrb	r1, [r2, #0]
     606:	4301      	orrs	r1, r0
     608:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     60a:	2180      	movs	r1, #128	; 0x80
     60c:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     60e:	7829      	ldrb	r1, [r5, #0]
     610:	300e      	adds	r0, #14
     612:	4031      	ands	r1, r6
     614:	4301      	orrs	r1, r0
     616:	7029      	strb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     618:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     61a:	7811      	ldrb	r1, [r2, #0]
     61c:	4321      	orrs	r1, r4
     61e:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     620:	327c      	adds	r2, #124	; 0x7c
     622:	7811      	ldrb	r1, [r2, #0]
     624:	43a1      	bics	r1, r4
     626:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     628:	7811      	ldrb	r1, [r2, #0]
     62a:	4329      	orrs	r1, r5
     62c:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     62e:	2108      	movs	r1, #8
     630:	468c      	mov	ip, r1
     632:	449c      	add	ip, r3
     634:	4661      	mov	r1, ip
     636:	3506      	adds	r5, #6
     638:	67cd      	str	r5, [r1, #124]	; 0x7c
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     63a:	31a9      	adds	r1, #169	; 0xa9
     63c:	780d      	ldrb	r5, [r1, #0]
     63e:	4035      	ands	r5, r6
     640:	4305      	orrs	r5, r0
     642:	700d      	strb	r5, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     644:	7815      	ldrb	r5, [r2, #0]
     646:	4325      	orrs	r5, r4
     648:	7015      	strb	r5, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     64a:	001d      	movs	r5, r3
     64c:	35d7      	adds	r5, #215	; 0xd7
     64e:	782a      	ldrb	r2, [r5, #0]
     650:	43a2      	bics	r2, r4
     652:	702a      	strb	r2, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     654:	2580      	movs	r5, #128	; 0x80
     656:	4ad6      	ldr	r2, [pc, #856]	; (9b0 <init+0x418>)
     658:	042d      	lsls	r5, r5, #16
     65a:	6015      	str	r5, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     65c:	002a      	movs	r2, r5
     65e:	9703      	str	r7, [sp, #12]
     660:	603a      	str	r2, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     662:	001a      	movs	r2, r3
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     664:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     666:	32c2      	adds	r2, #194	; 0xc2
     668:	7815      	ldrb	r5, [r2, #0]
     66a:	43a5      	bics	r5, r4
     66c:	7015      	strb	r5, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     66e:	7815      	ldrb	r5, [r2, #0]
     670:	433d      	orrs	r5, r7
     672:	7015      	strb	r5, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     674:	4665      	mov	r5, ip
     676:	19ff      	adds	r7, r7, r7
     678:	67ef      	str	r7, [r5, #124]	; 0x7c

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     67a:	780d      	ldrb	r5, [r1, #0]
     67c:	43b5      	bics	r5, r6
     67e:	4325      	orrs	r5, r4
     680:	700d      	strb	r5, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     682:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     684:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     686:	4321      	orrs	r1, r4
     688:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     68a:	0019      	movs	r1, r3
     68c:	31d6      	adds	r1, #214	; 0xd6
     68e:	780a      	ldrb	r2, [r1, #0]
     690:	43a2      	bics	r2, r4
     692:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     694:	2180      	movs	r1, #128	; 0x80
     696:	4ac6      	ldr	r2, [pc, #792]	; (9b0 <init+0x418>)
     698:	03c9      	lsls	r1, r1, #15
     69a:	6011      	str	r1, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     69c:	000a      	movs	r2, r1
     69e:	9903      	ldr	r1, [sp, #12]
     6a0:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6a2:	001a      	movs	r2, r3
     6a4:	3243      	adds	r2, #67	; 0x43
     6a6:	7811      	ldrb	r1, [r2, #0]
     6a8:	43a1      	bics	r1, r4
     6aa:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6ac:	7811      	ldrb	r1, [r2, #0]
     6ae:	4329      	orrs	r1, r5
     6b0:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6b2:	001d      	movs	r5, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6b4:	2108      	movs	r1, #8
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6b6:	3531      	adds	r5, #49	; 0x31


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6b8:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6ba:	7829      	ldrb	r1, [r5, #0]
     6bc:	4031      	ands	r1, r6
     6be:	4308      	orrs	r0, r1
     6c0:	7028      	strb	r0, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c2:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6c4:	2002      	movs	r0, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c6:	4321      	orrs	r1, r4
     6c8:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ca:	0019      	movs	r1, r3
     6cc:	3159      	adds	r1, #89	; 0x59
     6ce:	780a      	ldrb	r2, [r1, #0]
     6d0:	43a2      	bics	r2, r4
     6d2:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6d4:	2280      	movs	r2, #128	; 0x80
     6d6:	0492      	lsls	r2, r2, #18
     6d8:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6da:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6dc:	001a      	movs	r2, r3
     6de:	3242      	adds	r2, #66	; 0x42
     6e0:	7811      	ldrb	r1, [r2, #0]
     6e2:	43a1      	bics	r1, r4
     6e4:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6e6:	7811      	ldrb	r1, [r2, #0]
     6e8:	4301      	orrs	r1, r0
     6ea:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6ec:	605f      	str	r7, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6ee:	7829      	ldrb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6f0:	0018      	movs	r0, r3

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6f2:	43b1      	bics	r1, r6
     6f4:	4321      	orrs	r1, r4
     6f6:	7029      	strb	r1, [r5, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6f8:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6fa:	3048      	adds	r0, #72	; 0x48
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fc:	4321      	orrs	r1, r4
     6fe:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     700:	0019      	movs	r1, r3
     702:	3158      	adds	r1, #88	; 0x58
     704:	780a      	ldrb	r2, [r1, #0]
     706:	001f      	movs	r7, r3
     708:	43a2      	bics	r2, r4
     70a:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     70c:	2280      	movs	r2, #128	; 0x80
    pinIn(senseDPin);
    pinMux(senseDPin);
    pinOut(fireDPin);
    pinLow(fireDPin);

    charges.igniterAHot = false;
     70e:	2100      	movs	r1, #0
     710:	0452      	lsls	r2, r2, #17
     712:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     714:	615a      	str	r2, [r3, #20]
     716:	4aa7      	ldr	r2, [pc, #668]	; (9b4 <init+0x41c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     718:	3749      	adds	r7, #73	; 0x49
     71a:	7011      	strb	r1, [r2, #0]
    charges.igniterBHot = false;
     71c:	2100      	movs	r1, #0
     71e:	7211      	strb	r1, [r2, #8]
    charges.igniterCHot = false;
     720:	2100      	movs	r1, #0
     722:	7411      	strb	r1, [r2, #16]
    charges.igniterDHot = false;
     724:	2100      	movs	r1, #0
     726:	7611      	strb	r1, [r2, #24]
     728:	7802      	ldrb	r2, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     72a:	2502      	movs	r5, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     72c:	43a2      	bics	r2, r4
     72e:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     730:	2280      	movs	r2, #128	; 0x80
     732:	0052      	lsls	r2, r2, #1
     734:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     736:	783a      	ldrb	r2, [r7, #0]
     738:	43a2      	bics	r2, r4
     73a:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     73c:	2280      	movs	r2, #128	; 0x80
     73e:	0092      	lsls	r2, r2, #2
     740:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     742:	001a      	movs	r2, r3
     744:	324b      	adds	r2, #75	; 0x4b
     746:	7811      	ldrb	r1, [r2, #0]
     748:	43a1      	bics	r1, r4
     74a:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     74c:	7811      	ldrb	r1, [r2, #0]
     74e:	4329      	orrs	r1, r5
     750:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     752:	2180      	movs	r1, #128	; 0x80
     754:	0109      	lsls	r1, r1, #4
     756:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     758:	2135      	movs	r1, #53	; 0x35
     75a:	468c      	mov	ip, r1
     75c:	449c      	add	ip, r3
     75e:	4661      	mov	r1, ip
     760:	7809      	ldrb	r1, [r1, #0]
     762:	351e      	adds	r5, #30
     764:	4031      	ands	r1, r6
     766:	4329      	orrs	r1, r5
     768:	4665      	mov	r5, ip
     76a:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76c:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     76e:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     770:	4321      	orrs	r1, r4
     772:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     774:	0019      	movs	r1, r3
     776:	3134      	adds	r1, #52	; 0x34
     778:	780a      	ldrb	r2, [r1, #0]
     77a:	4032      	ands	r2, r6
     77c:	432a      	orrs	r2, r5
     77e:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     780:	783a      	ldrb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     782:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     784:	4322      	orrs	r2, r4
     786:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     788:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     78a:	3706      	adds	r7, #6

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     78c:	43b2      	bics	r2, r6
     78e:	432a      	orrs	r2, r5
     790:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     792:	7802      	ldrb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     794:	3196      	adds	r1, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     796:	4322      	orrs	r2, r4
     798:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79a:	780a      	ldrb	r2, [r1, #0]
     79c:	43a2      	bics	r2, r4
     79e:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a0:	2280      	movs	r2, #128	; 0x80
     7a2:	4983      	ldr	r1, [pc, #524]	; (9b0 <init+0x418>)
     7a4:	00d2      	lsls	r2, r2, #3
     7a6:	600a      	str	r2, [r1, #0]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7a8:	0019      	movs	r1, r3
     7aa:	3198      	adds	r1, #152	; 0x98
     7ac:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ae:	7881      	ldrb	r1, [r0, #2]
     7b0:	43a1      	bics	r1, r4
     7b2:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b4:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7b6:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b8:	7a02      	ldrb	r2, [r0, #8]
     7ba:	43a2      	bics	r2, r4
     7bc:	7202      	strb	r2, [r0, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7be:	2280      	movs	r2, #128	; 0x80
     7c0:	0252      	lsls	r2, r2, #9
     7c2:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c4:	78ba      	ldrb	r2, [r7, #2]
     7c6:	43a2      	bics	r2, r4
     7c8:	70ba      	strb	r2, [r7, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ca:	2280      	movs	r2, #128	; 0x80
     7cc:	0292      	lsls	r2, r2, #10
     7ce:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7d0:	001a      	movs	r2, r3
     7d2:	3253      	adds	r2, #83	; 0x53
     7d4:	7811      	ldrb	r1, [r2, #0]
     7d6:	43a1      	bics	r1, r4
     7d8:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7da:	7811      	ldrb	r1, [r2, #0]
     7dc:	4329      	orrs	r1, r5
     7de:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7e0:	2180      	movs	r1, #128	; 0x80
     7e2:	0309      	lsls	r1, r1, #12
     7e4:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7e6:	2139      	movs	r1, #57	; 0x39
     7e8:	468c      	mov	ip, r1
     7ea:	449c      	add	ip, r3
     7ec:	4661      	mov	r1, ip
     7ee:	7809      	ldrb	r1, [r1, #0]
     7f0:	351e      	adds	r5, #30
     7f2:	4031      	ands	r1, r6
     7f4:	4329      	orrs	r1, r5
     7f6:	4665      	mov	r5, ip
     7f8:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fa:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7fc:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fe:	4321      	orrs	r1, r4
     800:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     802:	0019      	movs	r1, r3
     804:	3138      	adds	r1, #56	; 0x38
     806:	780a      	ldrb	r2, [r1, #0]
     808:	4032      	ands	r2, r6
     80a:	432a      	orrs	r2, r5
     80c:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     80e:	78ba      	ldrb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     810:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     812:	4322      	orrs	r2, r4
     814:	70ba      	strb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     816:	780a      	ldrb	r2, [r1, #0]
     818:	43b2      	bics	r2, r6
     81a:	432a      	orrs	r2, r5
     81c:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     81e:	7a02      	ldrb	r2, [r0, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     820:	3114      	adds	r1, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     822:	4322      	orrs	r2, r4
     824:	7202      	strb	r2, [r0, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     826:	798a      	ldrb	r2, [r1, #6]
     828:	43a2      	bics	r2, r4
     82a:	718a      	strb	r2, [r1, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     82c:	2280      	movs	r2, #128	; 0x80
     82e:	02d2      	lsls	r2, r2, #11
     830:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     832:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     834:	9103      	str	r1, [sp, #12]
     836:	780a      	ldrb	r2, [r1, #0]
     838:	43a2      	bics	r2, r4
     83a:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     83c:	2280      	movs	r2, #128	; 0x80
     83e:	0152      	lsls	r2, r2, #5
     840:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     842:	783a      	ldrb	r2, [r7, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     844:	2120      	movs	r1, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     846:	43a2      	bics	r2, r4
     848:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     84a:	2280      	movs	r2, #128	; 0x80
     84c:	0212      	lsls	r2, r2, #8
     84e:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     850:	001a      	movs	r2, r3
     852:	324d      	adds	r2, #77	; 0x4d
     854:	7810      	ldrb	r0, [r2, #0]
     856:	43a0      	bics	r0, r4
     858:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     85a:	7810      	ldrb	r0, [r2, #0]
     85c:	4328      	orrs	r0, r5
     85e:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     860:	2080      	movs	r0, #128	; 0x80
     862:	0180      	lsls	r0, r0, #6
     864:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     866:	0018      	movs	r0, r3
     868:	3036      	adds	r0, #54	; 0x36
     86a:	7805      	ldrb	r5, [r0, #0]
     86c:	4035      	ands	r5, r6
     86e:	430d      	orrs	r5, r1
     870:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     872:	7811      	ldrb	r1, [r2, #0]
     874:	000d      	movs	r5, r1
     876:	4325      	orrs	r5, r4
     878:	7015      	strb	r5, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     87a:	2237      	movs	r2, #55	; 0x37
     87c:	4694      	mov	ip, r2
     87e:	449c      	add	ip, r3
     880:	4662      	mov	r2, ip
     882:	2120      	movs	r1, #32
     884:	7812      	ldrb	r2, [r2, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     886:	2502      	movs	r5, #2
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     888:	4032      	ands	r2, r6
     88a:	430a      	orrs	r2, r1
     88c:	4661      	mov	r1, ip
     88e:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     890:	2102      	movs	r1, #2
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     892:	783a      	ldrb	r2, [r7, #0]
     894:	4322      	orrs	r2, r4
     896:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     898:	7802      	ldrb	r2, [r0, #0]
     89a:	43b2      	bics	r2, r6
     89c:	430a      	orrs	r2, r1
     89e:	7002      	strb	r2, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8a0:	9a03      	ldr	r2, [sp, #12]
     8a2:	9903      	ldr	r1, [sp, #12]
     8a4:	7812      	ldrb	r2, [r2, #0]
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8a6:	2040      	movs	r0, #64	; 0x40
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8a8:	4322      	orrs	r2, r4
     8aa:	700a      	strb	r2, [r1, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ac:	0019      	movs	r1, r3
     8ae:	314e      	adds	r1, #78	; 0x4e
     8b0:	780a      	ldrb	r2, [r1, #0]
     8b2:	43a2      	bics	r2, r4
     8b4:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8b6:	2280      	movs	r2, #128	; 0x80
     8b8:	01d2      	lsls	r2, r2, #7
     8ba:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8bc:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8be:	001a      	movs	r2, r3
     8c0:	3255      	adds	r2, #85	; 0x55
     8c2:	7811      	ldrb	r1, [r2, #0]
     8c4:	43a1      	bics	r1, r4
     8c6:	7011      	strb	r1, [r2, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8c8:	2180      	movs	r1, #128	; 0x80
     8ca:	0389      	lsls	r1, r1, #14
     8cc:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ce:	7811      	ldrb	r1, [r2, #0]
     8d0:	43a1      	bics	r1, r4
     8d2:	7011      	strb	r1, [r2, #0]
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8d4:	7811      	ldrb	r1, [r2, #0]
     8d6:	4301      	orrs	r1, r0
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8d8:	0018      	movs	r0, r3
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8da:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8dc:	3056      	adds	r0, #86	; 0x56
     8de:	7802      	ldrb	r2, [r0, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8e0:	0019      	movs	r1, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e2:	43a2      	bics	r2, r4
     8e4:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8e6:	2280      	movs	r2, #128	; 0x80
     8e8:	03d2      	lsls	r2, r2, #15
     8ea:	609a      	str	r2, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8ec:	313b      	adds	r1, #59	; 0x3b
     8ee:	780a      	ldrb	r2, [r1, #0]
     8f0:	43b2      	bics	r2, r6
     8f2:	432a      	orrs	r2, r5
     8f4:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8f6:	7802      	ldrb	r2, [r0, #0]
     8f8:	4322      	orrs	r2, r4
     8fa:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8fc:	001a      	movs	r2, r3
     8fe:	3257      	adds	r2, #87	; 0x57
     900:	7810      	ldrb	r0, [r2, #0]
     902:	43a0      	bics	r0, r4
     904:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     906:	7810      	ldrb	r0, [r2, #0]
     908:	4328      	orrs	r0, r5
     90a:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     90c:	2080      	movs	r0, #128	; 0x80
     90e:	0400      	lsls	r0, r0, #16
     910:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     912:	2020      	movs	r0, #32
     914:	780b      	ldrb	r3, [r1, #0]
     916:	4033      	ands	r3, r6
     918:	4303      	orrs	r3, r0
     91a:	700b      	strb	r3, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     91c:	7813      	ldrb	r3, [r2, #0]
    pinOut(TxPo);
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);
	
	delay_ms(200);
     91e:	30a8      	adds	r0, #168	; 0xa8
     920:	4323      	orrs	r3, r4
     922:	7013      	strb	r3, [r2, #0]
     924:	4b24      	ldr	r3, [pc, #144]	; (9b8 <init+0x420>)
     926:	4798      	blx	r3

    sercomClockEnable(SPI2, 3, 4);
     928:	4f24      	ldr	r7, [pc, #144]	; (9bc <init+0x424>)
     92a:	0028      	movs	r0, r5
     92c:	2204      	movs	r2, #4
     92e:	2103      	movs	r1, #3
     930:	47b8      	blx	r7
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 0x00);
     932:	2300      	movs	r3, #0
     934:	4e22      	ldr	r6, [pc, #136]	; (9c0 <init+0x428>)
     936:	9301      	str	r3, [sp, #4]
     938:	9300      	str	r3, [sp, #0]
     93a:	0021      	movs	r1, r4
     93c:	0028      	movs	r0, r5
     93e:	2203      	movs	r2, #3
     940:	47b0      	blx	r6

    sercomClockEnable(SPI0, 3, 4);
     942:	2204      	movs	r2, #4
     944:	2103      	movs	r1, #3
     946:	2000      	movs	r0, #0
     948:	47b8      	blx	r7
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     94a:	2300      	movs	r3, #0
     94c:	2103      	movs	r1, #3
     94e:	9301      	str	r3, [sp, #4]
     950:	9300      	str	r3, [sp, #0]
     952:	001a      	movs	r2, r3
     954:	0018      	movs	r0, r3
     956:	47b0      	blx	r6

    sercomClockEnable(SPI1, 3, 4);
     958:	0020      	movs	r0, r4
     95a:	2204      	movs	r2, #4
     95c:	2103      	movs	r1, #3
     95e:	47b8      	blx	r7
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     960:	2300      	movs	r3, #0
     962:	0020      	movs	r0, r4
     964:	9301      	str	r3, [sp, #4]
     966:	9300      	str	r3, [sp, #0]
     968:	001a      	movs	r2, r3
     96a:	2103      	movs	r1, #3
     96c:	47b0      	blx	r6

    sercomClockEnable(USART3, 4, 8);
     96e:	2208      	movs	r2, #8
     970:	2104      	movs	r1, #4
     972:	2003      	movs	r0, #3
     974:	47b8      	blx	r7
    sercomUartInit(USART3,1,0,19200);
     976:	2396      	movs	r3, #150	; 0x96
     978:	0021      	movs	r1, r4
     97a:	2200      	movs	r2, #0
     97c:	2003      	movs	r0, #3
     97e:	01db      	lsls	r3, r3, #7
     980:	4c10      	ldr	r4, [pc, #64]	; (9c4 <init+0x42c>)
     982:	47a0      	blx	r4

    TC4Init();
     984:	4b10      	ldr	r3, [pc, #64]	; (9c8 <init+0x430>)
     986:	4798      	blx	r3
    TC5Init();
     988:	4b10      	ldr	r3, [pc, #64]	; (9cc <init+0x434>)
     98a:	4798      	blx	r3
}
     98c:	b005      	add	sp, #20
     98e:	e01f      	b.n	9d0 <init+0x438>
     990:	41004000 	.word	0x41004000
     994:	40000400 	.word	0x40000400
     998:	000001d5 	.word	0x000001d5
     99c:	00001021 	.word	0x00001021
     9a0:	00000f21 	.word	0x00000f21
     9a4:	00001095 	.word	0x00001095
     9a8:	00000d41 	.word	0x00000d41
     9ac:	41004400 	.word	0x41004400
     9b0:	41004488 	.word	0x41004488
     9b4:	200002ac 	.word	0x200002ac
     9b8:	000010f5 	.word	0x000010f5
     9bc:	00002c99 	.word	0x00002c99
     9c0:	00002cfd 	.word	0x00002cfd
     9c4:	00002d61 	.word	0x00002d61
     9c8:	00001175 	.word	0x00001175
     9cc:	000011dd 	.word	0x000011dd
     9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9d2:	46c0      	nop			; (mov r8, r8)

000009d4 <main>:


int main(void) {
     9d4:	b510      	push	{r4, lr}

    init();
     9d6:	4b12      	ldr	r3, [pc, #72]	; (a20 <main+0x4c>)
     9d8:	4798      	blx	r3

    initMS5803Barometer();
     9da:	4b12      	ldr	r3, [pc, #72]	; (a24 <main+0x50>)
     9dc:	4798      	blx	r3
    IMUinit();
     9de:	4b12      	ldr	r3, [pc, #72]	; (a28 <main+0x54>)
     9e0:	4798      	blx	r3

    computeKalmanGains();
     9e2:	4b12      	ldr	r3, [pc, #72]	; (a2c <main+0x58>)
     9e4:	4798      	blx	r3

    sampleTick();
     9e6:	4c12      	ldr	r4, [pc, #72]	; (a30 <main+0x5c>)
     9e8:	47a0      	blx	r4

    POST();
     9ea:	4b12      	ldr	r3, [pc, #72]	; (a34 <main+0x60>)
     9ec:	4798      	blx	r3

    isItPointingUp();
     9ee:	4b12      	ldr	r3, [pc, #72]	; (a38 <main+0x64>)
     9f0:	4798      	blx	r3

    getSettings();
     9f2:	4b12      	ldr	r3, [pc, #72]	; (a3c <main+0x68>)
     9f4:	4798      	blx	r3

    //beepNumber(12345);


    beep(800);
     9f6:	20c8      	movs	r0, #200	; 0xc8
     9f8:	4b11      	ldr	r3, [pc, #68]	; (a40 <main+0x6c>)
     9fa:	0080      	lsls	r0, r0, #2
     9fc:	4798      	blx	r3

    startupTick = millis();
     9fe:	4b11      	ldr	r3, [pc, #68]	; (a44 <main+0x70>)
     a00:	4798      	blx	r3
     a02:	4b11      	ldr	r3, [pc, #68]	; (a48 <main+0x74>)
     a04:	6018      	str	r0, [r3, #0]

    while (1) {
        if (takeSample()) {
     a06:	4b11      	ldr	r3, [pc, #68]	; (a4c <main+0x78>)
     a08:	4798      	blx	r3
     a0a:	2800      	cmp	r0, #0
     a0c:	d0fb      	beq.n	a06 <main+0x32>
            sampleTick();
     a0e:	47a0      	blx	r4
            flight();
     a10:	4b0f      	ldr	r3, [pc, #60]	; (a50 <main+0x7c>)
     a12:	4798      	blx	r3
            igniterTick();
     a14:	4b0f      	ldr	r3, [pc, #60]	; (a54 <main+0x80>)
     a16:	4798      	blx	r3
            computeKalmanStates();
     a18:	4b0f      	ldr	r3, [pc, #60]	; (a58 <main+0x84>)
     a1a:	4798      	blx	r3
     a1c:	e7f3      	b.n	a06 <main+0x32>
     a1e:	46c0      	nop			; (mov r8, r8)
     a20:	00000599 	.word	0x00000599
     a24:	00000559 	.word	0x00000559
     a28:	00000a75 	.word	0x00000a75
     a2c:	000017ad 	.word	0x000017ad
     a30:	00002989 	.word	0x00002989
     a34:	00000c49 	.word	0x00000c49
     a38:	0000154d 	.word	0x0000154d
     a3c:	00002f09 	.word	0x00002f09
     a40:	00000e25 	.word	0x00000e25
     a44:	00001141 	.word	0x00001141
     a48:	20000154 	.word	0x20000154
     a4c:	00002971 	.word	0x00002971
     a50:	00001245 	.word	0x00001245
     a54:	00001621 	.word	0x00001621
     a58:	00002219 	.word	0x00002219

00000a5c <HardFault_Handler>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
     a5c:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
     a60:	4a02      	ldr	r2, [pc, #8]	; (a6c <HardFault_Handler+0x10>)
     a62:	4b03      	ldr	r3, [pc, #12]	; (a70 <HardFault_Handler+0x14>)
     a64:	60da      	str	r2, [r3, #12]
     a66:	f3bf 8f4f 	dsb	sy
     a6a:	e7fe      	b.n	a6a <HardFault_Handler+0xe>
     a6c:	05fa0004 	.word	0x05fa0004
     a70:	e000ed00 	.word	0xe000ed00

00000a74 <IMUinit>:
extern uint32_t _ezero;
extern uint32_t _sstack;
extern uint32_t _estack;


void IMUinit() {
     a74:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a76:	4c08      	ldr	r4, [pc, #32]	; (a98 <IMUinit+0x24>)
     a78:	2580      	movs	r5, #128	; 0x80
     a7a:	0023      	movs	r3, r4
     a7c:	00ed      	lsls	r5, r5, #3
     a7e:	3394      	adds	r3, #148	; 0x94
     a80:	601d      	str	r5, [r3, #0]

    pinLow(cs_accel);
    spiDataOut(SPI0, BMI_ACCEL_PMU_RANGE);
     a82:	4e06      	ldr	r6, [pc, #24]	; (a9c <IMUinit+0x28>)
     a84:	210f      	movs	r1, #15
     a86:	2000      	movs	r0, #0
     a88:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a8a:	3498      	adds	r4, #152	; 0x98
    spiDataOut(SPI0, BMI_ACCEL_16G_RANGE);
     a8c:	210c      	movs	r1, #12
     a8e:	2000      	movs	r0, #0
     a90:	47b0      	blx	r6
     a92:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     a94:	bd70      	pop	{r4, r5, r6, pc}
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	41004400 	.word	0x41004400
     a9c:	00002dc1 	.word	0x00002dc1

00000aa0 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     aa0:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     aa2:	4b09      	ldr	r3, [pc, #36]	; (ac8 <USARTconnectionAvaliable+0x28>)
     aa4:	7e1c      	ldrb	r4, [r3, #24]
     aa6:	0764      	lsls	r4, r4, #29
     aa8:	0fe4      	lsrs	r4, r4, #31
     aaa:	2c01      	cmp	r4, #1
     aac:	d001      	beq.n	ab2 <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     aae:	2000      	movs	r0, #0
     ab0:	e009      	b.n	ac6 <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     ab2:	2003      	movs	r0, #3
     ab4:	4b05      	ldr	r3, [pc, #20]	; (acc <USARTconnectionAvaliable+0x2c>)
     ab6:	4798      	blx	r3
     ab8:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     aba:	2948      	cmp	r1, #72	; 0x48
     abc:	d1f7      	bne.n	aae <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     abe:	2003      	movs	r0, #3
     ac0:	4b03      	ldr	r3, [pc, #12]	; (ad0 <USARTconnectionAvaliable+0x30>)
     ac2:	4798      	blx	r3
            return true;
     ac4:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     ac6:	bd10      	pop	{r4, pc}
     ac8:	42001400 	.word	0x42001400
     acc:	00002e0d 	.word	0x00002e0d
     ad0:	00002df5 	.word	0x00002df5

00000ad4 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ad6:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ad8:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ada:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     adc:	1a09      	subs	r1, r1, r0
     ade:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ae0:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     ae2:	b28b      	uxth	r3, r1
     ae4:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ae6:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     ae8:	a902      	add	r1, sp, #8
     aea:	0028      	movs	r0, r5
     aec:	4b09      	ldr	r3, [pc, #36]	; (b14 <sendTheasePagesToComputer+0x40>)
     aee:	4798      	blx	r3
     af0:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     af2:	ab02      	add	r3, sp, #8
     af4:	5d99      	ldrb	r1, [r3, r6]
     af6:	2003      	movs	r0, #3
     af8:	4b07      	ldr	r3, [pc, #28]	; (b18 <sendTheasePagesToComputer+0x44>)
     afa:	3601      	adds	r6, #1
     afc:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     afe:	42be      	cmp	r6, r7
     b00:	d1f7      	bne.n	af2 <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b02:	3401      	adds	r4, #1
     b04:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b06:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b08:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b0a:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b0c:	42a3      	cmp	r3, r4
     b0e:	d2eb      	bcs.n	ae8 <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     b10:	b043      	add	sp, #268	; 0x10c
     b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b14:	0000035d 	.word	0x0000035d
     b18:	00002df5 	.word	0x00002df5

00000b1c <altitudeAGL>:

int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
     b1c:	4b07      	ldr	r3, [pc, #28]	; (b3c <altitudeAGL+0x20>)

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}

int32_t altitudeAGL() {
     b1e:	b510      	push	{r4, lr}
    return altitude - offsets.groundOffset;
     b20:	6998      	ldr	r0, [r3, #24]
     b22:	4b07      	ldr	r3, [pc, #28]	; (b40 <altitudeAGL+0x24>)
     b24:	4798      	blx	r3
     b26:	000b      	movs	r3, r1
     b28:	4906      	ldr	r1, [pc, #24]	; (b44 <altitudeAGL+0x28>)
     b2a:	0002      	movs	r2, r0
     b2c:	6808      	ldr	r0, [r1, #0]
     b2e:	6849      	ldr	r1, [r1, #4]
     b30:	4c05      	ldr	r4, [pc, #20]	; (b48 <altitudeAGL+0x2c>)
     b32:	47a0      	blx	r4
     b34:	4b05      	ldr	r3, [pc, #20]	; (b4c <altitudeAGL+0x30>)
     b36:	4798      	blx	r3
}
     b38:	bd10      	pop	{r4, pc}
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	20000108 	.word	0x20000108
     b40:	00006321 	.word	0x00006321
     b44:	200002e0 	.word	0x200002e0
     b48:	00005b49 	.word	0x00005b49
     b4c:	00006231 	.word	0x00006231

00000b50 <unplugged>:


bool unplugged() {
    if (sample.voltage.batFloat < 3.3) {
     b50:	4b07      	ldr	r3, [pc, #28]	; (b70 <unplugged+0x20>)
int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
}


bool unplugged() {
     b52:	b570      	push	{r4, r5, r6, lr}
     b54:	68d8      	ldr	r0, [r3, #12]
     b56:	4b07      	ldr	r3, [pc, #28]	; (b74 <unplugged+0x24>)
     b58:	4798      	blx	r3
     b5a:	4a07      	ldr	r2, [pc, #28]	; (b78 <unplugged+0x28>)
     b5c:	4b07      	ldr	r3, [pc, #28]	; (b7c <unplugged+0x2c>)
     b5e:	4d08      	ldr	r5, [pc, #32]	; (b80 <unplugged+0x30>)
     b60:	2401      	movs	r4, #1
     b62:	47a8      	blx	r5
     b64:	2800      	cmp	r0, #0
     b66:	d100      	bne.n	b6a <unplugged+0x1a>
     b68:	1c04      	adds	r4, r0, #0
     b6a:	b2e0      	uxtb	r0, r4
    if (sample.voltage.batFloat < 3.3) {
        return true;
    } else {
        return false;
    }
}
     b6c:	bd70      	pop	{r4, r5, r6, pc}
     b6e:	46c0      	nop			; (mov r8, r8)
     b70:	20000578 	.word	0x20000578
     b74:	00006391 	.word	0x00006391
     b78:	66666666 	.word	0x66666666
     b7c:	400a6666 	.word	0x400a6666
     b80:	00004465 	.word	0x00004465

00000b84 <shutDown>:

void shutDown() {
     b84:	b510      	push	{r4, lr}


    delay_ms(100);
     b86:	2064      	movs	r0, #100	; 0x64
     b88:	4b14      	ldr	r3, [pc, #80]	; (bdc <shutDown+0x58>)
     b8a:	4798      	blx	r3
    TC4->COUNT8.CTRLA.reg = 0;
     b8c:	2300      	movs	r3, #0

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     b8e:	2180      	movs	r1, #128	; 0x80
     b90:	4a13      	ldr	r2, [pc, #76]	; (be0 <shutDown+0x5c>)
     b92:	0309      	lsls	r1, r1, #12
     b94:	8013      	strh	r3, [r2, #0]
    TC5->COUNT8.CTRLA.reg = 0;
     b96:	4a13      	ldr	r2, [pc, #76]	; (be4 <shutDown+0x60>)
     b98:	2480      	movs	r4, #128	; 0x80
     b9a:	8013      	strh	r3, [r2, #0]
     b9c:	4a12      	ldr	r2, [pc, #72]	; (be8 <shutDown+0x64>)
    NVIC_DisableIRQ(TC4_IRQn);
    NVIC_DisableIRQ(TC5_IRQn);
    NVIC_DisableIRQ(RTC_IRQn);
    RTC->MODE1.CTRL.bit.ENABLE = 0;
     b9e:	2002      	movs	r0, #2
     ba0:	67d1      	str	r1, [r2, #124]	; 0x7c
     ba2:	2108      	movs	r1, #8
     ba4:	0364      	lsls	r4, r4, #13
     ba6:	67d4      	str	r4, [r2, #124]	; 0x7c
     ba8:	67d1      	str	r1, [r2, #124]	; 0x7c
     baa:	4a10      	ldr	r2, [pc, #64]	; (bec <shutDown+0x68>)
     bac:	8811      	ldrh	r1, [r2, #0]
     bae:	4381      	bics	r1, r0
     bb0:	8011      	strh	r1, [r2, #0]
    SysTick->CTRL = 0;
     bb2:	4a0f      	ldr	r2, [pc, #60]	; (bf0 <shutDown+0x6c>)
     bb4:	6013      	str	r3, [r2, #0]
    PM->APBAMASK.reg = 0;
     bb6:	4a0f      	ldr	r2, [pc, #60]	; (bf4 <shutDown+0x70>)
     bb8:	6193      	str	r3, [r2, #24]

    //turn off sercom clocks
    //GCLK->CLKCTRL.reg

    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     bba:	2280      	movs	r2, #128	; 0x80
     bbc:	4b0e      	ldr	r3, [pc, #56]	; (bf8 <shutDown+0x74>)
     bbe:	0052      	lsls	r2, r2, #1
     bc0:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_OSC8M) | (GCLK_GENCTRL_GENEN));
     bc2:	2283      	movs	r2, #131	; 0x83
     bc4:	0252      	lsls	r2, r2, #9
     bc6:	605a      	str	r2, [r3, #4]
     bc8:	4b0c      	ldr	r3, [pc, #48]	; (bfc <shutDown+0x78>)
//     NVMCTRL->CTRLB.bit.MANW = 1;
//
//     /* Initialize the C library */
//     __libc_init_array();

    SYSCTRL->BOD33.reg = SYSCTRL_BOD33_PSEL_DIV8 | SYSCTRL_BOD33_ACTION_RESET | SYSCTRL_BOD33_LEVEL(60);
     bca:	4a0d      	ldr	r2, [pc, #52]	; (c00 <shutDown+0x7c>)
     bcc:	619c      	str	r4, [r3, #24]
     bce:	4b0d      	ldr	r3, [pc, #52]	; (c04 <shutDown+0x80>)
     bd0:	635a      	str	r2, [r3, #52]	; 0x34

    SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
     bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
     bd4:	4302      	orrs	r2, r0
     bd6:	635a      	str	r2, [r3, #52]	; 0x34
     bd8:	e7fe      	b.n	bd8 <shutDown+0x54>
     bda:	46c0      	nop			; (mov r8, r8)
     bdc:	000010f5 	.word	0x000010f5
     be0:	42003000 	.word	0x42003000
     be4:	42003400 	.word	0x42003400
     be8:	e000e104 	.word	0xe000e104
     bec:	40001400 	.word	0x40001400
     bf0:	e000e010 	.word	0xe000e010
     bf4:	40000400 	.word	0x40000400
     bf8:	40000c00 	.word	0x40000c00
     bfc:	41004400 	.word	0x41004400
     c00:	003c2008 	.word	0x003c2008
     c04:	40000800 	.word	0x40000800

00000c08 <finishFlight>:
    }
}

void finishFlight() {

    flightState = flightIdle;
     c08:	2201      	movs	r2, #1
     c0a:	4b05      	ldr	r3, [pc, #20]	; (c20 <finishFlight+0x18>)
    while(1) {

    }
}

void finishFlight() {
     c0c:	b510      	push	{r4, lr}

    flightState = flightIdle;
     c0e:	701a      	strb	r2, [r3, #0]
    AT25SFHoldTillReady();
     c10:	4b04      	ldr	r3, [pc, #16]	; (c24 <finishFlight+0x1c>)
     c12:	4798      	blx	r3
    writeFlightEndAddress( );
     c14:	4b04      	ldr	r3, [pc, #16]	; (c28 <finishFlight+0x20>)
     c16:	4798      	blx	r3
    unpluggedJingle();
     c18:	4b04      	ldr	r3, [pc, #16]	; (c2c <finishFlight+0x24>)
     c1a:	4798      	blx	r3
    shutDown();
     c1c:	4b04      	ldr	r3, [pc, #16]	; (c30 <finishFlight+0x28>)
     c1e:	4798      	blx	r3
     c20:	20000164 	.word	0x20000164
     c24:	000001e5 	.word	0x000001e5
     c28:	00002805 	.word	0x00002805
     c2c:	00000e99 	.word	0x00000e99
     c30:	00000b85 	.word	0x00000b85

00000c34 <finishFromPad>:

}

void finishFromPad() {
    unpluggedJingle();
     c34:	4b02      	ldr	r3, [pc, #8]	; (c40 <finishFromPad+0xc>)
    unpluggedJingle();
    shutDown();

}

void finishFromPad() {
     c36:	b510      	push	{r4, lr}
    unpluggedJingle();
     c38:	4798      	blx	r3
    shutDown();
     c3a:	4b02      	ldr	r3, [pc, #8]	; (c44 <finishFromPad+0x10>)
     c3c:	4798      	blx	r3
     c3e:	46c0      	nop			; (mov r8, r8)
     c40:	00000e99 	.word	0x00000e99
     c44:	00000b85 	.word	0x00000b85

00000c48 <POST>:
}


void POST() {
     c48:	b5f0      	push	{r4, r5, r6, r7, lr}

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     c4a:	4b32      	ldr	r3, [pc, #200]	; (d14 <POST+0xcc>)
    unpluggedJingle();
    shutDown();
}


void POST() {
     c4c:	b085      	sub	sp, #20

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     c4e:	4798      	blx	r3
    if (crc != coefficients_[7]) {
     c50:	4b31      	ldr	r3, [pc, #196]	; (d18 <POST+0xd0>)
     c52:	b280      	uxth	r0, r0
     c54:	89db      	ldrh	r3, [r3, #14]
        postFailed = true;
        failType = 1;
     c56:	2401      	movs	r4, #1
    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
    if (crc != coefficients_[7]) {
     c58:	4283      	cmp	r3, r0
     c5a:	d100      	bne.n	c5e <POST+0x16>

void POST() {
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
    u8_t failType = 0;
     c5c:	2400      	movs	r4, #0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c5e:	2780      	movs	r7, #128	; 0x80
     c60:	4d2e      	ldr	r5, [pc, #184]	; (d1c <POST+0xd4>)
     c62:	02ff      	lsls	r7, r7, #11
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    spiDataOut(SPI1,0x9f); // read id and mfg code
     c64:	219f      	movs	r1, #159	; 0x9f
     c66:	4b2e      	ldr	r3, [pc, #184]	; (d20 <POST+0xd8>)


void POST() {
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
     c68:	9401      	str	r4, [sp, #4]
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    spiDataOut(SPI1,0x9f); // read id and mfg code
     c6a:	2001      	movs	r0, #1
     c6c:	616f      	str	r7, [r5, #20]
     c6e:	4798      	blx	r3
    u8_t mfgID = spiDataIn(SPI1);
     c70:	4e2c      	ldr	r6, [pc, #176]	; (d24 <POST+0xdc>)
     c72:	2001      	movs	r0, #1
     c74:	47b0      	blx	r6
     c76:	9002      	str	r0, [sp, #8]
    u8_t deviceID1 = spiDataIn(SPI1);
     c78:	2001      	movs	r0, #1
     c7a:	47b0      	blx	r6
     c7c:	9003      	str	r0, [sp, #12]
    u8_t deviceID2 = spiDataIn(SPI1);
     c7e:	2001      	movs	r0, #1
     c80:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c82:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    if ( (mfgID != 0x1f) & (deviceID1 != 0x86) & (deviceID2 != 0x01)) {
     c84:	9b02      	ldr	r3, [sp, #8]
     c86:	3b1f      	subs	r3, #31
     c88:	1e5a      	subs	r2, r3, #1
     c8a:	4193      	sbcs	r3, r2
     c8c:	0019      	movs	r1, r3
     c8e:	9b03      	ldr	r3, [sp, #12]
     c90:	3b86      	subs	r3, #134	; 0x86
     c92:	1e5a      	subs	r2, r3, #1
     c94:	4193      	sbcs	r3, r2
     c96:	4a22      	ldr	r2, [pc, #136]	; (d20 <POST+0xd8>)
     c98:	9202      	str	r2, [sp, #8]
     c9a:	420b      	tst	r3, r1
     c9c:	d004      	beq.n	ca8 <POST+0x60>
     c9e:	2801      	cmp	r0, #1
     ca0:	d002      	beq.n	ca8 <POST+0x60>
        postFailed = true;
     ca2:	2301      	movs	r3, #1
        failType = 2;
     ca4:	2402      	movs	r4, #2
    u8_t deviceID1 = spiDataIn(SPI1);
    u8_t deviceID2 = spiDataIn(SPI1);
    pinHigh(cs_mem);

    if ( (mfgID != 0x1f) & (deviceID1 != 0x86) & (deviceID2 != 0x01)) {
        postFailed = true;
     ca6:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ca8:	2780      	movs	r7, #128	; 0x80
     caa:	4b1f      	ldr	r3, [pc, #124]	; (d28 <POST+0xe0>)
     cac:	00ff      	lsls	r7, r7, #3
     cae:	601f      	str	r7, [r3, #0]
        failType = 2;
    }

    //Accelerometer Post
    pinLow(cs_accel);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     cb0:	9b02      	ldr	r3, [sp, #8]
     cb2:	2180      	movs	r1, #128	; 0x80
     cb4:	2000      	movs	r0, #0
     cb6:	4798      	blx	r3
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
     cb8:	21ff      	movs	r1, #255	; 0xff
     cba:	2000      	movs	r0, #0
     cbc:	4e1b      	ldr	r6, [pc, #108]	; (d2c <POST+0xe4>)
     cbe:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cc0:	4b1b      	ldr	r3, [pc, #108]	; (d30 <POST+0xe8>)
     cc2:	601f      	str	r7, [r3, #0]
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
     cc4:	28fa      	cmp	r0, #250	; 0xfa
     cc6:	d002      	beq.n	cce <POST+0x86>
        postFailed = true;
     cc8:	2301      	movs	r3, #1
        failType = 3;
     cca:	2403      	movs	r4, #3
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
        postFailed = true;
     ccc:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cce:	616f      	str	r7, [r5, #20]
        failType = 3;
    }

    //Gyro Post
    pinLow(cs_gyro);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     cd0:	2180      	movs	r1, #128	; 0x80
     cd2:	2000      	movs	r0, #0
     cd4:	9b02      	ldr	r3, [sp, #8]
     cd6:	4798      	blx	r3
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
     cd8:	21ff      	movs	r1, #255	; 0xff
     cda:	2000      	movs	r0, #0
     cdc:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cde:	61af      	str	r7, [r5, #24]
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
     ce0:	280f      	cmp	r0, #15
     ce2:	d103      	bne.n	cec <POST+0xa4>
    }

    //Analog Accelerometer Post


    if (postFailed) {
     ce4:	9b01      	ldr	r3, [sp, #4]
     ce6:	2b00      	cmp	r3, #0
     ce8:	d101      	bne.n	cee <POST+0xa6>
     cea:	e011      	b.n	d10 <POST+0xc8>
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
        postFailed = true;
        failType = 4;
     cec:	2404      	movs	r4, #4

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     cee:	0025      	movs	r5, r4
     cf0:	4e10      	ldr	r6, [pc, #64]	; (d34 <POST+0xec>)
     cf2:	2d00      	cmp	r5, #0
     cf4:	d009      	beq.n	d0a <POST+0xc2>
                beep(300);
     cf6:	2096      	movs	r0, #150	; 0x96
     cf8:	4b0f      	ldr	r3, [pc, #60]	; (d38 <POST+0xf0>)
     cfa:	0040      	lsls	r0, r0, #1
     cfc:	4798      	blx	r3
                delay_ms(300);
     cfe:	2096      	movs	r0, #150	; 0x96

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     d00:	3d01      	subs	r5, #1
                beep(300);
                delay_ms(300);
     d02:	0040      	lsls	r0, r0, #1
     d04:	47b0      	blx	r6

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     d06:	b2ed      	uxtb	r5, r5
     d08:	e7f2      	b.n	cf0 <POST+0xa8>
                beep(300);
                delay_ms(300);
            }
            delay_ms(1500);
     d0a:	480c      	ldr	r0, [pc, #48]	; (d3c <POST+0xf4>)
     d0c:	47b0      	blx	r6
        }
     d0e:	e7ee      	b.n	cee <POST+0xa6>
    }
}
     d10:	b005      	add	sp, #20
     d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d14:	00000589 	.word	0x00000589
     d18:	20000266 	.word	0x20000266
     d1c:	41004400 	.word	0x41004400
     d20:	00002dc1 	.word	0x00002dc1
     d24:	00002dd9 	.word	0x00002dd9
     d28:	41004494 	.word	0x41004494
     d2c:	00002da9 	.word	0x00002da9
     d30:	41004498 	.word	0x41004498
     d34:	000010f5 	.word	0x000010f5
     d38:	00000e25 	.word	0x00000e25
     d3c:	000005dc 	.word	0x000005dc

00000d40 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     d40:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     d42:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     d44:	4a10      	ldr	r2, [pc, #64]	; (d88 <adcInit+0x48>)
     d46:	0249      	lsls	r1, r1, #9
     d48:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     d4a:	4810      	ldr	r0, [pc, #64]	; (d8c <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     d4c:	430b      	orrs	r3, r1
     d4e:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     d50:	23e0      	movs	r3, #224	; 0xe0
     d52:	490f      	ldr	r1, [pc, #60]	; (d90 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     d54:	4a0f      	ldr	r2, [pc, #60]	; (d94 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     d56:	00db      	lsls	r3, r3, #3
     d58:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     d5a:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     d5c:	4a0e      	ldr	r2, [pc, #56]	; (d98 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     d5e:	6812      	ldr	r2, [r2, #0]
     d60:	0150      	lsls	r0, r2, #5
     d62:	4018      	ands	r0, r3
     d64:	4b0d      	ldr	r3, [pc, #52]	; (d9c <adcInit+0x5c>)
     d66:	0154      	lsls	r4, r2, #5
     d68:	681a      	ldr	r2, [r3, #0]
     d6a:	0ed3      	lsrs	r3, r2, #27
     d6c:	4323      	orrs	r3, r4
     d6e:	b2da      	uxtb	r2, r3
     d70:	0003      	movs	r3, r0
     d72:	4313      	orrs	r3, r2
     d74:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC0;
     d76:	2301      	movs	r3, #1
     d78:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     d7a:	18db      	adds	r3, r3, r3
     d7c:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     d7e:	7e4b      	ldrb	r3, [r1, #25]
     d80:	b25b      	sxtb	r3, r3
     d82:	2b00      	cmp	r3, #0
     d84:	dbfb      	blt.n	d7e <adcInit+0x3e>
}
     d86:	bd10      	pop	{r4, pc}
     d88:	40000400 	.word	0x40000400
     d8c:	0000401e 	.word	0x0000401e
     d90:	42004000 	.word	0x42004000
     d94:	40000c00 	.word	0x40000c00
     d98:	00806024 	.word	0x00806024
     d9c:	00806020 	.word	0x00806020

00000da0 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     da0:	2202      	movs	r2, #2
     da2:	4b05      	ldr	r3, [pc, #20]	; (db8 <adcSample+0x18>)
     da4:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     da6:	3a01      	subs	r2, #1
     da8:	7e19      	ldrb	r1, [r3, #24]
     daa:	4211      	tst	r1, r2
     dac:	d0fc      	beq.n	da8 <adcSample+0x8>
    return ADC->RESULT.reg;
     dae:	4b02      	ldr	r3, [pc, #8]	; (db8 <adcSample+0x18>)
     db0:	8b58      	ldrh	r0, [r3, #26]
     db2:	b280      	uxth	r0, r0
}
     db4:	4770      	bx	lr
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	42004000 	.word	0x42004000

00000dbc <adc_read>:


u16_t adc_read(Pin p) {
     dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     dbe:	2501      	movs	r5, #1
     dc0:	0c02      	lsrs	r2, r0, #16
     dc2:	b2d4      	uxtb	r4, r2
     dc4:	9000      	str	r0, [sp, #0]
     dc6:	0e00      	lsrs	r0, r0, #24
     dc8:	9101      	str	r1, [sp, #4]
     dca:	0842      	lsrs	r2, r0, #1
     dcc:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     dce:	4911      	ldr	r1, [pc, #68]	; (e14 <adc_read+0x58>)
     dd0:	18d2      	adds	r2, r2, r3
     dd2:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     dd4:	4228      	tst	r0, r5
     dd6:	d005      	beq.n	de4 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     dd8:	210f      	movs	r1, #15
     dda:	7814      	ldrb	r4, [r2, #0]
     ddc:	4021      	ands	r1, r4
     dde:	2410      	movs	r4, #16
     de0:	4321      	orrs	r1, r4
     de2:	e003      	b.n	dec <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     de4:	240f      	movs	r4, #15
     de6:	7811      	ldrb	r1, [r2, #0]
     de8:	43a1      	bics	r1, r4
     dea:	4329      	orrs	r1, r5
     dec:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     dee:	2101      	movs	r1, #1
     df0:	4a09      	ldr	r2, [pc, #36]	; (e18 <adc_read+0x5c>)
     df2:	18c3      	adds	r3, r0, r3
     df4:	189b      	adds	r3, r3, r2
     df6:	781a      	ldrb	r2, [r3, #0]
     df8:	430a      	orrs	r2, r1
     dfa:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     dfc:	466b      	mov	r3, sp
     dfe:	791a      	ldrb	r2, [r3, #4]
     e00:	231f      	movs	r3, #31
     e02:	4013      	ands	r3, r2
     e04:	22c0      	movs	r2, #192	; 0xc0
     e06:	0152      	lsls	r2, r2, #5
     e08:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     e0a:	4a04      	ldr	r2, [pc, #16]	; (e1c <adc_read+0x60>)
     e0c:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     e0e:	4b04      	ldr	r3, [pc, #16]	; (e20 <adc_read+0x64>)
     e10:	4798      	blx	r3
     e12:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     e14:	41004430 	.word	0x41004430
     e18:	41004440 	.word	0x41004440
     e1c:	42004000 	.word	0x42004000
     e20:	00000da1 	.word	0x00000da1

00000e24 <beep>:
#include <util.h>
#include <boardDefines.h>
#include <math.h>


void beep(u16_t toggles) {
     e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     e26:	2380      	movs	r3, #128	; 0x80
     e28:	2780      	movs	r7, #128	; 0x80
     e2a:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     e2c:	2500      	movs	r5, #0
     e2e:	4c0a      	ldr	r4, [pc, #40]	; (e58 <beep+0x34>)
     e30:	035b      	lsls	r3, r3, #13
     e32:	61e3      	str	r3, [r4, #28]
     e34:	03bf      	lsls	r7, r7, #14
     e36:	42b5      	cmp	r5, r6
     e38:	d006      	beq.n	e48 <beep+0x24>
     e3a:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     e3c:	207a      	movs	r0, #122	; 0x7a
     e3e:	4b07      	ldr	r3, [pc, #28]	; (e5c <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     e40:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     e42:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     e44:	b2ad      	uxth	r5, r5
     e46:	e7f6      	b.n	e36 <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e48:	2380      	movs	r3, #128	; 0x80
     e4a:	039b      	lsls	r3, r3, #14
     e4c:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     e4e:	2380      	movs	r3, #128	; 0x80
     e50:	035b      	lsls	r3, r3, #13
     e52:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e56:	46c0      	nop			; (mov r8, r8)
     e58:	41004400 	.word	0x41004400
     e5c:	000010c1 	.word	0x000010c1

00000e60 <startupJingle>:
    }
    beepDigit(number);

}

void startupJingle() {
     e60:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     e62:	2696      	movs	r6, #150	; 0x96
     e64:	0076      	lsls	r6, r6, #1
     e66:	4d0a      	ldr	r5, [pc, #40]	; (e90 <startupJingle+0x30>)
     e68:	0030      	movs	r0, r6
     e6a:	47a8      	blx	r5
    delay_ms(80);
     e6c:	4c09      	ldr	r4, [pc, #36]	; (e94 <startupJingle+0x34>)
     e6e:	2050      	movs	r0, #80	; 0x50
     e70:	47a0      	blx	r4
    beep(300);
     e72:	0030      	movs	r0, r6
     e74:	47a8      	blx	r5
    delay_ms(250);
     e76:	20fa      	movs	r0, #250	; 0xfa
     e78:	47a0      	blx	r4
    beep(300);
     e7a:	0030      	movs	r0, r6
     e7c:	47a8      	blx	r5
    delay_ms(80);
     e7e:	2050      	movs	r0, #80	; 0x50
     e80:	47a0      	blx	r4
    beep(300);
     e82:	0030      	movs	r0, r6
     e84:	47a8      	blx	r5
    delay_ms(500);
     e86:	20fa      	movs	r0, #250	; 0xfa
     e88:	0040      	lsls	r0, r0, #1
     e8a:	47a0      	blx	r4
}
     e8c:	bd70      	pop	{r4, r5, r6, pc}
     e8e:	46c0      	nop			; (mov r8, r8)
     e90:	00000e25 	.word	0x00000e25
     e94:	000010f5 	.word	0x000010f5

00000e98 <unpluggedJingle>:

void unpluggedJingle() {
     e98:	b570      	push	{r4, r5, r6, lr}
    delay_ms(80);
    beep(300);
     e9a:	2696      	movs	r6, #150	; 0x96
    beep(300);
    delay_ms(500);
}

void unpluggedJingle() {
    delay_ms(80);
     e9c:	4c0c      	ldr	r4, [pc, #48]	; (ed0 <unpluggedJingle+0x38>)
    beep(300);
     e9e:	0076      	lsls	r6, r6, #1
    beep(300);
    delay_ms(500);
}

void unpluggedJingle() {
    delay_ms(80);
     ea0:	2050      	movs	r0, #80	; 0x50
     ea2:	47a0      	blx	r4
    beep(300);
     ea4:	4d0b      	ldr	r5, [pc, #44]	; (ed4 <unpluggedJingle+0x3c>)
     ea6:	0030      	movs	r0, r6
     ea8:	47a8      	blx	r5
    delay_ms(80);
     eaa:	2050      	movs	r0, #80	; 0x50
     eac:	47a0      	blx	r4
    beep(300);
     eae:	0030      	movs	r0, r6
     eb0:	47a8      	blx	r5
    delay_ms(80);
     eb2:	2050      	movs	r0, #80	; 0x50
     eb4:	47a0      	blx	r4
    beep(300);
     eb6:	0030      	movs	r0, r6
     eb8:	47a8      	blx	r5
    delay_ms(80);
     eba:	2050      	movs	r0, #80	; 0x50
     ebc:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ebe:	2280      	movs	r2, #128	; 0x80
     ec0:	4b05      	ldr	r3, [pc, #20]	; (ed8 <unpluggedJingle+0x40>)
     ec2:	0392      	lsls	r2, r2, #14
     ec4:	615a      	str	r2, [r3, #20]
     ec6:	2280      	movs	r2, #128	; 0x80
     ec8:	0352      	lsls	r2, r2, #13
     eca:	615a      	str	r2, [r3, #20]
    pinLow(buzzerPin);
    pinLow(LedPin);

}
     ecc:	bd70      	pop	{r4, r5, r6, pc}
     ece:	46c0      	nop			; (mov r8, r8)
     ed0:	000010f5 	.word	0x000010f5
     ed4:	00000e25 	.word	0x00000e25
     ed8:	41004400 	.word	0x41004400

00000edc <dfll_nvm_val>:
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10

uint32_t dfll_nvm_val() {
    uint32_t coarse = ( *((uint32_t *)(NVMCTRL_OTP4)
     edc:	4b08      	ldr	r3, [pc, #32]	; (f00 <dfll_nvm_val+0x24>)
     ede:	6818      	ldr	r0, [r3, #0]
     ee0:	0e80      	lsrs	r0, r0, #26
                          + (NVM_DFLL_COARSE_POS / 32))
                        >> (NVM_DFLL_COARSE_POS % 32))
                      & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     ee2:	283f      	cmp	r0, #63	; 0x3f
     ee4:	d100      	bne.n	ee8 <dfll_nvm_val+0xc>
        coarse = 0x1f;
     ee6:	3820      	subs	r0, #32
    }
    uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
                        + (NVM_DFLL_FINE_POS / 32))
                      >> (NVM_DFLL_FINE_POS % 32))
     ee8:	4b06      	ldr	r3, [pc, #24]	; (f04 <dfll_nvm_val+0x28>)
                    & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     eea:	4a07      	ldr	r2, [pc, #28]	; (f08 <dfll_nvm_val+0x2c>)
                        >> (NVM_DFLL_COARSE_POS % 32))
                      & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
     eec:	681b      	ldr	r3, [r3, #0]
     eee:	059b      	lsls	r3, r3, #22
     ef0:	0d9b      	lsrs	r3, r3, #22
                        + (NVM_DFLL_FINE_POS / 32))
                      >> (NVM_DFLL_FINE_POS % 32))
                    & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     ef2:	4293      	cmp	r3, r2
     ef4:	d100      	bne.n	ef8 <dfll_nvm_val+0x1c>
        fine = 0x1ff;
     ef6:	4b05      	ldr	r3, [pc, #20]	; (f0c <dfll_nvm_val+0x30>)
    }

    return SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     ef8:	0280      	lsls	r0, r0, #10
     efa:	4318      	orrs	r0, r3
}
     efc:	4770      	bx	lr
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	00806024 	.word	0x00806024
     f04:	00806028 	.word	0x00806028
     f08:	000003ff 	.word	0x000003ff
     f0c:	000001ff 	.word	0x000001ff

00000f10 <dfll_wait_for_sync>:

void dfll_wait_for_sync() {
    while (!SYSCTRL->PCLKSR.bit.DFLLRDY);
     f10:	4a02      	ldr	r2, [pc, #8]	; (f1c <dfll_wait_for_sync+0xc>)
     f12:	68d3      	ldr	r3, [r2, #12]
     f14:	06db      	lsls	r3, r3, #27
     f16:	d5fc      	bpl.n	f12 <dfll_wait_for_sync+0x2>
}
     f18:	4770      	bx	lr
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	40000800 	.word	0x40000800

00000f20 <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     f20:	4b27      	ldr	r3, [pc, #156]	; (fc0 <RtcInit+0xa0>)
     f22:	4a28      	ldr	r2, [pc, #160]	; (fc4 <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     f24:	4828      	ldr	r0, [pc, #160]	; (fc8 <RtcInit+0xa8>)
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     f26:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     f28:	4a28      	ldr	r2, [pc, #160]	; (fcc <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     f2a:	6999      	ldr	r1, [r3, #24]
     f2c:	6812      	ldr	r2, [r2, #0]
     f2e:	4001      	ands	r1, r0
     f30:	04d2      	lsls	r2, r2, #19
     f32:	0e52      	lsrs	r2, r2, #25
     f34:	0412      	lsls	r2, r2, #16
     f36:	4311      	orrs	r1, r2
     f38:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     f3a:	4925      	ldr	r1, [pc, #148]	; (fd0 <RtcInit+0xb0>)
     f3c:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     f3e:	6999      	ldr	r1, [r3, #24]
     f40:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     f42:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     f44:	4302      	orrs	r2, r0
     f46:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     f48:	699a      	ldr	r2, [r3, #24]
     f4a:	430a      	orrs	r2, r1
     f4c:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     f4e:	2204      	movs	r2, #4
     f50:	68d9      	ldr	r1, [r3, #12]
     f52:	4211      	tst	r1, r2
     f54:	d0fc      	beq.n	f50 <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     f56:	2281      	movs	r2, #129	; 0x81
     f58:	4b1e      	ldr	r3, [pc, #120]	; (fd4 <RtcInit+0xb4>)
     f5a:	0052      	lsls	r2, r2, #1
     f5c:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     f5e:	4a1e      	ldr	r2, [pc, #120]	; (fd8 <RtcInit+0xb8>)
     f60:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     f62:	785a      	ldrb	r2, [r3, #1]
     f64:	b252      	sxtb	r2, r2
     f66:	2a00      	cmp	r2, #0
     f68:	dbfb      	blt.n	f62 <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     f6a:	4a1c      	ldr	r2, [pc, #112]	; (fdc <RtcInit+0xbc>)
     f6c:	4b19      	ldr	r3, [pc, #100]	; (fd4 <RtcInit+0xb4>)
     f6e:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     f70:	2204      	movs	r2, #4
     f72:	4b1b      	ldr	r3, [pc, #108]	; (fe0 <RtcInit+0xc0>)
     f74:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f76:	7a9a      	ldrb	r2, [r3, #10]
     f78:	4919      	ldr	r1, [pc, #100]	; (fe0 <RtcInit+0xc0>)
     f7a:	09d2      	lsrs	r2, r2, #7
     f7c:	d1fb      	bne.n	f76 <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     f7e:	20a0      	movs	r0, #160	; 0xa0
     f80:	880a      	ldrh	r2, [r1, #0]
     f82:	00c0      	lsls	r0, r0, #3
     f84:	4302      	orrs	r2, r0
     f86:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f88:	7a9a      	ldrb	r2, [r3, #10]
     f8a:	09d2      	lsrs	r2, r2, #7
     f8c:	d1fc      	bne.n	f88 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     f8e:	4915      	ldr	r1, [pc, #84]	; (fe4 <RtcInit+0xc4>)
     f90:	4a13      	ldr	r2, [pc, #76]	; (fe0 <RtcInit+0xc0>)
     f92:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f94:	7a99      	ldrb	r1, [r3, #10]
     f96:	4a12      	ldr	r2, [pc, #72]	; (fe0 <RtcInit+0xc0>)
     f98:	09c9      	lsrs	r1, r1, #7
     f9a:	d1fb      	bne.n	f94 <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     f9c:	8851      	ldrh	r1, [r2, #2]
     f9e:	4812      	ldr	r0, [pc, #72]	; (fe8 <RtcInit+0xc8>)
     fa0:	4301      	orrs	r1, r0
     fa2:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     fa4:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     fa6:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     fa8:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     faa:	8811      	ldrh	r1, [r2, #0]
     fac:	4301      	orrs	r1, r0
     fae:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     fb0:	7a9a      	ldrb	r2, [r3, #10]
     fb2:	09d2      	lsrs	r2, r2, #7
     fb4:	d1fc      	bne.n	fb0 <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     fb6:	4b0d      	ldr	r3, [pc, #52]	; (fec <RtcInit+0xcc>)
     fb8:	3208      	adds	r2, #8
     fba:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     fbc:	4770      	bx	lr
     fbe:	46c0      	nop			; (mov r8, r8)
     fc0:	40000800 	.word	0x40000800
     fc4:	00000606 	.word	0x00000606
     fc8:	ff80ffff 	.word	0xff80ffff
     fcc:	00806024 	.word	0x00806024
     fd0:	00000604 	.word	0x00000604
     fd4:	40000c00 	.word	0x40000c00
     fd8:	00230002 	.word	0x00230002
     fdc:	00004204 	.word	0x00004204
     fe0:	40001400 	.word	0x40001400
     fe4:	000003e6 	.word	0x000003e6
     fe8:	00004010 	.word	0x00004010
     fec:	e000e100 	.word	0xe000e100

00000ff0 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ff0:	230f      	movs	r3, #15
     ff2:	4018      	ands	r0, r3
     ff4:	4b08      	ldr	r3, [pc, #32]	; (1018 <gclkEnable+0x28>)
     ff6:	0212      	lsls	r2, r2, #8
     ff8:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ffa:	23f8      	movs	r3, #248	; 0xf8
     ffc:	0209      	lsls	r1, r1, #8
     ffe:	015b      	lsls	r3, r3, #5
    1000:	4019      	ands	r1, r3
    1002:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    1004:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    1006:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    1008:	4c04      	ldr	r4, [pc, #16]	; (101c <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    100a:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    100c:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    100e:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    1010:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    1012:	6060      	str	r0, [r4, #4]
}
    1014:	bd10      	pop	{r4, pc}
    1016:	46c0      	nop			; (mov r8, r8)
    1018:	00ffff00 	.word	0x00ffff00
    101c:	40000c00 	.word	0x40000c00

00001020 <GclkInit>:
}

void GclkInit(u8_t clk_system) {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1020:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    1022:	211e      	movs	r1, #30
void gclk_enable(uint32_t id, uint32_t src, uint32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
}

void GclkInit(u8_t clk_system) {
    1024:	b570      	push	{r4, r5, r6, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1026:	4c12      	ldr	r4, [pc, #72]	; (1070 <GclkInit+0x50>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    1028:	4a12      	ldr	r2, [pc, #72]	; (1074 <GclkInit+0x54>)
}

void GclkInit(u8_t clk_system) {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    102a:	00db      	lsls	r3, r3, #3
    102c:	60a3      	str	r3, [r4, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    102e:	6853      	ldr	r3, [r2, #4]
void gclk_enable(uint32_t id, uint32_t src, uint32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
}

void GclkInit(u8_t clk_system) {
    1030:	0005      	movs	r5, r0


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    1032:	438b      	bics	r3, r1
    1034:	391a      	subs	r1, #26
    1036:	430b      	orrs	r3, r1
    1038:	6053      	str	r3, [r2, #4]

    // Initialize GCLK
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
    103a:	4a0f      	ldr	r2, [pc, #60]	; (1078 <GclkInit+0x58>)
    103c:	3104      	adds	r1, #4
    103e:	6993      	ldr	r3, [r2, #24]
    1040:	430b      	orrs	r3, r1
    1042:	6193      	str	r3, [r2, #24]
    GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1044:	2301      	movs	r3, #1
    1046:	4a0d      	ldr	r2, [pc, #52]	; (107c <GclkInit+0x5c>)
    1048:	7013      	strb	r3, [r2, #0]
    while (GCLK->CTRL.reg & GCLK_CTRL_SWRST);
    104a:	7811      	ldrb	r1, [r2, #0]
    104c:	4219      	tst	r1, r3
    104e:	d1fc      	bne.n	104a <GclkInit+0x2a>

    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1050:	4b0b      	ldr	r3, [pc, #44]	; (1080 <GclkInit+0x60>)
    dfll_wait_for_sync();
    1052:	4e0c      	ldr	r6, [pc, #48]	; (1084 <GclkInit+0x64>)
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
    GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    while (GCLK->CTRL.reg & GCLK_CTRL_SWRST);

    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1054:	84a3      	strh	r3, [r4, #36]	; 0x24
    dfll_wait_for_sync();
    1056:	47b0      	blx	r6
    SYSCTRL->DFLLVAL.reg = dfll_nvm_val();
    1058:	4b0b      	ldr	r3, [pc, #44]	; (1088 <GclkInit+0x68>)
    105a:	4798      	blx	r3
    105c:	62a0      	str	r0, [r4, #40]	; 0x28
    dfll_wait_for_sync();
    105e:	47b0      	blx	r6
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl;
    1060:	4b0a      	ldr	r3, [pc, #40]	; (108c <GclkInit+0x6c>)


    //For generic clock generator 0, select the DFLL48 Clock as input
    gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
    1062:	0028      	movs	r0, r5
    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    dfll_wait_for_sync();
    SYSCTRL->DFLLVAL.reg = dfll_nvm_val();
    dfll_wait_for_sync();
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl;
    1064:	84a3      	strh	r3, [r4, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
    1066:	2201      	movs	r2, #1
    1068:	2107      	movs	r1, #7
    106a:	4b09      	ldr	r3, [pc, #36]	; (1090 <GclkInit+0x70>)
    106c:	4798      	blx	r3
}
    106e:	bd70      	pop	{r4, r5, r6, pc}
    1070:	40000800 	.word	0x40000800
    1074:	41004000 	.word	0x41004000
    1078:	40000400 	.word	0x40000400
    107c:	40000c00 	.word	0x40000c00
    1080:	00000502 	.word	0x00000502
    1084:	00000f11 	.word	0x00000f11
    1088:	00000edd 	.word	0x00000edd
    108c:	00000582 	.word	0x00000582
    1090:	00000ff1 	.word	0x00000ff1

00001094 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
    cycles_per_us = cycles_per_ms / 1000;
    1094:	2230      	movs	r2, #48	; 0x30
}


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
    1096:	4b06      	ldr	r3, [pc, #24]	; (10b0 <delayInit+0x1c>)
    cycles_per_us = cycles_per_ms / 1000;
    1098:	4906      	ldr	r1, [pc, #24]	; (10b4 <delayInit+0x20>)
    109a:	c306      	stmia	r3!, {r1, r2}
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    109c:	4a06      	ldr	r2, [pc, #24]	; (10b8 <delayInit+0x24>)
    109e:	6a13      	ldr	r3, [r2, #32]
    10a0:	021b      	lsls	r3, r3, #8
    10a2:	0a1b      	lsrs	r3, r3, #8
    10a4:	6213      	str	r3, [r2, #32]

    NVIC_SetPriority(SysTick_IRQn, 0x0);

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    10a6:	2205      	movs	r2, #5
    10a8:	4b04      	ldr	r3, [pc, #16]	; (10bc <delayInit+0x28>)
    10aa:	601a      	str	r2, [r3, #0]
}
    10ac:	4770      	bx	lr
    10ae:	46c0      	nop			; (mov r8, r8)
    10b0:	20000004 	.word	0x20000004
    10b4:	0000bb80 	.word	0x0000bb80
    10b8:	e000ed00 	.word	0xe000ed00
    10bc:	e000e010 	.word	0xe000e010

000010c0 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    10c0:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10c2:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    10c4:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    10c6:	4b08      	ldr	r3, [pc, #32]	; (10e8 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    10c8:	4a08      	ldr	r2, [pc, #32]	; (10ec <delay_us+0x2c>)
    10ca:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10cc:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
    10ce:	3801      	subs	r0, #1
    10d0:	d308      	bcc.n	10e4 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    10d2:	2b00      	cmp	r3, #0
    10d4:	d0fb      	beq.n	10ce <delay_us+0xe>
    10d6:	4e05      	ldr	r6, [pc, #20]	; (10ec <delay_us+0x2c>)
        SysTick->LOAD = n;
    10d8:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    10da:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10dc:	6835      	ldr	r5, [r6, #0]
    10de:	4225      	tst	r5, r4
    10e0:	d0fc      	beq.n	10dc <delay_us+0x1c>
    10e2:	e7f4      	b.n	10ce <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
    10e4:	bd70      	pop	{r4, r5, r6, pc}
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	20000004 	.word	0x20000004
    10ec:	e000e010 	.word	0xe000e010

000010f0 <SysTick_Handler>:


void SysTick_Handler(void) {
    //g_msTicks++;
}
    10f0:	4770      	bx	lr
	...

000010f4 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    10f4:	b570      	push	{r4, r5, r6, lr}
    10f6:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    10f8:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    10fa:	4b08      	ldr	r3, [pc, #32]	; (111c <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    10fc:	4a08      	ldr	r2, [pc, #32]	; (1120 <delay_ms+0x2c>)
    10fe:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1100:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
    1102:	3801      	subs	r0, #1
    1104:	d308      	bcc.n	1118 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    1106:	2b00      	cmp	r3, #0
    1108:	d0fb      	beq.n	1102 <delay_ms+0xe>
    110a:	4e05      	ldr	r6, [pc, #20]	; (1120 <delay_ms+0x2c>)
        SysTick->LOAD = n;
    110c:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    110e:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1110:	6835      	ldr	r5, [r6, #0]
    1112:	4225      	tst	r5, r4
    1114:	d0fc      	beq.n	1110 <delay_ms+0x1c>
    1116:	e7f4      	b.n	1102 <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
    1118:	bd70      	pop	{r4, r5, r6, pc}
    111a:	46c0      	nop			; (mov r8, r8)
    111c:	20000004 	.word	0x20000004
    1120:	e000e010 	.word	0xe000e010

00001124 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    1124:	21fa      	movs	r1, #250	; 0xfa
    1126:	4a04      	ldr	r2, [pc, #16]	; (1138 <RTC_Handler+0x14>)
    1128:	0089      	lsls	r1, r1, #2
    112a:	6813      	ldr	r3, [r2, #0]
    112c:	185b      	adds	r3, r3, r1
    112e:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    1130:	22ff      	movs	r2, #255	; 0xff
    1132:	4b02      	ldr	r3, [pc, #8]	; (113c <RTC_Handler+0x18>)
    1134:	721a      	strb	r2, [r3, #8]
}
    1136:	4770      	bx	lr
    1138:	200000f4 	.word	0x200000f4
    113c:	40001400 	.word	0x40001400

00001140 <millis>:

uint32_t millis(void) {
    1140:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    1142:	f3ef 8110 	mrs	r1, PRIMASK
    1146:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1148:	4a08      	ldr	r2, [pc, #32]	; (116c <millis+0x2c>)
    114a:	4d09      	ldr	r5, [pc, #36]	; (1170 <millis+0x30>)
    114c:	8a10      	ldrh	r0, [r2, #16]
    114e:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1150:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1152:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1154:	09e4      	lsrs	r4, r4, #7
    1156:	d004      	beq.n	1162 <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    1158:	8a13      	ldrh	r3, [r2, #16]
    115a:	22fa      	movs	r2, #250	; 0xfa
    115c:	6828      	ldr	r0, [r5, #0]
    115e:	0092      	lsls	r2, r2, #2
    1160:	1880      	adds	r0, r0, r2
    1162:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    1164:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    1168:	bd30      	pop	{r4, r5, pc}
    116a:	46c0      	nop			; (mov r8, r8)
    116c:	40001400 	.word	0x40001400
    1170:	200000f4 	.word	0x200000f4

00001174 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1174:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1176:	4a0d      	ldr	r2, [pc, #52]	; (11ac <TC4Init+0x38>)
    1178:	4b0d      	ldr	r3, [pc, #52]	; (11b0 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    117a:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    117c:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    117e:	4a0d      	ldr	r2, [pc, #52]	; (11b4 <TC4Init+0x40>)
    1180:	6a13      	ldr	r3, [r2, #32]
    1182:	430b      	orrs	r3, r1
    1184:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1186:	4b0c      	ldr	r3, [pc, #48]	; (11b8 <TC4Init+0x44>)
    1188:	4a0c      	ldr	r2, [pc, #48]	; (11bc <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    118a:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    118c:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x50;
    118e:	2250      	movs	r2, #80	; 0x50
    1190:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1192:	3a4f      	subs	r2, #79	; 0x4f
    1194:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1196:	32ff      	adds	r2, #255	; 0xff
    1198:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    119a:	881a      	ldrh	r2, [r3, #0]
    119c:	430a      	orrs	r2, r1
    119e:	801a      	strh	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    11a0:	2280      	movs	r2, #128	; 0x80
    11a2:	4b07      	ldr	r3, [pc, #28]	; (11c0 <TC4Init+0x4c>)
    11a4:	0312      	lsls	r2, r2, #12
    11a6:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    11a8:	4770      	bx	lr
    11aa:	46c0      	nop			; (mov r8, r8)
    11ac:	0000421c 	.word	0x0000421c
    11b0:	40000c00 	.word	0x40000c00
    11b4:	40000400 	.word	0x40000400
    11b8:	42003000 	.word	0x42003000
    11bc:	00000904 	.word	0x00000904
    11c0:	e000e100 	.word	0xe000e100

000011c4 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    11c4:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    11c6:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    11c8:	4b02      	ldr	r3, [pc, #8]	; (11d4 <TC4_Handler+0x10>)
    11ca:	739a      	strb	r2, [r3, #14]
    //pinToggle(TxPo);
    pullSample();
    11cc:	4b02      	ldr	r3, [pc, #8]	; (11d8 <TC4_Handler+0x14>)
    11ce:	4798      	blx	r3
}
    11d0:	bd10      	pop	{r4, pc}
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	42003000 	.word	0x42003000
    11d8:	0000297d 	.word	0x0000297d

000011dc <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    11dc:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    11de:	4a0d      	ldr	r2, [pc, #52]	; (1214 <TC5Init+0x38>)
    11e0:	4b0d      	ldr	r3, [pc, #52]	; (1218 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    11e2:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    11e4:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    11e6:	4a0d      	ldr	r2, [pc, #52]	; (121c <TC5Init+0x40>)
    11e8:	6a13      	ldr	r3, [r2, #32]
    11ea:	430b      	orrs	r3, r1
    11ec:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    11ee:	4b0c      	ldr	r3, [pc, #48]	; (1220 <TC5Init+0x44>)
    11f0:	4a0c      	ldr	r2, [pc, #48]	; (1224 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    11f2:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    11f4:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_PRESCALER_DIV16;

    u16_t logSpeed = 20; //Hz
    u8_t PER_Reg = (long)((32768/16) / logSpeed);

    TC5->COUNT8.PER.reg = PER_Reg;
    11f6:	2266      	movs	r2, #102	; 0x66
    11f8:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    11fa:	3a65      	subs	r2, #101	; 0x65
    11fc:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    11fe:	32ff      	adds	r2, #255	; 0xff
    1200:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1202:	881a      	ldrh	r2, [r3, #0]
    1204:	430a      	orrs	r2, r1
    1206:	801a      	strh	r2, [r3, #0]
    1208:	2280      	movs	r2, #128	; 0x80
    120a:	4b07      	ldr	r3, [pc, #28]	; (1228 <TC5Init+0x4c>)
    120c:	0352      	lsls	r2, r2, #13
    120e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    1210:	4770      	bx	lr
    1212:	46c0      	nop			; (mov r8, r8)
    1214:	0000421c 	.word	0x0000421c
    1218:	40000c00 	.word	0x40000c00
    121c:	40000400 	.word	0x40000400
    1220:	42003400 	.word	0x42003400
    1224:	00000c04 	.word	0x00000c04
    1228:	e000e100 	.word	0xe000e100

0000122c <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    122c:	22ff      	movs	r2, #255	; 0xff
    122e:	4b03      	ldr	r3, [pc, #12]	; (123c <TC5_Handler+0x10>)
    1230:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    1232:	4b03      	ldr	r3, [pc, #12]	; (1240 <TC5_Handler+0x14>)
    1234:	3afe      	subs	r2, #254	; 0xfe
    1236:	701a      	strb	r2, [r3, #0]
}
    1238:	4770      	bx	lr
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	42003400 	.word	0x42003400
    1240:	20000152 	.word	0x20000152

00001244 <flight>:
#include <boardDefines.h>

#define TESTFLIGHT 0


void flight() {
    1244:	b570      	push	{r4, r5, r6, lr}

    switch(flightState) {
    1246:	4d66      	ldr	r5, [pc, #408]	; (13e0 <flight+0x19c>)
    1248:	7828      	ldrb	r0, [r5, #0]
    124a:	280a      	cmp	r0, #10
    124c:	d900      	bls.n	1250 <flight+0xc>
    124e:	e0ac      	b.n	13aa <flight+0x166>
    1250:	f003 f85c 	bl	430c <__gnu_thumb1_case_uqi>
    1254:	673a1906 	.word	0x673a1906
    1258:	886dabab 	.word	0x886dabab
    125c:	ab9c      	.short	0xab9c
    125e:	67          	.byte	0x67
    125f:	00          	.byte	0x00
    case flightStatrup:

        updateGround( );
    1260:	4b60      	ldr	r3, [pc, #384]	; (13e4 <flight+0x1a0>)
    1262:	4798      	blx	r3

        if ((millis() - startupTick) > 10000) {
    1264:	4b60      	ldr	r3, [pc, #384]	; (13e8 <flight+0x1a4>)
    1266:	4798      	blx	r3
    1268:	4b60      	ldr	r3, [pc, #384]	; (13ec <flight+0x1a8>)
    126a:	681b      	ldr	r3, [r3, #0]
    126c:	1ac0      	subs	r0, r0, r3
    126e:	4b60      	ldr	r3, [pc, #384]	; (13f0 <flight+0x1ac>)
    1270:	4298      	cmp	r0, r3
    1272:	d906      	bls.n	1282 <flight+0x3e>
            findNewFlightStart();
    1274:	4b5f      	ldr	r3, [pc, #380]	; (13f4 <flight+0x1b0>)
    1276:	4798      	blx	r3
            startupJingle();
    1278:	4b5f      	ldr	r3, [pc, #380]	; (13f8 <flight+0x1b4>)
    127a:	4798      	blx	r3
            flightState = flightTest;
            writeFlightStartAddress();
            logFlight( );
            logEvent('L');
#else
            flightState = flightPad;
    127c:	2302      	movs	r3, #2
    127e:	702b      	strb	r3, [r5, #0]
#endif

            break;
    1280:	e093      	b.n	13aa <flight+0x166>
        }

        attemptConnection();
    1282:	4b5e      	ldr	r3, [pc, #376]	; (13fc <flight+0x1b8>)
    1284:	e080      	b.n	1388 <flight+0x144>

    case flightIdle:
        //TC4->COUNT8.CTRLA.reg = 0;
        //TC5->COUNT8.CTRLA.reg = 0;

        if (millis() - offsets.groundBeep > 2000) {
    1286:	4e58      	ldr	r6, [pc, #352]	; (13e8 <flight+0x1a4>)
    1288:	47b0      	blx	r6
    128a:	4c5d      	ldr	r4, [pc, #372]	; (1400 <flight+0x1bc>)
    128c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    128e:	1ac0      	subs	r0, r0, r3
    1290:	23fa      	movs	r3, #250	; 0xfa
    1292:	00db      	lsls	r3, r3, #3
    1294:	4298      	cmp	r0, r3
    1296:	d905      	bls.n	12a4 <flight+0x60>
            offsets.groundBeep = millis();
    1298:	47b0      	blx	r6
    129a:	62e0      	str	r0, [r4, #44]	; 0x2c
            beep(400);
    129c:	20c8      	movs	r0, #200	; 0xc8
    129e:	4b59      	ldr	r3, [pc, #356]	; (1404 <flight+0x1c0>)
    12a0:	0040      	lsls	r0, r0, #1
    12a2:	4798      	blx	r3
        }

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    12a4:	4b58      	ldr	r3, [pc, #352]	; (1408 <flight+0x1c4>)
    12a6:	7e1b      	ldrb	r3, [r3, #24]
    12a8:	075b      	lsls	r3, r3, #29
    12aa:	d400      	bmi.n	12ae <flight+0x6a>
    12ac:	e07d      	b.n	13aa <flight+0x166>
            u8_t possibleReset = usartDataIn(USART3);
    12ae:	2003      	movs	r0, #3
    12b0:	4b56      	ldr	r3, [pc, #344]	; (140c <flight+0x1c8>)
    12b2:	4798      	blx	r3
            if (possibleReset == 0x52) {
    12b4:	2852      	cmp	r0, #82	; 0x52
    12b6:	d178      	bne.n	13aa <flight+0x166>
    12b8:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    12bc:	4a54      	ldr	r2, [pc, #336]	; (1410 <flight+0x1cc>)
    12be:	4b55      	ldr	r3, [pc, #340]	; (1414 <flight+0x1d0>)
    12c0:	60da      	str	r2, [r3, #12]
    12c2:	f3bf 8f4f 	dsb	sy
    12c6:	e7fe      	b.n	12c6 <flight+0x82>
        *  Accel > 2g & vel > 15ft/s
        *		 or
        *  baro alt > 100ft
        */

        updateGround();
    12c8:	4b46      	ldr	r3, [pc, #280]	; (13e4 <flight+0x1a0>)
    12ca:	4798      	blx	r3

        if (writeLog) {
    12cc:	4b52      	ldr	r3, [pc, #328]	; (1418 <flight+0x1d4>)
    12ce:	781b      	ldrb	r3, [r3, #0]
    12d0:	2b00      	cmp	r3, #0
    12d2:	d005      	beq.n	12e0 <flight+0x9c>
            logSensorsOnPad( );
    12d4:	4b51      	ldr	r3, [pc, #324]	; (141c <flight+0x1d8>)
    12d6:	4798      	blx	r3
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    12d8:	2280      	movs	r2, #128	; 0x80
    12da:	4b51      	ldr	r3, [pc, #324]	; (1420 <flight+0x1dc>)
    12dc:	0352      	lsls	r2, r2, #13
    12de:	61da      	str	r2, [r3, #28]
            pinToggle(LedPin);
        }


        if ((( velocity > 15) && (accel > 2)) | (altitudeAGL() > 100)) {
    12e0:	4950      	ldr	r1, [pc, #320]	; (1424 <flight+0x1e0>)
    12e2:	4c51      	ldr	r4, [pc, #324]	; (1428 <flight+0x1e4>)
    12e4:	2200      	movs	r2, #0
    12e6:	6808      	ldr	r0, [r1, #0]
    12e8:	6849      	ldr	r1, [r1, #4]
    12ea:	4b50      	ldr	r3, [pc, #320]	; (142c <flight+0x1e8>)
    12ec:	47a0      	blx	r4
    12ee:	2800      	cmp	r0, #0
    12f0:	d00c      	beq.n	130c <flight+0xc8>
    12f2:	2380      	movs	r3, #128	; 0x80
    12f4:	494e      	ldr	r1, [pc, #312]	; (1430 <flight+0x1ec>)
    12f6:	2200      	movs	r2, #0
    12f8:	6808      	ldr	r0, [r1, #0]
    12fa:	6849      	ldr	r1, [r1, #4]
    12fc:	05db      	lsls	r3, r3, #23
    12fe:	47a0      	blx	r4
    1300:	1e44      	subs	r4, r0, #1
    1302:	41a0      	sbcs	r0, r4
    1304:	2401      	movs	r4, #1
    1306:	4240      	negs	r0, r0
    1308:	4004      	ands	r4, r0
    130a:	e000      	b.n	130e <flight+0xca>
    130c:	0004      	movs	r4, r0
    130e:	4b49      	ldr	r3, [pc, #292]	; (1434 <flight+0x1f0>)
    1310:	4798      	blx	r3
    1312:	2864      	cmp	r0, #100	; 0x64
    1314:	dc01      	bgt.n	131a <flight+0xd6>
    1316:	07e3      	lsls	r3, r4, #31
    1318:	d547      	bpl.n	13aa <flight+0x166>
            flightState = flightBoost;
    131a:	2303      	movs	r3, #3
    131c:	702b      	strb	r3, [r5, #0]
            beginFlightLog();
    131e:	4b46      	ldr	r3, [pc, #280]	; (1438 <flight+0x1f4>)
    1320:	e032      	b.n	1388 <flight+0x144>
        /*
        *	boost to fast
        *		while
        *	Accel > 1/4G
        */
        if (writeLog) {
    1322:	4b3d      	ldr	r3, [pc, #244]	; (1418 <flight+0x1d4>)
    1324:	781b      	ldrb	r3, [r3, #0]
    1326:	2b00      	cmp	r3, #0
    1328:	d03f      	beq.n	13aa <flight+0x166>
            logSensors( );
    132a:	4b44      	ldr	r3, [pc, #272]	; (143c <flight+0x1f8>)
    132c:	e02c      	b.n	1388 <flight+0x144>


        break;
    case flightDrogue:

        if (writeLog) {
    132e:	4b3a      	ldr	r3, [pc, #232]	; (1418 <flight+0x1d4>)
    1330:	781b      	ldrb	r3, [r3, #0]
    1332:	2b00      	cmp	r3, #0
    1334:	d001      	beq.n	133a <flight+0xf6>
            logSensors( );
    1336:	4b41      	ldr	r3, [pc, #260]	; (143c <flight+0x1f8>)
    1338:	4798      	blx	r3
        }


        if (sample.pressureAltitude < deploymentSettings.MAIN_DEPLOY) {
    133a:	4b41      	ldr	r3, [pc, #260]	; (1440 <flight+0x1fc>)
    133c:	8b18      	ldrh	r0, [r3, #24]
    133e:	4b41      	ldr	r3, [pc, #260]	; (1444 <flight+0x200>)
    1340:	4798      	blx	r3
    1342:	000b      	movs	r3, r1
    1344:	4940      	ldr	r1, [pc, #256]	; (1448 <flight+0x204>)
    1346:	0002      	movs	r2, r0
    1348:	6d88      	ldr	r0, [r1, #88]	; 0x58
    134a:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
    134c:	4c3f      	ldr	r4, [pc, #252]	; (144c <flight+0x208>)
    134e:	47a0      	blx	r4
    1350:	2800      	cmp	r0, #0
    1352:	d02a      	beq.n	13aa <flight+0x166>
            flightState = flightMain;
    1354:	2307      	movs	r3, #7
    1356:	702b      	strb	r3, [r5, #0]
            igniteMain();
    1358:	4b3d      	ldr	r3, [pc, #244]	; (1450 <flight+0x20c>)
    135a:	4798      	blx	r3
            logEvent('M');
    135c:	204d      	movs	r0, #77	; 0x4d
    135e:	4b3d      	ldr	r3, [pc, #244]	; (1454 <flight+0x210>)
    1360:	4798      	blx	r3
    1362:	e022      	b.n	13aa <flight+0x166>
        }

        break;
    case flightMain:

        if (writeLog) {
    1364:	4b2c      	ldr	r3, [pc, #176]	; (1418 <flight+0x1d4>)
    1366:	781b      	ldrb	r3, [r3, #0]
    1368:	2b00      	cmp	r3, #0
    136a:	d001      	beq.n	1370 <flight+0x12c>
            logSensors( );
    136c:	4b33      	ldr	r3, [pc, #204]	; (143c <flight+0x1f8>)
    136e:	4798      	blx	r3
        }

        if (velocity < 5) {
    1370:	492c      	ldr	r1, [pc, #176]	; (1424 <flight+0x1e0>)
    1372:	2200      	movs	r2, #0
    1374:	6808      	ldr	r0, [r1, #0]
    1376:	6849      	ldr	r1, [r1, #4]
    1378:	4b37      	ldr	r3, [pc, #220]	; (1458 <flight+0x214>)
    137a:	4c34      	ldr	r4, [pc, #208]	; (144c <flight+0x208>)
    137c:	47a0      	blx	r4
    137e:	2800      	cmp	r0, #0
    1380:	d013      	beq.n	13aa <flight+0x166>
            flightState = flightLanded;
    1382:	2308      	movs	r3, #8
    1384:	702b      	strb	r3, [r5, #0]
            finishFlight();
    1386:	4b35      	ldr	r3, [pc, #212]	; (145c <flight+0x218>)
    1388:	4798      	blx	r3
    138a:	e00e      	b.n	13aa <flight+0x166>
        }

        break;
    case flightLanded:

        if (millis() - offsets.groundBeep > 2000) {
    138c:	4e16      	ldr	r6, [pc, #88]	; (13e8 <flight+0x1a4>)
    138e:	47b0      	blx	r6
    1390:	4c1b      	ldr	r4, [pc, #108]	; (1400 <flight+0x1bc>)
    1392:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1394:	1ac0      	subs	r0, r0, r3
    1396:	23fa      	movs	r3, #250	; 0xfa
    1398:	00db      	lsls	r3, r3, #3
    139a:	4298      	cmp	r0, r3
    139c:	d905      	bls.n	13aa <flight+0x166>
            offsets.groundBeep = millis();
    139e:	47b0      	blx	r6
    13a0:	62e0      	str	r0, [r4, #44]	; 0x2c
            beep(400);
    13a2:	20c8      	movs	r0, #200	; 0xc8
    13a4:	4b17      	ldr	r3, [pc, #92]	; (1404 <flight+0x1c0>)
    13a6:	0040      	lsls	r0, r0, #1
    13a8:	4798      	blx	r3
        break;
    }



    if ((flightState > flightPad) & unplugged()) {
    13aa:	2302      	movs	r3, #2
    13ac:	782c      	ldrb	r4, [r5, #0]
    13ae:	4e2c      	ldr	r6, [pc, #176]	; (1460 <flight+0x21c>)
    13b0:	42a3      	cmp	r3, r4
    13b2:	41a4      	sbcs	r4, r4
    13b4:	4264      	negs	r4, r4
    13b6:	47b0      	blx	r6
    13b8:	2c00      	cmp	r4, #0
    13ba:	d003      	beq.n	13c4 <flight+0x180>
    13bc:	2800      	cmp	r0, #0
    13be:	d001      	beq.n	13c4 <flight+0x180>
        finishFlight();
    13c0:	4b26      	ldr	r3, [pc, #152]	; (145c <flight+0x218>)
    13c2:	4798      	blx	r3
    }

    if ((flightState <= flightPad) & unplugged()) {
    13c4:	2300      	movs	r3, #0
    13c6:	2102      	movs	r1, #2
    13c8:	782a      	ldrb	r2, [r5, #0]
    13ca:	4291      	cmp	r1, r2
    13cc:	415b      	adcs	r3, r3
    13ce:	b2dc      	uxtb	r4, r3
    13d0:	47b0      	blx	r6
    13d2:	2c00      	cmp	r4, #0
    13d4:	d003      	beq.n	13de <flight+0x19a>
    13d6:	2800      	cmp	r0, #0
    13d8:	d001      	beq.n	13de <flight+0x19a>
        finishFromPad();
    13da:	4b22      	ldr	r3, [pc, #136]	; (1464 <flight+0x220>)
    13dc:	4798      	blx	r3
    }

    13de:	bd70      	pop	{r4, r5, r6, pc}
    13e0:	20000164 	.word	0x20000164
    13e4:	00001469 	.word	0x00001469
    13e8:	00001141 	.word	0x00001141
    13ec:	20000154 	.word	0x20000154
    13f0:	00002710 	.word	0x00002710
    13f4:	000028c5 	.word	0x000028c5
    13f8:	00000e61 	.word	0x00000e61
    13fc:	00003071 	.word	0x00003071
    1400:	20000108 	.word	0x20000108
    1404:	00000e25 	.word	0x00000e25
    1408:	42001400 	.word	0x42001400
    140c:	00002e0d 	.word	0x00002e0d
    1410:	05fa0004 	.word	0x05fa0004
    1414:	e000ed00 	.word	0xe000ed00
    1418:	20000152 	.word	0x20000152
    141c:	000025fd 	.word	0x000025fd
    1420:	41004400 	.word	0x41004400
    1424:	200002d8 	.word	0x200002d8
    1428:	0000448d 	.word	0x0000448d
    142c:	402e0000 	.word	0x402e0000
    1430:	200002d0 	.word	0x200002d0
    1434:	00000b1d 	.word	0x00000b1d
    1438:	0000289d 	.word	0x0000289d
    143c:	00002445 	.word	0x00002445
    1440:	20000138 	.word	0x20000138
    1444:	0000629d 	.word	0x0000629d
    1448:	20000578 	.word	0x20000578
    144c:	00004465 	.word	0x00004465
    1450:	00001751 	.word	0x00001751
    1454:	000023e9 	.word	0x000023e9
    1458:	40140000 	.word	0x40140000
    145c:	00000c09 	.word	0x00000c09
    1460:	00000b51 	.word	0x00000b51
    1464:	00000c35 	.word	0x00000c35

00001468 <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    1468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    146a:	4c2b      	ldr	r4, [pc, #172]	; (1518 <updateGround+0xb0>)
    146c:	4d2b      	ldr	r5, [pc, #172]	; (151c <updateGround+0xb4>)
    146e:	4a2c      	ldr	r2, [pc, #176]	; (1520 <updateGround+0xb8>)
    1470:	6920      	ldr	r0, [r4, #16]
    1472:	6961      	ldr	r1, [r4, #20]
    1474:	4b2b      	ldr	r3, [pc, #172]	; (1524 <updateGround+0xbc>)
    1476:	47a8      	blx	r5
    1478:	4b2b      	ldr	r3, [pc, #172]	; (1528 <updateGround+0xc0>)
    147a:	0006      	movs	r6, r0
    147c:	6a58      	ldr	r0, [r3, #36]	; 0x24
    147e:	4b2b      	ldr	r3, [pc, #172]	; (152c <updateGround+0xc4>)
    1480:	000f      	movs	r7, r1
    1482:	4798      	blx	r3
    1484:	4a26      	ldr	r2, [pc, #152]	; (1520 <updateGround+0xb8>)
    1486:	4b2a      	ldr	r3, [pc, #168]	; (1530 <updateGround+0xc8>)
    1488:	47a8      	blx	r5
    148a:	0002      	movs	r2, r0
    148c:	000b      	movs	r3, r1
    148e:	0030      	movs	r0, r6
    1490:	0039      	movs	r1, r7
    1492:	4e28      	ldr	r6, [pc, #160]	; (1534 <updateGround+0xcc>)
    1494:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1496:	4e28      	ldr	r6, [pc, #160]	; (1538 <updateGround+0xd0>)
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {


    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    1498:	6120      	str	r0, [r4, #16]
    149a:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    149c:	69e0      	ldr	r0, [r4, #28]
    149e:	47b0      	blx	r6
    14a0:	2200      	movs	r2, #0
    14a2:	4b26      	ldr	r3, [pc, #152]	; (153c <updateGround+0xd4>)
    14a4:	47a8      	blx	r5
    14a6:	9000      	str	r0, [sp, #0]
    14a8:	9101      	str	r1, [sp, #4]
    14aa:	4925      	ldr	r1, [pc, #148]	; (1540 <updateGround+0xd8>)
    14ac:	2200      	movs	r2, #0
    14ae:	6808      	ldr	r0, [r1, #0]
    14b0:	6849      	ldr	r1, [r1, #4]
    14b2:	4b22      	ldr	r3, [pc, #136]	; (153c <updateGround+0xd4>)
    14b4:	47a8      	blx	r5
    14b6:	4f1f      	ldr	r7, [pc, #124]	; (1534 <updateGround+0xcc>)
    14b8:	0002      	movs	r2, r0
    14ba:	000b      	movs	r3, r1
    14bc:	9800      	ldr	r0, [sp, #0]
    14be:	9901      	ldr	r1, [sp, #4]
    14c0:	47b8      	blx	r7
    14c2:	4f20      	ldr	r7, [pc, #128]	; (1544 <updateGround+0xdc>)
    14c4:	47b8      	blx	r7
    14c6:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    14c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    14ca:	47b0      	blx	r6
    14cc:	4a14      	ldr	r2, [pc, #80]	; (1520 <updateGround+0xb8>)
    14ce:	4b15      	ldr	r3, [pc, #84]	; (1524 <updateGround+0xbc>)
    14d0:	47a8      	blx	r5
    14d2:	4b15      	ldr	r3, [pc, #84]	; (1528 <updateGround+0xc0>)
    14d4:	9000      	str	r0, [sp, #0]
    14d6:	9101      	str	r1, [sp, #4]
    14d8:	6d58      	ldr	r0, [r3, #84]	; 0x54
    14da:	47b0      	blx	r6
    14dc:	4a10      	ldr	r2, [pc, #64]	; (1520 <updateGround+0xb8>)
    14de:	4b14      	ldr	r3, [pc, #80]	; (1530 <updateGround+0xc8>)
    14e0:	47a8      	blx	r5
    14e2:	4d14      	ldr	r5, [pc, #80]	; (1534 <updateGround+0xcc>)
    14e4:	000b      	movs	r3, r1
    14e6:	0002      	movs	r2, r0
    14e8:	9800      	ldr	r0, [sp, #0]
    14ea:	9901      	ldr	r1, [sp, #4]
    14ec:	47a8      	blx	r5
    14ee:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    14f0:	4d15      	ldr	r5, [pc, #84]	; (1548 <updateGround+0xe0>)
void updateGround(Altimeter *my_altimeter) {


    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    14f2:	6260      	str	r0, [r4, #36]	; 0x24

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    14f4:	47a8      	blx	r5
    14f6:	6823      	ldr	r3, [r4, #0]
    14f8:	1ac0      	subs	r0, r0, r3
    14fa:	23fa      	movs	r3, #250	; 0xfa
    14fc:	00db      	lsls	r3, r3, #3
    14fe:	4298      	cmp	r0, r3
    1500:	d909      	bls.n	1516 <updateGround+0xae>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    1502:	69e3      	ldr	r3, [r4, #28]
    1504:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    1506:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1508:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    150a:	6922      	ldr	r2, [r4, #16]
    150c:	6963      	ldr	r3, [r4, #20]
    150e:	60a2      	str	r2, [r4, #8]
    1510:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    1512:	47a8      	blx	r5
    1514:	6020      	str	r0, [r4, #0]
    }
}
    1516:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1518:	20000108 	.word	0x20000108
    151c:	00005655 	.word	0x00005655
    1520:	9999999a 	.word	0x9999999a
    1524:	3fe99999 	.word	0x3fe99999
    1528:	20000578 	.word	0x20000578
    152c:	00006391 	.word	0x00006391
    1530:	3fc99999 	.word	0x3fc99999
    1534:	000047b5 	.word	0x000047b5
    1538:	00006321 	.word	0x00006321
    153c:	3fe00000 	.word	0x3fe00000
    1540:	200002e0 	.word	0x200002e0
    1544:	0000450d 	.word	0x0000450d
    1548:	00001141 	.word	0x00001141

0000154c <isItPointingUp>:

void isItPointingUp() {
    154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    154e:	261e      	movs	r6, #30
    u8_t i;

    double pointingUpBuffer;

    pointingUpBuffer = 0;
    1550:	2400      	movs	r4, #0
    1552:	2500      	movs	r5, #0

    for ( i = 0; i < 30 ; ++i ) {
        delay_ms(10);
    1554:	200a      	movs	r0, #10
    1556:	4b21      	ldr	r3, [pc, #132]	; (15dc <isItPointingUp+0x90>)
    1558:	4798      	blx	r3
        sampleTick();
    155a:	4b21      	ldr	r3, [pc, #132]	; (15e0 <isItPointingUp+0x94>)
    155c:	4798      	blx	r3
        pointingUpBuffer = pointingUpBuffer * 0.8 + (-sample.accelX) * 0.2;
    155e:	4a21      	ldr	r2, [pc, #132]	; (15e4 <isItPointingUp+0x98>)
    1560:	4f21      	ldr	r7, [pc, #132]	; (15e8 <isItPointingUp+0x9c>)
    1562:	4b22      	ldr	r3, [pc, #136]	; (15ec <isItPointingUp+0xa0>)
    1564:	0020      	movs	r0, r4
    1566:	0029      	movs	r1, r5
    1568:	47b8      	blx	r7
    156a:	4b21      	ldr	r3, [pc, #132]	; (15f0 <isItPointingUp+0xa4>)
    156c:	0004      	movs	r4, r0
    156e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    1570:	2380      	movs	r3, #128	; 0x80
    1572:	000d      	movs	r5, r1
    1574:	061b      	lsls	r3, r3, #24
    1576:	18c0      	adds	r0, r0, r3
    1578:	4b1e      	ldr	r3, [pc, #120]	; (15f4 <isItPointingUp+0xa8>)
    157a:	4798      	blx	r3
    157c:	4a19      	ldr	r2, [pc, #100]	; (15e4 <isItPointingUp+0x98>)
    157e:	4b1e      	ldr	r3, [pc, #120]	; (15f8 <isItPointingUp+0xac>)
    1580:	47b8      	blx	r7
    1582:	0022      	movs	r2, r4
    1584:	002b      	movs	r3, r5
    1586:	4c1d      	ldr	r4, [pc, #116]	; (15fc <isItPointingUp+0xb0>)
    1588:	47a0      	blx	r4
    158a:	3e01      	subs	r6, #1
    158c:	b2f6      	uxtb	r6, r6
    158e:	0004      	movs	r4, r0
    1590:	000d      	movs	r5, r1

    double pointingUpBuffer;

    pointingUpBuffer = 0;

    for ( i = 0; i < 30 ; ++i ) {
    1592:	2e00      	cmp	r6, #0
    1594:	d1de      	bne.n	1554 <isItPointingUp+0x8>
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + (-sample.accelX) * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    1596:	4e1a      	ldr	r6, [pc, #104]	; (1600 <isItPointingUp+0xb4>)
    1598:	4a1a      	ldr	r2, [pc, #104]	; (1604 <isItPointingUp+0xb8>)
    159a:	4b1b      	ldr	r3, [pc, #108]	; (1608 <isItPointingUp+0xbc>)
    159c:	47b0      	blx	r6
    159e:	0037      	movs	r7, r6
    15a0:	4e1a      	ldr	r6, [pc, #104]	; (160c <isItPointingUp+0xc0>)
    15a2:	2800      	cmp	r0, #0
    15a4:	d007      	beq.n	15b6 <isItPointingUp+0x6a>
    15a6:	4a0f      	ldr	r2, [pc, #60]	; (15e4 <isItPointingUp+0x98>)
    15a8:	4b19      	ldr	r3, [pc, #100]	; (1610 <isItPointingUp+0xc4>)
    15aa:	0020      	movs	r0, r4
    15ac:	0029      	movs	r1, r5
    15ae:	47b0      	blx	r6
        altimeter.pointingUp = true;
    15b0:	2201      	movs	r2, #1
    for ( i = 0; i < 30 ; ++i ) {
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + (-sample.accelX) * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    15b2:	2800      	cmp	r0, #0
    15b4:	d10e      	bne.n	15d4 <isItPointingUp+0x88>
        altimeter.pointingUp = true;
    } else if ((pointingUpBuffer < -0.9) & (pointingUpBuffer > -1.1)) {
    15b6:	4a13      	ldr	r2, [pc, #76]	; (1604 <isItPointingUp+0xb8>)
    15b8:	4b16      	ldr	r3, [pc, #88]	; (1614 <isItPointingUp+0xc8>)
    15ba:	0020      	movs	r0, r4
    15bc:	0029      	movs	r1, r5
    15be:	47b0      	blx	r6
    15c0:	2800      	cmp	r0, #0
    15c2:	d00a      	beq.n	15da <isItPointingUp+0x8e>
    15c4:	4a07      	ldr	r2, [pc, #28]	; (15e4 <isItPointingUp+0x98>)
    15c6:	4b14      	ldr	r3, [pc, #80]	; (1618 <isItPointingUp+0xcc>)
    15c8:	0020      	movs	r0, r4
    15ca:	0029      	movs	r1, r5
    15cc:	47b8      	blx	r7
    15ce:	2800      	cmp	r0, #0
    15d0:	d003      	beq.n	15da <isItPointingUp+0x8e>
        altimeter.pointingUp = false;
    15d2:	2200      	movs	r2, #0
    15d4:	4b11      	ldr	r3, [pc, #68]	; (161c <isItPointingUp+0xd0>)
    15d6:	715a      	strb	r2, [r3, #5]

        }

    }

    15d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15da:	e7fe      	b.n	15da <isItPointingUp+0x8e>
    15dc:	000010f5 	.word	0x000010f5
    15e0:	00002989 	.word	0x00002989
    15e4:	9999999a 	.word	0x9999999a
    15e8:	00005655 	.word	0x00005655
    15ec:	3fe99999 	.word	0x3fe99999
    15f0:	20000578 	.word	0x20000578
    15f4:	00006391 	.word	0x00006391
    15f8:	3fc99999 	.word	0x3fc99999
    15fc:	000047b5 	.word	0x000047b5
    1600:	0000448d 	.word	0x0000448d
    1604:	cccccccd 	.word	0xcccccccd
    1608:	3feccccc 	.word	0x3feccccc
    160c:	00004465 	.word	0x00004465
    1610:	3ff19999 	.word	0x3ff19999
    1614:	bfeccccc 	.word	0xbfeccccc
    1618:	bff19999 	.word	0xbff19999
    161c:	20000158 	.word	0x20000158

00001620 <igniterTick>:
#include <util.h>
#include <boardDefines.h>


void igniterTick() {
    1620:	b510      	push	{r4, lr}

    if (charges.igniterAHot) {
    1622:	4c23      	ldr	r4, [pc, #140]	; (16b0 <igniterTick+0x90>)
    1624:	7823      	ldrb	r3, [r4, #0]
    1626:	2b00      	cmp	r3, #0
    1628:	d00d      	beq.n	1646 <igniterTick+0x26>
        if ((millis() - charges.igniterATick) > 2000) {
    162a:	4b22      	ldr	r3, [pc, #136]	; (16b4 <igniterTick+0x94>)
    162c:	4798      	blx	r3
    162e:	6863      	ldr	r3, [r4, #4]
    1630:	1ac0      	subs	r0, r0, r3
    1632:	23fa      	movs	r3, #250	; 0xfa
    1634:	00db      	lsls	r3, r3, #3
    1636:	4298      	cmp	r0, r3
    1638:	d905      	bls.n	1646 <igniterTick+0x26>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    163a:	2280      	movs	r2, #128	; 0x80
    163c:	4b1e      	ldr	r3, [pc, #120]	; (16b8 <igniterTick+0x98>)
    163e:	0412      	lsls	r2, r2, #16
    1640:	601a      	str	r2, [r3, #0]
            pinLow(fireAPin);
            charges.igniterAHot = false;
    1642:	2300      	movs	r3, #0
    1644:	7023      	strb	r3, [r4, #0]
        }
    }

    if (charges.igniterBHot) {
    1646:	7a23      	ldrb	r3, [r4, #8]
    1648:	2b00      	cmp	r3, #0
    164a:	d00d      	beq.n	1668 <igniterTick+0x48>
        if ((millis() - charges.igniterBTick) > 2000) {
    164c:	4b19      	ldr	r3, [pc, #100]	; (16b4 <igniterTick+0x94>)
    164e:	4798      	blx	r3
    1650:	68e3      	ldr	r3, [r4, #12]
    1652:	1ac0      	subs	r0, r0, r3
    1654:	23fa      	movs	r3, #250	; 0xfa
    1656:	00db      	lsls	r3, r3, #3
    1658:	4298      	cmp	r0, r3
    165a:	d905      	bls.n	1668 <igniterTick+0x48>
    165c:	2280      	movs	r2, #128	; 0x80
    165e:	4b16      	ldr	r3, [pc, #88]	; (16b8 <igniterTick+0x98>)
    1660:	03d2      	lsls	r2, r2, #15
    1662:	601a      	str	r2, [r3, #0]
            pinLow(fireBPin);
            charges.igniterBHot = false;
    1664:	2300      	movs	r3, #0
    1666:	7223      	strb	r3, [r4, #8]
        }
    }

    if (charges.igniterCHot) {
    1668:	7c23      	ldrb	r3, [r4, #16]
    166a:	2b00      	cmp	r3, #0
    166c:	d00d      	beq.n	168a <igniterTick+0x6a>
        if ((millis() - charges.igniterCTick) > 2000) {
    166e:	4b11      	ldr	r3, [pc, #68]	; (16b4 <igniterTick+0x94>)
    1670:	4798      	blx	r3
    1672:	6963      	ldr	r3, [r4, #20]
    1674:	1ac0      	subs	r0, r0, r3
    1676:	23fa      	movs	r3, #250	; 0xfa
    1678:	00db      	lsls	r3, r3, #3
    167a:	4298      	cmp	r0, r3
    167c:	d905      	bls.n	168a <igniterTick+0x6a>
    167e:	2280      	movs	r2, #128	; 0x80
    1680:	4b0e      	ldr	r3, [pc, #56]	; (16bc <igniterTick+0x9c>)
    1682:	0492      	lsls	r2, r2, #18
    1684:	615a      	str	r2, [r3, #20]
            pinLow(fireCPin);
            charges.igniterCHot = false;
    1686:	2300      	movs	r3, #0
    1688:	7423      	strb	r3, [r4, #16]
        }
    }

    if (charges.igniterDHot) {
    168a:	7e23      	ldrb	r3, [r4, #24]
    168c:	2b00      	cmp	r3, #0
    168e:	d00d      	beq.n	16ac <igniterTick+0x8c>
        if ((millis() - charges.igniterDTick) > 2000) {
    1690:	4b08      	ldr	r3, [pc, #32]	; (16b4 <igniterTick+0x94>)
    1692:	4798      	blx	r3
    1694:	69e3      	ldr	r3, [r4, #28]
    1696:	1ac0      	subs	r0, r0, r3
    1698:	23fa      	movs	r3, #250	; 0xfa
    169a:	00db      	lsls	r3, r3, #3
    169c:	4298      	cmp	r0, r3
    169e:	d905      	bls.n	16ac <igniterTick+0x8c>
    16a0:	2280      	movs	r2, #128	; 0x80
    16a2:	4b06      	ldr	r3, [pc, #24]	; (16bc <igniterTick+0x9c>)
    16a4:	0452      	lsls	r2, r2, #17
    16a6:	615a      	str	r2, [r3, #20]
            pinLow(fireDPin);
            charges.igniterDHot = false;
    16a8:	2300      	movs	r3, #0
    16aa:	7623      	strb	r3, [r4, #24]
        }
    }
}
    16ac:	bd10      	pop	{r4, pc}
    16ae:	46c0      	nop			; (mov r8, r8)
    16b0:	200002ac 	.word	0x200002ac
    16b4:	00001141 	.word	0x00001141
    16b8:	41004494 	.word	0x41004494
    16bc:	41004400 	.word	0x41004400

000016c0 <lightIgniterA>:
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    16c0:	2280      	movs	r2, #128	; 0x80
    16c2:	4b05      	ldr	r3, [pc, #20]	; (16d8 <lightIgniterA+0x18>)
    16c4:	0412      	lsls	r2, r2, #16
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
        lightIgniterD();
    }
}

void lightIgniterA() {
    16c6:	b510      	push	{r4, lr}
    16c8:	601a      	str	r2, [r3, #0]
    pinHigh(fireAPin);
    charges.igniterAHot = true;
    16ca:	2301      	movs	r3, #1
    16cc:	4c03      	ldr	r4, [pc, #12]	; (16dc <lightIgniterA+0x1c>)
    16ce:	7023      	strb	r3, [r4, #0]
    charges.igniterATick = millis();
    16d0:	4b03      	ldr	r3, [pc, #12]	; (16e0 <lightIgniterA+0x20>)
    16d2:	4798      	blx	r3
    16d4:	6060      	str	r0, [r4, #4]
}
    16d6:	bd10      	pop	{r4, pc}
    16d8:	41004498 	.word	0x41004498
    16dc:	200002ac 	.word	0x200002ac
    16e0:	00001141 	.word	0x00001141

000016e4 <lightIgniterB>:
    16e4:	2280      	movs	r2, #128	; 0x80
    16e6:	4b05      	ldr	r3, [pc, #20]	; (16fc <lightIgniterB+0x18>)
    16e8:	03d2      	lsls	r2, r2, #15

void lightIgniterB() {
    16ea:	b510      	push	{r4, lr}
    16ec:	601a      	str	r2, [r3, #0]
    pinHigh(fireBPin);
    charges.igniterBHot = true;
    16ee:	2301      	movs	r3, #1
    16f0:	4c03      	ldr	r4, [pc, #12]	; (1700 <lightIgniterB+0x1c>)
    16f2:	7223      	strb	r3, [r4, #8]
    charges.igniterBTick = millis();
    16f4:	4b03      	ldr	r3, [pc, #12]	; (1704 <lightIgniterB+0x20>)
    16f6:	4798      	blx	r3
    16f8:	60e0      	str	r0, [r4, #12]
}
    16fa:	bd10      	pop	{r4, pc}
    16fc:	41004498 	.word	0x41004498
    1700:	200002ac 	.word	0x200002ac
    1704:	00001141 	.word	0x00001141

00001708 <lightIgniterC>:
    1708:	2280      	movs	r2, #128	; 0x80
    170a:	4b05      	ldr	r3, [pc, #20]	; (1720 <lightIgniterC+0x18>)
    170c:	0492      	lsls	r2, r2, #18

void lightIgniterC() {
    170e:	b510      	push	{r4, lr}
    1710:	619a      	str	r2, [r3, #24]
    pinHigh(fireCPin);
    charges.igniterCHot = true;
    1712:	2301      	movs	r3, #1
    1714:	4c03      	ldr	r4, [pc, #12]	; (1724 <lightIgniterC+0x1c>)
    1716:	7423      	strb	r3, [r4, #16]
    charges.igniterCTick = millis();
    1718:	4b03      	ldr	r3, [pc, #12]	; (1728 <lightIgniterC+0x20>)
    171a:	4798      	blx	r3
    171c:	6160      	str	r0, [r4, #20]
}
    171e:	bd10      	pop	{r4, pc}
    1720:	41004400 	.word	0x41004400
    1724:	200002ac 	.word	0x200002ac
    1728:	00001141 	.word	0x00001141

0000172c <lightIgniterD>:
    172c:	2280      	movs	r2, #128	; 0x80
    172e:	4b05      	ldr	r3, [pc, #20]	; (1744 <lightIgniterD+0x18>)
    1730:	0452      	lsls	r2, r2, #17

void lightIgniterD() {
    1732:	b510      	push	{r4, lr}
    1734:	619a      	str	r2, [r3, #24]
    pinHigh(fireDPin);
    charges.igniterDHot = true;
    1736:	2301      	movs	r3, #1
    1738:	4c03      	ldr	r4, [pc, #12]	; (1748 <lightIgniterD+0x1c>)
    173a:	7623      	strb	r3, [r4, #24]
    charges.igniterDTick = millis();
    173c:	4b03      	ldr	r3, [pc, #12]	; (174c <lightIgniterD+0x20>)
    173e:	4798      	blx	r3
    1740:	61e0      	str	r0, [r4, #28]
    1742:	bd10      	pop	{r4, pc}
    1744:	41004400 	.word	0x41004400
    1748:	200002ac 	.word	0x200002ac
    174c:	00001141 	.word	0x00001141

00001750 <igniteMain>:
            charges.igniterDHot = false;
        }
    }
}

void igniteMain() {
    1750:	b510      	push	{r4, lr}

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    1752:	4c11      	ldr	r4, [pc, #68]	; (1798 <igniteMain+0x48>)
    1754:	7863      	ldrb	r3, [r4, #1]
    1756:	2b00      	cmp	r3, #0
    1758:	d104      	bne.n	1764 <igniteMain+0x14>
    175a:	7823      	ldrb	r3, [r4, #0]
    175c:	2b00      	cmp	r3, #0
    175e:	d001      	beq.n	1764 <igniteMain+0x14>
        lightIgniterA();
    1760:	4b0e      	ldr	r3, [pc, #56]	; (179c <igniteMain+0x4c>)
    1762:	4798      	blx	r3
    }
    if(deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    1764:	79e3      	ldrb	r3, [r4, #7]
    1766:	2b00      	cmp	r3, #0
    1768:	d104      	bne.n	1774 <igniteMain+0x24>
    176a:	79a3      	ldrb	r3, [r4, #6]
    176c:	2b00      	cmp	r3, #0
    176e:	d001      	beq.n	1774 <igniteMain+0x24>
        lightIgniterB();
    1770:	4b0b      	ldr	r3, [pc, #44]	; (17a0 <igniteMain+0x50>)
    1772:	4798      	blx	r3
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    1774:	7b63      	ldrb	r3, [r4, #13]
    1776:	2b00      	cmp	r3, #0
    1778:	d104      	bne.n	1784 <igniteMain+0x34>
    177a:	7b23      	ldrb	r3, [r4, #12]
    177c:	2b00      	cmp	r3, #0
    177e:	d001      	beq.n	1784 <igniteMain+0x34>
        lightIgniterC();
    1780:	4b08      	ldr	r3, [pc, #32]	; (17a4 <igniteMain+0x54>)
    1782:	4798      	blx	r3
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    1784:	7ce3      	ldrb	r3, [r4, #19]
    1786:	2b00      	cmp	r3, #0
    1788:	d104      	bne.n	1794 <igniteMain+0x44>
    178a:	7ca3      	ldrb	r3, [r4, #18]
    178c:	2b00      	cmp	r3, #0
    178e:	d001      	beq.n	1794 <igniteMain+0x44>
        lightIgniterD();
    1790:	4b05      	ldr	r3, [pc, #20]	; (17a8 <igniteMain+0x58>)
    1792:	4798      	blx	r3
    }
}
    1794:	bd10      	pop	{r4, pc}
    1796:	46c0      	nop			; (mov r8, r8)
    1798:	20000138 	.word	0x20000138
    179c:	000016c1 	.word	0x000016c1
    17a0:	000016e5 	.word	0x000016e5
    17a4:	00001709 	.word	0x00001709
    17a8:	0000172d 	.word	0x0000172d

000017ac <computeKalmanGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    17ac:	4bdc      	ldr	r3, [pc, #880]	; (1b20 <computeKalmanGains+0x374>)
    17ae:	48dd      	ldr	r0, [pc, #884]	; (1b24 <computeKalmanGains+0x378>)
    17b0:	49dd      	ldr	r1, [pc, #884]	; (1b28 <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    17b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    17b4:	6098      	str	r0, [r3, #8]
    17b6:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    17b8:	6298      	str	r0, [r3, #40]	; 0x28
    17ba:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    17bc:	48db      	ldr	r0, [pc, #876]	; (1b2c <computeKalmanGains+0x380>)
    17be:	49dc      	ldr	r1, [pc, #880]	; (1b30 <computeKalmanGains+0x384>)
    17c0:	2200      	movs	r2, #0
    17c2:	6118      	str	r0, [r3, #16]
    17c4:	6159      	str	r1, [r3, #20]
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
            kgain[i][j] = 1.0;
    17c6:	2000      	movs	r0, #0
    17c8:	49da      	ldr	r1, [pc, #872]	; (1b34 <computeKalmanGains+0x388>)
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    17ca:	4cdb      	ldr	r4, [pc, #876]	; (1b38 <computeKalmanGains+0x38c>)
    17cc:	468c      	mov	ip, r1
    17ce:	4ddb      	ldr	r5, [pc, #876]	; (1b3c <computeKalmanGains+0x390>)
            kgain[i][j] = 1.0;
    17d0:	49db      	ldr	r1, [pc, #876]	; (1b40 <computeKalmanGains+0x394>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    17d2:	b0cd      	sub	sp, #308	; 0x134
    17d4:	ae40      	add	r6, sp, #256	; 0x100
    17d6:	1997      	adds	r7, r2, r6
    17d8:	4666      	mov	r6, ip
    17da:	1996      	adds	r6, r2, r6
    17dc:	3210      	adds	r2, #16
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    17de:	603c      	str	r4, [r7, #0]
    17e0:	607d      	str	r5, [r7, #4]
            kgain[i][j] = 1.0;
    17e2:	6030      	str	r0, [r6, #0]
    17e4:	6071      	str	r1, [r6, #4]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    17e6:	60bc      	str	r4, [r7, #8]
    17e8:	60fd      	str	r5, [r7, #12]
            kgain[i][j] = 1.0;
    17ea:	60b0      	str	r0, [r6, #8]
    17ec:	60f1      	str	r1, [r6, #12]
    phi[0][2]    = dt*dt/2.0;
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
    17ee:	2a30      	cmp	r2, #48	; 0x30
    17f0:	d1f0      	bne.n	17d4 <computeKalmanGains+0x28>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    17f2:	6819      	ldr	r1, [r3, #0]
    17f4:	685a      	ldr	r2, [r3, #4]
    17f6:	911a      	str	r1, [sp, #104]	; 0x68
    17f8:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    17fa:	6999      	ldr	r1, [r3, #24]
    17fc:	69da      	ldr	r2, [r3, #28]
    17fe:	911c      	str	r1, [sp, #112]	; 0x70
    1800:	921d      	str	r2, [sp, #116]	; 0x74
    1802:	6a19      	ldr	r1, [r3, #32]
    1804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1806:	911e      	str	r1, [sp, #120]	; 0x78
    1808:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    180a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    180c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    180e:	9120      	str	r1, [sp, #128]	; 0x80
    1810:	9221      	str	r2, [sp, #132]	; 0x84
    1812:	6b99      	ldr	r1, [r3, #56]	; 0x38
    1814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1816:	9122      	str	r1, [sp, #136]	; 0x88
    1818:	9223      	str	r2, [sp, #140]	; 0x8c
    181a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    181c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    181e:	9124      	str	r1, [sp, #144]	; 0x90
    1820:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1822:	6c99      	ldr	r1, [r3, #72]	; 0x48
    1824:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    1826:	913a      	str	r1, [sp, #232]	; 0xe8
    1828:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    182a:	6d19      	ldr	r1, [r3, #80]	; 0x50
    182c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    182e:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    1830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1832:	933e      	str	r3, [sp, #248]	; 0xf8
    1834:	943f      	str	r4, [sp, #252]	; 0xfc
    1836:	2300      	movs	r3, #0
    1838:	4cc2      	ldr	r4, [pc, #776]	; (1b44 <computeKalmanGains+0x398>)
    183a:	913c      	str	r1, [sp, #240]	; 0xf0
    183c:	923d      	str	r2, [sp, #244]	; 0xf4
    183e:	9302      	str	r3, [sp, #8]
    1840:	9403      	str	r4, [sp, #12]
    1842:	2300      	movs	r3, #0
    1844:	2400      	movs	r4, #0
    1846:	9310      	str	r3, [sp, #64]	; 0x40
    1848:	9411      	str	r4, [sp, #68]	; 0x44
    184a:	9300      	str	r3, [sp, #0]
    184c:	9401      	str	r4, [sp, #4]
    184e:	9304      	str	r3, [sp, #16]
    1850:	9405      	str	r4, [sp, #20]
    1852:	2300      	movs	r3, #0
    1854:	4cbb      	ldr	r4, [pc, #748]	; (1b44 <computeKalmanGains+0x398>)
    1856:	930e      	str	r3, [sp, #56]	; 0x38
    1858:	940f      	str	r4, [sp, #60]	; 0x3c
    185a:	2300      	movs	r3, #0
    185c:	2400      	movs	r4, #0
    185e:	9308      	str	r3, [sp, #32]
    1860:	9409      	str	r4, [sp, #36]	; 0x24
    1862:	930c      	str	r3, [sp, #48]	; 0x30
    1864:	940d      	str	r4, [sp, #52]	; 0x34
    1866:	930a      	str	r3, [sp, #40]	; 0x28
    1868:	940b      	str	r4, [sp, #44]	; 0x2c
    186a:	2480      	movs	r4, #128	; 0x80
    186c:	2300      	movs	r3, #0
    186e:	05e4      	lsls	r4, r4, #23
    1870:	9306      	str	r3, [sp, #24]
    1872:	9407      	str	r4, [sp, #28]
    1874:	2300      	movs	r3, #0
    1876:	9338      	str	r3, [sp, #224]	; 0xe0

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1878:	4db3      	ldr	r5, [pc, #716]	; (1b48 <computeKalmanGains+0x39c>)
    187a:	9a06      	ldr	r2, [sp, #24]
    187c:	9b07      	ldr	r3, [sp, #28]
    187e:	981a      	ldr	r0, [sp, #104]	; 0x68
    1880:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1882:	47a8      	blx	r5
    1884:	4aa7      	ldr	r2, [pc, #668]	; (1b24 <computeKalmanGains+0x378>)
    1886:	0006      	movs	r6, r0
    1888:	000f      	movs	r7, r1
    188a:	9808      	ldr	r0, [sp, #32]
    188c:	9909      	ldr	r1, [sp, #36]	; 0x24
    188e:	4ba6      	ldr	r3, [pc, #664]	; (1b28 <computeKalmanGains+0x37c>)
    1890:	47a8      	blx	r5
    1892:	4cae      	ldr	r4, [pc, #696]	; (1b4c <computeKalmanGains+0x3a0>)
    1894:	0002      	movs	r2, r0
    1896:	000b      	movs	r3, r1
    1898:	0030      	movs	r0, r6
    189a:	0039      	movs	r1, r7
    189c:	47a0      	blx	r4
    189e:	4aa3      	ldr	r2, [pc, #652]	; (1b2c <computeKalmanGains+0x380>)
    18a0:	0006      	movs	r6, r0
    18a2:	000f      	movs	r7, r1
    18a4:	9800      	ldr	r0, [sp, #0]
    18a6:	9901      	ldr	r1, [sp, #4]
    18a8:	4ba1      	ldr	r3, [pc, #644]	; (1b30 <computeKalmanGains+0x384>)
    18aa:	47a8      	blx	r5
    18ac:	0002      	movs	r2, r0
    18ae:	000b      	movs	r3, r1
    18b0:	0030      	movs	r0, r6
    18b2:	0039      	movs	r1, r7
    18b4:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    18b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    18b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    18ba:	9016      	str	r0, [sp, #88]	; 0x58
    18bc:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    18be:	981a      	ldr	r0, [sp, #104]	; 0x68
    18c0:	991b      	ldr	r1, [sp, #108]	; 0x6c
    18c2:	47a8      	blx	r5
    18c4:	4a97      	ldr	r2, [pc, #604]	; (1b24 <computeKalmanGains+0x378>)
    18c6:	0006      	movs	r6, r0
    18c8:	000f      	movs	r7, r1
    18ca:	980e      	ldr	r0, [sp, #56]	; 0x38
    18cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    18ce:	4b96      	ldr	r3, [pc, #600]	; (1b28 <computeKalmanGains+0x37c>)
    18d0:	47a8      	blx	r5
    18d2:	0002      	movs	r2, r0
    18d4:	000b      	movs	r3, r1
    18d6:	0030      	movs	r0, r6
    18d8:	0039      	movs	r1, r7
    18da:	47a0      	blx	r4
    18dc:	4a93      	ldr	r2, [pc, #588]	; (1b2c <computeKalmanGains+0x380>)
    18de:	0006      	movs	r6, r0
    18e0:	000f      	movs	r7, r1
    18e2:	9810      	ldr	r0, [sp, #64]	; 0x40
    18e4:	9911      	ldr	r1, [sp, #68]	; 0x44
    18e6:	4b92      	ldr	r3, [pc, #584]	; (1b30 <computeKalmanGains+0x384>)
    18e8:	47a8      	blx	r5
    18ea:	0002      	movs	r2, r0
    18ec:	000b      	movs	r3, r1
    18ee:	0030      	movs	r0, r6
    18f0:	0039      	movs	r1, r7
    18f2:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    18f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    18f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    18f8:	9012      	str	r0, [sp, #72]	; 0x48
    18fa:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    18fc:	981a      	ldr	r0, [sp, #104]	; 0x68
    18fe:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1900:	47a8      	blx	r5
    1902:	4a88      	ldr	r2, [pc, #544]	; (1b24 <computeKalmanGains+0x378>)
    1904:	0006      	movs	r6, r0
    1906:	000f      	movs	r7, r1
    1908:	9804      	ldr	r0, [sp, #16]
    190a:	9905      	ldr	r1, [sp, #20]
    190c:	4b86      	ldr	r3, [pc, #536]	; (1b28 <computeKalmanGains+0x37c>)
    190e:	47a8      	blx	r5
    1910:	0002      	movs	r2, r0
    1912:	000b      	movs	r3, r1
    1914:	0030      	movs	r0, r6
    1916:	0039      	movs	r1, r7
    1918:	47a0      	blx	r4
    191a:	4a84      	ldr	r2, [pc, #528]	; (1b2c <computeKalmanGains+0x380>)
    191c:	0006      	movs	r6, r0
    191e:	000f      	movs	r7, r1
    1920:	9802      	ldr	r0, [sp, #8]
    1922:	9903      	ldr	r1, [sp, #12]
    1924:	4b82      	ldr	r3, [pc, #520]	; (1b30 <computeKalmanGains+0x384>)
    1926:	47a8      	blx	r5
    1928:	0002      	movs	r2, r0
    192a:	000b      	movs	r3, r1
    192c:	0030      	movs	r0, r6
    192e:	0039      	movs	r1, r7
    1930:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1932:	9a06      	ldr	r2, [sp, #24]
    1934:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1936:	9014      	str	r0, [sp, #80]	; 0x50
    1938:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    193a:	981c      	ldr	r0, [sp, #112]	; 0x70
    193c:	991d      	ldr	r1, [sp, #116]	; 0x74
    193e:	47a8      	blx	r5
    1940:	9a08      	ldr	r2, [sp, #32]
    1942:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1944:	0006      	movs	r6, r0
    1946:	000f      	movs	r7, r1
    1948:	981e      	ldr	r0, [sp, #120]	; 0x78
    194a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    194c:	47a8      	blx	r5
    194e:	0002      	movs	r2, r0
    1950:	000b      	movs	r3, r1
    1952:	0030      	movs	r0, r6
    1954:	0039      	movs	r1, r7
    1956:	47a0      	blx	r4
    1958:	4a72      	ldr	r2, [pc, #456]	; (1b24 <computeKalmanGains+0x378>)
    195a:	0006      	movs	r6, r0
    195c:	000f      	movs	r7, r1
    195e:	9800      	ldr	r0, [sp, #0]
    1960:	9901      	ldr	r1, [sp, #4]
    1962:	4b71      	ldr	r3, [pc, #452]	; (1b28 <computeKalmanGains+0x37c>)
    1964:	47a8      	blx	r5
    1966:	0002      	movs	r2, r0
    1968:	000b      	movs	r3, r1
    196a:	0030      	movs	r0, r6
    196c:	0039      	movs	r1, r7
    196e:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1974:	9018      	str	r0, [sp, #96]	; 0x60
    1976:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1978:	981c      	ldr	r0, [sp, #112]	; 0x70
    197a:	991d      	ldr	r1, [sp, #116]	; 0x74
    197c:	47a8      	blx	r5
    197e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1982:	0006      	movs	r6, r0
    1984:	000f      	movs	r7, r1
    1986:	981e      	ldr	r0, [sp, #120]	; 0x78
    1988:	991f      	ldr	r1, [sp, #124]	; 0x7c
    198a:	47a8      	blx	r5
    198c:	0002      	movs	r2, r0
    198e:	000b      	movs	r3, r1
    1990:	0030      	movs	r0, r6
    1992:	0039      	movs	r1, r7
    1994:	47a0      	blx	r4
    1996:	4a63      	ldr	r2, [pc, #396]	; (1b24 <computeKalmanGains+0x378>)
    1998:	0006      	movs	r6, r0
    199a:	000f      	movs	r7, r1
    199c:	9810      	ldr	r0, [sp, #64]	; 0x40
    199e:	9911      	ldr	r1, [sp, #68]	; 0x44
    19a0:	4b61      	ldr	r3, [pc, #388]	; (1b28 <computeKalmanGains+0x37c>)
    19a2:	47a8      	blx	r5
    19a4:	0002      	movs	r2, r0
    19a6:	000b      	movs	r3, r1
    19a8:	0030      	movs	r0, r6
    19aa:	0039      	movs	r1, r7
    19ac:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    19ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    19b2:	9026      	str	r0, [sp, #152]	; 0x98
    19b4:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    19b6:	981c      	ldr	r0, [sp, #112]	; 0x70
    19b8:	991d      	ldr	r1, [sp, #116]	; 0x74
    19ba:	47a8      	blx	r5
    19bc:	9a04      	ldr	r2, [sp, #16]
    19be:	9b05      	ldr	r3, [sp, #20]
    19c0:	0006      	movs	r6, r0
    19c2:	000f      	movs	r7, r1
    19c4:	981e      	ldr	r0, [sp, #120]	; 0x78
    19c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    19c8:	47a8      	blx	r5
    19ca:	0002      	movs	r2, r0
    19cc:	000b      	movs	r3, r1
    19ce:	0030      	movs	r0, r6
    19d0:	0039      	movs	r1, r7
    19d2:	47a0      	blx	r4
    19d4:	4a53      	ldr	r2, [pc, #332]	; (1b24 <computeKalmanGains+0x378>)
    19d6:	0006      	movs	r6, r0
    19d8:	000f      	movs	r7, r1
    19da:	9802      	ldr	r0, [sp, #8]
    19dc:	9903      	ldr	r1, [sp, #12]
    19de:	4b52      	ldr	r3, [pc, #328]	; (1b28 <computeKalmanGains+0x37c>)
    19e0:	47a8      	blx	r5
    19e2:	0002      	movs	r2, r0
    19e4:	000b      	movs	r3, r1
    19e6:	0030      	movs	r0, r6
    19e8:	0039      	movs	r1, r7
    19ea:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    19ec:	9a06      	ldr	r2, [sp, #24]
    19ee:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    19f0:	9028      	str	r0, [sp, #160]	; 0xa0
    19f2:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    19f4:	9820      	ldr	r0, [sp, #128]	; 0x80
    19f6:	9921      	ldr	r1, [sp, #132]	; 0x84
    19f8:	47a8      	blx	r5
    19fa:	9a08      	ldr	r2, [sp, #32]
    19fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19fe:	0006      	movs	r6, r0
    1a00:	000f      	movs	r7, r1
    1a02:	9822      	ldr	r0, [sp, #136]	; 0x88
    1a04:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1a06:	47a8      	blx	r5
    1a08:	0002      	movs	r2, r0
    1a0a:	000b      	movs	r3, r1
    1a0c:	0030      	movs	r0, r6
    1a0e:	0039      	movs	r1, r7
    1a10:	47a0      	blx	r4
    1a12:	9a00      	ldr	r2, [sp, #0]
    1a14:	9b01      	ldr	r3, [sp, #4]
    1a16:	0006      	movs	r6, r0
    1a18:	000f      	movs	r7, r1
    1a1a:	9824      	ldr	r0, [sp, #144]	; 0x90
    1a1c:	9925      	ldr	r1, [sp, #148]	; 0x94
    1a1e:	47a8      	blx	r5
    1a20:	0002      	movs	r2, r0
    1a22:	000b      	movs	r3, r1
    1a24:	0030      	movs	r0, r6
    1a26:	0039      	movs	r1, r7
    1a28:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1a2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1a2e:	902e      	str	r0, [sp, #184]	; 0xb8
    1a30:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1a32:	9820      	ldr	r0, [sp, #128]	; 0x80
    1a34:	9921      	ldr	r1, [sp, #132]	; 0x84
    1a36:	47a8      	blx	r5
    1a38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a3c:	0006      	movs	r6, r0
    1a3e:	000f      	movs	r7, r1
    1a40:	9822      	ldr	r0, [sp, #136]	; 0x88
    1a42:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1a44:	47a8      	blx	r5
    1a46:	0002      	movs	r2, r0
    1a48:	000b      	movs	r3, r1
    1a4a:	0030      	movs	r0, r6
    1a4c:	0039      	movs	r1, r7
    1a4e:	47a0      	blx	r4
    1a50:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1a52:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1a54:	0006      	movs	r6, r0
    1a56:	000f      	movs	r7, r1
    1a58:	9824      	ldr	r0, [sp, #144]	; 0x90
    1a5a:	9925      	ldr	r1, [sp, #148]	; 0x94
    1a5c:	47a8      	blx	r5
    1a5e:	0002      	movs	r2, r0
    1a60:	000b      	movs	r3, r1
    1a62:	0030      	movs	r0, r6
    1a64:	0039      	movs	r1, r7
    1a66:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1a68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1a6c:	9006      	str	r0, [sp, #24]
    1a6e:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1a70:	9820      	ldr	r0, [sp, #128]	; 0x80
    1a72:	9921      	ldr	r1, [sp, #132]	; 0x84
    1a74:	47a8      	blx	r5
    1a76:	9a04      	ldr	r2, [sp, #16]
    1a78:	9b05      	ldr	r3, [sp, #20]
    1a7a:	0006      	movs	r6, r0
    1a7c:	000f      	movs	r7, r1
    1a7e:	9822      	ldr	r0, [sp, #136]	; 0x88
    1a80:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1a82:	47a8      	blx	r5
    1a84:	0002      	movs	r2, r0
    1a86:	000b      	movs	r3, r1
    1a88:	0030      	movs	r0, r6
    1a8a:	0039      	movs	r1, r7
    1a8c:	47a0      	blx	r4
    1a8e:	9a02      	ldr	r2, [sp, #8]
    1a90:	9b03      	ldr	r3, [sp, #12]
    1a92:	0006      	movs	r6, r0
    1a94:	000f      	movs	r7, r1
    1a96:	9824      	ldr	r0, [sp, #144]	; 0x90
    1a98:	9925      	ldr	r1, [sp, #148]	; 0x94
    1a9a:	47a8      	blx	r5
    1a9c:	0002      	movs	r2, r0
    1a9e:	000b      	movs	r3, r1
    1aa0:	0030      	movs	r0, r6
    1aa2:	0039      	movs	r1, r7
    1aa4:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1aa6:	4a1f      	ldr	r2, [pc, #124]	; (1b24 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1aa8:	9002      	str	r0, [sp, #8]
    1aaa:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1aac:	9812      	ldr	r0, [sp, #72]	; 0x48
    1aae:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1ab0:	4b1d      	ldr	r3, [pc, #116]	; (1b28 <computeKalmanGains+0x37c>)
    1ab2:	47a8      	blx	r5
    1ab4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1ab6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1ab8:	47a0      	blx	r4
    1aba:	4a1c      	ldr	r2, [pc, #112]	; (1b2c <computeKalmanGains+0x380>)
    1abc:	0006      	movs	r6, r0
    1abe:	000f      	movs	r7, r1
    1ac0:	9814      	ldr	r0, [sp, #80]	; 0x50
    1ac2:	9915      	ldr	r1, [sp, #84]	; 0x54
    1ac4:	4b1a      	ldr	r3, [pc, #104]	; (1b30 <computeKalmanGains+0x384>)
    1ac6:	47a8      	blx	r5
    1ac8:	0002      	movs	r2, r0
    1aca:	000b      	movs	r3, r1
    1acc:	0030      	movs	r0, r6
    1ace:	0039      	movs	r1, r7
    1ad0:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1ad2:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1ad4:	9008      	str	r0, [sp, #32]
    1ad6:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1ad8:	9816      	ldr	r0, [sp, #88]	; 0x58
    1ada:	9917      	ldr	r1, [sp, #92]	; 0x5c
    1adc:	2300      	movs	r3, #0
    1ade:	47a8      	blx	r5
    1ae0:	0006      	movs	r6, r0
    1ae2:	000f      	movs	r7, r1
    1ae4:	0002      	movs	r2, r0
    1ae6:	000b      	movs	r3, r1
    1ae8:	9812      	ldr	r0, [sp, #72]	; 0x48
    1aea:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1aec:	47a0      	blx	r4
    1aee:	4a0d      	ldr	r2, [pc, #52]	; (1b24 <computeKalmanGains+0x378>)
    1af0:	9000      	str	r0, [sp, #0]
    1af2:	9101      	str	r1, [sp, #4]
    1af4:	9814      	ldr	r0, [sp, #80]	; 0x50
    1af6:	9915      	ldr	r1, [sp, #84]	; 0x54
    1af8:	4b0b      	ldr	r3, [pc, #44]	; (1b28 <computeKalmanGains+0x37c>)
    1afa:	47a8      	blx	r5
    1afc:	0002      	movs	r2, r0
    1afe:	000b      	movs	r3, r1
    1b00:	9800      	ldr	r0, [sp, #0]
    1b02:	9901      	ldr	r1, [sp, #4]
    1b04:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1b06:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1b08:	9030      	str	r0, [sp, #192]	; 0xc0
    1b0a:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1b0c:	9812      	ldr	r0, [sp, #72]	; 0x48
    1b0e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1b10:	2300      	movs	r3, #0
    1b12:	47a8      	blx	r5
    1b14:	0032      	movs	r2, r6
    1b16:	003b      	movs	r3, r7
    1b18:	47a0      	blx	r4
    1b1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1b1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b1e:	e017      	b.n	1b50 <computeKalmanGains+0x3a4>
    1b20:	20000010 	.word	0x20000010
    1b24:	47ae147b 	.word	0x47ae147b
    1b28:	3f747ae1 	.word	0x3f747ae1
    1b2c:	eb1c432d 	.word	0xeb1c432d
    1b30:	3eea36e2 	.word	0x3eea36e2
    1b34:	20000278 	.word	0x20000278
    1b38:	d2f1a9fc 	.word	0xd2f1a9fc
    1b3c:	3f50624d 	.word	0x3f50624d
    1b40:	3ff00000 	.word	0x3ff00000
    1b44:	40220000 	.word	0x40220000
    1b48:	00005655 	.word	0x00005655
    1b4c:	000047b5 	.word	0x000047b5
    1b50:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1b52:	4ad9      	ldr	r2, [pc, #868]	; (1eb8 <computeKalmanGains+0x70c>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1b54:	9112      	str	r1, [sp, #72]	; 0x48
    1b56:	9004      	str	r0, [sp, #16]
    1b58:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1b5a:	4bd8      	ldr	r3, [pc, #864]	; (1ebc <computeKalmanGains+0x710>)
    1b5c:	9826      	ldr	r0, [sp, #152]	; 0x98
    1b5e:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1b60:	47a8      	blx	r5
    1b62:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1b64:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1b66:	47a0      	blx	r4
    1b68:	4ad5      	ldr	r2, [pc, #852]	; (1ec0 <computeKalmanGains+0x714>)
    1b6a:	0006      	movs	r6, r0
    1b6c:	000f      	movs	r7, r1
    1b6e:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1b70:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1b72:	4bd4      	ldr	r3, [pc, #848]	; (1ec4 <computeKalmanGains+0x718>)
    1b74:	47a8      	blx	r5
    1b76:	0002      	movs	r2, r0
    1b78:	000b      	movs	r3, r1
    1b7a:	0030      	movs	r0, r6
    1b7c:	0039      	movs	r1, r7
    1b7e:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1b80:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1b82:	902a      	str	r0, [sp, #168]	; 0xa8
    1b84:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1b86:	9818      	ldr	r0, [sp, #96]	; 0x60
    1b88:	9919      	ldr	r1, [sp, #100]	; 0x64
    1b8a:	2300      	movs	r3, #0
    1b8c:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1b8e:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1b90:	9032      	str	r0, [sp, #200]	; 0xc8
    1b92:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1b94:	9826      	ldr	r0, [sp, #152]	; 0x98
    1b96:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1b98:	2300      	movs	r3, #0
    1b9a:	47a8      	blx	r5
    1b9c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1b9e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1ba0:	47a0      	blx	r4
    1ba2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1ba4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1ba6:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1ba8:	4ac3      	ldr	r2, [pc, #780]	; (1eb8 <computeKalmanGains+0x70c>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1baa:	902c      	str	r0, [sp, #176]	; 0xb0
    1bac:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1bae:	9806      	ldr	r0, [sp, #24]
    1bb0:	9907      	ldr	r1, [sp, #28]
    1bb2:	4bc2      	ldr	r3, [pc, #776]	; (1ebc <computeKalmanGains+0x710>)
    1bb4:	47a8      	blx	r5
    1bb6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    1bb8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1bba:	47a0      	blx	r4
    1bbc:	4ac0      	ldr	r2, [pc, #768]	; (1ec0 <computeKalmanGains+0x714>)
    1bbe:	0006      	movs	r6, r0
    1bc0:	000f      	movs	r7, r1
    1bc2:	9802      	ldr	r0, [sp, #8]
    1bc4:	9903      	ldr	r1, [sp, #12]
    1bc6:	4bbf      	ldr	r3, [pc, #764]	; (1ec4 <computeKalmanGains+0x718>)
    1bc8:	47a8      	blx	r5
    1bca:	0002      	movs	r2, r0
    1bcc:	000b      	movs	r3, r1
    1bce:	0030      	movs	r0, r6
    1bd0:	0039      	movs	r1, r7
    1bd2:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1bd4:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1bd6:	9000      	str	r0, [sp, #0]
    1bd8:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1bda:	982e      	ldr	r0, [sp, #184]	; 0xb8
    1bdc:	992f      	ldr	r1, [sp, #188]	; 0xbc
    1bde:	2300      	movs	r3, #0
    1be0:	47a8      	blx	r5
    1be2:	0006      	movs	r6, r0
    1be4:	000f      	movs	r7, r1
    1be6:	0002      	movs	r2, r0
    1be8:	000b      	movs	r3, r1
    1bea:	9806      	ldr	r0, [sp, #24]
    1bec:	9907      	ldr	r1, [sp, #28]
    1bee:	47a0      	blx	r4
    1bf0:	4ab1      	ldr	r2, [pc, #708]	; (1eb8 <computeKalmanGains+0x70c>)
    1bf2:	900a      	str	r0, [sp, #40]	; 0x28
    1bf4:	910b      	str	r1, [sp, #44]	; 0x2c
    1bf6:	9802      	ldr	r0, [sp, #8]
    1bf8:	9903      	ldr	r1, [sp, #12]
    1bfa:	4bb0      	ldr	r3, [pc, #704]	; (1ebc <computeKalmanGains+0x710>)
    1bfc:	47a8      	blx	r5
    1bfe:	0002      	movs	r2, r0
    1c00:	000b      	movs	r3, r1
    1c02:	980a      	ldr	r0, [sp, #40]	; 0x28
    1c04:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1c06:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1c08:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1c0a:	9010      	str	r0, [sp, #64]	; 0x40
    1c0c:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1c0e:	9806      	ldr	r0, [sp, #24]
    1c10:	9907      	ldr	r1, [sp, #28]
    1c12:	2300      	movs	r3, #0
    1c14:	47a8      	blx	r5
    1c16:	0032      	movs	r2, r6
    1c18:	003b      	movs	r3, r7
    1c1a:	47a0      	blx	r4
    1c1c:	9a02      	ldr	r2, [sp, #8]
    1c1e:	9b03      	ldr	r3, [sp, #12]
    1c20:	47a0      	blx	r4
    1c22:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    1c24:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    1c26:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1c28:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    1c2a:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1c2c:	9002      	str	r0, [sp, #8]
    1c2e:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1c30:	9808      	ldr	r0, [sp, #32]
    1c32:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c34:	47a0      	blx	r4
    1c36:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    1c38:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1c3a:	900a      	str	r0, [sp, #40]	; 0x28
    1c3c:	910b      	str	r1, [sp, #44]	; 0x2c
    1c3e:	9802      	ldr	r0, [sp, #8]
    1c40:	9903      	ldr	r1, [sp, #12]
    1c42:	47a0      	blx	r4
    1c44:	9a00      	ldr	r2, [sp, #0]
    1c46:	9b01      	ldr	r3, [sp, #4]
    1c48:	900c      	str	r0, [sp, #48]	; 0x30
    1c4a:	910d      	str	r1, [sp, #52]	; 0x34
    1c4c:	9804      	ldr	r0, [sp, #16]
    1c4e:	9916      	ldr	r1, [sp, #88]	; 0x58
    1c50:	47a8      	blx	r5
    1c52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1c54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c56:	900e      	str	r0, [sp, #56]	; 0x38
    1c58:	910f      	str	r1, [sp, #60]	; 0x3c
    1c5a:	980a      	ldr	r0, [sp, #40]	; 0x28
    1c5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1c5e:	47a8      	blx	r5
    1c60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1c62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1c64:	4e98      	ldr	r6, [pc, #608]	; (1ec8 <computeKalmanGains+0x71c>)
    1c66:	47b0      	blx	r6

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1c68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1c6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1c6c:	9006      	str	r0, [sp, #24]
    1c6e:	9107      	str	r1, [sp, #28]

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1c70:	9808      	ldr	r0, [sp, #32]
    1c72:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c74:	47a8      	blx	r5
    1c76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1c78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1c7a:	47b0      	blx	r6
    1c7c:	9a06      	ldr	r2, [sp, #24]
    1c7e:	9b07      	ldr	r3, [sp, #28]
    1c80:	4e92      	ldr	r6, [pc, #584]	; (1ecc <computeKalmanGains+0x720>)
    1c82:	47b0      	blx	r6
    1c84:	9034      	str	r0, [sp, #208]	; 0xd0
    1c86:	9135      	str	r1, [sp, #212]	; 0xd4
    1c88:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1c8a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1c8c:	4990      	ldr	r1, [pc, #576]	; (1ed0 <computeKalmanGains+0x724>)
    1c8e:	600a      	str	r2, [r1, #0]
    1c90:	604b      	str	r3, [r1, #4]
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1c92:	9808      	ldr	r0, [sp, #32]
    1c94:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c96:	2280      	movs	r2, #128	; 0x80
    1c98:	0612      	lsls	r2, r2, #24
    1c9a:	4694      	mov	ip, r2
    1c9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1c9e:	9a04      	ldr	r2, [sp, #16]
    1ca0:	4463      	add	r3, ip
    1ca2:	932e      	str	r3, [sp, #184]	; 0xb8
    1ca4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1ca6:	47a8      	blx	r5
    1ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1cac:	0006      	movs	r6, r0
    1cae:	000f      	movs	r7, r1
    1cb0:	9804      	ldr	r0, [sp, #16]
    1cb2:	9916      	ldr	r1, [sp, #88]	; 0x58
    1cb4:	47a8      	blx	r5
    1cb6:	0002      	movs	r2, r0
    1cb8:	000b      	movs	r3, r1
    1cba:	0030      	movs	r0, r6
    1cbc:	0039      	movs	r1, r7
    1cbe:	47a0      	blx	r4
    1cc0:	9a06      	ldr	r2, [sp, #24]
    1cc2:	9b07      	ldr	r3, [sp, #28]
    1cc4:	4e81      	ldr	r6, [pc, #516]	; (1ecc <computeKalmanGains+0x720>)
    1cc6:	47b0      	blx	r6
    1cc8:	900e      	str	r0, [sp, #56]	; 0x38
    1cca:	910f      	str	r1, [sp, #60]	; 0x3c
    1ccc:	4980      	ldr	r1, [pc, #512]	; (1ed0 <computeKalmanGains+0x724>)
    1cce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1cd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1cd2:	608a      	str	r2, [r1, #8]
    1cd4:	60cb      	str	r3, [r1, #12]
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1cd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1cd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1cda:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1cdc:	992b      	ldr	r1, [sp, #172]	; 0xac
    1cde:	47a8      	blx	r5
    1ce0:	9a00      	ldr	r2, [sp, #0]
    1ce2:	9b01      	ldr	r3, [sp, #4]
    1ce4:	0006      	movs	r6, r0
    1ce6:	000f      	movs	r7, r1
    1ce8:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1cea:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1cec:	47a8      	blx	r5
    1cee:	0002      	movs	r2, r0
    1cf0:	000b      	movs	r3, r1
    1cf2:	0030      	movs	r0, r6
    1cf4:	0039      	movs	r1, r7
    1cf6:	4e74      	ldr	r6, [pc, #464]	; (1ec8 <computeKalmanGains+0x71c>)
    1cf8:	47b0      	blx	r6
    1cfa:	9a06      	ldr	r2, [sp, #24]
    1cfc:	9b07      	ldr	r3, [sp, #28]
    1cfe:	4e73      	ldr	r6, [pc, #460]	; (1ecc <computeKalmanGains+0x720>)
    1d00:	47b0      	blx	r6
    1d02:	0002      	movs	r2, r0
    1d04:	000b      	movs	r3, r1
    1d06:	9139      	str	r1, [sp, #228]	; 0xe4
    1d08:	4971      	ldr	r1, [pc, #452]	; (1ed0 <computeKalmanGains+0x724>)
    1d0a:	9018      	str	r0, [sp, #96]	; 0x60
    1d0c:	610a      	str	r2, [r1, #16]
    1d0e:	614b      	str	r3, [r1, #20]
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1d10:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1d12:	992b      	ldr	r1, [sp, #172]	; 0xac
    1d14:	9a04      	ldr	r2, [sp, #16]
    1d16:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1d18:	47a8      	blx	r5
    1d1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d1e:	0006      	movs	r6, r0
    1d20:	000f      	movs	r7, r1
    1d22:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1d24:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1d26:	47a8      	blx	r5
    1d28:	0002      	movs	r2, r0
    1d2a:	000b      	movs	r3, r1
    1d2c:	0030      	movs	r0, r6
    1d2e:	0039      	movs	r1, r7
    1d30:	47a0      	blx	r4
    1d32:	9a06      	ldr	r2, [sp, #24]
    1d34:	9b07      	ldr	r3, [sp, #28]
    1d36:	4e65      	ldr	r6, [pc, #404]	; (1ecc <computeKalmanGains+0x720>)
    1d38:	47b0      	blx	r6
    1d3a:	9012      	str	r0, [sp, #72]	; 0x48
    1d3c:	9113      	str	r1, [sp, #76]	; 0x4c
    1d3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1d40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1d42:	4963      	ldr	r1, [pc, #396]	; (1ed0 <computeKalmanGains+0x724>)
    1d44:	618a      	str	r2, [r1, #24]
    1d46:	61cb      	str	r3, [r1, #28]
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1d48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1d4c:	9800      	ldr	r0, [sp, #0]
    1d4e:	9901      	ldr	r1, [sp, #4]
    1d50:	47a8      	blx	r5
    1d52:	9a02      	ldr	r2, [sp, #8]
    1d54:	9b03      	ldr	r3, [sp, #12]
    1d56:	0006      	movs	r6, r0
    1d58:	000f      	movs	r7, r1
    1d5a:	9800      	ldr	r0, [sp, #0]
    1d5c:	9901      	ldr	r1, [sp, #4]
    1d5e:	47a8      	blx	r5
    1d60:	0002      	movs	r2, r0
    1d62:	000b      	movs	r3, r1
    1d64:	0030      	movs	r0, r6
    1d66:	0039      	movs	r1, r7
    1d68:	4e57      	ldr	r6, [pc, #348]	; (1ec8 <computeKalmanGains+0x71c>)
    1d6a:	47b0      	blx	r6
    1d6c:	9a06      	ldr	r2, [sp, #24]
    1d6e:	9b07      	ldr	r3, [sp, #28]
    1d70:	4e56      	ldr	r6, [pc, #344]	; (1ecc <computeKalmanGains+0x720>)
    1d72:	47b0      	blx	r6
    1d74:	9014      	str	r0, [sp, #80]	; 0x50
    1d76:	9115      	str	r1, [sp, #84]	; 0x54
    1d78:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1d7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1d7c:	4954      	ldr	r1, [pc, #336]	; (1ed0 <computeKalmanGains+0x724>)
    1d7e:	620a      	str	r2, [r1, #32]
    1d80:	624b      	str	r3, [r1, #36]	; 0x24
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1d82:	9800      	ldr	r0, [sp, #0]
    1d84:	9901      	ldr	r1, [sp, #4]
    1d86:	9a04      	ldr	r2, [sp, #16]
    1d88:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1d8a:	47a8      	blx	r5
    1d8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d90:	0006      	movs	r6, r0
    1d92:	000f      	movs	r7, r1
    1d94:	9802      	ldr	r0, [sp, #8]
    1d96:	9903      	ldr	r1, [sp, #12]
    1d98:	47a8      	blx	r5
    1d9a:	0002      	movs	r2, r0
    1d9c:	000b      	movs	r3, r1
    1d9e:	0030      	movs	r0, r6
    1da0:	0039      	movs	r1, r7
    1da2:	47a0      	blx	r4
    1da4:	9a06      	ldr	r2, [sp, #24]
    1da6:	9b07      	ldr	r3, [sp, #28]
    1da8:	4e48      	ldr	r6, [pc, #288]	; (1ecc <computeKalmanGains+0x720>)
    1daa:	47b0      	blx	r6
    1dac:	9036      	str	r0, [sp, #216]	; 0xd8
    1dae:	9137      	str	r1, [sp, #220]	; 0xdc
    1db0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1db2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    1db4:	4946      	ldr	r1, [pc, #280]	; (1ed0 <computeKalmanGains+0x724>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1db6:	4e44      	ldr	r6, [pc, #272]	; (1ec8 <computeKalmanGains+0x71c>)
        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1db8:	628a      	str	r2, [r1, #40]	; 0x28
    1dba:	62cb      	str	r3, [r1, #44]	; 0x2c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1dbc:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1dbe:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1dc0:	2000      	movs	r0, #0
    1dc2:	4944      	ldr	r1, [pc, #272]	; (1ed4 <computeKalmanGains+0x728>)
    1dc4:	47b0      	blx	r6
    1dc6:	0002      	movs	r2, r0
    1dc8:	000b      	movs	r3, r1
    1dca:	900c      	str	r0, [sp, #48]	; 0x30
    1dcc:	910d      	str	r1, [sp, #52]	; 0x34
    1dce:	9808      	ldr	r0, [sp, #32]
    1dd0:	9909      	ldr	r1, [sp, #36]	; 0x24
    1dd2:	47a8      	blx	r5
    1dd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1dd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1dd8:	0006      	movs	r6, r0
    1dda:	000f      	movs	r7, r1
    1ddc:	9800      	ldr	r0, [sp, #0]
    1dde:	9901      	ldr	r1, [sp, #4]
    1de0:	47a8      	blx	r5
    1de2:	0002      	movs	r2, r0
    1de4:	000b      	movs	r3, r1
    1de6:	0030      	movs	r0, r6
    1de8:	0039      	movs	r1, r7
    1dea:	4e37      	ldr	r6, [pc, #220]	; (1ec8 <computeKalmanGains+0x71c>)
    1dec:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1dee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1df0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1df2:	9006      	str	r0, [sp, #24]
    1df4:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1df6:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1df8:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1dfa:	47a8      	blx	r5
    1dfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1dfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1e00:	0006      	movs	r6, r0
    1e02:	000f      	movs	r7, r1
    1e04:	9810      	ldr	r0, [sp, #64]	; 0x40
    1e06:	9911      	ldr	r1, [sp, #68]	; 0x44
    1e08:	47a8      	blx	r5
    1e0a:	0002      	movs	r2, r0
    1e0c:	000b      	movs	r3, r1
    1e0e:	0030      	movs	r0, r6
    1e10:	0039      	movs	r1, r7
    1e12:	4e2d      	ldr	r6, [pc, #180]	; (1ec8 <computeKalmanGains+0x71c>)
    1e14:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1e16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1e18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1e1a:	900a      	str	r0, [sp, #40]	; 0x28
    1e1c:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1e1e:	9804      	ldr	r0, [sp, #16]
    1e20:	9916      	ldr	r1, [sp, #88]	; 0x58
    1e22:	47a8      	blx	r5
    1e24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1e26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1e28:	0006      	movs	r6, r0
    1e2a:	000f      	movs	r7, r1
    1e2c:	9802      	ldr	r0, [sp, #8]
    1e2e:	9903      	ldr	r1, [sp, #12]
    1e30:	47a8      	blx	r5
    1e32:	0002      	movs	r2, r0
    1e34:	000b      	movs	r3, r1
    1e36:	0030      	movs	r0, r6
    1e38:	0039      	movs	r1, r7
    1e3a:	4e23      	ldr	r6, [pc, #140]	; (1ec8 <computeKalmanGains+0x71c>)
    1e3c:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1e3e:	2280      	movs	r2, #128	; 0x80
    1e40:	0612      	lsls	r2, r2, #24
    1e42:	4694      	mov	ip, r2
    1e44:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1e46:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1e48:	4463      	add	r3, ip
    1e4a:	932e      	str	r3, [sp, #184]	; 0xb8
    1e4c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1e4e:	900c      	str	r0, [sp, #48]	; 0x30
    1e50:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1e52:	9808      	ldr	r0, [sp, #32]
    1e54:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e56:	47a8      	blx	r5
    1e58:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1e5a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1e5c:	47a0      	blx	r4
    1e5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1e62:	0006      	movs	r6, r0
    1e64:	000f      	movs	r7, r1
    1e66:	9800      	ldr	r0, [sp, #0]
    1e68:	9901      	ldr	r1, [sp, #4]
    1e6a:	47a8      	blx	r5
    1e6c:	0002      	movs	r2, r0
    1e6e:	000b      	movs	r3, r1
    1e70:	0030      	movs	r0, r6
    1e72:	0039      	movs	r1, r7
    1e74:	4e14      	ldr	r6, [pc, #80]	; (1ec8 <computeKalmanGains+0x71c>)
    1e76:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1e78:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1e7a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1e7c:	9008      	str	r0, [sp, #32]
    1e7e:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1e80:	9826      	ldr	r0, [sp, #152]	; 0x98
    1e82:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1e84:	47a0      	blx	r4
    1e86:	4a0c      	ldr	r2, [pc, #48]	; (1eb8 <computeKalmanGains+0x70c>)
    1e88:	0006      	movs	r6, r0
    1e8a:	000f      	movs	r7, r1
    1e8c:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1e8e:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1e90:	4b0a      	ldr	r3, [pc, #40]	; (1ebc <computeKalmanGains+0x710>)
    1e92:	47a8      	blx	r5
    1e94:	0002      	movs	r2, r0
    1e96:	000b      	movs	r3, r1
    1e98:	0030      	movs	r0, r6
    1e9a:	0039      	movs	r1, r7
    1e9c:	47a0      	blx	r4
    1e9e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1ea0:	0006      	movs	r6, r0
    1ea2:	000f      	movs	r7, r1
    1ea4:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1ea6:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1ea8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1eaa:	47a8      	blx	r5
    1eac:	0002      	movs	r2, r0
    1eae:	000b      	movs	r3, r1
    1eb0:	0030      	movs	r0, r6
    1eb2:	0039      	movs	r1, r7
    1eb4:	47a0      	blx	r4
    1eb6:	e00f      	b.n	1ed8 <computeKalmanGains+0x72c>
    1eb8:	47ae147b 	.word	0x47ae147b
    1ebc:	3f747ae1 	.word	0x3f747ae1
    1ec0:	eb1c432d 	.word	0xeb1c432d
    1ec4:	3eea36e2 	.word	0x3eea36e2
    1ec8:	00005b49 	.word	0x00005b49
    1ecc:	00004e0d 	.word	0x00004e0d
    1ed0:	20000278 	.word	0x20000278
    1ed4:	3ff00000 	.word	0x3ff00000
    1ed8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1eda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1edc:	0006      	movs	r6, r0
    1ede:	000f      	movs	r7, r1
    1ee0:	9810      	ldr	r0, [sp, #64]	; 0x40
    1ee2:	9911      	ldr	r1, [sp, #68]	; 0x44
    1ee4:	47a8      	blx	r5
    1ee6:	0002      	movs	r2, r0
    1ee8:	000b      	movs	r3, r1
    1eea:	0030      	movs	r0, r6
    1eec:	0039      	movs	r1, r7
    1eee:	4e50      	ldr	r6, [pc, #320]	; (2030 <STACK_SIZE+0x30>)
    1ef0:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1ef2:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1ef4:	900e      	str	r0, [sp, #56]	; 0x38
    1ef6:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1ef8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1efa:	9804      	ldr	r0, [sp, #16]
    1efc:	9916      	ldr	r1, [sp, #88]	; 0x58
    1efe:	47a8      	blx	r5
    1f00:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1f02:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1f04:	47a0      	blx	r4
    1f06:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1f08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1f0a:	0006      	movs	r6, r0
    1f0c:	000f      	movs	r7, r1
    1f0e:	9802      	ldr	r0, [sp, #8]
    1f10:	9903      	ldr	r1, [sp, #12]
    1f12:	47a8      	blx	r5
    1f14:	4c46      	ldr	r4, [pc, #280]	; (2030 <STACK_SIZE+0x30>)
    1f16:	0002      	movs	r2, r0
    1f18:	000b      	movs	r3, r1
    1f1a:	0030      	movs	r0, r6
    1f1c:	0039      	movs	r1, r7
    1f1e:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1f20:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1f22:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1f24:	9004      	str	r0, [sp, #16]
    1f26:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1f28:	2000      	movs	r0, #0
    1f2a:	4942      	ldr	r1, [pc, #264]	; (2034 <STACK_SIZE+0x34>)
    1f2c:	47a0      	blx	r4
    1f2e:	0002      	movs	r2, r0
    1f30:	000b      	movs	r3, r1
    1f32:	9012      	str	r0, [sp, #72]	; 0x48
    1f34:	9113      	str	r1, [sp, #76]	; 0x4c
    1f36:	9800      	ldr	r0, [sp, #0]
    1f38:	9901      	ldr	r1, [sp, #4]
    1f3a:	47a8      	blx	r5
    1f3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1f3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1f40:	0006      	movs	r6, r0
    1f42:	000f      	movs	r7, r1
    1f44:	9800      	ldr	r0, [sp, #0]
    1f46:	9901      	ldr	r1, [sp, #4]
    1f48:	47a8      	blx	r5
    1f4a:	0002      	movs	r2, r0
    1f4c:	000b      	movs	r3, r1
    1f4e:	0030      	movs	r0, r6
    1f50:	0039      	movs	r1, r7
    1f52:	47a0      	blx	r4
    1f54:	9000      	str	r0, [sp, #0]
    1f56:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1f58:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1f5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1f5c:	9810      	ldr	r0, [sp, #64]	; 0x40
    1f5e:	9911      	ldr	r1, [sp, #68]	; 0x44
    1f60:	47a8      	blx	r5
    1f62:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1f64:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1f66:	0006      	movs	r6, r0
    1f68:	000f      	movs	r7, r1
    1f6a:	9810      	ldr	r0, [sp, #64]	; 0x40
    1f6c:	9911      	ldr	r1, [sp, #68]	; 0x44
    1f6e:	47a8      	blx	r5
    1f70:	0002      	movs	r2, r0
    1f72:	000b      	movs	r3, r1
    1f74:	0030      	movs	r0, r6
    1f76:	0039      	movs	r1, r7
    1f78:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1f7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1f7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1f7e:	9010      	str	r0, [sp, #64]	; 0x40
    1f80:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1f82:	9802      	ldr	r0, [sp, #8]
    1f84:	9903      	ldr	r1, [sp, #12]
    1f86:	47a8      	blx	r5
    1f88:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1f8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1f8c:	0006      	movs	r6, r0
    1f8e:	000f      	movs	r7, r1
    1f90:	9802      	ldr	r0, [sp, #8]
    1f92:	9903      	ldr	r1, [sp, #12]
    1f94:	47a8      	blx	r5
    1f96:	000b      	movs	r3, r1
    1f98:	0002      	movs	r2, r0
    1f9a:	0039      	movs	r1, r7
    1f9c:	0030      	movs	r0, r6
    1f9e:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1fa0:	2400      	movs	r4, #0
    1fa2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1fa4:	9002      	str	r0, [sp, #8]
    1fa6:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1fa8:	3301      	adds	r3, #1
    1faa:	9338      	str	r3, [sp, #224]	; 0xe0
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1fac:	4b22      	ldr	r3, [pc, #136]	; (2038 <STACK_SIZE+0x38>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1fae:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1fb0:	9326      	str	r3, [sp, #152]	; 0x98
    1fb2:	4b1f      	ldr	r3, [pc, #124]	; (2030 <STACK_SIZE+0x30>)
    1fb4:	9328      	str	r3, [sp, #160]	; 0xa0
    1fb6:	ab40      	add	r3, sp, #256	; 0x100
    1fb8:	18e5      	adds	r5, r4, r3

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1fba:	2300      	movs	r3, #0
    1fbc:	9516      	str	r5, [sp, #88]	; 0x58
    1fbe:	9312      	str	r3, [sp, #72]	; 0x48
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1fc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1fc2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1fc4:	18e3      	adds	r3, r4, r3
    1fc6:	189b      	adds	r3, r3, r2
    1fc8:	681a      	ldr	r2, [r3, #0]
    1fca:	685b      	ldr	r3, [r3, #4]
    1fcc:	9218      	str	r2, [sp, #96]	; 0x60
    1fce:	9319      	str	r3, [sp, #100]	; 0x64
    1fd0:	9818      	ldr	r0, [sp, #96]	; 0x60
    1fd2:	9919      	ldr	r1, [sp, #100]	; 0x64
    1fd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1fd6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1fd8:	681e      	ldr	r6, [r3, #0]
    1fda:	685f      	ldr	r7, [r3, #4]
    1fdc:	0032      	movs	r2, r6
    1fde:	003b      	movs	r3, r7
    1fe0:	47a8      	blx	r5
    1fe2:	0032      	movs	r2, r6
    1fe4:	003b      	movs	r3, r7
    1fe6:	4d15      	ldr	r5, [pc, #84]	; (203c <STACK_SIZE+0x3c>)
    1fe8:	47a8      	blx	r5
    1fea:	4b15      	ldr	r3, [pc, #84]	; (2040 <STACK_SIZE+0x40>)
    1fec:	4a15      	ldr	r2, [pc, #84]	; (2044 <STACK_SIZE+0x44>)
    1fee:	4e16      	ldr	r6, [pc, #88]	; (2048 <STACK_SIZE+0x48>)
    1ff0:	47b0      	blx	r6
                    notdone++;
    1ff2:	1e43      	subs	r3, r0, #1
    1ff4:	4198      	sbcs	r0, r3
    1ff6:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1ff8:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1ffa:	181b      	adds	r3, r3, r0
    1ffc:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1ffe:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2000:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2002:	c10c      	stmia	r1!, {r2, r3}
    2004:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2006:	9116      	str	r1, [sp, #88]	; 0x58
    2008:	3308      	adds	r3, #8
    200a:	9312      	str	r3, [sp, #72]	; 0x48
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    200c:	2b10      	cmp	r3, #16
    200e:	d1d7      	bne.n	1fc0 <computeKalmanGains+0x814>
    2010:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    2012:	2c30      	cmp	r4, #48	; 0x30
    2014:	d1cf      	bne.n	1fb6 <computeKalmanGains+0x80a>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    2016:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2018:	2b00      	cmp	r3, #0
    201a:	d001      	beq.n	2020 <STACK_SIZE+0x20>
    201c:	f7ff fc2c 	bl	1878 <computeKalmanGains+0xcc>
    2020:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    2022:	2b63      	cmp	r3, #99	; 0x63
    2024:	dc01      	bgt.n	202a <STACK_SIZE+0x2a>
    2026:	f7ff fc27 	bl	1878 <computeKalmanGains+0xcc>
            continue;
        else
            break;
    }
}
    202a:	b04d      	add	sp, #308	; 0x134
    202c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	00005b49 	.word	0x00005b49
    2034:	3ff00000 	.word	0x3ff00000
    2038:	20000278 	.word	0x20000278
    203c:	00004e0d 	.word	0x00004e0d
    2040:	3ee4f8b5 	.word	0x3ee4f8b5
    2044:	88e368f1 	.word	0x88e368f1
    2048:	0000448d 	.word	0x0000448d

0000204c <KalmanBothUpdate>:
    velocity = estp[1] + kgain[1][0] * alt_inovation;
    accel =    estp[2] + kgain[2][0] * alt_inovation;

}

void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    204c:	b5f0      	push	{r4, r5, r6, r7, lr}
    204e:	b08f      	sub	sp, #60	; 0x3c
    2050:	9208      	str	r2, [sp, #32]
    2052:	9309      	str	r3, [sp, #36]	; 0x24

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    2054:	4b68      	ldr	r3, [pc, #416]	; (21f8 <KalmanBothUpdate+0x1ac>)
    2056:	4d69      	ldr	r5, [pc, #420]	; (21fc <KalmanBothUpdate+0x1b0>)
    2058:	685c      	ldr	r4, [r3, #4]
    205a:	681b      	ldr	r3, [r3, #0]
    205c:	9300      	str	r3, [sp, #0]
    205e:	9401      	str	r4, [sp, #4]
    2060:	4b67      	ldr	r3, [pc, #412]	; (2200 <KalmanBothUpdate+0x1b4>)
    velocity = estp[1] + kgain[1][0] * alt_inovation;
    accel =    estp[2] + kgain[2][0] * alt_inovation;

}

void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    2062:	9006      	str	r0, [sp, #24]
    2064:	9107      	str	r1, [sp, #28]

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    2066:	685c      	ldr	r4, [r3, #4]
    2068:	681b      	ldr	r3, [r3, #0]
    206a:	9800      	ldr	r0, [sp, #0]
    206c:	9901      	ldr	r1, [sp, #4]
    206e:	9302      	str	r3, [sp, #8]
    2070:	9403      	str	r4, [sp, #12]
    2072:	4b64      	ldr	r3, [pc, #400]	; (2204 <KalmanBothUpdate+0x1b8>)
    2074:	685c      	ldr	r4, [r3, #4]
    2076:	681b      	ldr	r3, [r3, #0]
    2078:	9304      	str	r3, [sp, #16]
    207a:	9405      	str	r4, [sp, #20]
    207c:	4c62      	ldr	r4, [pc, #392]	; (2208 <KalmanBothUpdate+0x1bc>)
    207e:	6822      	ldr	r2, [r4, #0]
    2080:	6863      	ldr	r3, [r4, #4]
    2082:	47a8      	blx	r5
    2084:	68a2      	ldr	r2, [r4, #8]
    2086:	68e3      	ldr	r3, [r4, #12]
    2088:	0006      	movs	r6, r0
    208a:	000f      	movs	r7, r1
    208c:	9802      	ldr	r0, [sp, #8]
    208e:	9903      	ldr	r1, [sp, #12]
    2090:	47a8      	blx	r5
    2092:	0002      	movs	r2, r0
    2094:	000b      	movs	r3, r1
    2096:	0030      	movs	r0, r6
    2098:	0039      	movs	r1, r7
    209a:	4e5c      	ldr	r6, [pc, #368]	; (220c <KalmanBothUpdate+0x1c0>)
    209c:	47b0      	blx	r6
    209e:	6922      	ldr	r2, [r4, #16]
    20a0:	6963      	ldr	r3, [r4, #20]
    20a2:	0006      	movs	r6, r0
    20a4:	000f      	movs	r7, r1
    20a6:	9804      	ldr	r0, [sp, #16]
    20a8:	9905      	ldr	r1, [sp, #20]
    20aa:	47a8      	blx	r5
    20ac:	0002      	movs	r2, r0
    20ae:	000b      	movs	r3, r1
    20b0:	0030      	movs	r0, r6
    20b2:	0039      	movs	r1, r7
    20b4:	4e55      	ldr	r6, [pc, #340]	; (220c <KalmanBothUpdate+0x1c0>)
    20b6:	47b0      	blx	r6
    20b8:	900a      	str	r0, [sp, #40]	; 0x28
    20ba:	910b      	str	r1, [sp, #44]	; 0x2c
    20bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    20be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    20c0:	4953      	ldr	r1, [pc, #332]	; (2210 <KalmanBothUpdate+0x1c4>)
    20c2:	600a      	str	r2, [r1, #0]
    20c4:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    20c6:	69a2      	ldr	r2, [r4, #24]
    20c8:	69e3      	ldr	r3, [r4, #28]
    20ca:	9800      	ldr	r0, [sp, #0]
    20cc:	9901      	ldr	r1, [sp, #4]
    20ce:	47a8      	blx	r5
    20d0:	6a22      	ldr	r2, [r4, #32]
    20d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    20d4:	0006      	movs	r6, r0
    20d6:	000f      	movs	r7, r1
    20d8:	9802      	ldr	r0, [sp, #8]
    20da:	9903      	ldr	r1, [sp, #12]
    20dc:	47a8      	blx	r5
    20de:	0002      	movs	r2, r0
    20e0:	000b      	movs	r3, r1
    20e2:	0030      	movs	r0, r6
    20e4:	0039      	movs	r1, r7
    20e6:	4e49      	ldr	r6, [pc, #292]	; (220c <KalmanBothUpdate+0x1c0>)
    20e8:	47b0      	blx	r6
    20ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    20ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    20ee:	0006      	movs	r6, r0
    20f0:	000f      	movs	r7, r1
    20f2:	9804      	ldr	r0, [sp, #16]
    20f4:	9905      	ldr	r1, [sp, #20]
    20f6:	47a8      	blx	r5
    20f8:	0002      	movs	r2, r0
    20fa:	000b      	movs	r3, r1
    20fc:	0030      	movs	r0, r6
    20fe:	0039      	movs	r1, r7
    2100:	4e42      	ldr	r6, [pc, #264]	; (220c <KalmanBothUpdate+0x1c0>)
    2102:	47b0      	blx	r6
    2104:	900c      	str	r0, [sp, #48]	; 0x30
    2106:	910d      	str	r1, [sp, #52]	; 0x34
    2108:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    210a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    210c:	4940      	ldr	r1, [pc, #256]	; (2210 <KalmanBothUpdate+0x1c4>)
    210e:	608a      	str	r2, [r1, #8]
    2110:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    2112:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2114:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2116:	9800      	ldr	r0, [sp, #0]
    2118:	9901      	ldr	r1, [sp, #4]
    211a:	47a8      	blx	r5
    211c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    211e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2120:	0006      	movs	r6, r0
    2122:	000f      	movs	r7, r1
    2124:	9802      	ldr	r0, [sp, #8]
    2126:	9903      	ldr	r1, [sp, #12]
    2128:	47a8      	blx	r5
    212a:	0002      	movs	r2, r0
    212c:	000b      	movs	r3, r1
    212e:	0030      	movs	r0, r6
    2130:	0039      	movs	r1, r7
    2132:	4e36      	ldr	r6, [pc, #216]	; (220c <KalmanBothUpdate+0x1c0>)
    2134:	47b0      	blx	r6
    2136:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2138:	6c63      	ldr	r3, [r4, #68]	; 0x44
    213a:	0006      	movs	r6, r0
    213c:	000f      	movs	r7, r1
    213e:	9804      	ldr	r0, [sp, #16]
    2140:	9905      	ldr	r1, [sp, #20]
    2142:	47a8      	blx	r5
    2144:	4c31      	ldr	r4, [pc, #196]	; (220c <KalmanBothUpdate+0x1c0>)
    2146:	0002      	movs	r2, r0
    2148:	000b      	movs	r3, r1
    214a:	0030      	movs	r0, r6
    214c:	0039      	movs	r1, r7
    214e:	47a0      	blx	r4
    2150:	0003      	movs	r3, r0
    2152:	000c      	movs	r4, r1
    2154:	4a2e      	ldr	r2, [pc, #184]	; (2210 <KalmanBothUpdate+0x1c4>)
    2156:	9000      	str	r0, [sp, #0]
    2158:	9101      	str	r1, [sp, #4]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    215a:	9806      	ldr	r0, [sp, #24]
    215c:	9907      	ldr	r1, [sp, #28]
void KalmanBothUpdate( double alt_inovation, double accel_inovation) {

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    215e:	6113      	str	r3, [r2, #16]
    2160:	6154      	str	r4, [r2, #20]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    2162:	4c2c      	ldr	r4, [pc, #176]	; (2214 <KalmanBothUpdate+0x1c8>)
    2164:	6822      	ldr	r2, [r4, #0]
    2166:	6863      	ldr	r3, [r4, #4]
    2168:	47a8      	blx	r5
    216a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    216c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    216e:	4e27      	ldr	r6, [pc, #156]	; (220c <KalmanBothUpdate+0x1c0>)
    2170:	47b0      	blx	r6
    2172:	68a2      	ldr	r2, [r4, #8]
    2174:	68e3      	ldr	r3, [r4, #12]
    2176:	0006      	movs	r6, r0
    2178:	000f      	movs	r7, r1
    217a:	9808      	ldr	r0, [sp, #32]
    217c:	9909      	ldr	r1, [sp, #36]	; 0x24
    217e:	47a8      	blx	r5
    2180:	0002      	movs	r2, r0
    2182:	000b      	movs	r3, r1
    2184:	0030      	movs	r0, r6
    2186:	0039      	movs	r1, r7
    2188:	4e20      	ldr	r6, [pc, #128]	; (220c <KalmanBothUpdate+0x1c0>)
    218a:	47b0      	blx	r6
    218c:	4b1a      	ldr	r3, [pc, #104]	; (21f8 <KalmanBothUpdate+0x1ac>)
    218e:	6018      	str	r0, [r3, #0]
    2190:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    2192:	6922      	ldr	r2, [r4, #16]
    2194:	6963      	ldr	r3, [r4, #20]
    2196:	9806      	ldr	r0, [sp, #24]
    2198:	9907      	ldr	r1, [sp, #28]
    219a:	47a8      	blx	r5
    219c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    219e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    21a0:	47b0      	blx	r6
    21a2:	69a2      	ldr	r2, [r4, #24]
    21a4:	69e3      	ldr	r3, [r4, #28]
    21a6:	0006      	movs	r6, r0
    21a8:	000f      	movs	r7, r1
    21aa:	9808      	ldr	r0, [sp, #32]
    21ac:	9909      	ldr	r1, [sp, #36]	; 0x24
    21ae:	47a8      	blx	r5
    21b0:	0002      	movs	r2, r0
    21b2:	000b      	movs	r3, r1
    21b4:	0030      	movs	r0, r6
    21b6:	0039      	movs	r1, r7
    21b8:	4e14      	ldr	r6, [pc, #80]	; (220c <KalmanBothUpdate+0x1c0>)
    21ba:	47b0      	blx	r6
    21bc:	4b10      	ldr	r3, [pc, #64]	; (2200 <KalmanBothUpdate+0x1b4>)
    21be:	6018      	str	r0, [r3, #0]
    21c0:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    21c2:	6a22      	ldr	r2, [r4, #32]
    21c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    21c6:	9806      	ldr	r0, [sp, #24]
    21c8:	9907      	ldr	r1, [sp, #28]
    21ca:	47a8      	blx	r5
    21cc:	9a00      	ldr	r2, [sp, #0]
    21ce:	9b01      	ldr	r3, [sp, #4]
    21d0:	47b0      	blx	r6
    21d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    21d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    21d6:	0006      	movs	r6, r0
    21d8:	000f      	movs	r7, r1
    21da:	9808      	ldr	r0, [sp, #32]
    21dc:	9909      	ldr	r1, [sp, #36]	; 0x24
    21de:	47a8      	blx	r5
    21e0:	4c0a      	ldr	r4, [pc, #40]	; (220c <KalmanBothUpdate+0x1c0>)
    21e2:	0002      	movs	r2, r0
    21e4:	000b      	movs	r3, r1
    21e6:	0030      	movs	r0, r6
    21e8:	0039      	movs	r1, r7
    21ea:	47a0      	blx	r4
    21ec:	4b05      	ldr	r3, [pc, #20]	; (2204 <KalmanBothUpdate+0x1b8>)
    21ee:	6018      	str	r0, [r3, #0]
    21f0:	6059      	str	r1, [r3, #4]
}
    21f2:	b00f      	add	sp, #60	; 0x3c
    21f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21f6:	46c0      	nop			; (mov r8, r8)
    21f8:	200002e0 	.word	0x200002e0
    21fc:	00005655 	.word	0x00005655
    2200:	200002d8 	.word	0x200002d8
    2204:	200002d0 	.word	0x200002d0
    2208:	20000010 	.word	0x20000010
    220c:	000047b5 	.word	0x000047b5
    2210:	200002e8 	.word	0x200002e8
    2214:	20000278 	.word	0x20000278

00002218 <computeKalmanStates>:

void computeKalmanStates() {
    2218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    221a:	4d19      	ldr	r5, [pc, #100]	; (2280 <computeKalmanStates+0x68>)
    221c:	4b19      	ldr	r3, [pc, #100]	; (2284 <computeKalmanStates+0x6c>)
    221e:	6a68      	ldr	r0, [r5, #36]	; 0x24
    2220:	4798      	blx	r3
    2222:	4b19      	ldr	r3, [pc, #100]	; (2288 <computeKalmanStates+0x70>)
    2224:	4c19      	ldr	r4, [pc, #100]	; (228c <computeKalmanStates+0x74>)
    2226:	689a      	ldr	r2, [r3, #8]
    2228:	68db      	ldr	r3, [r3, #12]
    222a:	47a0      	blx	r4
    222c:	4a18      	ldr	r2, [pc, #96]	; (2290 <computeKalmanStates+0x78>)
    222e:	4b19      	ldr	r3, [pc, #100]	; (2294 <computeKalmanStates+0x7c>)
    2230:	4e19      	ldr	r6, [pc, #100]	; (2298 <computeKalmanStates+0x80>)
    2232:	47b0      	blx	r6

    pressure = sample.pressureAltitude;
    2234:	6daa      	ldr	r2, [r5, #88]	; 0x58
    2236:	6deb      	ldr	r3, [r5, #92]	; 0x5c

    if (altitude == 0) {
    2238:	4d18      	ldr	r5, [pc, #96]	; (229c <computeKalmanStates+0x84>)

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;

    pressure = sample.pressureAltitude;
    223a:	9200      	str	r2, [sp, #0]
    223c:	9301      	str	r3, [sp, #4]

    if (altitude == 0) {
    223e:	4c18      	ldr	r4, [pc, #96]	; (22a0 <computeKalmanStates+0x88>)

void computeKalmanStates() {

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2240:	0006      	movs	r6, r0
    2242:	000f      	movs	r7, r1

    pressure = sample.pressureAltitude;

    if (altitude == 0) {
    2244:	6828      	ldr	r0, [r5, #0]
    2246:	6869      	ldr	r1, [r5, #4]
    2248:	2200      	movs	r2, #0
    224a:	2300      	movs	r3, #0
    224c:	47a0      	blx	r4
    224e:	4c0f      	ldr	r4, [pc, #60]	; (228c <computeKalmanStates+0x74>)
    2250:	2800      	cmp	r0, #0
    2252:	d003      	beq.n	225c <computeKalmanStates+0x44>
        altitude = pressure;
    2254:	9a00      	ldr	r2, [sp, #0]
    2256:	9b01      	ldr	r3, [sp, #4]
    2258:	602a      	str	r2, [r5, #0]
    225a:	606b      	str	r3, [r5, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    accel_inovation = acceleration - estp[2];
    225c:	4d11      	ldr	r5, [pc, #68]	; (22a4 <computeKalmanStates+0x8c>)


 //   if (flightState < flightDrogue) {
        KalmanBothUpdate(alt_inovation,accel_inovation);
    225e:	0030      	movs	r0, r6
    2260:	692a      	ldr	r2, [r5, #16]
    2262:	696b      	ldr	r3, [r5, #20]
    2264:	0039      	movs	r1, r7
    2266:	47a0      	blx	r4
    2268:	682a      	ldr	r2, [r5, #0]
    226a:	686b      	ldr	r3, [r5, #4]
    226c:	0006      	movs	r6, r0
    226e:	000f      	movs	r7, r1
    2270:	9800      	ldr	r0, [sp, #0]
    2272:	9901      	ldr	r1, [sp, #4]
    2274:	47a0      	blx	r4
    2276:	0032      	movs	r2, r6
    2278:	003b      	movs	r3, r7
    227a:	4c0b      	ldr	r4, [pc, #44]	; (22a8 <computeKalmanStates+0x90>)
    227c:	47a0      	blx	r4
   // } else {
      //  KalmanBaroUpdate(alt_inovation);
  //  }
}
    227e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2280:	20000578 	.word	0x20000578
    2284:	00006391 	.word	0x00006391
    2288:	20000108 	.word	0x20000108
    228c:	00005b49 	.word	0x00005b49
    2290:	33daf8df 	.word	0x33daf8df
    2294:	4040164b 	.word	0x4040164b
    2298:	00005655 	.word	0x00005655
    229c:	200002e0 	.word	0x200002e0
    22a0:	00004459 	.word	0x00004459
    22a4:	200002e8 	.word	0x200002e8
    22a8:	0000204d 	.word	0x0000204d

000022ac <makePage>:
u16_t flightAddressLocationInIndex;

u8_t flightStartAddress[3];


void makePage(u8_t bytesToWrite, u8_t* data) {
    22ac:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    22ae:	4a1f      	ldr	r2, [pc, #124]	; (232c <makePage+0x80>)
    22b0:	7815      	ldrb	r5, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    22b2:	1943      	adds	r3, r0, r5
    22b4:	2bff      	cmp	r3, #255	; 0xff
    22b6:	dc03      	bgt.n	22c0 <makePage+0x14>
    22b8:	2300      	movs	r3, #0
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    22ba:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    22bc:	4c1c      	ldr	r4, [pc, #112]	; (2330 <makePage+0x84>)
    22be:	e029      	b.n	2314 <makePage+0x68>
    22c0:	2300      	movs	r3, #0
    22c2:	4e1b      	ldr	r6, [pc, #108]	; (2330 <makePage+0x84>)

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    22c4:	195f      	adds	r7, r3, r5
    22c6:	b2dc      	uxtb	r4, r3
    22c8:	46b4      	mov	ip, r6
    22ca:	2fff      	cmp	r7, #255	; 0xff
    22cc:	dc04      	bgt.n	22d8 <makePage+0x2c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    22ce:	5ccc      	ldrb	r4, [r1, r3]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    22d0:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    22d2:	55f4      	strb	r4, [r6, r7]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    22d4:	b29b      	uxth	r3, r3
    22d6:	e7f5      	b.n	22c4 <makePage+0x18>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    22d8:	2300      	movs	r3, #0
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    22da:	4f16      	ldr	r7, [pc, #88]	; (2334 <makePage+0x88>)
    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    22dc:	7013      	strb	r3, [r2, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    22de:	4665      	mov	r5, ip
    22e0:	18ed      	adds	r5, r5, r3
    22e2:	782e      	ldrb	r6, [r5, #0]
    22e4:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    22e6:	2600      	movs	r6, #0
    22e8:	702e      	strb	r6, [r5, #0]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    22ea:	2580      	movs	r5, #128	; 0x80
    22ec:	3301      	adds	r3, #1
    22ee:	006d      	lsls	r5, r5, #1
    22f0:	42ab      	cmp	r3, r5
    22f2:	d1f4      	bne.n	22de <makePage+0x32>
    22f4:	2300      	movs	r3, #0
    22f6:	1c5d      	adds	r5, r3, #1
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    22f8:	4284      	cmp	r4, r0
    22fa:	d207      	bcs.n	230c <makePage+0x60>
            pageBuffer[dataByte] = data[bytesWritten];
    22fc:	4667      	mov	r7, ip
    22fe:	5d0e      	ldrb	r6, [r1, r4]
            bytesWritten++;
    2300:	3401      	adds	r4, #1
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            pageBuffer[dataByte] = data[bytesWritten];
    2302:	54fe      	strb	r6, [r7, r3]
            bytesWritten++;
    2304:	b2e4      	uxtb	r4, r4
            pageLocation = dataByte + 1;
    2306:	7015      	strb	r5, [r2, #0]
    2308:	002b      	movs	r3, r5
    230a:	e7f4      	b.n	22f6 <makePage+0x4a>
        }
        pageReady = true;
    230c:	2201      	movs	r2, #1
    230e:	4b0a      	ldr	r3, [pc, #40]	; (2338 <makePage+0x8c>)
    2310:	701a      	strb	r2, [r3, #0]
    2312:	e009      	b.n	2328 <makePage+0x7c>

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2314:	4283      	cmp	r3, r0
    2316:	d807      	bhi.n	2328 <makePage+0x7c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    2318:	5ccf      	ldrb	r7, [r1, r3]
    231a:	18e6      	adds	r6, r4, r3
    231c:	5577      	strb	r7, [r6, r5]
            bytesWritten++;
            pageLocation = location + dataByte;
    231e:	18ee      	adds	r6, r5, r3
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2320:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
    2322:	7016      	strb	r6, [r2, #0]
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2324:	b29b      	uxth	r3, r3
    2326:	e7f5      	b.n	2314 <makePage+0x68>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
        }
    }
}
    2328:	bdf0      	pop	{r4, r5, r6, r7, pc}
    232a:	46c0      	nop			; (mov r8, r8)
    232c:	20000570 	.word	0x20000570
    2330:	20000166 	.word	0x20000166
    2334:	20000302 	.word	0x20000302
    2338:	20000402 	.word	0x20000402

0000233c <writePadBuffer>:

void writePadBuffer(u8_t bytesToWrite, u8_t* data) {
    233c:	b570      	push	{r4, r5, r6, lr}
    233e:	4a0e      	ldr	r2, [pc, #56]	; (2378 <writePadBuffer+0x3c>)
    2340:	4c0e      	ldr	r4, [pc, #56]	; (237c <writePadBuffer+0x40>)
    2342:	2300      	movs	r3, #0
    u8_t i, j;

    for (i = 1; i < 10; i++) {
        for (j = 0; j < bytesToWrite; j++) {
    2344:	b2dd      	uxtb	r5, r3
    2346:	42a8      	cmp	r0, r5
    2348:	d905      	bls.n	2356 <writePadBuffer+0x1a>
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
    234a:	001d      	movs	r5, r3
    234c:	5cd6      	ldrb	r6, [r2, r3]
    234e:	3d23      	subs	r5, #35	; 0x23
    2350:	5556      	strb	r6, [r2, r5]
    2352:	3301      	adds	r3, #1
    2354:	e7f6      	b.n	2344 <writePadBuffer+0x8>
    2356:	3223      	adds	r2, #35	; 0x23
}

void writePadBuffer(u8_t bytesToWrite, u8_t* data) {
    u8_t i, j;

    for (i = 1; i < 10; i++) {
    2358:	42a2      	cmp	r2, r4
    235a:	d1f2      	bne.n	2342 <writePadBuffer+0x6>
    235c:	2300      	movs	r3, #0
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
        }
    }

    for (i = 0; i < bytesToWrite ; i++) {
        padSensorBuffer[9][i] = data[i];
    235e:	4c08      	ldr	r4, [pc, #32]	; (2380 <writePadBuffer+0x44>)
        for (j = 0; j < bytesToWrite; j++) {
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
        }
    }

    for (i = 0; i < bytesToWrite ; i++) {
    2360:	b2da      	uxtb	r2, r3
    2362:	4290      	cmp	r0, r2
    2364:	d906      	bls.n	2374 <writePadBuffer+0x38>
        padSensorBuffer[9][i] = data[i];
    2366:	001a      	movs	r2, r3
    2368:	5ccd      	ldrb	r5, [r1, r3]
    236a:	323c      	adds	r2, #60	; 0x3c
    236c:	32ff      	adds	r2, #255	; 0xff
    236e:	54a5      	strb	r5, [r4, r2]
    2370:	3301      	adds	r3, #1
    2372:	e7f5      	b.n	2360 <writePadBuffer+0x24>
    }
}
    2374:	bd70      	pop	{r4, r5, r6, pc}
    2376:	46c0      	nop			; (mov r8, r8)
    2378:	2000042f 	.word	0x2000042f
    237c:	2000056a 	.word	0x2000056a
    2380:	2000040c 	.word	0x2000040c

00002384 <logFlight>:


void logFlight() {
    2384:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    2386:	2346      	movs	r3, #70	; 0x46
    2388:	466a      	mov	r2, sp
    238a:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    238c:	2300      	movs	r3, #0

    offsets.TminusZeroTime = sample.sampleTick;

    dataToSend[2] = offsets.TminusZeroTime >> 0;
    238e:	4669      	mov	r1, sp
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    2390:	4668      	mov	r0, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;
    2392:	7053      	strb	r3, [r2, #1]

    offsets.TminusZeroTime = sample.sampleTick;
    2394:	4b11      	ldr	r3, [pc, #68]	; (23dc <logFlight+0x58>)
    2396:	4a12      	ldr	r2, [pc, #72]	; (23e0 <logFlight+0x5c>)
    2398:	685b      	ldr	r3, [r3, #4]

    dataToSend[2] = offsets.TminusZeroTime >> 0;
    239a:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    239c:	0a19      	lsrs	r1, r3, #8
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;

    offsets.TminusZeroTime = sample.sampleTick;
    239e:	6053      	str	r3, [r2, #4]

    dataToSend[2] = offsets.TminusZeroTime >> 0;
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    23a0:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    23a2:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.TminusZeroTime >> 24;
    23a4:	0e1b      	lsrs	r3, r3, #24
    23a6:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    23a8:	6993      	ldr	r3, [r2, #24]

    offsets.TminusZeroTime = sample.sampleTick;

    dataToSend[2] = offsets.TminusZeroTime >> 0;
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    23aa:	7101      	strb	r1, [r0, #4]
    dataToSend[5] = offsets.TminusZeroTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    23ac:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = offsets.TminusZeroTime >> 0;
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    dataToSend[5] = offsets.TminusZeroTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    23ae:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    23b0:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    23b2:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    23b4:	0e1b      	lsrs	r3, r3, #24
    23b6:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    23b8:	6a13      	ldr	r3, [r2, #32]
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    dataToSend[5] = offsets.TminusZeroTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    23ba:	7201      	strb	r1, [r0, #8]
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    23bc:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    23be:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    23c0:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    23c2:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    23c4:	0e1b      	lsrs	r3, r3, #24
    23c6:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    23c8:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    dataToSend[12] = offsets.groundTemperature >> 16;
    23ca:	7302      	strb	r2, [r0, #12]
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    23cc:	73c3      	strb	r3, [r0, #15]
    dataToSend[5] = offsets.TminusZeroTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;
    23ce:	4669      	mov	r1, sp
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
    23d0:	2010      	movs	r0, #16
    23d2:	4b04      	ldr	r3, [pc, #16]	; (23e4 <logFlight+0x60>)
    23d4:	4798      	blx	r3
}
    23d6:	b005      	add	sp, #20
    23d8:	bd00      	pop	{pc}
    23da:	46c0      	nop			; (mov r8, r8)
    23dc:	20000578 	.word	0x20000578
    23e0:	20000108 	.word	0x20000108
    23e4:	000022ad 	.word	0x000022ad

000023e8 <logEvent>:

void logEvent(u8_t eventType) {
    23e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;
    23ea:	4d12      	ldr	r5, [pc, #72]	; (2434 <logEvent+0x4c>)
    23ec:	4b12      	ldr	r3, [pc, #72]	; (2438 <logEvent+0x50>)
    23ee:	686a      	ldr	r2, [r5, #4]
    23f0:	685b      	ldr	r3, [r3, #4]

    dataToSend[0] = EVENT_LOG;
    23f2:	ac01      	add	r4, sp, #4
void logEvent(u8_t eventType) {

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;
    23f4:	1ad3      	subs	r3, r2, r3

    dataToSend[0] = EVENT_LOG;
    23f6:	2245      	movs	r2, #69	; 0x45
    23f8:	7022      	strb	r2, [r4, #0]
    dataToSend[1] = eventType;
    dataToSend[2] = eventTick >> 0;
    dataToSend[3] = eventTick >> 8;
    23fa:	0a1a      	lsrs	r2, r3, #8
    dataToSend[4] = eventTick >> 16;
    dataToSend[5] = eventTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    23fc:	4e0f      	ldr	r6, [pc, #60]	; (243c <logEvent+0x54>)

    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = eventTick >> 0;
    23fe:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = eventTick >> 8;
    2400:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = eventTick >> 16;
    2402:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = eventTick >> 24;
    2404:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = eventTick >> 0;
    dataToSend[3] = eventTick >> 8;
    dataToSend[4] = eventTick >> 16;
    2406:	7122      	strb	r2, [r4, #4]
    dataToSend[5] = eventTick >> 24;
    2408:	7163      	strb	r3, [r4, #5]
    u8_t dataToSend[12];

    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    240a:	7060      	strb	r0, [r4, #1]
    dataToSend[2] = eventTick >> 0;
    dataToSend[3] = eventTick >> 8;
    dataToSend[4] = eventTick >> 16;
    dataToSend[5] = eventTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    240c:	47b0      	blx	r6
    240e:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 8;
    2410:	47b0      	blx	r6
    2412:	1200      	asrs	r0, r0, #8
    2414:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 16;
    2416:	47b0      	blx	r6
    2418:	1400      	asrs	r0, r0, #16
    241a:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = altitudeAGL() >> 24;
    241c:	47b0      	blx	r6
    241e:	1600      	asrs	r0, r0, #24
    2420:	7260      	strb	r0, [r4, #9]

    dataToSend[10] = sample.voltage.batV >> 0;
    2422:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    2424:	0021      	movs	r1, r4
    dataToSend[6] = altitudeAGL() >> 0;
    dataToSend[7] = altitudeAGL() >> 8;
    dataToSend[8] = altitudeAGL() >> 16;
    dataToSend[9] = altitudeAGL() >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    2426:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    2428:	0a1b      	lsrs	r3, r3, #8
    242a:	72e3      	strb	r3, [r4, #11]

    makePage(bytesToSend, dataToSend);
    242c:	200c      	movs	r0, #12
    242e:	4b04      	ldr	r3, [pc, #16]	; (2440 <logEvent+0x58>)
    2430:	4798      	blx	r3

}
    2432:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    2434:	20000578 	.word	0x20000578
    2438:	20000108 	.word	0x20000108
    243c:	00000b1d 	.word	0x00000b1d
    2440:	000022ad 	.word	0x000022ad

00002444 <logSensors>:

void logSensors() {

    writeLog = false;
    2444:	2200      	movs	r2, #0

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2446:	b5f0      	push	{r4, r5, r6, r7, lr}

    writeLog = false;
    2448:	4b59      	ldr	r3, [pc, #356]	; (25b0 <logSensors+0x16c>)

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    244a:	b08f      	sub	sp, #60	; 0x3c

    writeLog = false;
    244c:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = SENSOR_LOG_LENGTH;
    u8_t dataToSend[SENSOR_LOG_LENGTH];

    float fractionalAccel = accel - (int16_t)(accel);
    244e:	4b59      	ldr	r3, [pc, #356]	; (25b4 <logSensors+0x170>)
    2450:	681e      	ldr	r6, [r3, #0]
    2452:	685f      	ldr	r7, [r3, #4]
    int16_t fractAccelPart = fractionalAccel * 1000;
    2454:	4b58      	ldr	r3, [pc, #352]	; (25b8 <logSensors+0x174>)
    2456:	0039      	movs	r1, r7
    2458:	0030      	movs	r0, r6
    245a:	4798      	blx	r3
    245c:	4d57      	ldr	r5, [pc, #348]	; (25bc <logSensors+0x178>)
    245e:	b200      	sxth	r0, r0
    2460:	47a8      	blx	r5
    2462:	4c57      	ldr	r4, [pc, #348]	; (25c0 <logSensors+0x17c>)
    2464:	0002      	movs	r2, r0
    2466:	000b      	movs	r3, r1
    2468:	0030      	movs	r0, r6
    246a:	0039      	movs	r1, r7
    246c:	47a0      	blx	r4
    246e:	4f55      	ldr	r7, [pc, #340]	; (25c4 <logSensors+0x180>)
    2470:	47b8      	blx	r7
    2472:	4b55      	ldr	r3, [pc, #340]	; (25c8 <logSensors+0x184>)
    2474:	4955      	ldr	r1, [pc, #340]	; (25cc <logSensors+0x188>)
    2476:	4798      	blx	r3
    2478:	4e55      	ldr	r6, [pc, #340]	; (25d0 <logSensors+0x18c>)
    247a:	47b0      	blx	r6
    247c:	b203      	sxth	r3, r0
    247e:	9301      	str	r3, [sp, #4]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    2480:	4b54      	ldr	r3, [pc, #336]	; (25d4 <logSensors+0x190>)
    2482:	681a      	ldr	r2, [r3, #0]
    2484:	685b      	ldr	r3, [r3, #4]
    2486:	9202      	str	r2, [sp, #8]
    2488:	9303      	str	r3, [sp, #12]
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    248a:	0010      	movs	r0, r2
    248c:	0019      	movs	r1, r3
    248e:	4b4a      	ldr	r3, [pc, #296]	; (25b8 <logSensors+0x174>)
    2490:	4798      	blx	r3
    2492:	b200      	sxth	r0, r0
    2494:	47a8      	blx	r5
    2496:	0002      	movs	r2, r0
    2498:	000b      	movs	r3, r1
    249a:	9802      	ldr	r0, [sp, #8]
    249c:	9903      	ldr	r1, [sp, #12]
    249e:	47a0      	blx	r4
    24a0:	47b8      	blx	r7
    24a2:	494a      	ldr	r1, [pc, #296]	; (25cc <logSensors+0x188>)
    24a4:	4b48      	ldr	r3, [pc, #288]	; (25c8 <logSensors+0x184>)
    24a6:	4798      	blx	r3
    24a8:	47b0      	blx	r6

    dataToSend[0] = SENSOR_LOG;
    24aa:	2353      	movs	r3, #83	; 0x53

    dataToSend[1] = sample.sampleTick >> 0;
    24ac:	4d4a      	ldr	r5, [pc, #296]	; (25d8 <logSensors+0x194>)
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;
    24ae:	ac05      	add	r4, sp, #20
    24b0:	7023      	strb	r3, [r4, #0]

    dataToSend[1] = sample.sampleTick >> 0;
    24b2:	686b      	ldr	r3, [r5, #4]

    float fractionalAccel = accel - (int16_t)(accel);
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    24b4:	b206      	sxth	r6, r0

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    24b6:	0a1a      	lsrs	r2, r3, #8
    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    24b8:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    24ba:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    24bc:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    24be:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    24c0:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    24c2:	7123      	strb	r3, [r4, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    24c4:	4f45      	ldr	r7, [pc, #276]	; (25dc <logSensors+0x198>)
    24c6:	47b8      	blx	r7
    24c8:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    24ca:	47b8      	blx	r7
    24cc:	1200      	asrs	r0, r0, #8
    24ce:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    24d0:	47b8      	blx	r7
    24d2:	1400      	asrs	r0, r0, #16
    24d4:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    24d6:	47b8      	blx	r7

    dataToSend[9] = (int16_t)(accel) >> 0;
    24d8:	4b36      	ldr	r3, [pc, #216]	; (25b4 <logSensors+0x170>)
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    24da:	1600      	asrs	r0, r0, #24
    24dc:	7220      	strb	r0, [r4, #8]

    dataToSend[9] = (int16_t)(accel) >> 0;
    24de:	6818      	ldr	r0, [r3, #0]
    24e0:	6859      	ldr	r1, [r3, #4]
    24e2:	4b35      	ldr	r3, [pc, #212]	; (25b8 <logSensors+0x174>)
    24e4:	4798      	blx	r3
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    24e6:	466b      	mov	r3, sp
    24e8:	791b      	ldrb	r3, [r3, #4]
    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    24ea:	b200      	sxth	r0, r0
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    24ec:	72e3      	strb	r3, [r4, #11]
    dataToSend[12] = fractAccelPart >> 8;
    24ee:	9b01      	ldr	r3, [sp, #4]
    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    24f0:	7260      	strb	r0, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    24f2:	1200      	asrs	r0, r0, #8
    24f4:	72a0      	strb	r0, [r4, #10]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    24f6:	1218      	asrs	r0, r3, #8

    dataToSend[13] = (int16_t)(velocity) >> 0;
    24f8:	4b36      	ldr	r3, [pc, #216]	; (25d4 <logSensors+0x190>)
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    24fa:	7320      	strb	r0, [r4, #12]

    dataToSend[13] = (int16_t)(velocity) >> 0;
    24fc:	6818      	ldr	r0, [r3, #0]
    24fe:	6859      	ldr	r1, [r3, #4]
    2500:	4b2d      	ldr	r3, [pc, #180]	; (25b8 <logSensors+0x174>)
    2502:	4798      	blx	r3
    2504:	b200      	sxth	r0, r0
    2506:	7360      	strb	r0, [r4, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    2508:	73e6      	strb	r6, [r4, #15]
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    250a:	1200      	asrs	r0, r0, #8
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    250c:	1236      	asrs	r6, r6, #8

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    250e:	4b34      	ldr	r3, [pc, #208]	; (25e0 <logSensors+0x19c>)
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2510:	73a0      	strb	r0, [r4, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    2512:	7426      	strb	r6, [r4, #16]

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2514:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2516:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    2518:	4798      	blx	r3
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    251a:	0a03      	lsrs	r3, r0, #8
    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    251c:	7460      	strb	r0, [r4, #17]
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    251e:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    2520:	0c03      	lsrs	r3, r0, #16
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;
    2522:	0e00      	lsrs	r0, r0, #24
    2524:	7520      	strb	r0, [r4, #20]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    2526:	74e3      	strb	r3, [r4, #19]
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    2528:	2220      	movs	r2, #32
    252a:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    makePage(bytesToSend, dataToSend);
    252c:	0021      	movs	r1, r4
    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    252e:	7563      	strb	r3, [r4, #21]
    dataToSend[22] = sample.accelXint >> 8;
    2530:	121b      	asrs	r3, r3, #8
    2532:	75a3      	strb	r3, [r4, #22]

    dataToSend[23] = sample.accelYint >> 0;
    2534:	2228      	movs	r2, #40	; 0x28
    2536:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    makePage(bytesToSend, dataToSend);
    2538:	2023      	movs	r0, #35	; 0x23
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    dataToSend[22] = sample.accelXint >> 8;

    dataToSend[23] = sample.accelYint >> 0;
    253a:	75e3      	strb	r3, [r4, #23]
    dataToSend[24] = sample.accelYint >> 8;
    253c:	121b      	asrs	r3, r3, #8
    253e:	7623      	strb	r3, [r4, #24]

    dataToSend[25] = sample.accelZint >> 0;
    2540:	2230      	movs	r2, #48	; 0x30
    2542:	5eab      	ldrsh	r3, [r5, r2]
    2544:	7663      	strb	r3, [r4, #25]
    dataToSend[26] = sample.accelZint >> 8;
    2546:	121b      	asrs	r3, r3, #8
    2548:	76a3      	strb	r3, [r4, #26]

    dataToSend[27] = sample.gyroXint >> 0;
    254a:	2238      	movs	r2, #56	; 0x38
    254c:	5eab      	ldrsh	r3, [r5, r2]
    254e:	76e3      	strb	r3, [r4, #27]
    dataToSend[28] = sample.gyroXint >> 8;
    2550:	121b      	asrs	r3, r3, #8
    2552:	7723      	strb	r3, [r4, #28]

    dataToSend[29] = sample.gyroYint >> 0;
    2554:	1cab      	adds	r3, r5, #2
    2556:	223e      	movs	r2, #62	; 0x3e
    2558:	5e9b      	ldrsh	r3, [r3, r2]
    255a:	7763      	strb	r3, [r4, #29]
    dataToSend[30] = sample.gyroYint >> 8;
    255c:	121b      	asrs	r3, r3, #8
    255e:	77a3      	strb	r3, [r4, #30]

    dataToSend[31] = sample.gyroZint >> 0;
    2560:	002b      	movs	r3, r5
    2562:	3348      	adds	r3, #72	; 0x48
    2564:	2200      	movs	r2, #0
    2566:	5e9b      	ldrsh	r3, [r3, r2]
    dataToSend[32] = sample.gyroZint >> 8;
    2568:	aa04      	add	r2, sp, #16
    dataToSend[28] = sample.gyroXint >> 8;

    dataToSend[29] = sample.gyroYint >> 0;
    dataToSend[30] = sample.gyroYint >> 8;

    dataToSend[31] = sample.gyroZint >> 0;
    256a:	77e3      	strb	r3, [r4, #31]
    dataToSend[32] = sample.gyroZint >> 8;
    256c:	3205      	adds	r2, #5
    256e:	121b      	asrs	r3, r3, #8
    2570:	77d3      	strb	r3, [r2, #31]

    dataToSend[33] = sample.analogRaw >> 0;
    2572:	8b2b      	ldrh	r3, [r5, #24]
    2574:	aa04      	add	r2, sp, #16
    2576:	3206      	adds	r2, #6
    2578:	77d3      	strb	r3, [r2, #31]
    dataToSend[34] = sample.analogRaw >> 8;
    257a:	aa04      	add	r2, sp, #16
    257c:	3207      	adds	r2, #7
    257e:	0a1b      	lsrs	r3, r3, #8
    2580:	77d3      	strb	r3, [r2, #31]

    makePage(bytesToSend, dataToSend);
    2582:	4b18      	ldr	r3, [pc, #96]	; (25e4 <logSensors+0x1a0>)
    2584:	4798      	blx	r3

    if (pageReady) {
    2586:	4b18      	ldr	r3, [pc, #96]	; (25e8 <logSensors+0x1a4>)
    2588:	781a      	ldrb	r2, [r3, #0]
    258a:	2a00      	cmp	r2, #0
    258c:	d00e      	beq.n	25ac <logSensors+0x168>
        pageReady = false;
    258e:	2200      	movs	r2, #0
    2590:	701a      	strb	r2, [r3, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    2592:	2280      	movs	r2, #128	; 0x80
    2594:	4b15      	ldr	r3, [pc, #84]	; (25ec <logSensors+0x1a8>)
        pinToggle(LedPin);
        AT25SEWritePage(currentAddress,pageToWrite);
    2596:	4c16      	ldr	r4, [pc, #88]	; (25f0 <logSensors+0x1ac>)
    2598:	0352      	lsls	r2, r2, #13
    259a:	61da      	str	r2, [r3, #28]
    259c:	4915      	ldr	r1, [pc, #84]	; (25f4 <logSensors+0x1b0>)
    259e:	4b16      	ldr	r3, [pc, #88]	; (25f8 <logSensors+0x1b4>)
    25a0:	6820      	ldr	r0, [r4, #0]
    25a2:	4798      	blx	r3
        currentAddress = (currentAddress + 0x100);
    25a4:	6823      	ldr	r3, [r4, #0]
    25a6:	3301      	adds	r3, #1
    25a8:	33ff      	adds	r3, #255	; 0xff
    25aa:	6023      	str	r3, [r4, #0]
    }

}
    25ac:	b00f      	add	sp, #60	; 0x3c
    25ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25b0:	20000152 	.word	0x20000152
    25b4:	200002d0 	.word	0x200002d0
    25b8:	00006231 	.word	0x00006231
    25bc:	0000629d 	.word	0x0000629d
    25c0:	00005b49 	.word	0x00005b49
    25c4:	00006439 	.word	0x00006439
    25c8:	00004549 	.word	0x00004549
    25cc:	447a0000 	.word	0x447a0000
    25d0:	00004771 	.word	0x00004771
    25d4:	200002d8 	.word	0x200002d8
    25d8:	20000578 	.word	0x20000578
    25dc:	00000b1d 	.word	0x00000b1d
    25e0:	0000450d 	.word	0x0000450d
    25e4:	000022ad 	.word	0x000022ad
    25e8:	20000402 	.word	0x20000402
    25ec:	41004400 	.word	0x41004400
    25f0:	20000408 	.word	0x20000408
    25f4:	20000302 	.word	0x20000302
    25f8:	000002a5 	.word	0x000002a5

000025fc <logSensorsOnPad>:

void logSensorsOnPad() {

    writeLog = false;
    25fc:	2200      	movs	r2, #0
        currentAddress = (currentAddress + 0x100);
    }

}

void logSensorsOnPad() {
    25fe:	b5f0      	push	{r4, r5, r6, r7, lr}

    writeLog = false;
    2600:	4b50      	ldr	r3, [pc, #320]	; (2744 <logSensorsOnPad+0x148>)
        currentAddress = (currentAddress + 0x100);
    }

}

void logSensorsOnPad() {
    2602:	b08f      	sub	sp, #60	; 0x3c

    writeLog = false;
    2604:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = SENSOR_LOG_LENGTH;
    u8_t dataToSend[SENSOR_LOG_LENGTH];

    float fractionalAccel = accel - (int16_t)(accel);
    2606:	4b50      	ldr	r3, [pc, #320]	; (2748 <logSensorsOnPad+0x14c>)
    2608:	681c      	ldr	r4, [r3, #0]
    260a:	685d      	ldr	r5, [r3, #4]
    int16_t fractAccelPart = fractionalAccel * 1000;
    260c:	4b4f      	ldr	r3, [pc, #316]	; (274c <logSensorsOnPad+0x150>)
    260e:	0029      	movs	r1, r5
    2610:	0020      	movs	r0, r4
    2612:	4798      	blx	r3
    2614:	4e4e      	ldr	r6, [pc, #312]	; (2750 <logSensorsOnPad+0x154>)
    2616:	b200      	sxth	r0, r0
    2618:	47b0      	blx	r6
    261a:	4f4e      	ldr	r7, [pc, #312]	; (2754 <logSensorsOnPad+0x158>)
    261c:	0002      	movs	r2, r0
    261e:	000b      	movs	r3, r1
    2620:	0020      	movs	r0, r4
    2622:	0029      	movs	r1, r5
    2624:	47b8      	blx	r7
    2626:	4c4c      	ldr	r4, [pc, #304]	; (2758 <logSensorsOnPad+0x15c>)
    2628:	47a0      	blx	r4
    262a:	4d4c      	ldr	r5, [pc, #304]	; (275c <logSensorsOnPad+0x160>)
    262c:	494c      	ldr	r1, [pc, #304]	; (2760 <logSensorsOnPad+0x164>)
    262e:	47a8      	blx	r5
    2630:	4b4c      	ldr	r3, [pc, #304]	; (2764 <logSensorsOnPad+0x168>)
    2632:	4798      	blx	r3
    2634:	b203      	sxth	r3, r0
    2636:	9301      	str	r3, [sp, #4]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    2638:	4b4b      	ldr	r3, [pc, #300]	; (2768 <logSensorsOnPad+0x16c>)
    263a:	681a      	ldr	r2, [r3, #0]
    263c:	685b      	ldr	r3, [r3, #4]
    263e:	9202      	str	r2, [sp, #8]
    2640:	9303      	str	r3, [sp, #12]
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2642:	0010      	movs	r0, r2
    2644:	0019      	movs	r1, r3
    2646:	4b41      	ldr	r3, [pc, #260]	; (274c <logSensorsOnPad+0x150>)
    2648:	4798      	blx	r3
    264a:	b200      	sxth	r0, r0
    264c:	47b0      	blx	r6
    264e:	0002      	movs	r2, r0
    2650:	000b      	movs	r3, r1
    2652:	9802      	ldr	r0, [sp, #8]
    2654:	9903      	ldr	r1, [sp, #12]
    2656:	47b8      	blx	r7
    2658:	47a0      	blx	r4
    265a:	4941      	ldr	r1, [pc, #260]	; (2760 <logSensorsOnPad+0x164>)
    265c:	47a8      	blx	r5
    265e:	4b41      	ldr	r3, [pc, #260]	; (2764 <logSensorsOnPad+0x168>)
    2660:	4798      	blx	r3

    dataToSend[0] = SENSOR_LOG;
    2662:	2353      	movs	r3, #83	; 0x53

    dataToSend[1] = sample.sampleTick >> 0;
    2664:	4d41      	ldr	r5, [pc, #260]	; (276c <logSensorsOnPad+0x170>)
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;
    2666:	ac05      	add	r4, sp, #20
    2668:	7023      	strb	r3, [r4, #0]

    dataToSend[1] = sample.sampleTick >> 0;
    266a:	686b      	ldr	r3, [r5, #4]

    float fractionalAccel = accel - (int16_t)(accel);
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    266c:	b206      	sxth	r6, r0

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    266e:	0a1a      	lsrs	r2, r3, #8
    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    2670:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    2672:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    2674:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    2676:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    2678:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    267a:	7123      	strb	r3, [r4, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    267c:	4f3c      	ldr	r7, [pc, #240]	; (2770 <logSensorsOnPad+0x174>)
    267e:	47b8      	blx	r7
    2680:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    2682:	47b8      	blx	r7
    2684:	1200      	asrs	r0, r0, #8
    2686:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    2688:	47b8      	blx	r7
    268a:	1400      	asrs	r0, r0, #16
    268c:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    268e:	47b8      	blx	r7

    dataToSend[9] = (int16_t)(accel) >> 0;
    2690:	4b2d      	ldr	r3, [pc, #180]	; (2748 <logSensorsOnPad+0x14c>)
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    2692:	1600      	asrs	r0, r0, #24
    2694:	7220      	strb	r0, [r4, #8]

    dataToSend[9] = (int16_t)(accel) >> 0;
    2696:	6818      	ldr	r0, [r3, #0]
    2698:	6859      	ldr	r1, [r3, #4]
    269a:	4b2c      	ldr	r3, [pc, #176]	; (274c <logSensorsOnPad+0x150>)
    269c:	4798      	blx	r3
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    269e:	466b      	mov	r3, sp
    26a0:	791b      	ldrb	r3, [r3, #4]
    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    26a2:	b200      	sxth	r0, r0
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    26a4:	72e3      	strb	r3, [r4, #11]
    dataToSend[12] = fractAccelPart >> 8;
    26a6:	9b01      	ldr	r3, [sp, #4]
    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    26a8:	7260      	strb	r0, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    26aa:	1200      	asrs	r0, r0, #8
    26ac:	72a0      	strb	r0, [r4, #10]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    26ae:	1218      	asrs	r0, r3, #8

    dataToSend[13] = (int16_t)(velocity) >> 0;
    26b0:	4b2d      	ldr	r3, [pc, #180]	; (2768 <logSensorsOnPad+0x16c>)
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    26b2:	7320      	strb	r0, [r4, #12]

    dataToSend[13] = (int16_t)(velocity) >> 0;
    26b4:	6818      	ldr	r0, [r3, #0]
    26b6:	6859      	ldr	r1, [r3, #4]
    26b8:	4b24      	ldr	r3, [pc, #144]	; (274c <logSensorsOnPad+0x150>)
    26ba:	4798      	blx	r3
    26bc:	b200      	sxth	r0, r0
    26be:	7360      	strb	r0, [r4, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    26c0:	73e6      	strb	r6, [r4, #15]
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    26c2:	1200      	asrs	r0, r0, #8
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    26c4:	1236      	asrs	r6, r6, #8
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    26c6:	73a0      	strb	r0, [r4, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    26c8:	4b2a      	ldr	r3, [pc, #168]	; (2774 <logSensorsOnPad+0x178>)
    26ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
    26cc:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    26ce:	7426      	strb	r6, [r4, #16]

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    26d0:	4798      	blx	r3
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    26d2:	0a03      	lsrs	r3, r0, #8
    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    26d4:	7460      	strb	r0, [r4, #17]
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    26d6:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    26d8:	0c03      	lsrs	r3, r0, #16
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;
    26da:	0e00      	lsrs	r0, r0, #24
    26dc:	7520      	strb	r0, [r4, #20]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    26de:	74e3      	strb	r3, [r4, #19]
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    26e0:	2220      	movs	r2, #32
    26e2:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    writePadBuffer(bytesToSend, dataToSend);
    26e4:	0021      	movs	r1, r4
    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    26e6:	7563      	strb	r3, [r4, #21]
    dataToSend[22] = sample.accelXint >> 8;
    26e8:	121b      	asrs	r3, r3, #8
    26ea:	75a3      	strb	r3, [r4, #22]

    dataToSend[23] = sample.accelYint >> 0;
    26ec:	2228      	movs	r2, #40	; 0x28
    26ee:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    writePadBuffer(bytesToSend, dataToSend);
    26f0:	2023      	movs	r0, #35	; 0x23
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    dataToSend[22] = sample.accelXint >> 8;

    dataToSend[23] = sample.accelYint >> 0;
    26f2:	75e3      	strb	r3, [r4, #23]
    dataToSend[24] = sample.accelYint >> 8;
    26f4:	121b      	asrs	r3, r3, #8
    26f6:	7623      	strb	r3, [r4, #24]

    dataToSend[25] = sample.accelZint >> 0;
    26f8:	2230      	movs	r2, #48	; 0x30
    26fa:	5eab      	ldrsh	r3, [r5, r2]
    26fc:	7663      	strb	r3, [r4, #25]
    dataToSend[26] = sample.accelZint >> 8;
    26fe:	121b      	asrs	r3, r3, #8
    2700:	76a3      	strb	r3, [r4, #26]

    dataToSend[27] = sample.gyroXint >> 0;
    2702:	2238      	movs	r2, #56	; 0x38
    2704:	5eab      	ldrsh	r3, [r5, r2]
    2706:	76e3      	strb	r3, [r4, #27]
    dataToSend[28] = sample.gyroXint >> 8;
    2708:	121b      	asrs	r3, r3, #8
    270a:	7723      	strb	r3, [r4, #28]

    dataToSend[29] = sample.gyroYint >> 0;
    270c:	1cab      	adds	r3, r5, #2
    270e:	223e      	movs	r2, #62	; 0x3e
    2710:	5e9b      	ldrsh	r3, [r3, r2]
    2712:	7763      	strb	r3, [r4, #29]
    dataToSend[30] = sample.gyroYint >> 8;
    2714:	121b      	asrs	r3, r3, #8
    2716:	77a3      	strb	r3, [r4, #30]

    dataToSend[31] = sample.gyroZint >> 0;
    2718:	002b      	movs	r3, r5
    271a:	3348      	adds	r3, #72	; 0x48
    271c:	2200      	movs	r2, #0
    271e:	5e9b      	ldrsh	r3, [r3, r2]
    dataToSend[32] = sample.gyroZint >> 8;
    2720:	aa04      	add	r2, sp, #16
    dataToSend[28] = sample.gyroXint >> 8;

    dataToSend[29] = sample.gyroYint >> 0;
    dataToSend[30] = sample.gyroYint >> 8;

    dataToSend[31] = sample.gyroZint >> 0;
    2722:	77e3      	strb	r3, [r4, #31]
    dataToSend[32] = sample.gyroZint >> 8;
    2724:	3205      	adds	r2, #5
    2726:	121b      	asrs	r3, r3, #8
    2728:	77d3      	strb	r3, [r2, #31]

    dataToSend[33] = sample.analogRaw >> 0;
    272a:	8b2b      	ldrh	r3, [r5, #24]
    272c:	aa04      	add	r2, sp, #16
    272e:	3206      	adds	r2, #6
    2730:	77d3      	strb	r3, [r2, #31]
    dataToSend[34] = sample.analogRaw >> 8;
    2732:	aa04      	add	r2, sp, #16
    2734:	3207      	adds	r2, #7
    2736:	0a1b      	lsrs	r3, r3, #8
    2738:	77d3      	strb	r3, [r2, #31]

    writePadBuffer(bytesToSend, dataToSend);
    273a:	4b0f      	ldr	r3, [pc, #60]	; (2778 <logSensorsOnPad+0x17c>)
    273c:	4798      	blx	r3

}
    273e:	b00f      	add	sp, #60	; 0x3c
    2740:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2742:	46c0      	nop			; (mov r8, r8)
    2744:	20000152 	.word	0x20000152
    2748:	200002d0 	.word	0x200002d0
    274c:	00006231 	.word	0x00006231
    2750:	0000629d 	.word	0x0000629d
    2754:	00005b49 	.word	0x00005b49
    2758:	00006439 	.word	0x00006439
    275c:	00004549 	.word	0x00004549
    2760:	447a0000 	.word	0x447a0000
    2764:	00004771 	.word	0x00004771
    2768:	200002d8 	.word	0x200002d8
    276c:	20000578 	.word	0x20000578
    2770:	00000b1d 	.word	0x00000b1d
    2774:	0000450d 	.word	0x0000450d
    2778:	0000233d 	.word	0x0000233d

0000277c <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    277c:	2306      	movs	r3, #6

}



u32_t getFlightStartAddress(u8_t flightToFind) {
    277e:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2780:	4358      	muls	r0, r3
    2782:	ac01      	add	r4, sp, #4
    2784:	3001      	adds	r0, #1
    2786:	30ff      	adds	r0, #255	; 0xff
    2788:	0022      	movs	r2, r4
    278a:	2103      	movs	r1, #3
    278c:	4b04      	ldr	r3, [pc, #16]	; (27a0 <getFlightStartAddress+0x24>)
    278e:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2790:	7860      	ldrb	r0, [r4, #1]
    2792:	78a3      	ldrb	r3, [r4, #2]
    2794:	0200      	lsls	r0, r0, #8
    2796:	041b      	lsls	r3, r3, #16
    2798:	4318      	orrs	r0, r3
    279a:	7823      	ldrb	r3, [r4, #0]
    279c:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    279e:	bd16      	pop	{r1, r2, r4, pc}
    27a0:	00000301 	.word	0x00000301

000027a4 <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    27a4:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    27a6:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    27a8:	4358      	muls	r0, r3
    27aa:	ac01      	add	r4, sp, #4
    27ac:	3004      	adds	r0, #4
    27ae:	30ff      	adds	r0, #255	; 0xff
    27b0:	0022      	movs	r2, r4
    27b2:	2103      	movs	r1, #3
    27b4:	4b04      	ldr	r3, [pc, #16]	; (27c8 <FindFlightEndingAddress+0x24>)
    27b6:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    27b8:	7860      	ldrb	r0, [r4, #1]
    27ba:	78a3      	ldrb	r3, [r4, #2]
    27bc:	0200      	lsls	r0, r0, #8
    27be:	041b      	lsls	r3, r3, #16
    27c0:	4318      	orrs	r0, r3
    27c2:	7823      	ldrb	r3, [r4, #0]
    27c4:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    27c6:	bd16      	pop	{r1, r2, r4, pc}
    27c8:	00000301 	.word	0x00000301

000027cc <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    27cc:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    27ce:	4b04      	ldr	r3, [pc, #16]	; (27e0 <isFlightLogged+0x14>)
    27d0:	4798      	blx	r3
    27d2:	4b04      	ldr	r3, [pc, #16]	; (27e4 <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    27d4:	18c0      	adds	r0, r0, r3
    27d6:	1e43      	subs	r3, r0, #1
    27d8:	4198      	sbcs	r0, r3
    27da:	b2c0      	uxtb	r0, r0
    27dc:	bd10      	pop	{r4, pc}
    27de:	46c0      	nop			; (mov r8, r8)
    27e0:	0000277d 	.word	0x0000277d
    27e4:	ff000001 	.word	0xff000001

000027e8 <writeFlightStartAddress>:

void writeFlightStartAddress() {
    27e8:	b510      	push	{r4, lr}
    AT25SFWriteBytes(flightAddressLocationInIndex,3,flightStartAddress);
    27ea:	4b03      	ldr	r3, [pc, #12]	; (27f8 <writeFlightStartAddress+0x10>)
    27ec:	4a03      	ldr	r2, [pc, #12]	; (27fc <writeFlightStartAddress+0x14>)
    27ee:	8818      	ldrh	r0, [r3, #0]
    27f0:	2103      	movs	r1, #3
    27f2:	4b03      	ldr	r3, [pc, #12]	; (2800 <writeFlightStartAddress+0x18>)
    27f4:	4798      	blx	r3
}
    27f6:	bd10      	pop	{r4, pc}
    27f8:	20000300 	.word	0x20000300
    27fc:	20000403 	.word	0x20000403
    2800:	00000241 	.word	0x00000241

00002804 <writeFlightEndAddress>:




void writeFlightEndAddress() {
    2804:	b507      	push	{r0, r1, r2, lr}
    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    2806:	2006      	movs	r0, #6



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    2808:	4b09      	ldr	r3, [pc, #36]	; (2830 <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    280a:	aa01      	add	r2, sp, #4



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    280c:	681b      	ldr	r3, [r3, #0]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    280e:	7013      	strb	r3, [r2, #0]
    2810:	0a19      	lsrs	r1, r3, #8
    2812:	0c1b      	lsrs	r3, r3, #16
    2814:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    2816:	4b07      	ldr	r3, [pc, #28]	; (2834 <writeFlightEndAddress+0x30>)

void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2818:	7051      	strb	r1, [r2, #1]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    281a:	781b      	ldrb	r3, [r3, #0]
    281c:	2103      	movs	r1, #3
    281e:	4358      	muls	r0, r3
    2820:	3004      	adds	r0, #4
    2822:	30ff      	adds	r0, #255	; 0xff
    2824:	4b04      	ldr	r3, [pc, #16]	; (2838 <writeFlightEndAddress+0x34>)
    2826:	4798      	blx	r3
    delay_ms(10);
    2828:	200a      	movs	r0, #10
    282a:	4b04      	ldr	r3, [pc, #16]	; (283c <writeFlightEndAddress+0x38>)
    282c:	4798      	blx	r3
}
    282e:	bd07      	pop	{r0, r1, r2, pc}
    2830:	20000408 	.word	0x20000408
    2834:	20000153 	.word	0x20000153
    2838:	00000241 	.word	0x00000241
    283c:	000010f5 	.word	0x000010f5

00002840 <writeGroundLog>:

void writeGroundLog() {
    2840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2842:	2780      	movs	r7, #128	; 0x80
    u8_t i;

    for (i = 0; i < 10; i++) {
    2844:	26af      	movs	r6, #175	; 0xaf
    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    delay_ms(10);
}

void writeGroundLog() {
    2846:	2400      	movs	r4, #0
    2848:	037f      	lsls	r7, r7, #13
    u8_t i;

    for (i = 0; i < 10; i++) {
    284a:	0076      	lsls	r6, r6, #1
        makePage(SENSOR_LOG_LENGTH, &padSensorBuffer[i][0]);
    284c:	490c      	ldr	r1, [pc, #48]	; (2880 <writeGroundLog+0x40>)
    284e:	4b0d      	ldr	r3, [pc, #52]	; (2884 <writeGroundLog+0x44>)
    2850:	1861      	adds	r1, r4, r1
    2852:	2023      	movs	r0, #35	; 0x23
    2854:	4798      	blx	r3

        if (pageReady) {
    2856:	4b0c      	ldr	r3, [pc, #48]	; (2888 <writeGroundLog+0x48>)
    2858:	781a      	ldrb	r2, [r3, #0]
    285a:	2a00      	cmp	r2, #0
    285c:	d00c      	beq.n	2878 <writeGroundLog+0x38>
            pageReady = false;
    285e:	2200      	movs	r2, #0
    2860:	701a      	strb	r2, [r3, #0]
    2862:	4b0a      	ldr	r3, [pc, #40]	; (288c <writeGroundLog+0x4c>)
            pinToggle(LedPin);
            AT25SEWritePage(currentAddress,pageToWrite);
    2864:	4d0a      	ldr	r5, [pc, #40]	; (2890 <writeGroundLog+0x50>)
    2866:	61df      	str	r7, [r3, #28]
    2868:	490a      	ldr	r1, [pc, #40]	; (2894 <writeGroundLog+0x54>)
    286a:	4b0b      	ldr	r3, [pc, #44]	; (2898 <writeGroundLog+0x58>)
    286c:	6828      	ldr	r0, [r5, #0]
    286e:	4798      	blx	r3
            currentAddress = (currentAddress + 0x100);
    2870:	682b      	ldr	r3, [r5, #0]
    2872:	3301      	adds	r3, #1
    2874:	33ff      	adds	r3, #255	; 0xff
    2876:	602b      	str	r3, [r5, #0]
    2878:	3423      	adds	r4, #35	; 0x23
}

void writeGroundLog() {
    u8_t i;

    for (i = 0; i < 10; i++) {
    287a:	42b4      	cmp	r4, r6
    287c:	d1e6      	bne.n	284c <writeGroundLog+0xc>
            currentAddress = (currentAddress + 0x100);
        }

    }

}
    287e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2880:	2000040c 	.word	0x2000040c
    2884:	000022ad 	.word	0x000022ad
    2888:	20000402 	.word	0x20000402
    288c:	41004400 	.word	0x41004400
    2890:	20000408 	.word	0x20000408
    2894:	20000302 	.word	0x20000302
    2898:	000002a5 	.word	0x000002a5

0000289c <beginFlightLog>:

void beginFlightLog() {
    289c:	b510      	push	{r4, lr}
    writeFlightStartAddress();
    289e:	4b05      	ldr	r3, [pc, #20]	; (28b4 <beginFlightLog+0x18>)
    28a0:	4798      	blx	r3
    logFlight( );
    28a2:	4b05      	ldr	r3, [pc, #20]	; (28b8 <beginFlightLog+0x1c>)
    28a4:	4798      	blx	r3
    writeGroundLog();
    28a6:	4b05      	ldr	r3, [pc, #20]	; (28bc <beginFlightLog+0x20>)
    28a8:	4798      	blx	r3
    logEvent('L');
    28aa:	204c      	movs	r0, #76	; 0x4c
    28ac:	4b04      	ldr	r3, [pc, #16]	; (28c0 <beginFlightLog+0x24>)
    28ae:	4798      	blx	r3

}
    28b0:	bd10      	pop	{r4, pc}
    28b2:	46c0      	nop			; (mov r8, r8)
    28b4:	000027e9 	.word	0x000027e9
    28b8:	00002385 	.word	0x00002385
    28bc:	00002841 	.word	0x00002841
    28c0:	000023e9 	.word	0x000023e9

000028c4 <findNewFlightStart>:


void findNewFlightStart() {
    28c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    28c6:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    28c8:	0020      	movs	r0, r4
    28ca:	4b21      	ldr	r3, [pc, #132]	; (2950 <findNewFlightStart+0x8c>)
    28cc:	4798      	blx	r3
    28ce:	2800      	cmp	r0, #0
    28d0:	d138      	bne.n	2944 <findNewFlightStart+0x80>
    28d2:	4f20      	ldr	r7, [pc, #128]	; (2954 <findNewFlightStart+0x90>)
    28d4:	4d20      	ldr	r5, [pc, #128]	; (2958 <findNewFlightStart+0x94>)

            if (flightNumbToCheck > 0) {
    28d6:	2c00      	cmp	r4, #0
    28d8:	d014      	beq.n	2904 <findNewFlightStart+0x40>

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    28da:	1e60      	subs	r0, r4, #1
    28dc:	4b1f      	ldr	r3, [pc, #124]	; (295c <findNewFlightStart+0x98>)
    28de:	b2c0      	uxtb	r0, r0
    28e0:	4798      	blx	r3
    28e2:	0006      	movs	r6, r0
                delay_ms(5);
    28e4:	4b1e      	ldr	r3, [pc, #120]	; (2960 <findNewFlightStart+0x9c>)
    28e6:	2005      	movs	r0, #5
    28e8:	4798      	blx	r3

                currentAddress = startAddress;

                flightStartAddress[0] = startAddress >> 0;
                flightStartAddress[1] = startAddress >> 8;
    28ea:	0a33      	lsrs	r3, r6, #8
    28ec:	706b      	strb	r3, [r5, #1]
                flightStartAddress[2] = startAddress >> 16;

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    28ee:	2306      	movs	r3, #6
    28f0:	4363      	muls	r3, r4
    28f2:	4a1c      	ldr	r2, [pc, #112]	; (2964 <findNewFlightStart+0xa0>)
    28f4:	3301      	adds	r3, #1
            if (flightNumbToCheck > 0) {

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;
    28f6:	603e      	str	r6, [r7, #0]

                flightStartAddress[0] = startAddress >> 0;
    28f8:	702e      	strb	r6, [r5, #0]
                flightStartAddress[1] = startAddress >> 8;
                flightStartAddress[2] = startAddress >> 16;

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    28fa:	33ff      	adds	r3, #255	; 0xff

                currentAddress = startAddress;

                flightStartAddress[0] = startAddress >> 0;
                flightStartAddress[1] = startAddress >> 8;
                flightStartAddress[2] = startAddress >> 16;
    28fc:	0c36      	lsrs	r6, r6, #16
    28fe:	70ae      	strb	r6, [r5, #2]

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    2900:	8013      	strh	r3, [r2, #0]
    2902:	e00d      	b.n	2920 <findNewFlightStart+0x5c>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
                flightStartAddress[1] = 0x10;
    2904:	2310      	movs	r3, #16
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;
    2906:	4a17      	ldr	r2, [pc, #92]	; (2964 <findNewFlightStart+0xa0>)
                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
                flightStartAddress[1] = 0x10;
    2908:	706b      	strb	r3, [r5, #1]
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;
    290a:	33f0      	adds	r3, #240	; 0xf0
    290c:	8013      	strh	r3, [r2, #0]

                currentAddress = 0x001000;
    290e:	2380      	movs	r3, #128	; 0x80
                beep(1000);
    2910:	20fa      	movs	r0, #250	; 0xfa
                flightStartAddress[1] = 0x10;
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;

                currentAddress = 0x001000;
    2912:	015b      	lsls	r3, r3, #5
    2914:	603b      	str	r3, [r7, #0]
                beep(1000);
    2916:	0080      	lsls	r0, r0, #2
    2918:	4b13      	ldr	r3, [pc, #76]	; (2968 <findNewFlightStart+0xa4>)

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
    291a:	702c      	strb	r4, [r5, #0]
                flightStartAddress[1] = 0x10;
                flightStartAddress[2] = 0x00;
    291c:	70ac      	strb	r4, [r5, #2]

                flightAddressLocationInIndex = FLIGHTZEROSTART;

                currentAddress = 0x001000;
                beep(1000);
    291e:	4798      	blx	r3
            }
            flightNumb = flightNumbToCheck;
    2920:	4b12      	ldr	r3, [pc, #72]	; (296c <findNewFlightStart+0xa8>)
    2922:	701c      	strb	r4, [r3, #0]

            while (flightNumbToCheck > 0) {
                beep(500);
    2924:	20fa      	movs	r0, #250	; 0xfa
    2926:	0040      	lsls	r0, r0, #1
                currentAddress = 0x001000;
                beep(1000);
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    2928:	2c00      	cmp	r4, #0
    292a:	d008      	beq.n	293e <findNewFlightStart+0x7a>
                beep(500);
    292c:	4b0e      	ldr	r3, [pc, #56]	; (2968 <findNewFlightStart+0xa4>)
    292e:	4798      	blx	r3
                delay_ms(500);
    2930:	20fa      	movs	r0, #250	; 0xfa
    2932:	4b0b      	ldr	r3, [pc, #44]	; (2960 <findNewFlightStart+0x9c>)
    2934:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    2936:	3c01      	subs	r4, #1
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    2938:	4798      	blx	r3
                --flightNumbToCheck;
    293a:	b2e4      	uxtb	r4, r4
    293c:	e7f2      	b.n	2924 <findNewFlightStart+0x60>
            }
            delay_ms(500);
    293e:	4b08      	ldr	r3, [pc, #32]	; (2960 <findNewFlightStart+0x9c>)
    2940:	4798      	blx	r3
            break;
    2942:	e003      	b.n	294c <findNewFlightStart+0x88>
}


void findNewFlightStart() {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    2944:	3401      	adds	r4, #1
    2946:	b2e4      	uxtb	r4, r4
    2948:	2c14      	cmp	r4, #20
    294a:	d1bd      	bne.n	28c8 <findNewFlightStart+0x4>
            }
            delay_ms(500);
            break;
        }
    }
}
    294c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    294e:	46c0      	nop			; (mov r8, r8)
    2950:	000027cd 	.word	0x000027cd
    2954:	20000408 	.word	0x20000408
    2958:	20000403 	.word	0x20000403
    295c:	000027a5 	.word	0x000027a5
    2960:	000010f5 	.word	0x000010f5
    2964:	20000300 	.word	0x20000300
    2968:	00000e25 	.word	0x00000e25
    296c:	20000153 	.word	0x20000153

00002970 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    2970:	4b01      	ldr	r3, [pc, #4]	; (2978 <takeSample+0x8>)
    2972:	7818      	ldrb	r0, [r3, #0]
}
    2974:	4770      	bx	lr
    2976:	46c0      	nop			; (mov r8, r8)
    2978:	20000165 	.word	0x20000165

0000297c <pullSample>:

void pullSample() {
    SampleBool = true;
    297c:	2201      	movs	r2, #1
    297e:	4b01      	ldr	r3, [pc, #4]	; (2984 <pullSample+0x8>)
    2980:	701a      	strb	r2, [r3, #0]
}
    2982:	4770      	bx	lr
    2984:	20000165 	.word	0x20000165

00002988 <sampleTick>:
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    2988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    SampleBool = false;
    298a:	2200      	movs	r2, #0
    298c:	4ba7      	ldr	r3, [pc, #668]	; (2c2c <sampleTick+0x2a4>)

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    298e:	4fa8      	ldr	r7, [pc, #672]	; (2c30 <sampleTick+0x2a8>)
}

sample_t sample;

void sampleTick() {
    SampleBool = false;
    2990:	701a      	strb	r2, [r3, #0]

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis();
    2992:	4ba8      	ldr	r3, [pc, #672]	; (2c34 <sampleTick+0x2ac>)

void sampleTick() {
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    2994:	687c      	ldr	r4, [r7, #4]
    sample.sampleTick = millis();
    2996:	4798      	blx	r3
    2998:	6078      	str	r0, [r7, #4]
    sample.tickDelta = sample.sampleTick - lastTick;
    299a:	1b00      	subs	r0, r0, r4

    sample.voltage.batV = adc_read(senseBatPin);
    299c:	4ca6      	ldr	r4, [pc, #664]	; (2c38 <sampleTick+0x2b0>)
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis();
    sample.tickDelta = sample.sampleTick - lastTick;
    299e:	8038      	strh	r0, [r7, #0]

    sample.voltage.batV = adc_read(senseBatPin);
    29a0:	7863      	ldrb	r3, [r4, #1]
    29a2:	7821      	ldrb	r1, [r4, #0]
    29a4:	78a0      	ldrb	r0, [r4, #2]
    29a6:	021b      	lsls	r3, r3, #8
    29a8:	430b      	orrs	r3, r1
    29aa:	0400      	lsls	r0, r0, #16
    29ac:	001a      	movs	r2, r3
    29ae:	0003      	movs	r3, r0
    29b0:	78e0      	ldrb	r0, [r4, #3]
    29b2:	4313      	orrs	r3, r2
    29b4:	0600      	lsls	r0, r0, #24
    29b6:	4ea1      	ldr	r6, [pc, #644]	; (2c3c <sampleTick+0x2b4>)
    29b8:	7921      	ldrb	r1, [r4, #4]
    29ba:	4318      	orrs	r0, r3
    29bc:	47b0      	blx	r6

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    29be:	4ba0      	ldr	r3, [pc, #640]	; (2c40 <sampleTick+0x2b8>)
    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis();
    sample.tickDelta = sample.sampleTick - lastTick;

    sample.voltage.batV = adc_read(senseBatPin);
    29c0:	8138      	strh	r0, [r7, #8]

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    29c2:	4798      	blx	r3
    29c4:	4a9f      	ldr	r2, [pc, #636]	; (2c44 <sampleTick+0x2bc>)
    29c6:	4da0      	ldr	r5, [pc, #640]	; (2c48 <sampleTick+0x2c0>)
    29c8:	4ba0      	ldr	r3, [pc, #640]	; (2c4c <sampleTick+0x2c4>)
    29ca:	47a8      	blx	r5
    29cc:	4ba0      	ldr	r3, [pc, #640]	; (2c50 <sampleTick+0x2c8>)
    29ce:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    29d0:	79a3      	ldrb	r3, [r4, #6]
    29d2:	7961      	ldrb	r1, [r4, #5]
    sample.sampleTick = millis();
    sample.tickDelta = sample.sampleTick - lastTick;

    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    29d4:	60f8      	str	r0, [r7, #12]

    sample.voltage.senseA = adc_read(senseAPin);
    29d6:	79e0      	ldrb	r0, [r4, #7]
    29d8:	021b      	lsls	r3, r3, #8
    29da:	430b      	orrs	r3, r1
    29dc:	0400      	lsls	r0, r0, #16
    29de:	001a      	movs	r2, r3
    29e0:	0003      	movs	r3, r0
    29e2:	7a20      	ldrb	r0, [r4, #8]
    29e4:	4313      	orrs	r3, r2
    29e6:	0600      	lsls	r0, r0, #24
    29e8:	7a61      	ldrb	r1, [r4, #9]
    29ea:	4318      	orrs	r0, r3
    29ec:	47b0      	blx	r6
    sample.voltage.senseB = adc_read(senseBPin);
    29ee:	7ae3      	ldrb	r3, [r4, #11]
    29f0:	7aa1      	ldrb	r1, [r4, #10]

    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    29f2:	8238      	strh	r0, [r7, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    29f4:	7b20      	ldrb	r0, [r4, #12]
    29f6:	021b      	lsls	r3, r3, #8
    29f8:	430b      	orrs	r3, r1
    29fa:	0400      	lsls	r0, r0, #16
    29fc:	001a      	movs	r2, r3
    29fe:	0003      	movs	r3, r0
    2a00:	7b60      	ldrb	r0, [r4, #13]
    2a02:	4313      	orrs	r3, r2
    2a04:	0600      	lsls	r0, r0, #24
    2a06:	7ba1      	ldrb	r1, [r4, #14]
    2a08:	4318      	orrs	r0, r3
    2a0a:	47b0      	blx	r6
    sample.voltage.senseC = adc_read(senseCPin);
    2a0c:	7c23      	ldrb	r3, [r4, #16]
    2a0e:	7be1      	ldrb	r1, [r4, #15]
    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    2a10:	8278      	strh	r0, [r7, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    2a12:	7c60      	ldrb	r0, [r4, #17]
    2a14:	021b      	lsls	r3, r3, #8
    2a16:	430b      	orrs	r3, r1
    2a18:	0400      	lsls	r0, r0, #16
    2a1a:	001a      	movs	r2, r3
    2a1c:	0003      	movs	r3, r0
    2a1e:	7ca0      	ldrb	r0, [r4, #18]
    2a20:	4313      	orrs	r3, r2
    2a22:	0600      	lsls	r0, r0, #24
    2a24:	7ce1      	ldrb	r1, [r4, #19]
    2a26:	4318      	orrs	r0, r3
    2a28:	47b0      	blx	r6
    sample.voltage.senseD = adc_read(senseDPin);
    2a2a:	7d63      	ldrb	r3, [r4, #21]
    2a2c:	7d21      	ldrb	r1, [r4, #20]

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    2a2e:	82b8      	strh	r0, [r7, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    2a30:	7da0      	ldrb	r0, [r4, #22]
    2a32:	021b      	lsls	r3, r3, #8
    2a34:	430b      	orrs	r3, r1
    2a36:	0400      	lsls	r0, r0, #16
    2a38:	001a      	movs	r2, r3
    2a3a:	0003      	movs	r3, r0
    2a3c:	7de0      	ldrb	r0, [r4, #23]
    2a3e:	4313      	orrs	r3, r2
    2a40:	0600      	lsls	r0, r0, #24
    2a42:	7e21      	ldrb	r1, [r4, #24]
    2a44:	4318      	orrs	r0, r3
    2a46:	47b0      	blx	r6


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    2a48:	2210      	movs	r2, #16
    2a4a:	4d82      	ldr	r5, [pc, #520]	; (2c54 <sampleTick+0x2cc>)
    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);
    2a4c:	82f8      	strh	r0, [r7, #22]


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    2a4e:	88ab      	ldrh	r3, [r5, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    2a50:	7e61      	ldrb	r1, [r4, #25]
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    2a52:	4313      	orrs	r3, r2
    2a54:	80ab      	strh	r3, [r5, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;
    2a56:	2304      	movs	r3, #4
    2a58:	70ab      	strb	r3, [r5, #2]

    sample.analogRaw = adc_read(analogAccelPin);
    2a5a:	7ea3      	ldrb	r3, [r4, #26]
    2a5c:	7ee0      	ldrb	r0, [r4, #27]
    2a5e:	021b      	lsls	r3, r3, #8
    2a60:	430b      	orrs	r3, r1
    2a62:	0400      	lsls	r0, r0, #16
    2a64:	4303      	orrs	r3, r0
    2a66:	7f20      	ldrb	r0, [r4, #28]
    2a68:	7f61      	ldrb	r1, [r4, #29]
    2a6a:	0600      	lsls	r0, r0, #24
    2a6c:	4318      	orrs	r0, r3
    2a6e:	47b0      	blx	r6
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    2a70:	4b79      	ldr	r3, [pc, #484]	; (2c58 <sampleTick+0x2d0>)


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    2a72:	8338      	strh	r0, [r7, #24]
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    2a74:	18c0      	adds	r0, r0, r3
    2a76:	4b72      	ldr	r3, [pc, #456]	; (2c40 <sampleTick+0x2b8>)
    2a78:	4798      	blx	r3
    2a7a:	4a78      	ldr	r2, [pc, #480]	; (2c5c <sampleTick+0x2d4>)
    2a7c:	4c72      	ldr	r4, [pc, #456]	; (2c48 <sampleTick+0x2c0>)
    2a7e:	4b78      	ldr	r3, [pc, #480]	; (2c60 <sampleTick+0x2d8>)
    2a80:	47a0      	blx	r4
    2a82:	4b73      	ldr	r3, [pc, #460]	; (2c50 <sampleTick+0x2c8>)
    2a84:	4798      	blx	r3



    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    2a86:	2300      	movs	r3, #0

    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    2a88:	61f8      	str	r0, [r7, #28]



    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    2a8a:	70ab      	strb	r3, [r5, #2]
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_12BIT;
    2a8c:	88ab      	ldrh	r3, [r5, #4]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2a8e:	4e75      	ldr	r6, [pc, #468]	; (2c64 <sampleTick+0x2dc>)
    2a90:	b29b      	uxth	r3, r3
    2a92:	80ab      	strh	r3, [r5, #4]
    2a94:	2580      	movs	r5, #128	; 0x80
    2a96:	01ed      	lsls	r5, r5, #7

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    2a98:	2150      	movs	r1, #80	; 0x50
    2a9a:	4c73      	ldr	r4, [pc, #460]	; (2c68 <sampleTick+0x2e0>)
    2a9c:	6175      	str	r5, [r6, #20]
    2a9e:	2002      	movs	r0, #2
    2aa0:	47a0      	blx	r4
    pinHigh(cs_baro);
    delay_us(600);
    2aa2:	2096      	movs	r0, #150	; 0x96
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2aa4:	61b5      	str	r5, [r6, #24]
    2aa6:	0080      	lsls	r0, r0, #2
    2aa8:	4b70      	ldr	r3, [pc, #448]	; (2c6c <sampleTick+0x2e4>)
    2aaa:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    2aac:	4b70      	ldr	r3, [pc, #448]	; (2c70 <sampleTick+0x2e8>)
    2aae:	4798      	blx	r3

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    2ab0:	2140      	movs	r1, #64	; 0x40

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    pinHigh(cs_baro);
    delay_us(600);
    uint32_t tempRaw = readMS5803AdcResults();
    2ab2:	9001      	str	r0, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2ab4:	6175      	str	r5, [r6, #20]

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    2ab6:	2002      	movs	r0, #2
    2ab8:	47a0      	blx	r4
    2aba:	2280      	movs	r2, #128	; 0x80
    2abc:	4b6d      	ldr	r3, [pc, #436]	; (2c74 <sampleTick+0x2ec>)
    2abe:	00d2      	lsls	r2, r2, #3

    u8_t byteOne;
    u8_t byteTwo;
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    2ac0:	2182      	movs	r1, #130	; 0x82
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2ac2:	61b5      	str	r5, [r6, #24]
    2ac4:	2000      	movs	r0, #0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2ac6:	601a      	str	r2, [r3, #0]
    2ac8:	47a0      	blx	r4
    byteOne = spiDataIn(ACCEL_SPI);
    2aca:	4d6b      	ldr	r5, [pc, #428]	; (2c78 <sampleTick+0x2f0>)
    2acc:	2000      	movs	r0, #0
    2ace:	47a8      	blx	r5
    2ad0:	0004      	movs	r4, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2ad2:	2000      	movs	r0, #0
    2ad4:	47a8      	blx	r5
    sample.accelXint = twosComp(byteOne,byteTwo);
    2ad6:	0200      	lsls	r0, r0, #8
    2ad8:	4304      	orrs	r4, r0
    byteOne = spiDataIn(ACCEL_SPI);
    2ada:	2000      	movs	r0, #0
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelXint = twosComp(byteOne,byteTwo);
    2adc:	843c      	strh	r4, [r7, #32]
    byteOne = spiDataIn(ACCEL_SPI);
    2ade:	47a8      	blx	r5
    2ae0:	0004      	movs	r4, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2ae2:	2000      	movs	r0, #0
    2ae4:	47a8      	blx	r5
    sample.accelYint = twosComp(byteOne,byteTwo);
    2ae6:	0200      	lsls	r0, r0, #8
    2ae8:	4304      	orrs	r4, r0
    byteOne = spiDataIn(ACCEL_SPI);
    2aea:	2000      	movs	r0, #0
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelYint = twosComp(byteOne,byteTwo);
    2aec:	853c      	strh	r4, [r7, #40]	; 0x28
    byteOne = spiDataIn(ACCEL_SPI);
    2aee:	47a8      	blx	r5
    2af0:	0004      	movs	r4, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2af2:	2000      	movs	r0, #0
    2af4:	47a8      	blx	r5
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2af6:	2280      	movs	r2, #128	; 0x80
    2af8:	4b60      	ldr	r3, [pc, #384]	; (2c7c <sampleTick+0x2f4>)
    2afa:	00d2      	lsls	r2, r2, #3
    2afc:	601a      	str	r2, [r3, #0]
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    if (altimeter.pointingUp) {
    2afe:	4b60      	ldr	r3, [pc, #384]	; (2c80 <sampleTick+0x2f8>)
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2b00:	0200      	lsls	r0, r0, #8
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    if (altimeter.pointingUp) {
    2b02:	795a      	ldrb	r2, [r3, #5]
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2b04:	4304      	orrs	r4, r0
    2b06:	9600      	str	r6, [sp, #0]
    2b08:	b224      	sxth	r4, r4
    2b0a:	003d      	movs	r5, r7
    2b0c:	2120      	movs	r1, #32
    2b0e:	5e7b      	ldrsh	r3, [r7, r1]
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    if (altimeter.pointingUp) {
    2b10:	2a00      	cmp	r2, #0
    2b12:	d000      	beq.n	2b16 <sampleTick+0x18e>
        sample.accelXint =  -sample.accelXint >> 4;
    2b14:	425b      	negs	r3, r3
    } else {
        sample.accelXint =  sample.accelXint >> 4;
    2b16:	111b      	asrs	r3, r3, #4
    2b18:	842b      	strh	r3, [r5, #32]
    }
    sample.accelYint =  sample.accelYint >> 4;
    2b1a:	2328      	movs	r3, #40	; 0x28
    2b1c:	5eee      	ldrsh	r6, [r5, r3]
    sample.accelZint =  sample.accelZint >> 4;
    2b1e:	1124      	asrs	r4, r4, #4
    if (altimeter.pointingUp) {
        sample.accelXint =  -sample.accelXint >> 4;
    } else {
        sample.accelXint =  sample.accelXint >> 4;
    }
    sample.accelYint =  sample.accelYint >> 4;
    2b20:	1136      	asrs	r6, r6, #4
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    2b22:	2320      	movs	r3, #32
    2b24:	5ee8      	ldrsh	r0, [r5, r3]
    if (altimeter.pointingUp) {
        sample.accelXint =  -sample.accelXint >> 4;
    } else {
        sample.accelXint =  sample.accelXint >> 4;
    }
    sample.accelYint =  sample.accelYint >> 4;
    2b26:	852e      	strh	r6, [r5, #40]	; 0x28
    sample.accelZint =  sample.accelZint >> 4;
    2b28:	862c      	strh	r4, [r5, #48]	; 0x30

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    2b2a:	4b45      	ldr	r3, [pc, #276]	; (2c40 <sampleTick+0x2b8>)
    2b2c:	4798      	blx	r3
    2b2e:	23fe      	movs	r3, #254	; 0xfe
    2b30:	2200      	movs	r2, #0
    2b32:	059b      	lsls	r3, r3, #22
    2b34:	4f44      	ldr	r7, [pc, #272]	; (2c48 <sampleTick+0x2c0>)
    2b36:	47b8      	blx	r7
    2b38:	4f45      	ldr	r7, [pc, #276]	; (2c50 <sampleTick+0x2c8>)
    2b3a:	47b8      	blx	r7
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    2b3c:	4b40      	ldr	r3, [pc, #256]	; (2c40 <sampleTick+0x2b8>)
        sample.accelXint =  sample.accelXint >> 4;
    }
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    2b3e:	6268      	str	r0, [r5, #36]	; 0x24
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    2b40:	0030      	movs	r0, r6
    2b42:	4798      	blx	r3
    2b44:	23fe      	movs	r3, #254	; 0xfe
    2b46:	2200      	movs	r2, #0
    2b48:	4e3f      	ldr	r6, [pc, #252]	; (2c48 <sampleTick+0x2c0>)
    2b4a:	059b      	lsls	r3, r3, #22
    2b4c:	47b0      	blx	r6
    2b4e:	47b8      	blx	r7
    sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    2b50:	4b3b      	ldr	r3, [pc, #236]	; (2c40 <sampleTick+0x2b8>)
    }
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    2b52:	62e8      	str	r0, [r5, #44]	; 0x2c
    sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    2b54:	0020      	movs	r0, r4
    2b56:	4798      	blx	r3
    2b58:	23fe      	movs	r3, #254	; 0xfe
    2b5a:	2200      	movs	r2, #0
    2b5c:	059b      	lsls	r3, r3, #22
    2b5e:	47b0      	blx	r6
    2b60:	47b8      	blx	r7
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2b62:	2280      	movs	r2, #128	; 0x80
    2b64:	9b00      	ldr	r3, [sp, #0]
    2b66:	00d2      	lsls	r2, r2, #3

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    2b68:	2182      	movs	r1, #130	; 0x82
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    2b6a:	6368      	str	r0, [r5, #52]	; 0x34
    2b6c:	615a      	str	r2, [r3, #20]

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    2b6e:	2000      	movs	r0, #0
    2b70:	4b3d      	ldr	r3, [pc, #244]	; (2c68 <sampleTick+0x2e0>)
    2b72:	4798      	blx	r3
    byteOne = spiDataIn(GYRO_SPI);
    2b74:	4e40      	ldr	r6, [pc, #256]	; (2c78 <sampleTick+0x2f0>)
    2b76:	2000      	movs	r0, #0
    2b78:	47b0      	blx	r6
    2b7a:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    2b7c:	2000      	movs	r0, #0
    2b7e:	47b0      	blx	r6
    sample.gyroXint = twosComp(byteOne,byteTwo);
    2b80:	0200      	lsls	r0, r0, #8
    2b82:	4304      	orrs	r4, r0
    byteOne = spiDataIn(GYRO_SPI);
    2b84:	2000      	movs	r0, #0
    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroXint = twosComp(byteOne,byteTwo);
    2b86:	872c      	strh	r4, [r5, #56]	; 0x38
    byteOne = spiDataIn(GYRO_SPI);
    2b88:	47b0      	blx	r6
    2b8a:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    2b8c:	2000      	movs	r0, #0
    2b8e:	47b0      	blx	r6
    sample.gyroYint = twosComp(byteOne,byteTwo);
    2b90:	4b3c      	ldr	r3, [pc, #240]	; (2c84 <sampleTick+0x2fc>)
    2b92:	0200      	lsls	r0, r0, #8
    2b94:	4304      	orrs	r4, r0
    byteOne = spiDataIn(GYRO_SPI);
    2b96:	2000      	movs	r0, #0
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroYint = twosComp(byteOne,byteTwo);
    2b98:	87dc      	strh	r4, [r3, #62]	; 0x3e
    byteOne = spiDataIn(GYRO_SPI);
    2b9a:	47b0      	blx	r6
    2b9c:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    2b9e:	2000      	movs	r0, #0
    2ba0:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2ba2:	2180      	movs	r1, #128	; 0x80
    2ba4:	0003      	movs	r3, r0
    2ba6:	9a00      	ldr	r2, [sp, #0]
    2ba8:	00c9      	lsls	r1, r1, #3
    2baa:	6191      	str	r1, [r2, #24]
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    2bac:	2238      	movs	r2, #56	; 0x38
    2bae:	5ea8      	ldrsh	r0, [r5, r2]
    sample.gyroYint = sample.gyroYint >> 4;
    2bb0:	4a34      	ldr	r2, [pc, #208]	; (2c84 <sampleTick+0x2fc>)
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    2bb2:	1100      	asrs	r0, r0, #4
    2bb4:	8728      	strh	r0, [r5, #56]	; 0x38
    sample.gyroYint = sample.gyroYint >> 4;
    2bb6:	263e      	movs	r6, #62	; 0x3e
    2bb8:	5f96      	ldrsh	r6, [r2, r6]
    sample.gyroZint = sample.gyroZint >> 4;
    2bba:	021b      	lsls	r3, r3, #8
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    2bbc:	4a31      	ldr	r2, [pc, #196]	; (2c84 <sampleTick+0x2fc>)
    sample.gyroZint = sample.gyroZint >> 4;
    2bbe:	431c      	orrs	r4, r3
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    2bc0:	1136      	asrs	r6, r6, #4
    sample.gyroZint = sample.gyroZint >> 4;
    2bc2:	b224      	sxth	r4, r4
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    2bc4:	87d6      	strh	r6, [r2, #62]	; 0x3e
    sample.gyroZint = sample.gyroZint >> 4;
    2bc6:	1123      	asrs	r3, r4, #4
    2bc8:	466a      	mov	r2, sp
    2bca:	9300      	str	r3, [sp, #0]
    2bcc:	002b      	movs	r3, r5
    2bce:	8812      	ldrh	r2, [r2, #0]
    2bd0:	3348      	adds	r3, #72	; 0x48
    2bd2:	801a      	strh	r2, [r3, #0]

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    2bd4:	4b1a      	ldr	r3, [pc, #104]	; (2c40 <sampleTick+0x2b8>)
    2bd6:	4798      	blx	r3
    2bd8:	23fe      	movs	r3, #254	; 0xfe
    2bda:	4c1b      	ldr	r4, [pc, #108]	; (2c48 <sampleTick+0x2c0>)
    2bdc:	2200      	movs	r2, #0
    2bde:	059b      	lsls	r3, r3, #22
    2be0:	47a0      	blx	r4
    2be2:	47b8      	blx	r7
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    2be4:	4b16      	ldr	r3, [pc, #88]	; (2c40 <sampleTick+0x2b8>)

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    sample.gyroZint = sample.gyroZint >> 4;

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    2be6:	63e8      	str	r0, [r5, #60]	; 0x3c
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    2be8:	0030      	movs	r0, r6
    2bea:	4798      	blx	r3
    2bec:	23fe      	movs	r3, #254	; 0xfe
    2bee:	2200      	movs	r2, #0
    2bf0:	059b      	lsls	r3, r3, #22
    2bf2:	47a0      	blx	r4
    2bf4:	47b8      	blx	r7
    sample.gyroZ =  sample.gyroZint * BMI055_GYRO_2000DS_DIV;
    2bf6:	4b12      	ldr	r3, [pc, #72]	; (2c40 <sampleTick+0x2b8>)
    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    sample.gyroZint = sample.gyroZint >> 4;

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    2bf8:	6468      	str	r0, [r5, #68]	; 0x44
    sample.gyroZ =  sample.gyroZint * BMI055_GYRO_2000DS_DIV;
    2bfa:	9800      	ldr	r0, [sp, #0]
    2bfc:	4798      	blx	r3
    2bfe:	23fe      	movs	r3, #254	; 0xfe
    2c00:	2200      	movs	r2, #0
    2c02:	059b      	lsls	r3, r3, #22
    2c04:	47a0      	blx	r4
    2c06:	47b8      	blx	r7
    2c08:	64e8      	str	r0, [r5, #76]	; 0x4c


    delay_us(400);
    2c0a:	20c8      	movs	r0, #200	; 0xc8
    2c0c:	4b17      	ldr	r3, [pc, #92]	; (2c6c <sampleTick+0x2e4>)
    2c0e:	0040      	lsls	r0, r0, #1
    2c10:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    2c12:	4b17      	ldr	r3, [pc, #92]	; (2c70 <sampleTick+0x2e8>)
    2c14:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    2c16:	4a1c      	ldr	r2, [pc, #112]	; (2c88 <sampleTick+0x300>)
    2c18:	9901      	ldr	r1, [sp, #4]
    2c1a:	4b1c      	ldr	r3, [pc, #112]	; (2c8c <sampleTick+0x304>)
    2c1c:	4c1c      	ldr	r4, [pc, #112]	; (2c90 <sampleTick+0x308>)
    2c1e:	47a0      	blx	r4
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
    2c20:	6d28      	ldr	r0, [r5, #80]	; 0x50
    2c22:	4b1c      	ldr	r3, [pc, #112]	; (2c94 <sampleTick+0x30c>)
    2c24:	4798      	blx	r3
    2c26:	65a8      	str	r0, [r5, #88]	; 0x58
    2c28:	65e9      	str	r1, [r5, #92]	; 0x5c
}
    2c2a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2c2c:	20000165 	.word	0x20000165
    2c30:	20000578 	.word	0x20000578
    2c34:	00001141 	.word	0x00001141
    2c38:	000065e4 	.word	0x000065e4
    2c3c:	00000dbd 	.word	0x00000dbd
    2c40:	0000629d 	.word	0x0000629d
    2c44:	a97e132b 	.word	0xa97e132b
    2c48:	00005655 	.word	0x00005655
    2c4c:	3f65379f 	.word	0x3f65379f
    2c50:	00006439 	.word	0x00006439
    2c54:	42004000 	.word	0x42004000
    2c58:	ffff41c9 	.word	0xffff41c9
    2c5c:	abb44e51 	.word	0xabb44e51
    2c60:	3f73f290 	.word	0x3f73f290
    2c64:	41004400 	.word	0x41004400
    2c68:	00002dc1 	.word	0x00002dc1
    2c6c:	000010c1 	.word	0x000010c1
    2c70:	000003b5 	.word	0x000003b5
    2c74:	41004494 	.word	0x41004494
    2c78:	00002dd9 	.word	0x00002dd9
    2c7c:	41004498 	.word	0x41004498
    2c80:	20000158 	.word	0x20000158
    2c84:	2000057a 	.word	0x2000057a
    2c88:	200005cc 	.word	0x200005cc
    2c8c:	200005c8 	.word	0x200005c8
    2c90:	000003f5 	.word	0x000003f5
    2c94:	00000495 	.word	0x00000495

00002c98 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2c98:	b570      	push	{r4, r5, r6, lr}
    2c9a:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2c9c:	2301      	movs	r3, #1
    2c9e:	1ca6      	adds	r6, r4, #2
    2ca0:	40b3      	lsls	r3, r6
    2ca2:	480d      	ldr	r0, [pc, #52]	; (2cd8 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2ca4:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2ca6:	6a01      	ldr	r1, [r0, #32]
    2ca8:	430b      	orrs	r3, r1
    2caa:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    2cac:	2d00      	cmp	r5, #0
    2cae:	d003      	beq.n	2cb8 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    2cb0:	2107      	movs	r1, #7
    2cb2:	0028      	movs	r0, r5
    2cb4:	4b09      	ldr	r3, [pc, #36]	; (2cdc <sercomClockEnable+0x44>)
    2cb6:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    2cb8:	22f0      	movs	r2, #240	; 0xf0
    2cba:	2080      	movs	r0, #128	; 0x80
    2cbc:	0229      	lsls	r1, r5, #8
    2cbe:	0112      	lsls	r2, r2, #4
    2cc0:	4011      	ands	r1, r2
    2cc2:	01c0      	lsls	r0, r0, #7
    2cc4:	4301      	orrs	r1, r0
    2cc6:	0020      	movs	r0, r4
    2cc8:	3014      	adds	r0, #20
    2cca:	223f      	movs	r2, #63	; 0x3f
    2ccc:	0003      	movs	r3, r0
    2cce:	4013      	ands	r3, r2
    2cd0:	4319      	orrs	r1, r3
    2cd2:	4b03      	ldr	r3, [pc, #12]	; (2ce0 <sercomClockEnable+0x48>)
    2cd4:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    2cd6:	bd70      	pop	{r4, r5, r6, pc}
    2cd8:	40000400 	.word	0x40000400
    2cdc:	00000ff1 	.word	0x00000ff1
    2ce0:	40000c00 	.word	0x40000c00

00002ce4 <sercomReset>:
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2ce4:	4b04      	ldr	r3, [pc, #16]	; (2cf8 <sercomReset+0x14>)
    2ce6:	0280      	lsls	r0, r0, #10
    2ce8:	18c0      	adds	r0, r0, r3
//                         GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    2cea:	2301      	movs	r3, #1
    2cec:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    2cee:	6802      	ldr	r2, [r0, #0]
    2cf0:	421a      	tst	r2, r3
    2cf2:	d1fc      	bne.n	2cee <sercomReset+0xa>
}
    2cf4:	4770      	bx	lr
    2cf6:	46c0      	nop			; (mov r8, r8)
    2cf8:	42000800 	.word	0x42000800

00002cfc <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2cfe:	0004      	movs	r4, r0
    2d00:	9300      	str	r3, [sp, #0]
    2d02:	ab08      	add	r3, sp, #32
    2d04:	781b      	ldrb	r3, [r3, #0]
    2d06:	000e      	movs	r6, r1
    2d08:	9301      	str	r3, [sp, #4]
    2d0a:	ab09      	add	r3, sp, #36	; 0x24
    2d0c:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    2d0e:	4b12      	ldr	r3, [pc, #72]	; (2d58 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2d10:	0015      	movs	r5, r2

    sercomReset(id);
    2d12:	4798      	blx	r3
    2d14:	4b11      	ldr	r3, [pc, #68]	; (2d5c <sercomSpiMasterInit+0x60>)
    2d16:	02a4      	lsls	r4, r4, #10
    2d18:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    2d1a:	2380      	movs	r3, #128	; 0x80
    2d1c:	029b      	lsls	r3, r3, #10
    2d1e:	6063      	str	r3, [r4, #4]
    2d20:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    2d22:	21c0      	movs	r1, #192	; 0xc0
    2d24:	042d      	lsls	r5, r5, #16
    2d26:	029b      	lsls	r3, r3, #10
    2d28:	402b      	ands	r3, r5
    2d2a:	250e      	movs	r5, #14
    2d2c:	0536      	lsls	r6, r6, #20
    2d2e:	0389      	lsls	r1, r1, #14
    2d30:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2d32:	9e00      	ldr	r6, [sp, #0]
    2d34:	431d      	orrs	r5, r3
    2d36:	1e73      	subs	r3, r6, #1
    2d38:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2d3a:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2d3c:	0772      	lsls	r2, r6, #29
    2d3e:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2d40:	432a      	orrs	r2, r5
    2d42:	1e59      	subs	r1, r3, #1
    2d44:	418b      	sbcs	r3, r1
    2d46:	0016      	movs	r6, r2
    2d48:	071b      	lsls	r3, r3, #28
    2d4a:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    2d4c:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    2d4e:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    2d50:	69e3      	ldr	r3, [r4, #28]
    2d52:	075b      	lsls	r3, r3, #29
    2d54:	d4fc      	bmi.n	2d50 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    2d56:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2d58:	00002ce5 	.word	0x00002ce5
    2d5c:	42000800 	.word	0x42000800

00002d60 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2d60:	b570      	push	{r4, r5, r6, lr}
    2d62:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    2d64:	4b0c      	ldr	r3, [pc, #48]	; (2d98 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2d66:	000d      	movs	r5, r1
    2d68:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    2d6a:	4798      	blx	r3
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2d6c:	4b0b      	ldr	r3, [pc, #44]	; (2d9c <sercomUartInit+0x3c>)
    2d6e:	02b0      	lsls	r0, r6, #10
    2d70:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2d72:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2d74:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2d76:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    2d78:	4b09      	ldr	r3, [pc, #36]	; (2da0 <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2d7a:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    2d7c:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2d7e:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2d80:	0392      	lsls	r2, r2, #14
    2d82:	4011      	ands	r1, r2
    2d84:	4a07      	ldr	r2, [pc, #28]	; (2da4 <sercomUartInit+0x44>)

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2d86:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2d88:	0424      	lsls	r4, r4, #16

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2d8a:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2d8c:	4311      	orrs	r1, r2
    2d8e:	4023      	ands	r3, r4
    2d90:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    2d92:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    2d94:	bd70      	pop	{r4, r5, r6, pc}
    2d96:	46c0      	nop			; (mov r8, r8)
    2d98:	00002ce5 	.word	0x00002ce5
    2d9c:	42000800 	.word	0x42000800
    2da0:	ffffb15b 	.word	0xffffb15b
    2da4:	40000006 	.word	0x40000006

00002da8 <spiDataTransfer>:
    2da8:	4b04      	ldr	r3, [pc, #16]	; (2dbc <spiDataTransfer+0x14>)
    2daa:	0280      	lsls	r0, r0, #10
    2dac:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    2dae:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2db0:	7e03      	ldrb	r3, [r0, #24]
    2db2:	075b      	lsls	r3, r3, #29
    2db4:	d5fc      	bpl.n	2db0 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    2db6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2db8:	b2c0      	uxtb	r0, r0
}
    2dba:	4770      	bx	lr
    2dbc:	42000800 	.word	0x42000800

00002dc0 <spiDataOut>:
    2dc0:	4b04      	ldr	r3, [pc, #16]	; (2dd4 <spiDataOut+0x14>)
    2dc2:	0280      	lsls	r0, r0, #10
    2dc4:	18c0      	adds	r0, r0, r3

void spiDataOut(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    2dc6:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2dc8:	7e03      	ldrb	r3, [r0, #24]
    2dca:	075b      	lsls	r3, r3, #29
    2dcc:	d5fc      	bpl.n	2dc8 <spiDataOut+0x8>
    u8_t dummy = sercom(id)->SPI.DATA.reg;
    2dce:	6a83      	ldr	r3, [r0, #40]	; 0x28
}
    2dd0:	4770      	bx	lr
    2dd2:	46c0      	nop			; (mov r8, r8)
    2dd4:	42000800 	.word	0x42000800

00002dd8 <spiDataIn>:
    2dd8:	4b05      	ldr	r3, [pc, #20]	; (2df0 <spiDataIn+0x18>)
    2dda:	0280      	lsls	r0, r0, #10
    2ddc:	18c0      	adds	r0, r0, r3

u8_t spiDataIn(SercomId id) {
    sercom(id)->SPI.DATA.reg = 0xFF;
    2dde:	23ff      	movs	r3, #255	; 0xff
    2de0:	6283      	str	r3, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2de2:	7e03      	ldrb	r3, [r0, #24]
    2de4:	075b      	lsls	r3, r3, #29
    2de6:	d5fc      	bpl.n	2de2 <spiDataIn+0xa>
    return sercom(id)->SPI.DATA.reg;
    2de8:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2dea:	b2c0      	uxtb	r0, r0
}
    2dec:	4770      	bx	lr
    2dee:	46c0      	nop			; (mov r8, r8)
    2df0:	42000800 	.word	0x42000800

00002df4 <usartDataOut>:
    2df4:	4b04      	ldr	r3, [pc, #16]	; (2e08 <usartDataOut+0x14>)
    2df6:	0280      	lsls	r0, r0, #10
    2df8:	18c0      	adds	r0, r0, r3

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    2dfa:	b289      	uxth	r1, r1
    2dfc:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    2dfe:	7e03      	ldrb	r3, [r0, #24]
    2e00:	07db      	lsls	r3, r3, #31
    2e02:	d5fc      	bpl.n	2dfe <usartDataOut+0xa>
}
    2e04:	4770      	bx	lr
    2e06:	46c0      	nop			; (mov r8, r8)
    2e08:	42000800 	.word	0x42000800

00002e0c <usartDataIn>:
    2e0c:	4b02      	ldr	r3, [pc, #8]	; (2e18 <usartDataIn+0xc>)
    2e0e:	0280      	lsls	r0, r0, #10
    2e10:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    2e12:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2e14:	b2c0      	uxtb	r0, r0
}
    2e16:	4770      	bx	lr
    2e18:	42000800 	.word	0x42000800

00002e1c <findMainAltitude>:
#include <boardDefines.h>


void findMainAltitude() {

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    2e1c:	4a11      	ldr	r2, [pc, #68]	; (2e64 <findMainAltitude+0x48>)
    2e1e:	7851      	ldrb	r1, [r2, #1]
    2e20:	0013      	movs	r3, r2
    2e22:	2900      	cmp	r1, #0
    2e24:	d105      	bne.n	2e32 <findMainAltitude+0x16>
    2e26:	7811      	ldrb	r1, [r2, #0]
    2e28:	2900      	cmp	r1, #0
    2e2a:	d002      	beq.n	2e32 <findMainAltitude+0x16>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelASettings.MAIN_DEPLOY;
    2e2c:	8853      	ldrh	r3, [r2, #2]
    2e2e:	8313      	strh	r3, [r2, #24]
        return;
    2e30:	e017      	b.n	2e62 <findMainAltitude+0x46>
    }
    if (deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    2e32:	79da      	ldrb	r2, [r3, #7]
    2e34:	2a00      	cmp	r2, #0
    2e36:	d104      	bne.n	2e42 <findMainAltitude+0x26>
    2e38:	799a      	ldrb	r2, [r3, #6]
    2e3a:	2a00      	cmp	r2, #0
    2e3c:	d001      	beq.n	2e42 <findMainAltitude+0x26>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelBSettings.MAIN_DEPLOY;
    2e3e:	891a      	ldrh	r2, [r3, #8]
    2e40:	e00e      	b.n	2e60 <findMainAltitude+0x44>
        return;
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    2e42:	7b5a      	ldrb	r2, [r3, #13]
    2e44:	2a00      	cmp	r2, #0
    2e46:	d104      	bne.n	2e52 <findMainAltitude+0x36>
    2e48:	7b1a      	ldrb	r2, [r3, #12]
    2e4a:	2a00      	cmp	r2, #0
    2e4c:	d001      	beq.n	2e52 <findMainAltitude+0x36>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelCSettings.MAIN_DEPLOY;
    2e4e:	89da      	ldrh	r2, [r3, #14]
    2e50:	e006      	b.n	2e60 <findMainAltitude+0x44>
        return;
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    2e52:	7cda      	ldrb	r2, [r3, #19]
    2e54:	2a00      	cmp	r2, #0
    2e56:	d104      	bne.n	2e62 <findMainAltitude+0x46>
    2e58:	7c9a      	ldrb	r2, [r3, #18]
    2e5a:	2a00      	cmp	r2, #0
    2e5c:	d001      	beq.n	2e62 <findMainAltitude+0x46>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelDSettings.MAIN_DEPLOY;
    2e5e:	8a9a      	ldrh	r2, [r3, #20]
    2e60:	831a      	strh	r2, [r3, #24]
        return;
    }


}
    2e62:	4770      	bx	lr
    2e64:	20000138 	.word	0x20000138

00002e68 <applyDefaultSettings>:
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2e68:	2096      	movs	r0, #150	; 0x96

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    2e6a:	2200      	movs	r2, #0

}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    2e6c:	2101      	movs	r1, #1
    2e6e:	4b09      	ldr	r3, [pc, #36]	; (2e94 <applyDefaultSettings+0x2c>)
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2e70:	0040      	lsls	r0, r0, #1

}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    2e72:	7019      	strb	r1, [r3, #0]
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    2e74:	7059      	strb	r1, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    2e76:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;
    2e78:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = true;
    2e7a:	7199      	strb	r1, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    2e7c:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2e7e:	8118      	strh	r0, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = 0;
    2e80:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = false;
    2e82:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = DROGUE_t;
    2e84:	7359      	strb	r1, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = 0;
    2e86:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = 0;
    2e88:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = false;
    2e8a:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = MAIN_t;
    2e8c:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = 300;
    2e8e:	8298      	strh	r0, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = 0;
    2e90:	759a      	strb	r2, [r3, #22]
}
    2e92:	4770      	bx	lr
    2e94:	20000138 	.word	0x20000138

00002e98 <putSettings>:

void putSettings() {
    2e98:	b500      	push	{lr}
    2e9a:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    2e9c:	4669      	mov	r1, sp
    settings[1] = deploymentSettings.channelASettings.TYPE;
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    2e9e:	4668      	mov	r0, sp

void putSettings() {

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    2ea0:	4b17      	ldr	r3, [pc, #92]	; (2f00 <putSettings+0x68>)
    2ea2:	781a      	ldrb	r2, [r3, #0]
    2ea4:	700a      	strb	r2, [r1, #0]
    settings[1] = deploymentSettings.channelASettings.TYPE;
    2ea6:	785a      	ldrb	r2, [r3, #1]
    2ea8:	704a      	strb	r2, [r1, #1]
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    2eaa:	885a      	ldrh	r2, [r3, #2]
    2eac:	0a11      	lsrs	r1, r2, #8
    2eae:	7081      	strb	r1, [r0, #2]
    settings[3] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 0;
    2eb0:	70c2      	strb	r2, [r0, #3]
    settings[4] = deploymentSettings.channelASettings.APPOGE_DELAY;
    2eb2:	791a      	ldrb	r2, [r3, #4]
    2eb4:	7102      	strb	r2, [r0, #4]

    settings[5] = deploymentSettings.channelBSettings.ENABLED;
    2eb6:	799a      	ldrb	r2, [r3, #6]
    2eb8:	7142      	strb	r2, [r0, #5]
    settings[6] = deploymentSettings.channelBSettings.TYPE;
    2eba:	79da      	ldrb	r2, [r3, #7]
    2ebc:	7182      	strb	r2, [r0, #6]
    settings[7] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 8;
    2ebe:	891a      	ldrh	r2, [r3, #8]
    2ec0:	0a11      	lsrs	r1, r2, #8
    2ec2:	71c1      	strb	r1, [r0, #7]
    settings[8] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 0;
    2ec4:	7202      	strb	r2, [r0, #8]
    settings[9] = deploymentSettings.channelBSettings.APPOGE_DELAY;
    2ec6:	7a9a      	ldrb	r2, [r3, #10]
    2ec8:	7242      	strb	r2, [r0, #9]

    settings[10] = deploymentSettings.channelCSettings.ENABLED;
    2eca:	7b1a      	ldrb	r2, [r3, #12]
    2ecc:	7282      	strb	r2, [r0, #10]
    settings[11] = deploymentSettings.channelCSettings.TYPE;
    2ece:	7b5a      	ldrb	r2, [r3, #13]
    2ed0:	72c2      	strb	r2, [r0, #11]
    settings[12] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 8;
    2ed2:	89da      	ldrh	r2, [r3, #14]
    2ed4:	0a11      	lsrs	r1, r2, #8
    2ed6:	7301      	strb	r1, [r0, #12]
    settings[13] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 0;
    2ed8:	7342      	strb	r2, [r0, #13]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;
    2eda:	7c1a      	ldrb	r2, [r3, #16]
    2edc:	7382      	strb	r2, [r0, #14]

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    2ede:	7c9a      	ldrb	r2, [r3, #18]
    2ee0:	73c2      	strb	r2, [r0, #15]
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    2ee2:	7cda      	ldrb	r2, [r3, #19]
    2ee4:	7402      	strb	r2, [r0, #16]
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    2ee6:	8a9a      	ldrh	r2, [r3, #20]
    2ee8:	0a11      	lsrs	r1, r2, #8
    2eea:	7441      	strb	r1, [r0, #17]
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    2eec:	7482      	strb	r2, [r0, #18]
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    2eee:	7d9b      	ldrb	r3, [r3, #22]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    2ef0:	4669      	mov	r1, sp
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    2ef2:	74c3      	strb	r3, [r0, #19]

    settings[20] = 0x00;
    2ef4:	2000      	movs	r0, #0

    AT25SEWritePage(0x00,settings);
    2ef6:	4b03      	ldr	r3, [pc, #12]	; (2f04 <putSettings+0x6c>)
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;

    settings[20] = 0x00;
    2ef8:	7508      	strb	r0, [r1, #20]

    AT25SEWritePage(0x00,settings);
    2efa:	4798      	blx	r3
}
    2efc:	b041      	add	sp, #260	; 0x104
    2efe:	bd00      	pop	{pc}
    2f00:	20000138 	.word	0x20000138
    2f04:	000002a5 	.word	0x000002a5

00002f08 <getSettings>:




void getSettings() {
    2f08:	b500      	push	{lr}
    2f0a:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);
    2f0c:	4669      	mov	r1, sp
    2f0e:	4b2c      	ldr	r3, [pc, #176]	; (2fc0 <getSettings+0xb8>)
    2f10:	2000      	movs	r0, #0
    2f12:	4798      	blx	r3

    deploymentSettings.channelASettings.ENABLED = settings[0];
    2f14:	466a      	mov	r2, sp
    2f16:	7812      	ldrb	r2, [r2, #0]
    2f18:	4b2a      	ldr	r3, [pc, #168]	; (2fc4 <getSettings+0xbc>)
    2f1a:	1e51      	subs	r1, r2, #1
    2f1c:	418a      	sbcs	r2, r1
    2f1e:	701a      	strb	r2, [r3, #0]
    deploymentSettings.channelASettings.TYPE = settings[1];
    2f20:	466a      	mov	r2, sp
    2f22:	7852      	ldrb	r2, [r2, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    2f24:	4669      	mov	r1, sp
    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);

    deploymentSettings.channelASettings.ENABLED = settings[0];
    deploymentSettings.channelASettings.TYPE = settings[1];
    2f26:	705a      	strb	r2, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    2f28:	466a      	mov	r2, sp
    2f2a:	7892      	ldrb	r2, [r2, #2]
    2f2c:	78c9      	ldrb	r1, [r1, #3]
    2f2e:	0212      	lsls	r2, r2, #8
    2f30:	430a      	orrs	r2, r1
    2f32:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];
    2f34:	466a      	mov	r2, sp
    2f36:	7912      	ldrb	r2, [r2, #4]
    2f38:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    2f3a:	466a      	mov	r2, sp
    2f3c:	7952      	ldrb	r2, [r2, #5]
    2f3e:	1e51      	subs	r1, r2, #1
    2f40:	418a      	sbcs	r2, r1
    2f42:	719a      	strb	r2, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = settings[6];
    2f44:	466a      	mov	r2, sp
    2f46:	7992      	ldrb	r2, [r2, #6]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    2f48:	4669      	mov	r1, sp
    deploymentSettings.channelASettings.TYPE = settings[1];
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    deploymentSettings.channelBSettings.TYPE = settings[6];
    2f4a:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    2f4c:	466a      	mov	r2, sp
    2f4e:	79d2      	ldrb	r2, [r2, #7]
    2f50:	7a09      	ldrb	r1, [r1, #8]
    2f52:	0212      	lsls	r2, r2, #8
    2f54:	430a      	orrs	r2, r1
    2f56:	811a      	strh	r2, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];
    2f58:	466a      	mov	r2, sp
    2f5a:	7a52      	ldrb	r2, [r2, #9]
    2f5c:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    2f5e:	466a      	mov	r2, sp
    2f60:	7a92      	ldrb	r2, [r2, #10]
    2f62:	1e51      	subs	r1, r2, #1
    2f64:	418a      	sbcs	r2, r1
    2f66:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = settings[11];
    2f68:	466a      	mov	r2, sp
    2f6a:	7ad2      	ldrb	r2, [r2, #11]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    2f6c:	4669      	mov	r1, sp
    deploymentSettings.channelBSettings.TYPE = settings[6];
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    deploymentSettings.channelCSettings.TYPE = settings[11];
    2f6e:	735a      	strb	r2, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    2f70:	466a      	mov	r2, sp
    2f72:	7b12      	ldrb	r2, [r2, #12]
    2f74:	7b49      	ldrb	r1, [r1, #13]
    2f76:	0212      	lsls	r2, r2, #8
    2f78:	430a      	orrs	r2, r1
    2f7a:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];
    2f7c:	466a      	mov	r2, sp
    2f7e:	7b92      	ldrb	r2, [r2, #14]
    2f80:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    2f82:	466a      	mov	r2, sp
    2f84:	7bd2      	ldrb	r2, [r2, #15]
    2f86:	1e51      	subs	r1, r2, #1
    2f88:	418a      	sbcs	r2, r1
    2f8a:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = settings[16];
    2f8c:	466a      	mov	r2, sp
    2f8e:	7c12      	ldrb	r2, [r2, #16]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    2f90:	4669      	mov	r1, sp
    deploymentSettings.channelCSettings.TYPE = settings[11];
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    deploymentSettings.channelDSettings.TYPE = settings[16];
    2f92:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    2f94:	466a      	mov	r2, sp
    2f96:	7c52      	ldrb	r2, [r2, #17]
    2f98:	7c89      	ldrb	r1, [r1, #18]
    2f9a:	0212      	lsls	r2, r2, #8
    2f9c:	430a      	orrs	r2, r1
    2f9e:	829a      	strh	r2, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = settings[19];
    2fa0:	466a      	mov	r2, sp
    2fa2:	7cd2      	ldrb	r2, [r2, #19]
    2fa4:	759a      	strb	r2, [r3, #22]


    if (settings[20] == 0xFF) {
    2fa6:	466b      	mov	r3, sp
    2fa8:	7d1b      	ldrb	r3, [r3, #20]
    2faa:	2bff      	cmp	r3, #255	; 0xff
    2fac:	d103      	bne.n	2fb6 <getSettings+0xae>
        applyDefaultSettings();
    2fae:	4b06      	ldr	r3, [pc, #24]	; (2fc8 <getSettings+0xc0>)
    2fb0:	4798      	blx	r3
        putSettings();
    2fb2:	4b06      	ldr	r3, [pc, #24]	; (2fcc <getSettings+0xc4>)
    2fb4:	4798      	blx	r3
    }

    findMainAltitude();
    2fb6:	4b06      	ldr	r3, [pc, #24]	; (2fd0 <getSettings+0xc8>)
    2fb8:	4798      	blx	r3

}
    2fba:	b041      	add	sp, #260	; 0x104
    2fbc:	bd00      	pop	{pc}
    2fbe:	46c0      	nop			; (mov r8, r8)
    2fc0:	0000035d 	.word	0x0000035d
    2fc4:	20000138 	.word	0x20000138
    2fc8:	00002e69 	.word	0x00002e69
    2fcc:	00002e99 	.word	0x00002e99
    2fd0:	00002e1d 	.word	0x00002e1d

00002fd4 <sendFlightLogs>:
#include <util.h>
#include <boardDefines.h>

void sendFlightLogs() {
    2fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    2fd6:	2400      	movs	r4, #0

        if (isFlightLogged(flightLog)) {
    2fd8:	0020      	movs	r0, r4
    2fda:	4b1e      	ldr	r3, [pc, #120]	; (3054 <sendFlightLogs+0x80>)
    2fdc:	4798      	blx	r3
    2fde:	2800      	cmp	r0, #0
    2fe0:	d003      	beq.n	2fea <sendFlightLogs+0x16>

            usartDataOut(USART3, flightLog);
    2fe2:	0021      	movs	r1, r4
    2fe4:	2003      	movs	r0, #3
    2fe6:	4b1c      	ldr	r3, [pc, #112]	; (3058 <sendFlightLogs+0x84>)
    2fe8:	4798      	blx	r3
#include <boardDefines.h>

void sendFlightLogs() {

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    2fea:	3401      	adds	r4, #1
    2fec:	b2e4      	uxtb	r4, r4
    2fee:	2c14      	cmp	r4, #20
    2ff0:	d1f2      	bne.n	2fd8 <sendFlightLogs+0x4>

            usartDataOut(USART3, flightLog);
        }
    }
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);
    2ff2:	21ff      	movs	r1, #255	; 0xff
    2ff4:	2003      	movs	r0, #3
    2ff6:	4c18      	ldr	r4, [pc, #96]	; (3058 <sendFlightLogs+0x84>)
    2ff8:	47a0      	blx	r4

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2ffa:	4a18      	ldr	r2, [pc, #96]	; (305c <sendFlightLogs+0x88>)
    2ffc:	7e13      	ldrb	r3, [r2, #24]
    2ffe:	075b      	lsls	r3, r3, #29
    3000:	d5fc      	bpl.n	2ffc <sendFlightLogs+0x28>
    volatile u8_t flightToRead = usartDataIn(USART3);
    3002:	4b17      	ldr	r3, [pc, #92]	; (3060 <sendFlightLogs+0x8c>)
    3004:	2003      	movs	r0, #3
    3006:	4798      	blx	r3
    3008:	466b      	mov	r3, sp
    300a:	71d8      	strb	r0, [r3, #7]


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    300c:	79d8      	ldrb	r0, [r3, #7]
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    volatile u8_t flightToRead = usartDataIn(USART3);
    300e:	1ddd      	adds	r5, r3, #7


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    3010:	b2c0      	uxtb	r0, r0
    3012:	4b14      	ldr	r3, [pc, #80]	; (3064 <sendFlightLogs+0x90>)
    3014:	4798      	blx	r3
    3016:	0007      	movs	r7, r0
    u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
    3018:	7828      	ldrb	r0, [r5, #0]
    301a:	4b13      	ldr	r3, [pc, #76]	; (3068 <sendFlightLogs+0x94>)
    301c:	b2c0      	uxtb	r0, r0
    301e:	4798      	blx	r3
    3020:	0006      	movs	r6, r0

    //inform of page numbers
    u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    3022:	1bc5      	subs	r5, r0, r7
    3024:	0a2d      	lsrs	r5, r5, #8
    usartDataOut(USART3, pagesToSend >> 0);
    3026:	b2e9      	uxtb	r1, r5
    3028:	2003      	movs	r0, #3
    302a:	47a0      	blx	r4
    usartDataOut(USART3, pagesToSend >> 8);
    302c:	b2a9      	uxth	r1, r5
    302e:	0a09      	lsrs	r1, r1, #8
    3030:	2003      	movs	r0, #3
    3032:	47a0      	blx	r4

    //send flight end address for % full
    usartDataOut(USART3, flightEndAddress >> 0);
    3034:	b2f1      	uxtb	r1, r6
    3036:	2003      	movs	r0, #3
    3038:	47a0      	blx	r4
    usartDataOut(USART3, flightEndAddress >> 8);
    303a:	0a31      	lsrs	r1, r6, #8
    303c:	b2c9      	uxtb	r1, r1
    303e:	2003      	movs	r0, #3
    3040:	47a0      	blx	r4
    usartDataOut(USART3, flightEndAddress >> 16);
    3042:	0c31      	lsrs	r1, r6, #16
    3044:	b2c9      	uxtb	r1, r1
    3046:	2003      	movs	r0, #3
    3048:	47a0      	blx	r4

    //USART out the flights pages
    sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    304a:	0031      	movs	r1, r6
    304c:	0038      	movs	r0, r7
    304e:	4b07      	ldr	r3, [pc, #28]	; (306c <sendFlightLogs+0x98>)
    3050:	4798      	blx	r3

}
    3052:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3054:	000027cd 	.word	0x000027cd
    3058:	00002df5 	.word	0x00002df5
    305c:	42001400 	.word	0x42001400
    3060:	00002e0d 	.word	0x00002e0d
    3064:	0000277d 	.word	0x0000277d
    3068:	000027a5 	.word	0x000027a5
    306c:	00000ad5 	.word	0x00000ad5

00003070 <attemptConnection>:

void attemptConnection() {
    3070:	b570      	push	{r4, r5, r6, lr}

    if (USARTconnectionAvaliable()) {
    3072:	4b14      	ldr	r3, [pc, #80]	; (30c4 <attemptConnection+0x54>)
    3074:	4798      	blx	r3
    3076:	2800      	cmp	r0, #0
    3078:	d022      	beq.n	30c0 <attemptConnection+0x50>

        flightState = flightIdle;
    307a:	2201      	movs	r2, #1
    307c:	4b12      	ldr	r3, [pc, #72]	; (30c8 <attemptConnection+0x58>)
    307e:	701a      	strb	r2, [r3, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    3080:	4a12      	ldr	r2, [pc, #72]	; (30cc <attemptConnection+0x5c>)
    3082:	7e13      	ldrb	r3, [r2, #24]
    3084:	075b      	lsls	r3, r3, #29
    3086:	d5fc      	bpl.n	3082 <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    3088:	2003      	movs	r0, #3
    308a:	4b11      	ldr	r3, [pc, #68]	; (30d0 <attemptConnection+0x60>)
    308c:	4798      	blx	r3
    308e:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    3090:	2c4c      	cmp	r4, #76	; 0x4c
    3092:	d102      	bne.n	309a <attemptConnection+0x2a>

            sendFlightLogs();
    3094:	4b0f      	ldr	r3, [pc, #60]	; (30d4 <attemptConnection+0x64>)
    3096:	4798      	blx	r3
    3098:	e012      	b.n	30c0 <attemptConnection+0x50>
        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    309a:	2845      	cmp	r0, #69	; 0x45
    309c:	d110      	bne.n	30c0 <attemptConnection+0x50>

            //getSettings();

            AT25SFChipErase();
    309e:	4e0e      	ldr	r6, [pc, #56]	; (30d8 <attemptConnection+0x68>)
    30a0:	47b0      	blx	r6
            AT25SFHoldTillReady();
    30a2:	4d0e      	ldr	r5, [pc, #56]	; (30dc <attemptConnection+0x6c>)
    30a4:	47a8      	blx	r5
            delay_ms(100);
    30a6:	2064      	movs	r0, #100	; 0x64
    30a8:	4b0d      	ldr	r3, [pc, #52]	; (30e0 <attemptConnection+0x70>)
    30aa:	4798      	blx	r3
            AT25SFChipErase();
    30ac:	47b0      	blx	r6

            AT25SFHoldTillReady();
    30ae:	47a8      	blx	r5

            //getSettings();

            usartDataOut(USART3, 'E');
    30b0:	2003      	movs	r0, #3
    30b2:	4b0c      	ldr	r3, [pc, #48]	; (30e4 <attemptConnection+0x74>)
    30b4:	0021      	movs	r1, r4
    30b6:	4798      	blx	r3
            beep(400);
    30b8:	20c8      	movs	r0, #200	; 0xc8
    30ba:	4b0b      	ldr	r3, [pc, #44]	; (30e8 <attemptConnection+0x78>)
    30bc:	0040      	lsls	r0, r0, #1
    30be:	4798      	blx	r3


        }
    }

}
    30c0:	bd70      	pop	{r4, r5, r6, pc}
    30c2:	46c0      	nop			; (mov r8, r8)
    30c4:	00000aa1 	.word	0x00000aa1
    30c8:	20000164 	.word	0x20000164
    30cc:	42001400 	.word	0x42001400
    30d0:	00002e0d 	.word	0x00002e0d
    30d4:	00002fd5 	.word	0x00002fd5
    30d8:	00000219 	.word	0x00000219
    30dc:	000001e5 	.word	0x000001e5
    30e0:	000010f5 	.word	0x000010f5
    30e4:	00002df5 	.word	0x00002df5
    30e8:	00000e25 	.word	0x00000e25

000030ec <pow>:
    30ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    30ee:	465f      	mov	r7, fp
    30f0:	464d      	mov	r5, r9
    30f2:	4656      	mov	r6, sl
    30f4:	4644      	mov	r4, r8
    30f6:	b4f0      	push	{r4, r5, r6, r7}
    30f8:	b091      	sub	sp, #68	; 0x44
    30fa:	001f      	movs	r7, r3
    30fc:	0004      	movs	r4, r0
    30fe:	000d      	movs	r5, r1
    3100:	0016      	movs	r6, r2
    3102:	f000 f9af 	bl	3464 <__ieee754_pow>
    3106:	4bcf      	ldr	r3, [pc, #828]	; (3444 <pow+0x358>)
    3108:	9002      	str	r0, [sp, #8]
    310a:	9103      	str	r1, [sp, #12]
    310c:	469b      	mov	fp, r3
    310e:	781b      	ldrb	r3, [r3, #0]
    3110:	b25b      	sxtb	r3, r3
    3112:	4699      	mov	r9, r3
    3114:	3301      	adds	r3, #1
    3116:	d04f      	beq.n	31b8 <pow+0xcc>
    3118:	0032      	movs	r2, r6
    311a:	003b      	movs	r3, r7
    311c:	0030      	movs	r0, r6
    311e:	0039      	movs	r1, r7
    3120:	f003 f866 	bl	61f0 <__aeabi_dcmpun>
    3124:	9000      	str	r0, [sp, #0]
    3126:	2800      	cmp	r0, #0
    3128:	d146      	bne.n	31b8 <pow+0xcc>
    312a:	0022      	movs	r2, r4
    312c:	002b      	movs	r3, r5
    312e:	0020      	movs	r0, r4
    3130:	0029      	movs	r1, r5
    3132:	f003 f85d 	bl	61f0 <__aeabi_dcmpun>
    3136:	2200      	movs	r2, #0
    3138:	4682      	mov	sl, r0
    313a:	2800      	cmp	r0, #0
    313c:	d134      	bne.n	31a8 <pow+0xbc>
    313e:	2300      	movs	r3, #0
    3140:	0020      	movs	r0, r4
    3142:	0029      	movs	r1, r5
    3144:	f001 f988 	bl	4458 <__aeabi_dcmpeq>
    3148:	2800      	cmp	r0, #0
    314a:	d03a      	beq.n	31c2 <pow+0xd6>
    314c:	2200      	movs	r2, #0
    314e:	2300      	movs	r3, #0
    3150:	0030      	movs	r0, r6
    3152:	0039      	movs	r1, r7
    3154:	f001 f980 	bl	4458 <__aeabi_dcmpeq>
    3158:	9005      	str	r0, [sp, #20]
    315a:	2800      	cmp	r0, #0
    315c:	d100      	bne.n	3160 <pow+0x74>
    315e:	e074      	b.n	324a <pow+0x15e>
    3160:	ab06      	add	r3, sp, #24
    3162:	4698      	mov	r8, r3
    3164:	2301      	movs	r3, #1
    3166:	4642      	mov	r2, r8
    3168:	9306      	str	r3, [sp, #24]
    316a:	4bb7      	ldr	r3, [pc, #732]	; (3448 <pow+0x35c>)
    316c:	6053      	str	r3, [r2, #4]
    316e:	4643      	mov	r3, r8
    3170:	4652      	mov	r2, sl
    3172:	609c      	str	r4, [r3, #8]
    3174:	60dd      	str	r5, [r3, #12]
    3176:	621a      	str	r2, [r3, #32]
    3178:	611e      	str	r6, [r3, #16]
    317a:	615f      	str	r7, [r3, #20]
    317c:	4642      	mov	r2, r8
    317e:	2300      	movs	r3, #0
    3180:	2400      	movs	r4, #0
    3182:	6193      	str	r3, [r2, #24]
    3184:	61d4      	str	r4, [r2, #28]
    3186:	464b      	mov	r3, r9
    3188:	2b00      	cmp	r3, #0
    318a:	d100      	bne.n	318e <pow+0xa2>
    318c:	e094      	b.n	32b8 <pow+0x1cc>
    318e:	2300      	movs	r3, #0
    3190:	4cae      	ldr	r4, [pc, #696]	; (344c <pow+0x360>)
    3192:	9300      	str	r3, [sp, #0]
    3194:	9401      	str	r4, [sp, #4]
    3196:	9800      	ldr	r0, [sp, #0]
    3198:	9901      	ldr	r1, [sp, #4]
    319a:	b011      	add	sp, #68	; 0x44
    319c:	bc3c      	pop	{r2, r3, r4, r5}
    319e:	4690      	mov	r8, r2
    31a0:	4699      	mov	r9, r3
    31a2:	46a2      	mov	sl, r4
    31a4:	46ab      	mov	fp, r5
    31a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31a8:	2300      	movs	r3, #0
    31aa:	0030      	movs	r0, r6
    31ac:	0039      	movs	r1, r7
    31ae:	f001 f953 	bl	4458 <__aeabi_dcmpeq>
    31b2:	2800      	cmp	r0, #0
    31b4:	d000      	beq.n	31b8 <pow+0xcc>
    31b6:	e0eb      	b.n	3390 <pow+0x2a4>
    31b8:	9b02      	ldr	r3, [sp, #8]
    31ba:	9c03      	ldr	r4, [sp, #12]
    31bc:	9300      	str	r3, [sp, #0]
    31be:	9401      	str	r4, [sp, #4]
    31c0:	e7e9      	b.n	3196 <pow+0xaa>
    31c2:	9802      	ldr	r0, [sp, #8]
    31c4:	9903      	ldr	r1, [sp, #12]
    31c6:	f000 ff7d 	bl	40c4 <finite>
    31ca:	4681      	mov	r9, r0
    31cc:	2800      	cmp	r0, #0
    31ce:	d100      	bne.n	31d2 <pow+0xe6>
    31d0:	e086      	b.n	32e0 <pow+0x1f4>
    31d2:	9802      	ldr	r0, [sp, #8]
    31d4:	9903      	ldr	r1, [sp, #12]
    31d6:	2200      	movs	r2, #0
    31d8:	2300      	movs	r3, #0
    31da:	f001 f93d 	bl	4458 <__aeabi_dcmpeq>
    31de:	2800      	cmp	r0, #0
    31e0:	d0ea      	beq.n	31b8 <pow+0xcc>
    31e2:	0020      	movs	r0, r4
    31e4:	0029      	movs	r1, r5
    31e6:	f000 ff6d 	bl	40c4 <finite>
    31ea:	9a02      	ldr	r2, [sp, #8]
    31ec:	9b03      	ldr	r3, [sp, #12]
    31ee:	9200      	str	r2, [sp, #0]
    31f0:	9301      	str	r3, [sp, #4]
    31f2:	2800      	cmp	r0, #0
    31f4:	d0cf      	beq.n	3196 <pow+0xaa>
    31f6:	0030      	movs	r0, r6
    31f8:	0039      	movs	r1, r7
    31fa:	f000 ff63 	bl	40c4 <finite>
    31fe:	9a02      	ldr	r2, [sp, #8]
    3200:	9b03      	ldr	r3, [sp, #12]
    3202:	9200      	str	r2, [sp, #0]
    3204:	9301      	str	r3, [sp, #4]
    3206:	2800      	cmp	r0, #0
    3208:	d0c5      	beq.n	3196 <pow+0xaa>
    320a:	ab06      	add	r3, sp, #24
    320c:	4698      	mov	r8, r3
    320e:	2304      	movs	r3, #4
    3210:	4642      	mov	r2, r8
    3212:	9306      	str	r3, [sp, #24]
    3214:	4b8c      	ldr	r3, [pc, #560]	; (3448 <pow+0x35c>)
    3216:	6094      	str	r4, [r2, #8]
    3218:	60d5      	str	r5, [r2, #12]
    321a:	6053      	str	r3, [r2, #4]
    321c:	2300      	movs	r3, #0
    321e:	2400      	movs	r4, #0
    3220:	6213      	str	r3, [r2, #32]
    3222:	2300      	movs	r3, #0
    3224:	6193      	str	r3, [r2, #24]
    3226:	61d4      	str	r4, [r2, #28]
    3228:	465b      	mov	r3, fp
    322a:	781b      	ldrb	r3, [r3, #0]
    322c:	6116      	str	r6, [r2, #16]
    322e:	6157      	str	r7, [r2, #20]
    3230:	b25b      	sxtb	r3, r3
    3232:	2b02      	cmp	r3, #2
    3234:	d004      	beq.n	3240 <pow+0x154>
    3236:	4640      	mov	r0, r8
    3238:	f000 ff4e 	bl	40d8 <matherr>
    323c:	2800      	cmp	r0, #0
    323e:	d140      	bne.n	32c2 <pow+0x1d6>
    3240:	f003 f9a4 	bl	658c <__errno>
    3244:	2322      	movs	r3, #34	; 0x22
    3246:	6003      	str	r3, [r0, #0]
    3248:	e03b      	b.n	32c2 <pow+0x1d6>
    324a:	0030      	movs	r0, r6
    324c:	0039      	movs	r1, r7
    324e:	f000 ff39 	bl	40c4 <finite>
    3252:	9a02      	ldr	r2, [sp, #8]
    3254:	9b03      	ldr	r3, [sp, #12]
    3256:	9200      	str	r2, [sp, #0]
    3258:	9301      	str	r3, [sp, #4]
    325a:	2800      	cmp	r0, #0
    325c:	d09b      	beq.n	3196 <pow+0xaa>
    325e:	2200      	movs	r2, #0
    3260:	2300      	movs	r3, #0
    3262:	0030      	movs	r0, r6
    3264:	0039      	movs	r1, r7
    3266:	f001 f8fd 	bl	4464 <__aeabi_dcmplt>
    326a:	2800      	cmp	r0, #0
    326c:	d100      	bne.n	3270 <pow+0x184>
    326e:	e792      	b.n	3196 <pow+0xaa>
    3270:	ab06      	add	r3, sp, #24
    3272:	4698      	mov	r8, r3
    3274:	2301      	movs	r3, #1
    3276:	4642      	mov	r2, r8
    3278:	9306      	str	r3, [sp, #24]
    327a:	4b73      	ldr	r3, [pc, #460]	; (3448 <pow+0x35c>)
    327c:	6053      	str	r3, [r2, #4]
    327e:	4643      	mov	r3, r8
    3280:	9a05      	ldr	r2, [sp, #20]
    3282:	609c      	str	r4, [r3, #8]
    3284:	60dd      	str	r5, [r3, #12]
    3286:	621a      	str	r2, [r3, #32]
    3288:	611e      	str	r6, [r3, #16]
    328a:	615f      	str	r7, [r3, #20]
    328c:	465b      	mov	r3, fp
    328e:	781b      	ldrb	r3, [r3, #0]
    3290:	b25b      	sxtb	r3, r3
    3292:	2b00      	cmp	r3, #0
    3294:	d00b      	beq.n	32ae <pow+0x1c2>
    3296:	2000      	movs	r0, #0
    3298:	4642      	mov	r2, r8
    329a:	496d      	ldr	r1, [pc, #436]	; (3450 <pow+0x364>)
    329c:	6190      	str	r0, [r2, #24]
    329e:	61d1      	str	r1, [r2, #28]
    32a0:	2b02      	cmp	r3, #2
    32a2:	d109      	bne.n	32b8 <pow+0x1cc>
    32a4:	f003 f972 	bl	658c <__errno>
    32a8:	2321      	movs	r3, #33	; 0x21
    32aa:	6003      	str	r3, [r0, #0]
    32ac:	e009      	b.n	32c2 <pow+0x1d6>
    32ae:	4642      	mov	r2, r8
    32b0:	2300      	movs	r3, #0
    32b2:	2400      	movs	r4, #0
    32b4:	6193      	str	r3, [r2, #24]
    32b6:	61d4      	str	r4, [r2, #28]
    32b8:	4640      	mov	r0, r8
    32ba:	f000 ff0d 	bl	40d8 <matherr>
    32be:	2800      	cmp	r0, #0
    32c0:	d0f0      	beq.n	32a4 <pow+0x1b8>
    32c2:	4643      	mov	r3, r8
    32c4:	6a1b      	ldr	r3, [r3, #32]
    32c6:	2b00      	cmp	r3, #0
    32c8:	d004      	beq.n	32d4 <pow+0x1e8>
    32ca:	f003 f95f 	bl	658c <__errno>
    32ce:	4643      	mov	r3, r8
    32d0:	6a1b      	ldr	r3, [r3, #32]
    32d2:	6003      	str	r3, [r0, #0]
    32d4:	4643      	mov	r3, r8
    32d6:	69dc      	ldr	r4, [r3, #28]
    32d8:	699b      	ldr	r3, [r3, #24]
    32da:	9300      	str	r3, [sp, #0]
    32dc:	9401      	str	r4, [sp, #4]
    32de:	e75a      	b.n	3196 <pow+0xaa>
    32e0:	0020      	movs	r0, r4
    32e2:	0029      	movs	r1, r5
    32e4:	f000 feee 	bl	40c4 <finite>
    32e8:	2800      	cmp	r0, #0
    32ea:	d100      	bne.n	32ee <pow+0x202>
    32ec:	e771      	b.n	31d2 <pow+0xe6>
    32ee:	0030      	movs	r0, r6
    32f0:	0039      	movs	r1, r7
    32f2:	f000 fee7 	bl	40c4 <finite>
    32f6:	2800      	cmp	r0, #0
    32f8:	d100      	bne.n	32fc <pow+0x210>
    32fa:	e76a      	b.n	31d2 <pow+0xe6>
    32fc:	9802      	ldr	r0, [sp, #8]
    32fe:	9903      	ldr	r1, [sp, #12]
    3300:	000b      	movs	r3, r1
    3302:	0002      	movs	r2, r0
    3304:	f002 ff74 	bl	61f0 <__aeabi_dcmpun>
    3308:	ab06      	add	r3, sp, #24
    330a:	4698      	mov	r8, r3
    330c:	2800      	cmp	r0, #0
    330e:	d17a      	bne.n	3406 <pow+0x31a>
    3310:	2303      	movs	r3, #3
    3312:	4642      	mov	r2, r8
    3314:	9306      	str	r3, [sp, #24]
    3316:	4b4c      	ldr	r3, [pc, #304]	; (3448 <pow+0x35c>)
    3318:	6210      	str	r0, [r2, #32]
    331a:	6053      	str	r3, [r2, #4]
    331c:	465b      	mov	r3, fp
    331e:	781b      	ldrb	r3, [r3, #0]
    3320:	6094      	str	r4, [r2, #8]
    3322:	60d5      	str	r5, [r2, #12]
    3324:	b25b      	sxtb	r3, r3
    3326:	6116      	str	r6, [r2, #16]
    3328:	6157      	str	r7, [r2, #20]
    332a:	4699      	mov	r9, r3
    332c:	2b00      	cmp	r3, #0
    332e:	d148      	bne.n	33c2 <pow+0x2d6>
    3330:	22e0      	movs	r2, #224	; 0xe0
    3332:	4641      	mov	r1, r8
    3334:	4b47      	ldr	r3, [pc, #284]	; (3454 <pow+0x368>)
    3336:	0612      	lsls	r2, r2, #24
    3338:	618a      	str	r2, [r1, #24]
    333a:	61cb      	str	r3, [r1, #28]
    333c:	0020      	movs	r0, r4
    333e:	2200      	movs	r2, #0
    3340:	2300      	movs	r3, #0
    3342:	0029      	movs	r1, r5
    3344:	f001 f88e 	bl	4464 <__aeabi_dcmplt>
    3348:	2800      	cmp	r0, #0
    334a:	d100      	bne.n	334e <pow+0x262>
    334c:	e773      	b.n	3236 <pow+0x14a>
    334e:	2200      	movs	r2, #0
    3350:	4b41      	ldr	r3, [pc, #260]	; (3458 <pow+0x36c>)
    3352:	0030      	movs	r0, r6
    3354:	0039      	movs	r1, r7
    3356:	f002 f97d 	bl	5654 <__aeabi_dmul>
    335a:	0004      	movs	r4, r0
    335c:	000d      	movs	r5, r1
    335e:	f000 fec3 	bl	40e8 <rint>
    3362:	0002      	movs	r2, r0
    3364:	000b      	movs	r3, r1
    3366:	0020      	movs	r0, r4
    3368:	0029      	movs	r1, r5
    336a:	f001 f875 	bl	4458 <__aeabi_dcmpeq>
    336e:	2800      	cmp	r0, #0
    3370:	d105      	bne.n	337e <pow+0x292>
    3372:	22e0      	movs	r2, #224	; 0xe0
    3374:	4b39      	ldr	r3, [pc, #228]	; (345c <pow+0x370>)
    3376:	0612      	lsls	r2, r2, #24
    3378:	4641      	mov	r1, r8
    337a:	618a      	str	r2, [r1, #24]
    337c:	61cb      	str	r3, [r1, #28]
    337e:	465b      	mov	r3, fp
    3380:	781b      	ldrb	r3, [r3, #0]
    3382:	b25b      	sxtb	r3, r3
    3384:	4699      	mov	r9, r3
    3386:	464b      	mov	r3, r9
    3388:	2b02      	cmp	r3, #2
    338a:	d000      	beq.n	338e <pow+0x2a2>
    338c:	e753      	b.n	3236 <pow+0x14a>
    338e:	e757      	b.n	3240 <pow+0x154>
    3390:	ab06      	add	r3, sp, #24
    3392:	4698      	mov	r8, r3
    3394:	2301      	movs	r3, #1
    3396:	4642      	mov	r2, r8
    3398:	9306      	str	r3, [sp, #24]
    339a:	4b2b      	ldr	r3, [pc, #172]	; (3448 <pow+0x35c>)
    339c:	6053      	str	r3, [r2, #4]
    339e:	4643      	mov	r3, r8
    33a0:	609c      	str	r4, [r3, #8]
    33a2:	60dd      	str	r5, [r3, #12]
    33a4:	2400      	movs	r4, #0
    33a6:	9a00      	ldr	r2, [sp, #0]
    33a8:	4d28      	ldr	r5, [pc, #160]	; (344c <pow+0x360>)
    33aa:	621a      	str	r2, [r3, #32]
    33ac:	611e      	str	r6, [r3, #16]
    33ae:	615f      	str	r7, [r3, #20]
    33b0:	619c      	str	r4, [r3, #24]
    33b2:	61dd      	str	r5, [r3, #28]
    33b4:	464b      	mov	r3, r9
    33b6:	9400      	str	r4, [sp, #0]
    33b8:	9501      	str	r5, [sp, #4]
    33ba:	2b02      	cmp	r3, #2
    33bc:	d000      	beq.n	33c0 <pow+0x2d4>
    33be:	e77b      	b.n	32b8 <pow+0x1cc>
    33c0:	e6e9      	b.n	3196 <pow+0xaa>
    33c2:	2200      	movs	r2, #0
    33c4:	4641      	mov	r1, r8
    33c6:	4b26      	ldr	r3, [pc, #152]	; (3460 <pow+0x374>)
    33c8:	0020      	movs	r0, r4
    33ca:	618a      	str	r2, [r1, #24]
    33cc:	61cb      	str	r3, [r1, #28]
    33ce:	2200      	movs	r2, #0
    33d0:	2300      	movs	r3, #0
    33d2:	0029      	movs	r1, r5
    33d4:	f001 f846 	bl	4464 <__aeabi_dcmplt>
    33d8:	2800      	cmp	r0, #0
    33da:	d0d4      	beq.n	3386 <pow+0x29a>
    33dc:	2200      	movs	r2, #0
    33de:	4b1e      	ldr	r3, [pc, #120]	; (3458 <pow+0x36c>)
    33e0:	0030      	movs	r0, r6
    33e2:	0039      	movs	r1, r7
    33e4:	f002 f936 	bl	5654 <__aeabi_dmul>
    33e8:	0004      	movs	r4, r0
    33ea:	000d      	movs	r5, r1
    33ec:	f000 fe7c 	bl	40e8 <rint>
    33f0:	0002      	movs	r2, r0
    33f2:	000b      	movs	r3, r1
    33f4:	0020      	movs	r0, r4
    33f6:	0029      	movs	r1, r5
    33f8:	f001 f82e 	bl	4458 <__aeabi_dcmpeq>
    33fc:	2800      	cmp	r0, #0
    33fe:	d1be      	bne.n	337e <pow+0x292>
    3400:	2200      	movs	r2, #0
    3402:	4b13      	ldr	r3, [pc, #76]	; (3450 <pow+0x364>)
    3404:	e7b8      	b.n	3378 <pow+0x28c>
    3406:	2301      	movs	r3, #1
    3408:	4642      	mov	r2, r8
    340a:	9306      	str	r3, [sp, #24]
    340c:	4b0e      	ldr	r3, [pc, #56]	; (3448 <pow+0x35c>)
    340e:	6053      	str	r3, [r2, #4]
    3410:	4643      	mov	r3, r8
    3412:	464a      	mov	r2, r9
    3414:	609c      	str	r4, [r3, #8]
    3416:	60dd      	str	r5, [r3, #12]
    3418:	621a      	str	r2, [r3, #32]
    341a:	611e      	str	r6, [r3, #16]
    341c:	615f      	str	r7, [r3, #20]
    341e:	2400      	movs	r4, #0
    3420:	465b      	mov	r3, fp
    3422:	571c      	ldrsb	r4, [r3, r4]
    3424:	2c00      	cmp	r4, #0
    3426:	d100      	bne.n	342a <pow+0x33e>
    3428:	e741      	b.n	32ae <pow+0x1c2>
    342a:	2300      	movs	r3, #0
    342c:	2200      	movs	r2, #0
    342e:	0019      	movs	r1, r3
    3430:	0010      	movs	r0, r2
    3432:	f001 fceb 	bl	4e0c <__aeabi_ddiv>
    3436:	4643      	mov	r3, r8
    3438:	6198      	str	r0, [r3, #24]
    343a:	61d9      	str	r1, [r3, #28]
    343c:	2c02      	cmp	r4, #2
    343e:	d100      	bne.n	3442 <pow+0x356>
    3440:	e730      	b.n	32a4 <pow+0x1b8>
    3442:	e739      	b.n	32b8 <pow+0x1cc>
    3444:	20000070 	.word	0x20000070
    3448:	00006604 	.word	0x00006604
    344c:	3ff00000 	.word	0x3ff00000
    3450:	fff00000 	.word	0xfff00000
    3454:	47efffff 	.word	0x47efffff
    3458:	3fe00000 	.word	0x3fe00000
    345c:	c7efffff 	.word	0xc7efffff
    3460:	7ff00000 	.word	0x7ff00000

00003464 <__ieee754_pow>:
    3464:	b5f0      	push	{r4, r5, r6, r7, lr}
    3466:	4656      	mov	r6, sl
    3468:	464d      	mov	r5, r9
    346a:	4644      	mov	r4, r8
    346c:	465f      	mov	r7, fp
    346e:	b4f0      	push	{r4, r5, r6, r7}
    3470:	001c      	movs	r4, r3
    3472:	0013      	movs	r3, r2
    3474:	0067      	lsls	r7, r4, #1
    3476:	b091      	sub	sp, #68	; 0x44
    3478:	087f      	lsrs	r7, r7, #1
    347a:	9300      	str	r3, [sp, #0]
    347c:	9401      	str	r4, [sp, #4]
    347e:	0006      	movs	r6, r0
    3480:	000d      	movs	r5, r1
    3482:	4680      	mov	r8, r0
    3484:	4689      	mov	r9, r1
    3486:	46a2      	mov	sl, r4
    3488:	433b      	orrs	r3, r7
    348a:	d032      	beq.n	34f2 <__ieee754_pow+0x8e>
    348c:	4b6e      	ldr	r3, [pc, #440]	; (3648 <__ieee754_pow+0x1e4>)
    348e:	006c      	lsls	r4, r5, #1
    3490:	0864      	lsrs	r4, r4, #1
    3492:	429c      	cmp	r4, r3
    3494:	dc29      	bgt.n	34ea <__ieee754_pow+0x86>
    3496:	d026      	beq.n	34e6 <__ieee754_pow+0x82>
    3498:	429f      	cmp	r7, r3
    349a:	dc26      	bgt.n	34ea <__ieee754_pow+0x86>
    349c:	4b6a      	ldr	r3, [pc, #424]	; (3648 <__ieee754_pow+0x1e4>)
    349e:	429f      	cmp	r7, r3
    34a0:	d100      	bne.n	34a4 <__ieee754_pow+0x40>
    34a2:	e089      	b.n	35b8 <__ieee754_pow+0x154>
    34a4:	2300      	movs	r3, #0
    34a6:	469b      	mov	fp, r3
    34a8:	464b      	mov	r3, r9
    34aa:	2b00      	cmp	r3, #0
    34ac:	da00      	bge.n	34b0 <__ieee754_pow+0x4c>
    34ae:	e087      	b.n	35c0 <__ieee754_pow+0x15c>
    34b0:	2a00      	cmp	r2, #0
    34b2:	d12f      	bne.n	3514 <__ieee754_pow+0xb0>
    34b4:	4b64      	ldr	r3, [pc, #400]	; (3648 <__ieee754_pow+0x1e4>)
    34b6:	429f      	cmp	r7, r3
    34b8:	d100      	bne.n	34bc <__ieee754_pow+0x58>
    34ba:	e09f      	b.n	35fc <__ieee754_pow+0x198>
    34bc:	4b63      	ldr	r3, [pc, #396]	; (364c <__ieee754_pow+0x1e8>)
    34be:	429f      	cmp	r7, r3
    34c0:	d05d      	beq.n	357e <__ieee754_pow+0x11a>
    34c2:	2380      	movs	r3, #128	; 0x80
    34c4:	05db      	lsls	r3, r3, #23
    34c6:	459a      	cmp	sl, r3
    34c8:	d101      	bne.n	34ce <__ieee754_pow+0x6a>
    34ca:	f000 fbc1 	bl	3c50 <__ieee754_pow+0x7ec>
    34ce:	4b60      	ldr	r3, [pc, #384]	; (3650 <__ieee754_pow+0x1ec>)
    34d0:	459a      	cmp	sl, r3
    34d2:	d11f      	bne.n	3514 <__ieee754_pow+0xb0>
    34d4:	464b      	mov	r3, r9
    34d6:	2b00      	cmp	r3, #0
    34d8:	db1c      	blt.n	3514 <__ieee754_pow+0xb0>
    34da:	0030      	movs	r0, r6
    34dc:	0029      	movs	r1, r5
    34de:	f000 fcf7 	bl	3ed0 <__ieee754_sqrt>
    34e2:	0006      	movs	r6, r0
    34e4:	e007      	b.n	34f6 <__ieee754_pow+0x92>
    34e6:	2800      	cmp	r0, #0
    34e8:	d00d      	beq.n	3506 <__ieee754_pow+0xa2>
    34ea:	4b5a      	ldr	r3, [pc, #360]	; (3654 <__ieee754_pow+0x1f0>)
    34ec:	18e0      	adds	r0, r4, r3
    34ee:	4330      	orrs	r0, r6
    34f0:	d10b      	bne.n	350a <__ieee754_pow+0xa6>
    34f2:	2600      	movs	r6, #0
    34f4:	4955      	ldr	r1, [pc, #340]	; (364c <__ieee754_pow+0x1e8>)
    34f6:	0030      	movs	r0, r6
    34f8:	b011      	add	sp, #68	; 0x44
    34fa:	bc3c      	pop	{r2, r3, r4, r5}
    34fc:	4690      	mov	r8, r2
    34fe:	4699      	mov	r9, r3
    3500:	46a2      	mov	sl, r4
    3502:	46ab      	mov	fp, r5
    3504:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3506:	42a7      	cmp	r7, r4
    3508:	ddc8      	ble.n	349c <__ieee754_pow+0x38>
    350a:	4853      	ldr	r0, [pc, #332]	; (3658 <__ieee754_pow+0x1f4>)
    350c:	f000 fde6 	bl	40dc <nan>
    3510:	0006      	movs	r6, r0
    3512:	e7f0      	b.n	34f6 <__ieee754_pow+0x92>
    3514:	0030      	movs	r0, r6
    3516:	0029      	movs	r1, r5
    3518:	f000 fdd0 	bl	40bc <fabs>
    351c:	4643      	mov	r3, r8
    351e:	2b00      	cmp	r3, #0
    3520:	d01d      	beq.n	355e <__ieee754_pow+0xfa>
    3522:	0feb      	lsrs	r3, r5, #31
    3524:	3b01      	subs	r3, #1
    3526:	4698      	mov	r8, r3
    3528:	465b      	mov	r3, fp
    352a:	4642      	mov	r2, r8
    352c:	4313      	orrs	r3, r2
    352e:	d079      	beq.n	3624 <__ieee754_pow+0x1c0>
    3530:	4b4a      	ldr	r3, [pc, #296]	; (365c <__ieee754_pow+0x1f8>)
    3532:	429f      	cmp	r7, r3
    3534:	dc00      	bgt.n	3538 <__ieee754_pow+0xd4>
    3536:	e09f      	b.n	3678 <__ieee754_pow+0x214>
    3538:	4b49      	ldr	r3, [pc, #292]	; (3660 <__ieee754_pow+0x1fc>)
    353a:	429f      	cmp	r7, r3
    353c:	dc01      	bgt.n	3542 <__ieee754_pow+0xde>
    353e:	f000 fbce 	bl	3cde <__ieee754_pow+0x87a>
    3542:	4b48      	ldr	r3, [pc, #288]	; (3664 <__ieee754_pow+0x200>)
    3544:	429c      	cmp	r4, r3
    3546:	dd79      	ble.n	363c <__ieee754_pow+0x1d8>
    3548:	4653      	mov	r3, sl
    354a:	2b00      	cmp	r3, #0
    354c:	dd79      	ble.n	3642 <__ieee754_pow+0x1de>
    354e:	4a46      	ldr	r2, [pc, #280]	; (3668 <__ieee754_pow+0x204>)
    3550:	4b46      	ldr	r3, [pc, #280]	; (366c <__ieee754_pow+0x208>)
    3552:	0010      	movs	r0, r2
    3554:	0019      	movs	r1, r3
    3556:	f002 f87d 	bl	5654 <__aeabi_dmul>
    355a:	0006      	movs	r6, r0
    355c:	e7cb      	b.n	34f6 <__ieee754_pow+0x92>
    355e:	2c00      	cmp	r4, #0
    3560:	d004      	beq.n	356c <__ieee754_pow+0x108>
    3562:	4a3a      	ldr	r2, [pc, #232]	; (364c <__ieee754_pow+0x1e8>)
    3564:	00ab      	lsls	r3, r5, #2
    3566:	089b      	lsrs	r3, r3, #2
    3568:	4293      	cmp	r3, r2
    356a:	d1da      	bne.n	3522 <__ieee754_pow+0xbe>
    356c:	4653      	mov	r3, sl
    356e:	2b00      	cmp	r3, #0
    3570:	da00      	bge.n	3574 <__ieee754_pow+0x110>
    3572:	e3ad      	b.n	3cd0 <__ieee754_pow+0x86c>
    3574:	464b      	mov	r3, r9
    3576:	2b00      	cmp	r3, #0
    3578:	db0d      	blt.n	3596 <__ieee754_pow+0x132>
    357a:	0006      	movs	r6, r0
    357c:	e7bb      	b.n	34f6 <__ieee754_pow+0x92>
    357e:	4653      	mov	r3, sl
    3580:	0029      	movs	r1, r5
    3582:	2b00      	cmp	r3, #0
    3584:	dab7      	bge.n	34f6 <__ieee754_pow+0x92>
    3586:	0032      	movs	r2, r6
    3588:	002b      	movs	r3, r5
    358a:	2000      	movs	r0, #0
    358c:	492f      	ldr	r1, [pc, #188]	; (364c <__ieee754_pow+0x1e8>)
    358e:	f001 fc3d 	bl	4e0c <__aeabi_ddiv>
    3592:	0006      	movs	r6, r0
    3594:	e7af      	b.n	34f6 <__ieee754_pow+0x92>
    3596:	4b2f      	ldr	r3, [pc, #188]	; (3654 <__ieee754_pow+0x1f0>)
    3598:	469c      	mov	ip, r3
    359a:	465b      	mov	r3, fp
    359c:	4464      	add	r4, ip
    359e:	431c      	orrs	r4, r3
    35a0:	d101      	bne.n	35a6 <__ieee754_pow+0x142>
    35a2:	f000 fc2b 	bl	3dfc <__ieee754_pow+0x998>
    35a6:	465b      	mov	r3, fp
    35a8:	0006      	movs	r6, r0
    35aa:	2b01      	cmp	r3, #1
    35ac:	d1a3      	bne.n	34f6 <__ieee754_pow+0x92>
    35ae:	2380      	movs	r3, #128	; 0x80
    35b0:	061b      	lsls	r3, r3, #24
    35b2:	469c      	mov	ip, r3
    35b4:	4461      	add	r1, ip
    35b6:	e79e      	b.n	34f6 <__ieee754_pow+0x92>
    35b8:	2a00      	cmp	r2, #0
    35ba:	d100      	bne.n	35be <__ieee754_pow+0x15a>
    35bc:	e772      	b.n	34a4 <__ieee754_pow+0x40>
    35be:	e794      	b.n	34ea <__ieee754_pow+0x86>
    35c0:	4b2b      	ldr	r3, [pc, #172]	; (3670 <__ieee754_pow+0x20c>)
    35c2:	429f      	cmp	r7, r3
    35c4:	dc2b      	bgt.n	361e <__ieee754_pow+0x1ba>
    35c6:	4b27      	ldr	r3, [pc, #156]	; (3664 <__ieee754_pow+0x200>)
    35c8:	429f      	cmp	r7, r3
    35ca:	dc00      	bgt.n	35ce <__ieee754_pow+0x16a>
    35cc:	e770      	b.n	34b0 <__ieee754_pow+0x4c>
    35ce:	4929      	ldr	r1, [pc, #164]	; (3674 <__ieee754_pow+0x210>)
    35d0:	153b      	asrs	r3, r7, #20
    35d2:	468c      	mov	ip, r1
    35d4:	4463      	add	r3, ip
    35d6:	2b14      	cmp	r3, #20
    35d8:	dc01      	bgt.n	35de <__ieee754_pow+0x17a>
    35da:	f000 fbf2 	bl	3dc2 <__ieee754_pow+0x95e>
    35de:	2134      	movs	r1, #52	; 0x34
    35e0:	1acb      	subs	r3, r1, r3
    35e2:	9900      	ldr	r1, [sp, #0]
    35e4:	40d9      	lsrs	r1, r3
    35e6:	0008      	movs	r0, r1
    35e8:	4098      	lsls	r0, r3
    35ea:	4282      	cmp	r2, r0
    35ec:	d000      	beq.n	35f0 <__ieee754_pow+0x18c>
    35ee:	e75f      	b.n	34b0 <__ieee754_pow+0x4c>
    35f0:	2301      	movs	r3, #1
    35f2:	4019      	ands	r1, r3
    35f4:	3301      	adds	r3, #1
    35f6:	1a5b      	subs	r3, r3, r1
    35f8:	469b      	mov	fp, r3
    35fa:	e759      	b.n	34b0 <__ieee754_pow+0x4c>
    35fc:	4b15      	ldr	r3, [pc, #84]	; (3654 <__ieee754_pow+0x1f0>)
    35fe:	18e0      	adds	r0, r4, r3
    3600:	4306      	orrs	r6, r0
    3602:	d100      	bne.n	3606 <__ieee754_pow+0x1a2>
    3604:	e775      	b.n	34f2 <__ieee754_pow+0x8e>
    3606:	4b17      	ldr	r3, [pc, #92]	; (3664 <__ieee754_pow+0x200>)
    3608:	429c      	cmp	r4, r3
    360a:	dc00      	bgt.n	360e <__ieee754_pow+0x1aa>
    360c:	e351      	b.n	3cb2 <__ieee754_pow+0x84e>
    360e:	4653      	mov	r3, sl
    3610:	2b00      	cmp	r3, #0
    3612:	db16      	blt.n	3642 <__ieee754_pow+0x1de>
    3614:	9b00      	ldr	r3, [sp, #0]
    3616:	9c01      	ldr	r4, [sp, #4]
    3618:	001e      	movs	r6, r3
    361a:	0021      	movs	r1, r4
    361c:	e76b      	b.n	34f6 <__ieee754_pow+0x92>
    361e:	2302      	movs	r3, #2
    3620:	469b      	mov	fp, r3
    3622:	e745      	b.n	34b0 <__ieee754_pow+0x4c>
    3624:	0032      	movs	r2, r6
    3626:	002b      	movs	r3, r5
    3628:	0030      	movs	r0, r6
    362a:	0029      	movs	r1, r5
    362c:	f002 fa8c 	bl	5b48 <__aeabi_dsub>
    3630:	0002      	movs	r2, r0
    3632:	000b      	movs	r3, r1
    3634:	f001 fbea 	bl	4e0c <__aeabi_ddiv>
    3638:	0006      	movs	r6, r0
    363a:	e75c      	b.n	34f6 <__ieee754_pow+0x92>
    363c:	4653      	mov	r3, sl
    363e:	2b00      	cmp	r3, #0
    3640:	db85      	blt.n	354e <__ieee754_pow+0xea>
    3642:	2600      	movs	r6, #0
    3644:	2100      	movs	r1, #0
    3646:	e756      	b.n	34f6 <__ieee754_pow+0x92>
    3648:	7ff00000 	.word	0x7ff00000
    364c:	3ff00000 	.word	0x3ff00000
    3650:	3fe00000 	.word	0x3fe00000
    3654:	c0100000 	.word	0xc0100000
    3658:	00006608 	.word	0x00006608
    365c:	41e00000 	.word	0x41e00000
    3660:	43f00000 	.word	0x43f00000
    3664:	3fefffff 	.word	0x3fefffff
    3668:	8800759c 	.word	0x8800759c
    366c:	7e37e43c 	.word	0x7e37e43c
    3670:	433fffff 	.word	0x433fffff
    3674:	fffffc01 	.word	0xfffffc01
    3678:	4be8      	ldr	r3, [pc, #928]	; (3a1c <__ieee754_pow+0x5b8>)
    367a:	2200      	movs	r2, #0
    367c:	429c      	cmp	r4, r3
    367e:	dc06      	bgt.n	368e <__ieee754_pow+0x22a>
    3680:	2200      	movs	r2, #0
    3682:	4be7      	ldr	r3, [pc, #924]	; (3a20 <__ieee754_pow+0x5bc>)
    3684:	f001 ffe6 	bl	5654 <__aeabi_dmul>
    3688:	2235      	movs	r2, #53	; 0x35
    368a:	000c      	movs	r4, r1
    368c:	4252      	negs	r2, r2
    368e:	4de5      	ldr	r5, [pc, #916]	; (3a24 <__ieee754_pow+0x5c0>)
    3690:	1523      	asrs	r3, r4, #20
    3692:	46ac      	mov	ip, r5
    3694:	4463      	add	r3, ip
    3696:	4699      	mov	r9, r3
    3698:	0324      	lsls	r4, r4, #12
    369a:	4de3      	ldr	r5, [pc, #908]	; (3a28 <__ieee754_pow+0x5c4>)
    369c:	4be3      	ldr	r3, [pc, #908]	; (3a2c <__ieee754_pow+0x5c8>)
    369e:	0b24      	lsrs	r4, r4, #12
    36a0:	4491      	add	r9, r2
    36a2:	4325      	orrs	r5, r4
    36a4:	429c      	cmp	r4, r3
    36a6:	dd09      	ble.n	36bc <__ieee754_pow+0x258>
    36a8:	4be1      	ldr	r3, [pc, #900]	; (3a30 <__ieee754_pow+0x5cc>)
    36aa:	429c      	cmp	r4, r3
    36ac:	dc00      	bgt.n	36b0 <__ieee754_pow+0x24c>
    36ae:	e3a9      	b.n	3e04 <__ieee754_pow+0x9a0>
    36b0:	2301      	movs	r3, #1
    36b2:	469c      	mov	ip, r3
    36b4:	4bdf      	ldr	r3, [pc, #892]	; (3a34 <__ieee754_pow+0x5d0>)
    36b6:	44e1      	add	r9, ip
    36b8:	469c      	mov	ip, r3
    36ba:	4465      	add	r5, ip
    36bc:	2300      	movs	r3, #0
    36be:	2400      	movs	r4, #0
    36c0:	2200      	movs	r2, #0
    36c2:	9308      	str	r3, [sp, #32]
    36c4:	9409      	str	r4, [sp, #36]	; 0x24
    36c6:	930c      	str	r3, [sp, #48]	; 0x30
    36c8:	940d      	str	r4, [sp, #52]	; 0x34
    36ca:	2400      	movs	r4, #0
    36cc:	4bd6      	ldr	r3, [pc, #856]	; (3a28 <__ieee754_pow+0x5c4>)
    36ce:	9206      	str	r2, [sp, #24]
    36d0:	9307      	str	r3, [sp, #28]
    36d2:	9a06      	ldr	r2, [sp, #24]
    36d4:	9b07      	ldr	r3, [sp, #28]
    36d6:	0029      	movs	r1, r5
    36d8:	900a      	str	r0, [sp, #40]	; 0x28
    36da:	910b      	str	r1, [sp, #44]	; 0x2c
    36dc:	f002 fa34 	bl	5b48 <__aeabi_dsub>
    36e0:	9a06      	ldr	r2, [sp, #24]
    36e2:	9b07      	ldr	r3, [sp, #28]
    36e4:	0006      	movs	r6, r0
    36e6:	000f      	movs	r7, r1
    36e8:	980a      	ldr	r0, [sp, #40]	; 0x28
    36ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
    36ec:	f001 f862 	bl	47b4 <__aeabi_dadd>
    36f0:	0002      	movs	r2, r0
    36f2:	000b      	movs	r3, r1
    36f4:	2000      	movs	r0, #0
    36f6:	49cc      	ldr	r1, [pc, #816]	; (3a28 <__ieee754_pow+0x5c4>)
    36f8:	f001 fb88 	bl	4e0c <__aeabi_ddiv>
    36fc:	000a      	movs	r2, r1
    36fe:	0001      	movs	r1, r0
    3700:	0013      	movs	r3, r2
    3702:	910e      	str	r1, [sp, #56]	; 0x38
    3704:	920f      	str	r2, [sp, #60]	; 0x3c
    3706:	0002      	movs	r2, r0
    3708:	0039      	movs	r1, r7
    370a:	0030      	movs	r0, r6
    370c:	f001 ffa2 	bl	5654 <__aeabi_dmul>
    3710:	000a      	movs	r2, r1
    3712:	0001      	movs	r1, r0
    3714:	2080      	movs	r0, #128	; 0x80
    3716:	9104      	str	r1, [sp, #16]
    3718:	9205      	str	r2, [sp, #20]
    371a:	0013      	movs	r3, r2
    371c:	2200      	movs	r2, #0
    371e:	2180      	movs	r1, #128	; 0x80
    3720:	0300      	lsls	r0, r0, #12
    3722:	4684      	mov	ip, r0
    3724:	9202      	str	r2, [sp, #8]
    3726:	9303      	str	r3, [sp, #12]
    3728:	2200      	movs	r2, #0
    372a:	0589      	lsls	r1, r1, #22
    372c:	106d      	asrs	r5, r5, #1
    372e:	430d      	orrs	r5, r1
    3730:	4465      	add	r5, ip
    3732:	192b      	adds	r3, r5, r4
    3734:	9802      	ldr	r0, [sp, #8]
    3736:	9903      	ldr	r1, [sp, #12]
    3738:	0014      	movs	r4, r2
    373a:	001d      	movs	r5, r3
    373c:	f001 ff8a 	bl	5654 <__aeabi_dmul>
    3740:	0002      	movs	r2, r0
    3742:	000b      	movs	r3, r1
    3744:	0030      	movs	r0, r6
    3746:	0039      	movs	r1, r7
    3748:	f002 f9fe 	bl	5b48 <__aeabi_dsub>
    374c:	9a06      	ldr	r2, [sp, #24]
    374e:	9b07      	ldr	r3, [sp, #28]
    3750:	0006      	movs	r6, r0
    3752:	000f      	movs	r7, r1
    3754:	0020      	movs	r0, r4
    3756:	0029      	movs	r1, r5
    3758:	f002 f9f6 	bl	5b48 <__aeabi_dsub>
    375c:	0002      	movs	r2, r0
    375e:	000b      	movs	r3, r1
    3760:	980a      	ldr	r0, [sp, #40]	; 0x28
    3762:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3764:	f002 f9f0 	bl	5b48 <__aeabi_dsub>
    3768:	9a02      	ldr	r2, [sp, #8]
    376a:	9b03      	ldr	r3, [sp, #12]
    376c:	f001 ff72 	bl	5654 <__aeabi_dmul>
    3770:	0002      	movs	r2, r0
    3772:	000b      	movs	r3, r1
    3774:	0030      	movs	r0, r6
    3776:	0039      	movs	r1, r7
    3778:	f002 f9e6 	bl	5b48 <__aeabi_dsub>
    377c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    377e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3780:	f001 ff68 	bl	5654 <__aeabi_dmul>
    3784:	9d04      	ldr	r5, [sp, #16]
    3786:	9e05      	ldr	r6, [sp, #20]
    3788:	9006      	str	r0, [sp, #24]
    378a:	9107      	str	r1, [sp, #28]
    378c:	002a      	movs	r2, r5
    378e:	0033      	movs	r3, r6
    3790:	0028      	movs	r0, r5
    3792:	0031      	movs	r1, r6
    3794:	f001 ff5e 	bl	5654 <__aeabi_dmul>
    3798:	0006      	movs	r6, r0
    379a:	000f      	movs	r7, r1
    379c:	4aa6      	ldr	r2, [pc, #664]	; (3a38 <__ieee754_pow+0x5d4>)
    379e:	4ba7      	ldr	r3, [pc, #668]	; (3a3c <__ieee754_pow+0x5d8>)
    37a0:	f001 ff58 	bl	5654 <__aeabi_dmul>
    37a4:	4aa6      	ldr	r2, [pc, #664]	; (3a40 <__ieee754_pow+0x5dc>)
    37a6:	4ba7      	ldr	r3, [pc, #668]	; (3a44 <__ieee754_pow+0x5e0>)
    37a8:	f001 f804 	bl	47b4 <__aeabi_dadd>
    37ac:	0032      	movs	r2, r6
    37ae:	003b      	movs	r3, r7
    37b0:	f001 ff50 	bl	5654 <__aeabi_dmul>
    37b4:	4aa4      	ldr	r2, [pc, #656]	; (3a48 <__ieee754_pow+0x5e4>)
    37b6:	4ba5      	ldr	r3, [pc, #660]	; (3a4c <__ieee754_pow+0x5e8>)
    37b8:	f000 fffc 	bl	47b4 <__aeabi_dadd>
    37bc:	0032      	movs	r2, r6
    37be:	003b      	movs	r3, r7
    37c0:	f001 ff48 	bl	5654 <__aeabi_dmul>
    37c4:	4aa2      	ldr	r2, [pc, #648]	; (3a50 <__ieee754_pow+0x5ec>)
    37c6:	4ba3      	ldr	r3, [pc, #652]	; (3a54 <__ieee754_pow+0x5f0>)
    37c8:	f000 fff4 	bl	47b4 <__aeabi_dadd>
    37cc:	0032      	movs	r2, r6
    37ce:	003b      	movs	r3, r7
    37d0:	f001 ff40 	bl	5654 <__aeabi_dmul>
    37d4:	4aa0      	ldr	r2, [pc, #640]	; (3a58 <__ieee754_pow+0x5f4>)
    37d6:	4ba1      	ldr	r3, [pc, #644]	; (3a5c <__ieee754_pow+0x5f8>)
    37d8:	f000 ffec 	bl	47b4 <__aeabi_dadd>
    37dc:	0032      	movs	r2, r6
    37de:	003b      	movs	r3, r7
    37e0:	f001 ff38 	bl	5654 <__aeabi_dmul>
    37e4:	4a9e      	ldr	r2, [pc, #632]	; (3a60 <__ieee754_pow+0x5fc>)
    37e6:	4b9f      	ldr	r3, [pc, #636]	; (3a64 <__ieee754_pow+0x600>)
    37e8:	f000 ffe4 	bl	47b4 <__aeabi_dadd>
    37ec:	0032      	movs	r2, r6
    37ee:	0004      	movs	r4, r0
    37f0:	000d      	movs	r5, r1
    37f2:	003b      	movs	r3, r7
    37f4:	0030      	movs	r0, r6
    37f6:	0039      	movs	r1, r7
    37f8:	f001 ff2c 	bl	5654 <__aeabi_dmul>
    37fc:	0002      	movs	r2, r0
    37fe:	000b      	movs	r3, r1
    3800:	0020      	movs	r0, r4
    3802:	0029      	movs	r1, r5
    3804:	f001 ff26 	bl	5654 <__aeabi_dmul>
    3808:	9e02      	ldr	r6, [sp, #8]
    380a:	9f03      	ldr	r7, [sp, #12]
    380c:	0004      	movs	r4, r0
    380e:	000d      	movs	r5, r1
    3810:	9804      	ldr	r0, [sp, #16]
    3812:	9905      	ldr	r1, [sp, #20]
    3814:	0032      	movs	r2, r6
    3816:	003b      	movs	r3, r7
    3818:	f000 ffcc 	bl	47b4 <__aeabi_dadd>
    381c:	9a06      	ldr	r2, [sp, #24]
    381e:	9b07      	ldr	r3, [sp, #28]
    3820:	f001 ff18 	bl	5654 <__aeabi_dmul>
    3824:	0022      	movs	r2, r4
    3826:	002b      	movs	r3, r5
    3828:	f000 ffc4 	bl	47b4 <__aeabi_dadd>
    382c:	0032      	movs	r2, r6
    382e:	900a      	str	r0, [sp, #40]	; 0x28
    3830:	910b      	str	r1, [sp, #44]	; 0x2c
    3832:	003b      	movs	r3, r7
    3834:	0030      	movs	r0, r6
    3836:	0039      	movs	r1, r7
    3838:	9602      	str	r6, [sp, #8]
    383a:	9703      	str	r7, [sp, #12]
    383c:	f001 ff0a 	bl	5654 <__aeabi_dmul>
    3840:	2200      	movs	r2, #0
    3842:	4b89      	ldr	r3, [pc, #548]	; (3a68 <__ieee754_pow+0x604>)
    3844:	0004      	movs	r4, r0
    3846:	000d      	movs	r5, r1
    3848:	f000 ffb4 	bl	47b4 <__aeabi_dadd>
    384c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    384e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3850:	f000 ffb0 	bl	47b4 <__aeabi_dadd>
    3854:	2600      	movs	r6, #0
    3856:	000f      	movs	r7, r1
    3858:	0032      	movs	r2, r6
    385a:	000b      	movs	r3, r1
    385c:	9802      	ldr	r0, [sp, #8]
    385e:	9903      	ldr	r1, [sp, #12]
    3860:	f001 fef8 	bl	5654 <__aeabi_dmul>
    3864:	2200      	movs	r2, #0
    3866:	9002      	str	r0, [sp, #8]
    3868:	9103      	str	r1, [sp, #12]
    386a:	4b7f      	ldr	r3, [pc, #508]	; (3a68 <__ieee754_pow+0x604>)
    386c:	0030      	movs	r0, r6
    386e:	0039      	movs	r1, r7
    3870:	f002 f96a 	bl	5b48 <__aeabi_dsub>
    3874:	0022      	movs	r2, r4
    3876:	002b      	movs	r3, r5
    3878:	f002 f966 	bl	5b48 <__aeabi_dsub>
    387c:	0002      	movs	r2, r0
    387e:	000b      	movs	r3, r1
    3880:	980a      	ldr	r0, [sp, #40]	; 0x28
    3882:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3884:	f002 f960 	bl	5b48 <__aeabi_dsub>
    3888:	9a04      	ldr	r2, [sp, #16]
    388a:	9b05      	ldr	r3, [sp, #20]
    388c:	f001 fee2 	bl	5654 <__aeabi_dmul>
    3890:	0032      	movs	r2, r6
    3892:	0004      	movs	r4, r0
    3894:	000d      	movs	r5, r1
    3896:	9806      	ldr	r0, [sp, #24]
    3898:	9907      	ldr	r1, [sp, #28]
    389a:	003b      	movs	r3, r7
    389c:	f001 feda 	bl	5654 <__aeabi_dmul>
    38a0:	0002      	movs	r2, r0
    38a2:	000b      	movs	r3, r1
    38a4:	0020      	movs	r0, r4
    38a6:	0029      	movs	r1, r5
    38a8:	f000 ff84 	bl	47b4 <__aeabi_dadd>
    38ac:	0004      	movs	r4, r0
    38ae:	000d      	movs	r5, r1
    38b0:	0002      	movs	r2, r0
    38b2:	000b      	movs	r3, r1
    38b4:	9802      	ldr	r0, [sp, #8]
    38b6:	9903      	ldr	r1, [sp, #12]
    38b8:	f000 ff7c 	bl	47b4 <__aeabi_dadd>
    38bc:	2600      	movs	r6, #0
    38be:	22e0      	movs	r2, #224	; 0xe0
    38c0:	4b6a      	ldr	r3, [pc, #424]	; (3a6c <__ieee754_pow+0x608>)
    38c2:	0612      	lsls	r2, r2, #24
    38c4:	0030      	movs	r0, r6
    38c6:	000f      	movs	r7, r1
    38c8:	f001 fec4 	bl	5654 <__aeabi_dmul>
    38cc:	9a02      	ldr	r2, [sp, #8]
    38ce:	9b03      	ldr	r3, [sp, #12]
    38d0:	9004      	str	r0, [sp, #16]
    38d2:	9105      	str	r1, [sp, #20]
    38d4:	0030      	movs	r0, r6
    38d6:	0039      	movs	r1, r7
    38d8:	f002 f936 	bl	5b48 <__aeabi_dsub>
    38dc:	0002      	movs	r2, r0
    38de:	000b      	movs	r3, r1
    38e0:	0020      	movs	r0, r4
    38e2:	0029      	movs	r1, r5
    38e4:	f002 f930 	bl	5b48 <__aeabi_dsub>
    38e8:	4a61      	ldr	r2, [pc, #388]	; (3a70 <__ieee754_pow+0x60c>)
    38ea:	4b60      	ldr	r3, [pc, #384]	; (3a6c <__ieee754_pow+0x608>)
    38ec:	f001 feb2 	bl	5654 <__aeabi_dmul>
    38f0:	4a60      	ldr	r2, [pc, #384]	; (3a74 <__ieee754_pow+0x610>)
    38f2:	0004      	movs	r4, r0
    38f4:	000d      	movs	r5, r1
    38f6:	4b60      	ldr	r3, [pc, #384]	; (3a78 <__ieee754_pow+0x614>)
    38f8:	0030      	movs	r0, r6
    38fa:	0039      	movs	r1, r7
    38fc:	f001 feaa 	bl	5654 <__aeabi_dmul>
    3900:	0002      	movs	r2, r0
    3902:	000b      	movs	r3, r1
    3904:	0020      	movs	r0, r4
    3906:	0029      	movs	r1, r5
    3908:	f000 ff54 	bl	47b4 <__aeabi_dadd>
    390c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    390e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3910:	f000 ff50 	bl	47b4 <__aeabi_dadd>
    3914:	0006      	movs	r6, r0
    3916:	4648      	mov	r0, r9
    3918:	000f      	movs	r7, r1
    391a:	f002 fcbf 	bl	629c <__aeabi_i2d>
    391e:	0004      	movs	r4, r0
    3920:	000d      	movs	r5, r1
    3922:	9804      	ldr	r0, [sp, #16]
    3924:	9905      	ldr	r1, [sp, #20]
    3926:	0032      	movs	r2, r6
    3928:	003b      	movs	r3, r7
    392a:	f000 ff43 	bl	47b4 <__aeabi_dadd>
    392e:	9a08      	ldr	r2, [sp, #32]
    3930:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3932:	f000 ff3f 	bl	47b4 <__aeabi_dadd>
    3936:	0022      	movs	r2, r4
    3938:	002b      	movs	r3, r5
    393a:	f000 ff3b 	bl	47b4 <__aeabi_dadd>
    393e:	2000      	movs	r0, #0
    3940:	0022      	movs	r2, r4
    3942:	002b      	movs	r3, r5
    3944:	9002      	str	r0, [sp, #8]
    3946:	9103      	str	r1, [sp, #12]
    3948:	f002 f8fe 	bl	5b48 <__aeabi_dsub>
    394c:	9a08      	ldr	r2, [sp, #32]
    394e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3950:	f002 f8fa 	bl	5b48 <__aeabi_dsub>
    3954:	9a04      	ldr	r2, [sp, #16]
    3956:	9b05      	ldr	r3, [sp, #20]
    3958:	f002 f8f6 	bl	5b48 <__aeabi_dsub>
    395c:	0002      	movs	r2, r0
    395e:	000b      	movs	r3, r1
    3960:	0030      	movs	r0, r6
    3962:	0039      	movs	r1, r7
    3964:	f002 f8f0 	bl	5b48 <__aeabi_dsub>
    3968:	9004      	str	r0, [sp, #16]
    396a:	9105      	str	r1, [sp, #20]
    396c:	465b      	mov	r3, fp
    396e:	4642      	mov	r2, r8
    3970:	3b01      	subs	r3, #1
    3972:	4313      	orrs	r3, r2
    3974:	d100      	bne.n	3978 <__ieee754_pow+0x514>
    3976:	e197      	b.n	3ca8 <__ieee754_pow+0x844>
    3978:	2300      	movs	r3, #0
    397a:	4c2b      	ldr	r4, [pc, #172]	; (3a28 <__ieee754_pow+0x5c4>)
    397c:	9306      	str	r3, [sp, #24]
    397e:	9407      	str	r4, [sp, #28]
    3980:	9800      	ldr	r0, [sp, #0]
    3982:	9901      	ldr	r1, [sp, #4]
    3984:	2600      	movs	r6, #0
    3986:	000b      	movs	r3, r1
    3988:	0032      	movs	r2, r6
    398a:	000f      	movs	r7, r1
    398c:	f002 f8dc 	bl	5b48 <__aeabi_dsub>
    3990:	9a02      	ldr	r2, [sp, #8]
    3992:	9b03      	ldr	r3, [sp, #12]
    3994:	f001 fe5e 	bl	5654 <__aeabi_dmul>
    3998:	9a00      	ldr	r2, [sp, #0]
    399a:	9b01      	ldr	r3, [sp, #4]
    399c:	0004      	movs	r4, r0
    399e:	000d      	movs	r5, r1
    39a0:	9804      	ldr	r0, [sp, #16]
    39a2:	9905      	ldr	r1, [sp, #20]
    39a4:	f001 fe56 	bl	5654 <__aeabi_dmul>
    39a8:	0002      	movs	r2, r0
    39aa:	000b      	movs	r3, r1
    39ac:	0020      	movs	r0, r4
    39ae:	0029      	movs	r1, r5
    39b0:	f000 ff00 	bl	47b4 <__aeabi_dadd>
    39b4:	0004      	movs	r4, r0
    39b6:	000d      	movs	r5, r1
    39b8:	9802      	ldr	r0, [sp, #8]
    39ba:	9903      	ldr	r1, [sp, #12]
    39bc:	003b      	movs	r3, r7
    39be:	0032      	movs	r2, r6
    39c0:	9404      	str	r4, [sp, #16]
    39c2:	9505      	str	r5, [sp, #20]
    39c4:	f001 fe46 	bl	5654 <__aeabi_dmul>
    39c8:	9000      	str	r0, [sp, #0]
    39ca:	9101      	str	r1, [sp, #4]
    39cc:	000b      	movs	r3, r1
    39ce:	0002      	movs	r2, r0
    39d0:	0029      	movs	r1, r5
    39d2:	0020      	movs	r0, r4
    39d4:	f000 feee 	bl	47b4 <__aeabi_dadd>
    39d8:	4b28      	ldr	r3, [pc, #160]	; (3a7c <__ieee754_pow+0x618>)
    39da:	4681      	mov	r9, r0
    39dc:	1e0f      	subs	r7, r1, #0
    39de:	468a      	mov	sl, r1
    39e0:	429f      	cmp	r7, r3
    39e2:	dc00      	bgt.n	39e6 <__ieee754_pow+0x582>
    39e4:	e13c      	b.n	3c60 <__ieee754_pow+0x7fc>
    39e6:	4b26      	ldr	r3, [pc, #152]	; (3a80 <__ieee754_pow+0x61c>)
    39e8:	18cb      	adds	r3, r1, r3
    39ea:	4303      	orrs	r3, r0
    39ec:	d000      	beq.n	39f0 <__ieee754_pow+0x58c>
    39ee:	e1db      	b.n	3da8 <__ieee754_pow+0x944>
    39f0:	9804      	ldr	r0, [sp, #16]
    39f2:	9905      	ldr	r1, [sp, #20]
    39f4:	4a23      	ldr	r2, [pc, #140]	; (3a84 <__ieee754_pow+0x620>)
    39f6:	4b24      	ldr	r3, [pc, #144]	; (3a88 <__ieee754_pow+0x624>)
    39f8:	f000 fedc 	bl	47b4 <__aeabi_dadd>
    39fc:	9a00      	ldr	r2, [sp, #0]
    39fe:	9b01      	ldr	r3, [sp, #4]
    3a00:	0004      	movs	r4, r0
    3a02:	000d      	movs	r5, r1
    3a04:	4648      	mov	r0, r9
    3a06:	0039      	movs	r1, r7
    3a08:	f002 f89e 	bl	5b48 <__aeabi_dsub>
    3a0c:	0002      	movs	r2, r0
    3a0e:	000b      	movs	r3, r1
    3a10:	0020      	movs	r0, r4
    3a12:	0029      	movs	r1, r5
    3a14:	f000 fd3a 	bl	448c <__aeabi_dcmpgt>
    3a18:	003e      	movs	r6, r7
    3a1a:	e037      	b.n	3a8c <__ieee754_pow+0x628>
    3a1c:	000fffff 	.word	0x000fffff
    3a20:	43400000 	.word	0x43400000
    3a24:	fffffc01 	.word	0xfffffc01
    3a28:	3ff00000 	.word	0x3ff00000
    3a2c:	0003988e 	.word	0x0003988e
    3a30:	000bb679 	.word	0x000bb679
    3a34:	fff00000 	.word	0xfff00000
    3a38:	4a454eef 	.word	0x4a454eef
    3a3c:	3fca7e28 	.word	0x3fca7e28
    3a40:	93c9db65 	.word	0x93c9db65
    3a44:	3fcd864a 	.word	0x3fcd864a
    3a48:	a91d4101 	.word	0xa91d4101
    3a4c:	3fd17460 	.word	0x3fd17460
    3a50:	518f264d 	.word	0x518f264d
    3a54:	3fd55555 	.word	0x3fd55555
    3a58:	db6fabff 	.word	0xdb6fabff
    3a5c:	3fdb6db6 	.word	0x3fdb6db6
    3a60:	33333303 	.word	0x33333303
    3a64:	3fe33333 	.word	0x3fe33333
    3a68:	40080000 	.word	0x40080000
    3a6c:	3feec709 	.word	0x3feec709
    3a70:	dc3a03fd 	.word	0xdc3a03fd
    3a74:	145b01f5 	.word	0x145b01f5
    3a78:	be3e2fe0 	.word	0xbe3e2fe0
    3a7c:	408fffff 	.word	0x408fffff
    3a80:	bf700000 	.word	0xbf700000
    3a84:	652b82fe 	.word	0x652b82fe
    3a88:	3c971547 	.word	0x3c971547
    3a8c:	2800      	cmp	r0, #0
    3a8e:	d000      	beq.n	3a92 <__ieee754_pow+0x62e>
    3a90:	e18a      	b.n	3da8 <__ieee754_pow+0x944>
    3a92:	2280      	movs	r2, #128	; 0x80
    3a94:	4be7      	ldr	r3, [pc, #924]	; (3e34 <__ieee754_pow+0x9d0>)
    3a96:	0352      	lsls	r2, r2, #13
    3a98:	469c      	mov	ip, r3
    3a9a:	0013      	movs	r3, r2
    3a9c:	1536      	asrs	r6, r6, #20
    3a9e:	4466      	add	r6, ip
    3aa0:	4133      	asrs	r3, r6
    3aa2:	49e5      	ldr	r1, [pc, #916]	; (3e38 <__ieee754_pow+0x9d4>)
    3aa4:	19db      	adds	r3, r3, r7
    3aa6:	005e      	lsls	r6, r3, #1
    3aa8:	001c      	movs	r4, r3
    3aaa:	031b      	lsls	r3, r3, #12
    3aac:	468c      	mov	ip, r1
    3aae:	0b1b      	lsrs	r3, r3, #12
    3ab0:	4313      	orrs	r3, r2
    3ab2:	2214      	movs	r2, #20
    3ab4:	0d76      	lsrs	r6, r6, #21
    3ab6:	4fe1      	ldr	r7, [pc, #900]	; (3e3c <__ieee754_pow+0x9d8>)
    3ab8:	4466      	add	r6, ip
    3aba:	4137      	asrs	r7, r6
    3abc:	1b96      	subs	r6, r2, r6
    3abe:	4133      	asrs	r3, r6
    3ac0:	4698      	mov	r8, r3
    3ac2:	4653      	mov	r3, sl
    3ac4:	43bc      	bics	r4, r7
    3ac6:	2000      	movs	r0, #0
    3ac8:	0021      	movs	r1, r4
    3aca:	2b00      	cmp	r3, #0
    3acc:	da00      	bge.n	3ad0 <__ieee754_pow+0x66c>
    3ace:	e1a9      	b.n	3e24 <__ieee754_pow+0x9c0>
    3ad0:	0002      	movs	r2, r0
    3ad2:	000b      	movs	r3, r1
    3ad4:	9800      	ldr	r0, [sp, #0]
    3ad6:	9901      	ldr	r1, [sp, #4]
    3ad8:	f002 f836 	bl	5b48 <__aeabi_dsub>
    3adc:	000b      	movs	r3, r1
    3ade:	9000      	str	r0, [sp, #0]
    3ae0:	9101      	str	r1, [sp, #4]
    3ae2:	0002      	movs	r2, r0
    3ae4:	9804      	ldr	r0, [sp, #16]
    3ae6:	9905      	ldr	r1, [sp, #20]
    3ae8:	f000 fe64 	bl	47b4 <__aeabi_dadd>
    3aec:	4643      	mov	r3, r8
    3aee:	051b      	lsls	r3, r3, #20
    3af0:	4699      	mov	r9, r3
    3af2:	2000      	movs	r0, #0
    3af4:	2200      	movs	r2, #0
    3af6:	4bd2      	ldr	r3, [pc, #840]	; (3e40 <__ieee754_pow+0x9dc>)
    3af8:	0006      	movs	r6, r0
    3afa:	000f      	movs	r7, r1
    3afc:	f001 fdaa 	bl	5654 <__aeabi_dmul>
    3b00:	9a00      	ldr	r2, [sp, #0]
    3b02:	9b01      	ldr	r3, [sp, #4]
    3b04:	9002      	str	r0, [sp, #8]
    3b06:	9103      	str	r1, [sp, #12]
    3b08:	0030      	movs	r0, r6
    3b0a:	0039      	movs	r1, r7
    3b0c:	f002 f81c 	bl	5b48 <__aeabi_dsub>
    3b10:	0002      	movs	r2, r0
    3b12:	000b      	movs	r3, r1
    3b14:	9804      	ldr	r0, [sp, #16]
    3b16:	9905      	ldr	r1, [sp, #20]
    3b18:	f002 f816 	bl	5b48 <__aeabi_dsub>
    3b1c:	4ac9      	ldr	r2, [pc, #804]	; (3e44 <__ieee754_pow+0x9e0>)
    3b1e:	4bca      	ldr	r3, [pc, #808]	; (3e48 <__ieee754_pow+0x9e4>)
    3b20:	f001 fd98 	bl	5654 <__aeabi_dmul>
    3b24:	4ac9      	ldr	r2, [pc, #804]	; (3e4c <__ieee754_pow+0x9e8>)
    3b26:	0004      	movs	r4, r0
    3b28:	000d      	movs	r5, r1
    3b2a:	4bc9      	ldr	r3, [pc, #804]	; (3e50 <__ieee754_pow+0x9ec>)
    3b2c:	0030      	movs	r0, r6
    3b2e:	0039      	movs	r1, r7
    3b30:	f001 fd90 	bl	5654 <__aeabi_dmul>
    3b34:	0002      	movs	r2, r0
    3b36:	000b      	movs	r3, r1
    3b38:	0020      	movs	r0, r4
    3b3a:	0029      	movs	r1, r5
    3b3c:	f000 fe3a 	bl	47b4 <__aeabi_dadd>
    3b40:	0004      	movs	r4, r0
    3b42:	000d      	movs	r5, r1
    3b44:	0002      	movs	r2, r0
    3b46:	000b      	movs	r3, r1
    3b48:	9802      	ldr	r0, [sp, #8]
    3b4a:	9903      	ldr	r1, [sp, #12]
    3b4c:	f000 fe32 	bl	47b4 <__aeabi_dadd>
    3b50:	9a02      	ldr	r2, [sp, #8]
    3b52:	9b03      	ldr	r3, [sp, #12]
    3b54:	0006      	movs	r6, r0
    3b56:	000f      	movs	r7, r1
    3b58:	f001 fff6 	bl	5b48 <__aeabi_dsub>
    3b5c:	0002      	movs	r2, r0
    3b5e:	000b      	movs	r3, r1
    3b60:	0020      	movs	r0, r4
    3b62:	0029      	movs	r1, r5
    3b64:	f001 fff0 	bl	5b48 <__aeabi_dsub>
    3b68:	0032      	movs	r2, r6
    3b6a:	9000      	str	r0, [sp, #0]
    3b6c:	9101      	str	r1, [sp, #4]
    3b6e:	003b      	movs	r3, r7
    3b70:	0030      	movs	r0, r6
    3b72:	0039      	movs	r1, r7
    3b74:	f001 fd6e 	bl	5654 <__aeabi_dmul>
    3b78:	0004      	movs	r4, r0
    3b7a:	000d      	movs	r5, r1
    3b7c:	4ab5      	ldr	r2, [pc, #724]	; (3e54 <__ieee754_pow+0x9f0>)
    3b7e:	4bb6      	ldr	r3, [pc, #728]	; (3e58 <__ieee754_pow+0x9f4>)
    3b80:	f001 fd68 	bl	5654 <__aeabi_dmul>
    3b84:	4ab5      	ldr	r2, [pc, #724]	; (3e5c <__ieee754_pow+0x9f8>)
    3b86:	4bb6      	ldr	r3, [pc, #728]	; (3e60 <__ieee754_pow+0x9fc>)
    3b88:	f001 ffde 	bl	5b48 <__aeabi_dsub>
    3b8c:	0022      	movs	r2, r4
    3b8e:	002b      	movs	r3, r5
    3b90:	f001 fd60 	bl	5654 <__aeabi_dmul>
    3b94:	4ab3      	ldr	r2, [pc, #716]	; (3e64 <__ieee754_pow+0xa00>)
    3b96:	4bb4      	ldr	r3, [pc, #720]	; (3e68 <__ieee754_pow+0xa04>)
    3b98:	f000 fe0c 	bl	47b4 <__aeabi_dadd>
    3b9c:	0022      	movs	r2, r4
    3b9e:	002b      	movs	r3, r5
    3ba0:	f001 fd58 	bl	5654 <__aeabi_dmul>
    3ba4:	4ab1      	ldr	r2, [pc, #708]	; (3e6c <__ieee754_pow+0xa08>)
    3ba6:	4bb2      	ldr	r3, [pc, #712]	; (3e70 <__ieee754_pow+0xa0c>)
    3ba8:	f001 ffce 	bl	5b48 <__aeabi_dsub>
    3bac:	0022      	movs	r2, r4
    3bae:	002b      	movs	r3, r5
    3bb0:	f001 fd50 	bl	5654 <__aeabi_dmul>
    3bb4:	4aaf      	ldr	r2, [pc, #700]	; (3e74 <__ieee754_pow+0xa10>)
    3bb6:	4bb0      	ldr	r3, [pc, #704]	; (3e78 <__ieee754_pow+0xa14>)
    3bb8:	f000 fdfc 	bl	47b4 <__aeabi_dadd>
    3bbc:	0022      	movs	r2, r4
    3bbe:	002b      	movs	r3, r5
    3bc0:	f001 fd48 	bl	5654 <__aeabi_dmul>
    3bc4:	0002      	movs	r2, r0
    3bc6:	000b      	movs	r3, r1
    3bc8:	0030      	movs	r0, r6
    3bca:	0039      	movs	r1, r7
    3bcc:	f001 ffbc 	bl	5b48 <__aeabi_dsub>
    3bd0:	0004      	movs	r4, r0
    3bd2:	000d      	movs	r5, r1
    3bd4:	0002      	movs	r2, r0
    3bd6:	000b      	movs	r3, r1
    3bd8:	0030      	movs	r0, r6
    3bda:	0039      	movs	r1, r7
    3bdc:	f001 fd3a 	bl	5654 <__aeabi_dmul>
    3be0:	2380      	movs	r3, #128	; 0x80
    3be2:	9002      	str	r0, [sp, #8]
    3be4:	9103      	str	r1, [sp, #12]
    3be6:	2200      	movs	r2, #0
    3be8:	05db      	lsls	r3, r3, #23
    3bea:	0020      	movs	r0, r4
    3bec:	0029      	movs	r1, r5
    3bee:	f001 ffab 	bl	5b48 <__aeabi_dsub>
    3bf2:	0002      	movs	r2, r0
    3bf4:	000b      	movs	r3, r1
    3bf6:	9802      	ldr	r0, [sp, #8]
    3bf8:	9903      	ldr	r1, [sp, #12]
    3bfa:	f001 f907 	bl	4e0c <__aeabi_ddiv>
    3bfe:	9a00      	ldr	r2, [sp, #0]
    3c00:	9b01      	ldr	r3, [sp, #4]
    3c02:	0004      	movs	r4, r0
    3c04:	000d      	movs	r5, r1
    3c06:	0030      	movs	r0, r6
    3c08:	0039      	movs	r1, r7
    3c0a:	f001 fd23 	bl	5654 <__aeabi_dmul>
    3c0e:	9a00      	ldr	r2, [sp, #0]
    3c10:	9b01      	ldr	r3, [sp, #4]
    3c12:	f000 fdcf 	bl	47b4 <__aeabi_dadd>
    3c16:	0002      	movs	r2, r0
    3c18:	000b      	movs	r3, r1
    3c1a:	0020      	movs	r0, r4
    3c1c:	0029      	movs	r1, r5
    3c1e:	f001 ff93 	bl	5b48 <__aeabi_dsub>
    3c22:	0032      	movs	r2, r6
    3c24:	003b      	movs	r3, r7
    3c26:	f001 ff8f 	bl	5b48 <__aeabi_dsub>
    3c2a:	0002      	movs	r2, r0
    3c2c:	000b      	movs	r3, r1
    3c2e:	2000      	movs	r0, #0
    3c30:	4992      	ldr	r1, [pc, #584]	; (3e7c <__ieee754_pow+0xa18>)
    3c32:	f001 ff89 	bl	5b48 <__aeabi_dsub>
    3c36:	464b      	mov	r3, r9
    3c38:	185b      	adds	r3, r3, r1
    3c3a:	151a      	asrs	r2, r3, #20
    3c3c:	2a00      	cmp	r2, #0
    3c3e:	dc00      	bgt.n	3c42 <__ieee754_pow+0x7de>
    3c40:	e0f4      	b.n	3e2c <__ieee754_pow+0x9c8>
    3c42:	0019      	movs	r1, r3
    3c44:	9a06      	ldr	r2, [sp, #24]
    3c46:	9b07      	ldr	r3, [sp, #28]
    3c48:	f001 fd04 	bl	5654 <__aeabi_dmul>
    3c4c:	0006      	movs	r6, r0
    3c4e:	e452      	b.n	34f6 <__ieee754_pow+0x92>
    3c50:	0032      	movs	r2, r6
    3c52:	0030      	movs	r0, r6
    3c54:	002b      	movs	r3, r5
    3c56:	0029      	movs	r1, r5
    3c58:	f001 fcfc 	bl	5654 <__aeabi_dmul>
    3c5c:	0006      	movs	r6, r0
    3c5e:	e44a      	b.n	34f6 <__ieee754_pow+0x92>
    3c60:	4b87      	ldr	r3, [pc, #540]	; (3e80 <__ieee754_pow+0xa1c>)
    3c62:	004e      	lsls	r6, r1, #1
    3c64:	0876      	lsrs	r6, r6, #1
    3c66:	429e      	cmp	r6, r3
    3c68:	dc00      	bgt.n	3c6c <__ieee754_pow+0x808>
    3c6a:	e0bf      	b.n	3dec <__ieee754_pow+0x988>
    3c6c:	4b85      	ldr	r3, [pc, #532]	; (3e84 <__ieee754_pow+0xa20>)
    3c6e:	18cb      	adds	r3, r1, r3
    3c70:	4303      	orrs	r3, r0
    3c72:	d10c      	bne.n	3c8e <__ieee754_pow+0x82a>
    3c74:	9a00      	ldr	r2, [sp, #0]
    3c76:	9b01      	ldr	r3, [sp, #4]
    3c78:	f001 ff66 	bl	5b48 <__aeabi_dsub>
    3c7c:	0002      	movs	r2, r0
    3c7e:	000b      	movs	r3, r1
    3c80:	9804      	ldr	r0, [sp, #16]
    3c82:	9905      	ldr	r1, [sp, #20]
    3c84:	f000 fbf8 	bl	4478 <__aeabi_dcmple>
    3c88:	2800      	cmp	r0, #0
    3c8a:	d100      	bne.n	3c8e <__ieee754_pow+0x82a>
    3c8c:	e701      	b.n	3a92 <__ieee754_pow+0x62e>
    3c8e:	9806      	ldr	r0, [sp, #24]
    3c90:	9907      	ldr	r1, [sp, #28]
    3c92:	4a7d      	ldr	r2, [pc, #500]	; (3e88 <__ieee754_pow+0xa24>)
    3c94:	4b7d      	ldr	r3, [pc, #500]	; (3e8c <__ieee754_pow+0xa28>)
    3c96:	f001 fcdd 	bl	5654 <__aeabi_dmul>
    3c9a:	4a7b      	ldr	r2, [pc, #492]	; (3e88 <__ieee754_pow+0xa24>)
    3c9c:	4b7b      	ldr	r3, [pc, #492]	; (3e8c <__ieee754_pow+0xa28>)
    3c9e:	f001 fcd9 	bl	5654 <__aeabi_dmul>
    3ca2:	0006      	movs	r6, r0
    3ca4:	f7ff fc27 	bl	34f6 <__ieee754_pow+0x92>
    3ca8:	2300      	movs	r3, #0
    3caa:	4c79      	ldr	r4, [pc, #484]	; (3e90 <__ieee754_pow+0xa2c>)
    3cac:	9306      	str	r3, [sp, #24]
    3cae:	9407      	str	r4, [sp, #28]
    3cb0:	e666      	b.n	3980 <__ieee754_pow+0x51c>
    3cb2:	4653      	mov	r3, sl
    3cb4:	2b00      	cmp	r3, #0
    3cb6:	db00      	blt.n	3cba <__ieee754_pow+0x856>
    3cb8:	e4c3      	b.n	3642 <__ieee754_pow+0x1de>
    3cba:	9b00      	ldr	r3, [sp, #0]
    3cbc:	9c01      	ldr	r4, [sp, #4]
    3cbe:	2280      	movs	r2, #128	; 0x80
    3cc0:	0612      	lsls	r2, r2, #24
    3cc2:	001e      	movs	r6, r3
    3cc4:	4694      	mov	ip, r2
    3cc6:	0023      	movs	r3, r4
    3cc8:	4463      	add	r3, ip
    3cca:	0019      	movs	r1, r3
    3ccc:	f7ff fc13 	bl	34f6 <__ieee754_pow+0x92>
    3cd0:	0002      	movs	r2, r0
    3cd2:	000b      	movs	r3, r1
    3cd4:	2000      	movs	r0, #0
    3cd6:	4969      	ldr	r1, [pc, #420]	; (3e7c <__ieee754_pow+0xa18>)
    3cd8:	f001 f898 	bl	4e0c <__aeabi_ddiv>
    3cdc:	e44a      	b.n	3574 <__ieee754_pow+0x110>
    3cde:	4b6d      	ldr	r3, [pc, #436]	; (3e94 <__ieee754_pow+0xa30>)
    3ce0:	429c      	cmp	r4, r3
    3ce2:	dc00      	bgt.n	3ce6 <__ieee754_pow+0x882>
    3ce4:	e4aa      	b.n	363c <__ieee754_pow+0x1d8>
    3ce6:	4b65      	ldr	r3, [pc, #404]	; (3e7c <__ieee754_pow+0xa18>)
    3ce8:	429c      	cmp	r4, r3
    3cea:	dd01      	ble.n	3cf0 <__ieee754_pow+0x88c>
    3cec:	f7ff fc2c 	bl	3548 <__ieee754_pow+0xe4>
    3cf0:	2200      	movs	r2, #0
    3cf2:	4b62      	ldr	r3, [pc, #392]	; (3e7c <__ieee754_pow+0xa18>)
    3cf4:	f001 ff28 	bl	5b48 <__aeabi_dsub>
    3cf8:	22c0      	movs	r2, #192	; 0xc0
    3cfa:	4b67      	ldr	r3, [pc, #412]	; (3e98 <__ieee754_pow+0xa34>)
    3cfc:	05d2      	lsls	r2, r2, #23
    3cfe:	0004      	movs	r4, r0
    3d00:	000d      	movs	r5, r1
    3d02:	f001 fca7 	bl	5654 <__aeabi_dmul>
    3d06:	4a65      	ldr	r2, [pc, #404]	; (3e9c <__ieee754_pow+0xa38>)
    3d08:	0006      	movs	r6, r0
    3d0a:	000f      	movs	r7, r1
    3d0c:	4b64      	ldr	r3, [pc, #400]	; (3ea0 <__ieee754_pow+0xa3c>)
    3d0e:	0020      	movs	r0, r4
    3d10:	0029      	movs	r1, r5
    3d12:	f001 fc9f 	bl	5654 <__aeabi_dmul>
    3d16:	2200      	movs	r2, #0
    3d18:	9002      	str	r0, [sp, #8]
    3d1a:	9103      	str	r1, [sp, #12]
    3d1c:	4b61      	ldr	r3, [pc, #388]	; (3ea4 <__ieee754_pow+0xa40>)
    3d1e:	0020      	movs	r0, r4
    3d20:	0029      	movs	r1, r5
    3d22:	f001 fc97 	bl	5654 <__aeabi_dmul>
    3d26:	0002      	movs	r2, r0
    3d28:	000b      	movs	r3, r1
    3d2a:	485f      	ldr	r0, [pc, #380]	; (3ea8 <__ieee754_pow+0xa44>)
    3d2c:	495f      	ldr	r1, [pc, #380]	; (3eac <__ieee754_pow+0xa48>)
    3d2e:	f001 ff0b 	bl	5b48 <__aeabi_dsub>
    3d32:	0022      	movs	r2, r4
    3d34:	002b      	movs	r3, r5
    3d36:	f001 fc8d 	bl	5654 <__aeabi_dmul>
    3d3a:	0002      	movs	r2, r0
    3d3c:	000b      	movs	r3, r1
    3d3e:	2000      	movs	r0, #0
    3d40:	495b      	ldr	r1, [pc, #364]	; (3eb0 <__ieee754_pow+0xa4c>)
    3d42:	f001 ff01 	bl	5b48 <__aeabi_dsub>
    3d46:	0022      	movs	r2, r4
    3d48:	9004      	str	r0, [sp, #16]
    3d4a:	9105      	str	r1, [sp, #20]
    3d4c:	002b      	movs	r3, r5
    3d4e:	0020      	movs	r0, r4
    3d50:	0029      	movs	r1, r5
    3d52:	f001 fc7f 	bl	5654 <__aeabi_dmul>
    3d56:	0002      	movs	r2, r0
    3d58:	000b      	movs	r3, r1
    3d5a:	9804      	ldr	r0, [sp, #16]
    3d5c:	9905      	ldr	r1, [sp, #20]
    3d5e:	f001 fc79 	bl	5654 <__aeabi_dmul>
    3d62:	4a54      	ldr	r2, [pc, #336]	; (3eb4 <__ieee754_pow+0xa50>)
    3d64:	4b4c      	ldr	r3, [pc, #304]	; (3e98 <__ieee754_pow+0xa34>)
    3d66:	f001 fc75 	bl	5654 <__aeabi_dmul>
    3d6a:	0002      	movs	r2, r0
    3d6c:	000b      	movs	r3, r1
    3d6e:	9802      	ldr	r0, [sp, #8]
    3d70:	9903      	ldr	r1, [sp, #12]
    3d72:	f001 fee9 	bl	5b48 <__aeabi_dsub>
    3d76:	0002      	movs	r2, r0
    3d78:	000b      	movs	r3, r1
    3d7a:	0004      	movs	r4, r0
    3d7c:	000d      	movs	r5, r1
    3d7e:	0030      	movs	r0, r6
    3d80:	0039      	movs	r1, r7
    3d82:	f000 fd17 	bl	47b4 <__aeabi_dadd>
    3d86:	2200      	movs	r2, #0
    3d88:	0010      	movs	r0, r2
    3d8a:	003b      	movs	r3, r7
    3d8c:	0032      	movs	r2, r6
    3d8e:	9002      	str	r0, [sp, #8]
    3d90:	9103      	str	r1, [sp, #12]
    3d92:	f001 fed9 	bl	5b48 <__aeabi_dsub>
    3d96:	0002      	movs	r2, r0
    3d98:	000b      	movs	r3, r1
    3d9a:	0020      	movs	r0, r4
    3d9c:	0029      	movs	r1, r5
    3d9e:	f001 fed3 	bl	5b48 <__aeabi_dsub>
    3da2:	9004      	str	r0, [sp, #16]
    3da4:	9105      	str	r1, [sp, #20]
    3da6:	e5e1      	b.n	396c <__ieee754_pow+0x508>
    3da8:	4a43      	ldr	r2, [pc, #268]	; (3eb8 <__ieee754_pow+0xa54>)
    3daa:	4b44      	ldr	r3, [pc, #272]	; (3ebc <__ieee754_pow+0xa58>)
    3dac:	9806      	ldr	r0, [sp, #24]
    3dae:	9907      	ldr	r1, [sp, #28]
    3db0:	f001 fc50 	bl	5654 <__aeabi_dmul>
    3db4:	4a40      	ldr	r2, [pc, #256]	; (3eb8 <__ieee754_pow+0xa54>)
    3db6:	4b41      	ldr	r3, [pc, #260]	; (3ebc <__ieee754_pow+0xa58>)
    3db8:	f001 fc4c 	bl	5654 <__aeabi_dmul>
    3dbc:	0006      	movs	r6, r0
    3dbe:	f7ff fb9a 	bl	34f6 <__ieee754_pow+0x92>
    3dc2:	2a00      	cmp	r2, #0
    3dc4:	d001      	beq.n	3dca <__ieee754_pow+0x966>
    3dc6:	f7ff fba5 	bl	3514 <__ieee754_pow+0xb0>
    3dca:	3214      	adds	r2, #20
    3dcc:	1ad3      	subs	r3, r2, r3
    3dce:	003a      	movs	r2, r7
    3dd0:	411a      	asrs	r2, r3
    3dd2:	0011      	movs	r1, r2
    3dd4:	4099      	lsls	r1, r3
    3dd6:	428f      	cmp	r7, r1
    3dd8:	d001      	beq.n	3dde <__ieee754_pow+0x97a>
    3dda:	f7ff fb6f 	bl	34bc <__ieee754_pow+0x58>
    3dde:	2301      	movs	r3, #1
    3de0:	4013      	ands	r3, r2
    3de2:	2202      	movs	r2, #2
    3de4:	1ad3      	subs	r3, r2, r3
    3de6:	469b      	mov	fp, r3
    3de8:	f7ff fb68 	bl	34bc <__ieee754_pow+0x58>
    3dec:	4b30      	ldr	r3, [pc, #192]	; (3eb0 <__ieee754_pow+0xa4c>)
    3dee:	429e      	cmp	r6, r3
    3df0:	dd00      	ble.n	3df4 <__ieee754_pow+0x990>
    3df2:	e64e      	b.n	3a92 <__ieee754_pow+0x62e>
    3df4:	2300      	movs	r3, #0
    3df6:	4699      	mov	r9, r3
    3df8:	4698      	mov	r8, r3
    3dfa:	e67a      	b.n	3af2 <__ieee754_pow+0x68e>
    3dfc:	0002      	movs	r2, r0
    3dfe:	000b      	movs	r3, r1
    3e00:	f7ff fc14 	bl	362c <__ieee754_pow+0x1c8>
    3e04:	2380      	movs	r3, #128	; 0x80
    3e06:	4c2e      	ldr	r4, [pc, #184]	; (3ec0 <__ieee754_pow+0xa5c>)
    3e08:	05db      	lsls	r3, r3, #23
    3e0a:	9308      	str	r3, [sp, #32]
    3e0c:	9409      	str	r4, [sp, #36]	; 0x24
    3e0e:	4b2d      	ldr	r3, [pc, #180]	; (3ec4 <__ieee754_pow+0xa60>)
    3e10:	4c2d      	ldr	r4, [pc, #180]	; (3ec8 <__ieee754_pow+0xa64>)
    3e12:	2200      	movs	r2, #0
    3e14:	930c      	str	r3, [sp, #48]	; 0x30
    3e16:	940d      	str	r4, [sp, #52]	; 0x34
    3e18:	2480      	movs	r4, #128	; 0x80
    3e1a:	4b2c      	ldr	r3, [pc, #176]	; (3ecc <__ieee754_pow+0xa68>)
    3e1c:	02e4      	lsls	r4, r4, #11
    3e1e:	9206      	str	r2, [sp, #24]
    3e20:	9307      	str	r3, [sp, #28]
    3e22:	e456      	b.n	36d2 <__ieee754_pow+0x26e>
    3e24:	4643      	mov	r3, r8
    3e26:	425b      	negs	r3, r3
    3e28:	4698      	mov	r8, r3
    3e2a:	e651      	b.n	3ad0 <__ieee754_pow+0x66c>
    3e2c:	4642      	mov	r2, r8
    3e2e:	f000 f9fd 	bl	422c <scalbn>
    3e32:	e707      	b.n	3c44 <__ieee754_pow+0x7e0>
    3e34:	fffffc02 	.word	0xfffffc02
    3e38:	fffffc01 	.word	0xfffffc01
    3e3c:	000fffff 	.word	0x000fffff
    3e40:	3fe62e43 	.word	0x3fe62e43
    3e44:	fefa39ef 	.word	0xfefa39ef
    3e48:	3fe62e42 	.word	0x3fe62e42
    3e4c:	0ca86c39 	.word	0x0ca86c39
    3e50:	be205c61 	.word	0xbe205c61
    3e54:	72bea4d0 	.word	0x72bea4d0
    3e58:	3e663769 	.word	0x3e663769
    3e5c:	c5d26bf1 	.word	0xc5d26bf1
    3e60:	3ebbbd41 	.word	0x3ebbbd41
    3e64:	af25de2c 	.word	0xaf25de2c
    3e68:	3f11566a 	.word	0x3f11566a
    3e6c:	16bebd93 	.word	0x16bebd93
    3e70:	3f66c16c 	.word	0x3f66c16c
    3e74:	5555553e 	.word	0x5555553e
    3e78:	3fc55555 	.word	0x3fc55555
    3e7c:	3ff00000 	.word	0x3ff00000
    3e80:	4090cbff 	.word	0x4090cbff
    3e84:	3f6f3400 	.word	0x3f6f3400
    3e88:	c2f8f359 	.word	0xc2f8f359
    3e8c:	01a56e1f 	.word	0x01a56e1f
    3e90:	bff00000 	.word	0xbff00000
    3e94:	3feffffe 	.word	0x3feffffe
    3e98:	3ff71547 	.word	0x3ff71547
    3e9c:	f85ddf44 	.word	0xf85ddf44
    3ea0:	3e54ae0b 	.word	0x3e54ae0b
    3ea4:	3fd00000 	.word	0x3fd00000
    3ea8:	55555555 	.word	0x55555555
    3eac:	3fd55555 	.word	0x3fd55555
    3eb0:	3fe00000 	.word	0x3fe00000
    3eb4:	652b82fe 	.word	0x652b82fe
    3eb8:	8800759c 	.word	0x8800759c
    3ebc:	7e37e43c 	.word	0x7e37e43c
    3ec0:	3fe2b803 	.word	0x3fe2b803
    3ec4:	43cfd006 	.word	0x43cfd006
    3ec8:	3e4cfdeb 	.word	0x3e4cfdeb
    3ecc:	3ff80000 	.word	0x3ff80000

00003ed0 <__ieee754_sqrt>:
    3ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ed2:	4656      	mov	r6, sl
    3ed4:	464d      	mov	r5, r9
    3ed6:	4644      	mov	r4, r8
    3ed8:	465f      	mov	r7, fp
    3eda:	4b75      	ldr	r3, [pc, #468]	; (40b0 <__ieee754_sqrt+0x1e0>)
    3edc:	b4f0      	push	{r4, r5, r6, r7}
    3ede:	000a      	movs	r2, r1
    3ee0:	000d      	movs	r5, r1
    3ee2:	0019      	movs	r1, r3
    3ee4:	b083      	sub	sp, #12
    3ee6:	0006      	movs	r6, r0
    3ee8:	0004      	movs	r4, r0
    3eea:	4029      	ands	r1, r5
    3eec:	4299      	cmp	r1, r3
    3eee:	d100      	bne.n	3ef2 <__ieee754_sqrt+0x22>
    3ef0:	e0ba      	b.n	4068 <__ieee754_sqrt+0x198>
    3ef2:	2d00      	cmp	r5, #0
    3ef4:	dc00      	bgt.n	3ef8 <__ieee754_sqrt+0x28>
    3ef6:	e094      	b.n	4022 <__ieee754_sqrt+0x152>
    3ef8:	152d      	asrs	r5, r5, #20
    3efa:	d100      	bne.n	3efe <__ieee754_sqrt+0x2e>
    3efc:	e0a3      	b.n	4046 <__ieee754_sqrt+0x176>
    3efe:	4b6d      	ldr	r3, [pc, #436]	; (40b4 <__ieee754_sqrt+0x1e4>)
    3f00:	0312      	lsls	r2, r2, #12
    3f02:	469c      	mov	ip, r3
    3f04:	2380      	movs	r3, #128	; 0x80
    3f06:	0b12      	lsrs	r2, r2, #12
    3f08:	035b      	lsls	r3, r3, #13
    3f0a:	4465      	add	r5, ip
    3f0c:	431a      	orrs	r2, r3
    3f0e:	07eb      	lsls	r3, r5, #31
    3f10:	d500      	bpl.n	3f14 <__ieee754_sqrt+0x44>
    3f12:	e081      	b.n	4018 <__ieee754_sqrt+0x148>
    3f14:	106b      	asrs	r3, r5, #1
    3f16:	4698      	mov	r8, r3
    3f18:	0fe3      	lsrs	r3, r4, #31
    3f1a:	189b      	adds	r3, r3, r2
    3f1c:	189b      	adds	r3, r3, r2
    3f1e:	2280      	movs	r2, #128	; 0x80
    3f20:	2116      	movs	r1, #22
    3f22:	2600      	movs	r6, #0
    3f24:	2700      	movs	r7, #0
    3f26:	0064      	lsls	r4, r4, #1
    3f28:	0392      	lsls	r2, r2, #14
    3f2a:	18b8      	adds	r0, r7, r2
    3f2c:	4298      	cmp	r0, r3
    3f2e:	dc02      	bgt.n	3f36 <__ieee754_sqrt+0x66>
    3f30:	1887      	adds	r7, r0, r2
    3f32:	1a1b      	subs	r3, r3, r0
    3f34:	18b6      	adds	r6, r6, r2
    3f36:	0fe0      	lsrs	r0, r4, #31
    3f38:	005b      	lsls	r3, r3, #1
    3f3a:	3901      	subs	r1, #1
    3f3c:	181b      	adds	r3, r3, r0
    3f3e:	0064      	lsls	r4, r4, #1
    3f40:	0852      	lsrs	r2, r2, #1
    3f42:	2900      	cmp	r1, #0
    3f44:	d1f1      	bne.n	3f2a <__ieee754_sqrt+0x5a>
    3f46:	2200      	movs	r2, #0
    3f48:	9201      	str	r2, [sp, #4]
    3f4a:	4694      	mov	ip, r2
    3f4c:	2280      	movs	r2, #128	; 0x80
    3f4e:	0612      	lsls	r2, r2, #24
    3f50:	2020      	movs	r0, #32
    3f52:	4691      	mov	r9, r2
    3f54:	e009      	b.n	3f6a <__ieee754_sqrt+0x9a>
    3f56:	429f      	cmp	r7, r3
    3f58:	d041      	beq.n	3fde <__ieee754_sqrt+0x10e>
    3f5a:	0fe1      	lsrs	r1, r4, #31
    3f5c:	18c9      	adds	r1, r1, r3
    3f5e:	3801      	subs	r0, #1
    3f60:	18cb      	adds	r3, r1, r3
    3f62:	0064      	lsls	r4, r4, #1
    3f64:	0852      	lsrs	r2, r2, #1
    3f66:	2800      	cmp	r0, #0
    3f68:	d01e      	beq.n	3fa8 <__ieee754_sqrt+0xd8>
    3f6a:	4661      	mov	r1, ip
    3f6c:	1851      	adds	r1, r2, r1
    3f6e:	429f      	cmp	r7, r3
    3f70:	daf1      	bge.n	3f56 <__ieee754_sqrt+0x86>
    3f72:	188d      	adds	r5, r1, r2
    3f74:	46ac      	mov	ip, r5
    3f76:	0fcd      	lsrs	r5, r1, #31
    3f78:	07ed      	lsls	r5, r5, #31
    3f7a:	46ba      	mov	sl, r7
    3f7c:	454d      	cmp	r5, r9
    3f7e:	d039      	beq.n	3ff4 <__ieee754_sqrt+0x124>
    3f80:	1bdb      	subs	r3, r3, r7
    3f82:	428c      	cmp	r4, r1
    3f84:	41bf      	sbcs	r7, r7
    3f86:	427f      	negs	r7, r7
    3f88:	1bdb      	subs	r3, r3, r7
    3f8a:	1a64      	subs	r4, r4, r1
    3f8c:	9901      	ldr	r1, [sp, #4]
    3f8e:	3801      	subs	r0, #1
    3f90:	468b      	mov	fp, r1
    3f92:	4493      	add	fp, r2
    3f94:	4659      	mov	r1, fp
    3f96:	9101      	str	r1, [sp, #4]
    3f98:	0fe1      	lsrs	r1, r4, #31
    3f9a:	18c9      	adds	r1, r1, r3
    3f9c:	4657      	mov	r7, sl
    3f9e:	18cb      	adds	r3, r1, r3
    3fa0:	0064      	lsls	r4, r4, #1
    3fa2:	0852      	lsrs	r2, r2, #1
    3fa4:	2800      	cmp	r0, #0
    3fa6:	d1e0      	bne.n	3f6a <__ieee754_sqrt+0x9a>
    3fa8:	4323      	orrs	r3, r4
    3faa:	d12b      	bne.n	4004 <__ieee754_sqrt+0x134>
    3fac:	9b01      	ldr	r3, [sp, #4]
    3fae:	085b      	lsrs	r3, r3, #1
    3fb0:	4941      	ldr	r1, [pc, #260]	; (40b8 <__ieee754_sqrt+0x1e8>)
    3fb2:	1072      	asrs	r2, r6, #1
    3fb4:	468c      	mov	ip, r1
    3fb6:	4462      	add	r2, ip
    3fb8:	07f1      	lsls	r1, r6, #31
    3fba:	d502      	bpl.n	3fc2 <__ieee754_sqrt+0xf2>
    3fbc:	2180      	movs	r1, #128	; 0x80
    3fbe:	0609      	lsls	r1, r1, #24
    3fc0:	430b      	orrs	r3, r1
    3fc2:	4641      	mov	r1, r8
    3fc4:	0509      	lsls	r1, r1, #20
    3fc6:	188d      	adds	r5, r1, r2
    3fc8:	001e      	movs	r6, r3
    3fca:	002f      	movs	r7, r5
    3fcc:	0030      	movs	r0, r6
    3fce:	0039      	movs	r1, r7
    3fd0:	b003      	add	sp, #12
    3fd2:	bc3c      	pop	{r2, r3, r4, r5}
    3fd4:	4690      	mov	r8, r2
    3fd6:	4699      	mov	r9, r3
    3fd8:	46a2      	mov	sl, r4
    3fda:	46ab      	mov	fp, r5
    3fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fde:	42a1      	cmp	r1, r4
    3fe0:	d80e      	bhi.n	4000 <__ieee754_sqrt+0x130>
    3fe2:	188d      	adds	r5, r1, r2
    3fe4:	46ac      	mov	ip, r5
    3fe6:	0fcd      	lsrs	r5, r1, #31
    3fe8:	07ed      	lsls	r5, r5, #31
    3fea:	454d      	cmp	r5, r9
    3fec:	d048      	beq.n	4080 <__ieee754_sqrt+0x1b0>
    3fee:	469a      	mov	sl, r3
    3ff0:	2300      	movs	r3, #0
    3ff2:	e7ca      	b.n	3f8a <__ieee754_sqrt+0xba>
    3ff4:	4665      	mov	r5, ip
    3ff6:	2d00      	cmp	r5, #0
    3ff8:	dbc2      	blt.n	3f80 <__ieee754_sqrt+0xb0>
    3ffa:	1c7d      	adds	r5, r7, #1
    3ffc:	46aa      	mov	sl, r5
    3ffe:	e7bf      	b.n	3f80 <__ieee754_sqrt+0xb0>
    4000:	003b      	movs	r3, r7
    4002:	e7aa      	b.n	3f5a <__ieee754_sqrt+0x8a>
    4004:	9b01      	ldr	r3, [sp, #4]
    4006:	3301      	adds	r3, #1
    4008:	d03e      	beq.n	4088 <__ieee754_sqrt+0x1b8>
    400a:	9a01      	ldr	r2, [sp, #4]
    400c:	2301      	movs	r3, #1
    400e:	4694      	mov	ip, r2
    4010:	4013      	ands	r3, r2
    4012:	4463      	add	r3, ip
    4014:	085b      	lsrs	r3, r3, #1
    4016:	e7cb      	b.n	3fb0 <__ieee754_sqrt+0xe0>
    4018:	0fe3      	lsrs	r3, r4, #31
    401a:	0052      	lsls	r2, r2, #1
    401c:	189a      	adds	r2, r3, r2
    401e:	0064      	lsls	r4, r4, #1
    4020:	e778      	b.n	3f14 <__ieee754_sqrt+0x44>
    4022:	006b      	lsls	r3, r5, #1
    4024:	085b      	lsrs	r3, r3, #1
    4026:	4303      	orrs	r3, r0
    4028:	002f      	movs	r7, r5
    402a:	2b00      	cmp	r3, #0
    402c:	d0ce      	beq.n	3fcc <__ieee754_sqrt+0xfc>
    402e:	2500      	movs	r5, #0
    4030:	2a00      	cmp	r2, #0
    4032:	d131      	bne.n	4098 <__ieee754_sqrt+0x1c8>
    4034:	0ae2      	lsrs	r2, r4, #11
    4036:	3d15      	subs	r5, #21
    4038:	0564      	lsls	r4, r4, #21
    403a:	2a00      	cmp	r2, #0
    403c:	d0fa      	beq.n	4034 <__ieee754_sqrt+0x164>
    403e:	2380      	movs	r3, #128	; 0x80
    4040:	035b      	lsls	r3, r3, #13
    4042:	421a      	tst	r2, r3
    4044:	d123      	bne.n	408e <__ieee754_sqrt+0x1be>
    4046:	2080      	movs	r0, #128	; 0x80
    4048:	2300      	movs	r3, #0
    404a:	0340      	lsls	r0, r0, #13
    404c:	e000      	b.n	4050 <__ieee754_sqrt+0x180>
    404e:	000b      	movs	r3, r1
    4050:	0052      	lsls	r2, r2, #1
    4052:	1c59      	adds	r1, r3, #1
    4054:	4202      	tst	r2, r0
    4056:	d0fa      	beq.n	404e <__ieee754_sqrt+0x17e>
    4058:	2020      	movs	r0, #32
    405a:	1a40      	subs	r0, r0, r1
    405c:	1aed      	subs	r5, r5, r3
    405e:	0023      	movs	r3, r4
    4060:	40c3      	lsrs	r3, r0
    4062:	408c      	lsls	r4, r1
    4064:	431a      	orrs	r2, r3
    4066:	e74a      	b.n	3efe <__ieee754_sqrt+0x2e>
    4068:	0002      	movs	r2, r0
    406a:	002b      	movs	r3, r5
    406c:	0029      	movs	r1, r5
    406e:	f001 faf1 	bl	5654 <__aeabi_dmul>
    4072:	0032      	movs	r2, r6
    4074:	002b      	movs	r3, r5
    4076:	f000 fb9d 	bl	47b4 <__aeabi_dadd>
    407a:	0006      	movs	r6, r0
    407c:	000f      	movs	r7, r1
    407e:	e7a5      	b.n	3fcc <__ieee754_sqrt+0xfc>
    4080:	4665      	mov	r5, ip
    4082:	2d00      	cmp	r5, #0
    4084:	dab9      	bge.n	3ffa <__ieee754_sqrt+0x12a>
    4086:	e7b2      	b.n	3fee <__ieee754_sqrt+0x11e>
    4088:	3601      	adds	r6, #1
    408a:	2300      	movs	r3, #0
    408c:	e790      	b.n	3fb0 <__ieee754_sqrt+0xe0>
    408e:	2301      	movs	r3, #1
    4090:	2020      	movs	r0, #32
    4092:	425b      	negs	r3, r3
    4094:	2100      	movs	r1, #0
    4096:	e7e1      	b.n	405c <__ieee754_sqrt+0x18c>
    4098:	003b      	movs	r3, r7
    409a:	0002      	movs	r2, r0
    409c:	0039      	movs	r1, r7
    409e:	f001 fd53 	bl	5b48 <__aeabi_dsub>
    40a2:	0002      	movs	r2, r0
    40a4:	000b      	movs	r3, r1
    40a6:	f000 feb1 	bl	4e0c <__aeabi_ddiv>
    40aa:	0006      	movs	r6, r0
    40ac:	000f      	movs	r7, r1
    40ae:	e78d      	b.n	3fcc <__ieee754_sqrt+0xfc>
    40b0:	7ff00000 	.word	0x7ff00000
    40b4:	fffffc01 	.word	0xfffffc01
    40b8:	3fe00000 	.word	0x3fe00000

000040bc <fabs>:
    40bc:	0049      	lsls	r1, r1, #1
    40be:	084b      	lsrs	r3, r1, #1
    40c0:	0019      	movs	r1, r3
    40c2:	4770      	bx	lr

000040c4 <finite>:
    40c4:	4b03      	ldr	r3, [pc, #12]	; (40d4 <finite+0x10>)
    40c6:	0048      	lsls	r0, r1, #1
    40c8:	469c      	mov	ip, r3
    40ca:	0840      	lsrs	r0, r0, #1
    40cc:	4460      	add	r0, ip
    40ce:	0fc0      	lsrs	r0, r0, #31
    40d0:	4770      	bx	lr
    40d2:	46c0      	nop			; (mov r8, r8)
    40d4:	80100000 	.word	0x80100000

000040d8 <matherr>:
    40d8:	2000      	movs	r0, #0
    40da:	4770      	bx	lr

000040dc <nan>:
    40dc:	2000      	movs	r0, #0
    40de:	4901      	ldr	r1, [pc, #4]	; (40e4 <nan+0x8>)
    40e0:	4770      	bx	lr
    40e2:	46c0      	nop			; (mov r8, r8)
    40e4:	7ff80000 	.word	0x7ff80000

000040e8 <rint>:
    40e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    40ea:	4647      	mov	r7, r8
    40ec:	b480      	push	{r7}
    40ee:	0fcb      	lsrs	r3, r1, #31
    40f0:	4698      	mov	r8, r3
    40f2:	4c4a      	ldr	r4, [pc, #296]	; (421c <rint+0x134>)
    40f4:	004b      	lsls	r3, r1, #1
    40f6:	0d5b      	lsrs	r3, r3, #21
    40f8:	191e      	adds	r6, r3, r4
    40fa:	b082      	sub	sp, #8
    40fc:	0007      	movs	r7, r0
    40fe:	000a      	movs	r2, r1
    4100:	2e13      	cmp	r6, #19
    4102:	dc35      	bgt.n	4170 <rint+0x88>
    4104:	2e00      	cmp	r6, #0
    4106:	db57      	blt.n	41b8 <rint+0xd0>
    4108:	4b45      	ldr	r3, [pc, #276]	; (4220 <rint+0x138>)
    410a:	0004      	movs	r4, r0
    410c:	4133      	asrs	r3, r6
    410e:	001f      	movs	r7, r3
    4110:	400f      	ands	r7, r1
    4112:	4307      	orrs	r7, r0
    4114:	000d      	movs	r5, r1
    4116:	2f00      	cmp	r7, #0
    4118:	d024      	beq.n	4164 <rint+0x7c>
    411a:	085b      	lsrs	r3, r3, #1
    411c:	001c      	movs	r4, r3
    411e:	400c      	ands	r4, r1
    4120:	4320      	orrs	r0, r4
    4122:	2700      	movs	r7, #0
    4124:	2800      	cmp	r0, #0
    4126:	d007      	beq.n	4138 <rint+0x50>
    4128:	2e13      	cmp	r6, #19
    412a:	d100      	bne.n	412e <rint+0x46>
    412c:	e072      	b.n	4214 <rint+0x12c>
    412e:	2280      	movs	r2, #128	; 0x80
    4130:	02d2      	lsls	r2, r2, #11
    4132:	4132      	asrs	r2, r6
    4134:	4399      	bics	r1, r3
    4136:	430a      	orrs	r2, r1
    4138:	4643      	mov	r3, r8
    413a:	00de      	lsls	r6, r3, #3
    413c:	4b39      	ldr	r3, [pc, #228]	; (4224 <rint+0x13c>)
    413e:	0011      	movs	r1, r2
    4140:	199e      	adds	r6, r3, r6
    4142:	6834      	ldr	r4, [r6, #0]
    4144:	6875      	ldr	r5, [r6, #4]
    4146:	0038      	movs	r0, r7
    4148:	0022      	movs	r2, r4
    414a:	002b      	movs	r3, r5
    414c:	f000 fb32 	bl	47b4 <__aeabi_dadd>
    4150:	9000      	str	r0, [sp, #0]
    4152:	9101      	str	r1, [sp, #4]
    4154:	9800      	ldr	r0, [sp, #0]
    4156:	9901      	ldr	r1, [sp, #4]
    4158:	0022      	movs	r2, r4
    415a:	002b      	movs	r3, r5
    415c:	f001 fcf4 	bl	5b48 <__aeabi_dsub>
    4160:	0004      	movs	r4, r0
    4162:	000d      	movs	r5, r1
    4164:	0020      	movs	r0, r4
    4166:	0029      	movs	r1, r5
    4168:	b002      	add	sp, #8
    416a:	bc04      	pop	{r2}
    416c:	4690      	mov	r8, r2
    416e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4170:	2e33      	cmp	r6, #51	; 0x33
    4172:	dd0c      	ble.n	418e <rint+0xa6>
    4174:	2380      	movs	r3, #128	; 0x80
    4176:	0004      	movs	r4, r0
    4178:	000d      	movs	r5, r1
    417a:	00db      	lsls	r3, r3, #3
    417c:	429e      	cmp	r6, r3
    417e:	d1f1      	bne.n	4164 <rint+0x7c>
    4180:	0002      	movs	r2, r0
    4182:	000b      	movs	r3, r1
    4184:	f000 fb16 	bl	47b4 <__aeabi_dadd>
    4188:	0004      	movs	r4, r0
    418a:	000d      	movs	r5, r1
    418c:	e7ea      	b.n	4164 <rint+0x7c>
    418e:	4c26      	ldr	r4, [pc, #152]	; (4228 <rint+0x140>)
    4190:	000d      	movs	r5, r1
    4192:	46a4      	mov	ip, r4
    4194:	2401      	movs	r4, #1
    4196:	4463      	add	r3, ip
    4198:	4264      	negs	r4, r4
    419a:	40dc      	lsrs	r4, r3
    419c:	46a4      	mov	ip, r4
    419e:	4661      	mov	r1, ip
    41a0:	0004      	movs	r4, r0
    41a2:	4201      	tst	r1, r0
    41a4:	d0de      	beq.n	4164 <rint+0x7c>
    41a6:	0849      	lsrs	r1, r1, #1
    41a8:	4201      	tst	r1, r0
    41aa:	d0c5      	beq.n	4138 <rint+0x50>
    41ac:	2780      	movs	r7, #128	; 0x80
    41ae:	05ff      	lsls	r7, r7, #23
    41b0:	411f      	asrs	r7, r3
    41b2:	4388      	bics	r0, r1
    41b4:	4307      	orrs	r7, r0
    41b6:	e7bf      	b.n	4138 <rint+0x50>
    41b8:	004b      	lsls	r3, r1, #1
    41ba:	085b      	lsrs	r3, r3, #1
    41bc:	4303      	orrs	r3, r0
    41be:	0004      	movs	r4, r0
    41c0:	000d      	movs	r5, r1
    41c2:	2b00      	cmp	r3, #0
    41c4:	d0ce      	beq.n	4164 <rint+0x7c>
    41c6:	030b      	lsls	r3, r1, #12
    41c8:	0b1b      	lsrs	r3, r3, #12
    41ca:	4303      	orrs	r3, r0
    41cc:	425a      	negs	r2, r3
    41ce:	4313      	orrs	r3, r2
    41d0:	2280      	movs	r2, #128	; 0x80
    41d2:	0b1b      	lsrs	r3, r3, #12
    41d4:	0312      	lsls	r2, r2, #12
    41d6:	4013      	ands	r3, r2
    41d8:	0c4a      	lsrs	r2, r1, #17
    41da:	0452      	lsls	r2, r2, #17
    41dc:	4313      	orrs	r3, r2
    41de:	0019      	movs	r1, r3
    41e0:	4643      	mov	r3, r8
    41e2:	4a10      	ldr	r2, [pc, #64]	; (4224 <rint+0x13c>)
    41e4:	00db      	lsls	r3, r3, #3
    41e6:	18d3      	adds	r3, r2, r3
    41e8:	681c      	ldr	r4, [r3, #0]
    41ea:	685d      	ldr	r5, [r3, #4]
    41ec:	0022      	movs	r2, r4
    41ee:	002b      	movs	r3, r5
    41f0:	f000 fae0 	bl	47b4 <__aeabi_dadd>
    41f4:	9000      	str	r0, [sp, #0]
    41f6:	9101      	str	r1, [sp, #4]
    41f8:	9800      	ldr	r0, [sp, #0]
    41fa:	9901      	ldr	r1, [sp, #4]
    41fc:	0022      	movs	r2, r4
    41fe:	002b      	movs	r3, r5
    4200:	f001 fca2 	bl	5b48 <__aeabi_dsub>
    4204:	4642      	mov	r2, r8
    4206:	004b      	lsls	r3, r1, #1
    4208:	085b      	lsrs	r3, r3, #1
    420a:	07d6      	lsls	r6, r2, #31
    420c:	4333      	orrs	r3, r6
    420e:	0004      	movs	r4, r0
    4210:	001d      	movs	r5, r3
    4212:	e7a7      	b.n	4164 <rint+0x7c>
    4214:	2780      	movs	r7, #128	; 0x80
    4216:	063f      	lsls	r7, r7, #24
    4218:	e789      	b.n	412e <rint+0x46>
    421a:	46c0      	nop			; (mov r8, r8)
    421c:	fffffc01 	.word	0xfffffc01
    4220:	000fffff 	.word	0x000fffff
    4224:	00006610 	.word	0x00006610
    4228:	fffffbed 	.word	0xfffffbed

0000422c <scalbn>:
    422c:	004b      	lsls	r3, r1, #1
    422e:	b570      	push	{r4, r5, r6, lr}
    4230:	0d5b      	lsrs	r3, r3, #21
    4232:	0014      	movs	r4, r2
    4234:	000a      	movs	r2, r1
    4236:	2b00      	cmp	r3, #0
    4238:	d11a      	bne.n	4270 <scalbn+0x44>
    423a:	004b      	lsls	r3, r1, #1
    423c:	085b      	lsrs	r3, r3, #1
    423e:	4303      	orrs	r3, r0
    4240:	d015      	beq.n	426e <scalbn+0x42>
    4242:	2200      	movs	r2, #0
    4244:	4b22      	ldr	r3, [pc, #136]	; (42d0 <scalbn+0xa4>)
    4246:	f001 fa05 	bl	5654 <__aeabi_dmul>
    424a:	4b22      	ldr	r3, [pc, #136]	; (42d4 <scalbn+0xa8>)
    424c:	000a      	movs	r2, r1
    424e:	429c      	cmp	r4, r3
    4250:	db22      	blt.n	4298 <scalbn+0x6c>
    4252:	004b      	lsls	r3, r1, #1
    4254:	0d5b      	lsrs	r3, r3, #21
    4256:	3b36      	subs	r3, #54	; 0x36
    4258:	4d1f      	ldr	r5, [pc, #124]	; (42d8 <scalbn+0xac>)
    425a:	18e3      	adds	r3, r4, r3
    425c:	42ab      	cmp	r3, r5
    425e:	dc20      	bgt.n	42a2 <scalbn+0x76>
    4260:	2b00      	cmp	r3, #0
    4262:	dd0d      	ble.n	4280 <scalbn+0x54>
    4264:	4c1d      	ldr	r4, [pc, #116]	; (42dc <scalbn+0xb0>)
    4266:	051b      	lsls	r3, r3, #20
    4268:	4022      	ands	r2, r4
    426a:	431a      	orrs	r2, r3
    426c:	0011      	movs	r1, r2
    426e:	bd70      	pop	{r4, r5, r6, pc}
    4270:	4d1b      	ldr	r5, [pc, #108]	; (42e0 <scalbn+0xb4>)
    4272:	42ab      	cmp	r3, r5
    4274:	d1f0      	bne.n	4258 <scalbn+0x2c>
    4276:	0002      	movs	r2, r0
    4278:	000b      	movs	r3, r1
    427a:	f000 fa9b 	bl	47b4 <__aeabi_dadd>
    427e:	e7f6      	b.n	426e <scalbn+0x42>
    4280:	001d      	movs	r5, r3
    4282:	3535      	adds	r5, #53	; 0x35
    4284:	da18      	bge.n	42b8 <scalbn+0x8c>
    4286:	4b17      	ldr	r3, [pc, #92]	; (42e4 <scalbn+0xb8>)
    4288:	0002      	movs	r2, r0
    428a:	429c      	cmp	r4, r3
    428c:	dc0a      	bgt.n	42a4 <scalbn+0x78>
    428e:	000b      	movs	r3, r1
    4290:	4815      	ldr	r0, [pc, #84]	; (42e8 <scalbn+0xbc>)
    4292:	4916      	ldr	r1, [pc, #88]	; (42ec <scalbn+0xc0>)
    4294:	f000 f832 	bl	42fc <copysign>
    4298:	4a13      	ldr	r2, [pc, #76]	; (42e8 <scalbn+0xbc>)
    429a:	4b14      	ldr	r3, [pc, #80]	; (42ec <scalbn+0xc0>)
    429c:	f001 f9da 	bl	5654 <__aeabi_dmul>
    42a0:	e7e5      	b.n	426e <scalbn+0x42>
    42a2:	0002      	movs	r2, r0
    42a4:	000b      	movs	r3, r1
    42a6:	4812      	ldr	r0, [pc, #72]	; (42f0 <scalbn+0xc4>)
    42a8:	4912      	ldr	r1, [pc, #72]	; (42f4 <scalbn+0xc8>)
    42aa:	f000 f827 	bl	42fc <copysign>
    42ae:	4a10      	ldr	r2, [pc, #64]	; (42f0 <scalbn+0xc4>)
    42b0:	4b10      	ldr	r3, [pc, #64]	; (42f4 <scalbn+0xc8>)
    42b2:	f001 f9cf 	bl	5654 <__aeabi_dmul>
    42b6:	e7da      	b.n	426e <scalbn+0x42>
    42b8:	4c08      	ldr	r4, [pc, #32]	; (42dc <scalbn+0xb0>)
    42ba:	3336      	adds	r3, #54	; 0x36
    42bc:	4022      	ands	r2, r4
    42be:	051b      	lsls	r3, r3, #20
    42c0:	4313      	orrs	r3, r2
    42c2:	0019      	movs	r1, r3
    42c4:	2200      	movs	r2, #0
    42c6:	4b0c      	ldr	r3, [pc, #48]	; (42f8 <scalbn+0xcc>)
    42c8:	f001 f9c4 	bl	5654 <__aeabi_dmul>
    42cc:	e7cf      	b.n	426e <scalbn+0x42>
    42ce:	46c0      	nop			; (mov r8, r8)
    42d0:	43500000 	.word	0x43500000
    42d4:	ffff3cb0 	.word	0xffff3cb0
    42d8:	000007fe 	.word	0x000007fe
    42dc:	800fffff 	.word	0x800fffff
    42e0:	000007ff 	.word	0x000007ff
    42e4:	0000c350 	.word	0x0000c350
    42e8:	c2f8f359 	.word	0xc2f8f359
    42ec:	01a56e1f 	.word	0x01a56e1f
    42f0:	8800759c 	.word	0x8800759c
    42f4:	7e37e43c 	.word	0x7e37e43c
    42f8:	3c900000 	.word	0x3c900000

000042fc <copysign>:
    42fc:	b530      	push	{r4, r5, lr}
    42fe:	004a      	lsls	r2, r1, #1
    4300:	0fdb      	lsrs	r3, r3, #31
    4302:	07db      	lsls	r3, r3, #31
    4304:	0852      	lsrs	r2, r2, #1
    4306:	431a      	orrs	r2, r3
    4308:	0011      	movs	r1, r2
    430a:	bd30      	pop	{r4, r5, pc}

0000430c <__gnu_thumb1_case_uqi>:
    430c:	b402      	push	{r1}
    430e:	4671      	mov	r1, lr
    4310:	0849      	lsrs	r1, r1, #1
    4312:	0049      	lsls	r1, r1, #1
    4314:	5c09      	ldrb	r1, [r1, r0]
    4316:	0049      	lsls	r1, r1, #1
    4318:	448e      	add	lr, r1
    431a:	bc02      	pop	{r1}
    431c:	4770      	bx	lr
    431e:	46c0      	nop			; (mov r8, r8)

00004320 <__aeabi_uidiv>:
    4320:	2200      	movs	r2, #0
    4322:	0843      	lsrs	r3, r0, #1
    4324:	428b      	cmp	r3, r1
    4326:	d374      	bcc.n	4412 <__aeabi_uidiv+0xf2>
    4328:	0903      	lsrs	r3, r0, #4
    432a:	428b      	cmp	r3, r1
    432c:	d35f      	bcc.n	43ee <__aeabi_uidiv+0xce>
    432e:	0a03      	lsrs	r3, r0, #8
    4330:	428b      	cmp	r3, r1
    4332:	d344      	bcc.n	43be <__aeabi_uidiv+0x9e>
    4334:	0b03      	lsrs	r3, r0, #12
    4336:	428b      	cmp	r3, r1
    4338:	d328      	bcc.n	438c <__aeabi_uidiv+0x6c>
    433a:	0c03      	lsrs	r3, r0, #16
    433c:	428b      	cmp	r3, r1
    433e:	d30d      	bcc.n	435c <__aeabi_uidiv+0x3c>
    4340:	22ff      	movs	r2, #255	; 0xff
    4342:	0209      	lsls	r1, r1, #8
    4344:	ba12      	rev	r2, r2
    4346:	0c03      	lsrs	r3, r0, #16
    4348:	428b      	cmp	r3, r1
    434a:	d302      	bcc.n	4352 <__aeabi_uidiv+0x32>
    434c:	1212      	asrs	r2, r2, #8
    434e:	0209      	lsls	r1, r1, #8
    4350:	d065      	beq.n	441e <__aeabi_uidiv+0xfe>
    4352:	0b03      	lsrs	r3, r0, #12
    4354:	428b      	cmp	r3, r1
    4356:	d319      	bcc.n	438c <__aeabi_uidiv+0x6c>
    4358:	e000      	b.n	435c <__aeabi_uidiv+0x3c>
    435a:	0a09      	lsrs	r1, r1, #8
    435c:	0bc3      	lsrs	r3, r0, #15
    435e:	428b      	cmp	r3, r1
    4360:	d301      	bcc.n	4366 <__aeabi_uidiv+0x46>
    4362:	03cb      	lsls	r3, r1, #15
    4364:	1ac0      	subs	r0, r0, r3
    4366:	4152      	adcs	r2, r2
    4368:	0b83      	lsrs	r3, r0, #14
    436a:	428b      	cmp	r3, r1
    436c:	d301      	bcc.n	4372 <__aeabi_uidiv+0x52>
    436e:	038b      	lsls	r3, r1, #14
    4370:	1ac0      	subs	r0, r0, r3
    4372:	4152      	adcs	r2, r2
    4374:	0b43      	lsrs	r3, r0, #13
    4376:	428b      	cmp	r3, r1
    4378:	d301      	bcc.n	437e <__aeabi_uidiv+0x5e>
    437a:	034b      	lsls	r3, r1, #13
    437c:	1ac0      	subs	r0, r0, r3
    437e:	4152      	adcs	r2, r2
    4380:	0b03      	lsrs	r3, r0, #12
    4382:	428b      	cmp	r3, r1
    4384:	d301      	bcc.n	438a <__aeabi_uidiv+0x6a>
    4386:	030b      	lsls	r3, r1, #12
    4388:	1ac0      	subs	r0, r0, r3
    438a:	4152      	adcs	r2, r2
    438c:	0ac3      	lsrs	r3, r0, #11
    438e:	428b      	cmp	r3, r1
    4390:	d301      	bcc.n	4396 <__aeabi_uidiv+0x76>
    4392:	02cb      	lsls	r3, r1, #11
    4394:	1ac0      	subs	r0, r0, r3
    4396:	4152      	adcs	r2, r2
    4398:	0a83      	lsrs	r3, r0, #10
    439a:	428b      	cmp	r3, r1
    439c:	d301      	bcc.n	43a2 <__aeabi_uidiv+0x82>
    439e:	028b      	lsls	r3, r1, #10
    43a0:	1ac0      	subs	r0, r0, r3
    43a2:	4152      	adcs	r2, r2
    43a4:	0a43      	lsrs	r3, r0, #9
    43a6:	428b      	cmp	r3, r1
    43a8:	d301      	bcc.n	43ae <__aeabi_uidiv+0x8e>
    43aa:	024b      	lsls	r3, r1, #9
    43ac:	1ac0      	subs	r0, r0, r3
    43ae:	4152      	adcs	r2, r2
    43b0:	0a03      	lsrs	r3, r0, #8
    43b2:	428b      	cmp	r3, r1
    43b4:	d301      	bcc.n	43ba <__aeabi_uidiv+0x9a>
    43b6:	020b      	lsls	r3, r1, #8
    43b8:	1ac0      	subs	r0, r0, r3
    43ba:	4152      	adcs	r2, r2
    43bc:	d2cd      	bcs.n	435a <__aeabi_uidiv+0x3a>
    43be:	09c3      	lsrs	r3, r0, #7
    43c0:	428b      	cmp	r3, r1
    43c2:	d301      	bcc.n	43c8 <__aeabi_uidiv+0xa8>
    43c4:	01cb      	lsls	r3, r1, #7
    43c6:	1ac0      	subs	r0, r0, r3
    43c8:	4152      	adcs	r2, r2
    43ca:	0983      	lsrs	r3, r0, #6
    43cc:	428b      	cmp	r3, r1
    43ce:	d301      	bcc.n	43d4 <__aeabi_uidiv+0xb4>
    43d0:	018b      	lsls	r3, r1, #6
    43d2:	1ac0      	subs	r0, r0, r3
    43d4:	4152      	adcs	r2, r2
    43d6:	0943      	lsrs	r3, r0, #5
    43d8:	428b      	cmp	r3, r1
    43da:	d301      	bcc.n	43e0 <__aeabi_uidiv+0xc0>
    43dc:	014b      	lsls	r3, r1, #5
    43de:	1ac0      	subs	r0, r0, r3
    43e0:	4152      	adcs	r2, r2
    43e2:	0903      	lsrs	r3, r0, #4
    43e4:	428b      	cmp	r3, r1
    43e6:	d301      	bcc.n	43ec <__aeabi_uidiv+0xcc>
    43e8:	010b      	lsls	r3, r1, #4
    43ea:	1ac0      	subs	r0, r0, r3
    43ec:	4152      	adcs	r2, r2
    43ee:	08c3      	lsrs	r3, r0, #3
    43f0:	428b      	cmp	r3, r1
    43f2:	d301      	bcc.n	43f8 <__aeabi_uidiv+0xd8>
    43f4:	00cb      	lsls	r3, r1, #3
    43f6:	1ac0      	subs	r0, r0, r3
    43f8:	4152      	adcs	r2, r2
    43fa:	0883      	lsrs	r3, r0, #2
    43fc:	428b      	cmp	r3, r1
    43fe:	d301      	bcc.n	4404 <__aeabi_uidiv+0xe4>
    4400:	008b      	lsls	r3, r1, #2
    4402:	1ac0      	subs	r0, r0, r3
    4404:	4152      	adcs	r2, r2
    4406:	0843      	lsrs	r3, r0, #1
    4408:	428b      	cmp	r3, r1
    440a:	d301      	bcc.n	4410 <__aeabi_uidiv+0xf0>
    440c:	004b      	lsls	r3, r1, #1
    440e:	1ac0      	subs	r0, r0, r3
    4410:	4152      	adcs	r2, r2
    4412:	1a41      	subs	r1, r0, r1
    4414:	d200      	bcs.n	4418 <__aeabi_uidiv+0xf8>
    4416:	4601      	mov	r1, r0
    4418:	4152      	adcs	r2, r2
    441a:	4610      	mov	r0, r2
    441c:	4770      	bx	lr
    441e:	e7ff      	b.n	4420 <__aeabi_uidiv+0x100>
    4420:	b501      	push	{r0, lr}
    4422:	2000      	movs	r0, #0
    4424:	f000 f806 	bl	4434 <__aeabi_idiv0>
    4428:	bd02      	pop	{r1, pc}
    442a:	46c0      	nop			; (mov r8, r8)

0000442c <__aeabi_uidivmod>:
    442c:	2900      	cmp	r1, #0
    442e:	d0f7      	beq.n	4420 <__aeabi_uidiv+0x100>
    4430:	e776      	b.n	4320 <__aeabi_uidiv>
    4432:	4770      	bx	lr

00004434 <__aeabi_idiv0>:
    4434:	4770      	bx	lr
    4436:	46c0      	nop			; (mov r8, r8)

00004438 <__aeabi_cdrcmple>:
    4438:	4684      	mov	ip, r0
    443a:	1c10      	adds	r0, r2, #0
    443c:	4662      	mov	r2, ip
    443e:	468c      	mov	ip, r1
    4440:	1c19      	adds	r1, r3, #0
    4442:	4663      	mov	r3, ip
    4444:	e000      	b.n	4448 <__aeabi_cdcmpeq>
    4446:	46c0      	nop			; (mov r8, r8)

00004448 <__aeabi_cdcmpeq>:
    4448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    444a:	f001 f899 	bl	5580 <__ledf2>
    444e:	2800      	cmp	r0, #0
    4450:	d401      	bmi.n	4456 <__aeabi_cdcmpeq+0xe>
    4452:	2100      	movs	r1, #0
    4454:	42c8      	cmn	r0, r1
    4456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004458 <__aeabi_dcmpeq>:
    4458:	b510      	push	{r4, lr}
    445a:	f000 ffed 	bl	5438 <__eqdf2>
    445e:	4240      	negs	r0, r0
    4460:	3001      	adds	r0, #1
    4462:	bd10      	pop	{r4, pc}

00004464 <__aeabi_dcmplt>:
    4464:	b510      	push	{r4, lr}
    4466:	f001 f88b 	bl	5580 <__ledf2>
    446a:	2800      	cmp	r0, #0
    446c:	db01      	blt.n	4472 <__aeabi_dcmplt+0xe>
    446e:	2000      	movs	r0, #0
    4470:	bd10      	pop	{r4, pc}
    4472:	2001      	movs	r0, #1
    4474:	bd10      	pop	{r4, pc}
    4476:	46c0      	nop			; (mov r8, r8)

00004478 <__aeabi_dcmple>:
    4478:	b510      	push	{r4, lr}
    447a:	f001 f881 	bl	5580 <__ledf2>
    447e:	2800      	cmp	r0, #0
    4480:	dd01      	ble.n	4486 <__aeabi_dcmple+0xe>
    4482:	2000      	movs	r0, #0
    4484:	bd10      	pop	{r4, pc}
    4486:	2001      	movs	r0, #1
    4488:	bd10      	pop	{r4, pc}
    448a:	46c0      	nop			; (mov r8, r8)

0000448c <__aeabi_dcmpgt>:
    448c:	b510      	push	{r4, lr}
    448e:	f001 f813 	bl	54b8 <__gedf2>
    4492:	2800      	cmp	r0, #0
    4494:	dc01      	bgt.n	449a <__aeabi_dcmpgt+0xe>
    4496:	2000      	movs	r0, #0
    4498:	bd10      	pop	{r4, pc}
    449a:	2001      	movs	r0, #1
    449c:	bd10      	pop	{r4, pc}
    449e:	46c0      	nop			; (mov r8, r8)

000044a0 <__aeabi_dcmpge>:
    44a0:	b510      	push	{r4, lr}
    44a2:	f001 f809 	bl	54b8 <__gedf2>
    44a6:	2800      	cmp	r0, #0
    44a8:	da01      	bge.n	44ae <__aeabi_dcmpge+0xe>
    44aa:	2000      	movs	r0, #0
    44ac:	bd10      	pop	{r4, pc}
    44ae:	2001      	movs	r0, #1
    44b0:	bd10      	pop	{r4, pc}
    44b2:	46c0      	nop			; (mov r8, r8)

000044b4 <__aeabi_lmul>:
    44b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    44b6:	464f      	mov	r7, r9
    44b8:	4646      	mov	r6, r8
    44ba:	b4c0      	push	{r6, r7}
    44bc:	0416      	lsls	r6, r2, #16
    44be:	0c36      	lsrs	r6, r6, #16
    44c0:	4699      	mov	r9, r3
    44c2:	0033      	movs	r3, r6
    44c4:	0405      	lsls	r5, r0, #16
    44c6:	0c2c      	lsrs	r4, r5, #16
    44c8:	0c07      	lsrs	r7, r0, #16
    44ca:	0c15      	lsrs	r5, r2, #16
    44cc:	4363      	muls	r3, r4
    44ce:	437e      	muls	r6, r7
    44d0:	436f      	muls	r7, r5
    44d2:	4365      	muls	r5, r4
    44d4:	0c1c      	lsrs	r4, r3, #16
    44d6:	19ad      	adds	r5, r5, r6
    44d8:	1964      	adds	r4, r4, r5
    44da:	469c      	mov	ip, r3
    44dc:	42a6      	cmp	r6, r4
    44de:	d903      	bls.n	44e8 <__aeabi_lmul+0x34>
    44e0:	2380      	movs	r3, #128	; 0x80
    44e2:	025b      	lsls	r3, r3, #9
    44e4:	4698      	mov	r8, r3
    44e6:	4447      	add	r7, r8
    44e8:	4663      	mov	r3, ip
    44ea:	0c25      	lsrs	r5, r4, #16
    44ec:	19ef      	adds	r7, r5, r7
    44ee:	041d      	lsls	r5, r3, #16
    44f0:	464b      	mov	r3, r9
    44f2:	434a      	muls	r2, r1
    44f4:	4343      	muls	r3, r0
    44f6:	0c2d      	lsrs	r5, r5, #16
    44f8:	0424      	lsls	r4, r4, #16
    44fa:	1964      	adds	r4, r4, r5
    44fc:	1899      	adds	r1, r3, r2
    44fe:	19c9      	adds	r1, r1, r7
    4500:	0020      	movs	r0, r4
    4502:	bc0c      	pop	{r2, r3}
    4504:	4690      	mov	r8, r2
    4506:	4699      	mov	r9, r3
    4508:	bdf0      	pop	{r4, r5, r6, r7, pc}
    450a:	46c0      	nop			; (mov r8, r8)

0000450c <__aeabi_d2uiz>:
    450c:	b570      	push	{r4, r5, r6, lr}
    450e:	2200      	movs	r2, #0
    4510:	4b0c      	ldr	r3, [pc, #48]	; (4544 <__aeabi_d2uiz+0x38>)
    4512:	0004      	movs	r4, r0
    4514:	000d      	movs	r5, r1
    4516:	f7ff ffc3 	bl	44a0 <__aeabi_dcmpge>
    451a:	2800      	cmp	r0, #0
    451c:	d104      	bne.n	4528 <__aeabi_d2uiz+0x1c>
    451e:	0020      	movs	r0, r4
    4520:	0029      	movs	r1, r5
    4522:	f001 fe85 	bl	6230 <__aeabi_d2iz>
    4526:	bd70      	pop	{r4, r5, r6, pc}
    4528:	4b06      	ldr	r3, [pc, #24]	; (4544 <__aeabi_d2uiz+0x38>)
    452a:	2200      	movs	r2, #0
    452c:	0020      	movs	r0, r4
    452e:	0029      	movs	r1, r5
    4530:	f001 fb0a 	bl	5b48 <__aeabi_dsub>
    4534:	f001 fe7c 	bl	6230 <__aeabi_d2iz>
    4538:	2380      	movs	r3, #128	; 0x80
    453a:	061b      	lsls	r3, r3, #24
    453c:	469c      	mov	ip, r3
    453e:	4460      	add	r0, ip
    4540:	e7f1      	b.n	4526 <__aeabi_d2uiz+0x1a>
    4542:	46c0      	nop			; (mov r8, r8)
    4544:	41e00000 	.word	0x41e00000

00004548 <__aeabi_fmul>:
    4548:	b5f0      	push	{r4, r5, r6, r7, lr}
    454a:	4657      	mov	r7, sl
    454c:	464e      	mov	r6, r9
    454e:	4645      	mov	r5, r8
    4550:	0043      	lsls	r3, r0, #1
    4552:	b4e0      	push	{r5, r6, r7}
    4554:	0246      	lsls	r6, r0, #9
    4556:	4688      	mov	r8, r1
    4558:	0a76      	lsrs	r6, r6, #9
    455a:	0e1f      	lsrs	r7, r3, #24
    455c:	0fc4      	lsrs	r4, r0, #31
    455e:	2f00      	cmp	r7, #0
    4560:	d047      	beq.n	45f2 <__aeabi_fmul+0xaa>
    4562:	2fff      	cmp	r7, #255	; 0xff
    4564:	d025      	beq.n	45b2 <__aeabi_fmul+0x6a>
    4566:	2300      	movs	r3, #0
    4568:	2580      	movs	r5, #128	; 0x80
    456a:	469a      	mov	sl, r3
    456c:	4699      	mov	r9, r3
    456e:	00f6      	lsls	r6, r6, #3
    4570:	04ed      	lsls	r5, r5, #19
    4572:	432e      	orrs	r6, r5
    4574:	3f7f      	subs	r7, #127	; 0x7f
    4576:	4643      	mov	r3, r8
    4578:	4642      	mov	r2, r8
    457a:	025d      	lsls	r5, r3, #9
    457c:	0fd2      	lsrs	r2, r2, #31
    457e:	005b      	lsls	r3, r3, #1
    4580:	0a6d      	lsrs	r5, r5, #9
    4582:	0e1b      	lsrs	r3, r3, #24
    4584:	4690      	mov	r8, r2
    4586:	d040      	beq.n	460a <__aeabi_fmul+0xc2>
    4588:	2bff      	cmp	r3, #255	; 0xff
    458a:	d039      	beq.n	4600 <__aeabi_fmul+0xb8>
    458c:	2280      	movs	r2, #128	; 0x80
    458e:	2000      	movs	r0, #0
    4590:	00ed      	lsls	r5, r5, #3
    4592:	04d2      	lsls	r2, r2, #19
    4594:	4315      	orrs	r5, r2
    4596:	3b7f      	subs	r3, #127	; 0x7f
    4598:	18fb      	adds	r3, r7, r3
    459a:	4642      	mov	r2, r8
    459c:	4657      	mov	r7, sl
    459e:	1c59      	adds	r1, r3, #1
    45a0:	4062      	eors	r2, r4
    45a2:	468c      	mov	ip, r1
    45a4:	4307      	orrs	r7, r0
    45a6:	2f0f      	cmp	r7, #15
    45a8:	d85c      	bhi.n	4664 <__aeabi_fmul+0x11c>
    45aa:	496f      	ldr	r1, [pc, #444]	; (4768 <__aeabi_fmul+0x220>)
    45ac:	00bf      	lsls	r7, r7, #2
    45ae:	59c9      	ldr	r1, [r1, r7]
    45b0:	468f      	mov	pc, r1
    45b2:	2e00      	cmp	r6, #0
    45b4:	d145      	bne.n	4642 <__aeabi_fmul+0xfa>
    45b6:	2308      	movs	r3, #8
    45b8:	469a      	mov	sl, r3
    45ba:	3b06      	subs	r3, #6
    45bc:	4699      	mov	r9, r3
    45be:	e7da      	b.n	4576 <__aeabi_fmul+0x2e>
    45c0:	4642      	mov	r2, r8
    45c2:	2802      	cmp	r0, #2
    45c4:	d02d      	beq.n	4622 <__aeabi_fmul+0xda>
    45c6:	2803      	cmp	r0, #3
    45c8:	d100      	bne.n	45cc <__aeabi_fmul+0x84>
    45ca:	e0c3      	b.n	4754 <__aeabi_fmul+0x20c>
    45cc:	2801      	cmp	r0, #1
    45ce:	d000      	beq.n	45d2 <__aeabi_fmul+0x8a>
    45d0:	e0a2      	b.n	4718 <__aeabi_fmul+0x1d0>
    45d2:	2500      	movs	r5, #0
    45d4:	2600      	movs	r6, #0
    45d6:	4002      	ands	r2, r0
    45d8:	b2d4      	uxtb	r4, r2
    45da:	0276      	lsls	r6, r6, #9
    45dc:	05ed      	lsls	r5, r5, #23
    45de:	0a76      	lsrs	r6, r6, #9
    45e0:	432e      	orrs	r6, r5
    45e2:	07e4      	lsls	r4, r4, #31
    45e4:	4326      	orrs	r6, r4
    45e6:	0030      	movs	r0, r6
    45e8:	bc1c      	pop	{r2, r3, r4}
    45ea:	4690      	mov	r8, r2
    45ec:	4699      	mov	r9, r3
    45ee:	46a2      	mov	sl, r4
    45f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45f2:	2e00      	cmp	r6, #0
    45f4:	d11a      	bne.n	462c <__aeabi_fmul+0xe4>
    45f6:	2304      	movs	r3, #4
    45f8:	469a      	mov	sl, r3
    45fa:	3b03      	subs	r3, #3
    45fc:	4699      	mov	r9, r3
    45fe:	e7ba      	b.n	4576 <__aeabi_fmul+0x2e>
    4600:	002a      	movs	r2, r5
    4602:	1e51      	subs	r1, r2, #1
    4604:	418a      	sbcs	r2, r1
    4606:	1c90      	adds	r0, r2, #2
    4608:	e7c6      	b.n	4598 <__aeabi_fmul+0x50>
    460a:	2001      	movs	r0, #1
    460c:	2d00      	cmp	r5, #0
    460e:	d0c3      	beq.n	4598 <__aeabi_fmul+0x50>
    4610:	0028      	movs	r0, r5
    4612:	f001 ff9d 	bl	6550 <__clzsi2>
    4616:	1f43      	subs	r3, r0, #5
    4618:	3076      	adds	r0, #118	; 0x76
    461a:	409d      	lsls	r5, r3
    461c:	4243      	negs	r3, r0
    461e:	2000      	movs	r0, #0
    4620:	e7ba      	b.n	4598 <__aeabi_fmul+0x50>
    4622:	2401      	movs	r4, #1
    4624:	25ff      	movs	r5, #255	; 0xff
    4626:	4014      	ands	r4, r2
    4628:	2600      	movs	r6, #0
    462a:	e7d6      	b.n	45da <__aeabi_fmul+0x92>
    462c:	0030      	movs	r0, r6
    462e:	f001 ff8f 	bl	6550 <__clzsi2>
    4632:	1f43      	subs	r3, r0, #5
    4634:	409e      	lsls	r6, r3
    4636:	2300      	movs	r3, #0
    4638:	3076      	adds	r0, #118	; 0x76
    463a:	4247      	negs	r7, r0
    463c:	469a      	mov	sl, r3
    463e:	4699      	mov	r9, r3
    4640:	e799      	b.n	4576 <__aeabi_fmul+0x2e>
    4642:	230c      	movs	r3, #12
    4644:	469a      	mov	sl, r3
    4646:	3b09      	subs	r3, #9
    4648:	4699      	mov	r9, r3
    464a:	e794      	b.n	4576 <__aeabi_fmul+0x2e>
    464c:	2680      	movs	r6, #128	; 0x80
    464e:	2400      	movs	r4, #0
    4650:	03f6      	lsls	r6, r6, #15
    4652:	25ff      	movs	r5, #255	; 0xff
    4654:	e7c1      	b.n	45da <__aeabi_fmul+0x92>
    4656:	0035      	movs	r5, r6
    4658:	4648      	mov	r0, r9
    465a:	e7b2      	b.n	45c2 <__aeabi_fmul+0x7a>
    465c:	0035      	movs	r5, r6
    465e:	0022      	movs	r2, r4
    4660:	4648      	mov	r0, r9
    4662:	e7ae      	b.n	45c2 <__aeabi_fmul+0x7a>
    4664:	0429      	lsls	r1, r5, #16
    4666:	0c09      	lsrs	r1, r1, #16
    4668:	0008      	movs	r0, r1
    466a:	0c37      	lsrs	r7, r6, #16
    466c:	0436      	lsls	r6, r6, #16
    466e:	0c36      	lsrs	r6, r6, #16
    4670:	0c2c      	lsrs	r4, r5, #16
    4672:	4379      	muls	r1, r7
    4674:	4370      	muls	r0, r6
    4676:	4367      	muls	r7, r4
    4678:	4374      	muls	r4, r6
    467a:	0c06      	lsrs	r6, r0, #16
    467c:	1864      	adds	r4, r4, r1
    467e:	1936      	adds	r6, r6, r4
    4680:	42b1      	cmp	r1, r6
    4682:	d903      	bls.n	468c <__aeabi_fmul+0x144>
    4684:	2180      	movs	r1, #128	; 0x80
    4686:	0249      	lsls	r1, r1, #9
    4688:	4688      	mov	r8, r1
    468a:	4447      	add	r7, r8
    468c:	0400      	lsls	r0, r0, #16
    468e:	0c00      	lsrs	r0, r0, #16
    4690:	0431      	lsls	r1, r6, #16
    4692:	1809      	adds	r1, r1, r0
    4694:	018d      	lsls	r5, r1, #6
    4696:	1e68      	subs	r0, r5, #1
    4698:	4185      	sbcs	r5, r0
    469a:	0e89      	lsrs	r1, r1, #26
    469c:	4329      	orrs	r1, r5
    469e:	0c35      	lsrs	r5, r6, #16
    46a0:	19ed      	adds	r5, r5, r7
    46a2:	01ad      	lsls	r5, r5, #6
    46a4:	430d      	orrs	r5, r1
    46a6:	0129      	lsls	r1, r5, #4
    46a8:	d504      	bpl.n	46b4 <__aeabi_fmul+0x16c>
    46aa:	2301      	movs	r3, #1
    46ac:	0869      	lsrs	r1, r5, #1
    46ae:	401d      	ands	r5, r3
    46b0:	4663      	mov	r3, ip
    46b2:	430d      	orrs	r5, r1
    46b4:	0019      	movs	r1, r3
    46b6:	317f      	adds	r1, #127	; 0x7f
    46b8:	2900      	cmp	r1, #0
    46ba:	dd25      	ble.n	4708 <__aeabi_fmul+0x1c0>
    46bc:	0768      	lsls	r0, r5, #29
    46be:	d004      	beq.n	46ca <__aeabi_fmul+0x182>
    46c0:	200f      	movs	r0, #15
    46c2:	4028      	ands	r0, r5
    46c4:	2804      	cmp	r0, #4
    46c6:	d000      	beq.n	46ca <__aeabi_fmul+0x182>
    46c8:	3504      	adds	r5, #4
    46ca:	0128      	lsls	r0, r5, #4
    46cc:	d503      	bpl.n	46d6 <__aeabi_fmul+0x18e>
    46ce:	4927      	ldr	r1, [pc, #156]	; (476c <__aeabi_fmul+0x224>)
    46d0:	3380      	adds	r3, #128	; 0x80
    46d2:	400d      	ands	r5, r1
    46d4:	0019      	movs	r1, r3
    46d6:	29fe      	cmp	r1, #254	; 0xfe
    46d8:	dca3      	bgt.n	4622 <__aeabi_fmul+0xda>
    46da:	2401      	movs	r4, #1
    46dc:	01ad      	lsls	r5, r5, #6
    46de:	0a6e      	lsrs	r6, r5, #9
    46e0:	4014      	ands	r4, r2
    46e2:	b2cd      	uxtb	r5, r1
    46e4:	e779      	b.n	45da <__aeabi_fmul+0x92>
    46e6:	2080      	movs	r0, #128	; 0x80
    46e8:	03c0      	lsls	r0, r0, #15
    46ea:	4206      	tst	r6, r0
    46ec:	d007      	beq.n	46fe <__aeabi_fmul+0x1b6>
    46ee:	4205      	tst	r5, r0
    46f0:	d105      	bne.n	46fe <__aeabi_fmul+0x1b6>
    46f2:	4328      	orrs	r0, r5
    46f4:	0246      	lsls	r6, r0, #9
    46f6:	0a76      	lsrs	r6, r6, #9
    46f8:	4644      	mov	r4, r8
    46fa:	25ff      	movs	r5, #255	; 0xff
    46fc:	e76d      	b.n	45da <__aeabi_fmul+0x92>
    46fe:	4306      	orrs	r6, r0
    4700:	0276      	lsls	r6, r6, #9
    4702:	0a76      	lsrs	r6, r6, #9
    4704:	25ff      	movs	r5, #255	; 0xff
    4706:	e768      	b.n	45da <__aeabi_fmul+0x92>
    4708:	2401      	movs	r4, #1
    470a:	1a61      	subs	r1, r4, r1
    470c:	291b      	cmp	r1, #27
    470e:	dd05      	ble.n	471c <__aeabi_fmul+0x1d4>
    4710:	4014      	ands	r4, r2
    4712:	2500      	movs	r5, #0
    4714:	2600      	movs	r6, #0
    4716:	e760      	b.n	45da <__aeabi_fmul+0x92>
    4718:	4663      	mov	r3, ip
    471a:	e7cb      	b.n	46b4 <__aeabi_fmul+0x16c>
    471c:	002e      	movs	r6, r5
    471e:	2320      	movs	r3, #32
    4720:	40ce      	lsrs	r6, r1
    4722:	1a59      	subs	r1, r3, r1
    4724:	408d      	lsls	r5, r1
    4726:	1e6b      	subs	r3, r5, #1
    4728:	419d      	sbcs	r5, r3
    472a:	432e      	orrs	r6, r5
    472c:	0773      	lsls	r3, r6, #29
    472e:	d004      	beq.n	473a <__aeabi_fmul+0x1f2>
    4730:	230f      	movs	r3, #15
    4732:	4033      	ands	r3, r6
    4734:	2b04      	cmp	r3, #4
    4736:	d000      	beq.n	473a <__aeabi_fmul+0x1f2>
    4738:	3604      	adds	r6, #4
    473a:	0173      	lsls	r3, r6, #5
    473c:	d504      	bpl.n	4748 <__aeabi_fmul+0x200>
    473e:	2401      	movs	r4, #1
    4740:	2501      	movs	r5, #1
    4742:	4014      	ands	r4, r2
    4744:	2600      	movs	r6, #0
    4746:	e748      	b.n	45da <__aeabi_fmul+0x92>
    4748:	2401      	movs	r4, #1
    474a:	01b6      	lsls	r6, r6, #6
    474c:	0a76      	lsrs	r6, r6, #9
    474e:	4014      	ands	r4, r2
    4750:	2500      	movs	r5, #0
    4752:	e742      	b.n	45da <__aeabi_fmul+0x92>
    4754:	2680      	movs	r6, #128	; 0x80
    4756:	2401      	movs	r4, #1
    4758:	03f6      	lsls	r6, r6, #15
    475a:	432e      	orrs	r6, r5
    475c:	0276      	lsls	r6, r6, #9
    475e:	0a76      	lsrs	r6, r6, #9
    4760:	4014      	ands	r4, r2
    4762:	25ff      	movs	r5, #255	; 0xff
    4764:	e739      	b.n	45da <__aeabi_fmul+0x92>
    4766:	46c0      	nop			; (mov r8, r8)
    4768:	00006620 	.word	0x00006620
    476c:	f7ffffff 	.word	0xf7ffffff

00004770 <__aeabi_f2iz>:
    4770:	0243      	lsls	r3, r0, #9
    4772:	0a59      	lsrs	r1, r3, #9
    4774:	0043      	lsls	r3, r0, #1
    4776:	0fc2      	lsrs	r2, r0, #31
    4778:	0e1b      	lsrs	r3, r3, #24
    477a:	2000      	movs	r0, #0
    477c:	2b7e      	cmp	r3, #126	; 0x7e
    477e:	dd0e      	ble.n	479e <__aeabi_f2iz+0x2e>
    4780:	2b9d      	cmp	r3, #157	; 0x9d
    4782:	dc0d      	bgt.n	47a0 <__aeabi_f2iz+0x30>
    4784:	2080      	movs	r0, #128	; 0x80
    4786:	0400      	lsls	r0, r0, #16
    4788:	4301      	orrs	r1, r0
    478a:	2b95      	cmp	r3, #149	; 0x95
    478c:	dc0b      	bgt.n	47a6 <__aeabi_f2iz+0x36>
    478e:	2096      	movs	r0, #150	; 0x96
    4790:	1ac3      	subs	r3, r0, r3
    4792:	40d9      	lsrs	r1, r3
    4794:	000b      	movs	r3, r1
    4796:	4258      	negs	r0, r3
    4798:	2a00      	cmp	r2, #0
    479a:	d100      	bne.n	479e <__aeabi_f2iz+0x2e>
    479c:	0018      	movs	r0, r3
    479e:	4770      	bx	lr
    47a0:	4b03      	ldr	r3, [pc, #12]	; (47b0 <__aeabi_f2iz+0x40>)
    47a2:	18d0      	adds	r0, r2, r3
    47a4:	e7fb      	b.n	479e <__aeabi_f2iz+0x2e>
    47a6:	3b96      	subs	r3, #150	; 0x96
    47a8:	4099      	lsls	r1, r3
    47aa:	000b      	movs	r3, r1
    47ac:	e7f3      	b.n	4796 <__aeabi_f2iz+0x26>
    47ae:	46c0      	nop			; (mov r8, r8)
    47b0:	7fffffff 	.word	0x7fffffff

000047b4 <__aeabi_dadd>:
    47b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47b6:	4656      	mov	r6, sl
    47b8:	465f      	mov	r7, fp
    47ba:	464d      	mov	r5, r9
    47bc:	4644      	mov	r4, r8
    47be:	b4f0      	push	{r4, r5, r6, r7}
    47c0:	000f      	movs	r7, r1
    47c2:	0ffd      	lsrs	r5, r7, #31
    47c4:	46aa      	mov	sl, r5
    47c6:	0309      	lsls	r1, r1, #12
    47c8:	007c      	lsls	r4, r7, #1
    47ca:	002e      	movs	r6, r5
    47cc:	005f      	lsls	r7, r3, #1
    47ce:	0f45      	lsrs	r5, r0, #29
    47d0:	0a49      	lsrs	r1, r1, #9
    47d2:	0d7f      	lsrs	r7, r7, #21
    47d4:	4329      	orrs	r1, r5
    47d6:	00c5      	lsls	r5, r0, #3
    47d8:	0318      	lsls	r0, r3, #12
    47da:	46bc      	mov	ip, r7
    47dc:	0a40      	lsrs	r0, r0, #9
    47de:	0f57      	lsrs	r7, r2, #29
    47e0:	0d64      	lsrs	r4, r4, #21
    47e2:	0fdb      	lsrs	r3, r3, #31
    47e4:	4338      	orrs	r0, r7
    47e6:	00d2      	lsls	r2, r2, #3
    47e8:	459a      	cmp	sl, r3
    47ea:	d100      	bne.n	47ee <__aeabi_dadd+0x3a>
    47ec:	e0aa      	b.n	4944 <__aeabi_dadd+0x190>
    47ee:	4666      	mov	r6, ip
    47f0:	1ba6      	subs	r6, r4, r6
    47f2:	2e00      	cmp	r6, #0
    47f4:	dc00      	bgt.n	47f8 <__aeabi_dadd+0x44>
    47f6:	e0ff      	b.n	49f8 <__aeabi_dadd+0x244>
    47f8:	4663      	mov	r3, ip
    47fa:	2b00      	cmp	r3, #0
    47fc:	d139      	bne.n	4872 <__aeabi_dadd+0xbe>
    47fe:	0003      	movs	r3, r0
    4800:	4313      	orrs	r3, r2
    4802:	d000      	beq.n	4806 <__aeabi_dadd+0x52>
    4804:	e0d9      	b.n	49ba <__aeabi_dadd+0x206>
    4806:	076b      	lsls	r3, r5, #29
    4808:	d009      	beq.n	481e <__aeabi_dadd+0x6a>
    480a:	230f      	movs	r3, #15
    480c:	402b      	ands	r3, r5
    480e:	2b04      	cmp	r3, #4
    4810:	d005      	beq.n	481e <__aeabi_dadd+0x6a>
    4812:	1d2b      	adds	r3, r5, #4
    4814:	42ab      	cmp	r3, r5
    4816:	41ad      	sbcs	r5, r5
    4818:	426d      	negs	r5, r5
    481a:	1949      	adds	r1, r1, r5
    481c:	001d      	movs	r5, r3
    481e:	020b      	lsls	r3, r1, #8
    4820:	d400      	bmi.n	4824 <__aeabi_dadd+0x70>
    4822:	e082      	b.n	492a <__aeabi_dadd+0x176>
    4824:	4bca      	ldr	r3, [pc, #808]	; (4b50 <__aeabi_dadd+0x39c>)
    4826:	3401      	adds	r4, #1
    4828:	429c      	cmp	r4, r3
    482a:	d100      	bne.n	482e <__aeabi_dadd+0x7a>
    482c:	e0fe      	b.n	4a2c <__aeabi_dadd+0x278>
    482e:	000a      	movs	r2, r1
    4830:	4656      	mov	r6, sl
    4832:	4bc8      	ldr	r3, [pc, #800]	; (4b54 <__aeabi_dadd+0x3a0>)
    4834:	08ed      	lsrs	r5, r5, #3
    4836:	401a      	ands	r2, r3
    4838:	0750      	lsls	r0, r2, #29
    483a:	0564      	lsls	r4, r4, #21
    483c:	0252      	lsls	r2, r2, #9
    483e:	4305      	orrs	r5, r0
    4840:	0b12      	lsrs	r2, r2, #12
    4842:	0d64      	lsrs	r4, r4, #21
    4844:	2100      	movs	r1, #0
    4846:	0312      	lsls	r2, r2, #12
    4848:	0d0b      	lsrs	r3, r1, #20
    484a:	051b      	lsls	r3, r3, #20
    484c:	0564      	lsls	r4, r4, #21
    484e:	0b12      	lsrs	r2, r2, #12
    4850:	431a      	orrs	r2, r3
    4852:	0863      	lsrs	r3, r4, #1
    4854:	4cc0      	ldr	r4, [pc, #768]	; (4b58 <__aeabi_dadd+0x3a4>)
    4856:	07f6      	lsls	r6, r6, #31
    4858:	4014      	ands	r4, r2
    485a:	431c      	orrs	r4, r3
    485c:	0064      	lsls	r4, r4, #1
    485e:	0864      	lsrs	r4, r4, #1
    4860:	4334      	orrs	r4, r6
    4862:	0028      	movs	r0, r5
    4864:	0021      	movs	r1, r4
    4866:	bc3c      	pop	{r2, r3, r4, r5}
    4868:	4690      	mov	r8, r2
    486a:	4699      	mov	r9, r3
    486c:	46a2      	mov	sl, r4
    486e:	46ab      	mov	fp, r5
    4870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4872:	4bb7      	ldr	r3, [pc, #732]	; (4b50 <__aeabi_dadd+0x39c>)
    4874:	429c      	cmp	r4, r3
    4876:	d0c6      	beq.n	4806 <__aeabi_dadd+0x52>
    4878:	2380      	movs	r3, #128	; 0x80
    487a:	041b      	lsls	r3, r3, #16
    487c:	4318      	orrs	r0, r3
    487e:	2e38      	cmp	r6, #56	; 0x38
    4880:	dd00      	ble.n	4884 <__aeabi_dadd+0xd0>
    4882:	e0eb      	b.n	4a5c <__aeabi_dadd+0x2a8>
    4884:	2e1f      	cmp	r6, #31
    4886:	dd00      	ble.n	488a <__aeabi_dadd+0xd6>
    4888:	e11e      	b.n	4ac8 <__aeabi_dadd+0x314>
    488a:	2320      	movs	r3, #32
    488c:	1b9b      	subs	r3, r3, r6
    488e:	469c      	mov	ip, r3
    4890:	0003      	movs	r3, r0
    4892:	4667      	mov	r7, ip
    4894:	40bb      	lsls	r3, r7
    4896:	4698      	mov	r8, r3
    4898:	0013      	movs	r3, r2
    489a:	4647      	mov	r7, r8
    489c:	40f3      	lsrs	r3, r6
    489e:	433b      	orrs	r3, r7
    48a0:	4667      	mov	r7, ip
    48a2:	40ba      	lsls	r2, r7
    48a4:	1e57      	subs	r7, r2, #1
    48a6:	41ba      	sbcs	r2, r7
    48a8:	4313      	orrs	r3, r2
    48aa:	0002      	movs	r2, r0
    48ac:	40f2      	lsrs	r2, r6
    48ae:	1aeb      	subs	r3, r5, r3
    48b0:	429d      	cmp	r5, r3
    48b2:	41b6      	sbcs	r6, r6
    48b4:	001d      	movs	r5, r3
    48b6:	1a8a      	subs	r2, r1, r2
    48b8:	4276      	negs	r6, r6
    48ba:	1b91      	subs	r1, r2, r6
    48bc:	020b      	lsls	r3, r1, #8
    48be:	d531      	bpl.n	4924 <__aeabi_dadd+0x170>
    48c0:	024a      	lsls	r2, r1, #9
    48c2:	0a56      	lsrs	r6, r2, #9
    48c4:	2e00      	cmp	r6, #0
    48c6:	d100      	bne.n	48ca <__aeabi_dadd+0x116>
    48c8:	e0b4      	b.n	4a34 <__aeabi_dadd+0x280>
    48ca:	0030      	movs	r0, r6
    48cc:	f001 fe40 	bl	6550 <__clzsi2>
    48d0:	0003      	movs	r3, r0
    48d2:	3b08      	subs	r3, #8
    48d4:	2b1f      	cmp	r3, #31
    48d6:	dd00      	ble.n	48da <__aeabi_dadd+0x126>
    48d8:	e0b5      	b.n	4a46 <__aeabi_dadd+0x292>
    48da:	2220      	movs	r2, #32
    48dc:	0029      	movs	r1, r5
    48de:	1ad2      	subs	r2, r2, r3
    48e0:	40d1      	lsrs	r1, r2
    48e2:	409e      	lsls	r6, r3
    48e4:	000a      	movs	r2, r1
    48e6:	409d      	lsls	r5, r3
    48e8:	4332      	orrs	r2, r6
    48ea:	429c      	cmp	r4, r3
    48ec:	dd00      	ble.n	48f0 <__aeabi_dadd+0x13c>
    48ee:	e0b1      	b.n	4a54 <__aeabi_dadd+0x2a0>
    48f0:	1b1c      	subs	r4, r3, r4
    48f2:	1c63      	adds	r3, r4, #1
    48f4:	2b1f      	cmp	r3, #31
    48f6:	dd00      	ble.n	48fa <__aeabi_dadd+0x146>
    48f8:	e0d5      	b.n	4aa6 <__aeabi_dadd+0x2f2>
    48fa:	2120      	movs	r1, #32
    48fc:	0014      	movs	r4, r2
    48fe:	0028      	movs	r0, r5
    4900:	1ac9      	subs	r1, r1, r3
    4902:	408c      	lsls	r4, r1
    4904:	40d8      	lsrs	r0, r3
    4906:	408d      	lsls	r5, r1
    4908:	4304      	orrs	r4, r0
    490a:	40da      	lsrs	r2, r3
    490c:	1e68      	subs	r0, r5, #1
    490e:	4185      	sbcs	r5, r0
    4910:	0011      	movs	r1, r2
    4912:	4325      	orrs	r5, r4
    4914:	2400      	movs	r4, #0
    4916:	e776      	b.n	4806 <__aeabi_dadd+0x52>
    4918:	4641      	mov	r1, r8
    491a:	4331      	orrs	r1, r6
    491c:	d100      	bne.n	4920 <__aeabi_dadd+0x16c>
    491e:	e234      	b.n	4d8a <__aeabi_dadd+0x5d6>
    4920:	0031      	movs	r1, r6
    4922:	4645      	mov	r5, r8
    4924:	076b      	lsls	r3, r5, #29
    4926:	d000      	beq.n	492a <__aeabi_dadd+0x176>
    4928:	e76f      	b.n	480a <__aeabi_dadd+0x56>
    492a:	4656      	mov	r6, sl
    492c:	0748      	lsls	r0, r1, #29
    492e:	08ed      	lsrs	r5, r5, #3
    4930:	08c9      	lsrs	r1, r1, #3
    4932:	4305      	orrs	r5, r0
    4934:	4b86      	ldr	r3, [pc, #536]	; (4b50 <__aeabi_dadd+0x39c>)
    4936:	429c      	cmp	r4, r3
    4938:	d035      	beq.n	49a6 <__aeabi_dadd+0x1f2>
    493a:	030a      	lsls	r2, r1, #12
    493c:	0564      	lsls	r4, r4, #21
    493e:	0b12      	lsrs	r2, r2, #12
    4940:	0d64      	lsrs	r4, r4, #21
    4942:	e77f      	b.n	4844 <__aeabi_dadd+0x90>
    4944:	4663      	mov	r3, ip
    4946:	1ae3      	subs	r3, r4, r3
    4948:	469b      	mov	fp, r3
    494a:	2b00      	cmp	r3, #0
    494c:	dc00      	bgt.n	4950 <__aeabi_dadd+0x19c>
    494e:	e08b      	b.n	4a68 <__aeabi_dadd+0x2b4>
    4950:	4667      	mov	r7, ip
    4952:	2f00      	cmp	r7, #0
    4954:	d03c      	beq.n	49d0 <__aeabi_dadd+0x21c>
    4956:	4f7e      	ldr	r7, [pc, #504]	; (4b50 <__aeabi_dadd+0x39c>)
    4958:	42bc      	cmp	r4, r7
    495a:	d100      	bne.n	495e <__aeabi_dadd+0x1aa>
    495c:	e753      	b.n	4806 <__aeabi_dadd+0x52>
    495e:	2780      	movs	r7, #128	; 0x80
    4960:	043f      	lsls	r7, r7, #16
    4962:	4338      	orrs	r0, r7
    4964:	465b      	mov	r3, fp
    4966:	2b38      	cmp	r3, #56	; 0x38
    4968:	dc00      	bgt.n	496c <__aeabi_dadd+0x1b8>
    496a:	e0f7      	b.n	4b5c <__aeabi_dadd+0x3a8>
    496c:	4302      	orrs	r2, r0
    496e:	1e50      	subs	r0, r2, #1
    4970:	4182      	sbcs	r2, r0
    4972:	2000      	movs	r0, #0
    4974:	b2d2      	uxtb	r2, r2
    4976:	1953      	adds	r3, r2, r5
    4978:	1842      	adds	r2, r0, r1
    497a:	42ab      	cmp	r3, r5
    497c:	4189      	sbcs	r1, r1
    497e:	001d      	movs	r5, r3
    4980:	4249      	negs	r1, r1
    4982:	1889      	adds	r1, r1, r2
    4984:	020b      	lsls	r3, r1, #8
    4986:	d5cd      	bpl.n	4924 <__aeabi_dadd+0x170>
    4988:	4b71      	ldr	r3, [pc, #452]	; (4b50 <__aeabi_dadd+0x39c>)
    498a:	3401      	adds	r4, #1
    498c:	429c      	cmp	r4, r3
    498e:	d100      	bne.n	4992 <__aeabi_dadd+0x1de>
    4990:	e13d      	b.n	4c0e <__aeabi_dadd+0x45a>
    4992:	2001      	movs	r0, #1
    4994:	4a6f      	ldr	r2, [pc, #444]	; (4b54 <__aeabi_dadd+0x3a0>)
    4996:	086b      	lsrs	r3, r5, #1
    4998:	400a      	ands	r2, r1
    499a:	4028      	ands	r0, r5
    499c:	4318      	orrs	r0, r3
    499e:	07d5      	lsls	r5, r2, #31
    49a0:	4305      	orrs	r5, r0
    49a2:	0851      	lsrs	r1, r2, #1
    49a4:	e72f      	b.n	4806 <__aeabi_dadd+0x52>
    49a6:	002b      	movs	r3, r5
    49a8:	430b      	orrs	r3, r1
    49aa:	d100      	bne.n	49ae <__aeabi_dadd+0x1fa>
    49ac:	e1cb      	b.n	4d46 <__aeabi_dadd+0x592>
    49ae:	2380      	movs	r3, #128	; 0x80
    49b0:	031b      	lsls	r3, r3, #12
    49b2:	430b      	orrs	r3, r1
    49b4:	031a      	lsls	r2, r3, #12
    49b6:	0b12      	lsrs	r2, r2, #12
    49b8:	e744      	b.n	4844 <__aeabi_dadd+0x90>
    49ba:	3e01      	subs	r6, #1
    49bc:	2e00      	cmp	r6, #0
    49be:	d16d      	bne.n	4a9c <__aeabi_dadd+0x2e8>
    49c0:	1aae      	subs	r6, r5, r2
    49c2:	42b5      	cmp	r5, r6
    49c4:	419b      	sbcs	r3, r3
    49c6:	1a09      	subs	r1, r1, r0
    49c8:	425b      	negs	r3, r3
    49ca:	1ac9      	subs	r1, r1, r3
    49cc:	0035      	movs	r5, r6
    49ce:	e775      	b.n	48bc <__aeabi_dadd+0x108>
    49d0:	0007      	movs	r7, r0
    49d2:	4317      	orrs	r7, r2
    49d4:	d100      	bne.n	49d8 <__aeabi_dadd+0x224>
    49d6:	e716      	b.n	4806 <__aeabi_dadd+0x52>
    49d8:	2301      	movs	r3, #1
    49da:	425b      	negs	r3, r3
    49dc:	469c      	mov	ip, r3
    49de:	44e3      	add	fp, ip
    49e0:	465b      	mov	r3, fp
    49e2:	2b00      	cmp	r3, #0
    49e4:	d000      	beq.n	49e8 <__aeabi_dadd+0x234>
    49e6:	e0e0      	b.n	4baa <__aeabi_dadd+0x3f6>
    49e8:	18aa      	adds	r2, r5, r2
    49ea:	42aa      	cmp	r2, r5
    49ec:	419b      	sbcs	r3, r3
    49ee:	1809      	adds	r1, r1, r0
    49f0:	425b      	negs	r3, r3
    49f2:	1859      	adds	r1, r3, r1
    49f4:	0015      	movs	r5, r2
    49f6:	e7c5      	b.n	4984 <__aeabi_dadd+0x1d0>
    49f8:	2e00      	cmp	r6, #0
    49fa:	d175      	bne.n	4ae8 <__aeabi_dadd+0x334>
    49fc:	1c66      	adds	r6, r4, #1
    49fe:	0576      	lsls	r6, r6, #21
    4a00:	0d76      	lsrs	r6, r6, #21
    4a02:	2e01      	cmp	r6, #1
    4a04:	dc00      	bgt.n	4a08 <__aeabi_dadd+0x254>
    4a06:	e0f3      	b.n	4bf0 <__aeabi_dadd+0x43c>
    4a08:	1aae      	subs	r6, r5, r2
    4a0a:	46b0      	mov	r8, r6
    4a0c:	4545      	cmp	r5, r8
    4a0e:	41bf      	sbcs	r7, r7
    4a10:	1a0e      	subs	r6, r1, r0
    4a12:	427f      	negs	r7, r7
    4a14:	1bf6      	subs	r6, r6, r7
    4a16:	0237      	lsls	r7, r6, #8
    4a18:	d400      	bmi.n	4a1c <__aeabi_dadd+0x268>
    4a1a:	e08f      	b.n	4b3c <__aeabi_dadd+0x388>
    4a1c:	1b55      	subs	r5, r2, r5
    4a1e:	42aa      	cmp	r2, r5
    4a20:	41b6      	sbcs	r6, r6
    4a22:	1a41      	subs	r1, r0, r1
    4a24:	4276      	negs	r6, r6
    4a26:	1b8e      	subs	r6, r1, r6
    4a28:	469a      	mov	sl, r3
    4a2a:	e74b      	b.n	48c4 <__aeabi_dadd+0x110>
    4a2c:	4656      	mov	r6, sl
    4a2e:	2200      	movs	r2, #0
    4a30:	2500      	movs	r5, #0
    4a32:	e707      	b.n	4844 <__aeabi_dadd+0x90>
    4a34:	0028      	movs	r0, r5
    4a36:	f001 fd8b 	bl	6550 <__clzsi2>
    4a3a:	3020      	adds	r0, #32
    4a3c:	0003      	movs	r3, r0
    4a3e:	3b08      	subs	r3, #8
    4a40:	2b1f      	cmp	r3, #31
    4a42:	dc00      	bgt.n	4a46 <__aeabi_dadd+0x292>
    4a44:	e749      	b.n	48da <__aeabi_dadd+0x126>
    4a46:	002a      	movs	r2, r5
    4a48:	3828      	subs	r0, #40	; 0x28
    4a4a:	4082      	lsls	r2, r0
    4a4c:	2500      	movs	r5, #0
    4a4e:	429c      	cmp	r4, r3
    4a50:	dc00      	bgt.n	4a54 <__aeabi_dadd+0x2a0>
    4a52:	e74d      	b.n	48f0 <__aeabi_dadd+0x13c>
    4a54:	493f      	ldr	r1, [pc, #252]	; (4b54 <__aeabi_dadd+0x3a0>)
    4a56:	1ae4      	subs	r4, r4, r3
    4a58:	4011      	ands	r1, r2
    4a5a:	e6d4      	b.n	4806 <__aeabi_dadd+0x52>
    4a5c:	4302      	orrs	r2, r0
    4a5e:	1e50      	subs	r0, r2, #1
    4a60:	4182      	sbcs	r2, r0
    4a62:	b2d3      	uxtb	r3, r2
    4a64:	2200      	movs	r2, #0
    4a66:	e722      	b.n	48ae <__aeabi_dadd+0xfa>
    4a68:	2b00      	cmp	r3, #0
    4a6a:	d000      	beq.n	4a6e <__aeabi_dadd+0x2ba>
    4a6c:	e0f3      	b.n	4c56 <__aeabi_dadd+0x4a2>
    4a6e:	1c63      	adds	r3, r4, #1
    4a70:	469c      	mov	ip, r3
    4a72:	055b      	lsls	r3, r3, #21
    4a74:	0d5b      	lsrs	r3, r3, #21
    4a76:	2b01      	cmp	r3, #1
    4a78:	dc00      	bgt.n	4a7c <__aeabi_dadd+0x2c8>
    4a7a:	e09f      	b.n	4bbc <__aeabi_dadd+0x408>
    4a7c:	4b34      	ldr	r3, [pc, #208]	; (4b50 <__aeabi_dadd+0x39c>)
    4a7e:	459c      	cmp	ip, r3
    4a80:	d100      	bne.n	4a84 <__aeabi_dadd+0x2d0>
    4a82:	e0c3      	b.n	4c0c <__aeabi_dadd+0x458>
    4a84:	18aa      	adds	r2, r5, r2
    4a86:	1809      	adds	r1, r1, r0
    4a88:	42aa      	cmp	r2, r5
    4a8a:	4180      	sbcs	r0, r0
    4a8c:	4240      	negs	r0, r0
    4a8e:	1841      	adds	r1, r0, r1
    4a90:	07cd      	lsls	r5, r1, #31
    4a92:	0852      	lsrs	r2, r2, #1
    4a94:	4315      	orrs	r5, r2
    4a96:	0849      	lsrs	r1, r1, #1
    4a98:	4664      	mov	r4, ip
    4a9a:	e6b4      	b.n	4806 <__aeabi_dadd+0x52>
    4a9c:	4b2c      	ldr	r3, [pc, #176]	; (4b50 <__aeabi_dadd+0x39c>)
    4a9e:	429c      	cmp	r4, r3
    4aa0:	d000      	beq.n	4aa4 <__aeabi_dadd+0x2f0>
    4aa2:	e6ec      	b.n	487e <__aeabi_dadd+0xca>
    4aa4:	e6af      	b.n	4806 <__aeabi_dadd+0x52>
    4aa6:	0011      	movs	r1, r2
    4aa8:	3c1f      	subs	r4, #31
    4aaa:	40e1      	lsrs	r1, r4
    4aac:	000c      	movs	r4, r1
    4aae:	2b20      	cmp	r3, #32
    4ab0:	d100      	bne.n	4ab4 <__aeabi_dadd+0x300>
    4ab2:	e07f      	b.n	4bb4 <__aeabi_dadd+0x400>
    4ab4:	2140      	movs	r1, #64	; 0x40
    4ab6:	1acb      	subs	r3, r1, r3
    4ab8:	409a      	lsls	r2, r3
    4aba:	4315      	orrs	r5, r2
    4abc:	1e6a      	subs	r2, r5, #1
    4abe:	4195      	sbcs	r5, r2
    4ac0:	2100      	movs	r1, #0
    4ac2:	4325      	orrs	r5, r4
    4ac4:	2400      	movs	r4, #0
    4ac6:	e72d      	b.n	4924 <__aeabi_dadd+0x170>
    4ac8:	0033      	movs	r3, r6
    4aca:	0007      	movs	r7, r0
    4acc:	3b20      	subs	r3, #32
    4ace:	40df      	lsrs	r7, r3
    4ad0:	003b      	movs	r3, r7
    4ad2:	2e20      	cmp	r6, #32
    4ad4:	d070      	beq.n	4bb8 <__aeabi_dadd+0x404>
    4ad6:	2740      	movs	r7, #64	; 0x40
    4ad8:	1bbe      	subs	r6, r7, r6
    4ada:	40b0      	lsls	r0, r6
    4adc:	4302      	orrs	r2, r0
    4ade:	1e50      	subs	r0, r2, #1
    4ae0:	4182      	sbcs	r2, r0
    4ae2:	4313      	orrs	r3, r2
    4ae4:	2200      	movs	r2, #0
    4ae6:	e6e2      	b.n	48ae <__aeabi_dadd+0xfa>
    4ae8:	2c00      	cmp	r4, #0
    4aea:	d04f      	beq.n	4b8c <__aeabi_dadd+0x3d8>
    4aec:	4c18      	ldr	r4, [pc, #96]	; (4b50 <__aeabi_dadd+0x39c>)
    4aee:	45a4      	cmp	ip, r4
    4af0:	d100      	bne.n	4af4 <__aeabi_dadd+0x340>
    4af2:	e0ab      	b.n	4c4c <__aeabi_dadd+0x498>
    4af4:	2480      	movs	r4, #128	; 0x80
    4af6:	0424      	lsls	r4, r4, #16
    4af8:	4276      	negs	r6, r6
    4afa:	4321      	orrs	r1, r4
    4afc:	2e38      	cmp	r6, #56	; 0x38
    4afe:	dd00      	ble.n	4b02 <__aeabi_dadd+0x34e>
    4b00:	e0df      	b.n	4cc2 <__aeabi_dadd+0x50e>
    4b02:	2e1f      	cmp	r6, #31
    4b04:	dd00      	ble.n	4b08 <__aeabi_dadd+0x354>
    4b06:	e143      	b.n	4d90 <__aeabi_dadd+0x5dc>
    4b08:	2720      	movs	r7, #32
    4b0a:	1bbc      	subs	r4, r7, r6
    4b0c:	46a1      	mov	r9, r4
    4b0e:	000c      	movs	r4, r1
    4b10:	464f      	mov	r7, r9
    4b12:	40bc      	lsls	r4, r7
    4b14:	46a0      	mov	r8, r4
    4b16:	002c      	movs	r4, r5
    4b18:	4647      	mov	r7, r8
    4b1a:	40f4      	lsrs	r4, r6
    4b1c:	433c      	orrs	r4, r7
    4b1e:	464f      	mov	r7, r9
    4b20:	40bd      	lsls	r5, r7
    4b22:	1e6f      	subs	r7, r5, #1
    4b24:	41bd      	sbcs	r5, r7
    4b26:	40f1      	lsrs	r1, r6
    4b28:	432c      	orrs	r4, r5
    4b2a:	1b15      	subs	r5, r2, r4
    4b2c:	42aa      	cmp	r2, r5
    4b2e:	4192      	sbcs	r2, r2
    4b30:	1a41      	subs	r1, r0, r1
    4b32:	4252      	negs	r2, r2
    4b34:	1a89      	subs	r1, r1, r2
    4b36:	4664      	mov	r4, ip
    4b38:	469a      	mov	sl, r3
    4b3a:	e6bf      	b.n	48bc <__aeabi_dadd+0x108>
    4b3c:	4641      	mov	r1, r8
    4b3e:	4645      	mov	r5, r8
    4b40:	4331      	orrs	r1, r6
    4b42:	d000      	beq.n	4b46 <__aeabi_dadd+0x392>
    4b44:	e6be      	b.n	48c4 <__aeabi_dadd+0x110>
    4b46:	2600      	movs	r6, #0
    4b48:	2400      	movs	r4, #0
    4b4a:	2500      	movs	r5, #0
    4b4c:	e6f2      	b.n	4934 <__aeabi_dadd+0x180>
    4b4e:	46c0      	nop			; (mov r8, r8)
    4b50:	000007ff 	.word	0x000007ff
    4b54:	ff7fffff 	.word	0xff7fffff
    4b58:	800fffff 	.word	0x800fffff
    4b5c:	2b1f      	cmp	r3, #31
    4b5e:	dc59      	bgt.n	4c14 <__aeabi_dadd+0x460>
    4b60:	2720      	movs	r7, #32
    4b62:	1aff      	subs	r7, r7, r3
    4b64:	46bc      	mov	ip, r7
    4b66:	0007      	movs	r7, r0
    4b68:	4663      	mov	r3, ip
    4b6a:	409f      	lsls	r7, r3
    4b6c:	465b      	mov	r3, fp
    4b6e:	46b9      	mov	r9, r7
    4b70:	0017      	movs	r7, r2
    4b72:	40df      	lsrs	r7, r3
    4b74:	46b8      	mov	r8, r7
    4b76:	464f      	mov	r7, r9
    4b78:	4643      	mov	r3, r8
    4b7a:	431f      	orrs	r7, r3
    4b7c:	4663      	mov	r3, ip
    4b7e:	409a      	lsls	r2, r3
    4b80:	1e53      	subs	r3, r2, #1
    4b82:	419a      	sbcs	r2, r3
    4b84:	465b      	mov	r3, fp
    4b86:	433a      	orrs	r2, r7
    4b88:	40d8      	lsrs	r0, r3
    4b8a:	e6f4      	b.n	4976 <__aeabi_dadd+0x1c2>
    4b8c:	000c      	movs	r4, r1
    4b8e:	432c      	orrs	r4, r5
    4b90:	d05c      	beq.n	4c4c <__aeabi_dadd+0x498>
    4b92:	43f6      	mvns	r6, r6
    4b94:	2e00      	cmp	r6, #0
    4b96:	d155      	bne.n	4c44 <__aeabi_dadd+0x490>
    4b98:	1b55      	subs	r5, r2, r5
    4b9a:	42aa      	cmp	r2, r5
    4b9c:	41a4      	sbcs	r4, r4
    4b9e:	1a41      	subs	r1, r0, r1
    4ba0:	4264      	negs	r4, r4
    4ba2:	1b09      	subs	r1, r1, r4
    4ba4:	469a      	mov	sl, r3
    4ba6:	4664      	mov	r4, ip
    4ba8:	e688      	b.n	48bc <__aeabi_dadd+0x108>
    4baa:	4f96      	ldr	r7, [pc, #600]	; (4e04 <__aeabi_dadd+0x650>)
    4bac:	42bc      	cmp	r4, r7
    4bae:	d000      	beq.n	4bb2 <__aeabi_dadd+0x3fe>
    4bb0:	e6d8      	b.n	4964 <__aeabi_dadd+0x1b0>
    4bb2:	e628      	b.n	4806 <__aeabi_dadd+0x52>
    4bb4:	2200      	movs	r2, #0
    4bb6:	e780      	b.n	4aba <__aeabi_dadd+0x306>
    4bb8:	2000      	movs	r0, #0
    4bba:	e78f      	b.n	4adc <__aeabi_dadd+0x328>
    4bbc:	000b      	movs	r3, r1
    4bbe:	432b      	orrs	r3, r5
    4bc0:	2c00      	cmp	r4, #0
    4bc2:	d000      	beq.n	4bc6 <__aeabi_dadd+0x412>
    4bc4:	e0c2      	b.n	4d4c <__aeabi_dadd+0x598>
    4bc6:	2b00      	cmp	r3, #0
    4bc8:	d100      	bne.n	4bcc <__aeabi_dadd+0x418>
    4bca:	e101      	b.n	4dd0 <__aeabi_dadd+0x61c>
    4bcc:	0003      	movs	r3, r0
    4bce:	4313      	orrs	r3, r2
    4bd0:	d100      	bne.n	4bd4 <__aeabi_dadd+0x420>
    4bd2:	e618      	b.n	4806 <__aeabi_dadd+0x52>
    4bd4:	18ab      	adds	r3, r5, r2
    4bd6:	42ab      	cmp	r3, r5
    4bd8:	41b6      	sbcs	r6, r6
    4bda:	1809      	adds	r1, r1, r0
    4bdc:	4276      	negs	r6, r6
    4bde:	1871      	adds	r1, r6, r1
    4be0:	020a      	lsls	r2, r1, #8
    4be2:	d400      	bmi.n	4be6 <__aeabi_dadd+0x432>
    4be4:	e109      	b.n	4dfa <__aeabi_dadd+0x646>
    4be6:	4a88      	ldr	r2, [pc, #544]	; (4e08 <__aeabi_dadd+0x654>)
    4be8:	001d      	movs	r5, r3
    4bea:	4011      	ands	r1, r2
    4bec:	4664      	mov	r4, ip
    4bee:	e60a      	b.n	4806 <__aeabi_dadd+0x52>
    4bf0:	2c00      	cmp	r4, #0
    4bf2:	d15b      	bne.n	4cac <__aeabi_dadd+0x4f8>
    4bf4:	000e      	movs	r6, r1
    4bf6:	432e      	orrs	r6, r5
    4bf8:	d000      	beq.n	4bfc <__aeabi_dadd+0x448>
    4bfa:	e08a      	b.n	4d12 <__aeabi_dadd+0x55e>
    4bfc:	0001      	movs	r1, r0
    4bfe:	4311      	orrs	r1, r2
    4c00:	d100      	bne.n	4c04 <__aeabi_dadd+0x450>
    4c02:	e0c2      	b.n	4d8a <__aeabi_dadd+0x5d6>
    4c04:	0001      	movs	r1, r0
    4c06:	0015      	movs	r5, r2
    4c08:	469a      	mov	sl, r3
    4c0a:	e5fc      	b.n	4806 <__aeabi_dadd+0x52>
    4c0c:	4664      	mov	r4, ip
    4c0e:	2100      	movs	r1, #0
    4c10:	2500      	movs	r5, #0
    4c12:	e68f      	b.n	4934 <__aeabi_dadd+0x180>
    4c14:	2320      	movs	r3, #32
    4c16:	425b      	negs	r3, r3
    4c18:	469c      	mov	ip, r3
    4c1a:	44dc      	add	ip, fp
    4c1c:	4663      	mov	r3, ip
    4c1e:	0007      	movs	r7, r0
    4c20:	40df      	lsrs	r7, r3
    4c22:	465b      	mov	r3, fp
    4c24:	46bc      	mov	ip, r7
    4c26:	2b20      	cmp	r3, #32
    4c28:	d100      	bne.n	4c2c <__aeabi_dadd+0x478>
    4c2a:	e0ac      	b.n	4d86 <__aeabi_dadd+0x5d2>
    4c2c:	2340      	movs	r3, #64	; 0x40
    4c2e:	465f      	mov	r7, fp
    4c30:	1bdb      	subs	r3, r3, r7
    4c32:	4098      	lsls	r0, r3
    4c34:	4302      	orrs	r2, r0
    4c36:	1e50      	subs	r0, r2, #1
    4c38:	4182      	sbcs	r2, r0
    4c3a:	4663      	mov	r3, ip
    4c3c:	4313      	orrs	r3, r2
    4c3e:	001a      	movs	r2, r3
    4c40:	2000      	movs	r0, #0
    4c42:	e698      	b.n	4976 <__aeabi_dadd+0x1c2>
    4c44:	4c6f      	ldr	r4, [pc, #444]	; (4e04 <__aeabi_dadd+0x650>)
    4c46:	45a4      	cmp	ip, r4
    4c48:	d000      	beq.n	4c4c <__aeabi_dadd+0x498>
    4c4a:	e757      	b.n	4afc <__aeabi_dadd+0x348>
    4c4c:	0001      	movs	r1, r0
    4c4e:	0015      	movs	r5, r2
    4c50:	4664      	mov	r4, ip
    4c52:	469a      	mov	sl, r3
    4c54:	e5d7      	b.n	4806 <__aeabi_dadd+0x52>
    4c56:	2c00      	cmp	r4, #0
    4c58:	d139      	bne.n	4cce <__aeabi_dadd+0x51a>
    4c5a:	000c      	movs	r4, r1
    4c5c:	432c      	orrs	r4, r5
    4c5e:	d06e      	beq.n	4d3e <__aeabi_dadd+0x58a>
    4c60:	43db      	mvns	r3, r3
    4c62:	2b00      	cmp	r3, #0
    4c64:	d01a      	beq.n	4c9c <__aeabi_dadd+0x4e8>
    4c66:	4c67      	ldr	r4, [pc, #412]	; (4e04 <__aeabi_dadd+0x650>)
    4c68:	45a4      	cmp	ip, r4
    4c6a:	d068      	beq.n	4d3e <__aeabi_dadd+0x58a>
    4c6c:	2b38      	cmp	r3, #56	; 0x38
    4c6e:	dd00      	ble.n	4c72 <__aeabi_dadd+0x4be>
    4c70:	e0a4      	b.n	4dbc <__aeabi_dadd+0x608>
    4c72:	2b1f      	cmp	r3, #31
    4c74:	dd00      	ble.n	4c78 <__aeabi_dadd+0x4c4>
    4c76:	e0ae      	b.n	4dd6 <__aeabi_dadd+0x622>
    4c78:	2420      	movs	r4, #32
    4c7a:	000f      	movs	r7, r1
    4c7c:	1ae4      	subs	r4, r4, r3
    4c7e:	40a7      	lsls	r7, r4
    4c80:	46b9      	mov	r9, r7
    4c82:	002f      	movs	r7, r5
    4c84:	40df      	lsrs	r7, r3
    4c86:	46b8      	mov	r8, r7
    4c88:	46a3      	mov	fp, r4
    4c8a:	464f      	mov	r7, r9
    4c8c:	4644      	mov	r4, r8
    4c8e:	4327      	orrs	r7, r4
    4c90:	465c      	mov	r4, fp
    4c92:	40a5      	lsls	r5, r4
    4c94:	1e6c      	subs	r4, r5, #1
    4c96:	41a5      	sbcs	r5, r4
    4c98:	40d9      	lsrs	r1, r3
    4c9a:	433d      	orrs	r5, r7
    4c9c:	18ad      	adds	r5, r5, r2
    4c9e:	4295      	cmp	r5, r2
    4ca0:	419b      	sbcs	r3, r3
    4ca2:	1809      	adds	r1, r1, r0
    4ca4:	425b      	negs	r3, r3
    4ca6:	1859      	adds	r1, r3, r1
    4ca8:	4664      	mov	r4, ip
    4caa:	e66b      	b.n	4984 <__aeabi_dadd+0x1d0>
    4cac:	000c      	movs	r4, r1
    4cae:	432c      	orrs	r4, r5
    4cb0:	d115      	bne.n	4cde <__aeabi_dadd+0x52a>
    4cb2:	0001      	movs	r1, r0
    4cb4:	4311      	orrs	r1, r2
    4cb6:	d07b      	beq.n	4db0 <__aeabi_dadd+0x5fc>
    4cb8:	0001      	movs	r1, r0
    4cba:	0015      	movs	r5, r2
    4cbc:	469a      	mov	sl, r3
    4cbe:	4c51      	ldr	r4, [pc, #324]	; (4e04 <__aeabi_dadd+0x650>)
    4cc0:	e5a1      	b.n	4806 <__aeabi_dadd+0x52>
    4cc2:	430d      	orrs	r5, r1
    4cc4:	1e69      	subs	r1, r5, #1
    4cc6:	418d      	sbcs	r5, r1
    4cc8:	2100      	movs	r1, #0
    4cca:	b2ec      	uxtb	r4, r5
    4ccc:	e72d      	b.n	4b2a <__aeabi_dadd+0x376>
    4cce:	4c4d      	ldr	r4, [pc, #308]	; (4e04 <__aeabi_dadd+0x650>)
    4cd0:	45a4      	cmp	ip, r4
    4cd2:	d034      	beq.n	4d3e <__aeabi_dadd+0x58a>
    4cd4:	2480      	movs	r4, #128	; 0x80
    4cd6:	0424      	lsls	r4, r4, #16
    4cd8:	425b      	negs	r3, r3
    4cda:	4321      	orrs	r1, r4
    4cdc:	e7c6      	b.n	4c6c <__aeabi_dadd+0x4b8>
    4cde:	0004      	movs	r4, r0
    4ce0:	4314      	orrs	r4, r2
    4ce2:	d04e      	beq.n	4d82 <__aeabi_dadd+0x5ce>
    4ce4:	08ed      	lsrs	r5, r5, #3
    4ce6:	074c      	lsls	r4, r1, #29
    4ce8:	432c      	orrs	r4, r5
    4cea:	2580      	movs	r5, #128	; 0x80
    4cec:	08c9      	lsrs	r1, r1, #3
    4cee:	032d      	lsls	r5, r5, #12
    4cf0:	4229      	tst	r1, r5
    4cf2:	d008      	beq.n	4d06 <__aeabi_dadd+0x552>
    4cf4:	08c6      	lsrs	r6, r0, #3
    4cf6:	422e      	tst	r6, r5
    4cf8:	d105      	bne.n	4d06 <__aeabi_dadd+0x552>
    4cfa:	08d2      	lsrs	r2, r2, #3
    4cfc:	0741      	lsls	r1, r0, #29
    4cfe:	4311      	orrs	r1, r2
    4d00:	000c      	movs	r4, r1
    4d02:	469a      	mov	sl, r3
    4d04:	0031      	movs	r1, r6
    4d06:	0f62      	lsrs	r2, r4, #29
    4d08:	00c9      	lsls	r1, r1, #3
    4d0a:	00e5      	lsls	r5, r4, #3
    4d0c:	4311      	orrs	r1, r2
    4d0e:	4c3d      	ldr	r4, [pc, #244]	; (4e04 <__aeabi_dadd+0x650>)
    4d10:	e579      	b.n	4806 <__aeabi_dadd+0x52>
    4d12:	0006      	movs	r6, r0
    4d14:	4316      	orrs	r6, r2
    4d16:	d100      	bne.n	4d1a <__aeabi_dadd+0x566>
    4d18:	e575      	b.n	4806 <__aeabi_dadd+0x52>
    4d1a:	1aae      	subs	r6, r5, r2
    4d1c:	46b0      	mov	r8, r6
    4d1e:	4545      	cmp	r5, r8
    4d20:	41bf      	sbcs	r7, r7
    4d22:	1a0e      	subs	r6, r1, r0
    4d24:	427f      	negs	r7, r7
    4d26:	1bf6      	subs	r6, r6, r7
    4d28:	0237      	lsls	r7, r6, #8
    4d2a:	d400      	bmi.n	4d2e <__aeabi_dadd+0x57a>
    4d2c:	e5f4      	b.n	4918 <__aeabi_dadd+0x164>
    4d2e:	1b55      	subs	r5, r2, r5
    4d30:	42aa      	cmp	r2, r5
    4d32:	41b6      	sbcs	r6, r6
    4d34:	1a41      	subs	r1, r0, r1
    4d36:	4276      	negs	r6, r6
    4d38:	1b89      	subs	r1, r1, r6
    4d3a:	469a      	mov	sl, r3
    4d3c:	e563      	b.n	4806 <__aeabi_dadd+0x52>
    4d3e:	0001      	movs	r1, r0
    4d40:	0015      	movs	r5, r2
    4d42:	4664      	mov	r4, ip
    4d44:	e55f      	b.n	4806 <__aeabi_dadd+0x52>
    4d46:	2200      	movs	r2, #0
    4d48:	2500      	movs	r5, #0
    4d4a:	e57b      	b.n	4844 <__aeabi_dadd+0x90>
    4d4c:	2b00      	cmp	r3, #0
    4d4e:	d03b      	beq.n	4dc8 <__aeabi_dadd+0x614>
    4d50:	0003      	movs	r3, r0
    4d52:	4313      	orrs	r3, r2
    4d54:	d015      	beq.n	4d82 <__aeabi_dadd+0x5ce>
    4d56:	08ed      	lsrs	r5, r5, #3
    4d58:	074b      	lsls	r3, r1, #29
    4d5a:	432b      	orrs	r3, r5
    4d5c:	2580      	movs	r5, #128	; 0x80
    4d5e:	08c9      	lsrs	r1, r1, #3
    4d60:	032d      	lsls	r5, r5, #12
    4d62:	4229      	tst	r1, r5
    4d64:	d007      	beq.n	4d76 <__aeabi_dadd+0x5c2>
    4d66:	08c4      	lsrs	r4, r0, #3
    4d68:	422c      	tst	r4, r5
    4d6a:	d104      	bne.n	4d76 <__aeabi_dadd+0x5c2>
    4d6c:	0741      	lsls	r1, r0, #29
    4d6e:	000b      	movs	r3, r1
    4d70:	0021      	movs	r1, r4
    4d72:	08d2      	lsrs	r2, r2, #3
    4d74:	4313      	orrs	r3, r2
    4d76:	00c9      	lsls	r1, r1, #3
    4d78:	0f5a      	lsrs	r2, r3, #29
    4d7a:	4311      	orrs	r1, r2
    4d7c:	00dd      	lsls	r5, r3, #3
    4d7e:	4c21      	ldr	r4, [pc, #132]	; (4e04 <__aeabi_dadd+0x650>)
    4d80:	e541      	b.n	4806 <__aeabi_dadd+0x52>
    4d82:	4c20      	ldr	r4, [pc, #128]	; (4e04 <__aeabi_dadd+0x650>)
    4d84:	e53f      	b.n	4806 <__aeabi_dadd+0x52>
    4d86:	2000      	movs	r0, #0
    4d88:	e754      	b.n	4c34 <__aeabi_dadd+0x480>
    4d8a:	2600      	movs	r6, #0
    4d8c:	2500      	movs	r5, #0
    4d8e:	e5d1      	b.n	4934 <__aeabi_dadd+0x180>
    4d90:	0034      	movs	r4, r6
    4d92:	000f      	movs	r7, r1
    4d94:	3c20      	subs	r4, #32
    4d96:	40e7      	lsrs	r7, r4
    4d98:	003c      	movs	r4, r7
    4d9a:	2e20      	cmp	r6, #32
    4d9c:	d02b      	beq.n	4df6 <__aeabi_dadd+0x642>
    4d9e:	2740      	movs	r7, #64	; 0x40
    4da0:	1bbe      	subs	r6, r7, r6
    4da2:	40b1      	lsls	r1, r6
    4da4:	430d      	orrs	r5, r1
    4da6:	1e69      	subs	r1, r5, #1
    4da8:	418d      	sbcs	r5, r1
    4daa:	2100      	movs	r1, #0
    4dac:	432c      	orrs	r4, r5
    4dae:	e6bc      	b.n	4b2a <__aeabi_dadd+0x376>
    4db0:	2180      	movs	r1, #128	; 0x80
    4db2:	2600      	movs	r6, #0
    4db4:	0309      	lsls	r1, r1, #12
    4db6:	4c13      	ldr	r4, [pc, #76]	; (4e04 <__aeabi_dadd+0x650>)
    4db8:	2500      	movs	r5, #0
    4dba:	e5bb      	b.n	4934 <__aeabi_dadd+0x180>
    4dbc:	430d      	orrs	r5, r1
    4dbe:	1e69      	subs	r1, r5, #1
    4dc0:	418d      	sbcs	r5, r1
    4dc2:	2100      	movs	r1, #0
    4dc4:	b2ed      	uxtb	r5, r5
    4dc6:	e769      	b.n	4c9c <__aeabi_dadd+0x4e8>
    4dc8:	0001      	movs	r1, r0
    4dca:	0015      	movs	r5, r2
    4dcc:	4c0d      	ldr	r4, [pc, #52]	; (4e04 <__aeabi_dadd+0x650>)
    4dce:	e51a      	b.n	4806 <__aeabi_dadd+0x52>
    4dd0:	0001      	movs	r1, r0
    4dd2:	0015      	movs	r5, r2
    4dd4:	e517      	b.n	4806 <__aeabi_dadd+0x52>
    4dd6:	001c      	movs	r4, r3
    4dd8:	000f      	movs	r7, r1
    4dda:	3c20      	subs	r4, #32
    4ddc:	40e7      	lsrs	r7, r4
    4dde:	003c      	movs	r4, r7
    4de0:	2b20      	cmp	r3, #32
    4de2:	d00c      	beq.n	4dfe <__aeabi_dadd+0x64a>
    4de4:	2740      	movs	r7, #64	; 0x40
    4de6:	1afb      	subs	r3, r7, r3
    4de8:	4099      	lsls	r1, r3
    4dea:	430d      	orrs	r5, r1
    4dec:	1e69      	subs	r1, r5, #1
    4dee:	418d      	sbcs	r5, r1
    4df0:	2100      	movs	r1, #0
    4df2:	4325      	orrs	r5, r4
    4df4:	e752      	b.n	4c9c <__aeabi_dadd+0x4e8>
    4df6:	2100      	movs	r1, #0
    4df8:	e7d4      	b.n	4da4 <__aeabi_dadd+0x5f0>
    4dfa:	001d      	movs	r5, r3
    4dfc:	e592      	b.n	4924 <__aeabi_dadd+0x170>
    4dfe:	2100      	movs	r1, #0
    4e00:	e7f3      	b.n	4dea <__aeabi_dadd+0x636>
    4e02:	46c0      	nop			; (mov r8, r8)
    4e04:	000007ff 	.word	0x000007ff
    4e08:	ff7fffff 	.word	0xff7fffff

00004e0c <__aeabi_ddiv>:
    4e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e0e:	4656      	mov	r6, sl
    4e10:	464d      	mov	r5, r9
    4e12:	4644      	mov	r4, r8
    4e14:	465f      	mov	r7, fp
    4e16:	b4f0      	push	{r4, r5, r6, r7}
    4e18:	001d      	movs	r5, r3
    4e1a:	030e      	lsls	r6, r1, #12
    4e1c:	004c      	lsls	r4, r1, #1
    4e1e:	0fcb      	lsrs	r3, r1, #31
    4e20:	b087      	sub	sp, #28
    4e22:	0007      	movs	r7, r0
    4e24:	4692      	mov	sl, r2
    4e26:	4681      	mov	r9, r0
    4e28:	0b36      	lsrs	r6, r6, #12
    4e2a:	0d64      	lsrs	r4, r4, #21
    4e2c:	4698      	mov	r8, r3
    4e2e:	d06a      	beq.n	4f06 <__aeabi_ddiv+0xfa>
    4e30:	4b6d      	ldr	r3, [pc, #436]	; (4fe8 <__aeabi_ddiv+0x1dc>)
    4e32:	429c      	cmp	r4, r3
    4e34:	d035      	beq.n	4ea2 <__aeabi_ddiv+0x96>
    4e36:	2280      	movs	r2, #128	; 0x80
    4e38:	0f43      	lsrs	r3, r0, #29
    4e3a:	0412      	lsls	r2, r2, #16
    4e3c:	4313      	orrs	r3, r2
    4e3e:	00f6      	lsls	r6, r6, #3
    4e40:	431e      	orrs	r6, r3
    4e42:	00c3      	lsls	r3, r0, #3
    4e44:	4699      	mov	r9, r3
    4e46:	4b69      	ldr	r3, [pc, #420]	; (4fec <__aeabi_ddiv+0x1e0>)
    4e48:	2700      	movs	r7, #0
    4e4a:	469c      	mov	ip, r3
    4e4c:	2300      	movs	r3, #0
    4e4e:	4464      	add	r4, ip
    4e50:	9302      	str	r3, [sp, #8]
    4e52:	032b      	lsls	r3, r5, #12
    4e54:	0068      	lsls	r0, r5, #1
    4e56:	0b1b      	lsrs	r3, r3, #12
    4e58:	0fed      	lsrs	r5, r5, #31
    4e5a:	4651      	mov	r1, sl
    4e5c:	469b      	mov	fp, r3
    4e5e:	0d40      	lsrs	r0, r0, #21
    4e60:	9500      	str	r5, [sp, #0]
    4e62:	d100      	bne.n	4e66 <__aeabi_ddiv+0x5a>
    4e64:	e078      	b.n	4f58 <__aeabi_ddiv+0x14c>
    4e66:	4b60      	ldr	r3, [pc, #384]	; (4fe8 <__aeabi_ddiv+0x1dc>)
    4e68:	4298      	cmp	r0, r3
    4e6a:	d06c      	beq.n	4f46 <__aeabi_ddiv+0x13a>
    4e6c:	465b      	mov	r3, fp
    4e6e:	00da      	lsls	r2, r3, #3
    4e70:	0f4b      	lsrs	r3, r1, #29
    4e72:	2180      	movs	r1, #128	; 0x80
    4e74:	0409      	lsls	r1, r1, #16
    4e76:	430b      	orrs	r3, r1
    4e78:	4313      	orrs	r3, r2
    4e7a:	469b      	mov	fp, r3
    4e7c:	4653      	mov	r3, sl
    4e7e:	00d9      	lsls	r1, r3, #3
    4e80:	4b5a      	ldr	r3, [pc, #360]	; (4fec <__aeabi_ddiv+0x1e0>)
    4e82:	469c      	mov	ip, r3
    4e84:	2300      	movs	r3, #0
    4e86:	4460      	add	r0, ip
    4e88:	4642      	mov	r2, r8
    4e8a:	1a20      	subs	r0, r4, r0
    4e8c:	406a      	eors	r2, r5
    4e8e:	4692      	mov	sl, r2
    4e90:	9001      	str	r0, [sp, #4]
    4e92:	431f      	orrs	r7, r3
    4e94:	2f0f      	cmp	r7, #15
    4e96:	d900      	bls.n	4e9a <__aeabi_ddiv+0x8e>
    4e98:	e0b0      	b.n	4ffc <__aeabi_ddiv+0x1f0>
    4e9a:	4855      	ldr	r0, [pc, #340]	; (4ff0 <__aeabi_ddiv+0x1e4>)
    4e9c:	00bf      	lsls	r7, r7, #2
    4e9e:	59c0      	ldr	r0, [r0, r7]
    4ea0:	4687      	mov	pc, r0
    4ea2:	4337      	orrs	r7, r6
    4ea4:	d000      	beq.n	4ea8 <__aeabi_ddiv+0x9c>
    4ea6:	e088      	b.n	4fba <__aeabi_ddiv+0x1ae>
    4ea8:	2300      	movs	r3, #0
    4eaa:	4699      	mov	r9, r3
    4eac:	3302      	adds	r3, #2
    4eae:	2708      	movs	r7, #8
    4eb0:	2600      	movs	r6, #0
    4eb2:	9302      	str	r3, [sp, #8]
    4eb4:	e7cd      	b.n	4e52 <__aeabi_ddiv+0x46>
    4eb6:	4643      	mov	r3, r8
    4eb8:	46b3      	mov	fp, r6
    4eba:	4649      	mov	r1, r9
    4ebc:	9300      	str	r3, [sp, #0]
    4ebe:	9b02      	ldr	r3, [sp, #8]
    4ec0:	9a00      	ldr	r2, [sp, #0]
    4ec2:	4692      	mov	sl, r2
    4ec4:	2b02      	cmp	r3, #2
    4ec6:	d000      	beq.n	4eca <__aeabi_ddiv+0xbe>
    4ec8:	e1bf      	b.n	524a <__aeabi_ddiv+0x43e>
    4eca:	2100      	movs	r1, #0
    4ecc:	4653      	mov	r3, sl
    4ece:	2201      	movs	r2, #1
    4ed0:	2600      	movs	r6, #0
    4ed2:	4689      	mov	r9, r1
    4ed4:	401a      	ands	r2, r3
    4ed6:	4b44      	ldr	r3, [pc, #272]	; (4fe8 <__aeabi_ddiv+0x1dc>)
    4ed8:	2100      	movs	r1, #0
    4eda:	0336      	lsls	r6, r6, #12
    4edc:	0d0c      	lsrs	r4, r1, #20
    4ede:	0524      	lsls	r4, r4, #20
    4ee0:	0b36      	lsrs	r6, r6, #12
    4ee2:	4326      	orrs	r6, r4
    4ee4:	4c43      	ldr	r4, [pc, #268]	; (4ff4 <__aeabi_ddiv+0x1e8>)
    4ee6:	051b      	lsls	r3, r3, #20
    4ee8:	4026      	ands	r6, r4
    4eea:	431e      	orrs	r6, r3
    4eec:	0076      	lsls	r6, r6, #1
    4eee:	07d2      	lsls	r2, r2, #31
    4ef0:	0876      	lsrs	r6, r6, #1
    4ef2:	4316      	orrs	r6, r2
    4ef4:	4648      	mov	r0, r9
    4ef6:	0031      	movs	r1, r6
    4ef8:	b007      	add	sp, #28
    4efa:	bc3c      	pop	{r2, r3, r4, r5}
    4efc:	4690      	mov	r8, r2
    4efe:	4699      	mov	r9, r3
    4f00:	46a2      	mov	sl, r4
    4f02:	46ab      	mov	fp, r5
    4f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f06:	0033      	movs	r3, r6
    4f08:	4303      	orrs	r3, r0
    4f0a:	d04f      	beq.n	4fac <__aeabi_ddiv+0x1a0>
    4f0c:	2e00      	cmp	r6, #0
    4f0e:	d100      	bne.n	4f12 <__aeabi_ddiv+0x106>
    4f10:	e1bc      	b.n	528c <__aeabi_ddiv+0x480>
    4f12:	0030      	movs	r0, r6
    4f14:	f001 fb1c 	bl	6550 <__clzsi2>
    4f18:	0003      	movs	r3, r0
    4f1a:	3b0b      	subs	r3, #11
    4f1c:	2b1c      	cmp	r3, #28
    4f1e:	dd00      	ble.n	4f22 <__aeabi_ddiv+0x116>
    4f20:	e1ad      	b.n	527e <__aeabi_ddiv+0x472>
    4f22:	221d      	movs	r2, #29
    4f24:	0001      	movs	r1, r0
    4f26:	1ad3      	subs	r3, r2, r3
    4f28:	3908      	subs	r1, #8
    4f2a:	003a      	movs	r2, r7
    4f2c:	408f      	lsls	r7, r1
    4f2e:	408e      	lsls	r6, r1
    4f30:	40da      	lsrs	r2, r3
    4f32:	46b9      	mov	r9, r7
    4f34:	4316      	orrs	r6, r2
    4f36:	4b30      	ldr	r3, [pc, #192]	; (4ff8 <__aeabi_ddiv+0x1ec>)
    4f38:	2700      	movs	r7, #0
    4f3a:	469c      	mov	ip, r3
    4f3c:	2300      	movs	r3, #0
    4f3e:	4460      	add	r0, ip
    4f40:	4244      	negs	r4, r0
    4f42:	9302      	str	r3, [sp, #8]
    4f44:	e785      	b.n	4e52 <__aeabi_ddiv+0x46>
    4f46:	4653      	mov	r3, sl
    4f48:	465a      	mov	r2, fp
    4f4a:	4313      	orrs	r3, r2
    4f4c:	d12c      	bne.n	4fa8 <__aeabi_ddiv+0x19c>
    4f4e:	2300      	movs	r3, #0
    4f50:	2100      	movs	r1, #0
    4f52:	469b      	mov	fp, r3
    4f54:	3302      	adds	r3, #2
    4f56:	e797      	b.n	4e88 <__aeabi_ddiv+0x7c>
    4f58:	430b      	orrs	r3, r1
    4f5a:	d020      	beq.n	4f9e <__aeabi_ddiv+0x192>
    4f5c:	465b      	mov	r3, fp
    4f5e:	2b00      	cmp	r3, #0
    4f60:	d100      	bne.n	4f64 <__aeabi_ddiv+0x158>
    4f62:	e19e      	b.n	52a2 <__aeabi_ddiv+0x496>
    4f64:	4658      	mov	r0, fp
    4f66:	f001 faf3 	bl	6550 <__clzsi2>
    4f6a:	0003      	movs	r3, r0
    4f6c:	3b0b      	subs	r3, #11
    4f6e:	2b1c      	cmp	r3, #28
    4f70:	dd00      	ble.n	4f74 <__aeabi_ddiv+0x168>
    4f72:	e18f      	b.n	5294 <__aeabi_ddiv+0x488>
    4f74:	0002      	movs	r2, r0
    4f76:	4659      	mov	r1, fp
    4f78:	3a08      	subs	r2, #8
    4f7a:	4091      	lsls	r1, r2
    4f7c:	468b      	mov	fp, r1
    4f7e:	211d      	movs	r1, #29
    4f80:	1acb      	subs	r3, r1, r3
    4f82:	4651      	mov	r1, sl
    4f84:	40d9      	lsrs	r1, r3
    4f86:	000b      	movs	r3, r1
    4f88:	4659      	mov	r1, fp
    4f8a:	430b      	orrs	r3, r1
    4f8c:	4651      	mov	r1, sl
    4f8e:	469b      	mov	fp, r3
    4f90:	4091      	lsls	r1, r2
    4f92:	4b19      	ldr	r3, [pc, #100]	; (4ff8 <__aeabi_ddiv+0x1ec>)
    4f94:	469c      	mov	ip, r3
    4f96:	4460      	add	r0, ip
    4f98:	4240      	negs	r0, r0
    4f9a:	2300      	movs	r3, #0
    4f9c:	e774      	b.n	4e88 <__aeabi_ddiv+0x7c>
    4f9e:	2300      	movs	r3, #0
    4fa0:	2100      	movs	r1, #0
    4fa2:	469b      	mov	fp, r3
    4fa4:	3301      	adds	r3, #1
    4fa6:	e76f      	b.n	4e88 <__aeabi_ddiv+0x7c>
    4fa8:	2303      	movs	r3, #3
    4faa:	e76d      	b.n	4e88 <__aeabi_ddiv+0x7c>
    4fac:	2300      	movs	r3, #0
    4fae:	4699      	mov	r9, r3
    4fb0:	3301      	adds	r3, #1
    4fb2:	2704      	movs	r7, #4
    4fb4:	2600      	movs	r6, #0
    4fb6:	9302      	str	r3, [sp, #8]
    4fb8:	e74b      	b.n	4e52 <__aeabi_ddiv+0x46>
    4fba:	2303      	movs	r3, #3
    4fbc:	270c      	movs	r7, #12
    4fbe:	9302      	str	r3, [sp, #8]
    4fc0:	e747      	b.n	4e52 <__aeabi_ddiv+0x46>
    4fc2:	2201      	movs	r2, #1
    4fc4:	1ad5      	subs	r5, r2, r3
    4fc6:	2d38      	cmp	r5, #56	; 0x38
    4fc8:	dc00      	bgt.n	4fcc <__aeabi_ddiv+0x1c0>
    4fca:	e1b0      	b.n	532e <__aeabi_ddiv+0x522>
    4fcc:	4653      	mov	r3, sl
    4fce:	401a      	ands	r2, r3
    4fd0:	2100      	movs	r1, #0
    4fd2:	2300      	movs	r3, #0
    4fd4:	2600      	movs	r6, #0
    4fd6:	4689      	mov	r9, r1
    4fd8:	e77e      	b.n	4ed8 <__aeabi_ddiv+0xcc>
    4fda:	2300      	movs	r3, #0
    4fdc:	2680      	movs	r6, #128	; 0x80
    4fde:	4699      	mov	r9, r3
    4fe0:	2200      	movs	r2, #0
    4fe2:	0336      	lsls	r6, r6, #12
    4fe4:	4b00      	ldr	r3, [pc, #0]	; (4fe8 <__aeabi_ddiv+0x1dc>)
    4fe6:	e777      	b.n	4ed8 <__aeabi_ddiv+0xcc>
    4fe8:	000007ff 	.word	0x000007ff
    4fec:	fffffc01 	.word	0xfffffc01
    4ff0:	00006660 	.word	0x00006660
    4ff4:	800fffff 	.word	0x800fffff
    4ff8:	000003f3 	.word	0x000003f3
    4ffc:	455e      	cmp	r6, fp
    4ffe:	d900      	bls.n	5002 <__aeabi_ddiv+0x1f6>
    5000:	e172      	b.n	52e8 <__aeabi_ddiv+0x4dc>
    5002:	d100      	bne.n	5006 <__aeabi_ddiv+0x1fa>
    5004:	e16d      	b.n	52e2 <__aeabi_ddiv+0x4d6>
    5006:	9b01      	ldr	r3, [sp, #4]
    5008:	464d      	mov	r5, r9
    500a:	3b01      	subs	r3, #1
    500c:	9301      	str	r3, [sp, #4]
    500e:	2300      	movs	r3, #0
    5010:	0034      	movs	r4, r6
    5012:	9302      	str	r3, [sp, #8]
    5014:	465b      	mov	r3, fp
    5016:	021e      	lsls	r6, r3, #8
    5018:	0e0b      	lsrs	r3, r1, #24
    501a:	431e      	orrs	r6, r3
    501c:	020b      	lsls	r3, r1, #8
    501e:	9303      	str	r3, [sp, #12]
    5020:	0c33      	lsrs	r3, r6, #16
    5022:	4699      	mov	r9, r3
    5024:	0433      	lsls	r3, r6, #16
    5026:	0c1b      	lsrs	r3, r3, #16
    5028:	4649      	mov	r1, r9
    502a:	0020      	movs	r0, r4
    502c:	9300      	str	r3, [sp, #0]
    502e:	f7ff f977 	bl	4320 <__aeabi_uidiv>
    5032:	9b00      	ldr	r3, [sp, #0]
    5034:	0037      	movs	r7, r6
    5036:	4343      	muls	r3, r0
    5038:	0006      	movs	r6, r0
    503a:	4649      	mov	r1, r9
    503c:	0020      	movs	r0, r4
    503e:	4698      	mov	r8, r3
    5040:	f7ff f9f4 	bl	442c <__aeabi_uidivmod>
    5044:	0c2c      	lsrs	r4, r5, #16
    5046:	0409      	lsls	r1, r1, #16
    5048:	430c      	orrs	r4, r1
    504a:	45a0      	cmp	r8, r4
    504c:	d909      	bls.n	5062 <__aeabi_ddiv+0x256>
    504e:	19e4      	adds	r4, r4, r7
    5050:	1e73      	subs	r3, r6, #1
    5052:	42a7      	cmp	r7, r4
    5054:	d900      	bls.n	5058 <__aeabi_ddiv+0x24c>
    5056:	e15c      	b.n	5312 <__aeabi_ddiv+0x506>
    5058:	45a0      	cmp	r8, r4
    505a:	d800      	bhi.n	505e <__aeabi_ddiv+0x252>
    505c:	e159      	b.n	5312 <__aeabi_ddiv+0x506>
    505e:	3e02      	subs	r6, #2
    5060:	19e4      	adds	r4, r4, r7
    5062:	4643      	mov	r3, r8
    5064:	1ae4      	subs	r4, r4, r3
    5066:	4649      	mov	r1, r9
    5068:	0020      	movs	r0, r4
    506a:	f7ff f959 	bl	4320 <__aeabi_uidiv>
    506e:	0003      	movs	r3, r0
    5070:	9a00      	ldr	r2, [sp, #0]
    5072:	4680      	mov	r8, r0
    5074:	4353      	muls	r3, r2
    5076:	4649      	mov	r1, r9
    5078:	0020      	movs	r0, r4
    507a:	469b      	mov	fp, r3
    507c:	f7ff f9d6 	bl	442c <__aeabi_uidivmod>
    5080:	042a      	lsls	r2, r5, #16
    5082:	0409      	lsls	r1, r1, #16
    5084:	0c12      	lsrs	r2, r2, #16
    5086:	430a      	orrs	r2, r1
    5088:	4593      	cmp	fp, r2
    508a:	d90d      	bls.n	50a8 <__aeabi_ddiv+0x29c>
    508c:	4643      	mov	r3, r8
    508e:	19d2      	adds	r2, r2, r7
    5090:	3b01      	subs	r3, #1
    5092:	4297      	cmp	r7, r2
    5094:	d900      	bls.n	5098 <__aeabi_ddiv+0x28c>
    5096:	e13a      	b.n	530e <__aeabi_ddiv+0x502>
    5098:	4593      	cmp	fp, r2
    509a:	d800      	bhi.n	509e <__aeabi_ddiv+0x292>
    509c:	e137      	b.n	530e <__aeabi_ddiv+0x502>
    509e:	2302      	movs	r3, #2
    50a0:	425b      	negs	r3, r3
    50a2:	469c      	mov	ip, r3
    50a4:	19d2      	adds	r2, r2, r7
    50a6:	44e0      	add	r8, ip
    50a8:	465b      	mov	r3, fp
    50aa:	1ad2      	subs	r2, r2, r3
    50ac:	4643      	mov	r3, r8
    50ae:	0436      	lsls	r6, r6, #16
    50b0:	4333      	orrs	r3, r6
    50b2:	469b      	mov	fp, r3
    50b4:	9903      	ldr	r1, [sp, #12]
    50b6:	0c18      	lsrs	r0, r3, #16
    50b8:	0c0b      	lsrs	r3, r1, #16
    50ba:	001d      	movs	r5, r3
    50bc:	9305      	str	r3, [sp, #20]
    50be:	0409      	lsls	r1, r1, #16
    50c0:	465b      	mov	r3, fp
    50c2:	0c09      	lsrs	r1, r1, #16
    50c4:	000c      	movs	r4, r1
    50c6:	041b      	lsls	r3, r3, #16
    50c8:	0c1b      	lsrs	r3, r3, #16
    50ca:	4344      	muls	r4, r0
    50cc:	9104      	str	r1, [sp, #16]
    50ce:	4359      	muls	r1, r3
    50d0:	436b      	muls	r3, r5
    50d2:	4368      	muls	r0, r5
    50d4:	191b      	adds	r3, r3, r4
    50d6:	0c0d      	lsrs	r5, r1, #16
    50d8:	18eb      	adds	r3, r5, r3
    50da:	429c      	cmp	r4, r3
    50dc:	d903      	bls.n	50e6 <__aeabi_ddiv+0x2da>
    50de:	2480      	movs	r4, #128	; 0x80
    50e0:	0264      	lsls	r4, r4, #9
    50e2:	46a4      	mov	ip, r4
    50e4:	4460      	add	r0, ip
    50e6:	0c1c      	lsrs	r4, r3, #16
    50e8:	0409      	lsls	r1, r1, #16
    50ea:	041b      	lsls	r3, r3, #16
    50ec:	0c09      	lsrs	r1, r1, #16
    50ee:	1820      	adds	r0, r4, r0
    50f0:	185d      	adds	r5, r3, r1
    50f2:	4282      	cmp	r2, r0
    50f4:	d200      	bcs.n	50f8 <__aeabi_ddiv+0x2ec>
    50f6:	e0de      	b.n	52b6 <__aeabi_ddiv+0x4aa>
    50f8:	d100      	bne.n	50fc <__aeabi_ddiv+0x2f0>
    50fa:	e0d7      	b.n	52ac <__aeabi_ddiv+0x4a0>
    50fc:	1a16      	subs	r6, r2, r0
    50fe:	9b02      	ldr	r3, [sp, #8]
    5100:	469c      	mov	ip, r3
    5102:	1b5d      	subs	r5, r3, r5
    5104:	45ac      	cmp	ip, r5
    5106:	419b      	sbcs	r3, r3
    5108:	425b      	negs	r3, r3
    510a:	1af6      	subs	r6, r6, r3
    510c:	42b7      	cmp	r7, r6
    510e:	d100      	bne.n	5112 <__aeabi_ddiv+0x306>
    5110:	e106      	b.n	5320 <__aeabi_ddiv+0x514>
    5112:	4649      	mov	r1, r9
    5114:	0030      	movs	r0, r6
    5116:	f7ff f903 	bl	4320 <__aeabi_uidiv>
    511a:	9b00      	ldr	r3, [sp, #0]
    511c:	0004      	movs	r4, r0
    511e:	4343      	muls	r3, r0
    5120:	4649      	mov	r1, r9
    5122:	0030      	movs	r0, r6
    5124:	4698      	mov	r8, r3
    5126:	f7ff f981 	bl	442c <__aeabi_uidivmod>
    512a:	0c2e      	lsrs	r6, r5, #16
    512c:	0409      	lsls	r1, r1, #16
    512e:	430e      	orrs	r6, r1
    5130:	45b0      	cmp	r8, r6
    5132:	d909      	bls.n	5148 <__aeabi_ddiv+0x33c>
    5134:	19f6      	adds	r6, r6, r7
    5136:	1e63      	subs	r3, r4, #1
    5138:	42b7      	cmp	r7, r6
    513a:	d900      	bls.n	513e <__aeabi_ddiv+0x332>
    513c:	e0f3      	b.n	5326 <__aeabi_ddiv+0x51a>
    513e:	45b0      	cmp	r8, r6
    5140:	d800      	bhi.n	5144 <__aeabi_ddiv+0x338>
    5142:	e0f0      	b.n	5326 <__aeabi_ddiv+0x51a>
    5144:	3c02      	subs	r4, #2
    5146:	19f6      	adds	r6, r6, r7
    5148:	4643      	mov	r3, r8
    514a:	1af3      	subs	r3, r6, r3
    514c:	4649      	mov	r1, r9
    514e:	0018      	movs	r0, r3
    5150:	9302      	str	r3, [sp, #8]
    5152:	f7ff f8e5 	bl	4320 <__aeabi_uidiv>
    5156:	9b00      	ldr	r3, [sp, #0]
    5158:	0006      	movs	r6, r0
    515a:	4343      	muls	r3, r0
    515c:	4649      	mov	r1, r9
    515e:	9802      	ldr	r0, [sp, #8]
    5160:	4698      	mov	r8, r3
    5162:	f7ff f963 	bl	442c <__aeabi_uidivmod>
    5166:	042d      	lsls	r5, r5, #16
    5168:	0409      	lsls	r1, r1, #16
    516a:	0c2d      	lsrs	r5, r5, #16
    516c:	430d      	orrs	r5, r1
    516e:	45a8      	cmp	r8, r5
    5170:	d909      	bls.n	5186 <__aeabi_ddiv+0x37a>
    5172:	19ed      	adds	r5, r5, r7
    5174:	1e73      	subs	r3, r6, #1
    5176:	42af      	cmp	r7, r5
    5178:	d900      	bls.n	517c <__aeabi_ddiv+0x370>
    517a:	e0d6      	b.n	532a <__aeabi_ddiv+0x51e>
    517c:	45a8      	cmp	r8, r5
    517e:	d800      	bhi.n	5182 <__aeabi_ddiv+0x376>
    5180:	e0d3      	b.n	532a <__aeabi_ddiv+0x51e>
    5182:	3e02      	subs	r6, #2
    5184:	19ed      	adds	r5, r5, r7
    5186:	0424      	lsls	r4, r4, #16
    5188:	0021      	movs	r1, r4
    518a:	4643      	mov	r3, r8
    518c:	4331      	orrs	r1, r6
    518e:	9e04      	ldr	r6, [sp, #16]
    5190:	9a05      	ldr	r2, [sp, #20]
    5192:	0030      	movs	r0, r6
    5194:	1aed      	subs	r5, r5, r3
    5196:	040b      	lsls	r3, r1, #16
    5198:	0c0c      	lsrs	r4, r1, #16
    519a:	0c1b      	lsrs	r3, r3, #16
    519c:	4358      	muls	r0, r3
    519e:	4366      	muls	r6, r4
    51a0:	4353      	muls	r3, r2
    51a2:	4354      	muls	r4, r2
    51a4:	199a      	adds	r2, r3, r6
    51a6:	0c03      	lsrs	r3, r0, #16
    51a8:	189b      	adds	r3, r3, r2
    51aa:	429e      	cmp	r6, r3
    51ac:	d903      	bls.n	51b6 <__aeabi_ddiv+0x3aa>
    51ae:	2280      	movs	r2, #128	; 0x80
    51b0:	0252      	lsls	r2, r2, #9
    51b2:	4694      	mov	ip, r2
    51b4:	4464      	add	r4, ip
    51b6:	0c1a      	lsrs	r2, r3, #16
    51b8:	0400      	lsls	r0, r0, #16
    51ba:	041b      	lsls	r3, r3, #16
    51bc:	0c00      	lsrs	r0, r0, #16
    51be:	1914      	adds	r4, r2, r4
    51c0:	181b      	adds	r3, r3, r0
    51c2:	42a5      	cmp	r5, r4
    51c4:	d350      	bcc.n	5268 <__aeabi_ddiv+0x45c>
    51c6:	d04d      	beq.n	5264 <__aeabi_ddiv+0x458>
    51c8:	2301      	movs	r3, #1
    51ca:	4319      	orrs	r1, r3
    51cc:	4a96      	ldr	r2, [pc, #600]	; (5428 <__aeabi_ddiv+0x61c>)
    51ce:	9b01      	ldr	r3, [sp, #4]
    51d0:	4694      	mov	ip, r2
    51d2:	4463      	add	r3, ip
    51d4:	2b00      	cmp	r3, #0
    51d6:	dc00      	bgt.n	51da <__aeabi_ddiv+0x3ce>
    51d8:	e6f3      	b.n	4fc2 <__aeabi_ddiv+0x1b6>
    51da:	074a      	lsls	r2, r1, #29
    51dc:	d009      	beq.n	51f2 <__aeabi_ddiv+0x3e6>
    51de:	220f      	movs	r2, #15
    51e0:	400a      	ands	r2, r1
    51e2:	2a04      	cmp	r2, #4
    51e4:	d005      	beq.n	51f2 <__aeabi_ddiv+0x3e6>
    51e6:	1d0a      	adds	r2, r1, #4
    51e8:	428a      	cmp	r2, r1
    51ea:	4189      	sbcs	r1, r1
    51ec:	4249      	negs	r1, r1
    51ee:	448b      	add	fp, r1
    51f0:	0011      	movs	r1, r2
    51f2:	465a      	mov	r2, fp
    51f4:	01d2      	lsls	r2, r2, #7
    51f6:	d508      	bpl.n	520a <__aeabi_ddiv+0x3fe>
    51f8:	465a      	mov	r2, fp
    51fa:	4b8c      	ldr	r3, [pc, #560]	; (542c <__aeabi_ddiv+0x620>)
    51fc:	401a      	ands	r2, r3
    51fe:	4693      	mov	fp, r2
    5200:	2280      	movs	r2, #128	; 0x80
    5202:	00d2      	lsls	r2, r2, #3
    5204:	4694      	mov	ip, r2
    5206:	9b01      	ldr	r3, [sp, #4]
    5208:	4463      	add	r3, ip
    520a:	4a89      	ldr	r2, [pc, #548]	; (5430 <__aeabi_ddiv+0x624>)
    520c:	4293      	cmp	r3, r2
    520e:	dd00      	ble.n	5212 <__aeabi_ddiv+0x406>
    5210:	e65b      	b.n	4eca <__aeabi_ddiv+0xbe>
    5212:	465a      	mov	r2, fp
    5214:	08c9      	lsrs	r1, r1, #3
    5216:	0750      	lsls	r0, r2, #29
    5218:	4308      	orrs	r0, r1
    521a:	0256      	lsls	r6, r2, #9
    521c:	4651      	mov	r1, sl
    521e:	2201      	movs	r2, #1
    5220:	055b      	lsls	r3, r3, #21
    5222:	4681      	mov	r9, r0
    5224:	0b36      	lsrs	r6, r6, #12
    5226:	0d5b      	lsrs	r3, r3, #21
    5228:	400a      	ands	r2, r1
    522a:	e655      	b.n	4ed8 <__aeabi_ddiv+0xcc>
    522c:	2380      	movs	r3, #128	; 0x80
    522e:	031b      	lsls	r3, r3, #12
    5230:	421e      	tst	r6, r3
    5232:	d011      	beq.n	5258 <__aeabi_ddiv+0x44c>
    5234:	465a      	mov	r2, fp
    5236:	421a      	tst	r2, r3
    5238:	d10e      	bne.n	5258 <__aeabi_ddiv+0x44c>
    523a:	465e      	mov	r6, fp
    523c:	431e      	orrs	r6, r3
    523e:	0336      	lsls	r6, r6, #12
    5240:	0b36      	lsrs	r6, r6, #12
    5242:	002a      	movs	r2, r5
    5244:	4689      	mov	r9, r1
    5246:	4b7b      	ldr	r3, [pc, #492]	; (5434 <__aeabi_ddiv+0x628>)
    5248:	e646      	b.n	4ed8 <__aeabi_ddiv+0xcc>
    524a:	2b03      	cmp	r3, #3
    524c:	d100      	bne.n	5250 <__aeabi_ddiv+0x444>
    524e:	e0e1      	b.n	5414 <__aeabi_ddiv+0x608>
    5250:	2b01      	cmp	r3, #1
    5252:	d1bb      	bne.n	51cc <__aeabi_ddiv+0x3c0>
    5254:	401a      	ands	r2, r3
    5256:	e6bb      	b.n	4fd0 <__aeabi_ddiv+0x1c4>
    5258:	431e      	orrs	r6, r3
    525a:	0336      	lsls	r6, r6, #12
    525c:	0b36      	lsrs	r6, r6, #12
    525e:	4642      	mov	r2, r8
    5260:	4b74      	ldr	r3, [pc, #464]	; (5434 <__aeabi_ddiv+0x628>)
    5262:	e639      	b.n	4ed8 <__aeabi_ddiv+0xcc>
    5264:	2b00      	cmp	r3, #0
    5266:	d0b1      	beq.n	51cc <__aeabi_ddiv+0x3c0>
    5268:	197d      	adds	r5, r7, r5
    526a:	1e4a      	subs	r2, r1, #1
    526c:	42af      	cmp	r7, r5
    526e:	d952      	bls.n	5316 <__aeabi_ddiv+0x50a>
    5270:	0011      	movs	r1, r2
    5272:	42a5      	cmp	r5, r4
    5274:	d1a8      	bne.n	51c8 <__aeabi_ddiv+0x3bc>
    5276:	9a03      	ldr	r2, [sp, #12]
    5278:	429a      	cmp	r2, r3
    527a:	d1a5      	bne.n	51c8 <__aeabi_ddiv+0x3bc>
    527c:	e7a6      	b.n	51cc <__aeabi_ddiv+0x3c0>
    527e:	0003      	movs	r3, r0
    5280:	003e      	movs	r6, r7
    5282:	3b28      	subs	r3, #40	; 0x28
    5284:	409e      	lsls	r6, r3
    5286:	2300      	movs	r3, #0
    5288:	4699      	mov	r9, r3
    528a:	e654      	b.n	4f36 <__aeabi_ddiv+0x12a>
    528c:	f001 f960 	bl	6550 <__clzsi2>
    5290:	3020      	adds	r0, #32
    5292:	e641      	b.n	4f18 <__aeabi_ddiv+0x10c>
    5294:	0003      	movs	r3, r0
    5296:	4652      	mov	r2, sl
    5298:	3b28      	subs	r3, #40	; 0x28
    529a:	409a      	lsls	r2, r3
    529c:	2100      	movs	r1, #0
    529e:	4693      	mov	fp, r2
    52a0:	e677      	b.n	4f92 <__aeabi_ddiv+0x186>
    52a2:	4650      	mov	r0, sl
    52a4:	f001 f954 	bl	6550 <__clzsi2>
    52a8:	3020      	adds	r0, #32
    52aa:	e65e      	b.n	4f6a <__aeabi_ddiv+0x15e>
    52ac:	9b02      	ldr	r3, [sp, #8]
    52ae:	2600      	movs	r6, #0
    52b0:	42ab      	cmp	r3, r5
    52b2:	d300      	bcc.n	52b6 <__aeabi_ddiv+0x4aa>
    52b4:	e723      	b.n	50fe <__aeabi_ddiv+0x2f2>
    52b6:	9e03      	ldr	r6, [sp, #12]
    52b8:	9902      	ldr	r1, [sp, #8]
    52ba:	46b4      	mov	ip, r6
    52bc:	4461      	add	r1, ip
    52be:	4688      	mov	r8, r1
    52c0:	45b0      	cmp	r8, r6
    52c2:	41b6      	sbcs	r6, r6
    52c4:	465b      	mov	r3, fp
    52c6:	4276      	negs	r6, r6
    52c8:	19f6      	adds	r6, r6, r7
    52ca:	18b2      	adds	r2, r6, r2
    52cc:	3b01      	subs	r3, #1
    52ce:	9102      	str	r1, [sp, #8]
    52d0:	4297      	cmp	r7, r2
    52d2:	d213      	bcs.n	52fc <__aeabi_ddiv+0x4f0>
    52d4:	4290      	cmp	r0, r2
    52d6:	d84f      	bhi.n	5378 <__aeabi_ddiv+0x56c>
    52d8:	d100      	bne.n	52dc <__aeabi_ddiv+0x4d0>
    52da:	e08e      	b.n	53fa <__aeabi_ddiv+0x5ee>
    52dc:	1a16      	subs	r6, r2, r0
    52de:	469b      	mov	fp, r3
    52e0:	e70d      	b.n	50fe <__aeabi_ddiv+0x2f2>
    52e2:	4589      	cmp	r9, r1
    52e4:	d200      	bcs.n	52e8 <__aeabi_ddiv+0x4dc>
    52e6:	e68e      	b.n	5006 <__aeabi_ddiv+0x1fa>
    52e8:	0874      	lsrs	r4, r6, #1
    52ea:	464b      	mov	r3, r9
    52ec:	07f6      	lsls	r6, r6, #31
    52ee:	0035      	movs	r5, r6
    52f0:	085b      	lsrs	r3, r3, #1
    52f2:	431d      	orrs	r5, r3
    52f4:	464b      	mov	r3, r9
    52f6:	07db      	lsls	r3, r3, #31
    52f8:	9302      	str	r3, [sp, #8]
    52fa:	e68b      	b.n	5014 <__aeabi_ddiv+0x208>
    52fc:	4297      	cmp	r7, r2
    52fe:	d1ed      	bne.n	52dc <__aeabi_ddiv+0x4d0>
    5300:	9903      	ldr	r1, [sp, #12]
    5302:	9c02      	ldr	r4, [sp, #8]
    5304:	42a1      	cmp	r1, r4
    5306:	d9e5      	bls.n	52d4 <__aeabi_ddiv+0x4c8>
    5308:	1a3e      	subs	r6, r7, r0
    530a:	469b      	mov	fp, r3
    530c:	e6f7      	b.n	50fe <__aeabi_ddiv+0x2f2>
    530e:	4698      	mov	r8, r3
    5310:	e6ca      	b.n	50a8 <__aeabi_ddiv+0x29c>
    5312:	001e      	movs	r6, r3
    5314:	e6a5      	b.n	5062 <__aeabi_ddiv+0x256>
    5316:	42ac      	cmp	r4, r5
    5318:	d83e      	bhi.n	5398 <__aeabi_ddiv+0x58c>
    531a:	d074      	beq.n	5406 <__aeabi_ddiv+0x5fa>
    531c:	0011      	movs	r1, r2
    531e:	e753      	b.n	51c8 <__aeabi_ddiv+0x3bc>
    5320:	2101      	movs	r1, #1
    5322:	4249      	negs	r1, r1
    5324:	e752      	b.n	51cc <__aeabi_ddiv+0x3c0>
    5326:	001c      	movs	r4, r3
    5328:	e70e      	b.n	5148 <__aeabi_ddiv+0x33c>
    532a:	001e      	movs	r6, r3
    532c:	e72b      	b.n	5186 <__aeabi_ddiv+0x37a>
    532e:	2d1f      	cmp	r5, #31
    5330:	dc3c      	bgt.n	53ac <__aeabi_ddiv+0x5a0>
    5332:	2320      	movs	r3, #32
    5334:	000a      	movs	r2, r1
    5336:	4658      	mov	r0, fp
    5338:	1b5b      	subs	r3, r3, r5
    533a:	4098      	lsls	r0, r3
    533c:	40ea      	lsrs	r2, r5
    533e:	4099      	lsls	r1, r3
    5340:	4302      	orrs	r2, r0
    5342:	1e48      	subs	r0, r1, #1
    5344:	4181      	sbcs	r1, r0
    5346:	465e      	mov	r6, fp
    5348:	4311      	orrs	r1, r2
    534a:	40ee      	lsrs	r6, r5
    534c:	074b      	lsls	r3, r1, #29
    534e:	d009      	beq.n	5364 <__aeabi_ddiv+0x558>
    5350:	230f      	movs	r3, #15
    5352:	400b      	ands	r3, r1
    5354:	2b04      	cmp	r3, #4
    5356:	d005      	beq.n	5364 <__aeabi_ddiv+0x558>
    5358:	000b      	movs	r3, r1
    535a:	1d19      	adds	r1, r3, #4
    535c:	4299      	cmp	r1, r3
    535e:	419b      	sbcs	r3, r3
    5360:	425b      	negs	r3, r3
    5362:	18f6      	adds	r6, r6, r3
    5364:	0233      	lsls	r3, r6, #8
    5366:	d53c      	bpl.n	53e2 <__aeabi_ddiv+0x5d6>
    5368:	4653      	mov	r3, sl
    536a:	2201      	movs	r2, #1
    536c:	2100      	movs	r1, #0
    536e:	401a      	ands	r2, r3
    5370:	2600      	movs	r6, #0
    5372:	2301      	movs	r3, #1
    5374:	4689      	mov	r9, r1
    5376:	e5af      	b.n	4ed8 <__aeabi_ddiv+0xcc>
    5378:	2302      	movs	r3, #2
    537a:	425b      	negs	r3, r3
    537c:	469c      	mov	ip, r3
    537e:	9c03      	ldr	r4, [sp, #12]
    5380:	44e3      	add	fp, ip
    5382:	46a4      	mov	ip, r4
    5384:	9b02      	ldr	r3, [sp, #8]
    5386:	4463      	add	r3, ip
    5388:	4698      	mov	r8, r3
    538a:	45a0      	cmp	r8, r4
    538c:	41b6      	sbcs	r6, r6
    538e:	4276      	negs	r6, r6
    5390:	19f6      	adds	r6, r6, r7
    5392:	9302      	str	r3, [sp, #8]
    5394:	18b2      	adds	r2, r6, r2
    5396:	e6b1      	b.n	50fc <__aeabi_ddiv+0x2f0>
    5398:	9803      	ldr	r0, [sp, #12]
    539a:	1e8a      	subs	r2, r1, #2
    539c:	0041      	lsls	r1, r0, #1
    539e:	4281      	cmp	r1, r0
    53a0:	41b6      	sbcs	r6, r6
    53a2:	4276      	negs	r6, r6
    53a4:	19f6      	adds	r6, r6, r7
    53a6:	19ad      	adds	r5, r5, r6
    53a8:	9103      	str	r1, [sp, #12]
    53aa:	e761      	b.n	5270 <__aeabi_ddiv+0x464>
    53ac:	221f      	movs	r2, #31
    53ae:	4252      	negs	r2, r2
    53b0:	1ad3      	subs	r3, r2, r3
    53b2:	465a      	mov	r2, fp
    53b4:	40da      	lsrs	r2, r3
    53b6:	0013      	movs	r3, r2
    53b8:	2d20      	cmp	r5, #32
    53ba:	d029      	beq.n	5410 <__aeabi_ddiv+0x604>
    53bc:	2240      	movs	r2, #64	; 0x40
    53be:	4658      	mov	r0, fp
    53c0:	1b55      	subs	r5, r2, r5
    53c2:	40a8      	lsls	r0, r5
    53c4:	4301      	orrs	r1, r0
    53c6:	1e48      	subs	r0, r1, #1
    53c8:	4181      	sbcs	r1, r0
    53ca:	2007      	movs	r0, #7
    53cc:	430b      	orrs	r3, r1
    53ce:	4018      	ands	r0, r3
    53d0:	2600      	movs	r6, #0
    53d2:	2800      	cmp	r0, #0
    53d4:	d009      	beq.n	53ea <__aeabi_ddiv+0x5de>
    53d6:	220f      	movs	r2, #15
    53d8:	2600      	movs	r6, #0
    53da:	401a      	ands	r2, r3
    53dc:	0019      	movs	r1, r3
    53de:	2a04      	cmp	r2, #4
    53e0:	d1bb      	bne.n	535a <__aeabi_ddiv+0x54e>
    53e2:	000b      	movs	r3, r1
    53e4:	0770      	lsls	r0, r6, #29
    53e6:	0276      	lsls	r6, r6, #9
    53e8:	0b36      	lsrs	r6, r6, #12
    53ea:	08db      	lsrs	r3, r3, #3
    53ec:	4303      	orrs	r3, r0
    53ee:	4699      	mov	r9, r3
    53f0:	2201      	movs	r2, #1
    53f2:	4653      	mov	r3, sl
    53f4:	401a      	ands	r2, r3
    53f6:	2300      	movs	r3, #0
    53f8:	e56e      	b.n	4ed8 <__aeabi_ddiv+0xcc>
    53fa:	9902      	ldr	r1, [sp, #8]
    53fc:	428d      	cmp	r5, r1
    53fe:	d8bb      	bhi.n	5378 <__aeabi_ddiv+0x56c>
    5400:	469b      	mov	fp, r3
    5402:	2600      	movs	r6, #0
    5404:	e67b      	b.n	50fe <__aeabi_ddiv+0x2f2>
    5406:	9803      	ldr	r0, [sp, #12]
    5408:	4298      	cmp	r0, r3
    540a:	d3c5      	bcc.n	5398 <__aeabi_ddiv+0x58c>
    540c:	0011      	movs	r1, r2
    540e:	e732      	b.n	5276 <__aeabi_ddiv+0x46a>
    5410:	2000      	movs	r0, #0
    5412:	e7d7      	b.n	53c4 <__aeabi_ddiv+0x5b8>
    5414:	2680      	movs	r6, #128	; 0x80
    5416:	465b      	mov	r3, fp
    5418:	0336      	lsls	r6, r6, #12
    541a:	431e      	orrs	r6, r3
    541c:	0336      	lsls	r6, r6, #12
    541e:	0b36      	lsrs	r6, r6, #12
    5420:	9a00      	ldr	r2, [sp, #0]
    5422:	4689      	mov	r9, r1
    5424:	4b03      	ldr	r3, [pc, #12]	; (5434 <__aeabi_ddiv+0x628>)
    5426:	e557      	b.n	4ed8 <__aeabi_ddiv+0xcc>
    5428:	000003ff 	.word	0x000003ff
    542c:	feffffff 	.word	0xfeffffff
    5430:	000007fe 	.word	0x000007fe
    5434:	000007ff 	.word	0x000007ff

00005438 <__eqdf2>:
    5438:	b5f0      	push	{r4, r5, r6, r7, lr}
    543a:	465f      	mov	r7, fp
    543c:	4656      	mov	r6, sl
    543e:	464d      	mov	r5, r9
    5440:	4644      	mov	r4, r8
    5442:	b4f0      	push	{r4, r5, r6, r7}
    5444:	031f      	lsls	r7, r3, #12
    5446:	005c      	lsls	r4, r3, #1
    5448:	0fdb      	lsrs	r3, r3, #31
    544a:	469a      	mov	sl, r3
    544c:	4b19      	ldr	r3, [pc, #100]	; (54b4 <__eqdf2+0x7c>)
    544e:	030e      	lsls	r6, r1, #12
    5450:	004d      	lsls	r5, r1, #1
    5452:	0fc9      	lsrs	r1, r1, #31
    5454:	4680      	mov	r8, r0
    5456:	0b36      	lsrs	r6, r6, #12
    5458:	0d6d      	lsrs	r5, r5, #21
    545a:	468b      	mov	fp, r1
    545c:	4691      	mov	r9, r2
    545e:	0b3f      	lsrs	r7, r7, #12
    5460:	0d64      	lsrs	r4, r4, #21
    5462:	429d      	cmp	r5, r3
    5464:	d019      	beq.n	549a <__eqdf2+0x62>
    5466:	4b13      	ldr	r3, [pc, #76]	; (54b4 <__eqdf2+0x7c>)
    5468:	429c      	cmp	r4, r3
    546a:	d01b      	beq.n	54a4 <__eqdf2+0x6c>
    546c:	2301      	movs	r3, #1
    546e:	42a5      	cmp	r5, r4
    5470:	d006      	beq.n	5480 <__eqdf2+0x48>
    5472:	0018      	movs	r0, r3
    5474:	bc3c      	pop	{r2, r3, r4, r5}
    5476:	4690      	mov	r8, r2
    5478:	4699      	mov	r9, r3
    547a:	46a2      	mov	sl, r4
    547c:	46ab      	mov	fp, r5
    547e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5480:	42be      	cmp	r6, r7
    5482:	d1f6      	bne.n	5472 <__eqdf2+0x3a>
    5484:	45c8      	cmp	r8, r9
    5486:	d1f4      	bne.n	5472 <__eqdf2+0x3a>
    5488:	45d3      	cmp	fp, sl
    548a:	d010      	beq.n	54ae <__eqdf2+0x76>
    548c:	2d00      	cmp	r5, #0
    548e:	d1f0      	bne.n	5472 <__eqdf2+0x3a>
    5490:	4330      	orrs	r0, r6
    5492:	0003      	movs	r3, r0
    5494:	1e5a      	subs	r2, r3, #1
    5496:	4193      	sbcs	r3, r2
    5498:	e7eb      	b.n	5472 <__eqdf2+0x3a>
    549a:	0031      	movs	r1, r6
    549c:	2301      	movs	r3, #1
    549e:	4301      	orrs	r1, r0
    54a0:	d1e7      	bne.n	5472 <__eqdf2+0x3a>
    54a2:	e7e0      	b.n	5466 <__eqdf2+0x2e>
    54a4:	433a      	orrs	r2, r7
    54a6:	2301      	movs	r3, #1
    54a8:	2a00      	cmp	r2, #0
    54aa:	d1e2      	bne.n	5472 <__eqdf2+0x3a>
    54ac:	e7de      	b.n	546c <__eqdf2+0x34>
    54ae:	2300      	movs	r3, #0
    54b0:	e7df      	b.n	5472 <__eqdf2+0x3a>
    54b2:	46c0      	nop			; (mov r8, r8)
    54b4:	000007ff 	.word	0x000007ff

000054b8 <__gedf2>:
    54b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    54ba:	465f      	mov	r7, fp
    54bc:	4644      	mov	r4, r8
    54be:	4656      	mov	r6, sl
    54c0:	464d      	mov	r5, r9
    54c2:	b4f0      	push	{r4, r5, r6, r7}
    54c4:	031f      	lsls	r7, r3, #12
    54c6:	0b3c      	lsrs	r4, r7, #12
    54c8:	4f2c      	ldr	r7, [pc, #176]	; (557c <__gedf2+0xc4>)
    54ca:	030e      	lsls	r6, r1, #12
    54cc:	004d      	lsls	r5, r1, #1
    54ce:	46a3      	mov	fp, r4
    54d0:	005c      	lsls	r4, r3, #1
    54d2:	4684      	mov	ip, r0
    54d4:	0b36      	lsrs	r6, r6, #12
    54d6:	0d6d      	lsrs	r5, r5, #21
    54d8:	0fc9      	lsrs	r1, r1, #31
    54da:	4690      	mov	r8, r2
    54dc:	0d64      	lsrs	r4, r4, #21
    54de:	0fdb      	lsrs	r3, r3, #31
    54e0:	42bd      	cmp	r5, r7
    54e2:	d02b      	beq.n	553c <__gedf2+0x84>
    54e4:	4f25      	ldr	r7, [pc, #148]	; (557c <__gedf2+0xc4>)
    54e6:	42bc      	cmp	r4, r7
    54e8:	d02e      	beq.n	5548 <__gedf2+0x90>
    54ea:	2d00      	cmp	r5, #0
    54ec:	d10e      	bne.n	550c <__gedf2+0x54>
    54ee:	4330      	orrs	r0, r6
    54f0:	0007      	movs	r7, r0
    54f2:	4681      	mov	r9, r0
    54f4:	4278      	negs	r0, r7
    54f6:	4178      	adcs	r0, r7
    54f8:	2c00      	cmp	r4, #0
    54fa:	d117      	bne.n	552c <__gedf2+0x74>
    54fc:	465f      	mov	r7, fp
    54fe:	433a      	orrs	r2, r7
    5500:	d114      	bne.n	552c <__gedf2+0x74>
    5502:	464b      	mov	r3, r9
    5504:	2000      	movs	r0, #0
    5506:	2b00      	cmp	r3, #0
    5508:	d00a      	beq.n	5520 <__gedf2+0x68>
    550a:	e006      	b.n	551a <__gedf2+0x62>
    550c:	2c00      	cmp	r4, #0
    550e:	d102      	bne.n	5516 <__gedf2+0x5e>
    5510:	4658      	mov	r0, fp
    5512:	4302      	orrs	r2, r0
    5514:	d001      	beq.n	551a <__gedf2+0x62>
    5516:	4299      	cmp	r1, r3
    5518:	d01a      	beq.n	5550 <__gedf2+0x98>
    551a:	2301      	movs	r3, #1
    551c:	4248      	negs	r0, r1
    551e:	4318      	orrs	r0, r3
    5520:	bc3c      	pop	{r2, r3, r4, r5}
    5522:	4690      	mov	r8, r2
    5524:	4699      	mov	r9, r3
    5526:	46a2      	mov	sl, r4
    5528:	46ab      	mov	fp, r5
    552a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    552c:	2800      	cmp	r0, #0
    552e:	d0f2      	beq.n	5516 <__gedf2+0x5e>
    5530:	4258      	negs	r0, r3
    5532:	4158      	adcs	r0, r3
    5534:	2201      	movs	r2, #1
    5536:	4240      	negs	r0, r0
    5538:	4310      	orrs	r0, r2
    553a:	e7f1      	b.n	5520 <__gedf2+0x68>
    553c:	0037      	movs	r7, r6
    553e:	4307      	orrs	r7, r0
    5540:	d0d0      	beq.n	54e4 <__gedf2+0x2c>
    5542:	2002      	movs	r0, #2
    5544:	4240      	negs	r0, r0
    5546:	e7eb      	b.n	5520 <__gedf2+0x68>
    5548:	465f      	mov	r7, fp
    554a:	4317      	orrs	r7, r2
    554c:	d0cd      	beq.n	54ea <__gedf2+0x32>
    554e:	e7f8      	b.n	5542 <__gedf2+0x8a>
    5550:	42a5      	cmp	r5, r4
    5552:	dce2      	bgt.n	551a <__gedf2+0x62>
    5554:	db05      	blt.n	5562 <__gedf2+0xaa>
    5556:	455e      	cmp	r6, fp
    5558:	d8df      	bhi.n	551a <__gedf2+0x62>
    555a:	d008      	beq.n	556e <__gedf2+0xb6>
    555c:	2000      	movs	r0, #0
    555e:	455e      	cmp	r6, fp
    5560:	d2de      	bcs.n	5520 <__gedf2+0x68>
    5562:	4248      	negs	r0, r1
    5564:	4148      	adcs	r0, r1
    5566:	2301      	movs	r3, #1
    5568:	4240      	negs	r0, r0
    556a:	4318      	orrs	r0, r3
    556c:	e7d8      	b.n	5520 <__gedf2+0x68>
    556e:	45c4      	cmp	ip, r8
    5570:	d8d3      	bhi.n	551a <__gedf2+0x62>
    5572:	2000      	movs	r0, #0
    5574:	45c4      	cmp	ip, r8
    5576:	d3f4      	bcc.n	5562 <__gedf2+0xaa>
    5578:	e7d2      	b.n	5520 <__gedf2+0x68>
    557a:	46c0      	nop			; (mov r8, r8)
    557c:	000007ff 	.word	0x000007ff

00005580 <__ledf2>:
    5580:	b5f0      	push	{r4, r5, r6, r7, lr}
    5582:	465f      	mov	r7, fp
    5584:	464d      	mov	r5, r9
    5586:	4644      	mov	r4, r8
    5588:	4656      	mov	r6, sl
    558a:	b4f0      	push	{r4, r5, r6, r7}
    558c:	031c      	lsls	r4, r3, #12
    558e:	0b24      	lsrs	r4, r4, #12
    5590:	46a4      	mov	ip, r4
    5592:	4c2f      	ldr	r4, [pc, #188]	; (5650 <__ledf2+0xd0>)
    5594:	030f      	lsls	r7, r1, #12
    5596:	004d      	lsls	r5, r1, #1
    5598:	005e      	lsls	r6, r3, #1
    559a:	0fc9      	lsrs	r1, r1, #31
    559c:	4680      	mov	r8, r0
    559e:	0b3f      	lsrs	r7, r7, #12
    55a0:	0d6d      	lsrs	r5, r5, #21
    55a2:	468b      	mov	fp, r1
    55a4:	4691      	mov	r9, r2
    55a6:	0d76      	lsrs	r6, r6, #21
    55a8:	0fdb      	lsrs	r3, r3, #31
    55aa:	42a5      	cmp	r5, r4
    55ac:	d020      	beq.n	55f0 <__ledf2+0x70>
    55ae:	4c28      	ldr	r4, [pc, #160]	; (5650 <__ledf2+0xd0>)
    55b0:	42a6      	cmp	r6, r4
    55b2:	d022      	beq.n	55fa <__ledf2+0x7a>
    55b4:	2d00      	cmp	r5, #0
    55b6:	d112      	bne.n	55de <__ledf2+0x5e>
    55b8:	4338      	orrs	r0, r7
    55ba:	4244      	negs	r4, r0
    55bc:	4144      	adcs	r4, r0
    55be:	2e00      	cmp	r6, #0
    55c0:	d020      	beq.n	5604 <__ledf2+0x84>
    55c2:	2c00      	cmp	r4, #0
    55c4:	d00d      	beq.n	55e2 <__ledf2+0x62>
    55c6:	425c      	negs	r4, r3
    55c8:	4163      	adcs	r3, r4
    55ca:	2401      	movs	r4, #1
    55cc:	425b      	negs	r3, r3
    55ce:	431c      	orrs	r4, r3
    55d0:	0020      	movs	r0, r4
    55d2:	bc3c      	pop	{r2, r3, r4, r5}
    55d4:	4690      	mov	r8, r2
    55d6:	4699      	mov	r9, r3
    55d8:	46a2      	mov	sl, r4
    55da:	46ab      	mov	fp, r5
    55dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55de:	2e00      	cmp	r6, #0
    55e0:	d017      	beq.n	5612 <__ledf2+0x92>
    55e2:	455b      	cmp	r3, fp
    55e4:	d019      	beq.n	561a <__ledf2+0x9a>
    55e6:	465b      	mov	r3, fp
    55e8:	425c      	negs	r4, r3
    55ea:	2301      	movs	r3, #1
    55ec:	431c      	orrs	r4, r3
    55ee:	e7ef      	b.n	55d0 <__ledf2+0x50>
    55f0:	0039      	movs	r1, r7
    55f2:	2402      	movs	r4, #2
    55f4:	4301      	orrs	r1, r0
    55f6:	d1eb      	bne.n	55d0 <__ledf2+0x50>
    55f8:	e7d9      	b.n	55ae <__ledf2+0x2e>
    55fa:	4661      	mov	r1, ip
    55fc:	2402      	movs	r4, #2
    55fe:	4311      	orrs	r1, r2
    5600:	d1e6      	bne.n	55d0 <__ledf2+0x50>
    5602:	e7d7      	b.n	55b4 <__ledf2+0x34>
    5604:	4661      	mov	r1, ip
    5606:	430a      	orrs	r2, r1
    5608:	d1db      	bne.n	55c2 <__ledf2+0x42>
    560a:	2400      	movs	r4, #0
    560c:	2800      	cmp	r0, #0
    560e:	d0df      	beq.n	55d0 <__ledf2+0x50>
    5610:	e7e9      	b.n	55e6 <__ledf2+0x66>
    5612:	4661      	mov	r1, ip
    5614:	430a      	orrs	r2, r1
    5616:	d1e4      	bne.n	55e2 <__ledf2+0x62>
    5618:	e7e5      	b.n	55e6 <__ledf2+0x66>
    561a:	42b5      	cmp	r5, r6
    561c:	dd03      	ble.n	5626 <__ledf2+0xa6>
    561e:	2201      	movs	r2, #1
    5620:	425c      	negs	r4, r3
    5622:	4314      	orrs	r4, r2
    5624:	e7d4      	b.n	55d0 <__ledf2+0x50>
    5626:	42b5      	cmp	r5, r6
    5628:	dbcd      	blt.n	55c6 <__ledf2+0x46>
    562a:	4567      	cmp	r7, ip
    562c:	d8db      	bhi.n	55e6 <__ledf2+0x66>
    562e:	d009      	beq.n	5644 <__ledf2+0xc4>
    5630:	2400      	movs	r4, #0
    5632:	4567      	cmp	r7, ip
    5634:	d2cc      	bcs.n	55d0 <__ledf2+0x50>
    5636:	4659      	mov	r1, fp
    5638:	424c      	negs	r4, r1
    563a:	4161      	adcs	r1, r4
    563c:	2401      	movs	r4, #1
    563e:	4249      	negs	r1, r1
    5640:	430c      	orrs	r4, r1
    5642:	e7c5      	b.n	55d0 <__ledf2+0x50>
    5644:	45c8      	cmp	r8, r9
    5646:	d8ce      	bhi.n	55e6 <__ledf2+0x66>
    5648:	2400      	movs	r4, #0
    564a:	45c8      	cmp	r8, r9
    564c:	d3f3      	bcc.n	5636 <__ledf2+0xb6>
    564e:	e7bf      	b.n	55d0 <__ledf2+0x50>
    5650:	000007ff 	.word	0x000007ff

00005654 <__aeabi_dmul>:
    5654:	b5f0      	push	{r4, r5, r6, r7, lr}
    5656:	465f      	mov	r7, fp
    5658:	4656      	mov	r6, sl
    565a:	464d      	mov	r5, r9
    565c:	4644      	mov	r4, r8
    565e:	b4f0      	push	{r4, r5, r6, r7}
    5660:	030d      	lsls	r5, r1, #12
    5662:	4699      	mov	r9, r3
    5664:	004e      	lsls	r6, r1, #1
    5666:	0b2b      	lsrs	r3, r5, #12
    5668:	b087      	sub	sp, #28
    566a:	0007      	movs	r7, r0
    566c:	4692      	mov	sl, r2
    566e:	4680      	mov	r8, r0
    5670:	469b      	mov	fp, r3
    5672:	0d76      	lsrs	r6, r6, #21
    5674:	0fcc      	lsrs	r4, r1, #31
    5676:	2e00      	cmp	r6, #0
    5678:	d069      	beq.n	574e <__aeabi_dmul+0xfa>
    567a:	4b6d      	ldr	r3, [pc, #436]	; (5830 <__aeabi_dmul+0x1dc>)
    567c:	429e      	cmp	r6, r3
    567e:	d035      	beq.n	56ec <__aeabi_dmul+0x98>
    5680:	465b      	mov	r3, fp
    5682:	2280      	movs	r2, #128	; 0x80
    5684:	00dd      	lsls	r5, r3, #3
    5686:	0412      	lsls	r2, r2, #16
    5688:	0f43      	lsrs	r3, r0, #29
    568a:	4313      	orrs	r3, r2
    568c:	432b      	orrs	r3, r5
    568e:	469b      	mov	fp, r3
    5690:	00c3      	lsls	r3, r0, #3
    5692:	4698      	mov	r8, r3
    5694:	4b67      	ldr	r3, [pc, #412]	; (5834 <__aeabi_dmul+0x1e0>)
    5696:	2700      	movs	r7, #0
    5698:	469c      	mov	ip, r3
    569a:	2300      	movs	r3, #0
    569c:	4466      	add	r6, ip
    569e:	9301      	str	r3, [sp, #4]
    56a0:	464a      	mov	r2, r9
    56a2:	0315      	lsls	r5, r2, #12
    56a4:	0050      	lsls	r0, r2, #1
    56a6:	0fd2      	lsrs	r2, r2, #31
    56a8:	4653      	mov	r3, sl
    56aa:	0b2d      	lsrs	r5, r5, #12
    56ac:	0d40      	lsrs	r0, r0, #21
    56ae:	4691      	mov	r9, r2
    56b0:	d100      	bne.n	56b4 <__aeabi_dmul+0x60>
    56b2:	e076      	b.n	57a2 <__aeabi_dmul+0x14e>
    56b4:	4a5e      	ldr	r2, [pc, #376]	; (5830 <__aeabi_dmul+0x1dc>)
    56b6:	4290      	cmp	r0, r2
    56b8:	d06c      	beq.n	5794 <__aeabi_dmul+0x140>
    56ba:	2280      	movs	r2, #128	; 0x80
    56bc:	0f5b      	lsrs	r3, r3, #29
    56be:	0412      	lsls	r2, r2, #16
    56c0:	4313      	orrs	r3, r2
    56c2:	4a5c      	ldr	r2, [pc, #368]	; (5834 <__aeabi_dmul+0x1e0>)
    56c4:	00ed      	lsls	r5, r5, #3
    56c6:	4694      	mov	ip, r2
    56c8:	431d      	orrs	r5, r3
    56ca:	4653      	mov	r3, sl
    56cc:	2200      	movs	r2, #0
    56ce:	00db      	lsls	r3, r3, #3
    56d0:	4460      	add	r0, ip
    56d2:	4649      	mov	r1, r9
    56d4:	1836      	adds	r6, r6, r0
    56d6:	1c70      	adds	r0, r6, #1
    56d8:	4061      	eors	r1, r4
    56da:	9002      	str	r0, [sp, #8]
    56dc:	4317      	orrs	r7, r2
    56de:	2f0f      	cmp	r7, #15
    56e0:	d900      	bls.n	56e4 <__aeabi_dmul+0x90>
    56e2:	e0af      	b.n	5844 <__aeabi_dmul+0x1f0>
    56e4:	4854      	ldr	r0, [pc, #336]	; (5838 <__aeabi_dmul+0x1e4>)
    56e6:	00bf      	lsls	r7, r7, #2
    56e8:	59c7      	ldr	r7, [r0, r7]
    56ea:	46bf      	mov	pc, r7
    56ec:	465b      	mov	r3, fp
    56ee:	431f      	orrs	r7, r3
    56f0:	d000      	beq.n	56f4 <__aeabi_dmul+0xa0>
    56f2:	e088      	b.n	5806 <__aeabi_dmul+0x1b2>
    56f4:	2300      	movs	r3, #0
    56f6:	469b      	mov	fp, r3
    56f8:	4698      	mov	r8, r3
    56fa:	3302      	adds	r3, #2
    56fc:	2708      	movs	r7, #8
    56fe:	9301      	str	r3, [sp, #4]
    5700:	e7ce      	b.n	56a0 <__aeabi_dmul+0x4c>
    5702:	4649      	mov	r1, r9
    5704:	2a02      	cmp	r2, #2
    5706:	d06a      	beq.n	57de <__aeabi_dmul+0x18a>
    5708:	2a03      	cmp	r2, #3
    570a:	d100      	bne.n	570e <__aeabi_dmul+0xba>
    570c:	e209      	b.n	5b22 <__aeabi_dmul+0x4ce>
    570e:	2a01      	cmp	r2, #1
    5710:	d000      	beq.n	5714 <__aeabi_dmul+0xc0>
    5712:	e1bb      	b.n	5a8c <__aeabi_dmul+0x438>
    5714:	4011      	ands	r1, r2
    5716:	2200      	movs	r2, #0
    5718:	2300      	movs	r3, #0
    571a:	2500      	movs	r5, #0
    571c:	4690      	mov	r8, r2
    571e:	b2cc      	uxtb	r4, r1
    5720:	2100      	movs	r1, #0
    5722:	032d      	lsls	r5, r5, #12
    5724:	0d0a      	lsrs	r2, r1, #20
    5726:	0512      	lsls	r2, r2, #20
    5728:	0b2d      	lsrs	r5, r5, #12
    572a:	4315      	orrs	r5, r2
    572c:	4a43      	ldr	r2, [pc, #268]	; (583c <__aeabi_dmul+0x1e8>)
    572e:	051b      	lsls	r3, r3, #20
    5730:	4015      	ands	r5, r2
    5732:	431d      	orrs	r5, r3
    5734:	006d      	lsls	r5, r5, #1
    5736:	07e4      	lsls	r4, r4, #31
    5738:	086d      	lsrs	r5, r5, #1
    573a:	4325      	orrs	r5, r4
    573c:	4640      	mov	r0, r8
    573e:	0029      	movs	r1, r5
    5740:	b007      	add	sp, #28
    5742:	bc3c      	pop	{r2, r3, r4, r5}
    5744:	4690      	mov	r8, r2
    5746:	4699      	mov	r9, r3
    5748:	46a2      	mov	sl, r4
    574a:	46ab      	mov	fp, r5
    574c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    574e:	4303      	orrs	r3, r0
    5750:	d052      	beq.n	57f8 <__aeabi_dmul+0x1a4>
    5752:	465b      	mov	r3, fp
    5754:	2b00      	cmp	r3, #0
    5756:	d100      	bne.n	575a <__aeabi_dmul+0x106>
    5758:	e18a      	b.n	5a70 <__aeabi_dmul+0x41c>
    575a:	4658      	mov	r0, fp
    575c:	f000 fef8 	bl	6550 <__clzsi2>
    5760:	0003      	movs	r3, r0
    5762:	3b0b      	subs	r3, #11
    5764:	2b1c      	cmp	r3, #28
    5766:	dd00      	ble.n	576a <__aeabi_dmul+0x116>
    5768:	e17b      	b.n	5a62 <__aeabi_dmul+0x40e>
    576a:	221d      	movs	r2, #29
    576c:	1ad3      	subs	r3, r2, r3
    576e:	003a      	movs	r2, r7
    5770:	0001      	movs	r1, r0
    5772:	465d      	mov	r5, fp
    5774:	40da      	lsrs	r2, r3
    5776:	3908      	subs	r1, #8
    5778:	408d      	lsls	r5, r1
    577a:	0013      	movs	r3, r2
    577c:	408f      	lsls	r7, r1
    577e:	432b      	orrs	r3, r5
    5780:	469b      	mov	fp, r3
    5782:	46b8      	mov	r8, r7
    5784:	4b2e      	ldr	r3, [pc, #184]	; (5840 <__aeabi_dmul+0x1ec>)
    5786:	2700      	movs	r7, #0
    5788:	469c      	mov	ip, r3
    578a:	2300      	movs	r3, #0
    578c:	4460      	add	r0, ip
    578e:	4246      	negs	r6, r0
    5790:	9301      	str	r3, [sp, #4]
    5792:	e785      	b.n	56a0 <__aeabi_dmul+0x4c>
    5794:	4652      	mov	r2, sl
    5796:	432a      	orrs	r2, r5
    5798:	d12c      	bne.n	57f4 <__aeabi_dmul+0x1a0>
    579a:	2500      	movs	r5, #0
    579c:	2300      	movs	r3, #0
    579e:	2202      	movs	r2, #2
    57a0:	e797      	b.n	56d2 <__aeabi_dmul+0x7e>
    57a2:	4652      	mov	r2, sl
    57a4:	432a      	orrs	r2, r5
    57a6:	d021      	beq.n	57ec <__aeabi_dmul+0x198>
    57a8:	2d00      	cmp	r5, #0
    57aa:	d100      	bne.n	57ae <__aeabi_dmul+0x15a>
    57ac:	e154      	b.n	5a58 <__aeabi_dmul+0x404>
    57ae:	0028      	movs	r0, r5
    57b0:	f000 fece 	bl	6550 <__clzsi2>
    57b4:	0003      	movs	r3, r0
    57b6:	3b0b      	subs	r3, #11
    57b8:	2b1c      	cmp	r3, #28
    57ba:	dd00      	ble.n	57be <__aeabi_dmul+0x16a>
    57bc:	e146      	b.n	5a4c <__aeabi_dmul+0x3f8>
    57be:	211d      	movs	r1, #29
    57c0:	1acb      	subs	r3, r1, r3
    57c2:	4651      	mov	r1, sl
    57c4:	0002      	movs	r2, r0
    57c6:	40d9      	lsrs	r1, r3
    57c8:	4653      	mov	r3, sl
    57ca:	3a08      	subs	r2, #8
    57cc:	4095      	lsls	r5, r2
    57ce:	4093      	lsls	r3, r2
    57d0:	430d      	orrs	r5, r1
    57d2:	4a1b      	ldr	r2, [pc, #108]	; (5840 <__aeabi_dmul+0x1ec>)
    57d4:	4694      	mov	ip, r2
    57d6:	4460      	add	r0, ip
    57d8:	4240      	negs	r0, r0
    57da:	2200      	movs	r2, #0
    57dc:	e779      	b.n	56d2 <__aeabi_dmul+0x7e>
    57de:	2401      	movs	r4, #1
    57e0:	2200      	movs	r2, #0
    57e2:	400c      	ands	r4, r1
    57e4:	4b12      	ldr	r3, [pc, #72]	; (5830 <__aeabi_dmul+0x1dc>)
    57e6:	2500      	movs	r5, #0
    57e8:	4690      	mov	r8, r2
    57ea:	e799      	b.n	5720 <__aeabi_dmul+0xcc>
    57ec:	2500      	movs	r5, #0
    57ee:	2300      	movs	r3, #0
    57f0:	2201      	movs	r2, #1
    57f2:	e76e      	b.n	56d2 <__aeabi_dmul+0x7e>
    57f4:	2203      	movs	r2, #3
    57f6:	e76c      	b.n	56d2 <__aeabi_dmul+0x7e>
    57f8:	2300      	movs	r3, #0
    57fa:	469b      	mov	fp, r3
    57fc:	4698      	mov	r8, r3
    57fe:	3301      	adds	r3, #1
    5800:	2704      	movs	r7, #4
    5802:	9301      	str	r3, [sp, #4]
    5804:	e74c      	b.n	56a0 <__aeabi_dmul+0x4c>
    5806:	2303      	movs	r3, #3
    5808:	270c      	movs	r7, #12
    580a:	9301      	str	r3, [sp, #4]
    580c:	e748      	b.n	56a0 <__aeabi_dmul+0x4c>
    580e:	2300      	movs	r3, #0
    5810:	2580      	movs	r5, #128	; 0x80
    5812:	4698      	mov	r8, r3
    5814:	2400      	movs	r4, #0
    5816:	032d      	lsls	r5, r5, #12
    5818:	4b05      	ldr	r3, [pc, #20]	; (5830 <__aeabi_dmul+0x1dc>)
    581a:	e781      	b.n	5720 <__aeabi_dmul+0xcc>
    581c:	465d      	mov	r5, fp
    581e:	4643      	mov	r3, r8
    5820:	9a01      	ldr	r2, [sp, #4]
    5822:	e76f      	b.n	5704 <__aeabi_dmul+0xb0>
    5824:	465d      	mov	r5, fp
    5826:	4643      	mov	r3, r8
    5828:	0021      	movs	r1, r4
    582a:	9a01      	ldr	r2, [sp, #4]
    582c:	e76a      	b.n	5704 <__aeabi_dmul+0xb0>
    582e:	46c0      	nop			; (mov r8, r8)
    5830:	000007ff 	.word	0x000007ff
    5834:	fffffc01 	.word	0xfffffc01
    5838:	000066a0 	.word	0x000066a0
    583c:	800fffff 	.word	0x800fffff
    5840:	000003f3 	.word	0x000003f3
    5844:	4642      	mov	r2, r8
    5846:	0c12      	lsrs	r2, r2, #16
    5848:	4691      	mov	r9, r2
    584a:	0c1a      	lsrs	r2, r3, #16
    584c:	4694      	mov	ip, r2
    584e:	4642      	mov	r2, r8
    5850:	0417      	lsls	r7, r2, #16
    5852:	464a      	mov	r2, r9
    5854:	041b      	lsls	r3, r3, #16
    5856:	0c1b      	lsrs	r3, r3, #16
    5858:	435a      	muls	r2, r3
    585a:	4660      	mov	r0, ip
    585c:	4690      	mov	r8, r2
    585e:	464a      	mov	r2, r9
    5860:	4342      	muls	r2, r0
    5862:	0010      	movs	r0, r2
    5864:	9203      	str	r2, [sp, #12]
    5866:	4662      	mov	r2, ip
    5868:	001c      	movs	r4, r3
    586a:	0c3f      	lsrs	r7, r7, #16
    586c:	437a      	muls	r2, r7
    586e:	437c      	muls	r4, r7
    5870:	4442      	add	r2, r8
    5872:	9201      	str	r2, [sp, #4]
    5874:	0c22      	lsrs	r2, r4, #16
    5876:	4692      	mov	sl, r2
    5878:	9a01      	ldr	r2, [sp, #4]
    587a:	4452      	add	r2, sl
    587c:	4590      	cmp	r8, r2
    587e:	d906      	bls.n	588e <__aeabi_dmul+0x23a>
    5880:	4682      	mov	sl, r0
    5882:	2080      	movs	r0, #128	; 0x80
    5884:	0240      	lsls	r0, r0, #9
    5886:	4680      	mov	r8, r0
    5888:	44c2      	add	sl, r8
    588a:	4650      	mov	r0, sl
    588c:	9003      	str	r0, [sp, #12]
    588e:	0c10      	lsrs	r0, r2, #16
    5890:	9004      	str	r0, [sp, #16]
    5892:	4648      	mov	r0, r9
    5894:	0424      	lsls	r4, r4, #16
    5896:	0c24      	lsrs	r4, r4, #16
    5898:	0412      	lsls	r2, r2, #16
    589a:	1912      	adds	r2, r2, r4
    589c:	9205      	str	r2, [sp, #20]
    589e:	0c2a      	lsrs	r2, r5, #16
    58a0:	042d      	lsls	r5, r5, #16
    58a2:	0c2d      	lsrs	r5, r5, #16
    58a4:	4368      	muls	r0, r5
    58a6:	002c      	movs	r4, r5
    58a8:	4682      	mov	sl, r0
    58aa:	4648      	mov	r0, r9
    58ac:	437c      	muls	r4, r7
    58ae:	4350      	muls	r0, r2
    58b0:	4681      	mov	r9, r0
    58b2:	0c20      	lsrs	r0, r4, #16
    58b4:	4680      	mov	r8, r0
    58b6:	4357      	muls	r7, r2
    58b8:	4457      	add	r7, sl
    58ba:	4447      	add	r7, r8
    58bc:	45ba      	cmp	sl, r7
    58be:	d903      	bls.n	58c8 <__aeabi_dmul+0x274>
    58c0:	2080      	movs	r0, #128	; 0x80
    58c2:	0240      	lsls	r0, r0, #9
    58c4:	4680      	mov	r8, r0
    58c6:	44c1      	add	r9, r8
    58c8:	0c38      	lsrs	r0, r7, #16
    58ca:	043f      	lsls	r7, r7, #16
    58cc:	46b8      	mov	r8, r7
    58ce:	4448      	add	r0, r9
    58d0:	0424      	lsls	r4, r4, #16
    58d2:	0c24      	lsrs	r4, r4, #16
    58d4:	9001      	str	r0, [sp, #4]
    58d6:	9804      	ldr	r0, [sp, #16]
    58d8:	44a0      	add	r8, r4
    58da:	4440      	add	r0, r8
    58dc:	9004      	str	r0, [sp, #16]
    58de:	4658      	mov	r0, fp
    58e0:	0c00      	lsrs	r0, r0, #16
    58e2:	4681      	mov	r9, r0
    58e4:	4658      	mov	r0, fp
    58e6:	0404      	lsls	r4, r0, #16
    58e8:	0c20      	lsrs	r0, r4, #16
    58ea:	4682      	mov	sl, r0
    58ec:	0007      	movs	r7, r0
    58ee:	4648      	mov	r0, r9
    58f0:	435f      	muls	r7, r3
    58f2:	464c      	mov	r4, r9
    58f4:	4343      	muls	r3, r0
    58f6:	4660      	mov	r0, ip
    58f8:	4360      	muls	r0, r4
    58fa:	4664      	mov	r4, ip
    58fc:	4683      	mov	fp, r0
    58fe:	4650      	mov	r0, sl
    5900:	4344      	muls	r4, r0
    5902:	0c38      	lsrs	r0, r7, #16
    5904:	4684      	mov	ip, r0
    5906:	18e4      	adds	r4, r4, r3
    5908:	4464      	add	r4, ip
    590a:	42a3      	cmp	r3, r4
    590c:	d903      	bls.n	5916 <__aeabi_dmul+0x2c2>
    590e:	2380      	movs	r3, #128	; 0x80
    5910:	025b      	lsls	r3, r3, #9
    5912:	469c      	mov	ip, r3
    5914:	44e3      	add	fp, ip
    5916:	4648      	mov	r0, r9
    5918:	043f      	lsls	r7, r7, #16
    591a:	0c23      	lsrs	r3, r4, #16
    591c:	0c3f      	lsrs	r7, r7, #16
    591e:	0424      	lsls	r4, r4, #16
    5920:	19e4      	adds	r4, r4, r7
    5922:	4657      	mov	r7, sl
    5924:	4368      	muls	r0, r5
    5926:	436f      	muls	r7, r5
    5928:	4684      	mov	ip, r0
    592a:	464d      	mov	r5, r9
    592c:	4650      	mov	r0, sl
    592e:	4355      	muls	r5, r2
    5930:	4342      	muls	r2, r0
    5932:	0c38      	lsrs	r0, r7, #16
    5934:	4681      	mov	r9, r0
    5936:	4462      	add	r2, ip
    5938:	444a      	add	r2, r9
    593a:	445b      	add	r3, fp
    593c:	4594      	cmp	ip, r2
    593e:	d903      	bls.n	5948 <__aeabi_dmul+0x2f4>
    5940:	2080      	movs	r0, #128	; 0x80
    5942:	0240      	lsls	r0, r0, #9
    5944:	4684      	mov	ip, r0
    5946:	4465      	add	r5, ip
    5948:	9803      	ldr	r0, [sp, #12]
    594a:	043f      	lsls	r7, r7, #16
    594c:	4683      	mov	fp, r0
    594e:	9804      	ldr	r0, [sp, #16]
    5950:	0c3f      	lsrs	r7, r7, #16
    5952:	4684      	mov	ip, r0
    5954:	44e3      	add	fp, ip
    5956:	45c3      	cmp	fp, r8
    5958:	4180      	sbcs	r0, r0
    595a:	4240      	negs	r0, r0
    595c:	4682      	mov	sl, r0
    595e:	0410      	lsls	r0, r2, #16
    5960:	4684      	mov	ip, r0
    5962:	9801      	ldr	r0, [sp, #4]
    5964:	4467      	add	r7, ip
    5966:	4684      	mov	ip, r0
    5968:	4467      	add	r7, ip
    596a:	44a3      	add	fp, r4
    596c:	46bc      	mov	ip, r7
    596e:	45a3      	cmp	fp, r4
    5970:	41a4      	sbcs	r4, r4
    5972:	4699      	mov	r9, r3
    5974:	44d4      	add	ip, sl
    5976:	4264      	negs	r4, r4
    5978:	4287      	cmp	r7, r0
    597a:	41bf      	sbcs	r7, r7
    597c:	45d4      	cmp	ip, sl
    597e:	4180      	sbcs	r0, r0
    5980:	44e1      	add	r9, ip
    5982:	46a0      	mov	r8, r4
    5984:	4599      	cmp	r9, r3
    5986:	419b      	sbcs	r3, r3
    5988:	427f      	negs	r7, r7
    598a:	4240      	negs	r0, r0
    598c:	44c8      	add	r8, r9
    598e:	4307      	orrs	r7, r0
    5990:	0c12      	lsrs	r2, r2, #16
    5992:	18ba      	adds	r2, r7, r2
    5994:	45a0      	cmp	r8, r4
    5996:	41a4      	sbcs	r4, r4
    5998:	425f      	negs	r7, r3
    599a:	003b      	movs	r3, r7
    599c:	4264      	negs	r4, r4
    599e:	4323      	orrs	r3, r4
    59a0:	18d7      	adds	r7, r2, r3
    59a2:	4643      	mov	r3, r8
    59a4:	197d      	adds	r5, r7, r5
    59a6:	0ddb      	lsrs	r3, r3, #23
    59a8:	026d      	lsls	r5, r5, #9
    59aa:	431d      	orrs	r5, r3
    59ac:	465b      	mov	r3, fp
    59ae:	025a      	lsls	r2, r3, #9
    59b0:	9b05      	ldr	r3, [sp, #20]
    59b2:	431a      	orrs	r2, r3
    59b4:	1e53      	subs	r3, r2, #1
    59b6:	419a      	sbcs	r2, r3
    59b8:	465b      	mov	r3, fp
    59ba:	0ddb      	lsrs	r3, r3, #23
    59bc:	431a      	orrs	r2, r3
    59be:	4643      	mov	r3, r8
    59c0:	025b      	lsls	r3, r3, #9
    59c2:	4313      	orrs	r3, r2
    59c4:	01ea      	lsls	r2, r5, #7
    59c6:	d507      	bpl.n	59d8 <__aeabi_dmul+0x384>
    59c8:	2201      	movs	r2, #1
    59ca:	085c      	lsrs	r4, r3, #1
    59cc:	4013      	ands	r3, r2
    59ce:	4323      	orrs	r3, r4
    59d0:	07ea      	lsls	r2, r5, #31
    59d2:	9e02      	ldr	r6, [sp, #8]
    59d4:	4313      	orrs	r3, r2
    59d6:	086d      	lsrs	r5, r5, #1
    59d8:	4a57      	ldr	r2, [pc, #348]	; (5b38 <__aeabi_dmul+0x4e4>)
    59da:	18b2      	adds	r2, r6, r2
    59dc:	2a00      	cmp	r2, #0
    59de:	dd4b      	ble.n	5a78 <__aeabi_dmul+0x424>
    59e0:	0758      	lsls	r0, r3, #29
    59e2:	d009      	beq.n	59f8 <__aeabi_dmul+0x3a4>
    59e4:	200f      	movs	r0, #15
    59e6:	4018      	ands	r0, r3
    59e8:	2804      	cmp	r0, #4
    59ea:	d005      	beq.n	59f8 <__aeabi_dmul+0x3a4>
    59ec:	1d18      	adds	r0, r3, #4
    59ee:	4298      	cmp	r0, r3
    59f0:	419b      	sbcs	r3, r3
    59f2:	425b      	negs	r3, r3
    59f4:	18ed      	adds	r5, r5, r3
    59f6:	0003      	movs	r3, r0
    59f8:	01e8      	lsls	r0, r5, #7
    59fa:	d504      	bpl.n	5a06 <__aeabi_dmul+0x3b2>
    59fc:	4a4f      	ldr	r2, [pc, #316]	; (5b3c <__aeabi_dmul+0x4e8>)
    59fe:	4015      	ands	r5, r2
    5a00:	2280      	movs	r2, #128	; 0x80
    5a02:	00d2      	lsls	r2, r2, #3
    5a04:	18b2      	adds	r2, r6, r2
    5a06:	484e      	ldr	r0, [pc, #312]	; (5b40 <__aeabi_dmul+0x4ec>)
    5a08:	4282      	cmp	r2, r0
    5a0a:	dd00      	ble.n	5a0e <__aeabi_dmul+0x3ba>
    5a0c:	e6e7      	b.n	57de <__aeabi_dmul+0x18a>
    5a0e:	2401      	movs	r4, #1
    5a10:	08db      	lsrs	r3, r3, #3
    5a12:	0768      	lsls	r0, r5, #29
    5a14:	4318      	orrs	r0, r3
    5a16:	026d      	lsls	r5, r5, #9
    5a18:	0553      	lsls	r3, r2, #21
    5a1a:	4680      	mov	r8, r0
    5a1c:	0b2d      	lsrs	r5, r5, #12
    5a1e:	0d5b      	lsrs	r3, r3, #21
    5a20:	400c      	ands	r4, r1
    5a22:	e67d      	b.n	5720 <__aeabi_dmul+0xcc>
    5a24:	2280      	movs	r2, #128	; 0x80
    5a26:	4659      	mov	r1, fp
    5a28:	0312      	lsls	r2, r2, #12
    5a2a:	4211      	tst	r1, r2
    5a2c:	d008      	beq.n	5a40 <__aeabi_dmul+0x3ec>
    5a2e:	4215      	tst	r5, r2
    5a30:	d106      	bne.n	5a40 <__aeabi_dmul+0x3ec>
    5a32:	4315      	orrs	r5, r2
    5a34:	032d      	lsls	r5, r5, #12
    5a36:	4698      	mov	r8, r3
    5a38:	0b2d      	lsrs	r5, r5, #12
    5a3a:	464c      	mov	r4, r9
    5a3c:	4b41      	ldr	r3, [pc, #260]	; (5b44 <__aeabi_dmul+0x4f0>)
    5a3e:	e66f      	b.n	5720 <__aeabi_dmul+0xcc>
    5a40:	465d      	mov	r5, fp
    5a42:	4315      	orrs	r5, r2
    5a44:	032d      	lsls	r5, r5, #12
    5a46:	0b2d      	lsrs	r5, r5, #12
    5a48:	4b3e      	ldr	r3, [pc, #248]	; (5b44 <__aeabi_dmul+0x4f0>)
    5a4a:	e669      	b.n	5720 <__aeabi_dmul+0xcc>
    5a4c:	0003      	movs	r3, r0
    5a4e:	4655      	mov	r5, sl
    5a50:	3b28      	subs	r3, #40	; 0x28
    5a52:	409d      	lsls	r5, r3
    5a54:	2300      	movs	r3, #0
    5a56:	e6bc      	b.n	57d2 <__aeabi_dmul+0x17e>
    5a58:	4650      	mov	r0, sl
    5a5a:	f000 fd79 	bl	6550 <__clzsi2>
    5a5e:	3020      	adds	r0, #32
    5a60:	e6a8      	b.n	57b4 <__aeabi_dmul+0x160>
    5a62:	0003      	movs	r3, r0
    5a64:	3b28      	subs	r3, #40	; 0x28
    5a66:	409f      	lsls	r7, r3
    5a68:	2300      	movs	r3, #0
    5a6a:	46bb      	mov	fp, r7
    5a6c:	4698      	mov	r8, r3
    5a6e:	e689      	b.n	5784 <__aeabi_dmul+0x130>
    5a70:	f000 fd6e 	bl	6550 <__clzsi2>
    5a74:	3020      	adds	r0, #32
    5a76:	e673      	b.n	5760 <__aeabi_dmul+0x10c>
    5a78:	2401      	movs	r4, #1
    5a7a:	1aa6      	subs	r6, r4, r2
    5a7c:	2e38      	cmp	r6, #56	; 0x38
    5a7e:	dd07      	ble.n	5a90 <__aeabi_dmul+0x43c>
    5a80:	2200      	movs	r2, #0
    5a82:	400c      	ands	r4, r1
    5a84:	2300      	movs	r3, #0
    5a86:	2500      	movs	r5, #0
    5a88:	4690      	mov	r8, r2
    5a8a:	e649      	b.n	5720 <__aeabi_dmul+0xcc>
    5a8c:	9e02      	ldr	r6, [sp, #8]
    5a8e:	e7a3      	b.n	59d8 <__aeabi_dmul+0x384>
    5a90:	2e1f      	cmp	r6, #31
    5a92:	dc20      	bgt.n	5ad6 <__aeabi_dmul+0x482>
    5a94:	2220      	movs	r2, #32
    5a96:	002c      	movs	r4, r5
    5a98:	0018      	movs	r0, r3
    5a9a:	1b92      	subs	r2, r2, r6
    5a9c:	40f0      	lsrs	r0, r6
    5a9e:	4094      	lsls	r4, r2
    5aa0:	4093      	lsls	r3, r2
    5aa2:	4304      	orrs	r4, r0
    5aa4:	1e58      	subs	r0, r3, #1
    5aa6:	4183      	sbcs	r3, r0
    5aa8:	431c      	orrs	r4, r3
    5aaa:	40f5      	lsrs	r5, r6
    5aac:	0763      	lsls	r3, r4, #29
    5aae:	d009      	beq.n	5ac4 <__aeabi_dmul+0x470>
    5ab0:	230f      	movs	r3, #15
    5ab2:	4023      	ands	r3, r4
    5ab4:	2b04      	cmp	r3, #4
    5ab6:	d005      	beq.n	5ac4 <__aeabi_dmul+0x470>
    5ab8:	0023      	movs	r3, r4
    5aba:	1d1c      	adds	r4, r3, #4
    5abc:	429c      	cmp	r4, r3
    5abe:	4192      	sbcs	r2, r2
    5ac0:	4252      	negs	r2, r2
    5ac2:	18ad      	adds	r5, r5, r2
    5ac4:	022b      	lsls	r3, r5, #8
    5ac6:	d51f      	bpl.n	5b08 <__aeabi_dmul+0x4b4>
    5ac8:	2401      	movs	r4, #1
    5aca:	2200      	movs	r2, #0
    5acc:	400c      	ands	r4, r1
    5ace:	2301      	movs	r3, #1
    5ad0:	2500      	movs	r5, #0
    5ad2:	4690      	mov	r8, r2
    5ad4:	e624      	b.n	5720 <__aeabi_dmul+0xcc>
    5ad6:	201f      	movs	r0, #31
    5ad8:	002c      	movs	r4, r5
    5ada:	4240      	negs	r0, r0
    5adc:	1a82      	subs	r2, r0, r2
    5ade:	40d4      	lsrs	r4, r2
    5ae0:	2e20      	cmp	r6, #32
    5ae2:	d01c      	beq.n	5b1e <__aeabi_dmul+0x4ca>
    5ae4:	2240      	movs	r2, #64	; 0x40
    5ae6:	1b96      	subs	r6, r2, r6
    5ae8:	40b5      	lsls	r5, r6
    5aea:	432b      	orrs	r3, r5
    5aec:	1e58      	subs	r0, r3, #1
    5aee:	4183      	sbcs	r3, r0
    5af0:	2007      	movs	r0, #7
    5af2:	4323      	orrs	r3, r4
    5af4:	4018      	ands	r0, r3
    5af6:	2500      	movs	r5, #0
    5af8:	2800      	cmp	r0, #0
    5afa:	d009      	beq.n	5b10 <__aeabi_dmul+0x4bc>
    5afc:	220f      	movs	r2, #15
    5afe:	2500      	movs	r5, #0
    5b00:	401a      	ands	r2, r3
    5b02:	001c      	movs	r4, r3
    5b04:	2a04      	cmp	r2, #4
    5b06:	d1d8      	bne.n	5aba <__aeabi_dmul+0x466>
    5b08:	0023      	movs	r3, r4
    5b0a:	0768      	lsls	r0, r5, #29
    5b0c:	026d      	lsls	r5, r5, #9
    5b0e:	0b2d      	lsrs	r5, r5, #12
    5b10:	2401      	movs	r4, #1
    5b12:	08db      	lsrs	r3, r3, #3
    5b14:	4303      	orrs	r3, r0
    5b16:	4698      	mov	r8, r3
    5b18:	400c      	ands	r4, r1
    5b1a:	2300      	movs	r3, #0
    5b1c:	e600      	b.n	5720 <__aeabi_dmul+0xcc>
    5b1e:	2500      	movs	r5, #0
    5b20:	e7e3      	b.n	5aea <__aeabi_dmul+0x496>
    5b22:	2280      	movs	r2, #128	; 0x80
    5b24:	2401      	movs	r4, #1
    5b26:	0312      	lsls	r2, r2, #12
    5b28:	4315      	orrs	r5, r2
    5b2a:	032d      	lsls	r5, r5, #12
    5b2c:	4698      	mov	r8, r3
    5b2e:	0b2d      	lsrs	r5, r5, #12
    5b30:	400c      	ands	r4, r1
    5b32:	4b04      	ldr	r3, [pc, #16]	; (5b44 <__aeabi_dmul+0x4f0>)
    5b34:	e5f4      	b.n	5720 <__aeabi_dmul+0xcc>
    5b36:	46c0      	nop			; (mov r8, r8)
    5b38:	000003ff 	.word	0x000003ff
    5b3c:	feffffff 	.word	0xfeffffff
    5b40:	000007fe 	.word	0x000007fe
    5b44:	000007ff 	.word	0x000007ff

00005b48 <__aeabi_dsub>:
    5b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    5b4a:	4657      	mov	r7, sl
    5b4c:	464e      	mov	r6, r9
    5b4e:	4645      	mov	r5, r8
    5b50:	b4e0      	push	{r5, r6, r7}
    5b52:	000e      	movs	r6, r1
    5b54:	0011      	movs	r1, r2
    5b56:	0ff2      	lsrs	r2, r6, #31
    5b58:	4692      	mov	sl, r2
    5b5a:	00c5      	lsls	r5, r0, #3
    5b5c:	0f42      	lsrs	r2, r0, #29
    5b5e:	0318      	lsls	r0, r3, #12
    5b60:	0337      	lsls	r7, r6, #12
    5b62:	0074      	lsls	r4, r6, #1
    5b64:	0a40      	lsrs	r0, r0, #9
    5b66:	0f4e      	lsrs	r6, r1, #29
    5b68:	0a7f      	lsrs	r7, r7, #9
    5b6a:	4330      	orrs	r0, r6
    5b6c:	4ecf      	ldr	r6, [pc, #828]	; (5eac <__aeabi_dsub+0x364>)
    5b6e:	4317      	orrs	r7, r2
    5b70:	005a      	lsls	r2, r3, #1
    5b72:	0d64      	lsrs	r4, r4, #21
    5b74:	0d52      	lsrs	r2, r2, #21
    5b76:	0fdb      	lsrs	r3, r3, #31
    5b78:	00c9      	lsls	r1, r1, #3
    5b7a:	42b2      	cmp	r2, r6
    5b7c:	d100      	bne.n	5b80 <__aeabi_dsub+0x38>
    5b7e:	e0e5      	b.n	5d4c <__aeabi_dsub+0x204>
    5b80:	2601      	movs	r6, #1
    5b82:	4073      	eors	r3, r6
    5b84:	1aa6      	subs	r6, r4, r2
    5b86:	46b4      	mov	ip, r6
    5b88:	4553      	cmp	r3, sl
    5b8a:	d100      	bne.n	5b8e <__aeabi_dsub+0x46>
    5b8c:	e0af      	b.n	5cee <__aeabi_dsub+0x1a6>
    5b8e:	2e00      	cmp	r6, #0
    5b90:	dc00      	bgt.n	5b94 <__aeabi_dsub+0x4c>
    5b92:	e10d      	b.n	5db0 <__aeabi_dsub+0x268>
    5b94:	2a00      	cmp	r2, #0
    5b96:	d13a      	bne.n	5c0e <__aeabi_dsub+0xc6>
    5b98:	0003      	movs	r3, r0
    5b9a:	430b      	orrs	r3, r1
    5b9c:	d000      	beq.n	5ba0 <__aeabi_dsub+0x58>
    5b9e:	e0e4      	b.n	5d6a <__aeabi_dsub+0x222>
    5ba0:	076b      	lsls	r3, r5, #29
    5ba2:	d009      	beq.n	5bb8 <__aeabi_dsub+0x70>
    5ba4:	230f      	movs	r3, #15
    5ba6:	402b      	ands	r3, r5
    5ba8:	2b04      	cmp	r3, #4
    5baa:	d005      	beq.n	5bb8 <__aeabi_dsub+0x70>
    5bac:	1d2b      	adds	r3, r5, #4
    5bae:	42ab      	cmp	r3, r5
    5bb0:	41ad      	sbcs	r5, r5
    5bb2:	426d      	negs	r5, r5
    5bb4:	197f      	adds	r7, r7, r5
    5bb6:	001d      	movs	r5, r3
    5bb8:	023b      	lsls	r3, r7, #8
    5bba:	d400      	bmi.n	5bbe <__aeabi_dsub+0x76>
    5bbc:	e088      	b.n	5cd0 <__aeabi_dsub+0x188>
    5bbe:	4bbb      	ldr	r3, [pc, #748]	; (5eac <__aeabi_dsub+0x364>)
    5bc0:	3401      	adds	r4, #1
    5bc2:	429c      	cmp	r4, r3
    5bc4:	d100      	bne.n	5bc8 <__aeabi_dsub+0x80>
    5bc6:	e110      	b.n	5dea <__aeabi_dsub+0x2a2>
    5bc8:	003a      	movs	r2, r7
    5bca:	4bb9      	ldr	r3, [pc, #740]	; (5eb0 <__aeabi_dsub+0x368>)
    5bcc:	4651      	mov	r1, sl
    5bce:	401a      	ands	r2, r3
    5bd0:	2301      	movs	r3, #1
    5bd2:	0750      	lsls	r0, r2, #29
    5bd4:	08ed      	lsrs	r5, r5, #3
    5bd6:	0252      	lsls	r2, r2, #9
    5bd8:	0564      	lsls	r4, r4, #21
    5bda:	4305      	orrs	r5, r0
    5bdc:	0b12      	lsrs	r2, r2, #12
    5bde:	0d64      	lsrs	r4, r4, #21
    5be0:	400b      	ands	r3, r1
    5be2:	2100      	movs	r1, #0
    5be4:	0028      	movs	r0, r5
    5be6:	0312      	lsls	r2, r2, #12
    5be8:	0d0d      	lsrs	r5, r1, #20
    5bea:	0b12      	lsrs	r2, r2, #12
    5bec:	0564      	lsls	r4, r4, #21
    5bee:	052d      	lsls	r5, r5, #20
    5bf0:	4315      	orrs	r5, r2
    5bf2:	0862      	lsrs	r2, r4, #1
    5bf4:	4caf      	ldr	r4, [pc, #700]	; (5eb4 <__aeabi_dsub+0x36c>)
    5bf6:	07db      	lsls	r3, r3, #31
    5bf8:	402c      	ands	r4, r5
    5bfa:	4314      	orrs	r4, r2
    5bfc:	0064      	lsls	r4, r4, #1
    5bfe:	0864      	lsrs	r4, r4, #1
    5c00:	431c      	orrs	r4, r3
    5c02:	0021      	movs	r1, r4
    5c04:	bc1c      	pop	{r2, r3, r4}
    5c06:	4690      	mov	r8, r2
    5c08:	4699      	mov	r9, r3
    5c0a:	46a2      	mov	sl, r4
    5c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c0e:	4ba7      	ldr	r3, [pc, #668]	; (5eac <__aeabi_dsub+0x364>)
    5c10:	429c      	cmp	r4, r3
    5c12:	d0c5      	beq.n	5ba0 <__aeabi_dsub+0x58>
    5c14:	2380      	movs	r3, #128	; 0x80
    5c16:	041b      	lsls	r3, r3, #16
    5c18:	4318      	orrs	r0, r3
    5c1a:	4663      	mov	r3, ip
    5c1c:	2b38      	cmp	r3, #56	; 0x38
    5c1e:	dd00      	ble.n	5c22 <__aeabi_dsub+0xda>
    5c20:	e0fd      	b.n	5e1e <__aeabi_dsub+0x2d6>
    5c22:	2b1f      	cmp	r3, #31
    5c24:	dd00      	ble.n	5c28 <__aeabi_dsub+0xe0>
    5c26:	e130      	b.n	5e8a <__aeabi_dsub+0x342>
    5c28:	4662      	mov	r2, ip
    5c2a:	2320      	movs	r3, #32
    5c2c:	1a9b      	subs	r3, r3, r2
    5c2e:	0002      	movs	r2, r0
    5c30:	409a      	lsls	r2, r3
    5c32:	4666      	mov	r6, ip
    5c34:	4690      	mov	r8, r2
    5c36:	000a      	movs	r2, r1
    5c38:	4099      	lsls	r1, r3
    5c3a:	40f2      	lsrs	r2, r6
    5c3c:	4646      	mov	r6, r8
    5c3e:	1e4b      	subs	r3, r1, #1
    5c40:	4199      	sbcs	r1, r3
    5c42:	4332      	orrs	r2, r6
    5c44:	4311      	orrs	r1, r2
    5c46:	4663      	mov	r3, ip
    5c48:	0002      	movs	r2, r0
    5c4a:	40da      	lsrs	r2, r3
    5c4c:	1a69      	subs	r1, r5, r1
    5c4e:	428d      	cmp	r5, r1
    5c50:	419b      	sbcs	r3, r3
    5c52:	000d      	movs	r5, r1
    5c54:	1aba      	subs	r2, r7, r2
    5c56:	425b      	negs	r3, r3
    5c58:	1ad7      	subs	r7, r2, r3
    5c5a:	023b      	lsls	r3, r7, #8
    5c5c:	d535      	bpl.n	5cca <__aeabi_dsub+0x182>
    5c5e:	027a      	lsls	r2, r7, #9
    5c60:	0a53      	lsrs	r3, r2, #9
    5c62:	4698      	mov	r8, r3
    5c64:	4643      	mov	r3, r8
    5c66:	2b00      	cmp	r3, #0
    5c68:	d100      	bne.n	5c6c <__aeabi_dsub+0x124>
    5c6a:	e0c4      	b.n	5df6 <__aeabi_dsub+0x2ae>
    5c6c:	4640      	mov	r0, r8
    5c6e:	f000 fc6f 	bl	6550 <__clzsi2>
    5c72:	0003      	movs	r3, r0
    5c74:	3b08      	subs	r3, #8
    5c76:	2b1f      	cmp	r3, #31
    5c78:	dd00      	ble.n	5c7c <__aeabi_dsub+0x134>
    5c7a:	e0c5      	b.n	5e08 <__aeabi_dsub+0x2c0>
    5c7c:	2220      	movs	r2, #32
    5c7e:	0029      	movs	r1, r5
    5c80:	1ad2      	subs	r2, r2, r3
    5c82:	4647      	mov	r7, r8
    5c84:	40d1      	lsrs	r1, r2
    5c86:	409f      	lsls	r7, r3
    5c88:	000a      	movs	r2, r1
    5c8a:	409d      	lsls	r5, r3
    5c8c:	433a      	orrs	r2, r7
    5c8e:	429c      	cmp	r4, r3
    5c90:	dd00      	ble.n	5c94 <__aeabi_dsub+0x14c>
    5c92:	e0c0      	b.n	5e16 <__aeabi_dsub+0x2ce>
    5c94:	1b1c      	subs	r4, r3, r4
    5c96:	1c63      	adds	r3, r4, #1
    5c98:	2b1f      	cmp	r3, #31
    5c9a:	dd00      	ble.n	5c9e <__aeabi_dsub+0x156>
    5c9c:	e0e4      	b.n	5e68 <__aeabi_dsub+0x320>
    5c9e:	2120      	movs	r1, #32
    5ca0:	0014      	movs	r4, r2
    5ca2:	0028      	movs	r0, r5
    5ca4:	1ac9      	subs	r1, r1, r3
    5ca6:	40d8      	lsrs	r0, r3
    5ca8:	408c      	lsls	r4, r1
    5caa:	408d      	lsls	r5, r1
    5cac:	4304      	orrs	r4, r0
    5cae:	40da      	lsrs	r2, r3
    5cb0:	1e68      	subs	r0, r5, #1
    5cb2:	4185      	sbcs	r5, r0
    5cb4:	0017      	movs	r7, r2
    5cb6:	4325      	orrs	r5, r4
    5cb8:	2400      	movs	r4, #0
    5cba:	e771      	b.n	5ba0 <__aeabi_dsub+0x58>
    5cbc:	4642      	mov	r2, r8
    5cbe:	4663      	mov	r3, ip
    5cc0:	431a      	orrs	r2, r3
    5cc2:	d100      	bne.n	5cc6 <__aeabi_dsub+0x17e>
    5cc4:	e24c      	b.n	6160 <__aeabi_dsub+0x618>
    5cc6:	4667      	mov	r7, ip
    5cc8:	4645      	mov	r5, r8
    5cca:	076b      	lsls	r3, r5, #29
    5ccc:	d000      	beq.n	5cd0 <__aeabi_dsub+0x188>
    5cce:	e769      	b.n	5ba4 <__aeabi_dsub+0x5c>
    5cd0:	2301      	movs	r3, #1
    5cd2:	4651      	mov	r1, sl
    5cd4:	0778      	lsls	r0, r7, #29
    5cd6:	08ed      	lsrs	r5, r5, #3
    5cd8:	08fa      	lsrs	r2, r7, #3
    5cda:	400b      	ands	r3, r1
    5cdc:	4305      	orrs	r5, r0
    5cde:	4973      	ldr	r1, [pc, #460]	; (5eac <__aeabi_dsub+0x364>)
    5ce0:	428c      	cmp	r4, r1
    5ce2:	d038      	beq.n	5d56 <__aeabi_dsub+0x20e>
    5ce4:	0312      	lsls	r2, r2, #12
    5ce6:	0564      	lsls	r4, r4, #21
    5ce8:	0b12      	lsrs	r2, r2, #12
    5cea:	0d64      	lsrs	r4, r4, #21
    5cec:	e779      	b.n	5be2 <__aeabi_dsub+0x9a>
    5cee:	2e00      	cmp	r6, #0
    5cf0:	dc00      	bgt.n	5cf4 <__aeabi_dsub+0x1ac>
    5cf2:	e09a      	b.n	5e2a <__aeabi_dsub+0x2e2>
    5cf4:	2a00      	cmp	r2, #0
    5cf6:	d047      	beq.n	5d88 <__aeabi_dsub+0x240>
    5cf8:	4a6c      	ldr	r2, [pc, #432]	; (5eac <__aeabi_dsub+0x364>)
    5cfa:	4294      	cmp	r4, r2
    5cfc:	d100      	bne.n	5d00 <__aeabi_dsub+0x1b8>
    5cfe:	e74f      	b.n	5ba0 <__aeabi_dsub+0x58>
    5d00:	2280      	movs	r2, #128	; 0x80
    5d02:	0412      	lsls	r2, r2, #16
    5d04:	4310      	orrs	r0, r2
    5d06:	4662      	mov	r2, ip
    5d08:	2a38      	cmp	r2, #56	; 0x38
    5d0a:	dc00      	bgt.n	5d0e <__aeabi_dsub+0x1c6>
    5d0c:	e108      	b.n	5f20 <__aeabi_dsub+0x3d8>
    5d0e:	4301      	orrs	r1, r0
    5d10:	1e48      	subs	r0, r1, #1
    5d12:	4181      	sbcs	r1, r0
    5d14:	2200      	movs	r2, #0
    5d16:	b2c9      	uxtb	r1, r1
    5d18:	1949      	adds	r1, r1, r5
    5d1a:	19d2      	adds	r2, r2, r7
    5d1c:	42a9      	cmp	r1, r5
    5d1e:	41bf      	sbcs	r7, r7
    5d20:	000d      	movs	r5, r1
    5d22:	427f      	negs	r7, r7
    5d24:	18bf      	adds	r7, r7, r2
    5d26:	023a      	lsls	r2, r7, #8
    5d28:	d400      	bmi.n	5d2c <__aeabi_dsub+0x1e4>
    5d2a:	e142      	b.n	5fb2 <__aeabi_dsub+0x46a>
    5d2c:	4a5f      	ldr	r2, [pc, #380]	; (5eac <__aeabi_dsub+0x364>)
    5d2e:	3401      	adds	r4, #1
    5d30:	4294      	cmp	r4, r2
    5d32:	d100      	bne.n	5d36 <__aeabi_dsub+0x1ee>
    5d34:	e14e      	b.n	5fd4 <__aeabi_dsub+0x48c>
    5d36:	2001      	movs	r0, #1
    5d38:	4a5d      	ldr	r2, [pc, #372]	; (5eb0 <__aeabi_dsub+0x368>)
    5d3a:	0869      	lsrs	r1, r5, #1
    5d3c:	403a      	ands	r2, r7
    5d3e:	4028      	ands	r0, r5
    5d40:	4308      	orrs	r0, r1
    5d42:	07d5      	lsls	r5, r2, #31
    5d44:	4305      	orrs	r5, r0
    5d46:	0857      	lsrs	r7, r2, #1
    5d48:	469a      	mov	sl, r3
    5d4a:	e729      	b.n	5ba0 <__aeabi_dsub+0x58>
    5d4c:	0006      	movs	r6, r0
    5d4e:	430e      	orrs	r6, r1
    5d50:	d000      	beq.n	5d54 <__aeabi_dsub+0x20c>
    5d52:	e717      	b.n	5b84 <__aeabi_dsub+0x3c>
    5d54:	e714      	b.n	5b80 <__aeabi_dsub+0x38>
    5d56:	0029      	movs	r1, r5
    5d58:	4311      	orrs	r1, r2
    5d5a:	d100      	bne.n	5d5e <__aeabi_dsub+0x216>
    5d5c:	e1f9      	b.n	6152 <__aeabi_dsub+0x60a>
    5d5e:	2180      	movs	r1, #128	; 0x80
    5d60:	0309      	lsls	r1, r1, #12
    5d62:	430a      	orrs	r2, r1
    5d64:	0312      	lsls	r2, r2, #12
    5d66:	0b12      	lsrs	r2, r2, #12
    5d68:	e73b      	b.n	5be2 <__aeabi_dsub+0x9a>
    5d6a:	2301      	movs	r3, #1
    5d6c:	425b      	negs	r3, r3
    5d6e:	4698      	mov	r8, r3
    5d70:	44c4      	add	ip, r8
    5d72:	4663      	mov	r3, ip
    5d74:	2b00      	cmp	r3, #0
    5d76:	d172      	bne.n	5e5e <__aeabi_dsub+0x316>
    5d78:	1a69      	subs	r1, r5, r1
    5d7a:	428d      	cmp	r5, r1
    5d7c:	419b      	sbcs	r3, r3
    5d7e:	1a3f      	subs	r7, r7, r0
    5d80:	425b      	negs	r3, r3
    5d82:	1aff      	subs	r7, r7, r3
    5d84:	000d      	movs	r5, r1
    5d86:	e768      	b.n	5c5a <__aeabi_dsub+0x112>
    5d88:	0002      	movs	r2, r0
    5d8a:	430a      	orrs	r2, r1
    5d8c:	d100      	bne.n	5d90 <__aeabi_dsub+0x248>
    5d8e:	e707      	b.n	5ba0 <__aeabi_dsub+0x58>
    5d90:	2201      	movs	r2, #1
    5d92:	4252      	negs	r2, r2
    5d94:	4690      	mov	r8, r2
    5d96:	44c4      	add	ip, r8
    5d98:	4662      	mov	r2, ip
    5d9a:	2a00      	cmp	r2, #0
    5d9c:	d000      	beq.n	5da0 <__aeabi_dsub+0x258>
    5d9e:	e0e6      	b.n	5f6e <__aeabi_dsub+0x426>
    5da0:	1869      	adds	r1, r5, r1
    5da2:	42a9      	cmp	r1, r5
    5da4:	41b6      	sbcs	r6, r6
    5da6:	183f      	adds	r7, r7, r0
    5da8:	4276      	negs	r6, r6
    5daa:	19f7      	adds	r7, r6, r7
    5dac:	000d      	movs	r5, r1
    5dae:	e7ba      	b.n	5d26 <__aeabi_dsub+0x1de>
    5db0:	2e00      	cmp	r6, #0
    5db2:	d000      	beq.n	5db6 <__aeabi_dsub+0x26e>
    5db4:	e080      	b.n	5eb8 <__aeabi_dsub+0x370>
    5db6:	1c62      	adds	r2, r4, #1
    5db8:	0552      	lsls	r2, r2, #21
    5dba:	0d52      	lsrs	r2, r2, #21
    5dbc:	2a01      	cmp	r2, #1
    5dbe:	dc00      	bgt.n	5dc2 <__aeabi_dsub+0x27a>
    5dc0:	e0f9      	b.n	5fb6 <__aeabi_dsub+0x46e>
    5dc2:	1a6a      	subs	r2, r5, r1
    5dc4:	4691      	mov	r9, r2
    5dc6:	454d      	cmp	r5, r9
    5dc8:	41b6      	sbcs	r6, r6
    5dca:	1a3a      	subs	r2, r7, r0
    5dcc:	4276      	negs	r6, r6
    5dce:	1b92      	subs	r2, r2, r6
    5dd0:	4690      	mov	r8, r2
    5dd2:	0212      	lsls	r2, r2, #8
    5dd4:	d400      	bmi.n	5dd8 <__aeabi_dsub+0x290>
    5dd6:	e099      	b.n	5f0c <__aeabi_dsub+0x3c4>
    5dd8:	1b4d      	subs	r5, r1, r5
    5dda:	42a9      	cmp	r1, r5
    5ddc:	4189      	sbcs	r1, r1
    5dde:	1bc7      	subs	r7, r0, r7
    5de0:	4249      	negs	r1, r1
    5de2:	1a7a      	subs	r2, r7, r1
    5de4:	4690      	mov	r8, r2
    5de6:	469a      	mov	sl, r3
    5de8:	e73c      	b.n	5c64 <__aeabi_dsub+0x11c>
    5dea:	4652      	mov	r2, sl
    5dec:	2301      	movs	r3, #1
    5dee:	2500      	movs	r5, #0
    5df0:	4013      	ands	r3, r2
    5df2:	2200      	movs	r2, #0
    5df4:	e6f5      	b.n	5be2 <__aeabi_dsub+0x9a>
    5df6:	0028      	movs	r0, r5
    5df8:	f000 fbaa 	bl	6550 <__clzsi2>
    5dfc:	3020      	adds	r0, #32
    5dfe:	0003      	movs	r3, r0
    5e00:	3b08      	subs	r3, #8
    5e02:	2b1f      	cmp	r3, #31
    5e04:	dc00      	bgt.n	5e08 <__aeabi_dsub+0x2c0>
    5e06:	e739      	b.n	5c7c <__aeabi_dsub+0x134>
    5e08:	002a      	movs	r2, r5
    5e0a:	3828      	subs	r0, #40	; 0x28
    5e0c:	4082      	lsls	r2, r0
    5e0e:	2500      	movs	r5, #0
    5e10:	429c      	cmp	r4, r3
    5e12:	dc00      	bgt.n	5e16 <__aeabi_dsub+0x2ce>
    5e14:	e73e      	b.n	5c94 <__aeabi_dsub+0x14c>
    5e16:	4f26      	ldr	r7, [pc, #152]	; (5eb0 <__aeabi_dsub+0x368>)
    5e18:	1ae4      	subs	r4, r4, r3
    5e1a:	4017      	ands	r7, r2
    5e1c:	e6c0      	b.n	5ba0 <__aeabi_dsub+0x58>
    5e1e:	4301      	orrs	r1, r0
    5e20:	1e48      	subs	r0, r1, #1
    5e22:	4181      	sbcs	r1, r0
    5e24:	2200      	movs	r2, #0
    5e26:	b2c9      	uxtb	r1, r1
    5e28:	e710      	b.n	5c4c <__aeabi_dsub+0x104>
    5e2a:	2e00      	cmp	r6, #0
    5e2c:	d000      	beq.n	5e30 <__aeabi_dsub+0x2e8>
    5e2e:	e0f1      	b.n	6014 <__aeabi_dsub+0x4cc>
    5e30:	1c62      	adds	r2, r4, #1
    5e32:	4694      	mov	ip, r2
    5e34:	0552      	lsls	r2, r2, #21
    5e36:	0d52      	lsrs	r2, r2, #21
    5e38:	2a01      	cmp	r2, #1
    5e3a:	dc00      	bgt.n	5e3e <__aeabi_dsub+0x2f6>
    5e3c:	e0a0      	b.n	5f80 <__aeabi_dsub+0x438>
    5e3e:	4a1b      	ldr	r2, [pc, #108]	; (5eac <__aeabi_dsub+0x364>)
    5e40:	4594      	cmp	ip, r2
    5e42:	d100      	bne.n	5e46 <__aeabi_dsub+0x2fe>
    5e44:	e0c5      	b.n	5fd2 <__aeabi_dsub+0x48a>
    5e46:	1869      	adds	r1, r5, r1
    5e48:	42a9      	cmp	r1, r5
    5e4a:	4192      	sbcs	r2, r2
    5e4c:	183f      	adds	r7, r7, r0
    5e4e:	4252      	negs	r2, r2
    5e50:	19d2      	adds	r2, r2, r7
    5e52:	0849      	lsrs	r1, r1, #1
    5e54:	07d5      	lsls	r5, r2, #31
    5e56:	430d      	orrs	r5, r1
    5e58:	0857      	lsrs	r7, r2, #1
    5e5a:	4664      	mov	r4, ip
    5e5c:	e6a0      	b.n	5ba0 <__aeabi_dsub+0x58>
    5e5e:	4b13      	ldr	r3, [pc, #76]	; (5eac <__aeabi_dsub+0x364>)
    5e60:	429c      	cmp	r4, r3
    5e62:	d000      	beq.n	5e66 <__aeabi_dsub+0x31e>
    5e64:	e6d9      	b.n	5c1a <__aeabi_dsub+0xd2>
    5e66:	e69b      	b.n	5ba0 <__aeabi_dsub+0x58>
    5e68:	0011      	movs	r1, r2
    5e6a:	3c1f      	subs	r4, #31
    5e6c:	40e1      	lsrs	r1, r4
    5e6e:	000c      	movs	r4, r1
    5e70:	2b20      	cmp	r3, #32
    5e72:	d100      	bne.n	5e76 <__aeabi_dsub+0x32e>
    5e74:	e080      	b.n	5f78 <__aeabi_dsub+0x430>
    5e76:	2140      	movs	r1, #64	; 0x40
    5e78:	1acb      	subs	r3, r1, r3
    5e7a:	409a      	lsls	r2, r3
    5e7c:	4315      	orrs	r5, r2
    5e7e:	1e6a      	subs	r2, r5, #1
    5e80:	4195      	sbcs	r5, r2
    5e82:	2700      	movs	r7, #0
    5e84:	4325      	orrs	r5, r4
    5e86:	2400      	movs	r4, #0
    5e88:	e71f      	b.n	5cca <__aeabi_dsub+0x182>
    5e8a:	4663      	mov	r3, ip
    5e8c:	0002      	movs	r2, r0
    5e8e:	3b20      	subs	r3, #32
    5e90:	40da      	lsrs	r2, r3
    5e92:	4663      	mov	r3, ip
    5e94:	2b20      	cmp	r3, #32
    5e96:	d071      	beq.n	5f7c <__aeabi_dsub+0x434>
    5e98:	2340      	movs	r3, #64	; 0x40
    5e9a:	4666      	mov	r6, ip
    5e9c:	1b9b      	subs	r3, r3, r6
    5e9e:	4098      	lsls	r0, r3
    5ea0:	4301      	orrs	r1, r0
    5ea2:	1e48      	subs	r0, r1, #1
    5ea4:	4181      	sbcs	r1, r0
    5ea6:	4311      	orrs	r1, r2
    5ea8:	2200      	movs	r2, #0
    5eaa:	e6cf      	b.n	5c4c <__aeabi_dsub+0x104>
    5eac:	000007ff 	.word	0x000007ff
    5eb0:	ff7fffff 	.word	0xff7fffff
    5eb4:	800fffff 	.word	0x800fffff
    5eb8:	2c00      	cmp	r4, #0
    5eba:	d048      	beq.n	5f4e <__aeabi_dsub+0x406>
    5ebc:	4cca      	ldr	r4, [pc, #808]	; (61e8 <__aeabi_dsub+0x6a0>)
    5ebe:	42a2      	cmp	r2, r4
    5ec0:	d100      	bne.n	5ec4 <__aeabi_dsub+0x37c>
    5ec2:	e0a2      	b.n	600a <__aeabi_dsub+0x4c2>
    5ec4:	4274      	negs	r4, r6
    5ec6:	46a1      	mov	r9, r4
    5ec8:	2480      	movs	r4, #128	; 0x80
    5eca:	0424      	lsls	r4, r4, #16
    5ecc:	4327      	orrs	r7, r4
    5ece:	464c      	mov	r4, r9
    5ed0:	2c38      	cmp	r4, #56	; 0x38
    5ed2:	dd00      	ble.n	5ed6 <__aeabi_dsub+0x38e>
    5ed4:	e0db      	b.n	608e <__aeabi_dsub+0x546>
    5ed6:	2c1f      	cmp	r4, #31
    5ed8:	dd00      	ble.n	5edc <__aeabi_dsub+0x394>
    5eda:	e144      	b.n	6166 <__aeabi_dsub+0x61e>
    5edc:	464e      	mov	r6, r9
    5ede:	2420      	movs	r4, #32
    5ee0:	1ba4      	subs	r4, r4, r6
    5ee2:	003e      	movs	r6, r7
    5ee4:	40a6      	lsls	r6, r4
    5ee6:	46a2      	mov	sl, r4
    5ee8:	46b0      	mov	r8, r6
    5eea:	464c      	mov	r4, r9
    5eec:	002e      	movs	r6, r5
    5eee:	40e6      	lsrs	r6, r4
    5ef0:	46b4      	mov	ip, r6
    5ef2:	4646      	mov	r6, r8
    5ef4:	4664      	mov	r4, ip
    5ef6:	4326      	orrs	r6, r4
    5ef8:	4654      	mov	r4, sl
    5efa:	40a5      	lsls	r5, r4
    5efc:	1e6c      	subs	r4, r5, #1
    5efe:	41a5      	sbcs	r5, r4
    5f00:	0034      	movs	r4, r6
    5f02:	432c      	orrs	r4, r5
    5f04:	464d      	mov	r5, r9
    5f06:	40ef      	lsrs	r7, r5
    5f08:	1b0d      	subs	r5, r1, r4
    5f0a:	e028      	b.n	5f5e <__aeabi_dsub+0x416>
    5f0c:	464a      	mov	r2, r9
    5f0e:	4643      	mov	r3, r8
    5f10:	464d      	mov	r5, r9
    5f12:	431a      	orrs	r2, r3
    5f14:	d000      	beq.n	5f18 <__aeabi_dsub+0x3d0>
    5f16:	e6a5      	b.n	5c64 <__aeabi_dsub+0x11c>
    5f18:	2300      	movs	r3, #0
    5f1a:	2400      	movs	r4, #0
    5f1c:	2500      	movs	r5, #0
    5f1e:	e6de      	b.n	5cde <__aeabi_dsub+0x196>
    5f20:	2a1f      	cmp	r2, #31
    5f22:	dc5a      	bgt.n	5fda <__aeabi_dsub+0x492>
    5f24:	4666      	mov	r6, ip
    5f26:	2220      	movs	r2, #32
    5f28:	1b92      	subs	r2, r2, r6
    5f2a:	0006      	movs	r6, r0
    5f2c:	4096      	lsls	r6, r2
    5f2e:	4691      	mov	r9, r2
    5f30:	46b0      	mov	r8, r6
    5f32:	4662      	mov	r2, ip
    5f34:	000e      	movs	r6, r1
    5f36:	40d6      	lsrs	r6, r2
    5f38:	4642      	mov	r2, r8
    5f3a:	4316      	orrs	r6, r2
    5f3c:	464a      	mov	r2, r9
    5f3e:	4091      	lsls	r1, r2
    5f40:	1e4a      	subs	r2, r1, #1
    5f42:	4191      	sbcs	r1, r2
    5f44:	0002      	movs	r2, r0
    5f46:	4660      	mov	r0, ip
    5f48:	4331      	orrs	r1, r6
    5f4a:	40c2      	lsrs	r2, r0
    5f4c:	e6e4      	b.n	5d18 <__aeabi_dsub+0x1d0>
    5f4e:	003c      	movs	r4, r7
    5f50:	432c      	orrs	r4, r5
    5f52:	d05a      	beq.n	600a <__aeabi_dsub+0x4c2>
    5f54:	43f4      	mvns	r4, r6
    5f56:	46a1      	mov	r9, r4
    5f58:	2c00      	cmp	r4, #0
    5f5a:	d152      	bne.n	6002 <__aeabi_dsub+0x4ba>
    5f5c:	1b4d      	subs	r5, r1, r5
    5f5e:	42a9      	cmp	r1, r5
    5f60:	4189      	sbcs	r1, r1
    5f62:	1bc7      	subs	r7, r0, r7
    5f64:	4249      	negs	r1, r1
    5f66:	1a7f      	subs	r7, r7, r1
    5f68:	0014      	movs	r4, r2
    5f6a:	469a      	mov	sl, r3
    5f6c:	e675      	b.n	5c5a <__aeabi_dsub+0x112>
    5f6e:	4a9e      	ldr	r2, [pc, #632]	; (61e8 <__aeabi_dsub+0x6a0>)
    5f70:	4294      	cmp	r4, r2
    5f72:	d000      	beq.n	5f76 <__aeabi_dsub+0x42e>
    5f74:	e6c7      	b.n	5d06 <__aeabi_dsub+0x1be>
    5f76:	e613      	b.n	5ba0 <__aeabi_dsub+0x58>
    5f78:	2200      	movs	r2, #0
    5f7a:	e77f      	b.n	5e7c <__aeabi_dsub+0x334>
    5f7c:	2000      	movs	r0, #0
    5f7e:	e78f      	b.n	5ea0 <__aeabi_dsub+0x358>
    5f80:	2c00      	cmp	r4, #0
    5f82:	d000      	beq.n	5f86 <__aeabi_dsub+0x43e>
    5f84:	e0c8      	b.n	6118 <__aeabi_dsub+0x5d0>
    5f86:	003b      	movs	r3, r7
    5f88:	432b      	orrs	r3, r5
    5f8a:	d100      	bne.n	5f8e <__aeabi_dsub+0x446>
    5f8c:	e10f      	b.n	61ae <__aeabi_dsub+0x666>
    5f8e:	0003      	movs	r3, r0
    5f90:	430b      	orrs	r3, r1
    5f92:	d100      	bne.n	5f96 <__aeabi_dsub+0x44e>
    5f94:	e604      	b.n	5ba0 <__aeabi_dsub+0x58>
    5f96:	1869      	adds	r1, r5, r1
    5f98:	42a9      	cmp	r1, r5
    5f9a:	419b      	sbcs	r3, r3
    5f9c:	183f      	adds	r7, r7, r0
    5f9e:	425b      	negs	r3, r3
    5fa0:	19df      	adds	r7, r3, r7
    5fa2:	023b      	lsls	r3, r7, #8
    5fa4:	d400      	bmi.n	5fa8 <__aeabi_dsub+0x460>
    5fa6:	e11a      	b.n	61de <__aeabi_dsub+0x696>
    5fa8:	4b90      	ldr	r3, [pc, #576]	; (61ec <__aeabi_dsub+0x6a4>)
    5faa:	000d      	movs	r5, r1
    5fac:	401f      	ands	r7, r3
    5fae:	4664      	mov	r4, ip
    5fb0:	e5f6      	b.n	5ba0 <__aeabi_dsub+0x58>
    5fb2:	469a      	mov	sl, r3
    5fb4:	e689      	b.n	5cca <__aeabi_dsub+0x182>
    5fb6:	003a      	movs	r2, r7
    5fb8:	432a      	orrs	r2, r5
    5fba:	2c00      	cmp	r4, #0
    5fbc:	d15c      	bne.n	6078 <__aeabi_dsub+0x530>
    5fbe:	2a00      	cmp	r2, #0
    5fc0:	d175      	bne.n	60ae <__aeabi_dsub+0x566>
    5fc2:	0002      	movs	r2, r0
    5fc4:	430a      	orrs	r2, r1
    5fc6:	d100      	bne.n	5fca <__aeabi_dsub+0x482>
    5fc8:	e0ca      	b.n	6160 <__aeabi_dsub+0x618>
    5fca:	0007      	movs	r7, r0
    5fcc:	000d      	movs	r5, r1
    5fce:	469a      	mov	sl, r3
    5fd0:	e5e6      	b.n	5ba0 <__aeabi_dsub+0x58>
    5fd2:	4664      	mov	r4, ip
    5fd4:	2200      	movs	r2, #0
    5fd6:	2500      	movs	r5, #0
    5fd8:	e681      	b.n	5cde <__aeabi_dsub+0x196>
    5fda:	4662      	mov	r2, ip
    5fdc:	0006      	movs	r6, r0
    5fde:	3a20      	subs	r2, #32
    5fe0:	40d6      	lsrs	r6, r2
    5fe2:	4662      	mov	r2, ip
    5fe4:	46b0      	mov	r8, r6
    5fe6:	2a20      	cmp	r2, #32
    5fe8:	d100      	bne.n	5fec <__aeabi_dsub+0x4a4>
    5fea:	e0b7      	b.n	615c <__aeabi_dsub+0x614>
    5fec:	2240      	movs	r2, #64	; 0x40
    5fee:	4666      	mov	r6, ip
    5ff0:	1b92      	subs	r2, r2, r6
    5ff2:	4090      	lsls	r0, r2
    5ff4:	4301      	orrs	r1, r0
    5ff6:	4642      	mov	r2, r8
    5ff8:	1e48      	subs	r0, r1, #1
    5ffa:	4181      	sbcs	r1, r0
    5ffc:	4311      	orrs	r1, r2
    5ffe:	2200      	movs	r2, #0
    6000:	e68a      	b.n	5d18 <__aeabi_dsub+0x1d0>
    6002:	4c79      	ldr	r4, [pc, #484]	; (61e8 <__aeabi_dsub+0x6a0>)
    6004:	42a2      	cmp	r2, r4
    6006:	d000      	beq.n	600a <__aeabi_dsub+0x4c2>
    6008:	e761      	b.n	5ece <__aeabi_dsub+0x386>
    600a:	0007      	movs	r7, r0
    600c:	000d      	movs	r5, r1
    600e:	0014      	movs	r4, r2
    6010:	469a      	mov	sl, r3
    6012:	e5c5      	b.n	5ba0 <__aeabi_dsub+0x58>
    6014:	2c00      	cmp	r4, #0
    6016:	d141      	bne.n	609c <__aeabi_dsub+0x554>
    6018:	003c      	movs	r4, r7
    601a:	432c      	orrs	r4, r5
    601c:	d078      	beq.n	6110 <__aeabi_dsub+0x5c8>
    601e:	43f4      	mvns	r4, r6
    6020:	46a1      	mov	r9, r4
    6022:	2c00      	cmp	r4, #0
    6024:	d020      	beq.n	6068 <__aeabi_dsub+0x520>
    6026:	4c70      	ldr	r4, [pc, #448]	; (61e8 <__aeabi_dsub+0x6a0>)
    6028:	42a2      	cmp	r2, r4
    602a:	d071      	beq.n	6110 <__aeabi_dsub+0x5c8>
    602c:	464c      	mov	r4, r9
    602e:	2c38      	cmp	r4, #56	; 0x38
    6030:	dd00      	ble.n	6034 <__aeabi_dsub+0x4ec>
    6032:	e0b2      	b.n	619a <__aeabi_dsub+0x652>
    6034:	2c1f      	cmp	r4, #31
    6036:	dd00      	ble.n	603a <__aeabi_dsub+0x4f2>
    6038:	e0bc      	b.n	61b4 <__aeabi_dsub+0x66c>
    603a:	2620      	movs	r6, #32
    603c:	1b34      	subs	r4, r6, r4
    603e:	46a2      	mov	sl, r4
    6040:	003c      	movs	r4, r7
    6042:	4656      	mov	r6, sl
    6044:	40b4      	lsls	r4, r6
    6046:	464e      	mov	r6, r9
    6048:	46a0      	mov	r8, r4
    604a:	002c      	movs	r4, r5
    604c:	40f4      	lsrs	r4, r6
    604e:	46a4      	mov	ip, r4
    6050:	4644      	mov	r4, r8
    6052:	4666      	mov	r6, ip
    6054:	4334      	orrs	r4, r6
    6056:	46a4      	mov	ip, r4
    6058:	4654      	mov	r4, sl
    605a:	40a5      	lsls	r5, r4
    605c:	4664      	mov	r4, ip
    605e:	1e6e      	subs	r6, r5, #1
    6060:	41b5      	sbcs	r5, r6
    6062:	4325      	orrs	r5, r4
    6064:	464c      	mov	r4, r9
    6066:	40e7      	lsrs	r7, r4
    6068:	186d      	adds	r5, r5, r1
    606a:	428d      	cmp	r5, r1
    606c:	4189      	sbcs	r1, r1
    606e:	183f      	adds	r7, r7, r0
    6070:	4249      	negs	r1, r1
    6072:	19cf      	adds	r7, r1, r7
    6074:	0014      	movs	r4, r2
    6076:	e656      	b.n	5d26 <__aeabi_dsub+0x1de>
    6078:	2a00      	cmp	r2, #0
    607a:	d12f      	bne.n	60dc <__aeabi_dsub+0x594>
    607c:	0002      	movs	r2, r0
    607e:	430a      	orrs	r2, r1
    6080:	d100      	bne.n	6084 <__aeabi_dsub+0x53c>
    6082:	e084      	b.n	618e <__aeabi_dsub+0x646>
    6084:	0007      	movs	r7, r0
    6086:	000d      	movs	r5, r1
    6088:	469a      	mov	sl, r3
    608a:	4c57      	ldr	r4, [pc, #348]	; (61e8 <__aeabi_dsub+0x6a0>)
    608c:	e588      	b.n	5ba0 <__aeabi_dsub+0x58>
    608e:	433d      	orrs	r5, r7
    6090:	1e6f      	subs	r7, r5, #1
    6092:	41bd      	sbcs	r5, r7
    6094:	b2ec      	uxtb	r4, r5
    6096:	2700      	movs	r7, #0
    6098:	1b0d      	subs	r5, r1, r4
    609a:	e760      	b.n	5f5e <__aeabi_dsub+0x416>
    609c:	4c52      	ldr	r4, [pc, #328]	; (61e8 <__aeabi_dsub+0x6a0>)
    609e:	42a2      	cmp	r2, r4
    60a0:	d036      	beq.n	6110 <__aeabi_dsub+0x5c8>
    60a2:	4274      	negs	r4, r6
    60a4:	2680      	movs	r6, #128	; 0x80
    60a6:	0436      	lsls	r6, r6, #16
    60a8:	46a1      	mov	r9, r4
    60aa:	4337      	orrs	r7, r6
    60ac:	e7be      	b.n	602c <__aeabi_dsub+0x4e4>
    60ae:	0002      	movs	r2, r0
    60b0:	430a      	orrs	r2, r1
    60b2:	d100      	bne.n	60b6 <__aeabi_dsub+0x56e>
    60b4:	e574      	b.n	5ba0 <__aeabi_dsub+0x58>
    60b6:	1a6a      	subs	r2, r5, r1
    60b8:	4690      	mov	r8, r2
    60ba:	4545      	cmp	r5, r8
    60bc:	41b6      	sbcs	r6, r6
    60be:	1a3a      	subs	r2, r7, r0
    60c0:	4276      	negs	r6, r6
    60c2:	1b92      	subs	r2, r2, r6
    60c4:	4694      	mov	ip, r2
    60c6:	0212      	lsls	r2, r2, #8
    60c8:	d400      	bmi.n	60cc <__aeabi_dsub+0x584>
    60ca:	e5f7      	b.n	5cbc <__aeabi_dsub+0x174>
    60cc:	1b4d      	subs	r5, r1, r5
    60ce:	42a9      	cmp	r1, r5
    60d0:	4189      	sbcs	r1, r1
    60d2:	1bc7      	subs	r7, r0, r7
    60d4:	4249      	negs	r1, r1
    60d6:	1a7f      	subs	r7, r7, r1
    60d8:	469a      	mov	sl, r3
    60da:	e561      	b.n	5ba0 <__aeabi_dsub+0x58>
    60dc:	0002      	movs	r2, r0
    60de:	430a      	orrs	r2, r1
    60e0:	d03a      	beq.n	6158 <__aeabi_dsub+0x610>
    60e2:	08ed      	lsrs	r5, r5, #3
    60e4:	077c      	lsls	r4, r7, #29
    60e6:	432c      	orrs	r4, r5
    60e8:	2580      	movs	r5, #128	; 0x80
    60ea:	08fa      	lsrs	r2, r7, #3
    60ec:	032d      	lsls	r5, r5, #12
    60ee:	422a      	tst	r2, r5
    60f0:	d008      	beq.n	6104 <__aeabi_dsub+0x5bc>
    60f2:	08c7      	lsrs	r7, r0, #3
    60f4:	422f      	tst	r7, r5
    60f6:	d105      	bne.n	6104 <__aeabi_dsub+0x5bc>
    60f8:	0745      	lsls	r5, r0, #29
    60fa:	002c      	movs	r4, r5
    60fc:	003a      	movs	r2, r7
    60fe:	469a      	mov	sl, r3
    6100:	08c9      	lsrs	r1, r1, #3
    6102:	430c      	orrs	r4, r1
    6104:	0f67      	lsrs	r7, r4, #29
    6106:	00d2      	lsls	r2, r2, #3
    6108:	00e5      	lsls	r5, r4, #3
    610a:	4317      	orrs	r7, r2
    610c:	4c36      	ldr	r4, [pc, #216]	; (61e8 <__aeabi_dsub+0x6a0>)
    610e:	e547      	b.n	5ba0 <__aeabi_dsub+0x58>
    6110:	0007      	movs	r7, r0
    6112:	000d      	movs	r5, r1
    6114:	0014      	movs	r4, r2
    6116:	e543      	b.n	5ba0 <__aeabi_dsub+0x58>
    6118:	003a      	movs	r2, r7
    611a:	432a      	orrs	r2, r5
    611c:	d043      	beq.n	61a6 <__aeabi_dsub+0x65e>
    611e:	0002      	movs	r2, r0
    6120:	430a      	orrs	r2, r1
    6122:	d019      	beq.n	6158 <__aeabi_dsub+0x610>
    6124:	08ed      	lsrs	r5, r5, #3
    6126:	077c      	lsls	r4, r7, #29
    6128:	432c      	orrs	r4, r5
    612a:	2580      	movs	r5, #128	; 0x80
    612c:	08fa      	lsrs	r2, r7, #3
    612e:	032d      	lsls	r5, r5, #12
    6130:	422a      	tst	r2, r5
    6132:	d007      	beq.n	6144 <__aeabi_dsub+0x5fc>
    6134:	08c6      	lsrs	r6, r0, #3
    6136:	422e      	tst	r6, r5
    6138:	d104      	bne.n	6144 <__aeabi_dsub+0x5fc>
    613a:	0747      	lsls	r7, r0, #29
    613c:	003c      	movs	r4, r7
    613e:	0032      	movs	r2, r6
    6140:	08c9      	lsrs	r1, r1, #3
    6142:	430c      	orrs	r4, r1
    6144:	00d7      	lsls	r7, r2, #3
    6146:	0f62      	lsrs	r2, r4, #29
    6148:	00e5      	lsls	r5, r4, #3
    614a:	4317      	orrs	r7, r2
    614c:	469a      	mov	sl, r3
    614e:	4c26      	ldr	r4, [pc, #152]	; (61e8 <__aeabi_dsub+0x6a0>)
    6150:	e526      	b.n	5ba0 <__aeabi_dsub+0x58>
    6152:	2200      	movs	r2, #0
    6154:	2500      	movs	r5, #0
    6156:	e544      	b.n	5be2 <__aeabi_dsub+0x9a>
    6158:	4c23      	ldr	r4, [pc, #140]	; (61e8 <__aeabi_dsub+0x6a0>)
    615a:	e521      	b.n	5ba0 <__aeabi_dsub+0x58>
    615c:	2000      	movs	r0, #0
    615e:	e749      	b.n	5ff4 <__aeabi_dsub+0x4ac>
    6160:	2300      	movs	r3, #0
    6162:	2500      	movs	r5, #0
    6164:	e5bb      	b.n	5cde <__aeabi_dsub+0x196>
    6166:	464c      	mov	r4, r9
    6168:	003e      	movs	r6, r7
    616a:	3c20      	subs	r4, #32
    616c:	40e6      	lsrs	r6, r4
    616e:	464c      	mov	r4, r9
    6170:	46b4      	mov	ip, r6
    6172:	2c20      	cmp	r4, #32
    6174:	d031      	beq.n	61da <__aeabi_dsub+0x692>
    6176:	2440      	movs	r4, #64	; 0x40
    6178:	464e      	mov	r6, r9
    617a:	1ba6      	subs	r6, r4, r6
    617c:	40b7      	lsls	r7, r6
    617e:	433d      	orrs	r5, r7
    6180:	1e6c      	subs	r4, r5, #1
    6182:	41a5      	sbcs	r5, r4
    6184:	4664      	mov	r4, ip
    6186:	432c      	orrs	r4, r5
    6188:	2700      	movs	r7, #0
    618a:	1b0d      	subs	r5, r1, r4
    618c:	e6e7      	b.n	5f5e <__aeabi_dsub+0x416>
    618e:	2280      	movs	r2, #128	; 0x80
    6190:	2300      	movs	r3, #0
    6192:	0312      	lsls	r2, r2, #12
    6194:	4c14      	ldr	r4, [pc, #80]	; (61e8 <__aeabi_dsub+0x6a0>)
    6196:	2500      	movs	r5, #0
    6198:	e5a1      	b.n	5cde <__aeabi_dsub+0x196>
    619a:	433d      	orrs	r5, r7
    619c:	1e6f      	subs	r7, r5, #1
    619e:	41bd      	sbcs	r5, r7
    61a0:	2700      	movs	r7, #0
    61a2:	b2ed      	uxtb	r5, r5
    61a4:	e760      	b.n	6068 <__aeabi_dsub+0x520>
    61a6:	0007      	movs	r7, r0
    61a8:	000d      	movs	r5, r1
    61aa:	4c0f      	ldr	r4, [pc, #60]	; (61e8 <__aeabi_dsub+0x6a0>)
    61ac:	e4f8      	b.n	5ba0 <__aeabi_dsub+0x58>
    61ae:	0007      	movs	r7, r0
    61b0:	000d      	movs	r5, r1
    61b2:	e4f5      	b.n	5ba0 <__aeabi_dsub+0x58>
    61b4:	464e      	mov	r6, r9
    61b6:	003c      	movs	r4, r7
    61b8:	3e20      	subs	r6, #32
    61ba:	40f4      	lsrs	r4, r6
    61bc:	46a0      	mov	r8, r4
    61be:	464c      	mov	r4, r9
    61c0:	2c20      	cmp	r4, #32
    61c2:	d00e      	beq.n	61e2 <__aeabi_dsub+0x69a>
    61c4:	2440      	movs	r4, #64	; 0x40
    61c6:	464e      	mov	r6, r9
    61c8:	1ba4      	subs	r4, r4, r6
    61ca:	40a7      	lsls	r7, r4
    61cc:	433d      	orrs	r5, r7
    61ce:	1e6f      	subs	r7, r5, #1
    61d0:	41bd      	sbcs	r5, r7
    61d2:	4644      	mov	r4, r8
    61d4:	2700      	movs	r7, #0
    61d6:	4325      	orrs	r5, r4
    61d8:	e746      	b.n	6068 <__aeabi_dsub+0x520>
    61da:	2700      	movs	r7, #0
    61dc:	e7cf      	b.n	617e <__aeabi_dsub+0x636>
    61de:	000d      	movs	r5, r1
    61e0:	e573      	b.n	5cca <__aeabi_dsub+0x182>
    61e2:	2700      	movs	r7, #0
    61e4:	e7f2      	b.n	61cc <__aeabi_dsub+0x684>
    61e6:	46c0      	nop			; (mov r8, r8)
    61e8:	000007ff 	.word	0x000007ff
    61ec:	ff7fffff 	.word	0xff7fffff

000061f0 <__aeabi_dcmpun>:
    61f0:	b570      	push	{r4, r5, r6, lr}
    61f2:	4e0e      	ldr	r6, [pc, #56]	; (622c <__aeabi_dcmpun+0x3c>)
    61f4:	030c      	lsls	r4, r1, #12
    61f6:	031d      	lsls	r5, r3, #12
    61f8:	0049      	lsls	r1, r1, #1
    61fa:	005b      	lsls	r3, r3, #1
    61fc:	0b24      	lsrs	r4, r4, #12
    61fe:	0d49      	lsrs	r1, r1, #21
    6200:	0b2d      	lsrs	r5, r5, #12
    6202:	0d5b      	lsrs	r3, r3, #21
    6204:	42b1      	cmp	r1, r6
    6206:	d004      	beq.n	6212 <__aeabi_dcmpun+0x22>
    6208:	4908      	ldr	r1, [pc, #32]	; (622c <__aeabi_dcmpun+0x3c>)
    620a:	2000      	movs	r0, #0
    620c:	428b      	cmp	r3, r1
    620e:	d008      	beq.n	6222 <__aeabi_dcmpun+0x32>
    6210:	bd70      	pop	{r4, r5, r6, pc}
    6212:	4304      	orrs	r4, r0
    6214:	2001      	movs	r0, #1
    6216:	2c00      	cmp	r4, #0
    6218:	d1fa      	bne.n	6210 <__aeabi_dcmpun+0x20>
    621a:	4904      	ldr	r1, [pc, #16]	; (622c <__aeabi_dcmpun+0x3c>)
    621c:	2000      	movs	r0, #0
    621e:	428b      	cmp	r3, r1
    6220:	d1f6      	bne.n	6210 <__aeabi_dcmpun+0x20>
    6222:	4315      	orrs	r5, r2
    6224:	0028      	movs	r0, r5
    6226:	1e45      	subs	r5, r0, #1
    6228:	41a8      	sbcs	r0, r5
    622a:	e7f1      	b.n	6210 <__aeabi_dcmpun+0x20>
    622c:	000007ff 	.word	0x000007ff

00006230 <__aeabi_d2iz>:
    6230:	030b      	lsls	r3, r1, #12
    6232:	b530      	push	{r4, r5, lr}
    6234:	4d13      	ldr	r5, [pc, #76]	; (6284 <__aeabi_d2iz+0x54>)
    6236:	0b1a      	lsrs	r2, r3, #12
    6238:	004b      	lsls	r3, r1, #1
    623a:	0d5b      	lsrs	r3, r3, #21
    623c:	0fc9      	lsrs	r1, r1, #31
    623e:	2400      	movs	r4, #0
    6240:	42ab      	cmp	r3, r5
    6242:	dd11      	ble.n	6268 <__aeabi_d2iz+0x38>
    6244:	4c10      	ldr	r4, [pc, #64]	; (6288 <__aeabi_d2iz+0x58>)
    6246:	42a3      	cmp	r3, r4
    6248:	dc10      	bgt.n	626c <__aeabi_d2iz+0x3c>
    624a:	2480      	movs	r4, #128	; 0x80
    624c:	0364      	lsls	r4, r4, #13
    624e:	4322      	orrs	r2, r4
    6250:	4c0e      	ldr	r4, [pc, #56]	; (628c <__aeabi_d2iz+0x5c>)
    6252:	1ae4      	subs	r4, r4, r3
    6254:	2c1f      	cmp	r4, #31
    6256:	dd0c      	ble.n	6272 <__aeabi_d2iz+0x42>
    6258:	480d      	ldr	r0, [pc, #52]	; (6290 <__aeabi_d2iz+0x60>)
    625a:	1ac3      	subs	r3, r0, r3
    625c:	40da      	lsrs	r2, r3
    625e:	0013      	movs	r3, r2
    6260:	425c      	negs	r4, r3
    6262:	2900      	cmp	r1, #0
    6264:	d100      	bne.n	6268 <__aeabi_d2iz+0x38>
    6266:	001c      	movs	r4, r3
    6268:	0020      	movs	r0, r4
    626a:	bd30      	pop	{r4, r5, pc}
    626c:	4b09      	ldr	r3, [pc, #36]	; (6294 <__aeabi_d2iz+0x64>)
    626e:	18cc      	adds	r4, r1, r3
    6270:	e7fa      	b.n	6268 <__aeabi_d2iz+0x38>
    6272:	40e0      	lsrs	r0, r4
    6274:	4c08      	ldr	r4, [pc, #32]	; (6298 <__aeabi_d2iz+0x68>)
    6276:	46a4      	mov	ip, r4
    6278:	4463      	add	r3, ip
    627a:	409a      	lsls	r2, r3
    627c:	0013      	movs	r3, r2
    627e:	4303      	orrs	r3, r0
    6280:	e7ee      	b.n	6260 <__aeabi_d2iz+0x30>
    6282:	46c0      	nop			; (mov r8, r8)
    6284:	000003fe 	.word	0x000003fe
    6288:	0000041d 	.word	0x0000041d
    628c:	00000433 	.word	0x00000433
    6290:	00000413 	.word	0x00000413
    6294:	7fffffff 	.word	0x7fffffff
    6298:	fffffbed 	.word	0xfffffbed

0000629c <__aeabi_i2d>:
    629c:	b570      	push	{r4, r5, r6, lr}
    629e:	2800      	cmp	r0, #0
    62a0:	d030      	beq.n	6304 <__aeabi_i2d+0x68>
    62a2:	17c3      	asrs	r3, r0, #31
    62a4:	18c4      	adds	r4, r0, r3
    62a6:	405c      	eors	r4, r3
    62a8:	0fc5      	lsrs	r5, r0, #31
    62aa:	0020      	movs	r0, r4
    62ac:	f000 f950 	bl	6550 <__clzsi2>
    62b0:	4b17      	ldr	r3, [pc, #92]	; (6310 <__aeabi_i2d+0x74>)
    62b2:	4a18      	ldr	r2, [pc, #96]	; (6314 <__aeabi_i2d+0x78>)
    62b4:	1a1b      	subs	r3, r3, r0
    62b6:	1ad2      	subs	r2, r2, r3
    62b8:	2a1f      	cmp	r2, #31
    62ba:	dd18      	ble.n	62ee <__aeabi_i2d+0x52>
    62bc:	4a16      	ldr	r2, [pc, #88]	; (6318 <__aeabi_i2d+0x7c>)
    62be:	1ad2      	subs	r2, r2, r3
    62c0:	4094      	lsls	r4, r2
    62c2:	2200      	movs	r2, #0
    62c4:	0324      	lsls	r4, r4, #12
    62c6:	055b      	lsls	r3, r3, #21
    62c8:	0b24      	lsrs	r4, r4, #12
    62ca:	0d5b      	lsrs	r3, r3, #21
    62cc:	2100      	movs	r1, #0
    62ce:	0010      	movs	r0, r2
    62d0:	0324      	lsls	r4, r4, #12
    62d2:	0d0a      	lsrs	r2, r1, #20
    62d4:	0512      	lsls	r2, r2, #20
    62d6:	0b24      	lsrs	r4, r4, #12
    62d8:	4314      	orrs	r4, r2
    62da:	4a10      	ldr	r2, [pc, #64]	; (631c <__aeabi_i2d+0x80>)
    62dc:	051b      	lsls	r3, r3, #20
    62de:	4014      	ands	r4, r2
    62e0:	431c      	orrs	r4, r3
    62e2:	0064      	lsls	r4, r4, #1
    62e4:	07ed      	lsls	r5, r5, #31
    62e6:	0864      	lsrs	r4, r4, #1
    62e8:	432c      	orrs	r4, r5
    62ea:	0021      	movs	r1, r4
    62ec:	bd70      	pop	{r4, r5, r6, pc}
    62ee:	0021      	movs	r1, r4
    62f0:	4091      	lsls	r1, r2
    62f2:	000a      	movs	r2, r1
    62f4:	210b      	movs	r1, #11
    62f6:	1a08      	subs	r0, r1, r0
    62f8:	40c4      	lsrs	r4, r0
    62fa:	055b      	lsls	r3, r3, #21
    62fc:	0324      	lsls	r4, r4, #12
    62fe:	0b24      	lsrs	r4, r4, #12
    6300:	0d5b      	lsrs	r3, r3, #21
    6302:	e7e3      	b.n	62cc <__aeabi_i2d+0x30>
    6304:	2500      	movs	r5, #0
    6306:	2300      	movs	r3, #0
    6308:	2400      	movs	r4, #0
    630a:	2200      	movs	r2, #0
    630c:	e7de      	b.n	62cc <__aeabi_i2d+0x30>
    630e:	46c0      	nop			; (mov r8, r8)
    6310:	0000041e 	.word	0x0000041e
    6314:	00000433 	.word	0x00000433
    6318:	00000413 	.word	0x00000413
    631c:	800fffff 	.word	0x800fffff

00006320 <__aeabi_ui2d>:
    6320:	b570      	push	{r4, r5, r6, lr}
    6322:	1e05      	subs	r5, r0, #0
    6324:	d028      	beq.n	6378 <__aeabi_ui2d+0x58>
    6326:	f000 f913 	bl	6550 <__clzsi2>
    632a:	4b15      	ldr	r3, [pc, #84]	; (6380 <__aeabi_ui2d+0x60>)
    632c:	4a15      	ldr	r2, [pc, #84]	; (6384 <__aeabi_ui2d+0x64>)
    632e:	1a1b      	subs	r3, r3, r0
    6330:	1ad2      	subs	r2, r2, r3
    6332:	2a1f      	cmp	r2, #31
    6334:	dd16      	ble.n	6364 <__aeabi_ui2d+0x44>
    6336:	002c      	movs	r4, r5
    6338:	4a13      	ldr	r2, [pc, #76]	; (6388 <__aeabi_ui2d+0x68>)
    633a:	2500      	movs	r5, #0
    633c:	1ad2      	subs	r2, r2, r3
    633e:	4094      	lsls	r4, r2
    6340:	055a      	lsls	r2, r3, #21
    6342:	0324      	lsls	r4, r4, #12
    6344:	0b24      	lsrs	r4, r4, #12
    6346:	0d52      	lsrs	r2, r2, #21
    6348:	2100      	movs	r1, #0
    634a:	0324      	lsls	r4, r4, #12
    634c:	0d0b      	lsrs	r3, r1, #20
    634e:	0b24      	lsrs	r4, r4, #12
    6350:	051b      	lsls	r3, r3, #20
    6352:	4323      	orrs	r3, r4
    6354:	4c0d      	ldr	r4, [pc, #52]	; (638c <__aeabi_ui2d+0x6c>)
    6356:	0512      	lsls	r2, r2, #20
    6358:	4023      	ands	r3, r4
    635a:	4313      	orrs	r3, r2
    635c:	005b      	lsls	r3, r3, #1
    635e:	0028      	movs	r0, r5
    6360:	0859      	lsrs	r1, r3, #1
    6362:	bd70      	pop	{r4, r5, r6, pc}
    6364:	210b      	movs	r1, #11
    6366:	002c      	movs	r4, r5
    6368:	1a08      	subs	r0, r1, r0
    636a:	40c4      	lsrs	r4, r0
    636c:	4095      	lsls	r5, r2
    636e:	0324      	lsls	r4, r4, #12
    6370:	055a      	lsls	r2, r3, #21
    6372:	0b24      	lsrs	r4, r4, #12
    6374:	0d52      	lsrs	r2, r2, #21
    6376:	e7e7      	b.n	6348 <__aeabi_ui2d+0x28>
    6378:	2200      	movs	r2, #0
    637a:	2400      	movs	r4, #0
    637c:	e7e4      	b.n	6348 <__aeabi_ui2d+0x28>
    637e:	46c0      	nop			; (mov r8, r8)
    6380:	0000041e 	.word	0x0000041e
    6384:	00000433 	.word	0x00000433
    6388:	00000413 	.word	0x00000413
    638c:	800fffff 	.word	0x800fffff

00006390 <__aeabi_f2d>:
    6390:	0042      	lsls	r2, r0, #1
    6392:	0e12      	lsrs	r2, r2, #24
    6394:	1c51      	adds	r1, r2, #1
    6396:	0243      	lsls	r3, r0, #9
    6398:	b2c9      	uxtb	r1, r1
    639a:	b570      	push	{r4, r5, r6, lr}
    639c:	0a5d      	lsrs	r5, r3, #9
    639e:	0fc4      	lsrs	r4, r0, #31
    63a0:	2901      	cmp	r1, #1
    63a2:	dd15      	ble.n	63d0 <__aeabi_f2d+0x40>
    63a4:	21e0      	movs	r1, #224	; 0xe0
    63a6:	0089      	lsls	r1, r1, #2
    63a8:	468c      	mov	ip, r1
    63aa:	076d      	lsls	r5, r5, #29
    63ac:	0b1b      	lsrs	r3, r3, #12
    63ae:	4462      	add	r2, ip
    63b0:	2100      	movs	r1, #0
    63b2:	0028      	movs	r0, r5
    63b4:	0d0d      	lsrs	r5, r1, #20
    63b6:	052d      	lsls	r5, r5, #20
    63b8:	432b      	orrs	r3, r5
    63ba:	4d1c      	ldr	r5, [pc, #112]	; (642c <__aeabi_f2d+0x9c>)
    63bc:	0552      	lsls	r2, r2, #21
    63be:	402b      	ands	r3, r5
    63c0:	0852      	lsrs	r2, r2, #1
    63c2:	4313      	orrs	r3, r2
    63c4:	005b      	lsls	r3, r3, #1
    63c6:	07e4      	lsls	r4, r4, #31
    63c8:	085b      	lsrs	r3, r3, #1
    63ca:	4323      	orrs	r3, r4
    63cc:	0019      	movs	r1, r3
    63ce:	bd70      	pop	{r4, r5, r6, pc}
    63d0:	2a00      	cmp	r2, #0
    63d2:	d115      	bne.n	6400 <__aeabi_f2d+0x70>
    63d4:	2d00      	cmp	r5, #0
    63d6:	d01f      	beq.n	6418 <__aeabi_f2d+0x88>
    63d8:	0028      	movs	r0, r5
    63da:	f000 f8b9 	bl	6550 <__clzsi2>
    63de:	280a      	cmp	r0, #10
    63e0:	dc1d      	bgt.n	641e <__aeabi_f2d+0x8e>
    63e2:	230b      	movs	r3, #11
    63e4:	002a      	movs	r2, r5
    63e6:	1a1b      	subs	r3, r3, r0
    63e8:	40da      	lsrs	r2, r3
    63ea:	0013      	movs	r3, r2
    63ec:	0002      	movs	r2, r0
    63ee:	3215      	adds	r2, #21
    63f0:	4095      	lsls	r5, r2
    63f2:	4a0f      	ldr	r2, [pc, #60]	; (6430 <__aeabi_f2d+0xa0>)
    63f4:	031b      	lsls	r3, r3, #12
    63f6:	1a12      	subs	r2, r2, r0
    63f8:	0552      	lsls	r2, r2, #21
    63fa:	0b1b      	lsrs	r3, r3, #12
    63fc:	0d52      	lsrs	r2, r2, #21
    63fe:	e7d7      	b.n	63b0 <__aeabi_f2d+0x20>
    6400:	2d00      	cmp	r5, #0
    6402:	d006      	beq.n	6412 <__aeabi_f2d+0x82>
    6404:	2280      	movs	r2, #128	; 0x80
    6406:	0b1b      	lsrs	r3, r3, #12
    6408:	0312      	lsls	r2, r2, #12
    640a:	4313      	orrs	r3, r2
    640c:	076d      	lsls	r5, r5, #29
    640e:	4a09      	ldr	r2, [pc, #36]	; (6434 <__aeabi_f2d+0xa4>)
    6410:	e7ce      	b.n	63b0 <__aeabi_f2d+0x20>
    6412:	4a08      	ldr	r2, [pc, #32]	; (6434 <__aeabi_f2d+0xa4>)
    6414:	2300      	movs	r3, #0
    6416:	e7cb      	b.n	63b0 <__aeabi_f2d+0x20>
    6418:	2200      	movs	r2, #0
    641a:	2300      	movs	r3, #0
    641c:	e7c8      	b.n	63b0 <__aeabi_f2d+0x20>
    641e:	0003      	movs	r3, r0
    6420:	3b0b      	subs	r3, #11
    6422:	409d      	lsls	r5, r3
    6424:	002b      	movs	r3, r5
    6426:	2500      	movs	r5, #0
    6428:	e7e3      	b.n	63f2 <__aeabi_f2d+0x62>
    642a:	46c0      	nop			; (mov r8, r8)
    642c:	800fffff 	.word	0x800fffff
    6430:	00000389 	.word	0x00000389
    6434:	000007ff 	.word	0x000007ff

00006438 <__aeabi_d2f>:
    6438:	004b      	lsls	r3, r1, #1
    643a:	b570      	push	{r4, r5, r6, lr}
    643c:	0d5e      	lsrs	r6, r3, #21
    643e:	030c      	lsls	r4, r1, #12
    6440:	1c75      	adds	r5, r6, #1
    6442:	0a64      	lsrs	r4, r4, #9
    6444:	0f42      	lsrs	r2, r0, #29
    6446:	056d      	lsls	r5, r5, #21
    6448:	4322      	orrs	r2, r4
    644a:	0fc9      	lsrs	r1, r1, #31
    644c:	00c4      	lsls	r4, r0, #3
    644e:	0d6d      	lsrs	r5, r5, #21
    6450:	2d01      	cmp	r5, #1
    6452:	dd2a      	ble.n	64aa <__aeabi_d2f+0x72>
    6454:	4b3b      	ldr	r3, [pc, #236]	; (6544 <__aeabi_d2f+0x10c>)
    6456:	18f3      	adds	r3, r6, r3
    6458:	2bfe      	cmp	r3, #254	; 0xfe
    645a:	dc1a      	bgt.n	6492 <__aeabi_d2f+0x5a>
    645c:	2b00      	cmp	r3, #0
    645e:	dd42      	ble.n	64e6 <__aeabi_d2f+0xae>
    6460:	0180      	lsls	r0, r0, #6
    6462:	1e45      	subs	r5, r0, #1
    6464:	41a8      	sbcs	r0, r5
    6466:	00d2      	lsls	r2, r2, #3
    6468:	4310      	orrs	r0, r2
    646a:	0f62      	lsrs	r2, r4, #29
    646c:	4302      	orrs	r2, r0
    646e:	0750      	lsls	r0, r2, #29
    6470:	d004      	beq.n	647c <__aeabi_d2f+0x44>
    6472:	200f      	movs	r0, #15
    6474:	4010      	ands	r0, r2
    6476:	2804      	cmp	r0, #4
    6478:	d000      	beq.n	647c <__aeabi_d2f+0x44>
    647a:	3204      	adds	r2, #4
    647c:	2080      	movs	r0, #128	; 0x80
    647e:	04c0      	lsls	r0, r0, #19
    6480:	4010      	ands	r0, r2
    6482:	d021      	beq.n	64c8 <__aeabi_d2f+0x90>
    6484:	3301      	adds	r3, #1
    6486:	2bff      	cmp	r3, #255	; 0xff
    6488:	d003      	beq.n	6492 <__aeabi_d2f+0x5a>
    648a:	0192      	lsls	r2, r2, #6
    648c:	0a52      	lsrs	r2, r2, #9
    648e:	b2db      	uxtb	r3, r3
    6490:	e001      	b.n	6496 <__aeabi_d2f+0x5e>
    6492:	23ff      	movs	r3, #255	; 0xff
    6494:	2200      	movs	r2, #0
    6496:	0252      	lsls	r2, r2, #9
    6498:	0a52      	lsrs	r2, r2, #9
    649a:	05db      	lsls	r3, r3, #23
    649c:	4313      	orrs	r3, r2
    649e:	005b      	lsls	r3, r3, #1
    64a0:	07c9      	lsls	r1, r1, #31
    64a2:	085b      	lsrs	r3, r3, #1
    64a4:	430b      	orrs	r3, r1
    64a6:	0018      	movs	r0, r3
    64a8:	bd70      	pop	{r4, r5, r6, pc}
    64aa:	2e00      	cmp	r6, #0
    64ac:	d007      	beq.n	64be <__aeabi_d2f+0x86>
    64ae:	4314      	orrs	r4, r2
    64b0:	d0ef      	beq.n	6492 <__aeabi_d2f+0x5a>
    64b2:	2080      	movs	r0, #128	; 0x80
    64b4:	00d2      	lsls	r2, r2, #3
    64b6:	0480      	lsls	r0, r0, #18
    64b8:	4302      	orrs	r2, r0
    64ba:	23ff      	movs	r3, #255	; 0xff
    64bc:	e7d7      	b.n	646e <__aeabi_d2f+0x36>
    64be:	4322      	orrs	r2, r4
    64c0:	2300      	movs	r3, #0
    64c2:	2a00      	cmp	r2, #0
    64c4:	d003      	beq.n	64ce <__aeabi_d2f+0x96>
    64c6:	2205      	movs	r2, #5
    64c8:	08d2      	lsrs	r2, r2, #3
    64ca:	2bff      	cmp	r3, #255	; 0xff
    64cc:	d003      	beq.n	64d6 <__aeabi_d2f+0x9e>
    64ce:	0252      	lsls	r2, r2, #9
    64d0:	0a52      	lsrs	r2, r2, #9
    64d2:	b2db      	uxtb	r3, r3
    64d4:	e7df      	b.n	6496 <__aeabi_d2f+0x5e>
    64d6:	2a00      	cmp	r2, #0
    64d8:	d032      	beq.n	6540 <__aeabi_d2f+0x108>
    64da:	2080      	movs	r0, #128	; 0x80
    64dc:	03c0      	lsls	r0, r0, #15
    64de:	4302      	orrs	r2, r0
    64e0:	0252      	lsls	r2, r2, #9
    64e2:	0a52      	lsrs	r2, r2, #9
    64e4:	e7d7      	b.n	6496 <__aeabi_d2f+0x5e>
    64e6:	0018      	movs	r0, r3
    64e8:	3017      	adds	r0, #23
    64ea:	db14      	blt.n	6516 <__aeabi_d2f+0xde>
    64ec:	2080      	movs	r0, #128	; 0x80
    64ee:	0400      	lsls	r0, r0, #16
    64f0:	4302      	orrs	r2, r0
    64f2:	201e      	movs	r0, #30
    64f4:	1ac0      	subs	r0, r0, r3
    64f6:	281f      	cmp	r0, #31
    64f8:	dc0f      	bgt.n	651a <__aeabi_d2f+0xe2>
    64fa:	0025      	movs	r5, r4
    64fc:	4b12      	ldr	r3, [pc, #72]	; (6548 <__aeabi_d2f+0x110>)
    64fe:	18f3      	adds	r3, r6, r3
    6500:	409d      	lsls	r5, r3
    6502:	1e6e      	subs	r6, r5, #1
    6504:	41b5      	sbcs	r5, r6
    6506:	409a      	lsls	r2, r3
    6508:	002b      	movs	r3, r5
    650a:	4313      	orrs	r3, r2
    650c:	0022      	movs	r2, r4
    650e:	40c2      	lsrs	r2, r0
    6510:	431a      	orrs	r2, r3
    6512:	2300      	movs	r3, #0
    6514:	e7ab      	b.n	646e <__aeabi_d2f+0x36>
    6516:	2300      	movs	r3, #0
    6518:	e7d5      	b.n	64c6 <__aeabi_d2f+0x8e>
    651a:	2502      	movs	r5, #2
    651c:	426d      	negs	r5, r5
    651e:	1aeb      	subs	r3, r5, r3
    6520:	0015      	movs	r5, r2
    6522:	40dd      	lsrs	r5, r3
    6524:	2820      	cmp	r0, #32
    6526:	d009      	beq.n	653c <__aeabi_d2f+0x104>
    6528:	4b08      	ldr	r3, [pc, #32]	; (654c <__aeabi_d2f+0x114>)
    652a:	18f3      	adds	r3, r6, r3
    652c:	409a      	lsls	r2, r3
    652e:	4314      	orrs	r4, r2
    6530:	1e62      	subs	r2, r4, #1
    6532:	4194      	sbcs	r4, r2
    6534:	0022      	movs	r2, r4
    6536:	2300      	movs	r3, #0
    6538:	432a      	orrs	r2, r5
    653a:	e798      	b.n	646e <__aeabi_d2f+0x36>
    653c:	2200      	movs	r2, #0
    653e:	e7f6      	b.n	652e <__aeabi_d2f+0xf6>
    6540:	2200      	movs	r2, #0
    6542:	e7a8      	b.n	6496 <__aeabi_d2f+0x5e>
    6544:	fffffc80 	.word	0xfffffc80
    6548:	fffffc82 	.word	0xfffffc82
    654c:	fffffca2 	.word	0xfffffca2

00006550 <__clzsi2>:
    6550:	211c      	movs	r1, #28
    6552:	2301      	movs	r3, #1
    6554:	041b      	lsls	r3, r3, #16
    6556:	4298      	cmp	r0, r3
    6558:	d301      	bcc.n	655e <__clzsi2+0xe>
    655a:	0c00      	lsrs	r0, r0, #16
    655c:	3910      	subs	r1, #16
    655e:	0a1b      	lsrs	r3, r3, #8
    6560:	4298      	cmp	r0, r3
    6562:	d301      	bcc.n	6568 <__clzsi2+0x18>
    6564:	0a00      	lsrs	r0, r0, #8
    6566:	3908      	subs	r1, #8
    6568:	091b      	lsrs	r3, r3, #4
    656a:	4298      	cmp	r0, r3
    656c:	d301      	bcc.n	6572 <__clzsi2+0x22>
    656e:	0900      	lsrs	r0, r0, #4
    6570:	3904      	subs	r1, #4
    6572:	a202      	add	r2, pc, #8	; (adr r2, 657c <__clzsi2+0x2c>)
    6574:	5c10      	ldrb	r0, [r2, r0]
    6576:	1840      	adds	r0, r0, r1
    6578:	4770      	bx	lr
    657a:	46c0      	nop			; (mov r8, r8)
    657c:	02020304 	.word	0x02020304
    6580:	01010101 	.word	0x01010101
	...

0000658c <__errno>:
    658c:	4b01      	ldr	r3, [pc, #4]	; (6594 <__errno+0x8>)
    658e:	6818      	ldr	r0, [r3, #0]
    6590:	4770      	bx	lr
    6592:	46c0      	nop			; (mov r8, r8)
    6594:	200000d4 	.word	0x200000d4

00006598 <__libc_init_array>:
    6598:	4b0e      	ldr	r3, [pc, #56]	; (65d4 <__libc_init_array+0x3c>)
    659a:	b570      	push	{r4, r5, r6, lr}
    659c:	2500      	movs	r5, #0
    659e:	001e      	movs	r6, r3
    65a0:	4c0d      	ldr	r4, [pc, #52]	; (65d8 <__libc_init_array+0x40>)
    65a2:	1ae4      	subs	r4, r4, r3
    65a4:	10a4      	asrs	r4, r4, #2
    65a6:	42a5      	cmp	r5, r4
    65a8:	d004      	beq.n	65b4 <__libc_init_array+0x1c>
    65aa:	00ab      	lsls	r3, r5, #2
    65ac:	58f3      	ldr	r3, [r6, r3]
    65ae:	4798      	blx	r3
    65b0:	3501      	adds	r5, #1
    65b2:	e7f8      	b.n	65a6 <__libc_init_array+0xe>
    65b4:	f000 f896 	bl	66e4 <_init>
    65b8:	4b08      	ldr	r3, [pc, #32]	; (65dc <__libc_init_array+0x44>)
    65ba:	2500      	movs	r5, #0
    65bc:	001e      	movs	r6, r3
    65be:	4c08      	ldr	r4, [pc, #32]	; (65e0 <__libc_init_array+0x48>)
    65c0:	1ae4      	subs	r4, r4, r3
    65c2:	10a4      	asrs	r4, r4, #2
    65c4:	42a5      	cmp	r5, r4
    65c6:	d004      	beq.n	65d2 <__libc_init_array+0x3a>
    65c8:	00ab      	lsls	r3, r5, #2
    65ca:	58f3      	ldr	r3, [r6, r3]
    65cc:	4798      	blx	r3
    65ce:	3501      	adds	r5, #1
    65d0:	e7f8      	b.n	65c4 <__libc_init_array+0x2c>
    65d2:	bd70      	pop	{r4, r5, r6, pc}
    65d4:	000066f0 	.word	0x000066f0
    65d8:	000066f0 	.word	0x000066f0
    65dc:	000066f0 	.word	0x000066f0
    65e0:	000066f4 	.word	0x000066f4

000065e4 <senseBatPin>:
    65e4:	06000000 01000106                                .....

000065e9 <senseAPin>:
    65e9:	03010001 0100010b                                .....

000065ee <senseBPin>:
    65ee:	02010001 0000010a                                .....

000065f3 <senseCPin>:
    65f3:	03000001 00000101                                .....

000065f8 <senseDPin>:
    65f8:	02000001 00000100                                .....

000065fd <analogAccelPin>:
    65fd:	07000001 70000007 0000776f 00000000     .......pow......
    660d:	00000000                                         ...

00006610 <TWO52>:
    6610:	00000000 43300000 00000000 c3300000     ......0C......0.
    6620:	00004664 000045c2 000045c2 000045c0     dF...E...E...E..
    6630:	00004656 00004656 0000464c 000045c0     VF..VF..LF...E..
    6640:	00004656 0000464c 00004656 000045c0     VF..LF..VF...E..
    6650:	0000465c 0000465c 0000465c 000046e6     \F..\F..\F...F..
    6660:	00004ffc 00004eca 00004fd0 00004ec0     .O...N...O...N..
    6670:	00004fd0 00004fda 00004fd0 00004ec0     .O...O...O...N..
    6680:	00004eca 00004eca 00004fda 00004ec0     .N...N...O...N..
    6690:	00004eb6 00004eb6 00004eb6 0000522c     .N...N...N..,R..
    66a0:	00005844 00005704 00005704 00005702     DX...W...W...W..
    66b0:	0000581c 0000581c 0000580e 00005702     .X...X...X...W..
    66c0:	0000581c 0000580e 0000581c 00005702     .X...X...X...W..
    66d0:	00005824 00005824 00005824 00005a24     $X..$X..$X..$Z..
    66e0:	00000043                                C...

000066e4 <_init>:
    66e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66e6:	46c0      	nop			; (mov r8, r8)
    66e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    66ea:	bc08      	pop	{r3}
    66ec:	469e      	mov	lr, r3
    66ee:	4770      	bx	lr

000066f0 <__init_array_start>:
    66f0:	000000dd 	.word	0x000000dd

000066f4 <_fini>:
    66f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66f6:	46c0      	nop			; (mov r8, r8)
    66f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    66fa:	bc08      	pop	{r3}
    66fc:	469e      	mov	lr, r3
    66fe:	4770      	bx	lr

00006700 <__fini_array_start>:
    6700:	000000b5 	.word	0x000000b5
