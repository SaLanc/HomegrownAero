
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000065c4  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000d8  20000000  000065c4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004c8  200000d8  000066a0  000200d8  2**3
                  ALLOC
  3 .stack        00002000  200005a0  00006b68  000200d8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
  6 .debug_info   00027195  00000000  00000000  00020159  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002cc7  00000000  00000000  000472ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002856  00000000  00000000  00049fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004e0  00000000  00000000  0004c80b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000db0  00000000  00000000  0004cceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016921  00000000  00000000  0004da9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a8b0  00000000  00000000  000643bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072bd7  00000000  00000000  0006ec6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001120  00000000  00000000  000e1844  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	200025a0 	.word	0x200025a0
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000a55 	.word	0x00000a55
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	000010d5 	.word	0x000010d5
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00001109 	.word	0x00001109
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	000011a9 	.word	0x000011a9
      90:	00001211 	.word	0x00001211
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000d8 	.word	0x200000d8
      d4:	00000000 	.word	0x00000000
      d8:	000065c4 	.word	0x000065c4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000dc 	.word	0x200000dc
     108:	000065c4 	.word	0x000065c4
     10c:	000065c4 	.word	0x000065c4
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	000065c4 	.word	0x000065c4
     1a4:	20000000 	.word	0x20000000
     1a8:	200000d8 	.word	0x200000d8
     1ac:	200000d8 	.word	0x200000d8
     1b0:	200005a0 	.word	0x200005a0
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	0000645d 	.word	0x0000645d
     1d0:	000009d5 	.word	0x000009d5

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady() {
     1e6:	b570      	push	{r4, r5, r6, lr}
     1e8:	4c08      	ldr	r4, [pc, #32]	; (20c <AT25SFHoldTillReady+0x28>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	6163      	str	r3, [r4, #20]
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_READSTATUS);
     1ee:	2105      	movs	r1, #5
     1f0:	2001      	movs	r0, #1
     1f2:	4b07      	ldr	r3, [pc, #28]	; (210 <AT25SFHoldTillReady+0x2c>)
     1f4:	4798      	blx	r3
    while (spiDataIn(MEM_SPI) & 0x01);
     1f6:	2501      	movs	r5, #1
     1f8:	2001      	movs	r0, #1
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <AT25SFHoldTillReady+0x30>)
     1fc:	4798      	blx	r3
     1fe:	4228      	tst	r0, r5
     200:	d1fa      	bne.n	1f8 <AT25SFHoldTillReady+0x14>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     202:	2380      	movs	r3, #128	; 0x80
     204:	02db      	lsls	r3, r3, #11
     206:	61a3      	str	r3, [r4, #24]
    pinHigh(cs_mem);
}
     208:	bd70      	pop	{r4, r5, r6, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	41004400 	.word	0x41004400
     210:	00002c85 	.word	0x00002c85
     214:	00002c9d 	.word	0x00002c9d

00000218 <AT25SFChipErase>:
void AT25SFChipErase() {
     218:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     21a:	2580      	movs	r5, #128	; 0x80
     21c:	4c06      	ldr	r4, [pc, #24]	; (238 <AT25SFChipErase+0x20>)
     21e:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     220:	4e06      	ldr	r6, [pc, #24]	; (23c <AT25SFChipErase+0x24>)
     222:	6165      	str	r5, [r4, #20]
     224:	2106      	movs	r1, #6
     226:	2001      	movs	r0, #1
     228:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_CHIP_ERASE);
     22c:	2160      	movs	r1, #96	; 0x60
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     22e:	6165      	str	r5, [r4, #20]
     230:	2001      	movs	r0, #1
     232:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     234:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     236:	bd70      	pop	{r4, r5, r6, pc}
     238:	41004400 	.word	0x41004400
     23c:	00002c85 	.word	0x00002c85

00000240 <AT25SFWriteBytes>:
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     242:	2780      	movs	r7, #128	; 0x80
     244:	0006      	movs	r6, r0
     246:	4d14      	ldr	r5, [pc, #80]	; (298 <AT25SFWriteBytes+0x58>)

    AT25SFHoldTillReady();
     248:	4b14      	ldr	r3, [pc, #80]	; (29c <AT25SFWriteBytes+0x5c>)
     24a:	02ff      	lsls	r7, r7, #11
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     24c:	9201      	str	r2, [sp, #4]
     24e:	9100      	str	r1, [sp, #0]

    AT25SFHoldTillReady();
     250:	4798      	blx	r3

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     252:	4c13      	ldr	r4, [pc, #76]	; (2a0 <AT25SFWriteBytes+0x60>)
     254:	616f      	str	r7, [r5, #20]
     256:	2106      	movs	r1, #6
     258:	2001      	movs	r0, #1
     25a:	47a0      	blx	r4
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     25c:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     25e:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     260:	616f      	str	r7, [r5, #20]
     262:	2001      	movs	r0, #1
     264:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0xFF0000) >> 16));
     266:	0c31      	lsrs	r1, r6, #16
     268:	b2c9      	uxtb	r1, r1
     26a:	2001      	movs	r0, #1
     26c:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x00FF00) >>  8));
     26e:	0a31      	lsrs	r1, r6, #8
     270:	b2c9      	uxtb	r1, r1
     272:	2001      	movs	r0, #1
     274:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x0000FF) >>  0));
     276:	b2f1      	uxtb	r1, r6
     278:	2001      	movs	r0, #1
     27a:	47a0      	blx	r4
     27c:	9e01      	ldr	r6, [sp, #4]
     27e:	9b00      	ldr	r3, [sp, #0]
     280:	18f7      	adds	r7, r6, r3

    for (u8_t pos = 0; pos < len; ++pos) {
     282:	42be      	cmp	r6, r7
     284:	d004      	beq.n	290 <AT25SFWriteBytes+0x50>
        spiDataOut(MEM_SPI, bytes[pos]);
     286:	7831      	ldrb	r1, [r6, #0]
     288:	2001      	movs	r0, #1
     28a:	47a0      	blx	r4
     28c:	3601      	adds	r6, #1
     28e:	e7f8      	b.n	282 <AT25SFWriteBytes+0x42>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     290:	2380      	movs	r3, #128	; 0x80
     292:	02db      	lsls	r3, r3, #11
     294:	61ab      	str	r3, [r5, #24]
    }

    pinHigh(cs_mem);

}
     296:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     298:	41004400 	.word	0x41004400
     29c:	000001e5 	.word	0x000001e5
     2a0:	00002c85 	.word	0x00002c85

000002a4 <AT25SEWritePage>:
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2a6:	2780      	movs	r7, #128	; 0x80
     2a8:	0006      	movs	r6, r0
     2aa:	4d13      	ldr	r5, [pc, #76]	; (2f8 <AT25SEWritePage+0x54>)
     2ac:	02ff      	lsls	r7, r7, #11

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2ae:	4c13      	ldr	r4, [pc, #76]	; (2fc <AT25SEWritePage+0x58>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2b0:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2b2:	2001      	movs	r0, #1
     2b4:	616f      	str	r7, [r5, #20]
     2b6:	2106      	movs	r1, #6
     2b8:	47a0      	blx	r4
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ba:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     2bc:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2be:	616f      	str	r7, [r5, #20]
     2c0:	2001      	movs	r0, #1
     2c2:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     2c4:	0c31      	lsrs	r1, r6, #16
     2c6:	b2c9      	uxtb	r1, r1
     2c8:	2001      	movs	r0, #1
     2ca:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     2cc:	0a31      	lsrs	r1, r6, #8
     2ce:	b2c9      	uxtb	r1, r1
     2d0:	2001      	movs	r0, #1
     2d2:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     2d4:	b2f1      	uxtb	r1, r6
     2d6:	2001      	movs	r0, #1
     2d8:	47a0      	blx	r4
     2da:	9e01      	ldr	r6, [sp, #4]
     2dc:	1c77      	adds	r7, r6, #1
     2de:	37ff      	adds	r7, #255	; 0xff


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        spiDataOut(SPI1,data[pos]);
     2e0:	7831      	ldrb	r1, [r6, #0]
     2e2:	2001      	movs	r0, #1
     2e4:	3601      	adds	r6, #1
     2e6:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     2e8:	42be      	cmp	r6, r7
     2ea:	d1f9      	bne.n	2e0 <AT25SEWritePage+0x3c>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ec:	2380      	movs	r3, #128	; 0x80
     2ee:	02db      	lsls	r3, r3, #11
     2f0:	61ab      	str	r3, [r5, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     2f2:	2000      	movs	r0, #0
     2f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	41004400 	.word	0x41004400
     2fc:	00002c85 	.word	0x00002c85

00000300 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     300:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     304:	0005      	movs	r5, r0
     306:	000f      	movs	r7, r1
     308:	4e11      	ldr	r6, [pc, #68]	; (350 <AT25SEreadSample+0x50>)
     30a:	02db      	lsls	r3, r3, #11
     30c:	9201      	str	r2, [sp, #4]

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     30e:	4c11      	ldr	r4, [pc, #68]	; (354 <AT25SEreadSample+0x54>)
     310:	6173      	str	r3, [r6, #20]
     312:	210b      	movs	r1, #11
     314:	2001      	movs	r0, #1
     316:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     318:	0c29      	lsrs	r1, r5, #16
     31a:	b2c9      	uxtb	r1, r1
     31c:	2001      	movs	r0, #1
     31e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     320:	0a29      	lsrs	r1, r5, #8
     322:	b2c9      	uxtb	r1, r1
     324:	2001      	movs	r0, #1
     326:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     328:	b2e9      	uxtb	r1, r5
     32a:	2001      	movs	r0, #1
     32c:	47a0      	blx	r4
    spiDataOut(MEM_SPI, 0xFF);
     32e:	21ff      	movs	r1, #255	; 0xff
     330:	2001      	movs	r0, #1
     332:	47a0      	blx	r4
     334:	9c01      	ldr	r4, [sp, #4]
     336:	19e7      	adds	r7, r4, r7


    for (u8_t pos = 0; pos < len; ++pos) {
     338:	42bc      	cmp	r4, r7
     33a:	d005      	beq.n	348 <AT25SEreadSample+0x48>
        data[pos] = spiDataIn(MEM_SPI);
     33c:	2001      	movs	r0, #1
     33e:	4b06      	ldr	r3, [pc, #24]	; (358 <AT25SEreadSample+0x58>)
     340:	4798      	blx	r3
     342:	7020      	strb	r0, [r4, #0]
     344:	3401      	adds	r4, #1
     346:	e7f7      	b.n	338 <AT25SEreadSample+0x38>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     348:	2380      	movs	r3, #128	; 0x80
     34a:	02db      	lsls	r3, r3, #11
     34c:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);

}
     34e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     350:	41004400 	.word	0x41004400
     354:	00002c85 	.word	0x00002c85
     358:	00002c9d 	.word	0x00002c9d

0000035c <AT25SEreadPage>:

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     35e:	2380      	movs	r3, #128	; 0x80
     360:	0007      	movs	r7, r0
     362:	000c      	movs	r4, r1
     364:	4e10      	ldr	r6, [pc, #64]	; (3a8 <AT25SEreadPage+0x4c>)
     366:	02db      	lsls	r3, r3, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     368:	4d10      	ldr	r5, [pc, #64]	; (3ac <AT25SEreadPage+0x50>)
     36a:	6173      	str	r3, [r6, #20]
     36c:	210b      	movs	r1, #11
     36e:	2001      	movs	r0, #1
     370:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     372:	0c39      	lsrs	r1, r7, #16
     374:	b2c9      	uxtb	r1, r1
     376:	2001      	movs	r0, #1
     378:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     37a:	0a39      	lsrs	r1, r7, #8
     37c:	b2c9      	uxtb	r1, r1
     37e:	2001      	movs	r0, #1
     380:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     382:	b2f9      	uxtb	r1, r7
     384:	2001      	movs	r0, #1
     386:	47a8      	blx	r5
    spiDataOut(MEM_SPI, 0xFF);
     388:	21ff      	movs	r1, #255	; 0xff
     38a:	2001      	movs	r0, #1
     38c:	47a8      	blx	r5
     38e:	1c65      	adds	r5, r4, #1
     390:	35ff      	adds	r5, #255	; 0xff

    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataIn(MEM_SPI);
     392:	2001      	movs	r0, #1
     394:	4b06      	ldr	r3, [pc, #24]	; (3b0 <AT25SEreadPage+0x54>)
     396:	4798      	blx	r3
     398:	7020      	strb	r0, [r4, #0]
     39a:	3401      	adds	r4, #1
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
    spiDataOut(MEM_SPI, 0xFF);

    for (u16_t pos = 0; pos < 256; ++pos) {
     39c:	42ac      	cmp	r4, r5
     39e:	d1f8      	bne.n	392 <AT25SEreadPage+0x36>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3a0:	2380      	movs	r3, #128	; 0x80
     3a2:	02db      	lsls	r3, r3, #11
     3a4:	61b3      	str	r3, [r6, #24]
        data[pos] = spiDataIn(MEM_SPI);
    }
    pinHigh(cs_mem);

}
     3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3a8:	41004400 	.word	0x41004400
     3ac:	00002c85 	.word	0x00002c85
     3b0:	00002c9d 	.word	0x00002c9d

000003b4 <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>

u32_t readMS5803AdcResults() {
     3b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b6:	2780      	movs	r7, #128	; 0x80
     3b8:	4e0b      	ldr	r6, [pc, #44]	; (3e8 <readMS5803AdcResults+0x34>)
     3ba:	01ff      	lsls	r7, r7, #7

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, cmdAdcRead_);
     3bc:	2100      	movs	r1, #0
     3be:	4b0b      	ldr	r3, [pc, #44]	; (3ec <readMS5803AdcResults+0x38>)
     3c0:	6177      	str	r7, [r6, #20]
     3c2:	2002      	movs	r0, #2
     3c4:	4798      	blx	r3
    u8_t _byte1 = spiDataIn(SPI2);
     3c6:	4d0a      	ldr	r5, [pc, #40]	; (3f0 <readMS5803AdcResults+0x3c>)
     3c8:	2002      	movs	r0, #2
     3ca:	47a8      	blx	r5
     3cc:	0004      	movs	r4, r0
    u8_t _byte2 = spiDataIn(SPI2);
     3ce:	2002      	movs	r0, #2
     3d0:	47a8      	blx	r5
     3d2:	9001      	str	r0, [sp, #4]
    u8_t _byte3 = spiDataIn(SPI2);
     3d4:	2002      	movs	r0, #2
     3d6:	47a8      	blx	r5
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3d8:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     3da:	9b01      	ldr	r3, [sp, #4]
     3dc:	0424      	lsls	r4, r4, #16
     3de:	021b      	lsls	r3, r3, #8
     3e0:	431c      	orrs	r4, r3
     3e2:	4320      	orrs	r0, r4
}
     3e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	41004400 	.word	0x41004400
     3ec:	00002c85 	.word	0x00002c85
     3f0:	00002c9d 	.word	0x00002c9d

000003f4 <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3f6:	b087      	sub	sp, #28
     3f8:	9304      	str	r3, [sp, #16]
    const u16_t C1 = coefficients_[1];
     3fa:	4b24      	ldr	r3, [pc, #144]	; (48c <ConvertPressureTemperature+0x98>)

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3fc:	9003      	str	r0, [sp, #12]
     3fe:	0014      	movs	r4, r2
    const u16_t C1 = coefficients_[1];
     400:	885a      	ldrh	r2, [r3, #2]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     402:	4f23      	ldr	r7, [pc, #140]	; (490 <ConvertPressureTemperature+0x9c>)
    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
     404:	9201      	str	r2, [sp, #4]
    const u16_t C2 = coefficients_[2];
     406:	889a      	ldrh	r2, [r3, #4]
     408:	9200      	str	r2, [sp, #0]
    const u16_t C3 = coefficients_[3];
    const u16_t C4 = coefficients_[4];
     40a:	891a      	ldrh	r2, [r3, #8]
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
    const u16_t C2 = coefficients_[2];
    const u16_t C3 = coefficients_[3];
     40c:	88dd      	ldrh	r5, [r3, #6]
    const u16_t C4 = coefficients_[4];
     40e:	9202      	str	r2, [sp, #8]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     410:	895e      	ldrh	r6, [r3, #10]
     412:	0236      	lsls	r6, r6, #8
     414:	1b8e      	subs	r6, r1, r6
     416:	17f2      	asrs	r2, r6, #31
     418:	9205      	str	r2, [sp, #20]
     41a:	8998      	ldrh	r0, [r3, #12]
     41c:	0032      	movs	r2, r6
     41e:	17f3      	asrs	r3, r6, #31
     420:	2100      	movs	r1, #0
     422:	47b8      	blx	r7
     424:	23fa      	movs	r3, #250	; 0xfa
     426:	0249      	lsls	r1, r1, #9
     428:	0dc0      	lsrs	r0, r0, #23
     42a:	4308      	orrs	r0, r1
     42c:	00db      	lsls	r3, r3, #3
     42e:	18c0      	adds	r0, r0, r3
     430:	6020      	str	r0, [r4, #0]

    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
    const  int64_t SENS  =  ((int64_t)C1 << 16) + ((C3 * (int64_t)dT) >> 7);
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     432:	0032      	movs	r2, r6
     434:	17f3      	asrs	r3, r6, #31
     436:	0028      	movs	r0, r5
     438:	2100      	movs	r1, #0
     43a:	47b8      	blx	r7
     43c:	064c      	lsls	r4, r1, #25
     43e:	11cb      	asrs	r3, r1, #7
     440:	2100      	movs	r1, #0
     442:	09c2      	lsrs	r2, r0, #7
     444:	4322      	orrs	r2, r4
     446:	9c01      	ldr	r4, [sp, #4]
     448:	0420      	lsls	r0, r4, #16
     44a:	1880      	adds	r0, r0, r2
     44c:	4159      	adcs	r1, r3
     44e:	9a03      	ldr	r2, [sp, #12]
     450:	2300      	movs	r3, #0
     452:	47b8      	blx	r7
     454:	02cb      	lsls	r3, r1, #11
     456:	0d44      	lsrs	r4, r0, #21
     458:	0032      	movs	r2, r6
     45a:	431c      	orrs	r4, r3
     45c:	154d      	asrs	r5, r1, #21
     45e:	9b05      	ldr	r3, [sp, #20]
     460:	9802      	ldr	r0, [sp, #8]
     462:	2100      	movs	r1, #0
     464:	47b8      	blx	r7
     466:	068b      	lsls	r3, r1, #26
     468:	118f      	asrs	r7, r1, #6
     46a:	9900      	ldr	r1, [sp, #0]
     46c:	0986      	lsrs	r6, r0, #6
     46e:	431e      	orrs	r6, r3
     470:	044a      	lsls	r2, r1, #17
     472:	0bcb      	lsrs	r3, r1, #15
     474:	1992      	adds	r2, r2, r6
     476:	417b      	adcs	r3, r7
     478:	1aa4      	subs	r4, r4, r2
     47a:	419d      	sbcs	r5, r3
     47c:	046b      	lsls	r3, r5, #17
     47e:	0be4      	lsrs	r4, r4, #15
     480:	431c      	orrs	r4, r3
     482:	9b04      	ldr	r3, [sp, #16]
     484:	601c      	str	r4, [r3, #0]

}
     486:	b007      	add	sp, #28
     488:	bdf0      	pop	{r4, r5, r6, r7, pc}
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	2000026e 	.word	0x2000026e
     490:	00004379 	.word	0x00004379

00000494 <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     494:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/100)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     496:	4b0c      	ldr	r3, [pc, #48]	; (4c8 <paToFeetNOAA+0x34>)
     498:	4798      	blx	r3
     49a:	4c0c      	ldr	r4, [pc, #48]	; (4cc <paToFeetNOAA+0x38>)
     49c:	2200      	movs	r2, #0
     49e:	4b0c      	ldr	r3, [pc, #48]	; (4d0 <paToFeetNOAA+0x3c>)
     4a0:	47a0      	blx	r4
     4a2:	2200      	movs	r2, #0
     4a4:	4b0b      	ldr	r3, [pc, #44]	; (4d4 <paToFeetNOAA+0x40>)
     4a6:	47a0      	blx	r4
     4a8:	4a0b      	ldr	r2, [pc, #44]	; (4d8 <paToFeetNOAA+0x44>)
     4aa:	4b0c      	ldr	r3, [pc, #48]	; (4dc <paToFeetNOAA+0x48>)
     4ac:	4c0c      	ldr	r4, [pc, #48]	; (4e0 <paToFeetNOAA+0x4c>)
     4ae:	47a0      	blx	r4
    return altFeet;
     4b0:	4c0c      	ldr	r4, [pc, #48]	; (4e4 <paToFeetNOAA+0x50>)
double paToFeetNOAA(int32_t pressureMbar) {

    double lower =(((double)(pressureMbar)/100)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     4b2:	0002      	movs	r2, r0
     4b4:	000b      	movs	r3, r1
    return altFeet;
     4b6:	2000      	movs	r0, #0
     4b8:	490b      	ldr	r1, [pc, #44]	; (4e8 <paToFeetNOAA+0x54>)
     4ba:	47a0      	blx	r4
     4bc:	4a0b      	ldr	r2, [pc, #44]	; (4ec <paToFeetNOAA+0x58>)
     4be:	4b0c      	ldr	r3, [pc, #48]	; (4f0 <paToFeetNOAA+0x5c>)
     4c0:	4c0c      	ldr	r4, [pc, #48]	; (4f4 <paToFeetNOAA+0x60>)
     4c2:	47a0      	blx	r4

}
     4c4:	bd10      	pop	{r4, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	00006161 	.word	0x00006161
     4cc:	00004cd1 	.word	0x00004cd1
     4d0:	40590000 	.word	0x40590000
     4d4:	408faa00 	.word	0x408faa00
     4d8:	e279dd3c 	.word	0xe279dd3c
     4dc:	3fc85b39 	.word	0x3fc85b39
     4e0:	00002fb1 	.word	0x00002fb1
     4e4:	00005a0d 	.word	0x00005a0d
     4e8:	3ff00000 	.word	0x3ff00000
     4ec:	9999999a 	.word	0x9999999a
     4f0:	4101beb3 	.word	0x4101beb3
     4f4:	00005519 	.word	0x00005519

000004f8 <readMS5803Coefficients>:



void readMS5803Coefficients() {
     4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     4fa:	24a2      	movs	r4, #162	; 0xa2
     4fc:	4d11      	ldr	r5, [pc, #68]	; (544 <readMS5803Coefficients+0x4c>)

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
        delay_us(600);
     4fe:	2096      	movs	r0, #150	; 0x96
     500:	4e11      	ldr	r6, [pc, #68]	; (548 <readMS5803Coefficients+0x50>)
     502:	0080      	lsls	r0, r0, #2
     504:	47b0      	blx	r6
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
        delay_us(600);
     506:	2096      	movs	r0, #150	; 0x96
     508:	0080      	lsls	r0, r0, #2
     50a:	47b0      	blx	r6
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     50c:	2380      	movs	r3, #128	; 0x80
     50e:	4e0f      	ldr	r6, [pc, #60]	; (54c <readMS5803Coefficients+0x54>)
     510:	01db      	lsls	r3, r3, #7
        pinLow(cs_baro);
        spiDataOut(SPI2, _cmd);
     512:	0021      	movs	r1, r4
     514:	6173      	str	r3, [r6, #20]
     516:	2002      	movs	r0, #2
     518:	4b0d      	ldr	r3, [pc, #52]	; (550 <readMS5803Coefficients+0x58>)
     51a:	4798      	blx	r3
        u8_t _byte1 = spiDataIn(SPI2);
     51c:	4f0d      	ldr	r7, [pc, #52]	; (554 <readMS5803Coefficients+0x5c>)
     51e:	2002      	movs	r0, #2
     520:	47b8      	blx	r7
     522:	9001      	str	r0, [sp, #4]
        u8_t _byte2 = spiDataIn(SPI2);
     524:	2002      	movs	r0, #2
     526:	47b8      	blx	r7
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     528:	2380      	movs	r3, #128	; 0x80
     52a:	01db      	lsls	r3, r3, #7
     52c:	61b3      	str	r3, [r6, #24]
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     52e:	9b01      	ldr	r3, [sp, #4]
     530:	3402      	adds	r4, #2
     532:	021b      	lsls	r3, r3, #8
     534:	4318      	orrs	r0, r3
     536:	b2e4      	uxtb	r4, r4
     538:	8028      	strh	r0, [r5, #0]
     53a:	3502      	adds	r5, #2



void readMS5803Coefficients() {

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
     53c:	2cae      	cmp	r4, #174	; 0xae
     53e:	d1de      	bne.n	4fe <readMS5803Coefficients+0x6>
        u8_t _byte2 = spiDataIn(SPI2);
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     540:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     542:	46c0      	nop			; (mov r8, r8)
     544:	20000270 	.word	0x20000270
     548:	000010a5 	.word	0x000010a5
     54c:	41004400 	.word	0x41004400
     550:	00002c85 	.word	0x00002c85
     554:	00002c9d 	.word	0x00002c9d

00000558 <initMS5803Barometer>:

void initMS5803Barometer() {
     558:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     55a:	2580      	movs	r5, #128	; 0x80
     55c:	4c06      	ldr	r4, [pc, #24]	; (578 <initMS5803Barometer+0x20>)
     55e:	01ed      	lsls	r5, r5, #7


    pinLow(cs_baro);
    spiDataOut(BARO_SPI, MS5803_CMD_RES);
     560:	211e      	movs	r1, #30
     562:	6165      	str	r5, [r4, #20]
     564:	2002      	movs	r0, #2
     566:	4b05      	ldr	r3, [pc, #20]	; (57c <initMS5803Barometer+0x24>)
     568:	4798      	blx	r3
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     56a:	61a5      	str	r5, [r4, #24]

    pinHigh(cs_baro);
    delay_ms(200);
     56c:	20c8      	movs	r0, #200	; 0xc8
     56e:	4b04      	ldr	r3, [pc, #16]	; (580 <initMS5803Barometer+0x28>)
     570:	4798      	blx	r3
    readMS5803Coefficients();
     572:	4b04      	ldr	r3, [pc, #16]	; (584 <initMS5803Barometer+0x2c>)
     574:	4798      	blx	r3

}
     576:	bd70      	pop	{r4, r5, r6, pc}
     578:	41004400 	.word	0x41004400
     57c:	00002c85 	.word	0x00002c85
     580:	000010d9 	.word	0x000010d9
     584:	000004f9 	.word	0x000004f9

00000588 <MS5803_CRC4>:
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     588:	4b02      	ldr	r3, [pc, #8]	; (594 <MS5803_CRC4+0xc>)
    return (n_rem & 0x00);
}
     58a:	2000      	movs	r0, #0
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     58c:	7b9a      	ldrb	r2, [r3, #14]
     58e:	81da      	strh	r2, [r3, #14]
    return (n_rem & 0x00);
}
     590:	4770      	bx	lr
     592:	46c0      	nop			; (mov r8, r8)
     594:	2000026e 	.word	0x2000026e

00000598 <init>:


void init() {

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     598:	211e      	movs	r1, #30
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     59a:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     59c:	4afc      	ldr	r2, [pc, #1008]	; (990 <init+0x3f8>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     59e:	b085      	sub	sp, #20

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     5a0:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5a2:	2401      	movs	r4, #1
     5a4:	438b      	bics	r3, r1
     5a6:	391c      	subs	r1, #28
     5a8:	430b      	orrs	r3, r1
     5aa:	6053      	str	r3, [r2, #4]

    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     5ac:	4af9      	ldr	r2, [pc, #996]	; (994 <init+0x3fc>)
     5ae:	3106      	adds	r1, #6
     5b0:	6993      	ldr	r3, [r2, #24]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5b2:	260f      	movs	r6, #15
     5b4:	430b      	orrs	r3, r1
     5b6:	6193      	str	r3, [r2, #24]

    SystemInit();
     5b8:	4bf7      	ldr	r3, [pc, #988]	; (998 <init+0x400>)
     5ba:	4798      	blx	r3
    GclkInit(0);
     5bc:	2000      	movs	r0, #0
     5be:	4bf7      	ldr	r3, [pc, #988]	; (99c <init+0x404>)
     5c0:	4798      	blx	r3
    RtcInit();
     5c2:	4bf7      	ldr	r3, [pc, #988]	; (9a0 <init+0x408>)
     5c4:	4798      	blx	r3
    delayInit();
     5c6:	4bf7      	ldr	r3, [pc, #988]	; (9a4 <init+0x40c>)
     5c8:	4798      	blx	r3
    adcInit();
     5ca:	4bf7      	ldr	r3, [pc, #988]	; (9a8 <init+0x410>)
     5cc:	4798      	blx	r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5ce:	4bf7      	ldr	r3, [pc, #988]	; (9ac <init+0x414>)
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5d0:	2002      	movs	r0, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5d2:	0019      	movs	r1, r3
     5d4:	3154      	adds	r1, #84	; 0x54
     5d6:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5d8:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5da:	43a2      	bics	r2, r4
     5dc:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5de:	2280      	movs	r2, #128	; 0x80
     5e0:	0352      	lsls	r2, r2, #13
     5e2:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5e4:	3533      	adds	r5, #51	; 0x33
     5e6:	782a      	ldrb	r2, [r5, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5e8:	390e      	subs	r1, #14

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5ea:	43b2      	bics	r2, r6
     5ec:	4322      	orrs	r2, r4
     5ee:	702a      	strb	r2, [r5, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f0:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5f2:	001f      	movs	r7, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f4:	4322      	orrs	r2, r4
     5f6:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5f8:	001a      	movs	r2, r3
     5fa:	3247      	adds	r2, #71	; 0x47
     5fc:	7811      	ldrb	r1, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5fe:	3794      	adds	r7, #148	; 0x94
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     600:	43a1      	bics	r1, r4
     602:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     604:	7811      	ldrb	r1, [r2, #0]
     606:	4301      	orrs	r1, r0
     608:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     60a:	2180      	movs	r1, #128	; 0x80
     60c:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     60e:	7829      	ldrb	r1, [r5, #0]
     610:	300e      	adds	r0, #14
     612:	4031      	ands	r1, r6
     614:	4301      	orrs	r1, r0
     616:	7029      	strb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     618:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     61a:	7811      	ldrb	r1, [r2, #0]
     61c:	4321      	orrs	r1, r4
     61e:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     620:	327c      	adds	r2, #124	; 0x7c
     622:	7811      	ldrb	r1, [r2, #0]
     624:	43a1      	bics	r1, r4
     626:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     628:	7811      	ldrb	r1, [r2, #0]
     62a:	4329      	orrs	r1, r5
     62c:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     62e:	2108      	movs	r1, #8
     630:	468c      	mov	ip, r1
     632:	449c      	add	ip, r3
     634:	4661      	mov	r1, ip
     636:	3506      	adds	r5, #6
     638:	67cd      	str	r5, [r1, #124]	; 0x7c
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     63a:	31a9      	adds	r1, #169	; 0xa9
     63c:	780d      	ldrb	r5, [r1, #0]
     63e:	4035      	ands	r5, r6
     640:	4305      	orrs	r5, r0
     642:	700d      	strb	r5, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     644:	7815      	ldrb	r5, [r2, #0]
     646:	4325      	orrs	r5, r4
     648:	7015      	strb	r5, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     64a:	001d      	movs	r5, r3
     64c:	35d7      	adds	r5, #215	; 0xd7
     64e:	782a      	ldrb	r2, [r5, #0]
     650:	43a2      	bics	r2, r4
     652:	702a      	strb	r2, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     654:	2580      	movs	r5, #128	; 0x80
     656:	4ad6      	ldr	r2, [pc, #856]	; (9b0 <init+0x418>)
     658:	042d      	lsls	r5, r5, #16
     65a:	6015      	str	r5, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     65c:	002a      	movs	r2, r5
     65e:	9703      	str	r7, [sp, #12]
     660:	603a      	str	r2, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     662:	001a      	movs	r2, r3
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     664:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     666:	32c2      	adds	r2, #194	; 0xc2
     668:	7815      	ldrb	r5, [r2, #0]
     66a:	43a5      	bics	r5, r4
     66c:	7015      	strb	r5, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     66e:	7815      	ldrb	r5, [r2, #0]
     670:	433d      	orrs	r5, r7
     672:	7015      	strb	r5, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     674:	4665      	mov	r5, ip
     676:	19ff      	adds	r7, r7, r7
     678:	67ef      	str	r7, [r5, #124]	; 0x7c

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     67a:	780d      	ldrb	r5, [r1, #0]
     67c:	43b5      	bics	r5, r6
     67e:	4325      	orrs	r5, r4
     680:	700d      	strb	r5, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     682:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     684:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     686:	4321      	orrs	r1, r4
     688:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     68a:	0019      	movs	r1, r3
     68c:	31d6      	adds	r1, #214	; 0xd6
     68e:	780a      	ldrb	r2, [r1, #0]
     690:	43a2      	bics	r2, r4
     692:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     694:	2180      	movs	r1, #128	; 0x80
     696:	4ac6      	ldr	r2, [pc, #792]	; (9b0 <init+0x418>)
     698:	03c9      	lsls	r1, r1, #15
     69a:	6011      	str	r1, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     69c:	000a      	movs	r2, r1
     69e:	9903      	ldr	r1, [sp, #12]
     6a0:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6a2:	001a      	movs	r2, r3
     6a4:	3243      	adds	r2, #67	; 0x43
     6a6:	7811      	ldrb	r1, [r2, #0]
     6a8:	43a1      	bics	r1, r4
     6aa:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6ac:	7811      	ldrb	r1, [r2, #0]
     6ae:	4329      	orrs	r1, r5
     6b0:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6b2:	001d      	movs	r5, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6b4:	2108      	movs	r1, #8
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6b6:	3531      	adds	r5, #49	; 0x31


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6b8:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6ba:	7829      	ldrb	r1, [r5, #0]
     6bc:	4031      	ands	r1, r6
     6be:	4308      	orrs	r0, r1
     6c0:	7028      	strb	r0, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c2:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6c4:	2002      	movs	r0, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c6:	4321      	orrs	r1, r4
     6c8:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ca:	0019      	movs	r1, r3
     6cc:	3159      	adds	r1, #89	; 0x59
     6ce:	780a      	ldrb	r2, [r1, #0]
     6d0:	43a2      	bics	r2, r4
     6d2:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6d4:	2280      	movs	r2, #128	; 0x80
     6d6:	0492      	lsls	r2, r2, #18
     6d8:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6da:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6dc:	001a      	movs	r2, r3
     6de:	3242      	adds	r2, #66	; 0x42
     6e0:	7811      	ldrb	r1, [r2, #0]
     6e2:	43a1      	bics	r1, r4
     6e4:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6e6:	7811      	ldrb	r1, [r2, #0]
     6e8:	4301      	orrs	r1, r0
     6ea:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6ec:	605f      	str	r7, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6ee:	7829      	ldrb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6f0:	0018      	movs	r0, r3

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6f2:	43b1      	bics	r1, r6
     6f4:	4321      	orrs	r1, r4
     6f6:	7029      	strb	r1, [r5, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6f8:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6fa:	3048      	adds	r0, #72	; 0x48
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fc:	4321      	orrs	r1, r4
     6fe:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     700:	0019      	movs	r1, r3
     702:	3158      	adds	r1, #88	; 0x58
     704:	780a      	ldrb	r2, [r1, #0]
     706:	001f      	movs	r7, r3
     708:	43a2      	bics	r2, r4
     70a:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     70c:	2280      	movs	r2, #128	; 0x80
    pinIn(senseDPin);
    pinMux(senseDPin);
    pinOut(fireDPin);
    pinLow(fireDPin);

    charges.igniterAHot = false;
     70e:	2100      	movs	r1, #0
     710:	0452      	lsls	r2, r2, #17
     712:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     714:	615a      	str	r2, [r3, #20]
     716:	4aa7      	ldr	r2, [pc, #668]	; (9b4 <init+0x41c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     718:	3749      	adds	r7, #73	; 0x49
     71a:	7011      	strb	r1, [r2, #0]
    charges.igniterBHot = false;
     71c:	2100      	movs	r1, #0
     71e:	7211      	strb	r1, [r2, #8]
    charges.igniterCHot = false;
     720:	2100      	movs	r1, #0
     722:	7411      	strb	r1, [r2, #16]
    charges.igniterDHot = false;
     724:	2100      	movs	r1, #0
     726:	7611      	strb	r1, [r2, #24]
     728:	7802      	ldrb	r2, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     72a:	2502      	movs	r5, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     72c:	43a2      	bics	r2, r4
     72e:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     730:	2280      	movs	r2, #128	; 0x80
     732:	0052      	lsls	r2, r2, #1
     734:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     736:	783a      	ldrb	r2, [r7, #0]
     738:	43a2      	bics	r2, r4
     73a:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     73c:	2280      	movs	r2, #128	; 0x80
     73e:	0092      	lsls	r2, r2, #2
     740:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     742:	001a      	movs	r2, r3
     744:	324b      	adds	r2, #75	; 0x4b
     746:	7811      	ldrb	r1, [r2, #0]
     748:	43a1      	bics	r1, r4
     74a:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     74c:	7811      	ldrb	r1, [r2, #0]
     74e:	4329      	orrs	r1, r5
     750:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     752:	2180      	movs	r1, #128	; 0x80
     754:	0109      	lsls	r1, r1, #4
     756:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     758:	2135      	movs	r1, #53	; 0x35
     75a:	468c      	mov	ip, r1
     75c:	449c      	add	ip, r3
     75e:	4661      	mov	r1, ip
     760:	7809      	ldrb	r1, [r1, #0]
     762:	351e      	adds	r5, #30
     764:	4031      	ands	r1, r6
     766:	4329      	orrs	r1, r5
     768:	4665      	mov	r5, ip
     76a:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76c:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     76e:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     770:	4321      	orrs	r1, r4
     772:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     774:	0019      	movs	r1, r3
     776:	3134      	adds	r1, #52	; 0x34
     778:	780a      	ldrb	r2, [r1, #0]
     77a:	4032      	ands	r2, r6
     77c:	432a      	orrs	r2, r5
     77e:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     780:	783a      	ldrb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     782:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     784:	4322      	orrs	r2, r4
     786:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     788:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     78a:	3706      	adds	r7, #6

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     78c:	43b2      	bics	r2, r6
     78e:	432a      	orrs	r2, r5
     790:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     792:	7802      	ldrb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     794:	3196      	adds	r1, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     796:	4322      	orrs	r2, r4
     798:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79a:	780a      	ldrb	r2, [r1, #0]
     79c:	43a2      	bics	r2, r4
     79e:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a0:	2280      	movs	r2, #128	; 0x80
     7a2:	4983      	ldr	r1, [pc, #524]	; (9b0 <init+0x418>)
     7a4:	00d2      	lsls	r2, r2, #3
     7a6:	600a      	str	r2, [r1, #0]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7a8:	0019      	movs	r1, r3
     7aa:	3198      	adds	r1, #152	; 0x98
     7ac:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ae:	7881      	ldrb	r1, [r0, #2]
     7b0:	43a1      	bics	r1, r4
     7b2:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b4:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7b6:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b8:	7a02      	ldrb	r2, [r0, #8]
     7ba:	43a2      	bics	r2, r4
     7bc:	7202      	strb	r2, [r0, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7be:	2280      	movs	r2, #128	; 0x80
     7c0:	0252      	lsls	r2, r2, #9
     7c2:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c4:	78ba      	ldrb	r2, [r7, #2]
     7c6:	43a2      	bics	r2, r4
     7c8:	70ba      	strb	r2, [r7, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ca:	2280      	movs	r2, #128	; 0x80
     7cc:	0292      	lsls	r2, r2, #10
     7ce:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7d0:	001a      	movs	r2, r3
     7d2:	3253      	adds	r2, #83	; 0x53
     7d4:	7811      	ldrb	r1, [r2, #0]
     7d6:	43a1      	bics	r1, r4
     7d8:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7da:	7811      	ldrb	r1, [r2, #0]
     7dc:	4329      	orrs	r1, r5
     7de:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7e0:	2180      	movs	r1, #128	; 0x80
     7e2:	0309      	lsls	r1, r1, #12
     7e4:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7e6:	2139      	movs	r1, #57	; 0x39
     7e8:	468c      	mov	ip, r1
     7ea:	449c      	add	ip, r3
     7ec:	4661      	mov	r1, ip
     7ee:	7809      	ldrb	r1, [r1, #0]
     7f0:	351e      	adds	r5, #30
     7f2:	4031      	ands	r1, r6
     7f4:	4329      	orrs	r1, r5
     7f6:	4665      	mov	r5, ip
     7f8:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fa:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7fc:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fe:	4321      	orrs	r1, r4
     800:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     802:	0019      	movs	r1, r3
     804:	3138      	adds	r1, #56	; 0x38
     806:	780a      	ldrb	r2, [r1, #0]
     808:	4032      	ands	r2, r6
     80a:	432a      	orrs	r2, r5
     80c:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     80e:	78ba      	ldrb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     810:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     812:	4322      	orrs	r2, r4
     814:	70ba      	strb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     816:	780a      	ldrb	r2, [r1, #0]
     818:	43b2      	bics	r2, r6
     81a:	432a      	orrs	r2, r5
     81c:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     81e:	7a02      	ldrb	r2, [r0, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     820:	3114      	adds	r1, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     822:	4322      	orrs	r2, r4
     824:	7202      	strb	r2, [r0, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     826:	798a      	ldrb	r2, [r1, #6]
     828:	43a2      	bics	r2, r4
     82a:	718a      	strb	r2, [r1, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     82c:	2280      	movs	r2, #128	; 0x80
     82e:	02d2      	lsls	r2, r2, #11
     830:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     832:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     834:	9103      	str	r1, [sp, #12]
     836:	780a      	ldrb	r2, [r1, #0]
     838:	43a2      	bics	r2, r4
     83a:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     83c:	2280      	movs	r2, #128	; 0x80
     83e:	0152      	lsls	r2, r2, #5
     840:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     842:	783a      	ldrb	r2, [r7, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     844:	2120      	movs	r1, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     846:	43a2      	bics	r2, r4
     848:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     84a:	2280      	movs	r2, #128	; 0x80
     84c:	0212      	lsls	r2, r2, #8
     84e:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     850:	001a      	movs	r2, r3
     852:	324d      	adds	r2, #77	; 0x4d
     854:	7810      	ldrb	r0, [r2, #0]
     856:	43a0      	bics	r0, r4
     858:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     85a:	7810      	ldrb	r0, [r2, #0]
     85c:	4328      	orrs	r0, r5
     85e:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     860:	2080      	movs	r0, #128	; 0x80
     862:	0180      	lsls	r0, r0, #6
     864:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     866:	0018      	movs	r0, r3
     868:	3036      	adds	r0, #54	; 0x36
     86a:	7805      	ldrb	r5, [r0, #0]
     86c:	4035      	ands	r5, r6
     86e:	430d      	orrs	r5, r1
     870:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     872:	7811      	ldrb	r1, [r2, #0]
     874:	000d      	movs	r5, r1
     876:	4325      	orrs	r5, r4
     878:	7015      	strb	r5, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     87a:	2237      	movs	r2, #55	; 0x37
     87c:	4694      	mov	ip, r2
     87e:	449c      	add	ip, r3
     880:	4662      	mov	r2, ip
     882:	2120      	movs	r1, #32
     884:	7812      	ldrb	r2, [r2, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     886:	2502      	movs	r5, #2
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     888:	4032      	ands	r2, r6
     88a:	430a      	orrs	r2, r1
     88c:	4661      	mov	r1, ip
     88e:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     890:	2102      	movs	r1, #2
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     892:	783a      	ldrb	r2, [r7, #0]
     894:	4322      	orrs	r2, r4
     896:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     898:	7802      	ldrb	r2, [r0, #0]
     89a:	43b2      	bics	r2, r6
     89c:	430a      	orrs	r2, r1
     89e:	7002      	strb	r2, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8a0:	9a03      	ldr	r2, [sp, #12]
     8a2:	9903      	ldr	r1, [sp, #12]
     8a4:	7812      	ldrb	r2, [r2, #0]
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8a6:	2040      	movs	r0, #64	; 0x40
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8a8:	4322      	orrs	r2, r4
     8aa:	700a      	strb	r2, [r1, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ac:	0019      	movs	r1, r3
     8ae:	314e      	adds	r1, #78	; 0x4e
     8b0:	780a      	ldrb	r2, [r1, #0]
     8b2:	43a2      	bics	r2, r4
     8b4:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8b6:	2280      	movs	r2, #128	; 0x80
     8b8:	01d2      	lsls	r2, r2, #7
     8ba:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8bc:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8be:	001a      	movs	r2, r3
     8c0:	3255      	adds	r2, #85	; 0x55
     8c2:	7811      	ldrb	r1, [r2, #0]
     8c4:	43a1      	bics	r1, r4
     8c6:	7011      	strb	r1, [r2, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8c8:	2180      	movs	r1, #128	; 0x80
     8ca:	0389      	lsls	r1, r1, #14
     8cc:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ce:	7811      	ldrb	r1, [r2, #0]
     8d0:	43a1      	bics	r1, r4
     8d2:	7011      	strb	r1, [r2, #0]
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8d4:	7811      	ldrb	r1, [r2, #0]
     8d6:	4301      	orrs	r1, r0
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8d8:	0018      	movs	r0, r3
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8da:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8dc:	3056      	adds	r0, #86	; 0x56
     8de:	7802      	ldrb	r2, [r0, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8e0:	0019      	movs	r1, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e2:	43a2      	bics	r2, r4
     8e4:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8e6:	2280      	movs	r2, #128	; 0x80
     8e8:	03d2      	lsls	r2, r2, #15
     8ea:	609a      	str	r2, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8ec:	313b      	adds	r1, #59	; 0x3b
     8ee:	780a      	ldrb	r2, [r1, #0]
     8f0:	43b2      	bics	r2, r6
     8f2:	432a      	orrs	r2, r5
     8f4:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8f6:	7802      	ldrb	r2, [r0, #0]
     8f8:	4322      	orrs	r2, r4
     8fa:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8fc:	001a      	movs	r2, r3
     8fe:	3257      	adds	r2, #87	; 0x57
     900:	7810      	ldrb	r0, [r2, #0]
     902:	43a0      	bics	r0, r4
     904:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     906:	7810      	ldrb	r0, [r2, #0]
     908:	4328      	orrs	r0, r5
     90a:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     90c:	2080      	movs	r0, #128	; 0x80
     90e:	0400      	lsls	r0, r0, #16
     910:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     912:	2020      	movs	r0, #32
     914:	780b      	ldrb	r3, [r1, #0]
     916:	4033      	ands	r3, r6
     918:	4303      	orrs	r3, r0
     91a:	700b      	strb	r3, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     91c:	7813      	ldrb	r3, [r2, #0]
    pinOut(TxPo);
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);
	
	delay_ms(200);
     91e:	30a8      	adds	r0, #168	; 0xa8
     920:	4323      	orrs	r3, r4
     922:	7013      	strb	r3, [r2, #0]
     924:	4b24      	ldr	r3, [pc, #144]	; (9b8 <init+0x420>)
     926:	4798      	blx	r3

    sercomClockEnable(SPI2, 3, 4);
     928:	4f24      	ldr	r7, [pc, #144]	; (9bc <init+0x424>)
     92a:	0028      	movs	r0, r5
     92c:	2204      	movs	r2, #4
     92e:	2103      	movs	r1, #3
     930:	47b8      	blx	r7
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 0x00);
     932:	2300      	movs	r3, #0
     934:	4e22      	ldr	r6, [pc, #136]	; (9c0 <init+0x428>)
     936:	9301      	str	r3, [sp, #4]
     938:	9300      	str	r3, [sp, #0]
     93a:	0021      	movs	r1, r4
     93c:	0028      	movs	r0, r5
     93e:	2203      	movs	r2, #3
     940:	47b0      	blx	r6

    sercomClockEnable(SPI0, 3, 4);
     942:	2204      	movs	r2, #4
     944:	2103      	movs	r1, #3
     946:	2000      	movs	r0, #0
     948:	47b8      	blx	r7
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     94a:	2300      	movs	r3, #0
     94c:	2103      	movs	r1, #3
     94e:	9301      	str	r3, [sp, #4]
     950:	9300      	str	r3, [sp, #0]
     952:	001a      	movs	r2, r3
     954:	0018      	movs	r0, r3
     956:	47b0      	blx	r6

    sercomClockEnable(SPI1, 3, 4);
     958:	0020      	movs	r0, r4
     95a:	2204      	movs	r2, #4
     95c:	2103      	movs	r1, #3
     95e:	47b8      	blx	r7
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     960:	2300      	movs	r3, #0
     962:	0020      	movs	r0, r4
     964:	9301      	str	r3, [sp, #4]
     966:	9300      	str	r3, [sp, #0]
     968:	001a      	movs	r2, r3
     96a:	2103      	movs	r1, #3
     96c:	47b0      	blx	r6

    sercomClockEnable(USART3, 4, 8);
     96e:	2208      	movs	r2, #8
     970:	2104      	movs	r1, #4
     972:	2003      	movs	r0, #3
     974:	47b8      	blx	r7
    sercomUartInit(USART3,1,0,19200);
     976:	2396      	movs	r3, #150	; 0x96
     978:	0021      	movs	r1, r4
     97a:	2200      	movs	r2, #0
     97c:	2003      	movs	r0, #3
     97e:	01db      	lsls	r3, r3, #7
     980:	4c10      	ldr	r4, [pc, #64]	; (9c4 <init+0x42c>)
     982:	47a0      	blx	r4

    TC4Init();
     984:	4b10      	ldr	r3, [pc, #64]	; (9c8 <init+0x430>)
     986:	4798      	blx	r3
    TC5Init();
     988:	4b10      	ldr	r3, [pc, #64]	; (9cc <init+0x434>)
     98a:	4798      	blx	r3
}
     98c:	b005      	add	sp, #20
     98e:	e01f      	b.n	9d0 <init+0x438>
     990:	41004000 	.word	0x41004000
     994:	40000400 	.word	0x40000400
     998:	000001d5 	.word	0x000001d5
     99c:	00001005 	.word	0x00001005
     9a0:	00000f05 	.word	0x00000f05
     9a4:	00001079 	.word	0x00001079
     9a8:	00000d25 	.word	0x00000d25
     9ac:	41004400 	.word	0x41004400
     9b0:	41004488 	.word	0x41004488
     9b4:	200002b4 	.word	0x200002b4
     9b8:	000010d9 	.word	0x000010d9
     9bc:	00002b5d 	.word	0x00002b5d
     9c0:	00002bc1 	.word	0x00002bc1
     9c4:	00002c25 	.word	0x00002c25
     9c8:	00001159 	.word	0x00001159
     9cc:	000011c1 	.word	0x000011c1
     9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9d2:	46c0      	nop			; (mov r8, r8)

000009d4 <main>:


int main(void) {
     9d4:	b510      	push	{r4, lr}

    init();
     9d6:	4b11      	ldr	r3, [pc, #68]	; (a1c <main+0x48>)
     9d8:	4798      	blx	r3

    initMS5803Barometer();
     9da:	4b11      	ldr	r3, [pc, #68]	; (a20 <main+0x4c>)
     9dc:	4798      	blx	r3
    IMUinit();
     9de:	4b11      	ldr	r3, [pc, #68]	; (a24 <main+0x50>)
     9e0:	4798      	blx	r3

    computeKalmanGains();
     9e2:	4b11      	ldr	r3, [pc, #68]	; (a28 <main+0x54>)
     9e4:	4798      	blx	r3

    sampleTick();
     9e6:	4c11      	ldr	r4, [pc, #68]	; (a2c <main+0x58>)
     9e8:	47a0      	blx	r4

    POST();
     9ea:	4b11      	ldr	r3, [pc, #68]	; (a30 <main+0x5c>)
     9ec:	4798      	blx	r3

    //isItPointingUp();

    getSettings();
     9ee:	4b11      	ldr	r3, [pc, #68]	; (a34 <main+0x60>)
     9f0:	4798      	blx	r3

    //beepNumber(12345);


    beep(800);
     9f2:	20c8      	movs	r0, #200	; 0xc8
     9f4:	4b10      	ldr	r3, [pc, #64]	; (a38 <main+0x64>)
     9f6:	0080      	lsls	r0, r0, #2
     9f8:	4798      	blx	r3

    startupTick = millis();
     9fa:	4b10      	ldr	r3, [pc, #64]	; (a3c <main+0x68>)
     9fc:	4798      	blx	r3
     9fe:	4b10      	ldr	r3, [pc, #64]	; (a40 <main+0x6c>)
     a00:	6018      	str	r0, [r3, #0]

    while (1) {
        if (takeSample()) {
     a02:	4b10      	ldr	r3, [pc, #64]	; (a44 <main+0x70>)
     a04:	4798      	blx	r3
     a06:	2800      	cmp	r0, #0
     a08:	d0fb      	beq.n	a02 <main+0x2e>
            sampleTick();
     a0a:	47a0      	blx	r4
            flight();
     a0c:	4b0e      	ldr	r3, [pc, #56]	; (a48 <main+0x74>)
     a0e:	4798      	blx	r3
            igniterTick();
     a10:	4b0e      	ldr	r3, [pc, #56]	; (a4c <main+0x78>)
     a12:	4798      	blx	r3
            computeKalmanStates();
     a14:	4b0e      	ldr	r3, [pc, #56]	; (a50 <main+0x7c>)
     a16:	4798      	blx	r3
     a18:	e7f3      	b.n	a02 <main+0x2e>
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	00000599 	.word	0x00000599
     a20:	00000559 	.word	0x00000559
     a24:	00000a6d 	.word	0x00000a6d
     a28:	000016bd 	.word	0x000016bd
     a2c:	00002821 	.word	0x00002821
     a30:	00000c2d 	.word	0x00000c2d
     a34:	00002dcd 	.word	0x00002dcd
     a38:	00000e09 	.word	0x00000e09
     a3c:	00001125 	.word	0x00001125
     a40:	2000015c 	.word	0x2000015c
     a44:	00002809 	.word	0x00002809
     a48:	00001229 	.word	0x00001229
     a4c:	00001531 	.word	0x00001531
     a50:	00002249 	.word	0x00002249

00000a54 <HardFault_Handler>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
     a54:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
     a58:	4a02      	ldr	r2, [pc, #8]	; (a64 <HardFault_Handler+0x10>)
     a5a:	4b03      	ldr	r3, [pc, #12]	; (a68 <HardFault_Handler+0x14>)
     a5c:	60da      	str	r2, [r3, #12]
     a5e:	f3bf 8f4f 	dsb	sy
     a62:	e7fe      	b.n	a62 <HardFault_Handler+0xe>
     a64:	05fa0004 	.word	0x05fa0004
     a68:	e000ed00 	.word	0xe000ed00

00000a6c <IMUinit>:
extern uint32_t _ezero;
extern uint32_t _sstack;
extern uint32_t _estack;


void IMUinit() {
     a6c:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a6e:	4c08      	ldr	r4, [pc, #32]	; (a90 <IMUinit+0x24>)
     a70:	2580      	movs	r5, #128	; 0x80
     a72:	0023      	movs	r3, r4
     a74:	00ed      	lsls	r5, r5, #3
     a76:	3394      	adds	r3, #148	; 0x94
     a78:	601d      	str	r5, [r3, #0]

    pinLow(cs_accel);
    spiDataOut(SPI0, BMI_ACCEL_PMU_RANGE);
     a7a:	4e06      	ldr	r6, [pc, #24]	; (a94 <IMUinit+0x28>)
     a7c:	210f      	movs	r1, #15
     a7e:	2000      	movs	r0, #0
     a80:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a82:	3498      	adds	r4, #152	; 0x98
    spiDataOut(SPI0, BMI_ACCEL_16G_RANGE);
     a84:	210c      	movs	r1, #12
     a86:	2000      	movs	r0, #0
     a88:	47b0      	blx	r6
     a8a:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     a8c:	bd70      	pop	{r4, r5, r6, pc}
     a8e:	46c0      	nop			; (mov r8, r8)
     a90:	41004400 	.word	0x41004400
     a94:	00002c85 	.word	0x00002c85

00000a98 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     a98:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     a9a:	4b09      	ldr	r3, [pc, #36]	; (ac0 <USARTconnectionAvaliable+0x28>)
     a9c:	7e1c      	ldrb	r4, [r3, #24]
     a9e:	0764      	lsls	r4, r4, #29
     aa0:	0fe4      	lsrs	r4, r4, #31
     aa2:	2c01      	cmp	r4, #1
     aa4:	d001      	beq.n	aaa <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     aa6:	2000      	movs	r0, #0
     aa8:	e009      	b.n	abe <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     aaa:	2003      	movs	r0, #3
     aac:	4b05      	ldr	r3, [pc, #20]	; (ac4 <USARTconnectionAvaliable+0x2c>)
     aae:	4798      	blx	r3
     ab0:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     ab2:	2948      	cmp	r1, #72	; 0x48
     ab4:	d1f7      	bne.n	aa6 <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     ab6:	2003      	movs	r0, #3
     ab8:	4b03      	ldr	r3, [pc, #12]	; (ac8 <USARTconnectionAvaliable+0x30>)
     aba:	4798      	blx	r3
            return true;
     abc:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     abe:	bd10      	pop	{r4, pc}
     ac0:	42001400 	.word	0x42001400
     ac4:	00002cd1 	.word	0x00002cd1
     ac8:	00002cb9 	.word	0x00002cb9

00000acc <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     acc:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ace:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ad0:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ad2:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     ad4:	1a09      	subs	r1, r1, r0
     ad6:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ad8:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     ada:	b28b      	uxth	r3, r1
     adc:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ade:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     ae0:	a902      	add	r1, sp, #8
     ae2:	0028      	movs	r0, r5
     ae4:	4b09      	ldr	r3, [pc, #36]	; (b0c <sendTheasePagesToComputer+0x40>)
     ae6:	4798      	blx	r3
     ae8:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     aea:	ab02      	add	r3, sp, #8
     aec:	5d99      	ldrb	r1, [r3, r6]
     aee:	2003      	movs	r0, #3
     af0:	4b07      	ldr	r3, [pc, #28]	; (b10 <sendTheasePagesToComputer+0x44>)
     af2:	3601      	adds	r6, #1
     af4:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     af6:	42be      	cmp	r6, r7
     af8:	d1f7      	bne.n	aea <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     afa:	3401      	adds	r4, #1
     afc:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     afe:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b00:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b02:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b04:	42a3      	cmp	r3, r4
     b06:	d2eb      	bcs.n	ae0 <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     b08:	b043      	add	sp, #268	; 0x10c
     b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b0c:	0000035d 	.word	0x0000035d
     b10:	00002cb9 	.word	0x00002cb9

00000b14 <altitudeAGL>:

int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
     b14:	4b07      	ldr	r3, [pc, #28]	; (b34 <altitudeAGL+0x20>)

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}

int32_t altitudeAGL() {
     b16:	b510      	push	{r4, lr}
    return altitude - offsets.groundOffset;
     b18:	6998      	ldr	r0, [r3, #24]
     b1a:	4b07      	ldr	r3, [pc, #28]	; (b38 <altitudeAGL+0x24>)
     b1c:	4798      	blx	r3
     b1e:	000b      	movs	r3, r1
     b20:	4906      	ldr	r1, [pc, #24]	; (b3c <altitudeAGL+0x28>)
     b22:	0002      	movs	r2, r0
     b24:	6808      	ldr	r0, [r1, #0]
     b26:	6849      	ldr	r1, [r1, #4]
     b28:	4c05      	ldr	r4, [pc, #20]	; (b40 <altitudeAGL+0x2c>)
     b2a:	47a0      	blx	r4
     b2c:	4b05      	ldr	r3, [pc, #20]	; (b44 <altitudeAGL+0x30>)
     b2e:	4798      	blx	r3
}
     b30:	bd10      	pop	{r4, pc}
     b32:	46c0      	nop			; (mov r8, r8)
     b34:	20000108 	.word	0x20000108
     b38:	000061e5 	.word	0x000061e5
     b3c:	200002e8 	.word	0x200002e8
     b40:	00005a0d 	.word	0x00005a0d
     b44:	000060f5 	.word	0x000060f5

00000b48 <unplugged>:


bool unplugged() {
    if (sample.voltage.batFloat < 3.3) {
     b48:	4b07      	ldr	r3, [pc, #28]	; (b68 <unplugged+0x20>)
int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
}


bool unplugged() {
     b4a:	b570      	push	{r4, r5, r6, lr}
     b4c:	68d8      	ldr	r0, [r3, #12]
     b4e:	4b07      	ldr	r3, [pc, #28]	; (b6c <unplugged+0x24>)
     b50:	4798      	blx	r3
     b52:	4a07      	ldr	r2, [pc, #28]	; (b70 <unplugged+0x28>)
     b54:	4b07      	ldr	r3, [pc, #28]	; (b74 <unplugged+0x2c>)
     b56:	4d08      	ldr	r5, [pc, #32]	; (b78 <unplugged+0x30>)
     b58:	2401      	movs	r4, #1
     b5a:	47a8      	blx	r5
     b5c:	2800      	cmp	r0, #0
     b5e:	d100      	bne.n	b62 <unplugged+0x1a>
     b60:	1c04      	adds	r4, r0, #0
     b62:	b2e0      	uxtb	r0, r4
    if (sample.voltage.batFloat < 3.3) {
        return true;
    } else {
        return false;
    }
}
     b64:	bd70      	pop	{r4, r5, r6, pc}
     b66:	46c0      	nop			; (mov r8, r8)
     b68:	20000540 	.word	0x20000540
     b6c:	00006255 	.word	0x00006255
     b70:	66666666 	.word	0x66666666
     b74:	400a6666 	.word	0x400a6666
     b78:	00004329 	.word	0x00004329

00000b7c <shutDown>:

void shutDown() {
     b7c:	b510      	push	{r4, lr}


    delay_ms(100);
     b7e:	2064      	movs	r0, #100	; 0x64
     b80:	4b14      	ldr	r3, [pc, #80]	; (bd4 <shutDown+0x58>)
     b82:	4798      	blx	r3
    TC4->COUNT8.CTRLA.reg = 0;
     b84:	2300      	movs	r3, #0

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     b86:	2180      	movs	r1, #128	; 0x80
     b88:	4a13      	ldr	r2, [pc, #76]	; (bd8 <shutDown+0x5c>)
     b8a:	0309      	lsls	r1, r1, #12
     b8c:	8013      	strh	r3, [r2, #0]
    TC5->COUNT8.CTRLA.reg = 0;
     b8e:	4a13      	ldr	r2, [pc, #76]	; (bdc <shutDown+0x60>)
     b90:	2480      	movs	r4, #128	; 0x80
     b92:	8013      	strh	r3, [r2, #0]
     b94:	4a12      	ldr	r2, [pc, #72]	; (be0 <shutDown+0x64>)
    NVIC_DisableIRQ(TC4_IRQn);
    NVIC_DisableIRQ(TC5_IRQn);
    NVIC_DisableIRQ(RTC_IRQn);
    RTC->MODE1.CTRL.bit.ENABLE = 0;
     b96:	2002      	movs	r0, #2
     b98:	67d1      	str	r1, [r2, #124]	; 0x7c
     b9a:	2108      	movs	r1, #8
     b9c:	0364      	lsls	r4, r4, #13
     b9e:	67d4      	str	r4, [r2, #124]	; 0x7c
     ba0:	67d1      	str	r1, [r2, #124]	; 0x7c
     ba2:	4a10      	ldr	r2, [pc, #64]	; (be4 <shutDown+0x68>)
     ba4:	8811      	ldrh	r1, [r2, #0]
     ba6:	4381      	bics	r1, r0
     ba8:	8011      	strh	r1, [r2, #0]
    SysTick->CTRL = 0;
     baa:	4a0f      	ldr	r2, [pc, #60]	; (be8 <shutDown+0x6c>)
     bac:	6013      	str	r3, [r2, #0]
	PM->APBAMASK.reg = 0;
     bae:	4a0f      	ldr	r2, [pc, #60]	; (bec <shutDown+0x70>)
     bb0:	6193      	str	r3, [r2, #24]

	//turn off sercom clocks
	//GCLK->CLKCTRL.reg

     GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     bb2:	2280      	movs	r2, #128	; 0x80
     bb4:	4b0e      	ldr	r3, [pc, #56]	; (bf0 <shutDown+0x74>)
     bb6:	0052      	lsls	r2, r2, #1
     bb8:	609a      	str	r2, [r3, #8]
     GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_OSC8M) | (GCLK_GENCTRL_GENEN));
     bba:	2283      	movs	r2, #131	; 0x83
     bbc:	0252      	lsls	r2, r2, #9
     bbe:	605a      	str	r2, [r3, #4]
     bc0:	4b0c      	ldr	r3, [pc, #48]	; (bf4 <shutDown+0x78>)
//     NVMCTRL->CTRLB.bit.MANW = 1;
// 
//     /* Initialize the C library */
//     __libc_init_array();

SYSCTRL->BOD33.reg = SYSCTRL_BOD33_PSEL_DIV8 | SYSCTRL_BOD33_ACTION_RESET | SYSCTRL_BOD33_LEVEL(60);
     bc2:	4a0d      	ldr	r2, [pc, #52]	; (bf8 <shutDown+0x7c>)
     bc4:	619c      	str	r4, [r3, #24]
     bc6:	4b0d      	ldr	r3, [pc, #52]	; (bfc <shutDown+0x80>)
     bc8:	635a      	str	r2, [r3, #52]	; 0x34

SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
     bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
     bcc:	4302      	orrs	r2, r0
     bce:	635a      	str	r2, [r3, #52]	; 0x34
     bd0:	e7fe      	b.n	bd0 <shutDown+0x54>
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	000010d9 	.word	0x000010d9
     bd8:	42003000 	.word	0x42003000
     bdc:	42003400 	.word	0x42003400
     be0:	e000e104 	.word	0xe000e104
     be4:	40001400 	.word	0x40001400
     be8:	e000e010 	.word	0xe000e010
     bec:	40000400 	.word	0x40000400
     bf0:	40000c00 	.word	0x40000c00
     bf4:	41004400 	.word	0x41004400
     bf8:	003c2008 	.word	0x003c2008
     bfc:	40000800 	.word	0x40000800

00000c00 <finishFlight>:
    }
}

void finishFlight() {

    flightState = flightIdle;
     c00:	2201      	movs	r2, #1
     c02:	4b05      	ldr	r3, [pc, #20]	; (c18 <finishFlight+0x18>)
    while(1) {

    }
}

void finishFlight() {
     c04:	b510      	push	{r4, lr}

    flightState = flightIdle;
     c06:	701a      	strb	r2, [r3, #0]
    AT25SFHoldTillReady();
     c08:	4b04      	ldr	r3, [pc, #16]	; (c1c <finishFlight+0x1c>)
     c0a:	4798      	blx	r3
    writeFlightEndAddress( );
     c0c:	4b04      	ldr	r3, [pc, #16]	; (c20 <finishFlight+0x20>)
     c0e:	4798      	blx	r3
    unpluggedJingle();
     c10:	4b04      	ldr	r3, [pc, #16]	; (c24 <finishFlight+0x24>)
     c12:	4798      	blx	r3
    shutDown();
     c14:	4b04      	ldr	r3, [pc, #16]	; (c28 <finishFlight+0x28>)
     c16:	4798      	blx	r3
     c18:	2000016c 	.word	0x2000016c
     c1c:	000001e5 	.word	0x000001e5
     c20:	000026c5 	.word	0x000026c5
     c24:	00000e7d 	.word	0x00000e7d
     c28:	00000b7d 	.word	0x00000b7d

00000c2c <POST>:

}


void POST() {
     c2c:	b5f0      	push	{r4, r5, r6, r7, lr}

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     c2e:	4b32      	ldr	r3, [pc, #200]	; (cf8 <POST+0xcc>)
    shutDown();

}


void POST() {
     c30:	b085      	sub	sp, #20

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     c32:	4798      	blx	r3
    if (crc != coefficients_[7]) {
     c34:	4b31      	ldr	r3, [pc, #196]	; (cfc <POST+0xd0>)
     c36:	b280      	uxth	r0, r0
     c38:	89db      	ldrh	r3, [r3, #14]
        postFailed = true;
        failType = 1;
     c3a:	2401      	movs	r4, #1
    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
    if (crc != coefficients_[7]) {
     c3c:	4283      	cmp	r3, r0
     c3e:	d100      	bne.n	c42 <POST+0x16>

void POST() {
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
    u8_t failType = 0;
     c40:	2400      	movs	r4, #0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c42:	2780      	movs	r7, #128	; 0x80
     c44:	4d2e      	ldr	r5, [pc, #184]	; (d00 <POST+0xd4>)
     c46:	02ff      	lsls	r7, r7, #11
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    spiDataOut(SPI1,0x9f); // read id and mfg code
     c48:	219f      	movs	r1, #159	; 0x9f
     c4a:	4b2e      	ldr	r3, [pc, #184]	; (d04 <POST+0xd8>)


void POST() {
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
     c4c:	9401      	str	r4, [sp, #4]
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    spiDataOut(SPI1,0x9f); // read id and mfg code
     c4e:	2001      	movs	r0, #1
     c50:	616f      	str	r7, [r5, #20]
     c52:	4798      	blx	r3
    u8_t mfgID = spiDataIn(SPI1);
     c54:	4e2c      	ldr	r6, [pc, #176]	; (d08 <POST+0xdc>)
     c56:	2001      	movs	r0, #1
     c58:	47b0      	blx	r6
     c5a:	9002      	str	r0, [sp, #8]
    u8_t deviceID1 = spiDataIn(SPI1);
     c5c:	2001      	movs	r0, #1
     c5e:	47b0      	blx	r6
     c60:	9003      	str	r0, [sp, #12]
    u8_t deviceID2 = spiDataIn(SPI1);
     c62:	2001      	movs	r0, #1
     c64:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c66:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    if ( (mfgID != 0x1f) & (deviceID1 != 0x86) & (deviceID2 != 0x01)) {
     c68:	9b02      	ldr	r3, [sp, #8]
     c6a:	3b1f      	subs	r3, #31
     c6c:	1e5a      	subs	r2, r3, #1
     c6e:	4193      	sbcs	r3, r2
     c70:	0019      	movs	r1, r3
     c72:	9b03      	ldr	r3, [sp, #12]
     c74:	3b86      	subs	r3, #134	; 0x86
     c76:	1e5a      	subs	r2, r3, #1
     c78:	4193      	sbcs	r3, r2
     c7a:	4a22      	ldr	r2, [pc, #136]	; (d04 <POST+0xd8>)
     c7c:	9202      	str	r2, [sp, #8]
     c7e:	420b      	tst	r3, r1
     c80:	d004      	beq.n	c8c <POST+0x60>
     c82:	2801      	cmp	r0, #1
     c84:	d002      	beq.n	c8c <POST+0x60>
        postFailed = true;
     c86:	2301      	movs	r3, #1
        failType = 2;
     c88:	2402      	movs	r4, #2
    u8_t deviceID1 = spiDataIn(SPI1);
    u8_t deviceID2 = spiDataIn(SPI1);
    pinHigh(cs_mem);

    if ( (mfgID != 0x1f) & (deviceID1 != 0x86) & (deviceID2 != 0x01)) {
        postFailed = true;
     c8a:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c8c:	2780      	movs	r7, #128	; 0x80
     c8e:	4b1f      	ldr	r3, [pc, #124]	; (d0c <POST+0xe0>)
     c90:	00ff      	lsls	r7, r7, #3
     c92:	601f      	str	r7, [r3, #0]
        failType = 2;
    }

    //Accelerometer Post
    pinLow(cs_accel);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     c94:	9b02      	ldr	r3, [sp, #8]
     c96:	2180      	movs	r1, #128	; 0x80
     c98:	2000      	movs	r0, #0
     c9a:	4798      	blx	r3
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
     c9c:	21ff      	movs	r1, #255	; 0xff
     c9e:	2000      	movs	r0, #0
     ca0:	4e1b      	ldr	r6, [pc, #108]	; (d10 <POST+0xe4>)
     ca2:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ca4:	4b1b      	ldr	r3, [pc, #108]	; (d14 <POST+0xe8>)
     ca6:	601f      	str	r7, [r3, #0]
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
     ca8:	28fa      	cmp	r0, #250	; 0xfa
     caa:	d002      	beq.n	cb2 <POST+0x86>
        postFailed = true;
     cac:	2301      	movs	r3, #1
        failType = 3;
     cae:	2403      	movs	r4, #3
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
        postFailed = true;
     cb0:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cb2:	616f      	str	r7, [r5, #20]
        failType = 3;
    }

    //Gyro Post
    pinLow(cs_gyro);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     cb4:	2180      	movs	r1, #128	; 0x80
     cb6:	2000      	movs	r0, #0
     cb8:	9b02      	ldr	r3, [sp, #8]
     cba:	4798      	blx	r3
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
     cbc:	21ff      	movs	r1, #255	; 0xff
     cbe:	2000      	movs	r0, #0
     cc0:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cc2:	61af      	str	r7, [r5, #24]
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
     cc4:	280f      	cmp	r0, #15
     cc6:	d103      	bne.n	cd0 <POST+0xa4>
    }

    //Analog Accelerometer Post


    if (postFailed) {
     cc8:	9b01      	ldr	r3, [sp, #4]
     cca:	2b00      	cmp	r3, #0
     ccc:	d101      	bne.n	cd2 <POST+0xa6>
     cce:	e011      	b.n	cf4 <POST+0xc8>
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
        postFailed = true;
        failType = 4;
     cd0:	2404      	movs	r4, #4

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     cd2:	0025      	movs	r5, r4
     cd4:	4e10      	ldr	r6, [pc, #64]	; (d18 <POST+0xec>)
     cd6:	2d00      	cmp	r5, #0
     cd8:	d009      	beq.n	cee <POST+0xc2>
                beep(300);
     cda:	2096      	movs	r0, #150	; 0x96
     cdc:	4b0f      	ldr	r3, [pc, #60]	; (d1c <POST+0xf0>)
     cde:	0040      	lsls	r0, r0, #1
     ce0:	4798      	blx	r3
                delay_ms(300);
     ce2:	2096      	movs	r0, #150	; 0x96

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     ce4:	3d01      	subs	r5, #1
                beep(300);
                delay_ms(300);
     ce6:	0040      	lsls	r0, r0, #1
     ce8:	47b0      	blx	r6

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     cea:	b2ed      	uxtb	r5, r5
     cec:	e7f2      	b.n	cd4 <POST+0xa8>
                beep(300);
                delay_ms(300);
            }
            delay_ms(1500);
     cee:	480c      	ldr	r0, [pc, #48]	; (d20 <POST+0xf4>)
     cf0:	47b0      	blx	r6
        }
     cf2:	e7ee      	b.n	cd2 <POST+0xa6>
    }
}
     cf4:	b005      	add	sp, #20
     cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cf8:	00000589 	.word	0x00000589
     cfc:	2000026e 	.word	0x2000026e
     d00:	41004400 	.word	0x41004400
     d04:	00002c85 	.word	0x00002c85
     d08:	00002c9d 	.word	0x00002c9d
     d0c:	41004494 	.word	0x41004494
     d10:	00002c6d 	.word	0x00002c6d
     d14:	41004498 	.word	0x41004498
     d18:	000010d9 	.word	0x000010d9
     d1c:	00000e09 	.word	0x00000e09
     d20:	000005dc 	.word	0x000005dc

00000d24 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     d24:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     d26:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     d28:	4a10      	ldr	r2, [pc, #64]	; (d6c <adcInit+0x48>)
     d2a:	0249      	lsls	r1, r1, #9
     d2c:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     d2e:	4810      	ldr	r0, [pc, #64]	; (d70 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     d30:	430b      	orrs	r3, r1
     d32:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     d34:	23e0      	movs	r3, #224	; 0xe0
     d36:	490f      	ldr	r1, [pc, #60]	; (d74 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     d38:	4a0f      	ldr	r2, [pc, #60]	; (d78 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     d3a:	00db      	lsls	r3, r3, #3
     d3c:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     d3e:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     d40:	4a0e      	ldr	r2, [pc, #56]	; (d7c <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     d42:	6812      	ldr	r2, [r2, #0]
     d44:	0150      	lsls	r0, r2, #5
     d46:	4018      	ands	r0, r3
     d48:	4b0d      	ldr	r3, [pc, #52]	; (d80 <adcInit+0x5c>)
     d4a:	0154      	lsls	r4, r2, #5
     d4c:	681a      	ldr	r2, [r3, #0]
     d4e:	0ed3      	lsrs	r3, r2, #27
     d50:	4323      	orrs	r3, r4
     d52:	b2da      	uxtb	r2, r3
     d54:	0003      	movs	r3, r0
     d56:	4313      	orrs	r3, r2
     d58:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC0;
     d5a:	2301      	movs	r3, #1
     d5c:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     d5e:	18db      	adds	r3, r3, r3
     d60:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     d62:	7e4b      	ldrb	r3, [r1, #25]
     d64:	b25b      	sxtb	r3, r3
     d66:	2b00      	cmp	r3, #0
     d68:	dbfb      	blt.n	d62 <adcInit+0x3e>
}
     d6a:	bd10      	pop	{r4, pc}
     d6c:	40000400 	.word	0x40000400
     d70:	0000401e 	.word	0x0000401e
     d74:	42004000 	.word	0x42004000
     d78:	40000c00 	.word	0x40000c00
     d7c:	00806024 	.word	0x00806024
     d80:	00806020 	.word	0x00806020

00000d84 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     d84:	2202      	movs	r2, #2
     d86:	4b05      	ldr	r3, [pc, #20]	; (d9c <adcSample+0x18>)
     d88:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     d8a:	3a01      	subs	r2, #1
     d8c:	7e19      	ldrb	r1, [r3, #24]
     d8e:	4211      	tst	r1, r2
     d90:	d0fc      	beq.n	d8c <adcSample+0x8>
    return ADC->RESULT.reg;
     d92:	4b02      	ldr	r3, [pc, #8]	; (d9c <adcSample+0x18>)
     d94:	8b58      	ldrh	r0, [r3, #26]
     d96:	b280      	uxth	r0, r0
}
     d98:	4770      	bx	lr
     d9a:	46c0      	nop			; (mov r8, r8)
     d9c:	42004000 	.word	0x42004000

00000da0 <adc_read>:


u16_t adc_read(Pin p) {
     da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     da2:	2501      	movs	r5, #1
     da4:	0c02      	lsrs	r2, r0, #16
     da6:	b2d4      	uxtb	r4, r2
     da8:	9000      	str	r0, [sp, #0]
     daa:	0e00      	lsrs	r0, r0, #24
     dac:	9101      	str	r1, [sp, #4]
     dae:	0842      	lsrs	r2, r0, #1
     db0:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     db2:	4911      	ldr	r1, [pc, #68]	; (df8 <adc_read+0x58>)
     db4:	18d2      	adds	r2, r2, r3
     db6:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     db8:	4228      	tst	r0, r5
     dba:	d005      	beq.n	dc8 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     dbc:	210f      	movs	r1, #15
     dbe:	7814      	ldrb	r4, [r2, #0]
     dc0:	4021      	ands	r1, r4
     dc2:	2410      	movs	r4, #16
     dc4:	4321      	orrs	r1, r4
     dc6:	e003      	b.n	dd0 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     dc8:	240f      	movs	r4, #15
     dca:	7811      	ldrb	r1, [r2, #0]
     dcc:	43a1      	bics	r1, r4
     dce:	4329      	orrs	r1, r5
     dd0:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     dd2:	2101      	movs	r1, #1
     dd4:	4a09      	ldr	r2, [pc, #36]	; (dfc <adc_read+0x5c>)
     dd6:	18c3      	adds	r3, r0, r3
     dd8:	189b      	adds	r3, r3, r2
     dda:	781a      	ldrb	r2, [r3, #0]
     ddc:	430a      	orrs	r2, r1
     dde:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     de0:	466b      	mov	r3, sp
     de2:	791a      	ldrb	r2, [r3, #4]
     de4:	231f      	movs	r3, #31
     de6:	4013      	ands	r3, r2
     de8:	22c0      	movs	r2, #192	; 0xc0
     dea:	0152      	lsls	r2, r2, #5
     dec:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     dee:	4a04      	ldr	r2, [pc, #16]	; (e00 <adc_read+0x60>)
     df0:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     df2:	4b04      	ldr	r3, [pc, #16]	; (e04 <adc_read+0x64>)
     df4:	4798      	blx	r3
     df6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     df8:	41004430 	.word	0x41004430
     dfc:	41004440 	.word	0x41004440
     e00:	42004000 	.word	0x42004000
     e04:	00000d85 	.word	0x00000d85

00000e08 <beep>:
#include <util.h>
#include <boardDefines.h>
#include <math.h>


void beep(u16_t toggles) {
     e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     e0a:	2380      	movs	r3, #128	; 0x80
     e0c:	2780      	movs	r7, #128	; 0x80
     e0e:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     e10:	2500      	movs	r5, #0
     e12:	4c0a      	ldr	r4, [pc, #40]	; (e3c <beep+0x34>)
     e14:	035b      	lsls	r3, r3, #13
     e16:	61e3      	str	r3, [r4, #28]
     e18:	03bf      	lsls	r7, r7, #14
     e1a:	42b5      	cmp	r5, r6
     e1c:	d006      	beq.n	e2c <beep+0x24>
     e1e:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     e20:	207a      	movs	r0, #122	; 0x7a
     e22:	4b07      	ldr	r3, [pc, #28]	; (e40 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     e24:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     e26:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     e28:	b2ad      	uxth	r5, r5
     e2a:	e7f6      	b.n	e1a <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e2c:	2380      	movs	r3, #128	; 0x80
     e2e:	039b      	lsls	r3, r3, #14
     e30:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     e32:	2380      	movs	r3, #128	; 0x80
     e34:	035b      	lsls	r3, r3, #13
     e36:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	41004400 	.word	0x41004400
     e40:	000010a5 	.word	0x000010a5

00000e44 <startupJingle>:
    }
    beepDigit(number);

}

void startupJingle() {
     e44:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     e46:	2696      	movs	r6, #150	; 0x96
     e48:	0076      	lsls	r6, r6, #1
     e4a:	4d0a      	ldr	r5, [pc, #40]	; (e74 <startupJingle+0x30>)
     e4c:	0030      	movs	r0, r6
     e4e:	47a8      	blx	r5
    delay_ms(80);
     e50:	4c09      	ldr	r4, [pc, #36]	; (e78 <startupJingle+0x34>)
     e52:	2050      	movs	r0, #80	; 0x50
     e54:	47a0      	blx	r4
    beep(300);
     e56:	0030      	movs	r0, r6
     e58:	47a8      	blx	r5
    delay_ms(250);
     e5a:	20fa      	movs	r0, #250	; 0xfa
     e5c:	47a0      	blx	r4
    beep(300);
     e5e:	0030      	movs	r0, r6
     e60:	47a8      	blx	r5
    delay_ms(80);
     e62:	2050      	movs	r0, #80	; 0x50
     e64:	47a0      	blx	r4
    beep(300);
     e66:	0030      	movs	r0, r6
     e68:	47a8      	blx	r5
    delay_ms(500);
     e6a:	20fa      	movs	r0, #250	; 0xfa
     e6c:	0040      	lsls	r0, r0, #1
     e6e:	47a0      	blx	r4
}
     e70:	bd70      	pop	{r4, r5, r6, pc}
     e72:	46c0      	nop			; (mov r8, r8)
     e74:	00000e09 	.word	0x00000e09
     e78:	000010d9 	.word	0x000010d9

00000e7c <unpluggedJingle>:

void unpluggedJingle() {
     e7c:	b570      	push	{r4, r5, r6, lr}
    delay_ms(80);
    beep(300);
     e7e:	2696      	movs	r6, #150	; 0x96
    beep(300);
    delay_ms(500);
}

void unpluggedJingle() {
    delay_ms(80);
     e80:	4c0c      	ldr	r4, [pc, #48]	; (eb4 <unpluggedJingle+0x38>)
    beep(300);
     e82:	0076      	lsls	r6, r6, #1
    beep(300);
    delay_ms(500);
}

void unpluggedJingle() {
    delay_ms(80);
     e84:	2050      	movs	r0, #80	; 0x50
     e86:	47a0      	blx	r4
    beep(300);
     e88:	4d0b      	ldr	r5, [pc, #44]	; (eb8 <unpluggedJingle+0x3c>)
     e8a:	0030      	movs	r0, r6
     e8c:	47a8      	blx	r5
    delay_ms(80);
     e8e:	2050      	movs	r0, #80	; 0x50
     e90:	47a0      	blx	r4
    beep(300);
     e92:	0030      	movs	r0, r6
     e94:	47a8      	blx	r5
    delay_ms(80);
     e96:	2050      	movs	r0, #80	; 0x50
     e98:	47a0      	blx	r4
    beep(300);
     e9a:	0030      	movs	r0, r6
     e9c:	47a8      	blx	r5
    delay_ms(80);
     e9e:	2050      	movs	r0, #80	; 0x50
     ea0:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ea2:	2280      	movs	r2, #128	; 0x80
     ea4:	4b05      	ldr	r3, [pc, #20]	; (ebc <unpluggedJingle+0x40>)
     ea6:	0392      	lsls	r2, r2, #14
     ea8:	615a      	str	r2, [r3, #20]
     eaa:	2280      	movs	r2, #128	; 0x80
     eac:	0352      	lsls	r2, r2, #13
     eae:	615a      	str	r2, [r3, #20]
    pinLow(buzzerPin);
    pinLow(LedPin);

}
     eb0:	bd70      	pop	{r4, r5, r6, pc}
     eb2:	46c0      	nop			; (mov r8, r8)
     eb4:	000010d9 	.word	0x000010d9
     eb8:	00000e09 	.word	0x00000e09
     ebc:	41004400 	.word	0x41004400

00000ec0 <dfll_nvm_val>:
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10

uint32_t dfll_nvm_val() {
    uint32_t coarse = ( *((uint32_t *)(NVMCTRL_OTP4)
     ec0:	4b08      	ldr	r3, [pc, #32]	; (ee4 <dfll_nvm_val+0x24>)
     ec2:	6818      	ldr	r0, [r3, #0]
     ec4:	0e80      	lsrs	r0, r0, #26
                          + (NVM_DFLL_COARSE_POS / 32))
                        >> (NVM_DFLL_COARSE_POS % 32))
                      & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     ec6:	283f      	cmp	r0, #63	; 0x3f
     ec8:	d100      	bne.n	ecc <dfll_nvm_val+0xc>
        coarse = 0x1f;
     eca:	3820      	subs	r0, #32
    }
    uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
                        + (NVM_DFLL_FINE_POS / 32))
                      >> (NVM_DFLL_FINE_POS % 32))
     ecc:	4b06      	ldr	r3, [pc, #24]	; (ee8 <dfll_nvm_val+0x28>)
                    & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     ece:	4a07      	ldr	r2, [pc, #28]	; (eec <dfll_nvm_val+0x2c>)
                        >> (NVM_DFLL_COARSE_POS % 32))
                      & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
     ed0:	681b      	ldr	r3, [r3, #0]
     ed2:	059b      	lsls	r3, r3, #22
     ed4:	0d9b      	lsrs	r3, r3, #22
                        + (NVM_DFLL_FINE_POS / 32))
                      >> (NVM_DFLL_FINE_POS % 32))
                    & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     ed6:	4293      	cmp	r3, r2
     ed8:	d100      	bne.n	edc <dfll_nvm_val+0x1c>
        fine = 0x1ff;
     eda:	4b05      	ldr	r3, [pc, #20]	; (ef0 <dfll_nvm_val+0x30>)
    }

    return SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     edc:	0280      	lsls	r0, r0, #10
     ede:	4318      	orrs	r0, r3
}
     ee0:	4770      	bx	lr
     ee2:	46c0      	nop			; (mov r8, r8)
     ee4:	00806024 	.word	0x00806024
     ee8:	00806028 	.word	0x00806028
     eec:	000003ff 	.word	0x000003ff
     ef0:	000001ff 	.word	0x000001ff

00000ef4 <dfll_wait_for_sync>:

void dfll_wait_for_sync() {
    while (!SYSCTRL->PCLKSR.bit.DFLLRDY);
     ef4:	4a02      	ldr	r2, [pc, #8]	; (f00 <dfll_wait_for_sync+0xc>)
     ef6:	68d3      	ldr	r3, [r2, #12]
     ef8:	06db      	lsls	r3, r3, #27
     efa:	d5fc      	bpl.n	ef6 <dfll_wait_for_sync+0x2>
}
     efc:	4770      	bx	lr
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	40000800 	.word	0x40000800

00000f04 <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     f04:	4b27      	ldr	r3, [pc, #156]	; (fa4 <RtcInit+0xa0>)
     f06:	4a28      	ldr	r2, [pc, #160]	; (fa8 <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     f08:	4828      	ldr	r0, [pc, #160]	; (fac <RtcInit+0xa8>)
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     f0a:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     f0c:	4a28      	ldr	r2, [pc, #160]	; (fb0 <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     f0e:	6999      	ldr	r1, [r3, #24]
     f10:	6812      	ldr	r2, [r2, #0]
     f12:	4001      	ands	r1, r0
     f14:	04d2      	lsls	r2, r2, #19
     f16:	0e52      	lsrs	r2, r2, #25
     f18:	0412      	lsls	r2, r2, #16
     f1a:	4311      	orrs	r1, r2
     f1c:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     f1e:	4925      	ldr	r1, [pc, #148]	; (fb4 <RtcInit+0xb0>)
     f20:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     f22:	6999      	ldr	r1, [r3, #24]
     f24:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     f26:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     f28:	4302      	orrs	r2, r0
     f2a:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     f2c:	699a      	ldr	r2, [r3, #24]
     f2e:	430a      	orrs	r2, r1
     f30:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     f32:	2204      	movs	r2, #4
     f34:	68d9      	ldr	r1, [r3, #12]
     f36:	4211      	tst	r1, r2
     f38:	d0fc      	beq.n	f34 <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     f3a:	2281      	movs	r2, #129	; 0x81
     f3c:	4b1e      	ldr	r3, [pc, #120]	; (fb8 <RtcInit+0xb4>)
     f3e:	0052      	lsls	r2, r2, #1
     f40:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     f42:	4a1e      	ldr	r2, [pc, #120]	; (fbc <RtcInit+0xb8>)
     f44:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     f46:	785a      	ldrb	r2, [r3, #1]
     f48:	b252      	sxtb	r2, r2
     f4a:	2a00      	cmp	r2, #0
     f4c:	dbfb      	blt.n	f46 <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     f4e:	4a1c      	ldr	r2, [pc, #112]	; (fc0 <RtcInit+0xbc>)
     f50:	4b19      	ldr	r3, [pc, #100]	; (fb8 <RtcInit+0xb4>)
     f52:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     f54:	2204      	movs	r2, #4
     f56:	4b1b      	ldr	r3, [pc, #108]	; (fc4 <RtcInit+0xc0>)
     f58:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f5a:	7a9a      	ldrb	r2, [r3, #10]
     f5c:	4919      	ldr	r1, [pc, #100]	; (fc4 <RtcInit+0xc0>)
     f5e:	09d2      	lsrs	r2, r2, #7
     f60:	d1fb      	bne.n	f5a <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     f62:	20a0      	movs	r0, #160	; 0xa0
     f64:	880a      	ldrh	r2, [r1, #0]
     f66:	00c0      	lsls	r0, r0, #3
     f68:	4302      	orrs	r2, r0
     f6a:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f6c:	7a9a      	ldrb	r2, [r3, #10]
     f6e:	09d2      	lsrs	r2, r2, #7
     f70:	d1fc      	bne.n	f6c <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     f72:	4915      	ldr	r1, [pc, #84]	; (fc8 <RtcInit+0xc4>)
     f74:	4a13      	ldr	r2, [pc, #76]	; (fc4 <RtcInit+0xc0>)
     f76:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f78:	7a99      	ldrb	r1, [r3, #10]
     f7a:	4a12      	ldr	r2, [pc, #72]	; (fc4 <RtcInit+0xc0>)
     f7c:	09c9      	lsrs	r1, r1, #7
     f7e:	d1fb      	bne.n	f78 <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     f80:	8851      	ldrh	r1, [r2, #2]
     f82:	4812      	ldr	r0, [pc, #72]	; (fcc <RtcInit+0xc8>)
     f84:	4301      	orrs	r1, r0
     f86:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f88:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f8a:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f8c:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f8e:	8811      	ldrh	r1, [r2, #0]
     f90:	4301      	orrs	r1, r0
     f92:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f94:	7a9a      	ldrb	r2, [r3, #10]
     f96:	09d2      	lsrs	r2, r2, #7
     f98:	d1fc      	bne.n	f94 <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     f9a:	4b0d      	ldr	r3, [pc, #52]	; (fd0 <RtcInit+0xcc>)
     f9c:	3208      	adds	r2, #8
     f9e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     fa0:	4770      	bx	lr
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	40000800 	.word	0x40000800
     fa8:	00000606 	.word	0x00000606
     fac:	ff80ffff 	.word	0xff80ffff
     fb0:	00806024 	.word	0x00806024
     fb4:	00000604 	.word	0x00000604
     fb8:	40000c00 	.word	0x40000c00
     fbc:	00230002 	.word	0x00230002
     fc0:	00004204 	.word	0x00004204
     fc4:	40001400 	.word	0x40001400
     fc8:	000003e6 	.word	0x000003e6
     fcc:	00004010 	.word	0x00004010
     fd0:	e000e100 	.word	0xe000e100

00000fd4 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     fd4:	230f      	movs	r3, #15
     fd6:	4018      	ands	r0, r3
     fd8:	4b08      	ldr	r3, [pc, #32]	; (ffc <gclkEnable+0x28>)
     fda:	0212      	lsls	r2, r2, #8
     fdc:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     fde:	23f8      	movs	r3, #248	; 0xf8
     fe0:	0209      	lsls	r1, r1, #8
     fe2:	015b      	lsls	r3, r3, #5
     fe4:	4019      	ands	r1, r3
     fe6:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     fe8:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     fea:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     fec:	4c04      	ldr	r4, [pc, #16]	; (1000 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     fee:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ff0:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ff2:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ff4:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ff6:	6060      	str	r0, [r4, #4]
}
     ff8:	bd10      	pop	{r4, pc}
     ffa:	46c0      	nop			; (mov r8, r8)
     ffc:	00ffff00 	.word	0x00ffff00
    1000:	40000c00 	.word	0x40000c00

00001004 <GclkInit>:
}

void GclkInit(u8_t clk_system) {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1004:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    1006:	211e      	movs	r1, #30
void gclk_enable(uint32_t id, uint32_t src, uint32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
}

void GclkInit(u8_t clk_system) {
    1008:	b570      	push	{r4, r5, r6, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    100a:	4c12      	ldr	r4, [pc, #72]	; (1054 <GclkInit+0x50>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    100c:	4a12      	ldr	r2, [pc, #72]	; (1058 <GclkInit+0x54>)
}

void GclkInit(u8_t clk_system) {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    100e:	00db      	lsls	r3, r3, #3
    1010:	60a3      	str	r3, [r4, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    1012:	6853      	ldr	r3, [r2, #4]
void gclk_enable(uint32_t id, uint32_t src, uint32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
}

void GclkInit(u8_t clk_system) {
    1014:	0005      	movs	r5, r0


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    1016:	438b      	bics	r3, r1
    1018:	391a      	subs	r1, #26
    101a:	430b      	orrs	r3, r1
    101c:	6053      	str	r3, [r2, #4]

    // Initialize GCLK
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
    101e:	4a0f      	ldr	r2, [pc, #60]	; (105c <GclkInit+0x58>)
    1020:	3104      	adds	r1, #4
    1022:	6993      	ldr	r3, [r2, #24]
    1024:	430b      	orrs	r3, r1
    1026:	6193      	str	r3, [r2, #24]
    GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1028:	2301      	movs	r3, #1
    102a:	4a0d      	ldr	r2, [pc, #52]	; (1060 <GclkInit+0x5c>)
    102c:	7013      	strb	r3, [r2, #0]
    while (GCLK->CTRL.reg & GCLK_CTRL_SWRST);
    102e:	7811      	ldrb	r1, [r2, #0]
    1030:	4219      	tst	r1, r3
    1032:	d1fc      	bne.n	102e <GclkInit+0x2a>

    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1034:	4b0b      	ldr	r3, [pc, #44]	; (1064 <GclkInit+0x60>)
    dfll_wait_for_sync();
    1036:	4e0c      	ldr	r6, [pc, #48]	; (1068 <GclkInit+0x64>)
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
    GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    while (GCLK->CTRL.reg & GCLK_CTRL_SWRST);

    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1038:	84a3      	strh	r3, [r4, #36]	; 0x24
    dfll_wait_for_sync();
    103a:	47b0      	blx	r6
    SYSCTRL->DFLLVAL.reg = dfll_nvm_val();
    103c:	4b0b      	ldr	r3, [pc, #44]	; (106c <GclkInit+0x68>)
    103e:	4798      	blx	r3
    1040:	62a0      	str	r0, [r4, #40]	; 0x28
    dfll_wait_for_sync();
    1042:	47b0      	blx	r6
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl;
    1044:	4b0a      	ldr	r3, [pc, #40]	; (1070 <GclkInit+0x6c>)


    //For generic clock generator 0, select the DFLL48 Clock as input
    gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
    1046:	0028      	movs	r0, r5
    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    dfll_wait_for_sync();
    SYSCTRL->DFLLVAL.reg = dfll_nvm_val();
    dfll_wait_for_sync();
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl;
    1048:	84a3      	strh	r3, [r4, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
    104a:	2201      	movs	r2, #1
    104c:	2107      	movs	r1, #7
    104e:	4b09      	ldr	r3, [pc, #36]	; (1074 <GclkInit+0x70>)
    1050:	4798      	blx	r3
}
    1052:	bd70      	pop	{r4, r5, r6, pc}
    1054:	40000800 	.word	0x40000800
    1058:	41004000 	.word	0x41004000
    105c:	40000400 	.word	0x40000400
    1060:	40000c00 	.word	0x40000c00
    1064:	00000502 	.word	0x00000502
    1068:	00000ef5 	.word	0x00000ef5
    106c:	00000ec1 	.word	0x00000ec1
    1070:	00000582 	.word	0x00000582
    1074:	00000fd5 	.word	0x00000fd5

00001078 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
    cycles_per_us = cycles_per_ms / 1000;
    1078:	2230      	movs	r2, #48	; 0x30
}


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
    107a:	4b06      	ldr	r3, [pc, #24]	; (1094 <delayInit+0x1c>)
    cycles_per_us = cycles_per_ms / 1000;
    107c:	4906      	ldr	r1, [pc, #24]	; (1098 <delayInit+0x20>)
    107e:	c306      	stmia	r3!, {r1, r2}
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1080:	4a06      	ldr	r2, [pc, #24]	; (109c <delayInit+0x24>)
    1082:	6a13      	ldr	r3, [r2, #32]
    1084:	021b      	lsls	r3, r3, #8
    1086:	0a1b      	lsrs	r3, r3, #8
    1088:	6213      	str	r3, [r2, #32]

    NVIC_SetPriority(SysTick_IRQn, 0x0);

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    108a:	2205      	movs	r2, #5
    108c:	4b04      	ldr	r3, [pc, #16]	; (10a0 <delayInit+0x28>)
    108e:	601a      	str	r2, [r3, #0]
}
    1090:	4770      	bx	lr
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	20000004 	.word	0x20000004
    1098:	0000bb80 	.word	0x0000bb80
    109c:	e000ed00 	.word	0xe000ed00
    10a0:	e000e010 	.word	0xe000e010

000010a4 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    10a4:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10a6:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    10a8:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    10aa:	4b08      	ldr	r3, [pc, #32]	; (10cc <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    10ac:	4a08      	ldr	r2, [pc, #32]	; (10d0 <delay_us+0x2c>)
    10ae:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10b0:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
    10b2:	3801      	subs	r0, #1
    10b4:	d308      	bcc.n	10c8 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    10b6:	2b00      	cmp	r3, #0
    10b8:	d0fb      	beq.n	10b2 <delay_us+0xe>
    10ba:	4e05      	ldr	r6, [pc, #20]	; (10d0 <delay_us+0x2c>)
        SysTick->LOAD = n;
    10bc:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    10be:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10c0:	6835      	ldr	r5, [r6, #0]
    10c2:	4225      	tst	r5, r4
    10c4:	d0fc      	beq.n	10c0 <delay_us+0x1c>
    10c6:	e7f4      	b.n	10b2 <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
    10c8:	bd70      	pop	{r4, r5, r6, pc}
    10ca:	46c0      	nop			; (mov r8, r8)
    10cc:	20000004 	.word	0x20000004
    10d0:	e000e010 	.word	0xe000e010

000010d4 <SysTick_Handler>:


void SysTick_Handler(void) {
    //g_msTicks++;
}
    10d4:	4770      	bx	lr
	...

000010d8 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    10d8:	b570      	push	{r4, r5, r6, lr}
    10da:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    10dc:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    10de:	4b08      	ldr	r3, [pc, #32]	; (1100 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    10e0:	4a08      	ldr	r2, [pc, #32]	; (1104 <delay_ms+0x2c>)
    10e2:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10e4:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
    10e6:	3801      	subs	r0, #1
    10e8:	d308      	bcc.n	10fc <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    10ea:	2b00      	cmp	r3, #0
    10ec:	d0fb      	beq.n	10e6 <delay_ms+0xe>
    10ee:	4e05      	ldr	r6, [pc, #20]	; (1104 <delay_ms+0x2c>)
        SysTick->LOAD = n;
    10f0:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    10f2:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10f4:	6835      	ldr	r5, [r6, #0]
    10f6:	4225      	tst	r5, r4
    10f8:	d0fc      	beq.n	10f4 <delay_ms+0x1c>
    10fa:	e7f4      	b.n	10e6 <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
    10fc:	bd70      	pop	{r4, r5, r6, pc}
    10fe:	46c0      	nop			; (mov r8, r8)
    1100:	20000004 	.word	0x20000004
    1104:	e000e010 	.word	0xe000e010

00001108 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    1108:	21fa      	movs	r1, #250	; 0xfa
    110a:	4a04      	ldr	r2, [pc, #16]	; (111c <RTC_Handler+0x14>)
    110c:	0089      	lsls	r1, r1, #2
    110e:	6813      	ldr	r3, [r2, #0]
    1110:	185b      	adds	r3, r3, r1
    1112:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    1114:	22ff      	movs	r2, #255	; 0xff
    1116:	4b02      	ldr	r3, [pc, #8]	; (1120 <RTC_Handler+0x18>)
    1118:	721a      	strb	r2, [r3, #8]
}
    111a:	4770      	bx	lr
    111c:	200000f4 	.word	0x200000f4
    1120:	40001400 	.word	0x40001400

00001124 <millis>:

uint32_t millis(void) {
    1124:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    1126:	f3ef 8110 	mrs	r1, PRIMASK
    112a:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    112c:	4a08      	ldr	r2, [pc, #32]	; (1150 <millis+0x2c>)
    112e:	4d09      	ldr	r5, [pc, #36]	; (1154 <millis+0x30>)
    1130:	8a10      	ldrh	r0, [r2, #16]
    1132:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1134:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1136:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1138:	09e4      	lsrs	r4, r4, #7
    113a:	d004      	beq.n	1146 <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    113c:	8a13      	ldrh	r3, [r2, #16]
    113e:	22fa      	movs	r2, #250	; 0xfa
    1140:	6828      	ldr	r0, [r5, #0]
    1142:	0092      	lsls	r2, r2, #2
    1144:	1880      	adds	r0, r0, r2
    1146:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    1148:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    114c:	bd30      	pop	{r4, r5, pc}
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	40001400 	.word	0x40001400
    1154:	200000f4 	.word	0x200000f4

00001158 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1158:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    115a:	4a0d      	ldr	r2, [pc, #52]	; (1190 <TC4Init+0x38>)
    115c:	4b0d      	ldr	r3, [pc, #52]	; (1194 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    115e:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1160:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1162:	4a0d      	ldr	r2, [pc, #52]	; (1198 <TC4Init+0x40>)
    1164:	6a13      	ldr	r3, [r2, #32]
    1166:	430b      	orrs	r3, r1
    1168:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    116a:	4b0c      	ldr	r3, [pc, #48]	; (119c <TC4Init+0x44>)
    116c:	4a0c      	ldr	r2, [pc, #48]	; (11a0 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    116e:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1170:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x50;
    1172:	2250      	movs	r2, #80	; 0x50
    1174:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1176:	3a4f      	subs	r2, #79	; 0x4f
    1178:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    117a:	32ff      	adds	r2, #255	; 0xff
    117c:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    117e:	881a      	ldrh	r2, [r3, #0]
    1180:	430a      	orrs	r2, r1
    1182:	801a      	strh	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1184:	2280      	movs	r2, #128	; 0x80
    1186:	4b07      	ldr	r3, [pc, #28]	; (11a4 <TC4Init+0x4c>)
    1188:	0312      	lsls	r2, r2, #12
    118a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    118c:	4770      	bx	lr
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	0000421c 	.word	0x0000421c
    1194:	40000c00 	.word	0x40000c00
    1198:	40000400 	.word	0x40000400
    119c:	42003000 	.word	0x42003000
    11a0:	00000904 	.word	0x00000904
    11a4:	e000e100 	.word	0xe000e100

000011a8 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    11a8:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    11aa:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    11ac:	4b02      	ldr	r3, [pc, #8]	; (11b8 <TC4_Handler+0x10>)
    11ae:	739a      	strb	r2, [r3, #14]
    //pinToggle(TxPo);
    pullSample();
    11b0:	4b02      	ldr	r3, [pc, #8]	; (11bc <TC4_Handler+0x14>)
    11b2:	4798      	blx	r3
}
    11b4:	bd10      	pop	{r4, pc}
    11b6:	46c0      	nop			; (mov r8, r8)
    11b8:	42003000 	.word	0x42003000
    11bc:	00002815 	.word	0x00002815

000011c0 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    11c0:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    11c2:	4a0d      	ldr	r2, [pc, #52]	; (11f8 <TC5Init+0x38>)
    11c4:	4b0d      	ldr	r3, [pc, #52]	; (11fc <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    11c6:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    11c8:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    11ca:	4a0d      	ldr	r2, [pc, #52]	; (1200 <TC5Init+0x40>)
    11cc:	6a13      	ldr	r3, [r2, #32]
    11ce:	430b      	orrs	r3, r1
    11d0:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    11d2:	4b0c      	ldr	r3, [pc, #48]	; (1204 <TC5Init+0x44>)
    11d4:	4a0c      	ldr	r2, [pc, #48]	; (1208 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    11d6:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    11d8:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_PRESCALER_DIV16;

    u16_t logSpeed = 20; //Hz
    u8_t PER_Reg = (long)((32768/16) / logSpeed);

    TC5->COUNT8.PER.reg = PER_Reg;
    11da:	2266      	movs	r2, #102	; 0x66
    11dc:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    11de:	3a65      	subs	r2, #101	; 0x65
    11e0:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    11e2:	32ff      	adds	r2, #255	; 0xff
    11e4:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    11e6:	881a      	ldrh	r2, [r3, #0]
    11e8:	430a      	orrs	r2, r1
    11ea:	801a      	strh	r2, [r3, #0]
    11ec:	2280      	movs	r2, #128	; 0x80
    11ee:	4b07      	ldr	r3, [pc, #28]	; (120c <TC5Init+0x4c>)
    11f0:	0352      	lsls	r2, r2, #13
    11f2:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    11f4:	4770      	bx	lr
    11f6:	46c0      	nop			; (mov r8, r8)
    11f8:	0000421c 	.word	0x0000421c
    11fc:	40000c00 	.word	0x40000c00
    1200:	40000400 	.word	0x40000400
    1204:	42003400 	.word	0x42003400
    1208:	00000c04 	.word	0x00000c04
    120c:	e000e100 	.word	0xe000e100

00001210 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1210:	22ff      	movs	r2, #255	; 0xff
    1212:	4b03      	ldr	r3, [pc, #12]	; (1220 <TC5_Handler+0x10>)
    1214:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    1216:	4b03      	ldr	r3, [pc, #12]	; (1224 <TC5_Handler+0x14>)
    1218:	3afe      	subs	r2, #254	; 0xfe
    121a:	701a      	strb	r2, [r3, #0]
}
    121c:	4770      	bx	lr
    121e:	46c0      	nop			; (mov r8, r8)
    1220:	42003400 	.word	0x42003400
    1224:	2000015a 	.word	0x2000015a

00001228 <flight>:
#include <util.h>
#include <boardDefines.h>

void flight() {
    1228:	b570      	push	{r4, r5, r6, lr}

    switch(flightState) {
    122a:	4c65      	ldr	r4, [pc, #404]	; (13c0 <flight+0x198>)
    122c:	7820      	ldrb	r0, [r4, #0]
    122e:	280a      	cmp	r0, #10
    1230:	d900      	bls.n	1234 <flight+0xc>
    1232:	e0b7      	b.n	13a4 <flight+0x17c>
    1234:	f002 ffcc 	bl	41d0 <__gnu_thumb1_case_uqi>
    1238:	724f2f06 	.word	0x724f2f06
    123c:	9378b6b6 	.word	0x9378b6b6
    1240:	b6a7      	.short	0xb6a7
    1242:	72          	.byte	0x72
    1243:	00          	.byte	0x00
    case flightStatrup:

        updateGround( );
    1244:	4b5f      	ldr	r3, [pc, #380]	; (13c4 <flight+0x19c>)
    1246:	4798      	blx	r3

        if ((millis() - startupTick) > 10000) {
    1248:	4e5f      	ldr	r6, [pc, #380]	; (13c8 <flight+0x1a0>)
    124a:	47b0      	blx	r6
    124c:	4d5f      	ldr	r5, [pc, #380]	; (13cc <flight+0x1a4>)
    124e:	682b      	ldr	r3, [r5, #0]
    1250:	1ac0      	subs	r0, r0, r3
    1252:	4b5f      	ldr	r3, [pc, #380]	; (13d0 <flight+0x1a8>)
    1254:	4298      	cmp	r0, r3
    1256:	d90d      	bls.n	1274 <flight+0x4c>
            findNewFlightStart();
    1258:	4b5e      	ldr	r3, [pc, #376]	; (13d4 <flight+0x1ac>)
    125a:	4798      	blx	r3
            startupJingle();
    125c:	4b5e      	ldr	r3, [pc, #376]	; (13d8 <flight+0x1b0>)
    125e:	4798      	blx	r3
            startupTick = millis();
    1260:	47b0      	blx	r6
            flightState = flightTest;
    1262:	230a      	movs	r3, #10
    1264:	7023      	strb	r3, [r4, #0]
            //flightState = flightPad;
            if (flightState == flightTest) {
                writeFlightStartAddress();
    1266:	4b5d      	ldr	r3, [pc, #372]	; (13dc <flight+0x1b4>)
        updateGround( );

        if ((millis() - startupTick) > 10000) {
            findNewFlightStart();
            startupJingle();
            startupTick = millis();
    1268:	6028      	str	r0, [r5, #0]
            flightState = flightTest;
            //flightState = flightPad;
            if (flightState == flightTest) {
                writeFlightStartAddress();
    126a:	4798      	blx	r3
                logFlight( );
    126c:	4b5c      	ldr	r3, [pc, #368]	; (13e0 <flight+0x1b8>)
    126e:	4798      	blx	r3
                logEvent('L');
    1270:	204c      	movs	r0, #76	; 0x4c
    1272:	e071      	b.n	1358 <flight+0x130>
            }

            break;
        }

        attemptConnection();
    1274:	4b5b      	ldr	r3, [pc, #364]	; (13e4 <flight+0x1bc>)
    1276:	4798      	blx	r3

        if (unplugged()) {
    1278:	4b5b      	ldr	r3, [pc, #364]	; (13e8 <flight+0x1c0>)
    127a:	4798      	blx	r3
    127c:	2800      	cmp	r0, #0
    127e:	d100      	bne.n	1282 <flight+0x5a>
    1280:	e090      	b.n	13a4 <flight+0x17c>
            flightState = flightIdle;
    1282:	2301      	movs	r3, #1
    1284:	7023      	strb	r3, [r4, #0]
            unpluggedJingle();
    1286:	4b59      	ldr	r3, [pc, #356]	; (13ec <flight+0x1c4>)
    1288:	4798      	blx	r3
            delay_ms(1000);
    128a:	20fa      	movs	r0, #250	; 0xfa
    128c:	4b58      	ldr	r3, [pc, #352]	; (13f0 <flight+0x1c8>)
    128e:	0080      	lsls	r0, r0, #2
    1290:	4798      	blx	r3
            shutDown();
    1292:	4b58      	ldr	r3, [pc, #352]	; (13f4 <flight+0x1cc>)
    1294:	e075      	b.n	1382 <flight+0x15a>
        break;
    case flightIdle:
        //TC4->COUNT8.CTRLA.reg = 0;
        //TC5->COUNT8.CTRLA.reg = 0;

        if (millis() - offsets.groundBeep > 2000) {
    1296:	4e4c      	ldr	r6, [pc, #304]	; (13c8 <flight+0x1a0>)
    1298:	47b0      	blx	r6
    129a:	4d57      	ldr	r5, [pc, #348]	; (13f8 <flight+0x1d0>)
    129c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    129e:	1ac0      	subs	r0, r0, r3
    12a0:	23fa      	movs	r3, #250	; 0xfa
    12a2:	00db      	lsls	r3, r3, #3
    12a4:	4298      	cmp	r0, r3
    12a6:	d905      	bls.n	12b4 <flight+0x8c>
            offsets.groundBeep = millis();
    12a8:	47b0      	blx	r6
    12aa:	6328      	str	r0, [r5, #48]	; 0x30
            beep(400);
    12ac:	20c8      	movs	r0, #200	; 0xc8
    12ae:	4b53      	ldr	r3, [pc, #332]	; (13fc <flight+0x1d4>)
    12b0:	0040      	lsls	r0, r0, #1
    12b2:	4798      	blx	r3
        }

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    12b4:	4b52      	ldr	r3, [pc, #328]	; (1400 <flight+0x1d8>)
    12b6:	7e1b      	ldrb	r3, [r3, #24]
    12b8:	075b      	lsls	r3, r3, #29
    12ba:	d573      	bpl.n	13a4 <flight+0x17c>
            u8_t possibleReset = usartDataIn(USART3);
    12bc:	2003      	movs	r0, #3
    12be:	4b51      	ldr	r3, [pc, #324]	; (1404 <flight+0x1dc>)
    12c0:	4798      	blx	r3
            if (possibleReset == 0x52) {
    12c2:	2852      	cmp	r0, #82	; 0x52
    12c4:	d16e      	bne.n	13a4 <flight+0x17c>
    12c6:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    12ca:	4a4f      	ldr	r2, [pc, #316]	; (1408 <flight+0x1e0>)
    12cc:	4b4f      	ldr	r3, [pc, #316]	; (140c <flight+0x1e4>)
    12ce:	60da      	str	r2, [r3, #12]
    12d0:	f3bf 8f4f 	dsb	sy
    12d4:	e7fe      	b.n	12d4 <flight+0xac>
        *  Accel > 2g & vel > 15ft/s
        *		 or
        *  baro alt > 100ft
        */

        updateGround();
    12d6:	4b3b      	ldr	r3, [pc, #236]	; (13c4 <flight+0x19c>)
    12d8:	4798      	blx	r3

        if (writeLog) {
    12da:	4b4d      	ldr	r3, [pc, #308]	; (1410 <flight+0x1e8>)
    12dc:	781b      	ldrb	r3, [r3, #0]
    12de:	2b00      	cmp	r3, #0
    12e0:	d005      	beq.n	12ee <flight+0xc6>
            logSensors( );
    12e2:	4b4c      	ldr	r3, [pc, #304]	; (1414 <flight+0x1ec>)
    12e4:	4798      	blx	r3
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    12e6:	2280      	movs	r2, #128	; 0x80
    12e8:	4b4b      	ldr	r3, [pc, #300]	; (1418 <flight+0x1f0>)
    12ea:	0352      	lsls	r2, r2, #13
    12ec:	61da      	str	r2, [r3, #28]
            pinToggle(LedPin);
        }


        //if ((( velocity > 15) && (accel > 2)) | (altitudeAGL() > 100)) {
        if ((accel > 2)) {
    12ee:	2380      	movs	r3, #128	; 0x80
    12f0:	494a      	ldr	r1, [pc, #296]	; (141c <flight+0x1f4>)
    12f2:	2200      	movs	r2, #0
    12f4:	6808      	ldr	r0, [r1, #0]
    12f6:	6849      	ldr	r1, [r1, #4]
    12f8:	05db      	lsls	r3, r3, #23
    12fa:	4d49      	ldr	r5, [pc, #292]	; (1420 <flight+0x1f8>)
    12fc:	47a8      	blx	r5
    12fe:	2800      	cmp	r0, #0
    1300:	d050      	beq.n	13a4 <flight+0x17c>
            flightState = flightBoost;
    1302:	2303      	movs	r3, #3
    1304:	7023      	strb	r3, [r4, #0]
            writeFlightStartAddress();
    1306:	4b35      	ldr	r3, [pc, #212]	; (13dc <flight+0x1b4>)
    1308:	4798      	blx	r3
            logFlight( );
    130a:	4b35      	ldr	r3, [pc, #212]	; (13e0 <flight+0x1b8>)
    130c:	4798      	blx	r3
            writeGroundLog();
    130e:	4b45      	ldr	r3, [pc, #276]	; (1424 <flight+0x1fc>)
    1310:	4798      	blx	r3
            logEvent('L');
    1312:	204c      	movs	r0, #76	; 0x4c
    1314:	4b44      	ldr	r3, [pc, #272]	; (1428 <flight+0x200>)
    1316:	4798      	blx	r3
            beep(100);
    1318:	2064      	movs	r0, #100	; 0x64
    131a:	e041      	b.n	13a0 <flight+0x178>
        /*
        *	boost to fast
        *		while
        *	Accel > 1/4G
        */
        if (writeLog) {
    131c:	4b3c      	ldr	r3, [pc, #240]	; (1410 <flight+0x1e8>)
    131e:	781b      	ldrb	r3, [r3, #0]
    1320:	2b00      	cmp	r3, #0
    1322:	d03f      	beq.n	13a4 <flight+0x17c>
            logSensors( );
    1324:	4b3b      	ldr	r3, [pc, #236]	; (1414 <flight+0x1ec>)
    1326:	e02c      	b.n	1382 <flight+0x15a>


        break;
    case flightDrogue:

        if (writeLog) {
    1328:	4b39      	ldr	r3, [pc, #228]	; (1410 <flight+0x1e8>)
    132a:	781b      	ldrb	r3, [r3, #0]
    132c:	2b00      	cmp	r3, #0
    132e:	d001      	beq.n	1334 <flight+0x10c>
            logSensors( );
    1330:	4b38      	ldr	r3, [pc, #224]	; (1414 <flight+0x1ec>)
    1332:	4798      	blx	r3
        }


        if (sample.pressureAltitude < deploymentSettings.MAIN_DEPLOY) {
    1334:	4b3d      	ldr	r3, [pc, #244]	; (142c <flight+0x204>)
    1336:	8b18      	ldrh	r0, [r3, #24]
    1338:	4b3d      	ldr	r3, [pc, #244]	; (1430 <flight+0x208>)
    133a:	4798      	blx	r3
    133c:	000b      	movs	r3, r1
    133e:	493d      	ldr	r1, [pc, #244]	; (1434 <flight+0x20c>)
    1340:	0002      	movs	r2, r0
    1342:	6d88      	ldr	r0, [r1, #88]	; 0x58
    1344:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
    1346:	4d3c      	ldr	r5, [pc, #240]	; (1438 <flight+0x210>)
    1348:	47a8      	blx	r5
    134a:	2800      	cmp	r0, #0
    134c:	d02a      	beq.n	13a4 <flight+0x17c>
            flightState = flightMain;
    134e:	2307      	movs	r3, #7
    1350:	7023      	strb	r3, [r4, #0]
            igniteMain();
    1352:	4b3a      	ldr	r3, [pc, #232]	; (143c <flight+0x214>)
    1354:	4798      	blx	r3
            logEvent('M');
    1356:	204d      	movs	r0, #77	; 0x4d
    1358:	4b33      	ldr	r3, [pc, #204]	; (1428 <flight+0x200>)
    135a:	4798      	blx	r3
    135c:	e022      	b.n	13a4 <flight+0x17c>
        }

        break;
    case flightMain:

        if (writeLog) {
    135e:	4b2c      	ldr	r3, [pc, #176]	; (1410 <flight+0x1e8>)
    1360:	781b      	ldrb	r3, [r3, #0]
    1362:	2b00      	cmp	r3, #0
    1364:	d001      	beq.n	136a <flight+0x142>
            logSensors( );
    1366:	4b2b      	ldr	r3, [pc, #172]	; (1414 <flight+0x1ec>)
    1368:	4798      	blx	r3
        }

        if (velocity < 5) {
    136a:	4935      	ldr	r1, [pc, #212]	; (1440 <flight+0x218>)
    136c:	2200      	movs	r2, #0
    136e:	6808      	ldr	r0, [r1, #0]
    1370:	6849      	ldr	r1, [r1, #4]
    1372:	4b34      	ldr	r3, [pc, #208]	; (1444 <flight+0x21c>)
    1374:	4d30      	ldr	r5, [pc, #192]	; (1438 <flight+0x210>)
    1376:	47a8      	blx	r5
    1378:	2800      	cmp	r0, #0
    137a:	d013      	beq.n	13a4 <flight+0x17c>
            flightState = flightLanded;
    137c:	2308      	movs	r3, #8
    137e:	7023      	strb	r3, [r4, #0]
            finishFlight();
    1380:	4b31      	ldr	r3, [pc, #196]	; (1448 <flight+0x220>)
    1382:	4798      	blx	r3
    1384:	e00e      	b.n	13a4 <flight+0x17c>
        }

        break;
    case flightLanded:

        if (millis() - offsets.groundBeep > 2000) {
    1386:	4e10      	ldr	r6, [pc, #64]	; (13c8 <flight+0x1a0>)
    1388:	47b0      	blx	r6
    138a:	4d1b      	ldr	r5, [pc, #108]	; (13f8 <flight+0x1d0>)
    138c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    138e:	1ac0      	subs	r0, r0, r3
    1390:	23fa      	movs	r3, #250	; 0xfa
    1392:	00db      	lsls	r3, r3, #3
    1394:	4298      	cmp	r0, r3
    1396:	d905      	bls.n	13a4 <flight+0x17c>
            offsets.groundBeep = millis();
    1398:	47b0      	blx	r6
    139a:	6328      	str	r0, [r5, #48]	; 0x30
            beep(400);
    139c:	20c8      	movs	r0, #200	; 0xc8
    139e:	0040      	lsls	r0, r0, #1
    13a0:	4b16      	ldr	r3, [pc, #88]	; (13fc <flight+0x1d4>)
    13a2:	4798      	blx	r3
        break;
    }



    if ((flightState != flightStatrup) & (flightState != flightIdle) & (flightState != flightPad) & unplugged()) {
    13a4:	2302      	movs	r3, #2
    13a6:	7824      	ldrb	r4, [r4, #0]
    13a8:	42a3      	cmp	r3, r4
    13aa:	41a4      	sbcs	r4, r4
    13ac:	4b0e      	ldr	r3, [pc, #56]	; (13e8 <flight+0x1c0>)
    13ae:	4264      	negs	r4, r4
    13b0:	4798      	blx	r3
    13b2:	2800      	cmp	r0, #0
    13b4:	d003      	beq.n	13be <flight+0x196>
    13b6:	2c00      	cmp	r4, #0
    13b8:	d001      	beq.n	13be <flight+0x196>
        finishFlight();
    13ba:	4b23      	ldr	r3, [pc, #140]	; (1448 <flight+0x220>)
    13bc:	4798      	blx	r3
    }

    13be:	bd70      	pop	{r4, r5, r6, pc}
    13c0:	2000016c 	.word	0x2000016c
    13c4:	0000144d 	.word	0x0000144d
    13c8:	00001125 	.word	0x00001125
    13cc:	2000015c 	.word	0x2000015c
    13d0:	00002710 	.word	0x00002710
    13d4:	0000275d 	.word	0x0000275d
    13d8:	00000e45 	.word	0x00000e45
    13dc:	000026a9 	.word	0x000026a9
    13e0:	000023d1 	.word	0x000023d1
    13e4:	00002f35 	.word	0x00002f35
    13e8:	00000b49 	.word	0x00000b49
    13ec:	00000e7d 	.word	0x00000e7d
    13f0:	000010d9 	.word	0x000010d9
    13f4:	00000b7d 	.word	0x00000b7d
    13f8:	20000108 	.word	0x20000108
    13fc:	00000e09 	.word	0x00000e09
    1400:	42001400 	.word	0x42001400
    1404:	00002cd1 	.word	0x00002cd1
    1408:	05fa0004 	.word	0x05fa0004
    140c:	e000ed00 	.word	0xe000ed00
    1410:	2000015a 	.word	0x2000015a
    1414:	00002481 	.word	0x00002481
    1418:	41004400 	.word	0x41004400
    141c:	200002d8 	.word	0x200002d8
    1420:	00004351 	.word	0x00004351
    1424:	00002701 	.word	0x00002701
    1428:	0000242d 	.word	0x0000242d
    142c:	20000140 	.word	0x20000140
    1430:	00006161 	.word	0x00006161
    1434:	20000540 	.word	0x20000540
    1438:	00004329 	.word	0x00004329
    143c:	00001661 	.word	0x00001661
    1440:	200002e0 	.word	0x200002e0
    1444:	40140000 	.word	0x40140000
    1448:	00000c01 	.word	0x00000c01

0000144c <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    144c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    144e:	4c2b      	ldr	r4, [pc, #172]	; (14fc <updateGround+0xb0>)
    1450:	4d2b      	ldr	r5, [pc, #172]	; (1500 <updateGround+0xb4>)
    1452:	4a2c      	ldr	r2, [pc, #176]	; (1504 <updateGround+0xb8>)
    1454:	6920      	ldr	r0, [r4, #16]
    1456:	6961      	ldr	r1, [r4, #20]
    1458:	4b2b      	ldr	r3, [pc, #172]	; (1508 <updateGround+0xbc>)
    145a:	47a8      	blx	r5
    145c:	4b2b      	ldr	r3, [pc, #172]	; (150c <updateGround+0xc0>)
    145e:	0006      	movs	r6, r0
    1460:	6b58      	ldr	r0, [r3, #52]	; 0x34
    1462:	4b2b      	ldr	r3, [pc, #172]	; (1510 <updateGround+0xc4>)
    1464:	000f      	movs	r7, r1
    1466:	4798      	blx	r3
    1468:	4a26      	ldr	r2, [pc, #152]	; (1504 <updateGround+0xb8>)
    146a:	4b2a      	ldr	r3, [pc, #168]	; (1514 <updateGround+0xc8>)
    146c:	47a8      	blx	r5
    146e:	0002      	movs	r2, r0
    1470:	000b      	movs	r3, r1
    1472:	0030      	movs	r0, r6
    1474:	0039      	movs	r1, r7
    1476:	4e28      	ldr	r6, [pc, #160]	; (1518 <updateGround+0xcc>)
    1478:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    147a:	4e28      	ldr	r6, [pc, #160]	; (151c <updateGround+0xd0>)

void updateGround(Altimeter *my_altimeter) {



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    147c:	6120      	str	r0, [r4, #16]
    147e:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1480:	69e0      	ldr	r0, [r4, #28]
    1482:	47b0      	blx	r6
    1484:	2200      	movs	r2, #0
    1486:	4b26      	ldr	r3, [pc, #152]	; (1520 <updateGround+0xd4>)
    1488:	47a8      	blx	r5
    148a:	9000      	str	r0, [sp, #0]
    148c:	9101      	str	r1, [sp, #4]
    148e:	4925      	ldr	r1, [pc, #148]	; (1524 <updateGround+0xd8>)
    1490:	2200      	movs	r2, #0
    1492:	6808      	ldr	r0, [r1, #0]
    1494:	6849      	ldr	r1, [r1, #4]
    1496:	4b22      	ldr	r3, [pc, #136]	; (1520 <updateGround+0xd4>)
    1498:	47a8      	blx	r5
    149a:	4f1f      	ldr	r7, [pc, #124]	; (1518 <updateGround+0xcc>)
    149c:	0002      	movs	r2, r0
    149e:	000b      	movs	r3, r1
    14a0:	9800      	ldr	r0, [sp, #0]
    14a2:	9901      	ldr	r1, [sp, #4]
    14a4:	47b8      	blx	r7
    14a6:	4f20      	ldr	r7, [pc, #128]	; (1528 <updateGround+0xdc>)
    14a8:	47b8      	blx	r7
    14aa:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    14ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
    14ae:	47b0      	blx	r6
    14b0:	4a14      	ldr	r2, [pc, #80]	; (1504 <updateGround+0xb8>)
    14b2:	4b15      	ldr	r3, [pc, #84]	; (1508 <updateGround+0xbc>)
    14b4:	47a8      	blx	r5
    14b6:	4b15      	ldr	r3, [pc, #84]	; (150c <updateGround+0xc0>)
    14b8:	9000      	str	r0, [sp, #0]
    14ba:	9101      	str	r1, [sp, #4]
    14bc:	6d58      	ldr	r0, [r3, #84]	; 0x54
    14be:	47b0      	blx	r6
    14c0:	4a10      	ldr	r2, [pc, #64]	; (1504 <updateGround+0xb8>)
    14c2:	4b14      	ldr	r3, [pc, #80]	; (1514 <updateGround+0xc8>)
    14c4:	47a8      	blx	r5
    14c6:	4d14      	ldr	r5, [pc, #80]	; (1518 <updateGround+0xcc>)
    14c8:	000b      	movs	r3, r1
    14ca:	0002      	movs	r2, r0
    14cc:	9800      	ldr	r0, [sp, #0]
    14ce:	9901      	ldr	r1, [sp, #4]
    14d0:	47a8      	blx	r5
    14d2:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    14d4:	4d15      	ldr	r5, [pc, #84]	; (152c <updateGround+0xe0>)



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    14d6:	6260      	str	r0, [r4, #36]	; 0x24

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    14d8:	47a8      	blx	r5
    14da:	6823      	ldr	r3, [r4, #0]
    14dc:	1ac0      	subs	r0, r0, r3
    14de:	23fa      	movs	r3, #250	; 0xfa
    14e0:	00db      	lsls	r3, r3, #3
    14e2:	4298      	cmp	r0, r3
    14e4:	d909      	bls.n	14fa <updateGround+0xae>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    14e6:	69e3      	ldr	r3, [r4, #28]
    14e8:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    14ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    14ec:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    14ee:	6922      	ldr	r2, [r4, #16]
    14f0:	6963      	ldr	r3, [r4, #20]
    14f2:	60a2      	str	r2, [r4, #8]
    14f4:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    14f6:	47a8      	blx	r5
    14f8:	6020      	str	r0, [r4, #0]
    }
}
    14fa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    14fc:	20000108 	.word	0x20000108
    1500:	00005519 	.word	0x00005519
    1504:	9999999a 	.word	0x9999999a
    1508:	3fe99999 	.word	0x3fe99999
    150c:	20000540 	.word	0x20000540
    1510:	00006255 	.word	0x00006255
    1514:	3fc99999 	.word	0x3fc99999
    1518:	00004679 	.word	0x00004679
    151c:	000061e5 	.word	0x000061e5
    1520:	3fe00000 	.word	0x3fe00000
    1524:	200002e8 	.word	0x200002e8
    1528:	000043d1 	.word	0x000043d1
    152c:	00001125 	.word	0x00001125

00001530 <igniterTick>:
#include <util.h>
#include <boardDefines.h>


void igniterTick() {
    1530:	b510      	push	{r4, lr}

    if (charges.igniterAHot) {
    1532:	4c23      	ldr	r4, [pc, #140]	; (15c0 <igniterTick+0x90>)
    1534:	7823      	ldrb	r3, [r4, #0]
    1536:	2b00      	cmp	r3, #0
    1538:	d00d      	beq.n	1556 <igniterTick+0x26>
        if ((millis() - charges.igniterATick) > 2000) {
    153a:	4b22      	ldr	r3, [pc, #136]	; (15c4 <igniterTick+0x94>)
    153c:	4798      	blx	r3
    153e:	6863      	ldr	r3, [r4, #4]
    1540:	1ac0      	subs	r0, r0, r3
    1542:	23fa      	movs	r3, #250	; 0xfa
    1544:	00db      	lsls	r3, r3, #3
    1546:	4298      	cmp	r0, r3
    1548:	d905      	bls.n	1556 <igniterTick+0x26>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    154a:	2280      	movs	r2, #128	; 0x80
    154c:	4b1e      	ldr	r3, [pc, #120]	; (15c8 <igniterTick+0x98>)
    154e:	0412      	lsls	r2, r2, #16
    1550:	601a      	str	r2, [r3, #0]
            pinLow(fireAPin);
            charges.igniterAHot = false;
    1552:	2300      	movs	r3, #0
    1554:	7023      	strb	r3, [r4, #0]
        }
    }

    if (charges.igniterBHot) {
    1556:	7a23      	ldrb	r3, [r4, #8]
    1558:	2b00      	cmp	r3, #0
    155a:	d00d      	beq.n	1578 <igniterTick+0x48>
        if ((millis() - charges.igniterBTick) > 2000) {
    155c:	4b19      	ldr	r3, [pc, #100]	; (15c4 <igniterTick+0x94>)
    155e:	4798      	blx	r3
    1560:	68e3      	ldr	r3, [r4, #12]
    1562:	1ac0      	subs	r0, r0, r3
    1564:	23fa      	movs	r3, #250	; 0xfa
    1566:	00db      	lsls	r3, r3, #3
    1568:	4298      	cmp	r0, r3
    156a:	d905      	bls.n	1578 <igniterTick+0x48>
    156c:	2280      	movs	r2, #128	; 0x80
    156e:	4b16      	ldr	r3, [pc, #88]	; (15c8 <igniterTick+0x98>)
    1570:	03d2      	lsls	r2, r2, #15
    1572:	601a      	str	r2, [r3, #0]
            pinLow(fireBPin);
            charges.igniterBHot = false;
    1574:	2300      	movs	r3, #0
    1576:	7223      	strb	r3, [r4, #8]
        }
    }

    if (charges.igniterCHot) {
    1578:	7c23      	ldrb	r3, [r4, #16]
    157a:	2b00      	cmp	r3, #0
    157c:	d00d      	beq.n	159a <igniterTick+0x6a>
        if ((millis() - charges.igniterCTick) > 2000) {
    157e:	4b11      	ldr	r3, [pc, #68]	; (15c4 <igniterTick+0x94>)
    1580:	4798      	blx	r3
    1582:	6963      	ldr	r3, [r4, #20]
    1584:	1ac0      	subs	r0, r0, r3
    1586:	23fa      	movs	r3, #250	; 0xfa
    1588:	00db      	lsls	r3, r3, #3
    158a:	4298      	cmp	r0, r3
    158c:	d905      	bls.n	159a <igniterTick+0x6a>
    158e:	2280      	movs	r2, #128	; 0x80
    1590:	4b0e      	ldr	r3, [pc, #56]	; (15cc <igniterTick+0x9c>)
    1592:	0492      	lsls	r2, r2, #18
    1594:	615a      	str	r2, [r3, #20]
            pinLow(fireCPin);
            charges.igniterCHot = false;
    1596:	2300      	movs	r3, #0
    1598:	7423      	strb	r3, [r4, #16]
        }
    }

    if (charges.igniterDHot) {
    159a:	7e23      	ldrb	r3, [r4, #24]
    159c:	2b00      	cmp	r3, #0
    159e:	d00d      	beq.n	15bc <igniterTick+0x8c>
        if ((millis() - charges.igniterDTick) > 2000) {
    15a0:	4b08      	ldr	r3, [pc, #32]	; (15c4 <igniterTick+0x94>)
    15a2:	4798      	blx	r3
    15a4:	69e3      	ldr	r3, [r4, #28]
    15a6:	1ac0      	subs	r0, r0, r3
    15a8:	23fa      	movs	r3, #250	; 0xfa
    15aa:	00db      	lsls	r3, r3, #3
    15ac:	4298      	cmp	r0, r3
    15ae:	d905      	bls.n	15bc <igniterTick+0x8c>
    15b0:	2280      	movs	r2, #128	; 0x80
    15b2:	4b06      	ldr	r3, [pc, #24]	; (15cc <igniterTick+0x9c>)
    15b4:	0452      	lsls	r2, r2, #17
    15b6:	615a      	str	r2, [r3, #20]
            pinLow(fireDPin);
            charges.igniterDHot = false;
    15b8:	2300      	movs	r3, #0
    15ba:	7623      	strb	r3, [r4, #24]
        }
    }
}
    15bc:	bd10      	pop	{r4, pc}
    15be:	46c0      	nop			; (mov r8, r8)
    15c0:	200002b4 	.word	0x200002b4
    15c4:	00001125 	.word	0x00001125
    15c8:	41004494 	.word	0x41004494
    15cc:	41004400 	.word	0x41004400

000015d0 <lightIgniterA>:
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    15d0:	2280      	movs	r2, #128	; 0x80
    15d2:	4b05      	ldr	r3, [pc, #20]	; (15e8 <lightIgniterA+0x18>)
    15d4:	0412      	lsls	r2, r2, #16
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
        lightIgniterD();
    }
}

void lightIgniterA() {
    15d6:	b510      	push	{r4, lr}
    15d8:	601a      	str	r2, [r3, #0]
    pinHigh(fireAPin);
    charges.igniterAHot = true;
    15da:	2301      	movs	r3, #1
    15dc:	4c03      	ldr	r4, [pc, #12]	; (15ec <lightIgniterA+0x1c>)
    15de:	7023      	strb	r3, [r4, #0]
    charges.igniterATick = millis();
    15e0:	4b03      	ldr	r3, [pc, #12]	; (15f0 <lightIgniterA+0x20>)
    15e2:	4798      	blx	r3
    15e4:	6060      	str	r0, [r4, #4]
}
    15e6:	bd10      	pop	{r4, pc}
    15e8:	41004498 	.word	0x41004498
    15ec:	200002b4 	.word	0x200002b4
    15f0:	00001125 	.word	0x00001125

000015f4 <lightIgniterB>:
    15f4:	2280      	movs	r2, #128	; 0x80
    15f6:	4b05      	ldr	r3, [pc, #20]	; (160c <lightIgniterB+0x18>)
    15f8:	03d2      	lsls	r2, r2, #15

void lightIgniterB() {
    15fa:	b510      	push	{r4, lr}
    15fc:	601a      	str	r2, [r3, #0]
    pinHigh(fireBPin);
    charges.igniterBHot = true;
    15fe:	2301      	movs	r3, #1
    1600:	4c03      	ldr	r4, [pc, #12]	; (1610 <lightIgniterB+0x1c>)
    1602:	7223      	strb	r3, [r4, #8]
    charges.igniterBTick = millis();
    1604:	4b03      	ldr	r3, [pc, #12]	; (1614 <lightIgniterB+0x20>)
    1606:	4798      	blx	r3
    1608:	60e0      	str	r0, [r4, #12]
}
    160a:	bd10      	pop	{r4, pc}
    160c:	41004498 	.word	0x41004498
    1610:	200002b4 	.word	0x200002b4
    1614:	00001125 	.word	0x00001125

00001618 <lightIgniterC>:
    1618:	2280      	movs	r2, #128	; 0x80
    161a:	4b05      	ldr	r3, [pc, #20]	; (1630 <lightIgniterC+0x18>)
    161c:	0492      	lsls	r2, r2, #18

void lightIgniterC() {
    161e:	b510      	push	{r4, lr}
    1620:	619a      	str	r2, [r3, #24]
    pinHigh(fireCPin);
    charges.igniterCHot = true;
    1622:	2301      	movs	r3, #1
    1624:	4c03      	ldr	r4, [pc, #12]	; (1634 <lightIgniterC+0x1c>)
    1626:	7423      	strb	r3, [r4, #16]
    charges.igniterCTick = millis();
    1628:	4b03      	ldr	r3, [pc, #12]	; (1638 <lightIgniterC+0x20>)
    162a:	4798      	blx	r3
    162c:	6160      	str	r0, [r4, #20]
}
    162e:	bd10      	pop	{r4, pc}
    1630:	41004400 	.word	0x41004400
    1634:	200002b4 	.word	0x200002b4
    1638:	00001125 	.word	0x00001125

0000163c <lightIgniterD>:
    163c:	2280      	movs	r2, #128	; 0x80
    163e:	4b05      	ldr	r3, [pc, #20]	; (1654 <lightIgniterD+0x18>)
    1640:	0452      	lsls	r2, r2, #17

void lightIgniterD() {
    1642:	b510      	push	{r4, lr}
    1644:	619a      	str	r2, [r3, #24]
    pinHigh(fireDPin);
    charges.igniterDHot = true;
    1646:	2301      	movs	r3, #1
    1648:	4c03      	ldr	r4, [pc, #12]	; (1658 <lightIgniterD+0x1c>)
    164a:	7623      	strb	r3, [r4, #24]
    charges.igniterDTick = millis();
    164c:	4b03      	ldr	r3, [pc, #12]	; (165c <lightIgniterD+0x20>)
    164e:	4798      	blx	r3
    1650:	61e0      	str	r0, [r4, #28]
    1652:	bd10      	pop	{r4, pc}
    1654:	41004400 	.word	0x41004400
    1658:	200002b4 	.word	0x200002b4
    165c:	00001125 	.word	0x00001125

00001660 <igniteMain>:
            charges.igniterDHot = false;
        }
    }
}

void igniteMain() {
    1660:	b510      	push	{r4, lr}

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    1662:	4c11      	ldr	r4, [pc, #68]	; (16a8 <igniteMain+0x48>)
    1664:	7863      	ldrb	r3, [r4, #1]
    1666:	2b00      	cmp	r3, #0
    1668:	d104      	bne.n	1674 <igniteMain+0x14>
    166a:	7823      	ldrb	r3, [r4, #0]
    166c:	2b00      	cmp	r3, #0
    166e:	d001      	beq.n	1674 <igniteMain+0x14>
        lightIgniterA();
    1670:	4b0e      	ldr	r3, [pc, #56]	; (16ac <igniteMain+0x4c>)
    1672:	4798      	blx	r3
    }
    if(deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    1674:	79e3      	ldrb	r3, [r4, #7]
    1676:	2b00      	cmp	r3, #0
    1678:	d104      	bne.n	1684 <igniteMain+0x24>
    167a:	79a3      	ldrb	r3, [r4, #6]
    167c:	2b00      	cmp	r3, #0
    167e:	d001      	beq.n	1684 <igniteMain+0x24>
        lightIgniterB();
    1680:	4b0b      	ldr	r3, [pc, #44]	; (16b0 <igniteMain+0x50>)
    1682:	4798      	blx	r3
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    1684:	7b63      	ldrb	r3, [r4, #13]
    1686:	2b00      	cmp	r3, #0
    1688:	d104      	bne.n	1694 <igniteMain+0x34>
    168a:	7b23      	ldrb	r3, [r4, #12]
    168c:	2b00      	cmp	r3, #0
    168e:	d001      	beq.n	1694 <igniteMain+0x34>
        lightIgniterC();
    1690:	4b08      	ldr	r3, [pc, #32]	; (16b4 <igniteMain+0x54>)
    1692:	4798      	blx	r3
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    1694:	7ce3      	ldrb	r3, [r4, #19]
    1696:	2b00      	cmp	r3, #0
    1698:	d104      	bne.n	16a4 <igniteMain+0x44>
    169a:	7ca3      	ldrb	r3, [r4, #18]
    169c:	2b00      	cmp	r3, #0
    169e:	d001      	beq.n	16a4 <igniteMain+0x44>
        lightIgniterD();
    16a0:	4b05      	ldr	r3, [pc, #20]	; (16b8 <igniteMain+0x58>)
    16a2:	4798      	blx	r3
    }
}
    16a4:	bd10      	pop	{r4, pc}
    16a6:	46c0      	nop			; (mov r8, r8)
    16a8:	20000140 	.word	0x20000140
    16ac:	000015d1 	.word	0x000015d1
    16b0:	000015f5 	.word	0x000015f5
    16b4:	00001619 	.word	0x00001619
    16b8:	0000163d 	.word	0x0000163d

000016bc <computeKalmanGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    16bc:	4bdc      	ldr	r3, [pc, #880]	; (1a30 <computeKalmanGains+0x374>)
    16be:	48dd      	ldr	r0, [pc, #884]	; (1a34 <computeKalmanGains+0x378>)
    16c0:	49dd      	ldr	r1, [pc, #884]	; (1a38 <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    16c2:	b5f0      	push	{r4, r5, r6, r7, lr}
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    16c4:	6098      	str	r0, [r3, #8]
    16c6:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    16c8:	6298      	str	r0, [r3, #40]	; 0x28
    16ca:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    16cc:	48db      	ldr	r0, [pc, #876]	; (1a3c <computeKalmanGains+0x380>)
    16ce:	49dc      	ldr	r1, [pc, #880]	; (1a40 <computeKalmanGains+0x384>)
    16d0:	2200      	movs	r2, #0
    16d2:	6118      	str	r0, [r3, #16]
    16d4:	6159      	str	r1, [r3, #20]
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
            kgain[i][j] = 1.0;
    16d6:	2000      	movs	r0, #0
    16d8:	49da      	ldr	r1, [pc, #872]	; (1a44 <computeKalmanGains+0x388>)
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    16da:	4cdb      	ldr	r4, [pc, #876]	; (1a48 <computeKalmanGains+0x38c>)
    16dc:	468c      	mov	ip, r1
    16de:	4ddb      	ldr	r5, [pc, #876]	; (1a4c <computeKalmanGains+0x390>)
            kgain[i][j] = 1.0;
    16e0:	49db      	ldr	r1, [pc, #876]	; (1a50 <computeKalmanGains+0x394>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    16e2:	b0cd      	sub	sp, #308	; 0x134
    16e4:	ae40      	add	r6, sp, #256	; 0x100
    16e6:	1997      	adds	r7, r2, r6
    16e8:	4666      	mov	r6, ip
    16ea:	1996      	adds	r6, r2, r6
    16ec:	3210      	adds	r2, #16
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    16ee:	603c      	str	r4, [r7, #0]
    16f0:	607d      	str	r5, [r7, #4]
            kgain[i][j] = 1.0;
    16f2:	6030      	str	r0, [r6, #0]
    16f4:	6071      	str	r1, [r6, #4]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    16f6:	60bc      	str	r4, [r7, #8]
    16f8:	60fd      	str	r5, [r7, #12]
            kgain[i][j] = 1.0;
    16fa:	60b0      	str	r0, [r6, #8]
    16fc:	60f1      	str	r1, [r6, #12]
    phi[0][2]    = dt*dt/2.0;
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
    16fe:	2a30      	cmp	r2, #48	; 0x30
    1700:	d1f0      	bne.n	16e4 <computeKalmanGains+0x28>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1702:	6819      	ldr	r1, [r3, #0]
    1704:	685a      	ldr	r2, [r3, #4]
    1706:	911a      	str	r1, [sp, #104]	; 0x68
    1708:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    170a:	6999      	ldr	r1, [r3, #24]
    170c:	69da      	ldr	r2, [r3, #28]
    170e:	911c      	str	r1, [sp, #112]	; 0x70
    1710:	921d      	str	r2, [sp, #116]	; 0x74
    1712:	6a19      	ldr	r1, [r3, #32]
    1714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1716:	911e      	str	r1, [sp, #120]	; 0x78
    1718:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    171a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    171c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    171e:	9120      	str	r1, [sp, #128]	; 0x80
    1720:	9221      	str	r2, [sp, #132]	; 0x84
    1722:	6b99      	ldr	r1, [r3, #56]	; 0x38
    1724:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1726:	9122      	str	r1, [sp, #136]	; 0x88
    1728:	9223      	str	r2, [sp, #140]	; 0x8c
    172a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    172c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    172e:	9124      	str	r1, [sp, #144]	; 0x90
    1730:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1732:	6c99      	ldr	r1, [r3, #72]	; 0x48
    1734:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    1736:	913a      	str	r1, [sp, #232]	; 0xe8
    1738:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    173a:	6d19      	ldr	r1, [r3, #80]	; 0x50
    173c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    173e:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    1740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1742:	933e      	str	r3, [sp, #248]	; 0xf8
    1744:	943f      	str	r4, [sp, #252]	; 0xfc
    1746:	2300      	movs	r3, #0
    1748:	4cc2      	ldr	r4, [pc, #776]	; (1a54 <computeKalmanGains+0x398>)
    174a:	913c      	str	r1, [sp, #240]	; 0xf0
    174c:	923d      	str	r2, [sp, #244]	; 0xf4
    174e:	9302      	str	r3, [sp, #8]
    1750:	9403      	str	r4, [sp, #12]
    1752:	2300      	movs	r3, #0
    1754:	2400      	movs	r4, #0
    1756:	9310      	str	r3, [sp, #64]	; 0x40
    1758:	9411      	str	r4, [sp, #68]	; 0x44
    175a:	9300      	str	r3, [sp, #0]
    175c:	9401      	str	r4, [sp, #4]
    175e:	9304      	str	r3, [sp, #16]
    1760:	9405      	str	r4, [sp, #20]
    1762:	2300      	movs	r3, #0
    1764:	4cbb      	ldr	r4, [pc, #748]	; (1a54 <computeKalmanGains+0x398>)
    1766:	930e      	str	r3, [sp, #56]	; 0x38
    1768:	940f      	str	r4, [sp, #60]	; 0x3c
    176a:	2300      	movs	r3, #0
    176c:	2400      	movs	r4, #0
    176e:	9308      	str	r3, [sp, #32]
    1770:	9409      	str	r4, [sp, #36]	; 0x24
    1772:	930c      	str	r3, [sp, #48]	; 0x30
    1774:	940d      	str	r4, [sp, #52]	; 0x34
    1776:	930a      	str	r3, [sp, #40]	; 0x28
    1778:	940b      	str	r4, [sp, #44]	; 0x2c
    177a:	2480      	movs	r4, #128	; 0x80
    177c:	2300      	movs	r3, #0
    177e:	05e4      	lsls	r4, r4, #23
    1780:	9306      	str	r3, [sp, #24]
    1782:	9407      	str	r4, [sp, #28]
    1784:	2300      	movs	r3, #0
    1786:	9338      	str	r3, [sp, #224]	; 0xe0

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1788:	4db3      	ldr	r5, [pc, #716]	; (1a58 <computeKalmanGains+0x39c>)
    178a:	9a06      	ldr	r2, [sp, #24]
    178c:	9b07      	ldr	r3, [sp, #28]
    178e:	981a      	ldr	r0, [sp, #104]	; 0x68
    1790:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1792:	47a8      	blx	r5
    1794:	4aa7      	ldr	r2, [pc, #668]	; (1a34 <computeKalmanGains+0x378>)
    1796:	0006      	movs	r6, r0
    1798:	000f      	movs	r7, r1
    179a:	9808      	ldr	r0, [sp, #32]
    179c:	9909      	ldr	r1, [sp, #36]	; 0x24
    179e:	4ba6      	ldr	r3, [pc, #664]	; (1a38 <computeKalmanGains+0x37c>)
    17a0:	47a8      	blx	r5
    17a2:	4cae      	ldr	r4, [pc, #696]	; (1a5c <computeKalmanGains+0x3a0>)
    17a4:	0002      	movs	r2, r0
    17a6:	000b      	movs	r3, r1
    17a8:	0030      	movs	r0, r6
    17aa:	0039      	movs	r1, r7
    17ac:	47a0      	blx	r4
    17ae:	4aa3      	ldr	r2, [pc, #652]	; (1a3c <computeKalmanGains+0x380>)
    17b0:	0006      	movs	r6, r0
    17b2:	000f      	movs	r7, r1
    17b4:	9800      	ldr	r0, [sp, #0]
    17b6:	9901      	ldr	r1, [sp, #4]
    17b8:	4ba1      	ldr	r3, [pc, #644]	; (1a40 <computeKalmanGains+0x384>)
    17ba:	47a8      	blx	r5
    17bc:	0002      	movs	r2, r0
    17be:	000b      	movs	r3, r1
    17c0:	0030      	movs	r0, r6
    17c2:	0039      	movs	r1, r7
    17c4:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    17c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    17c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    17ca:	9016      	str	r0, [sp, #88]	; 0x58
    17cc:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    17ce:	981a      	ldr	r0, [sp, #104]	; 0x68
    17d0:	991b      	ldr	r1, [sp, #108]	; 0x6c
    17d2:	47a8      	blx	r5
    17d4:	4a97      	ldr	r2, [pc, #604]	; (1a34 <computeKalmanGains+0x378>)
    17d6:	0006      	movs	r6, r0
    17d8:	000f      	movs	r7, r1
    17da:	980e      	ldr	r0, [sp, #56]	; 0x38
    17dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    17de:	4b96      	ldr	r3, [pc, #600]	; (1a38 <computeKalmanGains+0x37c>)
    17e0:	47a8      	blx	r5
    17e2:	0002      	movs	r2, r0
    17e4:	000b      	movs	r3, r1
    17e6:	0030      	movs	r0, r6
    17e8:	0039      	movs	r1, r7
    17ea:	47a0      	blx	r4
    17ec:	4a93      	ldr	r2, [pc, #588]	; (1a3c <computeKalmanGains+0x380>)
    17ee:	0006      	movs	r6, r0
    17f0:	000f      	movs	r7, r1
    17f2:	9810      	ldr	r0, [sp, #64]	; 0x40
    17f4:	9911      	ldr	r1, [sp, #68]	; 0x44
    17f6:	4b92      	ldr	r3, [pc, #584]	; (1a40 <computeKalmanGains+0x384>)
    17f8:	47a8      	blx	r5
    17fa:	0002      	movs	r2, r0
    17fc:	000b      	movs	r3, r1
    17fe:	0030      	movs	r0, r6
    1800:	0039      	movs	r1, r7
    1802:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1804:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1806:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1808:	9012      	str	r0, [sp, #72]	; 0x48
    180a:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    180c:	981a      	ldr	r0, [sp, #104]	; 0x68
    180e:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1810:	47a8      	blx	r5
    1812:	4a88      	ldr	r2, [pc, #544]	; (1a34 <computeKalmanGains+0x378>)
    1814:	0006      	movs	r6, r0
    1816:	000f      	movs	r7, r1
    1818:	9804      	ldr	r0, [sp, #16]
    181a:	9905      	ldr	r1, [sp, #20]
    181c:	4b86      	ldr	r3, [pc, #536]	; (1a38 <computeKalmanGains+0x37c>)
    181e:	47a8      	blx	r5
    1820:	0002      	movs	r2, r0
    1822:	000b      	movs	r3, r1
    1824:	0030      	movs	r0, r6
    1826:	0039      	movs	r1, r7
    1828:	47a0      	blx	r4
    182a:	4a84      	ldr	r2, [pc, #528]	; (1a3c <computeKalmanGains+0x380>)
    182c:	0006      	movs	r6, r0
    182e:	000f      	movs	r7, r1
    1830:	9802      	ldr	r0, [sp, #8]
    1832:	9903      	ldr	r1, [sp, #12]
    1834:	4b82      	ldr	r3, [pc, #520]	; (1a40 <computeKalmanGains+0x384>)
    1836:	47a8      	blx	r5
    1838:	0002      	movs	r2, r0
    183a:	000b      	movs	r3, r1
    183c:	0030      	movs	r0, r6
    183e:	0039      	movs	r1, r7
    1840:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1842:	9a06      	ldr	r2, [sp, #24]
    1844:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1846:	9014      	str	r0, [sp, #80]	; 0x50
    1848:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    184a:	981c      	ldr	r0, [sp, #112]	; 0x70
    184c:	991d      	ldr	r1, [sp, #116]	; 0x74
    184e:	47a8      	blx	r5
    1850:	9a08      	ldr	r2, [sp, #32]
    1852:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1854:	0006      	movs	r6, r0
    1856:	000f      	movs	r7, r1
    1858:	981e      	ldr	r0, [sp, #120]	; 0x78
    185a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    185c:	47a8      	blx	r5
    185e:	0002      	movs	r2, r0
    1860:	000b      	movs	r3, r1
    1862:	0030      	movs	r0, r6
    1864:	0039      	movs	r1, r7
    1866:	47a0      	blx	r4
    1868:	4a72      	ldr	r2, [pc, #456]	; (1a34 <computeKalmanGains+0x378>)
    186a:	0006      	movs	r6, r0
    186c:	000f      	movs	r7, r1
    186e:	9800      	ldr	r0, [sp, #0]
    1870:	9901      	ldr	r1, [sp, #4]
    1872:	4b71      	ldr	r3, [pc, #452]	; (1a38 <computeKalmanGains+0x37c>)
    1874:	47a8      	blx	r5
    1876:	0002      	movs	r2, r0
    1878:	000b      	movs	r3, r1
    187a:	0030      	movs	r0, r6
    187c:	0039      	movs	r1, r7
    187e:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1884:	9018      	str	r0, [sp, #96]	; 0x60
    1886:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1888:	981c      	ldr	r0, [sp, #112]	; 0x70
    188a:	991d      	ldr	r1, [sp, #116]	; 0x74
    188c:	47a8      	blx	r5
    188e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1890:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1892:	0006      	movs	r6, r0
    1894:	000f      	movs	r7, r1
    1896:	981e      	ldr	r0, [sp, #120]	; 0x78
    1898:	991f      	ldr	r1, [sp, #124]	; 0x7c
    189a:	47a8      	blx	r5
    189c:	0002      	movs	r2, r0
    189e:	000b      	movs	r3, r1
    18a0:	0030      	movs	r0, r6
    18a2:	0039      	movs	r1, r7
    18a4:	47a0      	blx	r4
    18a6:	4a63      	ldr	r2, [pc, #396]	; (1a34 <computeKalmanGains+0x378>)
    18a8:	0006      	movs	r6, r0
    18aa:	000f      	movs	r7, r1
    18ac:	9810      	ldr	r0, [sp, #64]	; 0x40
    18ae:	9911      	ldr	r1, [sp, #68]	; 0x44
    18b0:	4b61      	ldr	r3, [pc, #388]	; (1a38 <computeKalmanGains+0x37c>)
    18b2:	47a8      	blx	r5
    18b4:	0002      	movs	r2, r0
    18b6:	000b      	movs	r3, r1
    18b8:	0030      	movs	r0, r6
    18ba:	0039      	movs	r1, r7
    18bc:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    18be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    18c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    18c2:	9026      	str	r0, [sp, #152]	; 0x98
    18c4:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    18c6:	981c      	ldr	r0, [sp, #112]	; 0x70
    18c8:	991d      	ldr	r1, [sp, #116]	; 0x74
    18ca:	47a8      	blx	r5
    18cc:	9a04      	ldr	r2, [sp, #16]
    18ce:	9b05      	ldr	r3, [sp, #20]
    18d0:	0006      	movs	r6, r0
    18d2:	000f      	movs	r7, r1
    18d4:	981e      	ldr	r0, [sp, #120]	; 0x78
    18d6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    18d8:	47a8      	blx	r5
    18da:	0002      	movs	r2, r0
    18dc:	000b      	movs	r3, r1
    18de:	0030      	movs	r0, r6
    18e0:	0039      	movs	r1, r7
    18e2:	47a0      	blx	r4
    18e4:	4a53      	ldr	r2, [pc, #332]	; (1a34 <computeKalmanGains+0x378>)
    18e6:	0006      	movs	r6, r0
    18e8:	000f      	movs	r7, r1
    18ea:	9802      	ldr	r0, [sp, #8]
    18ec:	9903      	ldr	r1, [sp, #12]
    18ee:	4b52      	ldr	r3, [pc, #328]	; (1a38 <computeKalmanGains+0x37c>)
    18f0:	47a8      	blx	r5
    18f2:	0002      	movs	r2, r0
    18f4:	000b      	movs	r3, r1
    18f6:	0030      	movs	r0, r6
    18f8:	0039      	movs	r1, r7
    18fa:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    18fc:	9a06      	ldr	r2, [sp, #24]
    18fe:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1900:	9028      	str	r0, [sp, #160]	; 0xa0
    1902:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1904:	9820      	ldr	r0, [sp, #128]	; 0x80
    1906:	9921      	ldr	r1, [sp, #132]	; 0x84
    1908:	47a8      	blx	r5
    190a:	9a08      	ldr	r2, [sp, #32]
    190c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    190e:	0006      	movs	r6, r0
    1910:	000f      	movs	r7, r1
    1912:	9822      	ldr	r0, [sp, #136]	; 0x88
    1914:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1916:	47a8      	blx	r5
    1918:	0002      	movs	r2, r0
    191a:	000b      	movs	r3, r1
    191c:	0030      	movs	r0, r6
    191e:	0039      	movs	r1, r7
    1920:	47a0      	blx	r4
    1922:	9a00      	ldr	r2, [sp, #0]
    1924:	9b01      	ldr	r3, [sp, #4]
    1926:	0006      	movs	r6, r0
    1928:	000f      	movs	r7, r1
    192a:	9824      	ldr	r0, [sp, #144]	; 0x90
    192c:	9925      	ldr	r1, [sp, #148]	; 0x94
    192e:	47a8      	blx	r5
    1930:	0002      	movs	r2, r0
    1932:	000b      	movs	r3, r1
    1934:	0030      	movs	r0, r6
    1936:	0039      	movs	r1, r7
    1938:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    193a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    193c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    193e:	902e      	str	r0, [sp, #184]	; 0xb8
    1940:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1942:	9820      	ldr	r0, [sp, #128]	; 0x80
    1944:	9921      	ldr	r1, [sp, #132]	; 0x84
    1946:	47a8      	blx	r5
    1948:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    194a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    194c:	0006      	movs	r6, r0
    194e:	000f      	movs	r7, r1
    1950:	9822      	ldr	r0, [sp, #136]	; 0x88
    1952:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1954:	47a8      	blx	r5
    1956:	0002      	movs	r2, r0
    1958:	000b      	movs	r3, r1
    195a:	0030      	movs	r0, r6
    195c:	0039      	movs	r1, r7
    195e:	47a0      	blx	r4
    1960:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1962:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1964:	0006      	movs	r6, r0
    1966:	000f      	movs	r7, r1
    1968:	9824      	ldr	r0, [sp, #144]	; 0x90
    196a:	9925      	ldr	r1, [sp, #148]	; 0x94
    196c:	47a8      	blx	r5
    196e:	0002      	movs	r2, r0
    1970:	000b      	movs	r3, r1
    1972:	0030      	movs	r0, r6
    1974:	0039      	movs	r1, r7
    1976:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    197a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    197c:	9006      	str	r0, [sp, #24]
    197e:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1980:	9820      	ldr	r0, [sp, #128]	; 0x80
    1982:	9921      	ldr	r1, [sp, #132]	; 0x84
    1984:	47a8      	blx	r5
    1986:	9a04      	ldr	r2, [sp, #16]
    1988:	9b05      	ldr	r3, [sp, #20]
    198a:	0006      	movs	r6, r0
    198c:	000f      	movs	r7, r1
    198e:	9822      	ldr	r0, [sp, #136]	; 0x88
    1990:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1992:	47a8      	blx	r5
    1994:	0002      	movs	r2, r0
    1996:	000b      	movs	r3, r1
    1998:	0030      	movs	r0, r6
    199a:	0039      	movs	r1, r7
    199c:	47a0      	blx	r4
    199e:	9a02      	ldr	r2, [sp, #8]
    19a0:	9b03      	ldr	r3, [sp, #12]
    19a2:	0006      	movs	r6, r0
    19a4:	000f      	movs	r7, r1
    19a6:	9824      	ldr	r0, [sp, #144]	; 0x90
    19a8:	9925      	ldr	r1, [sp, #148]	; 0x94
    19aa:	47a8      	blx	r5
    19ac:	0002      	movs	r2, r0
    19ae:	000b      	movs	r3, r1
    19b0:	0030      	movs	r0, r6
    19b2:	0039      	movs	r1, r7
    19b4:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    19b6:	4a1f      	ldr	r2, [pc, #124]	; (1a34 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    19b8:	9002      	str	r0, [sp, #8]
    19ba:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    19bc:	9812      	ldr	r0, [sp, #72]	; 0x48
    19be:	9913      	ldr	r1, [sp, #76]	; 0x4c
    19c0:	4b1d      	ldr	r3, [pc, #116]	; (1a38 <computeKalmanGains+0x37c>)
    19c2:	47a8      	blx	r5
    19c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    19c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    19c8:	47a0      	blx	r4
    19ca:	4a1c      	ldr	r2, [pc, #112]	; (1a3c <computeKalmanGains+0x380>)
    19cc:	0006      	movs	r6, r0
    19ce:	000f      	movs	r7, r1
    19d0:	9814      	ldr	r0, [sp, #80]	; 0x50
    19d2:	9915      	ldr	r1, [sp, #84]	; 0x54
    19d4:	4b1a      	ldr	r3, [pc, #104]	; (1a40 <computeKalmanGains+0x384>)
    19d6:	47a8      	blx	r5
    19d8:	0002      	movs	r2, r0
    19da:	000b      	movs	r3, r1
    19dc:	0030      	movs	r0, r6
    19de:	0039      	movs	r1, r7
    19e0:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    19e2:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    19e4:	9008      	str	r0, [sp, #32]
    19e6:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    19e8:	9816      	ldr	r0, [sp, #88]	; 0x58
    19ea:	9917      	ldr	r1, [sp, #92]	; 0x5c
    19ec:	2300      	movs	r3, #0
    19ee:	47a8      	blx	r5
    19f0:	0006      	movs	r6, r0
    19f2:	000f      	movs	r7, r1
    19f4:	0002      	movs	r2, r0
    19f6:	000b      	movs	r3, r1
    19f8:	9812      	ldr	r0, [sp, #72]	; 0x48
    19fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
    19fc:	47a0      	blx	r4
    19fe:	4a0d      	ldr	r2, [pc, #52]	; (1a34 <computeKalmanGains+0x378>)
    1a00:	9000      	str	r0, [sp, #0]
    1a02:	9101      	str	r1, [sp, #4]
    1a04:	9814      	ldr	r0, [sp, #80]	; 0x50
    1a06:	9915      	ldr	r1, [sp, #84]	; 0x54
    1a08:	4b0b      	ldr	r3, [pc, #44]	; (1a38 <computeKalmanGains+0x37c>)
    1a0a:	47a8      	blx	r5
    1a0c:	0002      	movs	r2, r0
    1a0e:	000b      	movs	r3, r1
    1a10:	9800      	ldr	r0, [sp, #0]
    1a12:	9901      	ldr	r1, [sp, #4]
    1a14:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1a16:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1a18:	9030      	str	r0, [sp, #192]	; 0xc0
    1a1a:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1a1c:	9812      	ldr	r0, [sp, #72]	; 0x48
    1a1e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1a20:	2300      	movs	r3, #0
    1a22:	47a8      	blx	r5
    1a24:	0032      	movs	r2, r6
    1a26:	003b      	movs	r3, r7
    1a28:	47a0      	blx	r4
    1a2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1a2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1a2e:	e017      	b.n	1a60 <computeKalmanGains+0x3a4>
    1a30:	20000010 	.word	0x20000010
    1a34:	47ae147b 	.word	0x47ae147b
    1a38:	3f747ae1 	.word	0x3f747ae1
    1a3c:	eb1c432d 	.word	0xeb1c432d
    1a40:	3eea36e2 	.word	0x3eea36e2
    1a44:	20000280 	.word	0x20000280
    1a48:	d2f1a9fc 	.word	0xd2f1a9fc
    1a4c:	3f50624d 	.word	0x3f50624d
    1a50:	3ff00000 	.word	0x3ff00000
    1a54:	40220000 	.word	0x40220000
    1a58:	00005519 	.word	0x00005519
    1a5c:	00004679 	.word	0x00004679
    1a60:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1a62:	4ad9      	ldr	r2, [pc, #868]	; (1dc8 <computeKalmanGains+0x70c>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1a64:	9112      	str	r1, [sp, #72]	; 0x48
    1a66:	9004      	str	r0, [sp, #16]
    1a68:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1a6a:	4bd8      	ldr	r3, [pc, #864]	; (1dcc <computeKalmanGains+0x710>)
    1a6c:	9826      	ldr	r0, [sp, #152]	; 0x98
    1a6e:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1a70:	47a8      	blx	r5
    1a72:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1a74:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1a76:	47a0      	blx	r4
    1a78:	4ad5      	ldr	r2, [pc, #852]	; (1dd0 <computeKalmanGains+0x714>)
    1a7a:	0006      	movs	r6, r0
    1a7c:	000f      	movs	r7, r1
    1a7e:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1a80:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1a82:	4bd4      	ldr	r3, [pc, #848]	; (1dd4 <computeKalmanGains+0x718>)
    1a84:	47a8      	blx	r5
    1a86:	0002      	movs	r2, r0
    1a88:	000b      	movs	r3, r1
    1a8a:	0030      	movs	r0, r6
    1a8c:	0039      	movs	r1, r7
    1a8e:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1a90:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1a92:	902a      	str	r0, [sp, #168]	; 0xa8
    1a94:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1a96:	9818      	ldr	r0, [sp, #96]	; 0x60
    1a98:	9919      	ldr	r1, [sp, #100]	; 0x64
    1a9a:	2300      	movs	r3, #0
    1a9c:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1a9e:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1aa0:	9032      	str	r0, [sp, #200]	; 0xc8
    1aa2:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1aa4:	9826      	ldr	r0, [sp, #152]	; 0x98
    1aa6:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1aa8:	2300      	movs	r3, #0
    1aaa:	47a8      	blx	r5
    1aac:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1aae:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1ab0:	47a0      	blx	r4
    1ab2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1ab4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1ab6:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1ab8:	4ac3      	ldr	r2, [pc, #780]	; (1dc8 <computeKalmanGains+0x70c>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1aba:	902c      	str	r0, [sp, #176]	; 0xb0
    1abc:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1abe:	9806      	ldr	r0, [sp, #24]
    1ac0:	9907      	ldr	r1, [sp, #28]
    1ac2:	4bc2      	ldr	r3, [pc, #776]	; (1dcc <computeKalmanGains+0x710>)
    1ac4:	47a8      	blx	r5
    1ac6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    1ac8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1aca:	47a0      	blx	r4
    1acc:	4ac0      	ldr	r2, [pc, #768]	; (1dd0 <computeKalmanGains+0x714>)
    1ace:	0006      	movs	r6, r0
    1ad0:	000f      	movs	r7, r1
    1ad2:	9802      	ldr	r0, [sp, #8]
    1ad4:	9903      	ldr	r1, [sp, #12]
    1ad6:	4bbf      	ldr	r3, [pc, #764]	; (1dd4 <computeKalmanGains+0x718>)
    1ad8:	47a8      	blx	r5
    1ada:	0002      	movs	r2, r0
    1adc:	000b      	movs	r3, r1
    1ade:	0030      	movs	r0, r6
    1ae0:	0039      	movs	r1, r7
    1ae2:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1ae4:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1ae6:	9000      	str	r0, [sp, #0]
    1ae8:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1aea:	982e      	ldr	r0, [sp, #184]	; 0xb8
    1aec:	992f      	ldr	r1, [sp, #188]	; 0xbc
    1aee:	2300      	movs	r3, #0
    1af0:	47a8      	blx	r5
    1af2:	0006      	movs	r6, r0
    1af4:	000f      	movs	r7, r1
    1af6:	0002      	movs	r2, r0
    1af8:	000b      	movs	r3, r1
    1afa:	9806      	ldr	r0, [sp, #24]
    1afc:	9907      	ldr	r1, [sp, #28]
    1afe:	47a0      	blx	r4
    1b00:	4ab1      	ldr	r2, [pc, #708]	; (1dc8 <computeKalmanGains+0x70c>)
    1b02:	900a      	str	r0, [sp, #40]	; 0x28
    1b04:	910b      	str	r1, [sp, #44]	; 0x2c
    1b06:	9802      	ldr	r0, [sp, #8]
    1b08:	9903      	ldr	r1, [sp, #12]
    1b0a:	4bb0      	ldr	r3, [pc, #704]	; (1dcc <computeKalmanGains+0x710>)
    1b0c:	47a8      	blx	r5
    1b0e:	0002      	movs	r2, r0
    1b10:	000b      	movs	r3, r1
    1b12:	980a      	ldr	r0, [sp, #40]	; 0x28
    1b14:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1b16:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1b18:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1b1a:	9010      	str	r0, [sp, #64]	; 0x40
    1b1c:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1b1e:	9806      	ldr	r0, [sp, #24]
    1b20:	9907      	ldr	r1, [sp, #28]
    1b22:	2300      	movs	r3, #0
    1b24:	47a8      	blx	r5
    1b26:	0032      	movs	r2, r6
    1b28:	003b      	movs	r3, r7
    1b2a:	47a0      	blx	r4
    1b2c:	9a02      	ldr	r2, [sp, #8]
    1b2e:	9b03      	ldr	r3, [sp, #12]
    1b30:	47a0      	blx	r4
    1b32:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    1b34:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    1b36:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1b38:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    1b3a:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1b3c:	9002      	str	r0, [sp, #8]
    1b3e:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1b40:	9808      	ldr	r0, [sp, #32]
    1b42:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b44:	47a0      	blx	r4
    1b46:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    1b48:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1b4a:	900a      	str	r0, [sp, #40]	; 0x28
    1b4c:	910b      	str	r1, [sp, #44]	; 0x2c
    1b4e:	9802      	ldr	r0, [sp, #8]
    1b50:	9903      	ldr	r1, [sp, #12]
    1b52:	47a0      	blx	r4
    1b54:	9a00      	ldr	r2, [sp, #0]
    1b56:	9b01      	ldr	r3, [sp, #4]
    1b58:	900c      	str	r0, [sp, #48]	; 0x30
    1b5a:	910d      	str	r1, [sp, #52]	; 0x34
    1b5c:	9804      	ldr	r0, [sp, #16]
    1b5e:	9916      	ldr	r1, [sp, #88]	; 0x58
    1b60:	47a8      	blx	r5
    1b62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b66:	900e      	str	r0, [sp, #56]	; 0x38
    1b68:	910f      	str	r1, [sp, #60]	; 0x3c
    1b6a:	980a      	ldr	r0, [sp, #40]	; 0x28
    1b6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1b6e:	47a8      	blx	r5
    1b70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1b72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b74:	4e98      	ldr	r6, [pc, #608]	; (1dd8 <computeKalmanGains+0x71c>)
    1b76:	47b0      	blx	r6

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1b78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1b7c:	9006      	str	r0, [sp, #24]
    1b7e:	9107      	str	r1, [sp, #28]

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1b80:	9808      	ldr	r0, [sp, #32]
    1b82:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b84:	47a8      	blx	r5
    1b86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1b88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b8a:	47b0      	blx	r6
    1b8c:	9a06      	ldr	r2, [sp, #24]
    1b8e:	9b07      	ldr	r3, [sp, #28]
    1b90:	4e92      	ldr	r6, [pc, #584]	; (1ddc <computeKalmanGains+0x720>)
    1b92:	47b0      	blx	r6
    1b94:	9034      	str	r0, [sp, #208]	; 0xd0
    1b96:	9135      	str	r1, [sp, #212]	; 0xd4
    1b98:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1b9a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1b9c:	4990      	ldr	r1, [pc, #576]	; (1de0 <computeKalmanGains+0x724>)
    1b9e:	600a      	str	r2, [r1, #0]
    1ba0:	604b      	str	r3, [r1, #4]
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1ba2:	9808      	ldr	r0, [sp, #32]
    1ba4:	9909      	ldr	r1, [sp, #36]	; 0x24
    1ba6:	2280      	movs	r2, #128	; 0x80
    1ba8:	0612      	lsls	r2, r2, #24
    1baa:	4694      	mov	ip, r2
    1bac:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1bae:	9a04      	ldr	r2, [sp, #16]
    1bb0:	4463      	add	r3, ip
    1bb2:	932e      	str	r3, [sp, #184]	; 0xb8
    1bb4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1bb6:	47a8      	blx	r5
    1bb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1bbc:	0006      	movs	r6, r0
    1bbe:	000f      	movs	r7, r1
    1bc0:	9804      	ldr	r0, [sp, #16]
    1bc2:	9916      	ldr	r1, [sp, #88]	; 0x58
    1bc4:	47a8      	blx	r5
    1bc6:	0002      	movs	r2, r0
    1bc8:	000b      	movs	r3, r1
    1bca:	0030      	movs	r0, r6
    1bcc:	0039      	movs	r1, r7
    1bce:	47a0      	blx	r4
    1bd0:	9a06      	ldr	r2, [sp, #24]
    1bd2:	9b07      	ldr	r3, [sp, #28]
    1bd4:	4e81      	ldr	r6, [pc, #516]	; (1ddc <computeKalmanGains+0x720>)
    1bd6:	47b0      	blx	r6
    1bd8:	900e      	str	r0, [sp, #56]	; 0x38
    1bda:	910f      	str	r1, [sp, #60]	; 0x3c
    1bdc:	4980      	ldr	r1, [pc, #512]	; (1de0 <computeKalmanGains+0x724>)
    1bde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1be0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1be2:	608a      	str	r2, [r1, #8]
    1be4:	60cb      	str	r3, [r1, #12]
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1be6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1be8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1bea:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1bec:	992b      	ldr	r1, [sp, #172]	; 0xac
    1bee:	47a8      	blx	r5
    1bf0:	9a00      	ldr	r2, [sp, #0]
    1bf2:	9b01      	ldr	r3, [sp, #4]
    1bf4:	0006      	movs	r6, r0
    1bf6:	000f      	movs	r7, r1
    1bf8:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1bfa:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1bfc:	47a8      	blx	r5
    1bfe:	0002      	movs	r2, r0
    1c00:	000b      	movs	r3, r1
    1c02:	0030      	movs	r0, r6
    1c04:	0039      	movs	r1, r7
    1c06:	4e74      	ldr	r6, [pc, #464]	; (1dd8 <computeKalmanGains+0x71c>)
    1c08:	47b0      	blx	r6
    1c0a:	9a06      	ldr	r2, [sp, #24]
    1c0c:	9b07      	ldr	r3, [sp, #28]
    1c0e:	4e73      	ldr	r6, [pc, #460]	; (1ddc <computeKalmanGains+0x720>)
    1c10:	47b0      	blx	r6
    1c12:	0002      	movs	r2, r0
    1c14:	000b      	movs	r3, r1
    1c16:	9139      	str	r1, [sp, #228]	; 0xe4
    1c18:	4971      	ldr	r1, [pc, #452]	; (1de0 <computeKalmanGains+0x724>)
    1c1a:	9018      	str	r0, [sp, #96]	; 0x60
    1c1c:	610a      	str	r2, [r1, #16]
    1c1e:	614b      	str	r3, [r1, #20]
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1c20:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1c22:	992b      	ldr	r1, [sp, #172]	; 0xac
    1c24:	9a04      	ldr	r2, [sp, #16]
    1c26:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1c28:	47a8      	blx	r5
    1c2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1c2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1c2e:	0006      	movs	r6, r0
    1c30:	000f      	movs	r7, r1
    1c32:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1c34:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1c36:	47a8      	blx	r5
    1c38:	0002      	movs	r2, r0
    1c3a:	000b      	movs	r3, r1
    1c3c:	0030      	movs	r0, r6
    1c3e:	0039      	movs	r1, r7
    1c40:	47a0      	blx	r4
    1c42:	9a06      	ldr	r2, [sp, #24]
    1c44:	9b07      	ldr	r3, [sp, #28]
    1c46:	4e65      	ldr	r6, [pc, #404]	; (1ddc <computeKalmanGains+0x720>)
    1c48:	47b0      	blx	r6
    1c4a:	9012      	str	r0, [sp, #72]	; 0x48
    1c4c:	9113      	str	r1, [sp, #76]	; 0x4c
    1c4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1c50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1c52:	4963      	ldr	r1, [pc, #396]	; (1de0 <computeKalmanGains+0x724>)
    1c54:	618a      	str	r2, [r1, #24]
    1c56:	61cb      	str	r3, [r1, #28]
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1c58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c5c:	9800      	ldr	r0, [sp, #0]
    1c5e:	9901      	ldr	r1, [sp, #4]
    1c60:	47a8      	blx	r5
    1c62:	9a02      	ldr	r2, [sp, #8]
    1c64:	9b03      	ldr	r3, [sp, #12]
    1c66:	0006      	movs	r6, r0
    1c68:	000f      	movs	r7, r1
    1c6a:	9800      	ldr	r0, [sp, #0]
    1c6c:	9901      	ldr	r1, [sp, #4]
    1c6e:	47a8      	blx	r5
    1c70:	0002      	movs	r2, r0
    1c72:	000b      	movs	r3, r1
    1c74:	0030      	movs	r0, r6
    1c76:	0039      	movs	r1, r7
    1c78:	4e57      	ldr	r6, [pc, #348]	; (1dd8 <computeKalmanGains+0x71c>)
    1c7a:	47b0      	blx	r6
    1c7c:	9a06      	ldr	r2, [sp, #24]
    1c7e:	9b07      	ldr	r3, [sp, #28]
    1c80:	4e56      	ldr	r6, [pc, #344]	; (1ddc <computeKalmanGains+0x720>)
    1c82:	47b0      	blx	r6
    1c84:	9014      	str	r0, [sp, #80]	; 0x50
    1c86:	9115      	str	r1, [sp, #84]	; 0x54
    1c88:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1c8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1c8c:	4954      	ldr	r1, [pc, #336]	; (1de0 <computeKalmanGains+0x724>)
    1c8e:	620a      	str	r2, [r1, #32]
    1c90:	624b      	str	r3, [r1, #36]	; 0x24
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1c92:	9800      	ldr	r0, [sp, #0]
    1c94:	9901      	ldr	r1, [sp, #4]
    1c96:	9a04      	ldr	r2, [sp, #16]
    1c98:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1c9a:	47a8      	blx	r5
    1c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ca0:	0006      	movs	r6, r0
    1ca2:	000f      	movs	r7, r1
    1ca4:	9802      	ldr	r0, [sp, #8]
    1ca6:	9903      	ldr	r1, [sp, #12]
    1ca8:	47a8      	blx	r5
    1caa:	0002      	movs	r2, r0
    1cac:	000b      	movs	r3, r1
    1cae:	0030      	movs	r0, r6
    1cb0:	0039      	movs	r1, r7
    1cb2:	47a0      	blx	r4
    1cb4:	9a06      	ldr	r2, [sp, #24]
    1cb6:	9b07      	ldr	r3, [sp, #28]
    1cb8:	4e48      	ldr	r6, [pc, #288]	; (1ddc <computeKalmanGains+0x720>)
    1cba:	47b0      	blx	r6
    1cbc:	9036      	str	r0, [sp, #216]	; 0xd8
    1cbe:	9137      	str	r1, [sp, #220]	; 0xdc
    1cc0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1cc2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    1cc4:	4946      	ldr	r1, [pc, #280]	; (1de0 <computeKalmanGains+0x724>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1cc6:	4e44      	ldr	r6, [pc, #272]	; (1dd8 <computeKalmanGains+0x71c>)
        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1cc8:	628a      	str	r2, [r1, #40]	; 0x28
    1cca:	62cb      	str	r3, [r1, #44]	; 0x2c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1ccc:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1cce:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1cd0:	2000      	movs	r0, #0
    1cd2:	4944      	ldr	r1, [pc, #272]	; (1de4 <computeKalmanGains+0x728>)
    1cd4:	47b0      	blx	r6
    1cd6:	0002      	movs	r2, r0
    1cd8:	000b      	movs	r3, r1
    1cda:	900c      	str	r0, [sp, #48]	; 0x30
    1cdc:	910d      	str	r1, [sp, #52]	; 0x34
    1cde:	9808      	ldr	r0, [sp, #32]
    1ce0:	9909      	ldr	r1, [sp, #36]	; 0x24
    1ce2:	47a8      	blx	r5
    1ce4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1ce6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1ce8:	0006      	movs	r6, r0
    1cea:	000f      	movs	r7, r1
    1cec:	9800      	ldr	r0, [sp, #0]
    1cee:	9901      	ldr	r1, [sp, #4]
    1cf0:	47a8      	blx	r5
    1cf2:	0002      	movs	r2, r0
    1cf4:	000b      	movs	r3, r1
    1cf6:	0030      	movs	r0, r6
    1cf8:	0039      	movs	r1, r7
    1cfa:	4e37      	ldr	r6, [pc, #220]	; (1dd8 <computeKalmanGains+0x71c>)
    1cfc:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1cfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1d02:	9006      	str	r0, [sp, #24]
    1d04:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1d06:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1d08:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1d0a:	47a8      	blx	r5
    1d0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1d0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1d10:	0006      	movs	r6, r0
    1d12:	000f      	movs	r7, r1
    1d14:	9810      	ldr	r0, [sp, #64]	; 0x40
    1d16:	9911      	ldr	r1, [sp, #68]	; 0x44
    1d18:	47a8      	blx	r5
    1d1a:	0002      	movs	r2, r0
    1d1c:	000b      	movs	r3, r1
    1d1e:	0030      	movs	r0, r6
    1d20:	0039      	movs	r1, r7
    1d22:	4e2d      	ldr	r6, [pc, #180]	; (1dd8 <computeKalmanGains+0x71c>)
    1d24:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1d26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1d2a:	900a      	str	r0, [sp, #40]	; 0x28
    1d2c:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1d2e:	9804      	ldr	r0, [sp, #16]
    1d30:	9916      	ldr	r1, [sp, #88]	; 0x58
    1d32:	47a8      	blx	r5
    1d34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1d36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1d38:	0006      	movs	r6, r0
    1d3a:	000f      	movs	r7, r1
    1d3c:	9802      	ldr	r0, [sp, #8]
    1d3e:	9903      	ldr	r1, [sp, #12]
    1d40:	47a8      	blx	r5
    1d42:	0002      	movs	r2, r0
    1d44:	000b      	movs	r3, r1
    1d46:	0030      	movs	r0, r6
    1d48:	0039      	movs	r1, r7
    1d4a:	4e23      	ldr	r6, [pc, #140]	; (1dd8 <computeKalmanGains+0x71c>)
    1d4c:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1d4e:	2280      	movs	r2, #128	; 0x80
    1d50:	0612      	lsls	r2, r2, #24
    1d52:	4694      	mov	ip, r2
    1d54:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1d56:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1d58:	4463      	add	r3, ip
    1d5a:	932e      	str	r3, [sp, #184]	; 0xb8
    1d5c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1d5e:	900c      	str	r0, [sp, #48]	; 0x30
    1d60:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1d62:	9808      	ldr	r0, [sp, #32]
    1d64:	9909      	ldr	r1, [sp, #36]	; 0x24
    1d66:	47a8      	blx	r5
    1d68:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1d6a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1d6c:	47a0      	blx	r4
    1d6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1d70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1d72:	0006      	movs	r6, r0
    1d74:	000f      	movs	r7, r1
    1d76:	9800      	ldr	r0, [sp, #0]
    1d78:	9901      	ldr	r1, [sp, #4]
    1d7a:	47a8      	blx	r5
    1d7c:	0002      	movs	r2, r0
    1d7e:	000b      	movs	r3, r1
    1d80:	0030      	movs	r0, r6
    1d82:	0039      	movs	r1, r7
    1d84:	4e14      	ldr	r6, [pc, #80]	; (1dd8 <computeKalmanGains+0x71c>)
    1d86:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1d88:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1d8a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1d8c:	9008      	str	r0, [sp, #32]
    1d8e:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1d90:	9826      	ldr	r0, [sp, #152]	; 0x98
    1d92:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1d94:	47a0      	blx	r4
    1d96:	4a0c      	ldr	r2, [pc, #48]	; (1dc8 <computeKalmanGains+0x70c>)
    1d98:	0006      	movs	r6, r0
    1d9a:	000f      	movs	r7, r1
    1d9c:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1d9e:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1da0:	4b0a      	ldr	r3, [pc, #40]	; (1dcc <computeKalmanGains+0x710>)
    1da2:	47a8      	blx	r5
    1da4:	0002      	movs	r2, r0
    1da6:	000b      	movs	r3, r1
    1da8:	0030      	movs	r0, r6
    1daa:	0039      	movs	r1, r7
    1dac:	47a0      	blx	r4
    1dae:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1db0:	0006      	movs	r6, r0
    1db2:	000f      	movs	r7, r1
    1db4:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1db6:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1db8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1dba:	47a8      	blx	r5
    1dbc:	0002      	movs	r2, r0
    1dbe:	000b      	movs	r3, r1
    1dc0:	0030      	movs	r0, r6
    1dc2:	0039      	movs	r1, r7
    1dc4:	47a0      	blx	r4
    1dc6:	e00f      	b.n	1de8 <computeKalmanGains+0x72c>
    1dc8:	47ae147b 	.word	0x47ae147b
    1dcc:	3f747ae1 	.word	0x3f747ae1
    1dd0:	eb1c432d 	.word	0xeb1c432d
    1dd4:	3eea36e2 	.word	0x3eea36e2
    1dd8:	00005a0d 	.word	0x00005a0d
    1ddc:	00004cd1 	.word	0x00004cd1
    1de0:	20000280 	.word	0x20000280
    1de4:	3ff00000 	.word	0x3ff00000
    1de8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1dea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1dec:	0006      	movs	r6, r0
    1dee:	000f      	movs	r7, r1
    1df0:	9810      	ldr	r0, [sp, #64]	; 0x40
    1df2:	9911      	ldr	r1, [sp, #68]	; 0x44
    1df4:	47a8      	blx	r5
    1df6:	0002      	movs	r2, r0
    1df8:	000b      	movs	r3, r1
    1dfa:	0030      	movs	r0, r6
    1dfc:	0039      	movs	r1, r7
    1dfe:	4e50      	ldr	r6, [pc, #320]	; (1f40 <computeKalmanGains+0x884>)
    1e00:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1e02:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1e04:	900e      	str	r0, [sp, #56]	; 0x38
    1e06:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1e08:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1e0a:	9804      	ldr	r0, [sp, #16]
    1e0c:	9916      	ldr	r1, [sp, #88]	; 0x58
    1e0e:	47a8      	blx	r5
    1e10:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1e12:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1e14:	47a0      	blx	r4
    1e16:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1e1a:	0006      	movs	r6, r0
    1e1c:	000f      	movs	r7, r1
    1e1e:	9802      	ldr	r0, [sp, #8]
    1e20:	9903      	ldr	r1, [sp, #12]
    1e22:	47a8      	blx	r5
    1e24:	4c46      	ldr	r4, [pc, #280]	; (1f40 <computeKalmanGains+0x884>)
    1e26:	0002      	movs	r2, r0
    1e28:	000b      	movs	r3, r1
    1e2a:	0030      	movs	r0, r6
    1e2c:	0039      	movs	r1, r7
    1e2e:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1e30:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1e32:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1e34:	9004      	str	r0, [sp, #16]
    1e36:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1e38:	2000      	movs	r0, #0
    1e3a:	4942      	ldr	r1, [pc, #264]	; (1f44 <computeKalmanGains+0x888>)
    1e3c:	47a0      	blx	r4
    1e3e:	0002      	movs	r2, r0
    1e40:	000b      	movs	r3, r1
    1e42:	9012      	str	r0, [sp, #72]	; 0x48
    1e44:	9113      	str	r1, [sp, #76]	; 0x4c
    1e46:	9800      	ldr	r0, [sp, #0]
    1e48:	9901      	ldr	r1, [sp, #4]
    1e4a:	47a8      	blx	r5
    1e4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1e4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1e50:	0006      	movs	r6, r0
    1e52:	000f      	movs	r7, r1
    1e54:	9800      	ldr	r0, [sp, #0]
    1e56:	9901      	ldr	r1, [sp, #4]
    1e58:	47a8      	blx	r5
    1e5a:	0002      	movs	r2, r0
    1e5c:	000b      	movs	r3, r1
    1e5e:	0030      	movs	r0, r6
    1e60:	0039      	movs	r1, r7
    1e62:	47a0      	blx	r4
    1e64:	9000      	str	r0, [sp, #0]
    1e66:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1e68:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1e6c:	9810      	ldr	r0, [sp, #64]	; 0x40
    1e6e:	9911      	ldr	r1, [sp, #68]	; 0x44
    1e70:	47a8      	blx	r5
    1e72:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1e74:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1e76:	0006      	movs	r6, r0
    1e78:	000f      	movs	r7, r1
    1e7a:	9810      	ldr	r0, [sp, #64]	; 0x40
    1e7c:	9911      	ldr	r1, [sp, #68]	; 0x44
    1e7e:	47a8      	blx	r5
    1e80:	0002      	movs	r2, r0
    1e82:	000b      	movs	r3, r1
    1e84:	0030      	movs	r0, r6
    1e86:	0039      	movs	r1, r7
    1e88:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1e8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1e8e:	9010      	str	r0, [sp, #64]	; 0x40
    1e90:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1e92:	9802      	ldr	r0, [sp, #8]
    1e94:	9903      	ldr	r1, [sp, #12]
    1e96:	47a8      	blx	r5
    1e98:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1e9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1e9c:	0006      	movs	r6, r0
    1e9e:	000f      	movs	r7, r1
    1ea0:	9802      	ldr	r0, [sp, #8]
    1ea2:	9903      	ldr	r1, [sp, #12]
    1ea4:	47a8      	blx	r5
    1ea6:	000b      	movs	r3, r1
    1ea8:	0002      	movs	r2, r0
    1eaa:	0039      	movs	r1, r7
    1eac:	0030      	movs	r0, r6
    1eae:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1eb0:	2400      	movs	r4, #0
    1eb2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1eb4:	9002      	str	r0, [sp, #8]
    1eb6:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1eb8:	3301      	adds	r3, #1
    1eba:	9338      	str	r3, [sp, #224]	; 0xe0
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1ebc:	4b22      	ldr	r3, [pc, #136]	; (1f48 <computeKalmanGains+0x88c>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1ebe:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1ec0:	9326      	str	r3, [sp, #152]	; 0x98
    1ec2:	4b1f      	ldr	r3, [pc, #124]	; (1f40 <computeKalmanGains+0x884>)
    1ec4:	9328      	str	r3, [sp, #160]	; 0xa0
    1ec6:	ab40      	add	r3, sp, #256	; 0x100
    1ec8:	18e5      	adds	r5, r4, r3

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1eca:	2300      	movs	r3, #0
    1ecc:	9516      	str	r5, [sp, #88]	; 0x58
    1ece:	9312      	str	r3, [sp, #72]	; 0x48
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1ed0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1ed2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1ed4:	18e3      	adds	r3, r4, r3
    1ed6:	189b      	adds	r3, r3, r2
    1ed8:	681a      	ldr	r2, [r3, #0]
    1eda:	685b      	ldr	r3, [r3, #4]
    1edc:	9218      	str	r2, [sp, #96]	; 0x60
    1ede:	9319      	str	r3, [sp, #100]	; 0x64
    1ee0:	9818      	ldr	r0, [sp, #96]	; 0x60
    1ee2:	9919      	ldr	r1, [sp, #100]	; 0x64
    1ee4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1ee6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1ee8:	681e      	ldr	r6, [r3, #0]
    1eea:	685f      	ldr	r7, [r3, #4]
    1eec:	0032      	movs	r2, r6
    1eee:	003b      	movs	r3, r7
    1ef0:	47a8      	blx	r5
    1ef2:	0032      	movs	r2, r6
    1ef4:	003b      	movs	r3, r7
    1ef6:	4d15      	ldr	r5, [pc, #84]	; (1f4c <computeKalmanGains+0x890>)
    1ef8:	47a8      	blx	r5
    1efa:	4b15      	ldr	r3, [pc, #84]	; (1f50 <computeKalmanGains+0x894>)
    1efc:	4a15      	ldr	r2, [pc, #84]	; (1f54 <computeKalmanGains+0x898>)
    1efe:	4e16      	ldr	r6, [pc, #88]	; (1f58 <computeKalmanGains+0x89c>)
    1f00:	47b0      	blx	r6
                    notdone++;
    1f02:	1e43      	subs	r3, r0, #1
    1f04:	4198      	sbcs	r0, r3
    1f06:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1f08:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1f0a:	181b      	adds	r3, r3, r0
    1f0c:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1f0e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1f10:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1f12:	c10c      	stmia	r1!, {r2, r3}
    1f14:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1f16:	9116      	str	r1, [sp, #88]	; 0x58
    1f18:	3308      	adds	r3, #8
    1f1a:	9312      	str	r3, [sp, #72]	; 0x48
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1f1c:	2b10      	cmp	r3, #16
    1f1e:	d1d7      	bne.n	1ed0 <computeKalmanGains+0x814>
    1f20:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1f22:	2c30      	cmp	r4, #48	; 0x30
    1f24:	d1cf      	bne.n	1ec6 <computeKalmanGains+0x80a>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1f26:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1f28:	2b00      	cmp	r3, #0
    1f2a:	d001      	beq.n	1f30 <computeKalmanGains+0x874>
    1f2c:	f7ff fc2c 	bl	1788 <computeKalmanGains+0xcc>
    1f30:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    1f32:	2b63      	cmp	r3, #99	; 0x63
    1f34:	dc01      	bgt.n	1f3a <computeKalmanGains+0x87e>
    1f36:	f7ff fc27 	bl	1788 <computeKalmanGains+0xcc>
            continue;
        else
            break;
    }
}
    1f3a:	b04d      	add	sp, #308	; 0x134
    1f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	00005a0d 	.word	0x00005a0d
    1f44:	3ff00000 	.word	0x3ff00000
    1f48:	20000280 	.word	0x20000280
    1f4c:	00004cd1 	.word	0x00004cd1
    1f50:	3ee4f8b5 	.word	0x3ee4f8b5
    1f54:	88e368f1 	.word	0x88e368f1
    1f58:	00004351 	.word	0x00004351

00001f5c <KalmanBaroUpdate>:

void KalmanBaroUpdate(double alt_inovation) {
    1f5c:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity;
    1f5e:	4b3f      	ldr	r3, [pc, #252]	; (205c <STACK_SIZE+0x5c>)
        else
            break;
    }
}

void KalmanBaroUpdate(double alt_inovation) {
    1f60:	b08b      	sub	sp, #44	; 0x2c

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity;
    1f62:	685c      	ldr	r4, [r3, #4]
    1f64:	681b      	ldr	r3, [r3, #0]
    1f66:	9300      	str	r3, [sp, #0]
    1f68:	9401      	str	r4, [sp, #4]
    1f6a:	4b3d      	ldr	r3, [pc, #244]	; (2060 <STACK_SIZE+0x60>)
    1f6c:	4d3d      	ldr	r5, [pc, #244]	; (2064 <STACK_SIZE+0x64>)
    1f6e:	685c      	ldr	r4, [r3, #4]
    1f70:	681b      	ldr	r3, [r3, #0]
    1f72:	9302      	str	r3, [sp, #8]
    1f74:	9403      	str	r4, [sp, #12]
    1f76:	4c3c      	ldr	r4, [pc, #240]	; (2068 <STACK_SIZE+0x68>)
        else
            break;
    }
}

void KalmanBaroUpdate(double alt_inovation) {
    1f78:	9004      	str	r0, [sp, #16]
    1f7a:	9105      	str	r1, [sp, #20]

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity;
    1f7c:	6822      	ldr	r2, [r4, #0]
    1f7e:	6863      	ldr	r3, [r4, #4]
    1f80:	9800      	ldr	r0, [sp, #0]
    1f82:	9901      	ldr	r1, [sp, #4]
    1f84:	47a8      	blx	r5
    1f86:	68a2      	ldr	r2, [r4, #8]
    1f88:	68e3      	ldr	r3, [r4, #12]
    1f8a:	0006      	movs	r6, r0
    1f8c:	000f      	movs	r7, r1
    1f8e:	9802      	ldr	r0, [sp, #8]
    1f90:	9903      	ldr	r1, [sp, #12]
    1f92:	47a8      	blx	r5
    1f94:	0002      	movs	r2, r0
    1f96:	000b      	movs	r3, r1
    1f98:	0030      	movs	r0, r6
    1f9a:	0039      	movs	r1, r7
    1f9c:	4e33      	ldr	r6, [pc, #204]	; (206c <STACK_SIZE+0x6c>)
    1f9e:	47b0      	blx	r6
    1fa0:	9006      	str	r0, [sp, #24]
    1fa2:	9107      	str	r1, [sp, #28]
    1fa4:	9a06      	ldr	r2, [sp, #24]
    1fa6:	9b07      	ldr	r3, [sp, #28]
    1fa8:	4931      	ldr	r1, [pc, #196]	; (2070 <STACK_SIZE+0x70>)
    1faa:	600a      	str	r2, [r1, #0]
    1fac:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity;
    1fae:	69a2      	ldr	r2, [r4, #24]
    1fb0:	69e3      	ldr	r3, [r4, #28]
    1fb2:	9800      	ldr	r0, [sp, #0]
    1fb4:	9901      	ldr	r1, [sp, #4]
    1fb6:	47a8      	blx	r5
    1fb8:	6a22      	ldr	r2, [r4, #32]
    1fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1fbc:	0006      	movs	r6, r0
    1fbe:	000f      	movs	r7, r1
    1fc0:	9802      	ldr	r0, [sp, #8]
    1fc2:	9903      	ldr	r1, [sp, #12]
    1fc4:	47a8      	blx	r5
    1fc6:	0002      	movs	r2, r0
    1fc8:	000b      	movs	r3, r1
    1fca:	0030      	movs	r0, r6
    1fcc:	0039      	movs	r1, r7
    1fce:	4e27      	ldr	r6, [pc, #156]	; (206c <STACK_SIZE+0x6c>)
    1fd0:	47b0      	blx	r6
    1fd2:	9008      	str	r0, [sp, #32]
    1fd4:	9109      	str	r1, [sp, #36]	; 0x24
    1fd6:	9a08      	ldr	r2, [sp, #32]
    1fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1fda:	4925      	ldr	r1, [pc, #148]	; (2070 <STACK_SIZE+0x70>)
    1fdc:	608a      	str	r2, [r1, #8]
    1fde:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity;
    1fe0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    1fe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1fe4:	9800      	ldr	r0, [sp, #0]
    1fe6:	9901      	ldr	r1, [sp, #4]
    1fe8:	47a8      	blx	r5
    1fea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1fec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1fee:	0006      	movs	r6, r0
    1ff0:	000f      	movs	r7, r1
    1ff2:	9802      	ldr	r0, [sp, #8]
    1ff4:	9903      	ldr	r1, [sp, #12]
    1ff6:	47a8      	blx	r5
    1ff8:	4c1c      	ldr	r4, [pc, #112]	; (206c <STACK_SIZE+0x6c>)
    1ffa:	0002      	movs	r2, r0
    1ffc:	000b      	movs	r3, r1
    1ffe:	0030      	movs	r0, r6
    2000:	0039      	movs	r1, r7
    2002:	47a0      	blx	r4
    2004:	0006      	movs	r6, r0
    2006:	000f      	movs	r7, r1

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation;
    2008:	9804      	ldr	r0, [sp, #16]
    200a:	9905      	ldr	r1, [sp, #20]
void KalmanBaroUpdate(double alt_inovation) {

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity;
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity;
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity;
    200c:	4b18      	ldr	r3, [pc, #96]	; (2070 <STACK_SIZE+0x70>)
    200e:	611e      	str	r6, [r3, #16]
    2010:	615f      	str	r7, [r3, #20]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation;
    2012:	4b18      	ldr	r3, [pc, #96]	; (2074 <STACK_SIZE+0x74>)
    2014:	681a      	ldr	r2, [r3, #0]
    2016:	685b      	ldr	r3, [r3, #4]
    2018:	47a8      	blx	r5
    201a:	9a06      	ldr	r2, [sp, #24]
    201c:	9b07      	ldr	r3, [sp, #28]
    201e:	47a0      	blx	r4
    2020:	4b0e      	ldr	r3, [pc, #56]	; (205c <STACK_SIZE+0x5c>)
    2022:	6018      	str	r0, [r3, #0]
    2024:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation;
    2026:	9804      	ldr	r0, [sp, #16]
    2028:	9905      	ldr	r1, [sp, #20]
    202a:	4b12      	ldr	r3, [pc, #72]	; (2074 <STACK_SIZE+0x74>)
    202c:	691a      	ldr	r2, [r3, #16]
    202e:	695b      	ldr	r3, [r3, #20]
    2030:	47a8      	blx	r5
    2032:	9a08      	ldr	r2, [sp, #32]
    2034:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2036:	47a0      	blx	r4
    2038:	4b09      	ldr	r3, [pc, #36]	; (2060 <STACK_SIZE+0x60>)
    203a:	6018      	str	r0, [r3, #0]
    203c:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation;
    203e:	9804      	ldr	r0, [sp, #16]
    2040:	9905      	ldr	r1, [sp, #20]
    2042:	4b0c      	ldr	r3, [pc, #48]	; (2074 <STACK_SIZE+0x74>)
    2044:	6a1a      	ldr	r2, [r3, #32]
    2046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2048:	47a8      	blx	r5
    204a:	003b      	movs	r3, r7
    204c:	0032      	movs	r2, r6
    204e:	47a0      	blx	r4
    2050:	4b09      	ldr	r3, [pc, #36]	; (2078 <STACK_SIZE+0x78>)
    2052:	6018      	str	r0, [r3, #0]
    2054:	6059      	str	r1, [r3, #4]

}
    2056:	b00b      	add	sp, #44	; 0x2c
    2058:	bdf0      	pop	{r4, r5, r6, r7, pc}
    205a:	46c0      	nop			; (mov r8, r8)
    205c:	200002e8 	.word	0x200002e8
    2060:	200002e0 	.word	0x200002e0
    2064:	00005519 	.word	0x00005519
    2068:	20000010 	.word	0x20000010
    206c:	00004679 	.word	0x00004679
    2070:	200002f0 	.word	0x200002f0
    2074:	20000280 	.word	0x20000280
    2078:	200002d8 	.word	0x200002d8

0000207c <KalmanBothUpdate>:

void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    207c:	b5f0      	push	{r4, r5, r6, r7, lr}
    207e:	b08f      	sub	sp, #60	; 0x3c
    2080:	9208      	str	r2, [sp, #32]
    2082:	9309      	str	r3, [sp, #36]	; 0x24

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    2084:	4b68      	ldr	r3, [pc, #416]	; (2228 <KalmanBothUpdate+0x1ac>)
    2086:	4d69      	ldr	r5, [pc, #420]	; (222c <KalmanBothUpdate+0x1b0>)
    2088:	685c      	ldr	r4, [r3, #4]
    208a:	681b      	ldr	r3, [r3, #0]
    208c:	9300      	str	r3, [sp, #0]
    208e:	9401      	str	r4, [sp, #4]
    2090:	4b67      	ldr	r3, [pc, #412]	; (2230 <KalmanBothUpdate+0x1b4>)
    velocity = estp[1] + kgain[1][0] * alt_inovation;
    accel =    estp[2] + kgain[2][0] * alt_inovation;

}

void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    2092:	9006      	str	r0, [sp, #24]
    2094:	9107      	str	r1, [sp, #28]

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    2096:	685c      	ldr	r4, [r3, #4]
    2098:	681b      	ldr	r3, [r3, #0]
    209a:	9800      	ldr	r0, [sp, #0]
    209c:	9901      	ldr	r1, [sp, #4]
    209e:	9302      	str	r3, [sp, #8]
    20a0:	9403      	str	r4, [sp, #12]
    20a2:	4b64      	ldr	r3, [pc, #400]	; (2234 <KalmanBothUpdate+0x1b8>)
    20a4:	685c      	ldr	r4, [r3, #4]
    20a6:	681b      	ldr	r3, [r3, #0]
    20a8:	9304      	str	r3, [sp, #16]
    20aa:	9405      	str	r4, [sp, #20]
    20ac:	4c62      	ldr	r4, [pc, #392]	; (2238 <KalmanBothUpdate+0x1bc>)
    20ae:	6822      	ldr	r2, [r4, #0]
    20b0:	6863      	ldr	r3, [r4, #4]
    20b2:	47a8      	blx	r5
    20b4:	68a2      	ldr	r2, [r4, #8]
    20b6:	68e3      	ldr	r3, [r4, #12]
    20b8:	0006      	movs	r6, r0
    20ba:	000f      	movs	r7, r1
    20bc:	9802      	ldr	r0, [sp, #8]
    20be:	9903      	ldr	r1, [sp, #12]
    20c0:	47a8      	blx	r5
    20c2:	0002      	movs	r2, r0
    20c4:	000b      	movs	r3, r1
    20c6:	0030      	movs	r0, r6
    20c8:	0039      	movs	r1, r7
    20ca:	4e5c      	ldr	r6, [pc, #368]	; (223c <KalmanBothUpdate+0x1c0>)
    20cc:	47b0      	blx	r6
    20ce:	6922      	ldr	r2, [r4, #16]
    20d0:	6963      	ldr	r3, [r4, #20]
    20d2:	0006      	movs	r6, r0
    20d4:	000f      	movs	r7, r1
    20d6:	9804      	ldr	r0, [sp, #16]
    20d8:	9905      	ldr	r1, [sp, #20]
    20da:	47a8      	blx	r5
    20dc:	0002      	movs	r2, r0
    20de:	000b      	movs	r3, r1
    20e0:	0030      	movs	r0, r6
    20e2:	0039      	movs	r1, r7
    20e4:	4e55      	ldr	r6, [pc, #340]	; (223c <KalmanBothUpdate+0x1c0>)
    20e6:	47b0      	blx	r6
    20e8:	900a      	str	r0, [sp, #40]	; 0x28
    20ea:	910b      	str	r1, [sp, #44]	; 0x2c
    20ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    20ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    20f0:	4953      	ldr	r1, [pc, #332]	; (2240 <KalmanBothUpdate+0x1c4>)
    20f2:	600a      	str	r2, [r1, #0]
    20f4:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    20f6:	69a2      	ldr	r2, [r4, #24]
    20f8:	69e3      	ldr	r3, [r4, #28]
    20fa:	9800      	ldr	r0, [sp, #0]
    20fc:	9901      	ldr	r1, [sp, #4]
    20fe:	47a8      	blx	r5
    2100:	6a22      	ldr	r2, [r4, #32]
    2102:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2104:	0006      	movs	r6, r0
    2106:	000f      	movs	r7, r1
    2108:	9802      	ldr	r0, [sp, #8]
    210a:	9903      	ldr	r1, [sp, #12]
    210c:	47a8      	blx	r5
    210e:	0002      	movs	r2, r0
    2110:	000b      	movs	r3, r1
    2112:	0030      	movs	r0, r6
    2114:	0039      	movs	r1, r7
    2116:	4e49      	ldr	r6, [pc, #292]	; (223c <KalmanBothUpdate+0x1c0>)
    2118:	47b0      	blx	r6
    211a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    211c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    211e:	0006      	movs	r6, r0
    2120:	000f      	movs	r7, r1
    2122:	9804      	ldr	r0, [sp, #16]
    2124:	9905      	ldr	r1, [sp, #20]
    2126:	47a8      	blx	r5
    2128:	0002      	movs	r2, r0
    212a:	000b      	movs	r3, r1
    212c:	0030      	movs	r0, r6
    212e:	0039      	movs	r1, r7
    2130:	4e42      	ldr	r6, [pc, #264]	; (223c <KalmanBothUpdate+0x1c0>)
    2132:	47b0      	blx	r6
    2134:	900c      	str	r0, [sp, #48]	; 0x30
    2136:	910d      	str	r1, [sp, #52]	; 0x34
    2138:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    213a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    213c:	4940      	ldr	r1, [pc, #256]	; (2240 <KalmanBothUpdate+0x1c4>)
    213e:	608a      	str	r2, [r1, #8]
    2140:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    2142:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2144:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2146:	9800      	ldr	r0, [sp, #0]
    2148:	9901      	ldr	r1, [sp, #4]
    214a:	47a8      	blx	r5
    214c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    214e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2150:	0006      	movs	r6, r0
    2152:	000f      	movs	r7, r1
    2154:	9802      	ldr	r0, [sp, #8]
    2156:	9903      	ldr	r1, [sp, #12]
    2158:	47a8      	blx	r5
    215a:	0002      	movs	r2, r0
    215c:	000b      	movs	r3, r1
    215e:	0030      	movs	r0, r6
    2160:	0039      	movs	r1, r7
    2162:	4e36      	ldr	r6, [pc, #216]	; (223c <KalmanBothUpdate+0x1c0>)
    2164:	47b0      	blx	r6
    2166:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2168:	6c63      	ldr	r3, [r4, #68]	; 0x44
    216a:	0006      	movs	r6, r0
    216c:	000f      	movs	r7, r1
    216e:	9804      	ldr	r0, [sp, #16]
    2170:	9905      	ldr	r1, [sp, #20]
    2172:	47a8      	blx	r5
    2174:	4c31      	ldr	r4, [pc, #196]	; (223c <KalmanBothUpdate+0x1c0>)
    2176:	0002      	movs	r2, r0
    2178:	000b      	movs	r3, r1
    217a:	0030      	movs	r0, r6
    217c:	0039      	movs	r1, r7
    217e:	47a0      	blx	r4
    2180:	0003      	movs	r3, r0
    2182:	000c      	movs	r4, r1
    2184:	4a2e      	ldr	r2, [pc, #184]	; (2240 <KalmanBothUpdate+0x1c4>)
    2186:	9000      	str	r0, [sp, #0]
    2188:	9101      	str	r1, [sp, #4]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    218a:	9806      	ldr	r0, [sp, #24]
    218c:	9907      	ldr	r1, [sp, #28]
void KalmanBothUpdate( double alt_inovation, double accel_inovation) {

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    218e:	6113      	str	r3, [r2, #16]
    2190:	6154      	str	r4, [r2, #20]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    2192:	4c2c      	ldr	r4, [pc, #176]	; (2244 <KalmanBothUpdate+0x1c8>)
    2194:	6822      	ldr	r2, [r4, #0]
    2196:	6863      	ldr	r3, [r4, #4]
    2198:	47a8      	blx	r5
    219a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    219c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    219e:	4e27      	ldr	r6, [pc, #156]	; (223c <KalmanBothUpdate+0x1c0>)
    21a0:	47b0      	blx	r6
    21a2:	68a2      	ldr	r2, [r4, #8]
    21a4:	68e3      	ldr	r3, [r4, #12]
    21a6:	0006      	movs	r6, r0
    21a8:	000f      	movs	r7, r1
    21aa:	9808      	ldr	r0, [sp, #32]
    21ac:	9909      	ldr	r1, [sp, #36]	; 0x24
    21ae:	47a8      	blx	r5
    21b0:	0002      	movs	r2, r0
    21b2:	000b      	movs	r3, r1
    21b4:	0030      	movs	r0, r6
    21b6:	0039      	movs	r1, r7
    21b8:	4e20      	ldr	r6, [pc, #128]	; (223c <KalmanBothUpdate+0x1c0>)
    21ba:	47b0      	blx	r6
    21bc:	4b1a      	ldr	r3, [pc, #104]	; (2228 <KalmanBothUpdate+0x1ac>)
    21be:	6018      	str	r0, [r3, #0]
    21c0:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    21c2:	6922      	ldr	r2, [r4, #16]
    21c4:	6963      	ldr	r3, [r4, #20]
    21c6:	9806      	ldr	r0, [sp, #24]
    21c8:	9907      	ldr	r1, [sp, #28]
    21ca:	47a8      	blx	r5
    21cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    21ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    21d0:	47b0      	blx	r6
    21d2:	69a2      	ldr	r2, [r4, #24]
    21d4:	69e3      	ldr	r3, [r4, #28]
    21d6:	0006      	movs	r6, r0
    21d8:	000f      	movs	r7, r1
    21da:	9808      	ldr	r0, [sp, #32]
    21dc:	9909      	ldr	r1, [sp, #36]	; 0x24
    21de:	47a8      	blx	r5
    21e0:	0002      	movs	r2, r0
    21e2:	000b      	movs	r3, r1
    21e4:	0030      	movs	r0, r6
    21e6:	0039      	movs	r1, r7
    21e8:	4e14      	ldr	r6, [pc, #80]	; (223c <KalmanBothUpdate+0x1c0>)
    21ea:	47b0      	blx	r6
    21ec:	4b10      	ldr	r3, [pc, #64]	; (2230 <KalmanBothUpdate+0x1b4>)
    21ee:	6018      	str	r0, [r3, #0]
    21f0:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    21f2:	6a22      	ldr	r2, [r4, #32]
    21f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    21f6:	9806      	ldr	r0, [sp, #24]
    21f8:	9907      	ldr	r1, [sp, #28]
    21fa:	47a8      	blx	r5
    21fc:	9a00      	ldr	r2, [sp, #0]
    21fe:	9b01      	ldr	r3, [sp, #4]
    2200:	47b0      	blx	r6
    2202:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2204:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2206:	0006      	movs	r6, r0
    2208:	000f      	movs	r7, r1
    220a:	9808      	ldr	r0, [sp, #32]
    220c:	9909      	ldr	r1, [sp, #36]	; 0x24
    220e:	47a8      	blx	r5
    2210:	4c0a      	ldr	r4, [pc, #40]	; (223c <KalmanBothUpdate+0x1c0>)
    2212:	0002      	movs	r2, r0
    2214:	000b      	movs	r3, r1
    2216:	0030      	movs	r0, r6
    2218:	0039      	movs	r1, r7
    221a:	47a0      	blx	r4
    221c:	4b05      	ldr	r3, [pc, #20]	; (2234 <KalmanBothUpdate+0x1b8>)
    221e:	6018      	str	r0, [r3, #0]
    2220:	6059      	str	r1, [r3, #4]
}
    2222:	b00f      	add	sp, #60	; 0x3c
    2224:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2226:	46c0      	nop			; (mov r8, r8)
    2228:	200002e8 	.word	0x200002e8
    222c:	00005519 	.word	0x00005519
    2230:	200002e0 	.word	0x200002e0
    2234:	200002d8 	.word	0x200002d8
    2238:	20000010 	.word	0x20000010
    223c:	00004679 	.word	0x00004679
    2240:	200002f0 	.word	0x200002f0
    2244:	20000280 	.word	0x20000280

00002248 <computeKalmanStates>:

void computeKalmanStates() {
    2248:	b5f0      	push	{r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    224a:	4b20      	ldr	r3, [pc, #128]	; (22cc <computeKalmanStates+0x84>)
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
}

void computeKalmanStates() {
    224c:	b085      	sub	sp, #20

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    224e:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    2250:	4a1f      	ldr	r2, [pc, #124]	; (22d0 <computeKalmanStates+0x88>)

    pressure = sample.pressureAltitude;
    2252:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    2254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2256:	9300      	str	r3, [sp, #0]
    2258:	9401      	str	r4, [sp, #4]

void computeKalmanStates() {

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    225a:	6891      	ldr	r1, [r2, #8]
    225c:	68d2      	ldr	r2, [r2, #12]

    pressure = sample.pressureAltitude;

    if (altitude == 0) {
    225e:	4c1d      	ldr	r4, [pc, #116]	; (22d4 <computeKalmanStates+0x8c>)

void computeKalmanStates() {

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2260:	9102      	str	r1, [sp, #8]
    2262:	9203      	str	r2, [sp, #12]

    pressure = sample.pressureAltitude;

    if (altitude == 0) {
    2264:	6820      	ldr	r0, [r4, #0]
    2266:	6861      	ldr	r1, [r4, #4]
    2268:	2200      	movs	r2, #0
    226a:	2300      	movs	r3, #0
    226c:	4d1a      	ldr	r5, [pc, #104]	; (22d8 <computeKalmanStates+0x90>)
    226e:	47a8      	blx	r5
    2270:	2800      	cmp	r0, #0
    2272:	d003      	beq.n	227c <computeKalmanStates+0x34>
        altitude = pressure;
    2274:	9a00      	ldr	r2, [sp, #0]
    2276:	9b01      	ldr	r3, [sp, #4]
    2278:	6022      	str	r2, [r4, #0]
    227a:	6063      	str	r3, [r4, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    227c:	9800      	ldr	r0, [sp, #0]
    227e:	9901      	ldr	r1, [sp, #4]
    2280:	4e16      	ldr	r6, [pc, #88]	; (22dc <computeKalmanStates+0x94>)
    2282:	4c17      	ldr	r4, [pc, #92]	; (22e0 <computeKalmanStates+0x98>)
    2284:	6832      	ldr	r2, [r6, #0]
    2286:	6873      	ldr	r3, [r6, #4]
    2288:	47a0      	blx	r4
    accel_inovation = acceleration - estp[2];


    if (flightState < flightDrogue) {
    228a:	4b16      	ldr	r3, [pc, #88]	; (22e4 <computeKalmanStates+0x9c>)
    if (altitude == 0) {
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    228c:	0004      	movs	r4, r0
    accel_inovation = acceleration - estp[2];


    if (flightState < flightDrogue) {
    228e:	781b      	ldrb	r3, [r3, #0]
    if (altitude == 0) {
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    2290:	000d      	movs	r5, r1
    accel_inovation = acceleration - estp[2];


    if (flightState < flightDrogue) {
    2292:	2b05      	cmp	r3, #5
    2294:	d815      	bhi.n	22c2 <computeKalmanStates+0x7a>
        KalmanBothUpdate(alt_inovation,accel_inovation);
    2296:	1c38      	adds	r0, r7, #0
    2298:	4b13      	ldr	r3, [pc, #76]	; (22e8 <computeKalmanStates+0xa0>)
    229a:	4798      	blx	r3
    229c:	9a02      	ldr	r2, [sp, #8]
    229e:	9b03      	ldr	r3, [sp, #12]
    22a0:	4f0f      	ldr	r7, [pc, #60]	; (22e0 <computeKalmanStates+0x98>)
    22a2:	47b8      	blx	r7
    22a4:	4a11      	ldr	r2, [pc, #68]	; (22ec <computeKalmanStates+0xa4>)
    22a6:	4b12      	ldr	r3, [pc, #72]	; (22f0 <computeKalmanStates+0xa8>)
    22a8:	4f12      	ldr	r7, [pc, #72]	; (22f4 <computeKalmanStates+0xac>)
    22aa:	47b8      	blx	r7
    22ac:	6932      	ldr	r2, [r6, #16]
    22ae:	6973      	ldr	r3, [r6, #20]
    22b0:	4e0b      	ldr	r6, [pc, #44]	; (22e0 <computeKalmanStates+0x98>)
    22b2:	47b0      	blx	r6
    22b4:	0002      	movs	r2, r0
    22b6:	000b      	movs	r3, r1
    22b8:	0020      	movs	r0, r4
    22ba:	0029      	movs	r1, r5
    22bc:	4c0e      	ldr	r4, [pc, #56]	; (22f8 <computeKalmanStates+0xb0>)
    22be:	47a0      	blx	r4
    22c0:	e001      	b.n	22c6 <computeKalmanStates+0x7e>
    } else {
        KalmanBaroUpdate(alt_inovation);
    22c2:	4b0e      	ldr	r3, [pc, #56]	; (22fc <computeKalmanStates+0xb4>)
    22c4:	4798      	blx	r3
    }
}
    22c6:	b005      	add	sp, #20
    22c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22ca:	46c0      	nop			; (mov r8, r8)
    22cc:	20000540 	.word	0x20000540
    22d0:	20000108 	.word	0x20000108
    22d4:	200002e8 	.word	0x200002e8
    22d8:	0000431d 	.word	0x0000431d
    22dc:	200002f0 	.word	0x200002f0
    22e0:	00005a0d 	.word	0x00005a0d
    22e4:	2000016c 	.word	0x2000016c
    22e8:	00006255 	.word	0x00006255
    22ec:	33daf8df 	.word	0x33daf8df
    22f0:	4040164b 	.word	0x4040164b
    22f4:	00005519 	.word	0x00005519
    22f8:	0000207d 	.word	0x0000207d
    22fc:	00001f5d 	.word	0x00001f5d

00002300 <makePage>:
u16_t flightAddressLocationInIndex;

u8_t flightStartAddress[3];


void makePage(u8_t bytesToWrite, u8_t* data) {
    2300:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    2302:	4a1f      	ldr	r2, [pc, #124]	; (2380 <makePage+0x80>)
    2304:	7815      	ldrb	r5, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    2306:	1943      	adds	r3, r0, r5
    2308:	2bff      	cmp	r3, #255	; 0xff
    230a:	dc03      	bgt.n	2314 <makePage+0x14>
    230c:	2300      	movs	r3, #0
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    230e:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    2310:	4c1c      	ldr	r4, [pc, #112]	; (2384 <makePage+0x84>)
    2312:	e029      	b.n	2368 <makePage+0x68>
    2314:	2300      	movs	r3, #0
    2316:	4e1b      	ldr	r6, [pc, #108]	; (2384 <makePage+0x84>)

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2318:	195f      	adds	r7, r3, r5
    231a:	b2dc      	uxtb	r4, r3
    231c:	46b4      	mov	ip, r6
    231e:	2fff      	cmp	r7, #255	; 0xff
    2320:	dc04      	bgt.n	232c <makePage+0x2c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    2322:	5ccc      	ldrb	r4, [r1, r3]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2324:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    2326:	55f4      	strb	r4, [r6, r7]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2328:	b29b      	uxth	r3, r3
    232a:	e7f5      	b.n	2318 <makePage+0x18>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    232c:	2300      	movs	r3, #0
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    232e:	4f16      	ldr	r7, [pc, #88]	; (2388 <makePage+0x88>)
    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    2330:	7013      	strb	r3, [r2, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    2332:	4665      	mov	r5, ip
    2334:	18ed      	adds	r5, r5, r3
    2336:	782e      	ldrb	r6, [r5, #0]
    2338:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    233a:	2600      	movs	r6, #0
    233c:	702e      	strb	r6, [r5, #0]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    233e:	2580      	movs	r5, #128	; 0x80
    2340:	3301      	adds	r3, #1
    2342:	006d      	lsls	r5, r5, #1
    2344:	42ab      	cmp	r3, r5
    2346:	d1f4      	bne.n	2332 <makePage+0x32>
    2348:	2300      	movs	r3, #0
    234a:	1c5d      	adds	r5, r3, #1
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    234c:	4284      	cmp	r4, r0
    234e:	d207      	bcs.n	2360 <makePage+0x60>
            pageBuffer[dataByte] = data[bytesWritten];
    2350:	4667      	mov	r7, ip
    2352:	5d0e      	ldrb	r6, [r1, r4]
            bytesWritten++;
    2354:	3401      	adds	r4, #1
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            pageBuffer[dataByte] = data[bytesWritten];
    2356:	54fe      	strb	r6, [r7, r3]
            bytesWritten++;
    2358:	b2e4      	uxtb	r4, r4
            pageLocation = dataByte + 1;
    235a:	7015      	strb	r5, [r2, #0]
    235c:	002b      	movs	r3, r5
    235e:	e7f4      	b.n	234a <makePage+0x4a>
        }
        pageReady = true;
    2360:	2201      	movs	r2, #1
    2362:	4b0a      	ldr	r3, [pc, #40]	; (238c <makePage+0x8c>)
    2364:	701a      	strb	r2, [r3, #0]
    2366:	e009      	b.n	237c <makePage+0x7c>

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2368:	4283      	cmp	r3, r0
    236a:	d807      	bhi.n	237c <makePage+0x7c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    236c:	5ccf      	ldrb	r7, [r1, r3]
    236e:	18e6      	adds	r6, r4, r3
    2370:	5577      	strb	r7, [r6, r5]
            bytesWritten++;
            pageLocation = location + dataByte;
    2372:	18ee      	adds	r6, r5, r3
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2374:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
    2376:	7016      	strb	r6, [r2, #0]
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2378:	b29b      	uxth	r3, r3
    237a:	e7f5      	b.n	2368 <makePage+0x68>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
        }
    }
}
    237c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    237e:	46c0      	nop			; (mov r8, r8)
    2380:	2000053c 	.word	0x2000053c
    2384:	2000016e 	.word	0x2000016e
    2388:	2000030a 	.word	0x2000030a
    238c:	2000040a 	.word	0x2000040a

00002390 <writePadBuffer>:

void writePadBuffer(u8_t bytesToWrite, u8_t* data) {
    2390:	b5f0      	push	{r4, r5, r6, r7, lr}
    u8_t i, j;

    for (i = 1; i < 10; i++) {
    2392:	2706      	movs	r7, #6
    2394:	2300      	movs	r3, #0
    2396:	4c0d      	ldr	r4, [pc, #52]	; (23cc <writePadBuffer+0x3c>)
    2398:	37ff      	adds	r7, #255	; 0xff
    239a:	18c5      	adds	r5, r0, r3
    239c:	191a      	adds	r2, r3, r4
    239e:	192d      	adds	r5, r5, r4
        for (j = 0; j < bytesToWrite; j++) {
    23a0:	42aa      	cmp	r2, r5
    23a2:	d003      	beq.n	23ac <writePadBuffer+0x1c>
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
    23a4:	7f56      	ldrb	r6, [r2, #29]
    23a6:	7016      	strb	r6, [r2, #0]
    23a8:	3201      	adds	r2, #1
    23aa:	e7f9      	b.n	23a0 <writePadBuffer+0x10>
    23ac:	331d      	adds	r3, #29
}

void writePadBuffer(u8_t bytesToWrite, u8_t* data) {
    u8_t i, j;

    for (i = 1; i < 10; i++) {
    23ae:	42bb      	cmp	r3, r7
    23b0:	d1f3      	bne.n	239a <writePadBuffer+0xa>
    23b2:	2300      	movs	r3, #0
        for (j = 0; j < bytesToWrite; j++) {
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
        }
    }

    for (i = 0; i < bytesToWrite ; i++) {
    23b4:	b2da      	uxtb	r2, r3
    23b6:	4290      	cmp	r0, r2
    23b8:	d906      	bls.n	23c8 <writePadBuffer+0x38>
        padSensorBuffer[9][i] = data[i];
    23ba:	5ccc      	ldrb	r4, [r1, r3]
    23bc:	1d9a      	adds	r2, r3, #6
    23be:	4d03      	ldr	r5, [pc, #12]	; (23cc <writePadBuffer+0x3c>)
    23c0:	32ff      	adds	r2, #255	; 0xff
    23c2:	54ac      	strb	r4, [r5, r2]
    23c4:	3301      	adds	r3, #1
    23c6:	e7f5      	b.n	23b4 <writePadBuffer+0x24>
    }
}
    23c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23ca:	46c0      	nop			; (mov r8, r8)
    23cc:	20000414 	.word	0x20000414

000023d0 <logFlight>:


void logFlight() {
    23d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    23d2:	2346      	movs	r3, #70	; 0x46
    23d4:	466a      	mov	r2, sp
    23d6:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    23d8:	2300      	movs	r3, #0

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    23da:	4669      	mov	r1, sp
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    23dc:	4668      	mov	r0, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;
    23de:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    23e0:	4a10      	ldr	r2, [pc, #64]	; (2424 <logFlight+0x54>)
    23e2:	6813      	ldr	r3, [r2, #0]
    23e4:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    23e6:	0a19      	lsrs	r1, r3, #8
    23e8:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    23ea:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.offsetBufferTime >> 24;
    23ec:	0e1b      	lsrs	r3, r3, #24
    23ee:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    23f0:	6993      	ldr	r3, [r2, #24]
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    23f2:	7101      	strb	r1, [r0, #4]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    23f4:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    23f6:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    23f8:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    23fa:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    23fc:	0e1b      	lsrs	r3, r3, #24
    23fe:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    2400:	6a13      	ldr	r3, [r2, #32]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    2402:	7201      	strb	r1, [r0, #8]
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    2404:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    2406:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    2408:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    240a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    240c:	0e1b      	lsrs	r3, r3, #24
    240e:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    2410:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    dataToSend[12] = offsets.groundTemperature >> 16;
    2412:	7302      	strb	r2, [r0, #12]
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    2414:	73c3      	strb	r3, [r0, #15]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;
    2416:	4669      	mov	r1, sp
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
    2418:	2010      	movs	r0, #16
    241a:	4b03      	ldr	r3, [pc, #12]	; (2428 <logFlight+0x58>)
    241c:	4798      	blx	r3
}
    241e:	b005      	add	sp, #20
    2420:	bd00      	pop	{pc}
    2422:	46c0      	nop			; (mov r8, r8)
    2424:	20000108 	.word	0x20000108
    2428:	00002301 	.word	0x00002301

0000242c <logEvent>:

void logEvent(u8_t eventType) {
    242c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    242e:	2345      	movs	r3, #69	; 0x45
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    2430:	4d10      	ldr	r5, [pc, #64]	; (2474 <logEvent+0x48>)
void logEvent(u8_t eventType) {

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    2432:	ac01      	add	r4, sp, #4
    2434:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    2436:	686b      	ldr	r3, [r5, #4]
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    2438:	4e0f      	ldr	r6, [pc, #60]	; (2478 <logEvent+0x4c>)
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    243a:	0a1a      	lsrs	r2, r3, #8
    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    243c:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 8;
    243e:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 16;
    2440:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = sample.sampleTick >> 24;
    2442:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    2444:	7122      	strb	r2, [r4, #4]
    dataToSend[5] = sample.sampleTick >> 24;
    2446:	7163      	strb	r3, [r4, #5]

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    2448:	7060      	strb	r0, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    244a:	47b0      	blx	r6
    244c:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 8;
    244e:	47b0      	blx	r6
    2450:	1200      	asrs	r0, r0, #8
    2452:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 16;
    2454:	47b0      	blx	r6
    2456:	1400      	asrs	r0, r0, #16
    2458:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = altitudeAGL() >> 24;
    245a:	47b0      	blx	r6
    245c:	1600      	asrs	r0, r0, #24
    245e:	7260      	strb	r0, [r4, #9]

    dataToSend[10] = sample.voltage.batV >> 0;
    2460:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    2462:	0021      	movs	r1, r4
    dataToSend[6] = altitudeAGL() >> 0;
    dataToSend[7] = altitudeAGL() >> 8;
    dataToSend[8] = altitudeAGL() >> 16;
    dataToSend[9] = altitudeAGL() >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    2464:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    2466:	0a1b      	lsrs	r3, r3, #8
    2468:	72e3      	strb	r3, [r4, #11]

    makePage(bytesToSend, dataToSend);
    246a:	200c      	movs	r0, #12
    246c:	4b03      	ldr	r3, [pc, #12]	; (247c <logEvent+0x50>)
    246e:	4798      	blx	r3

}
    2470:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    2472:	46c0      	nop			; (mov r8, r8)
    2474:	20000540 	.word	0x20000540
    2478:	00000b15 	.word	0x00000b15
    247c:	00002301 	.word	0x00002301

00002480 <logSensors>:

void logSensors() {

    writeLog = false;
    2480:	2200      	movs	r2, #0

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2482:	b5f0      	push	{r4, r5, r6, r7, lr}

    writeLog = false;
    2484:	4b59      	ldr	r3, [pc, #356]	; (25ec <logSensors+0x16c>)

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2486:	b08d      	sub	sp, #52	; 0x34

    writeLog = false;
    2488:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = SENSOR_LOG_LENGTH;
    u8_t dataToSend[SENSOR_LOG_LENGTH];

    float fractionalAccel = accel - (int16_t)(accel);
    248a:	4b59      	ldr	r3, [pc, #356]	; (25f0 <logSensors+0x170>)
    248c:	681e      	ldr	r6, [r3, #0]
    248e:	685f      	ldr	r7, [r3, #4]
    int16_t fractAccelPart = fractionalAccel * 1000;
    2490:	4b58      	ldr	r3, [pc, #352]	; (25f4 <logSensors+0x174>)
    2492:	0039      	movs	r1, r7
    2494:	0030      	movs	r0, r6
    2496:	4798      	blx	r3
    2498:	4c57      	ldr	r4, [pc, #348]	; (25f8 <logSensors+0x178>)
    249a:	b200      	sxth	r0, r0
    249c:	47a0      	blx	r4
    249e:	4d57      	ldr	r5, [pc, #348]	; (25fc <logSensors+0x17c>)
    24a0:	0002      	movs	r2, r0
    24a2:	000b      	movs	r3, r1
    24a4:	0030      	movs	r0, r6
    24a6:	0039      	movs	r1, r7
    24a8:	47a8      	blx	r5
    24aa:	4e55      	ldr	r6, [pc, #340]	; (2600 <logSensors+0x180>)
    24ac:	47b0      	blx	r6
    24ae:	4955      	ldr	r1, [pc, #340]	; (2604 <logSensors+0x184>)
    24b0:	4b55      	ldr	r3, [pc, #340]	; (2608 <logSensors+0x188>)
    24b2:	4798      	blx	r3
    24b4:	4b55      	ldr	r3, [pc, #340]	; (260c <logSensors+0x18c>)
    24b6:	4798      	blx	r3

    float fractionalVelocity = velocity - (int16_t)(velocity);
    24b8:	4f55      	ldr	r7, [pc, #340]	; (2610 <logSensors+0x190>)

    u8_t bytesToSend = SENSOR_LOG_LENGTH;
    u8_t dataToSend[SENSOR_LOG_LENGTH];

    float fractionalAccel = accel - (int16_t)(accel);
    int16_t fractAccelPart = fractionalAccel * 1000;
    24ba:	b203      	sxth	r3, r0
    24bc:	9301      	str	r3, [sp, #4]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    24be:	683a      	ldr	r2, [r7, #0]
    24c0:	687b      	ldr	r3, [r7, #4]
    24c2:	9202      	str	r2, [sp, #8]
    24c4:	9303      	str	r3, [sp, #12]
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    24c6:	0010      	movs	r0, r2
    24c8:	0019      	movs	r1, r3
    24ca:	4b4a      	ldr	r3, [pc, #296]	; (25f4 <logSensors+0x174>)
    24cc:	4798      	blx	r3
    24ce:	b200      	sxth	r0, r0
    24d0:	47a0      	blx	r4
    24d2:	0002      	movs	r2, r0
    24d4:	000b      	movs	r3, r1
    24d6:	9802      	ldr	r0, [sp, #8]
    24d8:	9903      	ldr	r1, [sp, #12]
    24da:	47a8      	blx	r5
    24dc:	47b0      	blx	r6
    24de:	4949      	ldr	r1, [pc, #292]	; (2604 <logSensors+0x184>)
    24e0:	4b49      	ldr	r3, [pc, #292]	; (2608 <logSensors+0x188>)
    24e2:	4798      	blx	r3
    24e4:	4b49      	ldr	r3, [pc, #292]	; (260c <logSensors+0x18c>)
    24e6:	4798      	blx	r3

    dataToSend[0] = SENSOR_LOG;
    24e8:	2353      	movs	r3, #83	; 0x53

    dataToSend[1] = sample.sampleTick >> 0;
    24ea:	4c4a      	ldr	r4, [pc, #296]	; (2614 <logSensors+0x194>)
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;
    24ec:	aa04      	add	r2, sp, #16
    24ee:	7013      	strb	r3, [r2, #0]

    dataToSend[1] = sample.sampleTick >> 0;
    24f0:	6863      	ldr	r3, [r4, #4]
    dataToSend[2] = sample.sampleTick >> 8;
    24f2:	a904      	add	r1, sp, #16
    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    24f4:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    24f6:	0a1a      	lsrs	r2, r3, #8
    24f8:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    24fa:	0c1a      	lsrs	r2, r3, #16
    24fc:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    24fe:	0e1b      	lsrs	r3, r3, #24

    dataToSend[5] = altitudeAGL() >> 0;
    2500:	4e45      	ldr	r6, [pc, #276]	; (2618 <logSensors+0x198>)
    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    dataToSend[4] = sample.sampleTick >> 24;
    2502:	710b      	strb	r3, [r1, #4]

    float fractionalAccel = accel - (int16_t)(accel);
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2504:	b205      	sxth	r5, r0
    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    2506:	47b0      	blx	r6
    2508:	ab04      	add	r3, sp, #16
    250a:	7158      	strb	r0, [r3, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    250c:	47b0      	blx	r6
    250e:	ab04      	add	r3, sp, #16
    2510:	1200      	asrs	r0, r0, #8
    2512:	7198      	strb	r0, [r3, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    2514:	47b0      	blx	r6
    2516:	ab04      	add	r3, sp, #16
    2518:	1400      	asrs	r0, r0, #16
    251a:	71d8      	strb	r0, [r3, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    251c:	47b0      	blx	r6
    251e:	ab04      	add	r3, sp, #16
    2520:	1600      	asrs	r0, r0, #24
    2522:	7218      	strb	r0, [r3, #8]



    dataToSend[9] = (int16_t)(accel) >> 0;
    2524:	4b32      	ldr	r3, [pc, #200]	; (25f0 <logSensors+0x170>)
    2526:	6818      	ldr	r0, [r3, #0]
    2528:	6859      	ldr	r1, [r3, #4]
    252a:	4b32      	ldr	r3, [pc, #200]	; (25f4 <logSensors+0x174>)
    252c:	4798      	blx	r3
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    252e:	466a      	mov	r2, sp
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;



    dataToSend[9] = (int16_t)(accel) >> 0;
    2530:	ab04      	add	r3, sp, #16
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2532:	7912      	ldrb	r2, [r2, #4]
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;



    dataToSend[9] = (int16_t)(accel) >> 0;
    2534:	b200      	sxth	r0, r0
    2536:	7258      	strb	r0, [r3, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    2538:	1200      	asrs	r0, r0, #8
    dataToSend[11] = fractAccelPart >> 0;
    253a:	72da      	strb	r2, [r3, #11]
    dataToSend[8] = altitudeAGL() >> 24;



    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    253c:	7298      	strb	r0, [r3, #10]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    253e:	9b01      	ldr	r3, [sp, #4]
    2540:	1218      	asrs	r0, r3, #8
    2542:	ab04      	add	r3, sp, #16
    2544:	7318      	strb	r0, [r3, #12]


    dataToSend[13] = (int16_t)(velocity) >> 0;
    2546:	4b2b      	ldr	r3, [pc, #172]	; (25f4 <logSensors+0x174>)
    2548:	6838      	ldr	r0, [r7, #0]
    254a:	6879      	ldr	r1, [r7, #4]
    254c:	4798      	blx	r3
    254e:	ab04      	add	r3, sp, #16
    2550:	b200      	sxth	r0, r0
    2552:	7358      	strb	r0, [r3, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    2554:	73dd      	strb	r5, [r3, #15]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2556:	1200      	asrs	r0, r0, #8
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    2558:	122d      	asrs	r5, r5, #8
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    255a:	7398      	strb	r0, [r3, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    255c:	741d      	strb	r5, [r3, #16]

    dataToSend[17] = sample.accelXint >> 0;
    255e:	2220      	movs	r2, #32
    2560:	5ea3      	ldrsh	r3, [r4, r2]
    2562:	aa04      	add	r2, sp, #16
    2564:	7453      	strb	r3, [r2, #17]
    dataToSend[18] = sample.accelXint >> 8;
    2566:	121b      	asrs	r3, r3, #8
    2568:	7493      	strb	r3, [r2, #18]

    dataToSend[19] = sample.accelYint >> 0;
    256a:	2228      	movs	r2, #40	; 0x28
    256c:	5ea3      	ldrsh	r3, [r4, r2]
    256e:	aa04      	add	r2, sp, #16
    2570:	74d3      	strb	r3, [r2, #19]
    dataToSend[20] = sample.accelYint >> 8;
    2572:	121b      	asrs	r3, r3, #8
    2574:	7513      	strb	r3, [r2, #20]

    dataToSend[21] = sample.gyroXint >> 0;
    2576:	2238      	movs	r2, #56	; 0x38
    2578:	5ea3      	ldrsh	r3, [r4, r2]
    257a:	aa04      	add	r2, sp, #16
    257c:	7553      	strb	r3, [r2, #21]
    dataToSend[22] = sample.gyroXint >> 8;
    257e:	121b      	asrs	r3, r3, #8
    2580:	7593      	strb	r3, [r2, #22]

    dataToSend[23] = sample.gyroYint >> 0;
    2582:	1ca3      	adds	r3, r4, #2
    2584:	223e      	movs	r2, #62	; 0x3e
    2586:	5e9b      	ldrsh	r3, [r3, r2]
    2588:	aa04      	add	r2, sp, #16
    258a:	75d3      	strb	r3, [r2, #23]
    dataToSend[24] = sample.gyroYint >> 8;
    258c:	121b      	asrs	r3, r3, #8
    258e:	7613      	strb	r3, [r2, #24]

    dataToSend[25] = sample.gyroZint >> 0;
    2590:	0023      	movs	r3, r4
    2592:	3348      	adds	r3, #72	; 0x48
    2594:	2200      	movs	r2, #0
    2596:	5e9b      	ldrsh	r3, [r3, r2]
    2598:	aa04      	add	r2, sp, #16
    259a:	7653      	strb	r3, [r2, #25]
    dataToSend[26] = sample.gyroZint >> 8;
    259c:	121b      	asrs	r3, r3, #8
    259e:	7693      	strb	r3, [r2, #26]

    dataToSend[27] = sample.analogRaw >> 0;
    25a0:	8b23      	ldrh	r3, [r4, #24]
    25a2:	76d3      	strb	r3, [r2, #27]
    dataToSend[28] = sample.analogRaw >> 8;
    25a4:	0a1b      	lsrs	r3, r3, #8
    25a6:	7713      	strb	r3, [r2, #28]


    if (flightState == flightPad) {
    25a8:	4b1c      	ldr	r3, [pc, #112]	; (261c <logSensors+0x19c>)
    25aa:	781b      	ldrb	r3, [r3, #0]
    25ac:	2b02      	cmp	r3, #2
    25ae:	d104      	bne.n	25ba <logSensors+0x13a>
        writePadBuffer(bytesToSend, dataToSend);
    25b0:	0011      	movs	r1, r2
    25b2:	201d      	movs	r0, #29
    25b4:	4b1a      	ldr	r3, [pc, #104]	; (2620 <logSensors+0x1a0>)
    25b6:	4798      	blx	r3
    25b8:	e016      	b.n	25e8 <logSensors+0x168>

    } else {

        makePage(bytesToSend, dataToSend);
    25ba:	4b1a      	ldr	r3, [pc, #104]	; (2624 <logSensors+0x1a4>)
    25bc:	a904      	add	r1, sp, #16
    25be:	201d      	movs	r0, #29
    25c0:	4798      	blx	r3

        if (pageReady) {
    25c2:	4b19      	ldr	r3, [pc, #100]	; (2628 <logSensors+0x1a8>)
    25c4:	781a      	ldrb	r2, [r3, #0]
    25c6:	2a00      	cmp	r2, #0
    25c8:	d00e      	beq.n	25e8 <logSensors+0x168>
            pageReady = false;
    25ca:	2200      	movs	r2, #0
    25cc:	701a      	strb	r2, [r3, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    25ce:	2280      	movs	r2, #128	; 0x80
    25d0:	4b16      	ldr	r3, [pc, #88]	; (262c <logSensors+0x1ac>)
            pinToggle(LedPin);
            u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    25d2:	4c17      	ldr	r4, [pc, #92]	; (2630 <logSensors+0x1b0>)
    25d4:	0352      	lsls	r2, r2, #13
    25d6:	61da      	str	r2, [r3, #28]
    25d8:	4916      	ldr	r1, [pc, #88]	; (2634 <logSensors+0x1b4>)
    25da:	4b17      	ldr	r3, [pc, #92]	; (2638 <logSensors+0x1b8>)
    25dc:	6820      	ldr	r0, [r4, #0]
    25de:	4798      	blx	r3
            currentAddress = (currentAddress + 0x100);
    25e0:	6823      	ldr	r3, [r4, #0]
    25e2:	3301      	adds	r3, #1
    25e4:	33ff      	adds	r3, #255	; 0xff
    25e6:	6023      	str	r3, [r4, #0]
        }
    }
}
    25e8:	b00d      	add	sp, #52	; 0x34
    25ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25ec:	2000015a 	.word	0x2000015a
    25f0:	200002d8 	.word	0x200002d8
    25f4:	000060f5 	.word	0x000060f5
    25f8:	00006161 	.word	0x00006161
    25fc:	00005a0d 	.word	0x00005a0d
    2600:	000062fd 	.word	0x000062fd
    2604:	447a0000 	.word	0x447a0000
    2608:	0000440d 	.word	0x0000440d
    260c:	00004635 	.word	0x00004635
    2610:	200002e0 	.word	0x200002e0
    2614:	20000540 	.word	0x20000540
    2618:	00000b15 	.word	0x00000b15
    261c:	2000016c 	.word	0x2000016c
    2620:	00002391 	.word	0x00002391
    2624:	00002301 	.word	0x00002301
    2628:	2000040a 	.word	0x2000040a
    262c:	41004400 	.word	0x41004400
    2630:	20000410 	.word	0x20000410
    2634:	2000030a 	.word	0x2000030a
    2638:	000002a5 	.word	0x000002a5

0000263c <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    263c:	2306      	movs	r3, #6
    }
}



u32_t getFlightStartAddress(u8_t flightToFind) {
    263e:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2640:	4358      	muls	r0, r3
    2642:	ac01      	add	r4, sp, #4
    2644:	3001      	adds	r0, #1
    2646:	30ff      	adds	r0, #255	; 0xff
    2648:	0022      	movs	r2, r4
    264a:	2103      	movs	r1, #3
    264c:	4b04      	ldr	r3, [pc, #16]	; (2660 <getFlightStartAddress+0x24>)
    264e:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2650:	7860      	ldrb	r0, [r4, #1]
    2652:	78a3      	ldrb	r3, [r4, #2]
    2654:	0200      	lsls	r0, r0, #8
    2656:	041b      	lsls	r3, r3, #16
    2658:	4318      	orrs	r0, r3
    265a:	7823      	ldrb	r3, [r4, #0]
    265c:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    265e:	bd16      	pop	{r1, r2, r4, pc}
    2660:	00000301 	.word	0x00000301

00002664 <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2664:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    2666:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2668:	4358      	muls	r0, r3
    266a:	ac01      	add	r4, sp, #4
    266c:	3004      	adds	r0, #4
    266e:	30ff      	adds	r0, #255	; 0xff
    2670:	0022      	movs	r2, r4
    2672:	2103      	movs	r1, #3
    2674:	4b04      	ldr	r3, [pc, #16]	; (2688 <FindFlightEndingAddress+0x24>)
    2676:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2678:	7860      	ldrb	r0, [r4, #1]
    267a:	78a3      	ldrb	r3, [r4, #2]
    267c:	0200      	lsls	r0, r0, #8
    267e:	041b      	lsls	r3, r3, #16
    2680:	4318      	orrs	r0, r3
    2682:	7823      	ldrb	r3, [r4, #0]
    2684:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    2686:	bd16      	pop	{r1, r2, r4, pc}
    2688:	00000301 	.word	0x00000301

0000268c <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    268c:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    268e:	4b04      	ldr	r3, [pc, #16]	; (26a0 <isFlightLogged+0x14>)
    2690:	4798      	blx	r3
    2692:	4b04      	ldr	r3, [pc, #16]	; (26a4 <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    2694:	18c0      	adds	r0, r0, r3
    2696:	1e43      	subs	r3, r0, #1
    2698:	4198      	sbcs	r0, r3
    269a:	b2c0      	uxtb	r0, r0
    269c:	bd10      	pop	{r4, pc}
    269e:	46c0      	nop			; (mov r8, r8)
    26a0:	0000263d 	.word	0x0000263d
    26a4:	ff000001 	.word	0xff000001

000026a8 <writeFlightStartAddress>:

void writeFlightStartAddress() {
    26a8:	b510      	push	{r4, lr}
    AT25SFWriteBytes(flightAddressLocationInIndex,3,flightStartAddress);
    26aa:	4b03      	ldr	r3, [pc, #12]	; (26b8 <writeFlightStartAddress+0x10>)
    26ac:	4a03      	ldr	r2, [pc, #12]	; (26bc <writeFlightStartAddress+0x14>)
    26ae:	8818      	ldrh	r0, [r3, #0]
    26b0:	2103      	movs	r1, #3
    26b2:	4b03      	ldr	r3, [pc, #12]	; (26c0 <writeFlightStartAddress+0x18>)
    26b4:	4798      	blx	r3
}
    26b6:	bd10      	pop	{r4, pc}
    26b8:	20000308 	.word	0x20000308
    26bc:	2000040b 	.word	0x2000040b
    26c0:	00000241 	.word	0x00000241

000026c4 <writeFlightEndAddress>:


void writeFlightEndAddress() {
    26c4:	b507      	push	{r0, r1, r2, lr}
    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    26c6:	2006      	movs	r0, #6
}


void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    26c8:	4b09      	ldr	r3, [pc, #36]	; (26f0 <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    26ca:	aa01      	add	r2, sp, #4
}


void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    26cc:	681b      	ldr	r3, [r3, #0]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    26ce:	7013      	strb	r3, [r2, #0]
    26d0:	0a19      	lsrs	r1, r3, #8
    26d2:	0c1b      	lsrs	r3, r3, #16
    26d4:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    26d6:	4b07      	ldr	r3, [pc, #28]	; (26f4 <writeFlightEndAddress+0x30>)

void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    26d8:	7051      	strb	r1, [r2, #1]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    26da:	781b      	ldrb	r3, [r3, #0]
    26dc:	2103      	movs	r1, #3
    26de:	4358      	muls	r0, r3
    26e0:	3004      	adds	r0, #4
    26e2:	30ff      	adds	r0, #255	; 0xff
    26e4:	4b04      	ldr	r3, [pc, #16]	; (26f8 <writeFlightEndAddress+0x34>)
    26e6:	4798      	blx	r3
    delay_ms(10);
    26e8:	200a      	movs	r0, #10
    26ea:	4b04      	ldr	r3, [pc, #16]	; (26fc <writeFlightEndAddress+0x38>)
    26ec:	4798      	blx	r3
}
    26ee:	bd07      	pop	{r0, r1, r2, pc}
    26f0:	20000410 	.word	0x20000410
    26f4:	2000015b 	.word	0x2000015b
    26f8:	00000241 	.word	0x00000241
    26fc:	000010d9 	.word	0x000010d9

00002700 <writeGroundLog>:

void writeGroundLog() {
    2700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2702:	2780      	movs	r7, #128	; 0x80
    u8_t i;

    for (i = 0; i < 10; i++) {
    2704:	2691      	movs	r6, #145	; 0x91
    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    delay_ms(10);
}

void writeGroundLog() {
    2706:	2400      	movs	r4, #0
    2708:	037f      	lsls	r7, r7, #13
    u8_t i;

    for (i = 0; i < 10; i++) {
    270a:	0076      	lsls	r6, r6, #1
        makePage(SENSOR_LOG_LENGTH, &padSensorBuffer[i][0]);
    270c:	490c      	ldr	r1, [pc, #48]	; (2740 <writeGroundLog+0x40>)
    270e:	4b0d      	ldr	r3, [pc, #52]	; (2744 <writeGroundLog+0x44>)
    2710:	1861      	adds	r1, r4, r1
    2712:	201d      	movs	r0, #29
    2714:	4798      	blx	r3

        if (pageReady) {
    2716:	4b0c      	ldr	r3, [pc, #48]	; (2748 <writeGroundLog+0x48>)
    2718:	781a      	ldrb	r2, [r3, #0]
    271a:	2a00      	cmp	r2, #0
    271c:	d00c      	beq.n	2738 <writeGroundLog+0x38>
            pageReady = false;
    271e:	2200      	movs	r2, #0
    2720:	701a      	strb	r2, [r3, #0]
    2722:	4b0a      	ldr	r3, [pc, #40]	; (274c <writeGroundLog+0x4c>)
            pinToggle(LedPin);
            u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    2724:	4d0a      	ldr	r5, [pc, #40]	; (2750 <writeGroundLog+0x50>)
    2726:	61df      	str	r7, [r3, #28]
    2728:	490a      	ldr	r1, [pc, #40]	; (2754 <writeGroundLog+0x54>)
    272a:	4b0b      	ldr	r3, [pc, #44]	; (2758 <writeGroundLog+0x58>)
    272c:	6828      	ldr	r0, [r5, #0]
    272e:	4798      	blx	r3
            currentAddress = (currentAddress + 0x100);
    2730:	682b      	ldr	r3, [r5, #0]
    2732:	3301      	adds	r3, #1
    2734:	33ff      	adds	r3, #255	; 0xff
    2736:	602b      	str	r3, [r5, #0]
    2738:	341d      	adds	r4, #29
}

void writeGroundLog() {
    u8_t i;

    for (i = 0; i < 10; i++) {
    273a:	42b4      	cmp	r4, r6
    273c:	d1e6      	bne.n	270c <writeGroundLog+0xc>
            currentAddress = (currentAddress + 0x100);
        }

    }

}
    273e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2740:	20000414 	.word	0x20000414
    2744:	00002301 	.word	0x00002301
    2748:	2000040a 	.word	0x2000040a
    274c:	41004400 	.word	0x41004400
    2750:	20000410 	.word	0x20000410
    2754:	2000030a 	.word	0x2000030a
    2758:	000002a5 	.word	0x000002a5

0000275c <findNewFlightStart>:


void findNewFlightStart() {
    275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    275e:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    2760:	0020      	movs	r0, r4
    2762:	4b21      	ldr	r3, [pc, #132]	; (27e8 <findNewFlightStart+0x8c>)
    2764:	4798      	blx	r3
    2766:	2800      	cmp	r0, #0
    2768:	d138      	bne.n	27dc <findNewFlightStart+0x80>
    276a:	4f20      	ldr	r7, [pc, #128]	; (27ec <findNewFlightStart+0x90>)
    276c:	4d20      	ldr	r5, [pc, #128]	; (27f0 <findNewFlightStart+0x94>)

            if (flightNumbToCheck > 0) {
    276e:	2c00      	cmp	r4, #0
    2770:	d014      	beq.n	279c <findNewFlightStart+0x40>

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    2772:	1e60      	subs	r0, r4, #1
    2774:	4b1f      	ldr	r3, [pc, #124]	; (27f4 <findNewFlightStart+0x98>)
    2776:	b2c0      	uxtb	r0, r0
    2778:	4798      	blx	r3
    277a:	0006      	movs	r6, r0
                delay_ms(5);
    277c:	4b1e      	ldr	r3, [pc, #120]	; (27f8 <findNewFlightStart+0x9c>)
    277e:	2005      	movs	r0, #5
    2780:	4798      	blx	r3

                currentAddress = startAddress;

                flightStartAddress[0] = startAddress >> 0;
                flightStartAddress[1] = startAddress >> 8;
    2782:	0a33      	lsrs	r3, r6, #8
    2784:	706b      	strb	r3, [r5, #1]
                flightStartAddress[2] = startAddress >> 16;

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    2786:	2306      	movs	r3, #6
    2788:	4363      	muls	r3, r4
    278a:	4a1c      	ldr	r2, [pc, #112]	; (27fc <findNewFlightStart+0xa0>)
    278c:	3301      	adds	r3, #1
            if (flightNumbToCheck > 0) {

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;
    278e:	603e      	str	r6, [r7, #0]

                flightStartAddress[0] = startAddress >> 0;
    2790:	702e      	strb	r6, [r5, #0]
                flightStartAddress[1] = startAddress >> 8;
                flightStartAddress[2] = startAddress >> 16;

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    2792:	33ff      	adds	r3, #255	; 0xff

                currentAddress = startAddress;

                flightStartAddress[0] = startAddress >> 0;
                flightStartAddress[1] = startAddress >> 8;
                flightStartAddress[2] = startAddress >> 16;
    2794:	0c36      	lsrs	r6, r6, #16
    2796:	70ae      	strb	r6, [r5, #2]

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    2798:	8013      	strh	r3, [r2, #0]
    279a:	e00d      	b.n	27b8 <findNewFlightStart+0x5c>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
                flightStartAddress[1] = 0x10;
    279c:	2310      	movs	r3, #16
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;
    279e:	4a17      	ldr	r2, [pc, #92]	; (27fc <findNewFlightStart+0xa0>)
                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
                flightStartAddress[1] = 0x10;
    27a0:	706b      	strb	r3, [r5, #1]
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;
    27a2:	33f0      	adds	r3, #240	; 0xf0
    27a4:	8013      	strh	r3, [r2, #0]

                currentAddress = 0x001000;
    27a6:	2380      	movs	r3, #128	; 0x80
                beep(1000);
    27a8:	20fa      	movs	r0, #250	; 0xfa
                flightStartAddress[1] = 0x10;
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;

                currentAddress = 0x001000;
    27aa:	015b      	lsls	r3, r3, #5
    27ac:	603b      	str	r3, [r7, #0]
                beep(1000);
    27ae:	0080      	lsls	r0, r0, #2
    27b0:	4b13      	ldr	r3, [pc, #76]	; (2800 <findNewFlightStart+0xa4>)

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
    27b2:	702c      	strb	r4, [r5, #0]
                flightStartAddress[1] = 0x10;
                flightStartAddress[2] = 0x00;
    27b4:	70ac      	strb	r4, [r5, #2]

                flightAddressLocationInIndex = FLIGHTZEROSTART;

                currentAddress = 0x001000;
                beep(1000);
    27b6:	4798      	blx	r3
            }
            flightNumb = flightNumbToCheck;
    27b8:	4b12      	ldr	r3, [pc, #72]	; (2804 <findNewFlightStart+0xa8>)
    27ba:	701c      	strb	r4, [r3, #0]

            while (flightNumbToCheck > 0) {
                beep(500);
    27bc:	20fa      	movs	r0, #250	; 0xfa
    27be:	0040      	lsls	r0, r0, #1
                currentAddress = 0x001000;
                beep(1000);
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    27c0:	2c00      	cmp	r4, #0
    27c2:	d008      	beq.n	27d6 <findNewFlightStart+0x7a>
                beep(500);
    27c4:	4b0e      	ldr	r3, [pc, #56]	; (2800 <findNewFlightStart+0xa4>)
    27c6:	4798      	blx	r3
                delay_ms(500);
    27c8:	20fa      	movs	r0, #250	; 0xfa
    27ca:	4b0b      	ldr	r3, [pc, #44]	; (27f8 <findNewFlightStart+0x9c>)
    27cc:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    27ce:	3c01      	subs	r4, #1
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    27d0:	4798      	blx	r3
                --flightNumbToCheck;
    27d2:	b2e4      	uxtb	r4, r4
    27d4:	e7f2      	b.n	27bc <findNewFlightStart+0x60>
            }
            delay_ms(500);
    27d6:	4b08      	ldr	r3, [pc, #32]	; (27f8 <findNewFlightStart+0x9c>)
    27d8:	4798      	blx	r3
            break;
    27da:	e003      	b.n	27e4 <findNewFlightStart+0x88>
}


void findNewFlightStart() {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    27dc:	3401      	adds	r4, #1
    27de:	b2e4      	uxtb	r4, r4
    27e0:	2c14      	cmp	r4, #20
    27e2:	d1bd      	bne.n	2760 <findNewFlightStart+0x4>
            }
            delay_ms(500);
            break;
        }
    }
}
    27e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27e6:	46c0      	nop			; (mov r8, r8)
    27e8:	0000268d 	.word	0x0000268d
    27ec:	20000410 	.word	0x20000410
    27f0:	2000040b 	.word	0x2000040b
    27f4:	00002665 	.word	0x00002665
    27f8:	000010d9 	.word	0x000010d9
    27fc:	20000308 	.word	0x20000308
    2800:	00000e09 	.word	0x00000e09
    2804:	2000015b 	.word	0x2000015b

00002808 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    2808:	4b01      	ldr	r3, [pc, #4]	; (2810 <takeSample+0x8>)
    280a:	7818      	ldrb	r0, [r3, #0]
}
    280c:	4770      	bx	lr
    280e:	46c0      	nop			; (mov r8, r8)
    2810:	2000016d 	.word	0x2000016d

00002814 <pullSample>:

void pullSample() {
    SampleBool = true;
    2814:	2201      	movs	r2, #1
    2816:	4b01      	ldr	r3, [pc, #4]	; (281c <pullSample+0x8>)
    2818:	701a      	strb	r2, [r3, #0]
}
    281a:	4770      	bx	lr
    281c:	2000016d 	.word	0x2000016d

00002820 <sampleTick>:
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    2820:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;
    2822:	2600      	movs	r6, #0
    2824:	4bb1      	ldr	r3, [pc, #708]	; (2aec <sampleTick+0x2cc>)

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    2826:	4cb2      	ldr	r4, [pc, #712]	; (2af0 <sampleTick+0x2d0>)
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    2828:	b085      	sub	sp, #20
    SampleBool = false;
    282a:	701e      	strb	r6, [r3, #0]

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis() - startupTick;
    282c:	4bb1      	ldr	r3, [pc, #708]	; (2af4 <sampleTick+0x2d4>)

void sampleTick() {
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    282e:	6865      	ldr	r5, [r4, #4]
    sample.sampleTick = millis() - startupTick;
    2830:	4798      	blx	r3
    2832:	4bb1      	ldr	r3, [pc, #708]	; (2af8 <sampleTick+0x2d8>)
    2834:	681b      	ldr	r3, [r3, #0]
    2836:	1ac0      	subs	r0, r0, r3
    2838:	6060      	str	r0, [r4, #4]
    sample.tickDelta = sample.sampleTick - lastTick;
    283a:	1b40      	subs	r0, r0, r5

    // altimeter.flightTime = sample.sampleTick - offsets.StartupTick;



    sample.voltage.batV = adc_read(senseBatPin);
    283c:	4daf      	ldr	r5, [pc, #700]	; (2afc <sampleTick+0x2dc>)
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis() - startupTick;
    sample.tickDelta = sample.sampleTick - lastTick;
    283e:	8020      	strh	r0, [r4, #0]

    // altimeter.flightTime = sample.sampleTick - offsets.StartupTick;



    sample.voltage.batV = adc_read(senseBatPin);
    2840:	786b      	ldrb	r3, [r5, #1]
    2842:	7829      	ldrb	r1, [r5, #0]
    2844:	78a8      	ldrb	r0, [r5, #2]
    2846:	021b      	lsls	r3, r3, #8
    2848:	430b      	orrs	r3, r1
    284a:	0400      	lsls	r0, r0, #16
    284c:	001a      	movs	r2, r3
    284e:	0003      	movs	r3, r0
    2850:	78e8      	ldrb	r0, [r5, #3]
    2852:	4313      	orrs	r3, r2
    2854:	0600      	lsls	r0, r0, #24
    2856:	7929      	ldrb	r1, [r5, #4]
    2858:	4318      	orrs	r0, r3
    285a:	4ba9      	ldr	r3, [pc, #676]	; (2b00 <sampleTick+0x2e0>)
    285c:	4798      	blx	r3

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    285e:	4ba9      	ldr	r3, [pc, #676]	; (2b04 <sampleTick+0x2e4>)

    // altimeter.flightTime = sample.sampleTick - offsets.StartupTick;



    sample.voltage.batV = adc_read(senseBatPin);
    2860:	8120      	strh	r0, [r4, #8]

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    2862:	4798      	blx	r3
    2864:	4aa8      	ldr	r2, [pc, #672]	; (2b08 <sampleTick+0x2e8>)
    2866:	4fa9      	ldr	r7, [pc, #676]	; (2b0c <sampleTick+0x2ec>)
    2868:	4ba9      	ldr	r3, [pc, #676]	; (2b10 <sampleTick+0x2f0>)
    286a:	47b8      	blx	r7
    286c:	4ba9      	ldr	r3, [pc, #676]	; (2b14 <sampleTick+0x2f4>)
    286e:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    2870:	79ab      	ldrb	r3, [r5, #6]
    2872:	7969      	ldrb	r1, [r5, #5]



    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    2874:	60e0      	str	r0, [r4, #12]

    sample.voltage.senseA = adc_read(senseAPin);
    2876:	79e8      	ldrb	r0, [r5, #7]
    2878:	021b      	lsls	r3, r3, #8
    287a:	430b      	orrs	r3, r1
    287c:	0400      	lsls	r0, r0, #16
    287e:	001a      	movs	r2, r3
    2880:	0003      	movs	r3, r0
    2882:	7a28      	ldrb	r0, [r5, #8]
    2884:	4313      	orrs	r3, r2
    2886:	0600      	lsls	r0, r0, #24
    2888:	7a69      	ldrb	r1, [r5, #9]
    288a:	4318      	orrs	r0, r3
    288c:	4b9c      	ldr	r3, [pc, #624]	; (2b00 <sampleTick+0x2e0>)
    288e:	4798      	blx	r3
    sample.voltage.senseB = adc_read(senseBPin);
    2890:	7aeb      	ldrb	r3, [r5, #11]
    2892:	7aa9      	ldrb	r1, [r5, #10]

    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    2894:	8220      	strh	r0, [r4, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    2896:	7b28      	ldrb	r0, [r5, #12]
    2898:	021b      	lsls	r3, r3, #8
    289a:	430b      	orrs	r3, r1
    289c:	0400      	lsls	r0, r0, #16
    289e:	001a      	movs	r2, r3
    28a0:	0003      	movs	r3, r0
    28a2:	7b68      	ldrb	r0, [r5, #13]
    28a4:	4313      	orrs	r3, r2
    28a6:	0600      	lsls	r0, r0, #24
    28a8:	7ba9      	ldrb	r1, [r5, #14]
    28aa:	4318      	orrs	r0, r3
    28ac:	4b94      	ldr	r3, [pc, #592]	; (2b00 <sampleTick+0x2e0>)
    28ae:	4798      	blx	r3
    sample.voltage.senseC = adc_read(senseCPin);
    28b0:	7c2b      	ldrb	r3, [r5, #16]
    28b2:	7be9      	ldrb	r1, [r5, #15]
    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    28b4:	8260      	strh	r0, [r4, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    28b6:	7c68      	ldrb	r0, [r5, #17]
    28b8:	021b      	lsls	r3, r3, #8
    28ba:	430b      	orrs	r3, r1
    28bc:	0400      	lsls	r0, r0, #16
    28be:	001a      	movs	r2, r3
    28c0:	0003      	movs	r3, r0
    28c2:	7ca8      	ldrb	r0, [r5, #18]
    28c4:	4313      	orrs	r3, r2
    28c6:	0600      	lsls	r0, r0, #24
    28c8:	7ce9      	ldrb	r1, [r5, #19]
    28ca:	4318      	orrs	r0, r3
    28cc:	4b8c      	ldr	r3, [pc, #560]	; (2b00 <sampleTick+0x2e0>)
    28ce:	4798      	blx	r3
    sample.voltage.senseD = adc_read(senseDPin);
    28d0:	7d6b      	ldrb	r3, [r5, #21]
    28d2:	7d29      	ldrb	r1, [r5, #20]

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    28d4:	82a0      	strh	r0, [r4, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    28d6:	7da8      	ldrb	r0, [r5, #22]
    28d8:	021b      	lsls	r3, r3, #8
    28da:	430b      	orrs	r3, r1
    28dc:	0400      	lsls	r0, r0, #16
    28de:	001a      	movs	r2, r3
    28e0:	0003      	movs	r3, r0
    28e2:	7de8      	ldrb	r0, [r5, #23]
    28e4:	4313      	orrs	r3, r2
    28e6:	0600      	lsls	r0, r0, #24
    28e8:	7e29      	ldrb	r1, [r5, #24]
    28ea:	4318      	orrs	r0, r3
    28ec:	4b84      	ldr	r3, [pc, #528]	; (2b00 <sampleTick+0x2e0>)
    28ee:	4798      	blx	r3


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    28f0:	2210      	movs	r2, #16
    28f2:	4f89      	ldr	r7, [pc, #548]	; (2b18 <sampleTick+0x2f8>)
    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);
    28f4:	82e0      	strh	r0, [r4, #22]


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    28f6:	88bb      	ldrh	r3, [r7, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    28f8:	7e69      	ldrb	r1, [r5, #25]
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    28fa:	4313      	orrs	r3, r2
    28fc:	80bb      	strh	r3, [r7, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;
    28fe:	2304      	movs	r3, #4
    2900:	70bb      	strb	r3, [r7, #2]

    sample.analogRaw = adc_read(analogAccelPin);
    2902:	7eab      	ldrb	r3, [r5, #26]
    2904:	7ee8      	ldrb	r0, [r5, #27]
    2906:	021b      	lsls	r3, r3, #8
    2908:	430b      	orrs	r3, r1
    290a:	0400      	lsls	r0, r0, #16
    290c:	4303      	orrs	r3, r0
    290e:	7f28      	ldrb	r0, [r5, #28]
    2910:	7f69      	ldrb	r1, [r5, #29]
    2912:	0600      	lsls	r0, r0, #24
    2914:	4318      	orrs	r0, r3
    2916:	4b7a      	ldr	r3, [pc, #488]	; (2b00 <sampleTick+0x2e0>)
    2918:	4798      	blx	r3
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    291a:	4b80      	ldr	r3, [pc, #512]	; (2b1c <sampleTick+0x2fc>)


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    291c:	8320      	strh	r0, [r4, #24]
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    291e:	18c0      	adds	r0, r0, r3
    2920:	4b78      	ldr	r3, [pc, #480]	; (2b04 <sampleTick+0x2e4>)
    2922:	4798      	blx	r3
    2924:	4a7e      	ldr	r2, [pc, #504]	; (2b20 <sampleTick+0x300>)
    2926:	4d79      	ldr	r5, [pc, #484]	; (2b0c <sampleTick+0x2ec>)
    2928:	4b7e      	ldr	r3, [pc, #504]	; (2b24 <sampleTick+0x304>)
    292a:	47a8      	blx	r5
    292c:	4b79      	ldr	r3, [pc, #484]	; (2b14 <sampleTick+0x2f4>)
    292e:	4798      	blx	r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2930:	2580      	movs	r5, #128	; 0x80
    2932:	61e0      	str	r0, [r4, #28]

    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    2934:	70be      	strb	r6, [r7, #2]
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_12BIT;
    2936:	88bb      	ldrh	r3, [r7, #4]
    2938:	01ed      	lsls	r5, r5, #7
    293a:	b29b      	uxth	r3, r3
    293c:	80bb      	strh	r3, [r7, #4]
    293e:	4b7a      	ldr	r3, [pc, #488]	; (2b28 <sampleTick+0x308>)

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    2940:	2150      	movs	r1, #80	; 0x50
    2942:	4f7a      	ldr	r7, [pc, #488]	; (2b2c <sampleTick+0x30c>)
    2944:	615d      	str	r5, [r3, #20]
    2946:	2002      	movs	r0, #2
    2948:	47b8      	blx	r7
    pinHigh(cs_baro);
    delay_us(600);
    294a:	2096      	movs	r0, #150	; 0x96
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    294c:	4b76      	ldr	r3, [pc, #472]	; (2b28 <sampleTick+0x308>)
    294e:	0080      	lsls	r0, r0, #2
    2950:	619d      	str	r5, [r3, #24]
    2952:	4b77      	ldr	r3, [pc, #476]	; (2b30 <sampleTick+0x310>)
    2954:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    2956:	4b77      	ldr	r3, [pc, #476]	; (2b34 <sampleTick+0x314>)
    2958:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    295a:	4b73      	ldr	r3, [pc, #460]	; (2b28 <sampleTick+0x308>)
    295c:	9003      	str	r0, [sp, #12]

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    295e:	2140      	movs	r1, #64	; 0x40
    2960:	615d      	str	r5, [r3, #20]
    2962:	2002      	movs	r0, #2
    2964:	47b8      	blx	r7
    2966:	2280      	movs	r2, #128	; 0x80
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2968:	4b6f      	ldr	r3, [pc, #444]	; (2b28 <sampleTick+0x308>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    296a:	00d2      	lsls	r2, r2, #3
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    296c:	619d      	str	r5, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    296e:	4b72      	ldr	r3, [pc, #456]	; (2b38 <sampleTick+0x318>)

    u8_t byteOne;
    u8_t byteTwo;
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    2970:	2182      	movs	r1, #130	; 0x82
    2972:	601a      	str	r2, [r3, #0]
    2974:	0030      	movs	r0, r6
    2976:	47b8      	blx	r7
    byteOne = spiDataIn(ACCEL_SPI);
    2978:	4d70      	ldr	r5, [pc, #448]	; (2b3c <sampleTick+0x31c>)
    297a:	0030      	movs	r0, r6
    297c:	47a8      	blx	r5
    297e:	0007      	movs	r7, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2980:	0030      	movs	r0, r6
    2982:	47a8      	blx	r5
    sample.accelXint = twosComp(byteOne,byteTwo);
    2984:	0200      	lsls	r0, r0, #8
    2986:	4307      	orrs	r7, r0
    byteOne = spiDataIn(ACCEL_SPI);
    2988:	0030      	movs	r0, r6
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelXint = twosComp(byteOne,byteTwo);
    298a:	8427      	strh	r7, [r4, #32]
    byteOne = spiDataIn(ACCEL_SPI);
    298c:	47a8      	blx	r5
    298e:	0007      	movs	r7, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2990:	0030      	movs	r0, r6
    2992:	47a8      	blx	r5
    sample.accelYint = twosComp(byteOne,byteTwo);
    2994:	0200      	lsls	r0, r0, #8
    2996:	4307      	orrs	r7, r0
    byteOne = spiDataIn(ACCEL_SPI);
    2998:	0030      	movs	r0, r6
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelYint = twosComp(byteOne,byteTwo);
    299a:	8527      	strh	r7, [r4, #40]	; 0x28
    byteOne = spiDataIn(ACCEL_SPI);
    299c:	47a8      	blx	r5
    299e:	0007      	movs	r7, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    29a0:	0030      	movs	r0, r6
    29a2:	47a8      	blx	r5
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    29a4:	2280      	movs	r2, #128	; 0x80
    29a6:	4b66      	ldr	r3, [pc, #408]	; (2b40 <sampleTick+0x320>)
    29a8:	00d2      	lsls	r2, r2, #3
    29aa:	601a      	str	r2, [r3, #0]
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;
    29ac:	0205      	lsls	r5, r0, #8
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    29ae:	2220      	movs	r2, #32
    29b0:	5ea3      	ldrsh	r3, [r4, r2]
    sample.accelYint =  sample.accelYint >> 4;
    29b2:	2228      	movs	r2, #40	; 0x28
    29b4:	5ea6      	ldrsh	r6, [r4, r2]
    sample.accelZint =  sample.accelZint >> 4;
    29b6:	432f      	orrs	r7, r5
    29b8:	b23d      	sxth	r5, r7
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    29ba:	111b      	asrs	r3, r3, #4
    sample.accelYint =  sample.accelYint >> 4;
    29bc:	1136      	asrs	r6, r6, #4
    sample.accelZint =  sample.accelZint >> 4;
    29be:	112d      	asrs	r5, r5, #4
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    29c0:	8423      	strh	r3, [r4, #32]
    sample.accelYint =  sample.accelYint >> 4;
    29c2:	8526      	strh	r6, [r4, #40]	; 0x28
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    29c4:	0018      	movs	r0, r3
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;
    29c6:	8625      	strh	r5, [r4, #48]	; 0x30

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    29c8:	4b4e      	ldr	r3, [pc, #312]	; (2b04 <sampleTick+0x2e4>)
    29ca:	4798      	blx	r3
    29cc:	23fe      	movs	r3, #254	; 0xfe
    29ce:	2200      	movs	r2, #0
    29d0:	059b      	lsls	r3, r3, #22
    29d2:	4f4e      	ldr	r7, [pc, #312]	; (2b0c <sampleTick+0x2ec>)
    29d4:	47b8      	blx	r7
    29d6:	4b4f      	ldr	r3, [pc, #316]	; (2b14 <sampleTick+0x2f4>)
    29d8:	4798      	blx	r3
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    29da:	4b4a      	ldr	r3, [pc, #296]	; (2b04 <sampleTick+0x2e4>)

    sample.accelXint =  sample.accelXint >> 4;
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    29dc:	6260      	str	r0, [r4, #36]	; 0x24
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    29de:	0030      	movs	r0, r6
    29e0:	4798      	blx	r3
    29e2:	23fe      	movs	r3, #254	; 0xfe
    29e4:	2200      	movs	r2, #0
    29e6:	059b      	lsls	r3, r3, #22
    29e8:	47b8      	blx	r7
    29ea:	4b4a      	ldr	r3, [pc, #296]	; (2b14 <sampleTick+0x2f4>)
    29ec:	4798      	blx	r3
	
    if (altimeter.pointingUp) {
    29ee:	4b55      	ldr	r3, [pc, #340]	; (2b44 <sampleTick+0x324>)
    sample.accelXint =  sample.accelXint >> 4;
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    29f0:	62e0      	str	r0, [r4, #44]	; 0x2c
	
    if (altimeter.pointingUp) {
    29f2:	795b      	ldrb	r3, [r3, #5]
    29f4:	4e4c      	ldr	r6, [pc, #304]	; (2b28 <sampleTick+0x308>)
    29f6:	2b00      	cmp	r3, #0
    29f8:	d007      	beq.n	2a0a <sampleTick+0x1ea>
        sample.accelZ = -sample.accelZint * BMI055_ACCEL_16G_DIV;
    29fa:	4268      	negs	r0, r5
    29fc:	4b41      	ldr	r3, [pc, #260]	; (2b04 <sampleTick+0x2e4>)
    29fe:	4798      	blx	r3
    2a00:	23fe      	movs	r3, #254	; 0xfe
    2a02:	2200      	movs	r2, #0
    2a04:	059b      	lsls	r3, r3, #22
    2a06:	003d      	movs	r5, r7
    2a08:	e006      	b.n	2a18 <sampleTick+0x1f8>
    } else {
        sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    2a0a:	0028      	movs	r0, r5
    2a0c:	4b3d      	ldr	r3, [pc, #244]	; (2b04 <sampleTick+0x2e4>)
    2a0e:	4798      	blx	r3
    2a10:	23fe      	movs	r3, #254	; 0xfe
    2a12:	2200      	movs	r2, #0
    2a14:	4d3d      	ldr	r5, [pc, #244]	; (2b0c <sampleTick+0x2ec>)
    2a16:	059b      	lsls	r3, r3, #22
    2a18:	47a8      	blx	r5
    2a1a:	4b3e      	ldr	r3, [pc, #248]	; (2b14 <sampleTick+0x2f4>)
    2a1c:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2a1e:	2380      	movs	r3, #128	; 0x80
    2a20:	00db      	lsls	r3, r3, #3
    }

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    2a22:	2182      	movs	r1, #130	; 0x82
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
	
    if (altimeter.pointingUp) {
        sample.accelZ = -sample.accelZint * BMI055_ACCEL_16G_DIV;
    } else {
        sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    2a24:	6360      	str	r0, [r4, #52]	; 0x34
    2a26:	6173      	str	r3, [r6, #20]
    }

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    2a28:	2000      	movs	r0, #0
    2a2a:	4b40      	ldr	r3, [pc, #256]	; (2b2c <sampleTick+0x30c>)
    2a2c:	4798      	blx	r3
    byteOne = spiDataIn(GYRO_SPI);
    2a2e:	4d43      	ldr	r5, [pc, #268]	; (2b3c <sampleTick+0x31c>)
    2a30:	2000      	movs	r0, #0
    2a32:	47a8      	blx	r5
    2a34:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    2a36:	2000      	movs	r0, #0
    2a38:	47a8      	blx	r5
    sample.gyroXint = twosComp(byteOne,byteTwo);
    2a3a:	4f2d      	ldr	r7, [pc, #180]	; (2af0 <sampleTick+0x2d0>)
    2a3c:	0200      	lsls	r0, r0, #8
    2a3e:	4304      	orrs	r4, r0
    byteOne = spiDataIn(GYRO_SPI);
    2a40:	2000      	movs	r0, #0
    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroXint = twosComp(byteOne,byteTwo);
    2a42:	873c      	strh	r4, [r7, #56]	; 0x38
    byteOne = spiDataIn(GYRO_SPI);
    2a44:	47a8      	blx	r5
    2a46:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    2a48:	2000      	movs	r0, #0
    2a4a:	47a8      	blx	r5
    sample.gyroYint = twosComp(byteOne,byteTwo);
    2a4c:	4b3e      	ldr	r3, [pc, #248]	; (2b48 <sampleTick+0x328>)
    2a4e:	0200      	lsls	r0, r0, #8
    2a50:	4304      	orrs	r4, r0
    byteOne = spiDataIn(GYRO_SPI);
    2a52:	2000      	movs	r0, #0
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroYint = twosComp(byteOne,byteTwo);
    2a54:	87dc      	strh	r4, [r3, #62]	; 0x3e
    byteOne = spiDataIn(GYRO_SPI);
    2a56:	47a8      	blx	r5
    2a58:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    2a5a:	2000      	movs	r0, #0
    2a5c:	47a8      	blx	r5
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2a5e:	2380      	movs	r3, #128	; 0x80
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    2a60:	4669      	mov	r1, sp
    2a62:	00db      	lsls	r3, r3, #3
    2a64:	61b3      	str	r3, [r6, #24]
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    2a66:	2238      	movs	r2, #56	; 0x38
    2a68:	5ebb      	ldrsh	r3, [r7, r2]
    sample.gyroYint = sample.gyroYint >> 4;
    2a6a:	4a37      	ldr	r2, [pc, #220]	; (2b48 <sampleTick+0x328>)
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    2a6c:	111b      	asrs	r3, r3, #4
    2a6e:	873b      	strh	r3, [r7, #56]	; 0x38
    sample.gyroYint = sample.gyroYint >> 4;
    2a70:	253e      	movs	r5, #62	; 0x3e
    2a72:	5f55      	ldrsh	r5, [r2, r5]
    sample.gyroZint = sample.gyroZint >> 4;
    2a74:	0200      	lsls	r0, r0, #8
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    2a76:	112a      	asrs	r2, r5, #4
    2a78:	9201      	str	r2, [sp, #4]
    2a7a:	8889      	ldrh	r1, [r1, #4]
    2a7c:	4a32      	ldr	r2, [pc, #200]	; (2b48 <sampleTick+0x328>)
    sample.gyroZint = sample.gyroZint >> 4;
    2a7e:	4304      	orrs	r4, r0
    2a80:	b224      	sxth	r4, r4
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    2a82:	87d1      	strh	r1, [r2, #62]	; 0x3e
    sample.gyroZint = sample.gyroZint >> 4;
    2a84:	1122      	asrs	r2, r4, #4
    2a86:	4669      	mov	r1, sp
    2a88:	9202      	str	r2, [sp, #8]
    2a8a:	003a      	movs	r2, r7
    2a8c:	8909      	ldrh	r1, [r1, #8]
    2a8e:	3248      	adds	r2, #72	; 0x48

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    2a90:	4d1c      	ldr	r5, [pc, #112]	; (2b04 <sampleTick+0x2e4>)
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    sample.gyroZint = sample.gyroZint >> 4;
    2a92:	8011      	strh	r1, [r2, #0]

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    2a94:	0018      	movs	r0, r3
    2a96:	47a8      	blx	r5
    2a98:	23fe      	movs	r3, #254	; 0xfe
    2a9a:	4c1c      	ldr	r4, [pc, #112]	; (2b0c <sampleTick+0x2ec>)
    2a9c:	2200      	movs	r2, #0
    2a9e:	059b      	lsls	r3, r3, #22
    2aa0:	47a0      	blx	r4
    2aa2:	4e1c      	ldr	r6, [pc, #112]	; (2b14 <sampleTick+0x2f4>)
    2aa4:	47b0      	blx	r6
    2aa6:	63f8      	str	r0, [r7, #60]	; 0x3c
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    2aa8:	9801      	ldr	r0, [sp, #4]
    2aaa:	47a8      	blx	r5
    2aac:	23fe      	movs	r3, #254	; 0xfe
    2aae:	2200      	movs	r2, #0
    2ab0:	059b      	lsls	r3, r3, #22
    2ab2:	47a0      	blx	r4
    2ab4:	47b0      	blx	r6
    2ab6:	6478      	str	r0, [r7, #68]	; 0x44
    sample.gyroZ =  sample.gyroZint * BMI055_GYRO_2000DS_DIV;
    2ab8:	9802      	ldr	r0, [sp, #8]
    2aba:	47a8      	blx	r5
    2abc:	23fe      	movs	r3, #254	; 0xfe
    2abe:	2200      	movs	r2, #0
    2ac0:	059b      	lsls	r3, r3, #22
    2ac2:	47a0      	blx	r4
    2ac4:	47b0      	blx	r6
    2ac6:	64f8      	str	r0, [r7, #76]	; 0x4c


    delay_us(400);
    2ac8:	20c8      	movs	r0, #200	; 0xc8
    2aca:	4b19      	ldr	r3, [pc, #100]	; (2b30 <sampleTick+0x310>)
    2acc:	0040      	lsls	r0, r0, #1
    2ace:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    2ad0:	4b18      	ldr	r3, [pc, #96]	; (2b34 <sampleTick+0x314>)
    2ad2:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    2ad4:	4a1d      	ldr	r2, [pc, #116]	; (2b4c <sampleTick+0x32c>)
    2ad6:	9903      	ldr	r1, [sp, #12]
    2ad8:	4b1d      	ldr	r3, [pc, #116]	; (2b50 <sampleTick+0x330>)
    2ada:	4c1e      	ldr	r4, [pc, #120]	; (2b54 <sampleTick+0x334>)
    2adc:	47a0      	blx	r4
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
    2ade:	6d38      	ldr	r0, [r7, #80]	; 0x50
    2ae0:	4b1d      	ldr	r3, [pc, #116]	; (2b58 <sampleTick+0x338>)
    2ae2:	4798      	blx	r3
    2ae4:	65b8      	str	r0, [r7, #88]	; 0x58
    2ae6:	65f9      	str	r1, [r7, #92]	; 0x5c
}
    2ae8:	b005      	add	sp, #20
    2aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2aec:	2000016d 	.word	0x2000016d
    2af0:	20000540 	.word	0x20000540
    2af4:	00001125 	.word	0x00001125
    2af8:	2000015c 	.word	0x2000015c
    2afc:	000064a8 	.word	0x000064a8
    2b00:	00000da1 	.word	0x00000da1
    2b04:	00006161 	.word	0x00006161
    2b08:	a97e132b 	.word	0xa97e132b
    2b0c:	00005519 	.word	0x00005519
    2b10:	3f65379f 	.word	0x3f65379f
    2b14:	000062fd 	.word	0x000062fd
    2b18:	42004000 	.word	0x42004000
    2b1c:	ffff41c9 	.word	0xffff41c9
    2b20:	abb44e51 	.word	0xabb44e51
    2b24:	3f73f290 	.word	0x3f73f290
    2b28:	41004400 	.word	0x41004400
    2b2c:	00002c85 	.word	0x00002c85
    2b30:	000010a5 	.word	0x000010a5
    2b34:	000003b5 	.word	0x000003b5
    2b38:	41004494 	.word	0x41004494
    2b3c:	00002c9d 	.word	0x00002c9d
    2b40:	41004498 	.word	0x41004498
    2b44:	20000160 	.word	0x20000160
    2b48:	20000542 	.word	0x20000542
    2b4c:	20000594 	.word	0x20000594
    2b50:	20000590 	.word	0x20000590
    2b54:	000003f5 	.word	0x000003f5
    2b58:	00000495 	.word	0x00000495

00002b5c <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2b5c:	b570      	push	{r4, r5, r6, lr}
    2b5e:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2b60:	2301      	movs	r3, #1
    2b62:	1ca6      	adds	r6, r4, #2
    2b64:	40b3      	lsls	r3, r6
    2b66:	480d      	ldr	r0, [pc, #52]	; (2b9c <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2b68:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2b6a:	6a01      	ldr	r1, [r0, #32]
    2b6c:	430b      	orrs	r3, r1
    2b6e:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    2b70:	2d00      	cmp	r5, #0
    2b72:	d003      	beq.n	2b7c <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    2b74:	2107      	movs	r1, #7
    2b76:	0028      	movs	r0, r5
    2b78:	4b09      	ldr	r3, [pc, #36]	; (2ba0 <sercomClockEnable+0x44>)
    2b7a:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    2b7c:	22f0      	movs	r2, #240	; 0xf0
    2b7e:	2080      	movs	r0, #128	; 0x80
    2b80:	0229      	lsls	r1, r5, #8
    2b82:	0112      	lsls	r2, r2, #4
    2b84:	4011      	ands	r1, r2
    2b86:	01c0      	lsls	r0, r0, #7
    2b88:	4301      	orrs	r1, r0
    2b8a:	0020      	movs	r0, r4
    2b8c:	3014      	adds	r0, #20
    2b8e:	223f      	movs	r2, #63	; 0x3f
    2b90:	0003      	movs	r3, r0
    2b92:	4013      	ands	r3, r2
    2b94:	4319      	orrs	r1, r3
    2b96:	4b03      	ldr	r3, [pc, #12]	; (2ba4 <sercomClockEnable+0x48>)
    2b98:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    2b9a:	bd70      	pop	{r4, r5, r6, pc}
    2b9c:	40000400 	.word	0x40000400
    2ba0:	00000fd5 	.word	0x00000fd5
    2ba4:	40000c00 	.word	0x40000c00

00002ba8 <sercomReset>:
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2ba8:	4b04      	ldr	r3, [pc, #16]	; (2bbc <sercomReset+0x14>)
    2baa:	0280      	lsls	r0, r0, #10
    2bac:	18c0      	adds	r0, r0, r3
//                         GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    2bae:	2301      	movs	r3, #1
    2bb0:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    2bb2:	6802      	ldr	r2, [r0, #0]
    2bb4:	421a      	tst	r2, r3
    2bb6:	d1fc      	bne.n	2bb2 <sercomReset+0xa>
}
    2bb8:	4770      	bx	lr
    2bba:	46c0      	nop			; (mov r8, r8)
    2bbc:	42000800 	.word	0x42000800

00002bc0 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2bc2:	0004      	movs	r4, r0
    2bc4:	9300      	str	r3, [sp, #0]
    2bc6:	ab08      	add	r3, sp, #32
    2bc8:	781b      	ldrb	r3, [r3, #0]
    2bca:	000e      	movs	r6, r1
    2bcc:	9301      	str	r3, [sp, #4]
    2bce:	ab09      	add	r3, sp, #36	; 0x24
    2bd0:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    2bd2:	4b12      	ldr	r3, [pc, #72]	; (2c1c <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2bd4:	0015      	movs	r5, r2

    sercomReset(id);
    2bd6:	4798      	blx	r3
    2bd8:	4b11      	ldr	r3, [pc, #68]	; (2c20 <sercomSpiMasterInit+0x60>)
    2bda:	02a4      	lsls	r4, r4, #10
    2bdc:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    2bde:	2380      	movs	r3, #128	; 0x80
    2be0:	029b      	lsls	r3, r3, #10
    2be2:	6063      	str	r3, [r4, #4]
    2be4:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    2be6:	21c0      	movs	r1, #192	; 0xc0
    2be8:	042d      	lsls	r5, r5, #16
    2bea:	029b      	lsls	r3, r3, #10
    2bec:	402b      	ands	r3, r5
    2bee:	250e      	movs	r5, #14
    2bf0:	0536      	lsls	r6, r6, #20
    2bf2:	0389      	lsls	r1, r1, #14
    2bf4:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2bf6:	9e00      	ldr	r6, [sp, #0]
    2bf8:	431d      	orrs	r5, r3
    2bfa:	1e73      	subs	r3, r6, #1
    2bfc:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2bfe:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2c00:	0772      	lsls	r2, r6, #29
    2c02:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2c04:	432a      	orrs	r2, r5
    2c06:	1e59      	subs	r1, r3, #1
    2c08:	418b      	sbcs	r3, r1
    2c0a:	0016      	movs	r6, r2
    2c0c:	071b      	lsls	r3, r3, #28
    2c0e:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    2c10:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    2c12:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    2c14:	69e3      	ldr	r3, [r4, #28]
    2c16:	075b      	lsls	r3, r3, #29
    2c18:	d4fc      	bmi.n	2c14 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    2c1a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2c1c:	00002ba9 	.word	0x00002ba9
    2c20:	42000800 	.word	0x42000800

00002c24 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2c24:	b570      	push	{r4, r5, r6, lr}
    2c26:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    2c28:	4b0c      	ldr	r3, [pc, #48]	; (2c5c <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2c2a:	000d      	movs	r5, r1
    2c2c:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    2c2e:	4798      	blx	r3
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2c30:	4b0b      	ldr	r3, [pc, #44]	; (2c60 <sercomUartInit+0x3c>)
    2c32:	02b0      	lsls	r0, r6, #10
    2c34:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2c36:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2c38:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2c3a:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    2c3c:	4b09      	ldr	r3, [pc, #36]	; (2c64 <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2c3e:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    2c40:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2c42:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2c44:	0392      	lsls	r2, r2, #14
    2c46:	4011      	ands	r1, r2
    2c48:	4a07      	ldr	r2, [pc, #28]	; (2c68 <sercomUartInit+0x44>)

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2c4a:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2c4c:	0424      	lsls	r4, r4, #16

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2c4e:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2c50:	4311      	orrs	r1, r2
    2c52:	4023      	ands	r3, r4
    2c54:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    2c56:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    2c58:	bd70      	pop	{r4, r5, r6, pc}
    2c5a:	46c0      	nop			; (mov r8, r8)
    2c5c:	00002ba9 	.word	0x00002ba9
    2c60:	42000800 	.word	0x42000800
    2c64:	ffffb15b 	.word	0xffffb15b
    2c68:	40000006 	.word	0x40000006

00002c6c <spiDataTransfer>:
    2c6c:	4b04      	ldr	r3, [pc, #16]	; (2c80 <spiDataTransfer+0x14>)
    2c6e:	0280      	lsls	r0, r0, #10
    2c70:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    2c72:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2c74:	7e03      	ldrb	r3, [r0, #24]
    2c76:	075b      	lsls	r3, r3, #29
    2c78:	d5fc      	bpl.n	2c74 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    2c7a:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2c7c:	b2c0      	uxtb	r0, r0
}
    2c7e:	4770      	bx	lr
    2c80:	42000800 	.word	0x42000800

00002c84 <spiDataOut>:
    2c84:	4b04      	ldr	r3, [pc, #16]	; (2c98 <spiDataOut+0x14>)
    2c86:	0280      	lsls	r0, r0, #10
    2c88:	18c0      	adds	r0, r0, r3

void spiDataOut(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    2c8a:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2c8c:	7e03      	ldrb	r3, [r0, #24]
    2c8e:	075b      	lsls	r3, r3, #29
    2c90:	d5fc      	bpl.n	2c8c <spiDataOut+0x8>
    u8_t dummy = sercom(id)->SPI.DATA.reg;
    2c92:	6a83      	ldr	r3, [r0, #40]	; 0x28
}
    2c94:	4770      	bx	lr
    2c96:	46c0      	nop			; (mov r8, r8)
    2c98:	42000800 	.word	0x42000800

00002c9c <spiDataIn>:
    2c9c:	4b05      	ldr	r3, [pc, #20]	; (2cb4 <spiDataIn+0x18>)
    2c9e:	0280      	lsls	r0, r0, #10
    2ca0:	18c0      	adds	r0, r0, r3

u8_t spiDataIn(SercomId id) {
    sercom(id)->SPI.DATA.reg = 0xFF;
    2ca2:	23ff      	movs	r3, #255	; 0xff
    2ca4:	6283      	str	r3, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2ca6:	7e03      	ldrb	r3, [r0, #24]
    2ca8:	075b      	lsls	r3, r3, #29
    2caa:	d5fc      	bpl.n	2ca6 <spiDataIn+0xa>
    return sercom(id)->SPI.DATA.reg;
    2cac:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2cae:	b2c0      	uxtb	r0, r0
}
    2cb0:	4770      	bx	lr
    2cb2:	46c0      	nop			; (mov r8, r8)
    2cb4:	42000800 	.word	0x42000800

00002cb8 <usartDataOut>:
    2cb8:	4b04      	ldr	r3, [pc, #16]	; (2ccc <usartDataOut+0x14>)
    2cba:	0280      	lsls	r0, r0, #10
    2cbc:	18c0      	adds	r0, r0, r3

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    2cbe:	b289      	uxth	r1, r1
    2cc0:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    2cc2:	7e03      	ldrb	r3, [r0, #24]
    2cc4:	07db      	lsls	r3, r3, #31
    2cc6:	d5fc      	bpl.n	2cc2 <usartDataOut+0xa>
}
    2cc8:	4770      	bx	lr
    2cca:	46c0      	nop			; (mov r8, r8)
    2ccc:	42000800 	.word	0x42000800

00002cd0 <usartDataIn>:
    2cd0:	4b02      	ldr	r3, [pc, #8]	; (2cdc <usartDataIn+0xc>)
    2cd2:	0280      	lsls	r0, r0, #10
    2cd4:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    2cd6:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2cd8:	b2c0      	uxtb	r0, r0
}
    2cda:	4770      	bx	lr
    2cdc:	42000800 	.word	0x42000800

00002ce0 <findMainAltitude>:
#include <boardDefines.h>


void findMainAltitude() {

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    2ce0:	4a11      	ldr	r2, [pc, #68]	; (2d28 <findMainAltitude+0x48>)
    2ce2:	7851      	ldrb	r1, [r2, #1]
    2ce4:	0013      	movs	r3, r2
    2ce6:	2900      	cmp	r1, #0
    2ce8:	d105      	bne.n	2cf6 <findMainAltitude+0x16>
    2cea:	7811      	ldrb	r1, [r2, #0]
    2cec:	2900      	cmp	r1, #0
    2cee:	d002      	beq.n	2cf6 <findMainAltitude+0x16>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelASettings.MAIN_DEPLOY;
    2cf0:	8853      	ldrh	r3, [r2, #2]
    2cf2:	8313      	strh	r3, [r2, #24]
        return;
    2cf4:	e017      	b.n	2d26 <findMainAltitude+0x46>
    }
    if (deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    2cf6:	79da      	ldrb	r2, [r3, #7]
    2cf8:	2a00      	cmp	r2, #0
    2cfa:	d104      	bne.n	2d06 <findMainAltitude+0x26>
    2cfc:	799a      	ldrb	r2, [r3, #6]
    2cfe:	2a00      	cmp	r2, #0
    2d00:	d001      	beq.n	2d06 <findMainAltitude+0x26>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelBSettings.MAIN_DEPLOY;
    2d02:	891a      	ldrh	r2, [r3, #8]
    2d04:	e00e      	b.n	2d24 <findMainAltitude+0x44>
        return;
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    2d06:	7b5a      	ldrb	r2, [r3, #13]
    2d08:	2a00      	cmp	r2, #0
    2d0a:	d104      	bne.n	2d16 <findMainAltitude+0x36>
    2d0c:	7b1a      	ldrb	r2, [r3, #12]
    2d0e:	2a00      	cmp	r2, #0
    2d10:	d001      	beq.n	2d16 <findMainAltitude+0x36>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelCSettings.MAIN_DEPLOY;
    2d12:	89da      	ldrh	r2, [r3, #14]
    2d14:	e006      	b.n	2d24 <findMainAltitude+0x44>
        return;
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    2d16:	7cda      	ldrb	r2, [r3, #19]
    2d18:	2a00      	cmp	r2, #0
    2d1a:	d104      	bne.n	2d26 <findMainAltitude+0x46>
    2d1c:	7c9a      	ldrb	r2, [r3, #18]
    2d1e:	2a00      	cmp	r2, #0
    2d20:	d001      	beq.n	2d26 <findMainAltitude+0x46>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelDSettings.MAIN_DEPLOY;
    2d22:	8a9a      	ldrh	r2, [r3, #20]
    2d24:	831a      	strh	r2, [r3, #24]
        return;
    }


}
    2d26:	4770      	bx	lr
    2d28:	20000140 	.word	0x20000140

00002d2c <applyDefaultSettings>:
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2d2c:	2096      	movs	r0, #150	; 0x96

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    2d2e:	2200      	movs	r2, #0

}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    2d30:	2101      	movs	r1, #1
    2d32:	4b09      	ldr	r3, [pc, #36]	; (2d58 <applyDefaultSettings+0x2c>)
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2d34:	0040      	lsls	r0, r0, #1

}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    2d36:	7019      	strb	r1, [r3, #0]
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    2d38:	7059      	strb	r1, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    2d3a:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;
    2d3c:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = true;
    2d3e:	7199      	strb	r1, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    2d40:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2d42:	8118      	strh	r0, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = 0;
    2d44:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = false;
    2d46:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = DROGUE_t;
    2d48:	7359      	strb	r1, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = 0;
    2d4a:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = 0;
    2d4c:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = false;
    2d4e:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = MAIN_t;
    2d50:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = 300;
    2d52:	8298      	strh	r0, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = 0;
    2d54:	759a      	strb	r2, [r3, #22]
}
    2d56:	4770      	bx	lr
    2d58:	20000140 	.word	0x20000140

00002d5c <putSettings>:

void putSettings() {
    2d5c:	b500      	push	{lr}
    2d5e:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    2d60:	4669      	mov	r1, sp
    settings[1] = deploymentSettings.channelASettings.TYPE;
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    2d62:	4668      	mov	r0, sp

void putSettings() {

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    2d64:	4b17      	ldr	r3, [pc, #92]	; (2dc4 <putSettings+0x68>)
    2d66:	781a      	ldrb	r2, [r3, #0]
    2d68:	700a      	strb	r2, [r1, #0]
    settings[1] = deploymentSettings.channelASettings.TYPE;
    2d6a:	785a      	ldrb	r2, [r3, #1]
    2d6c:	704a      	strb	r2, [r1, #1]
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    2d6e:	885a      	ldrh	r2, [r3, #2]
    2d70:	0a11      	lsrs	r1, r2, #8
    2d72:	7081      	strb	r1, [r0, #2]
    settings[3] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 0;
    2d74:	70c2      	strb	r2, [r0, #3]
    settings[4] = deploymentSettings.channelASettings.APPOGE_DELAY;
    2d76:	791a      	ldrb	r2, [r3, #4]
    2d78:	7102      	strb	r2, [r0, #4]

    settings[5] = deploymentSettings.channelBSettings.ENABLED;
    2d7a:	799a      	ldrb	r2, [r3, #6]
    2d7c:	7142      	strb	r2, [r0, #5]
    settings[6] = deploymentSettings.channelBSettings.TYPE;
    2d7e:	79da      	ldrb	r2, [r3, #7]
    2d80:	7182      	strb	r2, [r0, #6]
    settings[7] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 8;
    2d82:	891a      	ldrh	r2, [r3, #8]
    2d84:	0a11      	lsrs	r1, r2, #8
    2d86:	71c1      	strb	r1, [r0, #7]
    settings[8] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 0;
    2d88:	7202      	strb	r2, [r0, #8]
    settings[9] = deploymentSettings.channelBSettings.APPOGE_DELAY;
    2d8a:	7a9a      	ldrb	r2, [r3, #10]
    2d8c:	7242      	strb	r2, [r0, #9]

    settings[10] = deploymentSettings.channelCSettings.ENABLED;
    2d8e:	7b1a      	ldrb	r2, [r3, #12]
    2d90:	7282      	strb	r2, [r0, #10]
    settings[11] = deploymentSettings.channelCSettings.TYPE;
    2d92:	7b5a      	ldrb	r2, [r3, #13]
    2d94:	72c2      	strb	r2, [r0, #11]
    settings[12] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 8;
    2d96:	89da      	ldrh	r2, [r3, #14]
    2d98:	0a11      	lsrs	r1, r2, #8
    2d9a:	7301      	strb	r1, [r0, #12]
    settings[13] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 0;
    2d9c:	7342      	strb	r2, [r0, #13]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;
    2d9e:	7c1a      	ldrb	r2, [r3, #16]
    2da0:	7382      	strb	r2, [r0, #14]

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    2da2:	7c9a      	ldrb	r2, [r3, #18]
    2da4:	73c2      	strb	r2, [r0, #15]
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    2da6:	7cda      	ldrb	r2, [r3, #19]
    2da8:	7402      	strb	r2, [r0, #16]
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    2daa:	8a9a      	ldrh	r2, [r3, #20]
    2dac:	0a11      	lsrs	r1, r2, #8
    2dae:	7441      	strb	r1, [r0, #17]
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    2db0:	7482      	strb	r2, [r0, #18]
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    2db2:	7d9b      	ldrb	r3, [r3, #22]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    2db4:	4669      	mov	r1, sp
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    2db6:	74c3      	strb	r3, [r0, #19]

    settings[20] = 0x00;
    2db8:	2000      	movs	r0, #0

    AT25SEWritePage(0x00,settings);
    2dba:	4b03      	ldr	r3, [pc, #12]	; (2dc8 <putSettings+0x6c>)
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;

    settings[20] = 0x00;
    2dbc:	7508      	strb	r0, [r1, #20]

    AT25SEWritePage(0x00,settings);
    2dbe:	4798      	blx	r3
}
    2dc0:	b041      	add	sp, #260	; 0x104
    2dc2:	bd00      	pop	{pc}
    2dc4:	20000140 	.word	0x20000140
    2dc8:	000002a5 	.word	0x000002a5

00002dcc <getSettings>:




void getSettings() {
    2dcc:	b500      	push	{lr}
    2dce:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);
    2dd0:	4669      	mov	r1, sp
    2dd2:	4b2c      	ldr	r3, [pc, #176]	; (2e84 <getSettings+0xb8>)
    2dd4:	2000      	movs	r0, #0
    2dd6:	4798      	blx	r3

    deploymentSettings.channelASettings.ENABLED = settings[0];
    2dd8:	466a      	mov	r2, sp
    2dda:	7812      	ldrb	r2, [r2, #0]
    2ddc:	4b2a      	ldr	r3, [pc, #168]	; (2e88 <getSettings+0xbc>)
    2dde:	1e51      	subs	r1, r2, #1
    2de0:	418a      	sbcs	r2, r1
    2de2:	701a      	strb	r2, [r3, #0]
    deploymentSettings.channelASettings.TYPE = settings[1];
    2de4:	466a      	mov	r2, sp
    2de6:	7852      	ldrb	r2, [r2, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    2de8:	4669      	mov	r1, sp
    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);

    deploymentSettings.channelASettings.ENABLED = settings[0];
    deploymentSettings.channelASettings.TYPE = settings[1];
    2dea:	705a      	strb	r2, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    2dec:	466a      	mov	r2, sp
    2dee:	7892      	ldrb	r2, [r2, #2]
    2df0:	78c9      	ldrb	r1, [r1, #3]
    2df2:	0212      	lsls	r2, r2, #8
    2df4:	430a      	orrs	r2, r1
    2df6:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];
    2df8:	466a      	mov	r2, sp
    2dfa:	7912      	ldrb	r2, [r2, #4]
    2dfc:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    2dfe:	466a      	mov	r2, sp
    2e00:	7952      	ldrb	r2, [r2, #5]
    2e02:	1e51      	subs	r1, r2, #1
    2e04:	418a      	sbcs	r2, r1
    2e06:	719a      	strb	r2, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = settings[6];
    2e08:	466a      	mov	r2, sp
    2e0a:	7992      	ldrb	r2, [r2, #6]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    2e0c:	4669      	mov	r1, sp
    deploymentSettings.channelASettings.TYPE = settings[1];
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    deploymentSettings.channelBSettings.TYPE = settings[6];
    2e0e:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    2e10:	466a      	mov	r2, sp
    2e12:	79d2      	ldrb	r2, [r2, #7]
    2e14:	7a09      	ldrb	r1, [r1, #8]
    2e16:	0212      	lsls	r2, r2, #8
    2e18:	430a      	orrs	r2, r1
    2e1a:	811a      	strh	r2, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];
    2e1c:	466a      	mov	r2, sp
    2e1e:	7a52      	ldrb	r2, [r2, #9]
    2e20:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    2e22:	466a      	mov	r2, sp
    2e24:	7a92      	ldrb	r2, [r2, #10]
    2e26:	1e51      	subs	r1, r2, #1
    2e28:	418a      	sbcs	r2, r1
    2e2a:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = settings[11];
    2e2c:	466a      	mov	r2, sp
    2e2e:	7ad2      	ldrb	r2, [r2, #11]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    2e30:	4669      	mov	r1, sp
    deploymentSettings.channelBSettings.TYPE = settings[6];
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    deploymentSettings.channelCSettings.TYPE = settings[11];
    2e32:	735a      	strb	r2, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    2e34:	466a      	mov	r2, sp
    2e36:	7b12      	ldrb	r2, [r2, #12]
    2e38:	7b49      	ldrb	r1, [r1, #13]
    2e3a:	0212      	lsls	r2, r2, #8
    2e3c:	430a      	orrs	r2, r1
    2e3e:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];
    2e40:	466a      	mov	r2, sp
    2e42:	7b92      	ldrb	r2, [r2, #14]
    2e44:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    2e46:	466a      	mov	r2, sp
    2e48:	7bd2      	ldrb	r2, [r2, #15]
    2e4a:	1e51      	subs	r1, r2, #1
    2e4c:	418a      	sbcs	r2, r1
    2e4e:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = settings[16];
    2e50:	466a      	mov	r2, sp
    2e52:	7c12      	ldrb	r2, [r2, #16]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    2e54:	4669      	mov	r1, sp
    deploymentSettings.channelCSettings.TYPE = settings[11];
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    deploymentSettings.channelDSettings.TYPE = settings[16];
    2e56:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    2e58:	466a      	mov	r2, sp
    2e5a:	7c52      	ldrb	r2, [r2, #17]
    2e5c:	7c89      	ldrb	r1, [r1, #18]
    2e5e:	0212      	lsls	r2, r2, #8
    2e60:	430a      	orrs	r2, r1
    2e62:	829a      	strh	r2, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = settings[19];
    2e64:	466a      	mov	r2, sp
    2e66:	7cd2      	ldrb	r2, [r2, #19]
    2e68:	759a      	strb	r2, [r3, #22]


    if (settings[20] == 0xFF) {
    2e6a:	466b      	mov	r3, sp
    2e6c:	7d1b      	ldrb	r3, [r3, #20]
    2e6e:	2bff      	cmp	r3, #255	; 0xff
    2e70:	d103      	bne.n	2e7a <getSettings+0xae>
        applyDefaultSettings();
    2e72:	4b06      	ldr	r3, [pc, #24]	; (2e8c <getSettings+0xc0>)
    2e74:	4798      	blx	r3
        putSettings();
    2e76:	4b06      	ldr	r3, [pc, #24]	; (2e90 <getSettings+0xc4>)
    2e78:	4798      	blx	r3
    }

    findMainAltitude();
    2e7a:	4b06      	ldr	r3, [pc, #24]	; (2e94 <getSettings+0xc8>)
    2e7c:	4798      	blx	r3

}
    2e7e:	b041      	add	sp, #260	; 0x104
    2e80:	bd00      	pop	{pc}
    2e82:	46c0      	nop			; (mov r8, r8)
    2e84:	0000035d 	.word	0x0000035d
    2e88:	20000140 	.word	0x20000140
    2e8c:	00002d2d 	.word	0x00002d2d
    2e90:	00002d5d 	.word	0x00002d5d
    2e94:	00002ce1 	.word	0x00002ce1

00002e98 <sendFlightLogs>:
#include <util.h>
#include <boardDefines.h>

void sendFlightLogs() {
    2e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    2e9a:	2400      	movs	r4, #0

        if (isFlightLogged(flightLog)) {
    2e9c:	0020      	movs	r0, r4
    2e9e:	4b1e      	ldr	r3, [pc, #120]	; (2f18 <sendFlightLogs+0x80>)
    2ea0:	4798      	blx	r3
    2ea2:	2800      	cmp	r0, #0
    2ea4:	d003      	beq.n	2eae <sendFlightLogs+0x16>

            usartDataOut(USART3, flightLog);
    2ea6:	0021      	movs	r1, r4
    2ea8:	2003      	movs	r0, #3
    2eaa:	4b1c      	ldr	r3, [pc, #112]	; (2f1c <sendFlightLogs+0x84>)
    2eac:	4798      	blx	r3
#include <boardDefines.h>

void sendFlightLogs() {

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    2eae:	3401      	adds	r4, #1
    2eb0:	b2e4      	uxtb	r4, r4
    2eb2:	2c14      	cmp	r4, #20
    2eb4:	d1f2      	bne.n	2e9c <sendFlightLogs+0x4>

            usartDataOut(USART3, flightLog);
        }
    }
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);
    2eb6:	21ff      	movs	r1, #255	; 0xff
    2eb8:	2003      	movs	r0, #3
    2eba:	4c18      	ldr	r4, [pc, #96]	; (2f1c <sendFlightLogs+0x84>)
    2ebc:	47a0      	blx	r4

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2ebe:	4a18      	ldr	r2, [pc, #96]	; (2f20 <sendFlightLogs+0x88>)
    2ec0:	7e13      	ldrb	r3, [r2, #24]
    2ec2:	075b      	lsls	r3, r3, #29
    2ec4:	d5fc      	bpl.n	2ec0 <sendFlightLogs+0x28>
    volatile u8_t flightToRead = usartDataIn(USART3);
    2ec6:	4b17      	ldr	r3, [pc, #92]	; (2f24 <sendFlightLogs+0x8c>)
    2ec8:	2003      	movs	r0, #3
    2eca:	4798      	blx	r3
    2ecc:	466b      	mov	r3, sp
    2ece:	71d8      	strb	r0, [r3, #7]


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2ed0:	79d8      	ldrb	r0, [r3, #7]
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    volatile u8_t flightToRead = usartDataIn(USART3);
    2ed2:	1ddd      	adds	r5, r3, #7


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2ed4:	b2c0      	uxtb	r0, r0
    2ed6:	4b14      	ldr	r3, [pc, #80]	; (2f28 <sendFlightLogs+0x90>)
    2ed8:	4798      	blx	r3
    2eda:	0007      	movs	r7, r0
    u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
    2edc:	7828      	ldrb	r0, [r5, #0]
    2ede:	4b13      	ldr	r3, [pc, #76]	; (2f2c <sendFlightLogs+0x94>)
    2ee0:	b2c0      	uxtb	r0, r0
    2ee2:	4798      	blx	r3
    2ee4:	0006      	movs	r6, r0

    //inform of page numbers
    u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    2ee6:	1bc5      	subs	r5, r0, r7
    2ee8:	0a2d      	lsrs	r5, r5, #8
    usartDataOut(USART3, pagesToSend >> 0);
    2eea:	b2e9      	uxtb	r1, r5
    2eec:	2003      	movs	r0, #3
    2eee:	47a0      	blx	r4
    usartDataOut(USART3, pagesToSend >> 8);
    2ef0:	b2a9      	uxth	r1, r5
    2ef2:	0a09      	lsrs	r1, r1, #8
    2ef4:	2003      	movs	r0, #3
    2ef6:	47a0      	blx	r4

    //send flight end address for % full
    usartDataOut(USART3, flightEndAddress >> 0);
    2ef8:	b2f1      	uxtb	r1, r6
    2efa:	2003      	movs	r0, #3
    2efc:	47a0      	blx	r4
    usartDataOut(USART3, flightEndAddress >> 8);
    2efe:	0a31      	lsrs	r1, r6, #8
    2f00:	b2c9      	uxtb	r1, r1
    2f02:	2003      	movs	r0, #3
    2f04:	47a0      	blx	r4
    usartDataOut(USART3, flightEndAddress >> 16);
    2f06:	0c31      	lsrs	r1, r6, #16
    2f08:	b2c9      	uxtb	r1, r1
    2f0a:	2003      	movs	r0, #3
    2f0c:	47a0      	blx	r4

    //USART out the flights pages
    sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    2f0e:	0031      	movs	r1, r6
    2f10:	0038      	movs	r0, r7
    2f12:	4b07      	ldr	r3, [pc, #28]	; (2f30 <sendFlightLogs+0x98>)
    2f14:	4798      	blx	r3

}
    2f16:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2f18:	0000268d 	.word	0x0000268d
    2f1c:	00002cb9 	.word	0x00002cb9
    2f20:	42001400 	.word	0x42001400
    2f24:	00002cd1 	.word	0x00002cd1
    2f28:	0000263d 	.word	0x0000263d
    2f2c:	00002665 	.word	0x00002665
    2f30:	00000acd 	.word	0x00000acd

00002f34 <attemptConnection>:

void attemptConnection() {
    2f34:	b570      	push	{r4, r5, r6, lr}

    if (USARTconnectionAvaliable()) {
    2f36:	4b14      	ldr	r3, [pc, #80]	; (2f88 <attemptConnection+0x54>)
    2f38:	4798      	blx	r3
    2f3a:	2800      	cmp	r0, #0
    2f3c:	d022      	beq.n	2f84 <attemptConnection+0x50>

        flightState = flightIdle;
    2f3e:	2201      	movs	r2, #1
    2f40:	4b12      	ldr	r3, [pc, #72]	; (2f8c <attemptConnection+0x58>)
    2f42:	701a      	strb	r2, [r3, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2f44:	4a12      	ldr	r2, [pc, #72]	; (2f90 <attemptConnection+0x5c>)
    2f46:	7e13      	ldrb	r3, [r2, #24]
    2f48:	075b      	lsls	r3, r3, #29
    2f4a:	d5fc      	bpl.n	2f46 <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    2f4c:	2003      	movs	r0, #3
    2f4e:	4b11      	ldr	r3, [pc, #68]	; (2f94 <attemptConnection+0x60>)
    2f50:	4798      	blx	r3
    2f52:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    2f54:	2c4c      	cmp	r4, #76	; 0x4c
    2f56:	d102      	bne.n	2f5e <attemptConnection+0x2a>

            sendFlightLogs();
    2f58:	4b0f      	ldr	r3, [pc, #60]	; (2f98 <attemptConnection+0x64>)
    2f5a:	4798      	blx	r3
    2f5c:	e012      	b.n	2f84 <attemptConnection+0x50>
        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    2f5e:	2845      	cmp	r0, #69	; 0x45
    2f60:	d110      	bne.n	2f84 <attemptConnection+0x50>

            //getSettings();

            AT25SFChipErase();
    2f62:	4e0e      	ldr	r6, [pc, #56]	; (2f9c <attemptConnection+0x68>)
    2f64:	47b0      	blx	r6
            AT25SFHoldTillReady();
    2f66:	4d0e      	ldr	r5, [pc, #56]	; (2fa0 <attemptConnection+0x6c>)
    2f68:	47a8      	blx	r5
            delay_ms(100);
    2f6a:	2064      	movs	r0, #100	; 0x64
    2f6c:	4b0d      	ldr	r3, [pc, #52]	; (2fa4 <attemptConnection+0x70>)
    2f6e:	4798      	blx	r3
            AT25SFChipErase();
    2f70:	47b0      	blx	r6

            AT25SFHoldTillReady();
    2f72:	47a8      	blx	r5

            //getSettings();

            usartDataOut(USART3, 'E');
    2f74:	2003      	movs	r0, #3
    2f76:	4b0c      	ldr	r3, [pc, #48]	; (2fa8 <attemptConnection+0x74>)
    2f78:	0021      	movs	r1, r4
    2f7a:	4798      	blx	r3
            beep(400);
    2f7c:	20c8      	movs	r0, #200	; 0xc8
    2f7e:	4b0b      	ldr	r3, [pc, #44]	; (2fac <attemptConnection+0x78>)
    2f80:	0040      	lsls	r0, r0, #1
    2f82:	4798      	blx	r3


        }
    }

}
    2f84:	bd70      	pop	{r4, r5, r6, pc}
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	00000a99 	.word	0x00000a99
    2f8c:	2000016c 	.word	0x2000016c
    2f90:	42001400 	.word	0x42001400
    2f94:	00002cd1 	.word	0x00002cd1
    2f98:	00002e99 	.word	0x00002e99
    2f9c:	00000219 	.word	0x00000219
    2fa0:	000001e5 	.word	0x000001e5
    2fa4:	000010d9 	.word	0x000010d9
    2fa8:	00002cb9 	.word	0x00002cb9
    2fac:	00000e09 	.word	0x00000e09

00002fb0 <pow>:
    2fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fb2:	465f      	mov	r7, fp
    2fb4:	464d      	mov	r5, r9
    2fb6:	4656      	mov	r6, sl
    2fb8:	4644      	mov	r4, r8
    2fba:	b4f0      	push	{r4, r5, r6, r7}
    2fbc:	b091      	sub	sp, #68	; 0x44
    2fbe:	001f      	movs	r7, r3
    2fc0:	0004      	movs	r4, r0
    2fc2:	000d      	movs	r5, r1
    2fc4:	0016      	movs	r6, r2
    2fc6:	f000 f9af 	bl	3328 <__ieee754_pow>
    2fca:	4bcf      	ldr	r3, [pc, #828]	; (3308 <pow+0x358>)
    2fcc:	9002      	str	r0, [sp, #8]
    2fce:	9103      	str	r1, [sp, #12]
    2fd0:	469b      	mov	fp, r3
    2fd2:	781b      	ldrb	r3, [r3, #0]
    2fd4:	b25b      	sxtb	r3, r3
    2fd6:	4699      	mov	r9, r3
    2fd8:	3301      	adds	r3, #1
    2fda:	d04f      	beq.n	307c <pow+0xcc>
    2fdc:	0032      	movs	r2, r6
    2fde:	003b      	movs	r3, r7
    2fe0:	0030      	movs	r0, r6
    2fe2:	0039      	movs	r1, r7
    2fe4:	f003 f866 	bl	60b4 <__aeabi_dcmpun>
    2fe8:	9000      	str	r0, [sp, #0]
    2fea:	2800      	cmp	r0, #0
    2fec:	d146      	bne.n	307c <pow+0xcc>
    2fee:	0022      	movs	r2, r4
    2ff0:	002b      	movs	r3, r5
    2ff2:	0020      	movs	r0, r4
    2ff4:	0029      	movs	r1, r5
    2ff6:	f003 f85d 	bl	60b4 <__aeabi_dcmpun>
    2ffa:	2200      	movs	r2, #0
    2ffc:	4682      	mov	sl, r0
    2ffe:	2800      	cmp	r0, #0
    3000:	d134      	bne.n	306c <pow+0xbc>
    3002:	2300      	movs	r3, #0
    3004:	0020      	movs	r0, r4
    3006:	0029      	movs	r1, r5
    3008:	f001 f988 	bl	431c <__aeabi_dcmpeq>
    300c:	2800      	cmp	r0, #0
    300e:	d03a      	beq.n	3086 <pow+0xd6>
    3010:	2200      	movs	r2, #0
    3012:	2300      	movs	r3, #0
    3014:	0030      	movs	r0, r6
    3016:	0039      	movs	r1, r7
    3018:	f001 f980 	bl	431c <__aeabi_dcmpeq>
    301c:	9005      	str	r0, [sp, #20]
    301e:	2800      	cmp	r0, #0
    3020:	d100      	bne.n	3024 <pow+0x74>
    3022:	e074      	b.n	310e <pow+0x15e>
    3024:	ab06      	add	r3, sp, #24
    3026:	4698      	mov	r8, r3
    3028:	2301      	movs	r3, #1
    302a:	4642      	mov	r2, r8
    302c:	9306      	str	r3, [sp, #24]
    302e:	4bb7      	ldr	r3, [pc, #732]	; (330c <pow+0x35c>)
    3030:	6053      	str	r3, [r2, #4]
    3032:	4643      	mov	r3, r8
    3034:	4652      	mov	r2, sl
    3036:	609c      	str	r4, [r3, #8]
    3038:	60dd      	str	r5, [r3, #12]
    303a:	621a      	str	r2, [r3, #32]
    303c:	611e      	str	r6, [r3, #16]
    303e:	615f      	str	r7, [r3, #20]
    3040:	4642      	mov	r2, r8
    3042:	2300      	movs	r3, #0
    3044:	2400      	movs	r4, #0
    3046:	6193      	str	r3, [r2, #24]
    3048:	61d4      	str	r4, [r2, #28]
    304a:	464b      	mov	r3, r9
    304c:	2b00      	cmp	r3, #0
    304e:	d100      	bne.n	3052 <pow+0xa2>
    3050:	e094      	b.n	317c <pow+0x1cc>
    3052:	2300      	movs	r3, #0
    3054:	4cae      	ldr	r4, [pc, #696]	; (3310 <pow+0x360>)
    3056:	9300      	str	r3, [sp, #0]
    3058:	9401      	str	r4, [sp, #4]
    305a:	9800      	ldr	r0, [sp, #0]
    305c:	9901      	ldr	r1, [sp, #4]
    305e:	b011      	add	sp, #68	; 0x44
    3060:	bc3c      	pop	{r2, r3, r4, r5}
    3062:	4690      	mov	r8, r2
    3064:	4699      	mov	r9, r3
    3066:	46a2      	mov	sl, r4
    3068:	46ab      	mov	fp, r5
    306a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    306c:	2300      	movs	r3, #0
    306e:	0030      	movs	r0, r6
    3070:	0039      	movs	r1, r7
    3072:	f001 f953 	bl	431c <__aeabi_dcmpeq>
    3076:	2800      	cmp	r0, #0
    3078:	d000      	beq.n	307c <pow+0xcc>
    307a:	e0eb      	b.n	3254 <pow+0x2a4>
    307c:	9b02      	ldr	r3, [sp, #8]
    307e:	9c03      	ldr	r4, [sp, #12]
    3080:	9300      	str	r3, [sp, #0]
    3082:	9401      	str	r4, [sp, #4]
    3084:	e7e9      	b.n	305a <pow+0xaa>
    3086:	9802      	ldr	r0, [sp, #8]
    3088:	9903      	ldr	r1, [sp, #12]
    308a:	f000 ff7d 	bl	3f88 <finite>
    308e:	4681      	mov	r9, r0
    3090:	2800      	cmp	r0, #0
    3092:	d100      	bne.n	3096 <pow+0xe6>
    3094:	e086      	b.n	31a4 <pow+0x1f4>
    3096:	9802      	ldr	r0, [sp, #8]
    3098:	9903      	ldr	r1, [sp, #12]
    309a:	2200      	movs	r2, #0
    309c:	2300      	movs	r3, #0
    309e:	f001 f93d 	bl	431c <__aeabi_dcmpeq>
    30a2:	2800      	cmp	r0, #0
    30a4:	d0ea      	beq.n	307c <pow+0xcc>
    30a6:	0020      	movs	r0, r4
    30a8:	0029      	movs	r1, r5
    30aa:	f000 ff6d 	bl	3f88 <finite>
    30ae:	9a02      	ldr	r2, [sp, #8]
    30b0:	9b03      	ldr	r3, [sp, #12]
    30b2:	9200      	str	r2, [sp, #0]
    30b4:	9301      	str	r3, [sp, #4]
    30b6:	2800      	cmp	r0, #0
    30b8:	d0cf      	beq.n	305a <pow+0xaa>
    30ba:	0030      	movs	r0, r6
    30bc:	0039      	movs	r1, r7
    30be:	f000 ff63 	bl	3f88 <finite>
    30c2:	9a02      	ldr	r2, [sp, #8]
    30c4:	9b03      	ldr	r3, [sp, #12]
    30c6:	9200      	str	r2, [sp, #0]
    30c8:	9301      	str	r3, [sp, #4]
    30ca:	2800      	cmp	r0, #0
    30cc:	d0c5      	beq.n	305a <pow+0xaa>
    30ce:	ab06      	add	r3, sp, #24
    30d0:	4698      	mov	r8, r3
    30d2:	2304      	movs	r3, #4
    30d4:	4642      	mov	r2, r8
    30d6:	9306      	str	r3, [sp, #24]
    30d8:	4b8c      	ldr	r3, [pc, #560]	; (330c <pow+0x35c>)
    30da:	6094      	str	r4, [r2, #8]
    30dc:	60d5      	str	r5, [r2, #12]
    30de:	6053      	str	r3, [r2, #4]
    30e0:	2300      	movs	r3, #0
    30e2:	2400      	movs	r4, #0
    30e4:	6213      	str	r3, [r2, #32]
    30e6:	2300      	movs	r3, #0
    30e8:	6193      	str	r3, [r2, #24]
    30ea:	61d4      	str	r4, [r2, #28]
    30ec:	465b      	mov	r3, fp
    30ee:	781b      	ldrb	r3, [r3, #0]
    30f0:	6116      	str	r6, [r2, #16]
    30f2:	6157      	str	r7, [r2, #20]
    30f4:	b25b      	sxtb	r3, r3
    30f6:	2b02      	cmp	r3, #2
    30f8:	d004      	beq.n	3104 <pow+0x154>
    30fa:	4640      	mov	r0, r8
    30fc:	f000 ff4e 	bl	3f9c <matherr>
    3100:	2800      	cmp	r0, #0
    3102:	d140      	bne.n	3186 <pow+0x1d6>
    3104:	f003 f9a4 	bl	6450 <__errno>
    3108:	2322      	movs	r3, #34	; 0x22
    310a:	6003      	str	r3, [r0, #0]
    310c:	e03b      	b.n	3186 <pow+0x1d6>
    310e:	0030      	movs	r0, r6
    3110:	0039      	movs	r1, r7
    3112:	f000 ff39 	bl	3f88 <finite>
    3116:	9a02      	ldr	r2, [sp, #8]
    3118:	9b03      	ldr	r3, [sp, #12]
    311a:	9200      	str	r2, [sp, #0]
    311c:	9301      	str	r3, [sp, #4]
    311e:	2800      	cmp	r0, #0
    3120:	d09b      	beq.n	305a <pow+0xaa>
    3122:	2200      	movs	r2, #0
    3124:	2300      	movs	r3, #0
    3126:	0030      	movs	r0, r6
    3128:	0039      	movs	r1, r7
    312a:	f001 f8fd 	bl	4328 <__aeabi_dcmplt>
    312e:	2800      	cmp	r0, #0
    3130:	d100      	bne.n	3134 <pow+0x184>
    3132:	e792      	b.n	305a <pow+0xaa>
    3134:	ab06      	add	r3, sp, #24
    3136:	4698      	mov	r8, r3
    3138:	2301      	movs	r3, #1
    313a:	4642      	mov	r2, r8
    313c:	9306      	str	r3, [sp, #24]
    313e:	4b73      	ldr	r3, [pc, #460]	; (330c <pow+0x35c>)
    3140:	6053      	str	r3, [r2, #4]
    3142:	4643      	mov	r3, r8
    3144:	9a05      	ldr	r2, [sp, #20]
    3146:	609c      	str	r4, [r3, #8]
    3148:	60dd      	str	r5, [r3, #12]
    314a:	621a      	str	r2, [r3, #32]
    314c:	611e      	str	r6, [r3, #16]
    314e:	615f      	str	r7, [r3, #20]
    3150:	465b      	mov	r3, fp
    3152:	781b      	ldrb	r3, [r3, #0]
    3154:	b25b      	sxtb	r3, r3
    3156:	2b00      	cmp	r3, #0
    3158:	d00b      	beq.n	3172 <pow+0x1c2>
    315a:	2000      	movs	r0, #0
    315c:	4642      	mov	r2, r8
    315e:	496d      	ldr	r1, [pc, #436]	; (3314 <pow+0x364>)
    3160:	6190      	str	r0, [r2, #24]
    3162:	61d1      	str	r1, [r2, #28]
    3164:	2b02      	cmp	r3, #2
    3166:	d109      	bne.n	317c <pow+0x1cc>
    3168:	f003 f972 	bl	6450 <__errno>
    316c:	2321      	movs	r3, #33	; 0x21
    316e:	6003      	str	r3, [r0, #0]
    3170:	e009      	b.n	3186 <pow+0x1d6>
    3172:	4642      	mov	r2, r8
    3174:	2300      	movs	r3, #0
    3176:	2400      	movs	r4, #0
    3178:	6193      	str	r3, [r2, #24]
    317a:	61d4      	str	r4, [r2, #28]
    317c:	4640      	mov	r0, r8
    317e:	f000 ff0d 	bl	3f9c <matherr>
    3182:	2800      	cmp	r0, #0
    3184:	d0f0      	beq.n	3168 <pow+0x1b8>
    3186:	4643      	mov	r3, r8
    3188:	6a1b      	ldr	r3, [r3, #32]
    318a:	2b00      	cmp	r3, #0
    318c:	d004      	beq.n	3198 <pow+0x1e8>
    318e:	f003 f95f 	bl	6450 <__errno>
    3192:	4643      	mov	r3, r8
    3194:	6a1b      	ldr	r3, [r3, #32]
    3196:	6003      	str	r3, [r0, #0]
    3198:	4643      	mov	r3, r8
    319a:	69dc      	ldr	r4, [r3, #28]
    319c:	699b      	ldr	r3, [r3, #24]
    319e:	9300      	str	r3, [sp, #0]
    31a0:	9401      	str	r4, [sp, #4]
    31a2:	e75a      	b.n	305a <pow+0xaa>
    31a4:	0020      	movs	r0, r4
    31a6:	0029      	movs	r1, r5
    31a8:	f000 feee 	bl	3f88 <finite>
    31ac:	2800      	cmp	r0, #0
    31ae:	d100      	bne.n	31b2 <pow+0x202>
    31b0:	e771      	b.n	3096 <pow+0xe6>
    31b2:	0030      	movs	r0, r6
    31b4:	0039      	movs	r1, r7
    31b6:	f000 fee7 	bl	3f88 <finite>
    31ba:	2800      	cmp	r0, #0
    31bc:	d100      	bne.n	31c0 <pow+0x210>
    31be:	e76a      	b.n	3096 <pow+0xe6>
    31c0:	9802      	ldr	r0, [sp, #8]
    31c2:	9903      	ldr	r1, [sp, #12]
    31c4:	000b      	movs	r3, r1
    31c6:	0002      	movs	r2, r0
    31c8:	f002 ff74 	bl	60b4 <__aeabi_dcmpun>
    31cc:	ab06      	add	r3, sp, #24
    31ce:	4698      	mov	r8, r3
    31d0:	2800      	cmp	r0, #0
    31d2:	d17a      	bne.n	32ca <pow+0x31a>
    31d4:	2303      	movs	r3, #3
    31d6:	4642      	mov	r2, r8
    31d8:	9306      	str	r3, [sp, #24]
    31da:	4b4c      	ldr	r3, [pc, #304]	; (330c <pow+0x35c>)
    31dc:	6210      	str	r0, [r2, #32]
    31de:	6053      	str	r3, [r2, #4]
    31e0:	465b      	mov	r3, fp
    31e2:	781b      	ldrb	r3, [r3, #0]
    31e4:	6094      	str	r4, [r2, #8]
    31e6:	60d5      	str	r5, [r2, #12]
    31e8:	b25b      	sxtb	r3, r3
    31ea:	6116      	str	r6, [r2, #16]
    31ec:	6157      	str	r7, [r2, #20]
    31ee:	4699      	mov	r9, r3
    31f0:	2b00      	cmp	r3, #0
    31f2:	d148      	bne.n	3286 <pow+0x2d6>
    31f4:	22e0      	movs	r2, #224	; 0xe0
    31f6:	4641      	mov	r1, r8
    31f8:	4b47      	ldr	r3, [pc, #284]	; (3318 <pow+0x368>)
    31fa:	0612      	lsls	r2, r2, #24
    31fc:	618a      	str	r2, [r1, #24]
    31fe:	61cb      	str	r3, [r1, #28]
    3200:	0020      	movs	r0, r4
    3202:	2200      	movs	r2, #0
    3204:	2300      	movs	r3, #0
    3206:	0029      	movs	r1, r5
    3208:	f001 f88e 	bl	4328 <__aeabi_dcmplt>
    320c:	2800      	cmp	r0, #0
    320e:	d100      	bne.n	3212 <pow+0x262>
    3210:	e773      	b.n	30fa <pow+0x14a>
    3212:	2200      	movs	r2, #0
    3214:	4b41      	ldr	r3, [pc, #260]	; (331c <pow+0x36c>)
    3216:	0030      	movs	r0, r6
    3218:	0039      	movs	r1, r7
    321a:	f002 f97d 	bl	5518 <__aeabi_dmul>
    321e:	0004      	movs	r4, r0
    3220:	000d      	movs	r5, r1
    3222:	f000 fec3 	bl	3fac <rint>
    3226:	0002      	movs	r2, r0
    3228:	000b      	movs	r3, r1
    322a:	0020      	movs	r0, r4
    322c:	0029      	movs	r1, r5
    322e:	f001 f875 	bl	431c <__aeabi_dcmpeq>
    3232:	2800      	cmp	r0, #0
    3234:	d105      	bne.n	3242 <pow+0x292>
    3236:	22e0      	movs	r2, #224	; 0xe0
    3238:	4b39      	ldr	r3, [pc, #228]	; (3320 <pow+0x370>)
    323a:	0612      	lsls	r2, r2, #24
    323c:	4641      	mov	r1, r8
    323e:	618a      	str	r2, [r1, #24]
    3240:	61cb      	str	r3, [r1, #28]
    3242:	465b      	mov	r3, fp
    3244:	781b      	ldrb	r3, [r3, #0]
    3246:	b25b      	sxtb	r3, r3
    3248:	4699      	mov	r9, r3
    324a:	464b      	mov	r3, r9
    324c:	2b02      	cmp	r3, #2
    324e:	d000      	beq.n	3252 <pow+0x2a2>
    3250:	e753      	b.n	30fa <pow+0x14a>
    3252:	e757      	b.n	3104 <pow+0x154>
    3254:	ab06      	add	r3, sp, #24
    3256:	4698      	mov	r8, r3
    3258:	2301      	movs	r3, #1
    325a:	4642      	mov	r2, r8
    325c:	9306      	str	r3, [sp, #24]
    325e:	4b2b      	ldr	r3, [pc, #172]	; (330c <pow+0x35c>)
    3260:	6053      	str	r3, [r2, #4]
    3262:	4643      	mov	r3, r8
    3264:	609c      	str	r4, [r3, #8]
    3266:	60dd      	str	r5, [r3, #12]
    3268:	2400      	movs	r4, #0
    326a:	9a00      	ldr	r2, [sp, #0]
    326c:	4d28      	ldr	r5, [pc, #160]	; (3310 <pow+0x360>)
    326e:	621a      	str	r2, [r3, #32]
    3270:	611e      	str	r6, [r3, #16]
    3272:	615f      	str	r7, [r3, #20]
    3274:	619c      	str	r4, [r3, #24]
    3276:	61dd      	str	r5, [r3, #28]
    3278:	464b      	mov	r3, r9
    327a:	9400      	str	r4, [sp, #0]
    327c:	9501      	str	r5, [sp, #4]
    327e:	2b02      	cmp	r3, #2
    3280:	d000      	beq.n	3284 <pow+0x2d4>
    3282:	e77b      	b.n	317c <pow+0x1cc>
    3284:	e6e9      	b.n	305a <pow+0xaa>
    3286:	2200      	movs	r2, #0
    3288:	4641      	mov	r1, r8
    328a:	4b26      	ldr	r3, [pc, #152]	; (3324 <pow+0x374>)
    328c:	0020      	movs	r0, r4
    328e:	618a      	str	r2, [r1, #24]
    3290:	61cb      	str	r3, [r1, #28]
    3292:	2200      	movs	r2, #0
    3294:	2300      	movs	r3, #0
    3296:	0029      	movs	r1, r5
    3298:	f001 f846 	bl	4328 <__aeabi_dcmplt>
    329c:	2800      	cmp	r0, #0
    329e:	d0d4      	beq.n	324a <pow+0x29a>
    32a0:	2200      	movs	r2, #0
    32a2:	4b1e      	ldr	r3, [pc, #120]	; (331c <pow+0x36c>)
    32a4:	0030      	movs	r0, r6
    32a6:	0039      	movs	r1, r7
    32a8:	f002 f936 	bl	5518 <__aeabi_dmul>
    32ac:	0004      	movs	r4, r0
    32ae:	000d      	movs	r5, r1
    32b0:	f000 fe7c 	bl	3fac <rint>
    32b4:	0002      	movs	r2, r0
    32b6:	000b      	movs	r3, r1
    32b8:	0020      	movs	r0, r4
    32ba:	0029      	movs	r1, r5
    32bc:	f001 f82e 	bl	431c <__aeabi_dcmpeq>
    32c0:	2800      	cmp	r0, #0
    32c2:	d1be      	bne.n	3242 <pow+0x292>
    32c4:	2200      	movs	r2, #0
    32c6:	4b13      	ldr	r3, [pc, #76]	; (3314 <pow+0x364>)
    32c8:	e7b8      	b.n	323c <pow+0x28c>
    32ca:	2301      	movs	r3, #1
    32cc:	4642      	mov	r2, r8
    32ce:	9306      	str	r3, [sp, #24]
    32d0:	4b0e      	ldr	r3, [pc, #56]	; (330c <pow+0x35c>)
    32d2:	6053      	str	r3, [r2, #4]
    32d4:	4643      	mov	r3, r8
    32d6:	464a      	mov	r2, r9
    32d8:	609c      	str	r4, [r3, #8]
    32da:	60dd      	str	r5, [r3, #12]
    32dc:	621a      	str	r2, [r3, #32]
    32de:	611e      	str	r6, [r3, #16]
    32e0:	615f      	str	r7, [r3, #20]
    32e2:	2400      	movs	r4, #0
    32e4:	465b      	mov	r3, fp
    32e6:	571c      	ldrsb	r4, [r3, r4]
    32e8:	2c00      	cmp	r4, #0
    32ea:	d100      	bne.n	32ee <pow+0x33e>
    32ec:	e741      	b.n	3172 <pow+0x1c2>
    32ee:	2300      	movs	r3, #0
    32f0:	2200      	movs	r2, #0
    32f2:	0019      	movs	r1, r3
    32f4:	0010      	movs	r0, r2
    32f6:	f001 fceb 	bl	4cd0 <__aeabi_ddiv>
    32fa:	4643      	mov	r3, r8
    32fc:	6198      	str	r0, [r3, #24]
    32fe:	61d9      	str	r1, [r3, #28]
    3300:	2c02      	cmp	r4, #2
    3302:	d100      	bne.n	3306 <pow+0x356>
    3304:	e730      	b.n	3168 <pow+0x1b8>
    3306:	e739      	b.n	317c <pow+0x1cc>
    3308:	20000070 	.word	0x20000070
    330c:	000064c8 	.word	0x000064c8
    3310:	3ff00000 	.word	0x3ff00000
    3314:	fff00000 	.word	0xfff00000
    3318:	47efffff 	.word	0x47efffff
    331c:	3fe00000 	.word	0x3fe00000
    3320:	c7efffff 	.word	0xc7efffff
    3324:	7ff00000 	.word	0x7ff00000

00003328 <__ieee754_pow>:
    3328:	b5f0      	push	{r4, r5, r6, r7, lr}
    332a:	4656      	mov	r6, sl
    332c:	464d      	mov	r5, r9
    332e:	4644      	mov	r4, r8
    3330:	465f      	mov	r7, fp
    3332:	b4f0      	push	{r4, r5, r6, r7}
    3334:	001c      	movs	r4, r3
    3336:	0013      	movs	r3, r2
    3338:	0067      	lsls	r7, r4, #1
    333a:	b091      	sub	sp, #68	; 0x44
    333c:	087f      	lsrs	r7, r7, #1
    333e:	9300      	str	r3, [sp, #0]
    3340:	9401      	str	r4, [sp, #4]
    3342:	0006      	movs	r6, r0
    3344:	000d      	movs	r5, r1
    3346:	4680      	mov	r8, r0
    3348:	4689      	mov	r9, r1
    334a:	46a2      	mov	sl, r4
    334c:	433b      	orrs	r3, r7
    334e:	d032      	beq.n	33b6 <__ieee754_pow+0x8e>
    3350:	4b6e      	ldr	r3, [pc, #440]	; (350c <__ieee754_pow+0x1e4>)
    3352:	006c      	lsls	r4, r5, #1
    3354:	0864      	lsrs	r4, r4, #1
    3356:	429c      	cmp	r4, r3
    3358:	dc29      	bgt.n	33ae <__ieee754_pow+0x86>
    335a:	d026      	beq.n	33aa <__ieee754_pow+0x82>
    335c:	429f      	cmp	r7, r3
    335e:	dc26      	bgt.n	33ae <__ieee754_pow+0x86>
    3360:	4b6a      	ldr	r3, [pc, #424]	; (350c <__ieee754_pow+0x1e4>)
    3362:	429f      	cmp	r7, r3
    3364:	d100      	bne.n	3368 <__ieee754_pow+0x40>
    3366:	e089      	b.n	347c <__ieee754_pow+0x154>
    3368:	2300      	movs	r3, #0
    336a:	469b      	mov	fp, r3
    336c:	464b      	mov	r3, r9
    336e:	2b00      	cmp	r3, #0
    3370:	da00      	bge.n	3374 <__ieee754_pow+0x4c>
    3372:	e087      	b.n	3484 <__ieee754_pow+0x15c>
    3374:	2a00      	cmp	r2, #0
    3376:	d12f      	bne.n	33d8 <__ieee754_pow+0xb0>
    3378:	4b64      	ldr	r3, [pc, #400]	; (350c <__ieee754_pow+0x1e4>)
    337a:	429f      	cmp	r7, r3
    337c:	d100      	bne.n	3380 <__ieee754_pow+0x58>
    337e:	e09f      	b.n	34c0 <__ieee754_pow+0x198>
    3380:	4b63      	ldr	r3, [pc, #396]	; (3510 <__ieee754_pow+0x1e8>)
    3382:	429f      	cmp	r7, r3
    3384:	d05d      	beq.n	3442 <__ieee754_pow+0x11a>
    3386:	2380      	movs	r3, #128	; 0x80
    3388:	05db      	lsls	r3, r3, #23
    338a:	459a      	cmp	sl, r3
    338c:	d101      	bne.n	3392 <__ieee754_pow+0x6a>
    338e:	f000 fbc1 	bl	3b14 <__ieee754_pow+0x7ec>
    3392:	4b60      	ldr	r3, [pc, #384]	; (3514 <__ieee754_pow+0x1ec>)
    3394:	459a      	cmp	sl, r3
    3396:	d11f      	bne.n	33d8 <__ieee754_pow+0xb0>
    3398:	464b      	mov	r3, r9
    339a:	2b00      	cmp	r3, #0
    339c:	db1c      	blt.n	33d8 <__ieee754_pow+0xb0>
    339e:	0030      	movs	r0, r6
    33a0:	0029      	movs	r1, r5
    33a2:	f000 fcf7 	bl	3d94 <__ieee754_sqrt>
    33a6:	0006      	movs	r6, r0
    33a8:	e007      	b.n	33ba <__ieee754_pow+0x92>
    33aa:	2800      	cmp	r0, #0
    33ac:	d00d      	beq.n	33ca <__ieee754_pow+0xa2>
    33ae:	4b5a      	ldr	r3, [pc, #360]	; (3518 <__ieee754_pow+0x1f0>)
    33b0:	18e0      	adds	r0, r4, r3
    33b2:	4330      	orrs	r0, r6
    33b4:	d10b      	bne.n	33ce <__ieee754_pow+0xa6>
    33b6:	2600      	movs	r6, #0
    33b8:	4955      	ldr	r1, [pc, #340]	; (3510 <__ieee754_pow+0x1e8>)
    33ba:	0030      	movs	r0, r6
    33bc:	b011      	add	sp, #68	; 0x44
    33be:	bc3c      	pop	{r2, r3, r4, r5}
    33c0:	4690      	mov	r8, r2
    33c2:	4699      	mov	r9, r3
    33c4:	46a2      	mov	sl, r4
    33c6:	46ab      	mov	fp, r5
    33c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    33ca:	42a7      	cmp	r7, r4
    33cc:	ddc8      	ble.n	3360 <__ieee754_pow+0x38>
    33ce:	4853      	ldr	r0, [pc, #332]	; (351c <__ieee754_pow+0x1f4>)
    33d0:	f000 fde6 	bl	3fa0 <nan>
    33d4:	0006      	movs	r6, r0
    33d6:	e7f0      	b.n	33ba <__ieee754_pow+0x92>
    33d8:	0030      	movs	r0, r6
    33da:	0029      	movs	r1, r5
    33dc:	f000 fdd0 	bl	3f80 <fabs>
    33e0:	4643      	mov	r3, r8
    33e2:	2b00      	cmp	r3, #0
    33e4:	d01d      	beq.n	3422 <__ieee754_pow+0xfa>
    33e6:	0feb      	lsrs	r3, r5, #31
    33e8:	3b01      	subs	r3, #1
    33ea:	4698      	mov	r8, r3
    33ec:	465b      	mov	r3, fp
    33ee:	4642      	mov	r2, r8
    33f0:	4313      	orrs	r3, r2
    33f2:	d079      	beq.n	34e8 <__ieee754_pow+0x1c0>
    33f4:	4b4a      	ldr	r3, [pc, #296]	; (3520 <__ieee754_pow+0x1f8>)
    33f6:	429f      	cmp	r7, r3
    33f8:	dc00      	bgt.n	33fc <__ieee754_pow+0xd4>
    33fa:	e09f      	b.n	353c <__ieee754_pow+0x214>
    33fc:	4b49      	ldr	r3, [pc, #292]	; (3524 <__ieee754_pow+0x1fc>)
    33fe:	429f      	cmp	r7, r3
    3400:	dc01      	bgt.n	3406 <__ieee754_pow+0xde>
    3402:	f000 fbce 	bl	3ba2 <__ieee754_pow+0x87a>
    3406:	4b48      	ldr	r3, [pc, #288]	; (3528 <__ieee754_pow+0x200>)
    3408:	429c      	cmp	r4, r3
    340a:	dd79      	ble.n	3500 <__ieee754_pow+0x1d8>
    340c:	4653      	mov	r3, sl
    340e:	2b00      	cmp	r3, #0
    3410:	dd79      	ble.n	3506 <__ieee754_pow+0x1de>
    3412:	4a46      	ldr	r2, [pc, #280]	; (352c <__ieee754_pow+0x204>)
    3414:	4b46      	ldr	r3, [pc, #280]	; (3530 <__ieee754_pow+0x208>)
    3416:	0010      	movs	r0, r2
    3418:	0019      	movs	r1, r3
    341a:	f002 f87d 	bl	5518 <__aeabi_dmul>
    341e:	0006      	movs	r6, r0
    3420:	e7cb      	b.n	33ba <__ieee754_pow+0x92>
    3422:	2c00      	cmp	r4, #0
    3424:	d004      	beq.n	3430 <__ieee754_pow+0x108>
    3426:	4a3a      	ldr	r2, [pc, #232]	; (3510 <__ieee754_pow+0x1e8>)
    3428:	00ab      	lsls	r3, r5, #2
    342a:	089b      	lsrs	r3, r3, #2
    342c:	4293      	cmp	r3, r2
    342e:	d1da      	bne.n	33e6 <__ieee754_pow+0xbe>
    3430:	4653      	mov	r3, sl
    3432:	2b00      	cmp	r3, #0
    3434:	da00      	bge.n	3438 <__ieee754_pow+0x110>
    3436:	e3ad      	b.n	3b94 <__ieee754_pow+0x86c>
    3438:	464b      	mov	r3, r9
    343a:	2b00      	cmp	r3, #0
    343c:	db0d      	blt.n	345a <__ieee754_pow+0x132>
    343e:	0006      	movs	r6, r0
    3440:	e7bb      	b.n	33ba <__ieee754_pow+0x92>
    3442:	4653      	mov	r3, sl
    3444:	0029      	movs	r1, r5
    3446:	2b00      	cmp	r3, #0
    3448:	dab7      	bge.n	33ba <__ieee754_pow+0x92>
    344a:	0032      	movs	r2, r6
    344c:	002b      	movs	r3, r5
    344e:	2000      	movs	r0, #0
    3450:	492f      	ldr	r1, [pc, #188]	; (3510 <__ieee754_pow+0x1e8>)
    3452:	f001 fc3d 	bl	4cd0 <__aeabi_ddiv>
    3456:	0006      	movs	r6, r0
    3458:	e7af      	b.n	33ba <__ieee754_pow+0x92>
    345a:	4b2f      	ldr	r3, [pc, #188]	; (3518 <__ieee754_pow+0x1f0>)
    345c:	469c      	mov	ip, r3
    345e:	465b      	mov	r3, fp
    3460:	4464      	add	r4, ip
    3462:	431c      	orrs	r4, r3
    3464:	d101      	bne.n	346a <__ieee754_pow+0x142>
    3466:	f000 fc2b 	bl	3cc0 <__ieee754_pow+0x998>
    346a:	465b      	mov	r3, fp
    346c:	0006      	movs	r6, r0
    346e:	2b01      	cmp	r3, #1
    3470:	d1a3      	bne.n	33ba <__ieee754_pow+0x92>
    3472:	2380      	movs	r3, #128	; 0x80
    3474:	061b      	lsls	r3, r3, #24
    3476:	469c      	mov	ip, r3
    3478:	4461      	add	r1, ip
    347a:	e79e      	b.n	33ba <__ieee754_pow+0x92>
    347c:	2a00      	cmp	r2, #0
    347e:	d100      	bne.n	3482 <__ieee754_pow+0x15a>
    3480:	e772      	b.n	3368 <__ieee754_pow+0x40>
    3482:	e794      	b.n	33ae <__ieee754_pow+0x86>
    3484:	4b2b      	ldr	r3, [pc, #172]	; (3534 <__ieee754_pow+0x20c>)
    3486:	429f      	cmp	r7, r3
    3488:	dc2b      	bgt.n	34e2 <__ieee754_pow+0x1ba>
    348a:	4b27      	ldr	r3, [pc, #156]	; (3528 <__ieee754_pow+0x200>)
    348c:	429f      	cmp	r7, r3
    348e:	dc00      	bgt.n	3492 <__ieee754_pow+0x16a>
    3490:	e770      	b.n	3374 <__ieee754_pow+0x4c>
    3492:	4929      	ldr	r1, [pc, #164]	; (3538 <__ieee754_pow+0x210>)
    3494:	153b      	asrs	r3, r7, #20
    3496:	468c      	mov	ip, r1
    3498:	4463      	add	r3, ip
    349a:	2b14      	cmp	r3, #20
    349c:	dc01      	bgt.n	34a2 <__ieee754_pow+0x17a>
    349e:	f000 fbf2 	bl	3c86 <__ieee754_pow+0x95e>
    34a2:	2134      	movs	r1, #52	; 0x34
    34a4:	1acb      	subs	r3, r1, r3
    34a6:	9900      	ldr	r1, [sp, #0]
    34a8:	40d9      	lsrs	r1, r3
    34aa:	0008      	movs	r0, r1
    34ac:	4098      	lsls	r0, r3
    34ae:	4282      	cmp	r2, r0
    34b0:	d000      	beq.n	34b4 <__ieee754_pow+0x18c>
    34b2:	e75f      	b.n	3374 <__ieee754_pow+0x4c>
    34b4:	2301      	movs	r3, #1
    34b6:	4019      	ands	r1, r3
    34b8:	3301      	adds	r3, #1
    34ba:	1a5b      	subs	r3, r3, r1
    34bc:	469b      	mov	fp, r3
    34be:	e759      	b.n	3374 <__ieee754_pow+0x4c>
    34c0:	4b15      	ldr	r3, [pc, #84]	; (3518 <__ieee754_pow+0x1f0>)
    34c2:	18e0      	adds	r0, r4, r3
    34c4:	4306      	orrs	r6, r0
    34c6:	d100      	bne.n	34ca <__ieee754_pow+0x1a2>
    34c8:	e775      	b.n	33b6 <__ieee754_pow+0x8e>
    34ca:	4b17      	ldr	r3, [pc, #92]	; (3528 <__ieee754_pow+0x200>)
    34cc:	429c      	cmp	r4, r3
    34ce:	dc00      	bgt.n	34d2 <__ieee754_pow+0x1aa>
    34d0:	e351      	b.n	3b76 <__ieee754_pow+0x84e>
    34d2:	4653      	mov	r3, sl
    34d4:	2b00      	cmp	r3, #0
    34d6:	db16      	blt.n	3506 <__ieee754_pow+0x1de>
    34d8:	9b00      	ldr	r3, [sp, #0]
    34da:	9c01      	ldr	r4, [sp, #4]
    34dc:	001e      	movs	r6, r3
    34de:	0021      	movs	r1, r4
    34e0:	e76b      	b.n	33ba <__ieee754_pow+0x92>
    34e2:	2302      	movs	r3, #2
    34e4:	469b      	mov	fp, r3
    34e6:	e745      	b.n	3374 <__ieee754_pow+0x4c>
    34e8:	0032      	movs	r2, r6
    34ea:	002b      	movs	r3, r5
    34ec:	0030      	movs	r0, r6
    34ee:	0029      	movs	r1, r5
    34f0:	f002 fa8c 	bl	5a0c <__aeabi_dsub>
    34f4:	0002      	movs	r2, r0
    34f6:	000b      	movs	r3, r1
    34f8:	f001 fbea 	bl	4cd0 <__aeabi_ddiv>
    34fc:	0006      	movs	r6, r0
    34fe:	e75c      	b.n	33ba <__ieee754_pow+0x92>
    3500:	4653      	mov	r3, sl
    3502:	2b00      	cmp	r3, #0
    3504:	db85      	blt.n	3412 <__ieee754_pow+0xea>
    3506:	2600      	movs	r6, #0
    3508:	2100      	movs	r1, #0
    350a:	e756      	b.n	33ba <__ieee754_pow+0x92>
    350c:	7ff00000 	.word	0x7ff00000
    3510:	3ff00000 	.word	0x3ff00000
    3514:	3fe00000 	.word	0x3fe00000
    3518:	c0100000 	.word	0xc0100000
    351c:	000064cc 	.word	0x000064cc
    3520:	41e00000 	.word	0x41e00000
    3524:	43f00000 	.word	0x43f00000
    3528:	3fefffff 	.word	0x3fefffff
    352c:	8800759c 	.word	0x8800759c
    3530:	7e37e43c 	.word	0x7e37e43c
    3534:	433fffff 	.word	0x433fffff
    3538:	fffffc01 	.word	0xfffffc01
    353c:	4be8      	ldr	r3, [pc, #928]	; (38e0 <__ieee754_pow+0x5b8>)
    353e:	2200      	movs	r2, #0
    3540:	429c      	cmp	r4, r3
    3542:	dc06      	bgt.n	3552 <__ieee754_pow+0x22a>
    3544:	2200      	movs	r2, #0
    3546:	4be7      	ldr	r3, [pc, #924]	; (38e4 <__ieee754_pow+0x5bc>)
    3548:	f001 ffe6 	bl	5518 <__aeabi_dmul>
    354c:	2235      	movs	r2, #53	; 0x35
    354e:	000c      	movs	r4, r1
    3550:	4252      	negs	r2, r2
    3552:	4de5      	ldr	r5, [pc, #916]	; (38e8 <__ieee754_pow+0x5c0>)
    3554:	1523      	asrs	r3, r4, #20
    3556:	46ac      	mov	ip, r5
    3558:	4463      	add	r3, ip
    355a:	4699      	mov	r9, r3
    355c:	0324      	lsls	r4, r4, #12
    355e:	4de3      	ldr	r5, [pc, #908]	; (38ec <__ieee754_pow+0x5c4>)
    3560:	4be3      	ldr	r3, [pc, #908]	; (38f0 <__ieee754_pow+0x5c8>)
    3562:	0b24      	lsrs	r4, r4, #12
    3564:	4491      	add	r9, r2
    3566:	4325      	orrs	r5, r4
    3568:	429c      	cmp	r4, r3
    356a:	dd09      	ble.n	3580 <__ieee754_pow+0x258>
    356c:	4be1      	ldr	r3, [pc, #900]	; (38f4 <__ieee754_pow+0x5cc>)
    356e:	429c      	cmp	r4, r3
    3570:	dc00      	bgt.n	3574 <__ieee754_pow+0x24c>
    3572:	e3a9      	b.n	3cc8 <__ieee754_pow+0x9a0>
    3574:	2301      	movs	r3, #1
    3576:	469c      	mov	ip, r3
    3578:	4bdf      	ldr	r3, [pc, #892]	; (38f8 <__ieee754_pow+0x5d0>)
    357a:	44e1      	add	r9, ip
    357c:	469c      	mov	ip, r3
    357e:	4465      	add	r5, ip
    3580:	2300      	movs	r3, #0
    3582:	2400      	movs	r4, #0
    3584:	2200      	movs	r2, #0
    3586:	9308      	str	r3, [sp, #32]
    3588:	9409      	str	r4, [sp, #36]	; 0x24
    358a:	930c      	str	r3, [sp, #48]	; 0x30
    358c:	940d      	str	r4, [sp, #52]	; 0x34
    358e:	2400      	movs	r4, #0
    3590:	4bd6      	ldr	r3, [pc, #856]	; (38ec <__ieee754_pow+0x5c4>)
    3592:	9206      	str	r2, [sp, #24]
    3594:	9307      	str	r3, [sp, #28]
    3596:	9a06      	ldr	r2, [sp, #24]
    3598:	9b07      	ldr	r3, [sp, #28]
    359a:	0029      	movs	r1, r5
    359c:	900a      	str	r0, [sp, #40]	; 0x28
    359e:	910b      	str	r1, [sp, #44]	; 0x2c
    35a0:	f002 fa34 	bl	5a0c <__aeabi_dsub>
    35a4:	9a06      	ldr	r2, [sp, #24]
    35a6:	9b07      	ldr	r3, [sp, #28]
    35a8:	0006      	movs	r6, r0
    35aa:	000f      	movs	r7, r1
    35ac:	980a      	ldr	r0, [sp, #40]	; 0x28
    35ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
    35b0:	f001 f862 	bl	4678 <__aeabi_dadd>
    35b4:	0002      	movs	r2, r0
    35b6:	000b      	movs	r3, r1
    35b8:	2000      	movs	r0, #0
    35ba:	49cc      	ldr	r1, [pc, #816]	; (38ec <__ieee754_pow+0x5c4>)
    35bc:	f001 fb88 	bl	4cd0 <__aeabi_ddiv>
    35c0:	000a      	movs	r2, r1
    35c2:	0001      	movs	r1, r0
    35c4:	0013      	movs	r3, r2
    35c6:	910e      	str	r1, [sp, #56]	; 0x38
    35c8:	920f      	str	r2, [sp, #60]	; 0x3c
    35ca:	0002      	movs	r2, r0
    35cc:	0039      	movs	r1, r7
    35ce:	0030      	movs	r0, r6
    35d0:	f001 ffa2 	bl	5518 <__aeabi_dmul>
    35d4:	000a      	movs	r2, r1
    35d6:	0001      	movs	r1, r0
    35d8:	2080      	movs	r0, #128	; 0x80
    35da:	9104      	str	r1, [sp, #16]
    35dc:	9205      	str	r2, [sp, #20]
    35de:	0013      	movs	r3, r2
    35e0:	2200      	movs	r2, #0
    35e2:	2180      	movs	r1, #128	; 0x80
    35e4:	0300      	lsls	r0, r0, #12
    35e6:	4684      	mov	ip, r0
    35e8:	9202      	str	r2, [sp, #8]
    35ea:	9303      	str	r3, [sp, #12]
    35ec:	2200      	movs	r2, #0
    35ee:	0589      	lsls	r1, r1, #22
    35f0:	106d      	asrs	r5, r5, #1
    35f2:	430d      	orrs	r5, r1
    35f4:	4465      	add	r5, ip
    35f6:	192b      	adds	r3, r5, r4
    35f8:	9802      	ldr	r0, [sp, #8]
    35fa:	9903      	ldr	r1, [sp, #12]
    35fc:	0014      	movs	r4, r2
    35fe:	001d      	movs	r5, r3
    3600:	f001 ff8a 	bl	5518 <__aeabi_dmul>
    3604:	0002      	movs	r2, r0
    3606:	000b      	movs	r3, r1
    3608:	0030      	movs	r0, r6
    360a:	0039      	movs	r1, r7
    360c:	f002 f9fe 	bl	5a0c <__aeabi_dsub>
    3610:	9a06      	ldr	r2, [sp, #24]
    3612:	9b07      	ldr	r3, [sp, #28]
    3614:	0006      	movs	r6, r0
    3616:	000f      	movs	r7, r1
    3618:	0020      	movs	r0, r4
    361a:	0029      	movs	r1, r5
    361c:	f002 f9f6 	bl	5a0c <__aeabi_dsub>
    3620:	0002      	movs	r2, r0
    3622:	000b      	movs	r3, r1
    3624:	980a      	ldr	r0, [sp, #40]	; 0x28
    3626:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3628:	f002 f9f0 	bl	5a0c <__aeabi_dsub>
    362c:	9a02      	ldr	r2, [sp, #8]
    362e:	9b03      	ldr	r3, [sp, #12]
    3630:	f001 ff72 	bl	5518 <__aeabi_dmul>
    3634:	0002      	movs	r2, r0
    3636:	000b      	movs	r3, r1
    3638:	0030      	movs	r0, r6
    363a:	0039      	movs	r1, r7
    363c:	f002 f9e6 	bl	5a0c <__aeabi_dsub>
    3640:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3644:	f001 ff68 	bl	5518 <__aeabi_dmul>
    3648:	9d04      	ldr	r5, [sp, #16]
    364a:	9e05      	ldr	r6, [sp, #20]
    364c:	9006      	str	r0, [sp, #24]
    364e:	9107      	str	r1, [sp, #28]
    3650:	002a      	movs	r2, r5
    3652:	0033      	movs	r3, r6
    3654:	0028      	movs	r0, r5
    3656:	0031      	movs	r1, r6
    3658:	f001 ff5e 	bl	5518 <__aeabi_dmul>
    365c:	0006      	movs	r6, r0
    365e:	000f      	movs	r7, r1
    3660:	4aa6      	ldr	r2, [pc, #664]	; (38fc <__ieee754_pow+0x5d4>)
    3662:	4ba7      	ldr	r3, [pc, #668]	; (3900 <__ieee754_pow+0x5d8>)
    3664:	f001 ff58 	bl	5518 <__aeabi_dmul>
    3668:	4aa6      	ldr	r2, [pc, #664]	; (3904 <__ieee754_pow+0x5dc>)
    366a:	4ba7      	ldr	r3, [pc, #668]	; (3908 <__ieee754_pow+0x5e0>)
    366c:	f001 f804 	bl	4678 <__aeabi_dadd>
    3670:	0032      	movs	r2, r6
    3672:	003b      	movs	r3, r7
    3674:	f001 ff50 	bl	5518 <__aeabi_dmul>
    3678:	4aa4      	ldr	r2, [pc, #656]	; (390c <__ieee754_pow+0x5e4>)
    367a:	4ba5      	ldr	r3, [pc, #660]	; (3910 <__ieee754_pow+0x5e8>)
    367c:	f000 fffc 	bl	4678 <__aeabi_dadd>
    3680:	0032      	movs	r2, r6
    3682:	003b      	movs	r3, r7
    3684:	f001 ff48 	bl	5518 <__aeabi_dmul>
    3688:	4aa2      	ldr	r2, [pc, #648]	; (3914 <__ieee754_pow+0x5ec>)
    368a:	4ba3      	ldr	r3, [pc, #652]	; (3918 <__ieee754_pow+0x5f0>)
    368c:	f000 fff4 	bl	4678 <__aeabi_dadd>
    3690:	0032      	movs	r2, r6
    3692:	003b      	movs	r3, r7
    3694:	f001 ff40 	bl	5518 <__aeabi_dmul>
    3698:	4aa0      	ldr	r2, [pc, #640]	; (391c <__ieee754_pow+0x5f4>)
    369a:	4ba1      	ldr	r3, [pc, #644]	; (3920 <__ieee754_pow+0x5f8>)
    369c:	f000 ffec 	bl	4678 <__aeabi_dadd>
    36a0:	0032      	movs	r2, r6
    36a2:	003b      	movs	r3, r7
    36a4:	f001 ff38 	bl	5518 <__aeabi_dmul>
    36a8:	4a9e      	ldr	r2, [pc, #632]	; (3924 <__ieee754_pow+0x5fc>)
    36aa:	4b9f      	ldr	r3, [pc, #636]	; (3928 <__ieee754_pow+0x600>)
    36ac:	f000 ffe4 	bl	4678 <__aeabi_dadd>
    36b0:	0032      	movs	r2, r6
    36b2:	0004      	movs	r4, r0
    36b4:	000d      	movs	r5, r1
    36b6:	003b      	movs	r3, r7
    36b8:	0030      	movs	r0, r6
    36ba:	0039      	movs	r1, r7
    36bc:	f001 ff2c 	bl	5518 <__aeabi_dmul>
    36c0:	0002      	movs	r2, r0
    36c2:	000b      	movs	r3, r1
    36c4:	0020      	movs	r0, r4
    36c6:	0029      	movs	r1, r5
    36c8:	f001 ff26 	bl	5518 <__aeabi_dmul>
    36cc:	9e02      	ldr	r6, [sp, #8]
    36ce:	9f03      	ldr	r7, [sp, #12]
    36d0:	0004      	movs	r4, r0
    36d2:	000d      	movs	r5, r1
    36d4:	9804      	ldr	r0, [sp, #16]
    36d6:	9905      	ldr	r1, [sp, #20]
    36d8:	0032      	movs	r2, r6
    36da:	003b      	movs	r3, r7
    36dc:	f000 ffcc 	bl	4678 <__aeabi_dadd>
    36e0:	9a06      	ldr	r2, [sp, #24]
    36e2:	9b07      	ldr	r3, [sp, #28]
    36e4:	f001 ff18 	bl	5518 <__aeabi_dmul>
    36e8:	0022      	movs	r2, r4
    36ea:	002b      	movs	r3, r5
    36ec:	f000 ffc4 	bl	4678 <__aeabi_dadd>
    36f0:	0032      	movs	r2, r6
    36f2:	900a      	str	r0, [sp, #40]	; 0x28
    36f4:	910b      	str	r1, [sp, #44]	; 0x2c
    36f6:	003b      	movs	r3, r7
    36f8:	0030      	movs	r0, r6
    36fa:	0039      	movs	r1, r7
    36fc:	9602      	str	r6, [sp, #8]
    36fe:	9703      	str	r7, [sp, #12]
    3700:	f001 ff0a 	bl	5518 <__aeabi_dmul>
    3704:	2200      	movs	r2, #0
    3706:	4b89      	ldr	r3, [pc, #548]	; (392c <__ieee754_pow+0x604>)
    3708:	0004      	movs	r4, r0
    370a:	000d      	movs	r5, r1
    370c:	f000 ffb4 	bl	4678 <__aeabi_dadd>
    3710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3714:	f000 ffb0 	bl	4678 <__aeabi_dadd>
    3718:	2600      	movs	r6, #0
    371a:	000f      	movs	r7, r1
    371c:	0032      	movs	r2, r6
    371e:	000b      	movs	r3, r1
    3720:	9802      	ldr	r0, [sp, #8]
    3722:	9903      	ldr	r1, [sp, #12]
    3724:	f001 fef8 	bl	5518 <__aeabi_dmul>
    3728:	2200      	movs	r2, #0
    372a:	9002      	str	r0, [sp, #8]
    372c:	9103      	str	r1, [sp, #12]
    372e:	4b7f      	ldr	r3, [pc, #508]	; (392c <__ieee754_pow+0x604>)
    3730:	0030      	movs	r0, r6
    3732:	0039      	movs	r1, r7
    3734:	f002 f96a 	bl	5a0c <__aeabi_dsub>
    3738:	0022      	movs	r2, r4
    373a:	002b      	movs	r3, r5
    373c:	f002 f966 	bl	5a0c <__aeabi_dsub>
    3740:	0002      	movs	r2, r0
    3742:	000b      	movs	r3, r1
    3744:	980a      	ldr	r0, [sp, #40]	; 0x28
    3746:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3748:	f002 f960 	bl	5a0c <__aeabi_dsub>
    374c:	9a04      	ldr	r2, [sp, #16]
    374e:	9b05      	ldr	r3, [sp, #20]
    3750:	f001 fee2 	bl	5518 <__aeabi_dmul>
    3754:	0032      	movs	r2, r6
    3756:	0004      	movs	r4, r0
    3758:	000d      	movs	r5, r1
    375a:	9806      	ldr	r0, [sp, #24]
    375c:	9907      	ldr	r1, [sp, #28]
    375e:	003b      	movs	r3, r7
    3760:	f001 feda 	bl	5518 <__aeabi_dmul>
    3764:	0002      	movs	r2, r0
    3766:	000b      	movs	r3, r1
    3768:	0020      	movs	r0, r4
    376a:	0029      	movs	r1, r5
    376c:	f000 ff84 	bl	4678 <__aeabi_dadd>
    3770:	0004      	movs	r4, r0
    3772:	000d      	movs	r5, r1
    3774:	0002      	movs	r2, r0
    3776:	000b      	movs	r3, r1
    3778:	9802      	ldr	r0, [sp, #8]
    377a:	9903      	ldr	r1, [sp, #12]
    377c:	f000 ff7c 	bl	4678 <__aeabi_dadd>
    3780:	2600      	movs	r6, #0
    3782:	22e0      	movs	r2, #224	; 0xe0
    3784:	4b6a      	ldr	r3, [pc, #424]	; (3930 <__ieee754_pow+0x608>)
    3786:	0612      	lsls	r2, r2, #24
    3788:	0030      	movs	r0, r6
    378a:	000f      	movs	r7, r1
    378c:	f001 fec4 	bl	5518 <__aeabi_dmul>
    3790:	9a02      	ldr	r2, [sp, #8]
    3792:	9b03      	ldr	r3, [sp, #12]
    3794:	9004      	str	r0, [sp, #16]
    3796:	9105      	str	r1, [sp, #20]
    3798:	0030      	movs	r0, r6
    379a:	0039      	movs	r1, r7
    379c:	f002 f936 	bl	5a0c <__aeabi_dsub>
    37a0:	0002      	movs	r2, r0
    37a2:	000b      	movs	r3, r1
    37a4:	0020      	movs	r0, r4
    37a6:	0029      	movs	r1, r5
    37a8:	f002 f930 	bl	5a0c <__aeabi_dsub>
    37ac:	4a61      	ldr	r2, [pc, #388]	; (3934 <__ieee754_pow+0x60c>)
    37ae:	4b60      	ldr	r3, [pc, #384]	; (3930 <__ieee754_pow+0x608>)
    37b0:	f001 feb2 	bl	5518 <__aeabi_dmul>
    37b4:	4a60      	ldr	r2, [pc, #384]	; (3938 <__ieee754_pow+0x610>)
    37b6:	0004      	movs	r4, r0
    37b8:	000d      	movs	r5, r1
    37ba:	4b60      	ldr	r3, [pc, #384]	; (393c <__ieee754_pow+0x614>)
    37bc:	0030      	movs	r0, r6
    37be:	0039      	movs	r1, r7
    37c0:	f001 feaa 	bl	5518 <__aeabi_dmul>
    37c4:	0002      	movs	r2, r0
    37c6:	000b      	movs	r3, r1
    37c8:	0020      	movs	r0, r4
    37ca:	0029      	movs	r1, r5
    37cc:	f000 ff54 	bl	4678 <__aeabi_dadd>
    37d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    37d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    37d4:	f000 ff50 	bl	4678 <__aeabi_dadd>
    37d8:	0006      	movs	r6, r0
    37da:	4648      	mov	r0, r9
    37dc:	000f      	movs	r7, r1
    37de:	f002 fcbf 	bl	6160 <__aeabi_i2d>
    37e2:	0004      	movs	r4, r0
    37e4:	000d      	movs	r5, r1
    37e6:	9804      	ldr	r0, [sp, #16]
    37e8:	9905      	ldr	r1, [sp, #20]
    37ea:	0032      	movs	r2, r6
    37ec:	003b      	movs	r3, r7
    37ee:	f000 ff43 	bl	4678 <__aeabi_dadd>
    37f2:	9a08      	ldr	r2, [sp, #32]
    37f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    37f6:	f000 ff3f 	bl	4678 <__aeabi_dadd>
    37fa:	0022      	movs	r2, r4
    37fc:	002b      	movs	r3, r5
    37fe:	f000 ff3b 	bl	4678 <__aeabi_dadd>
    3802:	2000      	movs	r0, #0
    3804:	0022      	movs	r2, r4
    3806:	002b      	movs	r3, r5
    3808:	9002      	str	r0, [sp, #8]
    380a:	9103      	str	r1, [sp, #12]
    380c:	f002 f8fe 	bl	5a0c <__aeabi_dsub>
    3810:	9a08      	ldr	r2, [sp, #32]
    3812:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3814:	f002 f8fa 	bl	5a0c <__aeabi_dsub>
    3818:	9a04      	ldr	r2, [sp, #16]
    381a:	9b05      	ldr	r3, [sp, #20]
    381c:	f002 f8f6 	bl	5a0c <__aeabi_dsub>
    3820:	0002      	movs	r2, r0
    3822:	000b      	movs	r3, r1
    3824:	0030      	movs	r0, r6
    3826:	0039      	movs	r1, r7
    3828:	f002 f8f0 	bl	5a0c <__aeabi_dsub>
    382c:	9004      	str	r0, [sp, #16]
    382e:	9105      	str	r1, [sp, #20]
    3830:	465b      	mov	r3, fp
    3832:	4642      	mov	r2, r8
    3834:	3b01      	subs	r3, #1
    3836:	4313      	orrs	r3, r2
    3838:	d100      	bne.n	383c <__ieee754_pow+0x514>
    383a:	e197      	b.n	3b6c <__ieee754_pow+0x844>
    383c:	2300      	movs	r3, #0
    383e:	4c2b      	ldr	r4, [pc, #172]	; (38ec <__ieee754_pow+0x5c4>)
    3840:	9306      	str	r3, [sp, #24]
    3842:	9407      	str	r4, [sp, #28]
    3844:	9800      	ldr	r0, [sp, #0]
    3846:	9901      	ldr	r1, [sp, #4]
    3848:	2600      	movs	r6, #0
    384a:	000b      	movs	r3, r1
    384c:	0032      	movs	r2, r6
    384e:	000f      	movs	r7, r1
    3850:	f002 f8dc 	bl	5a0c <__aeabi_dsub>
    3854:	9a02      	ldr	r2, [sp, #8]
    3856:	9b03      	ldr	r3, [sp, #12]
    3858:	f001 fe5e 	bl	5518 <__aeabi_dmul>
    385c:	9a00      	ldr	r2, [sp, #0]
    385e:	9b01      	ldr	r3, [sp, #4]
    3860:	0004      	movs	r4, r0
    3862:	000d      	movs	r5, r1
    3864:	9804      	ldr	r0, [sp, #16]
    3866:	9905      	ldr	r1, [sp, #20]
    3868:	f001 fe56 	bl	5518 <__aeabi_dmul>
    386c:	0002      	movs	r2, r0
    386e:	000b      	movs	r3, r1
    3870:	0020      	movs	r0, r4
    3872:	0029      	movs	r1, r5
    3874:	f000 ff00 	bl	4678 <__aeabi_dadd>
    3878:	0004      	movs	r4, r0
    387a:	000d      	movs	r5, r1
    387c:	9802      	ldr	r0, [sp, #8]
    387e:	9903      	ldr	r1, [sp, #12]
    3880:	003b      	movs	r3, r7
    3882:	0032      	movs	r2, r6
    3884:	9404      	str	r4, [sp, #16]
    3886:	9505      	str	r5, [sp, #20]
    3888:	f001 fe46 	bl	5518 <__aeabi_dmul>
    388c:	9000      	str	r0, [sp, #0]
    388e:	9101      	str	r1, [sp, #4]
    3890:	000b      	movs	r3, r1
    3892:	0002      	movs	r2, r0
    3894:	0029      	movs	r1, r5
    3896:	0020      	movs	r0, r4
    3898:	f000 feee 	bl	4678 <__aeabi_dadd>
    389c:	4b28      	ldr	r3, [pc, #160]	; (3940 <__ieee754_pow+0x618>)
    389e:	4681      	mov	r9, r0
    38a0:	1e0f      	subs	r7, r1, #0
    38a2:	468a      	mov	sl, r1
    38a4:	429f      	cmp	r7, r3
    38a6:	dc00      	bgt.n	38aa <__ieee754_pow+0x582>
    38a8:	e13c      	b.n	3b24 <__ieee754_pow+0x7fc>
    38aa:	4b26      	ldr	r3, [pc, #152]	; (3944 <__ieee754_pow+0x61c>)
    38ac:	18cb      	adds	r3, r1, r3
    38ae:	4303      	orrs	r3, r0
    38b0:	d000      	beq.n	38b4 <__ieee754_pow+0x58c>
    38b2:	e1db      	b.n	3c6c <__ieee754_pow+0x944>
    38b4:	9804      	ldr	r0, [sp, #16]
    38b6:	9905      	ldr	r1, [sp, #20]
    38b8:	4a23      	ldr	r2, [pc, #140]	; (3948 <__ieee754_pow+0x620>)
    38ba:	4b24      	ldr	r3, [pc, #144]	; (394c <__ieee754_pow+0x624>)
    38bc:	f000 fedc 	bl	4678 <__aeabi_dadd>
    38c0:	9a00      	ldr	r2, [sp, #0]
    38c2:	9b01      	ldr	r3, [sp, #4]
    38c4:	0004      	movs	r4, r0
    38c6:	000d      	movs	r5, r1
    38c8:	4648      	mov	r0, r9
    38ca:	0039      	movs	r1, r7
    38cc:	f002 f89e 	bl	5a0c <__aeabi_dsub>
    38d0:	0002      	movs	r2, r0
    38d2:	000b      	movs	r3, r1
    38d4:	0020      	movs	r0, r4
    38d6:	0029      	movs	r1, r5
    38d8:	f000 fd3a 	bl	4350 <__aeabi_dcmpgt>
    38dc:	003e      	movs	r6, r7
    38de:	e037      	b.n	3950 <__ieee754_pow+0x628>
    38e0:	000fffff 	.word	0x000fffff
    38e4:	43400000 	.word	0x43400000
    38e8:	fffffc01 	.word	0xfffffc01
    38ec:	3ff00000 	.word	0x3ff00000
    38f0:	0003988e 	.word	0x0003988e
    38f4:	000bb679 	.word	0x000bb679
    38f8:	fff00000 	.word	0xfff00000
    38fc:	4a454eef 	.word	0x4a454eef
    3900:	3fca7e28 	.word	0x3fca7e28
    3904:	93c9db65 	.word	0x93c9db65
    3908:	3fcd864a 	.word	0x3fcd864a
    390c:	a91d4101 	.word	0xa91d4101
    3910:	3fd17460 	.word	0x3fd17460
    3914:	518f264d 	.word	0x518f264d
    3918:	3fd55555 	.word	0x3fd55555
    391c:	db6fabff 	.word	0xdb6fabff
    3920:	3fdb6db6 	.word	0x3fdb6db6
    3924:	33333303 	.word	0x33333303
    3928:	3fe33333 	.word	0x3fe33333
    392c:	40080000 	.word	0x40080000
    3930:	3feec709 	.word	0x3feec709
    3934:	dc3a03fd 	.word	0xdc3a03fd
    3938:	145b01f5 	.word	0x145b01f5
    393c:	be3e2fe0 	.word	0xbe3e2fe0
    3940:	408fffff 	.word	0x408fffff
    3944:	bf700000 	.word	0xbf700000
    3948:	652b82fe 	.word	0x652b82fe
    394c:	3c971547 	.word	0x3c971547
    3950:	2800      	cmp	r0, #0
    3952:	d000      	beq.n	3956 <__ieee754_pow+0x62e>
    3954:	e18a      	b.n	3c6c <__ieee754_pow+0x944>
    3956:	2280      	movs	r2, #128	; 0x80
    3958:	4be7      	ldr	r3, [pc, #924]	; (3cf8 <__ieee754_pow+0x9d0>)
    395a:	0352      	lsls	r2, r2, #13
    395c:	469c      	mov	ip, r3
    395e:	0013      	movs	r3, r2
    3960:	1536      	asrs	r6, r6, #20
    3962:	4466      	add	r6, ip
    3964:	4133      	asrs	r3, r6
    3966:	49e5      	ldr	r1, [pc, #916]	; (3cfc <__ieee754_pow+0x9d4>)
    3968:	19db      	adds	r3, r3, r7
    396a:	005e      	lsls	r6, r3, #1
    396c:	001c      	movs	r4, r3
    396e:	031b      	lsls	r3, r3, #12
    3970:	468c      	mov	ip, r1
    3972:	0b1b      	lsrs	r3, r3, #12
    3974:	4313      	orrs	r3, r2
    3976:	2214      	movs	r2, #20
    3978:	0d76      	lsrs	r6, r6, #21
    397a:	4fe1      	ldr	r7, [pc, #900]	; (3d00 <__ieee754_pow+0x9d8>)
    397c:	4466      	add	r6, ip
    397e:	4137      	asrs	r7, r6
    3980:	1b96      	subs	r6, r2, r6
    3982:	4133      	asrs	r3, r6
    3984:	4698      	mov	r8, r3
    3986:	4653      	mov	r3, sl
    3988:	43bc      	bics	r4, r7
    398a:	2000      	movs	r0, #0
    398c:	0021      	movs	r1, r4
    398e:	2b00      	cmp	r3, #0
    3990:	da00      	bge.n	3994 <__ieee754_pow+0x66c>
    3992:	e1a9      	b.n	3ce8 <__ieee754_pow+0x9c0>
    3994:	0002      	movs	r2, r0
    3996:	000b      	movs	r3, r1
    3998:	9800      	ldr	r0, [sp, #0]
    399a:	9901      	ldr	r1, [sp, #4]
    399c:	f002 f836 	bl	5a0c <__aeabi_dsub>
    39a0:	000b      	movs	r3, r1
    39a2:	9000      	str	r0, [sp, #0]
    39a4:	9101      	str	r1, [sp, #4]
    39a6:	0002      	movs	r2, r0
    39a8:	9804      	ldr	r0, [sp, #16]
    39aa:	9905      	ldr	r1, [sp, #20]
    39ac:	f000 fe64 	bl	4678 <__aeabi_dadd>
    39b0:	4643      	mov	r3, r8
    39b2:	051b      	lsls	r3, r3, #20
    39b4:	4699      	mov	r9, r3
    39b6:	2000      	movs	r0, #0
    39b8:	2200      	movs	r2, #0
    39ba:	4bd2      	ldr	r3, [pc, #840]	; (3d04 <__ieee754_pow+0x9dc>)
    39bc:	0006      	movs	r6, r0
    39be:	000f      	movs	r7, r1
    39c0:	f001 fdaa 	bl	5518 <__aeabi_dmul>
    39c4:	9a00      	ldr	r2, [sp, #0]
    39c6:	9b01      	ldr	r3, [sp, #4]
    39c8:	9002      	str	r0, [sp, #8]
    39ca:	9103      	str	r1, [sp, #12]
    39cc:	0030      	movs	r0, r6
    39ce:	0039      	movs	r1, r7
    39d0:	f002 f81c 	bl	5a0c <__aeabi_dsub>
    39d4:	0002      	movs	r2, r0
    39d6:	000b      	movs	r3, r1
    39d8:	9804      	ldr	r0, [sp, #16]
    39da:	9905      	ldr	r1, [sp, #20]
    39dc:	f002 f816 	bl	5a0c <__aeabi_dsub>
    39e0:	4ac9      	ldr	r2, [pc, #804]	; (3d08 <__ieee754_pow+0x9e0>)
    39e2:	4bca      	ldr	r3, [pc, #808]	; (3d0c <__ieee754_pow+0x9e4>)
    39e4:	f001 fd98 	bl	5518 <__aeabi_dmul>
    39e8:	4ac9      	ldr	r2, [pc, #804]	; (3d10 <__ieee754_pow+0x9e8>)
    39ea:	0004      	movs	r4, r0
    39ec:	000d      	movs	r5, r1
    39ee:	4bc9      	ldr	r3, [pc, #804]	; (3d14 <__ieee754_pow+0x9ec>)
    39f0:	0030      	movs	r0, r6
    39f2:	0039      	movs	r1, r7
    39f4:	f001 fd90 	bl	5518 <__aeabi_dmul>
    39f8:	0002      	movs	r2, r0
    39fa:	000b      	movs	r3, r1
    39fc:	0020      	movs	r0, r4
    39fe:	0029      	movs	r1, r5
    3a00:	f000 fe3a 	bl	4678 <__aeabi_dadd>
    3a04:	0004      	movs	r4, r0
    3a06:	000d      	movs	r5, r1
    3a08:	0002      	movs	r2, r0
    3a0a:	000b      	movs	r3, r1
    3a0c:	9802      	ldr	r0, [sp, #8]
    3a0e:	9903      	ldr	r1, [sp, #12]
    3a10:	f000 fe32 	bl	4678 <__aeabi_dadd>
    3a14:	9a02      	ldr	r2, [sp, #8]
    3a16:	9b03      	ldr	r3, [sp, #12]
    3a18:	0006      	movs	r6, r0
    3a1a:	000f      	movs	r7, r1
    3a1c:	f001 fff6 	bl	5a0c <__aeabi_dsub>
    3a20:	0002      	movs	r2, r0
    3a22:	000b      	movs	r3, r1
    3a24:	0020      	movs	r0, r4
    3a26:	0029      	movs	r1, r5
    3a28:	f001 fff0 	bl	5a0c <__aeabi_dsub>
    3a2c:	0032      	movs	r2, r6
    3a2e:	9000      	str	r0, [sp, #0]
    3a30:	9101      	str	r1, [sp, #4]
    3a32:	003b      	movs	r3, r7
    3a34:	0030      	movs	r0, r6
    3a36:	0039      	movs	r1, r7
    3a38:	f001 fd6e 	bl	5518 <__aeabi_dmul>
    3a3c:	0004      	movs	r4, r0
    3a3e:	000d      	movs	r5, r1
    3a40:	4ab5      	ldr	r2, [pc, #724]	; (3d18 <__ieee754_pow+0x9f0>)
    3a42:	4bb6      	ldr	r3, [pc, #728]	; (3d1c <__ieee754_pow+0x9f4>)
    3a44:	f001 fd68 	bl	5518 <__aeabi_dmul>
    3a48:	4ab5      	ldr	r2, [pc, #724]	; (3d20 <__ieee754_pow+0x9f8>)
    3a4a:	4bb6      	ldr	r3, [pc, #728]	; (3d24 <__ieee754_pow+0x9fc>)
    3a4c:	f001 ffde 	bl	5a0c <__aeabi_dsub>
    3a50:	0022      	movs	r2, r4
    3a52:	002b      	movs	r3, r5
    3a54:	f001 fd60 	bl	5518 <__aeabi_dmul>
    3a58:	4ab3      	ldr	r2, [pc, #716]	; (3d28 <__ieee754_pow+0xa00>)
    3a5a:	4bb4      	ldr	r3, [pc, #720]	; (3d2c <__ieee754_pow+0xa04>)
    3a5c:	f000 fe0c 	bl	4678 <__aeabi_dadd>
    3a60:	0022      	movs	r2, r4
    3a62:	002b      	movs	r3, r5
    3a64:	f001 fd58 	bl	5518 <__aeabi_dmul>
    3a68:	4ab1      	ldr	r2, [pc, #708]	; (3d30 <__ieee754_pow+0xa08>)
    3a6a:	4bb2      	ldr	r3, [pc, #712]	; (3d34 <__ieee754_pow+0xa0c>)
    3a6c:	f001 ffce 	bl	5a0c <__aeabi_dsub>
    3a70:	0022      	movs	r2, r4
    3a72:	002b      	movs	r3, r5
    3a74:	f001 fd50 	bl	5518 <__aeabi_dmul>
    3a78:	4aaf      	ldr	r2, [pc, #700]	; (3d38 <__ieee754_pow+0xa10>)
    3a7a:	4bb0      	ldr	r3, [pc, #704]	; (3d3c <__ieee754_pow+0xa14>)
    3a7c:	f000 fdfc 	bl	4678 <__aeabi_dadd>
    3a80:	0022      	movs	r2, r4
    3a82:	002b      	movs	r3, r5
    3a84:	f001 fd48 	bl	5518 <__aeabi_dmul>
    3a88:	0002      	movs	r2, r0
    3a8a:	000b      	movs	r3, r1
    3a8c:	0030      	movs	r0, r6
    3a8e:	0039      	movs	r1, r7
    3a90:	f001 ffbc 	bl	5a0c <__aeabi_dsub>
    3a94:	0004      	movs	r4, r0
    3a96:	000d      	movs	r5, r1
    3a98:	0002      	movs	r2, r0
    3a9a:	000b      	movs	r3, r1
    3a9c:	0030      	movs	r0, r6
    3a9e:	0039      	movs	r1, r7
    3aa0:	f001 fd3a 	bl	5518 <__aeabi_dmul>
    3aa4:	2380      	movs	r3, #128	; 0x80
    3aa6:	9002      	str	r0, [sp, #8]
    3aa8:	9103      	str	r1, [sp, #12]
    3aaa:	2200      	movs	r2, #0
    3aac:	05db      	lsls	r3, r3, #23
    3aae:	0020      	movs	r0, r4
    3ab0:	0029      	movs	r1, r5
    3ab2:	f001 ffab 	bl	5a0c <__aeabi_dsub>
    3ab6:	0002      	movs	r2, r0
    3ab8:	000b      	movs	r3, r1
    3aba:	9802      	ldr	r0, [sp, #8]
    3abc:	9903      	ldr	r1, [sp, #12]
    3abe:	f001 f907 	bl	4cd0 <__aeabi_ddiv>
    3ac2:	9a00      	ldr	r2, [sp, #0]
    3ac4:	9b01      	ldr	r3, [sp, #4]
    3ac6:	0004      	movs	r4, r0
    3ac8:	000d      	movs	r5, r1
    3aca:	0030      	movs	r0, r6
    3acc:	0039      	movs	r1, r7
    3ace:	f001 fd23 	bl	5518 <__aeabi_dmul>
    3ad2:	9a00      	ldr	r2, [sp, #0]
    3ad4:	9b01      	ldr	r3, [sp, #4]
    3ad6:	f000 fdcf 	bl	4678 <__aeabi_dadd>
    3ada:	0002      	movs	r2, r0
    3adc:	000b      	movs	r3, r1
    3ade:	0020      	movs	r0, r4
    3ae0:	0029      	movs	r1, r5
    3ae2:	f001 ff93 	bl	5a0c <__aeabi_dsub>
    3ae6:	0032      	movs	r2, r6
    3ae8:	003b      	movs	r3, r7
    3aea:	f001 ff8f 	bl	5a0c <__aeabi_dsub>
    3aee:	0002      	movs	r2, r0
    3af0:	000b      	movs	r3, r1
    3af2:	2000      	movs	r0, #0
    3af4:	4992      	ldr	r1, [pc, #584]	; (3d40 <__ieee754_pow+0xa18>)
    3af6:	f001 ff89 	bl	5a0c <__aeabi_dsub>
    3afa:	464b      	mov	r3, r9
    3afc:	185b      	adds	r3, r3, r1
    3afe:	151a      	asrs	r2, r3, #20
    3b00:	2a00      	cmp	r2, #0
    3b02:	dc00      	bgt.n	3b06 <__ieee754_pow+0x7de>
    3b04:	e0f4      	b.n	3cf0 <__ieee754_pow+0x9c8>
    3b06:	0019      	movs	r1, r3
    3b08:	9a06      	ldr	r2, [sp, #24]
    3b0a:	9b07      	ldr	r3, [sp, #28]
    3b0c:	f001 fd04 	bl	5518 <__aeabi_dmul>
    3b10:	0006      	movs	r6, r0
    3b12:	e452      	b.n	33ba <__ieee754_pow+0x92>
    3b14:	0032      	movs	r2, r6
    3b16:	0030      	movs	r0, r6
    3b18:	002b      	movs	r3, r5
    3b1a:	0029      	movs	r1, r5
    3b1c:	f001 fcfc 	bl	5518 <__aeabi_dmul>
    3b20:	0006      	movs	r6, r0
    3b22:	e44a      	b.n	33ba <__ieee754_pow+0x92>
    3b24:	4b87      	ldr	r3, [pc, #540]	; (3d44 <__ieee754_pow+0xa1c>)
    3b26:	004e      	lsls	r6, r1, #1
    3b28:	0876      	lsrs	r6, r6, #1
    3b2a:	429e      	cmp	r6, r3
    3b2c:	dc00      	bgt.n	3b30 <__ieee754_pow+0x808>
    3b2e:	e0bf      	b.n	3cb0 <__ieee754_pow+0x988>
    3b30:	4b85      	ldr	r3, [pc, #532]	; (3d48 <__ieee754_pow+0xa20>)
    3b32:	18cb      	adds	r3, r1, r3
    3b34:	4303      	orrs	r3, r0
    3b36:	d10c      	bne.n	3b52 <__ieee754_pow+0x82a>
    3b38:	9a00      	ldr	r2, [sp, #0]
    3b3a:	9b01      	ldr	r3, [sp, #4]
    3b3c:	f001 ff66 	bl	5a0c <__aeabi_dsub>
    3b40:	0002      	movs	r2, r0
    3b42:	000b      	movs	r3, r1
    3b44:	9804      	ldr	r0, [sp, #16]
    3b46:	9905      	ldr	r1, [sp, #20]
    3b48:	f000 fbf8 	bl	433c <__aeabi_dcmple>
    3b4c:	2800      	cmp	r0, #0
    3b4e:	d100      	bne.n	3b52 <__ieee754_pow+0x82a>
    3b50:	e701      	b.n	3956 <__ieee754_pow+0x62e>
    3b52:	9806      	ldr	r0, [sp, #24]
    3b54:	9907      	ldr	r1, [sp, #28]
    3b56:	4a7d      	ldr	r2, [pc, #500]	; (3d4c <__ieee754_pow+0xa24>)
    3b58:	4b7d      	ldr	r3, [pc, #500]	; (3d50 <__ieee754_pow+0xa28>)
    3b5a:	f001 fcdd 	bl	5518 <__aeabi_dmul>
    3b5e:	4a7b      	ldr	r2, [pc, #492]	; (3d4c <__ieee754_pow+0xa24>)
    3b60:	4b7b      	ldr	r3, [pc, #492]	; (3d50 <__ieee754_pow+0xa28>)
    3b62:	f001 fcd9 	bl	5518 <__aeabi_dmul>
    3b66:	0006      	movs	r6, r0
    3b68:	f7ff fc27 	bl	33ba <__ieee754_pow+0x92>
    3b6c:	2300      	movs	r3, #0
    3b6e:	4c79      	ldr	r4, [pc, #484]	; (3d54 <__ieee754_pow+0xa2c>)
    3b70:	9306      	str	r3, [sp, #24]
    3b72:	9407      	str	r4, [sp, #28]
    3b74:	e666      	b.n	3844 <__ieee754_pow+0x51c>
    3b76:	4653      	mov	r3, sl
    3b78:	2b00      	cmp	r3, #0
    3b7a:	db00      	blt.n	3b7e <__ieee754_pow+0x856>
    3b7c:	e4c3      	b.n	3506 <__ieee754_pow+0x1de>
    3b7e:	9b00      	ldr	r3, [sp, #0]
    3b80:	9c01      	ldr	r4, [sp, #4]
    3b82:	2280      	movs	r2, #128	; 0x80
    3b84:	0612      	lsls	r2, r2, #24
    3b86:	001e      	movs	r6, r3
    3b88:	4694      	mov	ip, r2
    3b8a:	0023      	movs	r3, r4
    3b8c:	4463      	add	r3, ip
    3b8e:	0019      	movs	r1, r3
    3b90:	f7ff fc13 	bl	33ba <__ieee754_pow+0x92>
    3b94:	0002      	movs	r2, r0
    3b96:	000b      	movs	r3, r1
    3b98:	2000      	movs	r0, #0
    3b9a:	4969      	ldr	r1, [pc, #420]	; (3d40 <__ieee754_pow+0xa18>)
    3b9c:	f001 f898 	bl	4cd0 <__aeabi_ddiv>
    3ba0:	e44a      	b.n	3438 <__ieee754_pow+0x110>
    3ba2:	4b6d      	ldr	r3, [pc, #436]	; (3d58 <__ieee754_pow+0xa30>)
    3ba4:	429c      	cmp	r4, r3
    3ba6:	dc00      	bgt.n	3baa <__ieee754_pow+0x882>
    3ba8:	e4aa      	b.n	3500 <__ieee754_pow+0x1d8>
    3baa:	4b65      	ldr	r3, [pc, #404]	; (3d40 <__ieee754_pow+0xa18>)
    3bac:	429c      	cmp	r4, r3
    3bae:	dd01      	ble.n	3bb4 <__ieee754_pow+0x88c>
    3bb0:	f7ff fc2c 	bl	340c <__ieee754_pow+0xe4>
    3bb4:	2200      	movs	r2, #0
    3bb6:	4b62      	ldr	r3, [pc, #392]	; (3d40 <__ieee754_pow+0xa18>)
    3bb8:	f001 ff28 	bl	5a0c <__aeabi_dsub>
    3bbc:	22c0      	movs	r2, #192	; 0xc0
    3bbe:	4b67      	ldr	r3, [pc, #412]	; (3d5c <__ieee754_pow+0xa34>)
    3bc0:	05d2      	lsls	r2, r2, #23
    3bc2:	0004      	movs	r4, r0
    3bc4:	000d      	movs	r5, r1
    3bc6:	f001 fca7 	bl	5518 <__aeabi_dmul>
    3bca:	4a65      	ldr	r2, [pc, #404]	; (3d60 <__ieee754_pow+0xa38>)
    3bcc:	0006      	movs	r6, r0
    3bce:	000f      	movs	r7, r1
    3bd0:	4b64      	ldr	r3, [pc, #400]	; (3d64 <__ieee754_pow+0xa3c>)
    3bd2:	0020      	movs	r0, r4
    3bd4:	0029      	movs	r1, r5
    3bd6:	f001 fc9f 	bl	5518 <__aeabi_dmul>
    3bda:	2200      	movs	r2, #0
    3bdc:	9002      	str	r0, [sp, #8]
    3bde:	9103      	str	r1, [sp, #12]
    3be0:	4b61      	ldr	r3, [pc, #388]	; (3d68 <__ieee754_pow+0xa40>)
    3be2:	0020      	movs	r0, r4
    3be4:	0029      	movs	r1, r5
    3be6:	f001 fc97 	bl	5518 <__aeabi_dmul>
    3bea:	0002      	movs	r2, r0
    3bec:	000b      	movs	r3, r1
    3bee:	485f      	ldr	r0, [pc, #380]	; (3d6c <__ieee754_pow+0xa44>)
    3bf0:	495f      	ldr	r1, [pc, #380]	; (3d70 <__ieee754_pow+0xa48>)
    3bf2:	f001 ff0b 	bl	5a0c <__aeabi_dsub>
    3bf6:	0022      	movs	r2, r4
    3bf8:	002b      	movs	r3, r5
    3bfa:	f001 fc8d 	bl	5518 <__aeabi_dmul>
    3bfe:	0002      	movs	r2, r0
    3c00:	000b      	movs	r3, r1
    3c02:	2000      	movs	r0, #0
    3c04:	495b      	ldr	r1, [pc, #364]	; (3d74 <__ieee754_pow+0xa4c>)
    3c06:	f001 ff01 	bl	5a0c <__aeabi_dsub>
    3c0a:	0022      	movs	r2, r4
    3c0c:	9004      	str	r0, [sp, #16]
    3c0e:	9105      	str	r1, [sp, #20]
    3c10:	002b      	movs	r3, r5
    3c12:	0020      	movs	r0, r4
    3c14:	0029      	movs	r1, r5
    3c16:	f001 fc7f 	bl	5518 <__aeabi_dmul>
    3c1a:	0002      	movs	r2, r0
    3c1c:	000b      	movs	r3, r1
    3c1e:	9804      	ldr	r0, [sp, #16]
    3c20:	9905      	ldr	r1, [sp, #20]
    3c22:	f001 fc79 	bl	5518 <__aeabi_dmul>
    3c26:	4a54      	ldr	r2, [pc, #336]	; (3d78 <__ieee754_pow+0xa50>)
    3c28:	4b4c      	ldr	r3, [pc, #304]	; (3d5c <__ieee754_pow+0xa34>)
    3c2a:	f001 fc75 	bl	5518 <__aeabi_dmul>
    3c2e:	0002      	movs	r2, r0
    3c30:	000b      	movs	r3, r1
    3c32:	9802      	ldr	r0, [sp, #8]
    3c34:	9903      	ldr	r1, [sp, #12]
    3c36:	f001 fee9 	bl	5a0c <__aeabi_dsub>
    3c3a:	0002      	movs	r2, r0
    3c3c:	000b      	movs	r3, r1
    3c3e:	0004      	movs	r4, r0
    3c40:	000d      	movs	r5, r1
    3c42:	0030      	movs	r0, r6
    3c44:	0039      	movs	r1, r7
    3c46:	f000 fd17 	bl	4678 <__aeabi_dadd>
    3c4a:	2200      	movs	r2, #0
    3c4c:	0010      	movs	r0, r2
    3c4e:	003b      	movs	r3, r7
    3c50:	0032      	movs	r2, r6
    3c52:	9002      	str	r0, [sp, #8]
    3c54:	9103      	str	r1, [sp, #12]
    3c56:	f001 fed9 	bl	5a0c <__aeabi_dsub>
    3c5a:	0002      	movs	r2, r0
    3c5c:	000b      	movs	r3, r1
    3c5e:	0020      	movs	r0, r4
    3c60:	0029      	movs	r1, r5
    3c62:	f001 fed3 	bl	5a0c <__aeabi_dsub>
    3c66:	9004      	str	r0, [sp, #16]
    3c68:	9105      	str	r1, [sp, #20]
    3c6a:	e5e1      	b.n	3830 <__ieee754_pow+0x508>
    3c6c:	4a43      	ldr	r2, [pc, #268]	; (3d7c <__ieee754_pow+0xa54>)
    3c6e:	4b44      	ldr	r3, [pc, #272]	; (3d80 <__ieee754_pow+0xa58>)
    3c70:	9806      	ldr	r0, [sp, #24]
    3c72:	9907      	ldr	r1, [sp, #28]
    3c74:	f001 fc50 	bl	5518 <__aeabi_dmul>
    3c78:	4a40      	ldr	r2, [pc, #256]	; (3d7c <__ieee754_pow+0xa54>)
    3c7a:	4b41      	ldr	r3, [pc, #260]	; (3d80 <__ieee754_pow+0xa58>)
    3c7c:	f001 fc4c 	bl	5518 <__aeabi_dmul>
    3c80:	0006      	movs	r6, r0
    3c82:	f7ff fb9a 	bl	33ba <__ieee754_pow+0x92>
    3c86:	2a00      	cmp	r2, #0
    3c88:	d001      	beq.n	3c8e <__ieee754_pow+0x966>
    3c8a:	f7ff fba5 	bl	33d8 <__ieee754_pow+0xb0>
    3c8e:	3214      	adds	r2, #20
    3c90:	1ad3      	subs	r3, r2, r3
    3c92:	003a      	movs	r2, r7
    3c94:	411a      	asrs	r2, r3
    3c96:	0011      	movs	r1, r2
    3c98:	4099      	lsls	r1, r3
    3c9a:	428f      	cmp	r7, r1
    3c9c:	d001      	beq.n	3ca2 <__ieee754_pow+0x97a>
    3c9e:	f7ff fb6f 	bl	3380 <__ieee754_pow+0x58>
    3ca2:	2301      	movs	r3, #1
    3ca4:	4013      	ands	r3, r2
    3ca6:	2202      	movs	r2, #2
    3ca8:	1ad3      	subs	r3, r2, r3
    3caa:	469b      	mov	fp, r3
    3cac:	f7ff fb68 	bl	3380 <__ieee754_pow+0x58>
    3cb0:	4b30      	ldr	r3, [pc, #192]	; (3d74 <__ieee754_pow+0xa4c>)
    3cb2:	429e      	cmp	r6, r3
    3cb4:	dd00      	ble.n	3cb8 <__ieee754_pow+0x990>
    3cb6:	e64e      	b.n	3956 <__ieee754_pow+0x62e>
    3cb8:	2300      	movs	r3, #0
    3cba:	4699      	mov	r9, r3
    3cbc:	4698      	mov	r8, r3
    3cbe:	e67a      	b.n	39b6 <__ieee754_pow+0x68e>
    3cc0:	0002      	movs	r2, r0
    3cc2:	000b      	movs	r3, r1
    3cc4:	f7ff fc14 	bl	34f0 <__ieee754_pow+0x1c8>
    3cc8:	2380      	movs	r3, #128	; 0x80
    3cca:	4c2e      	ldr	r4, [pc, #184]	; (3d84 <__ieee754_pow+0xa5c>)
    3ccc:	05db      	lsls	r3, r3, #23
    3cce:	9308      	str	r3, [sp, #32]
    3cd0:	9409      	str	r4, [sp, #36]	; 0x24
    3cd2:	4b2d      	ldr	r3, [pc, #180]	; (3d88 <__ieee754_pow+0xa60>)
    3cd4:	4c2d      	ldr	r4, [pc, #180]	; (3d8c <__ieee754_pow+0xa64>)
    3cd6:	2200      	movs	r2, #0
    3cd8:	930c      	str	r3, [sp, #48]	; 0x30
    3cda:	940d      	str	r4, [sp, #52]	; 0x34
    3cdc:	2480      	movs	r4, #128	; 0x80
    3cde:	4b2c      	ldr	r3, [pc, #176]	; (3d90 <__ieee754_pow+0xa68>)
    3ce0:	02e4      	lsls	r4, r4, #11
    3ce2:	9206      	str	r2, [sp, #24]
    3ce4:	9307      	str	r3, [sp, #28]
    3ce6:	e456      	b.n	3596 <__ieee754_pow+0x26e>
    3ce8:	4643      	mov	r3, r8
    3cea:	425b      	negs	r3, r3
    3cec:	4698      	mov	r8, r3
    3cee:	e651      	b.n	3994 <__ieee754_pow+0x66c>
    3cf0:	4642      	mov	r2, r8
    3cf2:	f000 f9fd 	bl	40f0 <scalbn>
    3cf6:	e707      	b.n	3b08 <__ieee754_pow+0x7e0>
    3cf8:	fffffc02 	.word	0xfffffc02
    3cfc:	fffffc01 	.word	0xfffffc01
    3d00:	000fffff 	.word	0x000fffff
    3d04:	3fe62e43 	.word	0x3fe62e43
    3d08:	fefa39ef 	.word	0xfefa39ef
    3d0c:	3fe62e42 	.word	0x3fe62e42
    3d10:	0ca86c39 	.word	0x0ca86c39
    3d14:	be205c61 	.word	0xbe205c61
    3d18:	72bea4d0 	.word	0x72bea4d0
    3d1c:	3e663769 	.word	0x3e663769
    3d20:	c5d26bf1 	.word	0xc5d26bf1
    3d24:	3ebbbd41 	.word	0x3ebbbd41
    3d28:	af25de2c 	.word	0xaf25de2c
    3d2c:	3f11566a 	.word	0x3f11566a
    3d30:	16bebd93 	.word	0x16bebd93
    3d34:	3f66c16c 	.word	0x3f66c16c
    3d38:	5555553e 	.word	0x5555553e
    3d3c:	3fc55555 	.word	0x3fc55555
    3d40:	3ff00000 	.word	0x3ff00000
    3d44:	4090cbff 	.word	0x4090cbff
    3d48:	3f6f3400 	.word	0x3f6f3400
    3d4c:	c2f8f359 	.word	0xc2f8f359
    3d50:	01a56e1f 	.word	0x01a56e1f
    3d54:	bff00000 	.word	0xbff00000
    3d58:	3feffffe 	.word	0x3feffffe
    3d5c:	3ff71547 	.word	0x3ff71547
    3d60:	f85ddf44 	.word	0xf85ddf44
    3d64:	3e54ae0b 	.word	0x3e54ae0b
    3d68:	3fd00000 	.word	0x3fd00000
    3d6c:	55555555 	.word	0x55555555
    3d70:	3fd55555 	.word	0x3fd55555
    3d74:	3fe00000 	.word	0x3fe00000
    3d78:	652b82fe 	.word	0x652b82fe
    3d7c:	8800759c 	.word	0x8800759c
    3d80:	7e37e43c 	.word	0x7e37e43c
    3d84:	3fe2b803 	.word	0x3fe2b803
    3d88:	43cfd006 	.word	0x43cfd006
    3d8c:	3e4cfdeb 	.word	0x3e4cfdeb
    3d90:	3ff80000 	.word	0x3ff80000

00003d94 <__ieee754_sqrt>:
    3d94:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d96:	4656      	mov	r6, sl
    3d98:	464d      	mov	r5, r9
    3d9a:	4644      	mov	r4, r8
    3d9c:	465f      	mov	r7, fp
    3d9e:	4b75      	ldr	r3, [pc, #468]	; (3f74 <__ieee754_sqrt+0x1e0>)
    3da0:	b4f0      	push	{r4, r5, r6, r7}
    3da2:	000a      	movs	r2, r1
    3da4:	000d      	movs	r5, r1
    3da6:	0019      	movs	r1, r3
    3da8:	b083      	sub	sp, #12
    3daa:	0006      	movs	r6, r0
    3dac:	0004      	movs	r4, r0
    3dae:	4029      	ands	r1, r5
    3db0:	4299      	cmp	r1, r3
    3db2:	d100      	bne.n	3db6 <__ieee754_sqrt+0x22>
    3db4:	e0ba      	b.n	3f2c <__ieee754_sqrt+0x198>
    3db6:	2d00      	cmp	r5, #0
    3db8:	dc00      	bgt.n	3dbc <__ieee754_sqrt+0x28>
    3dba:	e094      	b.n	3ee6 <__ieee754_sqrt+0x152>
    3dbc:	152d      	asrs	r5, r5, #20
    3dbe:	d100      	bne.n	3dc2 <__ieee754_sqrt+0x2e>
    3dc0:	e0a3      	b.n	3f0a <__ieee754_sqrt+0x176>
    3dc2:	4b6d      	ldr	r3, [pc, #436]	; (3f78 <__ieee754_sqrt+0x1e4>)
    3dc4:	0312      	lsls	r2, r2, #12
    3dc6:	469c      	mov	ip, r3
    3dc8:	2380      	movs	r3, #128	; 0x80
    3dca:	0b12      	lsrs	r2, r2, #12
    3dcc:	035b      	lsls	r3, r3, #13
    3dce:	4465      	add	r5, ip
    3dd0:	431a      	orrs	r2, r3
    3dd2:	07eb      	lsls	r3, r5, #31
    3dd4:	d500      	bpl.n	3dd8 <__ieee754_sqrt+0x44>
    3dd6:	e081      	b.n	3edc <__ieee754_sqrt+0x148>
    3dd8:	106b      	asrs	r3, r5, #1
    3dda:	4698      	mov	r8, r3
    3ddc:	0fe3      	lsrs	r3, r4, #31
    3dde:	189b      	adds	r3, r3, r2
    3de0:	189b      	adds	r3, r3, r2
    3de2:	2280      	movs	r2, #128	; 0x80
    3de4:	2116      	movs	r1, #22
    3de6:	2600      	movs	r6, #0
    3de8:	2700      	movs	r7, #0
    3dea:	0064      	lsls	r4, r4, #1
    3dec:	0392      	lsls	r2, r2, #14
    3dee:	18b8      	adds	r0, r7, r2
    3df0:	4298      	cmp	r0, r3
    3df2:	dc02      	bgt.n	3dfa <__ieee754_sqrt+0x66>
    3df4:	1887      	adds	r7, r0, r2
    3df6:	1a1b      	subs	r3, r3, r0
    3df8:	18b6      	adds	r6, r6, r2
    3dfa:	0fe0      	lsrs	r0, r4, #31
    3dfc:	005b      	lsls	r3, r3, #1
    3dfe:	3901      	subs	r1, #1
    3e00:	181b      	adds	r3, r3, r0
    3e02:	0064      	lsls	r4, r4, #1
    3e04:	0852      	lsrs	r2, r2, #1
    3e06:	2900      	cmp	r1, #0
    3e08:	d1f1      	bne.n	3dee <__ieee754_sqrt+0x5a>
    3e0a:	2200      	movs	r2, #0
    3e0c:	9201      	str	r2, [sp, #4]
    3e0e:	4694      	mov	ip, r2
    3e10:	2280      	movs	r2, #128	; 0x80
    3e12:	0612      	lsls	r2, r2, #24
    3e14:	2020      	movs	r0, #32
    3e16:	4691      	mov	r9, r2
    3e18:	e009      	b.n	3e2e <__ieee754_sqrt+0x9a>
    3e1a:	429f      	cmp	r7, r3
    3e1c:	d041      	beq.n	3ea2 <__ieee754_sqrt+0x10e>
    3e1e:	0fe1      	lsrs	r1, r4, #31
    3e20:	18c9      	adds	r1, r1, r3
    3e22:	3801      	subs	r0, #1
    3e24:	18cb      	adds	r3, r1, r3
    3e26:	0064      	lsls	r4, r4, #1
    3e28:	0852      	lsrs	r2, r2, #1
    3e2a:	2800      	cmp	r0, #0
    3e2c:	d01e      	beq.n	3e6c <__ieee754_sqrt+0xd8>
    3e2e:	4661      	mov	r1, ip
    3e30:	1851      	adds	r1, r2, r1
    3e32:	429f      	cmp	r7, r3
    3e34:	daf1      	bge.n	3e1a <__ieee754_sqrt+0x86>
    3e36:	188d      	adds	r5, r1, r2
    3e38:	46ac      	mov	ip, r5
    3e3a:	0fcd      	lsrs	r5, r1, #31
    3e3c:	07ed      	lsls	r5, r5, #31
    3e3e:	46ba      	mov	sl, r7
    3e40:	454d      	cmp	r5, r9
    3e42:	d039      	beq.n	3eb8 <__ieee754_sqrt+0x124>
    3e44:	1bdb      	subs	r3, r3, r7
    3e46:	428c      	cmp	r4, r1
    3e48:	41bf      	sbcs	r7, r7
    3e4a:	427f      	negs	r7, r7
    3e4c:	1bdb      	subs	r3, r3, r7
    3e4e:	1a64      	subs	r4, r4, r1
    3e50:	9901      	ldr	r1, [sp, #4]
    3e52:	3801      	subs	r0, #1
    3e54:	468b      	mov	fp, r1
    3e56:	4493      	add	fp, r2
    3e58:	4659      	mov	r1, fp
    3e5a:	9101      	str	r1, [sp, #4]
    3e5c:	0fe1      	lsrs	r1, r4, #31
    3e5e:	18c9      	adds	r1, r1, r3
    3e60:	4657      	mov	r7, sl
    3e62:	18cb      	adds	r3, r1, r3
    3e64:	0064      	lsls	r4, r4, #1
    3e66:	0852      	lsrs	r2, r2, #1
    3e68:	2800      	cmp	r0, #0
    3e6a:	d1e0      	bne.n	3e2e <__ieee754_sqrt+0x9a>
    3e6c:	4323      	orrs	r3, r4
    3e6e:	d12b      	bne.n	3ec8 <__ieee754_sqrt+0x134>
    3e70:	9b01      	ldr	r3, [sp, #4]
    3e72:	085b      	lsrs	r3, r3, #1
    3e74:	4941      	ldr	r1, [pc, #260]	; (3f7c <__ieee754_sqrt+0x1e8>)
    3e76:	1072      	asrs	r2, r6, #1
    3e78:	468c      	mov	ip, r1
    3e7a:	4462      	add	r2, ip
    3e7c:	07f1      	lsls	r1, r6, #31
    3e7e:	d502      	bpl.n	3e86 <__ieee754_sqrt+0xf2>
    3e80:	2180      	movs	r1, #128	; 0x80
    3e82:	0609      	lsls	r1, r1, #24
    3e84:	430b      	orrs	r3, r1
    3e86:	4641      	mov	r1, r8
    3e88:	0509      	lsls	r1, r1, #20
    3e8a:	188d      	adds	r5, r1, r2
    3e8c:	001e      	movs	r6, r3
    3e8e:	002f      	movs	r7, r5
    3e90:	0030      	movs	r0, r6
    3e92:	0039      	movs	r1, r7
    3e94:	b003      	add	sp, #12
    3e96:	bc3c      	pop	{r2, r3, r4, r5}
    3e98:	4690      	mov	r8, r2
    3e9a:	4699      	mov	r9, r3
    3e9c:	46a2      	mov	sl, r4
    3e9e:	46ab      	mov	fp, r5
    3ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ea2:	42a1      	cmp	r1, r4
    3ea4:	d80e      	bhi.n	3ec4 <__ieee754_sqrt+0x130>
    3ea6:	188d      	adds	r5, r1, r2
    3ea8:	46ac      	mov	ip, r5
    3eaa:	0fcd      	lsrs	r5, r1, #31
    3eac:	07ed      	lsls	r5, r5, #31
    3eae:	454d      	cmp	r5, r9
    3eb0:	d048      	beq.n	3f44 <__ieee754_sqrt+0x1b0>
    3eb2:	469a      	mov	sl, r3
    3eb4:	2300      	movs	r3, #0
    3eb6:	e7ca      	b.n	3e4e <__ieee754_sqrt+0xba>
    3eb8:	4665      	mov	r5, ip
    3eba:	2d00      	cmp	r5, #0
    3ebc:	dbc2      	blt.n	3e44 <__ieee754_sqrt+0xb0>
    3ebe:	1c7d      	adds	r5, r7, #1
    3ec0:	46aa      	mov	sl, r5
    3ec2:	e7bf      	b.n	3e44 <__ieee754_sqrt+0xb0>
    3ec4:	003b      	movs	r3, r7
    3ec6:	e7aa      	b.n	3e1e <__ieee754_sqrt+0x8a>
    3ec8:	9b01      	ldr	r3, [sp, #4]
    3eca:	3301      	adds	r3, #1
    3ecc:	d03e      	beq.n	3f4c <__ieee754_sqrt+0x1b8>
    3ece:	9a01      	ldr	r2, [sp, #4]
    3ed0:	2301      	movs	r3, #1
    3ed2:	4694      	mov	ip, r2
    3ed4:	4013      	ands	r3, r2
    3ed6:	4463      	add	r3, ip
    3ed8:	085b      	lsrs	r3, r3, #1
    3eda:	e7cb      	b.n	3e74 <__ieee754_sqrt+0xe0>
    3edc:	0fe3      	lsrs	r3, r4, #31
    3ede:	0052      	lsls	r2, r2, #1
    3ee0:	189a      	adds	r2, r3, r2
    3ee2:	0064      	lsls	r4, r4, #1
    3ee4:	e778      	b.n	3dd8 <__ieee754_sqrt+0x44>
    3ee6:	006b      	lsls	r3, r5, #1
    3ee8:	085b      	lsrs	r3, r3, #1
    3eea:	4303      	orrs	r3, r0
    3eec:	002f      	movs	r7, r5
    3eee:	2b00      	cmp	r3, #0
    3ef0:	d0ce      	beq.n	3e90 <__ieee754_sqrt+0xfc>
    3ef2:	2500      	movs	r5, #0
    3ef4:	2a00      	cmp	r2, #0
    3ef6:	d131      	bne.n	3f5c <__ieee754_sqrt+0x1c8>
    3ef8:	0ae2      	lsrs	r2, r4, #11
    3efa:	3d15      	subs	r5, #21
    3efc:	0564      	lsls	r4, r4, #21
    3efe:	2a00      	cmp	r2, #0
    3f00:	d0fa      	beq.n	3ef8 <__ieee754_sqrt+0x164>
    3f02:	2380      	movs	r3, #128	; 0x80
    3f04:	035b      	lsls	r3, r3, #13
    3f06:	421a      	tst	r2, r3
    3f08:	d123      	bne.n	3f52 <__ieee754_sqrt+0x1be>
    3f0a:	2080      	movs	r0, #128	; 0x80
    3f0c:	2300      	movs	r3, #0
    3f0e:	0340      	lsls	r0, r0, #13
    3f10:	e000      	b.n	3f14 <__ieee754_sqrt+0x180>
    3f12:	000b      	movs	r3, r1
    3f14:	0052      	lsls	r2, r2, #1
    3f16:	1c59      	adds	r1, r3, #1
    3f18:	4202      	tst	r2, r0
    3f1a:	d0fa      	beq.n	3f12 <__ieee754_sqrt+0x17e>
    3f1c:	2020      	movs	r0, #32
    3f1e:	1a40      	subs	r0, r0, r1
    3f20:	1aed      	subs	r5, r5, r3
    3f22:	0023      	movs	r3, r4
    3f24:	40c3      	lsrs	r3, r0
    3f26:	408c      	lsls	r4, r1
    3f28:	431a      	orrs	r2, r3
    3f2a:	e74a      	b.n	3dc2 <__ieee754_sqrt+0x2e>
    3f2c:	0002      	movs	r2, r0
    3f2e:	002b      	movs	r3, r5
    3f30:	0029      	movs	r1, r5
    3f32:	f001 faf1 	bl	5518 <__aeabi_dmul>
    3f36:	0032      	movs	r2, r6
    3f38:	002b      	movs	r3, r5
    3f3a:	f000 fb9d 	bl	4678 <__aeabi_dadd>
    3f3e:	0006      	movs	r6, r0
    3f40:	000f      	movs	r7, r1
    3f42:	e7a5      	b.n	3e90 <__ieee754_sqrt+0xfc>
    3f44:	4665      	mov	r5, ip
    3f46:	2d00      	cmp	r5, #0
    3f48:	dab9      	bge.n	3ebe <__ieee754_sqrt+0x12a>
    3f4a:	e7b2      	b.n	3eb2 <__ieee754_sqrt+0x11e>
    3f4c:	3601      	adds	r6, #1
    3f4e:	2300      	movs	r3, #0
    3f50:	e790      	b.n	3e74 <__ieee754_sqrt+0xe0>
    3f52:	2301      	movs	r3, #1
    3f54:	2020      	movs	r0, #32
    3f56:	425b      	negs	r3, r3
    3f58:	2100      	movs	r1, #0
    3f5a:	e7e1      	b.n	3f20 <__ieee754_sqrt+0x18c>
    3f5c:	003b      	movs	r3, r7
    3f5e:	0002      	movs	r2, r0
    3f60:	0039      	movs	r1, r7
    3f62:	f001 fd53 	bl	5a0c <__aeabi_dsub>
    3f66:	0002      	movs	r2, r0
    3f68:	000b      	movs	r3, r1
    3f6a:	f000 feb1 	bl	4cd0 <__aeabi_ddiv>
    3f6e:	0006      	movs	r6, r0
    3f70:	000f      	movs	r7, r1
    3f72:	e78d      	b.n	3e90 <__ieee754_sqrt+0xfc>
    3f74:	7ff00000 	.word	0x7ff00000
    3f78:	fffffc01 	.word	0xfffffc01
    3f7c:	3fe00000 	.word	0x3fe00000

00003f80 <fabs>:
    3f80:	0049      	lsls	r1, r1, #1
    3f82:	084b      	lsrs	r3, r1, #1
    3f84:	0019      	movs	r1, r3
    3f86:	4770      	bx	lr

00003f88 <finite>:
    3f88:	4b03      	ldr	r3, [pc, #12]	; (3f98 <finite+0x10>)
    3f8a:	0048      	lsls	r0, r1, #1
    3f8c:	469c      	mov	ip, r3
    3f8e:	0840      	lsrs	r0, r0, #1
    3f90:	4460      	add	r0, ip
    3f92:	0fc0      	lsrs	r0, r0, #31
    3f94:	4770      	bx	lr
    3f96:	46c0      	nop			; (mov r8, r8)
    3f98:	80100000 	.word	0x80100000

00003f9c <matherr>:
    3f9c:	2000      	movs	r0, #0
    3f9e:	4770      	bx	lr

00003fa0 <nan>:
    3fa0:	2000      	movs	r0, #0
    3fa2:	4901      	ldr	r1, [pc, #4]	; (3fa8 <nan+0x8>)
    3fa4:	4770      	bx	lr
    3fa6:	46c0      	nop			; (mov r8, r8)
    3fa8:	7ff80000 	.word	0x7ff80000

00003fac <rint>:
    3fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fae:	4647      	mov	r7, r8
    3fb0:	b480      	push	{r7}
    3fb2:	0fcb      	lsrs	r3, r1, #31
    3fb4:	4698      	mov	r8, r3
    3fb6:	4c4a      	ldr	r4, [pc, #296]	; (40e0 <rint+0x134>)
    3fb8:	004b      	lsls	r3, r1, #1
    3fba:	0d5b      	lsrs	r3, r3, #21
    3fbc:	191e      	adds	r6, r3, r4
    3fbe:	b082      	sub	sp, #8
    3fc0:	0007      	movs	r7, r0
    3fc2:	000a      	movs	r2, r1
    3fc4:	2e13      	cmp	r6, #19
    3fc6:	dc35      	bgt.n	4034 <rint+0x88>
    3fc8:	2e00      	cmp	r6, #0
    3fca:	db57      	blt.n	407c <rint+0xd0>
    3fcc:	4b45      	ldr	r3, [pc, #276]	; (40e4 <rint+0x138>)
    3fce:	0004      	movs	r4, r0
    3fd0:	4133      	asrs	r3, r6
    3fd2:	001f      	movs	r7, r3
    3fd4:	400f      	ands	r7, r1
    3fd6:	4307      	orrs	r7, r0
    3fd8:	000d      	movs	r5, r1
    3fda:	2f00      	cmp	r7, #0
    3fdc:	d024      	beq.n	4028 <rint+0x7c>
    3fde:	085b      	lsrs	r3, r3, #1
    3fe0:	001c      	movs	r4, r3
    3fe2:	400c      	ands	r4, r1
    3fe4:	4320      	orrs	r0, r4
    3fe6:	2700      	movs	r7, #0
    3fe8:	2800      	cmp	r0, #0
    3fea:	d007      	beq.n	3ffc <rint+0x50>
    3fec:	2e13      	cmp	r6, #19
    3fee:	d100      	bne.n	3ff2 <rint+0x46>
    3ff0:	e072      	b.n	40d8 <rint+0x12c>
    3ff2:	2280      	movs	r2, #128	; 0x80
    3ff4:	02d2      	lsls	r2, r2, #11
    3ff6:	4132      	asrs	r2, r6
    3ff8:	4399      	bics	r1, r3
    3ffa:	430a      	orrs	r2, r1
    3ffc:	4643      	mov	r3, r8
    3ffe:	00de      	lsls	r6, r3, #3
    4000:	4b39      	ldr	r3, [pc, #228]	; (40e8 <rint+0x13c>)
    4002:	0011      	movs	r1, r2
    4004:	199e      	adds	r6, r3, r6
    4006:	6834      	ldr	r4, [r6, #0]
    4008:	6875      	ldr	r5, [r6, #4]
    400a:	0038      	movs	r0, r7
    400c:	0022      	movs	r2, r4
    400e:	002b      	movs	r3, r5
    4010:	f000 fb32 	bl	4678 <__aeabi_dadd>
    4014:	9000      	str	r0, [sp, #0]
    4016:	9101      	str	r1, [sp, #4]
    4018:	9800      	ldr	r0, [sp, #0]
    401a:	9901      	ldr	r1, [sp, #4]
    401c:	0022      	movs	r2, r4
    401e:	002b      	movs	r3, r5
    4020:	f001 fcf4 	bl	5a0c <__aeabi_dsub>
    4024:	0004      	movs	r4, r0
    4026:	000d      	movs	r5, r1
    4028:	0020      	movs	r0, r4
    402a:	0029      	movs	r1, r5
    402c:	b002      	add	sp, #8
    402e:	bc04      	pop	{r2}
    4030:	4690      	mov	r8, r2
    4032:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4034:	2e33      	cmp	r6, #51	; 0x33
    4036:	dd0c      	ble.n	4052 <rint+0xa6>
    4038:	2380      	movs	r3, #128	; 0x80
    403a:	0004      	movs	r4, r0
    403c:	000d      	movs	r5, r1
    403e:	00db      	lsls	r3, r3, #3
    4040:	429e      	cmp	r6, r3
    4042:	d1f1      	bne.n	4028 <rint+0x7c>
    4044:	0002      	movs	r2, r0
    4046:	000b      	movs	r3, r1
    4048:	f000 fb16 	bl	4678 <__aeabi_dadd>
    404c:	0004      	movs	r4, r0
    404e:	000d      	movs	r5, r1
    4050:	e7ea      	b.n	4028 <rint+0x7c>
    4052:	4c26      	ldr	r4, [pc, #152]	; (40ec <rint+0x140>)
    4054:	000d      	movs	r5, r1
    4056:	46a4      	mov	ip, r4
    4058:	2401      	movs	r4, #1
    405a:	4463      	add	r3, ip
    405c:	4264      	negs	r4, r4
    405e:	40dc      	lsrs	r4, r3
    4060:	46a4      	mov	ip, r4
    4062:	4661      	mov	r1, ip
    4064:	0004      	movs	r4, r0
    4066:	4201      	tst	r1, r0
    4068:	d0de      	beq.n	4028 <rint+0x7c>
    406a:	0849      	lsrs	r1, r1, #1
    406c:	4201      	tst	r1, r0
    406e:	d0c5      	beq.n	3ffc <rint+0x50>
    4070:	2780      	movs	r7, #128	; 0x80
    4072:	05ff      	lsls	r7, r7, #23
    4074:	411f      	asrs	r7, r3
    4076:	4388      	bics	r0, r1
    4078:	4307      	orrs	r7, r0
    407a:	e7bf      	b.n	3ffc <rint+0x50>
    407c:	004b      	lsls	r3, r1, #1
    407e:	085b      	lsrs	r3, r3, #1
    4080:	4303      	orrs	r3, r0
    4082:	0004      	movs	r4, r0
    4084:	000d      	movs	r5, r1
    4086:	2b00      	cmp	r3, #0
    4088:	d0ce      	beq.n	4028 <rint+0x7c>
    408a:	030b      	lsls	r3, r1, #12
    408c:	0b1b      	lsrs	r3, r3, #12
    408e:	4303      	orrs	r3, r0
    4090:	425a      	negs	r2, r3
    4092:	4313      	orrs	r3, r2
    4094:	2280      	movs	r2, #128	; 0x80
    4096:	0b1b      	lsrs	r3, r3, #12
    4098:	0312      	lsls	r2, r2, #12
    409a:	4013      	ands	r3, r2
    409c:	0c4a      	lsrs	r2, r1, #17
    409e:	0452      	lsls	r2, r2, #17
    40a0:	4313      	orrs	r3, r2
    40a2:	0019      	movs	r1, r3
    40a4:	4643      	mov	r3, r8
    40a6:	4a10      	ldr	r2, [pc, #64]	; (40e8 <rint+0x13c>)
    40a8:	00db      	lsls	r3, r3, #3
    40aa:	18d3      	adds	r3, r2, r3
    40ac:	681c      	ldr	r4, [r3, #0]
    40ae:	685d      	ldr	r5, [r3, #4]
    40b0:	0022      	movs	r2, r4
    40b2:	002b      	movs	r3, r5
    40b4:	f000 fae0 	bl	4678 <__aeabi_dadd>
    40b8:	9000      	str	r0, [sp, #0]
    40ba:	9101      	str	r1, [sp, #4]
    40bc:	9800      	ldr	r0, [sp, #0]
    40be:	9901      	ldr	r1, [sp, #4]
    40c0:	0022      	movs	r2, r4
    40c2:	002b      	movs	r3, r5
    40c4:	f001 fca2 	bl	5a0c <__aeabi_dsub>
    40c8:	4642      	mov	r2, r8
    40ca:	004b      	lsls	r3, r1, #1
    40cc:	085b      	lsrs	r3, r3, #1
    40ce:	07d6      	lsls	r6, r2, #31
    40d0:	4333      	orrs	r3, r6
    40d2:	0004      	movs	r4, r0
    40d4:	001d      	movs	r5, r3
    40d6:	e7a7      	b.n	4028 <rint+0x7c>
    40d8:	2780      	movs	r7, #128	; 0x80
    40da:	063f      	lsls	r7, r7, #24
    40dc:	e789      	b.n	3ff2 <rint+0x46>
    40de:	46c0      	nop			; (mov r8, r8)
    40e0:	fffffc01 	.word	0xfffffc01
    40e4:	000fffff 	.word	0x000fffff
    40e8:	000064d0 	.word	0x000064d0
    40ec:	fffffbed 	.word	0xfffffbed

000040f0 <scalbn>:
    40f0:	004b      	lsls	r3, r1, #1
    40f2:	b570      	push	{r4, r5, r6, lr}
    40f4:	0d5b      	lsrs	r3, r3, #21
    40f6:	0014      	movs	r4, r2
    40f8:	000a      	movs	r2, r1
    40fa:	2b00      	cmp	r3, #0
    40fc:	d11a      	bne.n	4134 <scalbn+0x44>
    40fe:	004b      	lsls	r3, r1, #1
    4100:	085b      	lsrs	r3, r3, #1
    4102:	4303      	orrs	r3, r0
    4104:	d015      	beq.n	4132 <scalbn+0x42>
    4106:	2200      	movs	r2, #0
    4108:	4b22      	ldr	r3, [pc, #136]	; (4194 <scalbn+0xa4>)
    410a:	f001 fa05 	bl	5518 <__aeabi_dmul>
    410e:	4b22      	ldr	r3, [pc, #136]	; (4198 <scalbn+0xa8>)
    4110:	000a      	movs	r2, r1
    4112:	429c      	cmp	r4, r3
    4114:	db22      	blt.n	415c <scalbn+0x6c>
    4116:	004b      	lsls	r3, r1, #1
    4118:	0d5b      	lsrs	r3, r3, #21
    411a:	3b36      	subs	r3, #54	; 0x36
    411c:	4d1f      	ldr	r5, [pc, #124]	; (419c <scalbn+0xac>)
    411e:	18e3      	adds	r3, r4, r3
    4120:	42ab      	cmp	r3, r5
    4122:	dc20      	bgt.n	4166 <scalbn+0x76>
    4124:	2b00      	cmp	r3, #0
    4126:	dd0d      	ble.n	4144 <scalbn+0x54>
    4128:	4c1d      	ldr	r4, [pc, #116]	; (41a0 <scalbn+0xb0>)
    412a:	051b      	lsls	r3, r3, #20
    412c:	4022      	ands	r2, r4
    412e:	431a      	orrs	r2, r3
    4130:	0011      	movs	r1, r2
    4132:	bd70      	pop	{r4, r5, r6, pc}
    4134:	4d1b      	ldr	r5, [pc, #108]	; (41a4 <scalbn+0xb4>)
    4136:	42ab      	cmp	r3, r5
    4138:	d1f0      	bne.n	411c <scalbn+0x2c>
    413a:	0002      	movs	r2, r0
    413c:	000b      	movs	r3, r1
    413e:	f000 fa9b 	bl	4678 <__aeabi_dadd>
    4142:	e7f6      	b.n	4132 <scalbn+0x42>
    4144:	001d      	movs	r5, r3
    4146:	3535      	adds	r5, #53	; 0x35
    4148:	da18      	bge.n	417c <scalbn+0x8c>
    414a:	4b17      	ldr	r3, [pc, #92]	; (41a8 <scalbn+0xb8>)
    414c:	0002      	movs	r2, r0
    414e:	429c      	cmp	r4, r3
    4150:	dc0a      	bgt.n	4168 <scalbn+0x78>
    4152:	000b      	movs	r3, r1
    4154:	4815      	ldr	r0, [pc, #84]	; (41ac <scalbn+0xbc>)
    4156:	4916      	ldr	r1, [pc, #88]	; (41b0 <scalbn+0xc0>)
    4158:	f000 f832 	bl	41c0 <copysign>
    415c:	4a13      	ldr	r2, [pc, #76]	; (41ac <scalbn+0xbc>)
    415e:	4b14      	ldr	r3, [pc, #80]	; (41b0 <scalbn+0xc0>)
    4160:	f001 f9da 	bl	5518 <__aeabi_dmul>
    4164:	e7e5      	b.n	4132 <scalbn+0x42>
    4166:	0002      	movs	r2, r0
    4168:	000b      	movs	r3, r1
    416a:	4812      	ldr	r0, [pc, #72]	; (41b4 <scalbn+0xc4>)
    416c:	4912      	ldr	r1, [pc, #72]	; (41b8 <scalbn+0xc8>)
    416e:	f000 f827 	bl	41c0 <copysign>
    4172:	4a10      	ldr	r2, [pc, #64]	; (41b4 <scalbn+0xc4>)
    4174:	4b10      	ldr	r3, [pc, #64]	; (41b8 <scalbn+0xc8>)
    4176:	f001 f9cf 	bl	5518 <__aeabi_dmul>
    417a:	e7da      	b.n	4132 <scalbn+0x42>
    417c:	4c08      	ldr	r4, [pc, #32]	; (41a0 <scalbn+0xb0>)
    417e:	3336      	adds	r3, #54	; 0x36
    4180:	4022      	ands	r2, r4
    4182:	051b      	lsls	r3, r3, #20
    4184:	4313      	orrs	r3, r2
    4186:	0019      	movs	r1, r3
    4188:	2200      	movs	r2, #0
    418a:	4b0c      	ldr	r3, [pc, #48]	; (41bc <scalbn+0xcc>)
    418c:	f001 f9c4 	bl	5518 <__aeabi_dmul>
    4190:	e7cf      	b.n	4132 <scalbn+0x42>
    4192:	46c0      	nop			; (mov r8, r8)
    4194:	43500000 	.word	0x43500000
    4198:	ffff3cb0 	.word	0xffff3cb0
    419c:	000007fe 	.word	0x000007fe
    41a0:	800fffff 	.word	0x800fffff
    41a4:	000007ff 	.word	0x000007ff
    41a8:	0000c350 	.word	0x0000c350
    41ac:	c2f8f359 	.word	0xc2f8f359
    41b0:	01a56e1f 	.word	0x01a56e1f
    41b4:	8800759c 	.word	0x8800759c
    41b8:	7e37e43c 	.word	0x7e37e43c
    41bc:	3c900000 	.word	0x3c900000

000041c0 <copysign>:
    41c0:	b530      	push	{r4, r5, lr}
    41c2:	004a      	lsls	r2, r1, #1
    41c4:	0fdb      	lsrs	r3, r3, #31
    41c6:	07db      	lsls	r3, r3, #31
    41c8:	0852      	lsrs	r2, r2, #1
    41ca:	431a      	orrs	r2, r3
    41cc:	0011      	movs	r1, r2
    41ce:	bd30      	pop	{r4, r5, pc}

000041d0 <__gnu_thumb1_case_uqi>:
    41d0:	b402      	push	{r1}
    41d2:	4671      	mov	r1, lr
    41d4:	0849      	lsrs	r1, r1, #1
    41d6:	0049      	lsls	r1, r1, #1
    41d8:	5c09      	ldrb	r1, [r1, r0]
    41da:	0049      	lsls	r1, r1, #1
    41dc:	448e      	add	lr, r1
    41de:	bc02      	pop	{r1}
    41e0:	4770      	bx	lr
    41e2:	46c0      	nop			; (mov r8, r8)

000041e4 <__aeabi_uidiv>:
    41e4:	2200      	movs	r2, #0
    41e6:	0843      	lsrs	r3, r0, #1
    41e8:	428b      	cmp	r3, r1
    41ea:	d374      	bcc.n	42d6 <__aeabi_uidiv+0xf2>
    41ec:	0903      	lsrs	r3, r0, #4
    41ee:	428b      	cmp	r3, r1
    41f0:	d35f      	bcc.n	42b2 <__aeabi_uidiv+0xce>
    41f2:	0a03      	lsrs	r3, r0, #8
    41f4:	428b      	cmp	r3, r1
    41f6:	d344      	bcc.n	4282 <__aeabi_uidiv+0x9e>
    41f8:	0b03      	lsrs	r3, r0, #12
    41fa:	428b      	cmp	r3, r1
    41fc:	d328      	bcc.n	4250 <__aeabi_uidiv+0x6c>
    41fe:	0c03      	lsrs	r3, r0, #16
    4200:	428b      	cmp	r3, r1
    4202:	d30d      	bcc.n	4220 <__aeabi_uidiv+0x3c>
    4204:	22ff      	movs	r2, #255	; 0xff
    4206:	0209      	lsls	r1, r1, #8
    4208:	ba12      	rev	r2, r2
    420a:	0c03      	lsrs	r3, r0, #16
    420c:	428b      	cmp	r3, r1
    420e:	d302      	bcc.n	4216 <__aeabi_uidiv+0x32>
    4210:	1212      	asrs	r2, r2, #8
    4212:	0209      	lsls	r1, r1, #8
    4214:	d065      	beq.n	42e2 <__aeabi_uidiv+0xfe>
    4216:	0b03      	lsrs	r3, r0, #12
    4218:	428b      	cmp	r3, r1
    421a:	d319      	bcc.n	4250 <__aeabi_uidiv+0x6c>
    421c:	e000      	b.n	4220 <__aeabi_uidiv+0x3c>
    421e:	0a09      	lsrs	r1, r1, #8
    4220:	0bc3      	lsrs	r3, r0, #15
    4222:	428b      	cmp	r3, r1
    4224:	d301      	bcc.n	422a <__aeabi_uidiv+0x46>
    4226:	03cb      	lsls	r3, r1, #15
    4228:	1ac0      	subs	r0, r0, r3
    422a:	4152      	adcs	r2, r2
    422c:	0b83      	lsrs	r3, r0, #14
    422e:	428b      	cmp	r3, r1
    4230:	d301      	bcc.n	4236 <__aeabi_uidiv+0x52>
    4232:	038b      	lsls	r3, r1, #14
    4234:	1ac0      	subs	r0, r0, r3
    4236:	4152      	adcs	r2, r2
    4238:	0b43      	lsrs	r3, r0, #13
    423a:	428b      	cmp	r3, r1
    423c:	d301      	bcc.n	4242 <__aeabi_uidiv+0x5e>
    423e:	034b      	lsls	r3, r1, #13
    4240:	1ac0      	subs	r0, r0, r3
    4242:	4152      	adcs	r2, r2
    4244:	0b03      	lsrs	r3, r0, #12
    4246:	428b      	cmp	r3, r1
    4248:	d301      	bcc.n	424e <__aeabi_uidiv+0x6a>
    424a:	030b      	lsls	r3, r1, #12
    424c:	1ac0      	subs	r0, r0, r3
    424e:	4152      	adcs	r2, r2
    4250:	0ac3      	lsrs	r3, r0, #11
    4252:	428b      	cmp	r3, r1
    4254:	d301      	bcc.n	425a <__aeabi_uidiv+0x76>
    4256:	02cb      	lsls	r3, r1, #11
    4258:	1ac0      	subs	r0, r0, r3
    425a:	4152      	adcs	r2, r2
    425c:	0a83      	lsrs	r3, r0, #10
    425e:	428b      	cmp	r3, r1
    4260:	d301      	bcc.n	4266 <__aeabi_uidiv+0x82>
    4262:	028b      	lsls	r3, r1, #10
    4264:	1ac0      	subs	r0, r0, r3
    4266:	4152      	adcs	r2, r2
    4268:	0a43      	lsrs	r3, r0, #9
    426a:	428b      	cmp	r3, r1
    426c:	d301      	bcc.n	4272 <__aeabi_uidiv+0x8e>
    426e:	024b      	lsls	r3, r1, #9
    4270:	1ac0      	subs	r0, r0, r3
    4272:	4152      	adcs	r2, r2
    4274:	0a03      	lsrs	r3, r0, #8
    4276:	428b      	cmp	r3, r1
    4278:	d301      	bcc.n	427e <__aeabi_uidiv+0x9a>
    427a:	020b      	lsls	r3, r1, #8
    427c:	1ac0      	subs	r0, r0, r3
    427e:	4152      	adcs	r2, r2
    4280:	d2cd      	bcs.n	421e <__aeabi_uidiv+0x3a>
    4282:	09c3      	lsrs	r3, r0, #7
    4284:	428b      	cmp	r3, r1
    4286:	d301      	bcc.n	428c <__aeabi_uidiv+0xa8>
    4288:	01cb      	lsls	r3, r1, #7
    428a:	1ac0      	subs	r0, r0, r3
    428c:	4152      	adcs	r2, r2
    428e:	0983      	lsrs	r3, r0, #6
    4290:	428b      	cmp	r3, r1
    4292:	d301      	bcc.n	4298 <__aeabi_uidiv+0xb4>
    4294:	018b      	lsls	r3, r1, #6
    4296:	1ac0      	subs	r0, r0, r3
    4298:	4152      	adcs	r2, r2
    429a:	0943      	lsrs	r3, r0, #5
    429c:	428b      	cmp	r3, r1
    429e:	d301      	bcc.n	42a4 <__aeabi_uidiv+0xc0>
    42a0:	014b      	lsls	r3, r1, #5
    42a2:	1ac0      	subs	r0, r0, r3
    42a4:	4152      	adcs	r2, r2
    42a6:	0903      	lsrs	r3, r0, #4
    42a8:	428b      	cmp	r3, r1
    42aa:	d301      	bcc.n	42b0 <__aeabi_uidiv+0xcc>
    42ac:	010b      	lsls	r3, r1, #4
    42ae:	1ac0      	subs	r0, r0, r3
    42b0:	4152      	adcs	r2, r2
    42b2:	08c3      	lsrs	r3, r0, #3
    42b4:	428b      	cmp	r3, r1
    42b6:	d301      	bcc.n	42bc <__aeabi_uidiv+0xd8>
    42b8:	00cb      	lsls	r3, r1, #3
    42ba:	1ac0      	subs	r0, r0, r3
    42bc:	4152      	adcs	r2, r2
    42be:	0883      	lsrs	r3, r0, #2
    42c0:	428b      	cmp	r3, r1
    42c2:	d301      	bcc.n	42c8 <__aeabi_uidiv+0xe4>
    42c4:	008b      	lsls	r3, r1, #2
    42c6:	1ac0      	subs	r0, r0, r3
    42c8:	4152      	adcs	r2, r2
    42ca:	0843      	lsrs	r3, r0, #1
    42cc:	428b      	cmp	r3, r1
    42ce:	d301      	bcc.n	42d4 <__aeabi_uidiv+0xf0>
    42d0:	004b      	lsls	r3, r1, #1
    42d2:	1ac0      	subs	r0, r0, r3
    42d4:	4152      	adcs	r2, r2
    42d6:	1a41      	subs	r1, r0, r1
    42d8:	d200      	bcs.n	42dc <__aeabi_uidiv+0xf8>
    42da:	4601      	mov	r1, r0
    42dc:	4152      	adcs	r2, r2
    42de:	4610      	mov	r0, r2
    42e0:	4770      	bx	lr
    42e2:	e7ff      	b.n	42e4 <__aeabi_uidiv+0x100>
    42e4:	b501      	push	{r0, lr}
    42e6:	2000      	movs	r0, #0
    42e8:	f000 f806 	bl	42f8 <__aeabi_idiv0>
    42ec:	bd02      	pop	{r1, pc}
    42ee:	46c0      	nop			; (mov r8, r8)

000042f0 <__aeabi_uidivmod>:
    42f0:	2900      	cmp	r1, #0
    42f2:	d0f7      	beq.n	42e4 <__aeabi_uidiv+0x100>
    42f4:	e776      	b.n	41e4 <__aeabi_uidiv>
    42f6:	4770      	bx	lr

000042f8 <__aeabi_idiv0>:
    42f8:	4770      	bx	lr
    42fa:	46c0      	nop			; (mov r8, r8)

000042fc <__aeabi_cdrcmple>:
    42fc:	4684      	mov	ip, r0
    42fe:	1c10      	adds	r0, r2, #0
    4300:	4662      	mov	r2, ip
    4302:	468c      	mov	ip, r1
    4304:	1c19      	adds	r1, r3, #0
    4306:	4663      	mov	r3, ip
    4308:	e000      	b.n	430c <__aeabi_cdcmpeq>
    430a:	46c0      	nop			; (mov r8, r8)

0000430c <__aeabi_cdcmpeq>:
    430c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    430e:	f001 f899 	bl	5444 <__ledf2>
    4312:	2800      	cmp	r0, #0
    4314:	d401      	bmi.n	431a <__aeabi_cdcmpeq+0xe>
    4316:	2100      	movs	r1, #0
    4318:	42c8      	cmn	r0, r1
    431a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000431c <__aeabi_dcmpeq>:
    431c:	b510      	push	{r4, lr}
    431e:	f000 ffed 	bl	52fc <__eqdf2>
    4322:	4240      	negs	r0, r0
    4324:	3001      	adds	r0, #1
    4326:	bd10      	pop	{r4, pc}

00004328 <__aeabi_dcmplt>:
    4328:	b510      	push	{r4, lr}
    432a:	f001 f88b 	bl	5444 <__ledf2>
    432e:	2800      	cmp	r0, #0
    4330:	db01      	blt.n	4336 <__aeabi_dcmplt+0xe>
    4332:	2000      	movs	r0, #0
    4334:	bd10      	pop	{r4, pc}
    4336:	2001      	movs	r0, #1
    4338:	bd10      	pop	{r4, pc}
    433a:	46c0      	nop			; (mov r8, r8)

0000433c <__aeabi_dcmple>:
    433c:	b510      	push	{r4, lr}
    433e:	f001 f881 	bl	5444 <__ledf2>
    4342:	2800      	cmp	r0, #0
    4344:	dd01      	ble.n	434a <__aeabi_dcmple+0xe>
    4346:	2000      	movs	r0, #0
    4348:	bd10      	pop	{r4, pc}
    434a:	2001      	movs	r0, #1
    434c:	bd10      	pop	{r4, pc}
    434e:	46c0      	nop			; (mov r8, r8)

00004350 <__aeabi_dcmpgt>:
    4350:	b510      	push	{r4, lr}
    4352:	f001 f813 	bl	537c <__gedf2>
    4356:	2800      	cmp	r0, #0
    4358:	dc01      	bgt.n	435e <__aeabi_dcmpgt+0xe>
    435a:	2000      	movs	r0, #0
    435c:	bd10      	pop	{r4, pc}
    435e:	2001      	movs	r0, #1
    4360:	bd10      	pop	{r4, pc}
    4362:	46c0      	nop			; (mov r8, r8)

00004364 <__aeabi_dcmpge>:
    4364:	b510      	push	{r4, lr}
    4366:	f001 f809 	bl	537c <__gedf2>
    436a:	2800      	cmp	r0, #0
    436c:	da01      	bge.n	4372 <__aeabi_dcmpge+0xe>
    436e:	2000      	movs	r0, #0
    4370:	bd10      	pop	{r4, pc}
    4372:	2001      	movs	r0, #1
    4374:	bd10      	pop	{r4, pc}
    4376:	46c0      	nop			; (mov r8, r8)

00004378 <__aeabi_lmul>:
    4378:	b5f0      	push	{r4, r5, r6, r7, lr}
    437a:	464f      	mov	r7, r9
    437c:	4646      	mov	r6, r8
    437e:	b4c0      	push	{r6, r7}
    4380:	0416      	lsls	r6, r2, #16
    4382:	0c36      	lsrs	r6, r6, #16
    4384:	4699      	mov	r9, r3
    4386:	0033      	movs	r3, r6
    4388:	0405      	lsls	r5, r0, #16
    438a:	0c2c      	lsrs	r4, r5, #16
    438c:	0c07      	lsrs	r7, r0, #16
    438e:	0c15      	lsrs	r5, r2, #16
    4390:	4363      	muls	r3, r4
    4392:	437e      	muls	r6, r7
    4394:	436f      	muls	r7, r5
    4396:	4365      	muls	r5, r4
    4398:	0c1c      	lsrs	r4, r3, #16
    439a:	19ad      	adds	r5, r5, r6
    439c:	1964      	adds	r4, r4, r5
    439e:	469c      	mov	ip, r3
    43a0:	42a6      	cmp	r6, r4
    43a2:	d903      	bls.n	43ac <__aeabi_lmul+0x34>
    43a4:	2380      	movs	r3, #128	; 0x80
    43a6:	025b      	lsls	r3, r3, #9
    43a8:	4698      	mov	r8, r3
    43aa:	4447      	add	r7, r8
    43ac:	4663      	mov	r3, ip
    43ae:	0c25      	lsrs	r5, r4, #16
    43b0:	19ef      	adds	r7, r5, r7
    43b2:	041d      	lsls	r5, r3, #16
    43b4:	464b      	mov	r3, r9
    43b6:	434a      	muls	r2, r1
    43b8:	4343      	muls	r3, r0
    43ba:	0c2d      	lsrs	r5, r5, #16
    43bc:	0424      	lsls	r4, r4, #16
    43be:	1964      	adds	r4, r4, r5
    43c0:	1899      	adds	r1, r3, r2
    43c2:	19c9      	adds	r1, r1, r7
    43c4:	0020      	movs	r0, r4
    43c6:	bc0c      	pop	{r2, r3}
    43c8:	4690      	mov	r8, r2
    43ca:	4699      	mov	r9, r3
    43cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43ce:	46c0      	nop			; (mov r8, r8)

000043d0 <__aeabi_d2uiz>:
    43d0:	b570      	push	{r4, r5, r6, lr}
    43d2:	2200      	movs	r2, #0
    43d4:	4b0c      	ldr	r3, [pc, #48]	; (4408 <__aeabi_d2uiz+0x38>)
    43d6:	0004      	movs	r4, r0
    43d8:	000d      	movs	r5, r1
    43da:	f7ff ffc3 	bl	4364 <__aeabi_dcmpge>
    43de:	2800      	cmp	r0, #0
    43e0:	d104      	bne.n	43ec <__aeabi_d2uiz+0x1c>
    43e2:	0020      	movs	r0, r4
    43e4:	0029      	movs	r1, r5
    43e6:	f001 fe85 	bl	60f4 <__aeabi_d2iz>
    43ea:	bd70      	pop	{r4, r5, r6, pc}
    43ec:	4b06      	ldr	r3, [pc, #24]	; (4408 <__aeabi_d2uiz+0x38>)
    43ee:	2200      	movs	r2, #0
    43f0:	0020      	movs	r0, r4
    43f2:	0029      	movs	r1, r5
    43f4:	f001 fb0a 	bl	5a0c <__aeabi_dsub>
    43f8:	f001 fe7c 	bl	60f4 <__aeabi_d2iz>
    43fc:	2380      	movs	r3, #128	; 0x80
    43fe:	061b      	lsls	r3, r3, #24
    4400:	469c      	mov	ip, r3
    4402:	4460      	add	r0, ip
    4404:	e7f1      	b.n	43ea <__aeabi_d2uiz+0x1a>
    4406:	46c0      	nop			; (mov r8, r8)
    4408:	41e00000 	.word	0x41e00000

0000440c <__aeabi_fmul>:
    440c:	b5f0      	push	{r4, r5, r6, r7, lr}
    440e:	4657      	mov	r7, sl
    4410:	464e      	mov	r6, r9
    4412:	4645      	mov	r5, r8
    4414:	0043      	lsls	r3, r0, #1
    4416:	b4e0      	push	{r5, r6, r7}
    4418:	0246      	lsls	r6, r0, #9
    441a:	4688      	mov	r8, r1
    441c:	0a76      	lsrs	r6, r6, #9
    441e:	0e1f      	lsrs	r7, r3, #24
    4420:	0fc4      	lsrs	r4, r0, #31
    4422:	2f00      	cmp	r7, #0
    4424:	d047      	beq.n	44b6 <__aeabi_fmul+0xaa>
    4426:	2fff      	cmp	r7, #255	; 0xff
    4428:	d025      	beq.n	4476 <__aeabi_fmul+0x6a>
    442a:	2300      	movs	r3, #0
    442c:	2580      	movs	r5, #128	; 0x80
    442e:	469a      	mov	sl, r3
    4430:	4699      	mov	r9, r3
    4432:	00f6      	lsls	r6, r6, #3
    4434:	04ed      	lsls	r5, r5, #19
    4436:	432e      	orrs	r6, r5
    4438:	3f7f      	subs	r7, #127	; 0x7f
    443a:	4643      	mov	r3, r8
    443c:	4642      	mov	r2, r8
    443e:	025d      	lsls	r5, r3, #9
    4440:	0fd2      	lsrs	r2, r2, #31
    4442:	005b      	lsls	r3, r3, #1
    4444:	0a6d      	lsrs	r5, r5, #9
    4446:	0e1b      	lsrs	r3, r3, #24
    4448:	4690      	mov	r8, r2
    444a:	d040      	beq.n	44ce <__aeabi_fmul+0xc2>
    444c:	2bff      	cmp	r3, #255	; 0xff
    444e:	d039      	beq.n	44c4 <__aeabi_fmul+0xb8>
    4450:	2280      	movs	r2, #128	; 0x80
    4452:	2000      	movs	r0, #0
    4454:	00ed      	lsls	r5, r5, #3
    4456:	04d2      	lsls	r2, r2, #19
    4458:	4315      	orrs	r5, r2
    445a:	3b7f      	subs	r3, #127	; 0x7f
    445c:	18fb      	adds	r3, r7, r3
    445e:	4642      	mov	r2, r8
    4460:	4657      	mov	r7, sl
    4462:	1c59      	adds	r1, r3, #1
    4464:	4062      	eors	r2, r4
    4466:	468c      	mov	ip, r1
    4468:	4307      	orrs	r7, r0
    446a:	2f0f      	cmp	r7, #15
    446c:	d85c      	bhi.n	4528 <__aeabi_fmul+0x11c>
    446e:	496f      	ldr	r1, [pc, #444]	; (462c <__aeabi_fmul+0x220>)
    4470:	00bf      	lsls	r7, r7, #2
    4472:	59c9      	ldr	r1, [r1, r7]
    4474:	468f      	mov	pc, r1
    4476:	2e00      	cmp	r6, #0
    4478:	d145      	bne.n	4506 <__aeabi_fmul+0xfa>
    447a:	2308      	movs	r3, #8
    447c:	469a      	mov	sl, r3
    447e:	3b06      	subs	r3, #6
    4480:	4699      	mov	r9, r3
    4482:	e7da      	b.n	443a <__aeabi_fmul+0x2e>
    4484:	4642      	mov	r2, r8
    4486:	2802      	cmp	r0, #2
    4488:	d02d      	beq.n	44e6 <__aeabi_fmul+0xda>
    448a:	2803      	cmp	r0, #3
    448c:	d100      	bne.n	4490 <__aeabi_fmul+0x84>
    448e:	e0c3      	b.n	4618 <__aeabi_fmul+0x20c>
    4490:	2801      	cmp	r0, #1
    4492:	d000      	beq.n	4496 <__aeabi_fmul+0x8a>
    4494:	e0a2      	b.n	45dc <__aeabi_fmul+0x1d0>
    4496:	2500      	movs	r5, #0
    4498:	2600      	movs	r6, #0
    449a:	4002      	ands	r2, r0
    449c:	b2d4      	uxtb	r4, r2
    449e:	0276      	lsls	r6, r6, #9
    44a0:	05ed      	lsls	r5, r5, #23
    44a2:	0a76      	lsrs	r6, r6, #9
    44a4:	432e      	orrs	r6, r5
    44a6:	07e4      	lsls	r4, r4, #31
    44a8:	4326      	orrs	r6, r4
    44aa:	0030      	movs	r0, r6
    44ac:	bc1c      	pop	{r2, r3, r4}
    44ae:	4690      	mov	r8, r2
    44b0:	4699      	mov	r9, r3
    44b2:	46a2      	mov	sl, r4
    44b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    44b6:	2e00      	cmp	r6, #0
    44b8:	d11a      	bne.n	44f0 <__aeabi_fmul+0xe4>
    44ba:	2304      	movs	r3, #4
    44bc:	469a      	mov	sl, r3
    44be:	3b03      	subs	r3, #3
    44c0:	4699      	mov	r9, r3
    44c2:	e7ba      	b.n	443a <__aeabi_fmul+0x2e>
    44c4:	002a      	movs	r2, r5
    44c6:	1e51      	subs	r1, r2, #1
    44c8:	418a      	sbcs	r2, r1
    44ca:	1c90      	adds	r0, r2, #2
    44cc:	e7c6      	b.n	445c <__aeabi_fmul+0x50>
    44ce:	2001      	movs	r0, #1
    44d0:	2d00      	cmp	r5, #0
    44d2:	d0c3      	beq.n	445c <__aeabi_fmul+0x50>
    44d4:	0028      	movs	r0, r5
    44d6:	f001 ff9d 	bl	6414 <__clzsi2>
    44da:	1f43      	subs	r3, r0, #5
    44dc:	3076      	adds	r0, #118	; 0x76
    44de:	409d      	lsls	r5, r3
    44e0:	4243      	negs	r3, r0
    44e2:	2000      	movs	r0, #0
    44e4:	e7ba      	b.n	445c <__aeabi_fmul+0x50>
    44e6:	2401      	movs	r4, #1
    44e8:	25ff      	movs	r5, #255	; 0xff
    44ea:	4014      	ands	r4, r2
    44ec:	2600      	movs	r6, #0
    44ee:	e7d6      	b.n	449e <__aeabi_fmul+0x92>
    44f0:	0030      	movs	r0, r6
    44f2:	f001 ff8f 	bl	6414 <__clzsi2>
    44f6:	1f43      	subs	r3, r0, #5
    44f8:	409e      	lsls	r6, r3
    44fa:	2300      	movs	r3, #0
    44fc:	3076      	adds	r0, #118	; 0x76
    44fe:	4247      	negs	r7, r0
    4500:	469a      	mov	sl, r3
    4502:	4699      	mov	r9, r3
    4504:	e799      	b.n	443a <__aeabi_fmul+0x2e>
    4506:	230c      	movs	r3, #12
    4508:	469a      	mov	sl, r3
    450a:	3b09      	subs	r3, #9
    450c:	4699      	mov	r9, r3
    450e:	e794      	b.n	443a <__aeabi_fmul+0x2e>
    4510:	2680      	movs	r6, #128	; 0x80
    4512:	2400      	movs	r4, #0
    4514:	03f6      	lsls	r6, r6, #15
    4516:	25ff      	movs	r5, #255	; 0xff
    4518:	e7c1      	b.n	449e <__aeabi_fmul+0x92>
    451a:	0035      	movs	r5, r6
    451c:	4648      	mov	r0, r9
    451e:	e7b2      	b.n	4486 <__aeabi_fmul+0x7a>
    4520:	0035      	movs	r5, r6
    4522:	0022      	movs	r2, r4
    4524:	4648      	mov	r0, r9
    4526:	e7ae      	b.n	4486 <__aeabi_fmul+0x7a>
    4528:	0429      	lsls	r1, r5, #16
    452a:	0c09      	lsrs	r1, r1, #16
    452c:	0008      	movs	r0, r1
    452e:	0c37      	lsrs	r7, r6, #16
    4530:	0436      	lsls	r6, r6, #16
    4532:	0c36      	lsrs	r6, r6, #16
    4534:	0c2c      	lsrs	r4, r5, #16
    4536:	4379      	muls	r1, r7
    4538:	4370      	muls	r0, r6
    453a:	4367      	muls	r7, r4
    453c:	4374      	muls	r4, r6
    453e:	0c06      	lsrs	r6, r0, #16
    4540:	1864      	adds	r4, r4, r1
    4542:	1936      	adds	r6, r6, r4
    4544:	42b1      	cmp	r1, r6
    4546:	d903      	bls.n	4550 <__aeabi_fmul+0x144>
    4548:	2180      	movs	r1, #128	; 0x80
    454a:	0249      	lsls	r1, r1, #9
    454c:	4688      	mov	r8, r1
    454e:	4447      	add	r7, r8
    4550:	0400      	lsls	r0, r0, #16
    4552:	0c00      	lsrs	r0, r0, #16
    4554:	0431      	lsls	r1, r6, #16
    4556:	1809      	adds	r1, r1, r0
    4558:	018d      	lsls	r5, r1, #6
    455a:	1e68      	subs	r0, r5, #1
    455c:	4185      	sbcs	r5, r0
    455e:	0e89      	lsrs	r1, r1, #26
    4560:	4329      	orrs	r1, r5
    4562:	0c35      	lsrs	r5, r6, #16
    4564:	19ed      	adds	r5, r5, r7
    4566:	01ad      	lsls	r5, r5, #6
    4568:	430d      	orrs	r5, r1
    456a:	0129      	lsls	r1, r5, #4
    456c:	d504      	bpl.n	4578 <__aeabi_fmul+0x16c>
    456e:	2301      	movs	r3, #1
    4570:	0869      	lsrs	r1, r5, #1
    4572:	401d      	ands	r5, r3
    4574:	4663      	mov	r3, ip
    4576:	430d      	orrs	r5, r1
    4578:	0019      	movs	r1, r3
    457a:	317f      	adds	r1, #127	; 0x7f
    457c:	2900      	cmp	r1, #0
    457e:	dd25      	ble.n	45cc <__aeabi_fmul+0x1c0>
    4580:	0768      	lsls	r0, r5, #29
    4582:	d004      	beq.n	458e <__aeabi_fmul+0x182>
    4584:	200f      	movs	r0, #15
    4586:	4028      	ands	r0, r5
    4588:	2804      	cmp	r0, #4
    458a:	d000      	beq.n	458e <__aeabi_fmul+0x182>
    458c:	3504      	adds	r5, #4
    458e:	0128      	lsls	r0, r5, #4
    4590:	d503      	bpl.n	459a <__aeabi_fmul+0x18e>
    4592:	4927      	ldr	r1, [pc, #156]	; (4630 <__aeabi_fmul+0x224>)
    4594:	3380      	adds	r3, #128	; 0x80
    4596:	400d      	ands	r5, r1
    4598:	0019      	movs	r1, r3
    459a:	29fe      	cmp	r1, #254	; 0xfe
    459c:	dca3      	bgt.n	44e6 <__aeabi_fmul+0xda>
    459e:	2401      	movs	r4, #1
    45a0:	01ad      	lsls	r5, r5, #6
    45a2:	0a6e      	lsrs	r6, r5, #9
    45a4:	4014      	ands	r4, r2
    45a6:	b2cd      	uxtb	r5, r1
    45a8:	e779      	b.n	449e <__aeabi_fmul+0x92>
    45aa:	2080      	movs	r0, #128	; 0x80
    45ac:	03c0      	lsls	r0, r0, #15
    45ae:	4206      	tst	r6, r0
    45b0:	d007      	beq.n	45c2 <__aeabi_fmul+0x1b6>
    45b2:	4205      	tst	r5, r0
    45b4:	d105      	bne.n	45c2 <__aeabi_fmul+0x1b6>
    45b6:	4328      	orrs	r0, r5
    45b8:	0246      	lsls	r6, r0, #9
    45ba:	0a76      	lsrs	r6, r6, #9
    45bc:	4644      	mov	r4, r8
    45be:	25ff      	movs	r5, #255	; 0xff
    45c0:	e76d      	b.n	449e <__aeabi_fmul+0x92>
    45c2:	4306      	orrs	r6, r0
    45c4:	0276      	lsls	r6, r6, #9
    45c6:	0a76      	lsrs	r6, r6, #9
    45c8:	25ff      	movs	r5, #255	; 0xff
    45ca:	e768      	b.n	449e <__aeabi_fmul+0x92>
    45cc:	2401      	movs	r4, #1
    45ce:	1a61      	subs	r1, r4, r1
    45d0:	291b      	cmp	r1, #27
    45d2:	dd05      	ble.n	45e0 <__aeabi_fmul+0x1d4>
    45d4:	4014      	ands	r4, r2
    45d6:	2500      	movs	r5, #0
    45d8:	2600      	movs	r6, #0
    45da:	e760      	b.n	449e <__aeabi_fmul+0x92>
    45dc:	4663      	mov	r3, ip
    45de:	e7cb      	b.n	4578 <__aeabi_fmul+0x16c>
    45e0:	002e      	movs	r6, r5
    45e2:	2320      	movs	r3, #32
    45e4:	40ce      	lsrs	r6, r1
    45e6:	1a59      	subs	r1, r3, r1
    45e8:	408d      	lsls	r5, r1
    45ea:	1e6b      	subs	r3, r5, #1
    45ec:	419d      	sbcs	r5, r3
    45ee:	432e      	orrs	r6, r5
    45f0:	0773      	lsls	r3, r6, #29
    45f2:	d004      	beq.n	45fe <__aeabi_fmul+0x1f2>
    45f4:	230f      	movs	r3, #15
    45f6:	4033      	ands	r3, r6
    45f8:	2b04      	cmp	r3, #4
    45fa:	d000      	beq.n	45fe <__aeabi_fmul+0x1f2>
    45fc:	3604      	adds	r6, #4
    45fe:	0173      	lsls	r3, r6, #5
    4600:	d504      	bpl.n	460c <__aeabi_fmul+0x200>
    4602:	2401      	movs	r4, #1
    4604:	2501      	movs	r5, #1
    4606:	4014      	ands	r4, r2
    4608:	2600      	movs	r6, #0
    460a:	e748      	b.n	449e <__aeabi_fmul+0x92>
    460c:	2401      	movs	r4, #1
    460e:	01b6      	lsls	r6, r6, #6
    4610:	0a76      	lsrs	r6, r6, #9
    4612:	4014      	ands	r4, r2
    4614:	2500      	movs	r5, #0
    4616:	e742      	b.n	449e <__aeabi_fmul+0x92>
    4618:	2680      	movs	r6, #128	; 0x80
    461a:	2401      	movs	r4, #1
    461c:	03f6      	lsls	r6, r6, #15
    461e:	432e      	orrs	r6, r5
    4620:	0276      	lsls	r6, r6, #9
    4622:	0a76      	lsrs	r6, r6, #9
    4624:	4014      	ands	r4, r2
    4626:	25ff      	movs	r5, #255	; 0xff
    4628:	e739      	b.n	449e <__aeabi_fmul+0x92>
    462a:	46c0      	nop			; (mov r8, r8)
    462c:	000064e0 	.word	0x000064e0
    4630:	f7ffffff 	.word	0xf7ffffff

00004634 <__aeabi_f2iz>:
    4634:	0243      	lsls	r3, r0, #9
    4636:	0a59      	lsrs	r1, r3, #9
    4638:	0043      	lsls	r3, r0, #1
    463a:	0fc2      	lsrs	r2, r0, #31
    463c:	0e1b      	lsrs	r3, r3, #24
    463e:	2000      	movs	r0, #0
    4640:	2b7e      	cmp	r3, #126	; 0x7e
    4642:	dd0e      	ble.n	4662 <__aeabi_f2iz+0x2e>
    4644:	2b9d      	cmp	r3, #157	; 0x9d
    4646:	dc0d      	bgt.n	4664 <__aeabi_f2iz+0x30>
    4648:	2080      	movs	r0, #128	; 0x80
    464a:	0400      	lsls	r0, r0, #16
    464c:	4301      	orrs	r1, r0
    464e:	2b95      	cmp	r3, #149	; 0x95
    4650:	dc0b      	bgt.n	466a <__aeabi_f2iz+0x36>
    4652:	2096      	movs	r0, #150	; 0x96
    4654:	1ac3      	subs	r3, r0, r3
    4656:	40d9      	lsrs	r1, r3
    4658:	000b      	movs	r3, r1
    465a:	4258      	negs	r0, r3
    465c:	2a00      	cmp	r2, #0
    465e:	d100      	bne.n	4662 <__aeabi_f2iz+0x2e>
    4660:	0018      	movs	r0, r3
    4662:	4770      	bx	lr
    4664:	4b03      	ldr	r3, [pc, #12]	; (4674 <__aeabi_f2iz+0x40>)
    4666:	18d0      	adds	r0, r2, r3
    4668:	e7fb      	b.n	4662 <__aeabi_f2iz+0x2e>
    466a:	3b96      	subs	r3, #150	; 0x96
    466c:	4099      	lsls	r1, r3
    466e:	000b      	movs	r3, r1
    4670:	e7f3      	b.n	465a <__aeabi_f2iz+0x26>
    4672:	46c0      	nop			; (mov r8, r8)
    4674:	7fffffff 	.word	0x7fffffff

00004678 <__aeabi_dadd>:
    4678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    467a:	4656      	mov	r6, sl
    467c:	465f      	mov	r7, fp
    467e:	464d      	mov	r5, r9
    4680:	4644      	mov	r4, r8
    4682:	b4f0      	push	{r4, r5, r6, r7}
    4684:	000f      	movs	r7, r1
    4686:	0ffd      	lsrs	r5, r7, #31
    4688:	46aa      	mov	sl, r5
    468a:	0309      	lsls	r1, r1, #12
    468c:	007c      	lsls	r4, r7, #1
    468e:	002e      	movs	r6, r5
    4690:	005f      	lsls	r7, r3, #1
    4692:	0f45      	lsrs	r5, r0, #29
    4694:	0a49      	lsrs	r1, r1, #9
    4696:	0d7f      	lsrs	r7, r7, #21
    4698:	4329      	orrs	r1, r5
    469a:	00c5      	lsls	r5, r0, #3
    469c:	0318      	lsls	r0, r3, #12
    469e:	46bc      	mov	ip, r7
    46a0:	0a40      	lsrs	r0, r0, #9
    46a2:	0f57      	lsrs	r7, r2, #29
    46a4:	0d64      	lsrs	r4, r4, #21
    46a6:	0fdb      	lsrs	r3, r3, #31
    46a8:	4338      	orrs	r0, r7
    46aa:	00d2      	lsls	r2, r2, #3
    46ac:	459a      	cmp	sl, r3
    46ae:	d100      	bne.n	46b2 <__aeabi_dadd+0x3a>
    46b0:	e0aa      	b.n	4808 <__aeabi_dadd+0x190>
    46b2:	4666      	mov	r6, ip
    46b4:	1ba6      	subs	r6, r4, r6
    46b6:	2e00      	cmp	r6, #0
    46b8:	dc00      	bgt.n	46bc <__aeabi_dadd+0x44>
    46ba:	e0ff      	b.n	48bc <__aeabi_dadd+0x244>
    46bc:	4663      	mov	r3, ip
    46be:	2b00      	cmp	r3, #0
    46c0:	d139      	bne.n	4736 <__aeabi_dadd+0xbe>
    46c2:	0003      	movs	r3, r0
    46c4:	4313      	orrs	r3, r2
    46c6:	d000      	beq.n	46ca <__aeabi_dadd+0x52>
    46c8:	e0d9      	b.n	487e <__aeabi_dadd+0x206>
    46ca:	076b      	lsls	r3, r5, #29
    46cc:	d009      	beq.n	46e2 <__aeabi_dadd+0x6a>
    46ce:	230f      	movs	r3, #15
    46d0:	402b      	ands	r3, r5
    46d2:	2b04      	cmp	r3, #4
    46d4:	d005      	beq.n	46e2 <__aeabi_dadd+0x6a>
    46d6:	1d2b      	adds	r3, r5, #4
    46d8:	42ab      	cmp	r3, r5
    46da:	41ad      	sbcs	r5, r5
    46dc:	426d      	negs	r5, r5
    46de:	1949      	adds	r1, r1, r5
    46e0:	001d      	movs	r5, r3
    46e2:	020b      	lsls	r3, r1, #8
    46e4:	d400      	bmi.n	46e8 <__aeabi_dadd+0x70>
    46e6:	e082      	b.n	47ee <__aeabi_dadd+0x176>
    46e8:	4bca      	ldr	r3, [pc, #808]	; (4a14 <__aeabi_dadd+0x39c>)
    46ea:	3401      	adds	r4, #1
    46ec:	429c      	cmp	r4, r3
    46ee:	d100      	bne.n	46f2 <__aeabi_dadd+0x7a>
    46f0:	e0fe      	b.n	48f0 <__aeabi_dadd+0x278>
    46f2:	000a      	movs	r2, r1
    46f4:	4656      	mov	r6, sl
    46f6:	4bc8      	ldr	r3, [pc, #800]	; (4a18 <__aeabi_dadd+0x3a0>)
    46f8:	08ed      	lsrs	r5, r5, #3
    46fa:	401a      	ands	r2, r3
    46fc:	0750      	lsls	r0, r2, #29
    46fe:	0564      	lsls	r4, r4, #21
    4700:	0252      	lsls	r2, r2, #9
    4702:	4305      	orrs	r5, r0
    4704:	0b12      	lsrs	r2, r2, #12
    4706:	0d64      	lsrs	r4, r4, #21
    4708:	2100      	movs	r1, #0
    470a:	0312      	lsls	r2, r2, #12
    470c:	0d0b      	lsrs	r3, r1, #20
    470e:	051b      	lsls	r3, r3, #20
    4710:	0564      	lsls	r4, r4, #21
    4712:	0b12      	lsrs	r2, r2, #12
    4714:	431a      	orrs	r2, r3
    4716:	0863      	lsrs	r3, r4, #1
    4718:	4cc0      	ldr	r4, [pc, #768]	; (4a1c <__aeabi_dadd+0x3a4>)
    471a:	07f6      	lsls	r6, r6, #31
    471c:	4014      	ands	r4, r2
    471e:	431c      	orrs	r4, r3
    4720:	0064      	lsls	r4, r4, #1
    4722:	0864      	lsrs	r4, r4, #1
    4724:	4334      	orrs	r4, r6
    4726:	0028      	movs	r0, r5
    4728:	0021      	movs	r1, r4
    472a:	bc3c      	pop	{r2, r3, r4, r5}
    472c:	4690      	mov	r8, r2
    472e:	4699      	mov	r9, r3
    4730:	46a2      	mov	sl, r4
    4732:	46ab      	mov	fp, r5
    4734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4736:	4bb7      	ldr	r3, [pc, #732]	; (4a14 <__aeabi_dadd+0x39c>)
    4738:	429c      	cmp	r4, r3
    473a:	d0c6      	beq.n	46ca <__aeabi_dadd+0x52>
    473c:	2380      	movs	r3, #128	; 0x80
    473e:	041b      	lsls	r3, r3, #16
    4740:	4318      	orrs	r0, r3
    4742:	2e38      	cmp	r6, #56	; 0x38
    4744:	dd00      	ble.n	4748 <__aeabi_dadd+0xd0>
    4746:	e0eb      	b.n	4920 <__aeabi_dadd+0x2a8>
    4748:	2e1f      	cmp	r6, #31
    474a:	dd00      	ble.n	474e <__aeabi_dadd+0xd6>
    474c:	e11e      	b.n	498c <__aeabi_dadd+0x314>
    474e:	2320      	movs	r3, #32
    4750:	1b9b      	subs	r3, r3, r6
    4752:	469c      	mov	ip, r3
    4754:	0003      	movs	r3, r0
    4756:	4667      	mov	r7, ip
    4758:	40bb      	lsls	r3, r7
    475a:	4698      	mov	r8, r3
    475c:	0013      	movs	r3, r2
    475e:	4647      	mov	r7, r8
    4760:	40f3      	lsrs	r3, r6
    4762:	433b      	orrs	r3, r7
    4764:	4667      	mov	r7, ip
    4766:	40ba      	lsls	r2, r7
    4768:	1e57      	subs	r7, r2, #1
    476a:	41ba      	sbcs	r2, r7
    476c:	4313      	orrs	r3, r2
    476e:	0002      	movs	r2, r0
    4770:	40f2      	lsrs	r2, r6
    4772:	1aeb      	subs	r3, r5, r3
    4774:	429d      	cmp	r5, r3
    4776:	41b6      	sbcs	r6, r6
    4778:	001d      	movs	r5, r3
    477a:	1a8a      	subs	r2, r1, r2
    477c:	4276      	negs	r6, r6
    477e:	1b91      	subs	r1, r2, r6
    4780:	020b      	lsls	r3, r1, #8
    4782:	d531      	bpl.n	47e8 <__aeabi_dadd+0x170>
    4784:	024a      	lsls	r2, r1, #9
    4786:	0a56      	lsrs	r6, r2, #9
    4788:	2e00      	cmp	r6, #0
    478a:	d100      	bne.n	478e <__aeabi_dadd+0x116>
    478c:	e0b4      	b.n	48f8 <__aeabi_dadd+0x280>
    478e:	0030      	movs	r0, r6
    4790:	f001 fe40 	bl	6414 <__clzsi2>
    4794:	0003      	movs	r3, r0
    4796:	3b08      	subs	r3, #8
    4798:	2b1f      	cmp	r3, #31
    479a:	dd00      	ble.n	479e <__aeabi_dadd+0x126>
    479c:	e0b5      	b.n	490a <__aeabi_dadd+0x292>
    479e:	2220      	movs	r2, #32
    47a0:	0029      	movs	r1, r5
    47a2:	1ad2      	subs	r2, r2, r3
    47a4:	40d1      	lsrs	r1, r2
    47a6:	409e      	lsls	r6, r3
    47a8:	000a      	movs	r2, r1
    47aa:	409d      	lsls	r5, r3
    47ac:	4332      	orrs	r2, r6
    47ae:	429c      	cmp	r4, r3
    47b0:	dd00      	ble.n	47b4 <__aeabi_dadd+0x13c>
    47b2:	e0b1      	b.n	4918 <__aeabi_dadd+0x2a0>
    47b4:	1b1c      	subs	r4, r3, r4
    47b6:	1c63      	adds	r3, r4, #1
    47b8:	2b1f      	cmp	r3, #31
    47ba:	dd00      	ble.n	47be <__aeabi_dadd+0x146>
    47bc:	e0d5      	b.n	496a <__aeabi_dadd+0x2f2>
    47be:	2120      	movs	r1, #32
    47c0:	0014      	movs	r4, r2
    47c2:	0028      	movs	r0, r5
    47c4:	1ac9      	subs	r1, r1, r3
    47c6:	408c      	lsls	r4, r1
    47c8:	40d8      	lsrs	r0, r3
    47ca:	408d      	lsls	r5, r1
    47cc:	4304      	orrs	r4, r0
    47ce:	40da      	lsrs	r2, r3
    47d0:	1e68      	subs	r0, r5, #1
    47d2:	4185      	sbcs	r5, r0
    47d4:	0011      	movs	r1, r2
    47d6:	4325      	orrs	r5, r4
    47d8:	2400      	movs	r4, #0
    47da:	e776      	b.n	46ca <__aeabi_dadd+0x52>
    47dc:	4641      	mov	r1, r8
    47de:	4331      	orrs	r1, r6
    47e0:	d100      	bne.n	47e4 <__aeabi_dadd+0x16c>
    47e2:	e234      	b.n	4c4e <__aeabi_dadd+0x5d6>
    47e4:	0031      	movs	r1, r6
    47e6:	4645      	mov	r5, r8
    47e8:	076b      	lsls	r3, r5, #29
    47ea:	d000      	beq.n	47ee <__aeabi_dadd+0x176>
    47ec:	e76f      	b.n	46ce <__aeabi_dadd+0x56>
    47ee:	4656      	mov	r6, sl
    47f0:	0748      	lsls	r0, r1, #29
    47f2:	08ed      	lsrs	r5, r5, #3
    47f4:	08c9      	lsrs	r1, r1, #3
    47f6:	4305      	orrs	r5, r0
    47f8:	4b86      	ldr	r3, [pc, #536]	; (4a14 <__aeabi_dadd+0x39c>)
    47fa:	429c      	cmp	r4, r3
    47fc:	d035      	beq.n	486a <__aeabi_dadd+0x1f2>
    47fe:	030a      	lsls	r2, r1, #12
    4800:	0564      	lsls	r4, r4, #21
    4802:	0b12      	lsrs	r2, r2, #12
    4804:	0d64      	lsrs	r4, r4, #21
    4806:	e77f      	b.n	4708 <__aeabi_dadd+0x90>
    4808:	4663      	mov	r3, ip
    480a:	1ae3      	subs	r3, r4, r3
    480c:	469b      	mov	fp, r3
    480e:	2b00      	cmp	r3, #0
    4810:	dc00      	bgt.n	4814 <__aeabi_dadd+0x19c>
    4812:	e08b      	b.n	492c <__aeabi_dadd+0x2b4>
    4814:	4667      	mov	r7, ip
    4816:	2f00      	cmp	r7, #0
    4818:	d03c      	beq.n	4894 <__aeabi_dadd+0x21c>
    481a:	4f7e      	ldr	r7, [pc, #504]	; (4a14 <__aeabi_dadd+0x39c>)
    481c:	42bc      	cmp	r4, r7
    481e:	d100      	bne.n	4822 <__aeabi_dadd+0x1aa>
    4820:	e753      	b.n	46ca <__aeabi_dadd+0x52>
    4822:	2780      	movs	r7, #128	; 0x80
    4824:	043f      	lsls	r7, r7, #16
    4826:	4338      	orrs	r0, r7
    4828:	465b      	mov	r3, fp
    482a:	2b38      	cmp	r3, #56	; 0x38
    482c:	dc00      	bgt.n	4830 <__aeabi_dadd+0x1b8>
    482e:	e0f7      	b.n	4a20 <__aeabi_dadd+0x3a8>
    4830:	4302      	orrs	r2, r0
    4832:	1e50      	subs	r0, r2, #1
    4834:	4182      	sbcs	r2, r0
    4836:	2000      	movs	r0, #0
    4838:	b2d2      	uxtb	r2, r2
    483a:	1953      	adds	r3, r2, r5
    483c:	1842      	adds	r2, r0, r1
    483e:	42ab      	cmp	r3, r5
    4840:	4189      	sbcs	r1, r1
    4842:	001d      	movs	r5, r3
    4844:	4249      	negs	r1, r1
    4846:	1889      	adds	r1, r1, r2
    4848:	020b      	lsls	r3, r1, #8
    484a:	d5cd      	bpl.n	47e8 <__aeabi_dadd+0x170>
    484c:	4b71      	ldr	r3, [pc, #452]	; (4a14 <__aeabi_dadd+0x39c>)
    484e:	3401      	adds	r4, #1
    4850:	429c      	cmp	r4, r3
    4852:	d100      	bne.n	4856 <__aeabi_dadd+0x1de>
    4854:	e13d      	b.n	4ad2 <__aeabi_dadd+0x45a>
    4856:	2001      	movs	r0, #1
    4858:	4a6f      	ldr	r2, [pc, #444]	; (4a18 <__aeabi_dadd+0x3a0>)
    485a:	086b      	lsrs	r3, r5, #1
    485c:	400a      	ands	r2, r1
    485e:	4028      	ands	r0, r5
    4860:	4318      	orrs	r0, r3
    4862:	07d5      	lsls	r5, r2, #31
    4864:	4305      	orrs	r5, r0
    4866:	0851      	lsrs	r1, r2, #1
    4868:	e72f      	b.n	46ca <__aeabi_dadd+0x52>
    486a:	002b      	movs	r3, r5
    486c:	430b      	orrs	r3, r1
    486e:	d100      	bne.n	4872 <__aeabi_dadd+0x1fa>
    4870:	e1cb      	b.n	4c0a <__aeabi_dadd+0x592>
    4872:	2380      	movs	r3, #128	; 0x80
    4874:	031b      	lsls	r3, r3, #12
    4876:	430b      	orrs	r3, r1
    4878:	031a      	lsls	r2, r3, #12
    487a:	0b12      	lsrs	r2, r2, #12
    487c:	e744      	b.n	4708 <__aeabi_dadd+0x90>
    487e:	3e01      	subs	r6, #1
    4880:	2e00      	cmp	r6, #0
    4882:	d16d      	bne.n	4960 <__aeabi_dadd+0x2e8>
    4884:	1aae      	subs	r6, r5, r2
    4886:	42b5      	cmp	r5, r6
    4888:	419b      	sbcs	r3, r3
    488a:	1a09      	subs	r1, r1, r0
    488c:	425b      	negs	r3, r3
    488e:	1ac9      	subs	r1, r1, r3
    4890:	0035      	movs	r5, r6
    4892:	e775      	b.n	4780 <__aeabi_dadd+0x108>
    4894:	0007      	movs	r7, r0
    4896:	4317      	orrs	r7, r2
    4898:	d100      	bne.n	489c <__aeabi_dadd+0x224>
    489a:	e716      	b.n	46ca <__aeabi_dadd+0x52>
    489c:	2301      	movs	r3, #1
    489e:	425b      	negs	r3, r3
    48a0:	469c      	mov	ip, r3
    48a2:	44e3      	add	fp, ip
    48a4:	465b      	mov	r3, fp
    48a6:	2b00      	cmp	r3, #0
    48a8:	d000      	beq.n	48ac <__aeabi_dadd+0x234>
    48aa:	e0e0      	b.n	4a6e <__aeabi_dadd+0x3f6>
    48ac:	18aa      	adds	r2, r5, r2
    48ae:	42aa      	cmp	r2, r5
    48b0:	419b      	sbcs	r3, r3
    48b2:	1809      	adds	r1, r1, r0
    48b4:	425b      	negs	r3, r3
    48b6:	1859      	adds	r1, r3, r1
    48b8:	0015      	movs	r5, r2
    48ba:	e7c5      	b.n	4848 <__aeabi_dadd+0x1d0>
    48bc:	2e00      	cmp	r6, #0
    48be:	d175      	bne.n	49ac <__aeabi_dadd+0x334>
    48c0:	1c66      	adds	r6, r4, #1
    48c2:	0576      	lsls	r6, r6, #21
    48c4:	0d76      	lsrs	r6, r6, #21
    48c6:	2e01      	cmp	r6, #1
    48c8:	dc00      	bgt.n	48cc <__aeabi_dadd+0x254>
    48ca:	e0f3      	b.n	4ab4 <__aeabi_dadd+0x43c>
    48cc:	1aae      	subs	r6, r5, r2
    48ce:	46b0      	mov	r8, r6
    48d0:	4545      	cmp	r5, r8
    48d2:	41bf      	sbcs	r7, r7
    48d4:	1a0e      	subs	r6, r1, r0
    48d6:	427f      	negs	r7, r7
    48d8:	1bf6      	subs	r6, r6, r7
    48da:	0237      	lsls	r7, r6, #8
    48dc:	d400      	bmi.n	48e0 <__aeabi_dadd+0x268>
    48de:	e08f      	b.n	4a00 <__aeabi_dadd+0x388>
    48e0:	1b55      	subs	r5, r2, r5
    48e2:	42aa      	cmp	r2, r5
    48e4:	41b6      	sbcs	r6, r6
    48e6:	1a41      	subs	r1, r0, r1
    48e8:	4276      	negs	r6, r6
    48ea:	1b8e      	subs	r6, r1, r6
    48ec:	469a      	mov	sl, r3
    48ee:	e74b      	b.n	4788 <__aeabi_dadd+0x110>
    48f0:	4656      	mov	r6, sl
    48f2:	2200      	movs	r2, #0
    48f4:	2500      	movs	r5, #0
    48f6:	e707      	b.n	4708 <__aeabi_dadd+0x90>
    48f8:	0028      	movs	r0, r5
    48fa:	f001 fd8b 	bl	6414 <__clzsi2>
    48fe:	3020      	adds	r0, #32
    4900:	0003      	movs	r3, r0
    4902:	3b08      	subs	r3, #8
    4904:	2b1f      	cmp	r3, #31
    4906:	dc00      	bgt.n	490a <__aeabi_dadd+0x292>
    4908:	e749      	b.n	479e <__aeabi_dadd+0x126>
    490a:	002a      	movs	r2, r5
    490c:	3828      	subs	r0, #40	; 0x28
    490e:	4082      	lsls	r2, r0
    4910:	2500      	movs	r5, #0
    4912:	429c      	cmp	r4, r3
    4914:	dc00      	bgt.n	4918 <__aeabi_dadd+0x2a0>
    4916:	e74d      	b.n	47b4 <__aeabi_dadd+0x13c>
    4918:	493f      	ldr	r1, [pc, #252]	; (4a18 <__aeabi_dadd+0x3a0>)
    491a:	1ae4      	subs	r4, r4, r3
    491c:	4011      	ands	r1, r2
    491e:	e6d4      	b.n	46ca <__aeabi_dadd+0x52>
    4920:	4302      	orrs	r2, r0
    4922:	1e50      	subs	r0, r2, #1
    4924:	4182      	sbcs	r2, r0
    4926:	b2d3      	uxtb	r3, r2
    4928:	2200      	movs	r2, #0
    492a:	e722      	b.n	4772 <__aeabi_dadd+0xfa>
    492c:	2b00      	cmp	r3, #0
    492e:	d000      	beq.n	4932 <__aeabi_dadd+0x2ba>
    4930:	e0f3      	b.n	4b1a <__aeabi_dadd+0x4a2>
    4932:	1c63      	adds	r3, r4, #1
    4934:	469c      	mov	ip, r3
    4936:	055b      	lsls	r3, r3, #21
    4938:	0d5b      	lsrs	r3, r3, #21
    493a:	2b01      	cmp	r3, #1
    493c:	dc00      	bgt.n	4940 <__aeabi_dadd+0x2c8>
    493e:	e09f      	b.n	4a80 <__aeabi_dadd+0x408>
    4940:	4b34      	ldr	r3, [pc, #208]	; (4a14 <__aeabi_dadd+0x39c>)
    4942:	459c      	cmp	ip, r3
    4944:	d100      	bne.n	4948 <__aeabi_dadd+0x2d0>
    4946:	e0c3      	b.n	4ad0 <__aeabi_dadd+0x458>
    4948:	18aa      	adds	r2, r5, r2
    494a:	1809      	adds	r1, r1, r0
    494c:	42aa      	cmp	r2, r5
    494e:	4180      	sbcs	r0, r0
    4950:	4240      	negs	r0, r0
    4952:	1841      	adds	r1, r0, r1
    4954:	07cd      	lsls	r5, r1, #31
    4956:	0852      	lsrs	r2, r2, #1
    4958:	4315      	orrs	r5, r2
    495a:	0849      	lsrs	r1, r1, #1
    495c:	4664      	mov	r4, ip
    495e:	e6b4      	b.n	46ca <__aeabi_dadd+0x52>
    4960:	4b2c      	ldr	r3, [pc, #176]	; (4a14 <__aeabi_dadd+0x39c>)
    4962:	429c      	cmp	r4, r3
    4964:	d000      	beq.n	4968 <__aeabi_dadd+0x2f0>
    4966:	e6ec      	b.n	4742 <__aeabi_dadd+0xca>
    4968:	e6af      	b.n	46ca <__aeabi_dadd+0x52>
    496a:	0011      	movs	r1, r2
    496c:	3c1f      	subs	r4, #31
    496e:	40e1      	lsrs	r1, r4
    4970:	000c      	movs	r4, r1
    4972:	2b20      	cmp	r3, #32
    4974:	d100      	bne.n	4978 <__aeabi_dadd+0x300>
    4976:	e07f      	b.n	4a78 <__aeabi_dadd+0x400>
    4978:	2140      	movs	r1, #64	; 0x40
    497a:	1acb      	subs	r3, r1, r3
    497c:	409a      	lsls	r2, r3
    497e:	4315      	orrs	r5, r2
    4980:	1e6a      	subs	r2, r5, #1
    4982:	4195      	sbcs	r5, r2
    4984:	2100      	movs	r1, #0
    4986:	4325      	orrs	r5, r4
    4988:	2400      	movs	r4, #0
    498a:	e72d      	b.n	47e8 <__aeabi_dadd+0x170>
    498c:	0033      	movs	r3, r6
    498e:	0007      	movs	r7, r0
    4990:	3b20      	subs	r3, #32
    4992:	40df      	lsrs	r7, r3
    4994:	003b      	movs	r3, r7
    4996:	2e20      	cmp	r6, #32
    4998:	d070      	beq.n	4a7c <__aeabi_dadd+0x404>
    499a:	2740      	movs	r7, #64	; 0x40
    499c:	1bbe      	subs	r6, r7, r6
    499e:	40b0      	lsls	r0, r6
    49a0:	4302      	orrs	r2, r0
    49a2:	1e50      	subs	r0, r2, #1
    49a4:	4182      	sbcs	r2, r0
    49a6:	4313      	orrs	r3, r2
    49a8:	2200      	movs	r2, #0
    49aa:	e6e2      	b.n	4772 <__aeabi_dadd+0xfa>
    49ac:	2c00      	cmp	r4, #0
    49ae:	d04f      	beq.n	4a50 <__aeabi_dadd+0x3d8>
    49b0:	4c18      	ldr	r4, [pc, #96]	; (4a14 <__aeabi_dadd+0x39c>)
    49b2:	45a4      	cmp	ip, r4
    49b4:	d100      	bne.n	49b8 <__aeabi_dadd+0x340>
    49b6:	e0ab      	b.n	4b10 <__aeabi_dadd+0x498>
    49b8:	2480      	movs	r4, #128	; 0x80
    49ba:	0424      	lsls	r4, r4, #16
    49bc:	4276      	negs	r6, r6
    49be:	4321      	orrs	r1, r4
    49c0:	2e38      	cmp	r6, #56	; 0x38
    49c2:	dd00      	ble.n	49c6 <__aeabi_dadd+0x34e>
    49c4:	e0df      	b.n	4b86 <__aeabi_dadd+0x50e>
    49c6:	2e1f      	cmp	r6, #31
    49c8:	dd00      	ble.n	49cc <__aeabi_dadd+0x354>
    49ca:	e143      	b.n	4c54 <__aeabi_dadd+0x5dc>
    49cc:	2720      	movs	r7, #32
    49ce:	1bbc      	subs	r4, r7, r6
    49d0:	46a1      	mov	r9, r4
    49d2:	000c      	movs	r4, r1
    49d4:	464f      	mov	r7, r9
    49d6:	40bc      	lsls	r4, r7
    49d8:	46a0      	mov	r8, r4
    49da:	002c      	movs	r4, r5
    49dc:	4647      	mov	r7, r8
    49de:	40f4      	lsrs	r4, r6
    49e0:	433c      	orrs	r4, r7
    49e2:	464f      	mov	r7, r9
    49e4:	40bd      	lsls	r5, r7
    49e6:	1e6f      	subs	r7, r5, #1
    49e8:	41bd      	sbcs	r5, r7
    49ea:	40f1      	lsrs	r1, r6
    49ec:	432c      	orrs	r4, r5
    49ee:	1b15      	subs	r5, r2, r4
    49f0:	42aa      	cmp	r2, r5
    49f2:	4192      	sbcs	r2, r2
    49f4:	1a41      	subs	r1, r0, r1
    49f6:	4252      	negs	r2, r2
    49f8:	1a89      	subs	r1, r1, r2
    49fa:	4664      	mov	r4, ip
    49fc:	469a      	mov	sl, r3
    49fe:	e6bf      	b.n	4780 <__aeabi_dadd+0x108>
    4a00:	4641      	mov	r1, r8
    4a02:	4645      	mov	r5, r8
    4a04:	4331      	orrs	r1, r6
    4a06:	d000      	beq.n	4a0a <__aeabi_dadd+0x392>
    4a08:	e6be      	b.n	4788 <__aeabi_dadd+0x110>
    4a0a:	2600      	movs	r6, #0
    4a0c:	2400      	movs	r4, #0
    4a0e:	2500      	movs	r5, #0
    4a10:	e6f2      	b.n	47f8 <__aeabi_dadd+0x180>
    4a12:	46c0      	nop			; (mov r8, r8)
    4a14:	000007ff 	.word	0x000007ff
    4a18:	ff7fffff 	.word	0xff7fffff
    4a1c:	800fffff 	.word	0x800fffff
    4a20:	2b1f      	cmp	r3, #31
    4a22:	dc59      	bgt.n	4ad8 <__aeabi_dadd+0x460>
    4a24:	2720      	movs	r7, #32
    4a26:	1aff      	subs	r7, r7, r3
    4a28:	46bc      	mov	ip, r7
    4a2a:	0007      	movs	r7, r0
    4a2c:	4663      	mov	r3, ip
    4a2e:	409f      	lsls	r7, r3
    4a30:	465b      	mov	r3, fp
    4a32:	46b9      	mov	r9, r7
    4a34:	0017      	movs	r7, r2
    4a36:	40df      	lsrs	r7, r3
    4a38:	46b8      	mov	r8, r7
    4a3a:	464f      	mov	r7, r9
    4a3c:	4643      	mov	r3, r8
    4a3e:	431f      	orrs	r7, r3
    4a40:	4663      	mov	r3, ip
    4a42:	409a      	lsls	r2, r3
    4a44:	1e53      	subs	r3, r2, #1
    4a46:	419a      	sbcs	r2, r3
    4a48:	465b      	mov	r3, fp
    4a4a:	433a      	orrs	r2, r7
    4a4c:	40d8      	lsrs	r0, r3
    4a4e:	e6f4      	b.n	483a <__aeabi_dadd+0x1c2>
    4a50:	000c      	movs	r4, r1
    4a52:	432c      	orrs	r4, r5
    4a54:	d05c      	beq.n	4b10 <__aeabi_dadd+0x498>
    4a56:	43f6      	mvns	r6, r6
    4a58:	2e00      	cmp	r6, #0
    4a5a:	d155      	bne.n	4b08 <__aeabi_dadd+0x490>
    4a5c:	1b55      	subs	r5, r2, r5
    4a5e:	42aa      	cmp	r2, r5
    4a60:	41a4      	sbcs	r4, r4
    4a62:	1a41      	subs	r1, r0, r1
    4a64:	4264      	negs	r4, r4
    4a66:	1b09      	subs	r1, r1, r4
    4a68:	469a      	mov	sl, r3
    4a6a:	4664      	mov	r4, ip
    4a6c:	e688      	b.n	4780 <__aeabi_dadd+0x108>
    4a6e:	4f96      	ldr	r7, [pc, #600]	; (4cc8 <__aeabi_dadd+0x650>)
    4a70:	42bc      	cmp	r4, r7
    4a72:	d000      	beq.n	4a76 <__aeabi_dadd+0x3fe>
    4a74:	e6d8      	b.n	4828 <__aeabi_dadd+0x1b0>
    4a76:	e628      	b.n	46ca <__aeabi_dadd+0x52>
    4a78:	2200      	movs	r2, #0
    4a7a:	e780      	b.n	497e <__aeabi_dadd+0x306>
    4a7c:	2000      	movs	r0, #0
    4a7e:	e78f      	b.n	49a0 <__aeabi_dadd+0x328>
    4a80:	000b      	movs	r3, r1
    4a82:	432b      	orrs	r3, r5
    4a84:	2c00      	cmp	r4, #0
    4a86:	d000      	beq.n	4a8a <__aeabi_dadd+0x412>
    4a88:	e0c2      	b.n	4c10 <__aeabi_dadd+0x598>
    4a8a:	2b00      	cmp	r3, #0
    4a8c:	d100      	bne.n	4a90 <__aeabi_dadd+0x418>
    4a8e:	e101      	b.n	4c94 <__aeabi_dadd+0x61c>
    4a90:	0003      	movs	r3, r0
    4a92:	4313      	orrs	r3, r2
    4a94:	d100      	bne.n	4a98 <__aeabi_dadd+0x420>
    4a96:	e618      	b.n	46ca <__aeabi_dadd+0x52>
    4a98:	18ab      	adds	r3, r5, r2
    4a9a:	42ab      	cmp	r3, r5
    4a9c:	41b6      	sbcs	r6, r6
    4a9e:	1809      	adds	r1, r1, r0
    4aa0:	4276      	negs	r6, r6
    4aa2:	1871      	adds	r1, r6, r1
    4aa4:	020a      	lsls	r2, r1, #8
    4aa6:	d400      	bmi.n	4aaa <__aeabi_dadd+0x432>
    4aa8:	e109      	b.n	4cbe <__aeabi_dadd+0x646>
    4aaa:	4a88      	ldr	r2, [pc, #544]	; (4ccc <__aeabi_dadd+0x654>)
    4aac:	001d      	movs	r5, r3
    4aae:	4011      	ands	r1, r2
    4ab0:	4664      	mov	r4, ip
    4ab2:	e60a      	b.n	46ca <__aeabi_dadd+0x52>
    4ab4:	2c00      	cmp	r4, #0
    4ab6:	d15b      	bne.n	4b70 <__aeabi_dadd+0x4f8>
    4ab8:	000e      	movs	r6, r1
    4aba:	432e      	orrs	r6, r5
    4abc:	d000      	beq.n	4ac0 <__aeabi_dadd+0x448>
    4abe:	e08a      	b.n	4bd6 <__aeabi_dadd+0x55e>
    4ac0:	0001      	movs	r1, r0
    4ac2:	4311      	orrs	r1, r2
    4ac4:	d100      	bne.n	4ac8 <__aeabi_dadd+0x450>
    4ac6:	e0c2      	b.n	4c4e <__aeabi_dadd+0x5d6>
    4ac8:	0001      	movs	r1, r0
    4aca:	0015      	movs	r5, r2
    4acc:	469a      	mov	sl, r3
    4ace:	e5fc      	b.n	46ca <__aeabi_dadd+0x52>
    4ad0:	4664      	mov	r4, ip
    4ad2:	2100      	movs	r1, #0
    4ad4:	2500      	movs	r5, #0
    4ad6:	e68f      	b.n	47f8 <__aeabi_dadd+0x180>
    4ad8:	2320      	movs	r3, #32
    4ada:	425b      	negs	r3, r3
    4adc:	469c      	mov	ip, r3
    4ade:	44dc      	add	ip, fp
    4ae0:	4663      	mov	r3, ip
    4ae2:	0007      	movs	r7, r0
    4ae4:	40df      	lsrs	r7, r3
    4ae6:	465b      	mov	r3, fp
    4ae8:	46bc      	mov	ip, r7
    4aea:	2b20      	cmp	r3, #32
    4aec:	d100      	bne.n	4af0 <__aeabi_dadd+0x478>
    4aee:	e0ac      	b.n	4c4a <__aeabi_dadd+0x5d2>
    4af0:	2340      	movs	r3, #64	; 0x40
    4af2:	465f      	mov	r7, fp
    4af4:	1bdb      	subs	r3, r3, r7
    4af6:	4098      	lsls	r0, r3
    4af8:	4302      	orrs	r2, r0
    4afa:	1e50      	subs	r0, r2, #1
    4afc:	4182      	sbcs	r2, r0
    4afe:	4663      	mov	r3, ip
    4b00:	4313      	orrs	r3, r2
    4b02:	001a      	movs	r2, r3
    4b04:	2000      	movs	r0, #0
    4b06:	e698      	b.n	483a <__aeabi_dadd+0x1c2>
    4b08:	4c6f      	ldr	r4, [pc, #444]	; (4cc8 <__aeabi_dadd+0x650>)
    4b0a:	45a4      	cmp	ip, r4
    4b0c:	d000      	beq.n	4b10 <__aeabi_dadd+0x498>
    4b0e:	e757      	b.n	49c0 <__aeabi_dadd+0x348>
    4b10:	0001      	movs	r1, r0
    4b12:	0015      	movs	r5, r2
    4b14:	4664      	mov	r4, ip
    4b16:	469a      	mov	sl, r3
    4b18:	e5d7      	b.n	46ca <__aeabi_dadd+0x52>
    4b1a:	2c00      	cmp	r4, #0
    4b1c:	d139      	bne.n	4b92 <__aeabi_dadd+0x51a>
    4b1e:	000c      	movs	r4, r1
    4b20:	432c      	orrs	r4, r5
    4b22:	d06e      	beq.n	4c02 <__aeabi_dadd+0x58a>
    4b24:	43db      	mvns	r3, r3
    4b26:	2b00      	cmp	r3, #0
    4b28:	d01a      	beq.n	4b60 <__aeabi_dadd+0x4e8>
    4b2a:	4c67      	ldr	r4, [pc, #412]	; (4cc8 <__aeabi_dadd+0x650>)
    4b2c:	45a4      	cmp	ip, r4
    4b2e:	d068      	beq.n	4c02 <__aeabi_dadd+0x58a>
    4b30:	2b38      	cmp	r3, #56	; 0x38
    4b32:	dd00      	ble.n	4b36 <__aeabi_dadd+0x4be>
    4b34:	e0a4      	b.n	4c80 <__aeabi_dadd+0x608>
    4b36:	2b1f      	cmp	r3, #31
    4b38:	dd00      	ble.n	4b3c <__aeabi_dadd+0x4c4>
    4b3a:	e0ae      	b.n	4c9a <__aeabi_dadd+0x622>
    4b3c:	2420      	movs	r4, #32
    4b3e:	000f      	movs	r7, r1
    4b40:	1ae4      	subs	r4, r4, r3
    4b42:	40a7      	lsls	r7, r4
    4b44:	46b9      	mov	r9, r7
    4b46:	002f      	movs	r7, r5
    4b48:	40df      	lsrs	r7, r3
    4b4a:	46b8      	mov	r8, r7
    4b4c:	46a3      	mov	fp, r4
    4b4e:	464f      	mov	r7, r9
    4b50:	4644      	mov	r4, r8
    4b52:	4327      	orrs	r7, r4
    4b54:	465c      	mov	r4, fp
    4b56:	40a5      	lsls	r5, r4
    4b58:	1e6c      	subs	r4, r5, #1
    4b5a:	41a5      	sbcs	r5, r4
    4b5c:	40d9      	lsrs	r1, r3
    4b5e:	433d      	orrs	r5, r7
    4b60:	18ad      	adds	r5, r5, r2
    4b62:	4295      	cmp	r5, r2
    4b64:	419b      	sbcs	r3, r3
    4b66:	1809      	adds	r1, r1, r0
    4b68:	425b      	negs	r3, r3
    4b6a:	1859      	adds	r1, r3, r1
    4b6c:	4664      	mov	r4, ip
    4b6e:	e66b      	b.n	4848 <__aeabi_dadd+0x1d0>
    4b70:	000c      	movs	r4, r1
    4b72:	432c      	orrs	r4, r5
    4b74:	d115      	bne.n	4ba2 <__aeabi_dadd+0x52a>
    4b76:	0001      	movs	r1, r0
    4b78:	4311      	orrs	r1, r2
    4b7a:	d07b      	beq.n	4c74 <__aeabi_dadd+0x5fc>
    4b7c:	0001      	movs	r1, r0
    4b7e:	0015      	movs	r5, r2
    4b80:	469a      	mov	sl, r3
    4b82:	4c51      	ldr	r4, [pc, #324]	; (4cc8 <__aeabi_dadd+0x650>)
    4b84:	e5a1      	b.n	46ca <__aeabi_dadd+0x52>
    4b86:	430d      	orrs	r5, r1
    4b88:	1e69      	subs	r1, r5, #1
    4b8a:	418d      	sbcs	r5, r1
    4b8c:	2100      	movs	r1, #0
    4b8e:	b2ec      	uxtb	r4, r5
    4b90:	e72d      	b.n	49ee <__aeabi_dadd+0x376>
    4b92:	4c4d      	ldr	r4, [pc, #308]	; (4cc8 <__aeabi_dadd+0x650>)
    4b94:	45a4      	cmp	ip, r4
    4b96:	d034      	beq.n	4c02 <__aeabi_dadd+0x58a>
    4b98:	2480      	movs	r4, #128	; 0x80
    4b9a:	0424      	lsls	r4, r4, #16
    4b9c:	425b      	negs	r3, r3
    4b9e:	4321      	orrs	r1, r4
    4ba0:	e7c6      	b.n	4b30 <__aeabi_dadd+0x4b8>
    4ba2:	0004      	movs	r4, r0
    4ba4:	4314      	orrs	r4, r2
    4ba6:	d04e      	beq.n	4c46 <__aeabi_dadd+0x5ce>
    4ba8:	08ed      	lsrs	r5, r5, #3
    4baa:	074c      	lsls	r4, r1, #29
    4bac:	432c      	orrs	r4, r5
    4bae:	2580      	movs	r5, #128	; 0x80
    4bb0:	08c9      	lsrs	r1, r1, #3
    4bb2:	032d      	lsls	r5, r5, #12
    4bb4:	4229      	tst	r1, r5
    4bb6:	d008      	beq.n	4bca <__aeabi_dadd+0x552>
    4bb8:	08c6      	lsrs	r6, r0, #3
    4bba:	422e      	tst	r6, r5
    4bbc:	d105      	bne.n	4bca <__aeabi_dadd+0x552>
    4bbe:	08d2      	lsrs	r2, r2, #3
    4bc0:	0741      	lsls	r1, r0, #29
    4bc2:	4311      	orrs	r1, r2
    4bc4:	000c      	movs	r4, r1
    4bc6:	469a      	mov	sl, r3
    4bc8:	0031      	movs	r1, r6
    4bca:	0f62      	lsrs	r2, r4, #29
    4bcc:	00c9      	lsls	r1, r1, #3
    4bce:	00e5      	lsls	r5, r4, #3
    4bd0:	4311      	orrs	r1, r2
    4bd2:	4c3d      	ldr	r4, [pc, #244]	; (4cc8 <__aeabi_dadd+0x650>)
    4bd4:	e579      	b.n	46ca <__aeabi_dadd+0x52>
    4bd6:	0006      	movs	r6, r0
    4bd8:	4316      	orrs	r6, r2
    4bda:	d100      	bne.n	4bde <__aeabi_dadd+0x566>
    4bdc:	e575      	b.n	46ca <__aeabi_dadd+0x52>
    4bde:	1aae      	subs	r6, r5, r2
    4be0:	46b0      	mov	r8, r6
    4be2:	4545      	cmp	r5, r8
    4be4:	41bf      	sbcs	r7, r7
    4be6:	1a0e      	subs	r6, r1, r0
    4be8:	427f      	negs	r7, r7
    4bea:	1bf6      	subs	r6, r6, r7
    4bec:	0237      	lsls	r7, r6, #8
    4bee:	d400      	bmi.n	4bf2 <__aeabi_dadd+0x57a>
    4bf0:	e5f4      	b.n	47dc <__aeabi_dadd+0x164>
    4bf2:	1b55      	subs	r5, r2, r5
    4bf4:	42aa      	cmp	r2, r5
    4bf6:	41b6      	sbcs	r6, r6
    4bf8:	1a41      	subs	r1, r0, r1
    4bfa:	4276      	negs	r6, r6
    4bfc:	1b89      	subs	r1, r1, r6
    4bfe:	469a      	mov	sl, r3
    4c00:	e563      	b.n	46ca <__aeabi_dadd+0x52>
    4c02:	0001      	movs	r1, r0
    4c04:	0015      	movs	r5, r2
    4c06:	4664      	mov	r4, ip
    4c08:	e55f      	b.n	46ca <__aeabi_dadd+0x52>
    4c0a:	2200      	movs	r2, #0
    4c0c:	2500      	movs	r5, #0
    4c0e:	e57b      	b.n	4708 <__aeabi_dadd+0x90>
    4c10:	2b00      	cmp	r3, #0
    4c12:	d03b      	beq.n	4c8c <__aeabi_dadd+0x614>
    4c14:	0003      	movs	r3, r0
    4c16:	4313      	orrs	r3, r2
    4c18:	d015      	beq.n	4c46 <__aeabi_dadd+0x5ce>
    4c1a:	08ed      	lsrs	r5, r5, #3
    4c1c:	074b      	lsls	r3, r1, #29
    4c1e:	432b      	orrs	r3, r5
    4c20:	2580      	movs	r5, #128	; 0x80
    4c22:	08c9      	lsrs	r1, r1, #3
    4c24:	032d      	lsls	r5, r5, #12
    4c26:	4229      	tst	r1, r5
    4c28:	d007      	beq.n	4c3a <__aeabi_dadd+0x5c2>
    4c2a:	08c4      	lsrs	r4, r0, #3
    4c2c:	422c      	tst	r4, r5
    4c2e:	d104      	bne.n	4c3a <__aeabi_dadd+0x5c2>
    4c30:	0741      	lsls	r1, r0, #29
    4c32:	000b      	movs	r3, r1
    4c34:	0021      	movs	r1, r4
    4c36:	08d2      	lsrs	r2, r2, #3
    4c38:	4313      	orrs	r3, r2
    4c3a:	00c9      	lsls	r1, r1, #3
    4c3c:	0f5a      	lsrs	r2, r3, #29
    4c3e:	4311      	orrs	r1, r2
    4c40:	00dd      	lsls	r5, r3, #3
    4c42:	4c21      	ldr	r4, [pc, #132]	; (4cc8 <__aeabi_dadd+0x650>)
    4c44:	e541      	b.n	46ca <__aeabi_dadd+0x52>
    4c46:	4c20      	ldr	r4, [pc, #128]	; (4cc8 <__aeabi_dadd+0x650>)
    4c48:	e53f      	b.n	46ca <__aeabi_dadd+0x52>
    4c4a:	2000      	movs	r0, #0
    4c4c:	e754      	b.n	4af8 <__aeabi_dadd+0x480>
    4c4e:	2600      	movs	r6, #0
    4c50:	2500      	movs	r5, #0
    4c52:	e5d1      	b.n	47f8 <__aeabi_dadd+0x180>
    4c54:	0034      	movs	r4, r6
    4c56:	000f      	movs	r7, r1
    4c58:	3c20      	subs	r4, #32
    4c5a:	40e7      	lsrs	r7, r4
    4c5c:	003c      	movs	r4, r7
    4c5e:	2e20      	cmp	r6, #32
    4c60:	d02b      	beq.n	4cba <__aeabi_dadd+0x642>
    4c62:	2740      	movs	r7, #64	; 0x40
    4c64:	1bbe      	subs	r6, r7, r6
    4c66:	40b1      	lsls	r1, r6
    4c68:	430d      	orrs	r5, r1
    4c6a:	1e69      	subs	r1, r5, #1
    4c6c:	418d      	sbcs	r5, r1
    4c6e:	2100      	movs	r1, #0
    4c70:	432c      	orrs	r4, r5
    4c72:	e6bc      	b.n	49ee <__aeabi_dadd+0x376>
    4c74:	2180      	movs	r1, #128	; 0x80
    4c76:	2600      	movs	r6, #0
    4c78:	0309      	lsls	r1, r1, #12
    4c7a:	4c13      	ldr	r4, [pc, #76]	; (4cc8 <__aeabi_dadd+0x650>)
    4c7c:	2500      	movs	r5, #0
    4c7e:	e5bb      	b.n	47f8 <__aeabi_dadd+0x180>
    4c80:	430d      	orrs	r5, r1
    4c82:	1e69      	subs	r1, r5, #1
    4c84:	418d      	sbcs	r5, r1
    4c86:	2100      	movs	r1, #0
    4c88:	b2ed      	uxtb	r5, r5
    4c8a:	e769      	b.n	4b60 <__aeabi_dadd+0x4e8>
    4c8c:	0001      	movs	r1, r0
    4c8e:	0015      	movs	r5, r2
    4c90:	4c0d      	ldr	r4, [pc, #52]	; (4cc8 <__aeabi_dadd+0x650>)
    4c92:	e51a      	b.n	46ca <__aeabi_dadd+0x52>
    4c94:	0001      	movs	r1, r0
    4c96:	0015      	movs	r5, r2
    4c98:	e517      	b.n	46ca <__aeabi_dadd+0x52>
    4c9a:	001c      	movs	r4, r3
    4c9c:	000f      	movs	r7, r1
    4c9e:	3c20      	subs	r4, #32
    4ca0:	40e7      	lsrs	r7, r4
    4ca2:	003c      	movs	r4, r7
    4ca4:	2b20      	cmp	r3, #32
    4ca6:	d00c      	beq.n	4cc2 <__aeabi_dadd+0x64a>
    4ca8:	2740      	movs	r7, #64	; 0x40
    4caa:	1afb      	subs	r3, r7, r3
    4cac:	4099      	lsls	r1, r3
    4cae:	430d      	orrs	r5, r1
    4cb0:	1e69      	subs	r1, r5, #1
    4cb2:	418d      	sbcs	r5, r1
    4cb4:	2100      	movs	r1, #0
    4cb6:	4325      	orrs	r5, r4
    4cb8:	e752      	b.n	4b60 <__aeabi_dadd+0x4e8>
    4cba:	2100      	movs	r1, #0
    4cbc:	e7d4      	b.n	4c68 <__aeabi_dadd+0x5f0>
    4cbe:	001d      	movs	r5, r3
    4cc0:	e592      	b.n	47e8 <__aeabi_dadd+0x170>
    4cc2:	2100      	movs	r1, #0
    4cc4:	e7f3      	b.n	4cae <__aeabi_dadd+0x636>
    4cc6:	46c0      	nop			; (mov r8, r8)
    4cc8:	000007ff 	.word	0x000007ff
    4ccc:	ff7fffff 	.word	0xff7fffff

00004cd0 <__aeabi_ddiv>:
    4cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cd2:	4656      	mov	r6, sl
    4cd4:	464d      	mov	r5, r9
    4cd6:	4644      	mov	r4, r8
    4cd8:	465f      	mov	r7, fp
    4cda:	b4f0      	push	{r4, r5, r6, r7}
    4cdc:	001d      	movs	r5, r3
    4cde:	030e      	lsls	r6, r1, #12
    4ce0:	004c      	lsls	r4, r1, #1
    4ce2:	0fcb      	lsrs	r3, r1, #31
    4ce4:	b087      	sub	sp, #28
    4ce6:	0007      	movs	r7, r0
    4ce8:	4692      	mov	sl, r2
    4cea:	4681      	mov	r9, r0
    4cec:	0b36      	lsrs	r6, r6, #12
    4cee:	0d64      	lsrs	r4, r4, #21
    4cf0:	4698      	mov	r8, r3
    4cf2:	d06a      	beq.n	4dca <__aeabi_ddiv+0xfa>
    4cf4:	4b6d      	ldr	r3, [pc, #436]	; (4eac <__aeabi_ddiv+0x1dc>)
    4cf6:	429c      	cmp	r4, r3
    4cf8:	d035      	beq.n	4d66 <__aeabi_ddiv+0x96>
    4cfa:	2280      	movs	r2, #128	; 0x80
    4cfc:	0f43      	lsrs	r3, r0, #29
    4cfe:	0412      	lsls	r2, r2, #16
    4d00:	4313      	orrs	r3, r2
    4d02:	00f6      	lsls	r6, r6, #3
    4d04:	431e      	orrs	r6, r3
    4d06:	00c3      	lsls	r3, r0, #3
    4d08:	4699      	mov	r9, r3
    4d0a:	4b69      	ldr	r3, [pc, #420]	; (4eb0 <__aeabi_ddiv+0x1e0>)
    4d0c:	2700      	movs	r7, #0
    4d0e:	469c      	mov	ip, r3
    4d10:	2300      	movs	r3, #0
    4d12:	4464      	add	r4, ip
    4d14:	9302      	str	r3, [sp, #8]
    4d16:	032b      	lsls	r3, r5, #12
    4d18:	0068      	lsls	r0, r5, #1
    4d1a:	0b1b      	lsrs	r3, r3, #12
    4d1c:	0fed      	lsrs	r5, r5, #31
    4d1e:	4651      	mov	r1, sl
    4d20:	469b      	mov	fp, r3
    4d22:	0d40      	lsrs	r0, r0, #21
    4d24:	9500      	str	r5, [sp, #0]
    4d26:	d100      	bne.n	4d2a <__aeabi_ddiv+0x5a>
    4d28:	e078      	b.n	4e1c <__aeabi_ddiv+0x14c>
    4d2a:	4b60      	ldr	r3, [pc, #384]	; (4eac <__aeabi_ddiv+0x1dc>)
    4d2c:	4298      	cmp	r0, r3
    4d2e:	d06c      	beq.n	4e0a <__aeabi_ddiv+0x13a>
    4d30:	465b      	mov	r3, fp
    4d32:	00da      	lsls	r2, r3, #3
    4d34:	0f4b      	lsrs	r3, r1, #29
    4d36:	2180      	movs	r1, #128	; 0x80
    4d38:	0409      	lsls	r1, r1, #16
    4d3a:	430b      	orrs	r3, r1
    4d3c:	4313      	orrs	r3, r2
    4d3e:	469b      	mov	fp, r3
    4d40:	4653      	mov	r3, sl
    4d42:	00d9      	lsls	r1, r3, #3
    4d44:	4b5a      	ldr	r3, [pc, #360]	; (4eb0 <__aeabi_ddiv+0x1e0>)
    4d46:	469c      	mov	ip, r3
    4d48:	2300      	movs	r3, #0
    4d4a:	4460      	add	r0, ip
    4d4c:	4642      	mov	r2, r8
    4d4e:	1a20      	subs	r0, r4, r0
    4d50:	406a      	eors	r2, r5
    4d52:	4692      	mov	sl, r2
    4d54:	9001      	str	r0, [sp, #4]
    4d56:	431f      	orrs	r7, r3
    4d58:	2f0f      	cmp	r7, #15
    4d5a:	d900      	bls.n	4d5e <__aeabi_ddiv+0x8e>
    4d5c:	e0b0      	b.n	4ec0 <__aeabi_ddiv+0x1f0>
    4d5e:	4855      	ldr	r0, [pc, #340]	; (4eb4 <__aeabi_ddiv+0x1e4>)
    4d60:	00bf      	lsls	r7, r7, #2
    4d62:	59c0      	ldr	r0, [r0, r7]
    4d64:	4687      	mov	pc, r0
    4d66:	4337      	orrs	r7, r6
    4d68:	d000      	beq.n	4d6c <__aeabi_ddiv+0x9c>
    4d6a:	e088      	b.n	4e7e <__aeabi_ddiv+0x1ae>
    4d6c:	2300      	movs	r3, #0
    4d6e:	4699      	mov	r9, r3
    4d70:	3302      	adds	r3, #2
    4d72:	2708      	movs	r7, #8
    4d74:	2600      	movs	r6, #0
    4d76:	9302      	str	r3, [sp, #8]
    4d78:	e7cd      	b.n	4d16 <__aeabi_ddiv+0x46>
    4d7a:	4643      	mov	r3, r8
    4d7c:	46b3      	mov	fp, r6
    4d7e:	4649      	mov	r1, r9
    4d80:	9300      	str	r3, [sp, #0]
    4d82:	9b02      	ldr	r3, [sp, #8]
    4d84:	9a00      	ldr	r2, [sp, #0]
    4d86:	4692      	mov	sl, r2
    4d88:	2b02      	cmp	r3, #2
    4d8a:	d000      	beq.n	4d8e <__aeabi_ddiv+0xbe>
    4d8c:	e1bf      	b.n	510e <__aeabi_ddiv+0x43e>
    4d8e:	2100      	movs	r1, #0
    4d90:	4653      	mov	r3, sl
    4d92:	2201      	movs	r2, #1
    4d94:	2600      	movs	r6, #0
    4d96:	4689      	mov	r9, r1
    4d98:	401a      	ands	r2, r3
    4d9a:	4b44      	ldr	r3, [pc, #272]	; (4eac <__aeabi_ddiv+0x1dc>)
    4d9c:	2100      	movs	r1, #0
    4d9e:	0336      	lsls	r6, r6, #12
    4da0:	0d0c      	lsrs	r4, r1, #20
    4da2:	0524      	lsls	r4, r4, #20
    4da4:	0b36      	lsrs	r6, r6, #12
    4da6:	4326      	orrs	r6, r4
    4da8:	4c43      	ldr	r4, [pc, #268]	; (4eb8 <__aeabi_ddiv+0x1e8>)
    4daa:	051b      	lsls	r3, r3, #20
    4dac:	4026      	ands	r6, r4
    4dae:	431e      	orrs	r6, r3
    4db0:	0076      	lsls	r6, r6, #1
    4db2:	07d2      	lsls	r2, r2, #31
    4db4:	0876      	lsrs	r6, r6, #1
    4db6:	4316      	orrs	r6, r2
    4db8:	4648      	mov	r0, r9
    4dba:	0031      	movs	r1, r6
    4dbc:	b007      	add	sp, #28
    4dbe:	bc3c      	pop	{r2, r3, r4, r5}
    4dc0:	4690      	mov	r8, r2
    4dc2:	4699      	mov	r9, r3
    4dc4:	46a2      	mov	sl, r4
    4dc6:	46ab      	mov	fp, r5
    4dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4dca:	0033      	movs	r3, r6
    4dcc:	4303      	orrs	r3, r0
    4dce:	d04f      	beq.n	4e70 <__aeabi_ddiv+0x1a0>
    4dd0:	2e00      	cmp	r6, #0
    4dd2:	d100      	bne.n	4dd6 <__aeabi_ddiv+0x106>
    4dd4:	e1bc      	b.n	5150 <__aeabi_ddiv+0x480>
    4dd6:	0030      	movs	r0, r6
    4dd8:	f001 fb1c 	bl	6414 <__clzsi2>
    4ddc:	0003      	movs	r3, r0
    4dde:	3b0b      	subs	r3, #11
    4de0:	2b1c      	cmp	r3, #28
    4de2:	dd00      	ble.n	4de6 <__aeabi_ddiv+0x116>
    4de4:	e1ad      	b.n	5142 <__aeabi_ddiv+0x472>
    4de6:	221d      	movs	r2, #29
    4de8:	0001      	movs	r1, r0
    4dea:	1ad3      	subs	r3, r2, r3
    4dec:	3908      	subs	r1, #8
    4dee:	003a      	movs	r2, r7
    4df0:	408f      	lsls	r7, r1
    4df2:	408e      	lsls	r6, r1
    4df4:	40da      	lsrs	r2, r3
    4df6:	46b9      	mov	r9, r7
    4df8:	4316      	orrs	r6, r2
    4dfa:	4b30      	ldr	r3, [pc, #192]	; (4ebc <__aeabi_ddiv+0x1ec>)
    4dfc:	2700      	movs	r7, #0
    4dfe:	469c      	mov	ip, r3
    4e00:	2300      	movs	r3, #0
    4e02:	4460      	add	r0, ip
    4e04:	4244      	negs	r4, r0
    4e06:	9302      	str	r3, [sp, #8]
    4e08:	e785      	b.n	4d16 <__aeabi_ddiv+0x46>
    4e0a:	4653      	mov	r3, sl
    4e0c:	465a      	mov	r2, fp
    4e0e:	4313      	orrs	r3, r2
    4e10:	d12c      	bne.n	4e6c <__aeabi_ddiv+0x19c>
    4e12:	2300      	movs	r3, #0
    4e14:	2100      	movs	r1, #0
    4e16:	469b      	mov	fp, r3
    4e18:	3302      	adds	r3, #2
    4e1a:	e797      	b.n	4d4c <__aeabi_ddiv+0x7c>
    4e1c:	430b      	orrs	r3, r1
    4e1e:	d020      	beq.n	4e62 <__aeabi_ddiv+0x192>
    4e20:	465b      	mov	r3, fp
    4e22:	2b00      	cmp	r3, #0
    4e24:	d100      	bne.n	4e28 <__aeabi_ddiv+0x158>
    4e26:	e19e      	b.n	5166 <__aeabi_ddiv+0x496>
    4e28:	4658      	mov	r0, fp
    4e2a:	f001 faf3 	bl	6414 <__clzsi2>
    4e2e:	0003      	movs	r3, r0
    4e30:	3b0b      	subs	r3, #11
    4e32:	2b1c      	cmp	r3, #28
    4e34:	dd00      	ble.n	4e38 <__aeabi_ddiv+0x168>
    4e36:	e18f      	b.n	5158 <__aeabi_ddiv+0x488>
    4e38:	0002      	movs	r2, r0
    4e3a:	4659      	mov	r1, fp
    4e3c:	3a08      	subs	r2, #8
    4e3e:	4091      	lsls	r1, r2
    4e40:	468b      	mov	fp, r1
    4e42:	211d      	movs	r1, #29
    4e44:	1acb      	subs	r3, r1, r3
    4e46:	4651      	mov	r1, sl
    4e48:	40d9      	lsrs	r1, r3
    4e4a:	000b      	movs	r3, r1
    4e4c:	4659      	mov	r1, fp
    4e4e:	430b      	orrs	r3, r1
    4e50:	4651      	mov	r1, sl
    4e52:	469b      	mov	fp, r3
    4e54:	4091      	lsls	r1, r2
    4e56:	4b19      	ldr	r3, [pc, #100]	; (4ebc <__aeabi_ddiv+0x1ec>)
    4e58:	469c      	mov	ip, r3
    4e5a:	4460      	add	r0, ip
    4e5c:	4240      	negs	r0, r0
    4e5e:	2300      	movs	r3, #0
    4e60:	e774      	b.n	4d4c <__aeabi_ddiv+0x7c>
    4e62:	2300      	movs	r3, #0
    4e64:	2100      	movs	r1, #0
    4e66:	469b      	mov	fp, r3
    4e68:	3301      	adds	r3, #1
    4e6a:	e76f      	b.n	4d4c <__aeabi_ddiv+0x7c>
    4e6c:	2303      	movs	r3, #3
    4e6e:	e76d      	b.n	4d4c <__aeabi_ddiv+0x7c>
    4e70:	2300      	movs	r3, #0
    4e72:	4699      	mov	r9, r3
    4e74:	3301      	adds	r3, #1
    4e76:	2704      	movs	r7, #4
    4e78:	2600      	movs	r6, #0
    4e7a:	9302      	str	r3, [sp, #8]
    4e7c:	e74b      	b.n	4d16 <__aeabi_ddiv+0x46>
    4e7e:	2303      	movs	r3, #3
    4e80:	270c      	movs	r7, #12
    4e82:	9302      	str	r3, [sp, #8]
    4e84:	e747      	b.n	4d16 <__aeabi_ddiv+0x46>
    4e86:	2201      	movs	r2, #1
    4e88:	1ad5      	subs	r5, r2, r3
    4e8a:	2d38      	cmp	r5, #56	; 0x38
    4e8c:	dc00      	bgt.n	4e90 <__aeabi_ddiv+0x1c0>
    4e8e:	e1b0      	b.n	51f2 <__aeabi_ddiv+0x522>
    4e90:	4653      	mov	r3, sl
    4e92:	401a      	ands	r2, r3
    4e94:	2100      	movs	r1, #0
    4e96:	2300      	movs	r3, #0
    4e98:	2600      	movs	r6, #0
    4e9a:	4689      	mov	r9, r1
    4e9c:	e77e      	b.n	4d9c <__aeabi_ddiv+0xcc>
    4e9e:	2300      	movs	r3, #0
    4ea0:	2680      	movs	r6, #128	; 0x80
    4ea2:	4699      	mov	r9, r3
    4ea4:	2200      	movs	r2, #0
    4ea6:	0336      	lsls	r6, r6, #12
    4ea8:	4b00      	ldr	r3, [pc, #0]	; (4eac <__aeabi_ddiv+0x1dc>)
    4eaa:	e777      	b.n	4d9c <__aeabi_ddiv+0xcc>
    4eac:	000007ff 	.word	0x000007ff
    4eb0:	fffffc01 	.word	0xfffffc01
    4eb4:	00006520 	.word	0x00006520
    4eb8:	800fffff 	.word	0x800fffff
    4ebc:	000003f3 	.word	0x000003f3
    4ec0:	455e      	cmp	r6, fp
    4ec2:	d900      	bls.n	4ec6 <__aeabi_ddiv+0x1f6>
    4ec4:	e172      	b.n	51ac <__aeabi_ddiv+0x4dc>
    4ec6:	d100      	bne.n	4eca <__aeabi_ddiv+0x1fa>
    4ec8:	e16d      	b.n	51a6 <__aeabi_ddiv+0x4d6>
    4eca:	9b01      	ldr	r3, [sp, #4]
    4ecc:	464d      	mov	r5, r9
    4ece:	3b01      	subs	r3, #1
    4ed0:	9301      	str	r3, [sp, #4]
    4ed2:	2300      	movs	r3, #0
    4ed4:	0034      	movs	r4, r6
    4ed6:	9302      	str	r3, [sp, #8]
    4ed8:	465b      	mov	r3, fp
    4eda:	021e      	lsls	r6, r3, #8
    4edc:	0e0b      	lsrs	r3, r1, #24
    4ede:	431e      	orrs	r6, r3
    4ee0:	020b      	lsls	r3, r1, #8
    4ee2:	9303      	str	r3, [sp, #12]
    4ee4:	0c33      	lsrs	r3, r6, #16
    4ee6:	4699      	mov	r9, r3
    4ee8:	0433      	lsls	r3, r6, #16
    4eea:	0c1b      	lsrs	r3, r3, #16
    4eec:	4649      	mov	r1, r9
    4eee:	0020      	movs	r0, r4
    4ef0:	9300      	str	r3, [sp, #0]
    4ef2:	f7ff f977 	bl	41e4 <__aeabi_uidiv>
    4ef6:	9b00      	ldr	r3, [sp, #0]
    4ef8:	0037      	movs	r7, r6
    4efa:	4343      	muls	r3, r0
    4efc:	0006      	movs	r6, r0
    4efe:	4649      	mov	r1, r9
    4f00:	0020      	movs	r0, r4
    4f02:	4698      	mov	r8, r3
    4f04:	f7ff f9f4 	bl	42f0 <__aeabi_uidivmod>
    4f08:	0c2c      	lsrs	r4, r5, #16
    4f0a:	0409      	lsls	r1, r1, #16
    4f0c:	430c      	orrs	r4, r1
    4f0e:	45a0      	cmp	r8, r4
    4f10:	d909      	bls.n	4f26 <__aeabi_ddiv+0x256>
    4f12:	19e4      	adds	r4, r4, r7
    4f14:	1e73      	subs	r3, r6, #1
    4f16:	42a7      	cmp	r7, r4
    4f18:	d900      	bls.n	4f1c <__aeabi_ddiv+0x24c>
    4f1a:	e15c      	b.n	51d6 <__aeabi_ddiv+0x506>
    4f1c:	45a0      	cmp	r8, r4
    4f1e:	d800      	bhi.n	4f22 <__aeabi_ddiv+0x252>
    4f20:	e159      	b.n	51d6 <__aeabi_ddiv+0x506>
    4f22:	3e02      	subs	r6, #2
    4f24:	19e4      	adds	r4, r4, r7
    4f26:	4643      	mov	r3, r8
    4f28:	1ae4      	subs	r4, r4, r3
    4f2a:	4649      	mov	r1, r9
    4f2c:	0020      	movs	r0, r4
    4f2e:	f7ff f959 	bl	41e4 <__aeabi_uidiv>
    4f32:	0003      	movs	r3, r0
    4f34:	9a00      	ldr	r2, [sp, #0]
    4f36:	4680      	mov	r8, r0
    4f38:	4353      	muls	r3, r2
    4f3a:	4649      	mov	r1, r9
    4f3c:	0020      	movs	r0, r4
    4f3e:	469b      	mov	fp, r3
    4f40:	f7ff f9d6 	bl	42f0 <__aeabi_uidivmod>
    4f44:	042a      	lsls	r2, r5, #16
    4f46:	0409      	lsls	r1, r1, #16
    4f48:	0c12      	lsrs	r2, r2, #16
    4f4a:	430a      	orrs	r2, r1
    4f4c:	4593      	cmp	fp, r2
    4f4e:	d90d      	bls.n	4f6c <__aeabi_ddiv+0x29c>
    4f50:	4643      	mov	r3, r8
    4f52:	19d2      	adds	r2, r2, r7
    4f54:	3b01      	subs	r3, #1
    4f56:	4297      	cmp	r7, r2
    4f58:	d900      	bls.n	4f5c <__aeabi_ddiv+0x28c>
    4f5a:	e13a      	b.n	51d2 <__aeabi_ddiv+0x502>
    4f5c:	4593      	cmp	fp, r2
    4f5e:	d800      	bhi.n	4f62 <__aeabi_ddiv+0x292>
    4f60:	e137      	b.n	51d2 <__aeabi_ddiv+0x502>
    4f62:	2302      	movs	r3, #2
    4f64:	425b      	negs	r3, r3
    4f66:	469c      	mov	ip, r3
    4f68:	19d2      	adds	r2, r2, r7
    4f6a:	44e0      	add	r8, ip
    4f6c:	465b      	mov	r3, fp
    4f6e:	1ad2      	subs	r2, r2, r3
    4f70:	4643      	mov	r3, r8
    4f72:	0436      	lsls	r6, r6, #16
    4f74:	4333      	orrs	r3, r6
    4f76:	469b      	mov	fp, r3
    4f78:	9903      	ldr	r1, [sp, #12]
    4f7a:	0c18      	lsrs	r0, r3, #16
    4f7c:	0c0b      	lsrs	r3, r1, #16
    4f7e:	001d      	movs	r5, r3
    4f80:	9305      	str	r3, [sp, #20]
    4f82:	0409      	lsls	r1, r1, #16
    4f84:	465b      	mov	r3, fp
    4f86:	0c09      	lsrs	r1, r1, #16
    4f88:	000c      	movs	r4, r1
    4f8a:	041b      	lsls	r3, r3, #16
    4f8c:	0c1b      	lsrs	r3, r3, #16
    4f8e:	4344      	muls	r4, r0
    4f90:	9104      	str	r1, [sp, #16]
    4f92:	4359      	muls	r1, r3
    4f94:	436b      	muls	r3, r5
    4f96:	4368      	muls	r0, r5
    4f98:	191b      	adds	r3, r3, r4
    4f9a:	0c0d      	lsrs	r5, r1, #16
    4f9c:	18eb      	adds	r3, r5, r3
    4f9e:	429c      	cmp	r4, r3
    4fa0:	d903      	bls.n	4faa <__aeabi_ddiv+0x2da>
    4fa2:	2480      	movs	r4, #128	; 0x80
    4fa4:	0264      	lsls	r4, r4, #9
    4fa6:	46a4      	mov	ip, r4
    4fa8:	4460      	add	r0, ip
    4faa:	0c1c      	lsrs	r4, r3, #16
    4fac:	0409      	lsls	r1, r1, #16
    4fae:	041b      	lsls	r3, r3, #16
    4fb0:	0c09      	lsrs	r1, r1, #16
    4fb2:	1820      	adds	r0, r4, r0
    4fb4:	185d      	adds	r5, r3, r1
    4fb6:	4282      	cmp	r2, r0
    4fb8:	d200      	bcs.n	4fbc <__aeabi_ddiv+0x2ec>
    4fba:	e0de      	b.n	517a <__aeabi_ddiv+0x4aa>
    4fbc:	d100      	bne.n	4fc0 <__aeabi_ddiv+0x2f0>
    4fbe:	e0d7      	b.n	5170 <__aeabi_ddiv+0x4a0>
    4fc0:	1a16      	subs	r6, r2, r0
    4fc2:	9b02      	ldr	r3, [sp, #8]
    4fc4:	469c      	mov	ip, r3
    4fc6:	1b5d      	subs	r5, r3, r5
    4fc8:	45ac      	cmp	ip, r5
    4fca:	419b      	sbcs	r3, r3
    4fcc:	425b      	negs	r3, r3
    4fce:	1af6      	subs	r6, r6, r3
    4fd0:	42b7      	cmp	r7, r6
    4fd2:	d100      	bne.n	4fd6 <__aeabi_ddiv+0x306>
    4fd4:	e106      	b.n	51e4 <__aeabi_ddiv+0x514>
    4fd6:	4649      	mov	r1, r9
    4fd8:	0030      	movs	r0, r6
    4fda:	f7ff f903 	bl	41e4 <__aeabi_uidiv>
    4fde:	9b00      	ldr	r3, [sp, #0]
    4fe0:	0004      	movs	r4, r0
    4fe2:	4343      	muls	r3, r0
    4fe4:	4649      	mov	r1, r9
    4fe6:	0030      	movs	r0, r6
    4fe8:	4698      	mov	r8, r3
    4fea:	f7ff f981 	bl	42f0 <__aeabi_uidivmod>
    4fee:	0c2e      	lsrs	r6, r5, #16
    4ff0:	0409      	lsls	r1, r1, #16
    4ff2:	430e      	orrs	r6, r1
    4ff4:	45b0      	cmp	r8, r6
    4ff6:	d909      	bls.n	500c <__aeabi_ddiv+0x33c>
    4ff8:	19f6      	adds	r6, r6, r7
    4ffa:	1e63      	subs	r3, r4, #1
    4ffc:	42b7      	cmp	r7, r6
    4ffe:	d900      	bls.n	5002 <__aeabi_ddiv+0x332>
    5000:	e0f3      	b.n	51ea <__aeabi_ddiv+0x51a>
    5002:	45b0      	cmp	r8, r6
    5004:	d800      	bhi.n	5008 <__aeabi_ddiv+0x338>
    5006:	e0f0      	b.n	51ea <__aeabi_ddiv+0x51a>
    5008:	3c02      	subs	r4, #2
    500a:	19f6      	adds	r6, r6, r7
    500c:	4643      	mov	r3, r8
    500e:	1af3      	subs	r3, r6, r3
    5010:	4649      	mov	r1, r9
    5012:	0018      	movs	r0, r3
    5014:	9302      	str	r3, [sp, #8]
    5016:	f7ff f8e5 	bl	41e4 <__aeabi_uidiv>
    501a:	9b00      	ldr	r3, [sp, #0]
    501c:	0006      	movs	r6, r0
    501e:	4343      	muls	r3, r0
    5020:	4649      	mov	r1, r9
    5022:	9802      	ldr	r0, [sp, #8]
    5024:	4698      	mov	r8, r3
    5026:	f7ff f963 	bl	42f0 <__aeabi_uidivmod>
    502a:	042d      	lsls	r5, r5, #16
    502c:	0409      	lsls	r1, r1, #16
    502e:	0c2d      	lsrs	r5, r5, #16
    5030:	430d      	orrs	r5, r1
    5032:	45a8      	cmp	r8, r5
    5034:	d909      	bls.n	504a <__aeabi_ddiv+0x37a>
    5036:	19ed      	adds	r5, r5, r7
    5038:	1e73      	subs	r3, r6, #1
    503a:	42af      	cmp	r7, r5
    503c:	d900      	bls.n	5040 <__aeabi_ddiv+0x370>
    503e:	e0d6      	b.n	51ee <__aeabi_ddiv+0x51e>
    5040:	45a8      	cmp	r8, r5
    5042:	d800      	bhi.n	5046 <__aeabi_ddiv+0x376>
    5044:	e0d3      	b.n	51ee <__aeabi_ddiv+0x51e>
    5046:	3e02      	subs	r6, #2
    5048:	19ed      	adds	r5, r5, r7
    504a:	0424      	lsls	r4, r4, #16
    504c:	0021      	movs	r1, r4
    504e:	4643      	mov	r3, r8
    5050:	4331      	orrs	r1, r6
    5052:	9e04      	ldr	r6, [sp, #16]
    5054:	9a05      	ldr	r2, [sp, #20]
    5056:	0030      	movs	r0, r6
    5058:	1aed      	subs	r5, r5, r3
    505a:	040b      	lsls	r3, r1, #16
    505c:	0c0c      	lsrs	r4, r1, #16
    505e:	0c1b      	lsrs	r3, r3, #16
    5060:	4358      	muls	r0, r3
    5062:	4366      	muls	r6, r4
    5064:	4353      	muls	r3, r2
    5066:	4354      	muls	r4, r2
    5068:	199a      	adds	r2, r3, r6
    506a:	0c03      	lsrs	r3, r0, #16
    506c:	189b      	adds	r3, r3, r2
    506e:	429e      	cmp	r6, r3
    5070:	d903      	bls.n	507a <__aeabi_ddiv+0x3aa>
    5072:	2280      	movs	r2, #128	; 0x80
    5074:	0252      	lsls	r2, r2, #9
    5076:	4694      	mov	ip, r2
    5078:	4464      	add	r4, ip
    507a:	0c1a      	lsrs	r2, r3, #16
    507c:	0400      	lsls	r0, r0, #16
    507e:	041b      	lsls	r3, r3, #16
    5080:	0c00      	lsrs	r0, r0, #16
    5082:	1914      	adds	r4, r2, r4
    5084:	181b      	adds	r3, r3, r0
    5086:	42a5      	cmp	r5, r4
    5088:	d350      	bcc.n	512c <__aeabi_ddiv+0x45c>
    508a:	d04d      	beq.n	5128 <__aeabi_ddiv+0x458>
    508c:	2301      	movs	r3, #1
    508e:	4319      	orrs	r1, r3
    5090:	4a96      	ldr	r2, [pc, #600]	; (52ec <__aeabi_ddiv+0x61c>)
    5092:	9b01      	ldr	r3, [sp, #4]
    5094:	4694      	mov	ip, r2
    5096:	4463      	add	r3, ip
    5098:	2b00      	cmp	r3, #0
    509a:	dc00      	bgt.n	509e <__aeabi_ddiv+0x3ce>
    509c:	e6f3      	b.n	4e86 <__aeabi_ddiv+0x1b6>
    509e:	074a      	lsls	r2, r1, #29
    50a0:	d009      	beq.n	50b6 <__aeabi_ddiv+0x3e6>
    50a2:	220f      	movs	r2, #15
    50a4:	400a      	ands	r2, r1
    50a6:	2a04      	cmp	r2, #4
    50a8:	d005      	beq.n	50b6 <__aeabi_ddiv+0x3e6>
    50aa:	1d0a      	adds	r2, r1, #4
    50ac:	428a      	cmp	r2, r1
    50ae:	4189      	sbcs	r1, r1
    50b0:	4249      	negs	r1, r1
    50b2:	448b      	add	fp, r1
    50b4:	0011      	movs	r1, r2
    50b6:	465a      	mov	r2, fp
    50b8:	01d2      	lsls	r2, r2, #7
    50ba:	d508      	bpl.n	50ce <__aeabi_ddiv+0x3fe>
    50bc:	465a      	mov	r2, fp
    50be:	4b8c      	ldr	r3, [pc, #560]	; (52f0 <__aeabi_ddiv+0x620>)
    50c0:	401a      	ands	r2, r3
    50c2:	4693      	mov	fp, r2
    50c4:	2280      	movs	r2, #128	; 0x80
    50c6:	00d2      	lsls	r2, r2, #3
    50c8:	4694      	mov	ip, r2
    50ca:	9b01      	ldr	r3, [sp, #4]
    50cc:	4463      	add	r3, ip
    50ce:	4a89      	ldr	r2, [pc, #548]	; (52f4 <__aeabi_ddiv+0x624>)
    50d0:	4293      	cmp	r3, r2
    50d2:	dd00      	ble.n	50d6 <__aeabi_ddiv+0x406>
    50d4:	e65b      	b.n	4d8e <__aeabi_ddiv+0xbe>
    50d6:	465a      	mov	r2, fp
    50d8:	08c9      	lsrs	r1, r1, #3
    50da:	0750      	lsls	r0, r2, #29
    50dc:	4308      	orrs	r0, r1
    50de:	0256      	lsls	r6, r2, #9
    50e0:	4651      	mov	r1, sl
    50e2:	2201      	movs	r2, #1
    50e4:	055b      	lsls	r3, r3, #21
    50e6:	4681      	mov	r9, r0
    50e8:	0b36      	lsrs	r6, r6, #12
    50ea:	0d5b      	lsrs	r3, r3, #21
    50ec:	400a      	ands	r2, r1
    50ee:	e655      	b.n	4d9c <__aeabi_ddiv+0xcc>
    50f0:	2380      	movs	r3, #128	; 0x80
    50f2:	031b      	lsls	r3, r3, #12
    50f4:	421e      	tst	r6, r3
    50f6:	d011      	beq.n	511c <__aeabi_ddiv+0x44c>
    50f8:	465a      	mov	r2, fp
    50fa:	421a      	tst	r2, r3
    50fc:	d10e      	bne.n	511c <__aeabi_ddiv+0x44c>
    50fe:	465e      	mov	r6, fp
    5100:	431e      	orrs	r6, r3
    5102:	0336      	lsls	r6, r6, #12
    5104:	0b36      	lsrs	r6, r6, #12
    5106:	002a      	movs	r2, r5
    5108:	4689      	mov	r9, r1
    510a:	4b7b      	ldr	r3, [pc, #492]	; (52f8 <__aeabi_ddiv+0x628>)
    510c:	e646      	b.n	4d9c <__aeabi_ddiv+0xcc>
    510e:	2b03      	cmp	r3, #3
    5110:	d100      	bne.n	5114 <__aeabi_ddiv+0x444>
    5112:	e0e1      	b.n	52d8 <__aeabi_ddiv+0x608>
    5114:	2b01      	cmp	r3, #1
    5116:	d1bb      	bne.n	5090 <__aeabi_ddiv+0x3c0>
    5118:	401a      	ands	r2, r3
    511a:	e6bb      	b.n	4e94 <__aeabi_ddiv+0x1c4>
    511c:	431e      	orrs	r6, r3
    511e:	0336      	lsls	r6, r6, #12
    5120:	0b36      	lsrs	r6, r6, #12
    5122:	4642      	mov	r2, r8
    5124:	4b74      	ldr	r3, [pc, #464]	; (52f8 <__aeabi_ddiv+0x628>)
    5126:	e639      	b.n	4d9c <__aeabi_ddiv+0xcc>
    5128:	2b00      	cmp	r3, #0
    512a:	d0b1      	beq.n	5090 <__aeabi_ddiv+0x3c0>
    512c:	197d      	adds	r5, r7, r5
    512e:	1e4a      	subs	r2, r1, #1
    5130:	42af      	cmp	r7, r5
    5132:	d952      	bls.n	51da <__aeabi_ddiv+0x50a>
    5134:	0011      	movs	r1, r2
    5136:	42a5      	cmp	r5, r4
    5138:	d1a8      	bne.n	508c <__aeabi_ddiv+0x3bc>
    513a:	9a03      	ldr	r2, [sp, #12]
    513c:	429a      	cmp	r2, r3
    513e:	d1a5      	bne.n	508c <__aeabi_ddiv+0x3bc>
    5140:	e7a6      	b.n	5090 <__aeabi_ddiv+0x3c0>
    5142:	0003      	movs	r3, r0
    5144:	003e      	movs	r6, r7
    5146:	3b28      	subs	r3, #40	; 0x28
    5148:	409e      	lsls	r6, r3
    514a:	2300      	movs	r3, #0
    514c:	4699      	mov	r9, r3
    514e:	e654      	b.n	4dfa <__aeabi_ddiv+0x12a>
    5150:	f001 f960 	bl	6414 <__clzsi2>
    5154:	3020      	adds	r0, #32
    5156:	e641      	b.n	4ddc <__aeabi_ddiv+0x10c>
    5158:	0003      	movs	r3, r0
    515a:	4652      	mov	r2, sl
    515c:	3b28      	subs	r3, #40	; 0x28
    515e:	409a      	lsls	r2, r3
    5160:	2100      	movs	r1, #0
    5162:	4693      	mov	fp, r2
    5164:	e677      	b.n	4e56 <__aeabi_ddiv+0x186>
    5166:	4650      	mov	r0, sl
    5168:	f001 f954 	bl	6414 <__clzsi2>
    516c:	3020      	adds	r0, #32
    516e:	e65e      	b.n	4e2e <__aeabi_ddiv+0x15e>
    5170:	9b02      	ldr	r3, [sp, #8]
    5172:	2600      	movs	r6, #0
    5174:	42ab      	cmp	r3, r5
    5176:	d300      	bcc.n	517a <__aeabi_ddiv+0x4aa>
    5178:	e723      	b.n	4fc2 <__aeabi_ddiv+0x2f2>
    517a:	9e03      	ldr	r6, [sp, #12]
    517c:	9902      	ldr	r1, [sp, #8]
    517e:	46b4      	mov	ip, r6
    5180:	4461      	add	r1, ip
    5182:	4688      	mov	r8, r1
    5184:	45b0      	cmp	r8, r6
    5186:	41b6      	sbcs	r6, r6
    5188:	465b      	mov	r3, fp
    518a:	4276      	negs	r6, r6
    518c:	19f6      	adds	r6, r6, r7
    518e:	18b2      	adds	r2, r6, r2
    5190:	3b01      	subs	r3, #1
    5192:	9102      	str	r1, [sp, #8]
    5194:	4297      	cmp	r7, r2
    5196:	d213      	bcs.n	51c0 <__aeabi_ddiv+0x4f0>
    5198:	4290      	cmp	r0, r2
    519a:	d84f      	bhi.n	523c <__aeabi_ddiv+0x56c>
    519c:	d100      	bne.n	51a0 <__aeabi_ddiv+0x4d0>
    519e:	e08e      	b.n	52be <__aeabi_ddiv+0x5ee>
    51a0:	1a16      	subs	r6, r2, r0
    51a2:	469b      	mov	fp, r3
    51a4:	e70d      	b.n	4fc2 <__aeabi_ddiv+0x2f2>
    51a6:	4589      	cmp	r9, r1
    51a8:	d200      	bcs.n	51ac <__aeabi_ddiv+0x4dc>
    51aa:	e68e      	b.n	4eca <__aeabi_ddiv+0x1fa>
    51ac:	0874      	lsrs	r4, r6, #1
    51ae:	464b      	mov	r3, r9
    51b0:	07f6      	lsls	r6, r6, #31
    51b2:	0035      	movs	r5, r6
    51b4:	085b      	lsrs	r3, r3, #1
    51b6:	431d      	orrs	r5, r3
    51b8:	464b      	mov	r3, r9
    51ba:	07db      	lsls	r3, r3, #31
    51bc:	9302      	str	r3, [sp, #8]
    51be:	e68b      	b.n	4ed8 <__aeabi_ddiv+0x208>
    51c0:	4297      	cmp	r7, r2
    51c2:	d1ed      	bne.n	51a0 <__aeabi_ddiv+0x4d0>
    51c4:	9903      	ldr	r1, [sp, #12]
    51c6:	9c02      	ldr	r4, [sp, #8]
    51c8:	42a1      	cmp	r1, r4
    51ca:	d9e5      	bls.n	5198 <__aeabi_ddiv+0x4c8>
    51cc:	1a3e      	subs	r6, r7, r0
    51ce:	469b      	mov	fp, r3
    51d0:	e6f7      	b.n	4fc2 <__aeabi_ddiv+0x2f2>
    51d2:	4698      	mov	r8, r3
    51d4:	e6ca      	b.n	4f6c <__aeabi_ddiv+0x29c>
    51d6:	001e      	movs	r6, r3
    51d8:	e6a5      	b.n	4f26 <__aeabi_ddiv+0x256>
    51da:	42ac      	cmp	r4, r5
    51dc:	d83e      	bhi.n	525c <__aeabi_ddiv+0x58c>
    51de:	d074      	beq.n	52ca <__aeabi_ddiv+0x5fa>
    51e0:	0011      	movs	r1, r2
    51e2:	e753      	b.n	508c <__aeabi_ddiv+0x3bc>
    51e4:	2101      	movs	r1, #1
    51e6:	4249      	negs	r1, r1
    51e8:	e752      	b.n	5090 <__aeabi_ddiv+0x3c0>
    51ea:	001c      	movs	r4, r3
    51ec:	e70e      	b.n	500c <__aeabi_ddiv+0x33c>
    51ee:	001e      	movs	r6, r3
    51f0:	e72b      	b.n	504a <__aeabi_ddiv+0x37a>
    51f2:	2d1f      	cmp	r5, #31
    51f4:	dc3c      	bgt.n	5270 <__aeabi_ddiv+0x5a0>
    51f6:	2320      	movs	r3, #32
    51f8:	000a      	movs	r2, r1
    51fa:	4658      	mov	r0, fp
    51fc:	1b5b      	subs	r3, r3, r5
    51fe:	4098      	lsls	r0, r3
    5200:	40ea      	lsrs	r2, r5
    5202:	4099      	lsls	r1, r3
    5204:	4302      	orrs	r2, r0
    5206:	1e48      	subs	r0, r1, #1
    5208:	4181      	sbcs	r1, r0
    520a:	465e      	mov	r6, fp
    520c:	4311      	orrs	r1, r2
    520e:	40ee      	lsrs	r6, r5
    5210:	074b      	lsls	r3, r1, #29
    5212:	d009      	beq.n	5228 <__aeabi_ddiv+0x558>
    5214:	230f      	movs	r3, #15
    5216:	400b      	ands	r3, r1
    5218:	2b04      	cmp	r3, #4
    521a:	d005      	beq.n	5228 <__aeabi_ddiv+0x558>
    521c:	000b      	movs	r3, r1
    521e:	1d19      	adds	r1, r3, #4
    5220:	4299      	cmp	r1, r3
    5222:	419b      	sbcs	r3, r3
    5224:	425b      	negs	r3, r3
    5226:	18f6      	adds	r6, r6, r3
    5228:	0233      	lsls	r3, r6, #8
    522a:	d53c      	bpl.n	52a6 <__aeabi_ddiv+0x5d6>
    522c:	4653      	mov	r3, sl
    522e:	2201      	movs	r2, #1
    5230:	2100      	movs	r1, #0
    5232:	401a      	ands	r2, r3
    5234:	2600      	movs	r6, #0
    5236:	2301      	movs	r3, #1
    5238:	4689      	mov	r9, r1
    523a:	e5af      	b.n	4d9c <__aeabi_ddiv+0xcc>
    523c:	2302      	movs	r3, #2
    523e:	425b      	negs	r3, r3
    5240:	469c      	mov	ip, r3
    5242:	9c03      	ldr	r4, [sp, #12]
    5244:	44e3      	add	fp, ip
    5246:	46a4      	mov	ip, r4
    5248:	9b02      	ldr	r3, [sp, #8]
    524a:	4463      	add	r3, ip
    524c:	4698      	mov	r8, r3
    524e:	45a0      	cmp	r8, r4
    5250:	41b6      	sbcs	r6, r6
    5252:	4276      	negs	r6, r6
    5254:	19f6      	adds	r6, r6, r7
    5256:	9302      	str	r3, [sp, #8]
    5258:	18b2      	adds	r2, r6, r2
    525a:	e6b1      	b.n	4fc0 <__aeabi_ddiv+0x2f0>
    525c:	9803      	ldr	r0, [sp, #12]
    525e:	1e8a      	subs	r2, r1, #2
    5260:	0041      	lsls	r1, r0, #1
    5262:	4281      	cmp	r1, r0
    5264:	41b6      	sbcs	r6, r6
    5266:	4276      	negs	r6, r6
    5268:	19f6      	adds	r6, r6, r7
    526a:	19ad      	adds	r5, r5, r6
    526c:	9103      	str	r1, [sp, #12]
    526e:	e761      	b.n	5134 <__aeabi_ddiv+0x464>
    5270:	221f      	movs	r2, #31
    5272:	4252      	negs	r2, r2
    5274:	1ad3      	subs	r3, r2, r3
    5276:	465a      	mov	r2, fp
    5278:	40da      	lsrs	r2, r3
    527a:	0013      	movs	r3, r2
    527c:	2d20      	cmp	r5, #32
    527e:	d029      	beq.n	52d4 <__aeabi_ddiv+0x604>
    5280:	2240      	movs	r2, #64	; 0x40
    5282:	4658      	mov	r0, fp
    5284:	1b55      	subs	r5, r2, r5
    5286:	40a8      	lsls	r0, r5
    5288:	4301      	orrs	r1, r0
    528a:	1e48      	subs	r0, r1, #1
    528c:	4181      	sbcs	r1, r0
    528e:	2007      	movs	r0, #7
    5290:	430b      	orrs	r3, r1
    5292:	4018      	ands	r0, r3
    5294:	2600      	movs	r6, #0
    5296:	2800      	cmp	r0, #0
    5298:	d009      	beq.n	52ae <__aeabi_ddiv+0x5de>
    529a:	220f      	movs	r2, #15
    529c:	2600      	movs	r6, #0
    529e:	401a      	ands	r2, r3
    52a0:	0019      	movs	r1, r3
    52a2:	2a04      	cmp	r2, #4
    52a4:	d1bb      	bne.n	521e <__aeabi_ddiv+0x54e>
    52a6:	000b      	movs	r3, r1
    52a8:	0770      	lsls	r0, r6, #29
    52aa:	0276      	lsls	r6, r6, #9
    52ac:	0b36      	lsrs	r6, r6, #12
    52ae:	08db      	lsrs	r3, r3, #3
    52b0:	4303      	orrs	r3, r0
    52b2:	4699      	mov	r9, r3
    52b4:	2201      	movs	r2, #1
    52b6:	4653      	mov	r3, sl
    52b8:	401a      	ands	r2, r3
    52ba:	2300      	movs	r3, #0
    52bc:	e56e      	b.n	4d9c <__aeabi_ddiv+0xcc>
    52be:	9902      	ldr	r1, [sp, #8]
    52c0:	428d      	cmp	r5, r1
    52c2:	d8bb      	bhi.n	523c <__aeabi_ddiv+0x56c>
    52c4:	469b      	mov	fp, r3
    52c6:	2600      	movs	r6, #0
    52c8:	e67b      	b.n	4fc2 <__aeabi_ddiv+0x2f2>
    52ca:	9803      	ldr	r0, [sp, #12]
    52cc:	4298      	cmp	r0, r3
    52ce:	d3c5      	bcc.n	525c <__aeabi_ddiv+0x58c>
    52d0:	0011      	movs	r1, r2
    52d2:	e732      	b.n	513a <__aeabi_ddiv+0x46a>
    52d4:	2000      	movs	r0, #0
    52d6:	e7d7      	b.n	5288 <__aeabi_ddiv+0x5b8>
    52d8:	2680      	movs	r6, #128	; 0x80
    52da:	465b      	mov	r3, fp
    52dc:	0336      	lsls	r6, r6, #12
    52de:	431e      	orrs	r6, r3
    52e0:	0336      	lsls	r6, r6, #12
    52e2:	0b36      	lsrs	r6, r6, #12
    52e4:	9a00      	ldr	r2, [sp, #0]
    52e6:	4689      	mov	r9, r1
    52e8:	4b03      	ldr	r3, [pc, #12]	; (52f8 <__aeabi_ddiv+0x628>)
    52ea:	e557      	b.n	4d9c <__aeabi_ddiv+0xcc>
    52ec:	000003ff 	.word	0x000003ff
    52f0:	feffffff 	.word	0xfeffffff
    52f4:	000007fe 	.word	0x000007fe
    52f8:	000007ff 	.word	0x000007ff

000052fc <__eqdf2>:
    52fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    52fe:	465f      	mov	r7, fp
    5300:	4656      	mov	r6, sl
    5302:	464d      	mov	r5, r9
    5304:	4644      	mov	r4, r8
    5306:	b4f0      	push	{r4, r5, r6, r7}
    5308:	031f      	lsls	r7, r3, #12
    530a:	005c      	lsls	r4, r3, #1
    530c:	0fdb      	lsrs	r3, r3, #31
    530e:	469a      	mov	sl, r3
    5310:	4b19      	ldr	r3, [pc, #100]	; (5378 <__eqdf2+0x7c>)
    5312:	030e      	lsls	r6, r1, #12
    5314:	004d      	lsls	r5, r1, #1
    5316:	0fc9      	lsrs	r1, r1, #31
    5318:	4680      	mov	r8, r0
    531a:	0b36      	lsrs	r6, r6, #12
    531c:	0d6d      	lsrs	r5, r5, #21
    531e:	468b      	mov	fp, r1
    5320:	4691      	mov	r9, r2
    5322:	0b3f      	lsrs	r7, r7, #12
    5324:	0d64      	lsrs	r4, r4, #21
    5326:	429d      	cmp	r5, r3
    5328:	d019      	beq.n	535e <__eqdf2+0x62>
    532a:	4b13      	ldr	r3, [pc, #76]	; (5378 <__eqdf2+0x7c>)
    532c:	429c      	cmp	r4, r3
    532e:	d01b      	beq.n	5368 <__eqdf2+0x6c>
    5330:	2301      	movs	r3, #1
    5332:	42a5      	cmp	r5, r4
    5334:	d006      	beq.n	5344 <__eqdf2+0x48>
    5336:	0018      	movs	r0, r3
    5338:	bc3c      	pop	{r2, r3, r4, r5}
    533a:	4690      	mov	r8, r2
    533c:	4699      	mov	r9, r3
    533e:	46a2      	mov	sl, r4
    5340:	46ab      	mov	fp, r5
    5342:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5344:	42be      	cmp	r6, r7
    5346:	d1f6      	bne.n	5336 <__eqdf2+0x3a>
    5348:	45c8      	cmp	r8, r9
    534a:	d1f4      	bne.n	5336 <__eqdf2+0x3a>
    534c:	45d3      	cmp	fp, sl
    534e:	d010      	beq.n	5372 <__eqdf2+0x76>
    5350:	2d00      	cmp	r5, #0
    5352:	d1f0      	bne.n	5336 <__eqdf2+0x3a>
    5354:	4330      	orrs	r0, r6
    5356:	0003      	movs	r3, r0
    5358:	1e5a      	subs	r2, r3, #1
    535a:	4193      	sbcs	r3, r2
    535c:	e7eb      	b.n	5336 <__eqdf2+0x3a>
    535e:	0031      	movs	r1, r6
    5360:	2301      	movs	r3, #1
    5362:	4301      	orrs	r1, r0
    5364:	d1e7      	bne.n	5336 <__eqdf2+0x3a>
    5366:	e7e0      	b.n	532a <__eqdf2+0x2e>
    5368:	433a      	orrs	r2, r7
    536a:	2301      	movs	r3, #1
    536c:	2a00      	cmp	r2, #0
    536e:	d1e2      	bne.n	5336 <__eqdf2+0x3a>
    5370:	e7de      	b.n	5330 <__eqdf2+0x34>
    5372:	2300      	movs	r3, #0
    5374:	e7df      	b.n	5336 <__eqdf2+0x3a>
    5376:	46c0      	nop			; (mov r8, r8)
    5378:	000007ff 	.word	0x000007ff

0000537c <__gedf2>:
    537c:	b5f0      	push	{r4, r5, r6, r7, lr}
    537e:	465f      	mov	r7, fp
    5380:	4644      	mov	r4, r8
    5382:	4656      	mov	r6, sl
    5384:	464d      	mov	r5, r9
    5386:	b4f0      	push	{r4, r5, r6, r7}
    5388:	031f      	lsls	r7, r3, #12
    538a:	0b3c      	lsrs	r4, r7, #12
    538c:	4f2c      	ldr	r7, [pc, #176]	; (5440 <__gedf2+0xc4>)
    538e:	030e      	lsls	r6, r1, #12
    5390:	004d      	lsls	r5, r1, #1
    5392:	46a3      	mov	fp, r4
    5394:	005c      	lsls	r4, r3, #1
    5396:	4684      	mov	ip, r0
    5398:	0b36      	lsrs	r6, r6, #12
    539a:	0d6d      	lsrs	r5, r5, #21
    539c:	0fc9      	lsrs	r1, r1, #31
    539e:	4690      	mov	r8, r2
    53a0:	0d64      	lsrs	r4, r4, #21
    53a2:	0fdb      	lsrs	r3, r3, #31
    53a4:	42bd      	cmp	r5, r7
    53a6:	d02b      	beq.n	5400 <__gedf2+0x84>
    53a8:	4f25      	ldr	r7, [pc, #148]	; (5440 <__gedf2+0xc4>)
    53aa:	42bc      	cmp	r4, r7
    53ac:	d02e      	beq.n	540c <__gedf2+0x90>
    53ae:	2d00      	cmp	r5, #0
    53b0:	d10e      	bne.n	53d0 <__gedf2+0x54>
    53b2:	4330      	orrs	r0, r6
    53b4:	0007      	movs	r7, r0
    53b6:	4681      	mov	r9, r0
    53b8:	4278      	negs	r0, r7
    53ba:	4178      	adcs	r0, r7
    53bc:	2c00      	cmp	r4, #0
    53be:	d117      	bne.n	53f0 <__gedf2+0x74>
    53c0:	465f      	mov	r7, fp
    53c2:	433a      	orrs	r2, r7
    53c4:	d114      	bne.n	53f0 <__gedf2+0x74>
    53c6:	464b      	mov	r3, r9
    53c8:	2000      	movs	r0, #0
    53ca:	2b00      	cmp	r3, #0
    53cc:	d00a      	beq.n	53e4 <__gedf2+0x68>
    53ce:	e006      	b.n	53de <__gedf2+0x62>
    53d0:	2c00      	cmp	r4, #0
    53d2:	d102      	bne.n	53da <__gedf2+0x5e>
    53d4:	4658      	mov	r0, fp
    53d6:	4302      	orrs	r2, r0
    53d8:	d001      	beq.n	53de <__gedf2+0x62>
    53da:	4299      	cmp	r1, r3
    53dc:	d01a      	beq.n	5414 <__gedf2+0x98>
    53de:	2301      	movs	r3, #1
    53e0:	4248      	negs	r0, r1
    53e2:	4318      	orrs	r0, r3
    53e4:	bc3c      	pop	{r2, r3, r4, r5}
    53e6:	4690      	mov	r8, r2
    53e8:	4699      	mov	r9, r3
    53ea:	46a2      	mov	sl, r4
    53ec:	46ab      	mov	fp, r5
    53ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53f0:	2800      	cmp	r0, #0
    53f2:	d0f2      	beq.n	53da <__gedf2+0x5e>
    53f4:	4258      	negs	r0, r3
    53f6:	4158      	adcs	r0, r3
    53f8:	2201      	movs	r2, #1
    53fa:	4240      	negs	r0, r0
    53fc:	4310      	orrs	r0, r2
    53fe:	e7f1      	b.n	53e4 <__gedf2+0x68>
    5400:	0037      	movs	r7, r6
    5402:	4307      	orrs	r7, r0
    5404:	d0d0      	beq.n	53a8 <__gedf2+0x2c>
    5406:	2002      	movs	r0, #2
    5408:	4240      	negs	r0, r0
    540a:	e7eb      	b.n	53e4 <__gedf2+0x68>
    540c:	465f      	mov	r7, fp
    540e:	4317      	orrs	r7, r2
    5410:	d0cd      	beq.n	53ae <__gedf2+0x32>
    5412:	e7f8      	b.n	5406 <__gedf2+0x8a>
    5414:	42a5      	cmp	r5, r4
    5416:	dce2      	bgt.n	53de <__gedf2+0x62>
    5418:	db05      	blt.n	5426 <__gedf2+0xaa>
    541a:	455e      	cmp	r6, fp
    541c:	d8df      	bhi.n	53de <__gedf2+0x62>
    541e:	d008      	beq.n	5432 <__gedf2+0xb6>
    5420:	2000      	movs	r0, #0
    5422:	455e      	cmp	r6, fp
    5424:	d2de      	bcs.n	53e4 <__gedf2+0x68>
    5426:	4248      	negs	r0, r1
    5428:	4148      	adcs	r0, r1
    542a:	2301      	movs	r3, #1
    542c:	4240      	negs	r0, r0
    542e:	4318      	orrs	r0, r3
    5430:	e7d8      	b.n	53e4 <__gedf2+0x68>
    5432:	45c4      	cmp	ip, r8
    5434:	d8d3      	bhi.n	53de <__gedf2+0x62>
    5436:	2000      	movs	r0, #0
    5438:	45c4      	cmp	ip, r8
    543a:	d3f4      	bcc.n	5426 <__gedf2+0xaa>
    543c:	e7d2      	b.n	53e4 <__gedf2+0x68>
    543e:	46c0      	nop			; (mov r8, r8)
    5440:	000007ff 	.word	0x000007ff

00005444 <__ledf2>:
    5444:	b5f0      	push	{r4, r5, r6, r7, lr}
    5446:	465f      	mov	r7, fp
    5448:	464d      	mov	r5, r9
    544a:	4644      	mov	r4, r8
    544c:	4656      	mov	r6, sl
    544e:	b4f0      	push	{r4, r5, r6, r7}
    5450:	031c      	lsls	r4, r3, #12
    5452:	0b24      	lsrs	r4, r4, #12
    5454:	46a4      	mov	ip, r4
    5456:	4c2f      	ldr	r4, [pc, #188]	; (5514 <__ledf2+0xd0>)
    5458:	030f      	lsls	r7, r1, #12
    545a:	004d      	lsls	r5, r1, #1
    545c:	005e      	lsls	r6, r3, #1
    545e:	0fc9      	lsrs	r1, r1, #31
    5460:	4680      	mov	r8, r0
    5462:	0b3f      	lsrs	r7, r7, #12
    5464:	0d6d      	lsrs	r5, r5, #21
    5466:	468b      	mov	fp, r1
    5468:	4691      	mov	r9, r2
    546a:	0d76      	lsrs	r6, r6, #21
    546c:	0fdb      	lsrs	r3, r3, #31
    546e:	42a5      	cmp	r5, r4
    5470:	d020      	beq.n	54b4 <__ledf2+0x70>
    5472:	4c28      	ldr	r4, [pc, #160]	; (5514 <__ledf2+0xd0>)
    5474:	42a6      	cmp	r6, r4
    5476:	d022      	beq.n	54be <__ledf2+0x7a>
    5478:	2d00      	cmp	r5, #0
    547a:	d112      	bne.n	54a2 <__ledf2+0x5e>
    547c:	4338      	orrs	r0, r7
    547e:	4244      	negs	r4, r0
    5480:	4144      	adcs	r4, r0
    5482:	2e00      	cmp	r6, #0
    5484:	d020      	beq.n	54c8 <__ledf2+0x84>
    5486:	2c00      	cmp	r4, #0
    5488:	d00d      	beq.n	54a6 <__ledf2+0x62>
    548a:	425c      	negs	r4, r3
    548c:	4163      	adcs	r3, r4
    548e:	2401      	movs	r4, #1
    5490:	425b      	negs	r3, r3
    5492:	431c      	orrs	r4, r3
    5494:	0020      	movs	r0, r4
    5496:	bc3c      	pop	{r2, r3, r4, r5}
    5498:	4690      	mov	r8, r2
    549a:	4699      	mov	r9, r3
    549c:	46a2      	mov	sl, r4
    549e:	46ab      	mov	fp, r5
    54a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54a2:	2e00      	cmp	r6, #0
    54a4:	d017      	beq.n	54d6 <__ledf2+0x92>
    54a6:	455b      	cmp	r3, fp
    54a8:	d019      	beq.n	54de <__ledf2+0x9a>
    54aa:	465b      	mov	r3, fp
    54ac:	425c      	negs	r4, r3
    54ae:	2301      	movs	r3, #1
    54b0:	431c      	orrs	r4, r3
    54b2:	e7ef      	b.n	5494 <__ledf2+0x50>
    54b4:	0039      	movs	r1, r7
    54b6:	2402      	movs	r4, #2
    54b8:	4301      	orrs	r1, r0
    54ba:	d1eb      	bne.n	5494 <__ledf2+0x50>
    54bc:	e7d9      	b.n	5472 <__ledf2+0x2e>
    54be:	4661      	mov	r1, ip
    54c0:	2402      	movs	r4, #2
    54c2:	4311      	orrs	r1, r2
    54c4:	d1e6      	bne.n	5494 <__ledf2+0x50>
    54c6:	e7d7      	b.n	5478 <__ledf2+0x34>
    54c8:	4661      	mov	r1, ip
    54ca:	430a      	orrs	r2, r1
    54cc:	d1db      	bne.n	5486 <__ledf2+0x42>
    54ce:	2400      	movs	r4, #0
    54d0:	2800      	cmp	r0, #0
    54d2:	d0df      	beq.n	5494 <__ledf2+0x50>
    54d4:	e7e9      	b.n	54aa <__ledf2+0x66>
    54d6:	4661      	mov	r1, ip
    54d8:	430a      	orrs	r2, r1
    54da:	d1e4      	bne.n	54a6 <__ledf2+0x62>
    54dc:	e7e5      	b.n	54aa <__ledf2+0x66>
    54de:	42b5      	cmp	r5, r6
    54e0:	dd03      	ble.n	54ea <__ledf2+0xa6>
    54e2:	2201      	movs	r2, #1
    54e4:	425c      	negs	r4, r3
    54e6:	4314      	orrs	r4, r2
    54e8:	e7d4      	b.n	5494 <__ledf2+0x50>
    54ea:	42b5      	cmp	r5, r6
    54ec:	dbcd      	blt.n	548a <__ledf2+0x46>
    54ee:	4567      	cmp	r7, ip
    54f0:	d8db      	bhi.n	54aa <__ledf2+0x66>
    54f2:	d009      	beq.n	5508 <__ledf2+0xc4>
    54f4:	2400      	movs	r4, #0
    54f6:	4567      	cmp	r7, ip
    54f8:	d2cc      	bcs.n	5494 <__ledf2+0x50>
    54fa:	4659      	mov	r1, fp
    54fc:	424c      	negs	r4, r1
    54fe:	4161      	adcs	r1, r4
    5500:	2401      	movs	r4, #1
    5502:	4249      	negs	r1, r1
    5504:	430c      	orrs	r4, r1
    5506:	e7c5      	b.n	5494 <__ledf2+0x50>
    5508:	45c8      	cmp	r8, r9
    550a:	d8ce      	bhi.n	54aa <__ledf2+0x66>
    550c:	2400      	movs	r4, #0
    550e:	45c8      	cmp	r8, r9
    5510:	d3f3      	bcc.n	54fa <__ledf2+0xb6>
    5512:	e7bf      	b.n	5494 <__ledf2+0x50>
    5514:	000007ff 	.word	0x000007ff

00005518 <__aeabi_dmul>:
    5518:	b5f0      	push	{r4, r5, r6, r7, lr}
    551a:	465f      	mov	r7, fp
    551c:	4656      	mov	r6, sl
    551e:	464d      	mov	r5, r9
    5520:	4644      	mov	r4, r8
    5522:	b4f0      	push	{r4, r5, r6, r7}
    5524:	030d      	lsls	r5, r1, #12
    5526:	4699      	mov	r9, r3
    5528:	004e      	lsls	r6, r1, #1
    552a:	0b2b      	lsrs	r3, r5, #12
    552c:	b087      	sub	sp, #28
    552e:	0007      	movs	r7, r0
    5530:	4692      	mov	sl, r2
    5532:	4680      	mov	r8, r0
    5534:	469b      	mov	fp, r3
    5536:	0d76      	lsrs	r6, r6, #21
    5538:	0fcc      	lsrs	r4, r1, #31
    553a:	2e00      	cmp	r6, #0
    553c:	d069      	beq.n	5612 <__aeabi_dmul+0xfa>
    553e:	4b6d      	ldr	r3, [pc, #436]	; (56f4 <__aeabi_dmul+0x1dc>)
    5540:	429e      	cmp	r6, r3
    5542:	d035      	beq.n	55b0 <__aeabi_dmul+0x98>
    5544:	465b      	mov	r3, fp
    5546:	2280      	movs	r2, #128	; 0x80
    5548:	00dd      	lsls	r5, r3, #3
    554a:	0412      	lsls	r2, r2, #16
    554c:	0f43      	lsrs	r3, r0, #29
    554e:	4313      	orrs	r3, r2
    5550:	432b      	orrs	r3, r5
    5552:	469b      	mov	fp, r3
    5554:	00c3      	lsls	r3, r0, #3
    5556:	4698      	mov	r8, r3
    5558:	4b67      	ldr	r3, [pc, #412]	; (56f8 <__aeabi_dmul+0x1e0>)
    555a:	2700      	movs	r7, #0
    555c:	469c      	mov	ip, r3
    555e:	2300      	movs	r3, #0
    5560:	4466      	add	r6, ip
    5562:	9301      	str	r3, [sp, #4]
    5564:	464a      	mov	r2, r9
    5566:	0315      	lsls	r5, r2, #12
    5568:	0050      	lsls	r0, r2, #1
    556a:	0fd2      	lsrs	r2, r2, #31
    556c:	4653      	mov	r3, sl
    556e:	0b2d      	lsrs	r5, r5, #12
    5570:	0d40      	lsrs	r0, r0, #21
    5572:	4691      	mov	r9, r2
    5574:	d100      	bne.n	5578 <__aeabi_dmul+0x60>
    5576:	e076      	b.n	5666 <__aeabi_dmul+0x14e>
    5578:	4a5e      	ldr	r2, [pc, #376]	; (56f4 <__aeabi_dmul+0x1dc>)
    557a:	4290      	cmp	r0, r2
    557c:	d06c      	beq.n	5658 <__aeabi_dmul+0x140>
    557e:	2280      	movs	r2, #128	; 0x80
    5580:	0f5b      	lsrs	r3, r3, #29
    5582:	0412      	lsls	r2, r2, #16
    5584:	4313      	orrs	r3, r2
    5586:	4a5c      	ldr	r2, [pc, #368]	; (56f8 <__aeabi_dmul+0x1e0>)
    5588:	00ed      	lsls	r5, r5, #3
    558a:	4694      	mov	ip, r2
    558c:	431d      	orrs	r5, r3
    558e:	4653      	mov	r3, sl
    5590:	2200      	movs	r2, #0
    5592:	00db      	lsls	r3, r3, #3
    5594:	4460      	add	r0, ip
    5596:	4649      	mov	r1, r9
    5598:	1836      	adds	r6, r6, r0
    559a:	1c70      	adds	r0, r6, #1
    559c:	4061      	eors	r1, r4
    559e:	9002      	str	r0, [sp, #8]
    55a0:	4317      	orrs	r7, r2
    55a2:	2f0f      	cmp	r7, #15
    55a4:	d900      	bls.n	55a8 <__aeabi_dmul+0x90>
    55a6:	e0af      	b.n	5708 <__aeabi_dmul+0x1f0>
    55a8:	4854      	ldr	r0, [pc, #336]	; (56fc <__aeabi_dmul+0x1e4>)
    55aa:	00bf      	lsls	r7, r7, #2
    55ac:	59c7      	ldr	r7, [r0, r7]
    55ae:	46bf      	mov	pc, r7
    55b0:	465b      	mov	r3, fp
    55b2:	431f      	orrs	r7, r3
    55b4:	d000      	beq.n	55b8 <__aeabi_dmul+0xa0>
    55b6:	e088      	b.n	56ca <__aeabi_dmul+0x1b2>
    55b8:	2300      	movs	r3, #0
    55ba:	469b      	mov	fp, r3
    55bc:	4698      	mov	r8, r3
    55be:	3302      	adds	r3, #2
    55c0:	2708      	movs	r7, #8
    55c2:	9301      	str	r3, [sp, #4]
    55c4:	e7ce      	b.n	5564 <__aeabi_dmul+0x4c>
    55c6:	4649      	mov	r1, r9
    55c8:	2a02      	cmp	r2, #2
    55ca:	d06a      	beq.n	56a2 <__aeabi_dmul+0x18a>
    55cc:	2a03      	cmp	r2, #3
    55ce:	d100      	bne.n	55d2 <__aeabi_dmul+0xba>
    55d0:	e209      	b.n	59e6 <__aeabi_dmul+0x4ce>
    55d2:	2a01      	cmp	r2, #1
    55d4:	d000      	beq.n	55d8 <__aeabi_dmul+0xc0>
    55d6:	e1bb      	b.n	5950 <__aeabi_dmul+0x438>
    55d8:	4011      	ands	r1, r2
    55da:	2200      	movs	r2, #0
    55dc:	2300      	movs	r3, #0
    55de:	2500      	movs	r5, #0
    55e0:	4690      	mov	r8, r2
    55e2:	b2cc      	uxtb	r4, r1
    55e4:	2100      	movs	r1, #0
    55e6:	032d      	lsls	r5, r5, #12
    55e8:	0d0a      	lsrs	r2, r1, #20
    55ea:	0512      	lsls	r2, r2, #20
    55ec:	0b2d      	lsrs	r5, r5, #12
    55ee:	4315      	orrs	r5, r2
    55f0:	4a43      	ldr	r2, [pc, #268]	; (5700 <__aeabi_dmul+0x1e8>)
    55f2:	051b      	lsls	r3, r3, #20
    55f4:	4015      	ands	r5, r2
    55f6:	431d      	orrs	r5, r3
    55f8:	006d      	lsls	r5, r5, #1
    55fa:	07e4      	lsls	r4, r4, #31
    55fc:	086d      	lsrs	r5, r5, #1
    55fe:	4325      	orrs	r5, r4
    5600:	4640      	mov	r0, r8
    5602:	0029      	movs	r1, r5
    5604:	b007      	add	sp, #28
    5606:	bc3c      	pop	{r2, r3, r4, r5}
    5608:	4690      	mov	r8, r2
    560a:	4699      	mov	r9, r3
    560c:	46a2      	mov	sl, r4
    560e:	46ab      	mov	fp, r5
    5610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5612:	4303      	orrs	r3, r0
    5614:	d052      	beq.n	56bc <__aeabi_dmul+0x1a4>
    5616:	465b      	mov	r3, fp
    5618:	2b00      	cmp	r3, #0
    561a:	d100      	bne.n	561e <__aeabi_dmul+0x106>
    561c:	e18a      	b.n	5934 <__aeabi_dmul+0x41c>
    561e:	4658      	mov	r0, fp
    5620:	f000 fef8 	bl	6414 <__clzsi2>
    5624:	0003      	movs	r3, r0
    5626:	3b0b      	subs	r3, #11
    5628:	2b1c      	cmp	r3, #28
    562a:	dd00      	ble.n	562e <__aeabi_dmul+0x116>
    562c:	e17b      	b.n	5926 <__aeabi_dmul+0x40e>
    562e:	221d      	movs	r2, #29
    5630:	1ad3      	subs	r3, r2, r3
    5632:	003a      	movs	r2, r7
    5634:	0001      	movs	r1, r0
    5636:	465d      	mov	r5, fp
    5638:	40da      	lsrs	r2, r3
    563a:	3908      	subs	r1, #8
    563c:	408d      	lsls	r5, r1
    563e:	0013      	movs	r3, r2
    5640:	408f      	lsls	r7, r1
    5642:	432b      	orrs	r3, r5
    5644:	469b      	mov	fp, r3
    5646:	46b8      	mov	r8, r7
    5648:	4b2e      	ldr	r3, [pc, #184]	; (5704 <__aeabi_dmul+0x1ec>)
    564a:	2700      	movs	r7, #0
    564c:	469c      	mov	ip, r3
    564e:	2300      	movs	r3, #0
    5650:	4460      	add	r0, ip
    5652:	4246      	negs	r6, r0
    5654:	9301      	str	r3, [sp, #4]
    5656:	e785      	b.n	5564 <__aeabi_dmul+0x4c>
    5658:	4652      	mov	r2, sl
    565a:	432a      	orrs	r2, r5
    565c:	d12c      	bne.n	56b8 <__aeabi_dmul+0x1a0>
    565e:	2500      	movs	r5, #0
    5660:	2300      	movs	r3, #0
    5662:	2202      	movs	r2, #2
    5664:	e797      	b.n	5596 <__aeabi_dmul+0x7e>
    5666:	4652      	mov	r2, sl
    5668:	432a      	orrs	r2, r5
    566a:	d021      	beq.n	56b0 <__aeabi_dmul+0x198>
    566c:	2d00      	cmp	r5, #0
    566e:	d100      	bne.n	5672 <__aeabi_dmul+0x15a>
    5670:	e154      	b.n	591c <__aeabi_dmul+0x404>
    5672:	0028      	movs	r0, r5
    5674:	f000 fece 	bl	6414 <__clzsi2>
    5678:	0003      	movs	r3, r0
    567a:	3b0b      	subs	r3, #11
    567c:	2b1c      	cmp	r3, #28
    567e:	dd00      	ble.n	5682 <__aeabi_dmul+0x16a>
    5680:	e146      	b.n	5910 <__aeabi_dmul+0x3f8>
    5682:	211d      	movs	r1, #29
    5684:	1acb      	subs	r3, r1, r3
    5686:	4651      	mov	r1, sl
    5688:	0002      	movs	r2, r0
    568a:	40d9      	lsrs	r1, r3
    568c:	4653      	mov	r3, sl
    568e:	3a08      	subs	r2, #8
    5690:	4095      	lsls	r5, r2
    5692:	4093      	lsls	r3, r2
    5694:	430d      	orrs	r5, r1
    5696:	4a1b      	ldr	r2, [pc, #108]	; (5704 <__aeabi_dmul+0x1ec>)
    5698:	4694      	mov	ip, r2
    569a:	4460      	add	r0, ip
    569c:	4240      	negs	r0, r0
    569e:	2200      	movs	r2, #0
    56a0:	e779      	b.n	5596 <__aeabi_dmul+0x7e>
    56a2:	2401      	movs	r4, #1
    56a4:	2200      	movs	r2, #0
    56a6:	400c      	ands	r4, r1
    56a8:	4b12      	ldr	r3, [pc, #72]	; (56f4 <__aeabi_dmul+0x1dc>)
    56aa:	2500      	movs	r5, #0
    56ac:	4690      	mov	r8, r2
    56ae:	e799      	b.n	55e4 <__aeabi_dmul+0xcc>
    56b0:	2500      	movs	r5, #0
    56b2:	2300      	movs	r3, #0
    56b4:	2201      	movs	r2, #1
    56b6:	e76e      	b.n	5596 <__aeabi_dmul+0x7e>
    56b8:	2203      	movs	r2, #3
    56ba:	e76c      	b.n	5596 <__aeabi_dmul+0x7e>
    56bc:	2300      	movs	r3, #0
    56be:	469b      	mov	fp, r3
    56c0:	4698      	mov	r8, r3
    56c2:	3301      	adds	r3, #1
    56c4:	2704      	movs	r7, #4
    56c6:	9301      	str	r3, [sp, #4]
    56c8:	e74c      	b.n	5564 <__aeabi_dmul+0x4c>
    56ca:	2303      	movs	r3, #3
    56cc:	270c      	movs	r7, #12
    56ce:	9301      	str	r3, [sp, #4]
    56d0:	e748      	b.n	5564 <__aeabi_dmul+0x4c>
    56d2:	2300      	movs	r3, #0
    56d4:	2580      	movs	r5, #128	; 0x80
    56d6:	4698      	mov	r8, r3
    56d8:	2400      	movs	r4, #0
    56da:	032d      	lsls	r5, r5, #12
    56dc:	4b05      	ldr	r3, [pc, #20]	; (56f4 <__aeabi_dmul+0x1dc>)
    56de:	e781      	b.n	55e4 <__aeabi_dmul+0xcc>
    56e0:	465d      	mov	r5, fp
    56e2:	4643      	mov	r3, r8
    56e4:	9a01      	ldr	r2, [sp, #4]
    56e6:	e76f      	b.n	55c8 <__aeabi_dmul+0xb0>
    56e8:	465d      	mov	r5, fp
    56ea:	4643      	mov	r3, r8
    56ec:	0021      	movs	r1, r4
    56ee:	9a01      	ldr	r2, [sp, #4]
    56f0:	e76a      	b.n	55c8 <__aeabi_dmul+0xb0>
    56f2:	46c0      	nop			; (mov r8, r8)
    56f4:	000007ff 	.word	0x000007ff
    56f8:	fffffc01 	.word	0xfffffc01
    56fc:	00006560 	.word	0x00006560
    5700:	800fffff 	.word	0x800fffff
    5704:	000003f3 	.word	0x000003f3
    5708:	4642      	mov	r2, r8
    570a:	0c12      	lsrs	r2, r2, #16
    570c:	4691      	mov	r9, r2
    570e:	0c1a      	lsrs	r2, r3, #16
    5710:	4694      	mov	ip, r2
    5712:	4642      	mov	r2, r8
    5714:	0417      	lsls	r7, r2, #16
    5716:	464a      	mov	r2, r9
    5718:	041b      	lsls	r3, r3, #16
    571a:	0c1b      	lsrs	r3, r3, #16
    571c:	435a      	muls	r2, r3
    571e:	4660      	mov	r0, ip
    5720:	4690      	mov	r8, r2
    5722:	464a      	mov	r2, r9
    5724:	4342      	muls	r2, r0
    5726:	0010      	movs	r0, r2
    5728:	9203      	str	r2, [sp, #12]
    572a:	4662      	mov	r2, ip
    572c:	001c      	movs	r4, r3
    572e:	0c3f      	lsrs	r7, r7, #16
    5730:	437a      	muls	r2, r7
    5732:	437c      	muls	r4, r7
    5734:	4442      	add	r2, r8
    5736:	9201      	str	r2, [sp, #4]
    5738:	0c22      	lsrs	r2, r4, #16
    573a:	4692      	mov	sl, r2
    573c:	9a01      	ldr	r2, [sp, #4]
    573e:	4452      	add	r2, sl
    5740:	4590      	cmp	r8, r2
    5742:	d906      	bls.n	5752 <__aeabi_dmul+0x23a>
    5744:	4682      	mov	sl, r0
    5746:	2080      	movs	r0, #128	; 0x80
    5748:	0240      	lsls	r0, r0, #9
    574a:	4680      	mov	r8, r0
    574c:	44c2      	add	sl, r8
    574e:	4650      	mov	r0, sl
    5750:	9003      	str	r0, [sp, #12]
    5752:	0c10      	lsrs	r0, r2, #16
    5754:	9004      	str	r0, [sp, #16]
    5756:	4648      	mov	r0, r9
    5758:	0424      	lsls	r4, r4, #16
    575a:	0c24      	lsrs	r4, r4, #16
    575c:	0412      	lsls	r2, r2, #16
    575e:	1912      	adds	r2, r2, r4
    5760:	9205      	str	r2, [sp, #20]
    5762:	0c2a      	lsrs	r2, r5, #16
    5764:	042d      	lsls	r5, r5, #16
    5766:	0c2d      	lsrs	r5, r5, #16
    5768:	4368      	muls	r0, r5
    576a:	002c      	movs	r4, r5
    576c:	4682      	mov	sl, r0
    576e:	4648      	mov	r0, r9
    5770:	437c      	muls	r4, r7
    5772:	4350      	muls	r0, r2
    5774:	4681      	mov	r9, r0
    5776:	0c20      	lsrs	r0, r4, #16
    5778:	4680      	mov	r8, r0
    577a:	4357      	muls	r7, r2
    577c:	4457      	add	r7, sl
    577e:	4447      	add	r7, r8
    5780:	45ba      	cmp	sl, r7
    5782:	d903      	bls.n	578c <__aeabi_dmul+0x274>
    5784:	2080      	movs	r0, #128	; 0x80
    5786:	0240      	lsls	r0, r0, #9
    5788:	4680      	mov	r8, r0
    578a:	44c1      	add	r9, r8
    578c:	0c38      	lsrs	r0, r7, #16
    578e:	043f      	lsls	r7, r7, #16
    5790:	46b8      	mov	r8, r7
    5792:	4448      	add	r0, r9
    5794:	0424      	lsls	r4, r4, #16
    5796:	0c24      	lsrs	r4, r4, #16
    5798:	9001      	str	r0, [sp, #4]
    579a:	9804      	ldr	r0, [sp, #16]
    579c:	44a0      	add	r8, r4
    579e:	4440      	add	r0, r8
    57a0:	9004      	str	r0, [sp, #16]
    57a2:	4658      	mov	r0, fp
    57a4:	0c00      	lsrs	r0, r0, #16
    57a6:	4681      	mov	r9, r0
    57a8:	4658      	mov	r0, fp
    57aa:	0404      	lsls	r4, r0, #16
    57ac:	0c20      	lsrs	r0, r4, #16
    57ae:	4682      	mov	sl, r0
    57b0:	0007      	movs	r7, r0
    57b2:	4648      	mov	r0, r9
    57b4:	435f      	muls	r7, r3
    57b6:	464c      	mov	r4, r9
    57b8:	4343      	muls	r3, r0
    57ba:	4660      	mov	r0, ip
    57bc:	4360      	muls	r0, r4
    57be:	4664      	mov	r4, ip
    57c0:	4683      	mov	fp, r0
    57c2:	4650      	mov	r0, sl
    57c4:	4344      	muls	r4, r0
    57c6:	0c38      	lsrs	r0, r7, #16
    57c8:	4684      	mov	ip, r0
    57ca:	18e4      	adds	r4, r4, r3
    57cc:	4464      	add	r4, ip
    57ce:	42a3      	cmp	r3, r4
    57d0:	d903      	bls.n	57da <__aeabi_dmul+0x2c2>
    57d2:	2380      	movs	r3, #128	; 0x80
    57d4:	025b      	lsls	r3, r3, #9
    57d6:	469c      	mov	ip, r3
    57d8:	44e3      	add	fp, ip
    57da:	4648      	mov	r0, r9
    57dc:	043f      	lsls	r7, r7, #16
    57de:	0c23      	lsrs	r3, r4, #16
    57e0:	0c3f      	lsrs	r7, r7, #16
    57e2:	0424      	lsls	r4, r4, #16
    57e4:	19e4      	adds	r4, r4, r7
    57e6:	4657      	mov	r7, sl
    57e8:	4368      	muls	r0, r5
    57ea:	436f      	muls	r7, r5
    57ec:	4684      	mov	ip, r0
    57ee:	464d      	mov	r5, r9
    57f0:	4650      	mov	r0, sl
    57f2:	4355      	muls	r5, r2
    57f4:	4342      	muls	r2, r0
    57f6:	0c38      	lsrs	r0, r7, #16
    57f8:	4681      	mov	r9, r0
    57fa:	4462      	add	r2, ip
    57fc:	444a      	add	r2, r9
    57fe:	445b      	add	r3, fp
    5800:	4594      	cmp	ip, r2
    5802:	d903      	bls.n	580c <__aeabi_dmul+0x2f4>
    5804:	2080      	movs	r0, #128	; 0x80
    5806:	0240      	lsls	r0, r0, #9
    5808:	4684      	mov	ip, r0
    580a:	4465      	add	r5, ip
    580c:	9803      	ldr	r0, [sp, #12]
    580e:	043f      	lsls	r7, r7, #16
    5810:	4683      	mov	fp, r0
    5812:	9804      	ldr	r0, [sp, #16]
    5814:	0c3f      	lsrs	r7, r7, #16
    5816:	4684      	mov	ip, r0
    5818:	44e3      	add	fp, ip
    581a:	45c3      	cmp	fp, r8
    581c:	4180      	sbcs	r0, r0
    581e:	4240      	negs	r0, r0
    5820:	4682      	mov	sl, r0
    5822:	0410      	lsls	r0, r2, #16
    5824:	4684      	mov	ip, r0
    5826:	9801      	ldr	r0, [sp, #4]
    5828:	4467      	add	r7, ip
    582a:	4684      	mov	ip, r0
    582c:	4467      	add	r7, ip
    582e:	44a3      	add	fp, r4
    5830:	46bc      	mov	ip, r7
    5832:	45a3      	cmp	fp, r4
    5834:	41a4      	sbcs	r4, r4
    5836:	4699      	mov	r9, r3
    5838:	44d4      	add	ip, sl
    583a:	4264      	negs	r4, r4
    583c:	4287      	cmp	r7, r0
    583e:	41bf      	sbcs	r7, r7
    5840:	45d4      	cmp	ip, sl
    5842:	4180      	sbcs	r0, r0
    5844:	44e1      	add	r9, ip
    5846:	46a0      	mov	r8, r4
    5848:	4599      	cmp	r9, r3
    584a:	419b      	sbcs	r3, r3
    584c:	427f      	negs	r7, r7
    584e:	4240      	negs	r0, r0
    5850:	44c8      	add	r8, r9
    5852:	4307      	orrs	r7, r0
    5854:	0c12      	lsrs	r2, r2, #16
    5856:	18ba      	adds	r2, r7, r2
    5858:	45a0      	cmp	r8, r4
    585a:	41a4      	sbcs	r4, r4
    585c:	425f      	negs	r7, r3
    585e:	003b      	movs	r3, r7
    5860:	4264      	negs	r4, r4
    5862:	4323      	orrs	r3, r4
    5864:	18d7      	adds	r7, r2, r3
    5866:	4643      	mov	r3, r8
    5868:	197d      	adds	r5, r7, r5
    586a:	0ddb      	lsrs	r3, r3, #23
    586c:	026d      	lsls	r5, r5, #9
    586e:	431d      	orrs	r5, r3
    5870:	465b      	mov	r3, fp
    5872:	025a      	lsls	r2, r3, #9
    5874:	9b05      	ldr	r3, [sp, #20]
    5876:	431a      	orrs	r2, r3
    5878:	1e53      	subs	r3, r2, #1
    587a:	419a      	sbcs	r2, r3
    587c:	465b      	mov	r3, fp
    587e:	0ddb      	lsrs	r3, r3, #23
    5880:	431a      	orrs	r2, r3
    5882:	4643      	mov	r3, r8
    5884:	025b      	lsls	r3, r3, #9
    5886:	4313      	orrs	r3, r2
    5888:	01ea      	lsls	r2, r5, #7
    588a:	d507      	bpl.n	589c <__aeabi_dmul+0x384>
    588c:	2201      	movs	r2, #1
    588e:	085c      	lsrs	r4, r3, #1
    5890:	4013      	ands	r3, r2
    5892:	4323      	orrs	r3, r4
    5894:	07ea      	lsls	r2, r5, #31
    5896:	9e02      	ldr	r6, [sp, #8]
    5898:	4313      	orrs	r3, r2
    589a:	086d      	lsrs	r5, r5, #1
    589c:	4a57      	ldr	r2, [pc, #348]	; (59fc <__aeabi_dmul+0x4e4>)
    589e:	18b2      	adds	r2, r6, r2
    58a0:	2a00      	cmp	r2, #0
    58a2:	dd4b      	ble.n	593c <__aeabi_dmul+0x424>
    58a4:	0758      	lsls	r0, r3, #29
    58a6:	d009      	beq.n	58bc <__aeabi_dmul+0x3a4>
    58a8:	200f      	movs	r0, #15
    58aa:	4018      	ands	r0, r3
    58ac:	2804      	cmp	r0, #4
    58ae:	d005      	beq.n	58bc <__aeabi_dmul+0x3a4>
    58b0:	1d18      	adds	r0, r3, #4
    58b2:	4298      	cmp	r0, r3
    58b4:	419b      	sbcs	r3, r3
    58b6:	425b      	negs	r3, r3
    58b8:	18ed      	adds	r5, r5, r3
    58ba:	0003      	movs	r3, r0
    58bc:	01e8      	lsls	r0, r5, #7
    58be:	d504      	bpl.n	58ca <__aeabi_dmul+0x3b2>
    58c0:	4a4f      	ldr	r2, [pc, #316]	; (5a00 <__aeabi_dmul+0x4e8>)
    58c2:	4015      	ands	r5, r2
    58c4:	2280      	movs	r2, #128	; 0x80
    58c6:	00d2      	lsls	r2, r2, #3
    58c8:	18b2      	adds	r2, r6, r2
    58ca:	484e      	ldr	r0, [pc, #312]	; (5a04 <__aeabi_dmul+0x4ec>)
    58cc:	4282      	cmp	r2, r0
    58ce:	dd00      	ble.n	58d2 <__aeabi_dmul+0x3ba>
    58d0:	e6e7      	b.n	56a2 <__aeabi_dmul+0x18a>
    58d2:	2401      	movs	r4, #1
    58d4:	08db      	lsrs	r3, r3, #3
    58d6:	0768      	lsls	r0, r5, #29
    58d8:	4318      	orrs	r0, r3
    58da:	026d      	lsls	r5, r5, #9
    58dc:	0553      	lsls	r3, r2, #21
    58de:	4680      	mov	r8, r0
    58e0:	0b2d      	lsrs	r5, r5, #12
    58e2:	0d5b      	lsrs	r3, r3, #21
    58e4:	400c      	ands	r4, r1
    58e6:	e67d      	b.n	55e4 <__aeabi_dmul+0xcc>
    58e8:	2280      	movs	r2, #128	; 0x80
    58ea:	4659      	mov	r1, fp
    58ec:	0312      	lsls	r2, r2, #12
    58ee:	4211      	tst	r1, r2
    58f0:	d008      	beq.n	5904 <__aeabi_dmul+0x3ec>
    58f2:	4215      	tst	r5, r2
    58f4:	d106      	bne.n	5904 <__aeabi_dmul+0x3ec>
    58f6:	4315      	orrs	r5, r2
    58f8:	032d      	lsls	r5, r5, #12
    58fa:	4698      	mov	r8, r3
    58fc:	0b2d      	lsrs	r5, r5, #12
    58fe:	464c      	mov	r4, r9
    5900:	4b41      	ldr	r3, [pc, #260]	; (5a08 <__aeabi_dmul+0x4f0>)
    5902:	e66f      	b.n	55e4 <__aeabi_dmul+0xcc>
    5904:	465d      	mov	r5, fp
    5906:	4315      	orrs	r5, r2
    5908:	032d      	lsls	r5, r5, #12
    590a:	0b2d      	lsrs	r5, r5, #12
    590c:	4b3e      	ldr	r3, [pc, #248]	; (5a08 <__aeabi_dmul+0x4f0>)
    590e:	e669      	b.n	55e4 <__aeabi_dmul+0xcc>
    5910:	0003      	movs	r3, r0
    5912:	4655      	mov	r5, sl
    5914:	3b28      	subs	r3, #40	; 0x28
    5916:	409d      	lsls	r5, r3
    5918:	2300      	movs	r3, #0
    591a:	e6bc      	b.n	5696 <__aeabi_dmul+0x17e>
    591c:	4650      	mov	r0, sl
    591e:	f000 fd79 	bl	6414 <__clzsi2>
    5922:	3020      	adds	r0, #32
    5924:	e6a8      	b.n	5678 <__aeabi_dmul+0x160>
    5926:	0003      	movs	r3, r0
    5928:	3b28      	subs	r3, #40	; 0x28
    592a:	409f      	lsls	r7, r3
    592c:	2300      	movs	r3, #0
    592e:	46bb      	mov	fp, r7
    5930:	4698      	mov	r8, r3
    5932:	e689      	b.n	5648 <__aeabi_dmul+0x130>
    5934:	f000 fd6e 	bl	6414 <__clzsi2>
    5938:	3020      	adds	r0, #32
    593a:	e673      	b.n	5624 <__aeabi_dmul+0x10c>
    593c:	2401      	movs	r4, #1
    593e:	1aa6      	subs	r6, r4, r2
    5940:	2e38      	cmp	r6, #56	; 0x38
    5942:	dd07      	ble.n	5954 <__aeabi_dmul+0x43c>
    5944:	2200      	movs	r2, #0
    5946:	400c      	ands	r4, r1
    5948:	2300      	movs	r3, #0
    594a:	2500      	movs	r5, #0
    594c:	4690      	mov	r8, r2
    594e:	e649      	b.n	55e4 <__aeabi_dmul+0xcc>
    5950:	9e02      	ldr	r6, [sp, #8]
    5952:	e7a3      	b.n	589c <__aeabi_dmul+0x384>
    5954:	2e1f      	cmp	r6, #31
    5956:	dc20      	bgt.n	599a <__aeabi_dmul+0x482>
    5958:	2220      	movs	r2, #32
    595a:	002c      	movs	r4, r5
    595c:	0018      	movs	r0, r3
    595e:	1b92      	subs	r2, r2, r6
    5960:	40f0      	lsrs	r0, r6
    5962:	4094      	lsls	r4, r2
    5964:	4093      	lsls	r3, r2
    5966:	4304      	orrs	r4, r0
    5968:	1e58      	subs	r0, r3, #1
    596a:	4183      	sbcs	r3, r0
    596c:	431c      	orrs	r4, r3
    596e:	40f5      	lsrs	r5, r6
    5970:	0763      	lsls	r3, r4, #29
    5972:	d009      	beq.n	5988 <__aeabi_dmul+0x470>
    5974:	230f      	movs	r3, #15
    5976:	4023      	ands	r3, r4
    5978:	2b04      	cmp	r3, #4
    597a:	d005      	beq.n	5988 <__aeabi_dmul+0x470>
    597c:	0023      	movs	r3, r4
    597e:	1d1c      	adds	r4, r3, #4
    5980:	429c      	cmp	r4, r3
    5982:	4192      	sbcs	r2, r2
    5984:	4252      	negs	r2, r2
    5986:	18ad      	adds	r5, r5, r2
    5988:	022b      	lsls	r3, r5, #8
    598a:	d51f      	bpl.n	59cc <__aeabi_dmul+0x4b4>
    598c:	2401      	movs	r4, #1
    598e:	2200      	movs	r2, #0
    5990:	400c      	ands	r4, r1
    5992:	2301      	movs	r3, #1
    5994:	2500      	movs	r5, #0
    5996:	4690      	mov	r8, r2
    5998:	e624      	b.n	55e4 <__aeabi_dmul+0xcc>
    599a:	201f      	movs	r0, #31
    599c:	002c      	movs	r4, r5
    599e:	4240      	negs	r0, r0
    59a0:	1a82      	subs	r2, r0, r2
    59a2:	40d4      	lsrs	r4, r2
    59a4:	2e20      	cmp	r6, #32
    59a6:	d01c      	beq.n	59e2 <__aeabi_dmul+0x4ca>
    59a8:	2240      	movs	r2, #64	; 0x40
    59aa:	1b96      	subs	r6, r2, r6
    59ac:	40b5      	lsls	r5, r6
    59ae:	432b      	orrs	r3, r5
    59b0:	1e58      	subs	r0, r3, #1
    59b2:	4183      	sbcs	r3, r0
    59b4:	2007      	movs	r0, #7
    59b6:	4323      	orrs	r3, r4
    59b8:	4018      	ands	r0, r3
    59ba:	2500      	movs	r5, #0
    59bc:	2800      	cmp	r0, #0
    59be:	d009      	beq.n	59d4 <__aeabi_dmul+0x4bc>
    59c0:	220f      	movs	r2, #15
    59c2:	2500      	movs	r5, #0
    59c4:	401a      	ands	r2, r3
    59c6:	001c      	movs	r4, r3
    59c8:	2a04      	cmp	r2, #4
    59ca:	d1d8      	bne.n	597e <__aeabi_dmul+0x466>
    59cc:	0023      	movs	r3, r4
    59ce:	0768      	lsls	r0, r5, #29
    59d0:	026d      	lsls	r5, r5, #9
    59d2:	0b2d      	lsrs	r5, r5, #12
    59d4:	2401      	movs	r4, #1
    59d6:	08db      	lsrs	r3, r3, #3
    59d8:	4303      	orrs	r3, r0
    59da:	4698      	mov	r8, r3
    59dc:	400c      	ands	r4, r1
    59de:	2300      	movs	r3, #0
    59e0:	e600      	b.n	55e4 <__aeabi_dmul+0xcc>
    59e2:	2500      	movs	r5, #0
    59e4:	e7e3      	b.n	59ae <__aeabi_dmul+0x496>
    59e6:	2280      	movs	r2, #128	; 0x80
    59e8:	2401      	movs	r4, #1
    59ea:	0312      	lsls	r2, r2, #12
    59ec:	4315      	orrs	r5, r2
    59ee:	032d      	lsls	r5, r5, #12
    59f0:	4698      	mov	r8, r3
    59f2:	0b2d      	lsrs	r5, r5, #12
    59f4:	400c      	ands	r4, r1
    59f6:	4b04      	ldr	r3, [pc, #16]	; (5a08 <__aeabi_dmul+0x4f0>)
    59f8:	e5f4      	b.n	55e4 <__aeabi_dmul+0xcc>
    59fa:	46c0      	nop			; (mov r8, r8)
    59fc:	000003ff 	.word	0x000003ff
    5a00:	feffffff 	.word	0xfeffffff
    5a04:	000007fe 	.word	0x000007fe
    5a08:	000007ff 	.word	0x000007ff

00005a0c <__aeabi_dsub>:
    5a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a0e:	4657      	mov	r7, sl
    5a10:	464e      	mov	r6, r9
    5a12:	4645      	mov	r5, r8
    5a14:	b4e0      	push	{r5, r6, r7}
    5a16:	000e      	movs	r6, r1
    5a18:	0011      	movs	r1, r2
    5a1a:	0ff2      	lsrs	r2, r6, #31
    5a1c:	4692      	mov	sl, r2
    5a1e:	00c5      	lsls	r5, r0, #3
    5a20:	0f42      	lsrs	r2, r0, #29
    5a22:	0318      	lsls	r0, r3, #12
    5a24:	0337      	lsls	r7, r6, #12
    5a26:	0074      	lsls	r4, r6, #1
    5a28:	0a40      	lsrs	r0, r0, #9
    5a2a:	0f4e      	lsrs	r6, r1, #29
    5a2c:	0a7f      	lsrs	r7, r7, #9
    5a2e:	4330      	orrs	r0, r6
    5a30:	4ecf      	ldr	r6, [pc, #828]	; (5d70 <__aeabi_dsub+0x364>)
    5a32:	4317      	orrs	r7, r2
    5a34:	005a      	lsls	r2, r3, #1
    5a36:	0d64      	lsrs	r4, r4, #21
    5a38:	0d52      	lsrs	r2, r2, #21
    5a3a:	0fdb      	lsrs	r3, r3, #31
    5a3c:	00c9      	lsls	r1, r1, #3
    5a3e:	42b2      	cmp	r2, r6
    5a40:	d100      	bne.n	5a44 <__aeabi_dsub+0x38>
    5a42:	e0e5      	b.n	5c10 <__aeabi_dsub+0x204>
    5a44:	2601      	movs	r6, #1
    5a46:	4073      	eors	r3, r6
    5a48:	1aa6      	subs	r6, r4, r2
    5a4a:	46b4      	mov	ip, r6
    5a4c:	4553      	cmp	r3, sl
    5a4e:	d100      	bne.n	5a52 <__aeabi_dsub+0x46>
    5a50:	e0af      	b.n	5bb2 <__aeabi_dsub+0x1a6>
    5a52:	2e00      	cmp	r6, #0
    5a54:	dc00      	bgt.n	5a58 <__aeabi_dsub+0x4c>
    5a56:	e10d      	b.n	5c74 <__aeabi_dsub+0x268>
    5a58:	2a00      	cmp	r2, #0
    5a5a:	d13a      	bne.n	5ad2 <__aeabi_dsub+0xc6>
    5a5c:	0003      	movs	r3, r0
    5a5e:	430b      	orrs	r3, r1
    5a60:	d000      	beq.n	5a64 <__aeabi_dsub+0x58>
    5a62:	e0e4      	b.n	5c2e <__aeabi_dsub+0x222>
    5a64:	076b      	lsls	r3, r5, #29
    5a66:	d009      	beq.n	5a7c <__aeabi_dsub+0x70>
    5a68:	230f      	movs	r3, #15
    5a6a:	402b      	ands	r3, r5
    5a6c:	2b04      	cmp	r3, #4
    5a6e:	d005      	beq.n	5a7c <__aeabi_dsub+0x70>
    5a70:	1d2b      	adds	r3, r5, #4
    5a72:	42ab      	cmp	r3, r5
    5a74:	41ad      	sbcs	r5, r5
    5a76:	426d      	negs	r5, r5
    5a78:	197f      	adds	r7, r7, r5
    5a7a:	001d      	movs	r5, r3
    5a7c:	023b      	lsls	r3, r7, #8
    5a7e:	d400      	bmi.n	5a82 <__aeabi_dsub+0x76>
    5a80:	e088      	b.n	5b94 <__aeabi_dsub+0x188>
    5a82:	4bbb      	ldr	r3, [pc, #748]	; (5d70 <__aeabi_dsub+0x364>)
    5a84:	3401      	adds	r4, #1
    5a86:	429c      	cmp	r4, r3
    5a88:	d100      	bne.n	5a8c <__aeabi_dsub+0x80>
    5a8a:	e110      	b.n	5cae <__aeabi_dsub+0x2a2>
    5a8c:	003a      	movs	r2, r7
    5a8e:	4bb9      	ldr	r3, [pc, #740]	; (5d74 <__aeabi_dsub+0x368>)
    5a90:	4651      	mov	r1, sl
    5a92:	401a      	ands	r2, r3
    5a94:	2301      	movs	r3, #1
    5a96:	0750      	lsls	r0, r2, #29
    5a98:	08ed      	lsrs	r5, r5, #3
    5a9a:	0252      	lsls	r2, r2, #9
    5a9c:	0564      	lsls	r4, r4, #21
    5a9e:	4305      	orrs	r5, r0
    5aa0:	0b12      	lsrs	r2, r2, #12
    5aa2:	0d64      	lsrs	r4, r4, #21
    5aa4:	400b      	ands	r3, r1
    5aa6:	2100      	movs	r1, #0
    5aa8:	0028      	movs	r0, r5
    5aaa:	0312      	lsls	r2, r2, #12
    5aac:	0d0d      	lsrs	r5, r1, #20
    5aae:	0b12      	lsrs	r2, r2, #12
    5ab0:	0564      	lsls	r4, r4, #21
    5ab2:	052d      	lsls	r5, r5, #20
    5ab4:	4315      	orrs	r5, r2
    5ab6:	0862      	lsrs	r2, r4, #1
    5ab8:	4caf      	ldr	r4, [pc, #700]	; (5d78 <__aeabi_dsub+0x36c>)
    5aba:	07db      	lsls	r3, r3, #31
    5abc:	402c      	ands	r4, r5
    5abe:	4314      	orrs	r4, r2
    5ac0:	0064      	lsls	r4, r4, #1
    5ac2:	0864      	lsrs	r4, r4, #1
    5ac4:	431c      	orrs	r4, r3
    5ac6:	0021      	movs	r1, r4
    5ac8:	bc1c      	pop	{r2, r3, r4}
    5aca:	4690      	mov	r8, r2
    5acc:	4699      	mov	r9, r3
    5ace:	46a2      	mov	sl, r4
    5ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ad2:	4ba7      	ldr	r3, [pc, #668]	; (5d70 <__aeabi_dsub+0x364>)
    5ad4:	429c      	cmp	r4, r3
    5ad6:	d0c5      	beq.n	5a64 <__aeabi_dsub+0x58>
    5ad8:	2380      	movs	r3, #128	; 0x80
    5ada:	041b      	lsls	r3, r3, #16
    5adc:	4318      	orrs	r0, r3
    5ade:	4663      	mov	r3, ip
    5ae0:	2b38      	cmp	r3, #56	; 0x38
    5ae2:	dd00      	ble.n	5ae6 <__aeabi_dsub+0xda>
    5ae4:	e0fd      	b.n	5ce2 <__aeabi_dsub+0x2d6>
    5ae6:	2b1f      	cmp	r3, #31
    5ae8:	dd00      	ble.n	5aec <__aeabi_dsub+0xe0>
    5aea:	e130      	b.n	5d4e <__aeabi_dsub+0x342>
    5aec:	4662      	mov	r2, ip
    5aee:	2320      	movs	r3, #32
    5af0:	1a9b      	subs	r3, r3, r2
    5af2:	0002      	movs	r2, r0
    5af4:	409a      	lsls	r2, r3
    5af6:	4666      	mov	r6, ip
    5af8:	4690      	mov	r8, r2
    5afa:	000a      	movs	r2, r1
    5afc:	4099      	lsls	r1, r3
    5afe:	40f2      	lsrs	r2, r6
    5b00:	4646      	mov	r6, r8
    5b02:	1e4b      	subs	r3, r1, #1
    5b04:	4199      	sbcs	r1, r3
    5b06:	4332      	orrs	r2, r6
    5b08:	4311      	orrs	r1, r2
    5b0a:	4663      	mov	r3, ip
    5b0c:	0002      	movs	r2, r0
    5b0e:	40da      	lsrs	r2, r3
    5b10:	1a69      	subs	r1, r5, r1
    5b12:	428d      	cmp	r5, r1
    5b14:	419b      	sbcs	r3, r3
    5b16:	000d      	movs	r5, r1
    5b18:	1aba      	subs	r2, r7, r2
    5b1a:	425b      	negs	r3, r3
    5b1c:	1ad7      	subs	r7, r2, r3
    5b1e:	023b      	lsls	r3, r7, #8
    5b20:	d535      	bpl.n	5b8e <__aeabi_dsub+0x182>
    5b22:	027a      	lsls	r2, r7, #9
    5b24:	0a53      	lsrs	r3, r2, #9
    5b26:	4698      	mov	r8, r3
    5b28:	4643      	mov	r3, r8
    5b2a:	2b00      	cmp	r3, #0
    5b2c:	d100      	bne.n	5b30 <__aeabi_dsub+0x124>
    5b2e:	e0c4      	b.n	5cba <__aeabi_dsub+0x2ae>
    5b30:	4640      	mov	r0, r8
    5b32:	f000 fc6f 	bl	6414 <__clzsi2>
    5b36:	0003      	movs	r3, r0
    5b38:	3b08      	subs	r3, #8
    5b3a:	2b1f      	cmp	r3, #31
    5b3c:	dd00      	ble.n	5b40 <__aeabi_dsub+0x134>
    5b3e:	e0c5      	b.n	5ccc <__aeabi_dsub+0x2c0>
    5b40:	2220      	movs	r2, #32
    5b42:	0029      	movs	r1, r5
    5b44:	1ad2      	subs	r2, r2, r3
    5b46:	4647      	mov	r7, r8
    5b48:	40d1      	lsrs	r1, r2
    5b4a:	409f      	lsls	r7, r3
    5b4c:	000a      	movs	r2, r1
    5b4e:	409d      	lsls	r5, r3
    5b50:	433a      	orrs	r2, r7
    5b52:	429c      	cmp	r4, r3
    5b54:	dd00      	ble.n	5b58 <__aeabi_dsub+0x14c>
    5b56:	e0c0      	b.n	5cda <__aeabi_dsub+0x2ce>
    5b58:	1b1c      	subs	r4, r3, r4
    5b5a:	1c63      	adds	r3, r4, #1
    5b5c:	2b1f      	cmp	r3, #31
    5b5e:	dd00      	ble.n	5b62 <__aeabi_dsub+0x156>
    5b60:	e0e4      	b.n	5d2c <__aeabi_dsub+0x320>
    5b62:	2120      	movs	r1, #32
    5b64:	0014      	movs	r4, r2
    5b66:	0028      	movs	r0, r5
    5b68:	1ac9      	subs	r1, r1, r3
    5b6a:	40d8      	lsrs	r0, r3
    5b6c:	408c      	lsls	r4, r1
    5b6e:	408d      	lsls	r5, r1
    5b70:	4304      	orrs	r4, r0
    5b72:	40da      	lsrs	r2, r3
    5b74:	1e68      	subs	r0, r5, #1
    5b76:	4185      	sbcs	r5, r0
    5b78:	0017      	movs	r7, r2
    5b7a:	4325      	orrs	r5, r4
    5b7c:	2400      	movs	r4, #0
    5b7e:	e771      	b.n	5a64 <__aeabi_dsub+0x58>
    5b80:	4642      	mov	r2, r8
    5b82:	4663      	mov	r3, ip
    5b84:	431a      	orrs	r2, r3
    5b86:	d100      	bne.n	5b8a <__aeabi_dsub+0x17e>
    5b88:	e24c      	b.n	6024 <__aeabi_dsub+0x618>
    5b8a:	4667      	mov	r7, ip
    5b8c:	4645      	mov	r5, r8
    5b8e:	076b      	lsls	r3, r5, #29
    5b90:	d000      	beq.n	5b94 <__aeabi_dsub+0x188>
    5b92:	e769      	b.n	5a68 <__aeabi_dsub+0x5c>
    5b94:	2301      	movs	r3, #1
    5b96:	4651      	mov	r1, sl
    5b98:	0778      	lsls	r0, r7, #29
    5b9a:	08ed      	lsrs	r5, r5, #3
    5b9c:	08fa      	lsrs	r2, r7, #3
    5b9e:	400b      	ands	r3, r1
    5ba0:	4305      	orrs	r5, r0
    5ba2:	4973      	ldr	r1, [pc, #460]	; (5d70 <__aeabi_dsub+0x364>)
    5ba4:	428c      	cmp	r4, r1
    5ba6:	d038      	beq.n	5c1a <__aeabi_dsub+0x20e>
    5ba8:	0312      	lsls	r2, r2, #12
    5baa:	0564      	lsls	r4, r4, #21
    5bac:	0b12      	lsrs	r2, r2, #12
    5bae:	0d64      	lsrs	r4, r4, #21
    5bb0:	e779      	b.n	5aa6 <__aeabi_dsub+0x9a>
    5bb2:	2e00      	cmp	r6, #0
    5bb4:	dc00      	bgt.n	5bb8 <__aeabi_dsub+0x1ac>
    5bb6:	e09a      	b.n	5cee <__aeabi_dsub+0x2e2>
    5bb8:	2a00      	cmp	r2, #0
    5bba:	d047      	beq.n	5c4c <__aeabi_dsub+0x240>
    5bbc:	4a6c      	ldr	r2, [pc, #432]	; (5d70 <__aeabi_dsub+0x364>)
    5bbe:	4294      	cmp	r4, r2
    5bc0:	d100      	bne.n	5bc4 <__aeabi_dsub+0x1b8>
    5bc2:	e74f      	b.n	5a64 <__aeabi_dsub+0x58>
    5bc4:	2280      	movs	r2, #128	; 0x80
    5bc6:	0412      	lsls	r2, r2, #16
    5bc8:	4310      	orrs	r0, r2
    5bca:	4662      	mov	r2, ip
    5bcc:	2a38      	cmp	r2, #56	; 0x38
    5bce:	dc00      	bgt.n	5bd2 <__aeabi_dsub+0x1c6>
    5bd0:	e108      	b.n	5de4 <__aeabi_dsub+0x3d8>
    5bd2:	4301      	orrs	r1, r0
    5bd4:	1e48      	subs	r0, r1, #1
    5bd6:	4181      	sbcs	r1, r0
    5bd8:	2200      	movs	r2, #0
    5bda:	b2c9      	uxtb	r1, r1
    5bdc:	1949      	adds	r1, r1, r5
    5bde:	19d2      	adds	r2, r2, r7
    5be0:	42a9      	cmp	r1, r5
    5be2:	41bf      	sbcs	r7, r7
    5be4:	000d      	movs	r5, r1
    5be6:	427f      	negs	r7, r7
    5be8:	18bf      	adds	r7, r7, r2
    5bea:	023a      	lsls	r2, r7, #8
    5bec:	d400      	bmi.n	5bf0 <__aeabi_dsub+0x1e4>
    5bee:	e142      	b.n	5e76 <__aeabi_dsub+0x46a>
    5bf0:	4a5f      	ldr	r2, [pc, #380]	; (5d70 <__aeabi_dsub+0x364>)
    5bf2:	3401      	adds	r4, #1
    5bf4:	4294      	cmp	r4, r2
    5bf6:	d100      	bne.n	5bfa <__aeabi_dsub+0x1ee>
    5bf8:	e14e      	b.n	5e98 <__aeabi_dsub+0x48c>
    5bfa:	2001      	movs	r0, #1
    5bfc:	4a5d      	ldr	r2, [pc, #372]	; (5d74 <__aeabi_dsub+0x368>)
    5bfe:	0869      	lsrs	r1, r5, #1
    5c00:	403a      	ands	r2, r7
    5c02:	4028      	ands	r0, r5
    5c04:	4308      	orrs	r0, r1
    5c06:	07d5      	lsls	r5, r2, #31
    5c08:	4305      	orrs	r5, r0
    5c0a:	0857      	lsrs	r7, r2, #1
    5c0c:	469a      	mov	sl, r3
    5c0e:	e729      	b.n	5a64 <__aeabi_dsub+0x58>
    5c10:	0006      	movs	r6, r0
    5c12:	430e      	orrs	r6, r1
    5c14:	d000      	beq.n	5c18 <__aeabi_dsub+0x20c>
    5c16:	e717      	b.n	5a48 <__aeabi_dsub+0x3c>
    5c18:	e714      	b.n	5a44 <__aeabi_dsub+0x38>
    5c1a:	0029      	movs	r1, r5
    5c1c:	4311      	orrs	r1, r2
    5c1e:	d100      	bne.n	5c22 <__aeabi_dsub+0x216>
    5c20:	e1f9      	b.n	6016 <__aeabi_dsub+0x60a>
    5c22:	2180      	movs	r1, #128	; 0x80
    5c24:	0309      	lsls	r1, r1, #12
    5c26:	430a      	orrs	r2, r1
    5c28:	0312      	lsls	r2, r2, #12
    5c2a:	0b12      	lsrs	r2, r2, #12
    5c2c:	e73b      	b.n	5aa6 <__aeabi_dsub+0x9a>
    5c2e:	2301      	movs	r3, #1
    5c30:	425b      	negs	r3, r3
    5c32:	4698      	mov	r8, r3
    5c34:	44c4      	add	ip, r8
    5c36:	4663      	mov	r3, ip
    5c38:	2b00      	cmp	r3, #0
    5c3a:	d172      	bne.n	5d22 <__aeabi_dsub+0x316>
    5c3c:	1a69      	subs	r1, r5, r1
    5c3e:	428d      	cmp	r5, r1
    5c40:	419b      	sbcs	r3, r3
    5c42:	1a3f      	subs	r7, r7, r0
    5c44:	425b      	negs	r3, r3
    5c46:	1aff      	subs	r7, r7, r3
    5c48:	000d      	movs	r5, r1
    5c4a:	e768      	b.n	5b1e <__aeabi_dsub+0x112>
    5c4c:	0002      	movs	r2, r0
    5c4e:	430a      	orrs	r2, r1
    5c50:	d100      	bne.n	5c54 <__aeabi_dsub+0x248>
    5c52:	e707      	b.n	5a64 <__aeabi_dsub+0x58>
    5c54:	2201      	movs	r2, #1
    5c56:	4252      	negs	r2, r2
    5c58:	4690      	mov	r8, r2
    5c5a:	44c4      	add	ip, r8
    5c5c:	4662      	mov	r2, ip
    5c5e:	2a00      	cmp	r2, #0
    5c60:	d000      	beq.n	5c64 <__aeabi_dsub+0x258>
    5c62:	e0e6      	b.n	5e32 <__aeabi_dsub+0x426>
    5c64:	1869      	adds	r1, r5, r1
    5c66:	42a9      	cmp	r1, r5
    5c68:	41b6      	sbcs	r6, r6
    5c6a:	183f      	adds	r7, r7, r0
    5c6c:	4276      	negs	r6, r6
    5c6e:	19f7      	adds	r7, r6, r7
    5c70:	000d      	movs	r5, r1
    5c72:	e7ba      	b.n	5bea <__aeabi_dsub+0x1de>
    5c74:	2e00      	cmp	r6, #0
    5c76:	d000      	beq.n	5c7a <__aeabi_dsub+0x26e>
    5c78:	e080      	b.n	5d7c <__aeabi_dsub+0x370>
    5c7a:	1c62      	adds	r2, r4, #1
    5c7c:	0552      	lsls	r2, r2, #21
    5c7e:	0d52      	lsrs	r2, r2, #21
    5c80:	2a01      	cmp	r2, #1
    5c82:	dc00      	bgt.n	5c86 <__aeabi_dsub+0x27a>
    5c84:	e0f9      	b.n	5e7a <__aeabi_dsub+0x46e>
    5c86:	1a6a      	subs	r2, r5, r1
    5c88:	4691      	mov	r9, r2
    5c8a:	454d      	cmp	r5, r9
    5c8c:	41b6      	sbcs	r6, r6
    5c8e:	1a3a      	subs	r2, r7, r0
    5c90:	4276      	negs	r6, r6
    5c92:	1b92      	subs	r2, r2, r6
    5c94:	4690      	mov	r8, r2
    5c96:	0212      	lsls	r2, r2, #8
    5c98:	d400      	bmi.n	5c9c <__aeabi_dsub+0x290>
    5c9a:	e099      	b.n	5dd0 <__aeabi_dsub+0x3c4>
    5c9c:	1b4d      	subs	r5, r1, r5
    5c9e:	42a9      	cmp	r1, r5
    5ca0:	4189      	sbcs	r1, r1
    5ca2:	1bc7      	subs	r7, r0, r7
    5ca4:	4249      	negs	r1, r1
    5ca6:	1a7a      	subs	r2, r7, r1
    5ca8:	4690      	mov	r8, r2
    5caa:	469a      	mov	sl, r3
    5cac:	e73c      	b.n	5b28 <__aeabi_dsub+0x11c>
    5cae:	4652      	mov	r2, sl
    5cb0:	2301      	movs	r3, #1
    5cb2:	2500      	movs	r5, #0
    5cb4:	4013      	ands	r3, r2
    5cb6:	2200      	movs	r2, #0
    5cb8:	e6f5      	b.n	5aa6 <__aeabi_dsub+0x9a>
    5cba:	0028      	movs	r0, r5
    5cbc:	f000 fbaa 	bl	6414 <__clzsi2>
    5cc0:	3020      	adds	r0, #32
    5cc2:	0003      	movs	r3, r0
    5cc4:	3b08      	subs	r3, #8
    5cc6:	2b1f      	cmp	r3, #31
    5cc8:	dc00      	bgt.n	5ccc <__aeabi_dsub+0x2c0>
    5cca:	e739      	b.n	5b40 <__aeabi_dsub+0x134>
    5ccc:	002a      	movs	r2, r5
    5cce:	3828      	subs	r0, #40	; 0x28
    5cd0:	4082      	lsls	r2, r0
    5cd2:	2500      	movs	r5, #0
    5cd4:	429c      	cmp	r4, r3
    5cd6:	dc00      	bgt.n	5cda <__aeabi_dsub+0x2ce>
    5cd8:	e73e      	b.n	5b58 <__aeabi_dsub+0x14c>
    5cda:	4f26      	ldr	r7, [pc, #152]	; (5d74 <__aeabi_dsub+0x368>)
    5cdc:	1ae4      	subs	r4, r4, r3
    5cde:	4017      	ands	r7, r2
    5ce0:	e6c0      	b.n	5a64 <__aeabi_dsub+0x58>
    5ce2:	4301      	orrs	r1, r0
    5ce4:	1e48      	subs	r0, r1, #1
    5ce6:	4181      	sbcs	r1, r0
    5ce8:	2200      	movs	r2, #0
    5cea:	b2c9      	uxtb	r1, r1
    5cec:	e710      	b.n	5b10 <__aeabi_dsub+0x104>
    5cee:	2e00      	cmp	r6, #0
    5cf0:	d000      	beq.n	5cf4 <__aeabi_dsub+0x2e8>
    5cf2:	e0f1      	b.n	5ed8 <__aeabi_dsub+0x4cc>
    5cf4:	1c62      	adds	r2, r4, #1
    5cf6:	4694      	mov	ip, r2
    5cf8:	0552      	lsls	r2, r2, #21
    5cfa:	0d52      	lsrs	r2, r2, #21
    5cfc:	2a01      	cmp	r2, #1
    5cfe:	dc00      	bgt.n	5d02 <__aeabi_dsub+0x2f6>
    5d00:	e0a0      	b.n	5e44 <__aeabi_dsub+0x438>
    5d02:	4a1b      	ldr	r2, [pc, #108]	; (5d70 <__aeabi_dsub+0x364>)
    5d04:	4594      	cmp	ip, r2
    5d06:	d100      	bne.n	5d0a <__aeabi_dsub+0x2fe>
    5d08:	e0c5      	b.n	5e96 <__aeabi_dsub+0x48a>
    5d0a:	1869      	adds	r1, r5, r1
    5d0c:	42a9      	cmp	r1, r5
    5d0e:	4192      	sbcs	r2, r2
    5d10:	183f      	adds	r7, r7, r0
    5d12:	4252      	negs	r2, r2
    5d14:	19d2      	adds	r2, r2, r7
    5d16:	0849      	lsrs	r1, r1, #1
    5d18:	07d5      	lsls	r5, r2, #31
    5d1a:	430d      	orrs	r5, r1
    5d1c:	0857      	lsrs	r7, r2, #1
    5d1e:	4664      	mov	r4, ip
    5d20:	e6a0      	b.n	5a64 <__aeabi_dsub+0x58>
    5d22:	4b13      	ldr	r3, [pc, #76]	; (5d70 <__aeabi_dsub+0x364>)
    5d24:	429c      	cmp	r4, r3
    5d26:	d000      	beq.n	5d2a <__aeabi_dsub+0x31e>
    5d28:	e6d9      	b.n	5ade <__aeabi_dsub+0xd2>
    5d2a:	e69b      	b.n	5a64 <__aeabi_dsub+0x58>
    5d2c:	0011      	movs	r1, r2
    5d2e:	3c1f      	subs	r4, #31
    5d30:	40e1      	lsrs	r1, r4
    5d32:	000c      	movs	r4, r1
    5d34:	2b20      	cmp	r3, #32
    5d36:	d100      	bne.n	5d3a <__aeabi_dsub+0x32e>
    5d38:	e080      	b.n	5e3c <__aeabi_dsub+0x430>
    5d3a:	2140      	movs	r1, #64	; 0x40
    5d3c:	1acb      	subs	r3, r1, r3
    5d3e:	409a      	lsls	r2, r3
    5d40:	4315      	orrs	r5, r2
    5d42:	1e6a      	subs	r2, r5, #1
    5d44:	4195      	sbcs	r5, r2
    5d46:	2700      	movs	r7, #0
    5d48:	4325      	orrs	r5, r4
    5d4a:	2400      	movs	r4, #0
    5d4c:	e71f      	b.n	5b8e <__aeabi_dsub+0x182>
    5d4e:	4663      	mov	r3, ip
    5d50:	0002      	movs	r2, r0
    5d52:	3b20      	subs	r3, #32
    5d54:	40da      	lsrs	r2, r3
    5d56:	4663      	mov	r3, ip
    5d58:	2b20      	cmp	r3, #32
    5d5a:	d071      	beq.n	5e40 <__aeabi_dsub+0x434>
    5d5c:	2340      	movs	r3, #64	; 0x40
    5d5e:	4666      	mov	r6, ip
    5d60:	1b9b      	subs	r3, r3, r6
    5d62:	4098      	lsls	r0, r3
    5d64:	4301      	orrs	r1, r0
    5d66:	1e48      	subs	r0, r1, #1
    5d68:	4181      	sbcs	r1, r0
    5d6a:	4311      	orrs	r1, r2
    5d6c:	2200      	movs	r2, #0
    5d6e:	e6cf      	b.n	5b10 <__aeabi_dsub+0x104>
    5d70:	000007ff 	.word	0x000007ff
    5d74:	ff7fffff 	.word	0xff7fffff
    5d78:	800fffff 	.word	0x800fffff
    5d7c:	2c00      	cmp	r4, #0
    5d7e:	d048      	beq.n	5e12 <__aeabi_dsub+0x406>
    5d80:	4cca      	ldr	r4, [pc, #808]	; (60ac <__aeabi_dsub+0x6a0>)
    5d82:	42a2      	cmp	r2, r4
    5d84:	d100      	bne.n	5d88 <__aeabi_dsub+0x37c>
    5d86:	e0a2      	b.n	5ece <__aeabi_dsub+0x4c2>
    5d88:	4274      	negs	r4, r6
    5d8a:	46a1      	mov	r9, r4
    5d8c:	2480      	movs	r4, #128	; 0x80
    5d8e:	0424      	lsls	r4, r4, #16
    5d90:	4327      	orrs	r7, r4
    5d92:	464c      	mov	r4, r9
    5d94:	2c38      	cmp	r4, #56	; 0x38
    5d96:	dd00      	ble.n	5d9a <__aeabi_dsub+0x38e>
    5d98:	e0db      	b.n	5f52 <__aeabi_dsub+0x546>
    5d9a:	2c1f      	cmp	r4, #31
    5d9c:	dd00      	ble.n	5da0 <__aeabi_dsub+0x394>
    5d9e:	e144      	b.n	602a <__aeabi_dsub+0x61e>
    5da0:	464e      	mov	r6, r9
    5da2:	2420      	movs	r4, #32
    5da4:	1ba4      	subs	r4, r4, r6
    5da6:	003e      	movs	r6, r7
    5da8:	40a6      	lsls	r6, r4
    5daa:	46a2      	mov	sl, r4
    5dac:	46b0      	mov	r8, r6
    5dae:	464c      	mov	r4, r9
    5db0:	002e      	movs	r6, r5
    5db2:	40e6      	lsrs	r6, r4
    5db4:	46b4      	mov	ip, r6
    5db6:	4646      	mov	r6, r8
    5db8:	4664      	mov	r4, ip
    5dba:	4326      	orrs	r6, r4
    5dbc:	4654      	mov	r4, sl
    5dbe:	40a5      	lsls	r5, r4
    5dc0:	1e6c      	subs	r4, r5, #1
    5dc2:	41a5      	sbcs	r5, r4
    5dc4:	0034      	movs	r4, r6
    5dc6:	432c      	orrs	r4, r5
    5dc8:	464d      	mov	r5, r9
    5dca:	40ef      	lsrs	r7, r5
    5dcc:	1b0d      	subs	r5, r1, r4
    5dce:	e028      	b.n	5e22 <__aeabi_dsub+0x416>
    5dd0:	464a      	mov	r2, r9
    5dd2:	4643      	mov	r3, r8
    5dd4:	464d      	mov	r5, r9
    5dd6:	431a      	orrs	r2, r3
    5dd8:	d000      	beq.n	5ddc <__aeabi_dsub+0x3d0>
    5dda:	e6a5      	b.n	5b28 <__aeabi_dsub+0x11c>
    5ddc:	2300      	movs	r3, #0
    5dde:	2400      	movs	r4, #0
    5de0:	2500      	movs	r5, #0
    5de2:	e6de      	b.n	5ba2 <__aeabi_dsub+0x196>
    5de4:	2a1f      	cmp	r2, #31
    5de6:	dc5a      	bgt.n	5e9e <__aeabi_dsub+0x492>
    5de8:	4666      	mov	r6, ip
    5dea:	2220      	movs	r2, #32
    5dec:	1b92      	subs	r2, r2, r6
    5dee:	0006      	movs	r6, r0
    5df0:	4096      	lsls	r6, r2
    5df2:	4691      	mov	r9, r2
    5df4:	46b0      	mov	r8, r6
    5df6:	4662      	mov	r2, ip
    5df8:	000e      	movs	r6, r1
    5dfa:	40d6      	lsrs	r6, r2
    5dfc:	4642      	mov	r2, r8
    5dfe:	4316      	orrs	r6, r2
    5e00:	464a      	mov	r2, r9
    5e02:	4091      	lsls	r1, r2
    5e04:	1e4a      	subs	r2, r1, #1
    5e06:	4191      	sbcs	r1, r2
    5e08:	0002      	movs	r2, r0
    5e0a:	4660      	mov	r0, ip
    5e0c:	4331      	orrs	r1, r6
    5e0e:	40c2      	lsrs	r2, r0
    5e10:	e6e4      	b.n	5bdc <__aeabi_dsub+0x1d0>
    5e12:	003c      	movs	r4, r7
    5e14:	432c      	orrs	r4, r5
    5e16:	d05a      	beq.n	5ece <__aeabi_dsub+0x4c2>
    5e18:	43f4      	mvns	r4, r6
    5e1a:	46a1      	mov	r9, r4
    5e1c:	2c00      	cmp	r4, #0
    5e1e:	d152      	bne.n	5ec6 <__aeabi_dsub+0x4ba>
    5e20:	1b4d      	subs	r5, r1, r5
    5e22:	42a9      	cmp	r1, r5
    5e24:	4189      	sbcs	r1, r1
    5e26:	1bc7      	subs	r7, r0, r7
    5e28:	4249      	negs	r1, r1
    5e2a:	1a7f      	subs	r7, r7, r1
    5e2c:	0014      	movs	r4, r2
    5e2e:	469a      	mov	sl, r3
    5e30:	e675      	b.n	5b1e <__aeabi_dsub+0x112>
    5e32:	4a9e      	ldr	r2, [pc, #632]	; (60ac <__aeabi_dsub+0x6a0>)
    5e34:	4294      	cmp	r4, r2
    5e36:	d000      	beq.n	5e3a <__aeabi_dsub+0x42e>
    5e38:	e6c7      	b.n	5bca <__aeabi_dsub+0x1be>
    5e3a:	e613      	b.n	5a64 <__aeabi_dsub+0x58>
    5e3c:	2200      	movs	r2, #0
    5e3e:	e77f      	b.n	5d40 <__aeabi_dsub+0x334>
    5e40:	2000      	movs	r0, #0
    5e42:	e78f      	b.n	5d64 <__aeabi_dsub+0x358>
    5e44:	2c00      	cmp	r4, #0
    5e46:	d000      	beq.n	5e4a <__aeabi_dsub+0x43e>
    5e48:	e0c8      	b.n	5fdc <__aeabi_dsub+0x5d0>
    5e4a:	003b      	movs	r3, r7
    5e4c:	432b      	orrs	r3, r5
    5e4e:	d100      	bne.n	5e52 <__aeabi_dsub+0x446>
    5e50:	e10f      	b.n	6072 <__aeabi_dsub+0x666>
    5e52:	0003      	movs	r3, r0
    5e54:	430b      	orrs	r3, r1
    5e56:	d100      	bne.n	5e5a <__aeabi_dsub+0x44e>
    5e58:	e604      	b.n	5a64 <__aeabi_dsub+0x58>
    5e5a:	1869      	adds	r1, r5, r1
    5e5c:	42a9      	cmp	r1, r5
    5e5e:	419b      	sbcs	r3, r3
    5e60:	183f      	adds	r7, r7, r0
    5e62:	425b      	negs	r3, r3
    5e64:	19df      	adds	r7, r3, r7
    5e66:	023b      	lsls	r3, r7, #8
    5e68:	d400      	bmi.n	5e6c <__aeabi_dsub+0x460>
    5e6a:	e11a      	b.n	60a2 <__aeabi_dsub+0x696>
    5e6c:	4b90      	ldr	r3, [pc, #576]	; (60b0 <__aeabi_dsub+0x6a4>)
    5e6e:	000d      	movs	r5, r1
    5e70:	401f      	ands	r7, r3
    5e72:	4664      	mov	r4, ip
    5e74:	e5f6      	b.n	5a64 <__aeabi_dsub+0x58>
    5e76:	469a      	mov	sl, r3
    5e78:	e689      	b.n	5b8e <__aeabi_dsub+0x182>
    5e7a:	003a      	movs	r2, r7
    5e7c:	432a      	orrs	r2, r5
    5e7e:	2c00      	cmp	r4, #0
    5e80:	d15c      	bne.n	5f3c <__aeabi_dsub+0x530>
    5e82:	2a00      	cmp	r2, #0
    5e84:	d175      	bne.n	5f72 <__aeabi_dsub+0x566>
    5e86:	0002      	movs	r2, r0
    5e88:	430a      	orrs	r2, r1
    5e8a:	d100      	bne.n	5e8e <__aeabi_dsub+0x482>
    5e8c:	e0ca      	b.n	6024 <__aeabi_dsub+0x618>
    5e8e:	0007      	movs	r7, r0
    5e90:	000d      	movs	r5, r1
    5e92:	469a      	mov	sl, r3
    5e94:	e5e6      	b.n	5a64 <__aeabi_dsub+0x58>
    5e96:	4664      	mov	r4, ip
    5e98:	2200      	movs	r2, #0
    5e9a:	2500      	movs	r5, #0
    5e9c:	e681      	b.n	5ba2 <__aeabi_dsub+0x196>
    5e9e:	4662      	mov	r2, ip
    5ea0:	0006      	movs	r6, r0
    5ea2:	3a20      	subs	r2, #32
    5ea4:	40d6      	lsrs	r6, r2
    5ea6:	4662      	mov	r2, ip
    5ea8:	46b0      	mov	r8, r6
    5eaa:	2a20      	cmp	r2, #32
    5eac:	d100      	bne.n	5eb0 <__aeabi_dsub+0x4a4>
    5eae:	e0b7      	b.n	6020 <__aeabi_dsub+0x614>
    5eb0:	2240      	movs	r2, #64	; 0x40
    5eb2:	4666      	mov	r6, ip
    5eb4:	1b92      	subs	r2, r2, r6
    5eb6:	4090      	lsls	r0, r2
    5eb8:	4301      	orrs	r1, r0
    5eba:	4642      	mov	r2, r8
    5ebc:	1e48      	subs	r0, r1, #1
    5ebe:	4181      	sbcs	r1, r0
    5ec0:	4311      	orrs	r1, r2
    5ec2:	2200      	movs	r2, #0
    5ec4:	e68a      	b.n	5bdc <__aeabi_dsub+0x1d0>
    5ec6:	4c79      	ldr	r4, [pc, #484]	; (60ac <__aeabi_dsub+0x6a0>)
    5ec8:	42a2      	cmp	r2, r4
    5eca:	d000      	beq.n	5ece <__aeabi_dsub+0x4c2>
    5ecc:	e761      	b.n	5d92 <__aeabi_dsub+0x386>
    5ece:	0007      	movs	r7, r0
    5ed0:	000d      	movs	r5, r1
    5ed2:	0014      	movs	r4, r2
    5ed4:	469a      	mov	sl, r3
    5ed6:	e5c5      	b.n	5a64 <__aeabi_dsub+0x58>
    5ed8:	2c00      	cmp	r4, #0
    5eda:	d141      	bne.n	5f60 <__aeabi_dsub+0x554>
    5edc:	003c      	movs	r4, r7
    5ede:	432c      	orrs	r4, r5
    5ee0:	d078      	beq.n	5fd4 <__aeabi_dsub+0x5c8>
    5ee2:	43f4      	mvns	r4, r6
    5ee4:	46a1      	mov	r9, r4
    5ee6:	2c00      	cmp	r4, #0
    5ee8:	d020      	beq.n	5f2c <__aeabi_dsub+0x520>
    5eea:	4c70      	ldr	r4, [pc, #448]	; (60ac <__aeabi_dsub+0x6a0>)
    5eec:	42a2      	cmp	r2, r4
    5eee:	d071      	beq.n	5fd4 <__aeabi_dsub+0x5c8>
    5ef0:	464c      	mov	r4, r9
    5ef2:	2c38      	cmp	r4, #56	; 0x38
    5ef4:	dd00      	ble.n	5ef8 <__aeabi_dsub+0x4ec>
    5ef6:	e0b2      	b.n	605e <__aeabi_dsub+0x652>
    5ef8:	2c1f      	cmp	r4, #31
    5efa:	dd00      	ble.n	5efe <__aeabi_dsub+0x4f2>
    5efc:	e0bc      	b.n	6078 <__aeabi_dsub+0x66c>
    5efe:	2620      	movs	r6, #32
    5f00:	1b34      	subs	r4, r6, r4
    5f02:	46a2      	mov	sl, r4
    5f04:	003c      	movs	r4, r7
    5f06:	4656      	mov	r6, sl
    5f08:	40b4      	lsls	r4, r6
    5f0a:	464e      	mov	r6, r9
    5f0c:	46a0      	mov	r8, r4
    5f0e:	002c      	movs	r4, r5
    5f10:	40f4      	lsrs	r4, r6
    5f12:	46a4      	mov	ip, r4
    5f14:	4644      	mov	r4, r8
    5f16:	4666      	mov	r6, ip
    5f18:	4334      	orrs	r4, r6
    5f1a:	46a4      	mov	ip, r4
    5f1c:	4654      	mov	r4, sl
    5f1e:	40a5      	lsls	r5, r4
    5f20:	4664      	mov	r4, ip
    5f22:	1e6e      	subs	r6, r5, #1
    5f24:	41b5      	sbcs	r5, r6
    5f26:	4325      	orrs	r5, r4
    5f28:	464c      	mov	r4, r9
    5f2a:	40e7      	lsrs	r7, r4
    5f2c:	186d      	adds	r5, r5, r1
    5f2e:	428d      	cmp	r5, r1
    5f30:	4189      	sbcs	r1, r1
    5f32:	183f      	adds	r7, r7, r0
    5f34:	4249      	negs	r1, r1
    5f36:	19cf      	adds	r7, r1, r7
    5f38:	0014      	movs	r4, r2
    5f3a:	e656      	b.n	5bea <__aeabi_dsub+0x1de>
    5f3c:	2a00      	cmp	r2, #0
    5f3e:	d12f      	bne.n	5fa0 <__aeabi_dsub+0x594>
    5f40:	0002      	movs	r2, r0
    5f42:	430a      	orrs	r2, r1
    5f44:	d100      	bne.n	5f48 <__aeabi_dsub+0x53c>
    5f46:	e084      	b.n	6052 <__aeabi_dsub+0x646>
    5f48:	0007      	movs	r7, r0
    5f4a:	000d      	movs	r5, r1
    5f4c:	469a      	mov	sl, r3
    5f4e:	4c57      	ldr	r4, [pc, #348]	; (60ac <__aeabi_dsub+0x6a0>)
    5f50:	e588      	b.n	5a64 <__aeabi_dsub+0x58>
    5f52:	433d      	orrs	r5, r7
    5f54:	1e6f      	subs	r7, r5, #1
    5f56:	41bd      	sbcs	r5, r7
    5f58:	b2ec      	uxtb	r4, r5
    5f5a:	2700      	movs	r7, #0
    5f5c:	1b0d      	subs	r5, r1, r4
    5f5e:	e760      	b.n	5e22 <__aeabi_dsub+0x416>
    5f60:	4c52      	ldr	r4, [pc, #328]	; (60ac <__aeabi_dsub+0x6a0>)
    5f62:	42a2      	cmp	r2, r4
    5f64:	d036      	beq.n	5fd4 <__aeabi_dsub+0x5c8>
    5f66:	4274      	negs	r4, r6
    5f68:	2680      	movs	r6, #128	; 0x80
    5f6a:	0436      	lsls	r6, r6, #16
    5f6c:	46a1      	mov	r9, r4
    5f6e:	4337      	orrs	r7, r6
    5f70:	e7be      	b.n	5ef0 <__aeabi_dsub+0x4e4>
    5f72:	0002      	movs	r2, r0
    5f74:	430a      	orrs	r2, r1
    5f76:	d100      	bne.n	5f7a <__aeabi_dsub+0x56e>
    5f78:	e574      	b.n	5a64 <__aeabi_dsub+0x58>
    5f7a:	1a6a      	subs	r2, r5, r1
    5f7c:	4690      	mov	r8, r2
    5f7e:	4545      	cmp	r5, r8
    5f80:	41b6      	sbcs	r6, r6
    5f82:	1a3a      	subs	r2, r7, r0
    5f84:	4276      	negs	r6, r6
    5f86:	1b92      	subs	r2, r2, r6
    5f88:	4694      	mov	ip, r2
    5f8a:	0212      	lsls	r2, r2, #8
    5f8c:	d400      	bmi.n	5f90 <__aeabi_dsub+0x584>
    5f8e:	e5f7      	b.n	5b80 <__aeabi_dsub+0x174>
    5f90:	1b4d      	subs	r5, r1, r5
    5f92:	42a9      	cmp	r1, r5
    5f94:	4189      	sbcs	r1, r1
    5f96:	1bc7      	subs	r7, r0, r7
    5f98:	4249      	negs	r1, r1
    5f9a:	1a7f      	subs	r7, r7, r1
    5f9c:	469a      	mov	sl, r3
    5f9e:	e561      	b.n	5a64 <__aeabi_dsub+0x58>
    5fa0:	0002      	movs	r2, r0
    5fa2:	430a      	orrs	r2, r1
    5fa4:	d03a      	beq.n	601c <__aeabi_dsub+0x610>
    5fa6:	08ed      	lsrs	r5, r5, #3
    5fa8:	077c      	lsls	r4, r7, #29
    5faa:	432c      	orrs	r4, r5
    5fac:	2580      	movs	r5, #128	; 0x80
    5fae:	08fa      	lsrs	r2, r7, #3
    5fb0:	032d      	lsls	r5, r5, #12
    5fb2:	422a      	tst	r2, r5
    5fb4:	d008      	beq.n	5fc8 <__aeabi_dsub+0x5bc>
    5fb6:	08c7      	lsrs	r7, r0, #3
    5fb8:	422f      	tst	r7, r5
    5fba:	d105      	bne.n	5fc8 <__aeabi_dsub+0x5bc>
    5fbc:	0745      	lsls	r5, r0, #29
    5fbe:	002c      	movs	r4, r5
    5fc0:	003a      	movs	r2, r7
    5fc2:	469a      	mov	sl, r3
    5fc4:	08c9      	lsrs	r1, r1, #3
    5fc6:	430c      	orrs	r4, r1
    5fc8:	0f67      	lsrs	r7, r4, #29
    5fca:	00d2      	lsls	r2, r2, #3
    5fcc:	00e5      	lsls	r5, r4, #3
    5fce:	4317      	orrs	r7, r2
    5fd0:	4c36      	ldr	r4, [pc, #216]	; (60ac <__aeabi_dsub+0x6a0>)
    5fd2:	e547      	b.n	5a64 <__aeabi_dsub+0x58>
    5fd4:	0007      	movs	r7, r0
    5fd6:	000d      	movs	r5, r1
    5fd8:	0014      	movs	r4, r2
    5fda:	e543      	b.n	5a64 <__aeabi_dsub+0x58>
    5fdc:	003a      	movs	r2, r7
    5fde:	432a      	orrs	r2, r5
    5fe0:	d043      	beq.n	606a <__aeabi_dsub+0x65e>
    5fe2:	0002      	movs	r2, r0
    5fe4:	430a      	orrs	r2, r1
    5fe6:	d019      	beq.n	601c <__aeabi_dsub+0x610>
    5fe8:	08ed      	lsrs	r5, r5, #3
    5fea:	077c      	lsls	r4, r7, #29
    5fec:	432c      	orrs	r4, r5
    5fee:	2580      	movs	r5, #128	; 0x80
    5ff0:	08fa      	lsrs	r2, r7, #3
    5ff2:	032d      	lsls	r5, r5, #12
    5ff4:	422a      	tst	r2, r5
    5ff6:	d007      	beq.n	6008 <__aeabi_dsub+0x5fc>
    5ff8:	08c6      	lsrs	r6, r0, #3
    5ffa:	422e      	tst	r6, r5
    5ffc:	d104      	bne.n	6008 <__aeabi_dsub+0x5fc>
    5ffe:	0747      	lsls	r7, r0, #29
    6000:	003c      	movs	r4, r7
    6002:	0032      	movs	r2, r6
    6004:	08c9      	lsrs	r1, r1, #3
    6006:	430c      	orrs	r4, r1
    6008:	00d7      	lsls	r7, r2, #3
    600a:	0f62      	lsrs	r2, r4, #29
    600c:	00e5      	lsls	r5, r4, #3
    600e:	4317      	orrs	r7, r2
    6010:	469a      	mov	sl, r3
    6012:	4c26      	ldr	r4, [pc, #152]	; (60ac <__aeabi_dsub+0x6a0>)
    6014:	e526      	b.n	5a64 <__aeabi_dsub+0x58>
    6016:	2200      	movs	r2, #0
    6018:	2500      	movs	r5, #0
    601a:	e544      	b.n	5aa6 <__aeabi_dsub+0x9a>
    601c:	4c23      	ldr	r4, [pc, #140]	; (60ac <__aeabi_dsub+0x6a0>)
    601e:	e521      	b.n	5a64 <__aeabi_dsub+0x58>
    6020:	2000      	movs	r0, #0
    6022:	e749      	b.n	5eb8 <__aeabi_dsub+0x4ac>
    6024:	2300      	movs	r3, #0
    6026:	2500      	movs	r5, #0
    6028:	e5bb      	b.n	5ba2 <__aeabi_dsub+0x196>
    602a:	464c      	mov	r4, r9
    602c:	003e      	movs	r6, r7
    602e:	3c20      	subs	r4, #32
    6030:	40e6      	lsrs	r6, r4
    6032:	464c      	mov	r4, r9
    6034:	46b4      	mov	ip, r6
    6036:	2c20      	cmp	r4, #32
    6038:	d031      	beq.n	609e <__aeabi_dsub+0x692>
    603a:	2440      	movs	r4, #64	; 0x40
    603c:	464e      	mov	r6, r9
    603e:	1ba6      	subs	r6, r4, r6
    6040:	40b7      	lsls	r7, r6
    6042:	433d      	orrs	r5, r7
    6044:	1e6c      	subs	r4, r5, #1
    6046:	41a5      	sbcs	r5, r4
    6048:	4664      	mov	r4, ip
    604a:	432c      	orrs	r4, r5
    604c:	2700      	movs	r7, #0
    604e:	1b0d      	subs	r5, r1, r4
    6050:	e6e7      	b.n	5e22 <__aeabi_dsub+0x416>
    6052:	2280      	movs	r2, #128	; 0x80
    6054:	2300      	movs	r3, #0
    6056:	0312      	lsls	r2, r2, #12
    6058:	4c14      	ldr	r4, [pc, #80]	; (60ac <__aeabi_dsub+0x6a0>)
    605a:	2500      	movs	r5, #0
    605c:	e5a1      	b.n	5ba2 <__aeabi_dsub+0x196>
    605e:	433d      	orrs	r5, r7
    6060:	1e6f      	subs	r7, r5, #1
    6062:	41bd      	sbcs	r5, r7
    6064:	2700      	movs	r7, #0
    6066:	b2ed      	uxtb	r5, r5
    6068:	e760      	b.n	5f2c <__aeabi_dsub+0x520>
    606a:	0007      	movs	r7, r0
    606c:	000d      	movs	r5, r1
    606e:	4c0f      	ldr	r4, [pc, #60]	; (60ac <__aeabi_dsub+0x6a0>)
    6070:	e4f8      	b.n	5a64 <__aeabi_dsub+0x58>
    6072:	0007      	movs	r7, r0
    6074:	000d      	movs	r5, r1
    6076:	e4f5      	b.n	5a64 <__aeabi_dsub+0x58>
    6078:	464e      	mov	r6, r9
    607a:	003c      	movs	r4, r7
    607c:	3e20      	subs	r6, #32
    607e:	40f4      	lsrs	r4, r6
    6080:	46a0      	mov	r8, r4
    6082:	464c      	mov	r4, r9
    6084:	2c20      	cmp	r4, #32
    6086:	d00e      	beq.n	60a6 <__aeabi_dsub+0x69a>
    6088:	2440      	movs	r4, #64	; 0x40
    608a:	464e      	mov	r6, r9
    608c:	1ba4      	subs	r4, r4, r6
    608e:	40a7      	lsls	r7, r4
    6090:	433d      	orrs	r5, r7
    6092:	1e6f      	subs	r7, r5, #1
    6094:	41bd      	sbcs	r5, r7
    6096:	4644      	mov	r4, r8
    6098:	2700      	movs	r7, #0
    609a:	4325      	orrs	r5, r4
    609c:	e746      	b.n	5f2c <__aeabi_dsub+0x520>
    609e:	2700      	movs	r7, #0
    60a0:	e7cf      	b.n	6042 <__aeabi_dsub+0x636>
    60a2:	000d      	movs	r5, r1
    60a4:	e573      	b.n	5b8e <__aeabi_dsub+0x182>
    60a6:	2700      	movs	r7, #0
    60a8:	e7f2      	b.n	6090 <__aeabi_dsub+0x684>
    60aa:	46c0      	nop			; (mov r8, r8)
    60ac:	000007ff 	.word	0x000007ff
    60b0:	ff7fffff 	.word	0xff7fffff

000060b4 <__aeabi_dcmpun>:
    60b4:	b570      	push	{r4, r5, r6, lr}
    60b6:	4e0e      	ldr	r6, [pc, #56]	; (60f0 <__aeabi_dcmpun+0x3c>)
    60b8:	030c      	lsls	r4, r1, #12
    60ba:	031d      	lsls	r5, r3, #12
    60bc:	0049      	lsls	r1, r1, #1
    60be:	005b      	lsls	r3, r3, #1
    60c0:	0b24      	lsrs	r4, r4, #12
    60c2:	0d49      	lsrs	r1, r1, #21
    60c4:	0b2d      	lsrs	r5, r5, #12
    60c6:	0d5b      	lsrs	r3, r3, #21
    60c8:	42b1      	cmp	r1, r6
    60ca:	d004      	beq.n	60d6 <__aeabi_dcmpun+0x22>
    60cc:	4908      	ldr	r1, [pc, #32]	; (60f0 <__aeabi_dcmpun+0x3c>)
    60ce:	2000      	movs	r0, #0
    60d0:	428b      	cmp	r3, r1
    60d2:	d008      	beq.n	60e6 <__aeabi_dcmpun+0x32>
    60d4:	bd70      	pop	{r4, r5, r6, pc}
    60d6:	4304      	orrs	r4, r0
    60d8:	2001      	movs	r0, #1
    60da:	2c00      	cmp	r4, #0
    60dc:	d1fa      	bne.n	60d4 <__aeabi_dcmpun+0x20>
    60de:	4904      	ldr	r1, [pc, #16]	; (60f0 <__aeabi_dcmpun+0x3c>)
    60e0:	2000      	movs	r0, #0
    60e2:	428b      	cmp	r3, r1
    60e4:	d1f6      	bne.n	60d4 <__aeabi_dcmpun+0x20>
    60e6:	4315      	orrs	r5, r2
    60e8:	0028      	movs	r0, r5
    60ea:	1e45      	subs	r5, r0, #1
    60ec:	41a8      	sbcs	r0, r5
    60ee:	e7f1      	b.n	60d4 <__aeabi_dcmpun+0x20>
    60f0:	000007ff 	.word	0x000007ff

000060f4 <__aeabi_d2iz>:
    60f4:	030b      	lsls	r3, r1, #12
    60f6:	b530      	push	{r4, r5, lr}
    60f8:	4d13      	ldr	r5, [pc, #76]	; (6148 <__aeabi_d2iz+0x54>)
    60fa:	0b1a      	lsrs	r2, r3, #12
    60fc:	004b      	lsls	r3, r1, #1
    60fe:	0d5b      	lsrs	r3, r3, #21
    6100:	0fc9      	lsrs	r1, r1, #31
    6102:	2400      	movs	r4, #0
    6104:	42ab      	cmp	r3, r5
    6106:	dd11      	ble.n	612c <__aeabi_d2iz+0x38>
    6108:	4c10      	ldr	r4, [pc, #64]	; (614c <__aeabi_d2iz+0x58>)
    610a:	42a3      	cmp	r3, r4
    610c:	dc10      	bgt.n	6130 <__aeabi_d2iz+0x3c>
    610e:	2480      	movs	r4, #128	; 0x80
    6110:	0364      	lsls	r4, r4, #13
    6112:	4322      	orrs	r2, r4
    6114:	4c0e      	ldr	r4, [pc, #56]	; (6150 <__aeabi_d2iz+0x5c>)
    6116:	1ae4      	subs	r4, r4, r3
    6118:	2c1f      	cmp	r4, #31
    611a:	dd0c      	ble.n	6136 <__aeabi_d2iz+0x42>
    611c:	480d      	ldr	r0, [pc, #52]	; (6154 <__aeabi_d2iz+0x60>)
    611e:	1ac3      	subs	r3, r0, r3
    6120:	40da      	lsrs	r2, r3
    6122:	0013      	movs	r3, r2
    6124:	425c      	negs	r4, r3
    6126:	2900      	cmp	r1, #0
    6128:	d100      	bne.n	612c <__aeabi_d2iz+0x38>
    612a:	001c      	movs	r4, r3
    612c:	0020      	movs	r0, r4
    612e:	bd30      	pop	{r4, r5, pc}
    6130:	4b09      	ldr	r3, [pc, #36]	; (6158 <__aeabi_d2iz+0x64>)
    6132:	18cc      	adds	r4, r1, r3
    6134:	e7fa      	b.n	612c <__aeabi_d2iz+0x38>
    6136:	40e0      	lsrs	r0, r4
    6138:	4c08      	ldr	r4, [pc, #32]	; (615c <__aeabi_d2iz+0x68>)
    613a:	46a4      	mov	ip, r4
    613c:	4463      	add	r3, ip
    613e:	409a      	lsls	r2, r3
    6140:	0013      	movs	r3, r2
    6142:	4303      	orrs	r3, r0
    6144:	e7ee      	b.n	6124 <__aeabi_d2iz+0x30>
    6146:	46c0      	nop			; (mov r8, r8)
    6148:	000003fe 	.word	0x000003fe
    614c:	0000041d 	.word	0x0000041d
    6150:	00000433 	.word	0x00000433
    6154:	00000413 	.word	0x00000413
    6158:	7fffffff 	.word	0x7fffffff
    615c:	fffffbed 	.word	0xfffffbed

00006160 <__aeabi_i2d>:
    6160:	b570      	push	{r4, r5, r6, lr}
    6162:	2800      	cmp	r0, #0
    6164:	d030      	beq.n	61c8 <__aeabi_i2d+0x68>
    6166:	17c3      	asrs	r3, r0, #31
    6168:	18c4      	adds	r4, r0, r3
    616a:	405c      	eors	r4, r3
    616c:	0fc5      	lsrs	r5, r0, #31
    616e:	0020      	movs	r0, r4
    6170:	f000 f950 	bl	6414 <__clzsi2>
    6174:	4b17      	ldr	r3, [pc, #92]	; (61d4 <__aeabi_i2d+0x74>)
    6176:	4a18      	ldr	r2, [pc, #96]	; (61d8 <__aeabi_i2d+0x78>)
    6178:	1a1b      	subs	r3, r3, r0
    617a:	1ad2      	subs	r2, r2, r3
    617c:	2a1f      	cmp	r2, #31
    617e:	dd18      	ble.n	61b2 <__aeabi_i2d+0x52>
    6180:	4a16      	ldr	r2, [pc, #88]	; (61dc <__aeabi_i2d+0x7c>)
    6182:	1ad2      	subs	r2, r2, r3
    6184:	4094      	lsls	r4, r2
    6186:	2200      	movs	r2, #0
    6188:	0324      	lsls	r4, r4, #12
    618a:	055b      	lsls	r3, r3, #21
    618c:	0b24      	lsrs	r4, r4, #12
    618e:	0d5b      	lsrs	r3, r3, #21
    6190:	2100      	movs	r1, #0
    6192:	0010      	movs	r0, r2
    6194:	0324      	lsls	r4, r4, #12
    6196:	0d0a      	lsrs	r2, r1, #20
    6198:	0512      	lsls	r2, r2, #20
    619a:	0b24      	lsrs	r4, r4, #12
    619c:	4314      	orrs	r4, r2
    619e:	4a10      	ldr	r2, [pc, #64]	; (61e0 <__aeabi_i2d+0x80>)
    61a0:	051b      	lsls	r3, r3, #20
    61a2:	4014      	ands	r4, r2
    61a4:	431c      	orrs	r4, r3
    61a6:	0064      	lsls	r4, r4, #1
    61a8:	07ed      	lsls	r5, r5, #31
    61aa:	0864      	lsrs	r4, r4, #1
    61ac:	432c      	orrs	r4, r5
    61ae:	0021      	movs	r1, r4
    61b0:	bd70      	pop	{r4, r5, r6, pc}
    61b2:	0021      	movs	r1, r4
    61b4:	4091      	lsls	r1, r2
    61b6:	000a      	movs	r2, r1
    61b8:	210b      	movs	r1, #11
    61ba:	1a08      	subs	r0, r1, r0
    61bc:	40c4      	lsrs	r4, r0
    61be:	055b      	lsls	r3, r3, #21
    61c0:	0324      	lsls	r4, r4, #12
    61c2:	0b24      	lsrs	r4, r4, #12
    61c4:	0d5b      	lsrs	r3, r3, #21
    61c6:	e7e3      	b.n	6190 <__aeabi_i2d+0x30>
    61c8:	2500      	movs	r5, #0
    61ca:	2300      	movs	r3, #0
    61cc:	2400      	movs	r4, #0
    61ce:	2200      	movs	r2, #0
    61d0:	e7de      	b.n	6190 <__aeabi_i2d+0x30>
    61d2:	46c0      	nop			; (mov r8, r8)
    61d4:	0000041e 	.word	0x0000041e
    61d8:	00000433 	.word	0x00000433
    61dc:	00000413 	.word	0x00000413
    61e0:	800fffff 	.word	0x800fffff

000061e4 <__aeabi_ui2d>:
    61e4:	b570      	push	{r4, r5, r6, lr}
    61e6:	1e05      	subs	r5, r0, #0
    61e8:	d028      	beq.n	623c <__aeabi_ui2d+0x58>
    61ea:	f000 f913 	bl	6414 <__clzsi2>
    61ee:	4b15      	ldr	r3, [pc, #84]	; (6244 <__aeabi_ui2d+0x60>)
    61f0:	4a15      	ldr	r2, [pc, #84]	; (6248 <__aeabi_ui2d+0x64>)
    61f2:	1a1b      	subs	r3, r3, r0
    61f4:	1ad2      	subs	r2, r2, r3
    61f6:	2a1f      	cmp	r2, #31
    61f8:	dd16      	ble.n	6228 <__aeabi_ui2d+0x44>
    61fa:	002c      	movs	r4, r5
    61fc:	4a13      	ldr	r2, [pc, #76]	; (624c <__aeabi_ui2d+0x68>)
    61fe:	2500      	movs	r5, #0
    6200:	1ad2      	subs	r2, r2, r3
    6202:	4094      	lsls	r4, r2
    6204:	055a      	lsls	r2, r3, #21
    6206:	0324      	lsls	r4, r4, #12
    6208:	0b24      	lsrs	r4, r4, #12
    620a:	0d52      	lsrs	r2, r2, #21
    620c:	2100      	movs	r1, #0
    620e:	0324      	lsls	r4, r4, #12
    6210:	0d0b      	lsrs	r3, r1, #20
    6212:	0b24      	lsrs	r4, r4, #12
    6214:	051b      	lsls	r3, r3, #20
    6216:	4323      	orrs	r3, r4
    6218:	4c0d      	ldr	r4, [pc, #52]	; (6250 <__aeabi_ui2d+0x6c>)
    621a:	0512      	lsls	r2, r2, #20
    621c:	4023      	ands	r3, r4
    621e:	4313      	orrs	r3, r2
    6220:	005b      	lsls	r3, r3, #1
    6222:	0028      	movs	r0, r5
    6224:	0859      	lsrs	r1, r3, #1
    6226:	bd70      	pop	{r4, r5, r6, pc}
    6228:	210b      	movs	r1, #11
    622a:	002c      	movs	r4, r5
    622c:	1a08      	subs	r0, r1, r0
    622e:	40c4      	lsrs	r4, r0
    6230:	4095      	lsls	r5, r2
    6232:	0324      	lsls	r4, r4, #12
    6234:	055a      	lsls	r2, r3, #21
    6236:	0b24      	lsrs	r4, r4, #12
    6238:	0d52      	lsrs	r2, r2, #21
    623a:	e7e7      	b.n	620c <__aeabi_ui2d+0x28>
    623c:	2200      	movs	r2, #0
    623e:	2400      	movs	r4, #0
    6240:	e7e4      	b.n	620c <__aeabi_ui2d+0x28>
    6242:	46c0      	nop			; (mov r8, r8)
    6244:	0000041e 	.word	0x0000041e
    6248:	00000433 	.word	0x00000433
    624c:	00000413 	.word	0x00000413
    6250:	800fffff 	.word	0x800fffff

00006254 <__aeabi_f2d>:
    6254:	0042      	lsls	r2, r0, #1
    6256:	0e12      	lsrs	r2, r2, #24
    6258:	1c51      	adds	r1, r2, #1
    625a:	0243      	lsls	r3, r0, #9
    625c:	b2c9      	uxtb	r1, r1
    625e:	b570      	push	{r4, r5, r6, lr}
    6260:	0a5d      	lsrs	r5, r3, #9
    6262:	0fc4      	lsrs	r4, r0, #31
    6264:	2901      	cmp	r1, #1
    6266:	dd15      	ble.n	6294 <__aeabi_f2d+0x40>
    6268:	21e0      	movs	r1, #224	; 0xe0
    626a:	0089      	lsls	r1, r1, #2
    626c:	468c      	mov	ip, r1
    626e:	076d      	lsls	r5, r5, #29
    6270:	0b1b      	lsrs	r3, r3, #12
    6272:	4462      	add	r2, ip
    6274:	2100      	movs	r1, #0
    6276:	0028      	movs	r0, r5
    6278:	0d0d      	lsrs	r5, r1, #20
    627a:	052d      	lsls	r5, r5, #20
    627c:	432b      	orrs	r3, r5
    627e:	4d1c      	ldr	r5, [pc, #112]	; (62f0 <__aeabi_f2d+0x9c>)
    6280:	0552      	lsls	r2, r2, #21
    6282:	402b      	ands	r3, r5
    6284:	0852      	lsrs	r2, r2, #1
    6286:	4313      	orrs	r3, r2
    6288:	005b      	lsls	r3, r3, #1
    628a:	07e4      	lsls	r4, r4, #31
    628c:	085b      	lsrs	r3, r3, #1
    628e:	4323      	orrs	r3, r4
    6290:	0019      	movs	r1, r3
    6292:	bd70      	pop	{r4, r5, r6, pc}
    6294:	2a00      	cmp	r2, #0
    6296:	d115      	bne.n	62c4 <__aeabi_f2d+0x70>
    6298:	2d00      	cmp	r5, #0
    629a:	d01f      	beq.n	62dc <__aeabi_f2d+0x88>
    629c:	0028      	movs	r0, r5
    629e:	f000 f8b9 	bl	6414 <__clzsi2>
    62a2:	280a      	cmp	r0, #10
    62a4:	dc1d      	bgt.n	62e2 <__aeabi_f2d+0x8e>
    62a6:	230b      	movs	r3, #11
    62a8:	002a      	movs	r2, r5
    62aa:	1a1b      	subs	r3, r3, r0
    62ac:	40da      	lsrs	r2, r3
    62ae:	0013      	movs	r3, r2
    62b0:	0002      	movs	r2, r0
    62b2:	3215      	adds	r2, #21
    62b4:	4095      	lsls	r5, r2
    62b6:	4a0f      	ldr	r2, [pc, #60]	; (62f4 <__aeabi_f2d+0xa0>)
    62b8:	031b      	lsls	r3, r3, #12
    62ba:	1a12      	subs	r2, r2, r0
    62bc:	0552      	lsls	r2, r2, #21
    62be:	0b1b      	lsrs	r3, r3, #12
    62c0:	0d52      	lsrs	r2, r2, #21
    62c2:	e7d7      	b.n	6274 <__aeabi_f2d+0x20>
    62c4:	2d00      	cmp	r5, #0
    62c6:	d006      	beq.n	62d6 <__aeabi_f2d+0x82>
    62c8:	2280      	movs	r2, #128	; 0x80
    62ca:	0b1b      	lsrs	r3, r3, #12
    62cc:	0312      	lsls	r2, r2, #12
    62ce:	4313      	orrs	r3, r2
    62d0:	076d      	lsls	r5, r5, #29
    62d2:	4a09      	ldr	r2, [pc, #36]	; (62f8 <__aeabi_f2d+0xa4>)
    62d4:	e7ce      	b.n	6274 <__aeabi_f2d+0x20>
    62d6:	4a08      	ldr	r2, [pc, #32]	; (62f8 <__aeabi_f2d+0xa4>)
    62d8:	2300      	movs	r3, #0
    62da:	e7cb      	b.n	6274 <__aeabi_f2d+0x20>
    62dc:	2200      	movs	r2, #0
    62de:	2300      	movs	r3, #0
    62e0:	e7c8      	b.n	6274 <__aeabi_f2d+0x20>
    62e2:	0003      	movs	r3, r0
    62e4:	3b0b      	subs	r3, #11
    62e6:	409d      	lsls	r5, r3
    62e8:	002b      	movs	r3, r5
    62ea:	2500      	movs	r5, #0
    62ec:	e7e3      	b.n	62b6 <__aeabi_f2d+0x62>
    62ee:	46c0      	nop			; (mov r8, r8)
    62f0:	800fffff 	.word	0x800fffff
    62f4:	00000389 	.word	0x00000389
    62f8:	000007ff 	.word	0x000007ff

000062fc <__aeabi_d2f>:
    62fc:	004b      	lsls	r3, r1, #1
    62fe:	b570      	push	{r4, r5, r6, lr}
    6300:	0d5e      	lsrs	r6, r3, #21
    6302:	030c      	lsls	r4, r1, #12
    6304:	1c75      	adds	r5, r6, #1
    6306:	0a64      	lsrs	r4, r4, #9
    6308:	0f42      	lsrs	r2, r0, #29
    630a:	056d      	lsls	r5, r5, #21
    630c:	4322      	orrs	r2, r4
    630e:	0fc9      	lsrs	r1, r1, #31
    6310:	00c4      	lsls	r4, r0, #3
    6312:	0d6d      	lsrs	r5, r5, #21
    6314:	2d01      	cmp	r5, #1
    6316:	dd2a      	ble.n	636e <__aeabi_d2f+0x72>
    6318:	4b3b      	ldr	r3, [pc, #236]	; (6408 <__aeabi_d2f+0x10c>)
    631a:	18f3      	adds	r3, r6, r3
    631c:	2bfe      	cmp	r3, #254	; 0xfe
    631e:	dc1a      	bgt.n	6356 <__aeabi_d2f+0x5a>
    6320:	2b00      	cmp	r3, #0
    6322:	dd42      	ble.n	63aa <__aeabi_d2f+0xae>
    6324:	0180      	lsls	r0, r0, #6
    6326:	1e45      	subs	r5, r0, #1
    6328:	41a8      	sbcs	r0, r5
    632a:	00d2      	lsls	r2, r2, #3
    632c:	4310      	orrs	r0, r2
    632e:	0f62      	lsrs	r2, r4, #29
    6330:	4302      	orrs	r2, r0
    6332:	0750      	lsls	r0, r2, #29
    6334:	d004      	beq.n	6340 <__aeabi_d2f+0x44>
    6336:	200f      	movs	r0, #15
    6338:	4010      	ands	r0, r2
    633a:	2804      	cmp	r0, #4
    633c:	d000      	beq.n	6340 <__aeabi_d2f+0x44>
    633e:	3204      	adds	r2, #4
    6340:	2080      	movs	r0, #128	; 0x80
    6342:	04c0      	lsls	r0, r0, #19
    6344:	4010      	ands	r0, r2
    6346:	d021      	beq.n	638c <__aeabi_d2f+0x90>
    6348:	3301      	adds	r3, #1
    634a:	2bff      	cmp	r3, #255	; 0xff
    634c:	d003      	beq.n	6356 <__aeabi_d2f+0x5a>
    634e:	0192      	lsls	r2, r2, #6
    6350:	0a52      	lsrs	r2, r2, #9
    6352:	b2db      	uxtb	r3, r3
    6354:	e001      	b.n	635a <__aeabi_d2f+0x5e>
    6356:	23ff      	movs	r3, #255	; 0xff
    6358:	2200      	movs	r2, #0
    635a:	0252      	lsls	r2, r2, #9
    635c:	0a52      	lsrs	r2, r2, #9
    635e:	05db      	lsls	r3, r3, #23
    6360:	4313      	orrs	r3, r2
    6362:	005b      	lsls	r3, r3, #1
    6364:	07c9      	lsls	r1, r1, #31
    6366:	085b      	lsrs	r3, r3, #1
    6368:	430b      	orrs	r3, r1
    636a:	0018      	movs	r0, r3
    636c:	bd70      	pop	{r4, r5, r6, pc}
    636e:	2e00      	cmp	r6, #0
    6370:	d007      	beq.n	6382 <__aeabi_d2f+0x86>
    6372:	4314      	orrs	r4, r2
    6374:	d0ef      	beq.n	6356 <__aeabi_d2f+0x5a>
    6376:	2080      	movs	r0, #128	; 0x80
    6378:	00d2      	lsls	r2, r2, #3
    637a:	0480      	lsls	r0, r0, #18
    637c:	4302      	orrs	r2, r0
    637e:	23ff      	movs	r3, #255	; 0xff
    6380:	e7d7      	b.n	6332 <__aeabi_d2f+0x36>
    6382:	4322      	orrs	r2, r4
    6384:	2300      	movs	r3, #0
    6386:	2a00      	cmp	r2, #0
    6388:	d003      	beq.n	6392 <__aeabi_d2f+0x96>
    638a:	2205      	movs	r2, #5
    638c:	08d2      	lsrs	r2, r2, #3
    638e:	2bff      	cmp	r3, #255	; 0xff
    6390:	d003      	beq.n	639a <__aeabi_d2f+0x9e>
    6392:	0252      	lsls	r2, r2, #9
    6394:	0a52      	lsrs	r2, r2, #9
    6396:	b2db      	uxtb	r3, r3
    6398:	e7df      	b.n	635a <__aeabi_d2f+0x5e>
    639a:	2a00      	cmp	r2, #0
    639c:	d032      	beq.n	6404 <__aeabi_d2f+0x108>
    639e:	2080      	movs	r0, #128	; 0x80
    63a0:	03c0      	lsls	r0, r0, #15
    63a2:	4302      	orrs	r2, r0
    63a4:	0252      	lsls	r2, r2, #9
    63a6:	0a52      	lsrs	r2, r2, #9
    63a8:	e7d7      	b.n	635a <__aeabi_d2f+0x5e>
    63aa:	0018      	movs	r0, r3
    63ac:	3017      	adds	r0, #23
    63ae:	db14      	blt.n	63da <__aeabi_d2f+0xde>
    63b0:	2080      	movs	r0, #128	; 0x80
    63b2:	0400      	lsls	r0, r0, #16
    63b4:	4302      	orrs	r2, r0
    63b6:	201e      	movs	r0, #30
    63b8:	1ac0      	subs	r0, r0, r3
    63ba:	281f      	cmp	r0, #31
    63bc:	dc0f      	bgt.n	63de <__aeabi_d2f+0xe2>
    63be:	0025      	movs	r5, r4
    63c0:	4b12      	ldr	r3, [pc, #72]	; (640c <__aeabi_d2f+0x110>)
    63c2:	18f3      	adds	r3, r6, r3
    63c4:	409d      	lsls	r5, r3
    63c6:	1e6e      	subs	r6, r5, #1
    63c8:	41b5      	sbcs	r5, r6
    63ca:	409a      	lsls	r2, r3
    63cc:	002b      	movs	r3, r5
    63ce:	4313      	orrs	r3, r2
    63d0:	0022      	movs	r2, r4
    63d2:	40c2      	lsrs	r2, r0
    63d4:	431a      	orrs	r2, r3
    63d6:	2300      	movs	r3, #0
    63d8:	e7ab      	b.n	6332 <__aeabi_d2f+0x36>
    63da:	2300      	movs	r3, #0
    63dc:	e7d5      	b.n	638a <__aeabi_d2f+0x8e>
    63de:	2502      	movs	r5, #2
    63e0:	426d      	negs	r5, r5
    63e2:	1aeb      	subs	r3, r5, r3
    63e4:	0015      	movs	r5, r2
    63e6:	40dd      	lsrs	r5, r3
    63e8:	2820      	cmp	r0, #32
    63ea:	d009      	beq.n	6400 <__aeabi_d2f+0x104>
    63ec:	4b08      	ldr	r3, [pc, #32]	; (6410 <__aeabi_d2f+0x114>)
    63ee:	18f3      	adds	r3, r6, r3
    63f0:	409a      	lsls	r2, r3
    63f2:	4314      	orrs	r4, r2
    63f4:	1e62      	subs	r2, r4, #1
    63f6:	4194      	sbcs	r4, r2
    63f8:	0022      	movs	r2, r4
    63fa:	2300      	movs	r3, #0
    63fc:	432a      	orrs	r2, r5
    63fe:	e798      	b.n	6332 <__aeabi_d2f+0x36>
    6400:	2200      	movs	r2, #0
    6402:	e7f6      	b.n	63f2 <__aeabi_d2f+0xf6>
    6404:	2200      	movs	r2, #0
    6406:	e7a8      	b.n	635a <__aeabi_d2f+0x5e>
    6408:	fffffc80 	.word	0xfffffc80
    640c:	fffffc82 	.word	0xfffffc82
    6410:	fffffca2 	.word	0xfffffca2

00006414 <__clzsi2>:
    6414:	211c      	movs	r1, #28
    6416:	2301      	movs	r3, #1
    6418:	041b      	lsls	r3, r3, #16
    641a:	4298      	cmp	r0, r3
    641c:	d301      	bcc.n	6422 <__clzsi2+0xe>
    641e:	0c00      	lsrs	r0, r0, #16
    6420:	3910      	subs	r1, #16
    6422:	0a1b      	lsrs	r3, r3, #8
    6424:	4298      	cmp	r0, r3
    6426:	d301      	bcc.n	642c <__clzsi2+0x18>
    6428:	0a00      	lsrs	r0, r0, #8
    642a:	3908      	subs	r1, #8
    642c:	091b      	lsrs	r3, r3, #4
    642e:	4298      	cmp	r0, r3
    6430:	d301      	bcc.n	6436 <__clzsi2+0x22>
    6432:	0900      	lsrs	r0, r0, #4
    6434:	3904      	subs	r1, #4
    6436:	a202      	add	r2, pc, #8	; (adr r2, 6440 <__clzsi2+0x2c>)
    6438:	5c10      	ldrb	r0, [r2, r0]
    643a:	1840      	adds	r0, r0, r1
    643c:	4770      	bx	lr
    643e:	46c0      	nop			; (mov r8, r8)
    6440:	02020304 	.word	0x02020304
    6444:	01010101 	.word	0x01010101
	...

00006450 <__errno>:
    6450:	4b01      	ldr	r3, [pc, #4]	; (6458 <__errno+0x8>)
    6452:	6818      	ldr	r0, [r3, #0]
    6454:	4770      	bx	lr
    6456:	46c0      	nop			; (mov r8, r8)
    6458:	200000d4 	.word	0x200000d4

0000645c <__libc_init_array>:
    645c:	4b0e      	ldr	r3, [pc, #56]	; (6498 <__libc_init_array+0x3c>)
    645e:	b570      	push	{r4, r5, r6, lr}
    6460:	2500      	movs	r5, #0
    6462:	001e      	movs	r6, r3
    6464:	4c0d      	ldr	r4, [pc, #52]	; (649c <__libc_init_array+0x40>)
    6466:	1ae4      	subs	r4, r4, r3
    6468:	10a4      	asrs	r4, r4, #2
    646a:	42a5      	cmp	r5, r4
    646c:	d004      	beq.n	6478 <__libc_init_array+0x1c>
    646e:	00ab      	lsls	r3, r5, #2
    6470:	58f3      	ldr	r3, [r6, r3]
    6472:	4798      	blx	r3
    6474:	3501      	adds	r5, #1
    6476:	e7f8      	b.n	646a <__libc_init_array+0xe>
    6478:	f000 f894 	bl	65a4 <_init>
    647c:	4b08      	ldr	r3, [pc, #32]	; (64a0 <__libc_init_array+0x44>)
    647e:	2500      	movs	r5, #0
    6480:	001e      	movs	r6, r3
    6482:	4c08      	ldr	r4, [pc, #32]	; (64a4 <__libc_init_array+0x48>)
    6484:	1ae4      	subs	r4, r4, r3
    6486:	10a4      	asrs	r4, r4, #2
    6488:	42a5      	cmp	r5, r4
    648a:	d004      	beq.n	6496 <__libc_init_array+0x3a>
    648c:	00ab      	lsls	r3, r5, #2
    648e:	58f3      	ldr	r3, [r6, r3]
    6490:	4798      	blx	r3
    6492:	3501      	adds	r5, #1
    6494:	e7f8      	b.n	6488 <__libc_init_array+0x2c>
    6496:	bd70      	pop	{r4, r5, r6, pc}
    6498:	000065b0 	.word	0x000065b0
    649c:	000065b0 	.word	0x000065b0
    64a0:	000065b0 	.word	0x000065b0
    64a4:	000065b4 	.word	0x000065b4

000064a8 <senseBatPin>:
    64a8:	06000000 01000106                                .....

000064ad <senseAPin>:
    64ad:	03010001 0100010b                                .....

000064b2 <senseBPin>:
    64b2:	02010001 0000010a                                .....

000064b7 <senseCPin>:
    64b7:	03000001 00000101                                .....

000064bc <senseDPin>:
    64bc:	02000001 00000100                                .....

000064c1 <analogAccelPin>:
    64c1:	07000001 70000007 0000776f 00000000              .......pow.....

000064d0 <TWO52>:
    64d0:	00000000 43300000 00000000 c3300000     ......0C......0.
    64e0:	00004528 00004486 00004486 00004484     (E...D...D...D..
    64f0:	0000451a 0000451a 00004510 00004484     .E...E...E...D..
    6500:	0000451a 00004510 0000451a 00004484     .E...E...E...D..
    6510:	00004520 00004520 00004520 000045aa      E.. E.. E...E..
    6520:	00004ec0 00004d8e 00004e94 00004d84     .N...M...N...M..
    6530:	00004e94 00004e9e 00004e94 00004d84     .N...N...N...M..
    6540:	00004d8e 00004d8e 00004e9e 00004d84     .M...M...N...M..
    6550:	00004d7a 00004d7a 00004d7a 000050f0     zM..zM..zM...P..
    6560:	00005708 000055c8 000055c8 000055c6     .W...U...U...U..
    6570:	000056e0 000056e0 000056d2 000055c6     .V...V...V...U..
    6580:	000056e0 000056d2 000056e0 000055c6     .V...V...V...U..
    6590:	000056e8 000056e8 000056e8 000058e8     .V...V...V...X..
    65a0:	00000043                                C...

000065a4 <_init>:
    65a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65a6:	46c0      	nop			; (mov r8, r8)
    65a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    65aa:	bc08      	pop	{r3}
    65ac:	469e      	mov	lr, r3
    65ae:	4770      	bx	lr

000065b0 <__init_array_start>:
    65b0:	000000dd 	.word	0x000000dd

000065b4 <_fini>:
    65b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65b6:	46c0      	nop			; (mov r8, r8)
    65b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    65ba:	bc08      	pop	{r3}
    65bc:	469e      	mov	lr, r3
    65be:	4770      	bx	lr

000065c0 <__fini_array_start>:
    65c0:	000000b5 	.word	0x000000b5
