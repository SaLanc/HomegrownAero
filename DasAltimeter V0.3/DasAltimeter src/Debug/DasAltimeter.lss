
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006ff4  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000120  20000000  00006ff4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000530  20000120  00007118  00020120  2**3
                  ALLOC
  3 .stack        00002000  20000650  00007648  00020120  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
  6 .debug_info   00027399  00000000  00000000  000201a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d19  00000000  00000000  0004753a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000318f  00000000  00000000  0004a253  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000500  00000000  00000000  0004d3e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d68  00000000  00000000  0004d8e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016928  00000000  00000000  0004e64a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000aa22  00000000  00000000  00064f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072c57  00000000  00000000  0006f994  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001220  00000000  00000000  000e25ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	20002650 	.word	0x20002650
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000a65 	.word	0x00000a65
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	000010e9 	.word	0x000010e9
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	0000111d 	.word	0x0000111d
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	000011bd 	.word	0x000011bd
      90:	00001225 	.word	0x00001225
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000120 	.word	0x20000120
      d4:	00000000 	.word	0x00000000
      d8:	00006ff4 	.word	0x00006ff4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000124 	.word	0x20000124
     108:	00006ff4 	.word	0x00006ff4
     10c:	00006ff4 	.word	0x00006ff4
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	00006ff4 	.word	0x00006ff4
     1a4:	20000000 	.word	0x20000000
     1a8:	20000120 	.word	0x20000120
     1ac:	20000120 	.word	0x20000120
     1b0:	20000650 	.word	0x20000650
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00006e89 	.word	0x00006e89
     1d0:	000009d5 	.word	0x000009d5

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady() {
     1e6:	b570      	push	{r4, r5, r6, lr}
     1e8:	4c08      	ldr	r4, [pc, #32]	; (20c <AT25SFHoldTillReady+0x28>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	6163      	str	r3, [r4, #20]
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_READSTATUS);
     1ee:	2105      	movs	r1, #5
     1f0:	2001      	movs	r0, #1
     1f2:	4b07      	ldr	r3, [pc, #28]	; (210 <AT25SFHoldTillReady+0x2c>)
     1f4:	4798      	blx	r3
    while (spiDataIn(MEM_SPI) & 0x01);
     1f6:	2501      	movs	r5, #1
     1f8:	2001      	movs	r0, #1
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <AT25SFHoldTillReady+0x30>)
     1fc:	4798      	blx	r3
     1fe:	4228      	tst	r0, r5
     200:	d1fa      	bne.n	1f8 <AT25SFHoldTillReady+0x14>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     202:	2380      	movs	r3, #128	; 0x80
     204:	02db      	lsls	r3, r3, #11
     206:	61a3      	str	r3, [r4, #24]
    pinHigh(cs_mem);
}
     208:	bd70      	pop	{r4, r5, r6, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	41004400 	.word	0x41004400
     210:	000034dd 	.word	0x000034dd
     214:	000034f5 	.word	0x000034f5

00000218 <AT25SFChipErase>:
void AT25SFChipErase() {
     218:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     21a:	2580      	movs	r5, #128	; 0x80
     21c:	4c06      	ldr	r4, [pc, #24]	; (238 <AT25SFChipErase+0x20>)
     21e:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     220:	4e06      	ldr	r6, [pc, #24]	; (23c <AT25SFChipErase+0x24>)
     222:	6165      	str	r5, [r4, #20]
     224:	2106      	movs	r1, #6
     226:	2001      	movs	r0, #1
     228:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_CHIP_ERASE);
     22c:	2160      	movs	r1, #96	; 0x60
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     22e:	6165      	str	r5, [r4, #20]
     230:	2001      	movs	r0, #1
     232:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     234:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     236:	bd70      	pop	{r4, r5, r6, pc}
     238:	41004400 	.word	0x41004400
     23c:	000034dd 	.word	0x000034dd

00000240 <AT25SFWriteBytes>:
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     242:	2780      	movs	r7, #128	; 0x80
     244:	0006      	movs	r6, r0
     246:	4d14      	ldr	r5, [pc, #80]	; (298 <AT25SFWriteBytes+0x58>)

    AT25SFHoldTillReady();
     248:	4b14      	ldr	r3, [pc, #80]	; (29c <AT25SFWriteBytes+0x5c>)
     24a:	02ff      	lsls	r7, r7, #11
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     24c:	9201      	str	r2, [sp, #4]
     24e:	9100      	str	r1, [sp, #0]

    AT25SFHoldTillReady();
     250:	4798      	blx	r3

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     252:	4c13      	ldr	r4, [pc, #76]	; (2a0 <AT25SFWriteBytes+0x60>)
     254:	616f      	str	r7, [r5, #20]
     256:	2106      	movs	r1, #6
     258:	2001      	movs	r0, #1
     25a:	47a0      	blx	r4
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     25c:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     25e:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     260:	616f      	str	r7, [r5, #20]
     262:	2001      	movs	r0, #1
     264:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0xFF0000) >> 16));
     266:	0c31      	lsrs	r1, r6, #16
     268:	b2c9      	uxtb	r1, r1
     26a:	2001      	movs	r0, #1
     26c:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x00FF00) >>  8));
     26e:	0a31      	lsrs	r1, r6, #8
     270:	b2c9      	uxtb	r1, r1
     272:	2001      	movs	r0, #1
     274:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x0000FF) >>  0));
     276:	b2f1      	uxtb	r1, r6
     278:	2001      	movs	r0, #1
     27a:	47a0      	blx	r4
     27c:	9e01      	ldr	r6, [sp, #4]
     27e:	9b00      	ldr	r3, [sp, #0]
     280:	18f7      	adds	r7, r6, r3

    for (u8_t pos = 0; pos < len; ++pos) {
     282:	42be      	cmp	r6, r7
     284:	d004      	beq.n	290 <AT25SFWriteBytes+0x50>
        spiDataOut(MEM_SPI, bytes[pos]);
     286:	7831      	ldrb	r1, [r6, #0]
     288:	2001      	movs	r0, #1
     28a:	47a0      	blx	r4
     28c:	3601      	adds	r6, #1
     28e:	e7f8      	b.n	282 <AT25SFWriteBytes+0x42>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     290:	2380      	movs	r3, #128	; 0x80
     292:	02db      	lsls	r3, r3, #11
     294:	61ab      	str	r3, [r5, #24]
    }

    pinHigh(cs_mem);

}
     296:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     298:	41004400 	.word	0x41004400
     29c:	000001e5 	.word	0x000001e5
     2a0:	000034dd 	.word	0x000034dd

000002a4 <AT25SEWritePage>:
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2a6:	2780      	movs	r7, #128	; 0x80
     2a8:	0006      	movs	r6, r0
     2aa:	4d13      	ldr	r5, [pc, #76]	; (2f8 <AT25SEWritePage+0x54>)
     2ac:	02ff      	lsls	r7, r7, #11

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2ae:	4c13      	ldr	r4, [pc, #76]	; (2fc <AT25SEWritePage+0x58>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2b0:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2b2:	2001      	movs	r0, #1
     2b4:	616f      	str	r7, [r5, #20]
     2b6:	2106      	movs	r1, #6
     2b8:	47a0      	blx	r4
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ba:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     2bc:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2be:	616f      	str	r7, [r5, #20]
     2c0:	2001      	movs	r0, #1
     2c2:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     2c4:	0c31      	lsrs	r1, r6, #16
     2c6:	b2c9      	uxtb	r1, r1
     2c8:	2001      	movs	r0, #1
     2ca:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     2cc:	0a31      	lsrs	r1, r6, #8
     2ce:	b2c9      	uxtb	r1, r1
     2d0:	2001      	movs	r0, #1
     2d2:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     2d4:	b2f1      	uxtb	r1, r6
     2d6:	2001      	movs	r0, #1
     2d8:	47a0      	blx	r4
     2da:	9e01      	ldr	r6, [sp, #4]
     2dc:	1c77      	adds	r7, r6, #1
     2de:	37ff      	adds	r7, #255	; 0xff


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        spiDataOut(SPI1,data[pos]);
     2e0:	7831      	ldrb	r1, [r6, #0]
     2e2:	2001      	movs	r0, #1
     2e4:	3601      	adds	r6, #1
     2e6:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     2e8:	42be      	cmp	r6, r7
     2ea:	d1f9      	bne.n	2e0 <AT25SEWritePage+0x3c>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ec:	2380      	movs	r3, #128	; 0x80
     2ee:	02db      	lsls	r3, r3, #11
     2f0:	61ab      	str	r3, [r5, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     2f2:	2000      	movs	r0, #0
     2f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	41004400 	.word	0x41004400
     2fc:	000034dd 	.word	0x000034dd

00000300 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     300:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     304:	0005      	movs	r5, r0
     306:	000f      	movs	r7, r1
     308:	4e11      	ldr	r6, [pc, #68]	; (350 <AT25SEreadSample+0x50>)
     30a:	02db      	lsls	r3, r3, #11
     30c:	9201      	str	r2, [sp, #4]

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     30e:	4c11      	ldr	r4, [pc, #68]	; (354 <AT25SEreadSample+0x54>)
     310:	6173      	str	r3, [r6, #20]
     312:	210b      	movs	r1, #11
     314:	2001      	movs	r0, #1
     316:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     318:	0c29      	lsrs	r1, r5, #16
     31a:	b2c9      	uxtb	r1, r1
     31c:	2001      	movs	r0, #1
     31e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     320:	0a29      	lsrs	r1, r5, #8
     322:	b2c9      	uxtb	r1, r1
     324:	2001      	movs	r0, #1
     326:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     328:	b2e9      	uxtb	r1, r5
     32a:	2001      	movs	r0, #1
     32c:	47a0      	blx	r4
    spiDataOut(MEM_SPI, 0xFF);
     32e:	21ff      	movs	r1, #255	; 0xff
     330:	2001      	movs	r0, #1
     332:	47a0      	blx	r4
     334:	9c01      	ldr	r4, [sp, #4]
     336:	19e7      	adds	r7, r4, r7


    for (u8_t pos = 0; pos < len; ++pos) {
     338:	42bc      	cmp	r4, r7
     33a:	d005      	beq.n	348 <AT25SEreadSample+0x48>
        data[pos] = spiDataIn(MEM_SPI);
     33c:	2001      	movs	r0, #1
     33e:	4b06      	ldr	r3, [pc, #24]	; (358 <AT25SEreadSample+0x58>)
     340:	4798      	blx	r3
     342:	7020      	strb	r0, [r4, #0]
     344:	3401      	adds	r4, #1
     346:	e7f7      	b.n	338 <AT25SEreadSample+0x38>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     348:	2380      	movs	r3, #128	; 0x80
     34a:	02db      	lsls	r3, r3, #11
     34c:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);

}
     34e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     350:	41004400 	.word	0x41004400
     354:	000034dd 	.word	0x000034dd
     358:	000034f5 	.word	0x000034f5

0000035c <AT25SEreadPage>:

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     35e:	2380      	movs	r3, #128	; 0x80
     360:	0007      	movs	r7, r0
     362:	000c      	movs	r4, r1
     364:	4e10      	ldr	r6, [pc, #64]	; (3a8 <AT25SEreadPage+0x4c>)
     366:	02db      	lsls	r3, r3, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     368:	4d10      	ldr	r5, [pc, #64]	; (3ac <AT25SEreadPage+0x50>)
     36a:	6173      	str	r3, [r6, #20]
     36c:	210b      	movs	r1, #11
     36e:	2001      	movs	r0, #1
     370:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     372:	0c39      	lsrs	r1, r7, #16
     374:	b2c9      	uxtb	r1, r1
     376:	2001      	movs	r0, #1
     378:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     37a:	0a39      	lsrs	r1, r7, #8
     37c:	b2c9      	uxtb	r1, r1
     37e:	2001      	movs	r0, #1
     380:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     382:	b2f9      	uxtb	r1, r7
     384:	2001      	movs	r0, #1
     386:	47a8      	blx	r5
    spiDataOut(MEM_SPI, 0xFF);
     388:	21ff      	movs	r1, #255	; 0xff
     38a:	2001      	movs	r0, #1
     38c:	47a8      	blx	r5
     38e:	1c65      	adds	r5, r4, #1
     390:	35ff      	adds	r5, #255	; 0xff

    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataIn(MEM_SPI);
     392:	2001      	movs	r0, #1
     394:	4b06      	ldr	r3, [pc, #24]	; (3b0 <AT25SEreadPage+0x54>)
     396:	4798      	blx	r3
     398:	7020      	strb	r0, [r4, #0]
     39a:	3401      	adds	r4, #1
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
    spiDataOut(MEM_SPI, 0xFF);

    for (u16_t pos = 0; pos < 256; ++pos) {
     39c:	42ac      	cmp	r4, r5
     39e:	d1f8      	bne.n	392 <AT25SEreadPage+0x36>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3a0:	2380      	movs	r3, #128	; 0x80
     3a2:	02db      	lsls	r3, r3, #11
     3a4:	61b3      	str	r3, [r6, #24]
        data[pos] = spiDataIn(MEM_SPI);
    }
    pinHigh(cs_mem);

}
     3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3a8:	41004400 	.word	0x41004400
     3ac:	000034dd 	.word	0x000034dd
     3b0:	000034f5 	.word	0x000034f5

000003b4 <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>

u32_t readMS5803AdcResults() {
     3b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b6:	2780      	movs	r7, #128	; 0x80
     3b8:	4e0b      	ldr	r6, [pc, #44]	; (3e8 <readMS5803AdcResults+0x34>)
     3ba:	01ff      	lsls	r7, r7, #7

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, cmdAdcRead_);
     3bc:	2100      	movs	r1, #0
     3be:	4b0b      	ldr	r3, [pc, #44]	; (3ec <readMS5803AdcResults+0x38>)
     3c0:	6177      	str	r7, [r6, #20]
     3c2:	2002      	movs	r0, #2
     3c4:	4798      	blx	r3
    u8_t _byte1 = spiDataIn(SPI2);
     3c6:	4d0a      	ldr	r5, [pc, #40]	; (3f0 <readMS5803AdcResults+0x3c>)
     3c8:	2002      	movs	r0, #2
     3ca:	47a8      	blx	r5
     3cc:	0004      	movs	r4, r0
    u8_t _byte2 = spiDataIn(SPI2);
     3ce:	2002      	movs	r0, #2
     3d0:	47a8      	blx	r5
     3d2:	9001      	str	r0, [sp, #4]
    u8_t _byte3 = spiDataIn(SPI2);
     3d4:	2002      	movs	r0, #2
     3d6:	47a8      	blx	r5
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3d8:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     3da:	9b01      	ldr	r3, [sp, #4]
     3dc:	0424      	lsls	r4, r4, #16
     3de:	021b      	lsls	r3, r3, #8
     3e0:	431c      	orrs	r4, r3
     3e2:	4320      	orrs	r0, r4
}
     3e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	41004400 	.word	0x41004400
     3ec:	000034dd 	.word	0x000034dd
     3f0:	000034f5 	.word	0x000034f5

000003f4 <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3f6:	b087      	sub	sp, #28
     3f8:	9304      	str	r3, [sp, #16]
    const u16_t C1 = coefficients_[1];
     3fa:	4b24      	ldr	r3, [pc, #144]	; (48c <ConvertPressureTemperature+0x98>)

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3fc:	9003      	str	r0, [sp, #12]
     3fe:	0014      	movs	r4, r2
    const u16_t C1 = coefficients_[1];
     400:	885a      	ldrh	r2, [r3, #2]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     402:	4f23      	ldr	r7, [pc, #140]	; (490 <ConvertPressureTemperature+0x9c>)
    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
     404:	9201      	str	r2, [sp, #4]
    const u16_t C2 = coefficients_[2];
     406:	889a      	ldrh	r2, [r3, #4]
     408:	9200      	str	r2, [sp, #0]
    const u16_t C3 = coefficients_[3];
    const u16_t C4 = coefficients_[4];
     40a:	891a      	ldrh	r2, [r3, #8]
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
    const u16_t C2 = coefficients_[2];
    const u16_t C3 = coefficients_[3];
     40c:	88dd      	ldrh	r5, [r3, #6]
    const u16_t C4 = coefficients_[4];
     40e:	9202      	str	r2, [sp, #8]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     410:	895e      	ldrh	r6, [r3, #10]
     412:	0236      	lsls	r6, r6, #8
     414:	1b8e      	subs	r6, r1, r6
     416:	17f2      	asrs	r2, r6, #31
     418:	9205      	str	r2, [sp, #20]
     41a:	8998      	ldrh	r0, [r3, #12]
     41c:	0032      	movs	r2, r6
     41e:	17f3      	asrs	r3, r6, #31
     420:	2100      	movs	r1, #0
     422:	47b8      	blx	r7
     424:	23fa      	movs	r3, #250	; 0xfa
     426:	0249      	lsls	r1, r1, #9
     428:	0dc0      	lsrs	r0, r0, #23
     42a:	4308      	orrs	r0, r1
     42c:	00db      	lsls	r3, r3, #3
     42e:	18c0      	adds	r0, r0, r3
     430:	6020      	str	r0, [r4, #0]

    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
    const  int64_t SENS  =  ((int64_t)C1 << 16) + ((C3 * (int64_t)dT) >> 7);
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     432:	0032      	movs	r2, r6
     434:	17f3      	asrs	r3, r6, #31
     436:	0028      	movs	r0, r5
     438:	2100      	movs	r1, #0
     43a:	47b8      	blx	r7
     43c:	064c      	lsls	r4, r1, #25
     43e:	11cb      	asrs	r3, r1, #7
     440:	2100      	movs	r1, #0
     442:	09c2      	lsrs	r2, r0, #7
     444:	4322      	orrs	r2, r4
     446:	9c01      	ldr	r4, [sp, #4]
     448:	0420      	lsls	r0, r4, #16
     44a:	1880      	adds	r0, r0, r2
     44c:	4159      	adcs	r1, r3
     44e:	9a03      	ldr	r2, [sp, #12]
     450:	2300      	movs	r3, #0
     452:	47b8      	blx	r7
     454:	02cb      	lsls	r3, r1, #11
     456:	0d44      	lsrs	r4, r0, #21
     458:	0032      	movs	r2, r6
     45a:	431c      	orrs	r4, r3
     45c:	154d      	asrs	r5, r1, #21
     45e:	9b05      	ldr	r3, [sp, #20]
     460:	9802      	ldr	r0, [sp, #8]
     462:	2100      	movs	r1, #0
     464:	47b8      	blx	r7
     466:	068b      	lsls	r3, r1, #26
     468:	118f      	asrs	r7, r1, #6
     46a:	9900      	ldr	r1, [sp, #0]
     46c:	0986      	lsrs	r6, r0, #6
     46e:	431e      	orrs	r6, r3
     470:	044a      	lsls	r2, r1, #17
     472:	0bcb      	lsrs	r3, r1, #15
     474:	1992      	adds	r2, r2, r6
     476:	417b      	adcs	r3, r7
     478:	1aa4      	subs	r4, r4, r2
     47a:	419d      	sbcs	r5, r3
     47c:	046b      	lsls	r3, r5, #17
     47e:	0be4      	lsrs	r4, r4, #15
     480:	431c      	orrs	r4, r3
     482:	9b04      	ldr	r3, [sp, #16]
     484:	601c      	str	r4, [r3, #0]

}
     486:	b007      	add	sp, #28
     488:	bdf0      	pop	{r4, r5, r6, r7, pc}
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	200002ae 	.word	0x200002ae
     490:	00004c45 	.word	0x00004c45

00000494 <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     494:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/100)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     496:	4b0c      	ldr	r3, [pc, #48]	; (4c8 <paToFeetNOAA+0x34>)
     498:	4798      	blx	r3
     49a:	4c0c      	ldr	r4, [pc, #48]	; (4cc <paToFeetNOAA+0x38>)
     49c:	2200      	movs	r2, #0
     49e:	4b0c      	ldr	r3, [pc, #48]	; (4d0 <paToFeetNOAA+0x3c>)
     4a0:	47a0      	blx	r4
     4a2:	2200      	movs	r2, #0
     4a4:	4b0b      	ldr	r3, [pc, #44]	; (4d4 <paToFeetNOAA+0x40>)
     4a6:	47a0      	blx	r4
     4a8:	4a0b      	ldr	r2, [pc, #44]	; (4d8 <paToFeetNOAA+0x44>)
     4aa:	4b0c      	ldr	r3, [pc, #48]	; (4dc <paToFeetNOAA+0x48>)
     4ac:	4c0c      	ldr	r4, [pc, #48]	; (4e0 <paToFeetNOAA+0x4c>)
     4ae:	47a0      	blx	r4
    return altFeet;
     4b0:	4c0c      	ldr	r4, [pc, #48]	; (4e4 <paToFeetNOAA+0x50>)
double paToFeetNOAA(int32_t pressureMbar) {

    double lower =(((double)(pressureMbar)/100)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     4b2:	0002      	movs	r2, r0
     4b4:	000b      	movs	r3, r1
    return altFeet;
     4b6:	2000      	movs	r0, #0
     4b8:	490b      	ldr	r1, [pc, #44]	; (4e8 <paToFeetNOAA+0x54>)
     4ba:	47a0      	blx	r4
     4bc:	4a0b      	ldr	r2, [pc, #44]	; (4ec <paToFeetNOAA+0x58>)
     4be:	4b0c      	ldr	r3, [pc, #48]	; (4f0 <paToFeetNOAA+0x5c>)
     4c0:	4c0c      	ldr	r4, [pc, #48]	; (4f4 <paToFeetNOAA+0x60>)
     4c2:	47a0      	blx	r4

}
     4c4:	bd10      	pop	{r4, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	00006b8d 	.word	0x00006b8d
     4cc:	000056fd 	.word	0x000056fd
     4d0:	40590000 	.word	0x40590000
     4d4:	408faa00 	.word	0x408faa00
     4d8:	e279dd3c 	.word	0xe279dd3c
     4dc:	3fc85b39 	.word	0x3fc85b39
     4e0:	00003809 	.word	0x00003809
     4e4:	00006439 	.word	0x00006439
     4e8:	3ff00000 	.word	0x3ff00000
     4ec:	9999999a 	.word	0x9999999a
     4f0:	4101beb3 	.word	0x4101beb3
     4f4:	00005f45 	.word	0x00005f45

000004f8 <readMS5803Coefficients>:



void readMS5803Coefficients() {
     4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     4fa:	24a2      	movs	r4, #162	; 0xa2
     4fc:	4d11      	ldr	r5, [pc, #68]	; (544 <readMS5803Coefficients+0x4c>)

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
        delay_us(600);
     4fe:	2096      	movs	r0, #150	; 0x96
     500:	4e11      	ldr	r6, [pc, #68]	; (548 <readMS5803Coefficients+0x50>)
     502:	0080      	lsls	r0, r0, #2
     504:	47b0      	blx	r6
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
        delay_us(600);
     506:	2096      	movs	r0, #150	; 0x96
     508:	0080      	lsls	r0, r0, #2
     50a:	47b0      	blx	r6
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     50c:	2380      	movs	r3, #128	; 0x80
     50e:	4e0f      	ldr	r6, [pc, #60]	; (54c <readMS5803Coefficients+0x54>)
     510:	01db      	lsls	r3, r3, #7
        pinLow(cs_baro);
        spiDataOut(SPI2, _cmd);
     512:	0021      	movs	r1, r4
     514:	6173      	str	r3, [r6, #20]
     516:	2002      	movs	r0, #2
     518:	4b0d      	ldr	r3, [pc, #52]	; (550 <readMS5803Coefficients+0x58>)
     51a:	4798      	blx	r3
        u8_t _byte1 = spiDataIn(SPI2);
     51c:	4f0d      	ldr	r7, [pc, #52]	; (554 <readMS5803Coefficients+0x5c>)
     51e:	2002      	movs	r0, #2
     520:	47b8      	blx	r7
     522:	9001      	str	r0, [sp, #4]
        u8_t _byte2 = spiDataIn(SPI2);
     524:	2002      	movs	r0, #2
     526:	47b8      	blx	r7
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     528:	2380      	movs	r3, #128	; 0x80
     52a:	01db      	lsls	r3, r3, #7
     52c:	61b3      	str	r3, [r6, #24]
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     52e:	9b01      	ldr	r3, [sp, #4]
     530:	3402      	adds	r4, #2
     532:	021b      	lsls	r3, r3, #8
     534:	4318      	orrs	r0, r3
     536:	b2e4      	uxtb	r4, r4
     538:	8028      	strh	r0, [r5, #0]
     53a:	3502      	adds	r5, #2



void readMS5803Coefficients() {

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
     53c:	2cae      	cmp	r4, #174	; 0xae
     53e:	d1de      	bne.n	4fe <readMS5803Coefficients+0x6>
        u8_t _byte2 = spiDataIn(SPI2);
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     540:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     542:	46c0      	nop			; (mov r8, r8)
     544:	200002b0 	.word	0x200002b0
     548:	000010b9 	.word	0x000010b9
     54c:	41004400 	.word	0x41004400
     550:	000034dd 	.word	0x000034dd
     554:	000034f5 	.word	0x000034f5

00000558 <initMS5803Barometer>:

void initMS5803Barometer() {
     558:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     55a:	2580      	movs	r5, #128	; 0x80
     55c:	4c06      	ldr	r4, [pc, #24]	; (578 <initMS5803Barometer+0x20>)
     55e:	01ed      	lsls	r5, r5, #7


    pinLow(cs_baro);
    spiDataOut(BARO_SPI, MS5803_CMD_RES);
     560:	211e      	movs	r1, #30
     562:	6165      	str	r5, [r4, #20]
     564:	2002      	movs	r0, #2
     566:	4b05      	ldr	r3, [pc, #20]	; (57c <initMS5803Barometer+0x24>)
     568:	4798      	blx	r3
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     56a:	61a5      	str	r5, [r4, #24]

    pinHigh(cs_baro);
    delay_ms(200);
     56c:	20c8      	movs	r0, #200	; 0xc8
     56e:	4b04      	ldr	r3, [pc, #16]	; (580 <initMS5803Barometer+0x28>)
     570:	4798      	blx	r3
    readMS5803Coefficients();
     572:	4b04      	ldr	r3, [pc, #16]	; (584 <initMS5803Barometer+0x2c>)
     574:	4798      	blx	r3

}
     576:	bd70      	pop	{r4, r5, r6, pc}
     578:	41004400 	.word	0x41004400
     57c:	000034dd 	.word	0x000034dd
     580:	000010ed 	.word	0x000010ed
     584:	000004f9 	.word	0x000004f9

00000588 <MS5803_CRC4>:
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     588:	4b02      	ldr	r3, [pc, #8]	; (594 <MS5803_CRC4+0xc>)
    return (n_rem & 0x00);
}
     58a:	2000      	movs	r0, #0
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     58c:	7b9a      	ldrb	r2, [r3, #14]
     58e:	81da      	strh	r2, [r3, #14]
    return (n_rem & 0x00);
}
     590:	4770      	bx	lr
     592:	46c0      	nop			; (mov r8, r8)
     594:	200002ae 	.word	0x200002ae

00000598 <init>:
#include "math.h"

void init() {

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     598:	211e      	movs	r1, #30
#include "sam.h"
#include <util.h>
#include <boardDefines.h>
#include "math.h"

void init() {
     59a:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     59c:	4afc      	ldr	r2, [pc, #1008]	; (990 <init+0x3f8>)
#include "sam.h"
#include <util.h>
#include <boardDefines.h>
#include "math.h"

void init() {
     59e:	b085      	sub	sp, #20

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     5a0:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5a2:	2401      	movs	r4, #1
     5a4:	438b      	bics	r3, r1
     5a6:	391c      	subs	r1, #28
     5a8:	430b      	orrs	r3, r1
     5aa:	6053      	str	r3, [r2, #4]

    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     5ac:	4af9      	ldr	r2, [pc, #996]	; (994 <init+0x3fc>)
     5ae:	3106      	adds	r1, #6
     5b0:	6993      	ldr	r3, [r2, #24]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5b2:	260f      	movs	r6, #15
     5b4:	430b      	orrs	r3, r1
     5b6:	6193      	str	r3, [r2, #24]

    SystemInit();
     5b8:	4bf7      	ldr	r3, [pc, #988]	; (998 <init+0x400>)
     5ba:	4798      	blx	r3
    GclkInit(0);
     5bc:	2000      	movs	r0, #0
     5be:	4bf7      	ldr	r3, [pc, #988]	; (99c <init+0x404>)
     5c0:	4798      	blx	r3
    RtcInit();
     5c2:	4bf7      	ldr	r3, [pc, #988]	; (9a0 <init+0x408>)
     5c4:	4798      	blx	r3
    delayInit();
     5c6:	4bf7      	ldr	r3, [pc, #988]	; (9a4 <init+0x40c>)
     5c8:	4798      	blx	r3
    adcInit();
     5ca:	4bf7      	ldr	r3, [pc, #988]	; (9a8 <init+0x410>)
     5cc:	4798      	blx	r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5ce:	4bf7      	ldr	r3, [pc, #988]	; (9ac <init+0x414>)
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5d0:	2002      	movs	r0, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5d2:	0019      	movs	r1, r3
     5d4:	3154      	adds	r1, #84	; 0x54
     5d6:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5d8:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5da:	43a2      	bics	r2, r4
     5dc:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5de:	2280      	movs	r2, #128	; 0x80
     5e0:	0352      	lsls	r2, r2, #13
     5e2:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5e4:	3533      	adds	r5, #51	; 0x33
     5e6:	782a      	ldrb	r2, [r5, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5e8:	390e      	subs	r1, #14

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5ea:	43b2      	bics	r2, r6
     5ec:	4322      	orrs	r2, r4
     5ee:	702a      	strb	r2, [r5, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f0:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5f2:	001f      	movs	r7, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f4:	4322      	orrs	r2, r4
     5f6:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5f8:	001a      	movs	r2, r3
     5fa:	3247      	adds	r2, #71	; 0x47
     5fc:	7811      	ldrb	r1, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5fe:	3794      	adds	r7, #148	; 0x94
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     600:	43a1      	bics	r1, r4
     602:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     604:	7811      	ldrb	r1, [r2, #0]
     606:	4301      	orrs	r1, r0
     608:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     60a:	2180      	movs	r1, #128	; 0x80
     60c:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     60e:	7829      	ldrb	r1, [r5, #0]
     610:	300e      	adds	r0, #14
     612:	4031      	ands	r1, r6
     614:	4301      	orrs	r1, r0
     616:	7029      	strb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     618:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     61a:	7811      	ldrb	r1, [r2, #0]
     61c:	4321      	orrs	r1, r4
     61e:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     620:	327c      	adds	r2, #124	; 0x7c
     622:	7811      	ldrb	r1, [r2, #0]
     624:	43a1      	bics	r1, r4
     626:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     628:	7811      	ldrb	r1, [r2, #0]
     62a:	4329      	orrs	r1, r5
     62c:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     62e:	2108      	movs	r1, #8
     630:	468c      	mov	ip, r1
     632:	449c      	add	ip, r3
     634:	4661      	mov	r1, ip
     636:	3506      	adds	r5, #6
     638:	67cd      	str	r5, [r1, #124]	; 0x7c
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     63a:	31a9      	adds	r1, #169	; 0xa9
     63c:	780d      	ldrb	r5, [r1, #0]
     63e:	4035      	ands	r5, r6
     640:	4305      	orrs	r5, r0
     642:	700d      	strb	r5, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     644:	7815      	ldrb	r5, [r2, #0]
     646:	4325      	orrs	r5, r4
     648:	7015      	strb	r5, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     64a:	001d      	movs	r5, r3
     64c:	35d7      	adds	r5, #215	; 0xd7
     64e:	782a      	ldrb	r2, [r5, #0]
     650:	43a2      	bics	r2, r4
     652:	702a      	strb	r2, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     654:	2580      	movs	r5, #128	; 0x80
     656:	4ad6      	ldr	r2, [pc, #856]	; (9b0 <init+0x418>)
     658:	042d      	lsls	r5, r5, #16
     65a:	6015      	str	r5, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     65c:	002a      	movs	r2, r5
     65e:	9703      	str	r7, [sp, #12]
     660:	603a      	str	r2, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     662:	001a      	movs	r2, r3
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     664:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     666:	32c2      	adds	r2, #194	; 0xc2
     668:	7815      	ldrb	r5, [r2, #0]
     66a:	43a5      	bics	r5, r4
     66c:	7015      	strb	r5, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     66e:	7815      	ldrb	r5, [r2, #0]
     670:	433d      	orrs	r5, r7
     672:	7015      	strb	r5, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     674:	4665      	mov	r5, ip
     676:	19ff      	adds	r7, r7, r7
     678:	67ef      	str	r7, [r5, #124]	; 0x7c

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     67a:	780d      	ldrb	r5, [r1, #0]
     67c:	43b5      	bics	r5, r6
     67e:	4325      	orrs	r5, r4
     680:	700d      	strb	r5, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     682:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     684:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     686:	4321      	orrs	r1, r4
     688:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     68a:	0019      	movs	r1, r3
     68c:	31d6      	adds	r1, #214	; 0xd6
     68e:	780a      	ldrb	r2, [r1, #0]
     690:	43a2      	bics	r2, r4
     692:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     694:	2180      	movs	r1, #128	; 0x80
     696:	4ac6      	ldr	r2, [pc, #792]	; (9b0 <init+0x418>)
     698:	03c9      	lsls	r1, r1, #15
     69a:	6011      	str	r1, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     69c:	000a      	movs	r2, r1
     69e:	9903      	ldr	r1, [sp, #12]
     6a0:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6a2:	001a      	movs	r2, r3
     6a4:	3243      	adds	r2, #67	; 0x43
     6a6:	7811      	ldrb	r1, [r2, #0]
     6a8:	43a1      	bics	r1, r4
     6aa:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6ac:	7811      	ldrb	r1, [r2, #0]
     6ae:	4329      	orrs	r1, r5
     6b0:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6b2:	001d      	movs	r5, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6b4:	2108      	movs	r1, #8
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6b6:	3531      	adds	r5, #49	; 0x31


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6b8:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6ba:	7829      	ldrb	r1, [r5, #0]
     6bc:	4031      	ands	r1, r6
     6be:	4308      	orrs	r0, r1
     6c0:	7028      	strb	r0, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c2:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6c4:	2002      	movs	r0, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c6:	4321      	orrs	r1, r4
     6c8:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ca:	0019      	movs	r1, r3
     6cc:	3159      	adds	r1, #89	; 0x59
     6ce:	780a      	ldrb	r2, [r1, #0]
     6d0:	43a2      	bics	r2, r4
     6d2:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6d4:	2280      	movs	r2, #128	; 0x80
     6d6:	0492      	lsls	r2, r2, #18
     6d8:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6da:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6dc:	001a      	movs	r2, r3
     6de:	3242      	adds	r2, #66	; 0x42
     6e0:	7811      	ldrb	r1, [r2, #0]
     6e2:	43a1      	bics	r1, r4
     6e4:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6e6:	7811      	ldrb	r1, [r2, #0]
     6e8:	4301      	orrs	r1, r0
     6ea:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6ec:	605f      	str	r7, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6ee:	7829      	ldrb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6f0:	0018      	movs	r0, r3

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6f2:	43b1      	bics	r1, r6
     6f4:	4321      	orrs	r1, r4
     6f6:	7029      	strb	r1, [r5, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6f8:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6fa:	3048      	adds	r0, #72	; 0x48
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fc:	4321      	orrs	r1, r4
     6fe:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     700:	0019      	movs	r1, r3
     702:	3158      	adds	r1, #88	; 0x58
     704:	780a      	ldrb	r2, [r1, #0]
     706:	001f      	movs	r7, r3
     708:	43a2      	bics	r2, r4
     70a:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     70c:	2280      	movs	r2, #128	; 0x80
    pinIn(senseDPin);
    pinMux(senseDPin);
    pinOut(fireDPin);
    pinLow(fireDPin);

    charges.igniterAHot = false;
     70e:	2100      	movs	r1, #0
     710:	0452      	lsls	r2, r2, #17
     712:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     714:	615a      	str	r2, [r3, #20]
     716:	4aa7      	ldr	r2, [pc, #668]	; (9b4 <init+0x41c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     718:	3749      	adds	r7, #73	; 0x49
     71a:	7011      	strb	r1, [r2, #0]
    charges.igniterBHot = false;
     71c:	2100      	movs	r1, #0
     71e:	7211      	strb	r1, [r2, #8]
    charges.igniterCHot = false;
     720:	2100      	movs	r1, #0
     722:	7411      	strb	r1, [r2, #16]
    charges.igniterDHot = false;
     724:	2100      	movs	r1, #0
     726:	7611      	strb	r1, [r2, #24]
     728:	7802      	ldrb	r2, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     72a:	2502      	movs	r5, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     72c:	43a2      	bics	r2, r4
     72e:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     730:	2280      	movs	r2, #128	; 0x80
     732:	0052      	lsls	r2, r2, #1
     734:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     736:	783a      	ldrb	r2, [r7, #0]
     738:	43a2      	bics	r2, r4
     73a:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     73c:	2280      	movs	r2, #128	; 0x80
     73e:	0092      	lsls	r2, r2, #2
     740:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     742:	001a      	movs	r2, r3
     744:	324b      	adds	r2, #75	; 0x4b
     746:	7811      	ldrb	r1, [r2, #0]
     748:	43a1      	bics	r1, r4
     74a:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     74c:	7811      	ldrb	r1, [r2, #0]
     74e:	4329      	orrs	r1, r5
     750:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     752:	2180      	movs	r1, #128	; 0x80
     754:	0109      	lsls	r1, r1, #4
     756:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     758:	2135      	movs	r1, #53	; 0x35
     75a:	468c      	mov	ip, r1
     75c:	449c      	add	ip, r3
     75e:	4661      	mov	r1, ip
     760:	7809      	ldrb	r1, [r1, #0]
     762:	351e      	adds	r5, #30
     764:	4031      	ands	r1, r6
     766:	4329      	orrs	r1, r5
     768:	4665      	mov	r5, ip
     76a:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76c:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     76e:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     770:	4321      	orrs	r1, r4
     772:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     774:	0019      	movs	r1, r3
     776:	3134      	adds	r1, #52	; 0x34
     778:	780a      	ldrb	r2, [r1, #0]
     77a:	4032      	ands	r2, r6
     77c:	432a      	orrs	r2, r5
     77e:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     780:	783a      	ldrb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     782:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     784:	4322      	orrs	r2, r4
     786:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     788:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     78a:	3706      	adds	r7, #6

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     78c:	43b2      	bics	r2, r6
     78e:	432a      	orrs	r2, r5
     790:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     792:	7802      	ldrb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     794:	3196      	adds	r1, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     796:	4322      	orrs	r2, r4
     798:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79a:	780a      	ldrb	r2, [r1, #0]
     79c:	43a2      	bics	r2, r4
     79e:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a0:	2280      	movs	r2, #128	; 0x80
     7a2:	4983      	ldr	r1, [pc, #524]	; (9b0 <init+0x418>)
     7a4:	00d2      	lsls	r2, r2, #3
     7a6:	600a      	str	r2, [r1, #0]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7a8:	0019      	movs	r1, r3
     7aa:	3198      	adds	r1, #152	; 0x98
     7ac:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ae:	7881      	ldrb	r1, [r0, #2]
     7b0:	43a1      	bics	r1, r4
     7b2:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b4:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7b6:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b8:	7a02      	ldrb	r2, [r0, #8]
     7ba:	43a2      	bics	r2, r4
     7bc:	7202      	strb	r2, [r0, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7be:	2280      	movs	r2, #128	; 0x80
     7c0:	0252      	lsls	r2, r2, #9
     7c2:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c4:	78ba      	ldrb	r2, [r7, #2]
     7c6:	43a2      	bics	r2, r4
     7c8:	70ba      	strb	r2, [r7, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ca:	2280      	movs	r2, #128	; 0x80
     7cc:	0292      	lsls	r2, r2, #10
     7ce:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7d0:	001a      	movs	r2, r3
     7d2:	3253      	adds	r2, #83	; 0x53
     7d4:	7811      	ldrb	r1, [r2, #0]
     7d6:	43a1      	bics	r1, r4
     7d8:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7da:	7811      	ldrb	r1, [r2, #0]
     7dc:	4329      	orrs	r1, r5
     7de:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7e0:	2180      	movs	r1, #128	; 0x80
     7e2:	0309      	lsls	r1, r1, #12
     7e4:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7e6:	2139      	movs	r1, #57	; 0x39
     7e8:	468c      	mov	ip, r1
     7ea:	449c      	add	ip, r3
     7ec:	4661      	mov	r1, ip
     7ee:	7809      	ldrb	r1, [r1, #0]
     7f0:	351e      	adds	r5, #30
     7f2:	4031      	ands	r1, r6
     7f4:	4329      	orrs	r1, r5
     7f6:	4665      	mov	r5, ip
     7f8:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fa:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7fc:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fe:	4321      	orrs	r1, r4
     800:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     802:	0019      	movs	r1, r3
     804:	3138      	adds	r1, #56	; 0x38
     806:	780a      	ldrb	r2, [r1, #0]
     808:	4032      	ands	r2, r6
     80a:	432a      	orrs	r2, r5
     80c:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     80e:	78ba      	ldrb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     810:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     812:	4322      	orrs	r2, r4
     814:	70ba      	strb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     816:	780a      	ldrb	r2, [r1, #0]
     818:	43b2      	bics	r2, r6
     81a:	432a      	orrs	r2, r5
     81c:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     81e:	7a02      	ldrb	r2, [r0, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     820:	3114      	adds	r1, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     822:	4322      	orrs	r2, r4
     824:	7202      	strb	r2, [r0, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     826:	798a      	ldrb	r2, [r1, #6]
     828:	43a2      	bics	r2, r4
     82a:	718a      	strb	r2, [r1, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     82c:	2280      	movs	r2, #128	; 0x80
     82e:	02d2      	lsls	r2, r2, #11
     830:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     832:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     834:	9103      	str	r1, [sp, #12]
     836:	780a      	ldrb	r2, [r1, #0]
     838:	43a2      	bics	r2, r4
     83a:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     83c:	2280      	movs	r2, #128	; 0x80
     83e:	0152      	lsls	r2, r2, #5
     840:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     842:	783a      	ldrb	r2, [r7, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     844:	2120      	movs	r1, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     846:	43a2      	bics	r2, r4
     848:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     84a:	2280      	movs	r2, #128	; 0x80
     84c:	0212      	lsls	r2, r2, #8
     84e:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     850:	001a      	movs	r2, r3
     852:	324d      	adds	r2, #77	; 0x4d
     854:	7810      	ldrb	r0, [r2, #0]
     856:	43a0      	bics	r0, r4
     858:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     85a:	7810      	ldrb	r0, [r2, #0]
     85c:	4328      	orrs	r0, r5
     85e:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     860:	2080      	movs	r0, #128	; 0x80
     862:	0180      	lsls	r0, r0, #6
     864:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     866:	0018      	movs	r0, r3
     868:	3036      	adds	r0, #54	; 0x36
     86a:	7805      	ldrb	r5, [r0, #0]
     86c:	4035      	ands	r5, r6
     86e:	430d      	orrs	r5, r1
     870:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     872:	7811      	ldrb	r1, [r2, #0]
     874:	000d      	movs	r5, r1
     876:	4325      	orrs	r5, r4
     878:	7015      	strb	r5, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     87a:	2237      	movs	r2, #55	; 0x37
     87c:	4694      	mov	ip, r2
     87e:	449c      	add	ip, r3
     880:	4662      	mov	r2, ip
     882:	2120      	movs	r1, #32
     884:	7812      	ldrb	r2, [r2, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     886:	2502      	movs	r5, #2
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     888:	4032      	ands	r2, r6
     88a:	430a      	orrs	r2, r1
     88c:	4661      	mov	r1, ip
     88e:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     890:	2102      	movs	r1, #2
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     892:	783a      	ldrb	r2, [r7, #0]
     894:	4322      	orrs	r2, r4
     896:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     898:	7802      	ldrb	r2, [r0, #0]
     89a:	43b2      	bics	r2, r6
     89c:	430a      	orrs	r2, r1
     89e:	7002      	strb	r2, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8a0:	9a03      	ldr	r2, [sp, #12]
     8a2:	9903      	ldr	r1, [sp, #12]
     8a4:	7812      	ldrb	r2, [r2, #0]
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8a6:	2040      	movs	r0, #64	; 0x40
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8a8:	4322      	orrs	r2, r4
     8aa:	700a      	strb	r2, [r1, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ac:	0019      	movs	r1, r3
     8ae:	314e      	adds	r1, #78	; 0x4e
     8b0:	780a      	ldrb	r2, [r1, #0]
     8b2:	43a2      	bics	r2, r4
     8b4:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8b6:	2280      	movs	r2, #128	; 0x80
     8b8:	01d2      	lsls	r2, r2, #7
     8ba:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8bc:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8be:	001a      	movs	r2, r3
     8c0:	3255      	adds	r2, #85	; 0x55
     8c2:	7811      	ldrb	r1, [r2, #0]
     8c4:	43a1      	bics	r1, r4
     8c6:	7011      	strb	r1, [r2, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8c8:	2180      	movs	r1, #128	; 0x80
     8ca:	0389      	lsls	r1, r1, #14
     8cc:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ce:	7811      	ldrb	r1, [r2, #0]
     8d0:	43a1      	bics	r1, r4
     8d2:	7011      	strb	r1, [r2, #0]
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8d4:	7811      	ldrb	r1, [r2, #0]
     8d6:	4301      	orrs	r1, r0
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8d8:	0018      	movs	r0, r3
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8da:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8dc:	3056      	adds	r0, #86	; 0x56
     8de:	7802      	ldrb	r2, [r0, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8e0:	0019      	movs	r1, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e2:	43a2      	bics	r2, r4
     8e4:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8e6:	2280      	movs	r2, #128	; 0x80
     8e8:	03d2      	lsls	r2, r2, #15
     8ea:	609a      	str	r2, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8ec:	313b      	adds	r1, #59	; 0x3b
     8ee:	780a      	ldrb	r2, [r1, #0]
     8f0:	43b2      	bics	r2, r6
     8f2:	432a      	orrs	r2, r5
     8f4:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8f6:	7802      	ldrb	r2, [r0, #0]
     8f8:	4322      	orrs	r2, r4
     8fa:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8fc:	001a      	movs	r2, r3
     8fe:	3257      	adds	r2, #87	; 0x57
     900:	7810      	ldrb	r0, [r2, #0]
     902:	43a0      	bics	r0, r4
     904:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     906:	7810      	ldrb	r0, [r2, #0]
     908:	4328      	orrs	r0, r5
     90a:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     90c:	2080      	movs	r0, #128	; 0x80
     90e:	0400      	lsls	r0, r0, #16
     910:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     912:	2020      	movs	r0, #32
     914:	780b      	ldrb	r3, [r1, #0]
     916:	4033      	ands	r3, r6
     918:	4303      	orrs	r3, r0
     91a:	700b      	strb	r3, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     91c:	7813      	ldrb	r3, [r2, #0]
    pinOut(TxPo);
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);

    delay_ms(200);
     91e:	30a8      	adds	r0, #168	; 0xa8
     920:	4323      	orrs	r3, r4
     922:	7013      	strb	r3, [r2, #0]
     924:	4b24      	ldr	r3, [pc, #144]	; (9b8 <init+0x420>)
     926:	4798      	blx	r3

    sercomClockEnable(SPI2, 3, 4);
     928:	4f24      	ldr	r7, [pc, #144]	; (9bc <init+0x424>)
     92a:	0028      	movs	r0, r5
     92c:	2204      	movs	r2, #4
     92e:	2103      	movs	r1, #3
     930:	47b8      	blx	r7
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 0x00);
     932:	2300      	movs	r3, #0
     934:	4e22      	ldr	r6, [pc, #136]	; (9c0 <init+0x428>)
     936:	9301      	str	r3, [sp, #4]
     938:	9300      	str	r3, [sp, #0]
     93a:	0021      	movs	r1, r4
     93c:	0028      	movs	r0, r5
     93e:	2203      	movs	r2, #3
     940:	47b0      	blx	r6

    sercomClockEnable(SPI0, 3, 4);
     942:	2204      	movs	r2, #4
     944:	2103      	movs	r1, #3
     946:	2000      	movs	r0, #0
     948:	47b8      	blx	r7
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     94a:	2300      	movs	r3, #0
     94c:	2103      	movs	r1, #3
     94e:	9301      	str	r3, [sp, #4]
     950:	9300      	str	r3, [sp, #0]
     952:	001a      	movs	r2, r3
     954:	0018      	movs	r0, r3
     956:	47b0      	blx	r6

    sercomClockEnable(SPI1, 3, 4);
     958:	0020      	movs	r0, r4
     95a:	2204      	movs	r2, #4
     95c:	2103      	movs	r1, #3
     95e:	47b8      	blx	r7
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     960:	2300      	movs	r3, #0
     962:	0020      	movs	r0, r4
     964:	9301      	str	r3, [sp, #4]
     966:	9300      	str	r3, [sp, #0]
     968:	001a      	movs	r2, r3
     96a:	2103      	movs	r1, #3
     96c:	47b0      	blx	r6

    sercomClockEnable(USART3, 4, 8);
     96e:	2208      	movs	r2, #8
     970:	2104      	movs	r1, #4
     972:	2003      	movs	r0, #3
     974:	47b8      	blx	r7
    sercomUartInit(USART3,1,0,19200);
     976:	2396      	movs	r3, #150	; 0x96
     978:	0021      	movs	r1, r4
     97a:	2200      	movs	r2, #0
     97c:	2003      	movs	r0, #3
     97e:	01db      	lsls	r3, r3, #7
     980:	4c10      	ldr	r4, [pc, #64]	; (9c4 <init+0x42c>)
     982:	47a0      	blx	r4

    TC4Init();
     984:	4b10      	ldr	r3, [pc, #64]	; (9c8 <init+0x430>)
     986:	4798      	blx	r3
    TC5Init();
     988:	4b10      	ldr	r3, [pc, #64]	; (9cc <init+0x434>)
     98a:	4798      	blx	r3
}
     98c:	b005      	add	sp, #20
     98e:	e01f      	b.n	9d0 <init+0x438>
     990:	41004000 	.word	0x41004000
     994:	40000400 	.word	0x40000400
     998:	000001d5 	.word	0x000001d5
     99c:	00001019 	.word	0x00001019
     9a0:	00000f19 	.word	0x00000f19
     9a4:	0000108d 	.word	0x0000108d
     9a8:	00000d39 	.word	0x00000d39
     9ac:	41004400 	.word	0x41004400
     9b0:	41004488 	.word	0x41004488
     9b4:	200002c4 	.word	0x200002c4
     9b8:	000010ed 	.word	0x000010ed
     9bc:	000033b5 	.word	0x000033b5
     9c0:	00003419 	.word	0x00003419
     9c4:	0000347d 	.word	0x0000347d
     9c8:	0000116d 	.word	0x0000116d
     9cc:	000011d5 	.word	0x000011d5
     9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9d2:	46c0      	nop			; (mov r8, r8)

000009d4 <main>:


int main(void) {
     9d4:	b510      	push	{r4, lr}

    init();
     9d6:	4b13      	ldr	r3, [pc, #76]	; (a24 <main+0x50>)
     9d8:	4798      	blx	r3

    initMS5803Barometer();
     9da:	4b13      	ldr	r3, [pc, #76]	; (a28 <main+0x54>)
     9dc:	4798      	blx	r3
    IMUinit();
     9de:	4b13      	ldr	r3, [pc, #76]	; (a2c <main+0x58>)
     9e0:	4798      	blx	r3

    computeKalmanGains();
     9e2:	4b13      	ldr	r3, [pc, #76]	; (a30 <main+0x5c>)
     9e4:	4798      	blx	r3

    computeKalmanBaroOnlyGains();
     9e6:	4b13      	ldr	r3, [pc, #76]	; (a34 <main+0x60>)
     9e8:	4798      	blx	r3

    sampleTick();
     9ea:	4c13      	ldr	r4, [pc, #76]	; (a38 <main+0x64>)
     9ec:	47a0      	blx	r4

    POST();
     9ee:	4b13      	ldr	r3, [pc, #76]	; (a3c <main+0x68>)
     9f0:	4798      	blx	r3

    isItPointingUp();
     9f2:	4b13      	ldr	r3, [pc, #76]	; (a40 <main+0x6c>)
     9f4:	4798      	blx	r3

    getSettings();
     9f6:	4b13      	ldr	r3, [pc, #76]	; (a44 <main+0x70>)
     9f8:	4798      	blx	r3

    //beepNumber(12345);


    beep(800);
     9fa:	20c8      	movs	r0, #200	; 0xc8
     9fc:	4b12      	ldr	r3, [pc, #72]	; (a48 <main+0x74>)
     9fe:	0080      	lsls	r0, r0, #2
     a00:	4798      	blx	r3

    startupTick = millis();
     a02:	4b12      	ldr	r3, [pc, #72]	; (a4c <main+0x78>)
     a04:	4798      	blx	r3
     a06:	4b12      	ldr	r3, [pc, #72]	; (a50 <main+0x7c>)
     a08:	6018      	str	r0, [r3, #0]

    while (1) {
        if (takeSample()) {
     a0a:	4b12      	ldr	r3, [pc, #72]	; (a54 <main+0x80>)
     a0c:	4798      	blx	r3
     a0e:	2800      	cmp	r0, #0
     a10:	d0fb      	beq.n	a0a <main+0x36>
            sampleTick();
     a12:	47a0      	blx	r4
            flight();
     a14:	4b10      	ldr	r3, [pc, #64]	; (a58 <main+0x84>)
     a16:	4798      	blx	r3
            igniterTick();
     a18:	4b10      	ldr	r3, [pc, #64]	; (a5c <main+0x88>)
     a1a:	4798      	blx	r3
            computeKalmanStates();
     a1c:	4b10      	ldr	r3, [pc, #64]	; (a60 <main+0x8c>)
     a1e:	4798      	blx	r3
     a20:	e7f3      	b.n	a0a <main+0x36>
     a22:	46c0      	nop			; (mov r8, r8)
     a24:	00000599 	.word	0x00000599
     a28:	00000559 	.word	0x00000559
     a2c:	00000a7d 	.word	0x00000a7d
     a30:	000017ad 	.word	0x000017ad
     a34:	0000204d 	.word	0x0000204d
     a38:	000030a5 	.word	0x000030a5
     a3c:	00000c41 	.word	0x00000c41
     a40:	0000154d 	.word	0x0000154d
     a44:	00003625 	.word	0x00003625
     a48:	00000e1d 	.word	0x00000e1d
     a4c:	00001139 	.word	0x00001139
     a50:	2000019c 	.word	0x2000019c
     a54:	0000308d 	.word	0x0000308d
     a58:	0000123d 	.word	0x0000123d
     a5c:	00001621 	.word	0x00001621
     a60:	00002935 	.word	0x00002935

00000a64 <HardFault_Handler>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
     a64:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
     a68:	4a02      	ldr	r2, [pc, #8]	; (a74 <HardFault_Handler+0x10>)
     a6a:	4b03      	ldr	r3, [pc, #12]	; (a78 <HardFault_Handler+0x14>)
     a6c:	60da      	str	r2, [r3, #12]
     a6e:	f3bf 8f4f 	dsb	sy
     a72:	e7fe      	b.n	a72 <HardFault_Handler+0xe>
     a74:	05fa0004 	.word	0x05fa0004
     a78:	e000ed00 	.word	0xe000ed00

00000a7c <IMUinit>:
extern uint32_t _ezero;
extern uint32_t _sstack;
extern uint32_t _estack;


void IMUinit() {
     a7c:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a7e:	4c08      	ldr	r4, [pc, #32]	; (aa0 <IMUinit+0x24>)
     a80:	2580      	movs	r5, #128	; 0x80
     a82:	0023      	movs	r3, r4
     a84:	00ed      	lsls	r5, r5, #3
     a86:	3394      	adds	r3, #148	; 0x94
     a88:	601d      	str	r5, [r3, #0]

    pinLow(cs_accel);
    spiDataOut(SPI0, BMI_ACCEL_PMU_RANGE);
     a8a:	4e06      	ldr	r6, [pc, #24]	; (aa4 <IMUinit+0x28>)
     a8c:	210f      	movs	r1, #15
     a8e:	2000      	movs	r0, #0
     a90:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a92:	3498      	adds	r4, #152	; 0x98
    spiDataOut(SPI0, BMI_ACCEL_16G_RANGE);
     a94:	210c      	movs	r1, #12
     a96:	2000      	movs	r0, #0
     a98:	47b0      	blx	r6
     a9a:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     a9c:	bd70      	pop	{r4, r5, r6, pc}
     a9e:	46c0      	nop			; (mov r8, r8)
     aa0:	41004400 	.word	0x41004400
     aa4:	000034dd 	.word	0x000034dd

00000aa8 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     aa8:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     aaa:	4b09      	ldr	r3, [pc, #36]	; (ad0 <USARTconnectionAvaliable+0x28>)
     aac:	7e1c      	ldrb	r4, [r3, #24]
     aae:	0764      	lsls	r4, r4, #29
     ab0:	0fe4      	lsrs	r4, r4, #31
     ab2:	2c01      	cmp	r4, #1
     ab4:	d001      	beq.n	aba <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     ab6:	2000      	movs	r0, #0
     ab8:	e009      	b.n	ace <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     aba:	2003      	movs	r0, #3
     abc:	4b05      	ldr	r3, [pc, #20]	; (ad4 <USARTconnectionAvaliable+0x2c>)
     abe:	4798      	blx	r3
     ac0:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     ac2:	2948      	cmp	r1, #72	; 0x48
     ac4:	d1f7      	bne.n	ab6 <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     ac6:	2003      	movs	r0, #3
     ac8:	4b03      	ldr	r3, [pc, #12]	; (ad8 <USARTconnectionAvaliable+0x30>)
     aca:	4798      	blx	r3
            return true;
     acc:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     ace:	bd10      	pop	{r4, pc}
     ad0:	42001400 	.word	0x42001400
     ad4:	00003529 	.word	0x00003529
     ad8:	00003511 	.word	0x00003511

00000adc <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ade:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ae0:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ae2:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     ae4:	1a09      	subs	r1, r1, r0
     ae6:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ae8:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     aea:	b28b      	uxth	r3, r1
     aec:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     aee:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     af0:	a902      	add	r1, sp, #8
     af2:	0028      	movs	r0, r5
     af4:	4b09      	ldr	r3, [pc, #36]	; (b1c <sendTheasePagesToComputer+0x40>)
     af6:	4798      	blx	r3
     af8:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     afa:	ab02      	add	r3, sp, #8
     afc:	5d99      	ldrb	r1, [r3, r6]
     afe:	2003      	movs	r0, #3
     b00:	4b07      	ldr	r3, [pc, #28]	; (b20 <sendTheasePagesToComputer+0x44>)
     b02:	3601      	adds	r6, #1
     b04:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b06:	42be      	cmp	r6, r7
     b08:	d1f7      	bne.n	afa <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b0a:	3401      	adds	r4, #1
     b0c:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b0e:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b10:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b12:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b14:	42a3      	cmp	r3, r4
     b16:	d2eb      	bcs.n	af0 <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     b18:	b043      	add	sp, #268	; 0x10c
     b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b1c:	0000035d 	.word	0x0000035d
     b20:	00003511 	.word	0x00003511

00000b24 <altitudeAGL>:

int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
     b24:	4b07      	ldr	r3, [pc, #28]	; (b44 <altitudeAGL+0x20>)

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}

int32_t altitudeAGL() {
     b26:	b510      	push	{r4, lr}
    return altitude - offsets.groundOffset;
     b28:	6998      	ldr	r0, [r3, #24]
     b2a:	4b07      	ldr	r3, [pc, #28]	; (b48 <altitudeAGL+0x24>)
     b2c:	4798      	blx	r3
     b2e:	000b      	movs	r3, r1
     b30:	4906      	ldr	r1, [pc, #24]	; (b4c <altitudeAGL+0x28>)
     b32:	0002      	movs	r2, r0
     b34:	6808      	ldr	r0, [r1, #0]
     b36:	6849      	ldr	r1, [r1, #4]
     b38:	4c05      	ldr	r4, [pc, #20]	; (b50 <altitudeAGL+0x2c>)
     b3a:	47a0      	blx	r4
     b3c:	4b05      	ldr	r3, [pc, #20]	; (b54 <altitudeAGL+0x30>)
     b3e:	4798      	blx	r3
}
     b40:	bd10      	pop	{r4, pc}
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	20000150 	.word	0x20000150
     b48:	00006c11 	.word	0x00006c11
     b4c:	20000328 	.word	0x20000328
     b50:	00006439 	.word	0x00006439
     b54:	00006b21 	.word	0x00006b21

00000b58 <unplugged>:


bool unplugged() {
     b58:	4b05      	ldr	r3, [pc, #20]	; (b70 <unplugged+0x18>)
     b5a:	b510      	push	{r4, lr}
     b5c:	68d8      	ldr	r0, [r3, #12]
     b5e:	4905      	ldr	r1, [pc, #20]	; (b74 <unplugged+0x1c>)
     b60:	4b05      	ldr	r3, [pc, #20]	; (b78 <unplugged+0x20>)
     b62:	2401      	movs	r4, #1
     b64:	4798      	blx	r3
     b66:	2800      	cmp	r0, #0
     b68:	d100      	bne.n	b6c <unplugged+0x14>
     b6a:	1c04      	adds	r4, r0, #0
     b6c:	b2e0      	uxtb	r0, r4
    if (sample.voltage.batFloat < 3.5) {
        return true;
    } else {
        return false;
    }
}
     b6e:	bd10      	pop	{r4, pc}
     b70:	200005f0 	.word	0x200005f0
     b74:	40600000 	.word	0x40600000
     b78:	00004bf5 	.word	0x00004bf5

00000b7c <shutDown>:

void shutDown() {
     b7c:	b510      	push	{r4, lr}


    delay_ms(100);
     b7e:	2064      	movs	r0, #100	; 0x64
     b80:	4b14      	ldr	r3, [pc, #80]	; (bd4 <shutDown+0x58>)
     b82:	4798      	blx	r3
    TC4->COUNT8.CTRLA.reg = 0;
     b84:	2300      	movs	r3, #0

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     b86:	2180      	movs	r1, #128	; 0x80
     b88:	4a13      	ldr	r2, [pc, #76]	; (bd8 <shutDown+0x5c>)
     b8a:	0309      	lsls	r1, r1, #12
     b8c:	8013      	strh	r3, [r2, #0]
    TC5->COUNT8.CTRLA.reg = 0;
     b8e:	4a13      	ldr	r2, [pc, #76]	; (bdc <shutDown+0x60>)
     b90:	2480      	movs	r4, #128	; 0x80
     b92:	8013      	strh	r3, [r2, #0]
     b94:	4a12      	ldr	r2, [pc, #72]	; (be0 <shutDown+0x64>)
    NVIC_DisableIRQ(TC4_IRQn);
    NVIC_DisableIRQ(TC5_IRQn);
    NVIC_DisableIRQ(RTC_IRQn);
    RTC->MODE1.CTRL.bit.ENABLE = 0;
     b96:	2002      	movs	r0, #2
     b98:	67d1      	str	r1, [r2, #124]	; 0x7c
     b9a:	2108      	movs	r1, #8
     b9c:	0364      	lsls	r4, r4, #13
     b9e:	67d4      	str	r4, [r2, #124]	; 0x7c
     ba0:	67d1      	str	r1, [r2, #124]	; 0x7c
     ba2:	4a10      	ldr	r2, [pc, #64]	; (be4 <shutDown+0x68>)
     ba4:	8811      	ldrh	r1, [r2, #0]
     ba6:	4381      	bics	r1, r0
     ba8:	8011      	strh	r1, [r2, #0]
    SysTick->CTRL = 0;
     baa:	4a0f      	ldr	r2, [pc, #60]	; (be8 <shutDown+0x6c>)
     bac:	6013      	str	r3, [r2, #0]
    PM->APBAMASK.reg = 0;
     bae:	4a0f      	ldr	r2, [pc, #60]	; (bec <shutDown+0x70>)
     bb0:	6193      	str	r3, [r2, #24]

    //turn off sercom clocks
    //GCLK->CLKCTRL.reg

    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     bb2:	2280      	movs	r2, #128	; 0x80
     bb4:	4b0e      	ldr	r3, [pc, #56]	; (bf0 <shutDown+0x74>)
     bb6:	0052      	lsls	r2, r2, #1
     bb8:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_OSC8M) | (GCLK_GENCTRL_GENEN));
     bba:	2283      	movs	r2, #131	; 0x83
     bbc:	0252      	lsls	r2, r2, #9
     bbe:	605a      	str	r2, [r3, #4]
     bc0:	4b0c      	ldr	r3, [pc, #48]	; (bf4 <shutDown+0x78>)
//     NVMCTRL->CTRLB.bit.MANW = 1;
//
//     /* Initialize the C library */
//     __libc_init_array();

    SYSCTRL->BOD33.reg = SYSCTRL_BOD33_PSEL_DIV8 | SYSCTRL_BOD33_ACTION_RESET | SYSCTRL_BOD33_LEVEL(60);
     bc2:	4a0d      	ldr	r2, [pc, #52]	; (bf8 <shutDown+0x7c>)
     bc4:	619c      	str	r4, [r3, #24]
     bc6:	4b0d      	ldr	r3, [pc, #52]	; (bfc <shutDown+0x80>)
     bc8:	635a      	str	r2, [r3, #52]	; 0x34

    SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
     bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
     bcc:	4302      	orrs	r2, r0
     bce:	635a      	str	r2, [r3, #52]	; 0x34
     bd0:	e7fe      	b.n	bd0 <shutDown+0x54>
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	000010ed 	.word	0x000010ed
     bd8:	42003000 	.word	0x42003000
     bdc:	42003400 	.word	0x42003400
     be0:	e000e104 	.word	0xe000e104
     be4:	40001400 	.word	0x40001400
     be8:	e000e010 	.word	0xe000e010
     bec:	40000400 	.word	0x40000400
     bf0:	40000c00 	.word	0x40000c00
     bf4:	41004400 	.word	0x41004400
     bf8:	003c2008 	.word	0x003c2008
     bfc:	40000800 	.word	0x40000800

00000c00 <finishFlight>:
    }
}

void finishFlight() {

    flightState = flightIdle;
     c00:	2201      	movs	r2, #1
     c02:	4b05      	ldr	r3, [pc, #20]	; (c18 <finishFlight+0x18>)
    while(1) {

    }
}

void finishFlight() {
     c04:	b510      	push	{r4, lr}

    flightState = flightIdle;
     c06:	701a      	strb	r2, [r3, #0]
    AT25SFHoldTillReady();
     c08:	4b04      	ldr	r3, [pc, #16]	; (c1c <finishFlight+0x1c>)
     c0a:	4798      	blx	r3
    writeFlightEndAddress( );
     c0c:	4b04      	ldr	r3, [pc, #16]	; (c20 <finishFlight+0x20>)
     c0e:	4798      	blx	r3
    unpluggedJingle();
     c10:	4b04      	ldr	r3, [pc, #16]	; (c24 <finishFlight+0x24>)
     c12:	4798      	blx	r3
    shutDown();
     c14:	4b04      	ldr	r3, [pc, #16]	; (c28 <finishFlight+0x28>)
     c16:	4798      	blx	r3
     c18:	200001ac 	.word	0x200001ac
     c1c:	000001e5 	.word	0x000001e5
     c20:	00002f21 	.word	0x00002f21
     c24:	00000e91 	.word	0x00000e91
     c28:	00000b7d 	.word	0x00000b7d

00000c2c <finishFromPad>:

}

void finishFromPad() {
    unpluggedJingle();
     c2c:	4b02      	ldr	r3, [pc, #8]	; (c38 <finishFromPad+0xc>)
    unpluggedJingle();
    shutDown();

}

void finishFromPad() {
     c2e:	b510      	push	{r4, lr}
    unpluggedJingle();
     c30:	4798      	blx	r3
    shutDown();
     c32:	4b02      	ldr	r3, [pc, #8]	; (c3c <finishFromPad+0x10>)
     c34:	4798      	blx	r3
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	00000e91 	.word	0x00000e91
     c3c:	00000b7d 	.word	0x00000b7d

00000c40 <POST>:
}


void POST() {
     c40:	b5f0      	push	{r4, r5, r6, r7, lr}

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     c42:	4b32      	ldr	r3, [pc, #200]	; (d0c <POST+0xcc>)
    unpluggedJingle();
    shutDown();
}


void POST() {
     c44:	b085      	sub	sp, #20

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     c46:	4798      	blx	r3
    if (crc != coefficients_[7]) {
     c48:	4b31      	ldr	r3, [pc, #196]	; (d10 <POST+0xd0>)
     c4a:	b280      	uxth	r0, r0
     c4c:	89db      	ldrh	r3, [r3, #14]
        postFailed = true;
        failType = 1;
     c4e:	2401      	movs	r4, #1
    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
    if (crc != coefficients_[7]) {
     c50:	4283      	cmp	r3, r0
     c52:	d100      	bne.n	c56 <POST+0x16>

void POST() {
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
    u8_t failType = 0;
     c54:	2400      	movs	r4, #0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c56:	2780      	movs	r7, #128	; 0x80
     c58:	4d2e      	ldr	r5, [pc, #184]	; (d14 <POST+0xd4>)
     c5a:	02ff      	lsls	r7, r7, #11
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    spiDataOut(SPI1,0x9f); // read id and mfg code
     c5c:	219f      	movs	r1, #159	; 0x9f
     c5e:	4b2e      	ldr	r3, [pc, #184]	; (d18 <POST+0xd8>)


void POST() {
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
     c60:	9401      	str	r4, [sp, #4]
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    spiDataOut(SPI1,0x9f); // read id and mfg code
     c62:	2001      	movs	r0, #1
     c64:	616f      	str	r7, [r5, #20]
     c66:	4798      	blx	r3
    u8_t mfgID = spiDataIn(SPI1);
     c68:	4e2c      	ldr	r6, [pc, #176]	; (d1c <POST+0xdc>)
     c6a:	2001      	movs	r0, #1
     c6c:	47b0      	blx	r6
     c6e:	9002      	str	r0, [sp, #8]
    u8_t deviceID1 = spiDataIn(SPI1);
     c70:	2001      	movs	r0, #1
     c72:	47b0      	blx	r6
     c74:	9003      	str	r0, [sp, #12]
    u8_t deviceID2 = spiDataIn(SPI1);
     c76:	2001      	movs	r0, #1
     c78:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c7a:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    if ( (mfgID != 0x1f) & (deviceID1 != 0x86) & (deviceID2 != 0x01)) {
     c7c:	9b02      	ldr	r3, [sp, #8]
     c7e:	3b1f      	subs	r3, #31
     c80:	1e5a      	subs	r2, r3, #1
     c82:	4193      	sbcs	r3, r2
     c84:	0019      	movs	r1, r3
     c86:	9b03      	ldr	r3, [sp, #12]
     c88:	3b86      	subs	r3, #134	; 0x86
     c8a:	1e5a      	subs	r2, r3, #1
     c8c:	4193      	sbcs	r3, r2
     c8e:	4a22      	ldr	r2, [pc, #136]	; (d18 <POST+0xd8>)
     c90:	9202      	str	r2, [sp, #8]
     c92:	420b      	tst	r3, r1
     c94:	d004      	beq.n	ca0 <POST+0x60>
     c96:	2801      	cmp	r0, #1
     c98:	d002      	beq.n	ca0 <POST+0x60>
        postFailed = true;
     c9a:	2301      	movs	r3, #1
        failType = 2;
     c9c:	2402      	movs	r4, #2
    u8_t deviceID1 = spiDataIn(SPI1);
    u8_t deviceID2 = spiDataIn(SPI1);
    pinHigh(cs_mem);

    if ( (mfgID != 0x1f) & (deviceID1 != 0x86) & (deviceID2 != 0x01)) {
        postFailed = true;
     c9e:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ca0:	2780      	movs	r7, #128	; 0x80
     ca2:	4b1f      	ldr	r3, [pc, #124]	; (d20 <POST+0xe0>)
     ca4:	00ff      	lsls	r7, r7, #3
     ca6:	601f      	str	r7, [r3, #0]
        failType = 2;
    }

    //Accelerometer Post
    pinLow(cs_accel);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     ca8:	9b02      	ldr	r3, [sp, #8]
     caa:	2180      	movs	r1, #128	; 0x80
     cac:	2000      	movs	r0, #0
     cae:	4798      	blx	r3
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
     cb0:	21ff      	movs	r1, #255	; 0xff
     cb2:	2000      	movs	r0, #0
     cb4:	4e1b      	ldr	r6, [pc, #108]	; (d24 <POST+0xe4>)
     cb6:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cb8:	4b1b      	ldr	r3, [pc, #108]	; (d28 <POST+0xe8>)
     cba:	601f      	str	r7, [r3, #0]
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
     cbc:	28fa      	cmp	r0, #250	; 0xfa
     cbe:	d002      	beq.n	cc6 <POST+0x86>
        postFailed = true;
     cc0:	2301      	movs	r3, #1
        failType = 3;
     cc2:	2403      	movs	r4, #3
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
        postFailed = true;
     cc4:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cc6:	616f      	str	r7, [r5, #20]
        failType = 3;
    }

    //Gyro Post
    pinLow(cs_gyro);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     cc8:	2180      	movs	r1, #128	; 0x80
     cca:	2000      	movs	r0, #0
     ccc:	9b02      	ldr	r3, [sp, #8]
     cce:	4798      	blx	r3
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
     cd0:	21ff      	movs	r1, #255	; 0xff
     cd2:	2000      	movs	r0, #0
     cd4:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cd6:	61af      	str	r7, [r5, #24]
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
     cd8:	280f      	cmp	r0, #15
     cda:	d103      	bne.n	ce4 <POST+0xa4>
    }

    //Analog Accelerometer Post


    if (postFailed) {
     cdc:	9b01      	ldr	r3, [sp, #4]
     cde:	2b00      	cmp	r3, #0
     ce0:	d101      	bne.n	ce6 <POST+0xa6>
     ce2:	e011      	b.n	d08 <POST+0xc8>
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
        postFailed = true;
        failType = 4;
     ce4:	2404      	movs	r4, #4

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     ce6:	0025      	movs	r5, r4
     ce8:	4e10      	ldr	r6, [pc, #64]	; (d2c <POST+0xec>)
     cea:	2d00      	cmp	r5, #0
     cec:	d009      	beq.n	d02 <POST+0xc2>
                beep(300);
     cee:	2096      	movs	r0, #150	; 0x96
     cf0:	4b0f      	ldr	r3, [pc, #60]	; (d30 <POST+0xf0>)
     cf2:	0040      	lsls	r0, r0, #1
     cf4:	4798      	blx	r3
                delay_ms(300);
     cf6:	2096      	movs	r0, #150	; 0x96

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     cf8:	3d01      	subs	r5, #1
                beep(300);
                delay_ms(300);
     cfa:	0040      	lsls	r0, r0, #1
     cfc:	47b0      	blx	r6

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     cfe:	b2ed      	uxtb	r5, r5
     d00:	e7f2      	b.n	ce8 <POST+0xa8>
                beep(300);
                delay_ms(300);
            }
            delay_ms(1500);
     d02:	480c      	ldr	r0, [pc, #48]	; (d34 <POST+0xf4>)
     d04:	47b0      	blx	r6
        }
     d06:	e7ee      	b.n	ce6 <POST+0xa6>
    }
}
     d08:	b005      	add	sp, #20
     d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d0c:	00000589 	.word	0x00000589
     d10:	200002ae 	.word	0x200002ae
     d14:	41004400 	.word	0x41004400
     d18:	000034dd 	.word	0x000034dd
     d1c:	000034f5 	.word	0x000034f5
     d20:	41004494 	.word	0x41004494
     d24:	000034c5 	.word	0x000034c5
     d28:	41004498 	.word	0x41004498
     d2c:	000010ed 	.word	0x000010ed
     d30:	00000e1d 	.word	0x00000e1d
     d34:	000005dc 	.word	0x000005dc

00000d38 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     d38:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     d3a:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     d3c:	4a10      	ldr	r2, [pc, #64]	; (d80 <adcInit+0x48>)
     d3e:	0249      	lsls	r1, r1, #9
     d40:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     d42:	4810      	ldr	r0, [pc, #64]	; (d84 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     d44:	430b      	orrs	r3, r1
     d46:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     d48:	23e0      	movs	r3, #224	; 0xe0
     d4a:	490f      	ldr	r1, [pc, #60]	; (d88 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     d4c:	4a0f      	ldr	r2, [pc, #60]	; (d8c <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     d4e:	00db      	lsls	r3, r3, #3
     d50:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     d52:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     d54:	4a0e      	ldr	r2, [pc, #56]	; (d90 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     d56:	6812      	ldr	r2, [r2, #0]
     d58:	0150      	lsls	r0, r2, #5
     d5a:	4018      	ands	r0, r3
     d5c:	4b0d      	ldr	r3, [pc, #52]	; (d94 <adcInit+0x5c>)
     d5e:	0154      	lsls	r4, r2, #5
     d60:	681a      	ldr	r2, [r3, #0]
     d62:	0ed3      	lsrs	r3, r2, #27
     d64:	4323      	orrs	r3, r4
     d66:	b2da      	uxtb	r2, r3
     d68:	0003      	movs	r3, r0
     d6a:	4313      	orrs	r3, r2
     d6c:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC0;
     d6e:	2301      	movs	r3, #1
     d70:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     d72:	18db      	adds	r3, r3, r3
     d74:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     d76:	7e4b      	ldrb	r3, [r1, #25]
     d78:	b25b      	sxtb	r3, r3
     d7a:	2b00      	cmp	r3, #0
     d7c:	dbfb      	blt.n	d76 <adcInit+0x3e>
}
     d7e:	bd10      	pop	{r4, pc}
     d80:	40000400 	.word	0x40000400
     d84:	0000401e 	.word	0x0000401e
     d88:	42004000 	.word	0x42004000
     d8c:	40000c00 	.word	0x40000c00
     d90:	00806024 	.word	0x00806024
     d94:	00806020 	.word	0x00806020

00000d98 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     d98:	2202      	movs	r2, #2
     d9a:	4b05      	ldr	r3, [pc, #20]	; (db0 <adcSample+0x18>)
     d9c:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     d9e:	3a01      	subs	r2, #1
     da0:	7e19      	ldrb	r1, [r3, #24]
     da2:	4211      	tst	r1, r2
     da4:	d0fc      	beq.n	da0 <adcSample+0x8>
    return ADC->RESULT.reg;
     da6:	4b02      	ldr	r3, [pc, #8]	; (db0 <adcSample+0x18>)
     da8:	8b58      	ldrh	r0, [r3, #26]
     daa:	b280      	uxth	r0, r0
}
     dac:	4770      	bx	lr
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	42004000 	.word	0x42004000

00000db4 <adc_read>:


u16_t adc_read(Pin p) {
     db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     db6:	2501      	movs	r5, #1
     db8:	0c02      	lsrs	r2, r0, #16
     dba:	b2d4      	uxtb	r4, r2
     dbc:	9000      	str	r0, [sp, #0]
     dbe:	0e00      	lsrs	r0, r0, #24
     dc0:	9101      	str	r1, [sp, #4]
     dc2:	0842      	lsrs	r2, r0, #1
     dc4:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     dc6:	4911      	ldr	r1, [pc, #68]	; (e0c <adc_read+0x58>)
     dc8:	18d2      	adds	r2, r2, r3
     dca:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     dcc:	4228      	tst	r0, r5
     dce:	d005      	beq.n	ddc <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     dd0:	210f      	movs	r1, #15
     dd2:	7814      	ldrb	r4, [r2, #0]
     dd4:	4021      	ands	r1, r4
     dd6:	2410      	movs	r4, #16
     dd8:	4321      	orrs	r1, r4
     dda:	e003      	b.n	de4 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     ddc:	240f      	movs	r4, #15
     dde:	7811      	ldrb	r1, [r2, #0]
     de0:	43a1      	bics	r1, r4
     de2:	4329      	orrs	r1, r5
     de4:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     de6:	2101      	movs	r1, #1
     de8:	4a09      	ldr	r2, [pc, #36]	; (e10 <adc_read+0x5c>)
     dea:	18c3      	adds	r3, r0, r3
     dec:	189b      	adds	r3, r3, r2
     dee:	781a      	ldrb	r2, [r3, #0]
     df0:	430a      	orrs	r2, r1
     df2:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     df4:	466b      	mov	r3, sp
     df6:	791a      	ldrb	r2, [r3, #4]
     df8:	231f      	movs	r3, #31
     dfa:	4013      	ands	r3, r2
     dfc:	22c0      	movs	r2, #192	; 0xc0
     dfe:	0152      	lsls	r2, r2, #5
     e00:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     e02:	4a04      	ldr	r2, [pc, #16]	; (e14 <adc_read+0x60>)
     e04:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     e06:	4b04      	ldr	r3, [pc, #16]	; (e18 <adc_read+0x64>)
     e08:	4798      	blx	r3
     e0a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     e0c:	41004430 	.word	0x41004430
     e10:	41004440 	.word	0x41004440
     e14:	42004000 	.word	0x42004000
     e18:	00000d99 	.word	0x00000d99

00000e1c <beep>:
#include <util.h>
#include <boardDefines.h>
#include <math.h>


void beep(u16_t toggles) {
     e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     e1e:	2380      	movs	r3, #128	; 0x80
     e20:	2780      	movs	r7, #128	; 0x80
     e22:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     e24:	2500      	movs	r5, #0
     e26:	4c0a      	ldr	r4, [pc, #40]	; (e50 <beep+0x34>)
     e28:	035b      	lsls	r3, r3, #13
     e2a:	61e3      	str	r3, [r4, #28]
     e2c:	03bf      	lsls	r7, r7, #14
     e2e:	42b5      	cmp	r5, r6
     e30:	d006      	beq.n	e40 <beep+0x24>
     e32:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     e34:	207a      	movs	r0, #122	; 0x7a
     e36:	4b07      	ldr	r3, [pc, #28]	; (e54 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     e38:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     e3a:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     e3c:	b2ad      	uxth	r5, r5
     e3e:	e7f6      	b.n	e2e <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e40:	2380      	movs	r3, #128	; 0x80
     e42:	039b      	lsls	r3, r3, #14
     e44:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     e46:	2380      	movs	r3, #128	; 0x80
     e48:	035b      	lsls	r3, r3, #13
     e4a:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e4e:	46c0      	nop			; (mov r8, r8)
     e50:	41004400 	.word	0x41004400
     e54:	000010b9 	.word	0x000010b9

00000e58 <startupJingle>:
    }
    beepDigit(number);

}

void startupJingle() {
     e58:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     e5a:	2696      	movs	r6, #150	; 0x96
     e5c:	0076      	lsls	r6, r6, #1
     e5e:	4d0a      	ldr	r5, [pc, #40]	; (e88 <startupJingle+0x30>)
     e60:	0030      	movs	r0, r6
     e62:	47a8      	blx	r5
    delay_ms(80);
     e64:	4c09      	ldr	r4, [pc, #36]	; (e8c <startupJingle+0x34>)
     e66:	2050      	movs	r0, #80	; 0x50
     e68:	47a0      	blx	r4
    beep(300);
     e6a:	0030      	movs	r0, r6
     e6c:	47a8      	blx	r5
    delay_ms(250);
     e6e:	20fa      	movs	r0, #250	; 0xfa
     e70:	47a0      	blx	r4
    beep(300);
     e72:	0030      	movs	r0, r6
     e74:	47a8      	blx	r5
    delay_ms(80);
     e76:	2050      	movs	r0, #80	; 0x50
     e78:	47a0      	blx	r4
    beep(300);
     e7a:	0030      	movs	r0, r6
     e7c:	47a8      	blx	r5
    delay_ms(500);
     e7e:	20fa      	movs	r0, #250	; 0xfa
     e80:	0040      	lsls	r0, r0, #1
     e82:	47a0      	blx	r4
}
     e84:	bd70      	pop	{r4, r5, r6, pc}
     e86:	46c0      	nop			; (mov r8, r8)
     e88:	00000e1d 	.word	0x00000e1d
     e8c:	000010ed 	.word	0x000010ed

00000e90 <unpluggedJingle>:

void unpluggedJingle() {
     e90:	b570      	push	{r4, r5, r6, lr}
    delay_ms(80);
    beep(300);
     e92:	2696      	movs	r6, #150	; 0x96
    beep(300);
    delay_ms(500);
}

void unpluggedJingle() {
    delay_ms(80);
     e94:	4c0c      	ldr	r4, [pc, #48]	; (ec8 <unpluggedJingle+0x38>)
    beep(300);
     e96:	0076      	lsls	r6, r6, #1
    beep(300);
    delay_ms(500);
}

void unpluggedJingle() {
    delay_ms(80);
     e98:	2050      	movs	r0, #80	; 0x50
     e9a:	47a0      	blx	r4
    beep(300);
     e9c:	4d0b      	ldr	r5, [pc, #44]	; (ecc <unpluggedJingle+0x3c>)
     e9e:	0030      	movs	r0, r6
     ea0:	47a8      	blx	r5
    delay_ms(80);
     ea2:	2050      	movs	r0, #80	; 0x50
     ea4:	47a0      	blx	r4
    beep(300);
     ea6:	0030      	movs	r0, r6
     ea8:	47a8      	blx	r5
    delay_ms(80);
     eaa:	2050      	movs	r0, #80	; 0x50
     eac:	47a0      	blx	r4
    beep(300);
     eae:	0030      	movs	r0, r6
     eb0:	47a8      	blx	r5
    delay_ms(80);
     eb2:	2050      	movs	r0, #80	; 0x50
     eb4:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     eb6:	2280      	movs	r2, #128	; 0x80
     eb8:	4b05      	ldr	r3, [pc, #20]	; (ed0 <unpluggedJingle+0x40>)
     eba:	0392      	lsls	r2, r2, #14
     ebc:	615a      	str	r2, [r3, #20]
     ebe:	2280      	movs	r2, #128	; 0x80
     ec0:	0352      	lsls	r2, r2, #13
     ec2:	615a      	str	r2, [r3, #20]
    pinLow(buzzerPin);
    pinLow(LedPin);

}
     ec4:	bd70      	pop	{r4, r5, r6, pc}
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	000010ed 	.word	0x000010ed
     ecc:	00000e1d 	.word	0x00000e1d
     ed0:	41004400 	.word	0x41004400

00000ed4 <dfll_nvm_val>:
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10

uint32_t dfll_nvm_val() {
    uint32_t coarse = ( *((uint32_t *)(NVMCTRL_OTP4)
     ed4:	4b08      	ldr	r3, [pc, #32]	; (ef8 <dfll_nvm_val+0x24>)
     ed6:	6818      	ldr	r0, [r3, #0]
     ed8:	0e80      	lsrs	r0, r0, #26
                          + (NVM_DFLL_COARSE_POS / 32))
                        >> (NVM_DFLL_COARSE_POS % 32))
                      & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     eda:	283f      	cmp	r0, #63	; 0x3f
     edc:	d100      	bne.n	ee0 <dfll_nvm_val+0xc>
        coarse = 0x1f;
     ede:	3820      	subs	r0, #32
    }
    uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
                        + (NVM_DFLL_FINE_POS / 32))
                      >> (NVM_DFLL_FINE_POS % 32))
     ee0:	4b06      	ldr	r3, [pc, #24]	; (efc <dfll_nvm_val+0x28>)
                    & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     ee2:	4a07      	ldr	r2, [pc, #28]	; (f00 <dfll_nvm_val+0x2c>)
                        >> (NVM_DFLL_COARSE_POS % 32))
                      & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
     ee4:	681b      	ldr	r3, [r3, #0]
     ee6:	059b      	lsls	r3, r3, #22
     ee8:	0d9b      	lsrs	r3, r3, #22
                        + (NVM_DFLL_FINE_POS / 32))
                      >> (NVM_DFLL_FINE_POS % 32))
                    & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     eea:	4293      	cmp	r3, r2
     eec:	d100      	bne.n	ef0 <dfll_nvm_val+0x1c>
        fine = 0x1ff;
     eee:	4b05      	ldr	r3, [pc, #20]	; (f04 <dfll_nvm_val+0x30>)
    }

    return SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     ef0:	0280      	lsls	r0, r0, #10
     ef2:	4318      	orrs	r0, r3
}
     ef4:	4770      	bx	lr
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	00806024 	.word	0x00806024
     efc:	00806028 	.word	0x00806028
     f00:	000003ff 	.word	0x000003ff
     f04:	000001ff 	.word	0x000001ff

00000f08 <dfll_wait_for_sync>:

void dfll_wait_for_sync() {
    while (!SYSCTRL->PCLKSR.bit.DFLLRDY);
     f08:	4a02      	ldr	r2, [pc, #8]	; (f14 <dfll_wait_for_sync+0xc>)
     f0a:	68d3      	ldr	r3, [r2, #12]
     f0c:	06db      	lsls	r3, r3, #27
     f0e:	d5fc      	bpl.n	f0a <dfll_wait_for_sync+0x2>
}
     f10:	4770      	bx	lr
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	40000800 	.word	0x40000800

00000f18 <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     f18:	4b27      	ldr	r3, [pc, #156]	; (fb8 <RtcInit+0xa0>)
     f1a:	4a28      	ldr	r2, [pc, #160]	; (fbc <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     f1c:	4828      	ldr	r0, [pc, #160]	; (fc0 <RtcInit+0xa8>)
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     f1e:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     f20:	4a28      	ldr	r2, [pc, #160]	; (fc4 <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     f22:	6999      	ldr	r1, [r3, #24]
     f24:	6812      	ldr	r2, [r2, #0]
     f26:	4001      	ands	r1, r0
     f28:	04d2      	lsls	r2, r2, #19
     f2a:	0e52      	lsrs	r2, r2, #25
     f2c:	0412      	lsls	r2, r2, #16
     f2e:	4311      	orrs	r1, r2
     f30:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     f32:	4925      	ldr	r1, [pc, #148]	; (fc8 <RtcInit+0xb0>)
     f34:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     f36:	6999      	ldr	r1, [r3, #24]
     f38:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     f3a:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     f3c:	4302      	orrs	r2, r0
     f3e:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     f40:	699a      	ldr	r2, [r3, #24]
     f42:	430a      	orrs	r2, r1
     f44:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     f46:	2204      	movs	r2, #4
     f48:	68d9      	ldr	r1, [r3, #12]
     f4a:	4211      	tst	r1, r2
     f4c:	d0fc      	beq.n	f48 <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     f4e:	2281      	movs	r2, #129	; 0x81
     f50:	4b1e      	ldr	r3, [pc, #120]	; (fcc <RtcInit+0xb4>)
     f52:	0052      	lsls	r2, r2, #1
     f54:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     f56:	4a1e      	ldr	r2, [pc, #120]	; (fd0 <RtcInit+0xb8>)
     f58:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     f5a:	785a      	ldrb	r2, [r3, #1]
     f5c:	b252      	sxtb	r2, r2
     f5e:	2a00      	cmp	r2, #0
     f60:	dbfb      	blt.n	f5a <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     f62:	4a1c      	ldr	r2, [pc, #112]	; (fd4 <RtcInit+0xbc>)
     f64:	4b19      	ldr	r3, [pc, #100]	; (fcc <RtcInit+0xb4>)
     f66:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     f68:	2204      	movs	r2, #4
     f6a:	4b1b      	ldr	r3, [pc, #108]	; (fd8 <RtcInit+0xc0>)
     f6c:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f6e:	7a9a      	ldrb	r2, [r3, #10]
     f70:	4919      	ldr	r1, [pc, #100]	; (fd8 <RtcInit+0xc0>)
     f72:	09d2      	lsrs	r2, r2, #7
     f74:	d1fb      	bne.n	f6e <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     f76:	20a0      	movs	r0, #160	; 0xa0
     f78:	880a      	ldrh	r2, [r1, #0]
     f7a:	00c0      	lsls	r0, r0, #3
     f7c:	4302      	orrs	r2, r0
     f7e:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f80:	7a9a      	ldrb	r2, [r3, #10]
     f82:	09d2      	lsrs	r2, r2, #7
     f84:	d1fc      	bne.n	f80 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     f86:	4915      	ldr	r1, [pc, #84]	; (fdc <RtcInit+0xc4>)
     f88:	4a13      	ldr	r2, [pc, #76]	; (fd8 <RtcInit+0xc0>)
     f8a:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f8c:	7a99      	ldrb	r1, [r3, #10]
     f8e:	4a12      	ldr	r2, [pc, #72]	; (fd8 <RtcInit+0xc0>)
     f90:	09c9      	lsrs	r1, r1, #7
     f92:	d1fb      	bne.n	f8c <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     f94:	8851      	ldrh	r1, [r2, #2]
     f96:	4812      	ldr	r0, [pc, #72]	; (fe0 <RtcInit+0xc8>)
     f98:	4301      	orrs	r1, r0
     f9a:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f9c:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f9e:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     fa0:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     fa2:	8811      	ldrh	r1, [r2, #0]
     fa4:	4301      	orrs	r1, r0
     fa6:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     fa8:	7a9a      	ldrb	r2, [r3, #10]
     faa:	09d2      	lsrs	r2, r2, #7
     fac:	d1fc      	bne.n	fa8 <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     fae:	4b0d      	ldr	r3, [pc, #52]	; (fe4 <RtcInit+0xcc>)
     fb0:	3208      	adds	r2, #8
     fb2:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     fb4:	4770      	bx	lr
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	40000800 	.word	0x40000800
     fbc:	00000606 	.word	0x00000606
     fc0:	ff80ffff 	.word	0xff80ffff
     fc4:	00806024 	.word	0x00806024
     fc8:	00000604 	.word	0x00000604
     fcc:	40000c00 	.word	0x40000c00
     fd0:	00230002 	.word	0x00230002
     fd4:	00004204 	.word	0x00004204
     fd8:	40001400 	.word	0x40001400
     fdc:	000003e6 	.word	0x000003e6
     fe0:	00004010 	.word	0x00004010
     fe4:	e000e100 	.word	0xe000e100

00000fe8 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     fe8:	230f      	movs	r3, #15
     fea:	4018      	ands	r0, r3
     fec:	4b08      	ldr	r3, [pc, #32]	; (1010 <gclkEnable+0x28>)
     fee:	0212      	lsls	r2, r2, #8
     ff0:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ff2:	23f8      	movs	r3, #248	; 0xf8
     ff4:	0209      	lsls	r1, r1, #8
     ff6:	015b      	lsls	r3, r3, #5
     ff8:	4019      	ands	r1, r3
     ffa:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     ffc:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ffe:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    1000:	4c04      	ldr	r4, [pc, #16]	; (1014 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    1002:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    1004:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    1006:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    1008:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    100a:	6060      	str	r0, [r4, #4]
}
    100c:	bd10      	pop	{r4, pc}
    100e:	46c0      	nop			; (mov r8, r8)
    1010:	00ffff00 	.word	0x00ffff00
    1014:	40000c00 	.word	0x40000c00

00001018 <GclkInit>:
}

void GclkInit(u8_t clk_system) {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1018:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    101a:	211e      	movs	r1, #30
void gclk_enable(uint32_t id, uint32_t src, uint32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
}

void GclkInit(u8_t clk_system) {
    101c:	b570      	push	{r4, r5, r6, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    101e:	4c12      	ldr	r4, [pc, #72]	; (1068 <GclkInit+0x50>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    1020:	4a12      	ldr	r2, [pc, #72]	; (106c <GclkInit+0x54>)
}

void GclkInit(u8_t clk_system) {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1022:	00db      	lsls	r3, r3, #3
    1024:	60a3      	str	r3, [r4, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    1026:	6853      	ldr	r3, [r2, #4]
void gclk_enable(uint32_t id, uint32_t src, uint32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
}

void GclkInit(u8_t clk_system) {
    1028:	0005      	movs	r5, r0


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    102a:	438b      	bics	r3, r1
    102c:	391a      	subs	r1, #26
    102e:	430b      	orrs	r3, r1
    1030:	6053      	str	r3, [r2, #4]

    // Initialize GCLK
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
    1032:	4a0f      	ldr	r2, [pc, #60]	; (1070 <GclkInit+0x58>)
    1034:	3104      	adds	r1, #4
    1036:	6993      	ldr	r3, [r2, #24]
    1038:	430b      	orrs	r3, r1
    103a:	6193      	str	r3, [r2, #24]
    GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    103c:	2301      	movs	r3, #1
    103e:	4a0d      	ldr	r2, [pc, #52]	; (1074 <GclkInit+0x5c>)
    1040:	7013      	strb	r3, [r2, #0]
    while (GCLK->CTRL.reg & GCLK_CTRL_SWRST);
    1042:	7811      	ldrb	r1, [r2, #0]
    1044:	4219      	tst	r1, r3
    1046:	d1fc      	bne.n	1042 <GclkInit+0x2a>

    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1048:	4b0b      	ldr	r3, [pc, #44]	; (1078 <GclkInit+0x60>)
    dfll_wait_for_sync();
    104a:	4e0c      	ldr	r6, [pc, #48]	; (107c <GclkInit+0x64>)
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
    GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    while (GCLK->CTRL.reg & GCLK_CTRL_SWRST);

    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    104c:	84a3      	strh	r3, [r4, #36]	; 0x24
    dfll_wait_for_sync();
    104e:	47b0      	blx	r6
    SYSCTRL->DFLLVAL.reg = dfll_nvm_val();
    1050:	4b0b      	ldr	r3, [pc, #44]	; (1080 <GclkInit+0x68>)
    1052:	4798      	blx	r3
    1054:	62a0      	str	r0, [r4, #40]	; 0x28
    dfll_wait_for_sync();
    1056:	47b0      	blx	r6
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl;
    1058:	4b0a      	ldr	r3, [pc, #40]	; (1084 <GclkInit+0x6c>)


    //For generic clock generator 0, select the DFLL48 Clock as input
    gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
    105a:	0028      	movs	r0, r5
    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    dfll_wait_for_sync();
    SYSCTRL->DFLLVAL.reg = dfll_nvm_val();
    dfll_wait_for_sync();
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl;
    105c:	84a3      	strh	r3, [r4, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
    105e:	2201      	movs	r2, #1
    1060:	2107      	movs	r1, #7
    1062:	4b09      	ldr	r3, [pc, #36]	; (1088 <GclkInit+0x70>)
    1064:	4798      	blx	r3
}
    1066:	bd70      	pop	{r4, r5, r6, pc}
    1068:	40000800 	.word	0x40000800
    106c:	41004000 	.word	0x41004000
    1070:	40000400 	.word	0x40000400
    1074:	40000c00 	.word	0x40000c00
    1078:	00000502 	.word	0x00000502
    107c:	00000f09 	.word	0x00000f09
    1080:	00000ed5 	.word	0x00000ed5
    1084:	00000582 	.word	0x00000582
    1088:	00000fe9 	.word	0x00000fe9

0000108c <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
    cycles_per_us = cycles_per_ms / 1000;
    108c:	2230      	movs	r2, #48	; 0x30
}


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
    108e:	4b06      	ldr	r3, [pc, #24]	; (10a8 <delayInit+0x1c>)
    cycles_per_us = cycles_per_ms / 1000;
    1090:	4906      	ldr	r1, [pc, #24]	; (10ac <delayInit+0x20>)
    1092:	c306      	stmia	r3!, {r1, r2}
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1094:	4a06      	ldr	r2, [pc, #24]	; (10b0 <delayInit+0x24>)
    1096:	6a13      	ldr	r3, [r2, #32]
    1098:	021b      	lsls	r3, r3, #8
    109a:	0a1b      	lsrs	r3, r3, #8
    109c:	6213      	str	r3, [r2, #32]

    NVIC_SetPriority(SysTick_IRQn, 0x0);

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    109e:	2205      	movs	r2, #5
    10a0:	4b04      	ldr	r3, [pc, #16]	; (10b4 <delayInit+0x28>)
    10a2:	601a      	str	r2, [r3, #0]
}
    10a4:	4770      	bx	lr
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	20000004 	.word	0x20000004
    10ac:	0000bb80 	.word	0x0000bb80
    10b0:	e000ed00 	.word	0xe000ed00
    10b4:	e000e010 	.word	0xe000e010

000010b8 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    10b8:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10ba:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    10bc:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    10be:	4b08      	ldr	r3, [pc, #32]	; (10e0 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    10c0:	4a08      	ldr	r2, [pc, #32]	; (10e4 <delay_us+0x2c>)
    10c2:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10c4:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
    10c6:	3801      	subs	r0, #1
    10c8:	d308      	bcc.n	10dc <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    10ca:	2b00      	cmp	r3, #0
    10cc:	d0fb      	beq.n	10c6 <delay_us+0xe>
    10ce:	4e05      	ldr	r6, [pc, #20]	; (10e4 <delay_us+0x2c>)
        SysTick->LOAD = n;
    10d0:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    10d2:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10d4:	6835      	ldr	r5, [r6, #0]
    10d6:	4225      	tst	r5, r4
    10d8:	d0fc      	beq.n	10d4 <delay_us+0x1c>
    10da:	e7f4      	b.n	10c6 <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
    10dc:	bd70      	pop	{r4, r5, r6, pc}
    10de:	46c0      	nop			; (mov r8, r8)
    10e0:	20000004 	.word	0x20000004
    10e4:	e000e010 	.word	0xe000e010

000010e8 <SysTick_Handler>:


void SysTick_Handler(void) {
    //g_msTicks++;
}
    10e8:	4770      	bx	lr
	...

000010ec <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    10ec:	b570      	push	{r4, r5, r6, lr}
    10ee:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    10f0:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    10f2:	4b08      	ldr	r3, [pc, #32]	; (1114 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    10f4:	4a08      	ldr	r2, [pc, #32]	; (1118 <delay_ms+0x2c>)
    10f6:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10f8:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
    10fa:	3801      	subs	r0, #1
    10fc:	d308      	bcc.n	1110 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    10fe:	2b00      	cmp	r3, #0
    1100:	d0fb      	beq.n	10fa <delay_ms+0xe>
    1102:	4e05      	ldr	r6, [pc, #20]	; (1118 <delay_ms+0x2c>)
        SysTick->LOAD = n;
    1104:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    1106:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1108:	6835      	ldr	r5, [r6, #0]
    110a:	4225      	tst	r5, r4
    110c:	d0fc      	beq.n	1108 <delay_ms+0x1c>
    110e:	e7f4      	b.n	10fa <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
    1110:	bd70      	pop	{r4, r5, r6, pc}
    1112:	46c0      	nop			; (mov r8, r8)
    1114:	20000004 	.word	0x20000004
    1118:	e000e010 	.word	0xe000e010

0000111c <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    111c:	21fa      	movs	r1, #250	; 0xfa
    111e:	4a04      	ldr	r2, [pc, #16]	; (1130 <RTC_Handler+0x14>)
    1120:	0089      	lsls	r1, r1, #2
    1122:	6813      	ldr	r3, [r2, #0]
    1124:	185b      	adds	r3, r3, r1
    1126:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    1128:	22ff      	movs	r2, #255	; 0xff
    112a:	4b02      	ldr	r3, [pc, #8]	; (1134 <RTC_Handler+0x18>)
    112c:	721a      	strb	r2, [r3, #8]
}
    112e:	4770      	bx	lr
    1130:	2000013c 	.word	0x2000013c
    1134:	40001400 	.word	0x40001400

00001138 <millis>:

uint32_t millis(void) {
    1138:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    113a:	f3ef 8110 	mrs	r1, PRIMASK
    113e:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1140:	4a08      	ldr	r2, [pc, #32]	; (1164 <millis+0x2c>)
    1142:	4d09      	ldr	r5, [pc, #36]	; (1168 <millis+0x30>)
    1144:	8a10      	ldrh	r0, [r2, #16]
    1146:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1148:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    114a:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    114c:	09e4      	lsrs	r4, r4, #7
    114e:	d004      	beq.n	115a <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    1150:	8a13      	ldrh	r3, [r2, #16]
    1152:	22fa      	movs	r2, #250	; 0xfa
    1154:	6828      	ldr	r0, [r5, #0]
    1156:	0092      	lsls	r2, r2, #2
    1158:	1880      	adds	r0, r0, r2
    115a:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    115c:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    1160:	bd30      	pop	{r4, r5, pc}
    1162:	46c0      	nop			; (mov r8, r8)
    1164:	40001400 	.word	0x40001400
    1168:	2000013c 	.word	0x2000013c

0000116c <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    116c:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    116e:	4a0d      	ldr	r2, [pc, #52]	; (11a4 <TC4Init+0x38>)
    1170:	4b0d      	ldr	r3, [pc, #52]	; (11a8 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1172:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1174:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1176:	4a0d      	ldr	r2, [pc, #52]	; (11ac <TC4Init+0x40>)
    1178:	6a13      	ldr	r3, [r2, #32]
    117a:	430b      	orrs	r3, r1
    117c:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    117e:	4b0c      	ldr	r3, [pc, #48]	; (11b0 <TC4Init+0x44>)
    1180:	4a0c      	ldr	r2, [pc, #48]	; (11b4 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1182:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1184:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x50;
    1186:	2250      	movs	r2, #80	; 0x50
    1188:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    118a:	3a4f      	subs	r2, #79	; 0x4f
    118c:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    118e:	32ff      	adds	r2, #255	; 0xff
    1190:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1192:	881a      	ldrh	r2, [r3, #0]
    1194:	430a      	orrs	r2, r1
    1196:	801a      	strh	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    1198:	2280      	movs	r2, #128	; 0x80
    119a:	4b07      	ldr	r3, [pc, #28]	; (11b8 <TC4Init+0x4c>)
    119c:	0312      	lsls	r2, r2, #12
    119e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    11a0:	4770      	bx	lr
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	0000421c 	.word	0x0000421c
    11a8:	40000c00 	.word	0x40000c00
    11ac:	40000400 	.word	0x40000400
    11b0:	42003000 	.word	0x42003000
    11b4:	00000904 	.word	0x00000904
    11b8:	e000e100 	.word	0xe000e100

000011bc <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    11bc:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    11be:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    11c0:	4b02      	ldr	r3, [pc, #8]	; (11cc <TC4_Handler+0x10>)
    11c2:	739a      	strb	r2, [r3, #14]
    //pinToggle(TxPo);
    pullSample();
    11c4:	4b02      	ldr	r3, [pc, #8]	; (11d0 <TC4_Handler+0x14>)
    11c6:	4798      	blx	r3
}
    11c8:	bd10      	pop	{r4, pc}
    11ca:	46c0      	nop			; (mov r8, r8)
    11cc:	42003000 	.word	0x42003000
    11d0:	00003099 	.word	0x00003099

000011d4 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    11d4:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    11d6:	4a0d      	ldr	r2, [pc, #52]	; (120c <TC5Init+0x38>)
    11d8:	4b0d      	ldr	r3, [pc, #52]	; (1210 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    11da:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    11dc:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    11de:	4a0d      	ldr	r2, [pc, #52]	; (1214 <TC5Init+0x40>)
    11e0:	6a13      	ldr	r3, [r2, #32]
    11e2:	430b      	orrs	r3, r1
    11e4:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    11e6:	4b0c      	ldr	r3, [pc, #48]	; (1218 <TC5Init+0x44>)
    11e8:	4a0c      	ldr	r2, [pc, #48]	; (121c <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    11ea:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    11ec:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_PRESCALER_DIV16;

    u16_t logSpeed = 20; //Hz
    u8_t PER_Reg = (long)((32768/16) / logSpeed);

    TC5->COUNT8.PER.reg = PER_Reg;
    11ee:	2266      	movs	r2, #102	; 0x66
    11f0:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    11f2:	3a65      	subs	r2, #101	; 0x65
    11f4:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    11f6:	32ff      	adds	r2, #255	; 0xff
    11f8:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    11fa:	881a      	ldrh	r2, [r3, #0]
    11fc:	430a      	orrs	r2, r1
    11fe:	801a      	strh	r2, [r3, #0]
    1200:	2280      	movs	r2, #128	; 0x80
    1202:	4b07      	ldr	r3, [pc, #28]	; (1220 <TC5Init+0x4c>)
    1204:	0352      	lsls	r2, r2, #13
    1206:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    1208:	4770      	bx	lr
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	0000421c 	.word	0x0000421c
    1210:	40000c00 	.word	0x40000c00
    1214:	40000400 	.word	0x40000400
    1218:	42003400 	.word	0x42003400
    121c:	00000c04 	.word	0x00000c04
    1220:	e000e100 	.word	0xe000e100

00001224 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1224:	22ff      	movs	r2, #255	; 0xff
    1226:	4b03      	ldr	r3, [pc, #12]	; (1234 <TC5_Handler+0x10>)
    1228:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    122a:	4b03      	ldr	r3, [pc, #12]	; (1238 <TC5_Handler+0x14>)
    122c:	3afe      	subs	r2, #254	; 0xfe
    122e:	701a      	strb	r2, [r3, #0]
}
    1230:	4770      	bx	lr
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	42003400 	.word	0x42003400
    1238:	2000019a 	.word	0x2000019a

0000123c <flight>:
#include <boardDefines.h>

#define TESTFLIGHT 1


void flight() {
    123c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    switch(flightState) {
    123e:	4d69      	ldr	r5, [pc, #420]	; (13e4 <flight+0x1a8>)
    1240:	4e69      	ldr	r6, [pc, #420]	; (13e8 <flight+0x1ac>)
    1242:	7828      	ldrb	r0, [r5, #0]
    1244:	280a      	cmp	r0, #10
    1246:	d900      	bls.n	124a <flight+0xe>
    1248:	e0b1      	b.n	13ae <flight+0x172>
    124a:	f003 fbed 	bl	4a28 <__gnu_thumb1_case_uqi>
    124e:	1e06      	.short	0x1e06
    1250:	b0b07043 	.word	0xb0b07043
    1254:	b0a18d87 	.word	0xb0a18d87
    1258:	87          	.byte	0x87
    1259:	00          	.byte	0x00
    case flightStatrup:

        updateGround( );
    125a:	4b64      	ldr	r3, [pc, #400]	; (13ec <flight+0x1b0>)
    125c:	4798      	blx	r3

        if ((millis() - startupTick) > 10000) {
    125e:	4b64      	ldr	r3, [pc, #400]	; (13f0 <flight+0x1b4>)
    1260:	4798      	blx	r3
    1262:	4b64      	ldr	r3, [pc, #400]	; (13f4 <flight+0x1b8>)
    1264:	681b      	ldr	r3, [r3, #0]
    1266:	1ac0      	subs	r0, r0, r3
    1268:	4b63      	ldr	r3, [pc, #396]	; (13f8 <flight+0x1bc>)
    126a:	4298      	cmp	r0, r3
    126c:	d90b      	bls.n	1286 <flight+0x4a>
            findNewFlightStart();
    126e:	4b63      	ldr	r3, [pc, #396]	; (13fc <flight+0x1c0>)
    1270:	4798      	blx	r3
            startupJingle();
    1272:	4b63      	ldr	r3, [pc, #396]	; (1400 <flight+0x1c4>)
    1274:	4798      	blx	r3

#if TESTFLIGHT
            flightState = flightTest;
    1276:	230a      	movs	r3, #10
    1278:	702b      	strb	r3, [r5, #0]
            writeFlightStartAddress();
    127a:	4b62      	ldr	r3, [pc, #392]	; (1404 <flight+0x1c8>)
    127c:	4798      	blx	r3
            logFlight( );
    127e:	4b62      	ldr	r3, [pc, #392]	; (1408 <flight+0x1cc>)
    1280:	4798      	blx	r3
            logEvent('L');
    1282:	204c      	movs	r0, #76	; 0x4c
    1284:	e067      	b.n	1356 <flight+0x11a>
#endif

            break;
        }

        attemptConnection();
    1286:	4b61      	ldr	r3, [pc, #388]	; (140c <flight+0x1d0>)
    1288:	e080      	b.n	138c <flight+0x150>
        break;

    case flightIdle:

        if (millis() - offsets.groundBeep > 2000) {
    128a:	4f59      	ldr	r7, [pc, #356]	; (13f0 <flight+0x1b4>)
    128c:	47b8      	blx	r7
    128e:	4c60      	ldr	r4, [pc, #384]	; (1410 <flight+0x1d4>)
    1290:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1292:	1ac0      	subs	r0, r0, r3
    1294:	23fa      	movs	r3, #250	; 0xfa
    1296:	00db      	lsls	r3, r3, #3
    1298:	4298      	cmp	r0, r3
    129a:	d905      	bls.n	12a8 <flight+0x6c>
            offsets.groundBeep = millis();
    129c:	47b8      	blx	r7
    129e:	62e0      	str	r0, [r4, #44]	; 0x2c
            beep(400);
    12a0:	20c8      	movs	r0, #200	; 0xc8
    12a2:	4b5c      	ldr	r3, [pc, #368]	; (1414 <flight+0x1d8>)
    12a4:	0040      	lsls	r0, r0, #1
    12a6:	4798      	blx	r3
        }

        if (unplugged()) {
    12a8:	47b0      	blx	r6
    12aa:	2800      	cmp	r0, #0
    12ac:	d001      	beq.n	12b2 <flight+0x76>
            finishFromPad();
    12ae:	4b5a      	ldr	r3, [pc, #360]	; (1418 <flight+0x1dc>)
    12b0:	4798      	blx	r3
        }

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    12b2:	4b5a      	ldr	r3, [pc, #360]	; (141c <flight+0x1e0>)
    12b4:	7e1b      	ldrb	r3, [r3, #24]
    12b6:	075b      	lsls	r3, r3, #29
    12b8:	d579      	bpl.n	13ae <flight+0x172>
            u8_t possibleReset = usartDataIn(USART3);
    12ba:	2003      	movs	r0, #3
    12bc:	4b58      	ldr	r3, [pc, #352]	; (1420 <flight+0x1e4>)
    12be:	4798      	blx	r3
            if (possibleReset == 0x52) {
    12c0:	2852      	cmp	r0, #82	; 0x52
    12c2:	d174      	bne.n	13ae <flight+0x172>
    12c4:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    12c8:	4a56      	ldr	r2, [pc, #344]	; (1424 <flight+0x1e8>)
    12ca:	4b57      	ldr	r3, [pc, #348]	; (1428 <flight+0x1ec>)
    12cc:	60da      	str	r2, [r3, #12]
    12ce:	f3bf 8f4f 	dsb	sy
    12d2:	e7fe      	b.n	12d2 <flight+0x96>
        *  Accel > 2g & vel > 15ft/s
        *		 or
        *  baro alt > 100ft
        */

        updateGround();
    12d4:	4b45      	ldr	r3, [pc, #276]	; (13ec <flight+0x1b0>)
    12d6:	4798      	blx	r3

        if (writeLog) {
    12d8:	4b54      	ldr	r3, [pc, #336]	; (142c <flight+0x1f0>)
    12da:	781b      	ldrb	r3, [r3, #0]
    12dc:	2b00      	cmp	r3, #0
    12de:	d005      	beq.n	12ec <flight+0xb0>
            logSensorsOnPad( );
    12e0:	4b53      	ldr	r3, [pc, #332]	; (1430 <flight+0x1f4>)
    12e2:	4798      	blx	r3
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    12e4:	2280      	movs	r2, #128	; 0x80
    12e6:	4b53      	ldr	r3, [pc, #332]	; (1434 <flight+0x1f8>)
    12e8:	0352      	lsls	r2, r2, #13
    12ea:	61da      	str	r2, [r3, #28]
            pinToggle(LedPin);
        }


        if ((( velocity > 15) && (accel > 2)) | (altitudeAGL() > 100)) {
    12ec:	4952      	ldr	r1, [pc, #328]	; (1438 <flight+0x1fc>)
    12ee:	4c53      	ldr	r4, [pc, #332]	; (143c <flight+0x200>)
    12f0:	2200      	movs	r2, #0
    12f2:	6808      	ldr	r0, [r1, #0]
    12f4:	6849      	ldr	r1, [r1, #4]
    12f6:	4b52      	ldr	r3, [pc, #328]	; (1440 <flight+0x204>)
    12f8:	47a0      	blx	r4
    12fa:	2800      	cmp	r0, #0
    12fc:	d00c      	beq.n	1318 <flight+0xdc>
    12fe:	2380      	movs	r3, #128	; 0x80
    1300:	4950      	ldr	r1, [pc, #320]	; (1444 <flight+0x208>)
    1302:	2200      	movs	r2, #0
    1304:	6808      	ldr	r0, [r1, #0]
    1306:	6849      	ldr	r1, [r1, #4]
    1308:	05db      	lsls	r3, r3, #23
    130a:	47a0      	blx	r4
    130c:	1e44      	subs	r4, r0, #1
    130e:	41a0      	sbcs	r0, r4
    1310:	2401      	movs	r4, #1
    1312:	4240      	negs	r0, r0
    1314:	4004      	ands	r4, r0
    1316:	e000      	b.n	131a <flight+0xde>
    1318:	0004      	movs	r4, r0
    131a:	4b4b      	ldr	r3, [pc, #300]	; (1448 <flight+0x20c>)
    131c:	4798      	blx	r3
    131e:	2864      	cmp	r0, #100	; 0x64
    1320:	dc01      	bgt.n	1326 <flight+0xea>
    1322:	07e3      	lsls	r3, r4, #31
    1324:	d543      	bpl.n	13ae <flight+0x172>
            //if ((( velocity > 5) && (accel > 2)) | (altitudeAGL() > 100)) {

            flightState = flightBoost;
    1326:	2303      	movs	r3, #3
    1328:	702b      	strb	r3, [r5, #0]
            beginFlightLog();
    132a:	4b48      	ldr	r3, [pc, #288]	; (144c <flight+0x210>)
    132c:	e02e      	b.n	138c <flight+0x150>
        /*
        *	boost to fast
        *		while
        *	Accel > 1/4G
        */
        if (writeLog) {
    132e:	4b3f      	ldr	r3, [pc, #252]	; (142c <flight+0x1f0>)
    1330:	781b      	ldrb	r3, [r3, #0]
    1332:	2b00      	cmp	r3, #0
    1334:	d001      	beq.n	133a <flight+0xfe>
            logSensors( );
    1336:	4b46      	ldr	r3, [pc, #280]	; (1450 <flight+0x214>)
    1338:	4798      	blx	r3
        }

        if (velocity < 0) {
    133a:	493f      	ldr	r1, [pc, #252]	; (1438 <flight+0x1fc>)
    133c:	2200      	movs	r2, #0
    133e:	6808      	ldr	r0, [r1, #0]
    1340:	6849      	ldr	r1, [r1, #4]
    1342:	2300      	movs	r3, #0
    1344:	4c43      	ldr	r4, [pc, #268]	; (1454 <flight+0x218>)
    1346:	47a0      	blx	r4
    1348:	2800      	cmp	r0, #0
    134a:	d030      	beq.n	13ae <flight+0x172>
            flightState = flightDrogue;
    134c:	2306      	movs	r3, #6
    134e:	702b      	strb	r3, [r5, #0]
            igniteDrogue();
    1350:	4b41      	ldr	r3, [pc, #260]	; (1458 <flight+0x21c>)
    1352:	4798      	blx	r3
            logEvent('A');
    1354:	2041      	movs	r0, #65	; 0x41
    1356:	4b41      	ldr	r3, [pc, #260]	; (145c <flight+0x220>)
    1358:	4798      	blx	r3
    135a:	e028      	b.n	13ae <flight+0x172>


        break;
    case flightDrogue:

        if (writeLog) {
    135c:	4b33      	ldr	r3, [pc, #204]	; (142c <flight+0x1f0>)
    135e:	781b      	ldrb	r3, [r3, #0]
    1360:	2b00      	cmp	r3, #0
    1362:	d024      	beq.n	13ae <flight+0x172>
            logSensors( );
    1364:	4b3a      	ldr	r3, [pc, #232]	; (1450 <flight+0x214>)
    1366:	e011      	b.n	138c <flight+0x150>
//         }

        break;
    case flightMain:

        if (writeLog) {
    1368:	4b30      	ldr	r3, [pc, #192]	; (142c <flight+0x1f0>)
    136a:	781b      	ldrb	r3, [r3, #0]
    136c:	2b00      	cmp	r3, #0
    136e:	d001      	beq.n	1374 <flight+0x138>
            logSensors( );
    1370:	4b37      	ldr	r3, [pc, #220]	; (1450 <flight+0x214>)
    1372:	4798      	blx	r3
        }

        if (velocity < 5) {
    1374:	4930      	ldr	r1, [pc, #192]	; (1438 <flight+0x1fc>)
    1376:	2200      	movs	r2, #0
    1378:	6808      	ldr	r0, [r1, #0]
    137a:	6849      	ldr	r1, [r1, #4]
    137c:	4b38      	ldr	r3, [pc, #224]	; (1460 <flight+0x224>)
    137e:	4c35      	ldr	r4, [pc, #212]	; (1454 <flight+0x218>)
    1380:	47a0      	blx	r4
    1382:	2800      	cmp	r0, #0
    1384:	d013      	beq.n	13ae <flight+0x172>
            flightState = flightLanded;
    1386:	2308      	movs	r3, #8
    1388:	702b      	strb	r3, [r5, #0]
            finishFlight();
    138a:	4b36      	ldr	r3, [pc, #216]	; (1464 <flight+0x228>)
    138c:	4798      	blx	r3
    138e:	e00e      	b.n	13ae <flight+0x172>
        }

        break;
    case flightLanded:

        if (millis() - offsets.groundBeep > 2000) {
    1390:	4f17      	ldr	r7, [pc, #92]	; (13f0 <flight+0x1b4>)
    1392:	47b8      	blx	r7
    1394:	4c1e      	ldr	r4, [pc, #120]	; (1410 <flight+0x1d4>)
    1396:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1398:	1ac0      	subs	r0, r0, r3
    139a:	23fa      	movs	r3, #250	; 0xfa
    139c:	00db      	lsls	r3, r3, #3
    139e:	4298      	cmp	r0, r3
    13a0:	d905      	bls.n	13ae <flight+0x172>
            offsets.groundBeep = millis();
    13a2:	47b8      	blx	r7
    13a4:	62e0      	str	r0, [r4, #44]	; 0x2c
            beep(400);
    13a6:	20c8      	movs	r0, #200	; 0xc8
    13a8:	4b1a      	ldr	r3, [pc, #104]	; (1414 <flight+0x1d8>)
    13aa:	0040      	lsls	r0, r0, #1
    13ac:	4798      	blx	r3
        break;
    }



    if ((flightState > flightPad) & unplugged()) {
    13ae:	2302      	movs	r3, #2
    13b0:	782c      	ldrb	r4, [r5, #0]
    13b2:	42a3      	cmp	r3, r4
    13b4:	41a4      	sbcs	r4, r4
    13b6:	4264      	negs	r4, r4
    13b8:	47b0      	blx	r6
    13ba:	2c00      	cmp	r4, #0
    13bc:	d003      	beq.n	13c6 <flight+0x18a>
    13be:	2800      	cmp	r0, #0
    13c0:	d001      	beq.n	13c6 <flight+0x18a>
        finishFlight();
    13c2:	4b28      	ldr	r3, [pc, #160]	; (1464 <flight+0x228>)
    13c4:	4798      	blx	r3
    }

    if ((flightState <= flightPad) & unplugged()) {
    13c6:	2300      	movs	r3, #0
    13c8:	2102      	movs	r1, #2
    13ca:	782a      	ldrb	r2, [r5, #0]
    13cc:	4291      	cmp	r1, r2
    13ce:	415b      	adcs	r3, r3
    13d0:	b2dc      	uxtb	r4, r3
    13d2:	47b0      	blx	r6
    13d4:	2c00      	cmp	r4, #0
    13d6:	d003      	beq.n	13e0 <flight+0x1a4>
    13d8:	2800      	cmp	r0, #0
    13da:	d001      	beq.n	13e0 <flight+0x1a4>
        finishFromPad();
    13dc:	4b0e      	ldr	r3, [pc, #56]	; (1418 <flight+0x1dc>)
    13de:	4798      	blx	r3
    }

    13e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13e2:	46c0      	nop			; (mov r8, r8)
    13e4:	200001ac 	.word	0x200001ac
    13e8:	00000b59 	.word	0x00000b59
    13ec:	00001469 	.word	0x00001469
    13f0:	00001139 	.word	0x00001139
    13f4:	2000019c 	.word	0x2000019c
    13f8:	00002710 	.word	0x00002710
    13fc:	00002fe1 	.word	0x00002fe1
    1400:	00000e59 	.word	0x00000e59
    1404:	00002f05 	.word	0x00002f05
    1408:	00002aa1 	.word	0x00002aa1
    140c:	0000378d 	.word	0x0000378d
    1410:	20000150 	.word	0x20000150
    1414:	00000e1d 	.word	0x00000e1d
    1418:	00000c2d 	.word	0x00000c2d
    141c:	42001400 	.word	0x42001400
    1420:	00003529 	.word	0x00003529
    1424:	05fa0004 	.word	0x05fa0004
    1428:	e000ed00 	.word	0xe000ed00
    142c:	2000019a 	.word	0x2000019a
    1430:	00002d19 	.word	0x00002d19
    1434:	41004400 	.word	0x41004400
    1438:	20000308 	.word	0x20000308
    143c:	00004ba9 	.word	0x00004ba9
    1440:	402e0000 	.word	0x402e0000
    1444:	200002e8 	.word	0x200002e8
    1448:	00000b25 	.word	0x00000b25
    144c:	00002fb9 	.word	0x00002fb9
    1450:	00002b61 	.word	0x00002b61
    1454:	00004b81 	.word	0x00004b81
    1458:	00001751 	.word	0x00001751
    145c:	00002b05 	.word	0x00002b05
    1460:	40140000 	.word	0x40140000
    1464:	00000c01 	.word	0x00000c01

00001468 <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    1468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    146a:	4c2b      	ldr	r4, [pc, #172]	; (1518 <updateGround+0xb0>)
    146c:	4d2b      	ldr	r5, [pc, #172]	; (151c <updateGround+0xb4>)
    146e:	4a2c      	ldr	r2, [pc, #176]	; (1520 <updateGround+0xb8>)
    1470:	6920      	ldr	r0, [r4, #16]
    1472:	6961      	ldr	r1, [r4, #20]
    1474:	4b2b      	ldr	r3, [pc, #172]	; (1524 <updateGround+0xbc>)
    1476:	47a8      	blx	r5
    1478:	4b2b      	ldr	r3, [pc, #172]	; (1528 <updateGround+0xc0>)
    147a:	0006      	movs	r6, r0
    147c:	6a58      	ldr	r0, [r3, #36]	; 0x24
    147e:	4b2b      	ldr	r3, [pc, #172]	; (152c <updateGround+0xc4>)
    1480:	000f      	movs	r7, r1
    1482:	4798      	blx	r3
    1484:	4a26      	ldr	r2, [pc, #152]	; (1520 <updateGround+0xb8>)
    1486:	4b2a      	ldr	r3, [pc, #168]	; (1530 <updateGround+0xc8>)
    1488:	47a8      	blx	r5
    148a:	0002      	movs	r2, r0
    148c:	000b      	movs	r3, r1
    148e:	0030      	movs	r0, r6
    1490:	0039      	movs	r1, r7
    1492:	4e28      	ldr	r6, [pc, #160]	; (1534 <updateGround+0xcc>)
    1494:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1496:	4e28      	ldr	r6, [pc, #160]	; (1538 <updateGround+0xd0>)
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {


    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    1498:	6120      	str	r0, [r4, #16]
    149a:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    149c:	69e0      	ldr	r0, [r4, #28]
    149e:	47b0      	blx	r6
    14a0:	2200      	movs	r2, #0
    14a2:	4b26      	ldr	r3, [pc, #152]	; (153c <updateGround+0xd4>)
    14a4:	47a8      	blx	r5
    14a6:	9000      	str	r0, [sp, #0]
    14a8:	9101      	str	r1, [sp, #4]
    14aa:	4925      	ldr	r1, [pc, #148]	; (1540 <updateGround+0xd8>)
    14ac:	2200      	movs	r2, #0
    14ae:	6808      	ldr	r0, [r1, #0]
    14b0:	6849      	ldr	r1, [r1, #4]
    14b2:	4b22      	ldr	r3, [pc, #136]	; (153c <updateGround+0xd4>)
    14b4:	47a8      	blx	r5
    14b6:	4f1f      	ldr	r7, [pc, #124]	; (1534 <updateGround+0xcc>)
    14b8:	0002      	movs	r2, r0
    14ba:	000b      	movs	r3, r1
    14bc:	9800      	ldr	r0, [sp, #0]
    14be:	9901      	ldr	r1, [sp, #4]
    14c0:	47b8      	blx	r7
    14c2:	4f20      	ldr	r7, [pc, #128]	; (1544 <updateGround+0xdc>)
    14c4:	47b8      	blx	r7
    14c6:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    14c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    14ca:	47b0      	blx	r6
    14cc:	4a14      	ldr	r2, [pc, #80]	; (1520 <updateGround+0xb8>)
    14ce:	4b15      	ldr	r3, [pc, #84]	; (1524 <updateGround+0xbc>)
    14d0:	47a8      	blx	r5
    14d2:	4b15      	ldr	r3, [pc, #84]	; (1528 <updateGround+0xc0>)
    14d4:	9000      	str	r0, [sp, #0]
    14d6:	9101      	str	r1, [sp, #4]
    14d8:	6d58      	ldr	r0, [r3, #84]	; 0x54
    14da:	47b0      	blx	r6
    14dc:	4a10      	ldr	r2, [pc, #64]	; (1520 <updateGround+0xb8>)
    14de:	4b14      	ldr	r3, [pc, #80]	; (1530 <updateGround+0xc8>)
    14e0:	47a8      	blx	r5
    14e2:	4d14      	ldr	r5, [pc, #80]	; (1534 <updateGround+0xcc>)
    14e4:	000b      	movs	r3, r1
    14e6:	0002      	movs	r2, r0
    14e8:	9800      	ldr	r0, [sp, #0]
    14ea:	9901      	ldr	r1, [sp, #4]
    14ec:	47a8      	blx	r5
    14ee:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    14f0:	4d15      	ldr	r5, [pc, #84]	; (1548 <updateGround+0xe0>)
void updateGround(Altimeter *my_altimeter) {


    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    14f2:	6260      	str	r0, [r4, #36]	; 0x24

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    14f4:	47a8      	blx	r5
    14f6:	6823      	ldr	r3, [r4, #0]
    14f8:	1ac0      	subs	r0, r0, r3
    14fa:	23fa      	movs	r3, #250	; 0xfa
    14fc:	00db      	lsls	r3, r3, #3
    14fe:	4298      	cmp	r0, r3
    1500:	d909      	bls.n	1516 <updateGround+0xae>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    1502:	69e3      	ldr	r3, [r4, #28]
    1504:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    1506:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1508:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    150a:	6922      	ldr	r2, [r4, #16]
    150c:	6963      	ldr	r3, [r4, #20]
    150e:	60a2      	str	r2, [r4, #8]
    1510:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    1512:	47a8      	blx	r5
    1514:	6020      	str	r0, [r4, #0]
    }
}
    1516:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1518:	20000150 	.word	0x20000150
    151c:	00005f45 	.word	0x00005f45
    1520:	9999999a 	.word	0x9999999a
    1524:	3fe99999 	.word	0x3fe99999
    1528:	200005f0 	.word	0x200005f0
    152c:	00006c81 	.word	0x00006c81
    1530:	3fc99999 	.word	0x3fc99999
    1534:	000050a5 	.word	0x000050a5
    1538:	00006c11 	.word	0x00006c11
    153c:	3fe00000 	.word	0x3fe00000
    1540:	20000328 	.word	0x20000328
    1544:	00004c9d 	.word	0x00004c9d
    1548:	00001139 	.word	0x00001139

0000154c <isItPointingUp>:

void isItPointingUp() {
    154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    154e:	261e      	movs	r6, #30
    u8_t i;

    double pointingUpBuffer;

    pointingUpBuffer = 0;
    1550:	2400      	movs	r4, #0
    1552:	2500      	movs	r5, #0

    for ( i = 0; i < 30 ; ++i ) {
        delay_ms(10);
    1554:	200a      	movs	r0, #10
    1556:	4b21      	ldr	r3, [pc, #132]	; (15dc <isItPointingUp+0x90>)
    1558:	4798      	blx	r3
        sampleTick();
    155a:	4b21      	ldr	r3, [pc, #132]	; (15e0 <isItPointingUp+0x94>)
    155c:	4798      	blx	r3
        pointingUpBuffer = pointingUpBuffer * 0.8 + (-sample.accelX) * 0.2;
    155e:	4a21      	ldr	r2, [pc, #132]	; (15e4 <isItPointingUp+0x98>)
    1560:	4f21      	ldr	r7, [pc, #132]	; (15e8 <isItPointingUp+0x9c>)
    1562:	4b22      	ldr	r3, [pc, #136]	; (15ec <isItPointingUp+0xa0>)
    1564:	0020      	movs	r0, r4
    1566:	0029      	movs	r1, r5
    1568:	47b8      	blx	r7
    156a:	4b21      	ldr	r3, [pc, #132]	; (15f0 <isItPointingUp+0xa4>)
    156c:	0004      	movs	r4, r0
    156e:	6a58      	ldr	r0, [r3, #36]	; 0x24
    1570:	2380      	movs	r3, #128	; 0x80
    1572:	000d      	movs	r5, r1
    1574:	061b      	lsls	r3, r3, #24
    1576:	18c0      	adds	r0, r0, r3
    1578:	4b1e      	ldr	r3, [pc, #120]	; (15f4 <isItPointingUp+0xa8>)
    157a:	4798      	blx	r3
    157c:	4a19      	ldr	r2, [pc, #100]	; (15e4 <isItPointingUp+0x98>)
    157e:	4b1e      	ldr	r3, [pc, #120]	; (15f8 <isItPointingUp+0xac>)
    1580:	47b8      	blx	r7
    1582:	0022      	movs	r2, r4
    1584:	002b      	movs	r3, r5
    1586:	4c1d      	ldr	r4, [pc, #116]	; (15fc <isItPointingUp+0xb0>)
    1588:	47a0      	blx	r4
    158a:	3e01      	subs	r6, #1
    158c:	b2f6      	uxtb	r6, r6
    158e:	0004      	movs	r4, r0
    1590:	000d      	movs	r5, r1

    double pointingUpBuffer;

    pointingUpBuffer = 0;

    for ( i = 0; i < 30 ; ++i ) {
    1592:	2e00      	cmp	r6, #0
    1594:	d1de      	bne.n	1554 <isItPointingUp+0x8>
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + (-sample.accelX) * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    1596:	4e1a      	ldr	r6, [pc, #104]	; (1600 <isItPointingUp+0xb4>)
    1598:	4a1a      	ldr	r2, [pc, #104]	; (1604 <isItPointingUp+0xb8>)
    159a:	4b1b      	ldr	r3, [pc, #108]	; (1608 <isItPointingUp+0xbc>)
    159c:	47b0      	blx	r6
    159e:	0037      	movs	r7, r6
    15a0:	4e1a      	ldr	r6, [pc, #104]	; (160c <isItPointingUp+0xc0>)
    15a2:	2800      	cmp	r0, #0
    15a4:	d007      	beq.n	15b6 <isItPointingUp+0x6a>
    15a6:	4a0f      	ldr	r2, [pc, #60]	; (15e4 <isItPointingUp+0x98>)
    15a8:	4b19      	ldr	r3, [pc, #100]	; (1610 <isItPointingUp+0xc4>)
    15aa:	0020      	movs	r0, r4
    15ac:	0029      	movs	r1, r5
    15ae:	47b0      	blx	r6
        altimeter.pointingUp = true;
    15b0:	2201      	movs	r2, #1
    for ( i = 0; i < 30 ; ++i ) {
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + (-sample.accelX) * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    15b2:	2800      	cmp	r0, #0
    15b4:	d10e      	bne.n	15d4 <isItPointingUp+0x88>
        altimeter.pointingUp = true;
    } else if ((pointingUpBuffer < -0.9) & (pointingUpBuffer > -1.1)) {
    15b6:	4a13      	ldr	r2, [pc, #76]	; (1604 <isItPointingUp+0xb8>)
    15b8:	4b16      	ldr	r3, [pc, #88]	; (1614 <isItPointingUp+0xc8>)
    15ba:	0020      	movs	r0, r4
    15bc:	0029      	movs	r1, r5
    15be:	47b0      	blx	r6
    15c0:	2800      	cmp	r0, #0
    15c2:	d00a      	beq.n	15da <isItPointingUp+0x8e>
    15c4:	4a07      	ldr	r2, [pc, #28]	; (15e4 <isItPointingUp+0x98>)
    15c6:	4b14      	ldr	r3, [pc, #80]	; (1618 <isItPointingUp+0xcc>)
    15c8:	0020      	movs	r0, r4
    15ca:	0029      	movs	r1, r5
    15cc:	47b8      	blx	r7
    15ce:	2800      	cmp	r0, #0
    15d0:	d003      	beq.n	15da <isItPointingUp+0x8e>
        altimeter.pointingUp = false;
    15d2:	2200      	movs	r2, #0
    15d4:	4b11      	ldr	r3, [pc, #68]	; (161c <isItPointingUp+0xd0>)
    15d6:	715a      	strb	r2, [r3, #5]

        }

    }

    15d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15da:	e7fe      	b.n	15da <isItPointingUp+0x8e>
    15dc:	000010ed 	.word	0x000010ed
    15e0:	000030a5 	.word	0x000030a5
    15e4:	9999999a 	.word	0x9999999a
    15e8:	00005f45 	.word	0x00005f45
    15ec:	3fe99999 	.word	0x3fe99999
    15f0:	200005f0 	.word	0x200005f0
    15f4:	00006c81 	.word	0x00006c81
    15f8:	3fc99999 	.word	0x3fc99999
    15fc:	000050a5 	.word	0x000050a5
    1600:	00004ba9 	.word	0x00004ba9
    1604:	cccccccd 	.word	0xcccccccd
    1608:	3feccccc 	.word	0x3feccccc
    160c:	00004b81 	.word	0x00004b81
    1610:	3ff19999 	.word	0x3ff19999
    1614:	bfeccccc 	.word	0xbfeccccc
    1618:	bff19999 	.word	0xbff19999
    161c:	200001a0 	.word	0x200001a0

00001620 <igniterTick>:
#include <util.h>
#include <boardDefines.h>


void igniterTick() {
    1620:	b510      	push	{r4, lr}

    if (charges.igniterAHot) {
    1622:	4c23      	ldr	r4, [pc, #140]	; (16b0 <igniterTick+0x90>)
    1624:	7823      	ldrb	r3, [r4, #0]
    1626:	2b00      	cmp	r3, #0
    1628:	d00d      	beq.n	1646 <igniterTick+0x26>
        if ((millis() - charges.igniterATick) > 2000) {
    162a:	4b22      	ldr	r3, [pc, #136]	; (16b4 <igniterTick+0x94>)
    162c:	4798      	blx	r3
    162e:	6863      	ldr	r3, [r4, #4]
    1630:	1ac0      	subs	r0, r0, r3
    1632:	23fa      	movs	r3, #250	; 0xfa
    1634:	00db      	lsls	r3, r3, #3
    1636:	4298      	cmp	r0, r3
    1638:	d905      	bls.n	1646 <igniterTick+0x26>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    163a:	2280      	movs	r2, #128	; 0x80
    163c:	4b1e      	ldr	r3, [pc, #120]	; (16b8 <igniterTick+0x98>)
    163e:	0412      	lsls	r2, r2, #16
    1640:	601a      	str	r2, [r3, #0]
            pinLow(fireAPin);
            charges.igniterAHot = false;
    1642:	2300      	movs	r3, #0
    1644:	7023      	strb	r3, [r4, #0]
        }
    }

    if (charges.igniterBHot) {
    1646:	7a23      	ldrb	r3, [r4, #8]
    1648:	2b00      	cmp	r3, #0
    164a:	d00d      	beq.n	1668 <igniterTick+0x48>
        if ((millis() - charges.igniterBTick) > 2000) {
    164c:	4b19      	ldr	r3, [pc, #100]	; (16b4 <igniterTick+0x94>)
    164e:	4798      	blx	r3
    1650:	68e3      	ldr	r3, [r4, #12]
    1652:	1ac0      	subs	r0, r0, r3
    1654:	23fa      	movs	r3, #250	; 0xfa
    1656:	00db      	lsls	r3, r3, #3
    1658:	4298      	cmp	r0, r3
    165a:	d905      	bls.n	1668 <igniterTick+0x48>
    165c:	2280      	movs	r2, #128	; 0x80
    165e:	4b16      	ldr	r3, [pc, #88]	; (16b8 <igniterTick+0x98>)
    1660:	03d2      	lsls	r2, r2, #15
    1662:	601a      	str	r2, [r3, #0]
            pinLow(fireBPin);
            charges.igniterBHot = false;
    1664:	2300      	movs	r3, #0
    1666:	7223      	strb	r3, [r4, #8]
        }
    }

    if (charges.igniterCHot) {
    1668:	7c23      	ldrb	r3, [r4, #16]
    166a:	2b00      	cmp	r3, #0
    166c:	d00d      	beq.n	168a <igniterTick+0x6a>
        if ((millis() - charges.igniterCTick) > 2000) {
    166e:	4b11      	ldr	r3, [pc, #68]	; (16b4 <igniterTick+0x94>)
    1670:	4798      	blx	r3
    1672:	6963      	ldr	r3, [r4, #20]
    1674:	1ac0      	subs	r0, r0, r3
    1676:	23fa      	movs	r3, #250	; 0xfa
    1678:	00db      	lsls	r3, r3, #3
    167a:	4298      	cmp	r0, r3
    167c:	d905      	bls.n	168a <igniterTick+0x6a>
    167e:	2280      	movs	r2, #128	; 0x80
    1680:	4b0e      	ldr	r3, [pc, #56]	; (16bc <igniterTick+0x9c>)
    1682:	0492      	lsls	r2, r2, #18
    1684:	615a      	str	r2, [r3, #20]
            pinLow(fireCPin);
            charges.igniterCHot = false;
    1686:	2300      	movs	r3, #0
    1688:	7423      	strb	r3, [r4, #16]
        }
    }

    if (charges.igniterDHot) {
    168a:	7e23      	ldrb	r3, [r4, #24]
    168c:	2b00      	cmp	r3, #0
    168e:	d00d      	beq.n	16ac <igniterTick+0x8c>
        if ((millis() - charges.igniterDTick) > 2000) {
    1690:	4b08      	ldr	r3, [pc, #32]	; (16b4 <igniterTick+0x94>)
    1692:	4798      	blx	r3
    1694:	69e3      	ldr	r3, [r4, #28]
    1696:	1ac0      	subs	r0, r0, r3
    1698:	23fa      	movs	r3, #250	; 0xfa
    169a:	00db      	lsls	r3, r3, #3
    169c:	4298      	cmp	r0, r3
    169e:	d905      	bls.n	16ac <igniterTick+0x8c>
    16a0:	2280      	movs	r2, #128	; 0x80
    16a2:	4b06      	ldr	r3, [pc, #24]	; (16bc <igniterTick+0x9c>)
    16a4:	0452      	lsls	r2, r2, #17
    16a6:	615a      	str	r2, [r3, #20]
            pinLow(fireDPin);
            charges.igniterDHot = false;
    16a8:	2300      	movs	r3, #0
    16aa:	7623      	strb	r3, [r4, #24]
        }
    }
}
    16ac:	bd10      	pop	{r4, pc}
    16ae:	46c0      	nop			; (mov r8, r8)
    16b0:	200002c4 	.word	0x200002c4
    16b4:	00001139 	.word	0x00001139
    16b8:	41004494 	.word	0x41004494
    16bc:	41004400 	.word	0x41004400

000016c0 <lightIgniterA>:
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    16c0:	2280      	movs	r2, #128	; 0x80
    16c2:	4b05      	ldr	r3, [pc, #20]	; (16d8 <lightIgniterA+0x18>)
    16c4:	0412      	lsls	r2, r2, #16
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
        lightIgniterD();
    }
}

void lightIgniterA() {
    16c6:	b510      	push	{r4, lr}
    16c8:	601a      	str	r2, [r3, #0]
    pinHigh(fireAPin);
    charges.igniterAHot = true;
    16ca:	2301      	movs	r3, #1
    16cc:	4c03      	ldr	r4, [pc, #12]	; (16dc <lightIgniterA+0x1c>)
    16ce:	7023      	strb	r3, [r4, #0]
    charges.igniterATick = millis();
    16d0:	4b03      	ldr	r3, [pc, #12]	; (16e0 <lightIgniterA+0x20>)
    16d2:	4798      	blx	r3
    16d4:	6060      	str	r0, [r4, #4]
}
    16d6:	bd10      	pop	{r4, pc}
    16d8:	41004498 	.word	0x41004498
    16dc:	200002c4 	.word	0x200002c4
    16e0:	00001139 	.word	0x00001139

000016e4 <lightIgniterB>:
    16e4:	2280      	movs	r2, #128	; 0x80
    16e6:	4b05      	ldr	r3, [pc, #20]	; (16fc <lightIgniterB+0x18>)
    16e8:	03d2      	lsls	r2, r2, #15

void lightIgniterB() {
    16ea:	b510      	push	{r4, lr}
    16ec:	601a      	str	r2, [r3, #0]
    pinHigh(fireBPin);
    charges.igniterBHot = true;
    16ee:	2301      	movs	r3, #1
    16f0:	4c03      	ldr	r4, [pc, #12]	; (1700 <lightIgniterB+0x1c>)
    16f2:	7223      	strb	r3, [r4, #8]
    charges.igniterBTick = millis();
    16f4:	4b03      	ldr	r3, [pc, #12]	; (1704 <lightIgniterB+0x20>)
    16f6:	4798      	blx	r3
    16f8:	60e0      	str	r0, [r4, #12]
}
    16fa:	bd10      	pop	{r4, pc}
    16fc:	41004498 	.word	0x41004498
    1700:	200002c4 	.word	0x200002c4
    1704:	00001139 	.word	0x00001139

00001708 <lightIgniterC>:
    1708:	2280      	movs	r2, #128	; 0x80
    170a:	4b05      	ldr	r3, [pc, #20]	; (1720 <lightIgniterC+0x18>)
    170c:	0492      	lsls	r2, r2, #18

void lightIgniterC() {
    170e:	b510      	push	{r4, lr}
    1710:	619a      	str	r2, [r3, #24]
    pinHigh(fireCPin);
    charges.igniterCHot = true;
    1712:	2301      	movs	r3, #1
    1714:	4c03      	ldr	r4, [pc, #12]	; (1724 <lightIgniterC+0x1c>)
    1716:	7423      	strb	r3, [r4, #16]
    charges.igniterCTick = millis();
    1718:	4b03      	ldr	r3, [pc, #12]	; (1728 <lightIgniterC+0x20>)
    171a:	4798      	blx	r3
    171c:	6160      	str	r0, [r4, #20]
}
    171e:	bd10      	pop	{r4, pc}
    1720:	41004400 	.word	0x41004400
    1724:	200002c4 	.word	0x200002c4
    1728:	00001139 	.word	0x00001139

0000172c <lightIgniterD>:
    172c:	2280      	movs	r2, #128	; 0x80
    172e:	4b05      	ldr	r3, [pc, #20]	; (1744 <lightIgniterD+0x18>)
    1730:	0452      	lsls	r2, r2, #17

void lightIgniterD() {
    1732:	b510      	push	{r4, lr}
    1734:	619a      	str	r2, [r3, #24]
    pinHigh(fireDPin);
    charges.igniterDHot = true;
    1736:	2301      	movs	r3, #1
    1738:	4c03      	ldr	r4, [pc, #12]	; (1748 <lightIgniterD+0x1c>)
    173a:	7623      	strb	r3, [r4, #24]
    charges.igniterDTick = millis();
    173c:	4b03      	ldr	r3, [pc, #12]	; (174c <lightIgniterD+0x20>)
    173e:	4798      	blx	r3
    1740:	61e0      	str	r0, [r4, #28]
    1742:	bd10      	pop	{r4, pc}
    1744:	41004400 	.word	0x41004400
    1748:	200002c4 	.word	0x200002c4
    174c:	00001139 	.word	0x00001139

00001750 <igniteDrogue>:
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
        lightIgniterD();
    }
}

void igniteDrogue() {
    1750:	b510      	push	{r4, lr}

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == DROGUE_t)) {
    1752:	4c11      	ldr	r4, [pc, #68]	; (1798 <igniteDrogue+0x48>)
    1754:	7863      	ldrb	r3, [r4, #1]
    1756:	2b01      	cmp	r3, #1
    1758:	d104      	bne.n	1764 <igniteDrogue+0x14>
    175a:	7823      	ldrb	r3, [r4, #0]
    175c:	2b00      	cmp	r3, #0
    175e:	d001      	beq.n	1764 <igniteDrogue+0x14>
        lightIgniterA();
    1760:	4b0e      	ldr	r3, [pc, #56]	; (179c <igniteDrogue+0x4c>)
    1762:	4798      	blx	r3
    }
    if (deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == DROGUE_t)) {
    1764:	79e3      	ldrb	r3, [r4, #7]
    1766:	2b01      	cmp	r3, #1
    1768:	d104      	bne.n	1774 <igniteDrogue+0x24>
    176a:	79a3      	ldrb	r3, [r4, #6]
    176c:	2b00      	cmp	r3, #0
    176e:	d001      	beq.n	1774 <igniteDrogue+0x24>
        lightIgniterB();
    1770:	4b0b      	ldr	r3, [pc, #44]	; (17a0 <igniteDrogue+0x50>)
    1772:	4798      	blx	r3
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == DROGUE_t)) {
    1774:	7b63      	ldrb	r3, [r4, #13]
    1776:	2b01      	cmp	r3, #1
    1778:	d104      	bne.n	1784 <igniteDrogue+0x34>
    177a:	7b23      	ldrb	r3, [r4, #12]
    177c:	2b00      	cmp	r3, #0
    177e:	d001      	beq.n	1784 <igniteDrogue+0x34>
        lightIgniterC();
    1780:	4b08      	ldr	r3, [pc, #32]	; (17a4 <igniteDrogue+0x54>)
    1782:	4798      	blx	r3
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
    1784:	7ce3      	ldrb	r3, [r4, #19]
    1786:	2b01      	cmp	r3, #1
    1788:	d104      	bne.n	1794 <igniteDrogue+0x44>
    178a:	7ca3      	ldrb	r3, [r4, #18]
    178c:	2b00      	cmp	r3, #0
    178e:	d001      	beq.n	1794 <igniteDrogue+0x44>
        lightIgniterD();
    1790:	4b05      	ldr	r3, [pc, #20]	; (17a8 <igniteDrogue+0x58>)
    1792:	4798      	blx	r3
    }
}
    1794:	bd10      	pop	{r4, pc}
    1796:	46c0      	nop			; (mov r8, r8)
    1798:	20000180 	.word	0x20000180
    179c:	000016c1 	.word	0x000016c1
    17a0:	000016e5 	.word	0x000016e5
    17a4:	00001709 	.word	0x00001709
    17a8:	0000172d 	.word	0x0000172d

000017ac <computeKalmanGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    17ac:	4bdc      	ldr	r3, [pc, #880]	; (1b20 <computeKalmanGains+0x374>)
    17ae:	48dd      	ldr	r0, [pc, #884]	; (1b24 <computeKalmanGains+0x378>)
    17b0:	49dd      	ldr	r1, [pc, #884]	; (1b28 <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    17b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    17b4:	6098      	str	r0, [r3, #8]
    17b6:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    17b8:	6298      	str	r0, [r3, #40]	; 0x28
    17ba:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    17bc:	48db      	ldr	r0, [pc, #876]	; (1b2c <computeKalmanGains+0x380>)
    17be:	49dc      	ldr	r1, [pc, #880]	; (1b30 <computeKalmanGains+0x384>)
    17c0:	2200      	movs	r2, #0
    17c2:	6118      	str	r0, [r3, #16]
    17c4:	6159      	str	r1, [r3, #20]
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
            kgain[i][j] = 1.0;
    17c6:	2000      	movs	r0, #0
    17c8:	49da      	ldr	r1, [pc, #872]	; (1b34 <computeKalmanGains+0x388>)
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    17ca:	4cdb      	ldr	r4, [pc, #876]	; (1b38 <computeKalmanGains+0x38c>)
    17cc:	468c      	mov	ip, r1
    17ce:	4ddb      	ldr	r5, [pc, #876]	; (1b3c <computeKalmanGains+0x390>)
            kgain[i][j] = 1.0;
    17d0:	49db      	ldr	r1, [pc, #876]	; (1b40 <computeKalmanGains+0x394>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    17d2:	b0cd      	sub	sp, #308	; 0x134
    17d4:	ae40      	add	r6, sp, #256	; 0x100
    17d6:	1997      	adds	r7, r2, r6
    17d8:	4666      	mov	r6, ip
    17da:	1996      	adds	r6, r2, r6
    17dc:	3210      	adds	r2, #16
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    17de:	603c      	str	r4, [r7, #0]
    17e0:	607d      	str	r5, [r7, #4]
            kgain[i][j] = 1.0;
    17e2:	6030      	str	r0, [r6, #0]
    17e4:	6071      	str	r1, [r6, #4]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    17e6:	60bc      	str	r4, [r7, #8]
    17e8:	60fd      	str	r5, [r7, #12]
            kgain[i][j] = 1.0;
    17ea:	60b0      	str	r0, [r6, #8]
    17ec:	60f1      	str	r1, [r6, #12]
    phi[0][2]    = dt*dt/2.0;
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
    17ee:	2a30      	cmp	r2, #48	; 0x30
    17f0:	d1f0      	bne.n	17d4 <computeKalmanGains+0x28>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    17f2:	6819      	ldr	r1, [r3, #0]
    17f4:	685a      	ldr	r2, [r3, #4]
    17f6:	911a      	str	r1, [sp, #104]	; 0x68
    17f8:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    17fa:	6999      	ldr	r1, [r3, #24]
    17fc:	69da      	ldr	r2, [r3, #28]
    17fe:	911c      	str	r1, [sp, #112]	; 0x70
    1800:	921d      	str	r2, [sp, #116]	; 0x74
    1802:	6a19      	ldr	r1, [r3, #32]
    1804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1806:	911e      	str	r1, [sp, #120]	; 0x78
    1808:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    180a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    180c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    180e:	9120      	str	r1, [sp, #128]	; 0x80
    1810:	9221      	str	r2, [sp, #132]	; 0x84
    1812:	6b99      	ldr	r1, [r3, #56]	; 0x38
    1814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1816:	9122      	str	r1, [sp, #136]	; 0x88
    1818:	9223      	str	r2, [sp, #140]	; 0x8c
    181a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    181c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    181e:	9124      	str	r1, [sp, #144]	; 0x90
    1820:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1822:	6c99      	ldr	r1, [r3, #72]	; 0x48
    1824:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    1826:	913a      	str	r1, [sp, #232]	; 0xe8
    1828:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    182a:	6d19      	ldr	r1, [r3, #80]	; 0x50
    182c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    182e:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    1830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1832:	933e      	str	r3, [sp, #248]	; 0xf8
    1834:	943f      	str	r4, [sp, #252]	; 0xfc
    1836:	2300      	movs	r3, #0
    1838:	4cc2      	ldr	r4, [pc, #776]	; (1b44 <computeKalmanGains+0x398>)
    183a:	913c      	str	r1, [sp, #240]	; 0xf0
    183c:	923d      	str	r2, [sp, #244]	; 0xf4
    183e:	9302      	str	r3, [sp, #8]
    1840:	9403      	str	r4, [sp, #12]
    1842:	2300      	movs	r3, #0
    1844:	2400      	movs	r4, #0
    1846:	9310      	str	r3, [sp, #64]	; 0x40
    1848:	9411      	str	r4, [sp, #68]	; 0x44
    184a:	9300      	str	r3, [sp, #0]
    184c:	9401      	str	r4, [sp, #4]
    184e:	9304      	str	r3, [sp, #16]
    1850:	9405      	str	r4, [sp, #20]
    1852:	2300      	movs	r3, #0
    1854:	4cbb      	ldr	r4, [pc, #748]	; (1b44 <computeKalmanGains+0x398>)
    1856:	930e      	str	r3, [sp, #56]	; 0x38
    1858:	940f      	str	r4, [sp, #60]	; 0x3c
    185a:	2300      	movs	r3, #0
    185c:	2400      	movs	r4, #0
    185e:	9308      	str	r3, [sp, #32]
    1860:	9409      	str	r4, [sp, #36]	; 0x24
    1862:	930c      	str	r3, [sp, #48]	; 0x30
    1864:	940d      	str	r4, [sp, #52]	; 0x34
    1866:	930a      	str	r3, [sp, #40]	; 0x28
    1868:	940b      	str	r4, [sp, #44]	; 0x2c
    186a:	2480      	movs	r4, #128	; 0x80
    186c:	2300      	movs	r3, #0
    186e:	05e4      	lsls	r4, r4, #23
    1870:	9306      	str	r3, [sp, #24]
    1872:	9407      	str	r4, [sp, #28]
    1874:	2300      	movs	r3, #0
    1876:	9338      	str	r3, [sp, #224]	; 0xe0

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1878:	4db3      	ldr	r5, [pc, #716]	; (1b48 <computeKalmanGains+0x39c>)
    187a:	9a06      	ldr	r2, [sp, #24]
    187c:	9b07      	ldr	r3, [sp, #28]
    187e:	981a      	ldr	r0, [sp, #104]	; 0x68
    1880:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1882:	47a8      	blx	r5
    1884:	4aa7      	ldr	r2, [pc, #668]	; (1b24 <computeKalmanGains+0x378>)
    1886:	0006      	movs	r6, r0
    1888:	000f      	movs	r7, r1
    188a:	9808      	ldr	r0, [sp, #32]
    188c:	9909      	ldr	r1, [sp, #36]	; 0x24
    188e:	4ba6      	ldr	r3, [pc, #664]	; (1b28 <computeKalmanGains+0x37c>)
    1890:	47a8      	blx	r5
    1892:	4cae      	ldr	r4, [pc, #696]	; (1b4c <computeKalmanGains+0x3a0>)
    1894:	0002      	movs	r2, r0
    1896:	000b      	movs	r3, r1
    1898:	0030      	movs	r0, r6
    189a:	0039      	movs	r1, r7
    189c:	47a0      	blx	r4
    189e:	4aa3      	ldr	r2, [pc, #652]	; (1b2c <computeKalmanGains+0x380>)
    18a0:	0006      	movs	r6, r0
    18a2:	000f      	movs	r7, r1
    18a4:	9800      	ldr	r0, [sp, #0]
    18a6:	9901      	ldr	r1, [sp, #4]
    18a8:	4ba1      	ldr	r3, [pc, #644]	; (1b30 <computeKalmanGains+0x384>)
    18aa:	47a8      	blx	r5
    18ac:	0002      	movs	r2, r0
    18ae:	000b      	movs	r3, r1
    18b0:	0030      	movs	r0, r6
    18b2:	0039      	movs	r1, r7
    18b4:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    18b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    18b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    18ba:	9016      	str	r0, [sp, #88]	; 0x58
    18bc:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    18be:	981a      	ldr	r0, [sp, #104]	; 0x68
    18c0:	991b      	ldr	r1, [sp, #108]	; 0x6c
    18c2:	47a8      	blx	r5
    18c4:	4a97      	ldr	r2, [pc, #604]	; (1b24 <computeKalmanGains+0x378>)
    18c6:	0006      	movs	r6, r0
    18c8:	000f      	movs	r7, r1
    18ca:	980e      	ldr	r0, [sp, #56]	; 0x38
    18cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    18ce:	4b96      	ldr	r3, [pc, #600]	; (1b28 <computeKalmanGains+0x37c>)
    18d0:	47a8      	blx	r5
    18d2:	0002      	movs	r2, r0
    18d4:	000b      	movs	r3, r1
    18d6:	0030      	movs	r0, r6
    18d8:	0039      	movs	r1, r7
    18da:	47a0      	blx	r4
    18dc:	4a93      	ldr	r2, [pc, #588]	; (1b2c <computeKalmanGains+0x380>)
    18de:	0006      	movs	r6, r0
    18e0:	000f      	movs	r7, r1
    18e2:	9810      	ldr	r0, [sp, #64]	; 0x40
    18e4:	9911      	ldr	r1, [sp, #68]	; 0x44
    18e6:	4b92      	ldr	r3, [pc, #584]	; (1b30 <computeKalmanGains+0x384>)
    18e8:	47a8      	blx	r5
    18ea:	0002      	movs	r2, r0
    18ec:	000b      	movs	r3, r1
    18ee:	0030      	movs	r0, r6
    18f0:	0039      	movs	r1, r7
    18f2:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    18f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    18f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    18f8:	9012      	str	r0, [sp, #72]	; 0x48
    18fa:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    18fc:	981a      	ldr	r0, [sp, #104]	; 0x68
    18fe:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1900:	47a8      	blx	r5
    1902:	4a88      	ldr	r2, [pc, #544]	; (1b24 <computeKalmanGains+0x378>)
    1904:	0006      	movs	r6, r0
    1906:	000f      	movs	r7, r1
    1908:	9804      	ldr	r0, [sp, #16]
    190a:	9905      	ldr	r1, [sp, #20]
    190c:	4b86      	ldr	r3, [pc, #536]	; (1b28 <computeKalmanGains+0x37c>)
    190e:	47a8      	blx	r5
    1910:	0002      	movs	r2, r0
    1912:	000b      	movs	r3, r1
    1914:	0030      	movs	r0, r6
    1916:	0039      	movs	r1, r7
    1918:	47a0      	blx	r4
    191a:	4a84      	ldr	r2, [pc, #528]	; (1b2c <computeKalmanGains+0x380>)
    191c:	0006      	movs	r6, r0
    191e:	000f      	movs	r7, r1
    1920:	9802      	ldr	r0, [sp, #8]
    1922:	9903      	ldr	r1, [sp, #12]
    1924:	4b82      	ldr	r3, [pc, #520]	; (1b30 <computeKalmanGains+0x384>)
    1926:	47a8      	blx	r5
    1928:	0002      	movs	r2, r0
    192a:	000b      	movs	r3, r1
    192c:	0030      	movs	r0, r6
    192e:	0039      	movs	r1, r7
    1930:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1932:	9a06      	ldr	r2, [sp, #24]
    1934:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1936:	9014      	str	r0, [sp, #80]	; 0x50
    1938:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    193a:	981c      	ldr	r0, [sp, #112]	; 0x70
    193c:	991d      	ldr	r1, [sp, #116]	; 0x74
    193e:	47a8      	blx	r5
    1940:	9a08      	ldr	r2, [sp, #32]
    1942:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1944:	0006      	movs	r6, r0
    1946:	000f      	movs	r7, r1
    1948:	981e      	ldr	r0, [sp, #120]	; 0x78
    194a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    194c:	47a8      	blx	r5
    194e:	0002      	movs	r2, r0
    1950:	000b      	movs	r3, r1
    1952:	0030      	movs	r0, r6
    1954:	0039      	movs	r1, r7
    1956:	47a0      	blx	r4
    1958:	4a72      	ldr	r2, [pc, #456]	; (1b24 <computeKalmanGains+0x378>)
    195a:	0006      	movs	r6, r0
    195c:	000f      	movs	r7, r1
    195e:	9800      	ldr	r0, [sp, #0]
    1960:	9901      	ldr	r1, [sp, #4]
    1962:	4b71      	ldr	r3, [pc, #452]	; (1b28 <computeKalmanGains+0x37c>)
    1964:	47a8      	blx	r5
    1966:	0002      	movs	r2, r0
    1968:	000b      	movs	r3, r1
    196a:	0030      	movs	r0, r6
    196c:	0039      	movs	r1, r7
    196e:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1974:	9018      	str	r0, [sp, #96]	; 0x60
    1976:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1978:	981c      	ldr	r0, [sp, #112]	; 0x70
    197a:	991d      	ldr	r1, [sp, #116]	; 0x74
    197c:	47a8      	blx	r5
    197e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1980:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1982:	0006      	movs	r6, r0
    1984:	000f      	movs	r7, r1
    1986:	981e      	ldr	r0, [sp, #120]	; 0x78
    1988:	991f      	ldr	r1, [sp, #124]	; 0x7c
    198a:	47a8      	blx	r5
    198c:	0002      	movs	r2, r0
    198e:	000b      	movs	r3, r1
    1990:	0030      	movs	r0, r6
    1992:	0039      	movs	r1, r7
    1994:	47a0      	blx	r4
    1996:	4a63      	ldr	r2, [pc, #396]	; (1b24 <computeKalmanGains+0x378>)
    1998:	0006      	movs	r6, r0
    199a:	000f      	movs	r7, r1
    199c:	9810      	ldr	r0, [sp, #64]	; 0x40
    199e:	9911      	ldr	r1, [sp, #68]	; 0x44
    19a0:	4b61      	ldr	r3, [pc, #388]	; (1b28 <computeKalmanGains+0x37c>)
    19a2:	47a8      	blx	r5
    19a4:	0002      	movs	r2, r0
    19a6:	000b      	movs	r3, r1
    19a8:	0030      	movs	r0, r6
    19aa:	0039      	movs	r1, r7
    19ac:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    19ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    19b2:	9026      	str	r0, [sp, #152]	; 0x98
    19b4:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    19b6:	981c      	ldr	r0, [sp, #112]	; 0x70
    19b8:	991d      	ldr	r1, [sp, #116]	; 0x74
    19ba:	47a8      	blx	r5
    19bc:	9a04      	ldr	r2, [sp, #16]
    19be:	9b05      	ldr	r3, [sp, #20]
    19c0:	0006      	movs	r6, r0
    19c2:	000f      	movs	r7, r1
    19c4:	981e      	ldr	r0, [sp, #120]	; 0x78
    19c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    19c8:	47a8      	blx	r5
    19ca:	0002      	movs	r2, r0
    19cc:	000b      	movs	r3, r1
    19ce:	0030      	movs	r0, r6
    19d0:	0039      	movs	r1, r7
    19d2:	47a0      	blx	r4
    19d4:	4a53      	ldr	r2, [pc, #332]	; (1b24 <computeKalmanGains+0x378>)
    19d6:	0006      	movs	r6, r0
    19d8:	000f      	movs	r7, r1
    19da:	9802      	ldr	r0, [sp, #8]
    19dc:	9903      	ldr	r1, [sp, #12]
    19de:	4b52      	ldr	r3, [pc, #328]	; (1b28 <computeKalmanGains+0x37c>)
    19e0:	47a8      	blx	r5
    19e2:	0002      	movs	r2, r0
    19e4:	000b      	movs	r3, r1
    19e6:	0030      	movs	r0, r6
    19e8:	0039      	movs	r1, r7
    19ea:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    19ec:	9a06      	ldr	r2, [sp, #24]
    19ee:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    19f0:	9028      	str	r0, [sp, #160]	; 0xa0
    19f2:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    19f4:	9820      	ldr	r0, [sp, #128]	; 0x80
    19f6:	9921      	ldr	r1, [sp, #132]	; 0x84
    19f8:	47a8      	blx	r5
    19fa:	9a08      	ldr	r2, [sp, #32]
    19fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19fe:	0006      	movs	r6, r0
    1a00:	000f      	movs	r7, r1
    1a02:	9822      	ldr	r0, [sp, #136]	; 0x88
    1a04:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1a06:	47a8      	blx	r5
    1a08:	0002      	movs	r2, r0
    1a0a:	000b      	movs	r3, r1
    1a0c:	0030      	movs	r0, r6
    1a0e:	0039      	movs	r1, r7
    1a10:	47a0      	blx	r4
    1a12:	9a00      	ldr	r2, [sp, #0]
    1a14:	9b01      	ldr	r3, [sp, #4]
    1a16:	0006      	movs	r6, r0
    1a18:	000f      	movs	r7, r1
    1a1a:	9824      	ldr	r0, [sp, #144]	; 0x90
    1a1c:	9925      	ldr	r1, [sp, #148]	; 0x94
    1a1e:	47a8      	blx	r5
    1a20:	0002      	movs	r2, r0
    1a22:	000b      	movs	r3, r1
    1a24:	0030      	movs	r0, r6
    1a26:	0039      	movs	r1, r7
    1a28:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1a2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1a2e:	902e      	str	r0, [sp, #184]	; 0xb8
    1a30:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1a32:	9820      	ldr	r0, [sp, #128]	; 0x80
    1a34:	9921      	ldr	r1, [sp, #132]	; 0x84
    1a36:	47a8      	blx	r5
    1a38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a3c:	0006      	movs	r6, r0
    1a3e:	000f      	movs	r7, r1
    1a40:	9822      	ldr	r0, [sp, #136]	; 0x88
    1a42:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1a44:	47a8      	blx	r5
    1a46:	0002      	movs	r2, r0
    1a48:	000b      	movs	r3, r1
    1a4a:	0030      	movs	r0, r6
    1a4c:	0039      	movs	r1, r7
    1a4e:	47a0      	blx	r4
    1a50:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1a52:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1a54:	0006      	movs	r6, r0
    1a56:	000f      	movs	r7, r1
    1a58:	9824      	ldr	r0, [sp, #144]	; 0x90
    1a5a:	9925      	ldr	r1, [sp, #148]	; 0x94
    1a5c:	47a8      	blx	r5
    1a5e:	0002      	movs	r2, r0
    1a60:	000b      	movs	r3, r1
    1a62:	0030      	movs	r0, r6
    1a64:	0039      	movs	r1, r7
    1a66:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1a68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1a6c:	9006      	str	r0, [sp, #24]
    1a6e:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1a70:	9820      	ldr	r0, [sp, #128]	; 0x80
    1a72:	9921      	ldr	r1, [sp, #132]	; 0x84
    1a74:	47a8      	blx	r5
    1a76:	9a04      	ldr	r2, [sp, #16]
    1a78:	9b05      	ldr	r3, [sp, #20]
    1a7a:	0006      	movs	r6, r0
    1a7c:	000f      	movs	r7, r1
    1a7e:	9822      	ldr	r0, [sp, #136]	; 0x88
    1a80:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1a82:	47a8      	blx	r5
    1a84:	0002      	movs	r2, r0
    1a86:	000b      	movs	r3, r1
    1a88:	0030      	movs	r0, r6
    1a8a:	0039      	movs	r1, r7
    1a8c:	47a0      	blx	r4
    1a8e:	9a02      	ldr	r2, [sp, #8]
    1a90:	9b03      	ldr	r3, [sp, #12]
    1a92:	0006      	movs	r6, r0
    1a94:	000f      	movs	r7, r1
    1a96:	9824      	ldr	r0, [sp, #144]	; 0x90
    1a98:	9925      	ldr	r1, [sp, #148]	; 0x94
    1a9a:	47a8      	blx	r5
    1a9c:	0002      	movs	r2, r0
    1a9e:	000b      	movs	r3, r1
    1aa0:	0030      	movs	r0, r6
    1aa2:	0039      	movs	r1, r7
    1aa4:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1aa6:	4a1f      	ldr	r2, [pc, #124]	; (1b24 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1aa8:	9002      	str	r0, [sp, #8]
    1aaa:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1aac:	9812      	ldr	r0, [sp, #72]	; 0x48
    1aae:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1ab0:	4b1d      	ldr	r3, [pc, #116]	; (1b28 <computeKalmanGains+0x37c>)
    1ab2:	47a8      	blx	r5
    1ab4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1ab6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1ab8:	47a0      	blx	r4
    1aba:	4a1c      	ldr	r2, [pc, #112]	; (1b2c <computeKalmanGains+0x380>)
    1abc:	0006      	movs	r6, r0
    1abe:	000f      	movs	r7, r1
    1ac0:	9814      	ldr	r0, [sp, #80]	; 0x50
    1ac2:	9915      	ldr	r1, [sp, #84]	; 0x54
    1ac4:	4b1a      	ldr	r3, [pc, #104]	; (1b30 <computeKalmanGains+0x384>)
    1ac6:	47a8      	blx	r5
    1ac8:	0002      	movs	r2, r0
    1aca:	000b      	movs	r3, r1
    1acc:	0030      	movs	r0, r6
    1ace:	0039      	movs	r1, r7
    1ad0:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1ad2:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1ad4:	9008      	str	r0, [sp, #32]
    1ad6:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1ad8:	9816      	ldr	r0, [sp, #88]	; 0x58
    1ada:	9917      	ldr	r1, [sp, #92]	; 0x5c
    1adc:	2300      	movs	r3, #0
    1ade:	47a8      	blx	r5
    1ae0:	0006      	movs	r6, r0
    1ae2:	000f      	movs	r7, r1
    1ae4:	0002      	movs	r2, r0
    1ae6:	000b      	movs	r3, r1
    1ae8:	9812      	ldr	r0, [sp, #72]	; 0x48
    1aea:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1aec:	47a0      	blx	r4
    1aee:	4a0d      	ldr	r2, [pc, #52]	; (1b24 <computeKalmanGains+0x378>)
    1af0:	9000      	str	r0, [sp, #0]
    1af2:	9101      	str	r1, [sp, #4]
    1af4:	9814      	ldr	r0, [sp, #80]	; 0x50
    1af6:	9915      	ldr	r1, [sp, #84]	; 0x54
    1af8:	4b0b      	ldr	r3, [pc, #44]	; (1b28 <computeKalmanGains+0x37c>)
    1afa:	47a8      	blx	r5
    1afc:	0002      	movs	r2, r0
    1afe:	000b      	movs	r3, r1
    1b00:	9800      	ldr	r0, [sp, #0]
    1b02:	9901      	ldr	r1, [sp, #4]
    1b04:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1b06:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1b08:	9030      	str	r0, [sp, #192]	; 0xc0
    1b0a:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1b0c:	9812      	ldr	r0, [sp, #72]	; 0x48
    1b0e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1b10:	2300      	movs	r3, #0
    1b12:	47a8      	blx	r5
    1b14:	0032      	movs	r2, r6
    1b16:	003b      	movs	r3, r7
    1b18:	47a0      	blx	r4
    1b1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1b1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b1e:	e017      	b.n	1b50 <computeKalmanGains+0x3a4>
    1b20:	20000010 	.word	0x20000010
    1b24:	47ae147b 	.word	0x47ae147b
    1b28:	3f747ae1 	.word	0x3f747ae1
    1b2c:	eb1c432d 	.word	0xeb1c432d
    1b30:	3eea36e2 	.word	0x3eea36e2
    1b34:	20000348 	.word	0x20000348
    1b38:	d2f1a9fc 	.word	0xd2f1a9fc
    1b3c:	3f50624d 	.word	0x3f50624d
    1b40:	3ff00000 	.word	0x3ff00000
    1b44:	40220000 	.word	0x40220000
    1b48:	00005f45 	.word	0x00005f45
    1b4c:	000050a5 	.word	0x000050a5
    1b50:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1b52:	4ad9      	ldr	r2, [pc, #868]	; (1eb8 <computeKalmanGains+0x70c>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1b54:	9112      	str	r1, [sp, #72]	; 0x48
    1b56:	9004      	str	r0, [sp, #16]
    1b58:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1b5a:	4bd8      	ldr	r3, [pc, #864]	; (1ebc <computeKalmanGains+0x710>)
    1b5c:	9826      	ldr	r0, [sp, #152]	; 0x98
    1b5e:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1b60:	47a8      	blx	r5
    1b62:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1b64:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1b66:	47a0      	blx	r4
    1b68:	4ad5      	ldr	r2, [pc, #852]	; (1ec0 <computeKalmanGains+0x714>)
    1b6a:	0006      	movs	r6, r0
    1b6c:	000f      	movs	r7, r1
    1b6e:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1b70:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1b72:	4bd4      	ldr	r3, [pc, #848]	; (1ec4 <computeKalmanGains+0x718>)
    1b74:	47a8      	blx	r5
    1b76:	0002      	movs	r2, r0
    1b78:	000b      	movs	r3, r1
    1b7a:	0030      	movs	r0, r6
    1b7c:	0039      	movs	r1, r7
    1b7e:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1b80:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1b82:	902a      	str	r0, [sp, #168]	; 0xa8
    1b84:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1b86:	9818      	ldr	r0, [sp, #96]	; 0x60
    1b88:	9919      	ldr	r1, [sp, #100]	; 0x64
    1b8a:	2300      	movs	r3, #0
    1b8c:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1b8e:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1b90:	9032      	str	r0, [sp, #200]	; 0xc8
    1b92:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1b94:	9826      	ldr	r0, [sp, #152]	; 0x98
    1b96:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1b98:	2300      	movs	r3, #0
    1b9a:	47a8      	blx	r5
    1b9c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1b9e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1ba0:	47a0      	blx	r4
    1ba2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1ba4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1ba6:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1ba8:	4ac3      	ldr	r2, [pc, #780]	; (1eb8 <computeKalmanGains+0x70c>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1baa:	902c      	str	r0, [sp, #176]	; 0xb0
    1bac:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1bae:	9806      	ldr	r0, [sp, #24]
    1bb0:	9907      	ldr	r1, [sp, #28]
    1bb2:	4bc2      	ldr	r3, [pc, #776]	; (1ebc <computeKalmanGains+0x710>)
    1bb4:	47a8      	blx	r5
    1bb6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    1bb8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1bba:	47a0      	blx	r4
    1bbc:	4ac0      	ldr	r2, [pc, #768]	; (1ec0 <computeKalmanGains+0x714>)
    1bbe:	0006      	movs	r6, r0
    1bc0:	000f      	movs	r7, r1
    1bc2:	9802      	ldr	r0, [sp, #8]
    1bc4:	9903      	ldr	r1, [sp, #12]
    1bc6:	4bbf      	ldr	r3, [pc, #764]	; (1ec4 <computeKalmanGains+0x718>)
    1bc8:	47a8      	blx	r5
    1bca:	0002      	movs	r2, r0
    1bcc:	000b      	movs	r3, r1
    1bce:	0030      	movs	r0, r6
    1bd0:	0039      	movs	r1, r7
    1bd2:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1bd4:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1bd6:	9000      	str	r0, [sp, #0]
    1bd8:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1bda:	982e      	ldr	r0, [sp, #184]	; 0xb8
    1bdc:	992f      	ldr	r1, [sp, #188]	; 0xbc
    1bde:	2300      	movs	r3, #0
    1be0:	47a8      	blx	r5
    1be2:	0006      	movs	r6, r0
    1be4:	000f      	movs	r7, r1
    1be6:	0002      	movs	r2, r0
    1be8:	000b      	movs	r3, r1
    1bea:	9806      	ldr	r0, [sp, #24]
    1bec:	9907      	ldr	r1, [sp, #28]
    1bee:	47a0      	blx	r4
    1bf0:	4ab1      	ldr	r2, [pc, #708]	; (1eb8 <computeKalmanGains+0x70c>)
    1bf2:	900a      	str	r0, [sp, #40]	; 0x28
    1bf4:	910b      	str	r1, [sp, #44]	; 0x2c
    1bf6:	9802      	ldr	r0, [sp, #8]
    1bf8:	9903      	ldr	r1, [sp, #12]
    1bfa:	4bb0      	ldr	r3, [pc, #704]	; (1ebc <computeKalmanGains+0x710>)
    1bfc:	47a8      	blx	r5
    1bfe:	0002      	movs	r2, r0
    1c00:	000b      	movs	r3, r1
    1c02:	980a      	ldr	r0, [sp, #40]	; 0x28
    1c04:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1c06:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1c08:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1c0a:	9010      	str	r0, [sp, #64]	; 0x40
    1c0c:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1c0e:	9806      	ldr	r0, [sp, #24]
    1c10:	9907      	ldr	r1, [sp, #28]
    1c12:	2300      	movs	r3, #0
    1c14:	47a8      	blx	r5
    1c16:	0032      	movs	r2, r6
    1c18:	003b      	movs	r3, r7
    1c1a:	47a0      	blx	r4
    1c1c:	9a02      	ldr	r2, [sp, #8]
    1c1e:	9b03      	ldr	r3, [sp, #12]
    1c20:	47a0      	blx	r4
    1c22:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    1c24:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    1c26:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1c28:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    1c2a:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1c2c:	9002      	str	r0, [sp, #8]
    1c2e:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1c30:	9808      	ldr	r0, [sp, #32]
    1c32:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c34:	47a0      	blx	r4
    1c36:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    1c38:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1c3a:	900a      	str	r0, [sp, #40]	; 0x28
    1c3c:	910b      	str	r1, [sp, #44]	; 0x2c
    1c3e:	9802      	ldr	r0, [sp, #8]
    1c40:	9903      	ldr	r1, [sp, #12]
    1c42:	47a0      	blx	r4
    1c44:	9a00      	ldr	r2, [sp, #0]
    1c46:	9b01      	ldr	r3, [sp, #4]
    1c48:	900c      	str	r0, [sp, #48]	; 0x30
    1c4a:	910d      	str	r1, [sp, #52]	; 0x34
    1c4c:	9804      	ldr	r0, [sp, #16]
    1c4e:	9916      	ldr	r1, [sp, #88]	; 0x58
    1c50:	47a8      	blx	r5
    1c52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1c54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c56:	900e      	str	r0, [sp, #56]	; 0x38
    1c58:	910f      	str	r1, [sp, #60]	; 0x3c
    1c5a:	980a      	ldr	r0, [sp, #40]	; 0x28
    1c5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1c5e:	47a8      	blx	r5
    1c60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1c62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1c64:	4e98      	ldr	r6, [pc, #608]	; (1ec8 <computeKalmanGains+0x71c>)
    1c66:	47b0      	blx	r6

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1c68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1c6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1c6c:	9006      	str	r0, [sp, #24]
    1c6e:	9107      	str	r1, [sp, #28]

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1c70:	9808      	ldr	r0, [sp, #32]
    1c72:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c74:	47a8      	blx	r5
    1c76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1c78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1c7a:	47b0      	blx	r6
    1c7c:	9a06      	ldr	r2, [sp, #24]
    1c7e:	9b07      	ldr	r3, [sp, #28]
    1c80:	4e92      	ldr	r6, [pc, #584]	; (1ecc <computeKalmanGains+0x720>)
    1c82:	47b0      	blx	r6
    1c84:	9034      	str	r0, [sp, #208]	; 0xd0
    1c86:	9135      	str	r1, [sp, #212]	; 0xd4
    1c88:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1c8a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1c8c:	4990      	ldr	r1, [pc, #576]	; (1ed0 <computeKalmanGains+0x724>)
    1c8e:	600a      	str	r2, [r1, #0]
    1c90:	604b      	str	r3, [r1, #4]
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1c92:	9808      	ldr	r0, [sp, #32]
    1c94:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c96:	2280      	movs	r2, #128	; 0x80
    1c98:	0612      	lsls	r2, r2, #24
    1c9a:	4694      	mov	ip, r2
    1c9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1c9e:	9a04      	ldr	r2, [sp, #16]
    1ca0:	4463      	add	r3, ip
    1ca2:	932e      	str	r3, [sp, #184]	; 0xb8
    1ca4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1ca6:	47a8      	blx	r5
    1ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1cac:	0006      	movs	r6, r0
    1cae:	000f      	movs	r7, r1
    1cb0:	9804      	ldr	r0, [sp, #16]
    1cb2:	9916      	ldr	r1, [sp, #88]	; 0x58
    1cb4:	47a8      	blx	r5
    1cb6:	0002      	movs	r2, r0
    1cb8:	000b      	movs	r3, r1
    1cba:	0030      	movs	r0, r6
    1cbc:	0039      	movs	r1, r7
    1cbe:	47a0      	blx	r4
    1cc0:	9a06      	ldr	r2, [sp, #24]
    1cc2:	9b07      	ldr	r3, [sp, #28]
    1cc4:	4e81      	ldr	r6, [pc, #516]	; (1ecc <computeKalmanGains+0x720>)
    1cc6:	47b0      	blx	r6
    1cc8:	900e      	str	r0, [sp, #56]	; 0x38
    1cca:	910f      	str	r1, [sp, #60]	; 0x3c
    1ccc:	4980      	ldr	r1, [pc, #512]	; (1ed0 <computeKalmanGains+0x724>)
    1cce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1cd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1cd2:	608a      	str	r2, [r1, #8]
    1cd4:	60cb      	str	r3, [r1, #12]
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1cd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1cd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1cda:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1cdc:	992b      	ldr	r1, [sp, #172]	; 0xac
    1cde:	47a8      	blx	r5
    1ce0:	9a00      	ldr	r2, [sp, #0]
    1ce2:	9b01      	ldr	r3, [sp, #4]
    1ce4:	0006      	movs	r6, r0
    1ce6:	000f      	movs	r7, r1
    1ce8:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1cea:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1cec:	47a8      	blx	r5
    1cee:	0002      	movs	r2, r0
    1cf0:	000b      	movs	r3, r1
    1cf2:	0030      	movs	r0, r6
    1cf4:	0039      	movs	r1, r7
    1cf6:	4e74      	ldr	r6, [pc, #464]	; (1ec8 <computeKalmanGains+0x71c>)
    1cf8:	47b0      	blx	r6
    1cfa:	9a06      	ldr	r2, [sp, #24]
    1cfc:	9b07      	ldr	r3, [sp, #28]
    1cfe:	4e73      	ldr	r6, [pc, #460]	; (1ecc <computeKalmanGains+0x720>)
    1d00:	47b0      	blx	r6
    1d02:	0002      	movs	r2, r0
    1d04:	000b      	movs	r3, r1
    1d06:	9139      	str	r1, [sp, #228]	; 0xe4
    1d08:	4971      	ldr	r1, [pc, #452]	; (1ed0 <computeKalmanGains+0x724>)
    1d0a:	9018      	str	r0, [sp, #96]	; 0x60
    1d0c:	610a      	str	r2, [r1, #16]
    1d0e:	614b      	str	r3, [r1, #20]
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1d10:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1d12:	992b      	ldr	r1, [sp, #172]	; 0xac
    1d14:	9a04      	ldr	r2, [sp, #16]
    1d16:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1d18:	47a8      	blx	r5
    1d1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d1e:	0006      	movs	r6, r0
    1d20:	000f      	movs	r7, r1
    1d22:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1d24:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1d26:	47a8      	blx	r5
    1d28:	0002      	movs	r2, r0
    1d2a:	000b      	movs	r3, r1
    1d2c:	0030      	movs	r0, r6
    1d2e:	0039      	movs	r1, r7
    1d30:	47a0      	blx	r4
    1d32:	9a06      	ldr	r2, [sp, #24]
    1d34:	9b07      	ldr	r3, [sp, #28]
    1d36:	4e65      	ldr	r6, [pc, #404]	; (1ecc <computeKalmanGains+0x720>)
    1d38:	47b0      	blx	r6
    1d3a:	9012      	str	r0, [sp, #72]	; 0x48
    1d3c:	9113      	str	r1, [sp, #76]	; 0x4c
    1d3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1d40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1d42:	4963      	ldr	r1, [pc, #396]	; (1ed0 <computeKalmanGains+0x724>)
    1d44:	618a      	str	r2, [r1, #24]
    1d46:	61cb      	str	r3, [r1, #28]
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1d48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1d4c:	9800      	ldr	r0, [sp, #0]
    1d4e:	9901      	ldr	r1, [sp, #4]
    1d50:	47a8      	blx	r5
    1d52:	9a02      	ldr	r2, [sp, #8]
    1d54:	9b03      	ldr	r3, [sp, #12]
    1d56:	0006      	movs	r6, r0
    1d58:	000f      	movs	r7, r1
    1d5a:	9800      	ldr	r0, [sp, #0]
    1d5c:	9901      	ldr	r1, [sp, #4]
    1d5e:	47a8      	blx	r5
    1d60:	0002      	movs	r2, r0
    1d62:	000b      	movs	r3, r1
    1d64:	0030      	movs	r0, r6
    1d66:	0039      	movs	r1, r7
    1d68:	4e57      	ldr	r6, [pc, #348]	; (1ec8 <computeKalmanGains+0x71c>)
    1d6a:	47b0      	blx	r6
    1d6c:	9a06      	ldr	r2, [sp, #24]
    1d6e:	9b07      	ldr	r3, [sp, #28]
    1d70:	4e56      	ldr	r6, [pc, #344]	; (1ecc <computeKalmanGains+0x720>)
    1d72:	47b0      	blx	r6
    1d74:	9014      	str	r0, [sp, #80]	; 0x50
    1d76:	9115      	str	r1, [sp, #84]	; 0x54
    1d78:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1d7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1d7c:	4954      	ldr	r1, [pc, #336]	; (1ed0 <computeKalmanGains+0x724>)
    1d7e:	620a      	str	r2, [r1, #32]
    1d80:	624b      	str	r3, [r1, #36]	; 0x24
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1d82:	9800      	ldr	r0, [sp, #0]
    1d84:	9901      	ldr	r1, [sp, #4]
    1d86:	9a04      	ldr	r2, [sp, #16]
    1d88:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1d8a:	47a8      	blx	r5
    1d8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1d8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d90:	0006      	movs	r6, r0
    1d92:	000f      	movs	r7, r1
    1d94:	9802      	ldr	r0, [sp, #8]
    1d96:	9903      	ldr	r1, [sp, #12]
    1d98:	47a8      	blx	r5
    1d9a:	0002      	movs	r2, r0
    1d9c:	000b      	movs	r3, r1
    1d9e:	0030      	movs	r0, r6
    1da0:	0039      	movs	r1, r7
    1da2:	47a0      	blx	r4
    1da4:	9a06      	ldr	r2, [sp, #24]
    1da6:	9b07      	ldr	r3, [sp, #28]
    1da8:	4e48      	ldr	r6, [pc, #288]	; (1ecc <computeKalmanGains+0x720>)
    1daa:	47b0      	blx	r6
    1dac:	9036      	str	r0, [sp, #216]	; 0xd8
    1dae:	9137      	str	r1, [sp, #220]	; 0xdc
    1db0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1db2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    1db4:	4946      	ldr	r1, [pc, #280]	; (1ed0 <computeKalmanGains+0x724>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1db6:	4e44      	ldr	r6, [pc, #272]	; (1ec8 <computeKalmanGains+0x71c>)
        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1db8:	628a      	str	r2, [r1, #40]	; 0x28
    1dba:	62cb      	str	r3, [r1, #44]	; 0x2c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1dbc:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1dbe:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1dc0:	2000      	movs	r0, #0
    1dc2:	4944      	ldr	r1, [pc, #272]	; (1ed4 <computeKalmanGains+0x728>)
    1dc4:	47b0      	blx	r6
    1dc6:	0002      	movs	r2, r0
    1dc8:	000b      	movs	r3, r1
    1dca:	900c      	str	r0, [sp, #48]	; 0x30
    1dcc:	910d      	str	r1, [sp, #52]	; 0x34
    1dce:	9808      	ldr	r0, [sp, #32]
    1dd0:	9909      	ldr	r1, [sp, #36]	; 0x24
    1dd2:	47a8      	blx	r5
    1dd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1dd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1dd8:	0006      	movs	r6, r0
    1dda:	000f      	movs	r7, r1
    1ddc:	9800      	ldr	r0, [sp, #0]
    1dde:	9901      	ldr	r1, [sp, #4]
    1de0:	47a8      	blx	r5
    1de2:	0002      	movs	r2, r0
    1de4:	000b      	movs	r3, r1
    1de6:	0030      	movs	r0, r6
    1de8:	0039      	movs	r1, r7
    1dea:	4e37      	ldr	r6, [pc, #220]	; (1ec8 <computeKalmanGains+0x71c>)
    1dec:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1dee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1df0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1df2:	9006      	str	r0, [sp, #24]
    1df4:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1df6:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1df8:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1dfa:	47a8      	blx	r5
    1dfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1dfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1e00:	0006      	movs	r6, r0
    1e02:	000f      	movs	r7, r1
    1e04:	9810      	ldr	r0, [sp, #64]	; 0x40
    1e06:	9911      	ldr	r1, [sp, #68]	; 0x44
    1e08:	47a8      	blx	r5
    1e0a:	0002      	movs	r2, r0
    1e0c:	000b      	movs	r3, r1
    1e0e:	0030      	movs	r0, r6
    1e10:	0039      	movs	r1, r7
    1e12:	4e2d      	ldr	r6, [pc, #180]	; (1ec8 <computeKalmanGains+0x71c>)
    1e14:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1e16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1e18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1e1a:	900a      	str	r0, [sp, #40]	; 0x28
    1e1c:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1e1e:	9804      	ldr	r0, [sp, #16]
    1e20:	9916      	ldr	r1, [sp, #88]	; 0x58
    1e22:	47a8      	blx	r5
    1e24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1e26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1e28:	0006      	movs	r6, r0
    1e2a:	000f      	movs	r7, r1
    1e2c:	9802      	ldr	r0, [sp, #8]
    1e2e:	9903      	ldr	r1, [sp, #12]
    1e30:	47a8      	blx	r5
    1e32:	0002      	movs	r2, r0
    1e34:	000b      	movs	r3, r1
    1e36:	0030      	movs	r0, r6
    1e38:	0039      	movs	r1, r7
    1e3a:	4e23      	ldr	r6, [pc, #140]	; (1ec8 <computeKalmanGains+0x71c>)
    1e3c:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1e3e:	2280      	movs	r2, #128	; 0x80
    1e40:	0612      	lsls	r2, r2, #24
    1e42:	4694      	mov	ip, r2
    1e44:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1e46:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1e48:	4463      	add	r3, ip
    1e4a:	932e      	str	r3, [sp, #184]	; 0xb8
    1e4c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1e4e:	900c      	str	r0, [sp, #48]	; 0x30
    1e50:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1e52:	9808      	ldr	r0, [sp, #32]
    1e54:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e56:	47a8      	blx	r5
    1e58:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1e5a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1e5c:	47a0      	blx	r4
    1e5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1e62:	0006      	movs	r6, r0
    1e64:	000f      	movs	r7, r1
    1e66:	9800      	ldr	r0, [sp, #0]
    1e68:	9901      	ldr	r1, [sp, #4]
    1e6a:	47a8      	blx	r5
    1e6c:	0002      	movs	r2, r0
    1e6e:	000b      	movs	r3, r1
    1e70:	0030      	movs	r0, r6
    1e72:	0039      	movs	r1, r7
    1e74:	4e14      	ldr	r6, [pc, #80]	; (1ec8 <computeKalmanGains+0x71c>)
    1e76:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1e78:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1e7a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1e7c:	9008      	str	r0, [sp, #32]
    1e7e:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1e80:	9826      	ldr	r0, [sp, #152]	; 0x98
    1e82:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1e84:	47a0      	blx	r4
    1e86:	4a0c      	ldr	r2, [pc, #48]	; (1eb8 <computeKalmanGains+0x70c>)
    1e88:	0006      	movs	r6, r0
    1e8a:	000f      	movs	r7, r1
    1e8c:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1e8e:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1e90:	4b0a      	ldr	r3, [pc, #40]	; (1ebc <computeKalmanGains+0x710>)
    1e92:	47a8      	blx	r5
    1e94:	0002      	movs	r2, r0
    1e96:	000b      	movs	r3, r1
    1e98:	0030      	movs	r0, r6
    1e9a:	0039      	movs	r1, r7
    1e9c:	47a0      	blx	r4
    1e9e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1ea0:	0006      	movs	r6, r0
    1ea2:	000f      	movs	r7, r1
    1ea4:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1ea6:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1ea8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1eaa:	47a8      	blx	r5
    1eac:	0002      	movs	r2, r0
    1eae:	000b      	movs	r3, r1
    1eb0:	0030      	movs	r0, r6
    1eb2:	0039      	movs	r1, r7
    1eb4:	47a0      	blx	r4
    1eb6:	e00f      	b.n	1ed8 <computeKalmanGains+0x72c>
    1eb8:	47ae147b 	.word	0x47ae147b
    1ebc:	3f747ae1 	.word	0x3f747ae1
    1ec0:	eb1c432d 	.word	0xeb1c432d
    1ec4:	3eea36e2 	.word	0x3eea36e2
    1ec8:	00006439 	.word	0x00006439
    1ecc:	000056fd 	.word	0x000056fd
    1ed0:	20000348 	.word	0x20000348
    1ed4:	3ff00000 	.word	0x3ff00000
    1ed8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1eda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1edc:	0006      	movs	r6, r0
    1ede:	000f      	movs	r7, r1
    1ee0:	9810      	ldr	r0, [sp, #64]	; 0x40
    1ee2:	9911      	ldr	r1, [sp, #68]	; 0x44
    1ee4:	47a8      	blx	r5
    1ee6:	0002      	movs	r2, r0
    1ee8:	000b      	movs	r3, r1
    1eea:	0030      	movs	r0, r6
    1eec:	0039      	movs	r1, r7
    1eee:	4e50      	ldr	r6, [pc, #320]	; (2030 <STACK_SIZE+0x30>)
    1ef0:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1ef2:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1ef4:	900e      	str	r0, [sp, #56]	; 0x38
    1ef6:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1ef8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1efa:	9804      	ldr	r0, [sp, #16]
    1efc:	9916      	ldr	r1, [sp, #88]	; 0x58
    1efe:	47a8      	blx	r5
    1f00:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1f02:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1f04:	47a0      	blx	r4
    1f06:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1f08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1f0a:	0006      	movs	r6, r0
    1f0c:	000f      	movs	r7, r1
    1f0e:	9802      	ldr	r0, [sp, #8]
    1f10:	9903      	ldr	r1, [sp, #12]
    1f12:	47a8      	blx	r5
    1f14:	4c46      	ldr	r4, [pc, #280]	; (2030 <STACK_SIZE+0x30>)
    1f16:	0002      	movs	r2, r0
    1f18:	000b      	movs	r3, r1
    1f1a:	0030      	movs	r0, r6
    1f1c:	0039      	movs	r1, r7
    1f1e:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1f20:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1f22:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1f24:	9004      	str	r0, [sp, #16]
    1f26:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1f28:	2000      	movs	r0, #0
    1f2a:	4942      	ldr	r1, [pc, #264]	; (2034 <STACK_SIZE+0x34>)
    1f2c:	47a0      	blx	r4
    1f2e:	0002      	movs	r2, r0
    1f30:	000b      	movs	r3, r1
    1f32:	9012      	str	r0, [sp, #72]	; 0x48
    1f34:	9113      	str	r1, [sp, #76]	; 0x4c
    1f36:	9800      	ldr	r0, [sp, #0]
    1f38:	9901      	ldr	r1, [sp, #4]
    1f3a:	47a8      	blx	r5
    1f3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1f3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1f40:	0006      	movs	r6, r0
    1f42:	000f      	movs	r7, r1
    1f44:	9800      	ldr	r0, [sp, #0]
    1f46:	9901      	ldr	r1, [sp, #4]
    1f48:	47a8      	blx	r5
    1f4a:	0002      	movs	r2, r0
    1f4c:	000b      	movs	r3, r1
    1f4e:	0030      	movs	r0, r6
    1f50:	0039      	movs	r1, r7
    1f52:	47a0      	blx	r4
    1f54:	9000      	str	r0, [sp, #0]
    1f56:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1f58:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1f5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1f5c:	9810      	ldr	r0, [sp, #64]	; 0x40
    1f5e:	9911      	ldr	r1, [sp, #68]	; 0x44
    1f60:	47a8      	blx	r5
    1f62:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1f64:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1f66:	0006      	movs	r6, r0
    1f68:	000f      	movs	r7, r1
    1f6a:	9810      	ldr	r0, [sp, #64]	; 0x40
    1f6c:	9911      	ldr	r1, [sp, #68]	; 0x44
    1f6e:	47a8      	blx	r5
    1f70:	0002      	movs	r2, r0
    1f72:	000b      	movs	r3, r1
    1f74:	0030      	movs	r0, r6
    1f76:	0039      	movs	r1, r7
    1f78:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1f7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1f7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1f7e:	9010      	str	r0, [sp, #64]	; 0x40
    1f80:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1f82:	9802      	ldr	r0, [sp, #8]
    1f84:	9903      	ldr	r1, [sp, #12]
    1f86:	47a8      	blx	r5
    1f88:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1f8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1f8c:	0006      	movs	r6, r0
    1f8e:	000f      	movs	r7, r1
    1f90:	9802      	ldr	r0, [sp, #8]
    1f92:	9903      	ldr	r1, [sp, #12]
    1f94:	47a8      	blx	r5
    1f96:	000b      	movs	r3, r1
    1f98:	0002      	movs	r2, r0
    1f9a:	0039      	movs	r1, r7
    1f9c:	0030      	movs	r0, r6
    1f9e:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1fa0:	2400      	movs	r4, #0
    1fa2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1fa4:	9002      	str	r0, [sp, #8]
    1fa6:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1fa8:	3301      	adds	r3, #1
    1faa:	9338      	str	r3, [sp, #224]	; 0xe0
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1fac:	4b22      	ldr	r3, [pc, #136]	; (2038 <STACK_SIZE+0x38>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1fae:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1fb0:	9326      	str	r3, [sp, #152]	; 0x98
    1fb2:	4b1f      	ldr	r3, [pc, #124]	; (2030 <STACK_SIZE+0x30>)
    1fb4:	9328      	str	r3, [sp, #160]	; 0xa0
    1fb6:	ab40      	add	r3, sp, #256	; 0x100
    1fb8:	18e5      	adds	r5, r4, r3

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1fba:	2300      	movs	r3, #0
    1fbc:	9516      	str	r5, [sp, #88]	; 0x58
    1fbe:	9312      	str	r3, [sp, #72]	; 0x48
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1fc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1fc2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1fc4:	18e3      	adds	r3, r4, r3
    1fc6:	189b      	adds	r3, r3, r2
    1fc8:	681a      	ldr	r2, [r3, #0]
    1fca:	685b      	ldr	r3, [r3, #4]
    1fcc:	9218      	str	r2, [sp, #96]	; 0x60
    1fce:	9319      	str	r3, [sp, #100]	; 0x64
    1fd0:	9818      	ldr	r0, [sp, #96]	; 0x60
    1fd2:	9919      	ldr	r1, [sp, #100]	; 0x64
    1fd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1fd6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1fd8:	681e      	ldr	r6, [r3, #0]
    1fda:	685f      	ldr	r7, [r3, #4]
    1fdc:	0032      	movs	r2, r6
    1fde:	003b      	movs	r3, r7
    1fe0:	47a8      	blx	r5
    1fe2:	0032      	movs	r2, r6
    1fe4:	003b      	movs	r3, r7
    1fe6:	4d15      	ldr	r5, [pc, #84]	; (203c <STACK_SIZE+0x3c>)
    1fe8:	47a8      	blx	r5
    1fea:	4b15      	ldr	r3, [pc, #84]	; (2040 <STACK_SIZE+0x40>)
    1fec:	4a15      	ldr	r2, [pc, #84]	; (2044 <STACK_SIZE+0x44>)
    1fee:	4e16      	ldr	r6, [pc, #88]	; (2048 <STACK_SIZE+0x48>)
    1ff0:	47b0      	blx	r6
                    notdone++;
    1ff2:	1e43      	subs	r3, r0, #1
    1ff4:	4198      	sbcs	r0, r3
    1ff6:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1ff8:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1ffa:	181b      	adds	r3, r3, r0
    1ffc:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1ffe:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2000:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2002:	c10c      	stmia	r1!, {r2, r3}
    2004:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2006:	9116      	str	r1, [sp, #88]	; 0x58
    2008:	3308      	adds	r3, #8
    200a:	9312      	str	r3, [sp, #72]	; 0x48
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    200c:	2b10      	cmp	r3, #16
    200e:	d1d7      	bne.n	1fc0 <computeKalmanGains+0x814>
    2010:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    2012:	2c30      	cmp	r4, #48	; 0x30
    2014:	d1cf      	bne.n	1fb6 <computeKalmanGains+0x80a>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    2016:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2018:	2b00      	cmp	r3, #0
    201a:	d001      	beq.n	2020 <STACK_SIZE+0x20>
    201c:	f7ff fc2c 	bl	1878 <computeKalmanGains+0xcc>
    2020:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    2022:	2b63      	cmp	r3, #99	; 0x63
    2024:	dc01      	bgt.n	202a <STACK_SIZE+0x2a>
    2026:	f7ff fc27 	bl	1878 <computeKalmanGains+0xcc>
            continue;
        else
            break;
    }
}
    202a:	b04d      	add	sp, #308	; 0x134
    202c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	00006439 	.word	0x00006439
    2034:	3ff00000 	.word	0x3ff00000
    2038:	20000348 	.word	0x20000348
    203c:	000056fd 	.word	0x000056fd
    2040:	3ee4f8b5 	.word	0x3ee4f8b5
    2044:	88e368f1 	.word	0x88e368f1
    2048:	00004ba9 	.word	0x00004ba9

0000204c <computeKalmanBaroOnlyGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    baro_phi[0][1]    = dt;
    204c:	4bd7      	ldr	r3, [pc, #860]	; (23ac <computeKalmanBaroOnlyGains+0x360>)
    204e:	48d8      	ldr	r0, [pc, #864]	; (23b0 <computeKalmanBaroOnlyGains+0x364>)
    baro_phi[1][2]    = dt;
    2050:	001a      	movs	r2, r3
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    baro_phi[0][1]    = dt;
    2052:	49d8      	ldr	r1, [pc, #864]	; (23b4 <computeKalmanBaroOnlyGains+0x368>)
    baro_phi[1][2]    = dt;
    2054:	3288      	adds	r2, #136	; 0x88
        else
            break;
    }
}

void computeKalmanBaroOnlyGains() {
    2056:	b5f0      	push	{r4, r5, r6, r7, lr}

    /*
     Fill in state transition matrix and its transpose
    */
    baro_phi[0][1]    = dt;
    baro_phi[1][2]    = dt;
    2058:	6010      	str	r0, [r2, #0]
    205a:	6051      	str	r1, [r2, #4]
    baro_phi[0][2]    = dt*dt/2.0;
    205c:	2200      	movs	r2, #0
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    baro_phi[0][1]    = dt;
    205e:	6698      	str	r0, [r3, #104]	; 0x68
    2060:	66d9      	str	r1, [r3, #108]	; 0x6c
    baro_phi[1][2]    = dt;
    baro_phi[0][2]    = dt*dt/2.0;
    2062:	48d5      	ldr	r0, [pc, #852]	; (23b8 <computeKalmanBaroOnlyGains+0x36c>)
    2064:	49d5      	ldr	r1, [pc, #852]	; (23bc <computeKalmanBaroOnlyGains+0x370>)
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
        lastkgain[i] = .001;
    2066:	4cd6      	ldr	r4, [pc, #856]	; (23c0 <computeKalmanBaroOnlyGains+0x374>)
    /*
     Fill in state transition matrix and its transpose
    */
    baro_phi[0][1]    = dt;
    baro_phi[1][2]    = dt;
    baro_phi[0][2]    = dt*dt/2.0;
    2068:	6718      	str	r0, [r3, #112]	; 0x70
    206a:	6759      	str	r1, [r3, #116]	; 0x74
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
        lastkgain[i] = .001;
    206c:	4dd5      	ldr	r5, [pc, #852]	; (23c4 <computeKalmanBaroOnlyGains+0x378>)
        baro_kgain[i] = 1.0;
    206e:	4fd6      	ldr	r7, [pc, #856]	; (23c8 <computeKalmanBaroOnlyGains+0x37c>)
        else
            break;
    }
}

void computeKalmanBaroOnlyGains() {
    2070:	b0c5      	sub	sp, #276	; 0x114
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
        lastkgain[i] = .001;
        baro_kgain[i] = 1.0;
    2072:	2000      	movs	r0, #0
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
        lastkgain[i] = .001;
    2074:	a93e      	add	r1, sp, #248	; 0xf8
    2076:	1856      	adds	r6, r2, r1
        baro_kgain[i] = 1.0;
    2078:	49d4      	ldr	r1, [pc, #848]	; (23cc <computeKalmanBaroOnlyGains+0x380>)
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
        lastkgain[i] = .001;
    207a:	6034      	str	r4, [r6, #0]
    207c:	6075      	str	r5, [r6, #4]
        baro_kgain[i] = 1.0;
    207e:	19d6      	adds	r6, r2, r7
    2080:	3208      	adds	r2, #8
    2082:	6030      	str	r0, [r6, #0]
    2084:	6071      	str	r1, [r6, #4]
    baro_phi[0][2]    = dt*dt/2.0;
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
    2086:	2a18      	cmp	r2, #24
    2088:	d1f3      	bne.n	2072 <computeKalmanBaroOnlyGains+0x26>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    208a:	6819      	ldr	r1, [r3, #0]
    208c:	685a      	ldr	r2, [r3, #4]
    208e:	9108      	str	r1, [sp, #32]
    2090:	9209      	str	r2, [sp, #36]	; 0x24
    2092:	6899      	ldr	r1, [r3, #8]
    2094:	68da      	ldr	r2, [r3, #12]
    2096:	910a      	str	r1, [sp, #40]	; 0x28
    2098:	920b      	str	r2, [sp, #44]	; 0x2c
    209a:	6919      	ldr	r1, [r3, #16]
    209c:	695a      	ldr	r2, [r3, #20]
    209e:	910c      	str	r1, [sp, #48]	; 0x30
    20a0:	920d      	str	r2, [sp, #52]	; 0x34
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    20a2:	6999      	ldr	r1, [r3, #24]
    20a4:	69da      	ldr	r2, [r3, #28]
    20a6:	910e      	str	r1, [sp, #56]	; 0x38
    20a8:	920f      	str	r2, [sp, #60]	; 0x3c
    20aa:	6a19      	ldr	r1, [r3, #32]
    20ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    20ae:	9110      	str	r1, [sp, #64]	; 0x40
    20b0:	9211      	str	r2, [sp, #68]	; 0x44
    20b2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    20b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    20b6:	9112      	str	r1, [sp, #72]	; 0x48
    20b8:	9213      	str	r2, [sp, #76]	; 0x4c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    20ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
    20bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    20be:	9114      	str	r1, [sp, #80]	; 0x50
    20c0:	9215      	str	r2, [sp, #84]	; 0x54
    20c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
    20c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    20c6:	9116      	str	r1, [sp, #88]	; 0x58
    20c8:	9217      	str	r2, [sp, #92]	; 0x5c
    20ca:	6c19      	ldr	r1, [r3, #64]	; 0x40
    20cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    20ce:	9118      	str	r1, [sp, #96]	; 0x60
    20d0:	9219      	str	r2, [sp, #100]	; 0x64
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[0][0] = pestp[0][0] + model_variance;
    20d2:	6c99      	ldr	r1, [r3, #72]	; 0x48
    20d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);
    20d6:	6d5c      	ldr	r4, [r3, #84]	; 0x54
    20d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    20da:	933c      	str	r3, [sp, #240]	; 0xf0
    20dc:	943d      	str	r4, [sp, #244]	; 0xf4
    20de:	2300      	movs	r3, #0
    20e0:	4cbb      	ldr	r4, [pc, #748]	; (23d0 <computeKalmanBaroOnlyGains+0x384>)
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[0][0] = pestp[0][0] + model_variance;
    20e2:	913a      	str	r1, [sp, #232]	; 0xe8
    20e4:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);
    20e6:	9304      	str	r3, [sp, #16]
    20e8:	9405      	str	r4, [sp, #20]
    20ea:	2300      	movs	r3, #0
    20ec:	2400      	movs	r4, #0
    20ee:	9302      	str	r3, [sp, #8]
    20f0:	9403      	str	r4, [sp, #12]
    20f2:	9300      	str	r3, [sp, #0]
    20f4:	9401      	str	r4, [sp, #4]
    20f6:	9306      	str	r3, [sp, #24]
    20f8:	9407      	str	r4, [sp, #28]
    20fa:	2300      	movs	r3, #0
    20fc:	4cb4      	ldr	r4, [pc, #720]	; (23d0 <computeKalmanBaroOnlyGains+0x384>)
    20fe:	9322      	str	r3, [sp, #136]	; 0x88
    2100:	9423      	str	r4, [sp, #140]	; 0x8c
    2102:	2300      	movs	r3, #0
    2104:	2400      	movs	r4, #0
    2106:	9320      	str	r3, [sp, #128]	; 0x80
    2108:	9421      	str	r4, [sp, #132]	; 0x84
    210a:	931e      	str	r3, [sp, #120]	; 0x78
    210c:	941f      	str	r4, [sp, #124]	; 0x7c
    210e:	931c      	str	r3, [sp, #112]	; 0x70
    2110:	941d      	str	r4, [sp, #116]	; 0x74
    2112:	2480      	movs	r4, #128	; 0x80
    2114:	2300      	movs	r3, #0
    2116:	05e4      	lsls	r4, r4, #23
    2118:	931a      	str	r3, [sp, #104]	; 0x68
    211a:	941b      	str	r4, [sp, #108]	; 0x6c
    211c:	2300      	movs	r3, #0
    211e:	9327      	str	r3, [sp, #156]	; 0x9c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    2120:	4cac      	ldr	r4, [pc, #688]	; (23d4 <computeKalmanBaroOnlyGains+0x388>)
    2122:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    2124:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    2126:	9808      	ldr	r0, [sp, #32]
    2128:	9909      	ldr	r1, [sp, #36]	; 0x24
    212a:	47a0      	blx	r4
    212c:	9a20      	ldr	r2, [sp, #128]	; 0x80
    212e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    2130:	0006      	movs	r6, r0
    2132:	000f      	movs	r7, r1
    2134:	980a      	ldr	r0, [sp, #40]	; 0x28
    2136:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2138:	47a0      	blx	r4
    213a:	4da7      	ldr	r5, [pc, #668]	; (23d8 <computeKalmanBaroOnlyGains+0x38c>)
    213c:	0002      	movs	r2, r0
    213e:	000b      	movs	r3, r1
    2140:	0030      	movs	r0, r6
    2142:	0039      	movs	r1, r7
    2144:	47a8      	blx	r5
    2146:	9a00      	ldr	r2, [sp, #0]
    2148:	9b01      	ldr	r3, [sp, #4]
    214a:	0006      	movs	r6, r0
    214c:	000f      	movs	r7, r1
    214e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2150:	990d      	ldr	r1, [sp, #52]	; 0x34
    2152:	47a0      	blx	r4
    2154:	0002      	movs	r2, r0
    2156:	000b      	movs	r3, r1
    2158:	0030      	movs	r0, r6
    215a:	0039      	movs	r1, r7
    215c:	47a8      	blx	r5
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    215e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    2160:	9b1d      	ldr	r3, [sp, #116]	; 0x74

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    2162:	9024      	str	r0, [sp, #144]	; 0x90
    2164:	9125      	str	r1, [sp, #148]	; 0x94
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    2166:	9808      	ldr	r0, [sp, #32]
    2168:	9909      	ldr	r1, [sp, #36]	; 0x24
    216a:	47a0      	blx	r4
    216c:	9a22      	ldr	r2, [sp, #136]	; 0x88
    216e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2170:	0006      	movs	r6, r0
    2172:	000f      	movs	r7, r1
    2174:	980a      	ldr	r0, [sp, #40]	; 0x28
    2176:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2178:	47a0      	blx	r4
    217a:	0002      	movs	r2, r0
    217c:	000b      	movs	r3, r1
    217e:	0030      	movs	r0, r6
    2180:	0039      	movs	r1, r7
    2182:	47a8      	blx	r5
    2184:	9a02      	ldr	r2, [sp, #8]
    2186:	9b03      	ldr	r3, [sp, #12]
    2188:	0006      	movs	r6, r0
    218a:	000f      	movs	r7, r1
    218c:	980c      	ldr	r0, [sp, #48]	; 0x30
    218e:	990d      	ldr	r1, [sp, #52]	; 0x34
    2190:	47a0      	blx	r4
    2192:	0002      	movs	r2, r0
    2194:	000b      	movs	r3, r1
    2196:	0030      	movs	r0, r6
    2198:	0039      	movs	r1, r7
    219a:	47a8      	blx	r5
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    219c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    219e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    21a0:	9028      	str	r0, [sp, #160]	; 0xa0
    21a2:	9129      	str	r1, [sp, #164]	; 0xa4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    21a4:	9808      	ldr	r0, [sp, #32]
    21a6:	9909      	ldr	r1, [sp, #36]	; 0x24
    21a8:	47a0      	blx	r4
    21aa:	9a06      	ldr	r2, [sp, #24]
    21ac:	9b07      	ldr	r3, [sp, #28]
    21ae:	0006      	movs	r6, r0
    21b0:	000f      	movs	r7, r1
    21b2:	980a      	ldr	r0, [sp, #40]	; 0x28
    21b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    21b6:	47a0      	blx	r4
    21b8:	0002      	movs	r2, r0
    21ba:	000b      	movs	r3, r1
    21bc:	0030      	movs	r0, r6
    21be:	0039      	movs	r1, r7
    21c0:	47a8      	blx	r5
    21c2:	9a04      	ldr	r2, [sp, #16]
    21c4:	9b05      	ldr	r3, [sp, #20]
    21c6:	0006      	movs	r6, r0
    21c8:	000f      	movs	r7, r1
    21ca:	980c      	ldr	r0, [sp, #48]	; 0x30
    21cc:	990d      	ldr	r1, [sp, #52]	; 0x34
    21ce:	47a0      	blx	r4
    21d0:	0002      	movs	r2, r0
    21d2:	000b      	movs	r3, r1
    21d4:	0030      	movs	r0, r6
    21d6:	0039      	movs	r1, r7
    21d8:	47a8      	blx	r5
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    21da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    21dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    21de:	902a      	str	r0, [sp, #168]	; 0xa8
    21e0:	912b      	str	r1, [sp, #172]	; 0xac
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    21e2:	980e      	ldr	r0, [sp, #56]	; 0x38
    21e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    21e6:	47a0      	blx	r4
    21e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
    21ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
    21ec:	0006      	movs	r6, r0
    21ee:	000f      	movs	r7, r1
    21f0:	9810      	ldr	r0, [sp, #64]	; 0x40
    21f2:	9911      	ldr	r1, [sp, #68]	; 0x44
    21f4:	47a0      	blx	r4
    21f6:	0002      	movs	r2, r0
    21f8:	000b      	movs	r3, r1
    21fa:	0030      	movs	r0, r6
    21fc:	0039      	movs	r1, r7
    21fe:	47a8      	blx	r5
    2200:	9a00      	ldr	r2, [sp, #0]
    2202:	9b01      	ldr	r3, [sp, #4]
    2204:	0006      	movs	r6, r0
    2206:	000f      	movs	r7, r1
    2208:	9812      	ldr	r0, [sp, #72]	; 0x48
    220a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    220c:	47a0      	blx	r4
    220e:	0002      	movs	r2, r0
    2210:	000b      	movs	r3, r1
    2212:	0030      	movs	r0, r6
    2214:	0039      	movs	r1, r7
    2216:	47a8      	blx	r5
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    2218:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    221a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    221c:	9034      	str	r0, [sp, #208]	; 0xd0
    221e:	9135      	str	r1, [sp, #212]	; 0xd4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    2220:	980e      	ldr	r0, [sp, #56]	; 0x38
    2222:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2224:	47a0      	blx	r4
    2226:	9a22      	ldr	r2, [sp, #136]	; 0x88
    2228:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    222a:	0006      	movs	r6, r0
    222c:	000f      	movs	r7, r1
    222e:	9810      	ldr	r0, [sp, #64]	; 0x40
    2230:	9911      	ldr	r1, [sp, #68]	; 0x44
    2232:	47a0      	blx	r4
    2234:	0002      	movs	r2, r0
    2236:	000b      	movs	r3, r1
    2238:	0030      	movs	r0, r6
    223a:	0039      	movs	r1, r7
    223c:	47a8      	blx	r5
    223e:	9a02      	ldr	r2, [sp, #8]
    2240:	9b03      	ldr	r3, [sp, #12]
    2242:	0006      	movs	r6, r0
    2244:	000f      	movs	r7, r1
    2246:	9812      	ldr	r0, [sp, #72]	; 0x48
    2248:	9913      	ldr	r1, [sp, #76]	; 0x4c
    224a:	47a0      	blx	r4
    224c:	0002      	movs	r2, r0
    224e:	000b      	movs	r3, r1
    2250:	0030      	movs	r0, r6
    2252:	0039      	movs	r1, r7
    2254:	47a8      	blx	r5
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    2256:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    2258:	9b1f      	ldr	r3, [sp, #124]	; 0x7c

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    225a:	902c      	str	r0, [sp, #176]	; 0xb0
    225c:	912d      	str	r1, [sp, #180]	; 0xb4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    225e:	980e      	ldr	r0, [sp, #56]	; 0x38
    2260:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2262:	47a0      	blx	r4
    2264:	9a06      	ldr	r2, [sp, #24]
    2266:	9b07      	ldr	r3, [sp, #28]
    2268:	0006      	movs	r6, r0
    226a:	000f      	movs	r7, r1
    226c:	9810      	ldr	r0, [sp, #64]	; 0x40
    226e:	9911      	ldr	r1, [sp, #68]	; 0x44
    2270:	47a0      	blx	r4
    2272:	0002      	movs	r2, r0
    2274:	000b      	movs	r3, r1
    2276:	0030      	movs	r0, r6
    2278:	0039      	movs	r1, r7
    227a:	47a8      	blx	r5
    227c:	9a04      	ldr	r2, [sp, #16]
    227e:	9b05      	ldr	r3, [sp, #20]
    2280:	0006      	movs	r6, r0
    2282:	000f      	movs	r7, r1
    2284:	9812      	ldr	r0, [sp, #72]	; 0x48
    2286:	9913      	ldr	r1, [sp, #76]	; 0x4c
    2288:	47a0      	blx	r4
    228a:	0002      	movs	r2, r0
    228c:	000b      	movs	r3, r1
    228e:	0030      	movs	r0, r6
    2290:	0039      	movs	r1, r7
    2292:	47a8      	blx	r5
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    2294:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    2296:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    2298:	902e      	str	r0, [sp, #184]	; 0xb8
    229a:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    229c:	9814      	ldr	r0, [sp, #80]	; 0x50
    229e:	9915      	ldr	r1, [sp, #84]	; 0x54
    22a0:	47a0      	blx	r4
    22a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
    22a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
    22a6:	0006      	movs	r6, r0
    22a8:	000f      	movs	r7, r1
    22aa:	9816      	ldr	r0, [sp, #88]	; 0x58
    22ac:	9917      	ldr	r1, [sp, #92]	; 0x5c
    22ae:	47a0      	blx	r4
    22b0:	0002      	movs	r2, r0
    22b2:	000b      	movs	r3, r1
    22b4:	0030      	movs	r0, r6
    22b6:	0039      	movs	r1, r7
    22b8:	47a8      	blx	r5
    22ba:	9a00      	ldr	r2, [sp, #0]
    22bc:	9b01      	ldr	r3, [sp, #4]
    22be:	0006      	movs	r6, r0
    22c0:	000f      	movs	r7, r1
    22c2:	9818      	ldr	r0, [sp, #96]	; 0x60
    22c4:	9919      	ldr	r1, [sp, #100]	; 0x64
    22c6:	47a0      	blx	r4
    22c8:	0002      	movs	r2, r0
    22ca:	000b      	movs	r3, r1
    22cc:	0030      	movs	r0, r6
    22ce:	0039      	movs	r1, r7
    22d0:	47a8      	blx	r5
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    22d2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    22d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    22d6:	9000      	str	r0, [sp, #0]
    22d8:	9101      	str	r1, [sp, #4]
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    22da:	9814      	ldr	r0, [sp, #80]	; 0x50
    22dc:	9915      	ldr	r1, [sp, #84]	; 0x54
    22de:	47a0      	blx	r4
    22e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
    22e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    22e4:	0006      	movs	r6, r0
    22e6:	000f      	movs	r7, r1
    22e8:	9816      	ldr	r0, [sp, #88]	; 0x58
    22ea:	9917      	ldr	r1, [sp, #92]	; 0x5c
    22ec:	47a0      	blx	r4
    22ee:	0002      	movs	r2, r0
    22f0:	000b      	movs	r3, r1
    22f2:	0030      	movs	r0, r6
    22f4:	0039      	movs	r1, r7
    22f6:	47a8      	blx	r5
    22f8:	9a02      	ldr	r2, [sp, #8]
    22fa:	9b03      	ldr	r3, [sp, #12]
    22fc:	0006      	movs	r6, r0
    22fe:	000f      	movs	r7, r1
    2300:	9818      	ldr	r0, [sp, #96]	; 0x60
    2302:	9919      	ldr	r1, [sp, #100]	; 0x64
    2304:	47a0      	blx	r4
    2306:	0002      	movs	r2, r0
    2308:	000b      	movs	r3, r1
    230a:	0030      	movs	r0, r6
    230c:	0039      	movs	r1, r7
    230e:	47a8      	blx	r5
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    2310:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    2312:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    2314:	9030      	str	r0, [sp, #192]	; 0xc0
    2316:	9131      	str	r1, [sp, #196]	; 0xc4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    2318:	9814      	ldr	r0, [sp, #80]	; 0x50
    231a:	9915      	ldr	r1, [sp, #84]	; 0x54
    231c:	47a0      	blx	r4
    231e:	9a06      	ldr	r2, [sp, #24]
    2320:	9b07      	ldr	r3, [sp, #28]
    2322:	0006      	movs	r6, r0
    2324:	000f      	movs	r7, r1
    2326:	9816      	ldr	r0, [sp, #88]	; 0x58
    2328:	9917      	ldr	r1, [sp, #92]	; 0x5c
    232a:	47a0      	blx	r4
    232c:	0002      	movs	r2, r0
    232e:	000b      	movs	r3, r1
    2330:	0030      	movs	r0, r6
    2332:	0039      	movs	r1, r7
    2334:	47a8      	blx	r5
    2336:	9a04      	ldr	r2, [sp, #16]
    2338:	9b05      	ldr	r3, [sp, #20]
    233a:	0006      	movs	r6, r0
    233c:	000f      	movs	r7, r1
    233e:	9818      	ldr	r0, [sp, #96]	; 0x60
    2340:	9919      	ldr	r1, [sp, #100]	; 0x64
    2342:	47a0      	blx	r4
    2344:	0002      	movs	r2, r0
    2346:	000b      	movs	r3, r1
    2348:	0030      	movs	r0, r6
    234a:	0039      	movs	r1, r7
    234c:	47a8      	blx	r5

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    234e:	2200      	movs	r2, #0
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    2350:	9032      	str	r0, [sp, #200]	; 0xc8
    2352:	9133      	str	r1, [sp, #204]	; 0xcc

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    2354:	9824      	ldr	r0, [sp, #144]	; 0x90
    2356:	9925      	ldr	r1, [sp, #148]	; 0x94
    2358:	2300      	movs	r3, #0
    235a:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    235c:	4a14      	ldr	r2, [pc, #80]	; (23b0 <computeKalmanBaroOnlyGains+0x364>)
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    235e:	9036      	str	r0, [sp, #216]	; 0xd8
    2360:	9137      	str	r1, [sp, #220]	; 0xdc
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    2362:	982c      	ldr	r0, [sp, #176]	; 0xb0
    2364:	992d      	ldr	r1, [sp, #180]	; 0xb4
    2366:	4b13      	ldr	r3, [pc, #76]	; (23b4 <computeKalmanBaroOnlyGains+0x368>)
    2368:	47a0      	blx	r4
    236a:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    236c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    236e:	47a8      	blx	r5
    2370:	4a11      	ldr	r2, [pc, #68]	; (23b8 <computeKalmanBaroOnlyGains+0x36c>)
    2372:	0006      	movs	r6, r0
    2374:	000f      	movs	r7, r1
    2376:	982e      	ldr	r0, [sp, #184]	; 0xb8
    2378:	992f      	ldr	r1, [sp, #188]	; 0xbc
    237a:	4b10      	ldr	r3, [pc, #64]	; (23bc <computeKalmanBaroOnlyGains+0x370>)
    237c:	47a0      	blx	r4
    237e:	0002      	movs	r2, r0
    2380:	000b      	movs	r3, r1
    2382:	0030      	movs	r0, r6
    2384:	0039      	movs	r1, r7
    2386:	47a8      	blx	r5
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    2388:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    238a:	9002      	str	r0, [sp, #8]
    238c:	9103      	str	r1, [sp, #12]
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    238e:	9834      	ldr	r0, [sp, #208]	; 0xd0
    2390:	9935      	ldr	r1, [sp, #212]	; 0xd4
    2392:	2300      	movs	r3, #0
    2394:	47a0      	blx	r4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    2396:	4a06      	ldr	r2, [pc, #24]	; (23b0 <computeKalmanBaroOnlyGains+0x364>)

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    2398:	9034      	str	r0, [sp, #208]	; 0xd0
    239a:	9135      	str	r1, [sp, #212]	; 0xd4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    239c:	9830      	ldr	r0, [sp, #192]	; 0xc0
    239e:	9931      	ldr	r1, [sp, #196]	; 0xc4
    23a0:	4b04      	ldr	r3, [pc, #16]	; (23b4 <computeKalmanBaroOnlyGains+0x368>)
    23a2:	47a0      	blx	r4
    23a4:	9a00      	ldr	r2, [sp, #0]
    23a6:	9b01      	ldr	r3, [sp, #4]
    23a8:	47a8      	blx	r5
    23aa:	e017      	b.n	23dc <computeKalmanBaroOnlyGains+0x390>
    23ac:	20000010 	.word	0x20000010
    23b0:	47ae147b 	.word	0x47ae147b
    23b4:	3f747ae1 	.word	0x3f747ae1
    23b8:	eb1c432d 	.word	0xeb1c432d
    23bc:	3eea36e2 	.word	0x3eea36e2
    23c0:	d2f1a9fc 	.word	0xd2f1a9fc
    23c4:	3f50624d 	.word	0x3f50624d
    23c8:	20000310 	.word	0x20000310
    23cc:	3ff00000 	.word	0x3ff00000
    23d0:	40220000 	.word	0x40220000
    23d4:	00005f45 	.word	0x00005f45
    23d8:	000050a5 	.word	0x000050a5
    23dc:	4ad6      	ldr	r2, [pc, #856]	; (2738 <computeKalmanBaroOnlyGains+0x6ec>)
    23de:	0006      	movs	r6, r0
    23e0:	000f      	movs	r7, r1
    23e2:	9832      	ldr	r0, [sp, #200]	; 0xc8
    23e4:	9933      	ldr	r1, [sp, #204]	; 0xcc
    23e6:	4bd5      	ldr	r3, [pc, #852]	; (273c <computeKalmanBaroOnlyGains+0x6f0>)
    23e8:	47a0      	blx	r4
    23ea:	0002      	movs	r2, r0
    23ec:	000b      	movs	r3, r1
    23ee:	0030      	movs	r0, r6
    23f0:	0039      	movs	r1, r7
    23f2:	47a8      	blx	r5
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    23f4:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    23f6:	9004      	str	r0, [sp, #16]
    23f8:	9105      	str	r1, [sp, #20]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    23fa:	9800      	ldr	r0, [sp, #0]
    23fc:	9901      	ldr	r1, [sp, #4]
    23fe:	2300      	movs	r3, #0
    2400:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[0][0] = pestp[0][0] + model_variance;
    2402:	4acf      	ldr	r2, [pc, #828]	; (2740 <computeKalmanBaroOnlyGains+0x6f4>)
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    2404:	9038      	str	r0, [sp, #224]	; 0xe0
    2406:	9139      	str	r1, [sp, #228]	; 0xe4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[0][0] = pestp[0][0] + model_variance;
    2408:	9828      	ldr	r0, [sp, #160]	; 0xa0
    240a:	9929      	ldr	r1, [sp, #164]	; 0xa4
    240c:	4bcd      	ldr	r3, [pc, #820]	; (2744 <computeKalmanBaroOnlyGains+0x6f8>)
    240e:	47a0      	blx	r4
    2410:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2412:	9b25      	ldr	r3, [sp, #148]	; 0x94
    2414:	47a8      	blx	r5
    2416:	4ac8      	ldr	r2, [pc, #800]	; (2738 <computeKalmanBaroOnlyGains+0x6ec>)
    2418:	0006      	movs	r6, r0
    241a:	000f      	movs	r7, r1
    241c:	982a      	ldr	r0, [sp, #168]	; 0xa8
    241e:	992b      	ldr	r1, [sp, #172]	; 0xac
    2420:	4bc6      	ldr	r3, [pc, #792]	; (273c <computeKalmanBaroOnlyGains+0x6f0>)
    2422:	47a0      	blx	r4
    2424:	0002      	movs	r2, r0
    2426:	000b      	movs	r3, r1
    2428:	0030      	movs	r0, r6
    242a:	0039      	movs	r1, r7
    242c:	47a8      	blx	r5
    242e:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    2430:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    2432:	47a8      	blx	r5
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);
    2434:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    2436:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[0][0] = pestp[0][0] + model_variance;
    2438:	9000      	str	r0, [sp, #0]
    243a:	9101      	str	r1, [sp, #4]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);
    243c:	47a8      	blx	r5

        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
                         phi[0][1] * pestp[1][0] +
                         phi[0][2] * pestp[2][0] )/ det;
    243e:	9a00      	ldr	r2, [sp, #0]
    2440:	9b01      	ldr	r3, [sp, #4]

        pestp[0][0] = pestp[0][0] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);
    2442:	901a      	str	r0, [sp, #104]	; 0x68
    2444:	911b      	str	r1, [sp, #108]	; 0x6c

        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
                         phi[0][1] * pestp[1][0] +
                         phi[0][2] * pestp[2][0] )/ det;
    2446:	9808      	ldr	r0, [sp, #32]
    2448:	9909      	ldr	r1, [sp, #36]	; 0x24
    244a:	47a0      	blx	r4
    244c:	9a02      	ldr	r2, [sp, #8]
    244e:	9b03      	ldr	r3, [sp, #12]
    2450:	0006      	movs	r6, r0
    2452:	000f      	movs	r7, r1
    2454:	980a      	ldr	r0, [sp, #40]	; 0x28
    2456:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2458:	47a0      	blx	r4
    245a:	0002      	movs	r2, r0
    245c:	000b      	movs	r3, r1
    245e:	0030      	movs	r0, r6
    2460:	0039      	movs	r1, r7
    2462:	47a8      	blx	r5
    2464:	9a04      	ldr	r2, [sp, #16]
    2466:	9b05      	ldr	r3, [sp, #20]
    2468:	0006      	movs	r6, r0
    246a:	000f      	movs	r7, r1
    246c:	980c      	ldr	r0, [sp, #48]	; 0x30
    246e:	990d      	ldr	r1, [sp, #52]	; 0x34
    2470:	47a0      	blx	r4
    2472:	0002      	movs	r2, r0
    2474:	000b      	movs	r3, r1
    2476:	0030      	movs	r0, r6
    2478:	0039      	movs	r1, r7
    247a:	47a8      	blx	r5
    247c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    247e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    2480:	4eb1      	ldr	r6, [pc, #708]	; (2748 <computeKalmanBaroOnlyGains+0x6fc>)
    2482:	47b0      	blx	r6
    2484:	901c      	str	r0, [sp, #112]	; 0x70
    2486:	911d      	str	r1, [sp, #116]	; 0x74
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);

        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
    2488:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    248a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    248c:	49af      	ldr	r1, [pc, #700]	; (274c <computeKalmanBaroOnlyGains+0x700>)
    248e:	600a      	str	r2, [r1, #0]
    2490:	604b      	str	r3, [r1, #4]
                         phi[0][1] * pestp[1][0] +
                         phi[0][2] * pestp[2][0] )/ det;
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
                         phi[1][1] * pestp[1][0] +
                         phi[1][2] * pestp[2][0] )/ det;
    2492:	9a00      	ldr	r2, [sp, #0]
    2494:	9b01      	ldr	r3, [sp, #4]
    2496:	980e      	ldr	r0, [sp, #56]	; 0x38
    2498:	990f      	ldr	r1, [sp, #60]	; 0x3c
    249a:	47a0      	blx	r4
    249c:	9a02      	ldr	r2, [sp, #8]
    249e:	9b03      	ldr	r3, [sp, #12]
    24a0:	0006      	movs	r6, r0
    24a2:	000f      	movs	r7, r1
    24a4:	9810      	ldr	r0, [sp, #64]	; 0x40
    24a6:	9911      	ldr	r1, [sp, #68]	; 0x44
    24a8:	47a0      	blx	r4
    24aa:	0002      	movs	r2, r0
    24ac:	000b      	movs	r3, r1
    24ae:	0030      	movs	r0, r6
    24b0:	0039      	movs	r1, r7
    24b2:	47a8      	blx	r5
    24b4:	9a04      	ldr	r2, [sp, #16]
    24b6:	9b05      	ldr	r3, [sp, #20]
    24b8:	0006      	movs	r6, r0
    24ba:	000f      	movs	r7, r1
    24bc:	9812      	ldr	r0, [sp, #72]	; 0x48
    24be:	9913      	ldr	r1, [sp, #76]	; 0x4c
    24c0:	47a0      	blx	r4
    24c2:	0002      	movs	r2, r0
    24c4:	000b      	movs	r3, r1
    24c6:	0030      	movs	r0, r6
    24c8:	0039      	movs	r1, r7
    24ca:	47a8      	blx	r5
    24cc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    24ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    24d0:	4e9d      	ldr	r6, [pc, #628]	; (2748 <computeKalmanBaroOnlyGains+0x6fc>)
    24d2:	47b0      	blx	r6
    24d4:	9006      	str	r0, [sp, #24]
    24d6:	9107      	str	r1, [sp, #28]
        det = (pestp[0][0]+altitude_variance);

        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
                         phi[0][1] * pestp[1][0] +
                         phi[0][2] * pestp[2][0] )/ det;
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
    24d8:	9a06      	ldr	r2, [sp, #24]
    24da:	9b07      	ldr	r3, [sp, #28]
    24dc:	499b      	ldr	r1, [pc, #620]	; (274c <computeKalmanBaroOnlyGains+0x700>)
    24de:	608a      	str	r2, [r1, #8]
    24e0:	60cb      	str	r3, [r1, #12]
                         phi[1][1] * pestp[1][0] +
                         phi[1][2] * pestp[2][0] )/ det;
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
                         phi[2][1] * pestp[1][0] +
                         phi[2][2] * pestp[2][0] )/det;
    24e2:	9a00      	ldr	r2, [sp, #0]
    24e4:	9b01      	ldr	r3, [sp, #4]
    24e6:	9814      	ldr	r0, [sp, #80]	; 0x50
    24e8:	9915      	ldr	r1, [sp, #84]	; 0x54
    24ea:	47a0      	blx	r4
    24ec:	9a02      	ldr	r2, [sp, #8]
    24ee:	9b03      	ldr	r3, [sp, #12]
    24f0:	0006      	movs	r6, r0
    24f2:	000f      	movs	r7, r1
    24f4:	9816      	ldr	r0, [sp, #88]	; 0x58
    24f6:	9917      	ldr	r1, [sp, #92]	; 0x5c
    24f8:	47a0      	blx	r4
    24fa:	0002      	movs	r2, r0
    24fc:	000b      	movs	r3, r1
    24fe:	0030      	movs	r0, r6
    2500:	0039      	movs	r1, r7
    2502:	47a8      	blx	r5
    2504:	9a04      	ldr	r2, [sp, #16]
    2506:	9b05      	ldr	r3, [sp, #20]
    2508:	0006      	movs	r6, r0
    250a:	000f      	movs	r7, r1
    250c:	9818      	ldr	r0, [sp, #96]	; 0x60
    250e:	9919      	ldr	r1, [sp, #100]	; 0x64
    2510:	47a0      	blx	r4
    2512:	0002      	movs	r2, r0
    2514:	000b      	movs	r3, r1
    2516:	0030      	movs	r0, r6
    2518:	0039      	movs	r1, r7
    251a:	47a8      	blx	r5
    251c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    251e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    2520:	4e89      	ldr	r6, [pc, #548]	; (2748 <computeKalmanBaroOnlyGains+0x6fc>)
    2522:	47b0      	blx	r6
    2524:	9024      	str	r0, [sp, #144]	; 0x90
    2526:	9125      	str	r1, [sp, #148]	; 0x94
                         phi[0][1] * pestp[1][0] +
                         phi[0][2] * pestp[2][0] )/ det;
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
                         phi[1][1] * pestp[1][0] +
                         phi[1][2] * pestp[2][0] )/ det;
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
    2528:	9a24      	ldr	r2, [sp, #144]	; 0x90
    252a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    252c:	4987      	ldr	r1, [pc, #540]	; (274c <computeKalmanBaroOnlyGains+0x700>)
                         phi[2][1] * pestp[1][0] +
                         phi[2][2] * pestp[2][0] )/det;

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
    252e:	4e88      	ldr	r6, [pc, #544]	; (2750 <computeKalmanBaroOnlyGains+0x704>)
                         phi[0][1] * pestp[1][0] +
                         phi[0][2] * pestp[2][0] )/ det;
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
                         phi[1][1] * pestp[1][0] +
                         phi[1][2] * pestp[2][0] )/ det;
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
    2530:	610a      	str	r2, [r1, #16]
    2532:	614b      	str	r3, [r1, #20]
                         phi[2][1] * pestp[1][0] +
                         phi[2][2] * pestp[2][0] )/det;

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
    2534:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    2536:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2538:	2000      	movs	r0, #0
    253a:	4986      	ldr	r1, [pc, #536]	; (2754 <computeKalmanBaroOnlyGains+0x708>)
    253c:	47b0      	blx	r6
    253e:	0006      	movs	r6, r0
    2540:	000f      	movs	r7, r1
    2542:	0002      	movs	r2, r0
    2544:	000b      	movs	r3, r1
    2546:	9800      	ldr	r0, [sp, #0]
    2548:	9901      	ldr	r1, [sp, #4]
    254a:	47a0      	blx	r4
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
    254c:	0032      	movs	r2, r6
    254e:	003b      	movs	r3, r7
                         phi[1][2] * pestp[2][0] )/ det;
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
                         phi[2][1] * pestp[1][0] +
                         phi[2][2] * pestp[2][0] )/det;

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
    2550:	901a      	str	r0, [sp, #104]	; 0x68
    2552:	911b      	str	r1, [sp, #108]	; 0x6c
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
    2554:	9802      	ldr	r0, [sp, #8]
    2556:	9903      	ldr	r1, [sp, #12]
    2558:	47a0      	blx	r4
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
    255a:	0032      	movs	r2, r6
    255c:	003b      	movs	r3, r7
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
                         phi[2][1] * pestp[1][0] +
                         phi[2][2] * pestp[2][0] )/det;

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
    255e:	901c      	str	r0, [sp, #112]	; 0x70
    2560:	911d      	str	r1, [sp, #116]	; 0x74
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
    2562:	9804      	ldr	r0, [sp, #16]
    2564:	9905      	ldr	r1, [sp, #20]
    2566:	47a0      	blx	r4
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
    2568:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    256a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
                         phi[2][1] * pestp[1][0] +
                         phi[2][2] * pestp[2][0] )/det;

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
    256c:	901e      	str	r0, [sp, #120]	; 0x78
    256e:	911f      	str	r1, [sp, #124]	; 0x7c
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
    2570:	9828      	ldr	r0, [sp, #160]	; 0xa0
    2572:	9929      	ldr	r1, [sp, #164]	; 0xa4
    2574:	47a8      	blx	r5
    2576:	4a72      	ldr	r2, [pc, #456]	; (2740 <computeKalmanBaroOnlyGains+0x6f4>)
    2578:	0006      	movs	r6, r0
    257a:	000f      	movs	r7, r1
    257c:	982a      	ldr	r0, [sp, #168]	; 0xa8
    257e:	992b      	ldr	r1, [sp, #172]	; 0xac
    2580:	4b70      	ldr	r3, [pc, #448]	; (2744 <computeKalmanBaroOnlyGains+0x6f8>)
    2582:	47a0      	blx	r4
    2584:	0002      	movs	r2, r0
    2586:	000b      	movs	r3, r1
    2588:	0030      	movs	r0, r6
    258a:	0039      	movs	r1, r7
    258c:	47a8      	blx	r5
    258e:	9a06      	ldr	r2, [sp, #24]
    2590:	9b07      	ldr	r3, [sp, #28]
    2592:	0006      	movs	r6, r0
    2594:	000f      	movs	r7, r1
    2596:	9800      	ldr	r0, [sp, #0]
    2598:	9901      	ldr	r1, [sp, #4]
    259a:	47a0      	blx	r4
    259c:	0002      	movs	r2, r0
    259e:	000b      	movs	r3, r1
    25a0:	0030      	movs	r0, r6
    25a2:	0039      	movs	r1, r7
    25a4:	4e6a      	ldr	r6, [pc, #424]	; (2750 <computeKalmanBaroOnlyGains+0x704>)
    25a6:	47b0      	blx	r6
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
    25a8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    25aa:	9b35      	ldr	r3, [sp, #212]	; 0xd4
                         phi[2][2] * pestp[2][0] )/det;

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
    25ac:	9020      	str	r0, [sp, #128]	; 0x80
    25ae:	9121      	str	r1, [sp, #132]	; 0x84
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
    25b0:	982c      	ldr	r0, [sp, #176]	; 0xb0
    25b2:	992d      	ldr	r1, [sp, #180]	; 0xb4
    25b4:	47a8      	blx	r5
    25b6:	4a62      	ldr	r2, [pc, #392]	; (2740 <computeKalmanBaroOnlyGains+0x6f4>)
    25b8:	0006      	movs	r6, r0
    25ba:	000f      	movs	r7, r1
    25bc:	982e      	ldr	r0, [sp, #184]	; 0xb8
    25be:	992f      	ldr	r1, [sp, #188]	; 0xbc
    25c0:	4b60      	ldr	r3, [pc, #384]	; (2744 <computeKalmanBaroOnlyGains+0x6f8>)
    25c2:	47a0      	blx	r4
    25c4:	0002      	movs	r2, r0
    25c6:	000b      	movs	r3, r1
    25c8:	0030      	movs	r0, r6
    25ca:	0039      	movs	r1, r7
    25cc:	47a8      	blx	r5
    25ce:	9a06      	ldr	r2, [sp, #24]
    25d0:	9b07      	ldr	r3, [sp, #28]
    25d2:	0006      	movs	r6, r0
    25d4:	000f      	movs	r7, r1
    25d6:	9802      	ldr	r0, [sp, #8]
    25d8:	9903      	ldr	r1, [sp, #12]
    25da:	47a0      	blx	r4
    25dc:	0002      	movs	r2, r0
    25de:	000b      	movs	r3, r1
    25e0:	0030      	movs	r0, r6
    25e2:	0039      	movs	r1, r7
    25e4:	4e5a      	ldr	r6, [pc, #360]	; (2750 <computeKalmanBaroOnlyGains+0x704>)
    25e6:	47b0      	blx	r6
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
    25e8:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    25ea:	9b39      	ldr	r3, [sp, #228]	; 0xe4

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
    25ec:	9022      	str	r0, [sp, #136]	; 0x88
    25ee:	9123      	str	r1, [sp, #140]	; 0x8c
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
    25f0:	9830      	ldr	r0, [sp, #192]	; 0xc0
    25f2:	9931      	ldr	r1, [sp, #196]	; 0xc4
    25f4:	47a8      	blx	r5
    25f6:	4a52      	ldr	r2, [pc, #328]	; (2740 <computeKalmanBaroOnlyGains+0x6f4>)
    25f8:	0006      	movs	r6, r0
    25fa:	000f      	movs	r7, r1
    25fc:	9832      	ldr	r0, [sp, #200]	; 0xc8
    25fe:	9933      	ldr	r1, [sp, #204]	; 0xcc
    2600:	4b50      	ldr	r3, [pc, #320]	; (2744 <computeKalmanBaroOnlyGains+0x6f8>)
    2602:	47a0      	blx	r4
    2604:	0002      	movs	r2, r0
    2606:	000b      	movs	r3, r1
    2608:	0030      	movs	r0, r6
    260a:	0039      	movs	r1, r7
    260c:	47a8      	blx	r5
    260e:	9a06      	ldr	r2, [sp, #24]
    2610:	9b07      	ldr	r3, [sp, #28]
    2612:	0006      	movs	r6, r0
    2614:	000f      	movs	r7, r1
    2616:	9804      	ldr	r0, [sp, #16]
    2618:	9905      	ldr	r1, [sp, #20]
    261a:	47a0      	blx	r4
    261c:	0002      	movs	r2, r0
    261e:	000b      	movs	r3, r1
    2620:	0030      	movs	r0, r6
    2622:	0039      	movs	r1, r7
    2624:	4e4a      	ldr	r6, [pc, #296]	; (2750 <computeKalmanBaroOnlyGains+0x704>)
    2626:	47b0      	blx	r6
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
    2628:	2200      	movs	r2, #0
    262a:	2300      	movs	r3, #0
        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
    262c:	9006      	str	r0, [sp, #24]
    262e:	9107      	str	r1, [sp, #28]
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
    2630:	9828      	ldr	r0, [sp, #160]	; 0xa0
    2632:	9929      	ldr	r1, [sp, #164]	; 0xa4
    2634:	47a0      	blx	r4
    2636:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    2638:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    263a:	47a8      	blx	r5
    263c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    263e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    2640:	47a8      	blx	r5
    2642:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2644:	9b25      	ldr	r3, [sp, #148]	; 0x94
    2646:	0006      	movs	r6, r0
    2648:	000f      	movs	r7, r1
    264a:	9800      	ldr	r0, [sp, #0]
    264c:	9901      	ldr	r1, [sp, #4]
    264e:	47a0      	blx	r4
    2650:	0002      	movs	r2, r0
    2652:	000b      	movs	r3, r1
    2654:	0030      	movs	r0, r6
    2656:	0039      	movs	r1, r7
    2658:	4e3d      	ldr	r6, [pc, #244]	; (2750 <computeKalmanBaroOnlyGains+0x704>)
    265a:	47b0      	blx	r6
        pest[2][1] = pestp[1][2] - baro_kgain[2] * pestp[1][0];
    265c:	2200      	movs	r2, #0
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
    265e:	9000      	str	r0, [sp, #0]
    2660:	9101      	str	r1, [sp, #4]
        pest[2][1] = pestp[1][2] - baro_kgain[2] * pestp[1][0];
    2662:	982c      	ldr	r0, [sp, #176]	; 0xb0
    2664:	992d      	ldr	r1, [sp, #180]	; 0xb4
    2666:	2300      	movs	r3, #0
    2668:	47a0      	blx	r4
    266a:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    266c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    266e:	47a8      	blx	r5
    2670:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    2672:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    2674:	47a8      	blx	r5
    2676:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2678:	9b25      	ldr	r3, [sp, #148]	; 0x94
    267a:	0006      	movs	r6, r0
    267c:	000f      	movs	r7, r1
    267e:	9802      	ldr	r0, [sp, #8]
    2680:	9903      	ldr	r1, [sp, #12]
    2682:	47a0      	blx	r4
    2684:	0002      	movs	r2, r0
    2686:	000b      	movs	r3, r1
    2688:	0030      	movs	r0, r6
    268a:	0039      	movs	r1, r7
    268c:	4e30      	ldr	r6, [pc, #192]	; (2750 <computeKalmanBaroOnlyGains+0x704>)
    268e:	47b0      	blx	r6
        pest[2][2] = pestp[2][2] - baro_kgain[2] * pestp[2][0];
    2690:	2200      	movs	r2, #0
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
        pest[2][1] = pestp[1][2] - baro_kgain[2] * pestp[1][0];
    2692:	9002      	str	r0, [sp, #8]
    2694:	9103      	str	r1, [sp, #12]
        pest[2][2] = pestp[2][2] - baro_kgain[2] * pestp[2][0];
    2696:	9830      	ldr	r0, [sp, #192]	; 0xc0
    2698:	9931      	ldr	r1, [sp, #196]	; 0xc4
    269a:	2300      	movs	r3, #0
    269c:	47a0      	blx	r4
    269e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    26a0:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    26a2:	47a8      	blx	r5
    26a4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    26a6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    26a8:	47a8      	blx	r5
    26aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
    26ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
    26ae:	0006      	movs	r6, r0
    26b0:	000f      	movs	r7, r1
    26b2:	9804      	ldr	r0, [sp, #16]
    26b4:	9905      	ldr	r1, [sp, #20]
    26b6:	47a0      	blx	r4
    26b8:	4c25      	ldr	r4, [pc, #148]	; (2750 <computeKalmanBaroOnlyGains+0x704>)
    26ba:	000b      	movs	r3, r1
    26bc:	0002      	movs	r2, r0
    26be:	0039      	movs	r1, r7
    26c0:	0030      	movs	r0, r6
    26c2:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    26c4:	2400      	movs	r4, #0
    26c6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
        pest[2][1] = pestp[1][2] - baro_kgain[2] * pestp[1][0];
        pest[2][2] = pestp[2][2] - baro_kgain[2] * pestp[2][0];
    26c8:	9004      	str	r0, [sp, #16]
    26ca:	9105      	str	r1, [sp, #20]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    26cc:	3301      	adds	r3, #1
    26ce:	9327      	str	r3, [sp, #156]	; 0x9c
        for( i = 0; i <= 2; i++) {
            if( (baro_kgain[i] - lastkgain[i])/lastkgain[i] > 0.00001)
    26d0:	4b1e      	ldr	r3, [pc, #120]	; (274c <computeKalmanBaroOnlyGains+0x700>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    26d2:	9424      	str	r4, [sp, #144]	; 0x90
        k++;
        for( i = 0; i <= 2; i++) {
            if( (baro_kgain[i] - lastkgain[i])/lastkgain[i] > 0.00001)
    26d4:	932c      	str	r3, [sp, #176]	; 0xb0
    26d6:	4b1e      	ldr	r3, [pc, #120]	; (2750 <computeKalmanBaroOnlyGains+0x704>)
    26d8:	932e      	str	r3, [sp, #184]	; 0xb8
    26da:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    26dc:	18e3      	adds	r3, r4, r3
    26de:	681a      	ldr	r2, [r3, #0]
    26e0:	685b      	ldr	r3, [r3, #4]
    26e2:	9228      	str	r2, [sp, #160]	; 0xa0
    26e4:	9329      	str	r3, [sp, #164]	; 0xa4
    26e6:	9828      	ldr	r0, [sp, #160]	; 0xa0
    26e8:	9929      	ldr	r1, [sp, #164]	; 0xa4
    26ea:	ab3e      	add	r3, sp, #248	; 0xf8
    26ec:	18e5      	adds	r5, r4, r3
    26ee:	682e      	ldr	r6, [r5, #0]
    26f0:	686f      	ldr	r7, [r5, #4]
    26f2:	952a      	str	r5, [sp, #168]	; 0xa8
    26f4:	0032      	movs	r2, r6
    26f6:	003b      	movs	r3, r7
    26f8:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
    26fa:	47a8      	blx	r5
    26fc:	0032      	movs	r2, r6
    26fe:	003b      	movs	r3, r7
    2700:	4e11      	ldr	r6, [pc, #68]	; (2748 <computeKalmanBaroOnlyGains+0x6fc>)
    2702:	47b0      	blx	r6
    2704:	4b14      	ldr	r3, [pc, #80]	; (2758 <computeKalmanBaroOnlyGains+0x70c>)
    2706:	4a15      	ldr	r2, [pc, #84]	; (275c <computeKalmanBaroOnlyGains+0x710>)
    2708:	4e15      	ldr	r6, [pc, #84]	; (2760 <computeKalmanBaroOnlyGains+0x714>)
    270a:	47b0      	blx	r6
                notdone++;
    270c:	1e43      	subs	r3, r0, #1
    270e:	4198      	sbcs	r0, r3
    2710:	9b24      	ldr	r3, [sp, #144]	; 0x90
            lastkgain[i] = baro_kgain[i];
    2712:	992a      	ldr	r1, [sp, #168]	; 0xa8
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++) {
            if( (baro_kgain[i] - lastkgain[i])/lastkgain[i] > 0.00001)
                notdone++;
    2714:	181b      	adds	r3, r3, r0
    2716:	3408      	adds	r4, #8
    2718:	9324      	str	r3, [sp, #144]	; 0x90
            lastkgain[i] = baro_kgain[i];
    271a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    271c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    271e:	600a      	str	r2, [r1, #0]
    2720:	604b      	str	r3, [r1, #4]
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++) {
    2722:	2c18      	cmp	r4, #24
    2724:	d1d9      	bne.n	26da <computeKalmanBaroOnlyGains+0x68e>
            if( (baro_kgain[i] - lastkgain[i])/lastkgain[i] > 0.00001)
                notdone++;
            lastkgain[i] = baro_kgain[i];
        }
        if( notdone || k < 100)
    2726:	9b24      	ldr	r3, [sp, #144]	; 0x90
    2728:	2b00      	cmp	r3, #0
    272a:	d000      	beq.n	272e <computeKalmanBaroOnlyGains+0x6e2>
    272c:	e4f8      	b.n	2120 <computeKalmanBaroOnlyGains+0xd4>
    272e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    2730:	2b63      	cmp	r3, #99	; 0x63
    2732:	dc00      	bgt.n	2736 <computeKalmanBaroOnlyGains+0x6ea>
    2734:	e4f4      	b.n	2120 <computeKalmanBaroOnlyGains+0xd4>
    2736:	e015      	b.n	2764 <computeKalmanBaroOnlyGains+0x718>
    2738:	eb1c432d 	.word	0xeb1c432d
    273c:	3eea36e2 	.word	0x3eea36e2
    2740:	47ae147b 	.word	0x47ae147b
    2744:	3f747ae1 	.word	0x3f747ae1
    2748:	000056fd 	.word	0x000056fd
    274c:	20000310 	.word	0x20000310
    2750:	00006439 	.word	0x00006439
    2754:	3ff00000 	.word	0x3ff00000
    2758:	3ee4f8b5 	.word	0x3ee4f8b5
    275c:	88e368f1 	.word	0x88e368f1
    2760:	00004ba9 	.word	0x00004ba9
            continue;
        else
            break;
    }
}
    2764:	b045      	add	sp, #276	; 0x114
    2766:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002768 <KalmanBothUpdate>:
    velocity = estp[1] + baro_kgain[1] * alt_inovation;
    accel =    estp[2] + baro_kgain[2] * alt_inovation;

}

void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    2768:	b5f0      	push	{r4, r5, r6, r7, lr}
    276a:	b08f      	sub	sp, #60	; 0x3c
    276c:	9208      	str	r2, [sp, #32]
    276e:	9309      	str	r3, [sp, #36]	; 0x24

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    2770:	4b68      	ldr	r3, [pc, #416]	; (2914 <KalmanBothUpdate+0x1ac>)
    2772:	4d69      	ldr	r5, [pc, #420]	; (2918 <KalmanBothUpdate+0x1b0>)
    2774:	685c      	ldr	r4, [r3, #4]
    2776:	681b      	ldr	r3, [r3, #0]
    2778:	9300      	str	r3, [sp, #0]
    277a:	9401      	str	r4, [sp, #4]
    277c:	4b67      	ldr	r3, [pc, #412]	; (291c <KalmanBothUpdate+0x1b4>)
    velocity = estp[1] + baro_kgain[1] * alt_inovation;
    accel =    estp[2] + baro_kgain[2] * alt_inovation;

}

void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    277e:	9006      	str	r0, [sp, #24]
    2780:	9107      	str	r1, [sp, #28]

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    2782:	685c      	ldr	r4, [r3, #4]
    2784:	681b      	ldr	r3, [r3, #0]
    2786:	9800      	ldr	r0, [sp, #0]
    2788:	9901      	ldr	r1, [sp, #4]
    278a:	9302      	str	r3, [sp, #8]
    278c:	9403      	str	r4, [sp, #12]
    278e:	4b64      	ldr	r3, [pc, #400]	; (2920 <KalmanBothUpdate+0x1b8>)
    2790:	685c      	ldr	r4, [r3, #4]
    2792:	681b      	ldr	r3, [r3, #0]
    2794:	9304      	str	r3, [sp, #16]
    2796:	9405      	str	r4, [sp, #20]
    2798:	4c62      	ldr	r4, [pc, #392]	; (2924 <KalmanBothUpdate+0x1bc>)
    279a:	6822      	ldr	r2, [r4, #0]
    279c:	6863      	ldr	r3, [r4, #4]
    279e:	47a8      	blx	r5
    27a0:	68a2      	ldr	r2, [r4, #8]
    27a2:	68e3      	ldr	r3, [r4, #12]
    27a4:	0006      	movs	r6, r0
    27a6:	000f      	movs	r7, r1
    27a8:	9802      	ldr	r0, [sp, #8]
    27aa:	9903      	ldr	r1, [sp, #12]
    27ac:	47a8      	blx	r5
    27ae:	0002      	movs	r2, r0
    27b0:	000b      	movs	r3, r1
    27b2:	0030      	movs	r0, r6
    27b4:	0039      	movs	r1, r7
    27b6:	4e5c      	ldr	r6, [pc, #368]	; (2928 <KalmanBothUpdate+0x1c0>)
    27b8:	47b0      	blx	r6
    27ba:	6922      	ldr	r2, [r4, #16]
    27bc:	6963      	ldr	r3, [r4, #20]
    27be:	0006      	movs	r6, r0
    27c0:	000f      	movs	r7, r1
    27c2:	9804      	ldr	r0, [sp, #16]
    27c4:	9905      	ldr	r1, [sp, #20]
    27c6:	47a8      	blx	r5
    27c8:	0002      	movs	r2, r0
    27ca:	000b      	movs	r3, r1
    27cc:	0030      	movs	r0, r6
    27ce:	0039      	movs	r1, r7
    27d0:	4e55      	ldr	r6, [pc, #340]	; (2928 <KalmanBothUpdate+0x1c0>)
    27d2:	47b0      	blx	r6
    27d4:	900a      	str	r0, [sp, #40]	; 0x28
    27d6:	910b      	str	r1, [sp, #44]	; 0x2c
    27d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    27da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    27dc:	4953      	ldr	r1, [pc, #332]	; (292c <KalmanBothUpdate+0x1c4>)
    27de:	600a      	str	r2, [r1, #0]
    27e0:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    27e2:	69a2      	ldr	r2, [r4, #24]
    27e4:	69e3      	ldr	r3, [r4, #28]
    27e6:	9800      	ldr	r0, [sp, #0]
    27e8:	9901      	ldr	r1, [sp, #4]
    27ea:	47a8      	blx	r5
    27ec:	6a22      	ldr	r2, [r4, #32]
    27ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
    27f0:	0006      	movs	r6, r0
    27f2:	000f      	movs	r7, r1
    27f4:	9802      	ldr	r0, [sp, #8]
    27f6:	9903      	ldr	r1, [sp, #12]
    27f8:	47a8      	blx	r5
    27fa:	0002      	movs	r2, r0
    27fc:	000b      	movs	r3, r1
    27fe:	0030      	movs	r0, r6
    2800:	0039      	movs	r1, r7
    2802:	4e49      	ldr	r6, [pc, #292]	; (2928 <KalmanBothUpdate+0x1c0>)
    2804:	47b0      	blx	r6
    2806:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2808:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    280a:	0006      	movs	r6, r0
    280c:	000f      	movs	r7, r1
    280e:	9804      	ldr	r0, [sp, #16]
    2810:	9905      	ldr	r1, [sp, #20]
    2812:	47a8      	blx	r5
    2814:	0002      	movs	r2, r0
    2816:	000b      	movs	r3, r1
    2818:	0030      	movs	r0, r6
    281a:	0039      	movs	r1, r7
    281c:	4e42      	ldr	r6, [pc, #264]	; (2928 <KalmanBothUpdate+0x1c0>)
    281e:	47b0      	blx	r6
    2820:	900c      	str	r0, [sp, #48]	; 0x30
    2822:	910d      	str	r1, [sp, #52]	; 0x34
    2824:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2828:	4940      	ldr	r1, [pc, #256]	; (292c <KalmanBothUpdate+0x1c4>)
    282a:	608a      	str	r2, [r1, #8]
    282c:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    282e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2830:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2832:	9800      	ldr	r0, [sp, #0]
    2834:	9901      	ldr	r1, [sp, #4]
    2836:	47a8      	blx	r5
    2838:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    283a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    283c:	0006      	movs	r6, r0
    283e:	000f      	movs	r7, r1
    2840:	9802      	ldr	r0, [sp, #8]
    2842:	9903      	ldr	r1, [sp, #12]
    2844:	47a8      	blx	r5
    2846:	0002      	movs	r2, r0
    2848:	000b      	movs	r3, r1
    284a:	0030      	movs	r0, r6
    284c:	0039      	movs	r1, r7
    284e:	4e36      	ldr	r6, [pc, #216]	; (2928 <KalmanBothUpdate+0x1c0>)
    2850:	47b0      	blx	r6
    2852:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2854:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2856:	0006      	movs	r6, r0
    2858:	000f      	movs	r7, r1
    285a:	9804      	ldr	r0, [sp, #16]
    285c:	9905      	ldr	r1, [sp, #20]
    285e:	47a8      	blx	r5
    2860:	4c31      	ldr	r4, [pc, #196]	; (2928 <KalmanBothUpdate+0x1c0>)
    2862:	0002      	movs	r2, r0
    2864:	000b      	movs	r3, r1
    2866:	0030      	movs	r0, r6
    2868:	0039      	movs	r1, r7
    286a:	47a0      	blx	r4
    286c:	0003      	movs	r3, r0
    286e:	000c      	movs	r4, r1
    2870:	4a2e      	ldr	r2, [pc, #184]	; (292c <KalmanBothUpdate+0x1c4>)
    2872:	9000      	str	r0, [sp, #0]
    2874:	9101      	str	r1, [sp, #4]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    2876:	9806      	ldr	r0, [sp, #24]
    2878:	9907      	ldr	r1, [sp, #28]
void KalmanBothUpdate( double alt_inovation, double accel_inovation) {

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    287a:	6113      	str	r3, [r2, #16]
    287c:	6154      	str	r4, [r2, #20]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    287e:	4c2c      	ldr	r4, [pc, #176]	; (2930 <KalmanBothUpdate+0x1c8>)
    2880:	6822      	ldr	r2, [r4, #0]
    2882:	6863      	ldr	r3, [r4, #4]
    2884:	47a8      	blx	r5
    2886:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    288a:	4e27      	ldr	r6, [pc, #156]	; (2928 <KalmanBothUpdate+0x1c0>)
    288c:	47b0      	blx	r6
    288e:	68a2      	ldr	r2, [r4, #8]
    2890:	68e3      	ldr	r3, [r4, #12]
    2892:	0006      	movs	r6, r0
    2894:	000f      	movs	r7, r1
    2896:	9808      	ldr	r0, [sp, #32]
    2898:	9909      	ldr	r1, [sp, #36]	; 0x24
    289a:	47a8      	blx	r5
    289c:	0002      	movs	r2, r0
    289e:	000b      	movs	r3, r1
    28a0:	0030      	movs	r0, r6
    28a2:	0039      	movs	r1, r7
    28a4:	4e20      	ldr	r6, [pc, #128]	; (2928 <KalmanBothUpdate+0x1c0>)
    28a6:	47b0      	blx	r6
    28a8:	4b1a      	ldr	r3, [pc, #104]	; (2914 <KalmanBothUpdate+0x1ac>)
    28aa:	6018      	str	r0, [r3, #0]
    28ac:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    28ae:	6922      	ldr	r2, [r4, #16]
    28b0:	6963      	ldr	r3, [r4, #20]
    28b2:	9806      	ldr	r0, [sp, #24]
    28b4:	9907      	ldr	r1, [sp, #28]
    28b6:	47a8      	blx	r5
    28b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    28ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    28bc:	47b0      	blx	r6
    28be:	69a2      	ldr	r2, [r4, #24]
    28c0:	69e3      	ldr	r3, [r4, #28]
    28c2:	0006      	movs	r6, r0
    28c4:	000f      	movs	r7, r1
    28c6:	9808      	ldr	r0, [sp, #32]
    28c8:	9909      	ldr	r1, [sp, #36]	; 0x24
    28ca:	47a8      	blx	r5
    28cc:	0002      	movs	r2, r0
    28ce:	000b      	movs	r3, r1
    28d0:	0030      	movs	r0, r6
    28d2:	0039      	movs	r1, r7
    28d4:	4e14      	ldr	r6, [pc, #80]	; (2928 <KalmanBothUpdate+0x1c0>)
    28d6:	47b0      	blx	r6
    28d8:	4b10      	ldr	r3, [pc, #64]	; (291c <KalmanBothUpdate+0x1b4>)
    28da:	6018      	str	r0, [r3, #0]
    28dc:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    28de:	6a22      	ldr	r2, [r4, #32]
    28e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    28e2:	9806      	ldr	r0, [sp, #24]
    28e4:	9907      	ldr	r1, [sp, #28]
    28e6:	47a8      	blx	r5
    28e8:	9a00      	ldr	r2, [sp, #0]
    28ea:	9b01      	ldr	r3, [sp, #4]
    28ec:	47b0      	blx	r6
    28ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    28f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    28f2:	0006      	movs	r6, r0
    28f4:	000f      	movs	r7, r1
    28f6:	9808      	ldr	r0, [sp, #32]
    28f8:	9909      	ldr	r1, [sp, #36]	; 0x24
    28fa:	47a8      	blx	r5
    28fc:	4c0a      	ldr	r4, [pc, #40]	; (2928 <KalmanBothUpdate+0x1c0>)
    28fe:	0002      	movs	r2, r0
    2900:	000b      	movs	r3, r1
    2902:	0030      	movs	r0, r6
    2904:	0039      	movs	r1, r7
    2906:	47a0      	blx	r4
    2908:	4b05      	ldr	r3, [pc, #20]	; (2920 <KalmanBothUpdate+0x1b8>)
    290a:	6018      	str	r0, [r3, #0]
    290c:	6059      	str	r1, [r3, #4]
}
    290e:	b00f      	add	sp, #60	; 0x3c
    2910:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2912:	46c0      	nop			; (mov r8, r8)
    2914:	20000328 	.word	0x20000328
    2918:	00005f45 	.word	0x00005f45
    291c:	20000308 	.word	0x20000308
    2920:	200002e8 	.word	0x200002e8
    2924:	20000010 	.word	0x20000010
    2928:	000050a5 	.word	0x000050a5
    292c:	20000330 	.word	0x20000330
    2930:	20000348 	.word	0x20000348

00002934 <computeKalmanStates>:

void computeKalmanStates() {
    2934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2936:	4d19      	ldr	r5, [pc, #100]	; (299c <computeKalmanStates+0x68>)
    2938:	4b19      	ldr	r3, [pc, #100]	; (29a0 <computeKalmanStates+0x6c>)
    293a:	6a68      	ldr	r0, [r5, #36]	; 0x24
    293c:	4798      	blx	r3
    293e:	4b19      	ldr	r3, [pc, #100]	; (29a4 <computeKalmanStates+0x70>)
    2940:	4c19      	ldr	r4, [pc, #100]	; (29a8 <computeKalmanStates+0x74>)
    2942:	689a      	ldr	r2, [r3, #8]
    2944:	68db      	ldr	r3, [r3, #12]
    2946:	47a0      	blx	r4
    2948:	4a18      	ldr	r2, [pc, #96]	; (29ac <computeKalmanStates+0x78>)
    294a:	4b19      	ldr	r3, [pc, #100]	; (29b0 <computeKalmanStates+0x7c>)
    294c:	4e19      	ldr	r6, [pc, #100]	; (29b4 <computeKalmanStates+0x80>)
    294e:	47b0      	blx	r6

    pressure = sample.pressureAltitude;
    2950:	6daa      	ldr	r2, [r5, #88]	; 0x58
    2952:	6deb      	ldr	r3, [r5, #92]	; 0x5c

    if (altitude == 0) {
    2954:	4d18      	ldr	r5, [pc, #96]	; (29b8 <computeKalmanStates+0x84>)

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;

    pressure = sample.pressureAltitude;
    2956:	9200      	str	r2, [sp, #0]
    2958:	9301      	str	r3, [sp, #4]

    if (altitude == 0) {
    295a:	4c18      	ldr	r4, [pc, #96]	; (29bc <computeKalmanStates+0x88>)

void computeKalmanStates() {

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    295c:	0006      	movs	r6, r0
    295e:	000f      	movs	r7, r1

    pressure = sample.pressureAltitude;

    if (altitude == 0) {
    2960:	6828      	ldr	r0, [r5, #0]
    2962:	6869      	ldr	r1, [r5, #4]
    2964:	2200      	movs	r2, #0
    2966:	2300      	movs	r3, #0
    2968:	47a0      	blx	r4
    296a:	4c0f      	ldr	r4, [pc, #60]	; (29a8 <computeKalmanStates+0x74>)
    296c:	2800      	cmp	r0, #0
    296e:	d003      	beq.n	2978 <computeKalmanStates+0x44>
        altitude = pressure;
    2970:	9a00      	ldr	r2, [sp, #0]
    2972:	9b01      	ldr	r3, [sp, #4]
    2974:	602a      	str	r2, [r5, #0]
    2976:	606b      	str	r3, [r5, #4]
    }


    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    accel_inovation = acceleration - estp[2];
    2978:	4d11      	ldr	r5, [pc, #68]	; (29c0 <computeKalmanStates+0x8c>)

    //if (flightState < flightCoast) {
        KalmanBothUpdate(alt_inovation, accel_inovation);
    297a:	0030      	movs	r0, r6
    297c:	692a      	ldr	r2, [r5, #16]
    297e:	696b      	ldr	r3, [r5, #20]
    2980:	0039      	movs	r1, r7
    2982:	47a0      	blx	r4
    2984:	682a      	ldr	r2, [r5, #0]
    2986:	686b      	ldr	r3, [r5, #4]
    2988:	0006      	movs	r6, r0
    298a:	000f      	movs	r7, r1
    298c:	9800      	ldr	r0, [sp, #0]
    298e:	9901      	ldr	r1, [sp, #4]
    2990:	47a0      	blx	r4
    2992:	0032      	movs	r2, r6
    2994:	003b      	movs	r3, r7
    2996:	4c0b      	ldr	r4, [pc, #44]	; (29c4 <computeKalmanStates+0x90>)
    2998:	47a0      	blx	r4
   // } else {
    //    KalmanBaroUpdate(alt_inovation);
  //  }
}
    299a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    299c:	200005f0 	.word	0x200005f0
    29a0:	00006c81 	.word	0x00006c81
    29a4:	20000150 	.word	0x20000150
    29a8:	00006439 	.word	0x00006439
    29ac:	33daf8df 	.word	0x33daf8df
    29b0:	4040164b 	.word	0x4040164b
    29b4:	00005f45 	.word	0x00005f45
    29b8:	20000328 	.word	0x20000328
    29bc:	00004b75 	.word	0x00004b75
    29c0:	20000330 	.word	0x20000330
    29c4:	00002769 	.word	0x00002769

000029c8 <makePage>:
u16_t flightAddressLocationInIndex;

u8_t flightStartAddress[3];


void makePage(u8_t bytesToWrite, u8_t* data) {
    29c8:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    29ca:	4a1f      	ldr	r2, [pc, #124]	; (2a48 <makePage+0x80>)
    29cc:	7815      	ldrb	r5, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    29ce:	1943      	adds	r3, r0, r5
    29d0:	2bff      	cmp	r3, #255	; 0xff
    29d2:	dc03      	bgt.n	29dc <makePage+0x14>
    29d4:	2300      	movs	r3, #0
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    29d6:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    29d8:	4c1c      	ldr	r4, [pc, #112]	; (2a4c <makePage+0x84>)
    29da:	e029      	b.n	2a30 <makePage+0x68>
    29dc:	2300      	movs	r3, #0
    29de:	4e1b      	ldr	r6, [pc, #108]	; (2a4c <makePage+0x84>)

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    29e0:	195f      	adds	r7, r3, r5
    29e2:	b2dc      	uxtb	r4, r3
    29e4:	46b4      	mov	ip, r6
    29e6:	2fff      	cmp	r7, #255	; 0xff
    29e8:	dc04      	bgt.n	29f4 <makePage+0x2c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    29ea:	5ccc      	ldrb	r4, [r1, r3]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    29ec:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    29ee:	55f4      	strb	r4, [r6, r7]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    29f0:	b29b      	uxth	r3, r3
    29f2:	e7f5      	b.n	29e0 <makePage+0x18>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    29f4:	2300      	movs	r3, #0
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    29f6:	4f16      	ldr	r7, [pc, #88]	; (2a50 <makePage+0x88>)
    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    29f8:	7013      	strb	r3, [r2, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    29fa:	4665      	mov	r5, ip
    29fc:	18ed      	adds	r5, r5, r3
    29fe:	782e      	ldrb	r6, [r5, #0]
    2a00:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    2a02:	2600      	movs	r6, #0
    2a04:	702e      	strb	r6, [r5, #0]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    2a06:	2580      	movs	r5, #128	; 0x80
    2a08:	3301      	adds	r3, #1
    2a0a:	006d      	lsls	r5, r5, #1
    2a0c:	42ab      	cmp	r3, r5
    2a0e:	d1f4      	bne.n	29fa <makePage+0x32>
    2a10:	2300      	movs	r3, #0
    2a12:	1c5d      	adds	r5, r3, #1
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    2a14:	4284      	cmp	r4, r0
    2a16:	d207      	bcs.n	2a28 <makePage+0x60>
            pageBuffer[dataByte] = data[bytesWritten];
    2a18:	4667      	mov	r7, ip
    2a1a:	5d0e      	ldrb	r6, [r1, r4]
            bytesWritten++;
    2a1c:	3401      	adds	r4, #1
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            pageBuffer[dataByte] = data[bytesWritten];
    2a1e:	54fe      	strb	r6, [r7, r3]
            bytesWritten++;
    2a20:	b2e4      	uxtb	r4, r4
            pageLocation = dataByte + 1;
    2a22:	7015      	strb	r5, [r2, #0]
    2a24:	002b      	movs	r3, r5
    2a26:	e7f4      	b.n	2a12 <makePage+0x4a>
        }
        pageReady = true;
    2a28:	2201      	movs	r2, #1
    2a2a:	4b0a      	ldr	r3, [pc, #40]	; (2a54 <makePage+0x8c>)
    2a2c:	701a      	strb	r2, [r3, #0]
    2a2e:	e009      	b.n	2a44 <makePage+0x7c>

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2a30:	4283      	cmp	r3, r0
    2a32:	d807      	bhi.n	2a44 <makePage+0x7c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    2a34:	5ccf      	ldrb	r7, [r1, r3]
    2a36:	18e6      	adds	r6, r4, r3
    2a38:	5577      	strb	r7, [r6, r5]
            bytesWritten++;
            pageLocation = location + dataByte;
    2a3a:	18ee      	adds	r6, r5, r3
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2a3c:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
    2a3e:	7016      	strb	r6, [r2, #0]
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2a40:	b29b      	uxth	r3, r3
    2a42:	e7f5      	b.n	2a30 <makePage+0x68>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
        }
    }
}
    2a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a46:	46c0      	nop			; (mov r8, r8)
    2a48:	200005e8 	.word	0x200005e8
    2a4c:	200001ae 	.word	0x200001ae
    2a50:	2000037a 	.word	0x2000037a
    2a54:	2000047a 	.word	0x2000047a

00002a58 <writePadBuffer>:

void writePadBuffer(u8_t bytesToWrite, u8_t* data) {
    2a58:	b570      	push	{r4, r5, r6, lr}
    2a5a:	4a0e      	ldr	r2, [pc, #56]	; (2a94 <writePadBuffer+0x3c>)
    2a5c:	4c0e      	ldr	r4, [pc, #56]	; (2a98 <writePadBuffer+0x40>)
    2a5e:	2300      	movs	r3, #0
    u8_t i, j;

    for (i = 1; i < 10; i++) {
        for (j = 0; j < bytesToWrite; j++) {
    2a60:	b2dd      	uxtb	r5, r3
    2a62:	42a8      	cmp	r0, r5
    2a64:	d905      	bls.n	2a72 <writePadBuffer+0x1a>
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
    2a66:	001d      	movs	r5, r3
    2a68:	5cd6      	ldrb	r6, [r2, r3]
    2a6a:	3d23      	subs	r5, #35	; 0x23
    2a6c:	5556      	strb	r6, [r2, r5]
    2a6e:	3301      	adds	r3, #1
    2a70:	e7f6      	b.n	2a60 <writePadBuffer+0x8>
    2a72:	3223      	adds	r2, #35	; 0x23
}

void writePadBuffer(u8_t bytesToWrite, u8_t* data) {
    u8_t i, j;

    for (i = 1; i < 10; i++) {
    2a74:	42a2      	cmp	r2, r4
    2a76:	d1f2      	bne.n	2a5e <writePadBuffer+0x6>
    2a78:	2300      	movs	r3, #0
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
        }
    }

    for (i = 0; i < bytesToWrite ; i++) {
        padSensorBuffer[9][i] = data[i];
    2a7a:	4c08      	ldr	r4, [pc, #32]	; (2a9c <writePadBuffer+0x44>)
        for (j = 0; j < bytesToWrite; j++) {
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
        }
    }

    for (i = 0; i < bytesToWrite ; i++) {
    2a7c:	b2da      	uxtb	r2, r3
    2a7e:	4290      	cmp	r0, r2
    2a80:	d906      	bls.n	2a90 <writePadBuffer+0x38>
        padSensorBuffer[9][i] = data[i];
    2a82:	001a      	movs	r2, r3
    2a84:	5ccd      	ldrb	r5, [r1, r3]
    2a86:	323c      	adds	r2, #60	; 0x3c
    2a88:	32ff      	adds	r2, #255	; 0xff
    2a8a:	54a5      	strb	r5, [r4, r2]
    2a8c:	3301      	adds	r3, #1
    2a8e:	e7f5      	b.n	2a7c <writePadBuffer+0x24>
    }
}
    2a90:	bd70      	pop	{r4, r5, r6, pc}
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	200004a7 	.word	0x200004a7
    2a98:	200005e2 	.word	0x200005e2
    2a9c:	20000484 	.word	0x20000484

00002aa0 <logFlight>:


void logFlight() {
    2aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    2aa2:	2346      	movs	r3, #70	; 0x46
    2aa4:	466a      	mov	r2, sp
    2aa6:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    2aa8:	2300      	movs	r3, #0

    offsets.TminusZeroTime = sample.sampleTick;

    dataToSend[2] = offsets.TminusZeroTime >> 0;
    2aaa:	4669      	mov	r1, sp
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    2aac:	4668      	mov	r0, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;
    2aae:	7053      	strb	r3, [r2, #1]

    offsets.TminusZeroTime = sample.sampleTick;
    2ab0:	4b11      	ldr	r3, [pc, #68]	; (2af8 <logFlight+0x58>)
    2ab2:	4a12      	ldr	r2, [pc, #72]	; (2afc <logFlight+0x5c>)
    2ab4:	685b      	ldr	r3, [r3, #4]

    dataToSend[2] = offsets.TminusZeroTime >> 0;
    2ab6:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    2ab8:	0a19      	lsrs	r1, r3, #8
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;

    offsets.TminusZeroTime = sample.sampleTick;
    2aba:	6053      	str	r3, [r2, #4]

    dataToSend[2] = offsets.TminusZeroTime >> 0;
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    2abc:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    2abe:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.TminusZeroTime >> 24;
    2ac0:	0e1b      	lsrs	r3, r3, #24
    2ac2:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    2ac4:	6993      	ldr	r3, [r2, #24]

    offsets.TminusZeroTime = sample.sampleTick;

    dataToSend[2] = offsets.TminusZeroTime >> 0;
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    2ac6:	7101      	strb	r1, [r0, #4]
    dataToSend[5] = offsets.TminusZeroTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    2ac8:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = offsets.TminusZeroTime >> 0;
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    dataToSend[5] = offsets.TminusZeroTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    2aca:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    2acc:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    2ace:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    2ad0:	0e1b      	lsrs	r3, r3, #24
    2ad2:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    2ad4:	6a13      	ldr	r3, [r2, #32]
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    dataToSend[5] = offsets.TminusZeroTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    2ad6:	7201      	strb	r1, [r0, #8]
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    2ad8:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    2ada:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    2adc:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    2ade:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    2ae0:	0e1b      	lsrs	r3, r3, #24
    2ae2:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    2ae4:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    dataToSend[12] = offsets.groundTemperature >> 16;
    2ae6:	7302      	strb	r2, [r0, #12]
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    2ae8:	73c3      	strb	r3, [r0, #15]
    dataToSend[5] = offsets.TminusZeroTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;
    2aea:	4669      	mov	r1, sp
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
    2aec:	2010      	movs	r0, #16
    2aee:	4b04      	ldr	r3, [pc, #16]	; (2b00 <logFlight+0x60>)
    2af0:	4798      	blx	r3
}
    2af2:	b005      	add	sp, #20
    2af4:	bd00      	pop	{pc}
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	200005f0 	.word	0x200005f0
    2afc:	20000150 	.word	0x20000150
    2b00:	000029c9 	.word	0x000029c9

00002b04 <logEvent>:

void logEvent(u8_t eventType) {
    2b04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;
    2b06:	4d12      	ldr	r5, [pc, #72]	; (2b50 <logEvent+0x4c>)
    2b08:	4b12      	ldr	r3, [pc, #72]	; (2b54 <logEvent+0x50>)
    2b0a:	686a      	ldr	r2, [r5, #4]
    2b0c:	685b      	ldr	r3, [r3, #4]

    dataToSend[0] = EVENT_LOG;
    2b0e:	ac01      	add	r4, sp, #4
void logEvent(u8_t eventType) {

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;
    2b10:	1ad3      	subs	r3, r2, r3

    dataToSend[0] = EVENT_LOG;
    2b12:	2245      	movs	r2, #69	; 0x45
    2b14:	7022      	strb	r2, [r4, #0]
    dataToSend[1] = eventType;
    dataToSend[2] = eventTick >> 0;
    dataToSend[3] = eventTick >> 8;
    2b16:	0a1a      	lsrs	r2, r3, #8
    dataToSend[4] = eventTick >> 16;
    dataToSend[5] = eventTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    2b18:	4e0f      	ldr	r6, [pc, #60]	; (2b58 <logEvent+0x54>)

    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = eventTick >> 0;
    2b1a:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = eventTick >> 8;
    2b1c:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = eventTick >> 16;
    2b1e:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = eventTick >> 24;
    2b20:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = eventTick >> 0;
    dataToSend[3] = eventTick >> 8;
    dataToSend[4] = eventTick >> 16;
    2b22:	7122      	strb	r2, [r4, #4]
    dataToSend[5] = eventTick >> 24;
    2b24:	7163      	strb	r3, [r4, #5]
    u8_t dataToSend[12];

    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    2b26:	7060      	strb	r0, [r4, #1]
    dataToSend[2] = eventTick >> 0;
    dataToSend[3] = eventTick >> 8;
    dataToSend[4] = eventTick >> 16;
    dataToSend[5] = eventTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    2b28:	47b0      	blx	r6
    2b2a:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 8;
    2b2c:	47b0      	blx	r6
    2b2e:	1200      	asrs	r0, r0, #8
    2b30:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 16;
    2b32:	47b0      	blx	r6
    2b34:	1400      	asrs	r0, r0, #16
    2b36:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = altitudeAGL() >> 24;
    2b38:	47b0      	blx	r6
    2b3a:	1600      	asrs	r0, r0, #24
    2b3c:	7260      	strb	r0, [r4, #9]

    dataToSend[10] = sample.voltage.batV >> 0;
    2b3e:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    2b40:	0021      	movs	r1, r4
    dataToSend[6] = altitudeAGL() >> 0;
    dataToSend[7] = altitudeAGL() >> 8;
    dataToSend[8] = altitudeAGL() >> 16;
    dataToSend[9] = altitudeAGL() >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    2b42:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    2b44:	0a1b      	lsrs	r3, r3, #8
    2b46:	72e3      	strb	r3, [r4, #11]

    makePage(bytesToSend, dataToSend);
    2b48:	200c      	movs	r0, #12
    2b4a:	4b04      	ldr	r3, [pc, #16]	; (2b5c <logEvent+0x58>)
    2b4c:	4798      	blx	r3

}
    2b4e:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    2b50:	200005f0 	.word	0x200005f0
    2b54:	20000150 	.word	0x20000150
    2b58:	00000b25 	.word	0x00000b25
    2b5c:	000029c9 	.word	0x000029c9

00002b60 <logSensors>:

void logSensors() {

    writeLog = false;
    2b60:	2200      	movs	r2, #0

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2b62:	b5f0      	push	{r4, r5, r6, r7, lr}

    writeLog = false;
    2b64:	4b59      	ldr	r3, [pc, #356]	; (2ccc <logSensors+0x16c>)

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2b66:	b08f      	sub	sp, #60	; 0x3c

    writeLog = false;
    2b68:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = SENSOR_LOG_LENGTH;
    u8_t dataToSend[SENSOR_LOG_LENGTH];

    float fractionalAccel = accel - (int16_t)(accel);
    2b6a:	4b59      	ldr	r3, [pc, #356]	; (2cd0 <logSensors+0x170>)
    2b6c:	681e      	ldr	r6, [r3, #0]
    2b6e:	685f      	ldr	r7, [r3, #4]
    int16_t fractAccelPart = fractionalAccel * 1000;
    2b70:	4b58      	ldr	r3, [pc, #352]	; (2cd4 <logSensors+0x174>)
    2b72:	0039      	movs	r1, r7
    2b74:	0030      	movs	r0, r6
    2b76:	4798      	blx	r3
    2b78:	4d57      	ldr	r5, [pc, #348]	; (2cd8 <logSensors+0x178>)
    2b7a:	b200      	sxth	r0, r0
    2b7c:	47a8      	blx	r5
    2b7e:	4c57      	ldr	r4, [pc, #348]	; (2cdc <logSensors+0x17c>)
    2b80:	0002      	movs	r2, r0
    2b82:	000b      	movs	r3, r1
    2b84:	0030      	movs	r0, r6
    2b86:	0039      	movs	r1, r7
    2b88:	47a0      	blx	r4
    2b8a:	4f55      	ldr	r7, [pc, #340]	; (2ce0 <logSensors+0x180>)
    2b8c:	47b8      	blx	r7
    2b8e:	4b55      	ldr	r3, [pc, #340]	; (2ce4 <logSensors+0x184>)
    2b90:	4955      	ldr	r1, [pc, #340]	; (2ce8 <logSensors+0x188>)
    2b92:	4798      	blx	r3
    2b94:	4e55      	ldr	r6, [pc, #340]	; (2cec <logSensors+0x18c>)
    2b96:	47b0      	blx	r6
    2b98:	b203      	sxth	r3, r0
    2b9a:	9301      	str	r3, [sp, #4]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    2b9c:	4b54      	ldr	r3, [pc, #336]	; (2cf0 <logSensors+0x190>)
    2b9e:	681a      	ldr	r2, [r3, #0]
    2ba0:	685b      	ldr	r3, [r3, #4]
    2ba2:	9202      	str	r2, [sp, #8]
    2ba4:	9303      	str	r3, [sp, #12]
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2ba6:	0010      	movs	r0, r2
    2ba8:	0019      	movs	r1, r3
    2baa:	4b4a      	ldr	r3, [pc, #296]	; (2cd4 <logSensors+0x174>)
    2bac:	4798      	blx	r3
    2bae:	b200      	sxth	r0, r0
    2bb0:	47a8      	blx	r5
    2bb2:	0002      	movs	r2, r0
    2bb4:	000b      	movs	r3, r1
    2bb6:	9802      	ldr	r0, [sp, #8]
    2bb8:	9903      	ldr	r1, [sp, #12]
    2bba:	47a0      	blx	r4
    2bbc:	47b8      	blx	r7
    2bbe:	494a      	ldr	r1, [pc, #296]	; (2ce8 <logSensors+0x188>)
    2bc0:	4b48      	ldr	r3, [pc, #288]	; (2ce4 <logSensors+0x184>)
    2bc2:	4798      	blx	r3
    2bc4:	47b0      	blx	r6

    dataToSend[0] = SENSOR_LOG;
    2bc6:	2353      	movs	r3, #83	; 0x53

    dataToSend[1] = sample.sampleTick >> 0;
    2bc8:	4d4a      	ldr	r5, [pc, #296]	; (2cf4 <logSensors+0x194>)
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;
    2bca:	ac05      	add	r4, sp, #20
    2bcc:	7023      	strb	r3, [r4, #0]

    dataToSend[1] = sample.sampleTick >> 0;
    2bce:	686b      	ldr	r3, [r5, #4]

    float fractionalAccel = accel - (int16_t)(accel);
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2bd0:	b206      	sxth	r6, r0

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    2bd2:	0a1a      	lsrs	r2, r3, #8
    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    2bd4:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    2bd6:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    2bd8:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    2bda:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    2bdc:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    2bde:	7123      	strb	r3, [r4, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    2be0:	4f45      	ldr	r7, [pc, #276]	; (2cf8 <logSensors+0x198>)
    2be2:	47b8      	blx	r7
    2be4:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    2be6:	47b8      	blx	r7
    2be8:	1200      	asrs	r0, r0, #8
    2bea:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    2bec:	47b8      	blx	r7
    2bee:	1400      	asrs	r0, r0, #16
    2bf0:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    2bf2:	47b8      	blx	r7

    dataToSend[9] = (int16_t)(accel) >> 0;
    2bf4:	4b36      	ldr	r3, [pc, #216]	; (2cd0 <logSensors+0x170>)
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    2bf6:	1600      	asrs	r0, r0, #24
    2bf8:	7220      	strb	r0, [r4, #8]

    dataToSend[9] = (int16_t)(accel) >> 0;
    2bfa:	6818      	ldr	r0, [r3, #0]
    2bfc:	6859      	ldr	r1, [r3, #4]
    2bfe:	4b35      	ldr	r3, [pc, #212]	; (2cd4 <logSensors+0x174>)
    2c00:	4798      	blx	r3
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2c02:	466b      	mov	r3, sp
    2c04:	791b      	ldrb	r3, [r3, #4]
    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    2c06:	b200      	sxth	r0, r0
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2c08:	72e3      	strb	r3, [r4, #11]
    dataToSend[12] = fractAccelPart >> 8;
    2c0a:	9b01      	ldr	r3, [sp, #4]
    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    2c0c:	7260      	strb	r0, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    2c0e:	1200      	asrs	r0, r0, #8
    2c10:	72a0      	strb	r0, [r4, #10]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    2c12:	1218      	asrs	r0, r3, #8

    dataToSend[13] = (int16_t)(velocity) >> 0;
    2c14:	4b36      	ldr	r3, [pc, #216]	; (2cf0 <logSensors+0x190>)
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    2c16:	7320      	strb	r0, [r4, #12]

    dataToSend[13] = (int16_t)(velocity) >> 0;
    2c18:	6818      	ldr	r0, [r3, #0]
    2c1a:	6859      	ldr	r1, [r3, #4]
    2c1c:	4b2d      	ldr	r3, [pc, #180]	; (2cd4 <logSensors+0x174>)
    2c1e:	4798      	blx	r3
    2c20:	b200      	sxth	r0, r0
    2c22:	7360      	strb	r0, [r4, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    2c24:	73e6      	strb	r6, [r4, #15]
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2c26:	1200      	asrs	r0, r0, #8
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    2c28:	1236      	asrs	r6, r6, #8

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2c2a:	4b34      	ldr	r3, [pc, #208]	; (2cfc <logSensors+0x19c>)
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2c2c:	73a0      	strb	r0, [r4, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    2c2e:	7426      	strb	r6, [r4, #16]

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2c30:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2c32:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    2c34:	4798      	blx	r3
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    2c36:	0a03      	lsrs	r3, r0, #8
    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2c38:	7460      	strb	r0, [r4, #17]
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    2c3a:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    2c3c:	0c03      	lsrs	r3, r0, #16
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;
    2c3e:	0e00      	lsrs	r0, r0, #24
    2c40:	7520      	strb	r0, [r4, #20]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    2c42:	74e3      	strb	r3, [r4, #19]
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    2c44:	2220      	movs	r2, #32
    2c46:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    makePage(bytesToSend, dataToSend);
    2c48:	0021      	movs	r1, r4
    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    2c4a:	7563      	strb	r3, [r4, #21]
    dataToSend[22] = sample.accelXint >> 8;
    2c4c:	121b      	asrs	r3, r3, #8
    2c4e:	75a3      	strb	r3, [r4, #22]

    dataToSend[23] = sample.accelYint >> 0;
    2c50:	2228      	movs	r2, #40	; 0x28
    2c52:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    makePage(bytesToSend, dataToSend);
    2c54:	2023      	movs	r0, #35	; 0x23
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    dataToSend[22] = sample.accelXint >> 8;

    dataToSend[23] = sample.accelYint >> 0;
    2c56:	75e3      	strb	r3, [r4, #23]
    dataToSend[24] = sample.accelYint >> 8;
    2c58:	121b      	asrs	r3, r3, #8
    2c5a:	7623      	strb	r3, [r4, #24]

    dataToSend[25] = sample.accelZint >> 0;
    2c5c:	2230      	movs	r2, #48	; 0x30
    2c5e:	5eab      	ldrsh	r3, [r5, r2]
    2c60:	7663      	strb	r3, [r4, #25]
    dataToSend[26] = sample.accelZint >> 8;
    2c62:	121b      	asrs	r3, r3, #8
    2c64:	76a3      	strb	r3, [r4, #26]

    dataToSend[27] = sample.gyroXint >> 0;
    2c66:	2238      	movs	r2, #56	; 0x38
    2c68:	5eab      	ldrsh	r3, [r5, r2]
    2c6a:	76e3      	strb	r3, [r4, #27]
    dataToSend[28] = sample.gyroXint >> 8;
    2c6c:	121b      	asrs	r3, r3, #8
    2c6e:	7723      	strb	r3, [r4, #28]

    dataToSend[29] = sample.gyroYint >> 0;
    2c70:	1cab      	adds	r3, r5, #2
    2c72:	223e      	movs	r2, #62	; 0x3e
    2c74:	5e9b      	ldrsh	r3, [r3, r2]
    2c76:	7763      	strb	r3, [r4, #29]
    dataToSend[30] = sample.gyroYint >> 8;
    2c78:	121b      	asrs	r3, r3, #8
    2c7a:	77a3      	strb	r3, [r4, #30]

    dataToSend[31] = sample.gyroZint >> 0;
    2c7c:	002b      	movs	r3, r5
    2c7e:	3348      	adds	r3, #72	; 0x48
    2c80:	2200      	movs	r2, #0
    2c82:	5e9b      	ldrsh	r3, [r3, r2]
    dataToSend[32] = sample.gyroZint >> 8;
    2c84:	aa04      	add	r2, sp, #16
    dataToSend[28] = sample.gyroXint >> 8;

    dataToSend[29] = sample.gyroYint >> 0;
    dataToSend[30] = sample.gyroYint >> 8;

    dataToSend[31] = sample.gyroZint >> 0;
    2c86:	77e3      	strb	r3, [r4, #31]
    dataToSend[32] = sample.gyroZint >> 8;
    2c88:	3205      	adds	r2, #5
    2c8a:	121b      	asrs	r3, r3, #8
    2c8c:	77d3      	strb	r3, [r2, #31]

    dataToSend[33] = sample.analogRaw >> 0;
    2c8e:	8b2b      	ldrh	r3, [r5, #24]
    2c90:	aa04      	add	r2, sp, #16
    2c92:	3206      	adds	r2, #6
    2c94:	77d3      	strb	r3, [r2, #31]
    dataToSend[34] = sample.analogRaw >> 8;
    2c96:	aa04      	add	r2, sp, #16
    2c98:	3207      	adds	r2, #7
    2c9a:	0a1b      	lsrs	r3, r3, #8
    2c9c:	77d3      	strb	r3, [r2, #31]

    makePage(bytesToSend, dataToSend);
    2c9e:	4b18      	ldr	r3, [pc, #96]	; (2d00 <logSensors+0x1a0>)
    2ca0:	4798      	blx	r3

    if (pageReady) {
    2ca2:	4b18      	ldr	r3, [pc, #96]	; (2d04 <logSensors+0x1a4>)
    2ca4:	781a      	ldrb	r2, [r3, #0]
    2ca6:	2a00      	cmp	r2, #0
    2ca8:	d00e      	beq.n	2cc8 <logSensors+0x168>
        pageReady = false;
    2caa:	2200      	movs	r2, #0
    2cac:	701a      	strb	r2, [r3, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    2cae:	2280      	movs	r2, #128	; 0x80
    2cb0:	4b15      	ldr	r3, [pc, #84]	; (2d08 <logSensors+0x1a8>)
        pinToggle(LedPin);
        AT25SEWritePage(currentAddress,pageToWrite);
    2cb2:	4c16      	ldr	r4, [pc, #88]	; (2d0c <logSensors+0x1ac>)
    2cb4:	0352      	lsls	r2, r2, #13
    2cb6:	61da      	str	r2, [r3, #28]
    2cb8:	4915      	ldr	r1, [pc, #84]	; (2d10 <logSensors+0x1b0>)
    2cba:	4b16      	ldr	r3, [pc, #88]	; (2d14 <logSensors+0x1b4>)
    2cbc:	6820      	ldr	r0, [r4, #0]
    2cbe:	4798      	blx	r3
        currentAddress = (currentAddress + 0x100);
    2cc0:	6823      	ldr	r3, [r4, #0]
    2cc2:	3301      	adds	r3, #1
    2cc4:	33ff      	adds	r3, #255	; 0xff
    2cc6:	6023      	str	r3, [r4, #0]
    }

}
    2cc8:	b00f      	add	sp, #60	; 0x3c
    2cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ccc:	2000019a 	.word	0x2000019a
    2cd0:	200002e8 	.word	0x200002e8
    2cd4:	00006b21 	.word	0x00006b21
    2cd8:	00006b8d 	.word	0x00006b8d
    2cdc:	00006439 	.word	0x00006439
    2ce0:	00006d29 	.word	0x00006d29
    2ce4:	00004e39 	.word	0x00004e39
    2ce8:	447a0000 	.word	0x447a0000
    2cec:	00005061 	.word	0x00005061
    2cf0:	20000308 	.word	0x20000308
    2cf4:	200005f0 	.word	0x200005f0
    2cf8:	00000b25 	.word	0x00000b25
    2cfc:	00004c9d 	.word	0x00004c9d
    2d00:	000029c9 	.word	0x000029c9
    2d04:	2000047a 	.word	0x2000047a
    2d08:	41004400 	.word	0x41004400
    2d0c:	20000480 	.word	0x20000480
    2d10:	2000037a 	.word	0x2000037a
    2d14:	000002a5 	.word	0x000002a5

00002d18 <logSensorsOnPad>:

void logSensorsOnPad() {

    writeLog = false;
    2d18:	2200      	movs	r2, #0
        currentAddress = (currentAddress + 0x100);
    }

}

void logSensorsOnPad() {
    2d1a:	b5f0      	push	{r4, r5, r6, r7, lr}

    writeLog = false;
    2d1c:	4b50      	ldr	r3, [pc, #320]	; (2e60 <logSensorsOnPad+0x148>)
        currentAddress = (currentAddress + 0x100);
    }

}

void logSensorsOnPad() {
    2d1e:	b08f      	sub	sp, #60	; 0x3c

    writeLog = false;
    2d20:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = SENSOR_LOG_LENGTH;
    u8_t dataToSend[SENSOR_LOG_LENGTH];

    float fractionalAccel = accel - (int16_t)(accel);
    2d22:	4b50      	ldr	r3, [pc, #320]	; (2e64 <logSensorsOnPad+0x14c>)
    2d24:	681c      	ldr	r4, [r3, #0]
    2d26:	685d      	ldr	r5, [r3, #4]
    int16_t fractAccelPart = fractionalAccel * 1000;
    2d28:	4b4f      	ldr	r3, [pc, #316]	; (2e68 <logSensorsOnPad+0x150>)
    2d2a:	0029      	movs	r1, r5
    2d2c:	0020      	movs	r0, r4
    2d2e:	4798      	blx	r3
    2d30:	4e4e      	ldr	r6, [pc, #312]	; (2e6c <logSensorsOnPad+0x154>)
    2d32:	b200      	sxth	r0, r0
    2d34:	47b0      	blx	r6
    2d36:	4f4e      	ldr	r7, [pc, #312]	; (2e70 <logSensorsOnPad+0x158>)
    2d38:	0002      	movs	r2, r0
    2d3a:	000b      	movs	r3, r1
    2d3c:	0020      	movs	r0, r4
    2d3e:	0029      	movs	r1, r5
    2d40:	47b8      	blx	r7
    2d42:	4c4c      	ldr	r4, [pc, #304]	; (2e74 <logSensorsOnPad+0x15c>)
    2d44:	47a0      	blx	r4
    2d46:	4d4c      	ldr	r5, [pc, #304]	; (2e78 <logSensorsOnPad+0x160>)
    2d48:	494c      	ldr	r1, [pc, #304]	; (2e7c <logSensorsOnPad+0x164>)
    2d4a:	47a8      	blx	r5
    2d4c:	4b4c      	ldr	r3, [pc, #304]	; (2e80 <logSensorsOnPad+0x168>)
    2d4e:	4798      	blx	r3
    2d50:	b203      	sxth	r3, r0
    2d52:	9301      	str	r3, [sp, #4]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    2d54:	4b4b      	ldr	r3, [pc, #300]	; (2e84 <logSensorsOnPad+0x16c>)
    2d56:	681a      	ldr	r2, [r3, #0]
    2d58:	685b      	ldr	r3, [r3, #4]
    2d5a:	9202      	str	r2, [sp, #8]
    2d5c:	9303      	str	r3, [sp, #12]
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2d5e:	0010      	movs	r0, r2
    2d60:	0019      	movs	r1, r3
    2d62:	4b41      	ldr	r3, [pc, #260]	; (2e68 <logSensorsOnPad+0x150>)
    2d64:	4798      	blx	r3
    2d66:	b200      	sxth	r0, r0
    2d68:	47b0      	blx	r6
    2d6a:	0002      	movs	r2, r0
    2d6c:	000b      	movs	r3, r1
    2d6e:	9802      	ldr	r0, [sp, #8]
    2d70:	9903      	ldr	r1, [sp, #12]
    2d72:	47b8      	blx	r7
    2d74:	47a0      	blx	r4
    2d76:	4941      	ldr	r1, [pc, #260]	; (2e7c <logSensorsOnPad+0x164>)
    2d78:	47a8      	blx	r5
    2d7a:	4b41      	ldr	r3, [pc, #260]	; (2e80 <logSensorsOnPad+0x168>)
    2d7c:	4798      	blx	r3

    dataToSend[0] = SENSOR_LOG;
    2d7e:	2353      	movs	r3, #83	; 0x53

    dataToSend[1] = sample.sampleTick >> 0;
    2d80:	4d41      	ldr	r5, [pc, #260]	; (2e88 <logSensorsOnPad+0x170>)
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;
    2d82:	ac05      	add	r4, sp, #20
    2d84:	7023      	strb	r3, [r4, #0]

    dataToSend[1] = sample.sampleTick >> 0;
    2d86:	686b      	ldr	r3, [r5, #4]

    float fractionalAccel = accel - (int16_t)(accel);
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2d88:	b206      	sxth	r6, r0

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    2d8a:	0a1a      	lsrs	r2, r3, #8
    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    2d8c:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    2d8e:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    2d90:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    2d92:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    2d94:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    2d96:	7123      	strb	r3, [r4, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    2d98:	4f3c      	ldr	r7, [pc, #240]	; (2e8c <logSensorsOnPad+0x174>)
    2d9a:	47b8      	blx	r7
    2d9c:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    2d9e:	47b8      	blx	r7
    2da0:	1200      	asrs	r0, r0, #8
    2da2:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    2da4:	47b8      	blx	r7
    2da6:	1400      	asrs	r0, r0, #16
    2da8:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    2daa:	47b8      	blx	r7

    dataToSend[9] = (int16_t)(accel) >> 0;
    2dac:	4b2d      	ldr	r3, [pc, #180]	; (2e64 <logSensorsOnPad+0x14c>)
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    2dae:	1600      	asrs	r0, r0, #24
    2db0:	7220      	strb	r0, [r4, #8]

    dataToSend[9] = (int16_t)(accel) >> 0;
    2db2:	6818      	ldr	r0, [r3, #0]
    2db4:	6859      	ldr	r1, [r3, #4]
    2db6:	4b2c      	ldr	r3, [pc, #176]	; (2e68 <logSensorsOnPad+0x150>)
    2db8:	4798      	blx	r3
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2dba:	466b      	mov	r3, sp
    2dbc:	791b      	ldrb	r3, [r3, #4]
    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    2dbe:	b200      	sxth	r0, r0
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2dc0:	72e3      	strb	r3, [r4, #11]
    dataToSend[12] = fractAccelPart >> 8;
    2dc2:	9b01      	ldr	r3, [sp, #4]
    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    2dc4:	7260      	strb	r0, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    2dc6:	1200      	asrs	r0, r0, #8
    2dc8:	72a0      	strb	r0, [r4, #10]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    2dca:	1218      	asrs	r0, r3, #8

    dataToSend[13] = (int16_t)(velocity) >> 0;
    2dcc:	4b2d      	ldr	r3, [pc, #180]	; (2e84 <logSensorsOnPad+0x16c>)
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    2dce:	7320      	strb	r0, [r4, #12]

    dataToSend[13] = (int16_t)(velocity) >> 0;
    2dd0:	6818      	ldr	r0, [r3, #0]
    2dd2:	6859      	ldr	r1, [r3, #4]
    2dd4:	4b24      	ldr	r3, [pc, #144]	; (2e68 <logSensorsOnPad+0x150>)
    2dd6:	4798      	blx	r3
    2dd8:	b200      	sxth	r0, r0
    2dda:	7360      	strb	r0, [r4, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    2ddc:	73e6      	strb	r6, [r4, #15]
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2dde:	1200      	asrs	r0, r0, #8
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    2de0:	1236      	asrs	r6, r6, #8
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2de2:	73a0      	strb	r0, [r4, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2de4:	4b2a      	ldr	r3, [pc, #168]	; (2e90 <logSensorsOnPad+0x178>)
    2de6:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2de8:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    2dea:	7426      	strb	r6, [r4, #16]

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2dec:	4798      	blx	r3
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    2dee:	0a03      	lsrs	r3, r0, #8
    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2df0:	7460      	strb	r0, [r4, #17]
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    2df2:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    2df4:	0c03      	lsrs	r3, r0, #16
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;
    2df6:	0e00      	lsrs	r0, r0, #24
    2df8:	7520      	strb	r0, [r4, #20]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    2dfa:	74e3      	strb	r3, [r4, #19]
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    2dfc:	2220      	movs	r2, #32
    2dfe:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    writePadBuffer(bytesToSend, dataToSend);
    2e00:	0021      	movs	r1, r4
    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    2e02:	7563      	strb	r3, [r4, #21]
    dataToSend[22] = sample.accelXint >> 8;
    2e04:	121b      	asrs	r3, r3, #8
    2e06:	75a3      	strb	r3, [r4, #22]

    dataToSend[23] = sample.accelYint >> 0;
    2e08:	2228      	movs	r2, #40	; 0x28
    2e0a:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    writePadBuffer(bytesToSend, dataToSend);
    2e0c:	2023      	movs	r0, #35	; 0x23
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    dataToSend[22] = sample.accelXint >> 8;

    dataToSend[23] = sample.accelYint >> 0;
    2e0e:	75e3      	strb	r3, [r4, #23]
    dataToSend[24] = sample.accelYint >> 8;
    2e10:	121b      	asrs	r3, r3, #8
    2e12:	7623      	strb	r3, [r4, #24]

    dataToSend[25] = sample.accelZint >> 0;
    2e14:	2230      	movs	r2, #48	; 0x30
    2e16:	5eab      	ldrsh	r3, [r5, r2]
    2e18:	7663      	strb	r3, [r4, #25]
    dataToSend[26] = sample.accelZint >> 8;
    2e1a:	121b      	asrs	r3, r3, #8
    2e1c:	76a3      	strb	r3, [r4, #26]

    dataToSend[27] = sample.gyroXint >> 0;
    2e1e:	2238      	movs	r2, #56	; 0x38
    2e20:	5eab      	ldrsh	r3, [r5, r2]
    2e22:	76e3      	strb	r3, [r4, #27]
    dataToSend[28] = sample.gyroXint >> 8;
    2e24:	121b      	asrs	r3, r3, #8
    2e26:	7723      	strb	r3, [r4, #28]

    dataToSend[29] = sample.gyroYint >> 0;
    2e28:	1cab      	adds	r3, r5, #2
    2e2a:	223e      	movs	r2, #62	; 0x3e
    2e2c:	5e9b      	ldrsh	r3, [r3, r2]
    2e2e:	7763      	strb	r3, [r4, #29]
    dataToSend[30] = sample.gyroYint >> 8;
    2e30:	121b      	asrs	r3, r3, #8
    2e32:	77a3      	strb	r3, [r4, #30]

    dataToSend[31] = sample.gyroZint >> 0;
    2e34:	002b      	movs	r3, r5
    2e36:	3348      	adds	r3, #72	; 0x48
    2e38:	2200      	movs	r2, #0
    2e3a:	5e9b      	ldrsh	r3, [r3, r2]
    dataToSend[32] = sample.gyroZint >> 8;
    2e3c:	aa04      	add	r2, sp, #16
    dataToSend[28] = sample.gyroXint >> 8;

    dataToSend[29] = sample.gyroYint >> 0;
    dataToSend[30] = sample.gyroYint >> 8;

    dataToSend[31] = sample.gyroZint >> 0;
    2e3e:	77e3      	strb	r3, [r4, #31]
    dataToSend[32] = sample.gyroZint >> 8;
    2e40:	3205      	adds	r2, #5
    2e42:	121b      	asrs	r3, r3, #8
    2e44:	77d3      	strb	r3, [r2, #31]

    dataToSend[33] = sample.analogRaw >> 0;
    2e46:	8b2b      	ldrh	r3, [r5, #24]
    2e48:	aa04      	add	r2, sp, #16
    2e4a:	3206      	adds	r2, #6
    2e4c:	77d3      	strb	r3, [r2, #31]
    dataToSend[34] = sample.analogRaw >> 8;
    2e4e:	aa04      	add	r2, sp, #16
    2e50:	3207      	adds	r2, #7
    2e52:	0a1b      	lsrs	r3, r3, #8
    2e54:	77d3      	strb	r3, [r2, #31]

    writePadBuffer(bytesToSend, dataToSend);
    2e56:	4b0f      	ldr	r3, [pc, #60]	; (2e94 <logSensorsOnPad+0x17c>)
    2e58:	4798      	blx	r3

}
    2e5a:	b00f      	add	sp, #60	; 0x3c
    2e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e5e:	46c0      	nop			; (mov r8, r8)
    2e60:	2000019a 	.word	0x2000019a
    2e64:	200002e8 	.word	0x200002e8
    2e68:	00006b21 	.word	0x00006b21
    2e6c:	00006b8d 	.word	0x00006b8d
    2e70:	00006439 	.word	0x00006439
    2e74:	00006d29 	.word	0x00006d29
    2e78:	00004e39 	.word	0x00004e39
    2e7c:	447a0000 	.word	0x447a0000
    2e80:	00005061 	.word	0x00005061
    2e84:	20000308 	.word	0x20000308
    2e88:	200005f0 	.word	0x200005f0
    2e8c:	00000b25 	.word	0x00000b25
    2e90:	00004c9d 	.word	0x00004c9d
    2e94:	00002a59 	.word	0x00002a59

00002e98 <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2e98:	2306      	movs	r3, #6

}



u32_t getFlightStartAddress(u8_t flightToFind) {
    2e9a:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2e9c:	4358      	muls	r0, r3
    2e9e:	ac01      	add	r4, sp, #4
    2ea0:	3001      	adds	r0, #1
    2ea2:	30ff      	adds	r0, #255	; 0xff
    2ea4:	0022      	movs	r2, r4
    2ea6:	2103      	movs	r1, #3
    2ea8:	4b04      	ldr	r3, [pc, #16]	; (2ebc <getFlightStartAddress+0x24>)
    2eaa:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2eac:	7860      	ldrb	r0, [r4, #1]
    2eae:	78a3      	ldrb	r3, [r4, #2]
    2eb0:	0200      	lsls	r0, r0, #8
    2eb2:	041b      	lsls	r3, r3, #16
    2eb4:	4318      	orrs	r0, r3
    2eb6:	7823      	ldrb	r3, [r4, #0]
    2eb8:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    2eba:	bd16      	pop	{r1, r2, r4, pc}
    2ebc:	00000301 	.word	0x00000301

00002ec0 <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2ec0:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    2ec2:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2ec4:	4358      	muls	r0, r3
    2ec6:	ac01      	add	r4, sp, #4
    2ec8:	3004      	adds	r0, #4
    2eca:	30ff      	adds	r0, #255	; 0xff
    2ecc:	0022      	movs	r2, r4
    2ece:	2103      	movs	r1, #3
    2ed0:	4b04      	ldr	r3, [pc, #16]	; (2ee4 <FindFlightEndingAddress+0x24>)
    2ed2:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2ed4:	7860      	ldrb	r0, [r4, #1]
    2ed6:	78a3      	ldrb	r3, [r4, #2]
    2ed8:	0200      	lsls	r0, r0, #8
    2eda:	041b      	lsls	r3, r3, #16
    2edc:	4318      	orrs	r0, r3
    2ede:	7823      	ldrb	r3, [r4, #0]
    2ee0:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    2ee2:	bd16      	pop	{r1, r2, r4, pc}
    2ee4:	00000301 	.word	0x00000301

00002ee8 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    2ee8:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    2eea:	4b04      	ldr	r3, [pc, #16]	; (2efc <isFlightLogged+0x14>)
    2eec:	4798      	blx	r3
    2eee:	4b04      	ldr	r3, [pc, #16]	; (2f00 <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    2ef0:	18c0      	adds	r0, r0, r3
    2ef2:	1e43      	subs	r3, r0, #1
    2ef4:	4198      	sbcs	r0, r3
    2ef6:	b2c0      	uxtb	r0, r0
    2ef8:	bd10      	pop	{r4, pc}
    2efa:	46c0      	nop			; (mov r8, r8)
    2efc:	00002e99 	.word	0x00002e99
    2f00:	ff000001 	.word	0xff000001

00002f04 <writeFlightStartAddress>:

void writeFlightStartAddress() {
    2f04:	b510      	push	{r4, lr}
    AT25SFWriteBytes(flightAddressLocationInIndex,3,flightStartAddress);
    2f06:	4b03      	ldr	r3, [pc, #12]	; (2f14 <writeFlightStartAddress+0x10>)
    2f08:	4a03      	ldr	r2, [pc, #12]	; (2f18 <writeFlightStartAddress+0x14>)
    2f0a:	8818      	ldrh	r0, [r3, #0]
    2f0c:	2103      	movs	r1, #3
    2f0e:	4b03      	ldr	r3, [pc, #12]	; (2f1c <writeFlightStartAddress+0x18>)
    2f10:	4798      	blx	r3
}
    2f12:	bd10      	pop	{r4, pc}
    2f14:	20000378 	.word	0x20000378
    2f18:	2000047b 	.word	0x2000047b
    2f1c:	00000241 	.word	0x00000241

00002f20 <writeFlightEndAddress>:




void writeFlightEndAddress() {
    2f20:	b507      	push	{r0, r1, r2, lr}
    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    2f22:	2006      	movs	r0, #6



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    2f24:	4b09      	ldr	r3, [pc, #36]	; (2f4c <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2f26:	aa01      	add	r2, sp, #4



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    2f28:	681b      	ldr	r3, [r3, #0]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2f2a:	7013      	strb	r3, [r2, #0]
    2f2c:	0a19      	lsrs	r1, r3, #8
    2f2e:	0c1b      	lsrs	r3, r3, #16
    2f30:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    2f32:	4b07      	ldr	r3, [pc, #28]	; (2f50 <writeFlightEndAddress+0x30>)

void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2f34:	7051      	strb	r1, [r2, #1]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    2f36:	781b      	ldrb	r3, [r3, #0]
    2f38:	2103      	movs	r1, #3
    2f3a:	4358      	muls	r0, r3
    2f3c:	3004      	adds	r0, #4
    2f3e:	30ff      	adds	r0, #255	; 0xff
    2f40:	4b04      	ldr	r3, [pc, #16]	; (2f54 <writeFlightEndAddress+0x34>)
    2f42:	4798      	blx	r3
    delay_ms(10);
    2f44:	200a      	movs	r0, #10
    2f46:	4b04      	ldr	r3, [pc, #16]	; (2f58 <writeFlightEndAddress+0x38>)
    2f48:	4798      	blx	r3
}
    2f4a:	bd07      	pop	{r0, r1, r2, pc}
    2f4c:	20000480 	.word	0x20000480
    2f50:	2000019b 	.word	0x2000019b
    2f54:	00000241 	.word	0x00000241
    2f58:	000010ed 	.word	0x000010ed

00002f5c <writeGroundLog>:

void writeGroundLog() {
    2f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f5e:	2780      	movs	r7, #128	; 0x80
    u8_t i;

    for (i = 0; i < 10; i++) {
    2f60:	26af      	movs	r6, #175	; 0xaf
    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    delay_ms(10);
}

void writeGroundLog() {
    2f62:	2400      	movs	r4, #0
    2f64:	037f      	lsls	r7, r7, #13
    u8_t i;

    for (i = 0; i < 10; i++) {
    2f66:	0076      	lsls	r6, r6, #1
        makePage(SENSOR_LOG_LENGTH, &padSensorBuffer[i][0]);
    2f68:	490c      	ldr	r1, [pc, #48]	; (2f9c <writeGroundLog+0x40>)
    2f6a:	4b0d      	ldr	r3, [pc, #52]	; (2fa0 <writeGroundLog+0x44>)
    2f6c:	1861      	adds	r1, r4, r1
    2f6e:	2023      	movs	r0, #35	; 0x23
    2f70:	4798      	blx	r3

        if (pageReady) {
    2f72:	4b0c      	ldr	r3, [pc, #48]	; (2fa4 <writeGroundLog+0x48>)
    2f74:	781a      	ldrb	r2, [r3, #0]
    2f76:	2a00      	cmp	r2, #0
    2f78:	d00c      	beq.n	2f94 <writeGroundLog+0x38>
            pageReady = false;
    2f7a:	2200      	movs	r2, #0
    2f7c:	701a      	strb	r2, [r3, #0]
    2f7e:	4b0a      	ldr	r3, [pc, #40]	; (2fa8 <writeGroundLog+0x4c>)
            pinToggle(LedPin);
            AT25SEWritePage(currentAddress,pageToWrite);
    2f80:	4d0a      	ldr	r5, [pc, #40]	; (2fac <writeGroundLog+0x50>)
    2f82:	61df      	str	r7, [r3, #28]
    2f84:	490a      	ldr	r1, [pc, #40]	; (2fb0 <writeGroundLog+0x54>)
    2f86:	4b0b      	ldr	r3, [pc, #44]	; (2fb4 <writeGroundLog+0x58>)
    2f88:	6828      	ldr	r0, [r5, #0]
    2f8a:	4798      	blx	r3
            currentAddress = (currentAddress + 0x100);
    2f8c:	682b      	ldr	r3, [r5, #0]
    2f8e:	3301      	adds	r3, #1
    2f90:	33ff      	adds	r3, #255	; 0xff
    2f92:	602b      	str	r3, [r5, #0]
    2f94:	3423      	adds	r4, #35	; 0x23
}

void writeGroundLog() {
    u8_t i;

    for (i = 0; i < 10; i++) {
    2f96:	42b4      	cmp	r4, r6
    2f98:	d1e6      	bne.n	2f68 <writeGroundLog+0xc>
            currentAddress = (currentAddress + 0x100);
        }

    }

}
    2f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f9c:	20000484 	.word	0x20000484
    2fa0:	000029c9 	.word	0x000029c9
    2fa4:	2000047a 	.word	0x2000047a
    2fa8:	41004400 	.word	0x41004400
    2fac:	20000480 	.word	0x20000480
    2fb0:	2000037a 	.word	0x2000037a
    2fb4:	000002a5 	.word	0x000002a5

00002fb8 <beginFlightLog>:

void beginFlightLog() {
    2fb8:	b510      	push	{r4, lr}
    writeFlightStartAddress();
    2fba:	4b05      	ldr	r3, [pc, #20]	; (2fd0 <beginFlightLog+0x18>)
    2fbc:	4798      	blx	r3
    logFlight( );
    2fbe:	4b05      	ldr	r3, [pc, #20]	; (2fd4 <beginFlightLog+0x1c>)
    2fc0:	4798      	blx	r3
    writeGroundLog();
    2fc2:	4b05      	ldr	r3, [pc, #20]	; (2fd8 <beginFlightLog+0x20>)
    2fc4:	4798      	blx	r3
    logEvent('L');
    2fc6:	204c      	movs	r0, #76	; 0x4c
    2fc8:	4b04      	ldr	r3, [pc, #16]	; (2fdc <beginFlightLog+0x24>)
    2fca:	4798      	blx	r3

}
    2fcc:	bd10      	pop	{r4, pc}
    2fce:	46c0      	nop			; (mov r8, r8)
    2fd0:	00002f05 	.word	0x00002f05
    2fd4:	00002aa1 	.word	0x00002aa1
    2fd8:	00002f5d 	.word	0x00002f5d
    2fdc:	00002b05 	.word	0x00002b05

00002fe0 <findNewFlightStart>:


void findNewFlightStart() {
    2fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    2fe2:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    2fe4:	0020      	movs	r0, r4
    2fe6:	4b21      	ldr	r3, [pc, #132]	; (306c <findNewFlightStart+0x8c>)
    2fe8:	4798      	blx	r3
    2fea:	2800      	cmp	r0, #0
    2fec:	d138      	bne.n	3060 <findNewFlightStart+0x80>
    2fee:	4f20      	ldr	r7, [pc, #128]	; (3070 <findNewFlightStart+0x90>)
    2ff0:	4d20      	ldr	r5, [pc, #128]	; (3074 <findNewFlightStart+0x94>)

            if (flightNumbToCheck > 0) {
    2ff2:	2c00      	cmp	r4, #0
    2ff4:	d014      	beq.n	3020 <findNewFlightStart+0x40>

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    2ff6:	1e60      	subs	r0, r4, #1
    2ff8:	4b1f      	ldr	r3, [pc, #124]	; (3078 <findNewFlightStart+0x98>)
    2ffa:	b2c0      	uxtb	r0, r0
    2ffc:	4798      	blx	r3
    2ffe:	0006      	movs	r6, r0
                delay_ms(5);
    3000:	4b1e      	ldr	r3, [pc, #120]	; (307c <findNewFlightStart+0x9c>)
    3002:	2005      	movs	r0, #5
    3004:	4798      	blx	r3

                currentAddress = startAddress;

                flightStartAddress[0] = startAddress >> 0;
                flightStartAddress[1] = startAddress >> 8;
    3006:	0a33      	lsrs	r3, r6, #8
    3008:	706b      	strb	r3, [r5, #1]
                flightStartAddress[2] = startAddress >> 16;

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    300a:	2306      	movs	r3, #6
    300c:	4363      	muls	r3, r4
    300e:	4a1c      	ldr	r2, [pc, #112]	; (3080 <findNewFlightStart+0xa0>)
    3010:	3301      	adds	r3, #1
            if (flightNumbToCheck > 0) {

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;
    3012:	603e      	str	r6, [r7, #0]

                flightStartAddress[0] = startAddress >> 0;
    3014:	702e      	strb	r6, [r5, #0]
                flightStartAddress[1] = startAddress >> 8;
                flightStartAddress[2] = startAddress >> 16;

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    3016:	33ff      	adds	r3, #255	; 0xff

                currentAddress = startAddress;

                flightStartAddress[0] = startAddress >> 0;
                flightStartAddress[1] = startAddress >> 8;
                flightStartAddress[2] = startAddress >> 16;
    3018:	0c36      	lsrs	r6, r6, #16
    301a:	70ae      	strb	r6, [r5, #2]

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    301c:	8013      	strh	r3, [r2, #0]
    301e:	e00d      	b.n	303c <findNewFlightStart+0x5c>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
                flightStartAddress[1] = 0x10;
    3020:	2310      	movs	r3, #16
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;
    3022:	4a17      	ldr	r2, [pc, #92]	; (3080 <findNewFlightStart+0xa0>)
                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
                flightStartAddress[1] = 0x10;
    3024:	706b      	strb	r3, [r5, #1]
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;
    3026:	33f0      	adds	r3, #240	; 0xf0
    3028:	8013      	strh	r3, [r2, #0]

                currentAddress = 0x001000;
    302a:	2380      	movs	r3, #128	; 0x80
                beep(1000);
    302c:	20fa      	movs	r0, #250	; 0xfa
                flightStartAddress[1] = 0x10;
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;

                currentAddress = 0x001000;
    302e:	015b      	lsls	r3, r3, #5
    3030:	603b      	str	r3, [r7, #0]
                beep(1000);
    3032:	0080      	lsls	r0, r0, #2
    3034:	4b13      	ldr	r3, [pc, #76]	; (3084 <findNewFlightStart+0xa4>)

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
    3036:	702c      	strb	r4, [r5, #0]
                flightStartAddress[1] = 0x10;
                flightStartAddress[2] = 0x00;
    3038:	70ac      	strb	r4, [r5, #2]

                flightAddressLocationInIndex = FLIGHTZEROSTART;

                currentAddress = 0x001000;
                beep(1000);
    303a:	4798      	blx	r3
            }
            flightNumb = flightNumbToCheck;
    303c:	4b12      	ldr	r3, [pc, #72]	; (3088 <findNewFlightStart+0xa8>)
    303e:	701c      	strb	r4, [r3, #0]

            while (flightNumbToCheck > 0) {
                beep(500);
    3040:	20fa      	movs	r0, #250	; 0xfa
    3042:	0040      	lsls	r0, r0, #1
                currentAddress = 0x001000;
                beep(1000);
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    3044:	2c00      	cmp	r4, #0
    3046:	d008      	beq.n	305a <findNewFlightStart+0x7a>
                beep(500);
    3048:	4b0e      	ldr	r3, [pc, #56]	; (3084 <findNewFlightStart+0xa4>)
    304a:	4798      	blx	r3
                delay_ms(500);
    304c:	20fa      	movs	r0, #250	; 0xfa
    304e:	4b0b      	ldr	r3, [pc, #44]	; (307c <findNewFlightStart+0x9c>)
    3050:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    3052:	3c01      	subs	r4, #1
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    3054:	4798      	blx	r3
                --flightNumbToCheck;
    3056:	b2e4      	uxtb	r4, r4
    3058:	e7f2      	b.n	3040 <findNewFlightStart+0x60>
            }
            delay_ms(500);
    305a:	4b08      	ldr	r3, [pc, #32]	; (307c <findNewFlightStart+0x9c>)
    305c:	4798      	blx	r3
            break;
    305e:	e003      	b.n	3068 <findNewFlightStart+0x88>
}


void findNewFlightStart() {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    3060:	3401      	adds	r4, #1
    3062:	b2e4      	uxtb	r4, r4
    3064:	2c14      	cmp	r4, #20
    3066:	d1bd      	bne.n	2fe4 <findNewFlightStart+0x4>
            }
            delay_ms(500);
            break;
        }
    }
}
    3068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    306a:	46c0      	nop			; (mov r8, r8)
    306c:	00002ee9 	.word	0x00002ee9
    3070:	20000480 	.word	0x20000480
    3074:	2000047b 	.word	0x2000047b
    3078:	00002ec1 	.word	0x00002ec1
    307c:	000010ed 	.word	0x000010ed
    3080:	20000378 	.word	0x20000378
    3084:	00000e1d 	.word	0x00000e1d
    3088:	2000019b 	.word	0x2000019b

0000308c <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    308c:	4b01      	ldr	r3, [pc, #4]	; (3094 <takeSample+0x8>)
    308e:	7818      	ldrb	r0, [r3, #0]
}
    3090:	4770      	bx	lr
    3092:	46c0      	nop			; (mov r8, r8)
    3094:	200001ad 	.word	0x200001ad

00003098 <pullSample>:

void pullSample() {
    SampleBool = true;
    3098:	2201      	movs	r2, #1
    309a:	4b01      	ldr	r3, [pc, #4]	; (30a0 <pullSample+0x8>)
    309c:	701a      	strb	r2, [r3, #0]
}
    309e:	4770      	bx	lr
    30a0:	200001ad 	.word	0x200001ad

000030a4 <sampleTick>:
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    30a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    SampleBool = false;
    30a6:	2200      	movs	r2, #0
    30a8:	4ba7      	ldr	r3, [pc, #668]	; (3348 <sampleTick+0x2a4>)

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    30aa:	4fa8      	ldr	r7, [pc, #672]	; (334c <sampleTick+0x2a8>)
}

sample_t sample;

void sampleTick() {
    SampleBool = false;
    30ac:	701a      	strb	r2, [r3, #0]

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis();
    30ae:	4ba8      	ldr	r3, [pc, #672]	; (3350 <sampleTick+0x2ac>)

void sampleTick() {
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    30b0:	687c      	ldr	r4, [r7, #4]
    sample.sampleTick = millis();
    30b2:	4798      	blx	r3
    30b4:	6078      	str	r0, [r7, #4]
    sample.tickDelta = sample.sampleTick - lastTick;
    30b6:	1b00      	subs	r0, r0, r4

    sample.voltage.batV = adc_read(senseBatPin);
    30b8:	4ca6      	ldr	r4, [pc, #664]	; (3354 <sampleTick+0x2b0>)
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis();
    sample.tickDelta = sample.sampleTick - lastTick;
    30ba:	8038      	strh	r0, [r7, #0]

    sample.voltage.batV = adc_read(senseBatPin);
    30bc:	7863      	ldrb	r3, [r4, #1]
    30be:	7821      	ldrb	r1, [r4, #0]
    30c0:	78a0      	ldrb	r0, [r4, #2]
    30c2:	021b      	lsls	r3, r3, #8
    30c4:	430b      	orrs	r3, r1
    30c6:	0400      	lsls	r0, r0, #16
    30c8:	001a      	movs	r2, r3
    30ca:	0003      	movs	r3, r0
    30cc:	78e0      	ldrb	r0, [r4, #3]
    30ce:	4313      	orrs	r3, r2
    30d0:	0600      	lsls	r0, r0, #24
    30d2:	4ea1      	ldr	r6, [pc, #644]	; (3358 <sampleTick+0x2b4>)
    30d4:	7921      	ldrb	r1, [r4, #4]
    30d6:	4318      	orrs	r0, r3
    30d8:	47b0      	blx	r6

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    30da:	4ba0      	ldr	r3, [pc, #640]	; (335c <sampleTick+0x2b8>)
    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis();
    sample.tickDelta = sample.sampleTick - lastTick;

    sample.voltage.batV = adc_read(senseBatPin);
    30dc:	8138      	strh	r0, [r7, #8]

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    30de:	4798      	blx	r3
    30e0:	4a9f      	ldr	r2, [pc, #636]	; (3360 <sampleTick+0x2bc>)
    30e2:	4da0      	ldr	r5, [pc, #640]	; (3364 <sampleTick+0x2c0>)
    30e4:	4ba0      	ldr	r3, [pc, #640]	; (3368 <sampleTick+0x2c4>)
    30e6:	47a8      	blx	r5
    30e8:	4ba0      	ldr	r3, [pc, #640]	; (336c <sampleTick+0x2c8>)
    30ea:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    30ec:	79a3      	ldrb	r3, [r4, #6]
    30ee:	7961      	ldrb	r1, [r4, #5]
    sample.sampleTick = millis();
    sample.tickDelta = sample.sampleTick - lastTick;

    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    30f0:	60f8      	str	r0, [r7, #12]

    sample.voltage.senseA = adc_read(senseAPin);
    30f2:	79e0      	ldrb	r0, [r4, #7]
    30f4:	021b      	lsls	r3, r3, #8
    30f6:	430b      	orrs	r3, r1
    30f8:	0400      	lsls	r0, r0, #16
    30fa:	001a      	movs	r2, r3
    30fc:	0003      	movs	r3, r0
    30fe:	7a20      	ldrb	r0, [r4, #8]
    3100:	4313      	orrs	r3, r2
    3102:	0600      	lsls	r0, r0, #24
    3104:	7a61      	ldrb	r1, [r4, #9]
    3106:	4318      	orrs	r0, r3
    3108:	47b0      	blx	r6
    sample.voltage.senseB = adc_read(senseBPin);
    310a:	7ae3      	ldrb	r3, [r4, #11]
    310c:	7aa1      	ldrb	r1, [r4, #10]

    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    310e:	8238      	strh	r0, [r7, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    3110:	7b20      	ldrb	r0, [r4, #12]
    3112:	021b      	lsls	r3, r3, #8
    3114:	430b      	orrs	r3, r1
    3116:	0400      	lsls	r0, r0, #16
    3118:	001a      	movs	r2, r3
    311a:	0003      	movs	r3, r0
    311c:	7b60      	ldrb	r0, [r4, #13]
    311e:	4313      	orrs	r3, r2
    3120:	0600      	lsls	r0, r0, #24
    3122:	7ba1      	ldrb	r1, [r4, #14]
    3124:	4318      	orrs	r0, r3
    3126:	47b0      	blx	r6
    sample.voltage.senseC = adc_read(senseCPin);
    3128:	7c23      	ldrb	r3, [r4, #16]
    312a:	7be1      	ldrb	r1, [r4, #15]
    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    312c:	8278      	strh	r0, [r7, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    312e:	7c60      	ldrb	r0, [r4, #17]
    3130:	021b      	lsls	r3, r3, #8
    3132:	430b      	orrs	r3, r1
    3134:	0400      	lsls	r0, r0, #16
    3136:	001a      	movs	r2, r3
    3138:	0003      	movs	r3, r0
    313a:	7ca0      	ldrb	r0, [r4, #18]
    313c:	4313      	orrs	r3, r2
    313e:	0600      	lsls	r0, r0, #24
    3140:	7ce1      	ldrb	r1, [r4, #19]
    3142:	4318      	orrs	r0, r3
    3144:	47b0      	blx	r6
    sample.voltage.senseD = adc_read(senseDPin);
    3146:	7d63      	ldrb	r3, [r4, #21]
    3148:	7d21      	ldrb	r1, [r4, #20]

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    314a:	82b8      	strh	r0, [r7, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    314c:	7da0      	ldrb	r0, [r4, #22]
    314e:	021b      	lsls	r3, r3, #8
    3150:	430b      	orrs	r3, r1
    3152:	0400      	lsls	r0, r0, #16
    3154:	001a      	movs	r2, r3
    3156:	0003      	movs	r3, r0
    3158:	7de0      	ldrb	r0, [r4, #23]
    315a:	4313      	orrs	r3, r2
    315c:	0600      	lsls	r0, r0, #24
    315e:	7e21      	ldrb	r1, [r4, #24]
    3160:	4318      	orrs	r0, r3
    3162:	47b0      	blx	r6


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    3164:	2210      	movs	r2, #16
    3166:	4d82      	ldr	r5, [pc, #520]	; (3370 <sampleTick+0x2cc>)
    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);
    3168:	82f8      	strh	r0, [r7, #22]


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    316a:	88ab      	ldrh	r3, [r5, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    316c:	7e61      	ldrb	r1, [r4, #25]
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    316e:	4313      	orrs	r3, r2
    3170:	80ab      	strh	r3, [r5, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;
    3172:	2304      	movs	r3, #4
    3174:	70ab      	strb	r3, [r5, #2]

    sample.analogRaw = adc_read(analogAccelPin);
    3176:	7ea3      	ldrb	r3, [r4, #26]
    3178:	7ee0      	ldrb	r0, [r4, #27]
    317a:	021b      	lsls	r3, r3, #8
    317c:	430b      	orrs	r3, r1
    317e:	0400      	lsls	r0, r0, #16
    3180:	4303      	orrs	r3, r0
    3182:	7f20      	ldrb	r0, [r4, #28]
    3184:	7f61      	ldrb	r1, [r4, #29]
    3186:	0600      	lsls	r0, r0, #24
    3188:	4318      	orrs	r0, r3
    318a:	47b0      	blx	r6
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    318c:	4b79      	ldr	r3, [pc, #484]	; (3374 <sampleTick+0x2d0>)


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    318e:	8338      	strh	r0, [r7, #24]
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    3190:	18c0      	adds	r0, r0, r3
    3192:	4b72      	ldr	r3, [pc, #456]	; (335c <sampleTick+0x2b8>)
    3194:	4798      	blx	r3
    3196:	4a78      	ldr	r2, [pc, #480]	; (3378 <sampleTick+0x2d4>)
    3198:	4c72      	ldr	r4, [pc, #456]	; (3364 <sampleTick+0x2c0>)
    319a:	4b78      	ldr	r3, [pc, #480]	; (337c <sampleTick+0x2d8>)
    319c:	47a0      	blx	r4
    319e:	4b73      	ldr	r3, [pc, #460]	; (336c <sampleTick+0x2c8>)
    31a0:	4798      	blx	r3



    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    31a2:	2300      	movs	r3, #0

    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    31a4:	61f8      	str	r0, [r7, #28]



    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    31a6:	70ab      	strb	r3, [r5, #2]
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_12BIT;
    31a8:	88ab      	ldrh	r3, [r5, #4]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    31aa:	4e75      	ldr	r6, [pc, #468]	; (3380 <sampleTick+0x2dc>)
    31ac:	b29b      	uxth	r3, r3
    31ae:	80ab      	strh	r3, [r5, #4]
    31b0:	2580      	movs	r5, #128	; 0x80
    31b2:	01ed      	lsls	r5, r5, #7

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    31b4:	2150      	movs	r1, #80	; 0x50
    31b6:	4c73      	ldr	r4, [pc, #460]	; (3384 <sampleTick+0x2e0>)
    31b8:	6175      	str	r5, [r6, #20]
    31ba:	2002      	movs	r0, #2
    31bc:	47a0      	blx	r4
    pinHigh(cs_baro);
    delay_us(600);
    31be:	2096      	movs	r0, #150	; 0x96
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    31c0:	61b5      	str	r5, [r6, #24]
    31c2:	0080      	lsls	r0, r0, #2
    31c4:	4b70      	ldr	r3, [pc, #448]	; (3388 <sampleTick+0x2e4>)
    31c6:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    31c8:	4b70      	ldr	r3, [pc, #448]	; (338c <sampleTick+0x2e8>)
    31ca:	4798      	blx	r3

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    31cc:	2140      	movs	r1, #64	; 0x40

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    pinHigh(cs_baro);
    delay_us(600);
    uint32_t tempRaw = readMS5803AdcResults();
    31ce:	9001      	str	r0, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    31d0:	6175      	str	r5, [r6, #20]

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    31d2:	2002      	movs	r0, #2
    31d4:	47a0      	blx	r4
    31d6:	2280      	movs	r2, #128	; 0x80
    31d8:	4b6d      	ldr	r3, [pc, #436]	; (3390 <sampleTick+0x2ec>)
    31da:	00d2      	lsls	r2, r2, #3

    u8_t byteOne;
    u8_t byteTwo;
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    31dc:	2182      	movs	r1, #130	; 0x82
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    31de:	61b5      	str	r5, [r6, #24]
    31e0:	2000      	movs	r0, #0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    31e2:	601a      	str	r2, [r3, #0]
    31e4:	47a0      	blx	r4
    byteOne = spiDataIn(ACCEL_SPI);
    31e6:	4d6b      	ldr	r5, [pc, #428]	; (3394 <sampleTick+0x2f0>)
    31e8:	2000      	movs	r0, #0
    31ea:	47a8      	blx	r5
    31ec:	0004      	movs	r4, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    31ee:	2000      	movs	r0, #0
    31f0:	47a8      	blx	r5
    sample.accelXint = twosComp(byteOne,byteTwo);
    31f2:	0200      	lsls	r0, r0, #8
    31f4:	4304      	orrs	r4, r0
    byteOne = spiDataIn(ACCEL_SPI);
    31f6:	2000      	movs	r0, #0
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelXint = twosComp(byteOne,byteTwo);
    31f8:	843c      	strh	r4, [r7, #32]
    byteOne = spiDataIn(ACCEL_SPI);
    31fa:	47a8      	blx	r5
    31fc:	0004      	movs	r4, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    31fe:	2000      	movs	r0, #0
    3200:	47a8      	blx	r5
    sample.accelYint = twosComp(byteOne,byteTwo);
    3202:	0200      	lsls	r0, r0, #8
    3204:	4304      	orrs	r4, r0
    byteOne = spiDataIn(ACCEL_SPI);
    3206:	2000      	movs	r0, #0
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelYint = twosComp(byteOne,byteTwo);
    3208:	853c      	strh	r4, [r7, #40]	; 0x28
    byteOne = spiDataIn(ACCEL_SPI);
    320a:	47a8      	blx	r5
    320c:	0004      	movs	r4, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    320e:	2000      	movs	r0, #0
    3210:	47a8      	blx	r5
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    3212:	2280      	movs	r2, #128	; 0x80
    3214:	4b60      	ldr	r3, [pc, #384]	; (3398 <sampleTick+0x2f4>)
    3216:	00d2      	lsls	r2, r2, #3
    3218:	601a      	str	r2, [r3, #0]
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    if (altimeter.pointingUp) {
    321a:	4b60      	ldr	r3, [pc, #384]	; (339c <sampleTick+0x2f8>)
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    321c:	0200      	lsls	r0, r0, #8
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    if (altimeter.pointingUp) {
    321e:	795a      	ldrb	r2, [r3, #5]
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    3220:	4304      	orrs	r4, r0
    3222:	9600      	str	r6, [sp, #0]
    3224:	b224      	sxth	r4, r4
    3226:	003d      	movs	r5, r7
    3228:	2120      	movs	r1, #32
    322a:	5e7b      	ldrsh	r3, [r7, r1]
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    if (altimeter.pointingUp) {
    322c:	2a00      	cmp	r2, #0
    322e:	d000      	beq.n	3232 <sampleTick+0x18e>
        sample.accelXint =  -sample.accelXint >> 4;
    3230:	425b      	negs	r3, r3
    } else {
        sample.accelXint =  sample.accelXint >> 4;
    3232:	111b      	asrs	r3, r3, #4
    3234:	842b      	strh	r3, [r5, #32]
    }
    sample.accelYint =  sample.accelYint >> 4;
    3236:	2328      	movs	r3, #40	; 0x28
    3238:	5eee      	ldrsh	r6, [r5, r3]
    sample.accelZint =  sample.accelZint >> 4;
    323a:	1124      	asrs	r4, r4, #4
    if (altimeter.pointingUp) {
        sample.accelXint =  -sample.accelXint >> 4;
    } else {
        sample.accelXint =  sample.accelXint >> 4;
    }
    sample.accelYint =  sample.accelYint >> 4;
    323c:	1136      	asrs	r6, r6, #4
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    323e:	2320      	movs	r3, #32
    3240:	5ee8      	ldrsh	r0, [r5, r3]
    if (altimeter.pointingUp) {
        sample.accelXint =  -sample.accelXint >> 4;
    } else {
        sample.accelXint =  sample.accelXint >> 4;
    }
    sample.accelYint =  sample.accelYint >> 4;
    3242:	852e      	strh	r6, [r5, #40]	; 0x28
    sample.accelZint =  sample.accelZint >> 4;
    3244:	862c      	strh	r4, [r5, #48]	; 0x30

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    3246:	4b45      	ldr	r3, [pc, #276]	; (335c <sampleTick+0x2b8>)
    3248:	4798      	blx	r3
    324a:	23fe      	movs	r3, #254	; 0xfe
    324c:	2200      	movs	r2, #0
    324e:	059b      	lsls	r3, r3, #22
    3250:	4f44      	ldr	r7, [pc, #272]	; (3364 <sampleTick+0x2c0>)
    3252:	47b8      	blx	r7
    3254:	4f45      	ldr	r7, [pc, #276]	; (336c <sampleTick+0x2c8>)
    3256:	47b8      	blx	r7
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    3258:	4b40      	ldr	r3, [pc, #256]	; (335c <sampleTick+0x2b8>)
        sample.accelXint =  sample.accelXint >> 4;
    }
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    325a:	6268      	str	r0, [r5, #36]	; 0x24
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    325c:	0030      	movs	r0, r6
    325e:	4798      	blx	r3
    3260:	23fe      	movs	r3, #254	; 0xfe
    3262:	2200      	movs	r2, #0
    3264:	4e3f      	ldr	r6, [pc, #252]	; (3364 <sampleTick+0x2c0>)
    3266:	059b      	lsls	r3, r3, #22
    3268:	47b0      	blx	r6
    326a:	47b8      	blx	r7
    sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    326c:	4b3b      	ldr	r3, [pc, #236]	; (335c <sampleTick+0x2b8>)
    }
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    326e:	62e8      	str	r0, [r5, #44]	; 0x2c
    sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    3270:	0020      	movs	r0, r4
    3272:	4798      	blx	r3
    3274:	23fe      	movs	r3, #254	; 0xfe
    3276:	2200      	movs	r2, #0
    3278:	059b      	lsls	r3, r3, #22
    327a:	47b0      	blx	r6
    327c:	47b8      	blx	r7
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    327e:	2280      	movs	r2, #128	; 0x80
    3280:	9b00      	ldr	r3, [sp, #0]
    3282:	00d2      	lsls	r2, r2, #3

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    3284:	2182      	movs	r1, #130	; 0x82
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    3286:	6368      	str	r0, [r5, #52]	; 0x34
    3288:	615a      	str	r2, [r3, #20]

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    328a:	2000      	movs	r0, #0
    328c:	4b3d      	ldr	r3, [pc, #244]	; (3384 <sampleTick+0x2e0>)
    328e:	4798      	blx	r3
    byteOne = spiDataIn(GYRO_SPI);
    3290:	4e40      	ldr	r6, [pc, #256]	; (3394 <sampleTick+0x2f0>)
    3292:	2000      	movs	r0, #0
    3294:	47b0      	blx	r6
    3296:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    3298:	2000      	movs	r0, #0
    329a:	47b0      	blx	r6
    sample.gyroXint = twosComp(byteOne,byteTwo);
    329c:	0200      	lsls	r0, r0, #8
    329e:	4304      	orrs	r4, r0
    byteOne = spiDataIn(GYRO_SPI);
    32a0:	2000      	movs	r0, #0
    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroXint = twosComp(byteOne,byteTwo);
    32a2:	872c      	strh	r4, [r5, #56]	; 0x38
    byteOne = spiDataIn(GYRO_SPI);
    32a4:	47b0      	blx	r6
    32a6:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    32a8:	2000      	movs	r0, #0
    32aa:	47b0      	blx	r6
    sample.gyroYint = twosComp(byteOne,byteTwo);
    32ac:	4b3c      	ldr	r3, [pc, #240]	; (33a0 <sampleTick+0x2fc>)
    32ae:	0200      	lsls	r0, r0, #8
    32b0:	4304      	orrs	r4, r0
    byteOne = spiDataIn(GYRO_SPI);
    32b2:	2000      	movs	r0, #0
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroYint = twosComp(byteOne,byteTwo);
    32b4:	87dc      	strh	r4, [r3, #62]	; 0x3e
    byteOne = spiDataIn(GYRO_SPI);
    32b6:	47b0      	blx	r6
    32b8:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    32ba:	2000      	movs	r0, #0
    32bc:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    32be:	2180      	movs	r1, #128	; 0x80
    32c0:	0003      	movs	r3, r0
    32c2:	9a00      	ldr	r2, [sp, #0]
    32c4:	00c9      	lsls	r1, r1, #3
    32c6:	6191      	str	r1, [r2, #24]
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    32c8:	2238      	movs	r2, #56	; 0x38
    32ca:	5ea8      	ldrsh	r0, [r5, r2]
    sample.gyroYint = sample.gyroYint >> 4;
    32cc:	4a34      	ldr	r2, [pc, #208]	; (33a0 <sampleTick+0x2fc>)
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    32ce:	1100      	asrs	r0, r0, #4
    32d0:	8728      	strh	r0, [r5, #56]	; 0x38
    sample.gyroYint = sample.gyroYint >> 4;
    32d2:	263e      	movs	r6, #62	; 0x3e
    32d4:	5f96      	ldrsh	r6, [r2, r6]
    sample.gyroZint = sample.gyroZint >> 4;
    32d6:	021b      	lsls	r3, r3, #8
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    32d8:	4a31      	ldr	r2, [pc, #196]	; (33a0 <sampleTick+0x2fc>)
    sample.gyroZint = sample.gyroZint >> 4;
    32da:	431c      	orrs	r4, r3
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    32dc:	1136      	asrs	r6, r6, #4
    sample.gyroZint = sample.gyroZint >> 4;
    32de:	b224      	sxth	r4, r4
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    32e0:	87d6      	strh	r6, [r2, #62]	; 0x3e
    sample.gyroZint = sample.gyroZint >> 4;
    32e2:	1123      	asrs	r3, r4, #4
    32e4:	466a      	mov	r2, sp
    32e6:	9300      	str	r3, [sp, #0]
    32e8:	002b      	movs	r3, r5
    32ea:	8812      	ldrh	r2, [r2, #0]
    32ec:	3348      	adds	r3, #72	; 0x48
    32ee:	801a      	strh	r2, [r3, #0]

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    32f0:	4b1a      	ldr	r3, [pc, #104]	; (335c <sampleTick+0x2b8>)
    32f2:	4798      	blx	r3
    32f4:	23fe      	movs	r3, #254	; 0xfe
    32f6:	4c1b      	ldr	r4, [pc, #108]	; (3364 <sampleTick+0x2c0>)
    32f8:	2200      	movs	r2, #0
    32fa:	059b      	lsls	r3, r3, #22
    32fc:	47a0      	blx	r4
    32fe:	47b8      	blx	r7
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    3300:	4b16      	ldr	r3, [pc, #88]	; (335c <sampleTick+0x2b8>)

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    sample.gyroZint = sample.gyroZint >> 4;

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    3302:	63e8      	str	r0, [r5, #60]	; 0x3c
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    3304:	0030      	movs	r0, r6
    3306:	4798      	blx	r3
    3308:	23fe      	movs	r3, #254	; 0xfe
    330a:	2200      	movs	r2, #0
    330c:	059b      	lsls	r3, r3, #22
    330e:	47a0      	blx	r4
    3310:	47b8      	blx	r7
    sample.gyroZ =  sample.gyroZint * BMI055_GYRO_2000DS_DIV;
    3312:	4b12      	ldr	r3, [pc, #72]	; (335c <sampleTick+0x2b8>)
    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    sample.gyroZint = sample.gyroZint >> 4;

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    3314:	6468      	str	r0, [r5, #68]	; 0x44
    sample.gyroZ =  sample.gyroZint * BMI055_GYRO_2000DS_DIV;
    3316:	9800      	ldr	r0, [sp, #0]
    3318:	4798      	blx	r3
    331a:	23fe      	movs	r3, #254	; 0xfe
    331c:	2200      	movs	r2, #0
    331e:	059b      	lsls	r3, r3, #22
    3320:	47a0      	blx	r4
    3322:	47b8      	blx	r7
    3324:	64e8      	str	r0, [r5, #76]	; 0x4c


    delay_us(400);
    3326:	20c8      	movs	r0, #200	; 0xc8
    3328:	4b17      	ldr	r3, [pc, #92]	; (3388 <sampleTick+0x2e4>)
    332a:	0040      	lsls	r0, r0, #1
    332c:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    332e:	4b17      	ldr	r3, [pc, #92]	; (338c <sampleTick+0x2e8>)
    3330:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    3332:	4a1c      	ldr	r2, [pc, #112]	; (33a4 <sampleTick+0x300>)
    3334:	9901      	ldr	r1, [sp, #4]
    3336:	4b1c      	ldr	r3, [pc, #112]	; (33a8 <sampleTick+0x304>)
    3338:	4c1c      	ldr	r4, [pc, #112]	; (33ac <sampleTick+0x308>)
    333a:	47a0      	blx	r4
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
    333c:	6d28      	ldr	r0, [r5, #80]	; 0x50
    333e:	4b1c      	ldr	r3, [pc, #112]	; (33b0 <sampleTick+0x30c>)
    3340:	4798      	blx	r3
    3342:	65a8      	str	r0, [r5, #88]	; 0x58
    3344:	65e9      	str	r1, [r5, #92]	; 0x5c
}
    3346:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3348:	200001ad 	.word	0x200001ad
    334c:	200005f0 	.word	0x200005f0
    3350:	00001139 	.word	0x00001139
    3354:	00006ed4 	.word	0x00006ed4
    3358:	00000db5 	.word	0x00000db5
    335c:	00006b8d 	.word	0x00006b8d
    3360:	a97e132b 	.word	0xa97e132b
    3364:	00005f45 	.word	0x00005f45
    3368:	3f65379f 	.word	0x3f65379f
    336c:	00006d29 	.word	0x00006d29
    3370:	42004000 	.word	0x42004000
    3374:	ffff41c9 	.word	0xffff41c9
    3378:	abb44e51 	.word	0xabb44e51
    337c:	3f73f290 	.word	0x3f73f290
    3380:	41004400 	.word	0x41004400
    3384:	000034dd 	.word	0x000034dd
    3388:	000010b9 	.word	0x000010b9
    338c:	000003b5 	.word	0x000003b5
    3390:	41004494 	.word	0x41004494
    3394:	000034f5 	.word	0x000034f5
    3398:	41004498 	.word	0x41004498
    339c:	200001a0 	.word	0x200001a0
    33a0:	200005f2 	.word	0x200005f2
    33a4:	20000644 	.word	0x20000644
    33a8:	20000640 	.word	0x20000640
    33ac:	000003f5 	.word	0x000003f5
    33b0:	00000495 	.word	0x00000495

000033b4 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    33b4:	b570      	push	{r4, r5, r6, lr}
    33b6:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    33b8:	2301      	movs	r3, #1
    33ba:	1ca6      	adds	r6, r4, #2
    33bc:	40b3      	lsls	r3, r6
    33be:	480d      	ldr	r0, [pc, #52]	; (33f4 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    33c0:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    33c2:	6a01      	ldr	r1, [r0, #32]
    33c4:	430b      	orrs	r3, r1
    33c6:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    33c8:	2d00      	cmp	r5, #0
    33ca:	d003      	beq.n	33d4 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    33cc:	2107      	movs	r1, #7
    33ce:	0028      	movs	r0, r5
    33d0:	4b09      	ldr	r3, [pc, #36]	; (33f8 <sercomClockEnable+0x44>)
    33d2:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    33d4:	22f0      	movs	r2, #240	; 0xf0
    33d6:	2080      	movs	r0, #128	; 0x80
    33d8:	0229      	lsls	r1, r5, #8
    33da:	0112      	lsls	r2, r2, #4
    33dc:	4011      	ands	r1, r2
    33de:	01c0      	lsls	r0, r0, #7
    33e0:	4301      	orrs	r1, r0
    33e2:	0020      	movs	r0, r4
    33e4:	3014      	adds	r0, #20
    33e6:	223f      	movs	r2, #63	; 0x3f
    33e8:	0003      	movs	r3, r0
    33ea:	4013      	ands	r3, r2
    33ec:	4319      	orrs	r1, r3
    33ee:	4b03      	ldr	r3, [pc, #12]	; (33fc <sercomClockEnable+0x48>)
    33f0:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    33f2:	bd70      	pop	{r4, r5, r6, pc}
    33f4:	40000400 	.word	0x40000400
    33f8:	00000fe9 	.word	0x00000fe9
    33fc:	40000c00 	.word	0x40000c00

00003400 <sercomReset>:
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    3400:	4b04      	ldr	r3, [pc, #16]	; (3414 <sercomReset+0x14>)
    3402:	0280      	lsls	r0, r0, #10
    3404:	18c0      	adds	r0, r0, r3
//                         GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    3406:	2301      	movs	r3, #1
    3408:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    340a:	6802      	ldr	r2, [r0, #0]
    340c:	421a      	tst	r2, r3
    340e:	d1fc      	bne.n	340a <sercomReset+0xa>
}
    3410:	4770      	bx	lr
    3412:	46c0      	nop			; (mov r8, r8)
    3414:	42000800 	.word	0x42000800

00003418 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    3418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    341a:	0004      	movs	r4, r0
    341c:	9300      	str	r3, [sp, #0]
    341e:	ab08      	add	r3, sp, #32
    3420:	781b      	ldrb	r3, [r3, #0]
    3422:	000e      	movs	r6, r1
    3424:	9301      	str	r3, [sp, #4]
    3426:	ab09      	add	r3, sp, #36	; 0x24
    3428:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    342a:	4b12      	ldr	r3, [pc, #72]	; (3474 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    342c:	0015      	movs	r5, r2

    sercomReset(id);
    342e:	4798      	blx	r3
    3430:	4b11      	ldr	r3, [pc, #68]	; (3478 <sercomSpiMasterInit+0x60>)
    3432:	02a4      	lsls	r4, r4, #10
    3434:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    3436:	2380      	movs	r3, #128	; 0x80
    3438:	029b      	lsls	r3, r3, #10
    343a:	6063      	str	r3, [r4, #4]
    343c:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    343e:	21c0      	movs	r1, #192	; 0xc0
    3440:	042d      	lsls	r5, r5, #16
    3442:	029b      	lsls	r3, r3, #10
    3444:	402b      	ands	r3, r5
    3446:	250e      	movs	r5, #14
    3448:	0536      	lsls	r6, r6, #20
    344a:	0389      	lsls	r1, r1, #14
    344c:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    344e:	9e00      	ldr	r6, [sp, #0]
    3450:	431d      	orrs	r5, r3
    3452:	1e73      	subs	r3, r6, #1
    3454:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    3456:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    3458:	0772      	lsls	r2, r6, #29
    345a:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    345c:	432a      	orrs	r2, r5
    345e:	1e59      	subs	r1, r3, #1
    3460:	418b      	sbcs	r3, r1
    3462:	0016      	movs	r6, r2
    3464:	071b      	lsls	r3, r3, #28
    3466:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    3468:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    346a:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    346c:	69e3      	ldr	r3, [r4, #28]
    346e:	075b      	lsls	r3, r3, #29
    3470:	d4fc      	bmi.n	346c <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    3472:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3474:	00003401 	.word	0x00003401
    3478:	42000800 	.word	0x42000800

0000347c <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    347c:	b570      	push	{r4, r5, r6, lr}
    347e:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    3480:	4b0c      	ldr	r3, [pc, #48]	; (34b4 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    3482:	000d      	movs	r5, r1
    3484:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    3486:	4798      	blx	r3
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    3488:	4b0b      	ldr	r3, [pc, #44]	; (34b8 <sercomUartInit+0x3c>)
    348a:	02b0      	lsls	r0, r6, #10
    348c:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    348e:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    3490:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    3492:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    3494:	4b09      	ldr	r3, [pc, #36]	; (34bc <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    3496:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    3498:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    349a:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    349c:	0392      	lsls	r2, r2, #14
    349e:	4011      	ands	r1, r2
    34a0:	4a07      	ldr	r2, [pc, #28]	; (34c0 <sercomUartInit+0x44>)

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    34a2:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    34a4:	0424      	lsls	r4, r4, #16

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    34a6:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    34a8:	4311      	orrs	r1, r2
    34aa:	4023      	ands	r3, r4
    34ac:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    34ae:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    34b0:	bd70      	pop	{r4, r5, r6, pc}
    34b2:	46c0      	nop			; (mov r8, r8)
    34b4:	00003401 	.word	0x00003401
    34b8:	42000800 	.word	0x42000800
    34bc:	ffffb15b 	.word	0xffffb15b
    34c0:	40000006 	.word	0x40000006

000034c4 <spiDataTransfer>:
    34c4:	4b04      	ldr	r3, [pc, #16]	; (34d8 <spiDataTransfer+0x14>)
    34c6:	0280      	lsls	r0, r0, #10
    34c8:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    34ca:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    34cc:	7e03      	ldrb	r3, [r0, #24]
    34ce:	075b      	lsls	r3, r3, #29
    34d0:	d5fc      	bpl.n	34cc <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    34d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
    34d4:	b2c0      	uxtb	r0, r0
}
    34d6:	4770      	bx	lr
    34d8:	42000800 	.word	0x42000800

000034dc <spiDataOut>:
    34dc:	4b04      	ldr	r3, [pc, #16]	; (34f0 <spiDataOut+0x14>)
    34de:	0280      	lsls	r0, r0, #10
    34e0:	18c0      	adds	r0, r0, r3

void spiDataOut(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    34e2:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    34e4:	7e03      	ldrb	r3, [r0, #24]
    34e6:	075b      	lsls	r3, r3, #29
    34e8:	d5fc      	bpl.n	34e4 <spiDataOut+0x8>
    u8_t dummy = sercom(id)->SPI.DATA.reg;
    34ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
}
    34ec:	4770      	bx	lr
    34ee:	46c0      	nop			; (mov r8, r8)
    34f0:	42000800 	.word	0x42000800

000034f4 <spiDataIn>:
    34f4:	4b05      	ldr	r3, [pc, #20]	; (350c <spiDataIn+0x18>)
    34f6:	0280      	lsls	r0, r0, #10
    34f8:	18c0      	adds	r0, r0, r3

u8_t spiDataIn(SercomId id) {
    sercom(id)->SPI.DATA.reg = 0xFF;
    34fa:	23ff      	movs	r3, #255	; 0xff
    34fc:	6283      	str	r3, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    34fe:	7e03      	ldrb	r3, [r0, #24]
    3500:	075b      	lsls	r3, r3, #29
    3502:	d5fc      	bpl.n	34fe <spiDataIn+0xa>
    return sercom(id)->SPI.DATA.reg;
    3504:	6a80      	ldr	r0, [r0, #40]	; 0x28
    3506:	b2c0      	uxtb	r0, r0
}
    3508:	4770      	bx	lr
    350a:	46c0      	nop			; (mov r8, r8)
    350c:	42000800 	.word	0x42000800

00003510 <usartDataOut>:
    3510:	4b04      	ldr	r3, [pc, #16]	; (3524 <usartDataOut+0x14>)
    3512:	0280      	lsls	r0, r0, #10
    3514:	18c0      	adds	r0, r0, r3

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    3516:	b289      	uxth	r1, r1
    3518:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    351a:	7e03      	ldrb	r3, [r0, #24]
    351c:	07db      	lsls	r3, r3, #31
    351e:	d5fc      	bpl.n	351a <usartDataOut+0xa>
}
    3520:	4770      	bx	lr
    3522:	46c0      	nop			; (mov r8, r8)
    3524:	42000800 	.word	0x42000800

00003528 <usartDataIn>:
    3528:	4b02      	ldr	r3, [pc, #8]	; (3534 <usartDataIn+0xc>)
    352a:	0280      	lsls	r0, r0, #10
    352c:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    352e:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    3530:	b2c0      	uxtb	r0, r0
}
    3532:	4770      	bx	lr
    3534:	42000800 	.word	0x42000800

00003538 <findMainAltitude>:
#include <boardDefines.h>


void findMainAltitude() {

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    3538:	4a11      	ldr	r2, [pc, #68]	; (3580 <findMainAltitude+0x48>)
    353a:	7851      	ldrb	r1, [r2, #1]
    353c:	0013      	movs	r3, r2
    353e:	2900      	cmp	r1, #0
    3540:	d105      	bne.n	354e <findMainAltitude+0x16>
    3542:	7811      	ldrb	r1, [r2, #0]
    3544:	2900      	cmp	r1, #0
    3546:	d002      	beq.n	354e <findMainAltitude+0x16>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelASettings.MAIN_DEPLOY;
    3548:	8853      	ldrh	r3, [r2, #2]
    354a:	8313      	strh	r3, [r2, #24]
        return;
    354c:	e017      	b.n	357e <findMainAltitude+0x46>
    }
    if (deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    354e:	79da      	ldrb	r2, [r3, #7]
    3550:	2a00      	cmp	r2, #0
    3552:	d104      	bne.n	355e <findMainAltitude+0x26>
    3554:	799a      	ldrb	r2, [r3, #6]
    3556:	2a00      	cmp	r2, #0
    3558:	d001      	beq.n	355e <findMainAltitude+0x26>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelBSettings.MAIN_DEPLOY;
    355a:	891a      	ldrh	r2, [r3, #8]
    355c:	e00e      	b.n	357c <findMainAltitude+0x44>
        return;
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    355e:	7b5a      	ldrb	r2, [r3, #13]
    3560:	2a00      	cmp	r2, #0
    3562:	d104      	bne.n	356e <findMainAltitude+0x36>
    3564:	7b1a      	ldrb	r2, [r3, #12]
    3566:	2a00      	cmp	r2, #0
    3568:	d001      	beq.n	356e <findMainAltitude+0x36>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelCSettings.MAIN_DEPLOY;
    356a:	89da      	ldrh	r2, [r3, #14]
    356c:	e006      	b.n	357c <findMainAltitude+0x44>
        return;
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    356e:	7cda      	ldrb	r2, [r3, #19]
    3570:	2a00      	cmp	r2, #0
    3572:	d104      	bne.n	357e <findMainAltitude+0x46>
    3574:	7c9a      	ldrb	r2, [r3, #18]
    3576:	2a00      	cmp	r2, #0
    3578:	d001      	beq.n	357e <findMainAltitude+0x46>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelDSettings.MAIN_DEPLOY;
    357a:	8a9a      	ldrh	r2, [r3, #20]
    357c:	831a      	strh	r2, [r3, #24]
        return;
    }


}
    357e:	4770      	bx	lr
    3580:	20000180 	.word	0x20000180

00003584 <applyDefaultSettings>:
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    3584:	2096      	movs	r0, #150	; 0x96

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    3586:	2200      	movs	r2, #0

}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    3588:	2101      	movs	r1, #1
    358a:	4b09      	ldr	r3, [pc, #36]	; (35b0 <applyDefaultSettings+0x2c>)
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    358c:	0040      	lsls	r0, r0, #1

}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    358e:	7019      	strb	r1, [r3, #0]
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    3590:	7059      	strb	r1, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    3592:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;
    3594:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = true;
    3596:	7199      	strb	r1, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    3598:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    359a:	8118      	strh	r0, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = 0;
    359c:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = false;
    359e:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = DROGUE_t;
    35a0:	7359      	strb	r1, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = 0;
    35a2:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = 0;
    35a4:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = false;
    35a6:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = MAIN_t;
    35a8:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = 300;
    35aa:	8298      	strh	r0, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = 0;
    35ac:	759a      	strb	r2, [r3, #22]
}
    35ae:	4770      	bx	lr
    35b0:	20000180 	.word	0x20000180

000035b4 <putSettings>:

void putSettings() {
    35b4:	b500      	push	{lr}
    35b6:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    35b8:	4669      	mov	r1, sp
    settings[1] = deploymentSettings.channelASettings.TYPE;
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    35ba:	4668      	mov	r0, sp

void putSettings() {

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    35bc:	4b17      	ldr	r3, [pc, #92]	; (361c <putSettings+0x68>)
    35be:	781a      	ldrb	r2, [r3, #0]
    35c0:	700a      	strb	r2, [r1, #0]
    settings[1] = deploymentSettings.channelASettings.TYPE;
    35c2:	785a      	ldrb	r2, [r3, #1]
    35c4:	704a      	strb	r2, [r1, #1]
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    35c6:	885a      	ldrh	r2, [r3, #2]
    35c8:	0a11      	lsrs	r1, r2, #8
    35ca:	7081      	strb	r1, [r0, #2]
    settings[3] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 0;
    35cc:	70c2      	strb	r2, [r0, #3]
    settings[4] = deploymentSettings.channelASettings.APPOGE_DELAY;
    35ce:	791a      	ldrb	r2, [r3, #4]
    35d0:	7102      	strb	r2, [r0, #4]

    settings[5] = deploymentSettings.channelBSettings.ENABLED;
    35d2:	799a      	ldrb	r2, [r3, #6]
    35d4:	7142      	strb	r2, [r0, #5]
    settings[6] = deploymentSettings.channelBSettings.TYPE;
    35d6:	79da      	ldrb	r2, [r3, #7]
    35d8:	7182      	strb	r2, [r0, #6]
    settings[7] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 8;
    35da:	891a      	ldrh	r2, [r3, #8]
    35dc:	0a11      	lsrs	r1, r2, #8
    35de:	71c1      	strb	r1, [r0, #7]
    settings[8] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 0;
    35e0:	7202      	strb	r2, [r0, #8]
    settings[9] = deploymentSettings.channelBSettings.APPOGE_DELAY;
    35e2:	7a9a      	ldrb	r2, [r3, #10]
    35e4:	7242      	strb	r2, [r0, #9]

    settings[10] = deploymentSettings.channelCSettings.ENABLED;
    35e6:	7b1a      	ldrb	r2, [r3, #12]
    35e8:	7282      	strb	r2, [r0, #10]
    settings[11] = deploymentSettings.channelCSettings.TYPE;
    35ea:	7b5a      	ldrb	r2, [r3, #13]
    35ec:	72c2      	strb	r2, [r0, #11]
    settings[12] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 8;
    35ee:	89da      	ldrh	r2, [r3, #14]
    35f0:	0a11      	lsrs	r1, r2, #8
    35f2:	7301      	strb	r1, [r0, #12]
    settings[13] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 0;
    35f4:	7342      	strb	r2, [r0, #13]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;
    35f6:	7c1a      	ldrb	r2, [r3, #16]
    35f8:	7382      	strb	r2, [r0, #14]

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    35fa:	7c9a      	ldrb	r2, [r3, #18]
    35fc:	73c2      	strb	r2, [r0, #15]
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    35fe:	7cda      	ldrb	r2, [r3, #19]
    3600:	7402      	strb	r2, [r0, #16]
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    3602:	8a9a      	ldrh	r2, [r3, #20]
    3604:	0a11      	lsrs	r1, r2, #8
    3606:	7441      	strb	r1, [r0, #17]
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    3608:	7482      	strb	r2, [r0, #18]
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    360a:	7d9b      	ldrb	r3, [r3, #22]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    360c:	4669      	mov	r1, sp
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    360e:	74c3      	strb	r3, [r0, #19]

    settings[20] = 0x00;
    3610:	2000      	movs	r0, #0

    AT25SEWritePage(0x00,settings);
    3612:	4b03      	ldr	r3, [pc, #12]	; (3620 <putSettings+0x6c>)
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;

    settings[20] = 0x00;
    3614:	7508      	strb	r0, [r1, #20]

    AT25SEWritePage(0x00,settings);
    3616:	4798      	blx	r3
}
    3618:	b041      	add	sp, #260	; 0x104
    361a:	bd00      	pop	{pc}
    361c:	20000180 	.word	0x20000180
    3620:	000002a5 	.word	0x000002a5

00003624 <getSettings>:




void getSettings() {
    3624:	b500      	push	{lr}
    3626:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);
    3628:	4669      	mov	r1, sp
    362a:	4b2c      	ldr	r3, [pc, #176]	; (36dc <getSettings+0xb8>)
    362c:	2000      	movs	r0, #0
    362e:	4798      	blx	r3

    deploymentSettings.channelASettings.ENABLED = settings[0];
    3630:	466a      	mov	r2, sp
    3632:	7812      	ldrb	r2, [r2, #0]
    3634:	4b2a      	ldr	r3, [pc, #168]	; (36e0 <getSettings+0xbc>)
    3636:	1e51      	subs	r1, r2, #1
    3638:	418a      	sbcs	r2, r1
    363a:	701a      	strb	r2, [r3, #0]
    deploymentSettings.channelASettings.TYPE = settings[1];
    363c:	466a      	mov	r2, sp
    363e:	7852      	ldrb	r2, [r2, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    3640:	4669      	mov	r1, sp
    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);

    deploymentSettings.channelASettings.ENABLED = settings[0];
    deploymentSettings.channelASettings.TYPE = settings[1];
    3642:	705a      	strb	r2, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    3644:	466a      	mov	r2, sp
    3646:	7892      	ldrb	r2, [r2, #2]
    3648:	78c9      	ldrb	r1, [r1, #3]
    364a:	0212      	lsls	r2, r2, #8
    364c:	430a      	orrs	r2, r1
    364e:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];
    3650:	466a      	mov	r2, sp
    3652:	7912      	ldrb	r2, [r2, #4]
    3654:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    3656:	466a      	mov	r2, sp
    3658:	7952      	ldrb	r2, [r2, #5]
    365a:	1e51      	subs	r1, r2, #1
    365c:	418a      	sbcs	r2, r1
    365e:	719a      	strb	r2, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = settings[6];
    3660:	466a      	mov	r2, sp
    3662:	7992      	ldrb	r2, [r2, #6]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    3664:	4669      	mov	r1, sp
    deploymentSettings.channelASettings.TYPE = settings[1];
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    deploymentSettings.channelBSettings.TYPE = settings[6];
    3666:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    3668:	466a      	mov	r2, sp
    366a:	79d2      	ldrb	r2, [r2, #7]
    366c:	7a09      	ldrb	r1, [r1, #8]
    366e:	0212      	lsls	r2, r2, #8
    3670:	430a      	orrs	r2, r1
    3672:	811a      	strh	r2, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];
    3674:	466a      	mov	r2, sp
    3676:	7a52      	ldrb	r2, [r2, #9]
    3678:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    367a:	466a      	mov	r2, sp
    367c:	7a92      	ldrb	r2, [r2, #10]
    367e:	1e51      	subs	r1, r2, #1
    3680:	418a      	sbcs	r2, r1
    3682:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = settings[11];
    3684:	466a      	mov	r2, sp
    3686:	7ad2      	ldrb	r2, [r2, #11]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    3688:	4669      	mov	r1, sp
    deploymentSettings.channelBSettings.TYPE = settings[6];
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    deploymentSettings.channelCSettings.TYPE = settings[11];
    368a:	735a      	strb	r2, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    368c:	466a      	mov	r2, sp
    368e:	7b12      	ldrb	r2, [r2, #12]
    3690:	7b49      	ldrb	r1, [r1, #13]
    3692:	0212      	lsls	r2, r2, #8
    3694:	430a      	orrs	r2, r1
    3696:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];
    3698:	466a      	mov	r2, sp
    369a:	7b92      	ldrb	r2, [r2, #14]
    369c:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    369e:	466a      	mov	r2, sp
    36a0:	7bd2      	ldrb	r2, [r2, #15]
    36a2:	1e51      	subs	r1, r2, #1
    36a4:	418a      	sbcs	r2, r1
    36a6:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = settings[16];
    36a8:	466a      	mov	r2, sp
    36aa:	7c12      	ldrb	r2, [r2, #16]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    36ac:	4669      	mov	r1, sp
    deploymentSettings.channelCSettings.TYPE = settings[11];
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    deploymentSettings.channelDSettings.TYPE = settings[16];
    36ae:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    36b0:	466a      	mov	r2, sp
    36b2:	7c52      	ldrb	r2, [r2, #17]
    36b4:	7c89      	ldrb	r1, [r1, #18]
    36b6:	0212      	lsls	r2, r2, #8
    36b8:	430a      	orrs	r2, r1
    36ba:	829a      	strh	r2, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = settings[19];
    36bc:	466a      	mov	r2, sp
    36be:	7cd2      	ldrb	r2, [r2, #19]
    36c0:	759a      	strb	r2, [r3, #22]


    if (settings[20] == 0xFF) {
    36c2:	466b      	mov	r3, sp
    36c4:	7d1b      	ldrb	r3, [r3, #20]
    36c6:	2bff      	cmp	r3, #255	; 0xff
    36c8:	d103      	bne.n	36d2 <getSettings+0xae>
        applyDefaultSettings();
    36ca:	4b06      	ldr	r3, [pc, #24]	; (36e4 <getSettings+0xc0>)
    36cc:	4798      	blx	r3
        putSettings();
    36ce:	4b06      	ldr	r3, [pc, #24]	; (36e8 <getSettings+0xc4>)
    36d0:	4798      	blx	r3
    }

    findMainAltitude();
    36d2:	4b06      	ldr	r3, [pc, #24]	; (36ec <getSettings+0xc8>)
    36d4:	4798      	blx	r3

}
    36d6:	b041      	add	sp, #260	; 0x104
    36d8:	bd00      	pop	{pc}
    36da:	46c0      	nop			; (mov r8, r8)
    36dc:	0000035d 	.word	0x0000035d
    36e0:	20000180 	.word	0x20000180
    36e4:	00003585 	.word	0x00003585
    36e8:	000035b5 	.word	0x000035b5
    36ec:	00003539 	.word	0x00003539

000036f0 <sendFlightLogs>:
#include <util.h>
#include <boardDefines.h>

void sendFlightLogs() {
    36f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    36f2:	2400      	movs	r4, #0

        if (isFlightLogged(flightLog)) {
    36f4:	0020      	movs	r0, r4
    36f6:	4b1e      	ldr	r3, [pc, #120]	; (3770 <sendFlightLogs+0x80>)
    36f8:	4798      	blx	r3
    36fa:	2800      	cmp	r0, #0
    36fc:	d003      	beq.n	3706 <sendFlightLogs+0x16>

            usartDataOut(USART3, flightLog);
    36fe:	0021      	movs	r1, r4
    3700:	2003      	movs	r0, #3
    3702:	4b1c      	ldr	r3, [pc, #112]	; (3774 <sendFlightLogs+0x84>)
    3704:	4798      	blx	r3
#include <boardDefines.h>

void sendFlightLogs() {

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    3706:	3401      	adds	r4, #1
    3708:	b2e4      	uxtb	r4, r4
    370a:	2c14      	cmp	r4, #20
    370c:	d1f2      	bne.n	36f4 <sendFlightLogs+0x4>

            usartDataOut(USART3, flightLog);
        }
    }
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);
    370e:	21ff      	movs	r1, #255	; 0xff
    3710:	2003      	movs	r0, #3
    3712:	4c18      	ldr	r4, [pc, #96]	; (3774 <sendFlightLogs+0x84>)
    3714:	47a0      	blx	r4

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    3716:	4a18      	ldr	r2, [pc, #96]	; (3778 <sendFlightLogs+0x88>)
    3718:	7e13      	ldrb	r3, [r2, #24]
    371a:	075b      	lsls	r3, r3, #29
    371c:	d5fc      	bpl.n	3718 <sendFlightLogs+0x28>
    volatile u8_t flightToRead = usartDataIn(USART3);
    371e:	4b17      	ldr	r3, [pc, #92]	; (377c <sendFlightLogs+0x8c>)
    3720:	2003      	movs	r0, #3
    3722:	4798      	blx	r3
    3724:	466b      	mov	r3, sp
    3726:	71d8      	strb	r0, [r3, #7]


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    3728:	79d8      	ldrb	r0, [r3, #7]
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    volatile u8_t flightToRead = usartDataIn(USART3);
    372a:	1ddd      	adds	r5, r3, #7


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    372c:	b2c0      	uxtb	r0, r0
    372e:	4b14      	ldr	r3, [pc, #80]	; (3780 <sendFlightLogs+0x90>)
    3730:	4798      	blx	r3
    3732:	0007      	movs	r7, r0
    u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
    3734:	7828      	ldrb	r0, [r5, #0]
    3736:	4b13      	ldr	r3, [pc, #76]	; (3784 <sendFlightLogs+0x94>)
    3738:	b2c0      	uxtb	r0, r0
    373a:	4798      	blx	r3
    373c:	0006      	movs	r6, r0

    //inform of page numbers
    u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    373e:	1bc5      	subs	r5, r0, r7
    3740:	0a2d      	lsrs	r5, r5, #8
    usartDataOut(USART3, pagesToSend >> 0);
    3742:	b2e9      	uxtb	r1, r5
    3744:	2003      	movs	r0, #3
    3746:	47a0      	blx	r4
    usartDataOut(USART3, pagesToSend >> 8);
    3748:	b2a9      	uxth	r1, r5
    374a:	0a09      	lsrs	r1, r1, #8
    374c:	2003      	movs	r0, #3
    374e:	47a0      	blx	r4

    //send flight end address for % full
    usartDataOut(USART3, flightEndAddress >> 0);
    3750:	b2f1      	uxtb	r1, r6
    3752:	2003      	movs	r0, #3
    3754:	47a0      	blx	r4
    usartDataOut(USART3, flightEndAddress >> 8);
    3756:	0a31      	lsrs	r1, r6, #8
    3758:	b2c9      	uxtb	r1, r1
    375a:	2003      	movs	r0, #3
    375c:	47a0      	blx	r4
    usartDataOut(USART3, flightEndAddress >> 16);
    375e:	0c31      	lsrs	r1, r6, #16
    3760:	b2c9      	uxtb	r1, r1
    3762:	2003      	movs	r0, #3
    3764:	47a0      	blx	r4

    //USART out the flights pages
    sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    3766:	0031      	movs	r1, r6
    3768:	0038      	movs	r0, r7
    376a:	4b07      	ldr	r3, [pc, #28]	; (3788 <sendFlightLogs+0x98>)
    376c:	4798      	blx	r3

}
    376e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3770:	00002ee9 	.word	0x00002ee9
    3774:	00003511 	.word	0x00003511
    3778:	42001400 	.word	0x42001400
    377c:	00003529 	.word	0x00003529
    3780:	00002e99 	.word	0x00002e99
    3784:	00002ec1 	.word	0x00002ec1
    3788:	00000add 	.word	0x00000add

0000378c <attemptConnection>:

void attemptConnection() {
    378c:	b570      	push	{r4, r5, r6, lr}

    if (USARTconnectionAvaliable()) {
    378e:	4b14      	ldr	r3, [pc, #80]	; (37e0 <attemptConnection+0x54>)
    3790:	4798      	blx	r3
    3792:	2800      	cmp	r0, #0
    3794:	d022      	beq.n	37dc <attemptConnection+0x50>

        flightState = flightIdle;
    3796:	2201      	movs	r2, #1
    3798:	4b12      	ldr	r3, [pc, #72]	; (37e4 <attemptConnection+0x58>)
    379a:	701a      	strb	r2, [r3, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    379c:	4a12      	ldr	r2, [pc, #72]	; (37e8 <attemptConnection+0x5c>)
    379e:	7e13      	ldrb	r3, [r2, #24]
    37a0:	075b      	lsls	r3, r3, #29
    37a2:	d5fc      	bpl.n	379e <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    37a4:	2003      	movs	r0, #3
    37a6:	4b11      	ldr	r3, [pc, #68]	; (37ec <attemptConnection+0x60>)
    37a8:	4798      	blx	r3
    37aa:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    37ac:	2c4c      	cmp	r4, #76	; 0x4c
    37ae:	d102      	bne.n	37b6 <attemptConnection+0x2a>

            sendFlightLogs();
    37b0:	4b0f      	ldr	r3, [pc, #60]	; (37f0 <attemptConnection+0x64>)
    37b2:	4798      	blx	r3
    37b4:	e012      	b.n	37dc <attemptConnection+0x50>
        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    37b6:	2845      	cmp	r0, #69	; 0x45
    37b8:	d110      	bne.n	37dc <attemptConnection+0x50>

            //getSettings();

            AT25SFChipErase();
    37ba:	4e0e      	ldr	r6, [pc, #56]	; (37f4 <attemptConnection+0x68>)
    37bc:	47b0      	blx	r6
            AT25SFHoldTillReady();
    37be:	4d0e      	ldr	r5, [pc, #56]	; (37f8 <attemptConnection+0x6c>)
    37c0:	47a8      	blx	r5
            delay_ms(100);
    37c2:	2064      	movs	r0, #100	; 0x64
    37c4:	4b0d      	ldr	r3, [pc, #52]	; (37fc <attemptConnection+0x70>)
    37c6:	4798      	blx	r3
            AT25SFChipErase();
    37c8:	47b0      	blx	r6

            AT25SFHoldTillReady();
    37ca:	47a8      	blx	r5

            //getSettings();

            usartDataOut(USART3, 'E');
    37cc:	2003      	movs	r0, #3
    37ce:	4b0c      	ldr	r3, [pc, #48]	; (3800 <attemptConnection+0x74>)
    37d0:	0021      	movs	r1, r4
    37d2:	4798      	blx	r3
            beep(400);
    37d4:	20c8      	movs	r0, #200	; 0xc8
    37d6:	4b0b      	ldr	r3, [pc, #44]	; (3804 <attemptConnection+0x78>)
    37d8:	0040      	lsls	r0, r0, #1
    37da:	4798      	blx	r3


        }
    }

}
    37dc:	bd70      	pop	{r4, r5, r6, pc}
    37de:	46c0      	nop			; (mov r8, r8)
    37e0:	00000aa9 	.word	0x00000aa9
    37e4:	200001ac 	.word	0x200001ac
    37e8:	42001400 	.word	0x42001400
    37ec:	00003529 	.word	0x00003529
    37f0:	000036f1 	.word	0x000036f1
    37f4:	00000219 	.word	0x00000219
    37f8:	000001e5 	.word	0x000001e5
    37fc:	000010ed 	.word	0x000010ed
    3800:	00003511 	.word	0x00003511
    3804:	00000e1d 	.word	0x00000e1d

00003808 <pow>:
    3808:	b5f0      	push	{r4, r5, r6, r7, lr}
    380a:	465f      	mov	r7, fp
    380c:	464d      	mov	r5, r9
    380e:	4656      	mov	r6, sl
    3810:	4644      	mov	r4, r8
    3812:	b4f0      	push	{r4, r5, r6, r7}
    3814:	b091      	sub	sp, #68	; 0x44
    3816:	001f      	movs	r7, r3
    3818:	0004      	movs	r4, r0
    381a:	000d      	movs	r5, r1
    381c:	0016      	movs	r6, r2
    381e:	f000 f9af 	bl	3b80 <__ieee754_pow>
    3822:	4bcf      	ldr	r3, [pc, #828]	; (3b60 <pow+0x358>)
    3824:	9002      	str	r0, [sp, #8]
    3826:	9103      	str	r1, [sp, #12]
    3828:	469b      	mov	fp, r3
    382a:	781b      	ldrb	r3, [r3, #0]
    382c:	b25b      	sxtb	r3, r3
    382e:	4699      	mov	r9, r3
    3830:	3301      	adds	r3, #1
    3832:	d04f      	beq.n	38d4 <pow+0xcc>
    3834:	0032      	movs	r2, r6
    3836:	003b      	movs	r3, r7
    3838:	0030      	movs	r0, r6
    383a:	0039      	movs	r1, r7
    383c:	f003 f950 	bl	6ae0 <__aeabi_dcmpun>
    3840:	9000      	str	r0, [sp, #0]
    3842:	2800      	cmp	r0, #0
    3844:	d146      	bne.n	38d4 <pow+0xcc>
    3846:	0022      	movs	r2, r4
    3848:	002b      	movs	r3, r5
    384a:	0020      	movs	r0, r4
    384c:	0029      	movs	r1, r5
    384e:	f003 f947 	bl	6ae0 <__aeabi_dcmpun>
    3852:	2200      	movs	r2, #0
    3854:	4682      	mov	sl, r0
    3856:	2800      	cmp	r0, #0
    3858:	d134      	bne.n	38c4 <pow+0xbc>
    385a:	2300      	movs	r3, #0
    385c:	0020      	movs	r0, r4
    385e:	0029      	movs	r1, r5
    3860:	f001 f988 	bl	4b74 <__aeabi_dcmpeq>
    3864:	2800      	cmp	r0, #0
    3866:	d03a      	beq.n	38de <pow+0xd6>
    3868:	2200      	movs	r2, #0
    386a:	2300      	movs	r3, #0
    386c:	0030      	movs	r0, r6
    386e:	0039      	movs	r1, r7
    3870:	f001 f980 	bl	4b74 <__aeabi_dcmpeq>
    3874:	9005      	str	r0, [sp, #20]
    3876:	2800      	cmp	r0, #0
    3878:	d100      	bne.n	387c <pow+0x74>
    387a:	e074      	b.n	3966 <pow+0x15e>
    387c:	ab06      	add	r3, sp, #24
    387e:	4698      	mov	r8, r3
    3880:	2301      	movs	r3, #1
    3882:	4642      	mov	r2, r8
    3884:	9306      	str	r3, [sp, #24]
    3886:	4bb7      	ldr	r3, [pc, #732]	; (3b64 <pow+0x35c>)
    3888:	6053      	str	r3, [r2, #4]
    388a:	4643      	mov	r3, r8
    388c:	4652      	mov	r2, sl
    388e:	609c      	str	r4, [r3, #8]
    3890:	60dd      	str	r5, [r3, #12]
    3892:	621a      	str	r2, [r3, #32]
    3894:	611e      	str	r6, [r3, #16]
    3896:	615f      	str	r7, [r3, #20]
    3898:	4642      	mov	r2, r8
    389a:	2300      	movs	r3, #0
    389c:	2400      	movs	r4, #0
    389e:	6193      	str	r3, [r2, #24]
    38a0:	61d4      	str	r4, [r2, #28]
    38a2:	464b      	mov	r3, r9
    38a4:	2b00      	cmp	r3, #0
    38a6:	d100      	bne.n	38aa <pow+0xa2>
    38a8:	e094      	b.n	39d4 <pow+0x1cc>
    38aa:	2300      	movs	r3, #0
    38ac:	4cae      	ldr	r4, [pc, #696]	; (3b68 <pow+0x360>)
    38ae:	9300      	str	r3, [sp, #0]
    38b0:	9401      	str	r4, [sp, #4]
    38b2:	9800      	ldr	r0, [sp, #0]
    38b4:	9901      	ldr	r1, [sp, #4]
    38b6:	b011      	add	sp, #68	; 0x44
    38b8:	bc3c      	pop	{r2, r3, r4, r5}
    38ba:	4690      	mov	r8, r2
    38bc:	4699      	mov	r9, r3
    38be:	46a2      	mov	sl, r4
    38c0:	46ab      	mov	fp, r5
    38c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38c4:	2300      	movs	r3, #0
    38c6:	0030      	movs	r0, r6
    38c8:	0039      	movs	r1, r7
    38ca:	f001 f953 	bl	4b74 <__aeabi_dcmpeq>
    38ce:	2800      	cmp	r0, #0
    38d0:	d000      	beq.n	38d4 <pow+0xcc>
    38d2:	e0eb      	b.n	3aac <pow+0x2a4>
    38d4:	9b02      	ldr	r3, [sp, #8]
    38d6:	9c03      	ldr	r4, [sp, #12]
    38d8:	9300      	str	r3, [sp, #0]
    38da:	9401      	str	r4, [sp, #4]
    38dc:	e7e9      	b.n	38b2 <pow+0xaa>
    38de:	9802      	ldr	r0, [sp, #8]
    38e0:	9903      	ldr	r1, [sp, #12]
    38e2:	f000 ff7d 	bl	47e0 <finite>
    38e6:	4681      	mov	r9, r0
    38e8:	2800      	cmp	r0, #0
    38ea:	d100      	bne.n	38ee <pow+0xe6>
    38ec:	e086      	b.n	39fc <pow+0x1f4>
    38ee:	9802      	ldr	r0, [sp, #8]
    38f0:	9903      	ldr	r1, [sp, #12]
    38f2:	2200      	movs	r2, #0
    38f4:	2300      	movs	r3, #0
    38f6:	f001 f93d 	bl	4b74 <__aeabi_dcmpeq>
    38fa:	2800      	cmp	r0, #0
    38fc:	d0ea      	beq.n	38d4 <pow+0xcc>
    38fe:	0020      	movs	r0, r4
    3900:	0029      	movs	r1, r5
    3902:	f000 ff6d 	bl	47e0 <finite>
    3906:	9a02      	ldr	r2, [sp, #8]
    3908:	9b03      	ldr	r3, [sp, #12]
    390a:	9200      	str	r2, [sp, #0]
    390c:	9301      	str	r3, [sp, #4]
    390e:	2800      	cmp	r0, #0
    3910:	d0cf      	beq.n	38b2 <pow+0xaa>
    3912:	0030      	movs	r0, r6
    3914:	0039      	movs	r1, r7
    3916:	f000 ff63 	bl	47e0 <finite>
    391a:	9a02      	ldr	r2, [sp, #8]
    391c:	9b03      	ldr	r3, [sp, #12]
    391e:	9200      	str	r2, [sp, #0]
    3920:	9301      	str	r3, [sp, #4]
    3922:	2800      	cmp	r0, #0
    3924:	d0c5      	beq.n	38b2 <pow+0xaa>
    3926:	ab06      	add	r3, sp, #24
    3928:	4698      	mov	r8, r3
    392a:	2304      	movs	r3, #4
    392c:	4642      	mov	r2, r8
    392e:	9306      	str	r3, [sp, #24]
    3930:	4b8c      	ldr	r3, [pc, #560]	; (3b64 <pow+0x35c>)
    3932:	6094      	str	r4, [r2, #8]
    3934:	60d5      	str	r5, [r2, #12]
    3936:	6053      	str	r3, [r2, #4]
    3938:	2300      	movs	r3, #0
    393a:	2400      	movs	r4, #0
    393c:	6213      	str	r3, [r2, #32]
    393e:	2300      	movs	r3, #0
    3940:	6193      	str	r3, [r2, #24]
    3942:	61d4      	str	r4, [r2, #28]
    3944:	465b      	mov	r3, fp
    3946:	781b      	ldrb	r3, [r3, #0]
    3948:	6116      	str	r6, [r2, #16]
    394a:	6157      	str	r7, [r2, #20]
    394c:	b25b      	sxtb	r3, r3
    394e:	2b02      	cmp	r3, #2
    3950:	d004      	beq.n	395c <pow+0x154>
    3952:	4640      	mov	r0, r8
    3954:	f000 ff4e 	bl	47f4 <matherr>
    3958:	2800      	cmp	r0, #0
    395a:	d140      	bne.n	39de <pow+0x1d6>
    395c:	f003 fa8e 	bl	6e7c <__errno>
    3960:	2322      	movs	r3, #34	; 0x22
    3962:	6003      	str	r3, [r0, #0]
    3964:	e03b      	b.n	39de <pow+0x1d6>
    3966:	0030      	movs	r0, r6
    3968:	0039      	movs	r1, r7
    396a:	f000 ff39 	bl	47e0 <finite>
    396e:	9a02      	ldr	r2, [sp, #8]
    3970:	9b03      	ldr	r3, [sp, #12]
    3972:	9200      	str	r2, [sp, #0]
    3974:	9301      	str	r3, [sp, #4]
    3976:	2800      	cmp	r0, #0
    3978:	d09b      	beq.n	38b2 <pow+0xaa>
    397a:	2200      	movs	r2, #0
    397c:	2300      	movs	r3, #0
    397e:	0030      	movs	r0, r6
    3980:	0039      	movs	r1, r7
    3982:	f001 f8fd 	bl	4b80 <__aeabi_dcmplt>
    3986:	2800      	cmp	r0, #0
    3988:	d100      	bne.n	398c <pow+0x184>
    398a:	e792      	b.n	38b2 <pow+0xaa>
    398c:	ab06      	add	r3, sp, #24
    398e:	4698      	mov	r8, r3
    3990:	2301      	movs	r3, #1
    3992:	4642      	mov	r2, r8
    3994:	9306      	str	r3, [sp, #24]
    3996:	4b73      	ldr	r3, [pc, #460]	; (3b64 <pow+0x35c>)
    3998:	6053      	str	r3, [r2, #4]
    399a:	4643      	mov	r3, r8
    399c:	9a05      	ldr	r2, [sp, #20]
    399e:	609c      	str	r4, [r3, #8]
    39a0:	60dd      	str	r5, [r3, #12]
    39a2:	621a      	str	r2, [r3, #32]
    39a4:	611e      	str	r6, [r3, #16]
    39a6:	615f      	str	r7, [r3, #20]
    39a8:	465b      	mov	r3, fp
    39aa:	781b      	ldrb	r3, [r3, #0]
    39ac:	b25b      	sxtb	r3, r3
    39ae:	2b00      	cmp	r3, #0
    39b0:	d00b      	beq.n	39ca <pow+0x1c2>
    39b2:	2000      	movs	r0, #0
    39b4:	4642      	mov	r2, r8
    39b6:	496d      	ldr	r1, [pc, #436]	; (3b6c <pow+0x364>)
    39b8:	6190      	str	r0, [r2, #24]
    39ba:	61d1      	str	r1, [r2, #28]
    39bc:	2b02      	cmp	r3, #2
    39be:	d109      	bne.n	39d4 <pow+0x1cc>
    39c0:	f003 fa5c 	bl	6e7c <__errno>
    39c4:	2321      	movs	r3, #33	; 0x21
    39c6:	6003      	str	r3, [r0, #0]
    39c8:	e009      	b.n	39de <pow+0x1d6>
    39ca:	4642      	mov	r2, r8
    39cc:	2300      	movs	r3, #0
    39ce:	2400      	movs	r4, #0
    39d0:	6193      	str	r3, [r2, #24]
    39d2:	61d4      	str	r4, [r2, #28]
    39d4:	4640      	mov	r0, r8
    39d6:	f000 ff0d 	bl	47f4 <matherr>
    39da:	2800      	cmp	r0, #0
    39dc:	d0f0      	beq.n	39c0 <pow+0x1b8>
    39de:	4643      	mov	r3, r8
    39e0:	6a1b      	ldr	r3, [r3, #32]
    39e2:	2b00      	cmp	r3, #0
    39e4:	d004      	beq.n	39f0 <pow+0x1e8>
    39e6:	f003 fa49 	bl	6e7c <__errno>
    39ea:	4643      	mov	r3, r8
    39ec:	6a1b      	ldr	r3, [r3, #32]
    39ee:	6003      	str	r3, [r0, #0]
    39f0:	4643      	mov	r3, r8
    39f2:	69dc      	ldr	r4, [r3, #28]
    39f4:	699b      	ldr	r3, [r3, #24]
    39f6:	9300      	str	r3, [sp, #0]
    39f8:	9401      	str	r4, [sp, #4]
    39fa:	e75a      	b.n	38b2 <pow+0xaa>
    39fc:	0020      	movs	r0, r4
    39fe:	0029      	movs	r1, r5
    3a00:	f000 feee 	bl	47e0 <finite>
    3a04:	2800      	cmp	r0, #0
    3a06:	d100      	bne.n	3a0a <pow+0x202>
    3a08:	e771      	b.n	38ee <pow+0xe6>
    3a0a:	0030      	movs	r0, r6
    3a0c:	0039      	movs	r1, r7
    3a0e:	f000 fee7 	bl	47e0 <finite>
    3a12:	2800      	cmp	r0, #0
    3a14:	d100      	bne.n	3a18 <pow+0x210>
    3a16:	e76a      	b.n	38ee <pow+0xe6>
    3a18:	9802      	ldr	r0, [sp, #8]
    3a1a:	9903      	ldr	r1, [sp, #12]
    3a1c:	000b      	movs	r3, r1
    3a1e:	0002      	movs	r2, r0
    3a20:	f003 f85e 	bl	6ae0 <__aeabi_dcmpun>
    3a24:	ab06      	add	r3, sp, #24
    3a26:	4698      	mov	r8, r3
    3a28:	2800      	cmp	r0, #0
    3a2a:	d17a      	bne.n	3b22 <pow+0x31a>
    3a2c:	2303      	movs	r3, #3
    3a2e:	4642      	mov	r2, r8
    3a30:	9306      	str	r3, [sp, #24]
    3a32:	4b4c      	ldr	r3, [pc, #304]	; (3b64 <pow+0x35c>)
    3a34:	6210      	str	r0, [r2, #32]
    3a36:	6053      	str	r3, [r2, #4]
    3a38:	465b      	mov	r3, fp
    3a3a:	781b      	ldrb	r3, [r3, #0]
    3a3c:	6094      	str	r4, [r2, #8]
    3a3e:	60d5      	str	r5, [r2, #12]
    3a40:	b25b      	sxtb	r3, r3
    3a42:	6116      	str	r6, [r2, #16]
    3a44:	6157      	str	r7, [r2, #20]
    3a46:	4699      	mov	r9, r3
    3a48:	2b00      	cmp	r3, #0
    3a4a:	d148      	bne.n	3ade <pow+0x2d6>
    3a4c:	22e0      	movs	r2, #224	; 0xe0
    3a4e:	4641      	mov	r1, r8
    3a50:	4b47      	ldr	r3, [pc, #284]	; (3b70 <pow+0x368>)
    3a52:	0612      	lsls	r2, r2, #24
    3a54:	618a      	str	r2, [r1, #24]
    3a56:	61cb      	str	r3, [r1, #28]
    3a58:	0020      	movs	r0, r4
    3a5a:	2200      	movs	r2, #0
    3a5c:	2300      	movs	r3, #0
    3a5e:	0029      	movs	r1, r5
    3a60:	f001 f88e 	bl	4b80 <__aeabi_dcmplt>
    3a64:	2800      	cmp	r0, #0
    3a66:	d100      	bne.n	3a6a <pow+0x262>
    3a68:	e773      	b.n	3952 <pow+0x14a>
    3a6a:	2200      	movs	r2, #0
    3a6c:	4b41      	ldr	r3, [pc, #260]	; (3b74 <pow+0x36c>)
    3a6e:	0030      	movs	r0, r6
    3a70:	0039      	movs	r1, r7
    3a72:	f002 fa67 	bl	5f44 <__aeabi_dmul>
    3a76:	0004      	movs	r4, r0
    3a78:	000d      	movs	r5, r1
    3a7a:	f000 fec3 	bl	4804 <rint>
    3a7e:	0002      	movs	r2, r0
    3a80:	000b      	movs	r3, r1
    3a82:	0020      	movs	r0, r4
    3a84:	0029      	movs	r1, r5
    3a86:	f001 f875 	bl	4b74 <__aeabi_dcmpeq>
    3a8a:	2800      	cmp	r0, #0
    3a8c:	d105      	bne.n	3a9a <pow+0x292>
    3a8e:	22e0      	movs	r2, #224	; 0xe0
    3a90:	4b39      	ldr	r3, [pc, #228]	; (3b78 <pow+0x370>)
    3a92:	0612      	lsls	r2, r2, #24
    3a94:	4641      	mov	r1, r8
    3a96:	618a      	str	r2, [r1, #24]
    3a98:	61cb      	str	r3, [r1, #28]
    3a9a:	465b      	mov	r3, fp
    3a9c:	781b      	ldrb	r3, [r3, #0]
    3a9e:	b25b      	sxtb	r3, r3
    3aa0:	4699      	mov	r9, r3
    3aa2:	464b      	mov	r3, r9
    3aa4:	2b02      	cmp	r3, #2
    3aa6:	d000      	beq.n	3aaa <pow+0x2a2>
    3aa8:	e753      	b.n	3952 <pow+0x14a>
    3aaa:	e757      	b.n	395c <pow+0x154>
    3aac:	ab06      	add	r3, sp, #24
    3aae:	4698      	mov	r8, r3
    3ab0:	2301      	movs	r3, #1
    3ab2:	4642      	mov	r2, r8
    3ab4:	9306      	str	r3, [sp, #24]
    3ab6:	4b2b      	ldr	r3, [pc, #172]	; (3b64 <pow+0x35c>)
    3ab8:	6053      	str	r3, [r2, #4]
    3aba:	4643      	mov	r3, r8
    3abc:	609c      	str	r4, [r3, #8]
    3abe:	60dd      	str	r5, [r3, #12]
    3ac0:	2400      	movs	r4, #0
    3ac2:	9a00      	ldr	r2, [sp, #0]
    3ac4:	4d28      	ldr	r5, [pc, #160]	; (3b68 <pow+0x360>)
    3ac6:	621a      	str	r2, [r3, #32]
    3ac8:	611e      	str	r6, [r3, #16]
    3aca:	615f      	str	r7, [r3, #20]
    3acc:	619c      	str	r4, [r3, #24]
    3ace:	61dd      	str	r5, [r3, #28]
    3ad0:	464b      	mov	r3, r9
    3ad2:	9400      	str	r4, [sp, #0]
    3ad4:	9501      	str	r5, [sp, #4]
    3ad6:	2b02      	cmp	r3, #2
    3ad8:	d000      	beq.n	3adc <pow+0x2d4>
    3ada:	e77b      	b.n	39d4 <pow+0x1cc>
    3adc:	e6e9      	b.n	38b2 <pow+0xaa>
    3ade:	2200      	movs	r2, #0
    3ae0:	4641      	mov	r1, r8
    3ae2:	4b26      	ldr	r3, [pc, #152]	; (3b7c <pow+0x374>)
    3ae4:	0020      	movs	r0, r4
    3ae6:	618a      	str	r2, [r1, #24]
    3ae8:	61cb      	str	r3, [r1, #28]
    3aea:	2200      	movs	r2, #0
    3aec:	2300      	movs	r3, #0
    3aee:	0029      	movs	r1, r5
    3af0:	f001 f846 	bl	4b80 <__aeabi_dcmplt>
    3af4:	2800      	cmp	r0, #0
    3af6:	d0d4      	beq.n	3aa2 <pow+0x29a>
    3af8:	2200      	movs	r2, #0
    3afa:	4b1e      	ldr	r3, [pc, #120]	; (3b74 <pow+0x36c>)
    3afc:	0030      	movs	r0, r6
    3afe:	0039      	movs	r1, r7
    3b00:	f002 fa20 	bl	5f44 <__aeabi_dmul>
    3b04:	0004      	movs	r4, r0
    3b06:	000d      	movs	r5, r1
    3b08:	f000 fe7c 	bl	4804 <rint>
    3b0c:	0002      	movs	r2, r0
    3b0e:	000b      	movs	r3, r1
    3b10:	0020      	movs	r0, r4
    3b12:	0029      	movs	r1, r5
    3b14:	f001 f82e 	bl	4b74 <__aeabi_dcmpeq>
    3b18:	2800      	cmp	r0, #0
    3b1a:	d1be      	bne.n	3a9a <pow+0x292>
    3b1c:	2200      	movs	r2, #0
    3b1e:	4b13      	ldr	r3, [pc, #76]	; (3b6c <pow+0x364>)
    3b20:	e7b8      	b.n	3a94 <pow+0x28c>
    3b22:	2301      	movs	r3, #1
    3b24:	4642      	mov	r2, r8
    3b26:	9306      	str	r3, [sp, #24]
    3b28:	4b0e      	ldr	r3, [pc, #56]	; (3b64 <pow+0x35c>)
    3b2a:	6053      	str	r3, [r2, #4]
    3b2c:	4643      	mov	r3, r8
    3b2e:	464a      	mov	r2, r9
    3b30:	609c      	str	r4, [r3, #8]
    3b32:	60dd      	str	r5, [r3, #12]
    3b34:	621a      	str	r2, [r3, #32]
    3b36:	611e      	str	r6, [r3, #16]
    3b38:	615f      	str	r7, [r3, #20]
    3b3a:	2400      	movs	r4, #0
    3b3c:	465b      	mov	r3, fp
    3b3e:	571c      	ldrsb	r4, [r3, r4]
    3b40:	2c00      	cmp	r4, #0
    3b42:	d100      	bne.n	3b46 <pow+0x33e>
    3b44:	e741      	b.n	39ca <pow+0x1c2>
    3b46:	2300      	movs	r3, #0
    3b48:	2200      	movs	r2, #0
    3b4a:	0019      	movs	r1, r3
    3b4c:	0010      	movs	r0, r2
    3b4e:	f001 fdd5 	bl	56fc <__aeabi_ddiv>
    3b52:	4643      	mov	r3, r8
    3b54:	6198      	str	r0, [r3, #24]
    3b56:	61d9      	str	r1, [r3, #28]
    3b58:	2c02      	cmp	r4, #2
    3b5a:	d100      	bne.n	3b5e <pow+0x356>
    3b5c:	e730      	b.n	39c0 <pow+0x1b8>
    3b5e:	e739      	b.n	39d4 <pow+0x1cc>
    3b60:	200000b8 	.word	0x200000b8
    3b64:	00006ef4 	.word	0x00006ef4
    3b68:	3ff00000 	.word	0x3ff00000
    3b6c:	fff00000 	.word	0xfff00000
    3b70:	47efffff 	.word	0x47efffff
    3b74:	3fe00000 	.word	0x3fe00000
    3b78:	c7efffff 	.word	0xc7efffff
    3b7c:	7ff00000 	.word	0x7ff00000

00003b80 <__ieee754_pow>:
    3b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b82:	4656      	mov	r6, sl
    3b84:	464d      	mov	r5, r9
    3b86:	4644      	mov	r4, r8
    3b88:	465f      	mov	r7, fp
    3b8a:	b4f0      	push	{r4, r5, r6, r7}
    3b8c:	001c      	movs	r4, r3
    3b8e:	0013      	movs	r3, r2
    3b90:	0067      	lsls	r7, r4, #1
    3b92:	b091      	sub	sp, #68	; 0x44
    3b94:	087f      	lsrs	r7, r7, #1
    3b96:	9300      	str	r3, [sp, #0]
    3b98:	9401      	str	r4, [sp, #4]
    3b9a:	0006      	movs	r6, r0
    3b9c:	000d      	movs	r5, r1
    3b9e:	4680      	mov	r8, r0
    3ba0:	4689      	mov	r9, r1
    3ba2:	46a2      	mov	sl, r4
    3ba4:	433b      	orrs	r3, r7
    3ba6:	d032      	beq.n	3c0e <__ieee754_pow+0x8e>
    3ba8:	4b6e      	ldr	r3, [pc, #440]	; (3d64 <__ieee754_pow+0x1e4>)
    3baa:	006c      	lsls	r4, r5, #1
    3bac:	0864      	lsrs	r4, r4, #1
    3bae:	429c      	cmp	r4, r3
    3bb0:	dc29      	bgt.n	3c06 <__ieee754_pow+0x86>
    3bb2:	d026      	beq.n	3c02 <__ieee754_pow+0x82>
    3bb4:	429f      	cmp	r7, r3
    3bb6:	dc26      	bgt.n	3c06 <__ieee754_pow+0x86>
    3bb8:	4b6a      	ldr	r3, [pc, #424]	; (3d64 <__ieee754_pow+0x1e4>)
    3bba:	429f      	cmp	r7, r3
    3bbc:	d100      	bne.n	3bc0 <__ieee754_pow+0x40>
    3bbe:	e089      	b.n	3cd4 <__ieee754_pow+0x154>
    3bc0:	2300      	movs	r3, #0
    3bc2:	469b      	mov	fp, r3
    3bc4:	464b      	mov	r3, r9
    3bc6:	2b00      	cmp	r3, #0
    3bc8:	da00      	bge.n	3bcc <__ieee754_pow+0x4c>
    3bca:	e087      	b.n	3cdc <__ieee754_pow+0x15c>
    3bcc:	2a00      	cmp	r2, #0
    3bce:	d12f      	bne.n	3c30 <__ieee754_pow+0xb0>
    3bd0:	4b64      	ldr	r3, [pc, #400]	; (3d64 <__ieee754_pow+0x1e4>)
    3bd2:	429f      	cmp	r7, r3
    3bd4:	d100      	bne.n	3bd8 <__ieee754_pow+0x58>
    3bd6:	e09f      	b.n	3d18 <__ieee754_pow+0x198>
    3bd8:	4b63      	ldr	r3, [pc, #396]	; (3d68 <__ieee754_pow+0x1e8>)
    3bda:	429f      	cmp	r7, r3
    3bdc:	d05d      	beq.n	3c9a <__ieee754_pow+0x11a>
    3bde:	2380      	movs	r3, #128	; 0x80
    3be0:	05db      	lsls	r3, r3, #23
    3be2:	459a      	cmp	sl, r3
    3be4:	d101      	bne.n	3bea <__ieee754_pow+0x6a>
    3be6:	f000 fbc1 	bl	436c <__ieee754_pow+0x7ec>
    3bea:	4b60      	ldr	r3, [pc, #384]	; (3d6c <__ieee754_pow+0x1ec>)
    3bec:	459a      	cmp	sl, r3
    3bee:	d11f      	bne.n	3c30 <__ieee754_pow+0xb0>
    3bf0:	464b      	mov	r3, r9
    3bf2:	2b00      	cmp	r3, #0
    3bf4:	db1c      	blt.n	3c30 <__ieee754_pow+0xb0>
    3bf6:	0030      	movs	r0, r6
    3bf8:	0029      	movs	r1, r5
    3bfa:	f000 fcf7 	bl	45ec <__ieee754_sqrt>
    3bfe:	0006      	movs	r6, r0
    3c00:	e007      	b.n	3c12 <__ieee754_pow+0x92>
    3c02:	2800      	cmp	r0, #0
    3c04:	d00d      	beq.n	3c22 <__ieee754_pow+0xa2>
    3c06:	4b5a      	ldr	r3, [pc, #360]	; (3d70 <__ieee754_pow+0x1f0>)
    3c08:	18e0      	adds	r0, r4, r3
    3c0a:	4330      	orrs	r0, r6
    3c0c:	d10b      	bne.n	3c26 <__ieee754_pow+0xa6>
    3c0e:	2600      	movs	r6, #0
    3c10:	4955      	ldr	r1, [pc, #340]	; (3d68 <__ieee754_pow+0x1e8>)
    3c12:	0030      	movs	r0, r6
    3c14:	b011      	add	sp, #68	; 0x44
    3c16:	bc3c      	pop	{r2, r3, r4, r5}
    3c18:	4690      	mov	r8, r2
    3c1a:	4699      	mov	r9, r3
    3c1c:	46a2      	mov	sl, r4
    3c1e:	46ab      	mov	fp, r5
    3c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c22:	42a7      	cmp	r7, r4
    3c24:	ddc8      	ble.n	3bb8 <__ieee754_pow+0x38>
    3c26:	4853      	ldr	r0, [pc, #332]	; (3d74 <__ieee754_pow+0x1f4>)
    3c28:	f000 fde6 	bl	47f8 <nan>
    3c2c:	0006      	movs	r6, r0
    3c2e:	e7f0      	b.n	3c12 <__ieee754_pow+0x92>
    3c30:	0030      	movs	r0, r6
    3c32:	0029      	movs	r1, r5
    3c34:	f000 fdd0 	bl	47d8 <fabs>
    3c38:	4643      	mov	r3, r8
    3c3a:	2b00      	cmp	r3, #0
    3c3c:	d01d      	beq.n	3c7a <__ieee754_pow+0xfa>
    3c3e:	0feb      	lsrs	r3, r5, #31
    3c40:	3b01      	subs	r3, #1
    3c42:	4698      	mov	r8, r3
    3c44:	465b      	mov	r3, fp
    3c46:	4642      	mov	r2, r8
    3c48:	4313      	orrs	r3, r2
    3c4a:	d079      	beq.n	3d40 <__ieee754_pow+0x1c0>
    3c4c:	4b4a      	ldr	r3, [pc, #296]	; (3d78 <__ieee754_pow+0x1f8>)
    3c4e:	429f      	cmp	r7, r3
    3c50:	dc00      	bgt.n	3c54 <__ieee754_pow+0xd4>
    3c52:	e09f      	b.n	3d94 <__ieee754_pow+0x214>
    3c54:	4b49      	ldr	r3, [pc, #292]	; (3d7c <__ieee754_pow+0x1fc>)
    3c56:	429f      	cmp	r7, r3
    3c58:	dc01      	bgt.n	3c5e <__ieee754_pow+0xde>
    3c5a:	f000 fbce 	bl	43fa <__ieee754_pow+0x87a>
    3c5e:	4b48      	ldr	r3, [pc, #288]	; (3d80 <__ieee754_pow+0x200>)
    3c60:	429c      	cmp	r4, r3
    3c62:	dd79      	ble.n	3d58 <__ieee754_pow+0x1d8>
    3c64:	4653      	mov	r3, sl
    3c66:	2b00      	cmp	r3, #0
    3c68:	dd79      	ble.n	3d5e <__ieee754_pow+0x1de>
    3c6a:	4a46      	ldr	r2, [pc, #280]	; (3d84 <__ieee754_pow+0x204>)
    3c6c:	4b46      	ldr	r3, [pc, #280]	; (3d88 <__ieee754_pow+0x208>)
    3c6e:	0010      	movs	r0, r2
    3c70:	0019      	movs	r1, r3
    3c72:	f002 f967 	bl	5f44 <__aeabi_dmul>
    3c76:	0006      	movs	r6, r0
    3c78:	e7cb      	b.n	3c12 <__ieee754_pow+0x92>
    3c7a:	2c00      	cmp	r4, #0
    3c7c:	d004      	beq.n	3c88 <__ieee754_pow+0x108>
    3c7e:	4a3a      	ldr	r2, [pc, #232]	; (3d68 <__ieee754_pow+0x1e8>)
    3c80:	00ab      	lsls	r3, r5, #2
    3c82:	089b      	lsrs	r3, r3, #2
    3c84:	4293      	cmp	r3, r2
    3c86:	d1da      	bne.n	3c3e <__ieee754_pow+0xbe>
    3c88:	4653      	mov	r3, sl
    3c8a:	2b00      	cmp	r3, #0
    3c8c:	da00      	bge.n	3c90 <__ieee754_pow+0x110>
    3c8e:	e3ad      	b.n	43ec <__ieee754_pow+0x86c>
    3c90:	464b      	mov	r3, r9
    3c92:	2b00      	cmp	r3, #0
    3c94:	db0d      	blt.n	3cb2 <__ieee754_pow+0x132>
    3c96:	0006      	movs	r6, r0
    3c98:	e7bb      	b.n	3c12 <__ieee754_pow+0x92>
    3c9a:	4653      	mov	r3, sl
    3c9c:	0029      	movs	r1, r5
    3c9e:	2b00      	cmp	r3, #0
    3ca0:	dab7      	bge.n	3c12 <__ieee754_pow+0x92>
    3ca2:	0032      	movs	r2, r6
    3ca4:	002b      	movs	r3, r5
    3ca6:	2000      	movs	r0, #0
    3ca8:	492f      	ldr	r1, [pc, #188]	; (3d68 <__ieee754_pow+0x1e8>)
    3caa:	f001 fd27 	bl	56fc <__aeabi_ddiv>
    3cae:	0006      	movs	r6, r0
    3cb0:	e7af      	b.n	3c12 <__ieee754_pow+0x92>
    3cb2:	4b2f      	ldr	r3, [pc, #188]	; (3d70 <__ieee754_pow+0x1f0>)
    3cb4:	469c      	mov	ip, r3
    3cb6:	465b      	mov	r3, fp
    3cb8:	4464      	add	r4, ip
    3cba:	431c      	orrs	r4, r3
    3cbc:	d101      	bne.n	3cc2 <__ieee754_pow+0x142>
    3cbe:	f000 fc2b 	bl	4518 <__ieee754_pow+0x998>
    3cc2:	465b      	mov	r3, fp
    3cc4:	0006      	movs	r6, r0
    3cc6:	2b01      	cmp	r3, #1
    3cc8:	d1a3      	bne.n	3c12 <__ieee754_pow+0x92>
    3cca:	2380      	movs	r3, #128	; 0x80
    3ccc:	061b      	lsls	r3, r3, #24
    3cce:	469c      	mov	ip, r3
    3cd0:	4461      	add	r1, ip
    3cd2:	e79e      	b.n	3c12 <__ieee754_pow+0x92>
    3cd4:	2a00      	cmp	r2, #0
    3cd6:	d100      	bne.n	3cda <__ieee754_pow+0x15a>
    3cd8:	e772      	b.n	3bc0 <__ieee754_pow+0x40>
    3cda:	e794      	b.n	3c06 <__ieee754_pow+0x86>
    3cdc:	4b2b      	ldr	r3, [pc, #172]	; (3d8c <__ieee754_pow+0x20c>)
    3cde:	429f      	cmp	r7, r3
    3ce0:	dc2b      	bgt.n	3d3a <__ieee754_pow+0x1ba>
    3ce2:	4b27      	ldr	r3, [pc, #156]	; (3d80 <__ieee754_pow+0x200>)
    3ce4:	429f      	cmp	r7, r3
    3ce6:	dc00      	bgt.n	3cea <__ieee754_pow+0x16a>
    3ce8:	e770      	b.n	3bcc <__ieee754_pow+0x4c>
    3cea:	4929      	ldr	r1, [pc, #164]	; (3d90 <__ieee754_pow+0x210>)
    3cec:	153b      	asrs	r3, r7, #20
    3cee:	468c      	mov	ip, r1
    3cf0:	4463      	add	r3, ip
    3cf2:	2b14      	cmp	r3, #20
    3cf4:	dc01      	bgt.n	3cfa <__ieee754_pow+0x17a>
    3cf6:	f000 fbf2 	bl	44de <__ieee754_pow+0x95e>
    3cfa:	2134      	movs	r1, #52	; 0x34
    3cfc:	1acb      	subs	r3, r1, r3
    3cfe:	9900      	ldr	r1, [sp, #0]
    3d00:	40d9      	lsrs	r1, r3
    3d02:	0008      	movs	r0, r1
    3d04:	4098      	lsls	r0, r3
    3d06:	4282      	cmp	r2, r0
    3d08:	d000      	beq.n	3d0c <__ieee754_pow+0x18c>
    3d0a:	e75f      	b.n	3bcc <__ieee754_pow+0x4c>
    3d0c:	2301      	movs	r3, #1
    3d0e:	4019      	ands	r1, r3
    3d10:	3301      	adds	r3, #1
    3d12:	1a5b      	subs	r3, r3, r1
    3d14:	469b      	mov	fp, r3
    3d16:	e759      	b.n	3bcc <__ieee754_pow+0x4c>
    3d18:	4b15      	ldr	r3, [pc, #84]	; (3d70 <__ieee754_pow+0x1f0>)
    3d1a:	18e0      	adds	r0, r4, r3
    3d1c:	4306      	orrs	r6, r0
    3d1e:	d100      	bne.n	3d22 <__ieee754_pow+0x1a2>
    3d20:	e775      	b.n	3c0e <__ieee754_pow+0x8e>
    3d22:	4b17      	ldr	r3, [pc, #92]	; (3d80 <__ieee754_pow+0x200>)
    3d24:	429c      	cmp	r4, r3
    3d26:	dc00      	bgt.n	3d2a <__ieee754_pow+0x1aa>
    3d28:	e351      	b.n	43ce <__ieee754_pow+0x84e>
    3d2a:	4653      	mov	r3, sl
    3d2c:	2b00      	cmp	r3, #0
    3d2e:	db16      	blt.n	3d5e <__ieee754_pow+0x1de>
    3d30:	9b00      	ldr	r3, [sp, #0]
    3d32:	9c01      	ldr	r4, [sp, #4]
    3d34:	001e      	movs	r6, r3
    3d36:	0021      	movs	r1, r4
    3d38:	e76b      	b.n	3c12 <__ieee754_pow+0x92>
    3d3a:	2302      	movs	r3, #2
    3d3c:	469b      	mov	fp, r3
    3d3e:	e745      	b.n	3bcc <__ieee754_pow+0x4c>
    3d40:	0032      	movs	r2, r6
    3d42:	002b      	movs	r3, r5
    3d44:	0030      	movs	r0, r6
    3d46:	0029      	movs	r1, r5
    3d48:	f002 fb76 	bl	6438 <__aeabi_dsub>
    3d4c:	0002      	movs	r2, r0
    3d4e:	000b      	movs	r3, r1
    3d50:	f001 fcd4 	bl	56fc <__aeabi_ddiv>
    3d54:	0006      	movs	r6, r0
    3d56:	e75c      	b.n	3c12 <__ieee754_pow+0x92>
    3d58:	4653      	mov	r3, sl
    3d5a:	2b00      	cmp	r3, #0
    3d5c:	db85      	blt.n	3c6a <__ieee754_pow+0xea>
    3d5e:	2600      	movs	r6, #0
    3d60:	2100      	movs	r1, #0
    3d62:	e756      	b.n	3c12 <__ieee754_pow+0x92>
    3d64:	7ff00000 	.word	0x7ff00000
    3d68:	3ff00000 	.word	0x3ff00000
    3d6c:	3fe00000 	.word	0x3fe00000
    3d70:	c0100000 	.word	0xc0100000
    3d74:	00006ef8 	.word	0x00006ef8
    3d78:	41e00000 	.word	0x41e00000
    3d7c:	43f00000 	.word	0x43f00000
    3d80:	3fefffff 	.word	0x3fefffff
    3d84:	8800759c 	.word	0x8800759c
    3d88:	7e37e43c 	.word	0x7e37e43c
    3d8c:	433fffff 	.word	0x433fffff
    3d90:	fffffc01 	.word	0xfffffc01
    3d94:	4be8      	ldr	r3, [pc, #928]	; (4138 <__ieee754_pow+0x5b8>)
    3d96:	2200      	movs	r2, #0
    3d98:	429c      	cmp	r4, r3
    3d9a:	dc06      	bgt.n	3daa <__ieee754_pow+0x22a>
    3d9c:	2200      	movs	r2, #0
    3d9e:	4be7      	ldr	r3, [pc, #924]	; (413c <__ieee754_pow+0x5bc>)
    3da0:	f002 f8d0 	bl	5f44 <__aeabi_dmul>
    3da4:	2235      	movs	r2, #53	; 0x35
    3da6:	000c      	movs	r4, r1
    3da8:	4252      	negs	r2, r2
    3daa:	4de5      	ldr	r5, [pc, #916]	; (4140 <__ieee754_pow+0x5c0>)
    3dac:	1523      	asrs	r3, r4, #20
    3dae:	46ac      	mov	ip, r5
    3db0:	4463      	add	r3, ip
    3db2:	4699      	mov	r9, r3
    3db4:	0324      	lsls	r4, r4, #12
    3db6:	4de3      	ldr	r5, [pc, #908]	; (4144 <__ieee754_pow+0x5c4>)
    3db8:	4be3      	ldr	r3, [pc, #908]	; (4148 <__ieee754_pow+0x5c8>)
    3dba:	0b24      	lsrs	r4, r4, #12
    3dbc:	4491      	add	r9, r2
    3dbe:	4325      	orrs	r5, r4
    3dc0:	429c      	cmp	r4, r3
    3dc2:	dd09      	ble.n	3dd8 <__ieee754_pow+0x258>
    3dc4:	4be1      	ldr	r3, [pc, #900]	; (414c <__ieee754_pow+0x5cc>)
    3dc6:	429c      	cmp	r4, r3
    3dc8:	dc00      	bgt.n	3dcc <__ieee754_pow+0x24c>
    3dca:	e3a9      	b.n	4520 <__ieee754_pow+0x9a0>
    3dcc:	2301      	movs	r3, #1
    3dce:	469c      	mov	ip, r3
    3dd0:	4bdf      	ldr	r3, [pc, #892]	; (4150 <__ieee754_pow+0x5d0>)
    3dd2:	44e1      	add	r9, ip
    3dd4:	469c      	mov	ip, r3
    3dd6:	4465      	add	r5, ip
    3dd8:	2300      	movs	r3, #0
    3dda:	2400      	movs	r4, #0
    3ddc:	2200      	movs	r2, #0
    3dde:	9308      	str	r3, [sp, #32]
    3de0:	9409      	str	r4, [sp, #36]	; 0x24
    3de2:	930c      	str	r3, [sp, #48]	; 0x30
    3de4:	940d      	str	r4, [sp, #52]	; 0x34
    3de6:	2400      	movs	r4, #0
    3de8:	4bd6      	ldr	r3, [pc, #856]	; (4144 <__ieee754_pow+0x5c4>)
    3dea:	9206      	str	r2, [sp, #24]
    3dec:	9307      	str	r3, [sp, #28]
    3dee:	9a06      	ldr	r2, [sp, #24]
    3df0:	9b07      	ldr	r3, [sp, #28]
    3df2:	0029      	movs	r1, r5
    3df4:	900a      	str	r0, [sp, #40]	; 0x28
    3df6:	910b      	str	r1, [sp, #44]	; 0x2c
    3df8:	f002 fb1e 	bl	6438 <__aeabi_dsub>
    3dfc:	9a06      	ldr	r2, [sp, #24]
    3dfe:	9b07      	ldr	r3, [sp, #28]
    3e00:	0006      	movs	r6, r0
    3e02:	000f      	movs	r7, r1
    3e04:	980a      	ldr	r0, [sp, #40]	; 0x28
    3e06:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3e08:	f001 f94c 	bl	50a4 <__aeabi_dadd>
    3e0c:	0002      	movs	r2, r0
    3e0e:	000b      	movs	r3, r1
    3e10:	2000      	movs	r0, #0
    3e12:	49cc      	ldr	r1, [pc, #816]	; (4144 <__ieee754_pow+0x5c4>)
    3e14:	f001 fc72 	bl	56fc <__aeabi_ddiv>
    3e18:	000a      	movs	r2, r1
    3e1a:	0001      	movs	r1, r0
    3e1c:	0013      	movs	r3, r2
    3e1e:	910e      	str	r1, [sp, #56]	; 0x38
    3e20:	920f      	str	r2, [sp, #60]	; 0x3c
    3e22:	0002      	movs	r2, r0
    3e24:	0039      	movs	r1, r7
    3e26:	0030      	movs	r0, r6
    3e28:	f002 f88c 	bl	5f44 <__aeabi_dmul>
    3e2c:	000a      	movs	r2, r1
    3e2e:	0001      	movs	r1, r0
    3e30:	2080      	movs	r0, #128	; 0x80
    3e32:	9104      	str	r1, [sp, #16]
    3e34:	9205      	str	r2, [sp, #20]
    3e36:	0013      	movs	r3, r2
    3e38:	2200      	movs	r2, #0
    3e3a:	2180      	movs	r1, #128	; 0x80
    3e3c:	0300      	lsls	r0, r0, #12
    3e3e:	4684      	mov	ip, r0
    3e40:	9202      	str	r2, [sp, #8]
    3e42:	9303      	str	r3, [sp, #12]
    3e44:	2200      	movs	r2, #0
    3e46:	0589      	lsls	r1, r1, #22
    3e48:	106d      	asrs	r5, r5, #1
    3e4a:	430d      	orrs	r5, r1
    3e4c:	4465      	add	r5, ip
    3e4e:	192b      	adds	r3, r5, r4
    3e50:	9802      	ldr	r0, [sp, #8]
    3e52:	9903      	ldr	r1, [sp, #12]
    3e54:	0014      	movs	r4, r2
    3e56:	001d      	movs	r5, r3
    3e58:	f002 f874 	bl	5f44 <__aeabi_dmul>
    3e5c:	0002      	movs	r2, r0
    3e5e:	000b      	movs	r3, r1
    3e60:	0030      	movs	r0, r6
    3e62:	0039      	movs	r1, r7
    3e64:	f002 fae8 	bl	6438 <__aeabi_dsub>
    3e68:	9a06      	ldr	r2, [sp, #24]
    3e6a:	9b07      	ldr	r3, [sp, #28]
    3e6c:	0006      	movs	r6, r0
    3e6e:	000f      	movs	r7, r1
    3e70:	0020      	movs	r0, r4
    3e72:	0029      	movs	r1, r5
    3e74:	f002 fae0 	bl	6438 <__aeabi_dsub>
    3e78:	0002      	movs	r2, r0
    3e7a:	000b      	movs	r3, r1
    3e7c:	980a      	ldr	r0, [sp, #40]	; 0x28
    3e7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3e80:	f002 fada 	bl	6438 <__aeabi_dsub>
    3e84:	9a02      	ldr	r2, [sp, #8]
    3e86:	9b03      	ldr	r3, [sp, #12]
    3e88:	f002 f85c 	bl	5f44 <__aeabi_dmul>
    3e8c:	0002      	movs	r2, r0
    3e8e:	000b      	movs	r3, r1
    3e90:	0030      	movs	r0, r6
    3e92:	0039      	movs	r1, r7
    3e94:	f002 fad0 	bl	6438 <__aeabi_dsub>
    3e98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3e9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3e9c:	f002 f852 	bl	5f44 <__aeabi_dmul>
    3ea0:	9d04      	ldr	r5, [sp, #16]
    3ea2:	9e05      	ldr	r6, [sp, #20]
    3ea4:	9006      	str	r0, [sp, #24]
    3ea6:	9107      	str	r1, [sp, #28]
    3ea8:	002a      	movs	r2, r5
    3eaa:	0033      	movs	r3, r6
    3eac:	0028      	movs	r0, r5
    3eae:	0031      	movs	r1, r6
    3eb0:	f002 f848 	bl	5f44 <__aeabi_dmul>
    3eb4:	0006      	movs	r6, r0
    3eb6:	000f      	movs	r7, r1
    3eb8:	4aa6      	ldr	r2, [pc, #664]	; (4154 <__ieee754_pow+0x5d4>)
    3eba:	4ba7      	ldr	r3, [pc, #668]	; (4158 <__ieee754_pow+0x5d8>)
    3ebc:	f002 f842 	bl	5f44 <__aeabi_dmul>
    3ec0:	4aa6      	ldr	r2, [pc, #664]	; (415c <__ieee754_pow+0x5dc>)
    3ec2:	4ba7      	ldr	r3, [pc, #668]	; (4160 <__ieee754_pow+0x5e0>)
    3ec4:	f001 f8ee 	bl	50a4 <__aeabi_dadd>
    3ec8:	0032      	movs	r2, r6
    3eca:	003b      	movs	r3, r7
    3ecc:	f002 f83a 	bl	5f44 <__aeabi_dmul>
    3ed0:	4aa4      	ldr	r2, [pc, #656]	; (4164 <__ieee754_pow+0x5e4>)
    3ed2:	4ba5      	ldr	r3, [pc, #660]	; (4168 <__ieee754_pow+0x5e8>)
    3ed4:	f001 f8e6 	bl	50a4 <__aeabi_dadd>
    3ed8:	0032      	movs	r2, r6
    3eda:	003b      	movs	r3, r7
    3edc:	f002 f832 	bl	5f44 <__aeabi_dmul>
    3ee0:	4aa2      	ldr	r2, [pc, #648]	; (416c <__ieee754_pow+0x5ec>)
    3ee2:	4ba3      	ldr	r3, [pc, #652]	; (4170 <__ieee754_pow+0x5f0>)
    3ee4:	f001 f8de 	bl	50a4 <__aeabi_dadd>
    3ee8:	0032      	movs	r2, r6
    3eea:	003b      	movs	r3, r7
    3eec:	f002 f82a 	bl	5f44 <__aeabi_dmul>
    3ef0:	4aa0      	ldr	r2, [pc, #640]	; (4174 <__ieee754_pow+0x5f4>)
    3ef2:	4ba1      	ldr	r3, [pc, #644]	; (4178 <__ieee754_pow+0x5f8>)
    3ef4:	f001 f8d6 	bl	50a4 <__aeabi_dadd>
    3ef8:	0032      	movs	r2, r6
    3efa:	003b      	movs	r3, r7
    3efc:	f002 f822 	bl	5f44 <__aeabi_dmul>
    3f00:	4a9e      	ldr	r2, [pc, #632]	; (417c <__ieee754_pow+0x5fc>)
    3f02:	4b9f      	ldr	r3, [pc, #636]	; (4180 <__ieee754_pow+0x600>)
    3f04:	f001 f8ce 	bl	50a4 <__aeabi_dadd>
    3f08:	0032      	movs	r2, r6
    3f0a:	0004      	movs	r4, r0
    3f0c:	000d      	movs	r5, r1
    3f0e:	003b      	movs	r3, r7
    3f10:	0030      	movs	r0, r6
    3f12:	0039      	movs	r1, r7
    3f14:	f002 f816 	bl	5f44 <__aeabi_dmul>
    3f18:	0002      	movs	r2, r0
    3f1a:	000b      	movs	r3, r1
    3f1c:	0020      	movs	r0, r4
    3f1e:	0029      	movs	r1, r5
    3f20:	f002 f810 	bl	5f44 <__aeabi_dmul>
    3f24:	9e02      	ldr	r6, [sp, #8]
    3f26:	9f03      	ldr	r7, [sp, #12]
    3f28:	0004      	movs	r4, r0
    3f2a:	000d      	movs	r5, r1
    3f2c:	9804      	ldr	r0, [sp, #16]
    3f2e:	9905      	ldr	r1, [sp, #20]
    3f30:	0032      	movs	r2, r6
    3f32:	003b      	movs	r3, r7
    3f34:	f001 f8b6 	bl	50a4 <__aeabi_dadd>
    3f38:	9a06      	ldr	r2, [sp, #24]
    3f3a:	9b07      	ldr	r3, [sp, #28]
    3f3c:	f002 f802 	bl	5f44 <__aeabi_dmul>
    3f40:	0022      	movs	r2, r4
    3f42:	002b      	movs	r3, r5
    3f44:	f001 f8ae 	bl	50a4 <__aeabi_dadd>
    3f48:	0032      	movs	r2, r6
    3f4a:	900a      	str	r0, [sp, #40]	; 0x28
    3f4c:	910b      	str	r1, [sp, #44]	; 0x2c
    3f4e:	003b      	movs	r3, r7
    3f50:	0030      	movs	r0, r6
    3f52:	0039      	movs	r1, r7
    3f54:	9602      	str	r6, [sp, #8]
    3f56:	9703      	str	r7, [sp, #12]
    3f58:	f001 fff4 	bl	5f44 <__aeabi_dmul>
    3f5c:	2200      	movs	r2, #0
    3f5e:	4b89      	ldr	r3, [pc, #548]	; (4184 <__ieee754_pow+0x604>)
    3f60:	0004      	movs	r4, r0
    3f62:	000d      	movs	r5, r1
    3f64:	f001 f89e 	bl	50a4 <__aeabi_dadd>
    3f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3f6c:	f001 f89a 	bl	50a4 <__aeabi_dadd>
    3f70:	2600      	movs	r6, #0
    3f72:	000f      	movs	r7, r1
    3f74:	0032      	movs	r2, r6
    3f76:	000b      	movs	r3, r1
    3f78:	9802      	ldr	r0, [sp, #8]
    3f7a:	9903      	ldr	r1, [sp, #12]
    3f7c:	f001 ffe2 	bl	5f44 <__aeabi_dmul>
    3f80:	2200      	movs	r2, #0
    3f82:	9002      	str	r0, [sp, #8]
    3f84:	9103      	str	r1, [sp, #12]
    3f86:	4b7f      	ldr	r3, [pc, #508]	; (4184 <__ieee754_pow+0x604>)
    3f88:	0030      	movs	r0, r6
    3f8a:	0039      	movs	r1, r7
    3f8c:	f002 fa54 	bl	6438 <__aeabi_dsub>
    3f90:	0022      	movs	r2, r4
    3f92:	002b      	movs	r3, r5
    3f94:	f002 fa50 	bl	6438 <__aeabi_dsub>
    3f98:	0002      	movs	r2, r0
    3f9a:	000b      	movs	r3, r1
    3f9c:	980a      	ldr	r0, [sp, #40]	; 0x28
    3f9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3fa0:	f002 fa4a 	bl	6438 <__aeabi_dsub>
    3fa4:	9a04      	ldr	r2, [sp, #16]
    3fa6:	9b05      	ldr	r3, [sp, #20]
    3fa8:	f001 ffcc 	bl	5f44 <__aeabi_dmul>
    3fac:	0032      	movs	r2, r6
    3fae:	0004      	movs	r4, r0
    3fb0:	000d      	movs	r5, r1
    3fb2:	9806      	ldr	r0, [sp, #24]
    3fb4:	9907      	ldr	r1, [sp, #28]
    3fb6:	003b      	movs	r3, r7
    3fb8:	f001 ffc4 	bl	5f44 <__aeabi_dmul>
    3fbc:	0002      	movs	r2, r0
    3fbe:	000b      	movs	r3, r1
    3fc0:	0020      	movs	r0, r4
    3fc2:	0029      	movs	r1, r5
    3fc4:	f001 f86e 	bl	50a4 <__aeabi_dadd>
    3fc8:	0004      	movs	r4, r0
    3fca:	000d      	movs	r5, r1
    3fcc:	0002      	movs	r2, r0
    3fce:	000b      	movs	r3, r1
    3fd0:	9802      	ldr	r0, [sp, #8]
    3fd2:	9903      	ldr	r1, [sp, #12]
    3fd4:	f001 f866 	bl	50a4 <__aeabi_dadd>
    3fd8:	2600      	movs	r6, #0
    3fda:	22e0      	movs	r2, #224	; 0xe0
    3fdc:	4b6a      	ldr	r3, [pc, #424]	; (4188 <__ieee754_pow+0x608>)
    3fde:	0612      	lsls	r2, r2, #24
    3fe0:	0030      	movs	r0, r6
    3fe2:	000f      	movs	r7, r1
    3fe4:	f001 ffae 	bl	5f44 <__aeabi_dmul>
    3fe8:	9a02      	ldr	r2, [sp, #8]
    3fea:	9b03      	ldr	r3, [sp, #12]
    3fec:	9004      	str	r0, [sp, #16]
    3fee:	9105      	str	r1, [sp, #20]
    3ff0:	0030      	movs	r0, r6
    3ff2:	0039      	movs	r1, r7
    3ff4:	f002 fa20 	bl	6438 <__aeabi_dsub>
    3ff8:	0002      	movs	r2, r0
    3ffa:	000b      	movs	r3, r1
    3ffc:	0020      	movs	r0, r4
    3ffe:	0029      	movs	r1, r5
    4000:	f002 fa1a 	bl	6438 <__aeabi_dsub>
    4004:	4a61      	ldr	r2, [pc, #388]	; (418c <__ieee754_pow+0x60c>)
    4006:	4b60      	ldr	r3, [pc, #384]	; (4188 <__ieee754_pow+0x608>)
    4008:	f001 ff9c 	bl	5f44 <__aeabi_dmul>
    400c:	4a60      	ldr	r2, [pc, #384]	; (4190 <__ieee754_pow+0x610>)
    400e:	0004      	movs	r4, r0
    4010:	000d      	movs	r5, r1
    4012:	4b60      	ldr	r3, [pc, #384]	; (4194 <__ieee754_pow+0x614>)
    4014:	0030      	movs	r0, r6
    4016:	0039      	movs	r1, r7
    4018:	f001 ff94 	bl	5f44 <__aeabi_dmul>
    401c:	0002      	movs	r2, r0
    401e:	000b      	movs	r3, r1
    4020:	0020      	movs	r0, r4
    4022:	0029      	movs	r1, r5
    4024:	f001 f83e 	bl	50a4 <__aeabi_dadd>
    4028:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    402a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    402c:	f001 f83a 	bl	50a4 <__aeabi_dadd>
    4030:	0006      	movs	r6, r0
    4032:	4648      	mov	r0, r9
    4034:	000f      	movs	r7, r1
    4036:	f002 fda9 	bl	6b8c <__aeabi_i2d>
    403a:	0004      	movs	r4, r0
    403c:	000d      	movs	r5, r1
    403e:	9804      	ldr	r0, [sp, #16]
    4040:	9905      	ldr	r1, [sp, #20]
    4042:	0032      	movs	r2, r6
    4044:	003b      	movs	r3, r7
    4046:	f001 f82d 	bl	50a4 <__aeabi_dadd>
    404a:	9a08      	ldr	r2, [sp, #32]
    404c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    404e:	f001 f829 	bl	50a4 <__aeabi_dadd>
    4052:	0022      	movs	r2, r4
    4054:	002b      	movs	r3, r5
    4056:	f001 f825 	bl	50a4 <__aeabi_dadd>
    405a:	2000      	movs	r0, #0
    405c:	0022      	movs	r2, r4
    405e:	002b      	movs	r3, r5
    4060:	9002      	str	r0, [sp, #8]
    4062:	9103      	str	r1, [sp, #12]
    4064:	f002 f9e8 	bl	6438 <__aeabi_dsub>
    4068:	9a08      	ldr	r2, [sp, #32]
    406a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    406c:	f002 f9e4 	bl	6438 <__aeabi_dsub>
    4070:	9a04      	ldr	r2, [sp, #16]
    4072:	9b05      	ldr	r3, [sp, #20]
    4074:	f002 f9e0 	bl	6438 <__aeabi_dsub>
    4078:	0002      	movs	r2, r0
    407a:	000b      	movs	r3, r1
    407c:	0030      	movs	r0, r6
    407e:	0039      	movs	r1, r7
    4080:	f002 f9da 	bl	6438 <__aeabi_dsub>
    4084:	9004      	str	r0, [sp, #16]
    4086:	9105      	str	r1, [sp, #20]
    4088:	465b      	mov	r3, fp
    408a:	4642      	mov	r2, r8
    408c:	3b01      	subs	r3, #1
    408e:	4313      	orrs	r3, r2
    4090:	d100      	bne.n	4094 <__ieee754_pow+0x514>
    4092:	e197      	b.n	43c4 <__ieee754_pow+0x844>
    4094:	2300      	movs	r3, #0
    4096:	4c2b      	ldr	r4, [pc, #172]	; (4144 <__ieee754_pow+0x5c4>)
    4098:	9306      	str	r3, [sp, #24]
    409a:	9407      	str	r4, [sp, #28]
    409c:	9800      	ldr	r0, [sp, #0]
    409e:	9901      	ldr	r1, [sp, #4]
    40a0:	2600      	movs	r6, #0
    40a2:	000b      	movs	r3, r1
    40a4:	0032      	movs	r2, r6
    40a6:	000f      	movs	r7, r1
    40a8:	f002 f9c6 	bl	6438 <__aeabi_dsub>
    40ac:	9a02      	ldr	r2, [sp, #8]
    40ae:	9b03      	ldr	r3, [sp, #12]
    40b0:	f001 ff48 	bl	5f44 <__aeabi_dmul>
    40b4:	9a00      	ldr	r2, [sp, #0]
    40b6:	9b01      	ldr	r3, [sp, #4]
    40b8:	0004      	movs	r4, r0
    40ba:	000d      	movs	r5, r1
    40bc:	9804      	ldr	r0, [sp, #16]
    40be:	9905      	ldr	r1, [sp, #20]
    40c0:	f001 ff40 	bl	5f44 <__aeabi_dmul>
    40c4:	0002      	movs	r2, r0
    40c6:	000b      	movs	r3, r1
    40c8:	0020      	movs	r0, r4
    40ca:	0029      	movs	r1, r5
    40cc:	f000 ffea 	bl	50a4 <__aeabi_dadd>
    40d0:	0004      	movs	r4, r0
    40d2:	000d      	movs	r5, r1
    40d4:	9802      	ldr	r0, [sp, #8]
    40d6:	9903      	ldr	r1, [sp, #12]
    40d8:	003b      	movs	r3, r7
    40da:	0032      	movs	r2, r6
    40dc:	9404      	str	r4, [sp, #16]
    40de:	9505      	str	r5, [sp, #20]
    40e0:	f001 ff30 	bl	5f44 <__aeabi_dmul>
    40e4:	9000      	str	r0, [sp, #0]
    40e6:	9101      	str	r1, [sp, #4]
    40e8:	000b      	movs	r3, r1
    40ea:	0002      	movs	r2, r0
    40ec:	0029      	movs	r1, r5
    40ee:	0020      	movs	r0, r4
    40f0:	f000 ffd8 	bl	50a4 <__aeabi_dadd>
    40f4:	4b28      	ldr	r3, [pc, #160]	; (4198 <__ieee754_pow+0x618>)
    40f6:	4681      	mov	r9, r0
    40f8:	1e0f      	subs	r7, r1, #0
    40fa:	468a      	mov	sl, r1
    40fc:	429f      	cmp	r7, r3
    40fe:	dc00      	bgt.n	4102 <__ieee754_pow+0x582>
    4100:	e13c      	b.n	437c <__ieee754_pow+0x7fc>
    4102:	4b26      	ldr	r3, [pc, #152]	; (419c <__ieee754_pow+0x61c>)
    4104:	18cb      	adds	r3, r1, r3
    4106:	4303      	orrs	r3, r0
    4108:	d000      	beq.n	410c <__ieee754_pow+0x58c>
    410a:	e1db      	b.n	44c4 <__ieee754_pow+0x944>
    410c:	9804      	ldr	r0, [sp, #16]
    410e:	9905      	ldr	r1, [sp, #20]
    4110:	4a23      	ldr	r2, [pc, #140]	; (41a0 <__ieee754_pow+0x620>)
    4112:	4b24      	ldr	r3, [pc, #144]	; (41a4 <__ieee754_pow+0x624>)
    4114:	f000 ffc6 	bl	50a4 <__aeabi_dadd>
    4118:	9a00      	ldr	r2, [sp, #0]
    411a:	9b01      	ldr	r3, [sp, #4]
    411c:	0004      	movs	r4, r0
    411e:	000d      	movs	r5, r1
    4120:	4648      	mov	r0, r9
    4122:	0039      	movs	r1, r7
    4124:	f002 f988 	bl	6438 <__aeabi_dsub>
    4128:	0002      	movs	r2, r0
    412a:	000b      	movs	r3, r1
    412c:	0020      	movs	r0, r4
    412e:	0029      	movs	r1, r5
    4130:	f000 fd3a 	bl	4ba8 <__aeabi_dcmpgt>
    4134:	003e      	movs	r6, r7
    4136:	e037      	b.n	41a8 <__ieee754_pow+0x628>
    4138:	000fffff 	.word	0x000fffff
    413c:	43400000 	.word	0x43400000
    4140:	fffffc01 	.word	0xfffffc01
    4144:	3ff00000 	.word	0x3ff00000
    4148:	0003988e 	.word	0x0003988e
    414c:	000bb679 	.word	0x000bb679
    4150:	fff00000 	.word	0xfff00000
    4154:	4a454eef 	.word	0x4a454eef
    4158:	3fca7e28 	.word	0x3fca7e28
    415c:	93c9db65 	.word	0x93c9db65
    4160:	3fcd864a 	.word	0x3fcd864a
    4164:	a91d4101 	.word	0xa91d4101
    4168:	3fd17460 	.word	0x3fd17460
    416c:	518f264d 	.word	0x518f264d
    4170:	3fd55555 	.word	0x3fd55555
    4174:	db6fabff 	.word	0xdb6fabff
    4178:	3fdb6db6 	.word	0x3fdb6db6
    417c:	33333303 	.word	0x33333303
    4180:	3fe33333 	.word	0x3fe33333
    4184:	40080000 	.word	0x40080000
    4188:	3feec709 	.word	0x3feec709
    418c:	dc3a03fd 	.word	0xdc3a03fd
    4190:	145b01f5 	.word	0x145b01f5
    4194:	be3e2fe0 	.word	0xbe3e2fe0
    4198:	408fffff 	.word	0x408fffff
    419c:	bf700000 	.word	0xbf700000
    41a0:	652b82fe 	.word	0x652b82fe
    41a4:	3c971547 	.word	0x3c971547
    41a8:	2800      	cmp	r0, #0
    41aa:	d000      	beq.n	41ae <__ieee754_pow+0x62e>
    41ac:	e18a      	b.n	44c4 <__ieee754_pow+0x944>
    41ae:	2280      	movs	r2, #128	; 0x80
    41b0:	4be7      	ldr	r3, [pc, #924]	; (4550 <__ieee754_pow+0x9d0>)
    41b2:	0352      	lsls	r2, r2, #13
    41b4:	469c      	mov	ip, r3
    41b6:	0013      	movs	r3, r2
    41b8:	1536      	asrs	r6, r6, #20
    41ba:	4466      	add	r6, ip
    41bc:	4133      	asrs	r3, r6
    41be:	49e5      	ldr	r1, [pc, #916]	; (4554 <__ieee754_pow+0x9d4>)
    41c0:	19db      	adds	r3, r3, r7
    41c2:	005e      	lsls	r6, r3, #1
    41c4:	001c      	movs	r4, r3
    41c6:	031b      	lsls	r3, r3, #12
    41c8:	468c      	mov	ip, r1
    41ca:	0b1b      	lsrs	r3, r3, #12
    41cc:	4313      	orrs	r3, r2
    41ce:	2214      	movs	r2, #20
    41d0:	0d76      	lsrs	r6, r6, #21
    41d2:	4fe1      	ldr	r7, [pc, #900]	; (4558 <__ieee754_pow+0x9d8>)
    41d4:	4466      	add	r6, ip
    41d6:	4137      	asrs	r7, r6
    41d8:	1b96      	subs	r6, r2, r6
    41da:	4133      	asrs	r3, r6
    41dc:	4698      	mov	r8, r3
    41de:	4653      	mov	r3, sl
    41e0:	43bc      	bics	r4, r7
    41e2:	2000      	movs	r0, #0
    41e4:	0021      	movs	r1, r4
    41e6:	2b00      	cmp	r3, #0
    41e8:	da00      	bge.n	41ec <__ieee754_pow+0x66c>
    41ea:	e1a9      	b.n	4540 <__ieee754_pow+0x9c0>
    41ec:	0002      	movs	r2, r0
    41ee:	000b      	movs	r3, r1
    41f0:	9800      	ldr	r0, [sp, #0]
    41f2:	9901      	ldr	r1, [sp, #4]
    41f4:	f002 f920 	bl	6438 <__aeabi_dsub>
    41f8:	000b      	movs	r3, r1
    41fa:	9000      	str	r0, [sp, #0]
    41fc:	9101      	str	r1, [sp, #4]
    41fe:	0002      	movs	r2, r0
    4200:	9804      	ldr	r0, [sp, #16]
    4202:	9905      	ldr	r1, [sp, #20]
    4204:	f000 ff4e 	bl	50a4 <__aeabi_dadd>
    4208:	4643      	mov	r3, r8
    420a:	051b      	lsls	r3, r3, #20
    420c:	4699      	mov	r9, r3
    420e:	2000      	movs	r0, #0
    4210:	2200      	movs	r2, #0
    4212:	4bd2      	ldr	r3, [pc, #840]	; (455c <__ieee754_pow+0x9dc>)
    4214:	0006      	movs	r6, r0
    4216:	000f      	movs	r7, r1
    4218:	f001 fe94 	bl	5f44 <__aeabi_dmul>
    421c:	9a00      	ldr	r2, [sp, #0]
    421e:	9b01      	ldr	r3, [sp, #4]
    4220:	9002      	str	r0, [sp, #8]
    4222:	9103      	str	r1, [sp, #12]
    4224:	0030      	movs	r0, r6
    4226:	0039      	movs	r1, r7
    4228:	f002 f906 	bl	6438 <__aeabi_dsub>
    422c:	0002      	movs	r2, r0
    422e:	000b      	movs	r3, r1
    4230:	9804      	ldr	r0, [sp, #16]
    4232:	9905      	ldr	r1, [sp, #20]
    4234:	f002 f900 	bl	6438 <__aeabi_dsub>
    4238:	4ac9      	ldr	r2, [pc, #804]	; (4560 <__ieee754_pow+0x9e0>)
    423a:	4bca      	ldr	r3, [pc, #808]	; (4564 <__ieee754_pow+0x9e4>)
    423c:	f001 fe82 	bl	5f44 <__aeabi_dmul>
    4240:	4ac9      	ldr	r2, [pc, #804]	; (4568 <__ieee754_pow+0x9e8>)
    4242:	0004      	movs	r4, r0
    4244:	000d      	movs	r5, r1
    4246:	4bc9      	ldr	r3, [pc, #804]	; (456c <__ieee754_pow+0x9ec>)
    4248:	0030      	movs	r0, r6
    424a:	0039      	movs	r1, r7
    424c:	f001 fe7a 	bl	5f44 <__aeabi_dmul>
    4250:	0002      	movs	r2, r0
    4252:	000b      	movs	r3, r1
    4254:	0020      	movs	r0, r4
    4256:	0029      	movs	r1, r5
    4258:	f000 ff24 	bl	50a4 <__aeabi_dadd>
    425c:	0004      	movs	r4, r0
    425e:	000d      	movs	r5, r1
    4260:	0002      	movs	r2, r0
    4262:	000b      	movs	r3, r1
    4264:	9802      	ldr	r0, [sp, #8]
    4266:	9903      	ldr	r1, [sp, #12]
    4268:	f000 ff1c 	bl	50a4 <__aeabi_dadd>
    426c:	9a02      	ldr	r2, [sp, #8]
    426e:	9b03      	ldr	r3, [sp, #12]
    4270:	0006      	movs	r6, r0
    4272:	000f      	movs	r7, r1
    4274:	f002 f8e0 	bl	6438 <__aeabi_dsub>
    4278:	0002      	movs	r2, r0
    427a:	000b      	movs	r3, r1
    427c:	0020      	movs	r0, r4
    427e:	0029      	movs	r1, r5
    4280:	f002 f8da 	bl	6438 <__aeabi_dsub>
    4284:	0032      	movs	r2, r6
    4286:	9000      	str	r0, [sp, #0]
    4288:	9101      	str	r1, [sp, #4]
    428a:	003b      	movs	r3, r7
    428c:	0030      	movs	r0, r6
    428e:	0039      	movs	r1, r7
    4290:	f001 fe58 	bl	5f44 <__aeabi_dmul>
    4294:	0004      	movs	r4, r0
    4296:	000d      	movs	r5, r1
    4298:	4ab5      	ldr	r2, [pc, #724]	; (4570 <__ieee754_pow+0x9f0>)
    429a:	4bb6      	ldr	r3, [pc, #728]	; (4574 <__ieee754_pow+0x9f4>)
    429c:	f001 fe52 	bl	5f44 <__aeabi_dmul>
    42a0:	4ab5      	ldr	r2, [pc, #724]	; (4578 <__ieee754_pow+0x9f8>)
    42a2:	4bb6      	ldr	r3, [pc, #728]	; (457c <__ieee754_pow+0x9fc>)
    42a4:	f002 f8c8 	bl	6438 <__aeabi_dsub>
    42a8:	0022      	movs	r2, r4
    42aa:	002b      	movs	r3, r5
    42ac:	f001 fe4a 	bl	5f44 <__aeabi_dmul>
    42b0:	4ab3      	ldr	r2, [pc, #716]	; (4580 <__ieee754_pow+0xa00>)
    42b2:	4bb4      	ldr	r3, [pc, #720]	; (4584 <__ieee754_pow+0xa04>)
    42b4:	f000 fef6 	bl	50a4 <__aeabi_dadd>
    42b8:	0022      	movs	r2, r4
    42ba:	002b      	movs	r3, r5
    42bc:	f001 fe42 	bl	5f44 <__aeabi_dmul>
    42c0:	4ab1      	ldr	r2, [pc, #708]	; (4588 <__ieee754_pow+0xa08>)
    42c2:	4bb2      	ldr	r3, [pc, #712]	; (458c <__ieee754_pow+0xa0c>)
    42c4:	f002 f8b8 	bl	6438 <__aeabi_dsub>
    42c8:	0022      	movs	r2, r4
    42ca:	002b      	movs	r3, r5
    42cc:	f001 fe3a 	bl	5f44 <__aeabi_dmul>
    42d0:	4aaf      	ldr	r2, [pc, #700]	; (4590 <__ieee754_pow+0xa10>)
    42d2:	4bb0      	ldr	r3, [pc, #704]	; (4594 <__ieee754_pow+0xa14>)
    42d4:	f000 fee6 	bl	50a4 <__aeabi_dadd>
    42d8:	0022      	movs	r2, r4
    42da:	002b      	movs	r3, r5
    42dc:	f001 fe32 	bl	5f44 <__aeabi_dmul>
    42e0:	0002      	movs	r2, r0
    42e2:	000b      	movs	r3, r1
    42e4:	0030      	movs	r0, r6
    42e6:	0039      	movs	r1, r7
    42e8:	f002 f8a6 	bl	6438 <__aeabi_dsub>
    42ec:	0004      	movs	r4, r0
    42ee:	000d      	movs	r5, r1
    42f0:	0002      	movs	r2, r0
    42f2:	000b      	movs	r3, r1
    42f4:	0030      	movs	r0, r6
    42f6:	0039      	movs	r1, r7
    42f8:	f001 fe24 	bl	5f44 <__aeabi_dmul>
    42fc:	2380      	movs	r3, #128	; 0x80
    42fe:	9002      	str	r0, [sp, #8]
    4300:	9103      	str	r1, [sp, #12]
    4302:	2200      	movs	r2, #0
    4304:	05db      	lsls	r3, r3, #23
    4306:	0020      	movs	r0, r4
    4308:	0029      	movs	r1, r5
    430a:	f002 f895 	bl	6438 <__aeabi_dsub>
    430e:	0002      	movs	r2, r0
    4310:	000b      	movs	r3, r1
    4312:	9802      	ldr	r0, [sp, #8]
    4314:	9903      	ldr	r1, [sp, #12]
    4316:	f001 f9f1 	bl	56fc <__aeabi_ddiv>
    431a:	9a00      	ldr	r2, [sp, #0]
    431c:	9b01      	ldr	r3, [sp, #4]
    431e:	0004      	movs	r4, r0
    4320:	000d      	movs	r5, r1
    4322:	0030      	movs	r0, r6
    4324:	0039      	movs	r1, r7
    4326:	f001 fe0d 	bl	5f44 <__aeabi_dmul>
    432a:	9a00      	ldr	r2, [sp, #0]
    432c:	9b01      	ldr	r3, [sp, #4]
    432e:	f000 feb9 	bl	50a4 <__aeabi_dadd>
    4332:	0002      	movs	r2, r0
    4334:	000b      	movs	r3, r1
    4336:	0020      	movs	r0, r4
    4338:	0029      	movs	r1, r5
    433a:	f002 f87d 	bl	6438 <__aeabi_dsub>
    433e:	0032      	movs	r2, r6
    4340:	003b      	movs	r3, r7
    4342:	f002 f879 	bl	6438 <__aeabi_dsub>
    4346:	0002      	movs	r2, r0
    4348:	000b      	movs	r3, r1
    434a:	2000      	movs	r0, #0
    434c:	4992      	ldr	r1, [pc, #584]	; (4598 <__ieee754_pow+0xa18>)
    434e:	f002 f873 	bl	6438 <__aeabi_dsub>
    4352:	464b      	mov	r3, r9
    4354:	185b      	adds	r3, r3, r1
    4356:	151a      	asrs	r2, r3, #20
    4358:	2a00      	cmp	r2, #0
    435a:	dc00      	bgt.n	435e <__ieee754_pow+0x7de>
    435c:	e0f4      	b.n	4548 <__ieee754_pow+0x9c8>
    435e:	0019      	movs	r1, r3
    4360:	9a06      	ldr	r2, [sp, #24]
    4362:	9b07      	ldr	r3, [sp, #28]
    4364:	f001 fdee 	bl	5f44 <__aeabi_dmul>
    4368:	0006      	movs	r6, r0
    436a:	e452      	b.n	3c12 <__ieee754_pow+0x92>
    436c:	0032      	movs	r2, r6
    436e:	0030      	movs	r0, r6
    4370:	002b      	movs	r3, r5
    4372:	0029      	movs	r1, r5
    4374:	f001 fde6 	bl	5f44 <__aeabi_dmul>
    4378:	0006      	movs	r6, r0
    437a:	e44a      	b.n	3c12 <__ieee754_pow+0x92>
    437c:	4b87      	ldr	r3, [pc, #540]	; (459c <__ieee754_pow+0xa1c>)
    437e:	004e      	lsls	r6, r1, #1
    4380:	0876      	lsrs	r6, r6, #1
    4382:	429e      	cmp	r6, r3
    4384:	dc00      	bgt.n	4388 <__ieee754_pow+0x808>
    4386:	e0bf      	b.n	4508 <__ieee754_pow+0x988>
    4388:	4b85      	ldr	r3, [pc, #532]	; (45a0 <__ieee754_pow+0xa20>)
    438a:	18cb      	adds	r3, r1, r3
    438c:	4303      	orrs	r3, r0
    438e:	d10c      	bne.n	43aa <__ieee754_pow+0x82a>
    4390:	9a00      	ldr	r2, [sp, #0]
    4392:	9b01      	ldr	r3, [sp, #4]
    4394:	f002 f850 	bl	6438 <__aeabi_dsub>
    4398:	0002      	movs	r2, r0
    439a:	000b      	movs	r3, r1
    439c:	9804      	ldr	r0, [sp, #16]
    439e:	9905      	ldr	r1, [sp, #20]
    43a0:	f000 fbf8 	bl	4b94 <__aeabi_dcmple>
    43a4:	2800      	cmp	r0, #0
    43a6:	d100      	bne.n	43aa <__ieee754_pow+0x82a>
    43a8:	e701      	b.n	41ae <__ieee754_pow+0x62e>
    43aa:	9806      	ldr	r0, [sp, #24]
    43ac:	9907      	ldr	r1, [sp, #28]
    43ae:	4a7d      	ldr	r2, [pc, #500]	; (45a4 <__ieee754_pow+0xa24>)
    43b0:	4b7d      	ldr	r3, [pc, #500]	; (45a8 <__ieee754_pow+0xa28>)
    43b2:	f001 fdc7 	bl	5f44 <__aeabi_dmul>
    43b6:	4a7b      	ldr	r2, [pc, #492]	; (45a4 <__ieee754_pow+0xa24>)
    43b8:	4b7b      	ldr	r3, [pc, #492]	; (45a8 <__ieee754_pow+0xa28>)
    43ba:	f001 fdc3 	bl	5f44 <__aeabi_dmul>
    43be:	0006      	movs	r6, r0
    43c0:	f7ff fc27 	bl	3c12 <__ieee754_pow+0x92>
    43c4:	2300      	movs	r3, #0
    43c6:	4c79      	ldr	r4, [pc, #484]	; (45ac <__ieee754_pow+0xa2c>)
    43c8:	9306      	str	r3, [sp, #24]
    43ca:	9407      	str	r4, [sp, #28]
    43cc:	e666      	b.n	409c <__ieee754_pow+0x51c>
    43ce:	4653      	mov	r3, sl
    43d0:	2b00      	cmp	r3, #0
    43d2:	db00      	blt.n	43d6 <__ieee754_pow+0x856>
    43d4:	e4c3      	b.n	3d5e <__ieee754_pow+0x1de>
    43d6:	9b00      	ldr	r3, [sp, #0]
    43d8:	9c01      	ldr	r4, [sp, #4]
    43da:	2280      	movs	r2, #128	; 0x80
    43dc:	0612      	lsls	r2, r2, #24
    43de:	001e      	movs	r6, r3
    43e0:	4694      	mov	ip, r2
    43e2:	0023      	movs	r3, r4
    43e4:	4463      	add	r3, ip
    43e6:	0019      	movs	r1, r3
    43e8:	f7ff fc13 	bl	3c12 <__ieee754_pow+0x92>
    43ec:	0002      	movs	r2, r0
    43ee:	000b      	movs	r3, r1
    43f0:	2000      	movs	r0, #0
    43f2:	4969      	ldr	r1, [pc, #420]	; (4598 <__ieee754_pow+0xa18>)
    43f4:	f001 f982 	bl	56fc <__aeabi_ddiv>
    43f8:	e44a      	b.n	3c90 <__ieee754_pow+0x110>
    43fa:	4b6d      	ldr	r3, [pc, #436]	; (45b0 <__ieee754_pow+0xa30>)
    43fc:	429c      	cmp	r4, r3
    43fe:	dc00      	bgt.n	4402 <__ieee754_pow+0x882>
    4400:	e4aa      	b.n	3d58 <__ieee754_pow+0x1d8>
    4402:	4b65      	ldr	r3, [pc, #404]	; (4598 <__ieee754_pow+0xa18>)
    4404:	429c      	cmp	r4, r3
    4406:	dd01      	ble.n	440c <__ieee754_pow+0x88c>
    4408:	f7ff fc2c 	bl	3c64 <__ieee754_pow+0xe4>
    440c:	2200      	movs	r2, #0
    440e:	4b62      	ldr	r3, [pc, #392]	; (4598 <__ieee754_pow+0xa18>)
    4410:	f002 f812 	bl	6438 <__aeabi_dsub>
    4414:	22c0      	movs	r2, #192	; 0xc0
    4416:	4b67      	ldr	r3, [pc, #412]	; (45b4 <__ieee754_pow+0xa34>)
    4418:	05d2      	lsls	r2, r2, #23
    441a:	0004      	movs	r4, r0
    441c:	000d      	movs	r5, r1
    441e:	f001 fd91 	bl	5f44 <__aeabi_dmul>
    4422:	4a65      	ldr	r2, [pc, #404]	; (45b8 <__ieee754_pow+0xa38>)
    4424:	0006      	movs	r6, r0
    4426:	000f      	movs	r7, r1
    4428:	4b64      	ldr	r3, [pc, #400]	; (45bc <__ieee754_pow+0xa3c>)
    442a:	0020      	movs	r0, r4
    442c:	0029      	movs	r1, r5
    442e:	f001 fd89 	bl	5f44 <__aeabi_dmul>
    4432:	2200      	movs	r2, #0
    4434:	9002      	str	r0, [sp, #8]
    4436:	9103      	str	r1, [sp, #12]
    4438:	4b61      	ldr	r3, [pc, #388]	; (45c0 <__ieee754_pow+0xa40>)
    443a:	0020      	movs	r0, r4
    443c:	0029      	movs	r1, r5
    443e:	f001 fd81 	bl	5f44 <__aeabi_dmul>
    4442:	0002      	movs	r2, r0
    4444:	000b      	movs	r3, r1
    4446:	485f      	ldr	r0, [pc, #380]	; (45c4 <__ieee754_pow+0xa44>)
    4448:	495f      	ldr	r1, [pc, #380]	; (45c8 <__ieee754_pow+0xa48>)
    444a:	f001 fff5 	bl	6438 <__aeabi_dsub>
    444e:	0022      	movs	r2, r4
    4450:	002b      	movs	r3, r5
    4452:	f001 fd77 	bl	5f44 <__aeabi_dmul>
    4456:	0002      	movs	r2, r0
    4458:	000b      	movs	r3, r1
    445a:	2000      	movs	r0, #0
    445c:	495b      	ldr	r1, [pc, #364]	; (45cc <__ieee754_pow+0xa4c>)
    445e:	f001 ffeb 	bl	6438 <__aeabi_dsub>
    4462:	0022      	movs	r2, r4
    4464:	9004      	str	r0, [sp, #16]
    4466:	9105      	str	r1, [sp, #20]
    4468:	002b      	movs	r3, r5
    446a:	0020      	movs	r0, r4
    446c:	0029      	movs	r1, r5
    446e:	f001 fd69 	bl	5f44 <__aeabi_dmul>
    4472:	0002      	movs	r2, r0
    4474:	000b      	movs	r3, r1
    4476:	9804      	ldr	r0, [sp, #16]
    4478:	9905      	ldr	r1, [sp, #20]
    447a:	f001 fd63 	bl	5f44 <__aeabi_dmul>
    447e:	4a54      	ldr	r2, [pc, #336]	; (45d0 <__ieee754_pow+0xa50>)
    4480:	4b4c      	ldr	r3, [pc, #304]	; (45b4 <__ieee754_pow+0xa34>)
    4482:	f001 fd5f 	bl	5f44 <__aeabi_dmul>
    4486:	0002      	movs	r2, r0
    4488:	000b      	movs	r3, r1
    448a:	9802      	ldr	r0, [sp, #8]
    448c:	9903      	ldr	r1, [sp, #12]
    448e:	f001 ffd3 	bl	6438 <__aeabi_dsub>
    4492:	0002      	movs	r2, r0
    4494:	000b      	movs	r3, r1
    4496:	0004      	movs	r4, r0
    4498:	000d      	movs	r5, r1
    449a:	0030      	movs	r0, r6
    449c:	0039      	movs	r1, r7
    449e:	f000 fe01 	bl	50a4 <__aeabi_dadd>
    44a2:	2200      	movs	r2, #0
    44a4:	0010      	movs	r0, r2
    44a6:	003b      	movs	r3, r7
    44a8:	0032      	movs	r2, r6
    44aa:	9002      	str	r0, [sp, #8]
    44ac:	9103      	str	r1, [sp, #12]
    44ae:	f001 ffc3 	bl	6438 <__aeabi_dsub>
    44b2:	0002      	movs	r2, r0
    44b4:	000b      	movs	r3, r1
    44b6:	0020      	movs	r0, r4
    44b8:	0029      	movs	r1, r5
    44ba:	f001 ffbd 	bl	6438 <__aeabi_dsub>
    44be:	9004      	str	r0, [sp, #16]
    44c0:	9105      	str	r1, [sp, #20]
    44c2:	e5e1      	b.n	4088 <__ieee754_pow+0x508>
    44c4:	4a43      	ldr	r2, [pc, #268]	; (45d4 <__ieee754_pow+0xa54>)
    44c6:	4b44      	ldr	r3, [pc, #272]	; (45d8 <__ieee754_pow+0xa58>)
    44c8:	9806      	ldr	r0, [sp, #24]
    44ca:	9907      	ldr	r1, [sp, #28]
    44cc:	f001 fd3a 	bl	5f44 <__aeabi_dmul>
    44d0:	4a40      	ldr	r2, [pc, #256]	; (45d4 <__ieee754_pow+0xa54>)
    44d2:	4b41      	ldr	r3, [pc, #260]	; (45d8 <__ieee754_pow+0xa58>)
    44d4:	f001 fd36 	bl	5f44 <__aeabi_dmul>
    44d8:	0006      	movs	r6, r0
    44da:	f7ff fb9a 	bl	3c12 <__ieee754_pow+0x92>
    44de:	2a00      	cmp	r2, #0
    44e0:	d001      	beq.n	44e6 <__ieee754_pow+0x966>
    44e2:	f7ff fba5 	bl	3c30 <__ieee754_pow+0xb0>
    44e6:	3214      	adds	r2, #20
    44e8:	1ad3      	subs	r3, r2, r3
    44ea:	003a      	movs	r2, r7
    44ec:	411a      	asrs	r2, r3
    44ee:	0011      	movs	r1, r2
    44f0:	4099      	lsls	r1, r3
    44f2:	428f      	cmp	r7, r1
    44f4:	d001      	beq.n	44fa <__ieee754_pow+0x97a>
    44f6:	f7ff fb6f 	bl	3bd8 <__ieee754_pow+0x58>
    44fa:	2301      	movs	r3, #1
    44fc:	4013      	ands	r3, r2
    44fe:	2202      	movs	r2, #2
    4500:	1ad3      	subs	r3, r2, r3
    4502:	469b      	mov	fp, r3
    4504:	f7ff fb68 	bl	3bd8 <__ieee754_pow+0x58>
    4508:	4b30      	ldr	r3, [pc, #192]	; (45cc <__ieee754_pow+0xa4c>)
    450a:	429e      	cmp	r6, r3
    450c:	dd00      	ble.n	4510 <__ieee754_pow+0x990>
    450e:	e64e      	b.n	41ae <__ieee754_pow+0x62e>
    4510:	2300      	movs	r3, #0
    4512:	4699      	mov	r9, r3
    4514:	4698      	mov	r8, r3
    4516:	e67a      	b.n	420e <__ieee754_pow+0x68e>
    4518:	0002      	movs	r2, r0
    451a:	000b      	movs	r3, r1
    451c:	f7ff fc14 	bl	3d48 <__ieee754_pow+0x1c8>
    4520:	2380      	movs	r3, #128	; 0x80
    4522:	4c2e      	ldr	r4, [pc, #184]	; (45dc <__ieee754_pow+0xa5c>)
    4524:	05db      	lsls	r3, r3, #23
    4526:	9308      	str	r3, [sp, #32]
    4528:	9409      	str	r4, [sp, #36]	; 0x24
    452a:	4b2d      	ldr	r3, [pc, #180]	; (45e0 <__ieee754_pow+0xa60>)
    452c:	4c2d      	ldr	r4, [pc, #180]	; (45e4 <__ieee754_pow+0xa64>)
    452e:	2200      	movs	r2, #0
    4530:	930c      	str	r3, [sp, #48]	; 0x30
    4532:	940d      	str	r4, [sp, #52]	; 0x34
    4534:	2480      	movs	r4, #128	; 0x80
    4536:	4b2c      	ldr	r3, [pc, #176]	; (45e8 <__ieee754_pow+0xa68>)
    4538:	02e4      	lsls	r4, r4, #11
    453a:	9206      	str	r2, [sp, #24]
    453c:	9307      	str	r3, [sp, #28]
    453e:	e456      	b.n	3dee <__ieee754_pow+0x26e>
    4540:	4643      	mov	r3, r8
    4542:	425b      	negs	r3, r3
    4544:	4698      	mov	r8, r3
    4546:	e651      	b.n	41ec <__ieee754_pow+0x66c>
    4548:	4642      	mov	r2, r8
    454a:	f000 f9fd 	bl	4948 <scalbn>
    454e:	e707      	b.n	4360 <__ieee754_pow+0x7e0>
    4550:	fffffc02 	.word	0xfffffc02
    4554:	fffffc01 	.word	0xfffffc01
    4558:	000fffff 	.word	0x000fffff
    455c:	3fe62e43 	.word	0x3fe62e43
    4560:	fefa39ef 	.word	0xfefa39ef
    4564:	3fe62e42 	.word	0x3fe62e42
    4568:	0ca86c39 	.word	0x0ca86c39
    456c:	be205c61 	.word	0xbe205c61
    4570:	72bea4d0 	.word	0x72bea4d0
    4574:	3e663769 	.word	0x3e663769
    4578:	c5d26bf1 	.word	0xc5d26bf1
    457c:	3ebbbd41 	.word	0x3ebbbd41
    4580:	af25de2c 	.word	0xaf25de2c
    4584:	3f11566a 	.word	0x3f11566a
    4588:	16bebd93 	.word	0x16bebd93
    458c:	3f66c16c 	.word	0x3f66c16c
    4590:	5555553e 	.word	0x5555553e
    4594:	3fc55555 	.word	0x3fc55555
    4598:	3ff00000 	.word	0x3ff00000
    459c:	4090cbff 	.word	0x4090cbff
    45a0:	3f6f3400 	.word	0x3f6f3400
    45a4:	c2f8f359 	.word	0xc2f8f359
    45a8:	01a56e1f 	.word	0x01a56e1f
    45ac:	bff00000 	.word	0xbff00000
    45b0:	3feffffe 	.word	0x3feffffe
    45b4:	3ff71547 	.word	0x3ff71547
    45b8:	f85ddf44 	.word	0xf85ddf44
    45bc:	3e54ae0b 	.word	0x3e54ae0b
    45c0:	3fd00000 	.word	0x3fd00000
    45c4:	55555555 	.word	0x55555555
    45c8:	3fd55555 	.word	0x3fd55555
    45cc:	3fe00000 	.word	0x3fe00000
    45d0:	652b82fe 	.word	0x652b82fe
    45d4:	8800759c 	.word	0x8800759c
    45d8:	7e37e43c 	.word	0x7e37e43c
    45dc:	3fe2b803 	.word	0x3fe2b803
    45e0:	43cfd006 	.word	0x43cfd006
    45e4:	3e4cfdeb 	.word	0x3e4cfdeb
    45e8:	3ff80000 	.word	0x3ff80000

000045ec <__ieee754_sqrt>:
    45ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    45ee:	4656      	mov	r6, sl
    45f0:	464d      	mov	r5, r9
    45f2:	4644      	mov	r4, r8
    45f4:	465f      	mov	r7, fp
    45f6:	4b75      	ldr	r3, [pc, #468]	; (47cc <__ieee754_sqrt+0x1e0>)
    45f8:	b4f0      	push	{r4, r5, r6, r7}
    45fa:	000a      	movs	r2, r1
    45fc:	000d      	movs	r5, r1
    45fe:	0019      	movs	r1, r3
    4600:	b083      	sub	sp, #12
    4602:	0006      	movs	r6, r0
    4604:	0004      	movs	r4, r0
    4606:	4029      	ands	r1, r5
    4608:	4299      	cmp	r1, r3
    460a:	d100      	bne.n	460e <__ieee754_sqrt+0x22>
    460c:	e0ba      	b.n	4784 <__ieee754_sqrt+0x198>
    460e:	2d00      	cmp	r5, #0
    4610:	dc00      	bgt.n	4614 <__ieee754_sqrt+0x28>
    4612:	e094      	b.n	473e <__ieee754_sqrt+0x152>
    4614:	152d      	asrs	r5, r5, #20
    4616:	d100      	bne.n	461a <__ieee754_sqrt+0x2e>
    4618:	e0a3      	b.n	4762 <__ieee754_sqrt+0x176>
    461a:	4b6d      	ldr	r3, [pc, #436]	; (47d0 <__ieee754_sqrt+0x1e4>)
    461c:	0312      	lsls	r2, r2, #12
    461e:	469c      	mov	ip, r3
    4620:	2380      	movs	r3, #128	; 0x80
    4622:	0b12      	lsrs	r2, r2, #12
    4624:	035b      	lsls	r3, r3, #13
    4626:	4465      	add	r5, ip
    4628:	431a      	orrs	r2, r3
    462a:	07eb      	lsls	r3, r5, #31
    462c:	d500      	bpl.n	4630 <__ieee754_sqrt+0x44>
    462e:	e081      	b.n	4734 <__ieee754_sqrt+0x148>
    4630:	106b      	asrs	r3, r5, #1
    4632:	4698      	mov	r8, r3
    4634:	0fe3      	lsrs	r3, r4, #31
    4636:	189b      	adds	r3, r3, r2
    4638:	189b      	adds	r3, r3, r2
    463a:	2280      	movs	r2, #128	; 0x80
    463c:	2116      	movs	r1, #22
    463e:	2600      	movs	r6, #0
    4640:	2700      	movs	r7, #0
    4642:	0064      	lsls	r4, r4, #1
    4644:	0392      	lsls	r2, r2, #14
    4646:	18b8      	adds	r0, r7, r2
    4648:	4298      	cmp	r0, r3
    464a:	dc02      	bgt.n	4652 <__ieee754_sqrt+0x66>
    464c:	1887      	adds	r7, r0, r2
    464e:	1a1b      	subs	r3, r3, r0
    4650:	18b6      	adds	r6, r6, r2
    4652:	0fe0      	lsrs	r0, r4, #31
    4654:	005b      	lsls	r3, r3, #1
    4656:	3901      	subs	r1, #1
    4658:	181b      	adds	r3, r3, r0
    465a:	0064      	lsls	r4, r4, #1
    465c:	0852      	lsrs	r2, r2, #1
    465e:	2900      	cmp	r1, #0
    4660:	d1f1      	bne.n	4646 <__ieee754_sqrt+0x5a>
    4662:	2200      	movs	r2, #0
    4664:	9201      	str	r2, [sp, #4]
    4666:	4694      	mov	ip, r2
    4668:	2280      	movs	r2, #128	; 0x80
    466a:	0612      	lsls	r2, r2, #24
    466c:	2020      	movs	r0, #32
    466e:	4691      	mov	r9, r2
    4670:	e009      	b.n	4686 <__ieee754_sqrt+0x9a>
    4672:	429f      	cmp	r7, r3
    4674:	d041      	beq.n	46fa <__ieee754_sqrt+0x10e>
    4676:	0fe1      	lsrs	r1, r4, #31
    4678:	18c9      	adds	r1, r1, r3
    467a:	3801      	subs	r0, #1
    467c:	18cb      	adds	r3, r1, r3
    467e:	0064      	lsls	r4, r4, #1
    4680:	0852      	lsrs	r2, r2, #1
    4682:	2800      	cmp	r0, #0
    4684:	d01e      	beq.n	46c4 <__ieee754_sqrt+0xd8>
    4686:	4661      	mov	r1, ip
    4688:	1851      	adds	r1, r2, r1
    468a:	429f      	cmp	r7, r3
    468c:	daf1      	bge.n	4672 <__ieee754_sqrt+0x86>
    468e:	188d      	adds	r5, r1, r2
    4690:	46ac      	mov	ip, r5
    4692:	0fcd      	lsrs	r5, r1, #31
    4694:	07ed      	lsls	r5, r5, #31
    4696:	46ba      	mov	sl, r7
    4698:	454d      	cmp	r5, r9
    469a:	d039      	beq.n	4710 <__ieee754_sqrt+0x124>
    469c:	1bdb      	subs	r3, r3, r7
    469e:	428c      	cmp	r4, r1
    46a0:	41bf      	sbcs	r7, r7
    46a2:	427f      	negs	r7, r7
    46a4:	1bdb      	subs	r3, r3, r7
    46a6:	1a64      	subs	r4, r4, r1
    46a8:	9901      	ldr	r1, [sp, #4]
    46aa:	3801      	subs	r0, #1
    46ac:	468b      	mov	fp, r1
    46ae:	4493      	add	fp, r2
    46b0:	4659      	mov	r1, fp
    46b2:	9101      	str	r1, [sp, #4]
    46b4:	0fe1      	lsrs	r1, r4, #31
    46b6:	18c9      	adds	r1, r1, r3
    46b8:	4657      	mov	r7, sl
    46ba:	18cb      	adds	r3, r1, r3
    46bc:	0064      	lsls	r4, r4, #1
    46be:	0852      	lsrs	r2, r2, #1
    46c0:	2800      	cmp	r0, #0
    46c2:	d1e0      	bne.n	4686 <__ieee754_sqrt+0x9a>
    46c4:	4323      	orrs	r3, r4
    46c6:	d12b      	bne.n	4720 <__ieee754_sqrt+0x134>
    46c8:	9b01      	ldr	r3, [sp, #4]
    46ca:	085b      	lsrs	r3, r3, #1
    46cc:	4941      	ldr	r1, [pc, #260]	; (47d4 <__ieee754_sqrt+0x1e8>)
    46ce:	1072      	asrs	r2, r6, #1
    46d0:	468c      	mov	ip, r1
    46d2:	4462      	add	r2, ip
    46d4:	07f1      	lsls	r1, r6, #31
    46d6:	d502      	bpl.n	46de <__ieee754_sqrt+0xf2>
    46d8:	2180      	movs	r1, #128	; 0x80
    46da:	0609      	lsls	r1, r1, #24
    46dc:	430b      	orrs	r3, r1
    46de:	4641      	mov	r1, r8
    46e0:	0509      	lsls	r1, r1, #20
    46e2:	188d      	adds	r5, r1, r2
    46e4:	001e      	movs	r6, r3
    46e6:	002f      	movs	r7, r5
    46e8:	0030      	movs	r0, r6
    46ea:	0039      	movs	r1, r7
    46ec:	b003      	add	sp, #12
    46ee:	bc3c      	pop	{r2, r3, r4, r5}
    46f0:	4690      	mov	r8, r2
    46f2:	4699      	mov	r9, r3
    46f4:	46a2      	mov	sl, r4
    46f6:	46ab      	mov	fp, r5
    46f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    46fa:	42a1      	cmp	r1, r4
    46fc:	d80e      	bhi.n	471c <__ieee754_sqrt+0x130>
    46fe:	188d      	adds	r5, r1, r2
    4700:	46ac      	mov	ip, r5
    4702:	0fcd      	lsrs	r5, r1, #31
    4704:	07ed      	lsls	r5, r5, #31
    4706:	454d      	cmp	r5, r9
    4708:	d048      	beq.n	479c <__ieee754_sqrt+0x1b0>
    470a:	469a      	mov	sl, r3
    470c:	2300      	movs	r3, #0
    470e:	e7ca      	b.n	46a6 <__ieee754_sqrt+0xba>
    4710:	4665      	mov	r5, ip
    4712:	2d00      	cmp	r5, #0
    4714:	dbc2      	blt.n	469c <__ieee754_sqrt+0xb0>
    4716:	1c7d      	adds	r5, r7, #1
    4718:	46aa      	mov	sl, r5
    471a:	e7bf      	b.n	469c <__ieee754_sqrt+0xb0>
    471c:	003b      	movs	r3, r7
    471e:	e7aa      	b.n	4676 <__ieee754_sqrt+0x8a>
    4720:	9b01      	ldr	r3, [sp, #4]
    4722:	3301      	adds	r3, #1
    4724:	d03e      	beq.n	47a4 <__ieee754_sqrt+0x1b8>
    4726:	9a01      	ldr	r2, [sp, #4]
    4728:	2301      	movs	r3, #1
    472a:	4694      	mov	ip, r2
    472c:	4013      	ands	r3, r2
    472e:	4463      	add	r3, ip
    4730:	085b      	lsrs	r3, r3, #1
    4732:	e7cb      	b.n	46cc <__ieee754_sqrt+0xe0>
    4734:	0fe3      	lsrs	r3, r4, #31
    4736:	0052      	lsls	r2, r2, #1
    4738:	189a      	adds	r2, r3, r2
    473a:	0064      	lsls	r4, r4, #1
    473c:	e778      	b.n	4630 <__ieee754_sqrt+0x44>
    473e:	006b      	lsls	r3, r5, #1
    4740:	085b      	lsrs	r3, r3, #1
    4742:	4303      	orrs	r3, r0
    4744:	002f      	movs	r7, r5
    4746:	2b00      	cmp	r3, #0
    4748:	d0ce      	beq.n	46e8 <__ieee754_sqrt+0xfc>
    474a:	2500      	movs	r5, #0
    474c:	2a00      	cmp	r2, #0
    474e:	d131      	bne.n	47b4 <__ieee754_sqrt+0x1c8>
    4750:	0ae2      	lsrs	r2, r4, #11
    4752:	3d15      	subs	r5, #21
    4754:	0564      	lsls	r4, r4, #21
    4756:	2a00      	cmp	r2, #0
    4758:	d0fa      	beq.n	4750 <__ieee754_sqrt+0x164>
    475a:	2380      	movs	r3, #128	; 0x80
    475c:	035b      	lsls	r3, r3, #13
    475e:	421a      	tst	r2, r3
    4760:	d123      	bne.n	47aa <__ieee754_sqrt+0x1be>
    4762:	2080      	movs	r0, #128	; 0x80
    4764:	2300      	movs	r3, #0
    4766:	0340      	lsls	r0, r0, #13
    4768:	e000      	b.n	476c <__ieee754_sqrt+0x180>
    476a:	000b      	movs	r3, r1
    476c:	0052      	lsls	r2, r2, #1
    476e:	1c59      	adds	r1, r3, #1
    4770:	4202      	tst	r2, r0
    4772:	d0fa      	beq.n	476a <__ieee754_sqrt+0x17e>
    4774:	2020      	movs	r0, #32
    4776:	1a40      	subs	r0, r0, r1
    4778:	1aed      	subs	r5, r5, r3
    477a:	0023      	movs	r3, r4
    477c:	40c3      	lsrs	r3, r0
    477e:	408c      	lsls	r4, r1
    4780:	431a      	orrs	r2, r3
    4782:	e74a      	b.n	461a <__ieee754_sqrt+0x2e>
    4784:	0002      	movs	r2, r0
    4786:	002b      	movs	r3, r5
    4788:	0029      	movs	r1, r5
    478a:	f001 fbdb 	bl	5f44 <__aeabi_dmul>
    478e:	0032      	movs	r2, r6
    4790:	002b      	movs	r3, r5
    4792:	f000 fc87 	bl	50a4 <__aeabi_dadd>
    4796:	0006      	movs	r6, r0
    4798:	000f      	movs	r7, r1
    479a:	e7a5      	b.n	46e8 <__ieee754_sqrt+0xfc>
    479c:	4665      	mov	r5, ip
    479e:	2d00      	cmp	r5, #0
    47a0:	dab9      	bge.n	4716 <__ieee754_sqrt+0x12a>
    47a2:	e7b2      	b.n	470a <__ieee754_sqrt+0x11e>
    47a4:	3601      	adds	r6, #1
    47a6:	2300      	movs	r3, #0
    47a8:	e790      	b.n	46cc <__ieee754_sqrt+0xe0>
    47aa:	2301      	movs	r3, #1
    47ac:	2020      	movs	r0, #32
    47ae:	425b      	negs	r3, r3
    47b0:	2100      	movs	r1, #0
    47b2:	e7e1      	b.n	4778 <__ieee754_sqrt+0x18c>
    47b4:	003b      	movs	r3, r7
    47b6:	0002      	movs	r2, r0
    47b8:	0039      	movs	r1, r7
    47ba:	f001 fe3d 	bl	6438 <__aeabi_dsub>
    47be:	0002      	movs	r2, r0
    47c0:	000b      	movs	r3, r1
    47c2:	f000 ff9b 	bl	56fc <__aeabi_ddiv>
    47c6:	0006      	movs	r6, r0
    47c8:	000f      	movs	r7, r1
    47ca:	e78d      	b.n	46e8 <__ieee754_sqrt+0xfc>
    47cc:	7ff00000 	.word	0x7ff00000
    47d0:	fffffc01 	.word	0xfffffc01
    47d4:	3fe00000 	.word	0x3fe00000

000047d8 <fabs>:
    47d8:	0049      	lsls	r1, r1, #1
    47da:	084b      	lsrs	r3, r1, #1
    47dc:	0019      	movs	r1, r3
    47de:	4770      	bx	lr

000047e0 <finite>:
    47e0:	4b03      	ldr	r3, [pc, #12]	; (47f0 <finite+0x10>)
    47e2:	0048      	lsls	r0, r1, #1
    47e4:	469c      	mov	ip, r3
    47e6:	0840      	lsrs	r0, r0, #1
    47e8:	4460      	add	r0, ip
    47ea:	0fc0      	lsrs	r0, r0, #31
    47ec:	4770      	bx	lr
    47ee:	46c0      	nop			; (mov r8, r8)
    47f0:	80100000 	.word	0x80100000

000047f4 <matherr>:
    47f4:	2000      	movs	r0, #0
    47f6:	4770      	bx	lr

000047f8 <nan>:
    47f8:	2000      	movs	r0, #0
    47fa:	4901      	ldr	r1, [pc, #4]	; (4800 <nan+0x8>)
    47fc:	4770      	bx	lr
    47fe:	46c0      	nop			; (mov r8, r8)
    4800:	7ff80000 	.word	0x7ff80000

00004804 <rint>:
    4804:	b5f0      	push	{r4, r5, r6, r7, lr}
    4806:	4647      	mov	r7, r8
    4808:	b480      	push	{r7}
    480a:	0fcb      	lsrs	r3, r1, #31
    480c:	4698      	mov	r8, r3
    480e:	4c4a      	ldr	r4, [pc, #296]	; (4938 <rint+0x134>)
    4810:	004b      	lsls	r3, r1, #1
    4812:	0d5b      	lsrs	r3, r3, #21
    4814:	191e      	adds	r6, r3, r4
    4816:	b082      	sub	sp, #8
    4818:	0007      	movs	r7, r0
    481a:	000a      	movs	r2, r1
    481c:	2e13      	cmp	r6, #19
    481e:	dc35      	bgt.n	488c <rint+0x88>
    4820:	2e00      	cmp	r6, #0
    4822:	db57      	blt.n	48d4 <rint+0xd0>
    4824:	4b45      	ldr	r3, [pc, #276]	; (493c <rint+0x138>)
    4826:	0004      	movs	r4, r0
    4828:	4133      	asrs	r3, r6
    482a:	001f      	movs	r7, r3
    482c:	400f      	ands	r7, r1
    482e:	4307      	orrs	r7, r0
    4830:	000d      	movs	r5, r1
    4832:	2f00      	cmp	r7, #0
    4834:	d024      	beq.n	4880 <rint+0x7c>
    4836:	085b      	lsrs	r3, r3, #1
    4838:	001c      	movs	r4, r3
    483a:	400c      	ands	r4, r1
    483c:	4320      	orrs	r0, r4
    483e:	2700      	movs	r7, #0
    4840:	2800      	cmp	r0, #0
    4842:	d007      	beq.n	4854 <rint+0x50>
    4844:	2e13      	cmp	r6, #19
    4846:	d100      	bne.n	484a <rint+0x46>
    4848:	e072      	b.n	4930 <rint+0x12c>
    484a:	2280      	movs	r2, #128	; 0x80
    484c:	02d2      	lsls	r2, r2, #11
    484e:	4132      	asrs	r2, r6
    4850:	4399      	bics	r1, r3
    4852:	430a      	orrs	r2, r1
    4854:	4643      	mov	r3, r8
    4856:	00de      	lsls	r6, r3, #3
    4858:	4b39      	ldr	r3, [pc, #228]	; (4940 <rint+0x13c>)
    485a:	0011      	movs	r1, r2
    485c:	199e      	adds	r6, r3, r6
    485e:	6834      	ldr	r4, [r6, #0]
    4860:	6875      	ldr	r5, [r6, #4]
    4862:	0038      	movs	r0, r7
    4864:	0022      	movs	r2, r4
    4866:	002b      	movs	r3, r5
    4868:	f000 fc1c 	bl	50a4 <__aeabi_dadd>
    486c:	9000      	str	r0, [sp, #0]
    486e:	9101      	str	r1, [sp, #4]
    4870:	9800      	ldr	r0, [sp, #0]
    4872:	9901      	ldr	r1, [sp, #4]
    4874:	0022      	movs	r2, r4
    4876:	002b      	movs	r3, r5
    4878:	f001 fdde 	bl	6438 <__aeabi_dsub>
    487c:	0004      	movs	r4, r0
    487e:	000d      	movs	r5, r1
    4880:	0020      	movs	r0, r4
    4882:	0029      	movs	r1, r5
    4884:	b002      	add	sp, #8
    4886:	bc04      	pop	{r2}
    4888:	4690      	mov	r8, r2
    488a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    488c:	2e33      	cmp	r6, #51	; 0x33
    488e:	dd0c      	ble.n	48aa <rint+0xa6>
    4890:	2380      	movs	r3, #128	; 0x80
    4892:	0004      	movs	r4, r0
    4894:	000d      	movs	r5, r1
    4896:	00db      	lsls	r3, r3, #3
    4898:	429e      	cmp	r6, r3
    489a:	d1f1      	bne.n	4880 <rint+0x7c>
    489c:	0002      	movs	r2, r0
    489e:	000b      	movs	r3, r1
    48a0:	f000 fc00 	bl	50a4 <__aeabi_dadd>
    48a4:	0004      	movs	r4, r0
    48a6:	000d      	movs	r5, r1
    48a8:	e7ea      	b.n	4880 <rint+0x7c>
    48aa:	4c26      	ldr	r4, [pc, #152]	; (4944 <rint+0x140>)
    48ac:	000d      	movs	r5, r1
    48ae:	46a4      	mov	ip, r4
    48b0:	2401      	movs	r4, #1
    48b2:	4463      	add	r3, ip
    48b4:	4264      	negs	r4, r4
    48b6:	40dc      	lsrs	r4, r3
    48b8:	46a4      	mov	ip, r4
    48ba:	4661      	mov	r1, ip
    48bc:	0004      	movs	r4, r0
    48be:	4201      	tst	r1, r0
    48c0:	d0de      	beq.n	4880 <rint+0x7c>
    48c2:	0849      	lsrs	r1, r1, #1
    48c4:	4201      	tst	r1, r0
    48c6:	d0c5      	beq.n	4854 <rint+0x50>
    48c8:	2780      	movs	r7, #128	; 0x80
    48ca:	05ff      	lsls	r7, r7, #23
    48cc:	411f      	asrs	r7, r3
    48ce:	4388      	bics	r0, r1
    48d0:	4307      	orrs	r7, r0
    48d2:	e7bf      	b.n	4854 <rint+0x50>
    48d4:	004b      	lsls	r3, r1, #1
    48d6:	085b      	lsrs	r3, r3, #1
    48d8:	4303      	orrs	r3, r0
    48da:	0004      	movs	r4, r0
    48dc:	000d      	movs	r5, r1
    48de:	2b00      	cmp	r3, #0
    48e0:	d0ce      	beq.n	4880 <rint+0x7c>
    48e2:	030b      	lsls	r3, r1, #12
    48e4:	0b1b      	lsrs	r3, r3, #12
    48e6:	4303      	orrs	r3, r0
    48e8:	425a      	negs	r2, r3
    48ea:	4313      	orrs	r3, r2
    48ec:	2280      	movs	r2, #128	; 0x80
    48ee:	0b1b      	lsrs	r3, r3, #12
    48f0:	0312      	lsls	r2, r2, #12
    48f2:	4013      	ands	r3, r2
    48f4:	0c4a      	lsrs	r2, r1, #17
    48f6:	0452      	lsls	r2, r2, #17
    48f8:	4313      	orrs	r3, r2
    48fa:	0019      	movs	r1, r3
    48fc:	4643      	mov	r3, r8
    48fe:	4a10      	ldr	r2, [pc, #64]	; (4940 <rint+0x13c>)
    4900:	00db      	lsls	r3, r3, #3
    4902:	18d3      	adds	r3, r2, r3
    4904:	681c      	ldr	r4, [r3, #0]
    4906:	685d      	ldr	r5, [r3, #4]
    4908:	0022      	movs	r2, r4
    490a:	002b      	movs	r3, r5
    490c:	f000 fbca 	bl	50a4 <__aeabi_dadd>
    4910:	9000      	str	r0, [sp, #0]
    4912:	9101      	str	r1, [sp, #4]
    4914:	9800      	ldr	r0, [sp, #0]
    4916:	9901      	ldr	r1, [sp, #4]
    4918:	0022      	movs	r2, r4
    491a:	002b      	movs	r3, r5
    491c:	f001 fd8c 	bl	6438 <__aeabi_dsub>
    4920:	4642      	mov	r2, r8
    4922:	004b      	lsls	r3, r1, #1
    4924:	085b      	lsrs	r3, r3, #1
    4926:	07d6      	lsls	r6, r2, #31
    4928:	4333      	orrs	r3, r6
    492a:	0004      	movs	r4, r0
    492c:	001d      	movs	r5, r3
    492e:	e7a7      	b.n	4880 <rint+0x7c>
    4930:	2780      	movs	r7, #128	; 0x80
    4932:	063f      	lsls	r7, r7, #24
    4934:	e789      	b.n	484a <rint+0x46>
    4936:	46c0      	nop			; (mov r8, r8)
    4938:	fffffc01 	.word	0xfffffc01
    493c:	000fffff 	.word	0x000fffff
    4940:	00006f00 	.word	0x00006f00
    4944:	fffffbed 	.word	0xfffffbed

00004948 <scalbn>:
    4948:	004b      	lsls	r3, r1, #1
    494a:	b570      	push	{r4, r5, r6, lr}
    494c:	0d5b      	lsrs	r3, r3, #21
    494e:	0014      	movs	r4, r2
    4950:	000a      	movs	r2, r1
    4952:	2b00      	cmp	r3, #0
    4954:	d11a      	bne.n	498c <scalbn+0x44>
    4956:	004b      	lsls	r3, r1, #1
    4958:	085b      	lsrs	r3, r3, #1
    495a:	4303      	orrs	r3, r0
    495c:	d015      	beq.n	498a <scalbn+0x42>
    495e:	2200      	movs	r2, #0
    4960:	4b22      	ldr	r3, [pc, #136]	; (49ec <scalbn+0xa4>)
    4962:	f001 faef 	bl	5f44 <__aeabi_dmul>
    4966:	4b22      	ldr	r3, [pc, #136]	; (49f0 <scalbn+0xa8>)
    4968:	000a      	movs	r2, r1
    496a:	429c      	cmp	r4, r3
    496c:	db22      	blt.n	49b4 <scalbn+0x6c>
    496e:	004b      	lsls	r3, r1, #1
    4970:	0d5b      	lsrs	r3, r3, #21
    4972:	3b36      	subs	r3, #54	; 0x36
    4974:	4d1f      	ldr	r5, [pc, #124]	; (49f4 <scalbn+0xac>)
    4976:	18e3      	adds	r3, r4, r3
    4978:	42ab      	cmp	r3, r5
    497a:	dc20      	bgt.n	49be <scalbn+0x76>
    497c:	2b00      	cmp	r3, #0
    497e:	dd0d      	ble.n	499c <scalbn+0x54>
    4980:	4c1d      	ldr	r4, [pc, #116]	; (49f8 <scalbn+0xb0>)
    4982:	051b      	lsls	r3, r3, #20
    4984:	4022      	ands	r2, r4
    4986:	431a      	orrs	r2, r3
    4988:	0011      	movs	r1, r2
    498a:	bd70      	pop	{r4, r5, r6, pc}
    498c:	4d1b      	ldr	r5, [pc, #108]	; (49fc <scalbn+0xb4>)
    498e:	42ab      	cmp	r3, r5
    4990:	d1f0      	bne.n	4974 <scalbn+0x2c>
    4992:	0002      	movs	r2, r0
    4994:	000b      	movs	r3, r1
    4996:	f000 fb85 	bl	50a4 <__aeabi_dadd>
    499a:	e7f6      	b.n	498a <scalbn+0x42>
    499c:	001d      	movs	r5, r3
    499e:	3535      	adds	r5, #53	; 0x35
    49a0:	da18      	bge.n	49d4 <scalbn+0x8c>
    49a2:	4b17      	ldr	r3, [pc, #92]	; (4a00 <scalbn+0xb8>)
    49a4:	0002      	movs	r2, r0
    49a6:	429c      	cmp	r4, r3
    49a8:	dc0a      	bgt.n	49c0 <scalbn+0x78>
    49aa:	000b      	movs	r3, r1
    49ac:	4815      	ldr	r0, [pc, #84]	; (4a04 <scalbn+0xbc>)
    49ae:	4916      	ldr	r1, [pc, #88]	; (4a08 <scalbn+0xc0>)
    49b0:	f000 f832 	bl	4a18 <copysign>
    49b4:	4a13      	ldr	r2, [pc, #76]	; (4a04 <scalbn+0xbc>)
    49b6:	4b14      	ldr	r3, [pc, #80]	; (4a08 <scalbn+0xc0>)
    49b8:	f001 fac4 	bl	5f44 <__aeabi_dmul>
    49bc:	e7e5      	b.n	498a <scalbn+0x42>
    49be:	0002      	movs	r2, r0
    49c0:	000b      	movs	r3, r1
    49c2:	4812      	ldr	r0, [pc, #72]	; (4a0c <scalbn+0xc4>)
    49c4:	4912      	ldr	r1, [pc, #72]	; (4a10 <scalbn+0xc8>)
    49c6:	f000 f827 	bl	4a18 <copysign>
    49ca:	4a10      	ldr	r2, [pc, #64]	; (4a0c <scalbn+0xc4>)
    49cc:	4b10      	ldr	r3, [pc, #64]	; (4a10 <scalbn+0xc8>)
    49ce:	f001 fab9 	bl	5f44 <__aeabi_dmul>
    49d2:	e7da      	b.n	498a <scalbn+0x42>
    49d4:	4c08      	ldr	r4, [pc, #32]	; (49f8 <scalbn+0xb0>)
    49d6:	3336      	adds	r3, #54	; 0x36
    49d8:	4022      	ands	r2, r4
    49da:	051b      	lsls	r3, r3, #20
    49dc:	4313      	orrs	r3, r2
    49de:	0019      	movs	r1, r3
    49e0:	2200      	movs	r2, #0
    49e2:	4b0c      	ldr	r3, [pc, #48]	; (4a14 <scalbn+0xcc>)
    49e4:	f001 faae 	bl	5f44 <__aeabi_dmul>
    49e8:	e7cf      	b.n	498a <scalbn+0x42>
    49ea:	46c0      	nop			; (mov r8, r8)
    49ec:	43500000 	.word	0x43500000
    49f0:	ffff3cb0 	.word	0xffff3cb0
    49f4:	000007fe 	.word	0x000007fe
    49f8:	800fffff 	.word	0x800fffff
    49fc:	000007ff 	.word	0x000007ff
    4a00:	0000c350 	.word	0x0000c350
    4a04:	c2f8f359 	.word	0xc2f8f359
    4a08:	01a56e1f 	.word	0x01a56e1f
    4a0c:	8800759c 	.word	0x8800759c
    4a10:	7e37e43c 	.word	0x7e37e43c
    4a14:	3c900000 	.word	0x3c900000

00004a18 <copysign>:
    4a18:	b530      	push	{r4, r5, lr}
    4a1a:	004a      	lsls	r2, r1, #1
    4a1c:	0fdb      	lsrs	r3, r3, #31
    4a1e:	07db      	lsls	r3, r3, #31
    4a20:	0852      	lsrs	r2, r2, #1
    4a22:	431a      	orrs	r2, r3
    4a24:	0011      	movs	r1, r2
    4a26:	bd30      	pop	{r4, r5, pc}

00004a28 <__gnu_thumb1_case_uqi>:
    4a28:	b402      	push	{r1}
    4a2a:	4671      	mov	r1, lr
    4a2c:	0849      	lsrs	r1, r1, #1
    4a2e:	0049      	lsls	r1, r1, #1
    4a30:	5c09      	ldrb	r1, [r1, r0]
    4a32:	0049      	lsls	r1, r1, #1
    4a34:	448e      	add	lr, r1
    4a36:	bc02      	pop	{r1}
    4a38:	4770      	bx	lr
    4a3a:	46c0      	nop			; (mov r8, r8)

00004a3c <__aeabi_uidiv>:
    4a3c:	2200      	movs	r2, #0
    4a3e:	0843      	lsrs	r3, r0, #1
    4a40:	428b      	cmp	r3, r1
    4a42:	d374      	bcc.n	4b2e <__aeabi_uidiv+0xf2>
    4a44:	0903      	lsrs	r3, r0, #4
    4a46:	428b      	cmp	r3, r1
    4a48:	d35f      	bcc.n	4b0a <__aeabi_uidiv+0xce>
    4a4a:	0a03      	lsrs	r3, r0, #8
    4a4c:	428b      	cmp	r3, r1
    4a4e:	d344      	bcc.n	4ada <__aeabi_uidiv+0x9e>
    4a50:	0b03      	lsrs	r3, r0, #12
    4a52:	428b      	cmp	r3, r1
    4a54:	d328      	bcc.n	4aa8 <__aeabi_uidiv+0x6c>
    4a56:	0c03      	lsrs	r3, r0, #16
    4a58:	428b      	cmp	r3, r1
    4a5a:	d30d      	bcc.n	4a78 <__aeabi_uidiv+0x3c>
    4a5c:	22ff      	movs	r2, #255	; 0xff
    4a5e:	0209      	lsls	r1, r1, #8
    4a60:	ba12      	rev	r2, r2
    4a62:	0c03      	lsrs	r3, r0, #16
    4a64:	428b      	cmp	r3, r1
    4a66:	d302      	bcc.n	4a6e <__aeabi_uidiv+0x32>
    4a68:	1212      	asrs	r2, r2, #8
    4a6a:	0209      	lsls	r1, r1, #8
    4a6c:	d065      	beq.n	4b3a <__aeabi_uidiv+0xfe>
    4a6e:	0b03      	lsrs	r3, r0, #12
    4a70:	428b      	cmp	r3, r1
    4a72:	d319      	bcc.n	4aa8 <__aeabi_uidiv+0x6c>
    4a74:	e000      	b.n	4a78 <__aeabi_uidiv+0x3c>
    4a76:	0a09      	lsrs	r1, r1, #8
    4a78:	0bc3      	lsrs	r3, r0, #15
    4a7a:	428b      	cmp	r3, r1
    4a7c:	d301      	bcc.n	4a82 <__aeabi_uidiv+0x46>
    4a7e:	03cb      	lsls	r3, r1, #15
    4a80:	1ac0      	subs	r0, r0, r3
    4a82:	4152      	adcs	r2, r2
    4a84:	0b83      	lsrs	r3, r0, #14
    4a86:	428b      	cmp	r3, r1
    4a88:	d301      	bcc.n	4a8e <__aeabi_uidiv+0x52>
    4a8a:	038b      	lsls	r3, r1, #14
    4a8c:	1ac0      	subs	r0, r0, r3
    4a8e:	4152      	adcs	r2, r2
    4a90:	0b43      	lsrs	r3, r0, #13
    4a92:	428b      	cmp	r3, r1
    4a94:	d301      	bcc.n	4a9a <__aeabi_uidiv+0x5e>
    4a96:	034b      	lsls	r3, r1, #13
    4a98:	1ac0      	subs	r0, r0, r3
    4a9a:	4152      	adcs	r2, r2
    4a9c:	0b03      	lsrs	r3, r0, #12
    4a9e:	428b      	cmp	r3, r1
    4aa0:	d301      	bcc.n	4aa6 <__aeabi_uidiv+0x6a>
    4aa2:	030b      	lsls	r3, r1, #12
    4aa4:	1ac0      	subs	r0, r0, r3
    4aa6:	4152      	adcs	r2, r2
    4aa8:	0ac3      	lsrs	r3, r0, #11
    4aaa:	428b      	cmp	r3, r1
    4aac:	d301      	bcc.n	4ab2 <__aeabi_uidiv+0x76>
    4aae:	02cb      	lsls	r3, r1, #11
    4ab0:	1ac0      	subs	r0, r0, r3
    4ab2:	4152      	adcs	r2, r2
    4ab4:	0a83      	lsrs	r3, r0, #10
    4ab6:	428b      	cmp	r3, r1
    4ab8:	d301      	bcc.n	4abe <__aeabi_uidiv+0x82>
    4aba:	028b      	lsls	r3, r1, #10
    4abc:	1ac0      	subs	r0, r0, r3
    4abe:	4152      	adcs	r2, r2
    4ac0:	0a43      	lsrs	r3, r0, #9
    4ac2:	428b      	cmp	r3, r1
    4ac4:	d301      	bcc.n	4aca <__aeabi_uidiv+0x8e>
    4ac6:	024b      	lsls	r3, r1, #9
    4ac8:	1ac0      	subs	r0, r0, r3
    4aca:	4152      	adcs	r2, r2
    4acc:	0a03      	lsrs	r3, r0, #8
    4ace:	428b      	cmp	r3, r1
    4ad0:	d301      	bcc.n	4ad6 <__aeabi_uidiv+0x9a>
    4ad2:	020b      	lsls	r3, r1, #8
    4ad4:	1ac0      	subs	r0, r0, r3
    4ad6:	4152      	adcs	r2, r2
    4ad8:	d2cd      	bcs.n	4a76 <__aeabi_uidiv+0x3a>
    4ada:	09c3      	lsrs	r3, r0, #7
    4adc:	428b      	cmp	r3, r1
    4ade:	d301      	bcc.n	4ae4 <__aeabi_uidiv+0xa8>
    4ae0:	01cb      	lsls	r3, r1, #7
    4ae2:	1ac0      	subs	r0, r0, r3
    4ae4:	4152      	adcs	r2, r2
    4ae6:	0983      	lsrs	r3, r0, #6
    4ae8:	428b      	cmp	r3, r1
    4aea:	d301      	bcc.n	4af0 <__aeabi_uidiv+0xb4>
    4aec:	018b      	lsls	r3, r1, #6
    4aee:	1ac0      	subs	r0, r0, r3
    4af0:	4152      	adcs	r2, r2
    4af2:	0943      	lsrs	r3, r0, #5
    4af4:	428b      	cmp	r3, r1
    4af6:	d301      	bcc.n	4afc <__aeabi_uidiv+0xc0>
    4af8:	014b      	lsls	r3, r1, #5
    4afa:	1ac0      	subs	r0, r0, r3
    4afc:	4152      	adcs	r2, r2
    4afe:	0903      	lsrs	r3, r0, #4
    4b00:	428b      	cmp	r3, r1
    4b02:	d301      	bcc.n	4b08 <__aeabi_uidiv+0xcc>
    4b04:	010b      	lsls	r3, r1, #4
    4b06:	1ac0      	subs	r0, r0, r3
    4b08:	4152      	adcs	r2, r2
    4b0a:	08c3      	lsrs	r3, r0, #3
    4b0c:	428b      	cmp	r3, r1
    4b0e:	d301      	bcc.n	4b14 <__aeabi_uidiv+0xd8>
    4b10:	00cb      	lsls	r3, r1, #3
    4b12:	1ac0      	subs	r0, r0, r3
    4b14:	4152      	adcs	r2, r2
    4b16:	0883      	lsrs	r3, r0, #2
    4b18:	428b      	cmp	r3, r1
    4b1a:	d301      	bcc.n	4b20 <__aeabi_uidiv+0xe4>
    4b1c:	008b      	lsls	r3, r1, #2
    4b1e:	1ac0      	subs	r0, r0, r3
    4b20:	4152      	adcs	r2, r2
    4b22:	0843      	lsrs	r3, r0, #1
    4b24:	428b      	cmp	r3, r1
    4b26:	d301      	bcc.n	4b2c <__aeabi_uidiv+0xf0>
    4b28:	004b      	lsls	r3, r1, #1
    4b2a:	1ac0      	subs	r0, r0, r3
    4b2c:	4152      	adcs	r2, r2
    4b2e:	1a41      	subs	r1, r0, r1
    4b30:	d200      	bcs.n	4b34 <__aeabi_uidiv+0xf8>
    4b32:	4601      	mov	r1, r0
    4b34:	4152      	adcs	r2, r2
    4b36:	4610      	mov	r0, r2
    4b38:	4770      	bx	lr
    4b3a:	e7ff      	b.n	4b3c <__aeabi_uidiv+0x100>
    4b3c:	b501      	push	{r0, lr}
    4b3e:	2000      	movs	r0, #0
    4b40:	f000 f806 	bl	4b50 <__aeabi_idiv0>
    4b44:	bd02      	pop	{r1, pc}
    4b46:	46c0      	nop			; (mov r8, r8)

00004b48 <__aeabi_uidivmod>:
    4b48:	2900      	cmp	r1, #0
    4b4a:	d0f7      	beq.n	4b3c <__aeabi_uidiv+0x100>
    4b4c:	e776      	b.n	4a3c <__aeabi_uidiv>
    4b4e:	4770      	bx	lr

00004b50 <__aeabi_idiv0>:
    4b50:	4770      	bx	lr
    4b52:	46c0      	nop			; (mov r8, r8)

00004b54 <__aeabi_cdrcmple>:
    4b54:	4684      	mov	ip, r0
    4b56:	1c10      	adds	r0, r2, #0
    4b58:	4662      	mov	r2, ip
    4b5a:	468c      	mov	ip, r1
    4b5c:	1c19      	adds	r1, r3, #0
    4b5e:	4663      	mov	r3, ip
    4b60:	e000      	b.n	4b64 <__aeabi_cdcmpeq>
    4b62:	46c0      	nop			; (mov r8, r8)

00004b64 <__aeabi_cdcmpeq>:
    4b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4b66:	f001 f983 	bl	5e70 <__ledf2>
    4b6a:	2800      	cmp	r0, #0
    4b6c:	d401      	bmi.n	4b72 <__aeabi_cdcmpeq+0xe>
    4b6e:	2100      	movs	r1, #0
    4b70:	42c8      	cmn	r0, r1
    4b72:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004b74 <__aeabi_dcmpeq>:
    4b74:	b510      	push	{r4, lr}
    4b76:	f001 f8d7 	bl	5d28 <__eqdf2>
    4b7a:	4240      	negs	r0, r0
    4b7c:	3001      	adds	r0, #1
    4b7e:	bd10      	pop	{r4, pc}

00004b80 <__aeabi_dcmplt>:
    4b80:	b510      	push	{r4, lr}
    4b82:	f001 f975 	bl	5e70 <__ledf2>
    4b86:	2800      	cmp	r0, #0
    4b88:	db01      	blt.n	4b8e <__aeabi_dcmplt+0xe>
    4b8a:	2000      	movs	r0, #0
    4b8c:	bd10      	pop	{r4, pc}
    4b8e:	2001      	movs	r0, #1
    4b90:	bd10      	pop	{r4, pc}
    4b92:	46c0      	nop			; (mov r8, r8)

00004b94 <__aeabi_dcmple>:
    4b94:	b510      	push	{r4, lr}
    4b96:	f001 f96b 	bl	5e70 <__ledf2>
    4b9a:	2800      	cmp	r0, #0
    4b9c:	dd01      	ble.n	4ba2 <__aeabi_dcmple+0xe>
    4b9e:	2000      	movs	r0, #0
    4ba0:	bd10      	pop	{r4, pc}
    4ba2:	2001      	movs	r0, #1
    4ba4:	bd10      	pop	{r4, pc}
    4ba6:	46c0      	nop			; (mov r8, r8)

00004ba8 <__aeabi_dcmpgt>:
    4ba8:	b510      	push	{r4, lr}
    4baa:	f001 f8fd 	bl	5da8 <__gedf2>
    4bae:	2800      	cmp	r0, #0
    4bb0:	dc01      	bgt.n	4bb6 <__aeabi_dcmpgt+0xe>
    4bb2:	2000      	movs	r0, #0
    4bb4:	bd10      	pop	{r4, pc}
    4bb6:	2001      	movs	r0, #1
    4bb8:	bd10      	pop	{r4, pc}
    4bba:	46c0      	nop			; (mov r8, r8)

00004bbc <__aeabi_dcmpge>:
    4bbc:	b510      	push	{r4, lr}
    4bbe:	f001 f8f3 	bl	5da8 <__gedf2>
    4bc2:	2800      	cmp	r0, #0
    4bc4:	da01      	bge.n	4bca <__aeabi_dcmpge+0xe>
    4bc6:	2000      	movs	r0, #0
    4bc8:	bd10      	pop	{r4, pc}
    4bca:	2001      	movs	r0, #1
    4bcc:	bd10      	pop	{r4, pc}
    4bce:	46c0      	nop			; (mov r8, r8)

00004bd0 <__aeabi_cfrcmple>:
    4bd0:	4684      	mov	ip, r0
    4bd2:	1c08      	adds	r0, r1, #0
    4bd4:	4661      	mov	r1, ip
    4bd6:	e7ff      	b.n	4bd8 <__aeabi_cfcmpeq>

00004bd8 <__aeabi_cfcmpeq>:
    4bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4bda:	f000 f8e9 	bl	4db0 <__lesf2>
    4bde:	2800      	cmp	r0, #0
    4be0:	d401      	bmi.n	4be6 <__aeabi_cfcmpeq+0xe>
    4be2:	2100      	movs	r1, #0
    4be4:	42c8      	cmn	r0, r1
    4be6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004be8 <__aeabi_fcmpeq>:
    4be8:	b510      	push	{r4, lr}
    4bea:	f000 f875 	bl	4cd8 <__eqsf2>
    4bee:	4240      	negs	r0, r0
    4bf0:	3001      	adds	r0, #1
    4bf2:	bd10      	pop	{r4, pc}

00004bf4 <__aeabi_fcmplt>:
    4bf4:	b510      	push	{r4, lr}
    4bf6:	f000 f8db 	bl	4db0 <__lesf2>
    4bfa:	2800      	cmp	r0, #0
    4bfc:	db01      	blt.n	4c02 <__aeabi_fcmplt+0xe>
    4bfe:	2000      	movs	r0, #0
    4c00:	bd10      	pop	{r4, pc}
    4c02:	2001      	movs	r0, #1
    4c04:	bd10      	pop	{r4, pc}
    4c06:	46c0      	nop			; (mov r8, r8)

00004c08 <__aeabi_fcmple>:
    4c08:	b510      	push	{r4, lr}
    4c0a:	f000 f8d1 	bl	4db0 <__lesf2>
    4c0e:	2800      	cmp	r0, #0
    4c10:	dd01      	ble.n	4c16 <__aeabi_fcmple+0xe>
    4c12:	2000      	movs	r0, #0
    4c14:	bd10      	pop	{r4, pc}
    4c16:	2001      	movs	r0, #1
    4c18:	bd10      	pop	{r4, pc}
    4c1a:	46c0      	nop			; (mov r8, r8)

00004c1c <__aeabi_fcmpgt>:
    4c1c:	b510      	push	{r4, lr}
    4c1e:	f000 f883 	bl	4d28 <__gesf2>
    4c22:	2800      	cmp	r0, #0
    4c24:	dc01      	bgt.n	4c2a <__aeabi_fcmpgt+0xe>
    4c26:	2000      	movs	r0, #0
    4c28:	bd10      	pop	{r4, pc}
    4c2a:	2001      	movs	r0, #1
    4c2c:	bd10      	pop	{r4, pc}
    4c2e:	46c0      	nop			; (mov r8, r8)

00004c30 <__aeabi_fcmpge>:
    4c30:	b510      	push	{r4, lr}
    4c32:	f000 f879 	bl	4d28 <__gesf2>
    4c36:	2800      	cmp	r0, #0
    4c38:	da01      	bge.n	4c3e <__aeabi_fcmpge+0xe>
    4c3a:	2000      	movs	r0, #0
    4c3c:	bd10      	pop	{r4, pc}
    4c3e:	2001      	movs	r0, #1
    4c40:	bd10      	pop	{r4, pc}
    4c42:	46c0      	nop			; (mov r8, r8)

00004c44 <__aeabi_lmul>:
    4c44:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c46:	464f      	mov	r7, r9
    4c48:	4646      	mov	r6, r8
    4c4a:	b4c0      	push	{r6, r7}
    4c4c:	0416      	lsls	r6, r2, #16
    4c4e:	0c36      	lsrs	r6, r6, #16
    4c50:	4699      	mov	r9, r3
    4c52:	0033      	movs	r3, r6
    4c54:	0405      	lsls	r5, r0, #16
    4c56:	0c2c      	lsrs	r4, r5, #16
    4c58:	0c07      	lsrs	r7, r0, #16
    4c5a:	0c15      	lsrs	r5, r2, #16
    4c5c:	4363      	muls	r3, r4
    4c5e:	437e      	muls	r6, r7
    4c60:	436f      	muls	r7, r5
    4c62:	4365      	muls	r5, r4
    4c64:	0c1c      	lsrs	r4, r3, #16
    4c66:	19ad      	adds	r5, r5, r6
    4c68:	1964      	adds	r4, r4, r5
    4c6a:	469c      	mov	ip, r3
    4c6c:	42a6      	cmp	r6, r4
    4c6e:	d903      	bls.n	4c78 <__aeabi_lmul+0x34>
    4c70:	2380      	movs	r3, #128	; 0x80
    4c72:	025b      	lsls	r3, r3, #9
    4c74:	4698      	mov	r8, r3
    4c76:	4447      	add	r7, r8
    4c78:	4663      	mov	r3, ip
    4c7a:	0c25      	lsrs	r5, r4, #16
    4c7c:	19ef      	adds	r7, r5, r7
    4c7e:	041d      	lsls	r5, r3, #16
    4c80:	464b      	mov	r3, r9
    4c82:	434a      	muls	r2, r1
    4c84:	4343      	muls	r3, r0
    4c86:	0c2d      	lsrs	r5, r5, #16
    4c88:	0424      	lsls	r4, r4, #16
    4c8a:	1964      	adds	r4, r4, r5
    4c8c:	1899      	adds	r1, r3, r2
    4c8e:	19c9      	adds	r1, r1, r7
    4c90:	0020      	movs	r0, r4
    4c92:	bc0c      	pop	{r2, r3}
    4c94:	4690      	mov	r8, r2
    4c96:	4699      	mov	r9, r3
    4c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c9a:	46c0      	nop			; (mov r8, r8)

00004c9c <__aeabi_d2uiz>:
    4c9c:	b570      	push	{r4, r5, r6, lr}
    4c9e:	2200      	movs	r2, #0
    4ca0:	4b0c      	ldr	r3, [pc, #48]	; (4cd4 <__aeabi_d2uiz+0x38>)
    4ca2:	0004      	movs	r4, r0
    4ca4:	000d      	movs	r5, r1
    4ca6:	f7ff ff89 	bl	4bbc <__aeabi_dcmpge>
    4caa:	2800      	cmp	r0, #0
    4cac:	d104      	bne.n	4cb8 <__aeabi_d2uiz+0x1c>
    4cae:	0020      	movs	r0, r4
    4cb0:	0029      	movs	r1, r5
    4cb2:	f001 ff35 	bl	6b20 <__aeabi_d2iz>
    4cb6:	bd70      	pop	{r4, r5, r6, pc}
    4cb8:	4b06      	ldr	r3, [pc, #24]	; (4cd4 <__aeabi_d2uiz+0x38>)
    4cba:	2200      	movs	r2, #0
    4cbc:	0020      	movs	r0, r4
    4cbe:	0029      	movs	r1, r5
    4cc0:	f001 fbba 	bl	6438 <__aeabi_dsub>
    4cc4:	f001 ff2c 	bl	6b20 <__aeabi_d2iz>
    4cc8:	2380      	movs	r3, #128	; 0x80
    4cca:	061b      	lsls	r3, r3, #24
    4ccc:	469c      	mov	ip, r3
    4cce:	4460      	add	r0, ip
    4cd0:	e7f1      	b.n	4cb6 <__aeabi_d2uiz+0x1a>
    4cd2:	46c0      	nop			; (mov r8, r8)
    4cd4:	41e00000 	.word	0x41e00000

00004cd8 <__eqsf2>:
    4cd8:	0243      	lsls	r3, r0, #9
    4cda:	b570      	push	{r4, r5, r6, lr}
    4cdc:	0042      	lsls	r2, r0, #1
    4cde:	004c      	lsls	r4, r1, #1
    4ce0:	0a5d      	lsrs	r5, r3, #9
    4ce2:	0fc3      	lsrs	r3, r0, #31
    4ce4:	0248      	lsls	r0, r1, #9
    4ce6:	0e12      	lsrs	r2, r2, #24
    4ce8:	0a46      	lsrs	r6, r0, #9
    4cea:	0e24      	lsrs	r4, r4, #24
    4cec:	0fc9      	lsrs	r1, r1, #31
    4cee:	2aff      	cmp	r2, #255	; 0xff
    4cf0:	d00f      	beq.n	4d12 <__eqsf2+0x3a>
    4cf2:	2cff      	cmp	r4, #255	; 0xff
    4cf4:	d011      	beq.n	4d1a <__eqsf2+0x42>
    4cf6:	2001      	movs	r0, #1
    4cf8:	42a2      	cmp	r2, r4
    4cfa:	d000      	beq.n	4cfe <__eqsf2+0x26>
    4cfc:	bd70      	pop	{r4, r5, r6, pc}
    4cfe:	42b5      	cmp	r5, r6
    4d00:	d1fc      	bne.n	4cfc <__eqsf2+0x24>
    4d02:	428b      	cmp	r3, r1
    4d04:	d00d      	beq.n	4d22 <__eqsf2+0x4a>
    4d06:	2a00      	cmp	r2, #0
    4d08:	d1f8      	bne.n	4cfc <__eqsf2+0x24>
    4d0a:	0028      	movs	r0, r5
    4d0c:	1e43      	subs	r3, r0, #1
    4d0e:	4198      	sbcs	r0, r3
    4d10:	e7f4      	b.n	4cfc <__eqsf2+0x24>
    4d12:	2001      	movs	r0, #1
    4d14:	2d00      	cmp	r5, #0
    4d16:	d1f1      	bne.n	4cfc <__eqsf2+0x24>
    4d18:	e7eb      	b.n	4cf2 <__eqsf2+0x1a>
    4d1a:	2001      	movs	r0, #1
    4d1c:	2e00      	cmp	r6, #0
    4d1e:	d1ed      	bne.n	4cfc <__eqsf2+0x24>
    4d20:	e7e9      	b.n	4cf6 <__eqsf2+0x1e>
    4d22:	2000      	movs	r0, #0
    4d24:	e7ea      	b.n	4cfc <__eqsf2+0x24>
    4d26:	46c0      	nop			; (mov r8, r8)

00004d28 <__gesf2>:
    4d28:	0243      	lsls	r3, r0, #9
    4d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d2c:	0042      	lsls	r2, r0, #1
    4d2e:	0a5d      	lsrs	r5, r3, #9
    4d30:	0fc3      	lsrs	r3, r0, #31
    4d32:	0248      	lsls	r0, r1, #9
    4d34:	0a44      	lsrs	r4, r0, #9
    4d36:	0048      	lsls	r0, r1, #1
    4d38:	0e12      	lsrs	r2, r2, #24
    4d3a:	0e00      	lsrs	r0, r0, #24
    4d3c:	0fc9      	lsrs	r1, r1, #31
    4d3e:	2aff      	cmp	r2, #255	; 0xff
    4d40:	d01f      	beq.n	4d82 <__gesf2+0x5a>
    4d42:	28ff      	cmp	r0, #255	; 0xff
    4d44:	d022      	beq.n	4d8c <__gesf2+0x64>
    4d46:	2a00      	cmp	r2, #0
    4d48:	d109      	bne.n	4d5e <__gesf2+0x36>
    4d4a:	426e      	negs	r6, r5
    4d4c:	416e      	adcs	r6, r5
    4d4e:	2800      	cmp	r0, #0
    4d50:	d10f      	bne.n	4d72 <__gesf2+0x4a>
    4d52:	2c00      	cmp	r4, #0
    4d54:	d10d      	bne.n	4d72 <__gesf2+0x4a>
    4d56:	2000      	movs	r0, #0
    4d58:	2d00      	cmp	r5, #0
    4d5a:	d009      	beq.n	4d70 <__gesf2+0x48>
    4d5c:	e005      	b.n	4d6a <__gesf2+0x42>
    4d5e:	2800      	cmp	r0, #0
    4d60:	d101      	bne.n	4d66 <__gesf2+0x3e>
    4d62:	2c00      	cmp	r4, #0
    4d64:	d001      	beq.n	4d6a <__gesf2+0x42>
    4d66:	428b      	cmp	r3, r1
    4d68:	d013      	beq.n	4d92 <__gesf2+0x6a>
    4d6a:	4258      	negs	r0, r3
    4d6c:	2301      	movs	r3, #1
    4d6e:	4318      	orrs	r0, r3
    4d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d72:	2e00      	cmp	r6, #0
    4d74:	d0f7      	beq.n	4d66 <__gesf2+0x3e>
    4d76:	4248      	negs	r0, r1
    4d78:	4141      	adcs	r1, r0
    4d7a:	2001      	movs	r0, #1
    4d7c:	4249      	negs	r1, r1
    4d7e:	4308      	orrs	r0, r1
    4d80:	e7f6      	b.n	4d70 <__gesf2+0x48>
    4d82:	2d00      	cmp	r5, #0
    4d84:	d0dd      	beq.n	4d42 <__gesf2+0x1a>
    4d86:	2002      	movs	r0, #2
    4d88:	4240      	negs	r0, r0
    4d8a:	e7f1      	b.n	4d70 <__gesf2+0x48>
    4d8c:	2c00      	cmp	r4, #0
    4d8e:	d0da      	beq.n	4d46 <__gesf2+0x1e>
    4d90:	e7f9      	b.n	4d86 <__gesf2+0x5e>
    4d92:	4282      	cmp	r2, r0
    4d94:	dce9      	bgt.n	4d6a <__gesf2+0x42>
    4d96:	db04      	blt.n	4da2 <__gesf2+0x7a>
    4d98:	42a5      	cmp	r5, r4
    4d9a:	d8e6      	bhi.n	4d6a <__gesf2+0x42>
    4d9c:	2000      	movs	r0, #0
    4d9e:	42a5      	cmp	r5, r4
    4da0:	d2e6      	bcs.n	4d70 <__gesf2+0x48>
    4da2:	4258      	negs	r0, r3
    4da4:	4143      	adcs	r3, r0
    4da6:	2001      	movs	r0, #1
    4da8:	425b      	negs	r3, r3
    4daa:	4318      	orrs	r0, r3
    4dac:	e7e0      	b.n	4d70 <__gesf2+0x48>
    4dae:	46c0      	nop			; (mov r8, r8)

00004db0 <__lesf2>:
    4db0:	0243      	lsls	r3, r0, #9
    4db2:	b5f0      	push	{r4, r5, r6, r7, lr}
    4db4:	0042      	lsls	r2, r0, #1
    4db6:	004c      	lsls	r4, r1, #1
    4db8:	0a5e      	lsrs	r6, r3, #9
    4dba:	0fc3      	lsrs	r3, r0, #31
    4dbc:	0248      	lsls	r0, r1, #9
    4dbe:	0e12      	lsrs	r2, r2, #24
    4dc0:	0a45      	lsrs	r5, r0, #9
    4dc2:	0e24      	lsrs	r4, r4, #24
    4dc4:	0fc9      	lsrs	r1, r1, #31
    4dc6:	2aff      	cmp	r2, #255	; 0xff
    4dc8:	d017      	beq.n	4dfa <__lesf2+0x4a>
    4dca:	2cff      	cmp	r4, #255	; 0xff
    4dcc:	d019      	beq.n	4e02 <__lesf2+0x52>
    4dce:	2a00      	cmp	r2, #0
    4dd0:	d10b      	bne.n	4dea <__lesf2+0x3a>
    4dd2:	4270      	negs	r0, r6
    4dd4:	4170      	adcs	r0, r6
    4dd6:	2c00      	cmp	r4, #0
    4dd8:	d017      	beq.n	4e0a <__lesf2+0x5a>
    4dda:	2800      	cmp	r0, #0
    4ddc:	d007      	beq.n	4dee <__lesf2+0x3e>
    4dde:	4248      	negs	r0, r1
    4de0:	4141      	adcs	r1, r0
    4de2:	2001      	movs	r0, #1
    4de4:	4249      	negs	r1, r1
    4de6:	4308      	orrs	r0, r1
    4de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4dea:	2c00      	cmp	r4, #0
    4dec:	d013      	beq.n	4e16 <__lesf2+0x66>
    4dee:	428b      	cmp	r3, r1
    4df0:	d014      	beq.n	4e1c <__lesf2+0x6c>
    4df2:	4258      	negs	r0, r3
    4df4:	2301      	movs	r3, #1
    4df6:	4318      	orrs	r0, r3
    4df8:	e7f6      	b.n	4de8 <__lesf2+0x38>
    4dfa:	2002      	movs	r0, #2
    4dfc:	2e00      	cmp	r6, #0
    4dfe:	d1f3      	bne.n	4de8 <__lesf2+0x38>
    4e00:	e7e3      	b.n	4dca <__lesf2+0x1a>
    4e02:	2002      	movs	r0, #2
    4e04:	2d00      	cmp	r5, #0
    4e06:	d1ef      	bne.n	4de8 <__lesf2+0x38>
    4e08:	e7e1      	b.n	4dce <__lesf2+0x1e>
    4e0a:	2d00      	cmp	r5, #0
    4e0c:	d1e5      	bne.n	4dda <__lesf2+0x2a>
    4e0e:	2000      	movs	r0, #0
    4e10:	2e00      	cmp	r6, #0
    4e12:	d0e9      	beq.n	4de8 <__lesf2+0x38>
    4e14:	e7ed      	b.n	4df2 <__lesf2+0x42>
    4e16:	2d00      	cmp	r5, #0
    4e18:	d1e9      	bne.n	4dee <__lesf2+0x3e>
    4e1a:	e7ea      	b.n	4df2 <__lesf2+0x42>
    4e1c:	42a2      	cmp	r2, r4
    4e1e:	dce8      	bgt.n	4df2 <__lesf2+0x42>
    4e20:	db04      	blt.n	4e2c <__lesf2+0x7c>
    4e22:	42ae      	cmp	r6, r5
    4e24:	d8e5      	bhi.n	4df2 <__lesf2+0x42>
    4e26:	2000      	movs	r0, #0
    4e28:	42ae      	cmp	r6, r5
    4e2a:	d2dd      	bcs.n	4de8 <__lesf2+0x38>
    4e2c:	4258      	negs	r0, r3
    4e2e:	4143      	adcs	r3, r0
    4e30:	2001      	movs	r0, #1
    4e32:	425b      	negs	r3, r3
    4e34:	4318      	orrs	r0, r3
    4e36:	e7d7      	b.n	4de8 <__lesf2+0x38>

00004e38 <__aeabi_fmul>:
    4e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e3a:	4657      	mov	r7, sl
    4e3c:	464e      	mov	r6, r9
    4e3e:	4645      	mov	r5, r8
    4e40:	0043      	lsls	r3, r0, #1
    4e42:	b4e0      	push	{r5, r6, r7}
    4e44:	0246      	lsls	r6, r0, #9
    4e46:	4688      	mov	r8, r1
    4e48:	0a76      	lsrs	r6, r6, #9
    4e4a:	0e1f      	lsrs	r7, r3, #24
    4e4c:	0fc4      	lsrs	r4, r0, #31
    4e4e:	2f00      	cmp	r7, #0
    4e50:	d047      	beq.n	4ee2 <__aeabi_fmul+0xaa>
    4e52:	2fff      	cmp	r7, #255	; 0xff
    4e54:	d025      	beq.n	4ea2 <__aeabi_fmul+0x6a>
    4e56:	2300      	movs	r3, #0
    4e58:	2580      	movs	r5, #128	; 0x80
    4e5a:	469a      	mov	sl, r3
    4e5c:	4699      	mov	r9, r3
    4e5e:	00f6      	lsls	r6, r6, #3
    4e60:	04ed      	lsls	r5, r5, #19
    4e62:	432e      	orrs	r6, r5
    4e64:	3f7f      	subs	r7, #127	; 0x7f
    4e66:	4643      	mov	r3, r8
    4e68:	4642      	mov	r2, r8
    4e6a:	025d      	lsls	r5, r3, #9
    4e6c:	0fd2      	lsrs	r2, r2, #31
    4e6e:	005b      	lsls	r3, r3, #1
    4e70:	0a6d      	lsrs	r5, r5, #9
    4e72:	0e1b      	lsrs	r3, r3, #24
    4e74:	4690      	mov	r8, r2
    4e76:	d040      	beq.n	4efa <__aeabi_fmul+0xc2>
    4e78:	2bff      	cmp	r3, #255	; 0xff
    4e7a:	d039      	beq.n	4ef0 <__aeabi_fmul+0xb8>
    4e7c:	2280      	movs	r2, #128	; 0x80
    4e7e:	2000      	movs	r0, #0
    4e80:	00ed      	lsls	r5, r5, #3
    4e82:	04d2      	lsls	r2, r2, #19
    4e84:	4315      	orrs	r5, r2
    4e86:	3b7f      	subs	r3, #127	; 0x7f
    4e88:	18fb      	adds	r3, r7, r3
    4e8a:	4642      	mov	r2, r8
    4e8c:	4657      	mov	r7, sl
    4e8e:	1c59      	adds	r1, r3, #1
    4e90:	4062      	eors	r2, r4
    4e92:	468c      	mov	ip, r1
    4e94:	4307      	orrs	r7, r0
    4e96:	2f0f      	cmp	r7, #15
    4e98:	d85c      	bhi.n	4f54 <__aeabi_fmul+0x11c>
    4e9a:	496f      	ldr	r1, [pc, #444]	; (5058 <__aeabi_fmul+0x220>)
    4e9c:	00bf      	lsls	r7, r7, #2
    4e9e:	59c9      	ldr	r1, [r1, r7]
    4ea0:	468f      	mov	pc, r1
    4ea2:	2e00      	cmp	r6, #0
    4ea4:	d145      	bne.n	4f32 <__aeabi_fmul+0xfa>
    4ea6:	2308      	movs	r3, #8
    4ea8:	469a      	mov	sl, r3
    4eaa:	3b06      	subs	r3, #6
    4eac:	4699      	mov	r9, r3
    4eae:	e7da      	b.n	4e66 <__aeabi_fmul+0x2e>
    4eb0:	4642      	mov	r2, r8
    4eb2:	2802      	cmp	r0, #2
    4eb4:	d02d      	beq.n	4f12 <__aeabi_fmul+0xda>
    4eb6:	2803      	cmp	r0, #3
    4eb8:	d100      	bne.n	4ebc <__aeabi_fmul+0x84>
    4eba:	e0c3      	b.n	5044 <__aeabi_fmul+0x20c>
    4ebc:	2801      	cmp	r0, #1
    4ebe:	d000      	beq.n	4ec2 <__aeabi_fmul+0x8a>
    4ec0:	e0a2      	b.n	5008 <__aeabi_fmul+0x1d0>
    4ec2:	2500      	movs	r5, #0
    4ec4:	2600      	movs	r6, #0
    4ec6:	4002      	ands	r2, r0
    4ec8:	b2d4      	uxtb	r4, r2
    4eca:	0276      	lsls	r6, r6, #9
    4ecc:	05ed      	lsls	r5, r5, #23
    4ece:	0a76      	lsrs	r6, r6, #9
    4ed0:	432e      	orrs	r6, r5
    4ed2:	07e4      	lsls	r4, r4, #31
    4ed4:	4326      	orrs	r6, r4
    4ed6:	0030      	movs	r0, r6
    4ed8:	bc1c      	pop	{r2, r3, r4}
    4eda:	4690      	mov	r8, r2
    4edc:	4699      	mov	r9, r3
    4ede:	46a2      	mov	sl, r4
    4ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ee2:	2e00      	cmp	r6, #0
    4ee4:	d11a      	bne.n	4f1c <__aeabi_fmul+0xe4>
    4ee6:	2304      	movs	r3, #4
    4ee8:	469a      	mov	sl, r3
    4eea:	3b03      	subs	r3, #3
    4eec:	4699      	mov	r9, r3
    4eee:	e7ba      	b.n	4e66 <__aeabi_fmul+0x2e>
    4ef0:	002a      	movs	r2, r5
    4ef2:	1e51      	subs	r1, r2, #1
    4ef4:	418a      	sbcs	r2, r1
    4ef6:	1c90      	adds	r0, r2, #2
    4ef8:	e7c6      	b.n	4e88 <__aeabi_fmul+0x50>
    4efa:	2001      	movs	r0, #1
    4efc:	2d00      	cmp	r5, #0
    4efe:	d0c3      	beq.n	4e88 <__aeabi_fmul+0x50>
    4f00:	0028      	movs	r0, r5
    4f02:	f001 ff9d 	bl	6e40 <__clzsi2>
    4f06:	1f43      	subs	r3, r0, #5
    4f08:	3076      	adds	r0, #118	; 0x76
    4f0a:	409d      	lsls	r5, r3
    4f0c:	4243      	negs	r3, r0
    4f0e:	2000      	movs	r0, #0
    4f10:	e7ba      	b.n	4e88 <__aeabi_fmul+0x50>
    4f12:	2401      	movs	r4, #1
    4f14:	25ff      	movs	r5, #255	; 0xff
    4f16:	4014      	ands	r4, r2
    4f18:	2600      	movs	r6, #0
    4f1a:	e7d6      	b.n	4eca <__aeabi_fmul+0x92>
    4f1c:	0030      	movs	r0, r6
    4f1e:	f001 ff8f 	bl	6e40 <__clzsi2>
    4f22:	1f43      	subs	r3, r0, #5
    4f24:	409e      	lsls	r6, r3
    4f26:	2300      	movs	r3, #0
    4f28:	3076      	adds	r0, #118	; 0x76
    4f2a:	4247      	negs	r7, r0
    4f2c:	469a      	mov	sl, r3
    4f2e:	4699      	mov	r9, r3
    4f30:	e799      	b.n	4e66 <__aeabi_fmul+0x2e>
    4f32:	230c      	movs	r3, #12
    4f34:	469a      	mov	sl, r3
    4f36:	3b09      	subs	r3, #9
    4f38:	4699      	mov	r9, r3
    4f3a:	e794      	b.n	4e66 <__aeabi_fmul+0x2e>
    4f3c:	2680      	movs	r6, #128	; 0x80
    4f3e:	2400      	movs	r4, #0
    4f40:	03f6      	lsls	r6, r6, #15
    4f42:	25ff      	movs	r5, #255	; 0xff
    4f44:	e7c1      	b.n	4eca <__aeabi_fmul+0x92>
    4f46:	0035      	movs	r5, r6
    4f48:	4648      	mov	r0, r9
    4f4a:	e7b2      	b.n	4eb2 <__aeabi_fmul+0x7a>
    4f4c:	0035      	movs	r5, r6
    4f4e:	0022      	movs	r2, r4
    4f50:	4648      	mov	r0, r9
    4f52:	e7ae      	b.n	4eb2 <__aeabi_fmul+0x7a>
    4f54:	0429      	lsls	r1, r5, #16
    4f56:	0c09      	lsrs	r1, r1, #16
    4f58:	0008      	movs	r0, r1
    4f5a:	0c37      	lsrs	r7, r6, #16
    4f5c:	0436      	lsls	r6, r6, #16
    4f5e:	0c36      	lsrs	r6, r6, #16
    4f60:	0c2c      	lsrs	r4, r5, #16
    4f62:	4379      	muls	r1, r7
    4f64:	4370      	muls	r0, r6
    4f66:	4367      	muls	r7, r4
    4f68:	4374      	muls	r4, r6
    4f6a:	0c06      	lsrs	r6, r0, #16
    4f6c:	1864      	adds	r4, r4, r1
    4f6e:	1936      	adds	r6, r6, r4
    4f70:	42b1      	cmp	r1, r6
    4f72:	d903      	bls.n	4f7c <__aeabi_fmul+0x144>
    4f74:	2180      	movs	r1, #128	; 0x80
    4f76:	0249      	lsls	r1, r1, #9
    4f78:	4688      	mov	r8, r1
    4f7a:	4447      	add	r7, r8
    4f7c:	0400      	lsls	r0, r0, #16
    4f7e:	0c00      	lsrs	r0, r0, #16
    4f80:	0431      	lsls	r1, r6, #16
    4f82:	1809      	adds	r1, r1, r0
    4f84:	018d      	lsls	r5, r1, #6
    4f86:	1e68      	subs	r0, r5, #1
    4f88:	4185      	sbcs	r5, r0
    4f8a:	0e89      	lsrs	r1, r1, #26
    4f8c:	4329      	orrs	r1, r5
    4f8e:	0c35      	lsrs	r5, r6, #16
    4f90:	19ed      	adds	r5, r5, r7
    4f92:	01ad      	lsls	r5, r5, #6
    4f94:	430d      	orrs	r5, r1
    4f96:	0129      	lsls	r1, r5, #4
    4f98:	d504      	bpl.n	4fa4 <__aeabi_fmul+0x16c>
    4f9a:	2301      	movs	r3, #1
    4f9c:	0869      	lsrs	r1, r5, #1
    4f9e:	401d      	ands	r5, r3
    4fa0:	4663      	mov	r3, ip
    4fa2:	430d      	orrs	r5, r1
    4fa4:	0019      	movs	r1, r3
    4fa6:	317f      	adds	r1, #127	; 0x7f
    4fa8:	2900      	cmp	r1, #0
    4faa:	dd25      	ble.n	4ff8 <__aeabi_fmul+0x1c0>
    4fac:	0768      	lsls	r0, r5, #29
    4fae:	d004      	beq.n	4fba <__aeabi_fmul+0x182>
    4fb0:	200f      	movs	r0, #15
    4fb2:	4028      	ands	r0, r5
    4fb4:	2804      	cmp	r0, #4
    4fb6:	d000      	beq.n	4fba <__aeabi_fmul+0x182>
    4fb8:	3504      	adds	r5, #4
    4fba:	0128      	lsls	r0, r5, #4
    4fbc:	d503      	bpl.n	4fc6 <__aeabi_fmul+0x18e>
    4fbe:	4927      	ldr	r1, [pc, #156]	; (505c <__aeabi_fmul+0x224>)
    4fc0:	3380      	adds	r3, #128	; 0x80
    4fc2:	400d      	ands	r5, r1
    4fc4:	0019      	movs	r1, r3
    4fc6:	29fe      	cmp	r1, #254	; 0xfe
    4fc8:	dca3      	bgt.n	4f12 <__aeabi_fmul+0xda>
    4fca:	2401      	movs	r4, #1
    4fcc:	01ad      	lsls	r5, r5, #6
    4fce:	0a6e      	lsrs	r6, r5, #9
    4fd0:	4014      	ands	r4, r2
    4fd2:	b2cd      	uxtb	r5, r1
    4fd4:	e779      	b.n	4eca <__aeabi_fmul+0x92>
    4fd6:	2080      	movs	r0, #128	; 0x80
    4fd8:	03c0      	lsls	r0, r0, #15
    4fda:	4206      	tst	r6, r0
    4fdc:	d007      	beq.n	4fee <__aeabi_fmul+0x1b6>
    4fde:	4205      	tst	r5, r0
    4fe0:	d105      	bne.n	4fee <__aeabi_fmul+0x1b6>
    4fe2:	4328      	orrs	r0, r5
    4fe4:	0246      	lsls	r6, r0, #9
    4fe6:	0a76      	lsrs	r6, r6, #9
    4fe8:	4644      	mov	r4, r8
    4fea:	25ff      	movs	r5, #255	; 0xff
    4fec:	e76d      	b.n	4eca <__aeabi_fmul+0x92>
    4fee:	4306      	orrs	r6, r0
    4ff0:	0276      	lsls	r6, r6, #9
    4ff2:	0a76      	lsrs	r6, r6, #9
    4ff4:	25ff      	movs	r5, #255	; 0xff
    4ff6:	e768      	b.n	4eca <__aeabi_fmul+0x92>
    4ff8:	2401      	movs	r4, #1
    4ffa:	1a61      	subs	r1, r4, r1
    4ffc:	291b      	cmp	r1, #27
    4ffe:	dd05      	ble.n	500c <__aeabi_fmul+0x1d4>
    5000:	4014      	ands	r4, r2
    5002:	2500      	movs	r5, #0
    5004:	2600      	movs	r6, #0
    5006:	e760      	b.n	4eca <__aeabi_fmul+0x92>
    5008:	4663      	mov	r3, ip
    500a:	e7cb      	b.n	4fa4 <__aeabi_fmul+0x16c>
    500c:	002e      	movs	r6, r5
    500e:	2320      	movs	r3, #32
    5010:	40ce      	lsrs	r6, r1
    5012:	1a59      	subs	r1, r3, r1
    5014:	408d      	lsls	r5, r1
    5016:	1e6b      	subs	r3, r5, #1
    5018:	419d      	sbcs	r5, r3
    501a:	432e      	orrs	r6, r5
    501c:	0773      	lsls	r3, r6, #29
    501e:	d004      	beq.n	502a <__aeabi_fmul+0x1f2>
    5020:	230f      	movs	r3, #15
    5022:	4033      	ands	r3, r6
    5024:	2b04      	cmp	r3, #4
    5026:	d000      	beq.n	502a <__aeabi_fmul+0x1f2>
    5028:	3604      	adds	r6, #4
    502a:	0173      	lsls	r3, r6, #5
    502c:	d504      	bpl.n	5038 <__aeabi_fmul+0x200>
    502e:	2401      	movs	r4, #1
    5030:	2501      	movs	r5, #1
    5032:	4014      	ands	r4, r2
    5034:	2600      	movs	r6, #0
    5036:	e748      	b.n	4eca <__aeabi_fmul+0x92>
    5038:	2401      	movs	r4, #1
    503a:	01b6      	lsls	r6, r6, #6
    503c:	0a76      	lsrs	r6, r6, #9
    503e:	4014      	ands	r4, r2
    5040:	2500      	movs	r5, #0
    5042:	e742      	b.n	4eca <__aeabi_fmul+0x92>
    5044:	2680      	movs	r6, #128	; 0x80
    5046:	2401      	movs	r4, #1
    5048:	03f6      	lsls	r6, r6, #15
    504a:	432e      	orrs	r6, r5
    504c:	0276      	lsls	r6, r6, #9
    504e:	0a76      	lsrs	r6, r6, #9
    5050:	4014      	ands	r4, r2
    5052:	25ff      	movs	r5, #255	; 0xff
    5054:	e739      	b.n	4eca <__aeabi_fmul+0x92>
    5056:	46c0      	nop			; (mov r8, r8)
    5058:	00006f10 	.word	0x00006f10
    505c:	f7ffffff 	.word	0xf7ffffff

00005060 <__aeabi_f2iz>:
    5060:	0243      	lsls	r3, r0, #9
    5062:	0a59      	lsrs	r1, r3, #9
    5064:	0043      	lsls	r3, r0, #1
    5066:	0fc2      	lsrs	r2, r0, #31
    5068:	0e1b      	lsrs	r3, r3, #24
    506a:	2000      	movs	r0, #0
    506c:	2b7e      	cmp	r3, #126	; 0x7e
    506e:	dd0e      	ble.n	508e <__aeabi_f2iz+0x2e>
    5070:	2b9d      	cmp	r3, #157	; 0x9d
    5072:	dc0d      	bgt.n	5090 <__aeabi_f2iz+0x30>
    5074:	2080      	movs	r0, #128	; 0x80
    5076:	0400      	lsls	r0, r0, #16
    5078:	4301      	orrs	r1, r0
    507a:	2b95      	cmp	r3, #149	; 0x95
    507c:	dc0b      	bgt.n	5096 <__aeabi_f2iz+0x36>
    507e:	2096      	movs	r0, #150	; 0x96
    5080:	1ac3      	subs	r3, r0, r3
    5082:	40d9      	lsrs	r1, r3
    5084:	000b      	movs	r3, r1
    5086:	4258      	negs	r0, r3
    5088:	2a00      	cmp	r2, #0
    508a:	d100      	bne.n	508e <__aeabi_f2iz+0x2e>
    508c:	0018      	movs	r0, r3
    508e:	4770      	bx	lr
    5090:	4b03      	ldr	r3, [pc, #12]	; (50a0 <__aeabi_f2iz+0x40>)
    5092:	18d0      	adds	r0, r2, r3
    5094:	e7fb      	b.n	508e <__aeabi_f2iz+0x2e>
    5096:	3b96      	subs	r3, #150	; 0x96
    5098:	4099      	lsls	r1, r3
    509a:	000b      	movs	r3, r1
    509c:	e7f3      	b.n	5086 <__aeabi_f2iz+0x26>
    509e:	46c0      	nop			; (mov r8, r8)
    50a0:	7fffffff 	.word	0x7fffffff

000050a4 <__aeabi_dadd>:
    50a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50a6:	4656      	mov	r6, sl
    50a8:	465f      	mov	r7, fp
    50aa:	464d      	mov	r5, r9
    50ac:	4644      	mov	r4, r8
    50ae:	b4f0      	push	{r4, r5, r6, r7}
    50b0:	000f      	movs	r7, r1
    50b2:	0ffd      	lsrs	r5, r7, #31
    50b4:	46aa      	mov	sl, r5
    50b6:	0309      	lsls	r1, r1, #12
    50b8:	007c      	lsls	r4, r7, #1
    50ba:	002e      	movs	r6, r5
    50bc:	005f      	lsls	r7, r3, #1
    50be:	0f45      	lsrs	r5, r0, #29
    50c0:	0a49      	lsrs	r1, r1, #9
    50c2:	0d7f      	lsrs	r7, r7, #21
    50c4:	4329      	orrs	r1, r5
    50c6:	00c5      	lsls	r5, r0, #3
    50c8:	0318      	lsls	r0, r3, #12
    50ca:	46bc      	mov	ip, r7
    50cc:	0a40      	lsrs	r0, r0, #9
    50ce:	0f57      	lsrs	r7, r2, #29
    50d0:	0d64      	lsrs	r4, r4, #21
    50d2:	0fdb      	lsrs	r3, r3, #31
    50d4:	4338      	orrs	r0, r7
    50d6:	00d2      	lsls	r2, r2, #3
    50d8:	459a      	cmp	sl, r3
    50da:	d100      	bne.n	50de <__aeabi_dadd+0x3a>
    50dc:	e0aa      	b.n	5234 <__aeabi_dadd+0x190>
    50de:	4666      	mov	r6, ip
    50e0:	1ba6      	subs	r6, r4, r6
    50e2:	2e00      	cmp	r6, #0
    50e4:	dc00      	bgt.n	50e8 <__aeabi_dadd+0x44>
    50e6:	e0ff      	b.n	52e8 <__aeabi_dadd+0x244>
    50e8:	4663      	mov	r3, ip
    50ea:	2b00      	cmp	r3, #0
    50ec:	d139      	bne.n	5162 <__aeabi_dadd+0xbe>
    50ee:	0003      	movs	r3, r0
    50f0:	4313      	orrs	r3, r2
    50f2:	d000      	beq.n	50f6 <__aeabi_dadd+0x52>
    50f4:	e0d9      	b.n	52aa <__aeabi_dadd+0x206>
    50f6:	076b      	lsls	r3, r5, #29
    50f8:	d009      	beq.n	510e <__aeabi_dadd+0x6a>
    50fa:	230f      	movs	r3, #15
    50fc:	402b      	ands	r3, r5
    50fe:	2b04      	cmp	r3, #4
    5100:	d005      	beq.n	510e <__aeabi_dadd+0x6a>
    5102:	1d2b      	adds	r3, r5, #4
    5104:	42ab      	cmp	r3, r5
    5106:	41ad      	sbcs	r5, r5
    5108:	426d      	negs	r5, r5
    510a:	1949      	adds	r1, r1, r5
    510c:	001d      	movs	r5, r3
    510e:	020b      	lsls	r3, r1, #8
    5110:	d400      	bmi.n	5114 <__aeabi_dadd+0x70>
    5112:	e082      	b.n	521a <__aeabi_dadd+0x176>
    5114:	4bca      	ldr	r3, [pc, #808]	; (5440 <__aeabi_dadd+0x39c>)
    5116:	3401      	adds	r4, #1
    5118:	429c      	cmp	r4, r3
    511a:	d100      	bne.n	511e <__aeabi_dadd+0x7a>
    511c:	e0fe      	b.n	531c <__aeabi_dadd+0x278>
    511e:	000a      	movs	r2, r1
    5120:	4656      	mov	r6, sl
    5122:	4bc8      	ldr	r3, [pc, #800]	; (5444 <__aeabi_dadd+0x3a0>)
    5124:	08ed      	lsrs	r5, r5, #3
    5126:	401a      	ands	r2, r3
    5128:	0750      	lsls	r0, r2, #29
    512a:	0564      	lsls	r4, r4, #21
    512c:	0252      	lsls	r2, r2, #9
    512e:	4305      	orrs	r5, r0
    5130:	0b12      	lsrs	r2, r2, #12
    5132:	0d64      	lsrs	r4, r4, #21
    5134:	2100      	movs	r1, #0
    5136:	0312      	lsls	r2, r2, #12
    5138:	0d0b      	lsrs	r3, r1, #20
    513a:	051b      	lsls	r3, r3, #20
    513c:	0564      	lsls	r4, r4, #21
    513e:	0b12      	lsrs	r2, r2, #12
    5140:	431a      	orrs	r2, r3
    5142:	0863      	lsrs	r3, r4, #1
    5144:	4cc0      	ldr	r4, [pc, #768]	; (5448 <__aeabi_dadd+0x3a4>)
    5146:	07f6      	lsls	r6, r6, #31
    5148:	4014      	ands	r4, r2
    514a:	431c      	orrs	r4, r3
    514c:	0064      	lsls	r4, r4, #1
    514e:	0864      	lsrs	r4, r4, #1
    5150:	4334      	orrs	r4, r6
    5152:	0028      	movs	r0, r5
    5154:	0021      	movs	r1, r4
    5156:	bc3c      	pop	{r2, r3, r4, r5}
    5158:	4690      	mov	r8, r2
    515a:	4699      	mov	r9, r3
    515c:	46a2      	mov	sl, r4
    515e:	46ab      	mov	fp, r5
    5160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5162:	4bb7      	ldr	r3, [pc, #732]	; (5440 <__aeabi_dadd+0x39c>)
    5164:	429c      	cmp	r4, r3
    5166:	d0c6      	beq.n	50f6 <__aeabi_dadd+0x52>
    5168:	2380      	movs	r3, #128	; 0x80
    516a:	041b      	lsls	r3, r3, #16
    516c:	4318      	orrs	r0, r3
    516e:	2e38      	cmp	r6, #56	; 0x38
    5170:	dd00      	ble.n	5174 <__aeabi_dadd+0xd0>
    5172:	e0eb      	b.n	534c <__aeabi_dadd+0x2a8>
    5174:	2e1f      	cmp	r6, #31
    5176:	dd00      	ble.n	517a <__aeabi_dadd+0xd6>
    5178:	e11e      	b.n	53b8 <__aeabi_dadd+0x314>
    517a:	2320      	movs	r3, #32
    517c:	1b9b      	subs	r3, r3, r6
    517e:	469c      	mov	ip, r3
    5180:	0003      	movs	r3, r0
    5182:	4667      	mov	r7, ip
    5184:	40bb      	lsls	r3, r7
    5186:	4698      	mov	r8, r3
    5188:	0013      	movs	r3, r2
    518a:	4647      	mov	r7, r8
    518c:	40f3      	lsrs	r3, r6
    518e:	433b      	orrs	r3, r7
    5190:	4667      	mov	r7, ip
    5192:	40ba      	lsls	r2, r7
    5194:	1e57      	subs	r7, r2, #1
    5196:	41ba      	sbcs	r2, r7
    5198:	4313      	orrs	r3, r2
    519a:	0002      	movs	r2, r0
    519c:	40f2      	lsrs	r2, r6
    519e:	1aeb      	subs	r3, r5, r3
    51a0:	429d      	cmp	r5, r3
    51a2:	41b6      	sbcs	r6, r6
    51a4:	001d      	movs	r5, r3
    51a6:	1a8a      	subs	r2, r1, r2
    51a8:	4276      	negs	r6, r6
    51aa:	1b91      	subs	r1, r2, r6
    51ac:	020b      	lsls	r3, r1, #8
    51ae:	d531      	bpl.n	5214 <__aeabi_dadd+0x170>
    51b0:	024a      	lsls	r2, r1, #9
    51b2:	0a56      	lsrs	r6, r2, #9
    51b4:	2e00      	cmp	r6, #0
    51b6:	d100      	bne.n	51ba <__aeabi_dadd+0x116>
    51b8:	e0b4      	b.n	5324 <__aeabi_dadd+0x280>
    51ba:	0030      	movs	r0, r6
    51bc:	f001 fe40 	bl	6e40 <__clzsi2>
    51c0:	0003      	movs	r3, r0
    51c2:	3b08      	subs	r3, #8
    51c4:	2b1f      	cmp	r3, #31
    51c6:	dd00      	ble.n	51ca <__aeabi_dadd+0x126>
    51c8:	e0b5      	b.n	5336 <__aeabi_dadd+0x292>
    51ca:	2220      	movs	r2, #32
    51cc:	0029      	movs	r1, r5
    51ce:	1ad2      	subs	r2, r2, r3
    51d0:	40d1      	lsrs	r1, r2
    51d2:	409e      	lsls	r6, r3
    51d4:	000a      	movs	r2, r1
    51d6:	409d      	lsls	r5, r3
    51d8:	4332      	orrs	r2, r6
    51da:	429c      	cmp	r4, r3
    51dc:	dd00      	ble.n	51e0 <__aeabi_dadd+0x13c>
    51de:	e0b1      	b.n	5344 <__aeabi_dadd+0x2a0>
    51e0:	1b1c      	subs	r4, r3, r4
    51e2:	1c63      	adds	r3, r4, #1
    51e4:	2b1f      	cmp	r3, #31
    51e6:	dd00      	ble.n	51ea <__aeabi_dadd+0x146>
    51e8:	e0d5      	b.n	5396 <__aeabi_dadd+0x2f2>
    51ea:	2120      	movs	r1, #32
    51ec:	0014      	movs	r4, r2
    51ee:	0028      	movs	r0, r5
    51f0:	1ac9      	subs	r1, r1, r3
    51f2:	408c      	lsls	r4, r1
    51f4:	40d8      	lsrs	r0, r3
    51f6:	408d      	lsls	r5, r1
    51f8:	4304      	orrs	r4, r0
    51fa:	40da      	lsrs	r2, r3
    51fc:	1e68      	subs	r0, r5, #1
    51fe:	4185      	sbcs	r5, r0
    5200:	0011      	movs	r1, r2
    5202:	4325      	orrs	r5, r4
    5204:	2400      	movs	r4, #0
    5206:	e776      	b.n	50f6 <__aeabi_dadd+0x52>
    5208:	4641      	mov	r1, r8
    520a:	4331      	orrs	r1, r6
    520c:	d100      	bne.n	5210 <__aeabi_dadd+0x16c>
    520e:	e234      	b.n	567a <__aeabi_dadd+0x5d6>
    5210:	0031      	movs	r1, r6
    5212:	4645      	mov	r5, r8
    5214:	076b      	lsls	r3, r5, #29
    5216:	d000      	beq.n	521a <__aeabi_dadd+0x176>
    5218:	e76f      	b.n	50fa <__aeabi_dadd+0x56>
    521a:	4656      	mov	r6, sl
    521c:	0748      	lsls	r0, r1, #29
    521e:	08ed      	lsrs	r5, r5, #3
    5220:	08c9      	lsrs	r1, r1, #3
    5222:	4305      	orrs	r5, r0
    5224:	4b86      	ldr	r3, [pc, #536]	; (5440 <__aeabi_dadd+0x39c>)
    5226:	429c      	cmp	r4, r3
    5228:	d035      	beq.n	5296 <__aeabi_dadd+0x1f2>
    522a:	030a      	lsls	r2, r1, #12
    522c:	0564      	lsls	r4, r4, #21
    522e:	0b12      	lsrs	r2, r2, #12
    5230:	0d64      	lsrs	r4, r4, #21
    5232:	e77f      	b.n	5134 <__aeabi_dadd+0x90>
    5234:	4663      	mov	r3, ip
    5236:	1ae3      	subs	r3, r4, r3
    5238:	469b      	mov	fp, r3
    523a:	2b00      	cmp	r3, #0
    523c:	dc00      	bgt.n	5240 <__aeabi_dadd+0x19c>
    523e:	e08b      	b.n	5358 <__aeabi_dadd+0x2b4>
    5240:	4667      	mov	r7, ip
    5242:	2f00      	cmp	r7, #0
    5244:	d03c      	beq.n	52c0 <__aeabi_dadd+0x21c>
    5246:	4f7e      	ldr	r7, [pc, #504]	; (5440 <__aeabi_dadd+0x39c>)
    5248:	42bc      	cmp	r4, r7
    524a:	d100      	bne.n	524e <__aeabi_dadd+0x1aa>
    524c:	e753      	b.n	50f6 <__aeabi_dadd+0x52>
    524e:	2780      	movs	r7, #128	; 0x80
    5250:	043f      	lsls	r7, r7, #16
    5252:	4338      	orrs	r0, r7
    5254:	465b      	mov	r3, fp
    5256:	2b38      	cmp	r3, #56	; 0x38
    5258:	dc00      	bgt.n	525c <__aeabi_dadd+0x1b8>
    525a:	e0f7      	b.n	544c <__aeabi_dadd+0x3a8>
    525c:	4302      	orrs	r2, r0
    525e:	1e50      	subs	r0, r2, #1
    5260:	4182      	sbcs	r2, r0
    5262:	2000      	movs	r0, #0
    5264:	b2d2      	uxtb	r2, r2
    5266:	1953      	adds	r3, r2, r5
    5268:	1842      	adds	r2, r0, r1
    526a:	42ab      	cmp	r3, r5
    526c:	4189      	sbcs	r1, r1
    526e:	001d      	movs	r5, r3
    5270:	4249      	negs	r1, r1
    5272:	1889      	adds	r1, r1, r2
    5274:	020b      	lsls	r3, r1, #8
    5276:	d5cd      	bpl.n	5214 <__aeabi_dadd+0x170>
    5278:	4b71      	ldr	r3, [pc, #452]	; (5440 <__aeabi_dadd+0x39c>)
    527a:	3401      	adds	r4, #1
    527c:	429c      	cmp	r4, r3
    527e:	d100      	bne.n	5282 <__aeabi_dadd+0x1de>
    5280:	e13d      	b.n	54fe <__aeabi_dadd+0x45a>
    5282:	2001      	movs	r0, #1
    5284:	4a6f      	ldr	r2, [pc, #444]	; (5444 <__aeabi_dadd+0x3a0>)
    5286:	086b      	lsrs	r3, r5, #1
    5288:	400a      	ands	r2, r1
    528a:	4028      	ands	r0, r5
    528c:	4318      	orrs	r0, r3
    528e:	07d5      	lsls	r5, r2, #31
    5290:	4305      	orrs	r5, r0
    5292:	0851      	lsrs	r1, r2, #1
    5294:	e72f      	b.n	50f6 <__aeabi_dadd+0x52>
    5296:	002b      	movs	r3, r5
    5298:	430b      	orrs	r3, r1
    529a:	d100      	bne.n	529e <__aeabi_dadd+0x1fa>
    529c:	e1cb      	b.n	5636 <__aeabi_dadd+0x592>
    529e:	2380      	movs	r3, #128	; 0x80
    52a0:	031b      	lsls	r3, r3, #12
    52a2:	430b      	orrs	r3, r1
    52a4:	031a      	lsls	r2, r3, #12
    52a6:	0b12      	lsrs	r2, r2, #12
    52a8:	e744      	b.n	5134 <__aeabi_dadd+0x90>
    52aa:	3e01      	subs	r6, #1
    52ac:	2e00      	cmp	r6, #0
    52ae:	d16d      	bne.n	538c <__aeabi_dadd+0x2e8>
    52b0:	1aae      	subs	r6, r5, r2
    52b2:	42b5      	cmp	r5, r6
    52b4:	419b      	sbcs	r3, r3
    52b6:	1a09      	subs	r1, r1, r0
    52b8:	425b      	negs	r3, r3
    52ba:	1ac9      	subs	r1, r1, r3
    52bc:	0035      	movs	r5, r6
    52be:	e775      	b.n	51ac <__aeabi_dadd+0x108>
    52c0:	0007      	movs	r7, r0
    52c2:	4317      	orrs	r7, r2
    52c4:	d100      	bne.n	52c8 <__aeabi_dadd+0x224>
    52c6:	e716      	b.n	50f6 <__aeabi_dadd+0x52>
    52c8:	2301      	movs	r3, #1
    52ca:	425b      	negs	r3, r3
    52cc:	469c      	mov	ip, r3
    52ce:	44e3      	add	fp, ip
    52d0:	465b      	mov	r3, fp
    52d2:	2b00      	cmp	r3, #0
    52d4:	d000      	beq.n	52d8 <__aeabi_dadd+0x234>
    52d6:	e0e0      	b.n	549a <__aeabi_dadd+0x3f6>
    52d8:	18aa      	adds	r2, r5, r2
    52da:	42aa      	cmp	r2, r5
    52dc:	419b      	sbcs	r3, r3
    52de:	1809      	adds	r1, r1, r0
    52e0:	425b      	negs	r3, r3
    52e2:	1859      	adds	r1, r3, r1
    52e4:	0015      	movs	r5, r2
    52e6:	e7c5      	b.n	5274 <__aeabi_dadd+0x1d0>
    52e8:	2e00      	cmp	r6, #0
    52ea:	d175      	bne.n	53d8 <__aeabi_dadd+0x334>
    52ec:	1c66      	adds	r6, r4, #1
    52ee:	0576      	lsls	r6, r6, #21
    52f0:	0d76      	lsrs	r6, r6, #21
    52f2:	2e01      	cmp	r6, #1
    52f4:	dc00      	bgt.n	52f8 <__aeabi_dadd+0x254>
    52f6:	e0f3      	b.n	54e0 <__aeabi_dadd+0x43c>
    52f8:	1aae      	subs	r6, r5, r2
    52fa:	46b0      	mov	r8, r6
    52fc:	4545      	cmp	r5, r8
    52fe:	41bf      	sbcs	r7, r7
    5300:	1a0e      	subs	r6, r1, r0
    5302:	427f      	negs	r7, r7
    5304:	1bf6      	subs	r6, r6, r7
    5306:	0237      	lsls	r7, r6, #8
    5308:	d400      	bmi.n	530c <__aeabi_dadd+0x268>
    530a:	e08f      	b.n	542c <__aeabi_dadd+0x388>
    530c:	1b55      	subs	r5, r2, r5
    530e:	42aa      	cmp	r2, r5
    5310:	41b6      	sbcs	r6, r6
    5312:	1a41      	subs	r1, r0, r1
    5314:	4276      	negs	r6, r6
    5316:	1b8e      	subs	r6, r1, r6
    5318:	469a      	mov	sl, r3
    531a:	e74b      	b.n	51b4 <__aeabi_dadd+0x110>
    531c:	4656      	mov	r6, sl
    531e:	2200      	movs	r2, #0
    5320:	2500      	movs	r5, #0
    5322:	e707      	b.n	5134 <__aeabi_dadd+0x90>
    5324:	0028      	movs	r0, r5
    5326:	f001 fd8b 	bl	6e40 <__clzsi2>
    532a:	3020      	adds	r0, #32
    532c:	0003      	movs	r3, r0
    532e:	3b08      	subs	r3, #8
    5330:	2b1f      	cmp	r3, #31
    5332:	dc00      	bgt.n	5336 <__aeabi_dadd+0x292>
    5334:	e749      	b.n	51ca <__aeabi_dadd+0x126>
    5336:	002a      	movs	r2, r5
    5338:	3828      	subs	r0, #40	; 0x28
    533a:	4082      	lsls	r2, r0
    533c:	2500      	movs	r5, #0
    533e:	429c      	cmp	r4, r3
    5340:	dc00      	bgt.n	5344 <__aeabi_dadd+0x2a0>
    5342:	e74d      	b.n	51e0 <__aeabi_dadd+0x13c>
    5344:	493f      	ldr	r1, [pc, #252]	; (5444 <__aeabi_dadd+0x3a0>)
    5346:	1ae4      	subs	r4, r4, r3
    5348:	4011      	ands	r1, r2
    534a:	e6d4      	b.n	50f6 <__aeabi_dadd+0x52>
    534c:	4302      	orrs	r2, r0
    534e:	1e50      	subs	r0, r2, #1
    5350:	4182      	sbcs	r2, r0
    5352:	b2d3      	uxtb	r3, r2
    5354:	2200      	movs	r2, #0
    5356:	e722      	b.n	519e <__aeabi_dadd+0xfa>
    5358:	2b00      	cmp	r3, #0
    535a:	d000      	beq.n	535e <__aeabi_dadd+0x2ba>
    535c:	e0f3      	b.n	5546 <__aeabi_dadd+0x4a2>
    535e:	1c63      	adds	r3, r4, #1
    5360:	469c      	mov	ip, r3
    5362:	055b      	lsls	r3, r3, #21
    5364:	0d5b      	lsrs	r3, r3, #21
    5366:	2b01      	cmp	r3, #1
    5368:	dc00      	bgt.n	536c <__aeabi_dadd+0x2c8>
    536a:	e09f      	b.n	54ac <__aeabi_dadd+0x408>
    536c:	4b34      	ldr	r3, [pc, #208]	; (5440 <__aeabi_dadd+0x39c>)
    536e:	459c      	cmp	ip, r3
    5370:	d100      	bne.n	5374 <__aeabi_dadd+0x2d0>
    5372:	e0c3      	b.n	54fc <__aeabi_dadd+0x458>
    5374:	18aa      	adds	r2, r5, r2
    5376:	1809      	adds	r1, r1, r0
    5378:	42aa      	cmp	r2, r5
    537a:	4180      	sbcs	r0, r0
    537c:	4240      	negs	r0, r0
    537e:	1841      	adds	r1, r0, r1
    5380:	07cd      	lsls	r5, r1, #31
    5382:	0852      	lsrs	r2, r2, #1
    5384:	4315      	orrs	r5, r2
    5386:	0849      	lsrs	r1, r1, #1
    5388:	4664      	mov	r4, ip
    538a:	e6b4      	b.n	50f6 <__aeabi_dadd+0x52>
    538c:	4b2c      	ldr	r3, [pc, #176]	; (5440 <__aeabi_dadd+0x39c>)
    538e:	429c      	cmp	r4, r3
    5390:	d000      	beq.n	5394 <__aeabi_dadd+0x2f0>
    5392:	e6ec      	b.n	516e <__aeabi_dadd+0xca>
    5394:	e6af      	b.n	50f6 <__aeabi_dadd+0x52>
    5396:	0011      	movs	r1, r2
    5398:	3c1f      	subs	r4, #31
    539a:	40e1      	lsrs	r1, r4
    539c:	000c      	movs	r4, r1
    539e:	2b20      	cmp	r3, #32
    53a0:	d100      	bne.n	53a4 <__aeabi_dadd+0x300>
    53a2:	e07f      	b.n	54a4 <__aeabi_dadd+0x400>
    53a4:	2140      	movs	r1, #64	; 0x40
    53a6:	1acb      	subs	r3, r1, r3
    53a8:	409a      	lsls	r2, r3
    53aa:	4315      	orrs	r5, r2
    53ac:	1e6a      	subs	r2, r5, #1
    53ae:	4195      	sbcs	r5, r2
    53b0:	2100      	movs	r1, #0
    53b2:	4325      	orrs	r5, r4
    53b4:	2400      	movs	r4, #0
    53b6:	e72d      	b.n	5214 <__aeabi_dadd+0x170>
    53b8:	0033      	movs	r3, r6
    53ba:	0007      	movs	r7, r0
    53bc:	3b20      	subs	r3, #32
    53be:	40df      	lsrs	r7, r3
    53c0:	003b      	movs	r3, r7
    53c2:	2e20      	cmp	r6, #32
    53c4:	d070      	beq.n	54a8 <__aeabi_dadd+0x404>
    53c6:	2740      	movs	r7, #64	; 0x40
    53c8:	1bbe      	subs	r6, r7, r6
    53ca:	40b0      	lsls	r0, r6
    53cc:	4302      	orrs	r2, r0
    53ce:	1e50      	subs	r0, r2, #1
    53d0:	4182      	sbcs	r2, r0
    53d2:	4313      	orrs	r3, r2
    53d4:	2200      	movs	r2, #0
    53d6:	e6e2      	b.n	519e <__aeabi_dadd+0xfa>
    53d8:	2c00      	cmp	r4, #0
    53da:	d04f      	beq.n	547c <__aeabi_dadd+0x3d8>
    53dc:	4c18      	ldr	r4, [pc, #96]	; (5440 <__aeabi_dadd+0x39c>)
    53de:	45a4      	cmp	ip, r4
    53e0:	d100      	bne.n	53e4 <__aeabi_dadd+0x340>
    53e2:	e0ab      	b.n	553c <__aeabi_dadd+0x498>
    53e4:	2480      	movs	r4, #128	; 0x80
    53e6:	0424      	lsls	r4, r4, #16
    53e8:	4276      	negs	r6, r6
    53ea:	4321      	orrs	r1, r4
    53ec:	2e38      	cmp	r6, #56	; 0x38
    53ee:	dd00      	ble.n	53f2 <__aeabi_dadd+0x34e>
    53f0:	e0df      	b.n	55b2 <__aeabi_dadd+0x50e>
    53f2:	2e1f      	cmp	r6, #31
    53f4:	dd00      	ble.n	53f8 <__aeabi_dadd+0x354>
    53f6:	e143      	b.n	5680 <__aeabi_dadd+0x5dc>
    53f8:	2720      	movs	r7, #32
    53fa:	1bbc      	subs	r4, r7, r6
    53fc:	46a1      	mov	r9, r4
    53fe:	000c      	movs	r4, r1
    5400:	464f      	mov	r7, r9
    5402:	40bc      	lsls	r4, r7
    5404:	46a0      	mov	r8, r4
    5406:	002c      	movs	r4, r5
    5408:	4647      	mov	r7, r8
    540a:	40f4      	lsrs	r4, r6
    540c:	433c      	orrs	r4, r7
    540e:	464f      	mov	r7, r9
    5410:	40bd      	lsls	r5, r7
    5412:	1e6f      	subs	r7, r5, #1
    5414:	41bd      	sbcs	r5, r7
    5416:	40f1      	lsrs	r1, r6
    5418:	432c      	orrs	r4, r5
    541a:	1b15      	subs	r5, r2, r4
    541c:	42aa      	cmp	r2, r5
    541e:	4192      	sbcs	r2, r2
    5420:	1a41      	subs	r1, r0, r1
    5422:	4252      	negs	r2, r2
    5424:	1a89      	subs	r1, r1, r2
    5426:	4664      	mov	r4, ip
    5428:	469a      	mov	sl, r3
    542a:	e6bf      	b.n	51ac <__aeabi_dadd+0x108>
    542c:	4641      	mov	r1, r8
    542e:	4645      	mov	r5, r8
    5430:	4331      	orrs	r1, r6
    5432:	d000      	beq.n	5436 <__aeabi_dadd+0x392>
    5434:	e6be      	b.n	51b4 <__aeabi_dadd+0x110>
    5436:	2600      	movs	r6, #0
    5438:	2400      	movs	r4, #0
    543a:	2500      	movs	r5, #0
    543c:	e6f2      	b.n	5224 <__aeabi_dadd+0x180>
    543e:	46c0      	nop			; (mov r8, r8)
    5440:	000007ff 	.word	0x000007ff
    5444:	ff7fffff 	.word	0xff7fffff
    5448:	800fffff 	.word	0x800fffff
    544c:	2b1f      	cmp	r3, #31
    544e:	dc59      	bgt.n	5504 <__aeabi_dadd+0x460>
    5450:	2720      	movs	r7, #32
    5452:	1aff      	subs	r7, r7, r3
    5454:	46bc      	mov	ip, r7
    5456:	0007      	movs	r7, r0
    5458:	4663      	mov	r3, ip
    545a:	409f      	lsls	r7, r3
    545c:	465b      	mov	r3, fp
    545e:	46b9      	mov	r9, r7
    5460:	0017      	movs	r7, r2
    5462:	40df      	lsrs	r7, r3
    5464:	46b8      	mov	r8, r7
    5466:	464f      	mov	r7, r9
    5468:	4643      	mov	r3, r8
    546a:	431f      	orrs	r7, r3
    546c:	4663      	mov	r3, ip
    546e:	409a      	lsls	r2, r3
    5470:	1e53      	subs	r3, r2, #1
    5472:	419a      	sbcs	r2, r3
    5474:	465b      	mov	r3, fp
    5476:	433a      	orrs	r2, r7
    5478:	40d8      	lsrs	r0, r3
    547a:	e6f4      	b.n	5266 <__aeabi_dadd+0x1c2>
    547c:	000c      	movs	r4, r1
    547e:	432c      	orrs	r4, r5
    5480:	d05c      	beq.n	553c <__aeabi_dadd+0x498>
    5482:	43f6      	mvns	r6, r6
    5484:	2e00      	cmp	r6, #0
    5486:	d155      	bne.n	5534 <__aeabi_dadd+0x490>
    5488:	1b55      	subs	r5, r2, r5
    548a:	42aa      	cmp	r2, r5
    548c:	41a4      	sbcs	r4, r4
    548e:	1a41      	subs	r1, r0, r1
    5490:	4264      	negs	r4, r4
    5492:	1b09      	subs	r1, r1, r4
    5494:	469a      	mov	sl, r3
    5496:	4664      	mov	r4, ip
    5498:	e688      	b.n	51ac <__aeabi_dadd+0x108>
    549a:	4f96      	ldr	r7, [pc, #600]	; (56f4 <__aeabi_dadd+0x650>)
    549c:	42bc      	cmp	r4, r7
    549e:	d000      	beq.n	54a2 <__aeabi_dadd+0x3fe>
    54a0:	e6d8      	b.n	5254 <__aeabi_dadd+0x1b0>
    54a2:	e628      	b.n	50f6 <__aeabi_dadd+0x52>
    54a4:	2200      	movs	r2, #0
    54a6:	e780      	b.n	53aa <__aeabi_dadd+0x306>
    54a8:	2000      	movs	r0, #0
    54aa:	e78f      	b.n	53cc <__aeabi_dadd+0x328>
    54ac:	000b      	movs	r3, r1
    54ae:	432b      	orrs	r3, r5
    54b0:	2c00      	cmp	r4, #0
    54b2:	d000      	beq.n	54b6 <__aeabi_dadd+0x412>
    54b4:	e0c2      	b.n	563c <__aeabi_dadd+0x598>
    54b6:	2b00      	cmp	r3, #0
    54b8:	d100      	bne.n	54bc <__aeabi_dadd+0x418>
    54ba:	e101      	b.n	56c0 <__aeabi_dadd+0x61c>
    54bc:	0003      	movs	r3, r0
    54be:	4313      	orrs	r3, r2
    54c0:	d100      	bne.n	54c4 <__aeabi_dadd+0x420>
    54c2:	e618      	b.n	50f6 <__aeabi_dadd+0x52>
    54c4:	18ab      	adds	r3, r5, r2
    54c6:	42ab      	cmp	r3, r5
    54c8:	41b6      	sbcs	r6, r6
    54ca:	1809      	adds	r1, r1, r0
    54cc:	4276      	negs	r6, r6
    54ce:	1871      	adds	r1, r6, r1
    54d0:	020a      	lsls	r2, r1, #8
    54d2:	d400      	bmi.n	54d6 <__aeabi_dadd+0x432>
    54d4:	e109      	b.n	56ea <__aeabi_dadd+0x646>
    54d6:	4a88      	ldr	r2, [pc, #544]	; (56f8 <__aeabi_dadd+0x654>)
    54d8:	001d      	movs	r5, r3
    54da:	4011      	ands	r1, r2
    54dc:	4664      	mov	r4, ip
    54de:	e60a      	b.n	50f6 <__aeabi_dadd+0x52>
    54e0:	2c00      	cmp	r4, #0
    54e2:	d15b      	bne.n	559c <__aeabi_dadd+0x4f8>
    54e4:	000e      	movs	r6, r1
    54e6:	432e      	orrs	r6, r5
    54e8:	d000      	beq.n	54ec <__aeabi_dadd+0x448>
    54ea:	e08a      	b.n	5602 <__aeabi_dadd+0x55e>
    54ec:	0001      	movs	r1, r0
    54ee:	4311      	orrs	r1, r2
    54f0:	d100      	bne.n	54f4 <__aeabi_dadd+0x450>
    54f2:	e0c2      	b.n	567a <__aeabi_dadd+0x5d6>
    54f4:	0001      	movs	r1, r0
    54f6:	0015      	movs	r5, r2
    54f8:	469a      	mov	sl, r3
    54fa:	e5fc      	b.n	50f6 <__aeabi_dadd+0x52>
    54fc:	4664      	mov	r4, ip
    54fe:	2100      	movs	r1, #0
    5500:	2500      	movs	r5, #0
    5502:	e68f      	b.n	5224 <__aeabi_dadd+0x180>
    5504:	2320      	movs	r3, #32
    5506:	425b      	negs	r3, r3
    5508:	469c      	mov	ip, r3
    550a:	44dc      	add	ip, fp
    550c:	4663      	mov	r3, ip
    550e:	0007      	movs	r7, r0
    5510:	40df      	lsrs	r7, r3
    5512:	465b      	mov	r3, fp
    5514:	46bc      	mov	ip, r7
    5516:	2b20      	cmp	r3, #32
    5518:	d100      	bne.n	551c <__aeabi_dadd+0x478>
    551a:	e0ac      	b.n	5676 <__aeabi_dadd+0x5d2>
    551c:	2340      	movs	r3, #64	; 0x40
    551e:	465f      	mov	r7, fp
    5520:	1bdb      	subs	r3, r3, r7
    5522:	4098      	lsls	r0, r3
    5524:	4302      	orrs	r2, r0
    5526:	1e50      	subs	r0, r2, #1
    5528:	4182      	sbcs	r2, r0
    552a:	4663      	mov	r3, ip
    552c:	4313      	orrs	r3, r2
    552e:	001a      	movs	r2, r3
    5530:	2000      	movs	r0, #0
    5532:	e698      	b.n	5266 <__aeabi_dadd+0x1c2>
    5534:	4c6f      	ldr	r4, [pc, #444]	; (56f4 <__aeabi_dadd+0x650>)
    5536:	45a4      	cmp	ip, r4
    5538:	d000      	beq.n	553c <__aeabi_dadd+0x498>
    553a:	e757      	b.n	53ec <__aeabi_dadd+0x348>
    553c:	0001      	movs	r1, r0
    553e:	0015      	movs	r5, r2
    5540:	4664      	mov	r4, ip
    5542:	469a      	mov	sl, r3
    5544:	e5d7      	b.n	50f6 <__aeabi_dadd+0x52>
    5546:	2c00      	cmp	r4, #0
    5548:	d139      	bne.n	55be <__aeabi_dadd+0x51a>
    554a:	000c      	movs	r4, r1
    554c:	432c      	orrs	r4, r5
    554e:	d06e      	beq.n	562e <__aeabi_dadd+0x58a>
    5550:	43db      	mvns	r3, r3
    5552:	2b00      	cmp	r3, #0
    5554:	d01a      	beq.n	558c <__aeabi_dadd+0x4e8>
    5556:	4c67      	ldr	r4, [pc, #412]	; (56f4 <__aeabi_dadd+0x650>)
    5558:	45a4      	cmp	ip, r4
    555a:	d068      	beq.n	562e <__aeabi_dadd+0x58a>
    555c:	2b38      	cmp	r3, #56	; 0x38
    555e:	dd00      	ble.n	5562 <__aeabi_dadd+0x4be>
    5560:	e0a4      	b.n	56ac <__aeabi_dadd+0x608>
    5562:	2b1f      	cmp	r3, #31
    5564:	dd00      	ble.n	5568 <__aeabi_dadd+0x4c4>
    5566:	e0ae      	b.n	56c6 <__aeabi_dadd+0x622>
    5568:	2420      	movs	r4, #32
    556a:	000f      	movs	r7, r1
    556c:	1ae4      	subs	r4, r4, r3
    556e:	40a7      	lsls	r7, r4
    5570:	46b9      	mov	r9, r7
    5572:	002f      	movs	r7, r5
    5574:	40df      	lsrs	r7, r3
    5576:	46b8      	mov	r8, r7
    5578:	46a3      	mov	fp, r4
    557a:	464f      	mov	r7, r9
    557c:	4644      	mov	r4, r8
    557e:	4327      	orrs	r7, r4
    5580:	465c      	mov	r4, fp
    5582:	40a5      	lsls	r5, r4
    5584:	1e6c      	subs	r4, r5, #1
    5586:	41a5      	sbcs	r5, r4
    5588:	40d9      	lsrs	r1, r3
    558a:	433d      	orrs	r5, r7
    558c:	18ad      	adds	r5, r5, r2
    558e:	4295      	cmp	r5, r2
    5590:	419b      	sbcs	r3, r3
    5592:	1809      	adds	r1, r1, r0
    5594:	425b      	negs	r3, r3
    5596:	1859      	adds	r1, r3, r1
    5598:	4664      	mov	r4, ip
    559a:	e66b      	b.n	5274 <__aeabi_dadd+0x1d0>
    559c:	000c      	movs	r4, r1
    559e:	432c      	orrs	r4, r5
    55a0:	d115      	bne.n	55ce <__aeabi_dadd+0x52a>
    55a2:	0001      	movs	r1, r0
    55a4:	4311      	orrs	r1, r2
    55a6:	d07b      	beq.n	56a0 <__aeabi_dadd+0x5fc>
    55a8:	0001      	movs	r1, r0
    55aa:	0015      	movs	r5, r2
    55ac:	469a      	mov	sl, r3
    55ae:	4c51      	ldr	r4, [pc, #324]	; (56f4 <__aeabi_dadd+0x650>)
    55b0:	e5a1      	b.n	50f6 <__aeabi_dadd+0x52>
    55b2:	430d      	orrs	r5, r1
    55b4:	1e69      	subs	r1, r5, #1
    55b6:	418d      	sbcs	r5, r1
    55b8:	2100      	movs	r1, #0
    55ba:	b2ec      	uxtb	r4, r5
    55bc:	e72d      	b.n	541a <__aeabi_dadd+0x376>
    55be:	4c4d      	ldr	r4, [pc, #308]	; (56f4 <__aeabi_dadd+0x650>)
    55c0:	45a4      	cmp	ip, r4
    55c2:	d034      	beq.n	562e <__aeabi_dadd+0x58a>
    55c4:	2480      	movs	r4, #128	; 0x80
    55c6:	0424      	lsls	r4, r4, #16
    55c8:	425b      	negs	r3, r3
    55ca:	4321      	orrs	r1, r4
    55cc:	e7c6      	b.n	555c <__aeabi_dadd+0x4b8>
    55ce:	0004      	movs	r4, r0
    55d0:	4314      	orrs	r4, r2
    55d2:	d04e      	beq.n	5672 <__aeabi_dadd+0x5ce>
    55d4:	08ed      	lsrs	r5, r5, #3
    55d6:	074c      	lsls	r4, r1, #29
    55d8:	432c      	orrs	r4, r5
    55da:	2580      	movs	r5, #128	; 0x80
    55dc:	08c9      	lsrs	r1, r1, #3
    55de:	032d      	lsls	r5, r5, #12
    55e0:	4229      	tst	r1, r5
    55e2:	d008      	beq.n	55f6 <__aeabi_dadd+0x552>
    55e4:	08c6      	lsrs	r6, r0, #3
    55e6:	422e      	tst	r6, r5
    55e8:	d105      	bne.n	55f6 <__aeabi_dadd+0x552>
    55ea:	08d2      	lsrs	r2, r2, #3
    55ec:	0741      	lsls	r1, r0, #29
    55ee:	4311      	orrs	r1, r2
    55f0:	000c      	movs	r4, r1
    55f2:	469a      	mov	sl, r3
    55f4:	0031      	movs	r1, r6
    55f6:	0f62      	lsrs	r2, r4, #29
    55f8:	00c9      	lsls	r1, r1, #3
    55fa:	00e5      	lsls	r5, r4, #3
    55fc:	4311      	orrs	r1, r2
    55fe:	4c3d      	ldr	r4, [pc, #244]	; (56f4 <__aeabi_dadd+0x650>)
    5600:	e579      	b.n	50f6 <__aeabi_dadd+0x52>
    5602:	0006      	movs	r6, r0
    5604:	4316      	orrs	r6, r2
    5606:	d100      	bne.n	560a <__aeabi_dadd+0x566>
    5608:	e575      	b.n	50f6 <__aeabi_dadd+0x52>
    560a:	1aae      	subs	r6, r5, r2
    560c:	46b0      	mov	r8, r6
    560e:	4545      	cmp	r5, r8
    5610:	41bf      	sbcs	r7, r7
    5612:	1a0e      	subs	r6, r1, r0
    5614:	427f      	negs	r7, r7
    5616:	1bf6      	subs	r6, r6, r7
    5618:	0237      	lsls	r7, r6, #8
    561a:	d400      	bmi.n	561e <__aeabi_dadd+0x57a>
    561c:	e5f4      	b.n	5208 <__aeabi_dadd+0x164>
    561e:	1b55      	subs	r5, r2, r5
    5620:	42aa      	cmp	r2, r5
    5622:	41b6      	sbcs	r6, r6
    5624:	1a41      	subs	r1, r0, r1
    5626:	4276      	negs	r6, r6
    5628:	1b89      	subs	r1, r1, r6
    562a:	469a      	mov	sl, r3
    562c:	e563      	b.n	50f6 <__aeabi_dadd+0x52>
    562e:	0001      	movs	r1, r0
    5630:	0015      	movs	r5, r2
    5632:	4664      	mov	r4, ip
    5634:	e55f      	b.n	50f6 <__aeabi_dadd+0x52>
    5636:	2200      	movs	r2, #0
    5638:	2500      	movs	r5, #0
    563a:	e57b      	b.n	5134 <__aeabi_dadd+0x90>
    563c:	2b00      	cmp	r3, #0
    563e:	d03b      	beq.n	56b8 <__aeabi_dadd+0x614>
    5640:	0003      	movs	r3, r0
    5642:	4313      	orrs	r3, r2
    5644:	d015      	beq.n	5672 <__aeabi_dadd+0x5ce>
    5646:	08ed      	lsrs	r5, r5, #3
    5648:	074b      	lsls	r3, r1, #29
    564a:	432b      	orrs	r3, r5
    564c:	2580      	movs	r5, #128	; 0x80
    564e:	08c9      	lsrs	r1, r1, #3
    5650:	032d      	lsls	r5, r5, #12
    5652:	4229      	tst	r1, r5
    5654:	d007      	beq.n	5666 <__aeabi_dadd+0x5c2>
    5656:	08c4      	lsrs	r4, r0, #3
    5658:	422c      	tst	r4, r5
    565a:	d104      	bne.n	5666 <__aeabi_dadd+0x5c2>
    565c:	0741      	lsls	r1, r0, #29
    565e:	000b      	movs	r3, r1
    5660:	0021      	movs	r1, r4
    5662:	08d2      	lsrs	r2, r2, #3
    5664:	4313      	orrs	r3, r2
    5666:	00c9      	lsls	r1, r1, #3
    5668:	0f5a      	lsrs	r2, r3, #29
    566a:	4311      	orrs	r1, r2
    566c:	00dd      	lsls	r5, r3, #3
    566e:	4c21      	ldr	r4, [pc, #132]	; (56f4 <__aeabi_dadd+0x650>)
    5670:	e541      	b.n	50f6 <__aeabi_dadd+0x52>
    5672:	4c20      	ldr	r4, [pc, #128]	; (56f4 <__aeabi_dadd+0x650>)
    5674:	e53f      	b.n	50f6 <__aeabi_dadd+0x52>
    5676:	2000      	movs	r0, #0
    5678:	e754      	b.n	5524 <__aeabi_dadd+0x480>
    567a:	2600      	movs	r6, #0
    567c:	2500      	movs	r5, #0
    567e:	e5d1      	b.n	5224 <__aeabi_dadd+0x180>
    5680:	0034      	movs	r4, r6
    5682:	000f      	movs	r7, r1
    5684:	3c20      	subs	r4, #32
    5686:	40e7      	lsrs	r7, r4
    5688:	003c      	movs	r4, r7
    568a:	2e20      	cmp	r6, #32
    568c:	d02b      	beq.n	56e6 <__aeabi_dadd+0x642>
    568e:	2740      	movs	r7, #64	; 0x40
    5690:	1bbe      	subs	r6, r7, r6
    5692:	40b1      	lsls	r1, r6
    5694:	430d      	orrs	r5, r1
    5696:	1e69      	subs	r1, r5, #1
    5698:	418d      	sbcs	r5, r1
    569a:	2100      	movs	r1, #0
    569c:	432c      	orrs	r4, r5
    569e:	e6bc      	b.n	541a <__aeabi_dadd+0x376>
    56a0:	2180      	movs	r1, #128	; 0x80
    56a2:	2600      	movs	r6, #0
    56a4:	0309      	lsls	r1, r1, #12
    56a6:	4c13      	ldr	r4, [pc, #76]	; (56f4 <__aeabi_dadd+0x650>)
    56a8:	2500      	movs	r5, #0
    56aa:	e5bb      	b.n	5224 <__aeabi_dadd+0x180>
    56ac:	430d      	orrs	r5, r1
    56ae:	1e69      	subs	r1, r5, #1
    56b0:	418d      	sbcs	r5, r1
    56b2:	2100      	movs	r1, #0
    56b4:	b2ed      	uxtb	r5, r5
    56b6:	e769      	b.n	558c <__aeabi_dadd+0x4e8>
    56b8:	0001      	movs	r1, r0
    56ba:	0015      	movs	r5, r2
    56bc:	4c0d      	ldr	r4, [pc, #52]	; (56f4 <__aeabi_dadd+0x650>)
    56be:	e51a      	b.n	50f6 <__aeabi_dadd+0x52>
    56c0:	0001      	movs	r1, r0
    56c2:	0015      	movs	r5, r2
    56c4:	e517      	b.n	50f6 <__aeabi_dadd+0x52>
    56c6:	001c      	movs	r4, r3
    56c8:	000f      	movs	r7, r1
    56ca:	3c20      	subs	r4, #32
    56cc:	40e7      	lsrs	r7, r4
    56ce:	003c      	movs	r4, r7
    56d0:	2b20      	cmp	r3, #32
    56d2:	d00c      	beq.n	56ee <__aeabi_dadd+0x64a>
    56d4:	2740      	movs	r7, #64	; 0x40
    56d6:	1afb      	subs	r3, r7, r3
    56d8:	4099      	lsls	r1, r3
    56da:	430d      	orrs	r5, r1
    56dc:	1e69      	subs	r1, r5, #1
    56de:	418d      	sbcs	r5, r1
    56e0:	2100      	movs	r1, #0
    56e2:	4325      	orrs	r5, r4
    56e4:	e752      	b.n	558c <__aeabi_dadd+0x4e8>
    56e6:	2100      	movs	r1, #0
    56e8:	e7d4      	b.n	5694 <__aeabi_dadd+0x5f0>
    56ea:	001d      	movs	r5, r3
    56ec:	e592      	b.n	5214 <__aeabi_dadd+0x170>
    56ee:	2100      	movs	r1, #0
    56f0:	e7f3      	b.n	56da <__aeabi_dadd+0x636>
    56f2:	46c0      	nop			; (mov r8, r8)
    56f4:	000007ff 	.word	0x000007ff
    56f8:	ff7fffff 	.word	0xff7fffff

000056fc <__aeabi_ddiv>:
    56fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    56fe:	4656      	mov	r6, sl
    5700:	464d      	mov	r5, r9
    5702:	4644      	mov	r4, r8
    5704:	465f      	mov	r7, fp
    5706:	b4f0      	push	{r4, r5, r6, r7}
    5708:	001d      	movs	r5, r3
    570a:	030e      	lsls	r6, r1, #12
    570c:	004c      	lsls	r4, r1, #1
    570e:	0fcb      	lsrs	r3, r1, #31
    5710:	b087      	sub	sp, #28
    5712:	0007      	movs	r7, r0
    5714:	4692      	mov	sl, r2
    5716:	4681      	mov	r9, r0
    5718:	0b36      	lsrs	r6, r6, #12
    571a:	0d64      	lsrs	r4, r4, #21
    571c:	4698      	mov	r8, r3
    571e:	d06a      	beq.n	57f6 <__aeabi_ddiv+0xfa>
    5720:	4b6d      	ldr	r3, [pc, #436]	; (58d8 <__aeabi_ddiv+0x1dc>)
    5722:	429c      	cmp	r4, r3
    5724:	d035      	beq.n	5792 <__aeabi_ddiv+0x96>
    5726:	2280      	movs	r2, #128	; 0x80
    5728:	0f43      	lsrs	r3, r0, #29
    572a:	0412      	lsls	r2, r2, #16
    572c:	4313      	orrs	r3, r2
    572e:	00f6      	lsls	r6, r6, #3
    5730:	431e      	orrs	r6, r3
    5732:	00c3      	lsls	r3, r0, #3
    5734:	4699      	mov	r9, r3
    5736:	4b69      	ldr	r3, [pc, #420]	; (58dc <__aeabi_ddiv+0x1e0>)
    5738:	2700      	movs	r7, #0
    573a:	469c      	mov	ip, r3
    573c:	2300      	movs	r3, #0
    573e:	4464      	add	r4, ip
    5740:	9302      	str	r3, [sp, #8]
    5742:	032b      	lsls	r3, r5, #12
    5744:	0068      	lsls	r0, r5, #1
    5746:	0b1b      	lsrs	r3, r3, #12
    5748:	0fed      	lsrs	r5, r5, #31
    574a:	4651      	mov	r1, sl
    574c:	469b      	mov	fp, r3
    574e:	0d40      	lsrs	r0, r0, #21
    5750:	9500      	str	r5, [sp, #0]
    5752:	d100      	bne.n	5756 <__aeabi_ddiv+0x5a>
    5754:	e078      	b.n	5848 <__aeabi_ddiv+0x14c>
    5756:	4b60      	ldr	r3, [pc, #384]	; (58d8 <__aeabi_ddiv+0x1dc>)
    5758:	4298      	cmp	r0, r3
    575a:	d06c      	beq.n	5836 <__aeabi_ddiv+0x13a>
    575c:	465b      	mov	r3, fp
    575e:	00da      	lsls	r2, r3, #3
    5760:	0f4b      	lsrs	r3, r1, #29
    5762:	2180      	movs	r1, #128	; 0x80
    5764:	0409      	lsls	r1, r1, #16
    5766:	430b      	orrs	r3, r1
    5768:	4313      	orrs	r3, r2
    576a:	469b      	mov	fp, r3
    576c:	4653      	mov	r3, sl
    576e:	00d9      	lsls	r1, r3, #3
    5770:	4b5a      	ldr	r3, [pc, #360]	; (58dc <__aeabi_ddiv+0x1e0>)
    5772:	469c      	mov	ip, r3
    5774:	2300      	movs	r3, #0
    5776:	4460      	add	r0, ip
    5778:	4642      	mov	r2, r8
    577a:	1a20      	subs	r0, r4, r0
    577c:	406a      	eors	r2, r5
    577e:	4692      	mov	sl, r2
    5780:	9001      	str	r0, [sp, #4]
    5782:	431f      	orrs	r7, r3
    5784:	2f0f      	cmp	r7, #15
    5786:	d900      	bls.n	578a <__aeabi_ddiv+0x8e>
    5788:	e0b0      	b.n	58ec <__aeabi_ddiv+0x1f0>
    578a:	4855      	ldr	r0, [pc, #340]	; (58e0 <__aeabi_ddiv+0x1e4>)
    578c:	00bf      	lsls	r7, r7, #2
    578e:	59c0      	ldr	r0, [r0, r7]
    5790:	4687      	mov	pc, r0
    5792:	4337      	orrs	r7, r6
    5794:	d000      	beq.n	5798 <__aeabi_ddiv+0x9c>
    5796:	e088      	b.n	58aa <__aeabi_ddiv+0x1ae>
    5798:	2300      	movs	r3, #0
    579a:	4699      	mov	r9, r3
    579c:	3302      	adds	r3, #2
    579e:	2708      	movs	r7, #8
    57a0:	2600      	movs	r6, #0
    57a2:	9302      	str	r3, [sp, #8]
    57a4:	e7cd      	b.n	5742 <__aeabi_ddiv+0x46>
    57a6:	4643      	mov	r3, r8
    57a8:	46b3      	mov	fp, r6
    57aa:	4649      	mov	r1, r9
    57ac:	9300      	str	r3, [sp, #0]
    57ae:	9b02      	ldr	r3, [sp, #8]
    57b0:	9a00      	ldr	r2, [sp, #0]
    57b2:	4692      	mov	sl, r2
    57b4:	2b02      	cmp	r3, #2
    57b6:	d000      	beq.n	57ba <__aeabi_ddiv+0xbe>
    57b8:	e1bf      	b.n	5b3a <__aeabi_ddiv+0x43e>
    57ba:	2100      	movs	r1, #0
    57bc:	4653      	mov	r3, sl
    57be:	2201      	movs	r2, #1
    57c0:	2600      	movs	r6, #0
    57c2:	4689      	mov	r9, r1
    57c4:	401a      	ands	r2, r3
    57c6:	4b44      	ldr	r3, [pc, #272]	; (58d8 <__aeabi_ddiv+0x1dc>)
    57c8:	2100      	movs	r1, #0
    57ca:	0336      	lsls	r6, r6, #12
    57cc:	0d0c      	lsrs	r4, r1, #20
    57ce:	0524      	lsls	r4, r4, #20
    57d0:	0b36      	lsrs	r6, r6, #12
    57d2:	4326      	orrs	r6, r4
    57d4:	4c43      	ldr	r4, [pc, #268]	; (58e4 <__aeabi_ddiv+0x1e8>)
    57d6:	051b      	lsls	r3, r3, #20
    57d8:	4026      	ands	r6, r4
    57da:	431e      	orrs	r6, r3
    57dc:	0076      	lsls	r6, r6, #1
    57de:	07d2      	lsls	r2, r2, #31
    57e0:	0876      	lsrs	r6, r6, #1
    57e2:	4316      	orrs	r6, r2
    57e4:	4648      	mov	r0, r9
    57e6:	0031      	movs	r1, r6
    57e8:	b007      	add	sp, #28
    57ea:	bc3c      	pop	{r2, r3, r4, r5}
    57ec:	4690      	mov	r8, r2
    57ee:	4699      	mov	r9, r3
    57f0:	46a2      	mov	sl, r4
    57f2:	46ab      	mov	fp, r5
    57f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57f6:	0033      	movs	r3, r6
    57f8:	4303      	orrs	r3, r0
    57fa:	d04f      	beq.n	589c <__aeabi_ddiv+0x1a0>
    57fc:	2e00      	cmp	r6, #0
    57fe:	d100      	bne.n	5802 <__aeabi_ddiv+0x106>
    5800:	e1bc      	b.n	5b7c <__aeabi_ddiv+0x480>
    5802:	0030      	movs	r0, r6
    5804:	f001 fb1c 	bl	6e40 <__clzsi2>
    5808:	0003      	movs	r3, r0
    580a:	3b0b      	subs	r3, #11
    580c:	2b1c      	cmp	r3, #28
    580e:	dd00      	ble.n	5812 <__aeabi_ddiv+0x116>
    5810:	e1ad      	b.n	5b6e <__aeabi_ddiv+0x472>
    5812:	221d      	movs	r2, #29
    5814:	0001      	movs	r1, r0
    5816:	1ad3      	subs	r3, r2, r3
    5818:	3908      	subs	r1, #8
    581a:	003a      	movs	r2, r7
    581c:	408f      	lsls	r7, r1
    581e:	408e      	lsls	r6, r1
    5820:	40da      	lsrs	r2, r3
    5822:	46b9      	mov	r9, r7
    5824:	4316      	orrs	r6, r2
    5826:	4b30      	ldr	r3, [pc, #192]	; (58e8 <__aeabi_ddiv+0x1ec>)
    5828:	2700      	movs	r7, #0
    582a:	469c      	mov	ip, r3
    582c:	2300      	movs	r3, #0
    582e:	4460      	add	r0, ip
    5830:	4244      	negs	r4, r0
    5832:	9302      	str	r3, [sp, #8]
    5834:	e785      	b.n	5742 <__aeabi_ddiv+0x46>
    5836:	4653      	mov	r3, sl
    5838:	465a      	mov	r2, fp
    583a:	4313      	orrs	r3, r2
    583c:	d12c      	bne.n	5898 <__aeabi_ddiv+0x19c>
    583e:	2300      	movs	r3, #0
    5840:	2100      	movs	r1, #0
    5842:	469b      	mov	fp, r3
    5844:	3302      	adds	r3, #2
    5846:	e797      	b.n	5778 <__aeabi_ddiv+0x7c>
    5848:	430b      	orrs	r3, r1
    584a:	d020      	beq.n	588e <__aeabi_ddiv+0x192>
    584c:	465b      	mov	r3, fp
    584e:	2b00      	cmp	r3, #0
    5850:	d100      	bne.n	5854 <__aeabi_ddiv+0x158>
    5852:	e19e      	b.n	5b92 <__aeabi_ddiv+0x496>
    5854:	4658      	mov	r0, fp
    5856:	f001 faf3 	bl	6e40 <__clzsi2>
    585a:	0003      	movs	r3, r0
    585c:	3b0b      	subs	r3, #11
    585e:	2b1c      	cmp	r3, #28
    5860:	dd00      	ble.n	5864 <__aeabi_ddiv+0x168>
    5862:	e18f      	b.n	5b84 <__aeabi_ddiv+0x488>
    5864:	0002      	movs	r2, r0
    5866:	4659      	mov	r1, fp
    5868:	3a08      	subs	r2, #8
    586a:	4091      	lsls	r1, r2
    586c:	468b      	mov	fp, r1
    586e:	211d      	movs	r1, #29
    5870:	1acb      	subs	r3, r1, r3
    5872:	4651      	mov	r1, sl
    5874:	40d9      	lsrs	r1, r3
    5876:	000b      	movs	r3, r1
    5878:	4659      	mov	r1, fp
    587a:	430b      	orrs	r3, r1
    587c:	4651      	mov	r1, sl
    587e:	469b      	mov	fp, r3
    5880:	4091      	lsls	r1, r2
    5882:	4b19      	ldr	r3, [pc, #100]	; (58e8 <__aeabi_ddiv+0x1ec>)
    5884:	469c      	mov	ip, r3
    5886:	4460      	add	r0, ip
    5888:	4240      	negs	r0, r0
    588a:	2300      	movs	r3, #0
    588c:	e774      	b.n	5778 <__aeabi_ddiv+0x7c>
    588e:	2300      	movs	r3, #0
    5890:	2100      	movs	r1, #0
    5892:	469b      	mov	fp, r3
    5894:	3301      	adds	r3, #1
    5896:	e76f      	b.n	5778 <__aeabi_ddiv+0x7c>
    5898:	2303      	movs	r3, #3
    589a:	e76d      	b.n	5778 <__aeabi_ddiv+0x7c>
    589c:	2300      	movs	r3, #0
    589e:	4699      	mov	r9, r3
    58a0:	3301      	adds	r3, #1
    58a2:	2704      	movs	r7, #4
    58a4:	2600      	movs	r6, #0
    58a6:	9302      	str	r3, [sp, #8]
    58a8:	e74b      	b.n	5742 <__aeabi_ddiv+0x46>
    58aa:	2303      	movs	r3, #3
    58ac:	270c      	movs	r7, #12
    58ae:	9302      	str	r3, [sp, #8]
    58b0:	e747      	b.n	5742 <__aeabi_ddiv+0x46>
    58b2:	2201      	movs	r2, #1
    58b4:	1ad5      	subs	r5, r2, r3
    58b6:	2d38      	cmp	r5, #56	; 0x38
    58b8:	dc00      	bgt.n	58bc <__aeabi_ddiv+0x1c0>
    58ba:	e1b0      	b.n	5c1e <__aeabi_ddiv+0x522>
    58bc:	4653      	mov	r3, sl
    58be:	401a      	ands	r2, r3
    58c0:	2100      	movs	r1, #0
    58c2:	2300      	movs	r3, #0
    58c4:	2600      	movs	r6, #0
    58c6:	4689      	mov	r9, r1
    58c8:	e77e      	b.n	57c8 <__aeabi_ddiv+0xcc>
    58ca:	2300      	movs	r3, #0
    58cc:	2680      	movs	r6, #128	; 0x80
    58ce:	4699      	mov	r9, r3
    58d0:	2200      	movs	r2, #0
    58d2:	0336      	lsls	r6, r6, #12
    58d4:	4b00      	ldr	r3, [pc, #0]	; (58d8 <__aeabi_ddiv+0x1dc>)
    58d6:	e777      	b.n	57c8 <__aeabi_ddiv+0xcc>
    58d8:	000007ff 	.word	0x000007ff
    58dc:	fffffc01 	.word	0xfffffc01
    58e0:	00006f50 	.word	0x00006f50
    58e4:	800fffff 	.word	0x800fffff
    58e8:	000003f3 	.word	0x000003f3
    58ec:	455e      	cmp	r6, fp
    58ee:	d900      	bls.n	58f2 <__aeabi_ddiv+0x1f6>
    58f0:	e172      	b.n	5bd8 <__aeabi_ddiv+0x4dc>
    58f2:	d100      	bne.n	58f6 <__aeabi_ddiv+0x1fa>
    58f4:	e16d      	b.n	5bd2 <__aeabi_ddiv+0x4d6>
    58f6:	9b01      	ldr	r3, [sp, #4]
    58f8:	464d      	mov	r5, r9
    58fa:	3b01      	subs	r3, #1
    58fc:	9301      	str	r3, [sp, #4]
    58fe:	2300      	movs	r3, #0
    5900:	0034      	movs	r4, r6
    5902:	9302      	str	r3, [sp, #8]
    5904:	465b      	mov	r3, fp
    5906:	021e      	lsls	r6, r3, #8
    5908:	0e0b      	lsrs	r3, r1, #24
    590a:	431e      	orrs	r6, r3
    590c:	020b      	lsls	r3, r1, #8
    590e:	9303      	str	r3, [sp, #12]
    5910:	0c33      	lsrs	r3, r6, #16
    5912:	4699      	mov	r9, r3
    5914:	0433      	lsls	r3, r6, #16
    5916:	0c1b      	lsrs	r3, r3, #16
    5918:	4649      	mov	r1, r9
    591a:	0020      	movs	r0, r4
    591c:	9300      	str	r3, [sp, #0]
    591e:	f7ff f88d 	bl	4a3c <__aeabi_uidiv>
    5922:	9b00      	ldr	r3, [sp, #0]
    5924:	0037      	movs	r7, r6
    5926:	4343      	muls	r3, r0
    5928:	0006      	movs	r6, r0
    592a:	4649      	mov	r1, r9
    592c:	0020      	movs	r0, r4
    592e:	4698      	mov	r8, r3
    5930:	f7ff f90a 	bl	4b48 <__aeabi_uidivmod>
    5934:	0c2c      	lsrs	r4, r5, #16
    5936:	0409      	lsls	r1, r1, #16
    5938:	430c      	orrs	r4, r1
    593a:	45a0      	cmp	r8, r4
    593c:	d909      	bls.n	5952 <__aeabi_ddiv+0x256>
    593e:	19e4      	adds	r4, r4, r7
    5940:	1e73      	subs	r3, r6, #1
    5942:	42a7      	cmp	r7, r4
    5944:	d900      	bls.n	5948 <__aeabi_ddiv+0x24c>
    5946:	e15c      	b.n	5c02 <__aeabi_ddiv+0x506>
    5948:	45a0      	cmp	r8, r4
    594a:	d800      	bhi.n	594e <__aeabi_ddiv+0x252>
    594c:	e159      	b.n	5c02 <__aeabi_ddiv+0x506>
    594e:	3e02      	subs	r6, #2
    5950:	19e4      	adds	r4, r4, r7
    5952:	4643      	mov	r3, r8
    5954:	1ae4      	subs	r4, r4, r3
    5956:	4649      	mov	r1, r9
    5958:	0020      	movs	r0, r4
    595a:	f7ff f86f 	bl	4a3c <__aeabi_uidiv>
    595e:	0003      	movs	r3, r0
    5960:	9a00      	ldr	r2, [sp, #0]
    5962:	4680      	mov	r8, r0
    5964:	4353      	muls	r3, r2
    5966:	4649      	mov	r1, r9
    5968:	0020      	movs	r0, r4
    596a:	469b      	mov	fp, r3
    596c:	f7ff f8ec 	bl	4b48 <__aeabi_uidivmod>
    5970:	042a      	lsls	r2, r5, #16
    5972:	0409      	lsls	r1, r1, #16
    5974:	0c12      	lsrs	r2, r2, #16
    5976:	430a      	orrs	r2, r1
    5978:	4593      	cmp	fp, r2
    597a:	d90d      	bls.n	5998 <__aeabi_ddiv+0x29c>
    597c:	4643      	mov	r3, r8
    597e:	19d2      	adds	r2, r2, r7
    5980:	3b01      	subs	r3, #1
    5982:	4297      	cmp	r7, r2
    5984:	d900      	bls.n	5988 <__aeabi_ddiv+0x28c>
    5986:	e13a      	b.n	5bfe <__aeabi_ddiv+0x502>
    5988:	4593      	cmp	fp, r2
    598a:	d800      	bhi.n	598e <__aeabi_ddiv+0x292>
    598c:	e137      	b.n	5bfe <__aeabi_ddiv+0x502>
    598e:	2302      	movs	r3, #2
    5990:	425b      	negs	r3, r3
    5992:	469c      	mov	ip, r3
    5994:	19d2      	adds	r2, r2, r7
    5996:	44e0      	add	r8, ip
    5998:	465b      	mov	r3, fp
    599a:	1ad2      	subs	r2, r2, r3
    599c:	4643      	mov	r3, r8
    599e:	0436      	lsls	r6, r6, #16
    59a0:	4333      	orrs	r3, r6
    59a2:	469b      	mov	fp, r3
    59a4:	9903      	ldr	r1, [sp, #12]
    59a6:	0c18      	lsrs	r0, r3, #16
    59a8:	0c0b      	lsrs	r3, r1, #16
    59aa:	001d      	movs	r5, r3
    59ac:	9305      	str	r3, [sp, #20]
    59ae:	0409      	lsls	r1, r1, #16
    59b0:	465b      	mov	r3, fp
    59b2:	0c09      	lsrs	r1, r1, #16
    59b4:	000c      	movs	r4, r1
    59b6:	041b      	lsls	r3, r3, #16
    59b8:	0c1b      	lsrs	r3, r3, #16
    59ba:	4344      	muls	r4, r0
    59bc:	9104      	str	r1, [sp, #16]
    59be:	4359      	muls	r1, r3
    59c0:	436b      	muls	r3, r5
    59c2:	4368      	muls	r0, r5
    59c4:	191b      	adds	r3, r3, r4
    59c6:	0c0d      	lsrs	r5, r1, #16
    59c8:	18eb      	adds	r3, r5, r3
    59ca:	429c      	cmp	r4, r3
    59cc:	d903      	bls.n	59d6 <__aeabi_ddiv+0x2da>
    59ce:	2480      	movs	r4, #128	; 0x80
    59d0:	0264      	lsls	r4, r4, #9
    59d2:	46a4      	mov	ip, r4
    59d4:	4460      	add	r0, ip
    59d6:	0c1c      	lsrs	r4, r3, #16
    59d8:	0409      	lsls	r1, r1, #16
    59da:	041b      	lsls	r3, r3, #16
    59dc:	0c09      	lsrs	r1, r1, #16
    59de:	1820      	adds	r0, r4, r0
    59e0:	185d      	adds	r5, r3, r1
    59e2:	4282      	cmp	r2, r0
    59e4:	d200      	bcs.n	59e8 <__aeabi_ddiv+0x2ec>
    59e6:	e0de      	b.n	5ba6 <__aeabi_ddiv+0x4aa>
    59e8:	d100      	bne.n	59ec <__aeabi_ddiv+0x2f0>
    59ea:	e0d7      	b.n	5b9c <__aeabi_ddiv+0x4a0>
    59ec:	1a16      	subs	r6, r2, r0
    59ee:	9b02      	ldr	r3, [sp, #8]
    59f0:	469c      	mov	ip, r3
    59f2:	1b5d      	subs	r5, r3, r5
    59f4:	45ac      	cmp	ip, r5
    59f6:	419b      	sbcs	r3, r3
    59f8:	425b      	negs	r3, r3
    59fa:	1af6      	subs	r6, r6, r3
    59fc:	42b7      	cmp	r7, r6
    59fe:	d100      	bne.n	5a02 <__aeabi_ddiv+0x306>
    5a00:	e106      	b.n	5c10 <__aeabi_ddiv+0x514>
    5a02:	4649      	mov	r1, r9
    5a04:	0030      	movs	r0, r6
    5a06:	f7ff f819 	bl	4a3c <__aeabi_uidiv>
    5a0a:	9b00      	ldr	r3, [sp, #0]
    5a0c:	0004      	movs	r4, r0
    5a0e:	4343      	muls	r3, r0
    5a10:	4649      	mov	r1, r9
    5a12:	0030      	movs	r0, r6
    5a14:	4698      	mov	r8, r3
    5a16:	f7ff f897 	bl	4b48 <__aeabi_uidivmod>
    5a1a:	0c2e      	lsrs	r6, r5, #16
    5a1c:	0409      	lsls	r1, r1, #16
    5a1e:	430e      	orrs	r6, r1
    5a20:	45b0      	cmp	r8, r6
    5a22:	d909      	bls.n	5a38 <__aeabi_ddiv+0x33c>
    5a24:	19f6      	adds	r6, r6, r7
    5a26:	1e63      	subs	r3, r4, #1
    5a28:	42b7      	cmp	r7, r6
    5a2a:	d900      	bls.n	5a2e <__aeabi_ddiv+0x332>
    5a2c:	e0f3      	b.n	5c16 <__aeabi_ddiv+0x51a>
    5a2e:	45b0      	cmp	r8, r6
    5a30:	d800      	bhi.n	5a34 <__aeabi_ddiv+0x338>
    5a32:	e0f0      	b.n	5c16 <__aeabi_ddiv+0x51a>
    5a34:	3c02      	subs	r4, #2
    5a36:	19f6      	adds	r6, r6, r7
    5a38:	4643      	mov	r3, r8
    5a3a:	1af3      	subs	r3, r6, r3
    5a3c:	4649      	mov	r1, r9
    5a3e:	0018      	movs	r0, r3
    5a40:	9302      	str	r3, [sp, #8]
    5a42:	f7fe fffb 	bl	4a3c <__aeabi_uidiv>
    5a46:	9b00      	ldr	r3, [sp, #0]
    5a48:	0006      	movs	r6, r0
    5a4a:	4343      	muls	r3, r0
    5a4c:	4649      	mov	r1, r9
    5a4e:	9802      	ldr	r0, [sp, #8]
    5a50:	4698      	mov	r8, r3
    5a52:	f7ff f879 	bl	4b48 <__aeabi_uidivmod>
    5a56:	042d      	lsls	r5, r5, #16
    5a58:	0409      	lsls	r1, r1, #16
    5a5a:	0c2d      	lsrs	r5, r5, #16
    5a5c:	430d      	orrs	r5, r1
    5a5e:	45a8      	cmp	r8, r5
    5a60:	d909      	bls.n	5a76 <__aeabi_ddiv+0x37a>
    5a62:	19ed      	adds	r5, r5, r7
    5a64:	1e73      	subs	r3, r6, #1
    5a66:	42af      	cmp	r7, r5
    5a68:	d900      	bls.n	5a6c <__aeabi_ddiv+0x370>
    5a6a:	e0d6      	b.n	5c1a <__aeabi_ddiv+0x51e>
    5a6c:	45a8      	cmp	r8, r5
    5a6e:	d800      	bhi.n	5a72 <__aeabi_ddiv+0x376>
    5a70:	e0d3      	b.n	5c1a <__aeabi_ddiv+0x51e>
    5a72:	3e02      	subs	r6, #2
    5a74:	19ed      	adds	r5, r5, r7
    5a76:	0424      	lsls	r4, r4, #16
    5a78:	0021      	movs	r1, r4
    5a7a:	4643      	mov	r3, r8
    5a7c:	4331      	orrs	r1, r6
    5a7e:	9e04      	ldr	r6, [sp, #16]
    5a80:	9a05      	ldr	r2, [sp, #20]
    5a82:	0030      	movs	r0, r6
    5a84:	1aed      	subs	r5, r5, r3
    5a86:	040b      	lsls	r3, r1, #16
    5a88:	0c0c      	lsrs	r4, r1, #16
    5a8a:	0c1b      	lsrs	r3, r3, #16
    5a8c:	4358      	muls	r0, r3
    5a8e:	4366      	muls	r6, r4
    5a90:	4353      	muls	r3, r2
    5a92:	4354      	muls	r4, r2
    5a94:	199a      	adds	r2, r3, r6
    5a96:	0c03      	lsrs	r3, r0, #16
    5a98:	189b      	adds	r3, r3, r2
    5a9a:	429e      	cmp	r6, r3
    5a9c:	d903      	bls.n	5aa6 <__aeabi_ddiv+0x3aa>
    5a9e:	2280      	movs	r2, #128	; 0x80
    5aa0:	0252      	lsls	r2, r2, #9
    5aa2:	4694      	mov	ip, r2
    5aa4:	4464      	add	r4, ip
    5aa6:	0c1a      	lsrs	r2, r3, #16
    5aa8:	0400      	lsls	r0, r0, #16
    5aaa:	041b      	lsls	r3, r3, #16
    5aac:	0c00      	lsrs	r0, r0, #16
    5aae:	1914      	adds	r4, r2, r4
    5ab0:	181b      	adds	r3, r3, r0
    5ab2:	42a5      	cmp	r5, r4
    5ab4:	d350      	bcc.n	5b58 <__aeabi_ddiv+0x45c>
    5ab6:	d04d      	beq.n	5b54 <__aeabi_ddiv+0x458>
    5ab8:	2301      	movs	r3, #1
    5aba:	4319      	orrs	r1, r3
    5abc:	4a96      	ldr	r2, [pc, #600]	; (5d18 <__aeabi_ddiv+0x61c>)
    5abe:	9b01      	ldr	r3, [sp, #4]
    5ac0:	4694      	mov	ip, r2
    5ac2:	4463      	add	r3, ip
    5ac4:	2b00      	cmp	r3, #0
    5ac6:	dc00      	bgt.n	5aca <__aeabi_ddiv+0x3ce>
    5ac8:	e6f3      	b.n	58b2 <__aeabi_ddiv+0x1b6>
    5aca:	074a      	lsls	r2, r1, #29
    5acc:	d009      	beq.n	5ae2 <__aeabi_ddiv+0x3e6>
    5ace:	220f      	movs	r2, #15
    5ad0:	400a      	ands	r2, r1
    5ad2:	2a04      	cmp	r2, #4
    5ad4:	d005      	beq.n	5ae2 <__aeabi_ddiv+0x3e6>
    5ad6:	1d0a      	adds	r2, r1, #4
    5ad8:	428a      	cmp	r2, r1
    5ada:	4189      	sbcs	r1, r1
    5adc:	4249      	negs	r1, r1
    5ade:	448b      	add	fp, r1
    5ae0:	0011      	movs	r1, r2
    5ae2:	465a      	mov	r2, fp
    5ae4:	01d2      	lsls	r2, r2, #7
    5ae6:	d508      	bpl.n	5afa <__aeabi_ddiv+0x3fe>
    5ae8:	465a      	mov	r2, fp
    5aea:	4b8c      	ldr	r3, [pc, #560]	; (5d1c <__aeabi_ddiv+0x620>)
    5aec:	401a      	ands	r2, r3
    5aee:	4693      	mov	fp, r2
    5af0:	2280      	movs	r2, #128	; 0x80
    5af2:	00d2      	lsls	r2, r2, #3
    5af4:	4694      	mov	ip, r2
    5af6:	9b01      	ldr	r3, [sp, #4]
    5af8:	4463      	add	r3, ip
    5afa:	4a89      	ldr	r2, [pc, #548]	; (5d20 <__aeabi_ddiv+0x624>)
    5afc:	4293      	cmp	r3, r2
    5afe:	dd00      	ble.n	5b02 <__aeabi_ddiv+0x406>
    5b00:	e65b      	b.n	57ba <__aeabi_ddiv+0xbe>
    5b02:	465a      	mov	r2, fp
    5b04:	08c9      	lsrs	r1, r1, #3
    5b06:	0750      	lsls	r0, r2, #29
    5b08:	4308      	orrs	r0, r1
    5b0a:	0256      	lsls	r6, r2, #9
    5b0c:	4651      	mov	r1, sl
    5b0e:	2201      	movs	r2, #1
    5b10:	055b      	lsls	r3, r3, #21
    5b12:	4681      	mov	r9, r0
    5b14:	0b36      	lsrs	r6, r6, #12
    5b16:	0d5b      	lsrs	r3, r3, #21
    5b18:	400a      	ands	r2, r1
    5b1a:	e655      	b.n	57c8 <__aeabi_ddiv+0xcc>
    5b1c:	2380      	movs	r3, #128	; 0x80
    5b1e:	031b      	lsls	r3, r3, #12
    5b20:	421e      	tst	r6, r3
    5b22:	d011      	beq.n	5b48 <__aeabi_ddiv+0x44c>
    5b24:	465a      	mov	r2, fp
    5b26:	421a      	tst	r2, r3
    5b28:	d10e      	bne.n	5b48 <__aeabi_ddiv+0x44c>
    5b2a:	465e      	mov	r6, fp
    5b2c:	431e      	orrs	r6, r3
    5b2e:	0336      	lsls	r6, r6, #12
    5b30:	0b36      	lsrs	r6, r6, #12
    5b32:	002a      	movs	r2, r5
    5b34:	4689      	mov	r9, r1
    5b36:	4b7b      	ldr	r3, [pc, #492]	; (5d24 <__aeabi_ddiv+0x628>)
    5b38:	e646      	b.n	57c8 <__aeabi_ddiv+0xcc>
    5b3a:	2b03      	cmp	r3, #3
    5b3c:	d100      	bne.n	5b40 <__aeabi_ddiv+0x444>
    5b3e:	e0e1      	b.n	5d04 <__aeabi_ddiv+0x608>
    5b40:	2b01      	cmp	r3, #1
    5b42:	d1bb      	bne.n	5abc <__aeabi_ddiv+0x3c0>
    5b44:	401a      	ands	r2, r3
    5b46:	e6bb      	b.n	58c0 <__aeabi_ddiv+0x1c4>
    5b48:	431e      	orrs	r6, r3
    5b4a:	0336      	lsls	r6, r6, #12
    5b4c:	0b36      	lsrs	r6, r6, #12
    5b4e:	4642      	mov	r2, r8
    5b50:	4b74      	ldr	r3, [pc, #464]	; (5d24 <__aeabi_ddiv+0x628>)
    5b52:	e639      	b.n	57c8 <__aeabi_ddiv+0xcc>
    5b54:	2b00      	cmp	r3, #0
    5b56:	d0b1      	beq.n	5abc <__aeabi_ddiv+0x3c0>
    5b58:	197d      	adds	r5, r7, r5
    5b5a:	1e4a      	subs	r2, r1, #1
    5b5c:	42af      	cmp	r7, r5
    5b5e:	d952      	bls.n	5c06 <__aeabi_ddiv+0x50a>
    5b60:	0011      	movs	r1, r2
    5b62:	42a5      	cmp	r5, r4
    5b64:	d1a8      	bne.n	5ab8 <__aeabi_ddiv+0x3bc>
    5b66:	9a03      	ldr	r2, [sp, #12]
    5b68:	429a      	cmp	r2, r3
    5b6a:	d1a5      	bne.n	5ab8 <__aeabi_ddiv+0x3bc>
    5b6c:	e7a6      	b.n	5abc <__aeabi_ddiv+0x3c0>
    5b6e:	0003      	movs	r3, r0
    5b70:	003e      	movs	r6, r7
    5b72:	3b28      	subs	r3, #40	; 0x28
    5b74:	409e      	lsls	r6, r3
    5b76:	2300      	movs	r3, #0
    5b78:	4699      	mov	r9, r3
    5b7a:	e654      	b.n	5826 <__aeabi_ddiv+0x12a>
    5b7c:	f001 f960 	bl	6e40 <__clzsi2>
    5b80:	3020      	adds	r0, #32
    5b82:	e641      	b.n	5808 <__aeabi_ddiv+0x10c>
    5b84:	0003      	movs	r3, r0
    5b86:	4652      	mov	r2, sl
    5b88:	3b28      	subs	r3, #40	; 0x28
    5b8a:	409a      	lsls	r2, r3
    5b8c:	2100      	movs	r1, #0
    5b8e:	4693      	mov	fp, r2
    5b90:	e677      	b.n	5882 <__aeabi_ddiv+0x186>
    5b92:	4650      	mov	r0, sl
    5b94:	f001 f954 	bl	6e40 <__clzsi2>
    5b98:	3020      	adds	r0, #32
    5b9a:	e65e      	b.n	585a <__aeabi_ddiv+0x15e>
    5b9c:	9b02      	ldr	r3, [sp, #8]
    5b9e:	2600      	movs	r6, #0
    5ba0:	42ab      	cmp	r3, r5
    5ba2:	d300      	bcc.n	5ba6 <__aeabi_ddiv+0x4aa>
    5ba4:	e723      	b.n	59ee <__aeabi_ddiv+0x2f2>
    5ba6:	9e03      	ldr	r6, [sp, #12]
    5ba8:	9902      	ldr	r1, [sp, #8]
    5baa:	46b4      	mov	ip, r6
    5bac:	4461      	add	r1, ip
    5bae:	4688      	mov	r8, r1
    5bb0:	45b0      	cmp	r8, r6
    5bb2:	41b6      	sbcs	r6, r6
    5bb4:	465b      	mov	r3, fp
    5bb6:	4276      	negs	r6, r6
    5bb8:	19f6      	adds	r6, r6, r7
    5bba:	18b2      	adds	r2, r6, r2
    5bbc:	3b01      	subs	r3, #1
    5bbe:	9102      	str	r1, [sp, #8]
    5bc0:	4297      	cmp	r7, r2
    5bc2:	d213      	bcs.n	5bec <__aeabi_ddiv+0x4f0>
    5bc4:	4290      	cmp	r0, r2
    5bc6:	d84f      	bhi.n	5c68 <__aeabi_ddiv+0x56c>
    5bc8:	d100      	bne.n	5bcc <__aeabi_ddiv+0x4d0>
    5bca:	e08e      	b.n	5cea <__aeabi_ddiv+0x5ee>
    5bcc:	1a16      	subs	r6, r2, r0
    5bce:	469b      	mov	fp, r3
    5bd0:	e70d      	b.n	59ee <__aeabi_ddiv+0x2f2>
    5bd2:	4589      	cmp	r9, r1
    5bd4:	d200      	bcs.n	5bd8 <__aeabi_ddiv+0x4dc>
    5bd6:	e68e      	b.n	58f6 <__aeabi_ddiv+0x1fa>
    5bd8:	0874      	lsrs	r4, r6, #1
    5bda:	464b      	mov	r3, r9
    5bdc:	07f6      	lsls	r6, r6, #31
    5bde:	0035      	movs	r5, r6
    5be0:	085b      	lsrs	r3, r3, #1
    5be2:	431d      	orrs	r5, r3
    5be4:	464b      	mov	r3, r9
    5be6:	07db      	lsls	r3, r3, #31
    5be8:	9302      	str	r3, [sp, #8]
    5bea:	e68b      	b.n	5904 <__aeabi_ddiv+0x208>
    5bec:	4297      	cmp	r7, r2
    5bee:	d1ed      	bne.n	5bcc <__aeabi_ddiv+0x4d0>
    5bf0:	9903      	ldr	r1, [sp, #12]
    5bf2:	9c02      	ldr	r4, [sp, #8]
    5bf4:	42a1      	cmp	r1, r4
    5bf6:	d9e5      	bls.n	5bc4 <__aeabi_ddiv+0x4c8>
    5bf8:	1a3e      	subs	r6, r7, r0
    5bfa:	469b      	mov	fp, r3
    5bfc:	e6f7      	b.n	59ee <__aeabi_ddiv+0x2f2>
    5bfe:	4698      	mov	r8, r3
    5c00:	e6ca      	b.n	5998 <__aeabi_ddiv+0x29c>
    5c02:	001e      	movs	r6, r3
    5c04:	e6a5      	b.n	5952 <__aeabi_ddiv+0x256>
    5c06:	42ac      	cmp	r4, r5
    5c08:	d83e      	bhi.n	5c88 <__aeabi_ddiv+0x58c>
    5c0a:	d074      	beq.n	5cf6 <__aeabi_ddiv+0x5fa>
    5c0c:	0011      	movs	r1, r2
    5c0e:	e753      	b.n	5ab8 <__aeabi_ddiv+0x3bc>
    5c10:	2101      	movs	r1, #1
    5c12:	4249      	negs	r1, r1
    5c14:	e752      	b.n	5abc <__aeabi_ddiv+0x3c0>
    5c16:	001c      	movs	r4, r3
    5c18:	e70e      	b.n	5a38 <__aeabi_ddiv+0x33c>
    5c1a:	001e      	movs	r6, r3
    5c1c:	e72b      	b.n	5a76 <__aeabi_ddiv+0x37a>
    5c1e:	2d1f      	cmp	r5, #31
    5c20:	dc3c      	bgt.n	5c9c <__aeabi_ddiv+0x5a0>
    5c22:	2320      	movs	r3, #32
    5c24:	000a      	movs	r2, r1
    5c26:	4658      	mov	r0, fp
    5c28:	1b5b      	subs	r3, r3, r5
    5c2a:	4098      	lsls	r0, r3
    5c2c:	40ea      	lsrs	r2, r5
    5c2e:	4099      	lsls	r1, r3
    5c30:	4302      	orrs	r2, r0
    5c32:	1e48      	subs	r0, r1, #1
    5c34:	4181      	sbcs	r1, r0
    5c36:	465e      	mov	r6, fp
    5c38:	4311      	orrs	r1, r2
    5c3a:	40ee      	lsrs	r6, r5
    5c3c:	074b      	lsls	r3, r1, #29
    5c3e:	d009      	beq.n	5c54 <__aeabi_ddiv+0x558>
    5c40:	230f      	movs	r3, #15
    5c42:	400b      	ands	r3, r1
    5c44:	2b04      	cmp	r3, #4
    5c46:	d005      	beq.n	5c54 <__aeabi_ddiv+0x558>
    5c48:	000b      	movs	r3, r1
    5c4a:	1d19      	adds	r1, r3, #4
    5c4c:	4299      	cmp	r1, r3
    5c4e:	419b      	sbcs	r3, r3
    5c50:	425b      	negs	r3, r3
    5c52:	18f6      	adds	r6, r6, r3
    5c54:	0233      	lsls	r3, r6, #8
    5c56:	d53c      	bpl.n	5cd2 <__aeabi_ddiv+0x5d6>
    5c58:	4653      	mov	r3, sl
    5c5a:	2201      	movs	r2, #1
    5c5c:	2100      	movs	r1, #0
    5c5e:	401a      	ands	r2, r3
    5c60:	2600      	movs	r6, #0
    5c62:	2301      	movs	r3, #1
    5c64:	4689      	mov	r9, r1
    5c66:	e5af      	b.n	57c8 <__aeabi_ddiv+0xcc>
    5c68:	2302      	movs	r3, #2
    5c6a:	425b      	negs	r3, r3
    5c6c:	469c      	mov	ip, r3
    5c6e:	9c03      	ldr	r4, [sp, #12]
    5c70:	44e3      	add	fp, ip
    5c72:	46a4      	mov	ip, r4
    5c74:	9b02      	ldr	r3, [sp, #8]
    5c76:	4463      	add	r3, ip
    5c78:	4698      	mov	r8, r3
    5c7a:	45a0      	cmp	r8, r4
    5c7c:	41b6      	sbcs	r6, r6
    5c7e:	4276      	negs	r6, r6
    5c80:	19f6      	adds	r6, r6, r7
    5c82:	9302      	str	r3, [sp, #8]
    5c84:	18b2      	adds	r2, r6, r2
    5c86:	e6b1      	b.n	59ec <__aeabi_ddiv+0x2f0>
    5c88:	9803      	ldr	r0, [sp, #12]
    5c8a:	1e8a      	subs	r2, r1, #2
    5c8c:	0041      	lsls	r1, r0, #1
    5c8e:	4281      	cmp	r1, r0
    5c90:	41b6      	sbcs	r6, r6
    5c92:	4276      	negs	r6, r6
    5c94:	19f6      	adds	r6, r6, r7
    5c96:	19ad      	adds	r5, r5, r6
    5c98:	9103      	str	r1, [sp, #12]
    5c9a:	e761      	b.n	5b60 <__aeabi_ddiv+0x464>
    5c9c:	221f      	movs	r2, #31
    5c9e:	4252      	negs	r2, r2
    5ca0:	1ad3      	subs	r3, r2, r3
    5ca2:	465a      	mov	r2, fp
    5ca4:	40da      	lsrs	r2, r3
    5ca6:	0013      	movs	r3, r2
    5ca8:	2d20      	cmp	r5, #32
    5caa:	d029      	beq.n	5d00 <__aeabi_ddiv+0x604>
    5cac:	2240      	movs	r2, #64	; 0x40
    5cae:	4658      	mov	r0, fp
    5cb0:	1b55      	subs	r5, r2, r5
    5cb2:	40a8      	lsls	r0, r5
    5cb4:	4301      	orrs	r1, r0
    5cb6:	1e48      	subs	r0, r1, #1
    5cb8:	4181      	sbcs	r1, r0
    5cba:	2007      	movs	r0, #7
    5cbc:	430b      	orrs	r3, r1
    5cbe:	4018      	ands	r0, r3
    5cc0:	2600      	movs	r6, #0
    5cc2:	2800      	cmp	r0, #0
    5cc4:	d009      	beq.n	5cda <__aeabi_ddiv+0x5de>
    5cc6:	220f      	movs	r2, #15
    5cc8:	2600      	movs	r6, #0
    5cca:	401a      	ands	r2, r3
    5ccc:	0019      	movs	r1, r3
    5cce:	2a04      	cmp	r2, #4
    5cd0:	d1bb      	bne.n	5c4a <__aeabi_ddiv+0x54e>
    5cd2:	000b      	movs	r3, r1
    5cd4:	0770      	lsls	r0, r6, #29
    5cd6:	0276      	lsls	r6, r6, #9
    5cd8:	0b36      	lsrs	r6, r6, #12
    5cda:	08db      	lsrs	r3, r3, #3
    5cdc:	4303      	orrs	r3, r0
    5cde:	4699      	mov	r9, r3
    5ce0:	2201      	movs	r2, #1
    5ce2:	4653      	mov	r3, sl
    5ce4:	401a      	ands	r2, r3
    5ce6:	2300      	movs	r3, #0
    5ce8:	e56e      	b.n	57c8 <__aeabi_ddiv+0xcc>
    5cea:	9902      	ldr	r1, [sp, #8]
    5cec:	428d      	cmp	r5, r1
    5cee:	d8bb      	bhi.n	5c68 <__aeabi_ddiv+0x56c>
    5cf0:	469b      	mov	fp, r3
    5cf2:	2600      	movs	r6, #0
    5cf4:	e67b      	b.n	59ee <__aeabi_ddiv+0x2f2>
    5cf6:	9803      	ldr	r0, [sp, #12]
    5cf8:	4298      	cmp	r0, r3
    5cfa:	d3c5      	bcc.n	5c88 <__aeabi_ddiv+0x58c>
    5cfc:	0011      	movs	r1, r2
    5cfe:	e732      	b.n	5b66 <__aeabi_ddiv+0x46a>
    5d00:	2000      	movs	r0, #0
    5d02:	e7d7      	b.n	5cb4 <__aeabi_ddiv+0x5b8>
    5d04:	2680      	movs	r6, #128	; 0x80
    5d06:	465b      	mov	r3, fp
    5d08:	0336      	lsls	r6, r6, #12
    5d0a:	431e      	orrs	r6, r3
    5d0c:	0336      	lsls	r6, r6, #12
    5d0e:	0b36      	lsrs	r6, r6, #12
    5d10:	9a00      	ldr	r2, [sp, #0]
    5d12:	4689      	mov	r9, r1
    5d14:	4b03      	ldr	r3, [pc, #12]	; (5d24 <__aeabi_ddiv+0x628>)
    5d16:	e557      	b.n	57c8 <__aeabi_ddiv+0xcc>
    5d18:	000003ff 	.word	0x000003ff
    5d1c:	feffffff 	.word	0xfeffffff
    5d20:	000007fe 	.word	0x000007fe
    5d24:	000007ff 	.word	0x000007ff

00005d28 <__eqdf2>:
    5d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d2a:	465f      	mov	r7, fp
    5d2c:	4656      	mov	r6, sl
    5d2e:	464d      	mov	r5, r9
    5d30:	4644      	mov	r4, r8
    5d32:	b4f0      	push	{r4, r5, r6, r7}
    5d34:	031f      	lsls	r7, r3, #12
    5d36:	005c      	lsls	r4, r3, #1
    5d38:	0fdb      	lsrs	r3, r3, #31
    5d3a:	469a      	mov	sl, r3
    5d3c:	4b19      	ldr	r3, [pc, #100]	; (5da4 <__eqdf2+0x7c>)
    5d3e:	030e      	lsls	r6, r1, #12
    5d40:	004d      	lsls	r5, r1, #1
    5d42:	0fc9      	lsrs	r1, r1, #31
    5d44:	4680      	mov	r8, r0
    5d46:	0b36      	lsrs	r6, r6, #12
    5d48:	0d6d      	lsrs	r5, r5, #21
    5d4a:	468b      	mov	fp, r1
    5d4c:	4691      	mov	r9, r2
    5d4e:	0b3f      	lsrs	r7, r7, #12
    5d50:	0d64      	lsrs	r4, r4, #21
    5d52:	429d      	cmp	r5, r3
    5d54:	d019      	beq.n	5d8a <__eqdf2+0x62>
    5d56:	4b13      	ldr	r3, [pc, #76]	; (5da4 <__eqdf2+0x7c>)
    5d58:	429c      	cmp	r4, r3
    5d5a:	d01b      	beq.n	5d94 <__eqdf2+0x6c>
    5d5c:	2301      	movs	r3, #1
    5d5e:	42a5      	cmp	r5, r4
    5d60:	d006      	beq.n	5d70 <__eqdf2+0x48>
    5d62:	0018      	movs	r0, r3
    5d64:	bc3c      	pop	{r2, r3, r4, r5}
    5d66:	4690      	mov	r8, r2
    5d68:	4699      	mov	r9, r3
    5d6a:	46a2      	mov	sl, r4
    5d6c:	46ab      	mov	fp, r5
    5d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5d70:	42be      	cmp	r6, r7
    5d72:	d1f6      	bne.n	5d62 <__eqdf2+0x3a>
    5d74:	45c8      	cmp	r8, r9
    5d76:	d1f4      	bne.n	5d62 <__eqdf2+0x3a>
    5d78:	45d3      	cmp	fp, sl
    5d7a:	d010      	beq.n	5d9e <__eqdf2+0x76>
    5d7c:	2d00      	cmp	r5, #0
    5d7e:	d1f0      	bne.n	5d62 <__eqdf2+0x3a>
    5d80:	4330      	orrs	r0, r6
    5d82:	0003      	movs	r3, r0
    5d84:	1e5a      	subs	r2, r3, #1
    5d86:	4193      	sbcs	r3, r2
    5d88:	e7eb      	b.n	5d62 <__eqdf2+0x3a>
    5d8a:	0031      	movs	r1, r6
    5d8c:	2301      	movs	r3, #1
    5d8e:	4301      	orrs	r1, r0
    5d90:	d1e7      	bne.n	5d62 <__eqdf2+0x3a>
    5d92:	e7e0      	b.n	5d56 <__eqdf2+0x2e>
    5d94:	433a      	orrs	r2, r7
    5d96:	2301      	movs	r3, #1
    5d98:	2a00      	cmp	r2, #0
    5d9a:	d1e2      	bne.n	5d62 <__eqdf2+0x3a>
    5d9c:	e7de      	b.n	5d5c <__eqdf2+0x34>
    5d9e:	2300      	movs	r3, #0
    5da0:	e7df      	b.n	5d62 <__eqdf2+0x3a>
    5da2:	46c0      	nop			; (mov r8, r8)
    5da4:	000007ff 	.word	0x000007ff

00005da8 <__gedf2>:
    5da8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5daa:	465f      	mov	r7, fp
    5dac:	4644      	mov	r4, r8
    5dae:	4656      	mov	r6, sl
    5db0:	464d      	mov	r5, r9
    5db2:	b4f0      	push	{r4, r5, r6, r7}
    5db4:	031f      	lsls	r7, r3, #12
    5db6:	0b3c      	lsrs	r4, r7, #12
    5db8:	4f2c      	ldr	r7, [pc, #176]	; (5e6c <__gedf2+0xc4>)
    5dba:	030e      	lsls	r6, r1, #12
    5dbc:	004d      	lsls	r5, r1, #1
    5dbe:	46a3      	mov	fp, r4
    5dc0:	005c      	lsls	r4, r3, #1
    5dc2:	4684      	mov	ip, r0
    5dc4:	0b36      	lsrs	r6, r6, #12
    5dc6:	0d6d      	lsrs	r5, r5, #21
    5dc8:	0fc9      	lsrs	r1, r1, #31
    5dca:	4690      	mov	r8, r2
    5dcc:	0d64      	lsrs	r4, r4, #21
    5dce:	0fdb      	lsrs	r3, r3, #31
    5dd0:	42bd      	cmp	r5, r7
    5dd2:	d02b      	beq.n	5e2c <__gedf2+0x84>
    5dd4:	4f25      	ldr	r7, [pc, #148]	; (5e6c <__gedf2+0xc4>)
    5dd6:	42bc      	cmp	r4, r7
    5dd8:	d02e      	beq.n	5e38 <__gedf2+0x90>
    5dda:	2d00      	cmp	r5, #0
    5ddc:	d10e      	bne.n	5dfc <__gedf2+0x54>
    5dde:	4330      	orrs	r0, r6
    5de0:	0007      	movs	r7, r0
    5de2:	4681      	mov	r9, r0
    5de4:	4278      	negs	r0, r7
    5de6:	4178      	adcs	r0, r7
    5de8:	2c00      	cmp	r4, #0
    5dea:	d117      	bne.n	5e1c <__gedf2+0x74>
    5dec:	465f      	mov	r7, fp
    5dee:	433a      	orrs	r2, r7
    5df0:	d114      	bne.n	5e1c <__gedf2+0x74>
    5df2:	464b      	mov	r3, r9
    5df4:	2000      	movs	r0, #0
    5df6:	2b00      	cmp	r3, #0
    5df8:	d00a      	beq.n	5e10 <__gedf2+0x68>
    5dfa:	e006      	b.n	5e0a <__gedf2+0x62>
    5dfc:	2c00      	cmp	r4, #0
    5dfe:	d102      	bne.n	5e06 <__gedf2+0x5e>
    5e00:	4658      	mov	r0, fp
    5e02:	4302      	orrs	r2, r0
    5e04:	d001      	beq.n	5e0a <__gedf2+0x62>
    5e06:	4299      	cmp	r1, r3
    5e08:	d01a      	beq.n	5e40 <__gedf2+0x98>
    5e0a:	2301      	movs	r3, #1
    5e0c:	4248      	negs	r0, r1
    5e0e:	4318      	orrs	r0, r3
    5e10:	bc3c      	pop	{r2, r3, r4, r5}
    5e12:	4690      	mov	r8, r2
    5e14:	4699      	mov	r9, r3
    5e16:	46a2      	mov	sl, r4
    5e18:	46ab      	mov	fp, r5
    5e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e1c:	2800      	cmp	r0, #0
    5e1e:	d0f2      	beq.n	5e06 <__gedf2+0x5e>
    5e20:	4258      	negs	r0, r3
    5e22:	4158      	adcs	r0, r3
    5e24:	2201      	movs	r2, #1
    5e26:	4240      	negs	r0, r0
    5e28:	4310      	orrs	r0, r2
    5e2a:	e7f1      	b.n	5e10 <__gedf2+0x68>
    5e2c:	0037      	movs	r7, r6
    5e2e:	4307      	orrs	r7, r0
    5e30:	d0d0      	beq.n	5dd4 <__gedf2+0x2c>
    5e32:	2002      	movs	r0, #2
    5e34:	4240      	negs	r0, r0
    5e36:	e7eb      	b.n	5e10 <__gedf2+0x68>
    5e38:	465f      	mov	r7, fp
    5e3a:	4317      	orrs	r7, r2
    5e3c:	d0cd      	beq.n	5dda <__gedf2+0x32>
    5e3e:	e7f8      	b.n	5e32 <__gedf2+0x8a>
    5e40:	42a5      	cmp	r5, r4
    5e42:	dce2      	bgt.n	5e0a <__gedf2+0x62>
    5e44:	db05      	blt.n	5e52 <__gedf2+0xaa>
    5e46:	455e      	cmp	r6, fp
    5e48:	d8df      	bhi.n	5e0a <__gedf2+0x62>
    5e4a:	d008      	beq.n	5e5e <__gedf2+0xb6>
    5e4c:	2000      	movs	r0, #0
    5e4e:	455e      	cmp	r6, fp
    5e50:	d2de      	bcs.n	5e10 <__gedf2+0x68>
    5e52:	4248      	negs	r0, r1
    5e54:	4148      	adcs	r0, r1
    5e56:	2301      	movs	r3, #1
    5e58:	4240      	negs	r0, r0
    5e5a:	4318      	orrs	r0, r3
    5e5c:	e7d8      	b.n	5e10 <__gedf2+0x68>
    5e5e:	45c4      	cmp	ip, r8
    5e60:	d8d3      	bhi.n	5e0a <__gedf2+0x62>
    5e62:	2000      	movs	r0, #0
    5e64:	45c4      	cmp	ip, r8
    5e66:	d3f4      	bcc.n	5e52 <__gedf2+0xaa>
    5e68:	e7d2      	b.n	5e10 <__gedf2+0x68>
    5e6a:	46c0      	nop			; (mov r8, r8)
    5e6c:	000007ff 	.word	0x000007ff

00005e70 <__ledf2>:
    5e70:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e72:	465f      	mov	r7, fp
    5e74:	464d      	mov	r5, r9
    5e76:	4644      	mov	r4, r8
    5e78:	4656      	mov	r6, sl
    5e7a:	b4f0      	push	{r4, r5, r6, r7}
    5e7c:	031c      	lsls	r4, r3, #12
    5e7e:	0b24      	lsrs	r4, r4, #12
    5e80:	46a4      	mov	ip, r4
    5e82:	4c2f      	ldr	r4, [pc, #188]	; (5f40 <__ledf2+0xd0>)
    5e84:	030f      	lsls	r7, r1, #12
    5e86:	004d      	lsls	r5, r1, #1
    5e88:	005e      	lsls	r6, r3, #1
    5e8a:	0fc9      	lsrs	r1, r1, #31
    5e8c:	4680      	mov	r8, r0
    5e8e:	0b3f      	lsrs	r7, r7, #12
    5e90:	0d6d      	lsrs	r5, r5, #21
    5e92:	468b      	mov	fp, r1
    5e94:	4691      	mov	r9, r2
    5e96:	0d76      	lsrs	r6, r6, #21
    5e98:	0fdb      	lsrs	r3, r3, #31
    5e9a:	42a5      	cmp	r5, r4
    5e9c:	d020      	beq.n	5ee0 <__ledf2+0x70>
    5e9e:	4c28      	ldr	r4, [pc, #160]	; (5f40 <__ledf2+0xd0>)
    5ea0:	42a6      	cmp	r6, r4
    5ea2:	d022      	beq.n	5eea <__ledf2+0x7a>
    5ea4:	2d00      	cmp	r5, #0
    5ea6:	d112      	bne.n	5ece <__ledf2+0x5e>
    5ea8:	4338      	orrs	r0, r7
    5eaa:	4244      	negs	r4, r0
    5eac:	4144      	adcs	r4, r0
    5eae:	2e00      	cmp	r6, #0
    5eb0:	d020      	beq.n	5ef4 <__ledf2+0x84>
    5eb2:	2c00      	cmp	r4, #0
    5eb4:	d00d      	beq.n	5ed2 <__ledf2+0x62>
    5eb6:	425c      	negs	r4, r3
    5eb8:	4163      	adcs	r3, r4
    5eba:	2401      	movs	r4, #1
    5ebc:	425b      	negs	r3, r3
    5ebe:	431c      	orrs	r4, r3
    5ec0:	0020      	movs	r0, r4
    5ec2:	bc3c      	pop	{r2, r3, r4, r5}
    5ec4:	4690      	mov	r8, r2
    5ec6:	4699      	mov	r9, r3
    5ec8:	46a2      	mov	sl, r4
    5eca:	46ab      	mov	fp, r5
    5ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ece:	2e00      	cmp	r6, #0
    5ed0:	d017      	beq.n	5f02 <__ledf2+0x92>
    5ed2:	455b      	cmp	r3, fp
    5ed4:	d019      	beq.n	5f0a <__ledf2+0x9a>
    5ed6:	465b      	mov	r3, fp
    5ed8:	425c      	negs	r4, r3
    5eda:	2301      	movs	r3, #1
    5edc:	431c      	orrs	r4, r3
    5ede:	e7ef      	b.n	5ec0 <__ledf2+0x50>
    5ee0:	0039      	movs	r1, r7
    5ee2:	2402      	movs	r4, #2
    5ee4:	4301      	orrs	r1, r0
    5ee6:	d1eb      	bne.n	5ec0 <__ledf2+0x50>
    5ee8:	e7d9      	b.n	5e9e <__ledf2+0x2e>
    5eea:	4661      	mov	r1, ip
    5eec:	2402      	movs	r4, #2
    5eee:	4311      	orrs	r1, r2
    5ef0:	d1e6      	bne.n	5ec0 <__ledf2+0x50>
    5ef2:	e7d7      	b.n	5ea4 <__ledf2+0x34>
    5ef4:	4661      	mov	r1, ip
    5ef6:	430a      	orrs	r2, r1
    5ef8:	d1db      	bne.n	5eb2 <__ledf2+0x42>
    5efa:	2400      	movs	r4, #0
    5efc:	2800      	cmp	r0, #0
    5efe:	d0df      	beq.n	5ec0 <__ledf2+0x50>
    5f00:	e7e9      	b.n	5ed6 <__ledf2+0x66>
    5f02:	4661      	mov	r1, ip
    5f04:	430a      	orrs	r2, r1
    5f06:	d1e4      	bne.n	5ed2 <__ledf2+0x62>
    5f08:	e7e5      	b.n	5ed6 <__ledf2+0x66>
    5f0a:	42b5      	cmp	r5, r6
    5f0c:	dd03      	ble.n	5f16 <__ledf2+0xa6>
    5f0e:	2201      	movs	r2, #1
    5f10:	425c      	negs	r4, r3
    5f12:	4314      	orrs	r4, r2
    5f14:	e7d4      	b.n	5ec0 <__ledf2+0x50>
    5f16:	42b5      	cmp	r5, r6
    5f18:	dbcd      	blt.n	5eb6 <__ledf2+0x46>
    5f1a:	4567      	cmp	r7, ip
    5f1c:	d8db      	bhi.n	5ed6 <__ledf2+0x66>
    5f1e:	d009      	beq.n	5f34 <__ledf2+0xc4>
    5f20:	2400      	movs	r4, #0
    5f22:	4567      	cmp	r7, ip
    5f24:	d2cc      	bcs.n	5ec0 <__ledf2+0x50>
    5f26:	4659      	mov	r1, fp
    5f28:	424c      	negs	r4, r1
    5f2a:	4161      	adcs	r1, r4
    5f2c:	2401      	movs	r4, #1
    5f2e:	4249      	negs	r1, r1
    5f30:	430c      	orrs	r4, r1
    5f32:	e7c5      	b.n	5ec0 <__ledf2+0x50>
    5f34:	45c8      	cmp	r8, r9
    5f36:	d8ce      	bhi.n	5ed6 <__ledf2+0x66>
    5f38:	2400      	movs	r4, #0
    5f3a:	45c8      	cmp	r8, r9
    5f3c:	d3f3      	bcc.n	5f26 <__ledf2+0xb6>
    5f3e:	e7bf      	b.n	5ec0 <__ledf2+0x50>
    5f40:	000007ff 	.word	0x000007ff

00005f44 <__aeabi_dmul>:
    5f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f46:	465f      	mov	r7, fp
    5f48:	4656      	mov	r6, sl
    5f4a:	464d      	mov	r5, r9
    5f4c:	4644      	mov	r4, r8
    5f4e:	b4f0      	push	{r4, r5, r6, r7}
    5f50:	030d      	lsls	r5, r1, #12
    5f52:	4699      	mov	r9, r3
    5f54:	004e      	lsls	r6, r1, #1
    5f56:	0b2b      	lsrs	r3, r5, #12
    5f58:	b087      	sub	sp, #28
    5f5a:	0007      	movs	r7, r0
    5f5c:	4692      	mov	sl, r2
    5f5e:	4680      	mov	r8, r0
    5f60:	469b      	mov	fp, r3
    5f62:	0d76      	lsrs	r6, r6, #21
    5f64:	0fcc      	lsrs	r4, r1, #31
    5f66:	2e00      	cmp	r6, #0
    5f68:	d069      	beq.n	603e <__aeabi_dmul+0xfa>
    5f6a:	4b6d      	ldr	r3, [pc, #436]	; (6120 <__aeabi_dmul+0x1dc>)
    5f6c:	429e      	cmp	r6, r3
    5f6e:	d035      	beq.n	5fdc <__aeabi_dmul+0x98>
    5f70:	465b      	mov	r3, fp
    5f72:	2280      	movs	r2, #128	; 0x80
    5f74:	00dd      	lsls	r5, r3, #3
    5f76:	0412      	lsls	r2, r2, #16
    5f78:	0f43      	lsrs	r3, r0, #29
    5f7a:	4313      	orrs	r3, r2
    5f7c:	432b      	orrs	r3, r5
    5f7e:	469b      	mov	fp, r3
    5f80:	00c3      	lsls	r3, r0, #3
    5f82:	4698      	mov	r8, r3
    5f84:	4b67      	ldr	r3, [pc, #412]	; (6124 <__aeabi_dmul+0x1e0>)
    5f86:	2700      	movs	r7, #0
    5f88:	469c      	mov	ip, r3
    5f8a:	2300      	movs	r3, #0
    5f8c:	4466      	add	r6, ip
    5f8e:	9301      	str	r3, [sp, #4]
    5f90:	464a      	mov	r2, r9
    5f92:	0315      	lsls	r5, r2, #12
    5f94:	0050      	lsls	r0, r2, #1
    5f96:	0fd2      	lsrs	r2, r2, #31
    5f98:	4653      	mov	r3, sl
    5f9a:	0b2d      	lsrs	r5, r5, #12
    5f9c:	0d40      	lsrs	r0, r0, #21
    5f9e:	4691      	mov	r9, r2
    5fa0:	d100      	bne.n	5fa4 <__aeabi_dmul+0x60>
    5fa2:	e076      	b.n	6092 <__aeabi_dmul+0x14e>
    5fa4:	4a5e      	ldr	r2, [pc, #376]	; (6120 <__aeabi_dmul+0x1dc>)
    5fa6:	4290      	cmp	r0, r2
    5fa8:	d06c      	beq.n	6084 <__aeabi_dmul+0x140>
    5faa:	2280      	movs	r2, #128	; 0x80
    5fac:	0f5b      	lsrs	r3, r3, #29
    5fae:	0412      	lsls	r2, r2, #16
    5fb0:	4313      	orrs	r3, r2
    5fb2:	4a5c      	ldr	r2, [pc, #368]	; (6124 <__aeabi_dmul+0x1e0>)
    5fb4:	00ed      	lsls	r5, r5, #3
    5fb6:	4694      	mov	ip, r2
    5fb8:	431d      	orrs	r5, r3
    5fba:	4653      	mov	r3, sl
    5fbc:	2200      	movs	r2, #0
    5fbe:	00db      	lsls	r3, r3, #3
    5fc0:	4460      	add	r0, ip
    5fc2:	4649      	mov	r1, r9
    5fc4:	1836      	adds	r6, r6, r0
    5fc6:	1c70      	adds	r0, r6, #1
    5fc8:	4061      	eors	r1, r4
    5fca:	9002      	str	r0, [sp, #8]
    5fcc:	4317      	orrs	r7, r2
    5fce:	2f0f      	cmp	r7, #15
    5fd0:	d900      	bls.n	5fd4 <__aeabi_dmul+0x90>
    5fd2:	e0af      	b.n	6134 <__aeabi_dmul+0x1f0>
    5fd4:	4854      	ldr	r0, [pc, #336]	; (6128 <__aeabi_dmul+0x1e4>)
    5fd6:	00bf      	lsls	r7, r7, #2
    5fd8:	59c7      	ldr	r7, [r0, r7]
    5fda:	46bf      	mov	pc, r7
    5fdc:	465b      	mov	r3, fp
    5fde:	431f      	orrs	r7, r3
    5fe0:	d000      	beq.n	5fe4 <__aeabi_dmul+0xa0>
    5fe2:	e088      	b.n	60f6 <__aeabi_dmul+0x1b2>
    5fe4:	2300      	movs	r3, #0
    5fe6:	469b      	mov	fp, r3
    5fe8:	4698      	mov	r8, r3
    5fea:	3302      	adds	r3, #2
    5fec:	2708      	movs	r7, #8
    5fee:	9301      	str	r3, [sp, #4]
    5ff0:	e7ce      	b.n	5f90 <__aeabi_dmul+0x4c>
    5ff2:	4649      	mov	r1, r9
    5ff4:	2a02      	cmp	r2, #2
    5ff6:	d06a      	beq.n	60ce <__aeabi_dmul+0x18a>
    5ff8:	2a03      	cmp	r2, #3
    5ffa:	d100      	bne.n	5ffe <__aeabi_dmul+0xba>
    5ffc:	e209      	b.n	6412 <__aeabi_dmul+0x4ce>
    5ffe:	2a01      	cmp	r2, #1
    6000:	d000      	beq.n	6004 <__aeabi_dmul+0xc0>
    6002:	e1bb      	b.n	637c <__aeabi_dmul+0x438>
    6004:	4011      	ands	r1, r2
    6006:	2200      	movs	r2, #0
    6008:	2300      	movs	r3, #0
    600a:	2500      	movs	r5, #0
    600c:	4690      	mov	r8, r2
    600e:	b2cc      	uxtb	r4, r1
    6010:	2100      	movs	r1, #0
    6012:	032d      	lsls	r5, r5, #12
    6014:	0d0a      	lsrs	r2, r1, #20
    6016:	0512      	lsls	r2, r2, #20
    6018:	0b2d      	lsrs	r5, r5, #12
    601a:	4315      	orrs	r5, r2
    601c:	4a43      	ldr	r2, [pc, #268]	; (612c <__aeabi_dmul+0x1e8>)
    601e:	051b      	lsls	r3, r3, #20
    6020:	4015      	ands	r5, r2
    6022:	431d      	orrs	r5, r3
    6024:	006d      	lsls	r5, r5, #1
    6026:	07e4      	lsls	r4, r4, #31
    6028:	086d      	lsrs	r5, r5, #1
    602a:	4325      	orrs	r5, r4
    602c:	4640      	mov	r0, r8
    602e:	0029      	movs	r1, r5
    6030:	b007      	add	sp, #28
    6032:	bc3c      	pop	{r2, r3, r4, r5}
    6034:	4690      	mov	r8, r2
    6036:	4699      	mov	r9, r3
    6038:	46a2      	mov	sl, r4
    603a:	46ab      	mov	fp, r5
    603c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    603e:	4303      	orrs	r3, r0
    6040:	d052      	beq.n	60e8 <__aeabi_dmul+0x1a4>
    6042:	465b      	mov	r3, fp
    6044:	2b00      	cmp	r3, #0
    6046:	d100      	bne.n	604a <__aeabi_dmul+0x106>
    6048:	e18a      	b.n	6360 <__aeabi_dmul+0x41c>
    604a:	4658      	mov	r0, fp
    604c:	f000 fef8 	bl	6e40 <__clzsi2>
    6050:	0003      	movs	r3, r0
    6052:	3b0b      	subs	r3, #11
    6054:	2b1c      	cmp	r3, #28
    6056:	dd00      	ble.n	605a <__aeabi_dmul+0x116>
    6058:	e17b      	b.n	6352 <__aeabi_dmul+0x40e>
    605a:	221d      	movs	r2, #29
    605c:	1ad3      	subs	r3, r2, r3
    605e:	003a      	movs	r2, r7
    6060:	0001      	movs	r1, r0
    6062:	465d      	mov	r5, fp
    6064:	40da      	lsrs	r2, r3
    6066:	3908      	subs	r1, #8
    6068:	408d      	lsls	r5, r1
    606a:	0013      	movs	r3, r2
    606c:	408f      	lsls	r7, r1
    606e:	432b      	orrs	r3, r5
    6070:	469b      	mov	fp, r3
    6072:	46b8      	mov	r8, r7
    6074:	4b2e      	ldr	r3, [pc, #184]	; (6130 <__aeabi_dmul+0x1ec>)
    6076:	2700      	movs	r7, #0
    6078:	469c      	mov	ip, r3
    607a:	2300      	movs	r3, #0
    607c:	4460      	add	r0, ip
    607e:	4246      	negs	r6, r0
    6080:	9301      	str	r3, [sp, #4]
    6082:	e785      	b.n	5f90 <__aeabi_dmul+0x4c>
    6084:	4652      	mov	r2, sl
    6086:	432a      	orrs	r2, r5
    6088:	d12c      	bne.n	60e4 <__aeabi_dmul+0x1a0>
    608a:	2500      	movs	r5, #0
    608c:	2300      	movs	r3, #0
    608e:	2202      	movs	r2, #2
    6090:	e797      	b.n	5fc2 <__aeabi_dmul+0x7e>
    6092:	4652      	mov	r2, sl
    6094:	432a      	orrs	r2, r5
    6096:	d021      	beq.n	60dc <__aeabi_dmul+0x198>
    6098:	2d00      	cmp	r5, #0
    609a:	d100      	bne.n	609e <__aeabi_dmul+0x15a>
    609c:	e154      	b.n	6348 <__aeabi_dmul+0x404>
    609e:	0028      	movs	r0, r5
    60a0:	f000 fece 	bl	6e40 <__clzsi2>
    60a4:	0003      	movs	r3, r0
    60a6:	3b0b      	subs	r3, #11
    60a8:	2b1c      	cmp	r3, #28
    60aa:	dd00      	ble.n	60ae <__aeabi_dmul+0x16a>
    60ac:	e146      	b.n	633c <__aeabi_dmul+0x3f8>
    60ae:	211d      	movs	r1, #29
    60b0:	1acb      	subs	r3, r1, r3
    60b2:	4651      	mov	r1, sl
    60b4:	0002      	movs	r2, r0
    60b6:	40d9      	lsrs	r1, r3
    60b8:	4653      	mov	r3, sl
    60ba:	3a08      	subs	r2, #8
    60bc:	4095      	lsls	r5, r2
    60be:	4093      	lsls	r3, r2
    60c0:	430d      	orrs	r5, r1
    60c2:	4a1b      	ldr	r2, [pc, #108]	; (6130 <__aeabi_dmul+0x1ec>)
    60c4:	4694      	mov	ip, r2
    60c6:	4460      	add	r0, ip
    60c8:	4240      	negs	r0, r0
    60ca:	2200      	movs	r2, #0
    60cc:	e779      	b.n	5fc2 <__aeabi_dmul+0x7e>
    60ce:	2401      	movs	r4, #1
    60d0:	2200      	movs	r2, #0
    60d2:	400c      	ands	r4, r1
    60d4:	4b12      	ldr	r3, [pc, #72]	; (6120 <__aeabi_dmul+0x1dc>)
    60d6:	2500      	movs	r5, #0
    60d8:	4690      	mov	r8, r2
    60da:	e799      	b.n	6010 <__aeabi_dmul+0xcc>
    60dc:	2500      	movs	r5, #0
    60de:	2300      	movs	r3, #0
    60e0:	2201      	movs	r2, #1
    60e2:	e76e      	b.n	5fc2 <__aeabi_dmul+0x7e>
    60e4:	2203      	movs	r2, #3
    60e6:	e76c      	b.n	5fc2 <__aeabi_dmul+0x7e>
    60e8:	2300      	movs	r3, #0
    60ea:	469b      	mov	fp, r3
    60ec:	4698      	mov	r8, r3
    60ee:	3301      	adds	r3, #1
    60f0:	2704      	movs	r7, #4
    60f2:	9301      	str	r3, [sp, #4]
    60f4:	e74c      	b.n	5f90 <__aeabi_dmul+0x4c>
    60f6:	2303      	movs	r3, #3
    60f8:	270c      	movs	r7, #12
    60fa:	9301      	str	r3, [sp, #4]
    60fc:	e748      	b.n	5f90 <__aeabi_dmul+0x4c>
    60fe:	2300      	movs	r3, #0
    6100:	2580      	movs	r5, #128	; 0x80
    6102:	4698      	mov	r8, r3
    6104:	2400      	movs	r4, #0
    6106:	032d      	lsls	r5, r5, #12
    6108:	4b05      	ldr	r3, [pc, #20]	; (6120 <__aeabi_dmul+0x1dc>)
    610a:	e781      	b.n	6010 <__aeabi_dmul+0xcc>
    610c:	465d      	mov	r5, fp
    610e:	4643      	mov	r3, r8
    6110:	9a01      	ldr	r2, [sp, #4]
    6112:	e76f      	b.n	5ff4 <__aeabi_dmul+0xb0>
    6114:	465d      	mov	r5, fp
    6116:	4643      	mov	r3, r8
    6118:	0021      	movs	r1, r4
    611a:	9a01      	ldr	r2, [sp, #4]
    611c:	e76a      	b.n	5ff4 <__aeabi_dmul+0xb0>
    611e:	46c0      	nop			; (mov r8, r8)
    6120:	000007ff 	.word	0x000007ff
    6124:	fffffc01 	.word	0xfffffc01
    6128:	00006f90 	.word	0x00006f90
    612c:	800fffff 	.word	0x800fffff
    6130:	000003f3 	.word	0x000003f3
    6134:	4642      	mov	r2, r8
    6136:	0c12      	lsrs	r2, r2, #16
    6138:	4691      	mov	r9, r2
    613a:	0c1a      	lsrs	r2, r3, #16
    613c:	4694      	mov	ip, r2
    613e:	4642      	mov	r2, r8
    6140:	0417      	lsls	r7, r2, #16
    6142:	464a      	mov	r2, r9
    6144:	041b      	lsls	r3, r3, #16
    6146:	0c1b      	lsrs	r3, r3, #16
    6148:	435a      	muls	r2, r3
    614a:	4660      	mov	r0, ip
    614c:	4690      	mov	r8, r2
    614e:	464a      	mov	r2, r9
    6150:	4342      	muls	r2, r0
    6152:	0010      	movs	r0, r2
    6154:	9203      	str	r2, [sp, #12]
    6156:	4662      	mov	r2, ip
    6158:	001c      	movs	r4, r3
    615a:	0c3f      	lsrs	r7, r7, #16
    615c:	437a      	muls	r2, r7
    615e:	437c      	muls	r4, r7
    6160:	4442      	add	r2, r8
    6162:	9201      	str	r2, [sp, #4]
    6164:	0c22      	lsrs	r2, r4, #16
    6166:	4692      	mov	sl, r2
    6168:	9a01      	ldr	r2, [sp, #4]
    616a:	4452      	add	r2, sl
    616c:	4590      	cmp	r8, r2
    616e:	d906      	bls.n	617e <__aeabi_dmul+0x23a>
    6170:	4682      	mov	sl, r0
    6172:	2080      	movs	r0, #128	; 0x80
    6174:	0240      	lsls	r0, r0, #9
    6176:	4680      	mov	r8, r0
    6178:	44c2      	add	sl, r8
    617a:	4650      	mov	r0, sl
    617c:	9003      	str	r0, [sp, #12]
    617e:	0c10      	lsrs	r0, r2, #16
    6180:	9004      	str	r0, [sp, #16]
    6182:	4648      	mov	r0, r9
    6184:	0424      	lsls	r4, r4, #16
    6186:	0c24      	lsrs	r4, r4, #16
    6188:	0412      	lsls	r2, r2, #16
    618a:	1912      	adds	r2, r2, r4
    618c:	9205      	str	r2, [sp, #20]
    618e:	0c2a      	lsrs	r2, r5, #16
    6190:	042d      	lsls	r5, r5, #16
    6192:	0c2d      	lsrs	r5, r5, #16
    6194:	4368      	muls	r0, r5
    6196:	002c      	movs	r4, r5
    6198:	4682      	mov	sl, r0
    619a:	4648      	mov	r0, r9
    619c:	437c      	muls	r4, r7
    619e:	4350      	muls	r0, r2
    61a0:	4681      	mov	r9, r0
    61a2:	0c20      	lsrs	r0, r4, #16
    61a4:	4680      	mov	r8, r0
    61a6:	4357      	muls	r7, r2
    61a8:	4457      	add	r7, sl
    61aa:	4447      	add	r7, r8
    61ac:	45ba      	cmp	sl, r7
    61ae:	d903      	bls.n	61b8 <__aeabi_dmul+0x274>
    61b0:	2080      	movs	r0, #128	; 0x80
    61b2:	0240      	lsls	r0, r0, #9
    61b4:	4680      	mov	r8, r0
    61b6:	44c1      	add	r9, r8
    61b8:	0c38      	lsrs	r0, r7, #16
    61ba:	043f      	lsls	r7, r7, #16
    61bc:	46b8      	mov	r8, r7
    61be:	4448      	add	r0, r9
    61c0:	0424      	lsls	r4, r4, #16
    61c2:	0c24      	lsrs	r4, r4, #16
    61c4:	9001      	str	r0, [sp, #4]
    61c6:	9804      	ldr	r0, [sp, #16]
    61c8:	44a0      	add	r8, r4
    61ca:	4440      	add	r0, r8
    61cc:	9004      	str	r0, [sp, #16]
    61ce:	4658      	mov	r0, fp
    61d0:	0c00      	lsrs	r0, r0, #16
    61d2:	4681      	mov	r9, r0
    61d4:	4658      	mov	r0, fp
    61d6:	0404      	lsls	r4, r0, #16
    61d8:	0c20      	lsrs	r0, r4, #16
    61da:	4682      	mov	sl, r0
    61dc:	0007      	movs	r7, r0
    61de:	4648      	mov	r0, r9
    61e0:	435f      	muls	r7, r3
    61e2:	464c      	mov	r4, r9
    61e4:	4343      	muls	r3, r0
    61e6:	4660      	mov	r0, ip
    61e8:	4360      	muls	r0, r4
    61ea:	4664      	mov	r4, ip
    61ec:	4683      	mov	fp, r0
    61ee:	4650      	mov	r0, sl
    61f0:	4344      	muls	r4, r0
    61f2:	0c38      	lsrs	r0, r7, #16
    61f4:	4684      	mov	ip, r0
    61f6:	18e4      	adds	r4, r4, r3
    61f8:	4464      	add	r4, ip
    61fa:	42a3      	cmp	r3, r4
    61fc:	d903      	bls.n	6206 <__aeabi_dmul+0x2c2>
    61fe:	2380      	movs	r3, #128	; 0x80
    6200:	025b      	lsls	r3, r3, #9
    6202:	469c      	mov	ip, r3
    6204:	44e3      	add	fp, ip
    6206:	4648      	mov	r0, r9
    6208:	043f      	lsls	r7, r7, #16
    620a:	0c23      	lsrs	r3, r4, #16
    620c:	0c3f      	lsrs	r7, r7, #16
    620e:	0424      	lsls	r4, r4, #16
    6210:	19e4      	adds	r4, r4, r7
    6212:	4657      	mov	r7, sl
    6214:	4368      	muls	r0, r5
    6216:	436f      	muls	r7, r5
    6218:	4684      	mov	ip, r0
    621a:	464d      	mov	r5, r9
    621c:	4650      	mov	r0, sl
    621e:	4355      	muls	r5, r2
    6220:	4342      	muls	r2, r0
    6222:	0c38      	lsrs	r0, r7, #16
    6224:	4681      	mov	r9, r0
    6226:	4462      	add	r2, ip
    6228:	444a      	add	r2, r9
    622a:	445b      	add	r3, fp
    622c:	4594      	cmp	ip, r2
    622e:	d903      	bls.n	6238 <__aeabi_dmul+0x2f4>
    6230:	2080      	movs	r0, #128	; 0x80
    6232:	0240      	lsls	r0, r0, #9
    6234:	4684      	mov	ip, r0
    6236:	4465      	add	r5, ip
    6238:	9803      	ldr	r0, [sp, #12]
    623a:	043f      	lsls	r7, r7, #16
    623c:	4683      	mov	fp, r0
    623e:	9804      	ldr	r0, [sp, #16]
    6240:	0c3f      	lsrs	r7, r7, #16
    6242:	4684      	mov	ip, r0
    6244:	44e3      	add	fp, ip
    6246:	45c3      	cmp	fp, r8
    6248:	4180      	sbcs	r0, r0
    624a:	4240      	negs	r0, r0
    624c:	4682      	mov	sl, r0
    624e:	0410      	lsls	r0, r2, #16
    6250:	4684      	mov	ip, r0
    6252:	9801      	ldr	r0, [sp, #4]
    6254:	4467      	add	r7, ip
    6256:	4684      	mov	ip, r0
    6258:	4467      	add	r7, ip
    625a:	44a3      	add	fp, r4
    625c:	46bc      	mov	ip, r7
    625e:	45a3      	cmp	fp, r4
    6260:	41a4      	sbcs	r4, r4
    6262:	4699      	mov	r9, r3
    6264:	44d4      	add	ip, sl
    6266:	4264      	negs	r4, r4
    6268:	4287      	cmp	r7, r0
    626a:	41bf      	sbcs	r7, r7
    626c:	45d4      	cmp	ip, sl
    626e:	4180      	sbcs	r0, r0
    6270:	44e1      	add	r9, ip
    6272:	46a0      	mov	r8, r4
    6274:	4599      	cmp	r9, r3
    6276:	419b      	sbcs	r3, r3
    6278:	427f      	negs	r7, r7
    627a:	4240      	negs	r0, r0
    627c:	44c8      	add	r8, r9
    627e:	4307      	orrs	r7, r0
    6280:	0c12      	lsrs	r2, r2, #16
    6282:	18ba      	adds	r2, r7, r2
    6284:	45a0      	cmp	r8, r4
    6286:	41a4      	sbcs	r4, r4
    6288:	425f      	negs	r7, r3
    628a:	003b      	movs	r3, r7
    628c:	4264      	negs	r4, r4
    628e:	4323      	orrs	r3, r4
    6290:	18d7      	adds	r7, r2, r3
    6292:	4643      	mov	r3, r8
    6294:	197d      	adds	r5, r7, r5
    6296:	0ddb      	lsrs	r3, r3, #23
    6298:	026d      	lsls	r5, r5, #9
    629a:	431d      	orrs	r5, r3
    629c:	465b      	mov	r3, fp
    629e:	025a      	lsls	r2, r3, #9
    62a0:	9b05      	ldr	r3, [sp, #20]
    62a2:	431a      	orrs	r2, r3
    62a4:	1e53      	subs	r3, r2, #1
    62a6:	419a      	sbcs	r2, r3
    62a8:	465b      	mov	r3, fp
    62aa:	0ddb      	lsrs	r3, r3, #23
    62ac:	431a      	orrs	r2, r3
    62ae:	4643      	mov	r3, r8
    62b0:	025b      	lsls	r3, r3, #9
    62b2:	4313      	orrs	r3, r2
    62b4:	01ea      	lsls	r2, r5, #7
    62b6:	d507      	bpl.n	62c8 <__aeabi_dmul+0x384>
    62b8:	2201      	movs	r2, #1
    62ba:	085c      	lsrs	r4, r3, #1
    62bc:	4013      	ands	r3, r2
    62be:	4323      	orrs	r3, r4
    62c0:	07ea      	lsls	r2, r5, #31
    62c2:	9e02      	ldr	r6, [sp, #8]
    62c4:	4313      	orrs	r3, r2
    62c6:	086d      	lsrs	r5, r5, #1
    62c8:	4a57      	ldr	r2, [pc, #348]	; (6428 <__aeabi_dmul+0x4e4>)
    62ca:	18b2      	adds	r2, r6, r2
    62cc:	2a00      	cmp	r2, #0
    62ce:	dd4b      	ble.n	6368 <__aeabi_dmul+0x424>
    62d0:	0758      	lsls	r0, r3, #29
    62d2:	d009      	beq.n	62e8 <__aeabi_dmul+0x3a4>
    62d4:	200f      	movs	r0, #15
    62d6:	4018      	ands	r0, r3
    62d8:	2804      	cmp	r0, #4
    62da:	d005      	beq.n	62e8 <__aeabi_dmul+0x3a4>
    62dc:	1d18      	adds	r0, r3, #4
    62de:	4298      	cmp	r0, r3
    62e0:	419b      	sbcs	r3, r3
    62e2:	425b      	negs	r3, r3
    62e4:	18ed      	adds	r5, r5, r3
    62e6:	0003      	movs	r3, r0
    62e8:	01e8      	lsls	r0, r5, #7
    62ea:	d504      	bpl.n	62f6 <__aeabi_dmul+0x3b2>
    62ec:	4a4f      	ldr	r2, [pc, #316]	; (642c <__aeabi_dmul+0x4e8>)
    62ee:	4015      	ands	r5, r2
    62f0:	2280      	movs	r2, #128	; 0x80
    62f2:	00d2      	lsls	r2, r2, #3
    62f4:	18b2      	adds	r2, r6, r2
    62f6:	484e      	ldr	r0, [pc, #312]	; (6430 <__aeabi_dmul+0x4ec>)
    62f8:	4282      	cmp	r2, r0
    62fa:	dd00      	ble.n	62fe <__aeabi_dmul+0x3ba>
    62fc:	e6e7      	b.n	60ce <__aeabi_dmul+0x18a>
    62fe:	2401      	movs	r4, #1
    6300:	08db      	lsrs	r3, r3, #3
    6302:	0768      	lsls	r0, r5, #29
    6304:	4318      	orrs	r0, r3
    6306:	026d      	lsls	r5, r5, #9
    6308:	0553      	lsls	r3, r2, #21
    630a:	4680      	mov	r8, r0
    630c:	0b2d      	lsrs	r5, r5, #12
    630e:	0d5b      	lsrs	r3, r3, #21
    6310:	400c      	ands	r4, r1
    6312:	e67d      	b.n	6010 <__aeabi_dmul+0xcc>
    6314:	2280      	movs	r2, #128	; 0x80
    6316:	4659      	mov	r1, fp
    6318:	0312      	lsls	r2, r2, #12
    631a:	4211      	tst	r1, r2
    631c:	d008      	beq.n	6330 <__aeabi_dmul+0x3ec>
    631e:	4215      	tst	r5, r2
    6320:	d106      	bne.n	6330 <__aeabi_dmul+0x3ec>
    6322:	4315      	orrs	r5, r2
    6324:	032d      	lsls	r5, r5, #12
    6326:	4698      	mov	r8, r3
    6328:	0b2d      	lsrs	r5, r5, #12
    632a:	464c      	mov	r4, r9
    632c:	4b41      	ldr	r3, [pc, #260]	; (6434 <__aeabi_dmul+0x4f0>)
    632e:	e66f      	b.n	6010 <__aeabi_dmul+0xcc>
    6330:	465d      	mov	r5, fp
    6332:	4315      	orrs	r5, r2
    6334:	032d      	lsls	r5, r5, #12
    6336:	0b2d      	lsrs	r5, r5, #12
    6338:	4b3e      	ldr	r3, [pc, #248]	; (6434 <__aeabi_dmul+0x4f0>)
    633a:	e669      	b.n	6010 <__aeabi_dmul+0xcc>
    633c:	0003      	movs	r3, r0
    633e:	4655      	mov	r5, sl
    6340:	3b28      	subs	r3, #40	; 0x28
    6342:	409d      	lsls	r5, r3
    6344:	2300      	movs	r3, #0
    6346:	e6bc      	b.n	60c2 <__aeabi_dmul+0x17e>
    6348:	4650      	mov	r0, sl
    634a:	f000 fd79 	bl	6e40 <__clzsi2>
    634e:	3020      	adds	r0, #32
    6350:	e6a8      	b.n	60a4 <__aeabi_dmul+0x160>
    6352:	0003      	movs	r3, r0
    6354:	3b28      	subs	r3, #40	; 0x28
    6356:	409f      	lsls	r7, r3
    6358:	2300      	movs	r3, #0
    635a:	46bb      	mov	fp, r7
    635c:	4698      	mov	r8, r3
    635e:	e689      	b.n	6074 <__aeabi_dmul+0x130>
    6360:	f000 fd6e 	bl	6e40 <__clzsi2>
    6364:	3020      	adds	r0, #32
    6366:	e673      	b.n	6050 <__aeabi_dmul+0x10c>
    6368:	2401      	movs	r4, #1
    636a:	1aa6      	subs	r6, r4, r2
    636c:	2e38      	cmp	r6, #56	; 0x38
    636e:	dd07      	ble.n	6380 <__aeabi_dmul+0x43c>
    6370:	2200      	movs	r2, #0
    6372:	400c      	ands	r4, r1
    6374:	2300      	movs	r3, #0
    6376:	2500      	movs	r5, #0
    6378:	4690      	mov	r8, r2
    637a:	e649      	b.n	6010 <__aeabi_dmul+0xcc>
    637c:	9e02      	ldr	r6, [sp, #8]
    637e:	e7a3      	b.n	62c8 <__aeabi_dmul+0x384>
    6380:	2e1f      	cmp	r6, #31
    6382:	dc20      	bgt.n	63c6 <__aeabi_dmul+0x482>
    6384:	2220      	movs	r2, #32
    6386:	002c      	movs	r4, r5
    6388:	0018      	movs	r0, r3
    638a:	1b92      	subs	r2, r2, r6
    638c:	40f0      	lsrs	r0, r6
    638e:	4094      	lsls	r4, r2
    6390:	4093      	lsls	r3, r2
    6392:	4304      	orrs	r4, r0
    6394:	1e58      	subs	r0, r3, #1
    6396:	4183      	sbcs	r3, r0
    6398:	431c      	orrs	r4, r3
    639a:	40f5      	lsrs	r5, r6
    639c:	0763      	lsls	r3, r4, #29
    639e:	d009      	beq.n	63b4 <__aeabi_dmul+0x470>
    63a0:	230f      	movs	r3, #15
    63a2:	4023      	ands	r3, r4
    63a4:	2b04      	cmp	r3, #4
    63a6:	d005      	beq.n	63b4 <__aeabi_dmul+0x470>
    63a8:	0023      	movs	r3, r4
    63aa:	1d1c      	adds	r4, r3, #4
    63ac:	429c      	cmp	r4, r3
    63ae:	4192      	sbcs	r2, r2
    63b0:	4252      	negs	r2, r2
    63b2:	18ad      	adds	r5, r5, r2
    63b4:	022b      	lsls	r3, r5, #8
    63b6:	d51f      	bpl.n	63f8 <__aeabi_dmul+0x4b4>
    63b8:	2401      	movs	r4, #1
    63ba:	2200      	movs	r2, #0
    63bc:	400c      	ands	r4, r1
    63be:	2301      	movs	r3, #1
    63c0:	2500      	movs	r5, #0
    63c2:	4690      	mov	r8, r2
    63c4:	e624      	b.n	6010 <__aeabi_dmul+0xcc>
    63c6:	201f      	movs	r0, #31
    63c8:	002c      	movs	r4, r5
    63ca:	4240      	negs	r0, r0
    63cc:	1a82      	subs	r2, r0, r2
    63ce:	40d4      	lsrs	r4, r2
    63d0:	2e20      	cmp	r6, #32
    63d2:	d01c      	beq.n	640e <__aeabi_dmul+0x4ca>
    63d4:	2240      	movs	r2, #64	; 0x40
    63d6:	1b96      	subs	r6, r2, r6
    63d8:	40b5      	lsls	r5, r6
    63da:	432b      	orrs	r3, r5
    63dc:	1e58      	subs	r0, r3, #1
    63de:	4183      	sbcs	r3, r0
    63e0:	2007      	movs	r0, #7
    63e2:	4323      	orrs	r3, r4
    63e4:	4018      	ands	r0, r3
    63e6:	2500      	movs	r5, #0
    63e8:	2800      	cmp	r0, #0
    63ea:	d009      	beq.n	6400 <__aeabi_dmul+0x4bc>
    63ec:	220f      	movs	r2, #15
    63ee:	2500      	movs	r5, #0
    63f0:	401a      	ands	r2, r3
    63f2:	001c      	movs	r4, r3
    63f4:	2a04      	cmp	r2, #4
    63f6:	d1d8      	bne.n	63aa <__aeabi_dmul+0x466>
    63f8:	0023      	movs	r3, r4
    63fa:	0768      	lsls	r0, r5, #29
    63fc:	026d      	lsls	r5, r5, #9
    63fe:	0b2d      	lsrs	r5, r5, #12
    6400:	2401      	movs	r4, #1
    6402:	08db      	lsrs	r3, r3, #3
    6404:	4303      	orrs	r3, r0
    6406:	4698      	mov	r8, r3
    6408:	400c      	ands	r4, r1
    640a:	2300      	movs	r3, #0
    640c:	e600      	b.n	6010 <__aeabi_dmul+0xcc>
    640e:	2500      	movs	r5, #0
    6410:	e7e3      	b.n	63da <__aeabi_dmul+0x496>
    6412:	2280      	movs	r2, #128	; 0x80
    6414:	2401      	movs	r4, #1
    6416:	0312      	lsls	r2, r2, #12
    6418:	4315      	orrs	r5, r2
    641a:	032d      	lsls	r5, r5, #12
    641c:	4698      	mov	r8, r3
    641e:	0b2d      	lsrs	r5, r5, #12
    6420:	400c      	ands	r4, r1
    6422:	4b04      	ldr	r3, [pc, #16]	; (6434 <__aeabi_dmul+0x4f0>)
    6424:	e5f4      	b.n	6010 <__aeabi_dmul+0xcc>
    6426:	46c0      	nop			; (mov r8, r8)
    6428:	000003ff 	.word	0x000003ff
    642c:	feffffff 	.word	0xfeffffff
    6430:	000007fe 	.word	0x000007fe
    6434:	000007ff 	.word	0x000007ff

00006438 <__aeabi_dsub>:
    6438:	b5f0      	push	{r4, r5, r6, r7, lr}
    643a:	4657      	mov	r7, sl
    643c:	464e      	mov	r6, r9
    643e:	4645      	mov	r5, r8
    6440:	b4e0      	push	{r5, r6, r7}
    6442:	000e      	movs	r6, r1
    6444:	0011      	movs	r1, r2
    6446:	0ff2      	lsrs	r2, r6, #31
    6448:	4692      	mov	sl, r2
    644a:	00c5      	lsls	r5, r0, #3
    644c:	0f42      	lsrs	r2, r0, #29
    644e:	0318      	lsls	r0, r3, #12
    6450:	0337      	lsls	r7, r6, #12
    6452:	0074      	lsls	r4, r6, #1
    6454:	0a40      	lsrs	r0, r0, #9
    6456:	0f4e      	lsrs	r6, r1, #29
    6458:	0a7f      	lsrs	r7, r7, #9
    645a:	4330      	orrs	r0, r6
    645c:	4ecf      	ldr	r6, [pc, #828]	; (679c <__aeabi_dsub+0x364>)
    645e:	4317      	orrs	r7, r2
    6460:	005a      	lsls	r2, r3, #1
    6462:	0d64      	lsrs	r4, r4, #21
    6464:	0d52      	lsrs	r2, r2, #21
    6466:	0fdb      	lsrs	r3, r3, #31
    6468:	00c9      	lsls	r1, r1, #3
    646a:	42b2      	cmp	r2, r6
    646c:	d100      	bne.n	6470 <__aeabi_dsub+0x38>
    646e:	e0e5      	b.n	663c <__aeabi_dsub+0x204>
    6470:	2601      	movs	r6, #1
    6472:	4073      	eors	r3, r6
    6474:	1aa6      	subs	r6, r4, r2
    6476:	46b4      	mov	ip, r6
    6478:	4553      	cmp	r3, sl
    647a:	d100      	bne.n	647e <__aeabi_dsub+0x46>
    647c:	e0af      	b.n	65de <__aeabi_dsub+0x1a6>
    647e:	2e00      	cmp	r6, #0
    6480:	dc00      	bgt.n	6484 <__aeabi_dsub+0x4c>
    6482:	e10d      	b.n	66a0 <__aeabi_dsub+0x268>
    6484:	2a00      	cmp	r2, #0
    6486:	d13a      	bne.n	64fe <__aeabi_dsub+0xc6>
    6488:	0003      	movs	r3, r0
    648a:	430b      	orrs	r3, r1
    648c:	d000      	beq.n	6490 <__aeabi_dsub+0x58>
    648e:	e0e4      	b.n	665a <__aeabi_dsub+0x222>
    6490:	076b      	lsls	r3, r5, #29
    6492:	d009      	beq.n	64a8 <__aeabi_dsub+0x70>
    6494:	230f      	movs	r3, #15
    6496:	402b      	ands	r3, r5
    6498:	2b04      	cmp	r3, #4
    649a:	d005      	beq.n	64a8 <__aeabi_dsub+0x70>
    649c:	1d2b      	adds	r3, r5, #4
    649e:	42ab      	cmp	r3, r5
    64a0:	41ad      	sbcs	r5, r5
    64a2:	426d      	negs	r5, r5
    64a4:	197f      	adds	r7, r7, r5
    64a6:	001d      	movs	r5, r3
    64a8:	023b      	lsls	r3, r7, #8
    64aa:	d400      	bmi.n	64ae <__aeabi_dsub+0x76>
    64ac:	e088      	b.n	65c0 <__aeabi_dsub+0x188>
    64ae:	4bbb      	ldr	r3, [pc, #748]	; (679c <__aeabi_dsub+0x364>)
    64b0:	3401      	adds	r4, #1
    64b2:	429c      	cmp	r4, r3
    64b4:	d100      	bne.n	64b8 <__aeabi_dsub+0x80>
    64b6:	e110      	b.n	66da <__aeabi_dsub+0x2a2>
    64b8:	003a      	movs	r2, r7
    64ba:	4bb9      	ldr	r3, [pc, #740]	; (67a0 <__aeabi_dsub+0x368>)
    64bc:	4651      	mov	r1, sl
    64be:	401a      	ands	r2, r3
    64c0:	2301      	movs	r3, #1
    64c2:	0750      	lsls	r0, r2, #29
    64c4:	08ed      	lsrs	r5, r5, #3
    64c6:	0252      	lsls	r2, r2, #9
    64c8:	0564      	lsls	r4, r4, #21
    64ca:	4305      	orrs	r5, r0
    64cc:	0b12      	lsrs	r2, r2, #12
    64ce:	0d64      	lsrs	r4, r4, #21
    64d0:	400b      	ands	r3, r1
    64d2:	2100      	movs	r1, #0
    64d4:	0028      	movs	r0, r5
    64d6:	0312      	lsls	r2, r2, #12
    64d8:	0d0d      	lsrs	r5, r1, #20
    64da:	0b12      	lsrs	r2, r2, #12
    64dc:	0564      	lsls	r4, r4, #21
    64de:	052d      	lsls	r5, r5, #20
    64e0:	4315      	orrs	r5, r2
    64e2:	0862      	lsrs	r2, r4, #1
    64e4:	4caf      	ldr	r4, [pc, #700]	; (67a4 <__aeabi_dsub+0x36c>)
    64e6:	07db      	lsls	r3, r3, #31
    64e8:	402c      	ands	r4, r5
    64ea:	4314      	orrs	r4, r2
    64ec:	0064      	lsls	r4, r4, #1
    64ee:	0864      	lsrs	r4, r4, #1
    64f0:	431c      	orrs	r4, r3
    64f2:	0021      	movs	r1, r4
    64f4:	bc1c      	pop	{r2, r3, r4}
    64f6:	4690      	mov	r8, r2
    64f8:	4699      	mov	r9, r3
    64fa:	46a2      	mov	sl, r4
    64fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    64fe:	4ba7      	ldr	r3, [pc, #668]	; (679c <__aeabi_dsub+0x364>)
    6500:	429c      	cmp	r4, r3
    6502:	d0c5      	beq.n	6490 <__aeabi_dsub+0x58>
    6504:	2380      	movs	r3, #128	; 0x80
    6506:	041b      	lsls	r3, r3, #16
    6508:	4318      	orrs	r0, r3
    650a:	4663      	mov	r3, ip
    650c:	2b38      	cmp	r3, #56	; 0x38
    650e:	dd00      	ble.n	6512 <__aeabi_dsub+0xda>
    6510:	e0fd      	b.n	670e <__aeabi_dsub+0x2d6>
    6512:	2b1f      	cmp	r3, #31
    6514:	dd00      	ble.n	6518 <__aeabi_dsub+0xe0>
    6516:	e130      	b.n	677a <__aeabi_dsub+0x342>
    6518:	4662      	mov	r2, ip
    651a:	2320      	movs	r3, #32
    651c:	1a9b      	subs	r3, r3, r2
    651e:	0002      	movs	r2, r0
    6520:	409a      	lsls	r2, r3
    6522:	4666      	mov	r6, ip
    6524:	4690      	mov	r8, r2
    6526:	000a      	movs	r2, r1
    6528:	4099      	lsls	r1, r3
    652a:	40f2      	lsrs	r2, r6
    652c:	4646      	mov	r6, r8
    652e:	1e4b      	subs	r3, r1, #1
    6530:	4199      	sbcs	r1, r3
    6532:	4332      	orrs	r2, r6
    6534:	4311      	orrs	r1, r2
    6536:	4663      	mov	r3, ip
    6538:	0002      	movs	r2, r0
    653a:	40da      	lsrs	r2, r3
    653c:	1a69      	subs	r1, r5, r1
    653e:	428d      	cmp	r5, r1
    6540:	419b      	sbcs	r3, r3
    6542:	000d      	movs	r5, r1
    6544:	1aba      	subs	r2, r7, r2
    6546:	425b      	negs	r3, r3
    6548:	1ad7      	subs	r7, r2, r3
    654a:	023b      	lsls	r3, r7, #8
    654c:	d535      	bpl.n	65ba <__aeabi_dsub+0x182>
    654e:	027a      	lsls	r2, r7, #9
    6550:	0a53      	lsrs	r3, r2, #9
    6552:	4698      	mov	r8, r3
    6554:	4643      	mov	r3, r8
    6556:	2b00      	cmp	r3, #0
    6558:	d100      	bne.n	655c <__aeabi_dsub+0x124>
    655a:	e0c4      	b.n	66e6 <__aeabi_dsub+0x2ae>
    655c:	4640      	mov	r0, r8
    655e:	f000 fc6f 	bl	6e40 <__clzsi2>
    6562:	0003      	movs	r3, r0
    6564:	3b08      	subs	r3, #8
    6566:	2b1f      	cmp	r3, #31
    6568:	dd00      	ble.n	656c <__aeabi_dsub+0x134>
    656a:	e0c5      	b.n	66f8 <__aeabi_dsub+0x2c0>
    656c:	2220      	movs	r2, #32
    656e:	0029      	movs	r1, r5
    6570:	1ad2      	subs	r2, r2, r3
    6572:	4647      	mov	r7, r8
    6574:	40d1      	lsrs	r1, r2
    6576:	409f      	lsls	r7, r3
    6578:	000a      	movs	r2, r1
    657a:	409d      	lsls	r5, r3
    657c:	433a      	orrs	r2, r7
    657e:	429c      	cmp	r4, r3
    6580:	dd00      	ble.n	6584 <__aeabi_dsub+0x14c>
    6582:	e0c0      	b.n	6706 <__aeabi_dsub+0x2ce>
    6584:	1b1c      	subs	r4, r3, r4
    6586:	1c63      	adds	r3, r4, #1
    6588:	2b1f      	cmp	r3, #31
    658a:	dd00      	ble.n	658e <__aeabi_dsub+0x156>
    658c:	e0e4      	b.n	6758 <__aeabi_dsub+0x320>
    658e:	2120      	movs	r1, #32
    6590:	0014      	movs	r4, r2
    6592:	0028      	movs	r0, r5
    6594:	1ac9      	subs	r1, r1, r3
    6596:	40d8      	lsrs	r0, r3
    6598:	408c      	lsls	r4, r1
    659a:	408d      	lsls	r5, r1
    659c:	4304      	orrs	r4, r0
    659e:	40da      	lsrs	r2, r3
    65a0:	1e68      	subs	r0, r5, #1
    65a2:	4185      	sbcs	r5, r0
    65a4:	0017      	movs	r7, r2
    65a6:	4325      	orrs	r5, r4
    65a8:	2400      	movs	r4, #0
    65aa:	e771      	b.n	6490 <__aeabi_dsub+0x58>
    65ac:	4642      	mov	r2, r8
    65ae:	4663      	mov	r3, ip
    65b0:	431a      	orrs	r2, r3
    65b2:	d100      	bne.n	65b6 <__aeabi_dsub+0x17e>
    65b4:	e24c      	b.n	6a50 <__aeabi_dsub+0x618>
    65b6:	4667      	mov	r7, ip
    65b8:	4645      	mov	r5, r8
    65ba:	076b      	lsls	r3, r5, #29
    65bc:	d000      	beq.n	65c0 <__aeabi_dsub+0x188>
    65be:	e769      	b.n	6494 <__aeabi_dsub+0x5c>
    65c0:	2301      	movs	r3, #1
    65c2:	4651      	mov	r1, sl
    65c4:	0778      	lsls	r0, r7, #29
    65c6:	08ed      	lsrs	r5, r5, #3
    65c8:	08fa      	lsrs	r2, r7, #3
    65ca:	400b      	ands	r3, r1
    65cc:	4305      	orrs	r5, r0
    65ce:	4973      	ldr	r1, [pc, #460]	; (679c <__aeabi_dsub+0x364>)
    65d0:	428c      	cmp	r4, r1
    65d2:	d038      	beq.n	6646 <__aeabi_dsub+0x20e>
    65d4:	0312      	lsls	r2, r2, #12
    65d6:	0564      	lsls	r4, r4, #21
    65d8:	0b12      	lsrs	r2, r2, #12
    65da:	0d64      	lsrs	r4, r4, #21
    65dc:	e779      	b.n	64d2 <__aeabi_dsub+0x9a>
    65de:	2e00      	cmp	r6, #0
    65e0:	dc00      	bgt.n	65e4 <__aeabi_dsub+0x1ac>
    65e2:	e09a      	b.n	671a <__aeabi_dsub+0x2e2>
    65e4:	2a00      	cmp	r2, #0
    65e6:	d047      	beq.n	6678 <__aeabi_dsub+0x240>
    65e8:	4a6c      	ldr	r2, [pc, #432]	; (679c <__aeabi_dsub+0x364>)
    65ea:	4294      	cmp	r4, r2
    65ec:	d100      	bne.n	65f0 <__aeabi_dsub+0x1b8>
    65ee:	e74f      	b.n	6490 <__aeabi_dsub+0x58>
    65f0:	2280      	movs	r2, #128	; 0x80
    65f2:	0412      	lsls	r2, r2, #16
    65f4:	4310      	orrs	r0, r2
    65f6:	4662      	mov	r2, ip
    65f8:	2a38      	cmp	r2, #56	; 0x38
    65fa:	dc00      	bgt.n	65fe <__aeabi_dsub+0x1c6>
    65fc:	e108      	b.n	6810 <__aeabi_dsub+0x3d8>
    65fe:	4301      	orrs	r1, r0
    6600:	1e48      	subs	r0, r1, #1
    6602:	4181      	sbcs	r1, r0
    6604:	2200      	movs	r2, #0
    6606:	b2c9      	uxtb	r1, r1
    6608:	1949      	adds	r1, r1, r5
    660a:	19d2      	adds	r2, r2, r7
    660c:	42a9      	cmp	r1, r5
    660e:	41bf      	sbcs	r7, r7
    6610:	000d      	movs	r5, r1
    6612:	427f      	negs	r7, r7
    6614:	18bf      	adds	r7, r7, r2
    6616:	023a      	lsls	r2, r7, #8
    6618:	d400      	bmi.n	661c <__aeabi_dsub+0x1e4>
    661a:	e142      	b.n	68a2 <__aeabi_dsub+0x46a>
    661c:	4a5f      	ldr	r2, [pc, #380]	; (679c <__aeabi_dsub+0x364>)
    661e:	3401      	adds	r4, #1
    6620:	4294      	cmp	r4, r2
    6622:	d100      	bne.n	6626 <__aeabi_dsub+0x1ee>
    6624:	e14e      	b.n	68c4 <__aeabi_dsub+0x48c>
    6626:	2001      	movs	r0, #1
    6628:	4a5d      	ldr	r2, [pc, #372]	; (67a0 <__aeabi_dsub+0x368>)
    662a:	0869      	lsrs	r1, r5, #1
    662c:	403a      	ands	r2, r7
    662e:	4028      	ands	r0, r5
    6630:	4308      	orrs	r0, r1
    6632:	07d5      	lsls	r5, r2, #31
    6634:	4305      	orrs	r5, r0
    6636:	0857      	lsrs	r7, r2, #1
    6638:	469a      	mov	sl, r3
    663a:	e729      	b.n	6490 <__aeabi_dsub+0x58>
    663c:	0006      	movs	r6, r0
    663e:	430e      	orrs	r6, r1
    6640:	d000      	beq.n	6644 <__aeabi_dsub+0x20c>
    6642:	e717      	b.n	6474 <__aeabi_dsub+0x3c>
    6644:	e714      	b.n	6470 <__aeabi_dsub+0x38>
    6646:	0029      	movs	r1, r5
    6648:	4311      	orrs	r1, r2
    664a:	d100      	bne.n	664e <__aeabi_dsub+0x216>
    664c:	e1f9      	b.n	6a42 <__aeabi_dsub+0x60a>
    664e:	2180      	movs	r1, #128	; 0x80
    6650:	0309      	lsls	r1, r1, #12
    6652:	430a      	orrs	r2, r1
    6654:	0312      	lsls	r2, r2, #12
    6656:	0b12      	lsrs	r2, r2, #12
    6658:	e73b      	b.n	64d2 <__aeabi_dsub+0x9a>
    665a:	2301      	movs	r3, #1
    665c:	425b      	negs	r3, r3
    665e:	4698      	mov	r8, r3
    6660:	44c4      	add	ip, r8
    6662:	4663      	mov	r3, ip
    6664:	2b00      	cmp	r3, #0
    6666:	d172      	bne.n	674e <__aeabi_dsub+0x316>
    6668:	1a69      	subs	r1, r5, r1
    666a:	428d      	cmp	r5, r1
    666c:	419b      	sbcs	r3, r3
    666e:	1a3f      	subs	r7, r7, r0
    6670:	425b      	negs	r3, r3
    6672:	1aff      	subs	r7, r7, r3
    6674:	000d      	movs	r5, r1
    6676:	e768      	b.n	654a <__aeabi_dsub+0x112>
    6678:	0002      	movs	r2, r0
    667a:	430a      	orrs	r2, r1
    667c:	d100      	bne.n	6680 <__aeabi_dsub+0x248>
    667e:	e707      	b.n	6490 <__aeabi_dsub+0x58>
    6680:	2201      	movs	r2, #1
    6682:	4252      	negs	r2, r2
    6684:	4690      	mov	r8, r2
    6686:	44c4      	add	ip, r8
    6688:	4662      	mov	r2, ip
    668a:	2a00      	cmp	r2, #0
    668c:	d000      	beq.n	6690 <__aeabi_dsub+0x258>
    668e:	e0e6      	b.n	685e <__aeabi_dsub+0x426>
    6690:	1869      	adds	r1, r5, r1
    6692:	42a9      	cmp	r1, r5
    6694:	41b6      	sbcs	r6, r6
    6696:	183f      	adds	r7, r7, r0
    6698:	4276      	negs	r6, r6
    669a:	19f7      	adds	r7, r6, r7
    669c:	000d      	movs	r5, r1
    669e:	e7ba      	b.n	6616 <__aeabi_dsub+0x1de>
    66a0:	2e00      	cmp	r6, #0
    66a2:	d000      	beq.n	66a6 <__aeabi_dsub+0x26e>
    66a4:	e080      	b.n	67a8 <__aeabi_dsub+0x370>
    66a6:	1c62      	adds	r2, r4, #1
    66a8:	0552      	lsls	r2, r2, #21
    66aa:	0d52      	lsrs	r2, r2, #21
    66ac:	2a01      	cmp	r2, #1
    66ae:	dc00      	bgt.n	66b2 <__aeabi_dsub+0x27a>
    66b0:	e0f9      	b.n	68a6 <__aeabi_dsub+0x46e>
    66b2:	1a6a      	subs	r2, r5, r1
    66b4:	4691      	mov	r9, r2
    66b6:	454d      	cmp	r5, r9
    66b8:	41b6      	sbcs	r6, r6
    66ba:	1a3a      	subs	r2, r7, r0
    66bc:	4276      	negs	r6, r6
    66be:	1b92      	subs	r2, r2, r6
    66c0:	4690      	mov	r8, r2
    66c2:	0212      	lsls	r2, r2, #8
    66c4:	d400      	bmi.n	66c8 <__aeabi_dsub+0x290>
    66c6:	e099      	b.n	67fc <__aeabi_dsub+0x3c4>
    66c8:	1b4d      	subs	r5, r1, r5
    66ca:	42a9      	cmp	r1, r5
    66cc:	4189      	sbcs	r1, r1
    66ce:	1bc7      	subs	r7, r0, r7
    66d0:	4249      	negs	r1, r1
    66d2:	1a7a      	subs	r2, r7, r1
    66d4:	4690      	mov	r8, r2
    66d6:	469a      	mov	sl, r3
    66d8:	e73c      	b.n	6554 <__aeabi_dsub+0x11c>
    66da:	4652      	mov	r2, sl
    66dc:	2301      	movs	r3, #1
    66de:	2500      	movs	r5, #0
    66e0:	4013      	ands	r3, r2
    66e2:	2200      	movs	r2, #0
    66e4:	e6f5      	b.n	64d2 <__aeabi_dsub+0x9a>
    66e6:	0028      	movs	r0, r5
    66e8:	f000 fbaa 	bl	6e40 <__clzsi2>
    66ec:	3020      	adds	r0, #32
    66ee:	0003      	movs	r3, r0
    66f0:	3b08      	subs	r3, #8
    66f2:	2b1f      	cmp	r3, #31
    66f4:	dc00      	bgt.n	66f8 <__aeabi_dsub+0x2c0>
    66f6:	e739      	b.n	656c <__aeabi_dsub+0x134>
    66f8:	002a      	movs	r2, r5
    66fa:	3828      	subs	r0, #40	; 0x28
    66fc:	4082      	lsls	r2, r0
    66fe:	2500      	movs	r5, #0
    6700:	429c      	cmp	r4, r3
    6702:	dc00      	bgt.n	6706 <__aeabi_dsub+0x2ce>
    6704:	e73e      	b.n	6584 <__aeabi_dsub+0x14c>
    6706:	4f26      	ldr	r7, [pc, #152]	; (67a0 <__aeabi_dsub+0x368>)
    6708:	1ae4      	subs	r4, r4, r3
    670a:	4017      	ands	r7, r2
    670c:	e6c0      	b.n	6490 <__aeabi_dsub+0x58>
    670e:	4301      	orrs	r1, r0
    6710:	1e48      	subs	r0, r1, #1
    6712:	4181      	sbcs	r1, r0
    6714:	2200      	movs	r2, #0
    6716:	b2c9      	uxtb	r1, r1
    6718:	e710      	b.n	653c <__aeabi_dsub+0x104>
    671a:	2e00      	cmp	r6, #0
    671c:	d000      	beq.n	6720 <__aeabi_dsub+0x2e8>
    671e:	e0f1      	b.n	6904 <__aeabi_dsub+0x4cc>
    6720:	1c62      	adds	r2, r4, #1
    6722:	4694      	mov	ip, r2
    6724:	0552      	lsls	r2, r2, #21
    6726:	0d52      	lsrs	r2, r2, #21
    6728:	2a01      	cmp	r2, #1
    672a:	dc00      	bgt.n	672e <__aeabi_dsub+0x2f6>
    672c:	e0a0      	b.n	6870 <__aeabi_dsub+0x438>
    672e:	4a1b      	ldr	r2, [pc, #108]	; (679c <__aeabi_dsub+0x364>)
    6730:	4594      	cmp	ip, r2
    6732:	d100      	bne.n	6736 <__aeabi_dsub+0x2fe>
    6734:	e0c5      	b.n	68c2 <__aeabi_dsub+0x48a>
    6736:	1869      	adds	r1, r5, r1
    6738:	42a9      	cmp	r1, r5
    673a:	4192      	sbcs	r2, r2
    673c:	183f      	adds	r7, r7, r0
    673e:	4252      	negs	r2, r2
    6740:	19d2      	adds	r2, r2, r7
    6742:	0849      	lsrs	r1, r1, #1
    6744:	07d5      	lsls	r5, r2, #31
    6746:	430d      	orrs	r5, r1
    6748:	0857      	lsrs	r7, r2, #1
    674a:	4664      	mov	r4, ip
    674c:	e6a0      	b.n	6490 <__aeabi_dsub+0x58>
    674e:	4b13      	ldr	r3, [pc, #76]	; (679c <__aeabi_dsub+0x364>)
    6750:	429c      	cmp	r4, r3
    6752:	d000      	beq.n	6756 <__aeabi_dsub+0x31e>
    6754:	e6d9      	b.n	650a <__aeabi_dsub+0xd2>
    6756:	e69b      	b.n	6490 <__aeabi_dsub+0x58>
    6758:	0011      	movs	r1, r2
    675a:	3c1f      	subs	r4, #31
    675c:	40e1      	lsrs	r1, r4
    675e:	000c      	movs	r4, r1
    6760:	2b20      	cmp	r3, #32
    6762:	d100      	bne.n	6766 <__aeabi_dsub+0x32e>
    6764:	e080      	b.n	6868 <__aeabi_dsub+0x430>
    6766:	2140      	movs	r1, #64	; 0x40
    6768:	1acb      	subs	r3, r1, r3
    676a:	409a      	lsls	r2, r3
    676c:	4315      	orrs	r5, r2
    676e:	1e6a      	subs	r2, r5, #1
    6770:	4195      	sbcs	r5, r2
    6772:	2700      	movs	r7, #0
    6774:	4325      	orrs	r5, r4
    6776:	2400      	movs	r4, #0
    6778:	e71f      	b.n	65ba <__aeabi_dsub+0x182>
    677a:	4663      	mov	r3, ip
    677c:	0002      	movs	r2, r0
    677e:	3b20      	subs	r3, #32
    6780:	40da      	lsrs	r2, r3
    6782:	4663      	mov	r3, ip
    6784:	2b20      	cmp	r3, #32
    6786:	d071      	beq.n	686c <__aeabi_dsub+0x434>
    6788:	2340      	movs	r3, #64	; 0x40
    678a:	4666      	mov	r6, ip
    678c:	1b9b      	subs	r3, r3, r6
    678e:	4098      	lsls	r0, r3
    6790:	4301      	orrs	r1, r0
    6792:	1e48      	subs	r0, r1, #1
    6794:	4181      	sbcs	r1, r0
    6796:	4311      	orrs	r1, r2
    6798:	2200      	movs	r2, #0
    679a:	e6cf      	b.n	653c <__aeabi_dsub+0x104>
    679c:	000007ff 	.word	0x000007ff
    67a0:	ff7fffff 	.word	0xff7fffff
    67a4:	800fffff 	.word	0x800fffff
    67a8:	2c00      	cmp	r4, #0
    67aa:	d048      	beq.n	683e <__aeabi_dsub+0x406>
    67ac:	4cca      	ldr	r4, [pc, #808]	; (6ad8 <__aeabi_dsub+0x6a0>)
    67ae:	42a2      	cmp	r2, r4
    67b0:	d100      	bne.n	67b4 <__aeabi_dsub+0x37c>
    67b2:	e0a2      	b.n	68fa <__aeabi_dsub+0x4c2>
    67b4:	4274      	negs	r4, r6
    67b6:	46a1      	mov	r9, r4
    67b8:	2480      	movs	r4, #128	; 0x80
    67ba:	0424      	lsls	r4, r4, #16
    67bc:	4327      	orrs	r7, r4
    67be:	464c      	mov	r4, r9
    67c0:	2c38      	cmp	r4, #56	; 0x38
    67c2:	dd00      	ble.n	67c6 <__aeabi_dsub+0x38e>
    67c4:	e0db      	b.n	697e <__aeabi_dsub+0x546>
    67c6:	2c1f      	cmp	r4, #31
    67c8:	dd00      	ble.n	67cc <__aeabi_dsub+0x394>
    67ca:	e144      	b.n	6a56 <__aeabi_dsub+0x61e>
    67cc:	464e      	mov	r6, r9
    67ce:	2420      	movs	r4, #32
    67d0:	1ba4      	subs	r4, r4, r6
    67d2:	003e      	movs	r6, r7
    67d4:	40a6      	lsls	r6, r4
    67d6:	46a2      	mov	sl, r4
    67d8:	46b0      	mov	r8, r6
    67da:	464c      	mov	r4, r9
    67dc:	002e      	movs	r6, r5
    67de:	40e6      	lsrs	r6, r4
    67e0:	46b4      	mov	ip, r6
    67e2:	4646      	mov	r6, r8
    67e4:	4664      	mov	r4, ip
    67e6:	4326      	orrs	r6, r4
    67e8:	4654      	mov	r4, sl
    67ea:	40a5      	lsls	r5, r4
    67ec:	1e6c      	subs	r4, r5, #1
    67ee:	41a5      	sbcs	r5, r4
    67f0:	0034      	movs	r4, r6
    67f2:	432c      	orrs	r4, r5
    67f4:	464d      	mov	r5, r9
    67f6:	40ef      	lsrs	r7, r5
    67f8:	1b0d      	subs	r5, r1, r4
    67fa:	e028      	b.n	684e <__aeabi_dsub+0x416>
    67fc:	464a      	mov	r2, r9
    67fe:	4643      	mov	r3, r8
    6800:	464d      	mov	r5, r9
    6802:	431a      	orrs	r2, r3
    6804:	d000      	beq.n	6808 <__aeabi_dsub+0x3d0>
    6806:	e6a5      	b.n	6554 <__aeabi_dsub+0x11c>
    6808:	2300      	movs	r3, #0
    680a:	2400      	movs	r4, #0
    680c:	2500      	movs	r5, #0
    680e:	e6de      	b.n	65ce <__aeabi_dsub+0x196>
    6810:	2a1f      	cmp	r2, #31
    6812:	dc5a      	bgt.n	68ca <__aeabi_dsub+0x492>
    6814:	4666      	mov	r6, ip
    6816:	2220      	movs	r2, #32
    6818:	1b92      	subs	r2, r2, r6
    681a:	0006      	movs	r6, r0
    681c:	4096      	lsls	r6, r2
    681e:	4691      	mov	r9, r2
    6820:	46b0      	mov	r8, r6
    6822:	4662      	mov	r2, ip
    6824:	000e      	movs	r6, r1
    6826:	40d6      	lsrs	r6, r2
    6828:	4642      	mov	r2, r8
    682a:	4316      	orrs	r6, r2
    682c:	464a      	mov	r2, r9
    682e:	4091      	lsls	r1, r2
    6830:	1e4a      	subs	r2, r1, #1
    6832:	4191      	sbcs	r1, r2
    6834:	0002      	movs	r2, r0
    6836:	4660      	mov	r0, ip
    6838:	4331      	orrs	r1, r6
    683a:	40c2      	lsrs	r2, r0
    683c:	e6e4      	b.n	6608 <__aeabi_dsub+0x1d0>
    683e:	003c      	movs	r4, r7
    6840:	432c      	orrs	r4, r5
    6842:	d05a      	beq.n	68fa <__aeabi_dsub+0x4c2>
    6844:	43f4      	mvns	r4, r6
    6846:	46a1      	mov	r9, r4
    6848:	2c00      	cmp	r4, #0
    684a:	d152      	bne.n	68f2 <__aeabi_dsub+0x4ba>
    684c:	1b4d      	subs	r5, r1, r5
    684e:	42a9      	cmp	r1, r5
    6850:	4189      	sbcs	r1, r1
    6852:	1bc7      	subs	r7, r0, r7
    6854:	4249      	negs	r1, r1
    6856:	1a7f      	subs	r7, r7, r1
    6858:	0014      	movs	r4, r2
    685a:	469a      	mov	sl, r3
    685c:	e675      	b.n	654a <__aeabi_dsub+0x112>
    685e:	4a9e      	ldr	r2, [pc, #632]	; (6ad8 <__aeabi_dsub+0x6a0>)
    6860:	4294      	cmp	r4, r2
    6862:	d000      	beq.n	6866 <__aeabi_dsub+0x42e>
    6864:	e6c7      	b.n	65f6 <__aeabi_dsub+0x1be>
    6866:	e613      	b.n	6490 <__aeabi_dsub+0x58>
    6868:	2200      	movs	r2, #0
    686a:	e77f      	b.n	676c <__aeabi_dsub+0x334>
    686c:	2000      	movs	r0, #0
    686e:	e78f      	b.n	6790 <__aeabi_dsub+0x358>
    6870:	2c00      	cmp	r4, #0
    6872:	d000      	beq.n	6876 <__aeabi_dsub+0x43e>
    6874:	e0c8      	b.n	6a08 <__aeabi_dsub+0x5d0>
    6876:	003b      	movs	r3, r7
    6878:	432b      	orrs	r3, r5
    687a:	d100      	bne.n	687e <__aeabi_dsub+0x446>
    687c:	e10f      	b.n	6a9e <__aeabi_dsub+0x666>
    687e:	0003      	movs	r3, r0
    6880:	430b      	orrs	r3, r1
    6882:	d100      	bne.n	6886 <__aeabi_dsub+0x44e>
    6884:	e604      	b.n	6490 <__aeabi_dsub+0x58>
    6886:	1869      	adds	r1, r5, r1
    6888:	42a9      	cmp	r1, r5
    688a:	419b      	sbcs	r3, r3
    688c:	183f      	adds	r7, r7, r0
    688e:	425b      	negs	r3, r3
    6890:	19df      	adds	r7, r3, r7
    6892:	023b      	lsls	r3, r7, #8
    6894:	d400      	bmi.n	6898 <__aeabi_dsub+0x460>
    6896:	e11a      	b.n	6ace <__aeabi_dsub+0x696>
    6898:	4b90      	ldr	r3, [pc, #576]	; (6adc <__aeabi_dsub+0x6a4>)
    689a:	000d      	movs	r5, r1
    689c:	401f      	ands	r7, r3
    689e:	4664      	mov	r4, ip
    68a0:	e5f6      	b.n	6490 <__aeabi_dsub+0x58>
    68a2:	469a      	mov	sl, r3
    68a4:	e689      	b.n	65ba <__aeabi_dsub+0x182>
    68a6:	003a      	movs	r2, r7
    68a8:	432a      	orrs	r2, r5
    68aa:	2c00      	cmp	r4, #0
    68ac:	d15c      	bne.n	6968 <__aeabi_dsub+0x530>
    68ae:	2a00      	cmp	r2, #0
    68b0:	d175      	bne.n	699e <__aeabi_dsub+0x566>
    68b2:	0002      	movs	r2, r0
    68b4:	430a      	orrs	r2, r1
    68b6:	d100      	bne.n	68ba <__aeabi_dsub+0x482>
    68b8:	e0ca      	b.n	6a50 <__aeabi_dsub+0x618>
    68ba:	0007      	movs	r7, r0
    68bc:	000d      	movs	r5, r1
    68be:	469a      	mov	sl, r3
    68c0:	e5e6      	b.n	6490 <__aeabi_dsub+0x58>
    68c2:	4664      	mov	r4, ip
    68c4:	2200      	movs	r2, #0
    68c6:	2500      	movs	r5, #0
    68c8:	e681      	b.n	65ce <__aeabi_dsub+0x196>
    68ca:	4662      	mov	r2, ip
    68cc:	0006      	movs	r6, r0
    68ce:	3a20      	subs	r2, #32
    68d0:	40d6      	lsrs	r6, r2
    68d2:	4662      	mov	r2, ip
    68d4:	46b0      	mov	r8, r6
    68d6:	2a20      	cmp	r2, #32
    68d8:	d100      	bne.n	68dc <__aeabi_dsub+0x4a4>
    68da:	e0b7      	b.n	6a4c <__aeabi_dsub+0x614>
    68dc:	2240      	movs	r2, #64	; 0x40
    68de:	4666      	mov	r6, ip
    68e0:	1b92      	subs	r2, r2, r6
    68e2:	4090      	lsls	r0, r2
    68e4:	4301      	orrs	r1, r0
    68e6:	4642      	mov	r2, r8
    68e8:	1e48      	subs	r0, r1, #1
    68ea:	4181      	sbcs	r1, r0
    68ec:	4311      	orrs	r1, r2
    68ee:	2200      	movs	r2, #0
    68f0:	e68a      	b.n	6608 <__aeabi_dsub+0x1d0>
    68f2:	4c79      	ldr	r4, [pc, #484]	; (6ad8 <__aeabi_dsub+0x6a0>)
    68f4:	42a2      	cmp	r2, r4
    68f6:	d000      	beq.n	68fa <__aeabi_dsub+0x4c2>
    68f8:	e761      	b.n	67be <__aeabi_dsub+0x386>
    68fa:	0007      	movs	r7, r0
    68fc:	000d      	movs	r5, r1
    68fe:	0014      	movs	r4, r2
    6900:	469a      	mov	sl, r3
    6902:	e5c5      	b.n	6490 <__aeabi_dsub+0x58>
    6904:	2c00      	cmp	r4, #0
    6906:	d141      	bne.n	698c <__aeabi_dsub+0x554>
    6908:	003c      	movs	r4, r7
    690a:	432c      	orrs	r4, r5
    690c:	d078      	beq.n	6a00 <__aeabi_dsub+0x5c8>
    690e:	43f4      	mvns	r4, r6
    6910:	46a1      	mov	r9, r4
    6912:	2c00      	cmp	r4, #0
    6914:	d020      	beq.n	6958 <__aeabi_dsub+0x520>
    6916:	4c70      	ldr	r4, [pc, #448]	; (6ad8 <__aeabi_dsub+0x6a0>)
    6918:	42a2      	cmp	r2, r4
    691a:	d071      	beq.n	6a00 <__aeabi_dsub+0x5c8>
    691c:	464c      	mov	r4, r9
    691e:	2c38      	cmp	r4, #56	; 0x38
    6920:	dd00      	ble.n	6924 <__aeabi_dsub+0x4ec>
    6922:	e0b2      	b.n	6a8a <__aeabi_dsub+0x652>
    6924:	2c1f      	cmp	r4, #31
    6926:	dd00      	ble.n	692a <__aeabi_dsub+0x4f2>
    6928:	e0bc      	b.n	6aa4 <__aeabi_dsub+0x66c>
    692a:	2620      	movs	r6, #32
    692c:	1b34      	subs	r4, r6, r4
    692e:	46a2      	mov	sl, r4
    6930:	003c      	movs	r4, r7
    6932:	4656      	mov	r6, sl
    6934:	40b4      	lsls	r4, r6
    6936:	464e      	mov	r6, r9
    6938:	46a0      	mov	r8, r4
    693a:	002c      	movs	r4, r5
    693c:	40f4      	lsrs	r4, r6
    693e:	46a4      	mov	ip, r4
    6940:	4644      	mov	r4, r8
    6942:	4666      	mov	r6, ip
    6944:	4334      	orrs	r4, r6
    6946:	46a4      	mov	ip, r4
    6948:	4654      	mov	r4, sl
    694a:	40a5      	lsls	r5, r4
    694c:	4664      	mov	r4, ip
    694e:	1e6e      	subs	r6, r5, #1
    6950:	41b5      	sbcs	r5, r6
    6952:	4325      	orrs	r5, r4
    6954:	464c      	mov	r4, r9
    6956:	40e7      	lsrs	r7, r4
    6958:	186d      	adds	r5, r5, r1
    695a:	428d      	cmp	r5, r1
    695c:	4189      	sbcs	r1, r1
    695e:	183f      	adds	r7, r7, r0
    6960:	4249      	negs	r1, r1
    6962:	19cf      	adds	r7, r1, r7
    6964:	0014      	movs	r4, r2
    6966:	e656      	b.n	6616 <__aeabi_dsub+0x1de>
    6968:	2a00      	cmp	r2, #0
    696a:	d12f      	bne.n	69cc <__aeabi_dsub+0x594>
    696c:	0002      	movs	r2, r0
    696e:	430a      	orrs	r2, r1
    6970:	d100      	bne.n	6974 <__aeabi_dsub+0x53c>
    6972:	e084      	b.n	6a7e <__aeabi_dsub+0x646>
    6974:	0007      	movs	r7, r0
    6976:	000d      	movs	r5, r1
    6978:	469a      	mov	sl, r3
    697a:	4c57      	ldr	r4, [pc, #348]	; (6ad8 <__aeabi_dsub+0x6a0>)
    697c:	e588      	b.n	6490 <__aeabi_dsub+0x58>
    697e:	433d      	orrs	r5, r7
    6980:	1e6f      	subs	r7, r5, #1
    6982:	41bd      	sbcs	r5, r7
    6984:	b2ec      	uxtb	r4, r5
    6986:	2700      	movs	r7, #0
    6988:	1b0d      	subs	r5, r1, r4
    698a:	e760      	b.n	684e <__aeabi_dsub+0x416>
    698c:	4c52      	ldr	r4, [pc, #328]	; (6ad8 <__aeabi_dsub+0x6a0>)
    698e:	42a2      	cmp	r2, r4
    6990:	d036      	beq.n	6a00 <__aeabi_dsub+0x5c8>
    6992:	4274      	negs	r4, r6
    6994:	2680      	movs	r6, #128	; 0x80
    6996:	0436      	lsls	r6, r6, #16
    6998:	46a1      	mov	r9, r4
    699a:	4337      	orrs	r7, r6
    699c:	e7be      	b.n	691c <__aeabi_dsub+0x4e4>
    699e:	0002      	movs	r2, r0
    69a0:	430a      	orrs	r2, r1
    69a2:	d100      	bne.n	69a6 <__aeabi_dsub+0x56e>
    69a4:	e574      	b.n	6490 <__aeabi_dsub+0x58>
    69a6:	1a6a      	subs	r2, r5, r1
    69a8:	4690      	mov	r8, r2
    69aa:	4545      	cmp	r5, r8
    69ac:	41b6      	sbcs	r6, r6
    69ae:	1a3a      	subs	r2, r7, r0
    69b0:	4276      	negs	r6, r6
    69b2:	1b92      	subs	r2, r2, r6
    69b4:	4694      	mov	ip, r2
    69b6:	0212      	lsls	r2, r2, #8
    69b8:	d400      	bmi.n	69bc <__aeabi_dsub+0x584>
    69ba:	e5f7      	b.n	65ac <__aeabi_dsub+0x174>
    69bc:	1b4d      	subs	r5, r1, r5
    69be:	42a9      	cmp	r1, r5
    69c0:	4189      	sbcs	r1, r1
    69c2:	1bc7      	subs	r7, r0, r7
    69c4:	4249      	negs	r1, r1
    69c6:	1a7f      	subs	r7, r7, r1
    69c8:	469a      	mov	sl, r3
    69ca:	e561      	b.n	6490 <__aeabi_dsub+0x58>
    69cc:	0002      	movs	r2, r0
    69ce:	430a      	orrs	r2, r1
    69d0:	d03a      	beq.n	6a48 <__aeabi_dsub+0x610>
    69d2:	08ed      	lsrs	r5, r5, #3
    69d4:	077c      	lsls	r4, r7, #29
    69d6:	432c      	orrs	r4, r5
    69d8:	2580      	movs	r5, #128	; 0x80
    69da:	08fa      	lsrs	r2, r7, #3
    69dc:	032d      	lsls	r5, r5, #12
    69de:	422a      	tst	r2, r5
    69e0:	d008      	beq.n	69f4 <__aeabi_dsub+0x5bc>
    69e2:	08c7      	lsrs	r7, r0, #3
    69e4:	422f      	tst	r7, r5
    69e6:	d105      	bne.n	69f4 <__aeabi_dsub+0x5bc>
    69e8:	0745      	lsls	r5, r0, #29
    69ea:	002c      	movs	r4, r5
    69ec:	003a      	movs	r2, r7
    69ee:	469a      	mov	sl, r3
    69f0:	08c9      	lsrs	r1, r1, #3
    69f2:	430c      	orrs	r4, r1
    69f4:	0f67      	lsrs	r7, r4, #29
    69f6:	00d2      	lsls	r2, r2, #3
    69f8:	00e5      	lsls	r5, r4, #3
    69fa:	4317      	orrs	r7, r2
    69fc:	4c36      	ldr	r4, [pc, #216]	; (6ad8 <__aeabi_dsub+0x6a0>)
    69fe:	e547      	b.n	6490 <__aeabi_dsub+0x58>
    6a00:	0007      	movs	r7, r0
    6a02:	000d      	movs	r5, r1
    6a04:	0014      	movs	r4, r2
    6a06:	e543      	b.n	6490 <__aeabi_dsub+0x58>
    6a08:	003a      	movs	r2, r7
    6a0a:	432a      	orrs	r2, r5
    6a0c:	d043      	beq.n	6a96 <__aeabi_dsub+0x65e>
    6a0e:	0002      	movs	r2, r0
    6a10:	430a      	orrs	r2, r1
    6a12:	d019      	beq.n	6a48 <__aeabi_dsub+0x610>
    6a14:	08ed      	lsrs	r5, r5, #3
    6a16:	077c      	lsls	r4, r7, #29
    6a18:	432c      	orrs	r4, r5
    6a1a:	2580      	movs	r5, #128	; 0x80
    6a1c:	08fa      	lsrs	r2, r7, #3
    6a1e:	032d      	lsls	r5, r5, #12
    6a20:	422a      	tst	r2, r5
    6a22:	d007      	beq.n	6a34 <__aeabi_dsub+0x5fc>
    6a24:	08c6      	lsrs	r6, r0, #3
    6a26:	422e      	tst	r6, r5
    6a28:	d104      	bne.n	6a34 <__aeabi_dsub+0x5fc>
    6a2a:	0747      	lsls	r7, r0, #29
    6a2c:	003c      	movs	r4, r7
    6a2e:	0032      	movs	r2, r6
    6a30:	08c9      	lsrs	r1, r1, #3
    6a32:	430c      	orrs	r4, r1
    6a34:	00d7      	lsls	r7, r2, #3
    6a36:	0f62      	lsrs	r2, r4, #29
    6a38:	00e5      	lsls	r5, r4, #3
    6a3a:	4317      	orrs	r7, r2
    6a3c:	469a      	mov	sl, r3
    6a3e:	4c26      	ldr	r4, [pc, #152]	; (6ad8 <__aeabi_dsub+0x6a0>)
    6a40:	e526      	b.n	6490 <__aeabi_dsub+0x58>
    6a42:	2200      	movs	r2, #0
    6a44:	2500      	movs	r5, #0
    6a46:	e544      	b.n	64d2 <__aeabi_dsub+0x9a>
    6a48:	4c23      	ldr	r4, [pc, #140]	; (6ad8 <__aeabi_dsub+0x6a0>)
    6a4a:	e521      	b.n	6490 <__aeabi_dsub+0x58>
    6a4c:	2000      	movs	r0, #0
    6a4e:	e749      	b.n	68e4 <__aeabi_dsub+0x4ac>
    6a50:	2300      	movs	r3, #0
    6a52:	2500      	movs	r5, #0
    6a54:	e5bb      	b.n	65ce <__aeabi_dsub+0x196>
    6a56:	464c      	mov	r4, r9
    6a58:	003e      	movs	r6, r7
    6a5a:	3c20      	subs	r4, #32
    6a5c:	40e6      	lsrs	r6, r4
    6a5e:	464c      	mov	r4, r9
    6a60:	46b4      	mov	ip, r6
    6a62:	2c20      	cmp	r4, #32
    6a64:	d031      	beq.n	6aca <__aeabi_dsub+0x692>
    6a66:	2440      	movs	r4, #64	; 0x40
    6a68:	464e      	mov	r6, r9
    6a6a:	1ba6      	subs	r6, r4, r6
    6a6c:	40b7      	lsls	r7, r6
    6a6e:	433d      	orrs	r5, r7
    6a70:	1e6c      	subs	r4, r5, #1
    6a72:	41a5      	sbcs	r5, r4
    6a74:	4664      	mov	r4, ip
    6a76:	432c      	orrs	r4, r5
    6a78:	2700      	movs	r7, #0
    6a7a:	1b0d      	subs	r5, r1, r4
    6a7c:	e6e7      	b.n	684e <__aeabi_dsub+0x416>
    6a7e:	2280      	movs	r2, #128	; 0x80
    6a80:	2300      	movs	r3, #0
    6a82:	0312      	lsls	r2, r2, #12
    6a84:	4c14      	ldr	r4, [pc, #80]	; (6ad8 <__aeabi_dsub+0x6a0>)
    6a86:	2500      	movs	r5, #0
    6a88:	e5a1      	b.n	65ce <__aeabi_dsub+0x196>
    6a8a:	433d      	orrs	r5, r7
    6a8c:	1e6f      	subs	r7, r5, #1
    6a8e:	41bd      	sbcs	r5, r7
    6a90:	2700      	movs	r7, #0
    6a92:	b2ed      	uxtb	r5, r5
    6a94:	e760      	b.n	6958 <__aeabi_dsub+0x520>
    6a96:	0007      	movs	r7, r0
    6a98:	000d      	movs	r5, r1
    6a9a:	4c0f      	ldr	r4, [pc, #60]	; (6ad8 <__aeabi_dsub+0x6a0>)
    6a9c:	e4f8      	b.n	6490 <__aeabi_dsub+0x58>
    6a9e:	0007      	movs	r7, r0
    6aa0:	000d      	movs	r5, r1
    6aa2:	e4f5      	b.n	6490 <__aeabi_dsub+0x58>
    6aa4:	464e      	mov	r6, r9
    6aa6:	003c      	movs	r4, r7
    6aa8:	3e20      	subs	r6, #32
    6aaa:	40f4      	lsrs	r4, r6
    6aac:	46a0      	mov	r8, r4
    6aae:	464c      	mov	r4, r9
    6ab0:	2c20      	cmp	r4, #32
    6ab2:	d00e      	beq.n	6ad2 <__aeabi_dsub+0x69a>
    6ab4:	2440      	movs	r4, #64	; 0x40
    6ab6:	464e      	mov	r6, r9
    6ab8:	1ba4      	subs	r4, r4, r6
    6aba:	40a7      	lsls	r7, r4
    6abc:	433d      	orrs	r5, r7
    6abe:	1e6f      	subs	r7, r5, #1
    6ac0:	41bd      	sbcs	r5, r7
    6ac2:	4644      	mov	r4, r8
    6ac4:	2700      	movs	r7, #0
    6ac6:	4325      	orrs	r5, r4
    6ac8:	e746      	b.n	6958 <__aeabi_dsub+0x520>
    6aca:	2700      	movs	r7, #0
    6acc:	e7cf      	b.n	6a6e <__aeabi_dsub+0x636>
    6ace:	000d      	movs	r5, r1
    6ad0:	e573      	b.n	65ba <__aeabi_dsub+0x182>
    6ad2:	2700      	movs	r7, #0
    6ad4:	e7f2      	b.n	6abc <__aeabi_dsub+0x684>
    6ad6:	46c0      	nop			; (mov r8, r8)
    6ad8:	000007ff 	.word	0x000007ff
    6adc:	ff7fffff 	.word	0xff7fffff

00006ae0 <__aeabi_dcmpun>:
    6ae0:	b570      	push	{r4, r5, r6, lr}
    6ae2:	4e0e      	ldr	r6, [pc, #56]	; (6b1c <__aeabi_dcmpun+0x3c>)
    6ae4:	030c      	lsls	r4, r1, #12
    6ae6:	031d      	lsls	r5, r3, #12
    6ae8:	0049      	lsls	r1, r1, #1
    6aea:	005b      	lsls	r3, r3, #1
    6aec:	0b24      	lsrs	r4, r4, #12
    6aee:	0d49      	lsrs	r1, r1, #21
    6af0:	0b2d      	lsrs	r5, r5, #12
    6af2:	0d5b      	lsrs	r3, r3, #21
    6af4:	42b1      	cmp	r1, r6
    6af6:	d004      	beq.n	6b02 <__aeabi_dcmpun+0x22>
    6af8:	4908      	ldr	r1, [pc, #32]	; (6b1c <__aeabi_dcmpun+0x3c>)
    6afa:	2000      	movs	r0, #0
    6afc:	428b      	cmp	r3, r1
    6afe:	d008      	beq.n	6b12 <__aeabi_dcmpun+0x32>
    6b00:	bd70      	pop	{r4, r5, r6, pc}
    6b02:	4304      	orrs	r4, r0
    6b04:	2001      	movs	r0, #1
    6b06:	2c00      	cmp	r4, #0
    6b08:	d1fa      	bne.n	6b00 <__aeabi_dcmpun+0x20>
    6b0a:	4904      	ldr	r1, [pc, #16]	; (6b1c <__aeabi_dcmpun+0x3c>)
    6b0c:	2000      	movs	r0, #0
    6b0e:	428b      	cmp	r3, r1
    6b10:	d1f6      	bne.n	6b00 <__aeabi_dcmpun+0x20>
    6b12:	4315      	orrs	r5, r2
    6b14:	0028      	movs	r0, r5
    6b16:	1e45      	subs	r5, r0, #1
    6b18:	41a8      	sbcs	r0, r5
    6b1a:	e7f1      	b.n	6b00 <__aeabi_dcmpun+0x20>
    6b1c:	000007ff 	.word	0x000007ff

00006b20 <__aeabi_d2iz>:
    6b20:	030b      	lsls	r3, r1, #12
    6b22:	b530      	push	{r4, r5, lr}
    6b24:	4d13      	ldr	r5, [pc, #76]	; (6b74 <__aeabi_d2iz+0x54>)
    6b26:	0b1a      	lsrs	r2, r3, #12
    6b28:	004b      	lsls	r3, r1, #1
    6b2a:	0d5b      	lsrs	r3, r3, #21
    6b2c:	0fc9      	lsrs	r1, r1, #31
    6b2e:	2400      	movs	r4, #0
    6b30:	42ab      	cmp	r3, r5
    6b32:	dd11      	ble.n	6b58 <__aeabi_d2iz+0x38>
    6b34:	4c10      	ldr	r4, [pc, #64]	; (6b78 <__aeabi_d2iz+0x58>)
    6b36:	42a3      	cmp	r3, r4
    6b38:	dc10      	bgt.n	6b5c <__aeabi_d2iz+0x3c>
    6b3a:	2480      	movs	r4, #128	; 0x80
    6b3c:	0364      	lsls	r4, r4, #13
    6b3e:	4322      	orrs	r2, r4
    6b40:	4c0e      	ldr	r4, [pc, #56]	; (6b7c <__aeabi_d2iz+0x5c>)
    6b42:	1ae4      	subs	r4, r4, r3
    6b44:	2c1f      	cmp	r4, #31
    6b46:	dd0c      	ble.n	6b62 <__aeabi_d2iz+0x42>
    6b48:	480d      	ldr	r0, [pc, #52]	; (6b80 <__aeabi_d2iz+0x60>)
    6b4a:	1ac3      	subs	r3, r0, r3
    6b4c:	40da      	lsrs	r2, r3
    6b4e:	0013      	movs	r3, r2
    6b50:	425c      	negs	r4, r3
    6b52:	2900      	cmp	r1, #0
    6b54:	d100      	bne.n	6b58 <__aeabi_d2iz+0x38>
    6b56:	001c      	movs	r4, r3
    6b58:	0020      	movs	r0, r4
    6b5a:	bd30      	pop	{r4, r5, pc}
    6b5c:	4b09      	ldr	r3, [pc, #36]	; (6b84 <__aeabi_d2iz+0x64>)
    6b5e:	18cc      	adds	r4, r1, r3
    6b60:	e7fa      	b.n	6b58 <__aeabi_d2iz+0x38>
    6b62:	40e0      	lsrs	r0, r4
    6b64:	4c08      	ldr	r4, [pc, #32]	; (6b88 <__aeabi_d2iz+0x68>)
    6b66:	46a4      	mov	ip, r4
    6b68:	4463      	add	r3, ip
    6b6a:	409a      	lsls	r2, r3
    6b6c:	0013      	movs	r3, r2
    6b6e:	4303      	orrs	r3, r0
    6b70:	e7ee      	b.n	6b50 <__aeabi_d2iz+0x30>
    6b72:	46c0      	nop			; (mov r8, r8)
    6b74:	000003fe 	.word	0x000003fe
    6b78:	0000041d 	.word	0x0000041d
    6b7c:	00000433 	.word	0x00000433
    6b80:	00000413 	.word	0x00000413
    6b84:	7fffffff 	.word	0x7fffffff
    6b88:	fffffbed 	.word	0xfffffbed

00006b8c <__aeabi_i2d>:
    6b8c:	b570      	push	{r4, r5, r6, lr}
    6b8e:	2800      	cmp	r0, #0
    6b90:	d030      	beq.n	6bf4 <__aeabi_i2d+0x68>
    6b92:	17c3      	asrs	r3, r0, #31
    6b94:	18c4      	adds	r4, r0, r3
    6b96:	405c      	eors	r4, r3
    6b98:	0fc5      	lsrs	r5, r0, #31
    6b9a:	0020      	movs	r0, r4
    6b9c:	f000 f950 	bl	6e40 <__clzsi2>
    6ba0:	4b17      	ldr	r3, [pc, #92]	; (6c00 <__aeabi_i2d+0x74>)
    6ba2:	4a18      	ldr	r2, [pc, #96]	; (6c04 <__aeabi_i2d+0x78>)
    6ba4:	1a1b      	subs	r3, r3, r0
    6ba6:	1ad2      	subs	r2, r2, r3
    6ba8:	2a1f      	cmp	r2, #31
    6baa:	dd18      	ble.n	6bde <__aeabi_i2d+0x52>
    6bac:	4a16      	ldr	r2, [pc, #88]	; (6c08 <__aeabi_i2d+0x7c>)
    6bae:	1ad2      	subs	r2, r2, r3
    6bb0:	4094      	lsls	r4, r2
    6bb2:	2200      	movs	r2, #0
    6bb4:	0324      	lsls	r4, r4, #12
    6bb6:	055b      	lsls	r3, r3, #21
    6bb8:	0b24      	lsrs	r4, r4, #12
    6bba:	0d5b      	lsrs	r3, r3, #21
    6bbc:	2100      	movs	r1, #0
    6bbe:	0010      	movs	r0, r2
    6bc0:	0324      	lsls	r4, r4, #12
    6bc2:	0d0a      	lsrs	r2, r1, #20
    6bc4:	0512      	lsls	r2, r2, #20
    6bc6:	0b24      	lsrs	r4, r4, #12
    6bc8:	4314      	orrs	r4, r2
    6bca:	4a10      	ldr	r2, [pc, #64]	; (6c0c <__aeabi_i2d+0x80>)
    6bcc:	051b      	lsls	r3, r3, #20
    6bce:	4014      	ands	r4, r2
    6bd0:	431c      	orrs	r4, r3
    6bd2:	0064      	lsls	r4, r4, #1
    6bd4:	07ed      	lsls	r5, r5, #31
    6bd6:	0864      	lsrs	r4, r4, #1
    6bd8:	432c      	orrs	r4, r5
    6bda:	0021      	movs	r1, r4
    6bdc:	bd70      	pop	{r4, r5, r6, pc}
    6bde:	0021      	movs	r1, r4
    6be0:	4091      	lsls	r1, r2
    6be2:	000a      	movs	r2, r1
    6be4:	210b      	movs	r1, #11
    6be6:	1a08      	subs	r0, r1, r0
    6be8:	40c4      	lsrs	r4, r0
    6bea:	055b      	lsls	r3, r3, #21
    6bec:	0324      	lsls	r4, r4, #12
    6bee:	0b24      	lsrs	r4, r4, #12
    6bf0:	0d5b      	lsrs	r3, r3, #21
    6bf2:	e7e3      	b.n	6bbc <__aeabi_i2d+0x30>
    6bf4:	2500      	movs	r5, #0
    6bf6:	2300      	movs	r3, #0
    6bf8:	2400      	movs	r4, #0
    6bfa:	2200      	movs	r2, #0
    6bfc:	e7de      	b.n	6bbc <__aeabi_i2d+0x30>
    6bfe:	46c0      	nop			; (mov r8, r8)
    6c00:	0000041e 	.word	0x0000041e
    6c04:	00000433 	.word	0x00000433
    6c08:	00000413 	.word	0x00000413
    6c0c:	800fffff 	.word	0x800fffff

00006c10 <__aeabi_ui2d>:
    6c10:	b570      	push	{r4, r5, r6, lr}
    6c12:	1e05      	subs	r5, r0, #0
    6c14:	d028      	beq.n	6c68 <__aeabi_ui2d+0x58>
    6c16:	f000 f913 	bl	6e40 <__clzsi2>
    6c1a:	4b15      	ldr	r3, [pc, #84]	; (6c70 <__aeabi_ui2d+0x60>)
    6c1c:	4a15      	ldr	r2, [pc, #84]	; (6c74 <__aeabi_ui2d+0x64>)
    6c1e:	1a1b      	subs	r3, r3, r0
    6c20:	1ad2      	subs	r2, r2, r3
    6c22:	2a1f      	cmp	r2, #31
    6c24:	dd16      	ble.n	6c54 <__aeabi_ui2d+0x44>
    6c26:	002c      	movs	r4, r5
    6c28:	4a13      	ldr	r2, [pc, #76]	; (6c78 <__aeabi_ui2d+0x68>)
    6c2a:	2500      	movs	r5, #0
    6c2c:	1ad2      	subs	r2, r2, r3
    6c2e:	4094      	lsls	r4, r2
    6c30:	055a      	lsls	r2, r3, #21
    6c32:	0324      	lsls	r4, r4, #12
    6c34:	0b24      	lsrs	r4, r4, #12
    6c36:	0d52      	lsrs	r2, r2, #21
    6c38:	2100      	movs	r1, #0
    6c3a:	0324      	lsls	r4, r4, #12
    6c3c:	0d0b      	lsrs	r3, r1, #20
    6c3e:	0b24      	lsrs	r4, r4, #12
    6c40:	051b      	lsls	r3, r3, #20
    6c42:	4323      	orrs	r3, r4
    6c44:	4c0d      	ldr	r4, [pc, #52]	; (6c7c <__aeabi_ui2d+0x6c>)
    6c46:	0512      	lsls	r2, r2, #20
    6c48:	4023      	ands	r3, r4
    6c4a:	4313      	orrs	r3, r2
    6c4c:	005b      	lsls	r3, r3, #1
    6c4e:	0028      	movs	r0, r5
    6c50:	0859      	lsrs	r1, r3, #1
    6c52:	bd70      	pop	{r4, r5, r6, pc}
    6c54:	210b      	movs	r1, #11
    6c56:	002c      	movs	r4, r5
    6c58:	1a08      	subs	r0, r1, r0
    6c5a:	40c4      	lsrs	r4, r0
    6c5c:	4095      	lsls	r5, r2
    6c5e:	0324      	lsls	r4, r4, #12
    6c60:	055a      	lsls	r2, r3, #21
    6c62:	0b24      	lsrs	r4, r4, #12
    6c64:	0d52      	lsrs	r2, r2, #21
    6c66:	e7e7      	b.n	6c38 <__aeabi_ui2d+0x28>
    6c68:	2200      	movs	r2, #0
    6c6a:	2400      	movs	r4, #0
    6c6c:	e7e4      	b.n	6c38 <__aeabi_ui2d+0x28>
    6c6e:	46c0      	nop			; (mov r8, r8)
    6c70:	0000041e 	.word	0x0000041e
    6c74:	00000433 	.word	0x00000433
    6c78:	00000413 	.word	0x00000413
    6c7c:	800fffff 	.word	0x800fffff

00006c80 <__aeabi_f2d>:
    6c80:	0042      	lsls	r2, r0, #1
    6c82:	0e12      	lsrs	r2, r2, #24
    6c84:	1c51      	adds	r1, r2, #1
    6c86:	0243      	lsls	r3, r0, #9
    6c88:	b2c9      	uxtb	r1, r1
    6c8a:	b570      	push	{r4, r5, r6, lr}
    6c8c:	0a5d      	lsrs	r5, r3, #9
    6c8e:	0fc4      	lsrs	r4, r0, #31
    6c90:	2901      	cmp	r1, #1
    6c92:	dd15      	ble.n	6cc0 <__aeabi_f2d+0x40>
    6c94:	21e0      	movs	r1, #224	; 0xe0
    6c96:	0089      	lsls	r1, r1, #2
    6c98:	468c      	mov	ip, r1
    6c9a:	076d      	lsls	r5, r5, #29
    6c9c:	0b1b      	lsrs	r3, r3, #12
    6c9e:	4462      	add	r2, ip
    6ca0:	2100      	movs	r1, #0
    6ca2:	0028      	movs	r0, r5
    6ca4:	0d0d      	lsrs	r5, r1, #20
    6ca6:	052d      	lsls	r5, r5, #20
    6ca8:	432b      	orrs	r3, r5
    6caa:	4d1c      	ldr	r5, [pc, #112]	; (6d1c <__aeabi_f2d+0x9c>)
    6cac:	0552      	lsls	r2, r2, #21
    6cae:	402b      	ands	r3, r5
    6cb0:	0852      	lsrs	r2, r2, #1
    6cb2:	4313      	orrs	r3, r2
    6cb4:	005b      	lsls	r3, r3, #1
    6cb6:	07e4      	lsls	r4, r4, #31
    6cb8:	085b      	lsrs	r3, r3, #1
    6cba:	4323      	orrs	r3, r4
    6cbc:	0019      	movs	r1, r3
    6cbe:	bd70      	pop	{r4, r5, r6, pc}
    6cc0:	2a00      	cmp	r2, #0
    6cc2:	d115      	bne.n	6cf0 <__aeabi_f2d+0x70>
    6cc4:	2d00      	cmp	r5, #0
    6cc6:	d01f      	beq.n	6d08 <__aeabi_f2d+0x88>
    6cc8:	0028      	movs	r0, r5
    6cca:	f000 f8b9 	bl	6e40 <__clzsi2>
    6cce:	280a      	cmp	r0, #10
    6cd0:	dc1d      	bgt.n	6d0e <__aeabi_f2d+0x8e>
    6cd2:	230b      	movs	r3, #11
    6cd4:	002a      	movs	r2, r5
    6cd6:	1a1b      	subs	r3, r3, r0
    6cd8:	40da      	lsrs	r2, r3
    6cda:	0013      	movs	r3, r2
    6cdc:	0002      	movs	r2, r0
    6cde:	3215      	adds	r2, #21
    6ce0:	4095      	lsls	r5, r2
    6ce2:	4a0f      	ldr	r2, [pc, #60]	; (6d20 <__aeabi_f2d+0xa0>)
    6ce4:	031b      	lsls	r3, r3, #12
    6ce6:	1a12      	subs	r2, r2, r0
    6ce8:	0552      	lsls	r2, r2, #21
    6cea:	0b1b      	lsrs	r3, r3, #12
    6cec:	0d52      	lsrs	r2, r2, #21
    6cee:	e7d7      	b.n	6ca0 <__aeabi_f2d+0x20>
    6cf0:	2d00      	cmp	r5, #0
    6cf2:	d006      	beq.n	6d02 <__aeabi_f2d+0x82>
    6cf4:	2280      	movs	r2, #128	; 0x80
    6cf6:	0b1b      	lsrs	r3, r3, #12
    6cf8:	0312      	lsls	r2, r2, #12
    6cfa:	4313      	orrs	r3, r2
    6cfc:	076d      	lsls	r5, r5, #29
    6cfe:	4a09      	ldr	r2, [pc, #36]	; (6d24 <__aeabi_f2d+0xa4>)
    6d00:	e7ce      	b.n	6ca0 <__aeabi_f2d+0x20>
    6d02:	4a08      	ldr	r2, [pc, #32]	; (6d24 <__aeabi_f2d+0xa4>)
    6d04:	2300      	movs	r3, #0
    6d06:	e7cb      	b.n	6ca0 <__aeabi_f2d+0x20>
    6d08:	2200      	movs	r2, #0
    6d0a:	2300      	movs	r3, #0
    6d0c:	e7c8      	b.n	6ca0 <__aeabi_f2d+0x20>
    6d0e:	0003      	movs	r3, r0
    6d10:	3b0b      	subs	r3, #11
    6d12:	409d      	lsls	r5, r3
    6d14:	002b      	movs	r3, r5
    6d16:	2500      	movs	r5, #0
    6d18:	e7e3      	b.n	6ce2 <__aeabi_f2d+0x62>
    6d1a:	46c0      	nop			; (mov r8, r8)
    6d1c:	800fffff 	.word	0x800fffff
    6d20:	00000389 	.word	0x00000389
    6d24:	000007ff 	.word	0x000007ff

00006d28 <__aeabi_d2f>:
    6d28:	004b      	lsls	r3, r1, #1
    6d2a:	b570      	push	{r4, r5, r6, lr}
    6d2c:	0d5e      	lsrs	r6, r3, #21
    6d2e:	030c      	lsls	r4, r1, #12
    6d30:	1c75      	adds	r5, r6, #1
    6d32:	0a64      	lsrs	r4, r4, #9
    6d34:	0f42      	lsrs	r2, r0, #29
    6d36:	056d      	lsls	r5, r5, #21
    6d38:	4322      	orrs	r2, r4
    6d3a:	0fc9      	lsrs	r1, r1, #31
    6d3c:	00c4      	lsls	r4, r0, #3
    6d3e:	0d6d      	lsrs	r5, r5, #21
    6d40:	2d01      	cmp	r5, #1
    6d42:	dd2a      	ble.n	6d9a <__aeabi_d2f+0x72>
    6d44:	4b3b      	ldr	r3, [pc, #236]	; (6e34 <__aeabi_d2f+0x10c>)
    6d46:	18f3      	adds	r3, r6, r3
    6d48:	2bfe      	cmp	r3, #254	; 0xfe
    6d4a:	dc1a      	bgt.n	6d82 <__aeabi_d2f+0x5a>
    6d4c:	2b00      	cmp	r3, #0
    6d4e:	dd42      	ble.n	6dd6 <__aeabi_d2f+0xae>
    6d50:	0180      	lsls	r0, r0, #6
    6d52:	1e45      	subs	r5, r0, #1
    6d54:	41a8      	sbcs	r0, r5
    6d56:	00d2      	lsls	r2, r2, #3
    6d58:	4310      	orrs	r0, r2
    6d5a:	0f62      	lsrs	r2, r4, #29
    6d5c:	4302      	orrs	r2, r0
    6d5e:	0750      	lsls	r0, r2, #29
    6d60:	d004      	beq.n	6d6c <__aeabi_d2f+0x44>
    6d62:	200f      	movs	r0, #15
    6d64:	4010      	ands	r0, r2
    6d66:	2804      	cmp	r0, #4
    6d68:	d000      	beq.n	6d6c <__aeabi_d2f+0x44>
    6d6a:	3204      	adds	r2, #4
    6d6c:	2080      	movs	r0, #128	; 0x80
    6d6e:	04c0      	lsls	r0, r0, #19
    6d70:	4010      	ands	r0, r2
    6d72:	d021      	beq.n	6db8 <__aeabi_d2f+0x90>
    6d74:	3301      	adds	r3, #1
    6d76:	2bff      	cmp	r3, #255	; 0xff
    6d78:	d003      	beq.n	6d82 <__aeabi_d2f+0x5a>
    6d7a:	0192      	lsls	r2, r2, #6
    6d7c:	0a52      	lsrs	r2, r2, #9
    6d7e:	b2db      	uxtb	r3, r3
    6d80:	e001      	b.n	6d86 <__aeabi_d2f+0x5e>
    6d82:	23ff      	movs	r3, #255	; 0xff
    6d84:	2200      	movs	r2, #0
    6d86:	0252      	lsls	r2, r2, #9
    6d88:	0a52      	lsrs	r2, r2, #9
    6d8a:	05db      	lsls	r3, r3, #23
    6d8c:	4313      	orrs	r3, r2
    6d8e:	005b      	lsls	r3, r3, #1
    6d90:	07c9      	lsls	r1, r1, #31
    6d92:	085b      	lsrs	r3, r3, #1
    6d94:	430b      	orrs	r3, r1
    6d96:	0018      	movs	r0, r3
    6d98:	bd70      	pop	{r4, r5, r6, pc}
    6d9a:	2e00      	cmp	r6, #0
    6d9c:	d007      	beq.n	6dae <__aeabi_d2f+0x86>
    6d9e:	4314      	orrs	r4, r2
    6da0:	d0ef      	beq.n	6d82 <__aeabi_d2f+0x5a>
    6da2:	2080      	movs	r0, #128	; 0x80
    6da4:	00d2      	lsls	r2, r2, #3
    6da6:	0480      	lsls	r0, r0, #18
    6da8:	4302      	orrs	r2, r0
    6daa:	23ff      	movs	r3, #255	; 0xff
    6dac:	e7d7      	b.n	6d5e <__aeabi_d2f+0x36>
    6dae:	4322      	orrs	r2, r4
    6db0:	2300      	movs	r3, #0
    6db2:	2a00      	cmp	r2, #0
    6db4:	d003      	beq.n	6dbe <__aeabi_d2f+0x96>
    6db6:	2205      	movs	r2, #5
    6db8:	08d2      	lsrs	r2, r2, #3
    6dba:	2bff      	cmp	r3, #255	; 0xff
    6dbc:	d003      	beq.n	6dc6 <__aeabi_d2f+0x9e>
    6dbe:	0252      	lsls	r2, r2, #9
    6dc0:	0a52      	lsrs	r2, r2, #9
    6dc2:	b2db      	uxtb	r3, r3
    6dc4:	e7df      	b.n	6d86 <__aeabi_d2f+0x5e>
    6dc6:	2a00      	cmp	r2, #0
    6dc8:	d032      	beq.n	6e30 <__aeabi_d2f+0x108>
    6dca:	2080      	movs	r0, #128	; 0x80
    6dcc:	03c0      	lsls	r0, r0, #15
    6dce:	4302      	orrs	r2, r0
    6dd0:	0252      	lsls	r2, r2, #9
    6dd2:	0a52      	lsrs	r2, r2, #9
    6dd4:	e7d7      	b.n	6d86 <__aeabi_d2f+0x5e>
    6dd6:	0018      	movs	r0, r3
    6dd8:	3017      	adds	r0, #23
    6dda:	db14      	blt.n	6e06 <__aeabi_d2f+0xde>
    6ddc:	2080      	movs	r0, #128	; 0x80
    6dde:	0400      	lsls	r0, r0, #16
    6de0:	4302      	orrs	r2, r0
    6de2:	201e      	movs	r0, #30
    6de4:	1ac0      	subs	r0, r0, r3
    6de6:	281f      	cmp	r0, #31
    6de8:	dc0f      	bgt.n	6e0a <__aeabi_d2f+0xe2>
    6dea:	0025      	movs	r5, r4
    6dec:	4b12      	ldr	r3, [pc, #72]	; (6e38 <__aeabi_d2f+0x110>)
    6dee:	18f3      	adds	r3, r6, r3
    6df0:	409d      	lsls	r5, r3
    6df2:	1e6e      	subs	r6, r5, #1
    6df4:	41b5      	sbcs	r5, r6
    6df6:	409a      	lsls	r2, r3
    6df8:	002b      	movs	r3, r5
    6dfa:	4313      	orrs	r3, r2
    6dfc:	0022      	movs	r2, r4
    6dfe:	40c2      	lsrs	r2, r0
    6e00:	431a      	orrs	r2, r3
    6e02:	2300      	movs	r3, #0
    6e04:	e7ab      	b.n	6d5e <__aeabi_d2f+0x36>
    6e06:	2300      	movs	r3, #0
    6e08:	e7d5      	b.n	6db6 <__aeabi_d2f+0x8e>
    6e0a:	2502      	movs	r5, #2
    6e0c:	426d      	negs	r5, r5
    6e0e:	1aeb      	subs	r3, r5, r3
    6e10:	0015      	movs	r5, r2
    6e12:	40dd      	lsrs	r5, r3
    6e14:	2820      	cmp	r0, #32
    6e16:	d009      	beq.n	6e2c <__aeabi_d2f+0x104>
    6e18:	4b08      	ldr	r3, [pc, #32]	; (6e3c <__aeabi_d2f+0x114>)
    6e1a:	18f3      	adds	r3, r6, r3
    6e1c:	409a      	lsls	r2, r3
    6e1e:	4314      	orrs	r4, r2
    6e20:	1e62      	subs	r2, r4, #1
    6e22:	4194      	sbcs	r4, r2
    6e24:	0022      	movs	r2, r4
    6e26:	2300      	movs	r3, #0
    6e28:	432a      	orrs	r2, r5
    6e2a:	e798      	b.n	6d5e <__aeabi_d2f+0x36>
    6e2c:	2200      	movs	r2, #0
    6e2e:	e7f6      	b.n	6e1e <__aeabi_d2f+0xf6>
    6e30:	2200      	movs	r2, #0
    6e32:	e7a8      	b.n	6d86 <__aeabi_d2f+0x5e>
    6e34:	fffffc80 	.word	0xfffffc80
    6e38:	fffffc82 	.word	0xfffffc82
    6e3c:	fffffca2 	.word	0xfffffca2

00006e40 <__clzsi2>:
    6e40:	211c      	movs	r1, #28
    6e42:	2301      	movs	r3, #1
    6e44:	041b      	lsls	r3, r3, #16
    6e46:	4298      	cmp	r0, r3
    6e48:	d301      	bcc.n	6e4e <__clzsi2+0xe>
    6e4a:	0c00      	lsrs	r0, r0, #16
    6e4c:	3910      	subs	r1, #16
    6e4e:	0a1b      	lsrs	r3, r3, #8
    6e50:	4298      	cmp	r0, r3
    6e52:	d301      	bcc.n	6e58 <__clzsi2+0x18>
    6e54:	0a00      	lsrs	r0, r0, #8
    6e56:	3908      	subs	r1, #8
    6e58:	091b      	lsrs	r3, r3, #4
    6e5a:	4298      	cmp	r0, r3
    6e5c:	d301      	bcc.n	6e62 <__clzsi2+0x22>
    6e5e:	0900      	lsrs	r0, r0, #4
    6e60:	3904      	subs	r1, #4
    6e62:	a202      	add	r2, pc, #8	; (adr r2, 6e6c <__clzsi2+0x2c>)
    6e64:	5c10      	ldrb	r0, [r2, r0]
    6e66:	1840      	adds	r0, r0, r1
    6e68:	4770      	bx	lr
    6e6a:	46c0      	nop			; (mov r8, r8)
    6e6c:	02020304 	.word	0x02020304
    6e70:	01010101 	.word	0x01010101
	...

00006e7c <__errno>:
    6e7c:	4b01      	ldr	r3, [pc, #4]	; (6e84 <__errno+0x8>)
    6e7e:	6818      	ldr	r0, [r3, #0]
    6e80:	4770      	bx	lr
    6e82:	46c0      	nop			; (mov r8, r8)
    6e84:	2000011c 	.word	0x2000011c

00006e88 <__libc_init_array>:
    6e88:	4b0e      	ldr	r3, [pc, #56]	; (6ec4 <__libc_init_array+0x3c>)
    6e8a:	b570      	push	{r4, r5, r6, lr}
    6e8c:	2500      	movs	r5, #0
    6e8e:	001e      	movs	r6, r3
    6e90:	4c0d      	ldr	r4, [pc, #52]	; (6ec8 <__libc_init_array+0x40>)
    6e92:	1ae4      	subs	r4, r4, r3
    6e94:	10a4      	asrs	r4, r4, #2
    6e96:	42a5      	cmp	r5, r4
    6e98:	d004      	beq.n	6ea4 <__libc_init_array+0x1c>
    6e9a:	00ab      	lsls	r3, r5, #2
    6e9c:	58f3      	ldr	r3, [r6, r3]
    6e9e:	4798      	blx	r3
    6ea0:	3501      	adds	r5, #1
    6ea2:	e7f8      	b.n	6e96 <__libc_init_array+0xe>
    6ea4:	f000 f896 	bl	6fd4 <_init>
    6ea8:	4b08      	ldr	r3, [pc, #32]	; (6ecc <__libc_init_array+0x44>)
    6eaa:	2500      	movs	r5, #0
    6eac:	001e      	movs	r6, r3
    6eae:	4c08      	ldr	r4, [pc, #32]	; (6ed0 <__libc_init_array+0x48>)
    6eb0:	1ae4      	subs	r4, r4, r3
    6eb2:	10a4      	asrs	r4, r4, #2
    6eb4:	42a5      	cmp	r5, r4
    6eb6:	d004      	beq.n	6ec2 <__libc_init_array+0x3a>
    6eb8:	00ab      	lsls	r3, r5, #2
    6eba:	58f3      	ldr	r3, [r6, r3]
    6ebc:	4798      	blx	r3
    6ebe:	3501      	adds	r5, #1
    6ec0:	e7f8      	b.n	6eb4 <__libc_init_array+0x2c>
    6ec2:	bd70      	pop	{r4, r5, r6, pc}
    6ec4:	00006fe0 	.word	0x00006fe0
    6ec8:	00006fe0 	.word	0x00006fe0
    6ecc:	00006fe0 	.word	0x00006fe0
    6ed0:	00006fe4 	.word	0x00006fe4

00006ed4 <senseBatPin>:
    6ed4:	06000000 01000106                                .....

00006ed9 <senseAPin>:
    6ed9:	03010001 0100010b                                .....

00006ede <senseBPin>:
    6ede:	02010001 0000010a                                .....

00006ee3 <senseCPin>:
    6ee3:	03000001 00000101                                .....

00006ee8 <senseDPin>:
    6ee8:	02000001 00000100                                .....

00006eed <analogAccelPin>:
    6eed:	07000001 70000007 0000776f 00000000     .......pow......
    6efd:	00000000                                         ...

00006f00 <TWO52>:
    6f00:	00000000 43300000 00000000 c3300000     ......0C......0.
    6f10:	00004f54 00004eb2 00004eb2 00004eb0     TO...N...N...N..
    6f20:	00004f46 00004f46 00004f3c 00004eb0     FO..FO..<O...N..
    6f30:	00004f46 00004f3c 00004f46 00004eb0     FO..<O..FO...N..
    6f40:	00004f4c 00004f4c 00004f4c 00004fd6     LO..LO..LO...O..
    6f50:	000058ec 000057ba 000058c0 000057b0     .X...W...X...W..
    6f60:	000058c0 000058ca 000058c0 000057b0     .X...X...X...W..
    6f70:	000057ba 000057ba 000058ca 000057b0     .W...W...X...W..
    6f80:	000057a6 000057a6 000057a6 00005b1c     .W...W...W...[..
    6f90:	00006134 00005ff4 00005ff4 00005ff2     4a..._..._..._..
    6fa0:	0000610c 0000610c 000060fe 00005ff2     .a...a...`..._..
    6fb0:	0000610c 000060fe 0000610c 00005ff2     .a...`...a..._..
    6fc0:	00006114 00006114 00006114 00006314     .a...a...a...c..
    6fd0:	00000043                                C...

00006fd4 <_init>:
    6fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fd6:	46c0      	nop			; (mov r8, r8)
    6fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6fda:	bc08      	pop	{r3}
    6fdc:	469e      	mov	lr, r3
    6fde:	4770      	bx	lr

00006fe0 <__init_array_start>:
    6fe0:	000000dd 	.word	0x000000dd

00006fe4 <_fini>:
    6fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fe6:	46c0      	nop			; (mov r8, r8)
    6fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6fea:	bc08      	pop	{r3}
    6fec:	469e      	mov	lr, r3
    6fee:	4770      	bx	lr

00006ff0 <__fini_array_start>:
    6ff0:	000000b5 	.word	0x000000b5
