
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000641c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a4  20000000  0000641c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003a0  200004a8  000068c8  000204a8  2**3
                  ALLOC
  3 .stack        00002000  20000848  00006c68  000204a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   000229fb  00000000  00000000  00020525  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000029fc  00000000  00000000  00042f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000254f  00000000  00000000  0004591c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000480  00000000  00000000  00047e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c70  00000000  00000000  000482eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001691b  00000000  00000000  00048f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a6e0  00000000  00000000  0005f876  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072ab6  00000000  00000000  00069f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000010d4  00000000  00000000  000dca0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	20002848 	.word	0x20002848
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000f1d 	.word	0x00000f1d
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000fbd 	.word	0x00000fbd
      90:	00001025 	.word	0x00001025
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004a8 	.word	0x200004a8
      d4:	00000000 	.word	0x00000000
      d8:	0000641c 	.word	0x0000641c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004ac 	.word	0x200004ac
     108:	0000641c 	.word	0x0000641c
     10c:	0000641c 	.word	0x0000641c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	0000641c 	.word	0x0000641c
     1a4:	20000000 	.word	0x20000000
     1a8:	200004a4 	.word	0x200004a4
     1ac:	200004a8 	.word	0x200004a8
     1b0:	20000848 	.word	0x20000848
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00006181 	.word	0x00006181
     1d0:	000009c1 	.word	0x000009c1

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady() {
     1e6:	b570      	push	{r4, r5, r6, lr}
     1e8:	4c08      	ldr	r4, [pc, #32]	; (20c <AT25SFHoldTillReady+0x28>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	6163      	str	r3, [r4, #20]
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_READSTATUS);
     1ee:	2105      	movs	r1, #5
     1f0:	2001      	movs	r0, #1
     1f2:	4b07      	ldr	r3, [pc, #28]	; (210 <AT25SFHoldTillReady+0x2c>)
     1f4:	4798      	blx	r3
    while (spiDataIn(MEM_SPI) & 0x01);
     1f6:	2501      	movs	r5, #1
     1f8:	2001      	movs	r0, #1
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <AT25SFHoldTillReady+0x30>)
     1fc:	4798      	blx	r3
     1fe:	4228      	tst	r0, r5
     200:	d1fa      	bne.n	1f8 <AT25SFHoldTillReady+0x14>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     202:	2380      	movs	r3, #128	; 0x80
     204:	02db      	lsls	r3, r3, #11
     206:	61a3      	str	r3, [r4, #24]
    pinHigh(cs_mem);
}
     208:	bd70      	pop	{r4, r5, r6, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	41004400 	.word	0x41004400
     210:	000029a9 	.word	0x000029a9
     214:	000029c1 	.word	0x000029c1

00000218 <AT25SFChipErase>:
void AT25SFChipErase() {
     218:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     21a:	2580      	movs	r5, #128	; 0x80
     21c:	4c06      	ldr	r4, [pc, #24]	; (238 <AT25SFChipErase+0x20>)
     21e:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     220:	4e06      	ldr	r6, [pc, #24]	; (23c <AT25SFChipErase+0x24>)
     222:	6165      	str	r5, [r4, #20]
     224:	2106      	movs	r1, #6
     226:	2001      	movs	r0, #1
     228:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_CHIP_ERASE);
     22c:	2160      	movs	r1, #96	; 0x60
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     22e:	6165      	str	r5, [r4, #20]
     230:	2001      	movs	r0, #1
     232:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     234:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     236:	bd70      	pop	{r4, r5, r6, pc}
     238:	41004400 	.word	0x41004400
     23c:	000029a9 	.word	0x000029a9

00000240 <AT25SFWriteBytes>:
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     242:	2780      	movs	r7, #128	; 0x80
     244:	0006      	movs	r6, r0
     246:	4d13      	ldr	r5, [pc, #76]	; (294 <AT25SFWriteBytes+0x54>)
     248:	02ff      	lsls	r7, r7, #11
     24a:	9201      	str	r2, [sp, #4]


    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     24c:	4c12      	ldr	r4, [pc, #72]	; (298 <AT25SFWriteBytes+0x58>)
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     24e:	9100      	str	r1, [sp, #0]


    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     250:	2001      	movs	r0, #1
     252:	616f      	str	r7, [r5, #20]
     254:	2106      	movs	r1, #6
     256:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     258:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     25a:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     25c:	616f      	str	r7, [r5, #20]
     25e:	2001      	movs	r0, #1
     260:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0xFF0000) >> 16));
     262:	0c31      	lsrs	r1, r6, #16
     264:	b2c9      	uxtb	r1, r1
     266:	2001      	movs	r0, #1
     268:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x00FF00) >>  8));
     26a:	0a31      	lsrs	r1, r6, #8
     26c:	b2c9      	uxtb	r1, r1
     26e:	2001      	movs	r0, #1
     270:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x0000FF) >>  0));
     272:	b2f1      	uxtb	r1, r6
     274:	2001      	movs	r0, #1
     276:	47a0      	blx	r4
     278:	9e01      	ldr	r6, [sp, #4]
     27a:	9b00      	ldr	r3, [sp, #0]
     27c:	18f7      	adds	r7, r6, r3

    for (u8_t pos = 0; pos < len; ++pos) {
     27e:	42be      	cmp	r6, r7
     280:	d004      	beq.n	28c <AT25SFWriteBytes+0x4c>
        spiDataOut(MEM_SPI, bytes[pos]);
     282:	7831      	ldrb	r1, [r6, #0]
     284:	2001      	movs	r0, #1
     286:	47a0      	blx	r4
     288:	3601      	adds	r6, #1
     28a:	e7f8      	b.n	27e <AT25SFWriteBytes+0x3e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     28c:	2380      	movs	r3, #128	; 0x80
     28e:	02db      	lsls	r3, r3, #11
     290:	61ab      	str	r3, [r5, #24]
    }

    pinHigh(cs_mem);

}
     292:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     294:	41004400 	.word	0x41004400
     298:	000029a9 	.word	0x000029a9

0000029c <AT25SEWritePage>:
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     29e:	2780      	movs	r7, #128	; 0x80
     2a0:	0006      	movs	r6, r0
     2a2:	4d13      	ldr	r5, [pc, #76]	; (2f0 <AT25SEWritePage+0x54>)
     2a4:	02ff      	lsls	r7, r7, #11

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2a6:	4c13      	ldr	r4, [pc, #76]	; (2f4 <AT25SEWritePage+0x58>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2a8:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2aa:	2001      	movs	r0, #1
     2ac:	616f      	str	r7, [r5, #20]
     2ae:	2106      	movs	r1, #6
     2b0:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2b2:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     2b4:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2b6:	616f      	str	r7, [r5, #20]
     2b8:	2001      	movs	r0, #1
     2ba:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     2bc:	0c31      	lsrs	r1, r6, #16
     2be:	b2c9      	uxtb	r1, r1
     2c0:	2001      	movs	r0, #1
     2c2:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     2c4:	0a31      	lsrs	r1, r6, #8
     2c6:	b2c9      	uxtb	r1, r1
     2c8:	2001      	movs	r0, #1
     2ca:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     2cc:	b2f1      	uxtb	r1, r6
     2ce:	2001      	movs	r0, #1
     2d0:	47a0      	blx	r4
     2d2:	9e01      	ldr	r6, [sp, #4]
     2d4:	1c77      	adds	r7, r6, #1
     2d6:	37ff      	adds	r7, #255	; 0xff


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        spiDataOut(SPI1,data[pos]);
     2d8:	7831      	ldrb	r1, [r6, #0]
     2da:	2001      	movs	r0, #1
     2dc:	3601      	adds	r6, #1
     2de:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     2e0:	42be      	cmp	r6, r7
     2e2:	d1f9      	bne.n	2d8 <AT25SEWritePage+0x3c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2e4:	2380      	movs	r3, #128	; 0x80
     2e6:	02db      	lsls	r3, r3, #11
     2e8:	61ab      	str	r3, [r5, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     2ea:	2000      	movs	r0, #0
     2ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	41004400 	.word	0x41004400
     2f4:	000029a9 	.word	0x000029a9

000002f8 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2f8:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     2fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2fc:	0005      	movs	r5, r0
     2fe:	000f      	movs	r7, r1
     300:	4e11      	ldr	r6, [pc, #68]	; (348 <AT25SEreadSample+0x50>)
     302:	02db      	lsls	r3, r3, #11
     304:	9201      	str	r2, [sp, #4]

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     306:	4c11      	ldr	r4, [pc, #68]	; (34c <AT25SEreadSample+0x54>)
     308:	6173      	str	r3, [r6, #20]
     30a:	210b      	movs	r1, #11
     30c:	2001      	movs	r0, #1
     30e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     310:	0c29      	lsrs	r1, r5, #16
     312:	b2c9      	uxtb	r1, r1
     314:	2001      	movs	r0, #1
     316:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     318:	0a29      	lsrs	r1, r5, #8
     31a:	b2c9      	uxtb	r1, r1
     31c:	2001      	movs	r0, #1
     31e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     320:	b2e9      	uxtb	r1, r5
     322:	2001      	movs	r0, #1
     324:	47a0      	blx	r4
    spiDataOut(MEM_SPI, 0xFF);
     326:	21ff      	movs	r1, #255	; 0xff
     328:	2001      	movs	r0, #1
     32a:	47a0      	blx	r4
     32c:	9c01      	ldr	r4, [sp, #4]
     32e:	19e7      	adds	r7, r4, r7


    for (u8_t pos = 0; pos < len; ++pos) {
     330:	42bc      	cmp	r4, r7
     332:	d005      	beq.n	340 <AT25SEreadSample+0x48>
        data[pos] = spiDataIn(MEM_SPI);
     334:	2001      	movs	r0, #1
     336:	4b06      	ldr	r3, [pc, #24]	; (350 <AT25SEreadSample+0x58>)
     338:	4798      	blx	r3
     33a:	7020      	strb	r0, [r4, #0]
     33c:	3401      	adds	r4, #1
     33e:	e7f7      	b.n	330 <AT25SEreadSample+0x38>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     340:	2380      	movs	r3, #128	; 0x80
     342:	02db      	lsls	r3, r3, #11
     344:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);

}
     346:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     348:	41004400 	.word	0x41004400
     34c:	000029a9 	.word	0x000029a9
     350:	000029c1 	.word	0x000029c1

00000354 <AT25SEreadPage>:

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     356:	2380      	movs	r3, #128	; 0x80
     358:	0007      	movs	r7, r0
     35a:	000c      	movs	r4, r1
     35c:	4e10      	ldr	r6, [pc, #64]	; (3a0 <AT25SEreadPage+0x4c>)
     35e:	02db      	lsls	r3, r3, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     360:	4d10      	ldr	r5, [pc, #64]	; (3a4 <AT25SEreadPage+0x50>)
     362:	6173      	str	r3, [r6, #20]
     364:	210b      	movs	r1, #11
     366:	2001      	movs	r0, #1
     368:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     36a:	0c39      	lsrs	r1, r7, #16
     36c:	b2c9      	uxtb	r1, r1
     36e:	2001      	movs	r0, #1
     370:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     372:	0a39      	lsrs	r1, r7, #8
     374:	b2c9      	uxtb	r1, r1
     376:	2001      	movs	r0, #1
     378:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     37a:	b2f9      	uxtb	r1, r7
     37c:	2001      	movs	r0, #1
     37e:	47a8      	blx	r5
    spiDataOut(MEM_SPI, 0xFF);
     380:	21ff      	movs	r1, #255	; 0xff
     382:	2001      	movs	r0, #1
     384:	47a8      	blx	r5
     386:	1c65      	adds	r5, r4, #1
     388:	35ff      	adds	r5, #255	; 0xff

    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataIn(MEM_SPI);
     38a:	2001      	movs	r0, #1
     38c:	4b06      	ldr	r3, [pc, #24]	; (3a8 <AT25SEreadPage+0x54>)
     38e:	4798      	blx	r3
     390:	7020      	strb	r0, [r4, #0]
     392:	3401      	adds	r4, #1
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
    spiDataOut(MEM_SPI, 0xFF);

    for (u16_t pos = 0; pos < 256; ++pos) {
     394:	42ac      	cmp	r4, r5
     396:	d1f8      	bne.n	38a <AT25SEreadPage+0x36>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     398:	2380      	movs	r3, #128	; 0x80
     39a:	02db      	lsls	r3, r3, #11
     39c:	61b3      	str	r3, [r6, #24]
        data[pos] = spiDataIn(MEM_SPI);
    }
    pinHigh(cs_mem);

}
     39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3a0:	41004400 	.word	0x41004400
     3a4:	000029a9 	.word	0x000029a9
     3a8:	000029c1 	.word	0x000029c1

000003ac <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>

u32_t readMS5803AdcResults() {
     3ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3ae:	2780      	movs	r7, #128	; 0x80
     3b0:	4e0b      	ldr	r6, [pc, #44]	; (3e0 <readMS5803AdcResults+0x34>)
     3b2:	01ff      	lsls	r7, r7, #7

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, cmdAdcRead_);
     3b4:	2100      	movs	r1, #0
     3b6:	4b0b      	ldr	r3, [pc, #44]	; (3e4 <readMS5803AdcResults+0x38>)
     3b8:	6177      	str	r7, [r6, #20]
     3ba:	2002      	movs	r0, #2
     3bc:	4798      	blx	r3
    u8_t _byte1 = spiDataIn(SPI2);
     3be:	4d0a      	ldr	r5, [pc, #40]	; (3e8 <readMS5803AdcResults+0x3c>)
     3c0:	2002      	movs	r0, #2
     3c2:	47a8      	blx	r5
     3c4:	0004      	movs	r4, r0
    u8_t _byte2 = spiDataIn(SPI2);
     3c6:	2002      	movs	r0, #2
     3c8:	47a8      	blx	r5
     3ca:	9001      	str	r0, [sp, #4]
    u8_t _byte3 = spiDataIn(SPI2);
     3cc:	2002      	movs	r0, #2
     3ce:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3d0:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     3d2:	9b01      	ldr	r3, [sp, #4]
     3d4:	0424      	lsls	r4, r4, #16
     3d6:	021b      	lsls	r3, r3, #8
     3d8:	431c      	orrs	r4, r3
     3da:	4320      	orrs	r0, r4
}
     3dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     3de:	46c0      	nop			; (mov r8, r8)
     3e0:	41004400 	.word	0x41004400
     3e4:	000029a9 	.word	0x000029a9
     3e8:	000029c1 	.word	0x000029c1

000003ec <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ee:	b087      	sub	sp, #28
     3f0:	9304      	str	r3, [sp, #16]
    const u16_t C1 = coefficients_[1];
     3f2:	4b24      	ldr	r3, [pc, #144]	; (484 <ConvertPressureTemperature+0x98>)

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3f4:	9003      	str	r0, [sp, #12]
     3f6:	0014      	movs	r4, r2
    const u16_t C1 = coefficients_[1];
     3f8:	885a      	ldrh	r2, [r3, #2]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     3fa:	4f23      	ldr	r7, [pc, #140]	; (488 <ConvertPressureTemperature+0x9c>)
    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
     3fc:	9201      	str	r2, [sp, #4]
    const u16_t C2 = coefficients_[2];
     3fe:	889a      	ldrh	r2, [r3, #4]
     400:	9200      	str	r2, [sp, #0]
    const u16_t C3 = coefficients_[3];
    const u16_t C4 = coefficients_[4];
     402:	891a      	ldrh	r2, [r3, #8]
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
    const u16_t C2 = coefficients_[2];
    const u16_t C3 = coefficients_[3];
     404:	88dd      	ldrh	r5, [r3, #6]
    const u16_t C4 = coefficients_[4];
     406:	9202      	str	r2, [sp, #8]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     408:	895e      	ldrh	r6, [r3, #10]
     40a:	0236      	lsls	r6, r6, #8
     40c:	1b8e      	subs	r6, r1, r6
     40e:	17f2      	asrs	r2, r6, #31
     410:	9205      	str	r2, [sp, #20]
     412:	8998      	ldrh	r0, [r3, #12]
     414:	0032      	movs	r2, r6
     416:	17f3      	asrs	r3, r6, #31
     418:	2100      	movs	r1, #0
     41a:	47b8      	blx	r7
     41c:	23fa      	movs	r3, #250	; 0xfa
     41e:	0249      	lsls	r1, r1, #9
     420:	0dc0      	lsrs	r0, r0, #23
     422:	4308      	orrs	r0, r1
     424:	00db      	lsls	r3, r3, #3
     426:	18c0      	adds	r0, r0, r3
     428:	6020      	str	r0, [r4, #0]

    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
    const  int64_t SENS  =  ((int64_t)C1 << 16) + ((C3 * (int64_t)dT) >> 7);
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     42a:	0032      	movs	r2, r6
     42c:	17f3      	asrs	r3, r6, #31
     42e:	0028      	movs	r0, r5
     430:	2100      	movs	r1, #0
     432:	47b8      	blx	r7
     434:	064c      	lsls	r4, r1, #25
     436:	11cb      	asrs	r3, r1, #7
     438:	2100      	movs	r1, #0
     43a:	09c2      	lsrs	r2, r0, #7
     43c:	4322      	orrs	r2, r4
     43e:	9c01      	ldr	r4, [sp, #4]
     440:	0420      	lsls	r0, r4, #16
     442:	1880      	adds	r0, r0, r2
     444:	4159      	adcs	r1, r3
     446:	9a03      	ldr	r2, [sp, #12]
     448:	2300      	movs	r3, #0
     44a:	47b8      	blx	r7
     44c:	02cb      	lsls	r3, r1, #11
     44e:	0d44      	lsrs	r4, r0, #21
     450:	0032      	movs	r2, r6
     452:	431c      	orrs	r4, r3
     454:	154d      	asrs	r5, r1, #21
     456:	9b05      	ldr	r3, [sp, #20]
     458:	9802      	ldr	r0, [sp, #8]
     45a:	2100      	movs	r1, #0
     45c:	47b8      	blx	r7
     45e:	068b      	lsls	r3, r1, #26
     460:	118f      	asrs	r7, r1, #6
     462:	9900      	ldr	r1, [sp, #0]
     464:	0986      	lsrs	r6, r0, #6
     466:	431e      	orrs	r6, r3
     468:	044a      	lsls	r2, r1, #17
     46a:	0bcb      	lsrs	r3, r1, #15
     46c:	1992      	adds	r2, r2, r6
     46e:	417b      	adcs	r3, r7
     470:	1aa4      	subs	r4, r4, r2
     472:	419d      	sbcs	r5, r3
     474:	046b      	lsls	r3, r5, #17
     476:	0be4      	lsrs	r4, r4, #15
     478:	431c      	orrs	r4, r3
     47a:	9b04      	ldr	r3, [sp, #16]
     47c:	601c      	str	r4, [r3, #0]

}
     47e:	b007      	add	sp, #28
     480:	bdf0      	pop	{r4, r5, r6, r7, pc}
     482:	46c0      	nop			; (mov r8, r8)
     484:	2000063e 	.word	0x2000063e
     488:	0000409d 	.word	0x0000409d

0000048c <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     48c:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/100)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     48e:	4b0c      	ldr	r3, [pc, #48]	; (4c0 <paToFeetNOAA+0x34>)
     490:	4798      	blx	r3
     492:	4c0c      	ldr	r4, [pc, #48]	; (4c4 <paToFeetNOAA+0x38>)
     494:	2200      	movs	r2, #0
     496:	4b0c      	ldr	r3, [pc, #48]	; (4c8 <paToFeetNOAA+0x3c>)
     498:	47a0      	blx	r4
     49a:	2200      	movs	r2, #0
     49c:	4b0b      	ldr	r3, [pc, #44]	; (4cc <paToFeetNOAA+0x40>)
     49e:	47a0      	blx	r4
     4a0:	4a0b      	ldr	r2, [pc, #44]	; (4d0 <paToFeetNOAA+0x44>)
     4a2:	4b0c      	ldr	r3, [pc, #48]	; (4d4 <paToFeetNOAA+0x48>)
     4a4:	4c0c      	ldr	r4, [pc, #48]	; (4d8 <paToFeetNOAA+0x4c>)
     4a6:	47a0      	blx	r4
    return altFeet;
     4a8:	4c0c      	ldr	r4, [pc, #48]	; (4dc <paToFeetNOAA+0x50>)
double paToFeetNOAA(int32_t pressureMbar) {

    double lower =(((double)(pressureMbar)/100)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     4aa:	0002      	movs	r2, r0
     4ac:	000b      	movs	r3, r1
    return altFeet;
     4ae:	2000      	movs	r0, #0
     4b0:	490b      	ldr	r1, [pc, #44]	; (4e0 <paToFeetNOAA+0x54>)
     4b2:	47a0      	blx	r4
     4b4:	4a0b      	ldr	r2, [pc, #44]	; (4e4 <paToFeetNOAA+0x58>)
     4b6:	4b0c      	ldr	r3, [pc, #48]	; (4e8 <paToFeetNOAA+0x5c>)
     4b8:	4c0c      	ldr	r4, [pc, #48]	; (4ec <paToFeetNOAA+0x60>)
     4ba:	47a0      	blx	r4

}
     4bc:	bd10      	pop	{r4, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	00005e85 	.word	0x00005e85
     4c4:	000049f5 	.word	0x000049f5
     4c8:	40590000 	.word	0x40590000
     4cc:	408faa00 	.word	0x408faa00
     4d0:	e279dd3c 	.word	0xe279dd3c
     4d4:	3fc85b39 	.word	0x3fc85b39
     4d8:	00002cd5 	.word	0x00002cd5
     4dc:	00005731 	.word	0x00005731
     4e0:	3ff00000 	.word	0x3ff00000
     4e4:	9999999a 	.word	0x9999999a
     4e8:	4101beb3 	.word	0x4101beb3
     4ec:	0000523d 	.word	0x0000523d

000004f0 <readMS5803Coefficients>:



void readMS5803Coefficients() {
     4f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     4f2:	24a2      	movs	r4, #162	; 0xa2
     4f4:	4d11      	ldr	r5, [pc, #68]	; (53c <readMS5803Coefficients+0x4c>)

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
        delay_us(600);
     4f6:	2096      	movs	r0, #150	; 0x96
     4f8:	4e11      	ldr	r6, [pc, #68]	; (540 <readMS5803Coefficients+0x50>)
     4fa:	0080      	lsls	r0, r0, #2
     4fc:	47b0      	blx	r6
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
        delay_us(600);
     4fe:	2096      	movs	r0, #150	; 0x96
     500:	0080      	lsls	r0, r0, #2
     502:	47b0      	blx	r6
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     504:	2380      	movs	r3, #128	; 0x80
     506:	4e0f      	ldr	r6, [pc, #60]	; (544 <readMS5803Coefficients+0x54>)
     508:	01db      	lsls	r3, r3, #7
        pinLow(cs_baro);
        spiDataOut(SPI2, _cmd);
     50a:	0021      	movs	r1, r4
     50c:	6173      	str	r3, [r6, #20]
     50e:	2002      	movs	r0, #2
     510:	4b0d      	ldr	r3, [pc, #52]	; (548 <readMS5803Coefficients+0x58>)
     512:	4798      	blx	r3
        u8_t _byte1 = spiDataIn(SPI2);
     514:	4f0d      	ldr	r7, [pc, #52]	; (54c <readMS5803Coefficients+0x5c>)
     516:	2002      	movs	r0, #2
     518:	47b8      	blx	r7
     51a:	9001      	str	r0, [sp, #4]
        u8_t _byte2 = spiDataIn(SPI2);
     51c:	2002      	movs	r0, #2
     51e:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     520:	2380      	movs	r3, #128	; 0x80
     522:	01db      	lsls	r3, r3, #7
     524:	61b3      	str	r3, [r6, #24]
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     526:	9b01      	ldr	r3, [sp, #4]
     528:	3402      	adds	r4, #2
     52a:	021b      	lsls	r3, r3, #8
     52c:	4318      	orrs	r0, r3
     52e:	b2e4      	uxtb	r4, r4
     530:	8028      	strh	r0, [r5, #0]
     532:	3502      	adds	r5, #2



void readMS5803Coefficients() {

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
     534:	2cae      	cmp	r4, #174	; 0xae
     536:	d1de      	bne.n	4f6 <readMS5803Coefficients+0x6>
        u8_t _byte2 = spiDataIn(SPI2);
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     538:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     53a:	46c0      	nop			; (mov r8, r8)
     53c:	20000640 	.word	0x20000640
     540:	00000ebd 	.word	0x00000ebd
     544:	41004400 	.word	0x41004400
     548:	000029a9 	.word	0x000029a9
     54c:	000029c1 	.word	0x000029c1

00000550 <initMS5803Barometer>:

void initMS5803Barometer() {
     550:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     552:	2580      	movs	r5, #128	; 0x80
     554:	4c06      	ldr	r4, [pc, #24]	; (570 <initMS5803Barometer+0x20>)
     556:	01ed      	lsls	r5, r5, #7


    pinLow(cs_baro);
    spiDataOut(BARO_SPI, MS5803_CMD_RES);
     558:	211e      	movs	r1, #30
     55a:	6165      	str	r5, [r4, #20]
     55c:	2002      	movs	r0, #2
     55e:	4b05      	ldr	r3, [pc, #20]	; (574 <initMS5803Barometer+0x24>)
     560:	4798      	blx	r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     562:	61a5      	str	r5, [r4, #24]

    pinHigh(cs_baro);
    delay_ms(200);
     564:	20c8      	movs	r0, #200	; 0xc8
     566:	4b04      	ldr	r3, [pc, #16]	; (578 <initMS5803Barometer+0x28>)
     568:	4798      	blx	r3
    readMS5803Coefficients();
     56a:	4b04      	ldr	r3, [pc, #16]	; (57c <initMS5803Barometer+0x2c>)
     56c:	4798      	blx	r3

}
     56e:	bd70      	pop	{r4, r5, r6, pc}
     570:	41004400 	.word	0x41004400
     574:	000029a9 	.word	0x000029a9
     578:	00000eed 	.word	0x00000eed
     57c:	000004f1 	.word	0x000004f1

00000580 <init>:


void init() {

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     580:	211e      	movs	r1, #30
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     582:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     584:	4afc      	ldr	r2, [pc, #1008]	; (978 <init+0x3f8>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     586:	b085      	sub	sp, #20

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     588:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     58a:	2401      	movs	r4, #1
     58c:	438b      	bics	r3, r1
     58e:	391c      	subs	r1, #28
     590:	430b      	orrs	r3, r1
     592:	6053      	str	r3, [r2, #4]

    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     594:	4af9      	ldr	r2, [pc, #996]	; (97c <init+0x3fc>)
     596:	3106      	adds	r1, #6
     598:	6993      	ldr	r3, [r2, #24]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     59a:	260f      	movs	r6, #15
     59c:	430b      	orrs	r3, r1
     59e:	6193      	str	r3, [r2, #24]

    SystemInit();
     5a0:	4bf7      	ldr	r3, [pc, #988]	; (980 <init+0x400>)
     5a2:	4798      	blx	r3
    GclkInit();
     5a4:	4bf7      	ldr	r3, [pc, #988]	; (984 <init+0x404>)
     5a6:	4798      	blx	r3
    RtcInit();
     5a8:	4bf7      	ldr	r3, [pc, #988]	; (988 <init+0x408>)
     5aa:	4798      	blx	r3
    delayInit();
     5ac:	4bf7      	ldr	r3, [pc, #988]	; (98c <init+0x40c>)
     5ae:	4798      	blx	r3
    adcInit();
     5b0:	4bf7      	ldr	r3, [pc, #988]	; (990 <init+0x410>)
     5b2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5b4:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5b6:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5b8:	4bf6      	ldr	r3, [pc, #984]	; (994 <init+0x414>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5ba:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5bc:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5be:	5858      	ldr	r0, [r3, r1]
     5c0:	4af5      	ldr	r2, [pc, #980]	; (998 <init+0x418>)
     5c2:	4002      	ands	r2, r0
     5c4:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5c6:	4bf5      	ldr	r3, [pc, #980]	; (99c <init+0x41c>)
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5c8:	2002      	movs	r0, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5ca:	0019      	movs	r1, r3
     5cc:	3154      	adds	r1, #84	; 0x54
     5ce:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5d0:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5d2:	43a2      	bics	r2, r4
     5d4:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5d6:	2280      	movs	r2, #128	; 0x80
     5d8:	0352      	lsls	r2, r2, #13
     5da:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5dc:	3533      	adds	r5, #51	; 0x33
     5de:	782a      	ldrb	r2, [r5, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5e0:	390e      	subs	r1, #14

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5e2:	43b2      	bics	r2, r6
     5e4:	4322      	orrs	r2, r4
     5e6:	702a      	strb	r2, [r5, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5e8:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5ea:	001f      	movs	r7, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5ec:	4322      	orrs	r2, r4
     5ee:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5f0:	001a      	movs	r2, r3
     5f2:	3247      	adds	r2, #71	; 0x47
     5f4:	7811      	ldrb	r1, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5f6:	3794      	adds	r7, #148	; 0x94
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5f8:	43a1      	bics	r1, r4
     5fa:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5fc:	7811      	ldrb	r1, [r2, #0]
     5fe:	4301      	orrs	r1, r0
     600:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     602:	2180      	movs	r1, #128	; 0x80
     604:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     606:	7829      	ldrb	r1, [r5, #0]
     608:	300e      	adds	r0, #14
     60a:	4031      	ands	r1, r6
     60c:	4301      	orrs	r1, r0
     60e:	7029      	strb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     610:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     612:	7811      	ldrb	r1, [r2, #0]
     614:	4321      	orrs	r1, r4
     616:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     618:	327c      	adds	r2, #124	; 0x7c
     61a:	7811      	ldrb	r1, [r2, #0]
     61c:	43a1      	bics	r1, r4
     61e:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     620:	7811      	ldrb	r1, [r2, #0]
     622:	4329      	orrs	r1, r5
     624:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     626:	2108      	movs	r1, #8
     628:	468c      	mov	ip, r1
     62a:	449c      	add	ip, r3
     62c:	4661      	mov	r1, ip
     62e:	3506      	adds	r5, #6
     630:	67cd      	str	r5, [r1, #124]	; 0x7c
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     632:	0019      	movs	r1, r3
     634:	31b1      	adds	r1, #177	; 0xb1
     636:	780d      	ldrb	r5, [r1, #0]
     638:	4035      	ands	r5, r6
     63a:	4305      	orrs	r5, r0
     63c:	700d      	strb	r5, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     63e:	7815      	ldrb	r5, [r2, #0]
     640:	4325      	orrs	r5, r4
     642:	7015      	strb	r5, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     644:	001d      	movs	r5, r3
     646:	35d7      	adds	r5, #215	; 0xd7
     648:	782a      	ldrb	r2, [r5, #0]
     64a:	43a2      	bics	r2, r4
     64c:	702a      	strb	r2, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     64e:	2580      	movs	r5, #128	; 0x80
     650:	4ad3      	ldr	r2, [pc, #844]	; (9a0 <init+0x420>)
     652:	042d      	lsls	r5, r5, #16
     654:	6015      	str	r5, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     656:	002a      	movs	r2, r5
     658:	9703      	str	r7, [sp, #12]
     65a:	603a      	str	r2, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     65c:	001a      	movs	r2, r3
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     65e:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     660:	32c2      	adds	r2, #194	; 0xc2
     662:	7815      	ldrb	r5, [r2, #0]
     664:	43a5      	bics	r5, r4
     666:	7015      	strb	r5, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     668:	7815      	ldrb	r5, [r2, #0]
     66a:	433d      	orrs	r5, r7
     66c:	7015      	strb	r5, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     66e:	4665      	mov	r5, ip
     670:	19ff      	adds	r7, r7, r7
     672:	67ef      	str	r7, [r5, #124]	; 0x7c

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     674:	780d      	ldrb	r5, [r1, #0]
     676:	43b5      	bics	r5, r6
     678:	4325      	orrs	r5, r4
     67a:	700d      	strb	r5, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     67c:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     67e:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     680:	4321      	orrs	r1, r4
     682:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     684:	0019      	movs	r1, r3
     686:	31d6      	adds	r1, #214	; 0xd6
     688:	780a      	ldrb	r2, [r1, #0]
     68a:	43a2      	bics	r2, r4
     68c:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     68e:	2180      	movs	r1, #128	; 0x80
     690:	4ac3      	ldr	r2, [pc, #780]	; (9a0 <init+0x420>)
     692:	03c9      	lsls	r1, r1, #15
     694:	6011      	str	r1, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     696:	000a      	movs	r2, r1
     698:	9903      	ldr	r1, [sp, #12]
     69a:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     69c:	001a      	movs	r2, r3
     69e:	3243      	adds	r2, #67	; 0x43
     6a0:	7811      	ldrb	r1, [r2, #0]
     6a2:	43a1      	bics	r1, r4
     6a4:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6a6:	7811      	ldrb	r1, [r2, #0]
     6a8:	4329      	orrs	r1, r5
     6aa:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6ac:	001d      	movs	r5, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6ae:	2108      	movs	r1, #8
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6b0:	3531      	adds	r5, #49	; 0x31


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6b2:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6b4:	7829      	ldrb	r1, [r5, #0]
     6b6:	4031      	ands	r1, r6
     6b8:	4308      	orrs	r0, r1
     6ba:	7028      	strb	r0, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6bc:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6be:	2002      	movs	r0, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c0:	4321      	orrs	r1, r4
     6c2:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6c4:	0019      	movs	r1, r3
     6c6:	3159      	adds	r1, #89	; 0x59
     6c8:	780a      	ldrb	r2, [r1, #0]
     6ca:	43a2      	bics	r2, r4
     6cc:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6ce:	2280      	movs	r2, #128	; 0x80
     6d0:	0492      	lsls	r2, r2, #18
     6d2:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6d4:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6d6:	001a      	movs	r2, r3
     6d8:	3242      	adds	r2, #66	; 0x42
     6da:	7811      	ldrb	r1, [r2, #0]
     6dc:	43a1      	bics	r1, r4
     6de:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6e0:	7811      	ldrb	r1, [r2, #0]
     6e2:	4301      	orrs	r1, r0
     6e4:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6e6:	605f      	str	r7, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6e8:	7829      	ldrb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ea:	0018      	movs	r0, r3

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6ec:	43b1      	bics	r1, r6
     6ee:	4321      	orrs	r1, r4
     6f0:	7029      	strb	r1, [r5, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6f2:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6f4:	3048      	adds	r0, #72	; 0x48
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6f6:	4321      	orrs	r1, r4
     6f8:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6fa:	0019      	movs	r1, r3
     6fc:	3158      	adds	r1, #88	; 0x58
     6fe:	780a      	ldrb	r2, [r1, #0]
     700:	001f      	movs	r7, r3
     702:	43a2      	bics	r2, r4
     704:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     706:	2280      	movs	r2, #128	; 0x80
    pinIn(senseDPin);
    pinMux(senseDPin);
    pinOut(fireDPin);
    pinLow(fireDPin);

    charges.igniterAHot = false;
     708:	2100      	movs	r1, #0
     70a:	0452      	lsls	r2, r2, #17
     70c:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     70e:	615a      	str	r2, [r3, #20]
     710:	4aa4      	ldr	r2, [pc, #656]	; (9a4 <init+0x424>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     712:	3749      	adds	r7, #73	; 0x49
     714:	7011      	strb	r1, [r2, #0]
    charges.igniterBHot = false;
     716:	2100      	movs	r1, #0
     718:	7211      	strb	r1, [r2, #8]
    charges.igniterCHot = false;
     71a:	2100      	movs	r1, #0
     71c:	7411      	strb	r1, [r2, #16]
    charges.igniterDHot = false;
     71e:	2100      	movs	r1, #0
     720:	7611      	strb	r1, [r2, #24]
     722:	7802      	ldrb	r2, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     724:	2502      	movs	r5, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     726:	43a2      	bics	r2, r4
     728:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     72a:	2280      	movs	r2, #128	; 0x80
     72c:	0052      	lsls	r2, r2, #1
     72e:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     730:	783a      	ldrb	r2, [r7, #0]
     732:	43a2      	bics	r2, r4
     734:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     736:	2280      	movs	r2, #128	; 0x80
     738:	0092      	lsls	r2, r2, #2
     73a:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     73c:	001a      	movs	r2, r3
     73e:	324b      	adds	r2, #75	; 0x4b
     740:	7811      	ldrb	r1, [r2, #0]
     742:	43a1      	bics	r1, r4
     744:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     746:	7811      	ldrb	r1, [r2, #0]
     748:	4329      	orrs	r1, r5
     74a:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     74c:	2180      	movs	r1, #128	; 0x80
     74e:	0109      	lsls	r1, r1, #4
     750:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     752:	2135      	movs	r1, #53	; 0x35
     754:	468c      	mov	ip, r1
     756:	449c      	add	ip, r3
     758:	4661      	mov	r1, ip
     75a:	7809      	ldrb	r1, [r1, #0]
     75c:	351e      	adds	r5, #30
     75e:	4031      	ands	r1, r6
     760:	4329      	orrs	r1, r5
     762:	4665      	mov	r5, ip
     764:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     766:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     768:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76a:	4321      	orrs	r1, r4
     76c:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     76e:	0019      	movs	r1, r3
     770:	3134      	adds	r1, #52	; 0x34
     772:	780a      	ldrb	r2, [r1, #0]
     774:	4032      	ands	r2, r6
     776:	432a      	orrs	r2, r5
     778:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     77a:	783a      	ldrb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     77c:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     77e:	4322      	orrs	r2, r4
     780:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     782:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     784:	3706      	adds	r7, #6

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     786:	43b2      	bics	r2, r6
     788:	432a      	orrs	r2, r5
     78a:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     78c:	7802      	ldrb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     78e:	3196      	adds	r1, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     790:	4322      	orrs	r2, r4
     792:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     794:	780a      	ldrb	r2, [r1, #0]
     796:	43a2      	bics	r2, r4
     798:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     79a:	2280      	movs	r2, #128	; 0x80
     79c:	4980      	ldr	r1, [pc, #512]	; (9a0 <init+0x420>)
     79e:	00d2      	lsls	r2, r2, #3
     7a0:	600a      	str	r2, [r1, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7a2:	0019      	movs	r1, r3
     7a4:	3198      	adds	r1, #152	; 0x98
     7a6:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7a8:	7881      	ldrb	r1, [r0, #2]
     7aa:	43a1      	bics	r1, r4
     7ac:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ae:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7b0:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b2:	7a02      	ldrb	r2, [r0, #8]
     7b4:	43a2      	bics	r2, r4
     7b6:	7202      	strb	r2, [r0, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b8:	2280      	movs	r2, #128	; 0x80
     7ba:	0252      	lsls	r2, r2, #9
     7bc:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7be:	78ba      	ldrb	r2, [r7, #2]
     7c0:	43a2      	bics	r2, r4
     7c2:	70ba      	strb	r2, [r7, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7c4:	2280      	movs	r2, #128	; 0x80
     7c6:	0292      	lsls	r2, r2, #10
     7c8:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ca:	001a      	movs	r2, r3
     7cc:	3253      	adds	r2, #83	; 0x53
     7ce:	7811      	ldrb	r1, [r2, #0]
     7d0:	43a1      	bics	r1, r4
     7d2:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7d4:	7811      	ldrb	r1, [r2, #0]
     7d6:	4329      	orrs	r1, r5
     7d8:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7da:	2180      	movs	r1, #128	; 0x80
     7dc:	0309      	lsls	r1, r1, #12
     7de:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7e0:	2139      	movs	r1, #57	; 0x39
     7e2:	468c      	mov	ip, r1
     7e4:	449c      	add	ip, r3
     7e6:	4661      	mov	r1, ip
     7e8:	7809      	ldrb	r1, [r1, #0]
     7ea:	351e      	adds	r5, #30
     7ec:	4031      	ands	r1, r6
     7ee:	4329      	orrs	r1, r5
     7f0:	4665      	mov	r5, ip
     7f2:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7f4:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7f6:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7f8:	4321      	orrs	r1, r4
     7fa:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7fc:	0019      	movs	r1, r3
     7fe:	3138      	adds	r1, #56	; 0x38
     800:	780a      	ldrb	r2, [r1, #0]
     802:	4032      	ands	r2, r6
     804:	432a      	orrs	r2, r5
     806:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     808:	78ba      	ldrb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     80a:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     80c:	4322      	orrs	r2, r4
     80e:	70ba      	strb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     810:	780a      	ldrb	r2, [r1, #0]
     812:	43b2      	bics	r2, r6
     814:	432a      	orrs	r2, r5
     816:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     818:	7a02      	ldrb	r2, [r0, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81a:	3114      	adds	r1, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     81c:	4322      	orrs	r2, r4
     81e:	7202      	strb	r2, [r0, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     820:	798a      	ldrb	r2, [r1, #6]
     822:	43a2      	bics	r2, r4
     824:	718a      	strb	r2, [r1, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     826:	2280      	movs	r2, #128	; 0x80
     828:	02d2      	lsls	r2, r2, #11
     82a:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     82c:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     82e:	9103      	str	r1, [sp, #12]
     830:	780a      	ldrb	r2, [r1, #0]
     832:	43a2      	bics	r2, r4
     834:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     836:	2280      	movs	r2, #128	; 0x80
     838:	0152      	lsls	r2, r2, #5
     83a:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     83c:	783a      	ldrb	r2, [r7, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     83e:	2120      	movs	r1, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     840:	43a2      	bics	r2, r4
     842:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     844:	2280      	movs	r2, #128	; 0x80
     846:	0212      	lsls	r2, r2, #8
     848:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     84a:	001a      	movs	r2, r3
     84c:	324d      	adds	r2, #77	; 0x4d
     84e:	7810      	ldrb	r0, [r2, #0]
     850:	43a0      	bics	r0, r4
     852:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     854:	7810      	ldrb	r0, [r2, #0]
     856:	4328      	orrs	r0, r5
     858:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     85a:	2080      	movs	r0, #128	; 0x80
     85c:	0180      	lsls	r0, r0, #6
     85e:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     860:	0018      	movs	r0, r3
     862:	3036      	adds	r0, #54	; 0x36
     864:	7805      	ldrb	r5, [r0, #0]
     866:	4035      	ands	r5, r6
     868:	430d      	orrs	r5, r1
     86a:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     86c:	7811      	ldrb	r1, [r2, #0]
     86e:	000d      	movs	r5, r1
     870:	4325      	orrs	r5, r4
     872:	7015      	strb	r5, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     874:	2237      	movs	r2, #55	; 0x37
     876:	4694      	mov	ip, r2
     878:	449c      	add	ip, r3
     87a:	4662      	mov	r2, ip
     87c:	2120      	movs	r1, #32
     87e:	7812      	ldrb	r2, [r2, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     880:	2502      	movs	r5, #2
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     882:	4032      	ands	r2, r6
     884:	430a      	orrs	r2, r1
     886:	4661      	mov	r1, ip
     888:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     88a:	2102      	movs	r1, #2
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     88c:	783a      	ldrb	r2, [r7, #0]
     88e:	4322      	orrs	r2, r4
     890:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     892:	7802      	ldrb	r2, [r0, #0]
     894:	43b2      	bics	r2, r6
     896:	430a      	orrs	r2, r1
     898:	7002      	strb	r2, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     89a:	9a03      	ldr	r2, [sp, #12]
     89c:	9903      	ldr	r1, [sp, #12]
     89e:	7812      	ldrb	r2, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8a0:	3020      	adds	r0, #32
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8a2:	4322      	orrs	r2, r4
     8a4:	700a      	strb	r2, [r1, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8a6:	0019      	movs	r1, r3
     8a8:	314e      	adds	r1, #78	; 0x4e
     8aa:	780a      	ldrb	r2, [r1, #0]
    pinOut(TxPo);
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);

    sercomClockEnable(SPI2, 3, 4);
     8ac:	4f3e      	ldr	r7, [pc, #248]	; (9a8 <init+0x428>)
     8ae:	43a2      	bics	r2, r4
     8b0:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8b2:	2280      	movs	r2, #128	; 0x80
     8b4:	01d2      	lsls	r2, r2, #7
     8b6:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8b8:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ba:	001a      	movs	r2, r3
     8bc:	3255      	adds	r2, #85	; 0x55
     8be:	7811      	ldrb	r1, [r2, #0]
     8c0:	43a1      	bics	r1, r4
     8c2:	7011      	strb	r1, [r2, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8c4:	2180      	movs	r1, #128	; 0x80
     8c6:	0389      	lsls	r1, r1, #14
     8c8:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     8ca:	2140      	movs	r1, #64	; 0x40
     8cc:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ce:	7802      	ldrb	r2, [r0, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8d0:	0019      	movs	r1, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8d2:	43a2      	bics	r2, r4
     8d4:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8d6:	2280      	movs	r2, #128	; 0x80
     8d8:	03d2      	lsls	r2, r2, #15
     8da:	609a      	str	r2, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8dc:	313b      	adds	r1, #59	; 0x3b
     8de:	780a      	ldrb	r2, [r1, #0]
     8e0:	43b2      	bics	r2, r6
     8e2:	432a      	orrs	r2, r5
     8e4:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8e6:	7802      	ldrb	r2, [r0, #0]
     8e8:	4322      	orrs	r2, r4
     8ea:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ec:	001a      	movs	r2, r3
     8ee:	3257      	adds	r2, #87	; 0x57
     8f0:	7810      	ldrb	r0, [r2, #0]
     8f2:	43a0      	bics	r0, r4
     8f4:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8f6:	7810      	ldrb	r0, [r2, #0]
     8f8:	4328      	orrs	r0, r5
     8fa:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8fc:	2080      	movs	r0, #128	; 0x80
     8fe:	0400      	lsls	r0, r0, #16
     900:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     902:	2020      	movs	r0, #32
     904:	780b      	ldrb	r3, [r1, #0]
     906:	4033      	ands	r3, r6
     908:	4303      	orrs	r3, r0
     90a:	700b      	strb	r3, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     90c:	7813      	ldrb	r3, [r2, #0]
     90e:	0028      	movs	r0, r5
     910:	4323      	orrs	r3, r4
     912:	7013      	strb	r3, [r2, #0]
     914:	2103      	movs	r1, #3
     916:	2204      	movs	r2, #4
     918:	47b8      	blx	r7
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 0x00);
     91a:	2300      	movs	r3, #0
     91c:	4e23      	ldr	r6, [pc, #140]	; (9ac <init+0x42c>)
     91e:	9301      	str	r3, [sp, #4]
     920:	9300      	str	r3, [sp, #0]
     922:	0021      	movs	r1, r4
     924:	0028      	movs	r0, r5
     926:	2203      	movs	r2, #3
     928:	47b0      	blx	r6

    sercomClockEnable(SPI0, 3, 4);
     92a:	2204      	movs	r2, #4
     92c:	2103      	movs	r1, #3
     92e:	2000      	movs	r0, #0
     930:	47b8      	blx	r7
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     932:	2300      	movs	r3, #0
     934:	2103      	movs	r1, #3
     936:	9301      	str	r3, [sp, #4]
     938:	9300      	str	r3, [sp, #0]
     93a:	001a      	movs	r2, r3
     93c:	0018      	movs	r0, r3
     93e:	47b0      	blx	r6

    sercomClockEnable(SPI1, 3, 4);
     940:	0020      	movs	r0, r4
     942:	2204      	movs	r2, #4
     944:	2103      	movs	r1, #3
     946:	47b8      	blx	r7
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     948:	2300      	movs	r3, #0
     94a:	0020      	movs	r0, r4
     94c:	9301      	str	r3, [sp, #4]
     94e:	9300      	str	r3, [sp, #0]
     950:	001a      	movs	r2, r3
     952:	2103      	movs	r1, #3
     954:	47b0      	blx	r6

    sercomClockEnable(USART3, 4, 8);
     956:	2208      	movs	r2, #8
     958:	2104      	movs	r1, #4
     95a:	2003      	movs	r0, #3
     95c:	47b8      	blx	r7
    sercomUartInit(USART3,1,0,19200);
     95e:	2396      	movs	r3, #150	; 0x96
     960:	0021      	movs	r1, r4
     962:	2200      	movs	r2, #0
     964:	2003      	movs	r0, #3
     966:	01db      	lsls	r3, r3, #7
     968:	4c11      	ldr	r4, [pc, #68]	; (9b0 <init+0x430>)
     96a:	47a0      	blx	r4

    TC4Init();
     96c:	4b11      	ldr	r3, [pc, #68]	; (9b4 <init+0x434>)
     96e:	4798      	blx	r3
    TC5Init();
     970:	4b11      	ldr	r3, [pc, #68]	; (9b8 <init+0x438>)
     972:	4798      	blx	r3
}
     974:	b005      	add	sp, #20
     976:	e021      	b.n	9bc <init+0x43c>
     978:	41004000 	.word	0x41004000
     97c:	40000400 	.word	0x40000400
     980:	000001d5 	.word	0x000001d5
     984:	00000d15 	.word	0x00000d15
     988:	00000d9d 	.word	0x00000d9d
     98c:	00000e9d 	.word	0x00000e9d
     990:	00000b79 	.word	0x00000b79
     994:	e000e100 	.word	0xe000e100
     998:	ff00ffff 	.word	0xff00ffff
     99c:	41004400 	.word	0x41004400
     9a0:	41004488 	.word	0x41004488
     9a4:	20000680 	.word	0x20000680
     9a8:	00002899 	.word	0x00002899
     9ac:	000028fd 	.word	0x000028fd
     9b0:	00002961 	.word	0x00002961
     9b4:	00000f6d 	.word	0x00000f6d
     9b8:	00000fd5 	.word	0x00000fd5
     9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9be:	46c0      	nop			; (mov r8, r8)

000009c0 <main>:


int main(void) {
     9c0:	b510      	push	{r4, lr}

    init();
     9c2:	4b11      	ldr	r3, [pc, #68]	; (a08 <main+0x48>)
     9c4:	4798      	blx	r3

    initMS5803Barometer();
     9c6:	4b11      	ldr	r3, [pc, #68]	; (a0c <main+0x4c>)
     9c8:	4798      	blx	r3
    IMUinit();
     9ca:	4b11      	ldr	r3, [pc, #68]	; (a10 <main+0x50>)
     9cc:	4798      	blx	r3

    computeKalmanGains();
     9ce:	4b11      	ldr	r3, [pc, #68]	; (a14 <main+0x54>)
     9d0:	4798      	blx	r3

    sampleTick();
     9d2:	4c11      	ldr	r4, [pc, #68]	; (a18 <main+0x58>)
     9d4:	47a0      	blx	r4

    //POST();

    isItPointingUp();
     9d6:	4b11      	ldr	r3, [pc, #68]	; (a1c <main+0x5c>)
     9d8:	4798      	blx	r3

    getSettings();
     9da:	4b11      	ldr	r3, [pc, #68]	; (a20 <main+0x60>)
     9dc:	4798      	blx	r3

    //beepNumber(12345);


    beep(400);
     9de:	20c8      	movs	r0, #200	; 0xc8
     9e0:	4b10      	ldr	r3, [pc, #64]	; (a24 <main+0x64>)
     9e2:	0040      	lsls	r0, r0, #1
     9e4:	4798      	blx	r3

    startupTick = millis();
     9e6:	4b10      	ldr	r3, [pc, #64]	; (a28 <main+0x68>)
     9e8:	4798      	blx	r3
     9ea:	4b10      	ldr	r3, [pc, #64]	; (a2c <main+0x6c>)
     9ec:	6018      	str	r0, [r3, #0]

    while (1) {
        if (takeSample()) {
     9ee:	4b10      	ldr	r3, [pc, #64]	; (a30 <main+0x70>)
     9f0:	4798      	blx	r3
     9f2:	2800      	cmp	r0, #0
     9f4:	d0fb      	beq.n	9ee <main+0x2e>
            sampleTick();
     9f6:	47a0      	blx	r4
            flight();
     9f8:	4b0e      	ldr	r3, [pc, #56]	; (a34 <main+0x74>)
     9fa:	4798      	blx	r3
            igniterTick();
     9fc:	4b0e      	ldr	r3, [pc, #56]	; (a38 <main+0x78>)
     9fe:	4798      	blx	r3
            computeKalmanStates();
     a00:	4b0e      	ldr	r3, [pc, #56]	; (a3c <main+0x7c>)
     a02:	4798      	blx	r3
     a04:	e7f3      	b.n	9ee <main+0x2e>
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	00000581 	.word	0x00000581
     a0c:	00000551 	.word	0x00000551
     a10:	00000a41 	.word	0x00000a41
     a14:	00001651 	.word	0x00001651
     a18:	00002585 	.word	0x00002585
     a1c:	0000138d 	.word	0x0000138d
     a20:	00002af1 	.word	0x00002af1
     a24:	00000c5d 	.word	0x00000c5d
     a28:	00000f39 	.word	0x00000f39
     a2c:	2000052c 	.word	0x2000052c
     a30:	0000256d 	.word	0x0000256d
     a34:	0000103d 	.word	0x0000103d
     a38:	00001469 	.word	0x00001469
     a3c:	00001ef1 	.word	0x00001ef1

00000a40 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     a40:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a42:	4c08      	ldr	r4, [pc, #32]	; (a64 <IMUinit+0x24>)
     a44:	2580      	movs	r5, #128	; 0x80
     a46:	0023      	movs	r3, r4
     a48:	00ed      	lsls	r5, r5, #3
     a4a:	3394      	adds	r3, #148	; 0x94
     a4c:	601d      	str	r5, [r3, #0]

    pinLow(cs_accel);
    spiDataOut(SPI0, BMI_ACCEL_PMU_RANGE);
     a4e:	4e06      	ldr	r6, [pc, #24]	; (a68 <IMUinit+0x28>)
     a50:	210f      	movs	r1, #15
     a52:	2000      	movs	r0, #0
     a54:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a56:	3498      	adds	r4, #152	; 0x98
    spiDataOut(SPI0, BMI_ACCEL_16G_RANGE);
     a58:	210c      	movs	r1, #12
     a5a:	2000      	movs	r0, #0
     a5c:	47b0      	blx	r6
     a5e:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     a60:	bd70      	pop	{r4, r5, r6, pc}
     a62:	46c0      	nop			; (mov r8, r8)
     a64:	41004400 	.word	0x41004400
     a68:	000029a9 	.word	0x000029a9

00000a6c <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     a6c:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     a6e:	4b09      	ldr	r3, [pc, #36]	; (a94 <USARTconnectionAvaliable+0x28>)
     a70:	7e1c      	ldrb	r4, [r3, #24]
     a72:	0764      	lsls	r4, r4, #29
     a74:	0fe4      	lsrs	r4, r4, #31
     a76:	2c01      	cmp	r4, #1
     a78:	d001      	beq.n	a7e <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     a7a:	2000      	movs	r0, #0
     a7c:	e009      	b.n	a92 <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     a7e:	2003      	movs	r0, #3
     a80:	4b05      	ldr	r3, [pc, #20]	; (a98 <USARTconnectionAvaliable+0x2c>)
     a82:	4798      	blx	r3
     a84:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     a86:	2948      	cmp	r1, #72	; 0x48
     a88:	d1f7      	bne.n	a7a <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     a8a:	2003      	movs	r0, #3
     a8c:	4b03      	ldr	r3, [pc, #12]	; (a9c <USARTconnectionAvaliable+0x30>)
     a8e:	4798      	blx	r3
            return true;
     a90:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     a92:	bd10      	pop	{r4, pc}
     a94:	42001400 	.word	0x42001400
     a98:	000029f5 	.word	0x000029f5
     a9c:	000029dd 	.word	0x000029dd

00000aa0 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     aa2:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     aa4:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     aa6:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     aa8:	1a09      	subs	r1, r1, r0
     aaa:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     aac:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     aae:	b28b      	uxth	r3, r1
     ab0:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ab2:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     ab4:	a902      	add	r1, sp, #8
     ab6:	0028      	movs	r0, r5
     ab8:	4b09      	ldr	r3, [pc, #36]	; (ae0 <sendTheasePagesToComputer+0x40>)
     aba:	4798      	blx	r3
     abc:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     abe:	ab02      	add	r3, sp, #8
     ac0:	5d99      	ldrb	r1, [r3, r6]
     ac2:	2003      	movs	r0, #3
     ac4:	4b07      	ldr	r3, [pc, #28]	; (ae4 <sendTheasePagesToComputer+0x44>)
     ac6:	3601      	adds	r6, #1
     ac8:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     aca:	42be      	cmp	r6, r7
     acc:	d1f7      	bne.n	abe <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ace:	3401      	adds	r4, #1
     ad0:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     ad2:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ad4:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     ad6:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ad8:	42a3      	cmp	r3, r4
     ada:	d2eb      	bcs.n	ab4 <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     adc:	b043      	add	sp, #268	; 0x10c
     ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ae0:	00000355 	.word	0x00000355
     ae4:	000029dd 	.word	0x000029dd

00000ae8 <altitudeAGL>:

int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
     ae8:	4b07      	ldr	r3, [pc, #28]	; (b08 <altitudeAGL+0x20>)

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}

int32_t altitudeAGL() {
     aea:	b510      	push	{r4, lr}
    return altitude - offsets.groundOffset;
     aec:	6998      	ldr	r0, [r3, #24]
     aee:	4b07      	ldr	r3, [pc, #28]	; (b0c <altitudeAGL+0x24>)
     af0:	4798      	blx	r3
     af2:	000b      	movs	r3, r1
     af4:	4906      	ldr	r1, [pc, #24]	; (b10 <altitudeAGL+0x28>)
     af6:	0002      	movs	r2, r0
     af8:	6808      	ldr	r0, [r1, #0]
     afa:	6849      	ldr	r1, [r1, #4]
     afc:	4c05      	ldr	r4, [pc, #20]	; (b14 <altitudeAGL+0x2c>)
     afe:	47a0      	blx	r4
     b00:	4b05      	ldr	r3, [pc, #20]	; (b18 <altitudeAGL+0x30>)
     b02:	4798      	blx	r3
}
     b04:	bd10      	pop	{r4, pc}
     b06:	46c0      	nop			; (mov r8, r8)
     b08:	200004d8 	.word	0x200004d8
     b0c:	00005f09 	.word	0x00005f09
     b10:	200006b8 	.word	0x200006b8
     b14:	00005731 	.word	0x00005731
     b18:	00005e19 	.word	0x00005e19

00000b1c <unplugged>:


bool unplugged() {
    if (sample.voltage.batFloat < 3.3) {
     b1c:	4b07      	ldr	r3, [pc, #28]	; (b3c <unplugged+0x20>)
int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
}


bool unplugged() {
     b1e:	b570      	push	{r4, r5, r6, lr}
     b20:	68d8      	ldr	r0, [r3, #12]
     b22:	4b07      	ldr	r3, [pc, #28]	; (b40 <unplugged+0x24>)
     b24:	4798      	blx	r3
     b26:	4a07      	ldr	r2, [pc, #28]	; (b44 <unplugged+0x28>)
     b28:	4b07      	ldr	r3, [pc, #28]	; (b48 <unplugged+0x2c>)
     b2a:	4d08      	ldr	r5, [pc, #32]	; (b4c <unplugged+0x30>)
     b2c:	2401      	movs	r4, #1
     b2e:	47a8      	blx	r5
     b30:	2800      	cmp	r0, #0
     b32:	d100      	bne.n	b36 <unplugged+0x1a>
     b34:	1c04      	adds	r4, r0, #0
     b36:	b2e0      	uxtb	r0, r4
    if (sample.voltage.batFloat < 3.3) {
        return true;
    } else {
        return false;
    }
}
     b38:	bd70      	pop	{r4, r5, r6, pc}
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	200007e8 	.word	0x200007e8
     b40:	00005f79 	.word	0x00005f79
     b44:	66666666 	.word	0x66666666
     b48:	400a6666 	.word	0x400a6666
     b4c:	0000404d 	.word	0x0000404d

00000b50 <finishFlight>:

void finishFlight() {

    flightState = flightIdle;
     b50:	2201      	movs	r2, #1
    } else {
        return false;
    }
}

void finishFlight() {
     b52:	b510      	push	{r4, lr}

    flightState = flightIdle;
     b54:	4b04      	ldr	r3, [pc, #16]	; (b68 <finishFlight+0x18>)
     b56:	701a      	strb	r2, [r3, #0]
    AT25SFHoldTillReady();
     b58:	4b04      	ldr	r3, [pc, #16]	; (b6c <finishFlight+0x1c>)
     b5a:	4798      	blx	r3
    writeFlightEndAddress( );
     b5c:	4b04      	ldr	r3, [pc, #16]	; (b70 <finishFlight+0x20>)
     b5e:	4798      	blx	r3
    unpluggedJingle();
     b60:	4b04      	ldr	r3, [pc, #16]	; (b74 <finishFlight+0x24>)
     b62:	4798      	blx	r3

}
     b64:	bd10      	pop	{r4, pc}
     b66:	46c0      	nop			; (mov r8, r8)
     b68:	200006a0 	.word	0x200006a0
     b6c:	000001e5 	.word	0x000001e5
     b70:	00002481 	.word	0x00002481
     b74:	00000cd1 	.word	0x00000cd1

00000b78 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b78:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     b7a:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b7c:	4a10      	ldr	r2, [pc, #64]	; (bc0 <adcInit+0x48>)
     b7e:	0249      	lsls	r1, r1, #9
     b80:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b82:	4810      	ldr	r0, [pc, #64]	; (bc4 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b84:	430b      	orrs	r3, r1
     b86:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     b88:	23e0      	movs	r3, #224	; 0xe0
     b8a:	490f      	ldr	r1, [pc, #60]	; (bc8 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b8c:	4a0f      	ldr	r2, [pc, #60]	; (bcc <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     b8e:	00db      	lsls	r3, r3, #3
     b90:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b92:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     b94:	4a0e      	ldr	r2, [pc, #56]	; (bd0 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     b96:	6812      	ldr	r2, [r2, #0]
     b98:	0150      	lsls	r0, r2, #5
     b9a:	4018      	ands	r0, r3
     b9c:	4b0d      	ldr	r3, [pc, #52]	; (bd4 <adcInit+0x5c>)
     b9e:	0154      	lsls	r4, r2, #5
     ba0:	681a      	ldr	r2, [r3, #0]
     ba2:	0ed3      	lsrs	r3, r2, #27
     ba4:	4323      	orrs	r3, r4
     ba6:	b2da      	uxtb	r2, r3
     ba8:	0003      	movs	r3, r0
     baa:	4313      	orrs	r3, r2
     bac:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC0;
     bae:	2301      	movs	r3, #1
     bb0:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     bb2:	18db      	adds	r3, r3, r3
     bb4:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     bb6:	7e4b      	ldrb	r3, [r1, #25]
     bb8:	b25b      	sxtb	r3, r3
     bba:	2b00      	cmp	r3, #0
     bbc:	dbfb      	blt.n	bb6 <adcInit+0x3e>
}
     bbe:	bd10      	pop	{r4, pc}
     bc0:	40000400 	.word	0x40000400
     bc4:	0000401e 	.word	0x0000401e
     bc8:	42004000 	.word	0x42004000
     bcc:	40000c00 	.word	0x40000c00
     bd0:	00806024 	.word	0x00806024
     bd4:	00806020 	.word	0x00806020

00000bd8 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     bd8:	2202      	movs	r2, #2
     bda:	4b05      	ldr	r3, [pc, #20]	; (bf0 <adcSample+0x18>)
     bdc:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     bde:	3a01      	subs	r2, #1
     be0:	7e19      	ldrb	r1, [r3, #24]
     be2:	4211      	tst	r1, r2
     be4:	d0fc      	beq.n	be0 <adcSample+0x8>
    return ADC->RESULT.reg;
     be6:	4b02      	ldr	r3, [pc, #8]	; (bf0 <adcSample+0x18>)
     be8:	8b58      	ldrh	r0, [r3, #26]
     bea:	b280      	uxth	r0, r0
}
     bec:	4770      	bx	lr
     bee:	46c0      	nop			; (mov r8, r8)
     bf0:	42004000 	.word	0x42004000

00000bf4 <adc_read>:


u16_t adc_read(Pin p) {
     bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     bf6:	2501      	movs	r5, #1
     bf8:	0c02      	lsrs	r2, r0, #16
     bfa:	b2d4      	uxtb	r4, r2
     bfc:	9000      	str	r0, [sp, #0]
     bfe:	0e00      	lsrs	r0, r0, #24
     c00:	9101      	str	r1, [sp, #4]
     c02:	0842      	lsrs	r2, r0, #1
     c04:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c06:	4911      	ldr	r1, [pc, #68]	; (c4c <adc_read+0x58>)
     c08:	18d2      	adds	r2, r2, r3
     c0a:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c0c:	4228      	tst	r0, r5
     c0e:	d005      	beq.n	c1c <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c10:	210f      	movs	r1, #15
     c12:	7814      	ldrb	r4, [r2, #0]
     c14:	4021      	ands	r1, r4
     c16:	2410      	movs	r4, #16
     c18:	4321      	orrs	r1, r4
     c1a:	e003      	b.n	c24 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     c1c:	240f      	movs	r4, #15
     c1e:	7811      	ldrb	r1, [r2, #0]
     c20:	43a1      	bics	r1, r4
     c22:	4329      	orrs	r1, r5
     c24:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     c26:	2101      	movs	r1, #1
     c28:	4a09      	ldr	r2, [pc, #36]	; (c50 <adc_read+0x5c>)
     c2a:	18c3      	adds	r3, r0, r3
     c2c:	189b      	adds	r3, r3, r2
     c2e:	781a      	ldrb	r2, [r3, #0]
     c30:	430a      	orrs	r2, r1
     c32:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     c34:	466b      	mov	r3, sp
     c36:	791a      	ldrb	r2, [r3, #4]
     c38:	231f      	movs	r3, #31
     c3a:	4013      	ands	r3, r2
     c3c:	22c0      	movs	r2, #192	; 0xc0
     c3e:	0152      	lsls	r2, r2, #5
     c40:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     c42:	4a04      	ldr	r2, [pc, #16]	; (c54 <adc_read+0x60>)
     c44:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     c46:	4b04      	ldr	r3, [pc, #16]	; (c58 <adc_read+0x64>)
     c48:	4798      	blx	r3
     c4a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     c4c:	41004430 	.word	0x41004430
     c50:	41004440 	.word	0x41004440
     c54:	42004000 	.word	0x42004000
     c58:	00000bd9 	.word	0x00000bd9

00000c5c <beep>:
#include <util.h>
#include <boardDefines.h>
#include <math.h>


void beep(u16_t toggles) {
     c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     c5e:	2380      	movs	r3, #128	; 0x80
     c60:	2780      	movs	r7, #128	; 0x80
     c62:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c64:	2500      	movs	r5, #0
     c66:	4c0a      	ldr	r4, [pc, #40]	; (c90 <beep+0x34>)
     c68:	035b      	lsls	r3, r3, #13
     c6a:	61e3      	str	r3, [r4, #28]
     c6c:	03bf      	lsls	r7, r7, #14
     c6e:	42b5      	cmp	r5, r6
     c70:	d006      	beq.n	c80 <beep+0x24>
     c72:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     c74:	207a      	movs	r0, #122	; 0x7a
     c76:	4b07      	ldr	r3, [pc, #28]	; (c94 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c78:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     c7a:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c7c:	b2ad      	uxth	r5, r5
     c7e:	e7f6      	b.n	c6e <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c80:	2380      	movs	r3, #128	; 0x80
     c82:	039b      	lsls	r3, r3, #14
     c84:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     c86:	2380      	movs	r3, #128	; 0x80
     c88:	035b      	lsls	r3, r3, #13
     c8a:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	41004400 	.word	0x41004400
     c94:	00000ebd 	.word	0x00000ebd

00000c98 <startupJingle>:
    }
    beepDigit(number);

}

void startupJingle() {
     c98:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     c9a:	2696      	movs	r6, #150	; 0x96
     c9c:	0076      	lsls	r6, r6, #1
     c9e:	4d0a      	ldr	r5, [pc, #40]	; (cc8 <startupJingle+0x30>)
     ca0:	0030      	movs	r0, r6
     ca2:	47a8      	blx	r5
    delay_ms(80);
     ca4:	4c09      	ldr	r4, [pc, #36]	; (ccc <startupJingle+0x34>)
     ca6:	2050      	movs	r0, #80	; 0x50
     ca8:	47a0      	blx	r4
    beep(300);
     caa:	0030      	movs	r0, r6
     cac:	47a8      	blx	r5
    delay_ms(250);
     cae:	20fa      	movs	r0, #250	; 0xfa
     cb0:	47a0      	blx	r4
    beep(300);
     cb2:	0030      	movs	r0, r6
     cb4:	47a8      	blx	r5
    delay_ms(80);
     cb6:	2050      	movs	r0, #80	; 0x50
     cb8:	47a0      	blx	r4
    beep(300);
     cba:	0030      	movs	r0, r6
     cbc:	47a8      	blx	r5
    delay_ms(500);
     cbe:	20fa      	movs	r0, #250	; 0xfa
     cc0:	0040      	lsls	r0, r0, #1
     cc2:	47a0      	blx	r4
}
     cc4:	bd70      	pop	{r4, r5, r6, pc}
     cc6:	46c0      	nop			; (mov r8, r8)
     cc8:	00000c5d 	.word	0x00000c5d
     ccc:	00000eed 	.word	0x00000eed

00000cd0 <unpluggedJingle>:

void unpluggedJingle() {
     cd0:	b570      	push	{r4, r5, r6, lr}
    delay_ms(80);
    beep(300);
     cd2:	2696      	movs	r6, #150	; 0x96
    beep(300);
    delay_ms(500);
}

void unpluggedJingle() {
    delay_ms(80);
     cd4:	4c0c      	ldr	r4, [pc, #48]	; (d08 <unpluggedJingle+0x38>)
    beep(300);
     cd6:	0076      	lsls	r6, r6, #1
    beep(300);
    delay_ms(500);
}

void unpluggedJingle() {
    delay_ms(80);
     cd8:	2050      	movs	r0, #80	; 0x50
     cda:	47a0      	blx	r4
    beep(300);
     cdc:	4d0b      	ldr	r5, [pc, #44]	; (d0c <unpluggedJingle+0x3c>)
     cde:	0030      	movs	r0, r6
     ce0:	47a8      	blx	r5
    delay_ms(80);
     ce2:	2050      	movs	r0, #80	; 0x50
     ce4:	47a0      	blx	r4
    beep(300);
     ce6:	0030      	movs	r0, r6
     ce8:	47a8      	blx	r5
    delay_ms(80);
     cea:	2050      	movs	r0, #80	; 0x50
     cec:	47a0      	blx	r4
    beep(300);
     cee:	0030      	movs	r0, r6
     cf0:	47a8      	blx	r5
    delay_ms(80);
     cf2:	2050      	movs	r0, #80	; 0x50
     cf4:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cf6:	2280      	movs	r2, #128	; 0x80
     cf8:	4b05      	ldr	r3, [pc, #20]	; (d10 <unpluggedJingle+0x40>)
     cfa:	0392      	lsls	r2, r2, #14
     cfc:	615a      	str	r2, [r3, #20]
     cfe:	2280      	movs	r2, #128	; 0x80
     d00:	0352      	lsls	r2, r2, #13
     d02:	615a      	str	r2, [r3, #20]
    pinLow(buzzerPin);
    pinLow(LedPin);

}
     d04:	bd70      	pop	{r4, r5, r6, pc}
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	00000eed 	.word	0x00000eed
     d0c:	00000c5d 	.word	0x00000c5d
     d10:	41004400 	.word	0x41004400

00000d14 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d14:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     d16:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     d18:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d1a:	4916      	ldr	r1, [pc, #88]	; (d74 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     d1c:	4a16      	ldr	r2, [pc, #88]	; (d78 <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d1e:	00db      	lsls	r3, r3, #3
     d20:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     d22:	6853      	ldr	r3, [r2, #4]
     d24:	4303      	orrs	r3, r0
     d26:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     d28:	4b14      	ldr	r3, [pc, #80]	; (d7c <GclkInit+0x68>)
     d2a:	681a      	ldr	r2, [r3, #0]
     d2c:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     d2e:	2a3f      	cmp	r2, #63	; 0x3f
     d30:	d100      	bne.n	d34 <GclkInit+0x20>
        coarse = 0x1f;
     d32:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     d34:	4b12      	ldr	r3, [pc, #72]	; (d80 <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     d36:	4813      	ldr	r0, [pc, #76]	; (d84 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     d38:	681b      	ldr	r3, [r3, #0]
     d3a:	059b      	lsls	r3, r3, #22
     d3c:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     d3e:	4283      	cmp	r3, r0
     d40:	d100      	bne.n	d44 <GclkInit+0x30>
        fine = 0x1ff;
     d42:	4b11      	ldr	r3, [pc, #68]	; (d88 <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     d44:	4811      	ldr	r0, [pc, #68]	; (d8c <GclkInit+0x78>)
     d46:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     d48:	2010      	movs	r0, #16
     d4a:	68cc      	ldr	r4, [r1, #12]
     d4c:	4204      	tst	r4, r0
     d4e:	d0fc      	beq.n	d4a <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     d50:	0292      	lsls	r2, r2, #10
     d52:	4313      	orrs	r3, r2
     d54:	4a07      	ldr	r2, [pc, #28]	; (d74 <GclkInit+0x60>)
     d56:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     d58:	2310      	movs	r3, #16
     d5a:	68ca      	ldr	r2, [r1, #12]
     d5c:	421a      	tst	r2, r3
     d5e:	d0fc      	beq.n	d5a <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     d60:	4a0b      	ldr	r2, [pc, #44]	; (d90 <GclkInit+0x7c>)
     d62:	4b04      	ldr	r3, [pc, #16]	; (d74 <GclkInit+0x60>)
     d64:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     d66:	2280      	movs	r2, #128	; 0x80
     d68:	4b0a      	ldr	r3, [pc, #40]	; (d94 <GclkInit+0x80>)
     d6a:	0052      	lsls	r2, r2, #1
     d6c:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     d6e:	4a0a      	ldr	r2, [pc, #40]	; (d98 <GclkInit+0x84>)
     d70:	605a      	str	r2, [r3, #4]
}
     d72:	bd10      	pop	{r4, pc}
     d74:	40000800 	.word	0x40000800
     d78:	41004000 	.word	0x41004000
     d7c:	00806024 	.word	0x00806024
     d80:	00806028 	.word	0x00806028
     d84:	000003ff 	.word	0x000003ff
     d88:	000001ff 	.word	0x000001ff
     d8c:	00000522 	.word	0x00000522
     d90:	000005a2 	.word	0x000005a2
     d94:	40000c00 	.word	0x40000c00
     d98:	00010700 	.word	0x00010700

00000d9c <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     d9c:	4b27      	ldr	r3, [pc, #156]	; (e3c <RtcInit+0xa0>)
     d9e:	4a28      	ldr	r2, [pc, #160]	; (e40 <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     da0:	4828      	ldr	r0, [pc, #160]	; (e44 <RtcInit+0xa8>)
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     da2:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     da4:	4a28      	ldr	r2, [pc, #160]	; (e48 <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     da6:	6999      	ldr	r1, [r3, #24]
     da8:	6812      	ldr	r2, [r2, #0]
     daa:	4001      	ands	r1, r0
     dac:	04d2      	lsls	r2, r2, #19
     dae:	0e52      	lsrs	r2, r2, #25
     db0:	0412      	lsls	r2, r2, #16
     db2:	4311      	orrs	r1, r2
     db4:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     db6:	4925      	ldr	r1, [pc, #148]	; (e4c <RtcInit+0xb0>)
     db8:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     dba:	6999      	ldr	r1, [r3, #24]
     dbc:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     dbe:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     dc0:	4302      	orrs	r2, r0
     dc2:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     dc4:	699a      	ldr	r2, [r3, #24]
     dc6:	430a      	orrs	r2, r1
     dc8:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     dca:	2204      	movs	r2, #4
     dcc:	68d9      	ldr	r1, [r3, #12]
     dce:	4211      	tst	r1, r2
     dd0:	d0fc      	beq.n	dcc <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     dd2:	2281      	movs	r2, #129	; 0x81
     dd4:	4b1e      	ldr	r3, [pc, #120]	; (e50 <RtcInit+0xb4>)
     dd6:	0052      	lsls	r2, r2, #1
     dd8:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     dda:	4a1e      	ldr	r2, [pc, #120]	; (e54 <RtcInit+0xb8>)
     ddc:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     dde:	785a      	ldrb	r2, [r3, #1]
     de0:	b252      	sxtb	r2, r2
     de2:	2a00      	cmp	r2, #0
     de4:	dbfb      	blt.n	dde <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     de6:	4a1c      	ldr	r2, [pc, #112]	; (e58 <RtcInit+0xbc>)
     de8:	4b19      	ldr	r3, [pc, #100]	; (e50 <RtcInit+0xb4>)
     dea:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     dec:	2204      	movs	r2, #4
     dee:	4b1b      	ldr	r3, [pc, #108]	; (e5c <RtcInit+0xc0>)
     df0:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     df2:	7a9a      	ldrb	r2, [r3, #10]
     df4:	4919      	ldr	r1, [pc, #100]	; (e5c <RtcInit+0xc0>)
     df6:	09d2      	lsrs	r2, r2, #7
     df8:	d1fb      	bne.n	df2 <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     dfa:	20a0      	movs	r0, #160	; 0xa0
     dfc:	880a      	ldrh	r2, [r1, #0]
     dfe:	00c0      	lsls	r0, r0, #3
     e00:	4302      	orrs	r2, r0
     e02:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e04:	7a9a      	ldrb	r2, [r3, #10]
     e06:	09d2      	lsrs	r2, r2, #7
     e08:	d1fc      	bne.n	e04 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     e0a:	4915      	ldr	r1, [pc, #84]	; (e60 <RtcInit+0xc4>)
     e0c:	4a13      	ldr	r2, [pc, #76]	; (e5c <RtcInit+0xc0>)
     e0e:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e10:	7a99      	ldrb	r1, [r3, #10]
     e12:	4a12      	ldr	r2, [pc, #72]	; (e5c <RtcInit+0xc0>)
     e14:	09c9      	lsrs	r1, r1, #7
     e16:	d1fb      	bne.n	e10 <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     e18:	8851      	ldrh	r1, [r2, #2]
     e1a:	4812      	ldr	r0, [pc, #72]	; (e64 <RtcInit+0xc8>)
     e1c:	4301      	orrs	r1, r0
     e1e:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     e20:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     e22:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     e24:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     e26:	8811      	ldrh	r1, [r2, #0]
     e28:	4301      	orrs	r1, r0
     e2a:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e2c:	7a9a      	ldrb	r2, [r3, #10]
     e2e:	09d2      	lsrs	r2, r2, #7
     e30:	d1fc      	bne.n	e2c <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     e32:	4b0d      	ldr	r3, [pc, #52]	; (e68 <RtcInit+0xcc>)
     e34:	3208      	adds	r2, #8
     e36:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     e38:	4770      	bx	lr
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	40000800 	.word	0x40000800
     e40:	00000606 	.word	0x00000606
     e44:	ff80ffff 	.word	0xff80ffff
     e48:	00806024 	.word	0x00806024
     e4c:	00000604 	.word	0x00000604
     e50:	40000c00 	.word	0x40000c00
     e54:	00230002 	.word	0x00230002
     e58:	00004204 	.word	0x00004204
     e5c:	40001400 	.word	0x40001400
     e60:	000003e6 	.word	0x000003e6
     e64:	00004010 	.word	0x00004010
     e68:	e000e100 	.word	0xe000e100

00000e6c <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e6c:	230f      	movs	r3, #15
     e6e:	4018      	ands	r0, r3
     e70:	4b08      	ldr	r3, [pc, #32]	; (e94 <gclkEnable+0x28>)
     e72:	0212      	lsls	r2, r2, #8
     e74:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e76:	23f8      	movs	r3, #248	; 0xf8
     e78:	0209      	lsls	r1, r1, #8
     e7a:	015b      	lsls	r3, r3, #5
     e7c:	4019      	ands	r1, r3
     e7e:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     e80:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e82:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e84:	4c04      	ldr	r4, [pc, #16]	; (e98 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e86:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e88:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e8a:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e8c:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e8e:	6060      	str	r0, [r4, #4]
}
     e90:	bd10      	pop	{r4, pc}
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	00ffff00 	.word	0x00ffff00
     e98:	40000c00 	.word	0x40000c00

00000e9c <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     e9c:	4b04      	ldr	r3, [pc, #16]	; (eb0 <delayInit+0x14>)
     e9e:	4a05      	ldr	r2, [pc, #20]	; (eb4 <delayInit+0x18>)
     ea0:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     ea2:	2230      	movs	r2, #48	; 0x30
     ea4:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     ea6:	4b04      	ldr	r3, [pc, #16]	; (eb8 <delayInit+0x1c>)
     ea8:	3a2b      	subs	r2, #43	; 0x2b
     eaa:	601a      	str	r2, [r3, #0]
}
     eac:	4770      	bx	lr
     eae:	46c0      	nop			; (mov r8, r8)
     eb0:	20000004 	.word	0x20000004
     eb4:	0000bb80 	.word	0x0000bb80
     eb8:	e000e010 	.word	0xe000e010

00000ebc <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     ebc:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ebe:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     ec0:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     ec2:	4b08      	ldr	r3, [pc, #32]	; (ee4 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     ec4:	4a08      	ldr	r2, [pc, #32]	; (ee8 <delay_us+0x2c>)
     ec6:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ec8:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     eca:	3801      	subs	r0, #1
     ecc:	d308      	bcc.n	ee0 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     ece:	2b00      	cmp	r3, #0
     ed0:	d0fb      	beq.n	eca <delay_us+0xe>
     ed2:	4e05      	ldr	r6, [pc, #20]	; (ee8 <delay_us+0x2c>)
        SysTick->LOAD = n;
     ed4:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     ed6:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ed8:	6835      	ldr	r5, [r6, #0]
     eda:	4225      	tst	r5, r4
     edc:	d0fc      	beq.n	ed8 <delay_us+0x1c>
     ede:	e7f4      	b.n	eca <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     ee0:	bd70      	pop	{r4, r5, r6, pc}
     ee2:	46c0      	nop			; (mov r8, r8)
     ee4:	20000004 	.word	0x20000004
     ee8:	e000e010 	.word	0xe000e010

00000eec <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     eec:	b570      	push	{r4, r5, r6, lr}
     eee:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     ef0:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     ef2:	4b08      	ldr	r3, [pc, #32]	; (f14 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     ef4:	4a08      	ldr	r2, [pc, #32]	; (f18 <delay_ms+0x2c>)
     ef6:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ef8:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     efa:	3801      	subs	r0, #1
     efc:	d308      	bcc.n	f10 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     efe:	2b00      	cmp	r3, #0
     f00:	d0fb      	beq.n	efa <delay_ms+0xe>
     f02:	4e05      	ldr	r6, [pc, #20]	; (f18 <delay_ms+0x2c>)
        SysTick->LOAD = n;
     f04:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     f06:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f08:	6835      	ldr	r5, [r6, #0]
     f0a:	4225      	tst	r5, r4
     f0c:	d0fc      	beq.n	f08 <delay_ms+0x1c>
     f0e:	e7f4      	b.n	efa <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     f10:	bd70      	pop	{r4, r5, r6, pc}
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	20000004 	.word	0x20000004
     f18:	e000e010 	.word	0xe000e010

00000f1c <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     f1c:	21fa      	movs	r1, #250	; 0xfa
     f1e:	4a04      	ldr	r2, [pc, #16]	; (f30 <RTC_Handler+0x14>)
     f20:	0089      	lsls	r1, r1, #2
     f22:	6813      	ldr	r3, [r2, #0]
     f24:	185b      	adds	r3, r3, r1
     f26:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     f28:	22ff      	movs	r2, #255	; 0xff
     f2a:	4b02      	ldr	r3, [pc, #8]	; (f34 <RTC_Handler+0x18>)
     f2c:	721a      	strb	r2, [r3, #8]
}
     f2e:	4770      	bx	lr
     f30:	200004c4 	.word	0x200004c4
     f34:	40001400 	.word	0x40001400

00000f38 <millis>:

uint32_t millis(void) {
     f38:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     f3a:	f3ef 8110 	mrs	r1, PRIMASK
     f3e:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     f40:	4a08      	ldr	r2, [pc, #32]	; (f64 <millis+0x2c>)
     f42:	4d09      	ldr	r5, [pc, #36]	; (f68 <millis+0x30>)
     f44:	8a10      	ldrh	r0, [r2, #16]
     f46:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     f48:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     f4a:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     f4c:	09e4      	lsrs	r4, r4, #7
     f4e:	d004      	beq.n	f5a <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     f50:	8a13      	ldrh	r3, [r2, #16]
     f52:	22fa      	movs	r2, #250	; 0xfa
     f54:	6828      	ldr	r0, [r5, #0]
     f56:	0092      	lsls	r2, r2, #2
     f58:	1880      	adds	r0, r0, r2
     f5a:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     f5c:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     f60:	bd30      	pop	{r4, r5, pc}
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	40001400 	.word	0x40001400
     f68:	200004c4 	.word	0x200004c4

00000f6c <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f6c:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     f6e:	4a0d      	ldr	r2, [pc, #52]	; (fa4 <TC4Init+0x38>)
     f70:	4b0d      	ldr	r3, [pc, #52]	; (fa8 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f72:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     f74:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f76:	4a0d      	ldr	r2, [pc, #52]	; (fac <TC4Init+0x40>)
     f78:	6a13      	ldr	r3, [r2, #32]
     f7a:	430b      	orrs	r3, r1
     f7c:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f7e:	4b0c      	ldr	r3, [pc, #48]	; (fb0 <TC4Init+0x44>)
     f80:	4a0c      	ldr	r2, [pc, #48]	; (fb4 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     f82:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f84:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x50;
     f86:	2250      	movs	r2, #80	; 0x50
     f88:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     f8a:	3a4f      	subs	r2, #79	; 0x4f
     f8c:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     f8e:	32ff      	adds	r2, #255	; 0xff
     f90:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     f92:	881a      	ldrh	r2, [r3, #0]
     f94:	430a      	orrs	r2, r1
     f96:	801a      	strh	r2, [r3, #0]
     f98:	2280      	movs	r2, #128	; 0x80
     f9a:	4b07      	ldr	r3, [pc, #28]	; (fb8 <TC4Init+0x4c>)
     f9c:	0312      	lsls	r2, r2, #12
     f9e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     fa0:	4770      	bx	lr
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	0000421c 	.word	0x0000421c
     fa8:	40000c00 	.word	0x40000c00
     fac:	40000400 	.word	0x40000400
     fb0:	42003000 	.word	0x42003000
     fb4:	00000904 	.word	0x00000904
     fb8:	e000e100 	.word	0xe000e100

00000fbc <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     fbc:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
     fbe:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     fc0:	4b02      	ldr	r3, [pc, #8]	; (fcc <TC4_Handler+0x10>)
     fc2:	739a      	strb	r2, [r3, #14]
    //pinToggle(TxPo);
    pullSample();
     fc4:	4b02      	ldr	r3, [pc, #8]	; (fd0 <TC4_Handler+0x14>)
     fc6:	4798      	blx	r3
}
     fc8:	bd10      	pop	{r4, pc}
     fca:	46c0      	nop			; (mov r8, r8)
     fcc:	42003000 	.word	0x42003000
     fd0:	00002579 	.word	0x00002579

00000fd4 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     fd4:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     fd6:	4a0d      	ldr	r2, [pc, #52]	; (100c <TC5Init+0x38>)
     fd8:	4b0d      	ldr	r3, [pc, #52]	; (1010 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     fda:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     fdc:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     fde:	4a0d      	ldr	r2, [pc, #52]	; (1014 <TC5Init+0x40>)
     fe0:	6a13      	ldr	r3, [r2, #32]
     fe2:	430b      	orrs	r3, r1
     fe4:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     fe6:	4b0c      	ldr	r3, [pc, #48]	; (1018 <TC5Init+0x44>)
     fe8:	4a0c      	ldr	r2, [pc, #48]	; (101c <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     fea:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     fec:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_PRESCALER_DIV16;

    u16_t logSpeed = 20; //Hz
    u8_t PER_Reg = (long)((32768/16) / logSpeed);

    TC5->COUNT8.PER.reg = PER_Reg;
     fee:	2266      	movs	r2, #102	; 0x66
     ff0:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     ff2:	3a65      	subs	r2, #101	; 0x65
     ff4:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     ff6:	32ff      	adds	r2, #255	; 0xff
     ff8:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     ffa:	881a      	ldrh	r2, [r3, #0]
     ffc:	430a      	orrs	r2, r1
     ffe:	801a      	strh	r2, [r3, #0]
    1000:	2280      	movs	r2, #128	; 0x80
    1002:	4b07      	ldr	r3, [pc, #28]	; (1020 <TC5Init+0x4c>)
    1004:	0352      	lsls	r2, r2, #13
    1006:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    1008:	4770      	bx	lr
    100a:	46c0      	nop			; (mov r8, r8)
    100c:	0000421c 	.word	0x0000421c
    1010:	40000c00 	.word	0x40000c00
    1014:	40000400 	.word	0x40000400
    1018:	42003400 	.word	0x42003400
    101c:	00000c04 	.word	0x00000c04
    1020:	e000e100 	.word	0xe000e100

00001024 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1024:	22ff      	movs	r2, #255	; 0xff
    1026:	4b03      	ldr	r3, [pc, #12]	; (1034 <TC5_Handler+0x10>)
    1028:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    102a:	4b03      	ldr	r3, [pc, #12]	; (1038 <TC5_Handler+0x14>)
    102c:	3afe      	subs	r2, #254	; 0xfe
    102e:	701a      	strb	r2, [r3, #0]
}
    1030:	4770      	bx	lr
    1032:	46c0      	nop			; (mov r8, r8)
    1034:	42003400 	.word	0x42003400
    1038:	2000052a 	.word	0x2000052a

0000103c <flight>:
#include <boardDefines.h>

flightState_t flightState;


void flight() {
    103c:	b570      	push	{r4, r5, r6, lr}

    switch(flightState) {
    103e:	4d78      	ldr	r5, [pc, #480]	; (1220 <flight+0x1e4>)
    1040:	7828      	ldrb	r0, [r5, #0]
    1042:	280a      	cmp	r0, #10
    1044:	d900      	bls.n	1048 <flight+0xc>
    1046:	e0dc      	b.n	1202 <flight+0x1c6>
    1048:	f002 ff54 	bl	3ef4 <__gnu_thumb1_case_uqi>
    104c:	73482606 	.word	0x73482606
    1050:	a68bdbdb 	.word	0xa68bdbdb
    1054:	dbb9      	.short	0xdbb9
    1056:	c9          	.byte	0xc9
    1057:	00          	.byte	0x00
    case flightStatrup:

        updateGround( );
    1058:	4b72      	ldr	r3, [pc, #456]	; (1224 <flight+0x1e8>)
    105a:	4798      	blx	r3

        if ((millis() - startupTick) > 10000) {
    105c:	4e72      	ldr	r6, [pc, #456]	; (1228 <flight+0x1ec>)
    105e:	47b0      	blx	r6
    1060:	4c72      	ldr	r4, [pc, #456]	; (122c <flight+0x1f0>)
    1062:	6823      	ldr	r3, [r4, #0]
    1064:	1ac0      	subs	r0, r0, r3
    1066:	4b72      	ldr	r3, [pc, #456]	; (1230 <flight+0x1f4>)
    1068:	4298      	cmp	r0, r3
    106a:	d90a      	bls.n	1082 <flight+0x46>
            findNewFlightStart( );
    106c:	4b71      	ldr	r3, [pc, #452]	; (1234 <flight+0x1f8>)
    106e:	4798      	blx	r3
            logFlight( );
    1070:	4b71      	ldr	r3, [pc, #452]	; (1238 <flight+0x1fc>)
    1072:	4798      	blx	r3
            startupJingle();
    1074:	4b71      	ldr	r3, [pc, #452]	; (123c <flight+0x200>)
    1076:	4798      	blx	r3
            startupTick = millis();
    1078:	47b0      	blx	r6
            flightState = flightTest;
    107a:	230a      	movs	r3, #10

        if ((millis() - startupTick) > 10000) {
            findNewFlightStart( );
            logFlight( );
            startupJingle();
            startupTick = millis();
    107c:	6020      	str	r0, [r4, #0]
            flightState = flightTest;
    107e:	702b      	strb	r3, [r5, #0]
            //flightState = flightPad;
            break;
    1080:	e0bf      	b.n	1202 <flight+0x1c6>
        }

        attemptConnection();
    1082:	4b6f      	ldr	r3, [pc, #444]	; (1240 <flight+0x204>)
    1084:	4798      	blx	r3

        if (unplugged()) {
    1086:	4b6f      	ldr	r3, [pc, #444]	; (1244 <flight+0x208>)
    1088:	4798      	blx	r3
    108a:	2800      	cmp	r0, #0
    108c:	d100      	bne.n	1090 <flight+0x54>
    108e:	e0b8      	b.n	1202 <flight+0x1c6>
            flightState = flightIdle;
    1090:	2301      	movs	r3, #1
    1092:	702b      	strb	r3, [r5, #0]
            unpluggedJingle();
    1094:	4b6c      	ldr	r3, [pc, #432]	; (1248 <flight+0x20c>)
    1096:	e0b3      	b.n	1200 <flight+0x1c4>
        break;
    case flightIdle:
        //TC4->COUNT8.CTRLA.reg = 0;
        //TC5->COUNT8.CTRLA.reg = 0;

        if (millis() - offsets.groundBeep > 2000) {
    1098:	4e63      	ldr	r6, [pc, #396]	; (1228 <flight+0x1ec>)
    109a:	47b0      	blx	r6
    109c:	4c6b      	ldr	r4, [pc, #428]	; (124c <flight+0x210>)
    109e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    10a0:	1ac0      	subs	r0, r0, r3
    10a2:	23fa      	movs	r3, #250	; 0xfa
    10a4:	00db      	lsls	r3, r3, #3
    10a6:	4298      	cmp	r0, r3
    10a8:	d905      	bls.n	10b6 <flight+0x7a>
            offsets.groundBeep = millis();
    10aa:	47b0      	blx	r6
    10ac:	6320      	str	r0, [r4, #48]	; 0x30
            beep(400);
    10ae:	20c8      	movs	r0, #200	; 0xc8
    10b0:	4b67      	ldr	r3, [pc, #412]	; (1250 <flight+0x214>)
    10b2:	0040      	lsls	r0, r0, #1
    10b4:	4798      	blx	r3
        }

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    10b6:	4b67      	ldr	r3, [pc, #412]	; (1254 <flight+0x218>)
    10b8:	7e1b      	ldrb	r3, [r3, #24]
    10ba:	075b      	lsls	r3, r3, #29
    10bc:	d400      	bmi.n	10c0 <flight+0x84>
    10be:	e0a0      	b.n	1202 <flight+0x1c6>
            u8_t possibleReset = usartDataIn(USART3);
    10c0:	2003      	movs	r0, #3
    10c2:	4b65      	ldr	r3, [pc, #404]	; (1258 <flight+0x21c>)
    10c4:	4798      	blx	r3
            if (possibleReset == 0x52) {
    10c6:	2852      	cmp	r0, #82	; 0x52
    10c8:	d000      	beq.n	10cc <flight+0x90>
    10ca:	e09a      	b.n	1202 <flight+0x1c6>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    10cc:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    10d0:	4a62      	ldr	r2, [pc, #392]	; (125c <flight+0x220>)
    10d2:	4b63      	ldr	r3, [pc, #396]	; (1260 <flight+0x224>)
    10d4:	60da      	str	r2, [r3, #12]
    10d6:	f3bf 8f4f 	dsb	sy
    10da:	e7fe      	b.n	10da <flight+0x9e>
        *  Accel > 2g & vel > 15ft/s
        *		 or
        *  baro alt > 100ft
        */

        updateGround();
    10dc:	4b51      	ldr	r3, [pc, #324]	; (1224 <flight+0x1e8>)
    10de:	4798      	blx	r3

        if (writeLog) {
    10e0:	4b60      	ldr	r3, [pc, #384]	; (1264 <flight+0x228>)
    10e2:	781b      	ldrb	r3, [r3, #0]
    10e4:	2b00      	cmp	r3, #0
    10e6:	d003      	beq.n	10f0 <flight+0xb4>
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    10e8:	2280      	movs	r2, #128	; 0x80
    10ea:	4b5f      	ldr	r3, [pc, #380]	; (1268 <flight+0x22c>)
    10ec:	0352      	lsls	r2, r2, #13
    10ee:	61da      	str	r2, [r3, #28]
            //logSensors( );
            pinToggle(LedPin);
        }


        if ((( velocity > 15) && (accel > 2)) | (altitudeAGL() > 100)) {
    10f0:	495e      	ldr	r1, [pc, #376]	; (126c <flight+0x230>)
    10f2:	4c5f      	ldr	r4, [pc, #380]	; (1270 <flight+0x234>)
    10f4:	2200      	movs	r2, #0
    10f6:	6808      	ldr	r0, [r1, #0]
    10f8:	6849      	ldr	r1, [r1, #4]
    10fa:	4b5e      	ldr	r3, [pc, #376]	; (1274 <flight+0x238>)
    10fc:	47a0      	blx	r4
    10fe:	2800      	cmp	r0, #0
    1100:	d00c      	beq.n	111c <flight+0xe0>
    1102:	2380      	movs	r3, #128	; 0x80
    1104:	495c      	ldr	r1, [pc, #368]	; (1278 <flight+0x23c>)
    1106:	2200      	movs	r2, #0
    1108:	6808      	ldr	r0, [r1, #0]
    110a:	6849      	ldr	r1, [r1, #4]
    110c:	05db      	lsls	r3, r3, #23
    110e:	47a0      	blx	r4
    1110:	1e44      	subs	r4, r0, #1
    1112:	41a0      	sbcs	r0, r4
    1114:	2401      	movs	r4, #1
    1116:	4240      	negs	r0, r0
    1118:	4004      	ands	r4, r0
    111a:	e000      	b.n	111e <flight+0xe2>
    111c:	0004      	movs	r4, r0
    111e:	4b57      	ldr	r3, [pc, #348]	; (127c <flight+0x240>)
    1120:	4798      	blx	r3
    1122:	2864      	cmp	r0, #100	; 0x64
    1124:	dc01      	bgt.n	112a <flight+0xee>
    1126:	07e3      	lsls	r3, r4, #31
    1128:	d56b      	bpl.n	1202 <flight+0x1c6>
            flightState = flightBoost;
    112a:	2303      	movs	r3, #3
            logEvent('L');
    112c:	204c      	movs	r0, #76	; 0x4c
            pinToggle(LedPin);
        }


        if ((( velocity > 15) && (accel > 2)) | (altitudeAGL() > 100)) {
            flightState = flightBoost;
    112e:	702b      	strb	r3, [r5, #0]
    1130:	e02f      	b.n	1192 <flight+0x156>
        /*
        *	boost to fast
        *		while
        *	Accel > 1/4G
        */
        if (writeLog) {
    1132:	4b4c      	ldr	r3, [pc, #304]	; (1264 <flight+0x228>)
    1134:	781b      	ldrb	r3, [r3, #0]
    1136:	2b00      	cmp	r3, #0
    1138:	d001      	beq.n	113e <flight+0x102>
            logSensors( );
    113a:	4b51      	ldr	r3, [pc, #324]	; (1280 <flight+0x244>)
    113c:	4798      	blx	r3
        }

        if (velocity < 0) {
    113e:	494b      	ldr	r1, [pc, #300]	; (126c <flight+0x230>)
    1140:	2200      	movs	r2, #0
    1142:	6808      	ldr	r0, [r1, #0]
    1144:	6849      	ldr	r1, [r1, #4]
    1146:	2300      	movs	r3, #0
    1148:	4c4e      	ldr	r4, [pc, #312]	; (1284 <flight+0x248>)
    114a:	47a0      	blx	r4
    114c:	2800      	cmp	r0, #0
    114e:	d058      	beq.n	1202 <flight+0x1c6>
            flightState = flightDrogue;
    1150:	2306      	movs	r3, #6
    1152:	702b      	strb	r3, [r5, #0]
            igniteDrogue();
    1154:	4b4c      	ldr	r3, [pc, #304]	; (1288 <flight+0x24c>)
    1156:	4798      	blx	r3
            logEvent('A');
    1158:	2041      	movs	r0, #65	; 0x41
    115a:	4b4c      	ldr	r3, [pc, #304]	; (128c <flight+0x250>)
    115c:	4798      	blx	r3
            beep(100);
    115e:	2064      	movs	r0, #100	; 0x64
    1160:	e03a      	b.n	11d8 <flight+0x19c>


        break;
    case flightDrogue:

        if (writeLog) {
    1162:	4b40      	ldr	r3, [pc, #256]	; (1264 <flight+0x228>)
    1164:	781b      	ldrb	r3, [r3, #0]
    1166:	2b00      	cmp	r3, #0
    1168:	d001      	beq.n	116e <flight+0x132>
            logSensors( );
    116a:	4b45      	ldr	r3, [pc, #276]	; (1280 <flight+0x244>)
    116c:	4798      	blx	r3
        }


        if (sample.pressureAltitude < deploymentSettings.MAIN_DEPLOY) {
    116e:	4b48      	ldr	r3, [pc, #288]	; (1290 <flight+0x254>)
    1170:	8b18      	ldrh	r0, [r3, #24]
    1172:	4b48      	ldr	r3, [pc, #288]	; (1294 <flight+0x258>)
    1174:	4798      	blx	r3
    1176:	000b      	movs	r3, r1
    1178:	4947      	ldr	r1, [pc, #284]	; (1298 <flight+0x25c>)
    117a:	0002      	movs	r2, r0
    117c:	6d88      	ldr	r0, [r1, #88]	; 0x58
    117e:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
    1180:	4c40      	ldr	r4, [pc, #256]	; (1284 <flight+0x248>)
    1182:	47a0      	blx	r4
    1184:	2800      	cmp	r0, #0
    1186:	d03c      	beq.n	1202 <flight+0x1c6>
            flightState = flightMain;
    1188:	2307      	movs	r3, #7
    118a:	702b      	strb	r3, [r5, #0]
            igniteMain();
    118c:	4b43      	ldr	r3, [pc, #268]	; (129c <flight+0x260>)
    118e:	4798      	blx	r3
            logEvent('M');
    1190:	204d      	movs	r0, #77	; 0x4d
    1192:	4b3e      	ldr	r3, [pc, #248]	; (128c <flight+0x250>)
    1194:	4798      	blx	r3
    1196:	e034      	b.n	1202 <flight+0x1c6>
        }

        break;
    case flightMain:

        if (writeLog) {
    1198:	4b32      	ldr	r3, [pc, #200]	; (1264 <flight+0x228>)
    119a:	781b      	ldrb	r3, [r3, #0]
    119c:	2b00      	cmp	r3, #0
    119e:	d001      	beq.n	11a4 <flight+0x168>
            logSensors( );
    11a0:	4b37      	ldr	r3, [pc, #220]	; (1280 <flight+0x244>)
    11a2:	4798      	blx	r3
        }

        if (velocity < 5) {
    11a4:	4931      	ldr	r1, [pc, #196]	; (126c <flight+0x230>)
    11a6:	2200      	movs	r2, #0
    11a8:	6808      	ldr	r0, [r1, #0]
    11aa:	6849      	ldr	r1, [r1, #4]
    11ac:	4b3c      	ldr	r3, [pc, #240]	; (12a0 <flight+0x264>)
    11ae:	4c35      	ldr	r4, [pc, #212]	; (1284 <flight+0x248>)
    11b0:	47a0      	blx	r4
    11b2:	2800      	cmp	r0, #0
    11b4:	d025      	beq.n	1202 <flight+0x1c6>
            flightState = flightLanded;
    11b6:	2308      	movs	r3, #8
    11b8:	702b      	strb	r3, [r5, #0]
            finishFlight();
    11ba:	4b3a      	ldr	r3, [pc, #232]	; (12a4 <flight+0x268>)
    11bc:	e020      	b.n	1200 <flight+0x1c4>
        }

        break;
    case flightLanded:

        if (millis() - offsets.groundBeep > 2000) {
    11be:	4e1a      	ldr	r6, [pc, #104]	; (1228 <flight+0x1ec>)
    11c0:	47b0      	blx	r6
    11c2:	4c22      	ldr	r4, [pc, #136]	; (124c <flight+0x210>)
    11c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    11c6:	1ac0      	subs	r0, r0, r3
    11c8:	23fa      	movs	r3, #250	; 0xfa
    11ca:	00db      	lsls	r3, r3, #3
    11cc:	4298      	cmp	r0, r3
    11ce:	d918      	bls.n	1202 <flight+0x1c6>
            offsets.groundBeep = millis();
    11d0:	47b0      	blx	r6
    11d2:	6320      	str	r0, [r4, #48]	; 0x30
            beep(400);
    11d4:	20c8      	movs	r0, #200	; 0xc8
    11d6:	0040      	lsls	r0, r0, #1
    11d8:	4b1d      	ldr	r3, [pc, #116]	; (1250 <flight+0x214>)
    11da:	4798      	blx	r3
    11dc:	e011      	b.n	1202 <flight+0x1c6>
        }

        break;
    case flightTest:
        //simple continuity test
        if ( (sample.voltage.senseA + sample.voltage.senseB +sample.voltage.senseC +sample.voltage.senseD) > 200) {
    11de:	4b2e      	ldr	r3, [pc, #184]	; (1298 <flight+0x25c>)
    11e0:	8a5a      	ldrh	r2, [r3, #18]
    11e2:	8a19      	ldrh	r1, [r3, #16]
    11e4:	1889      	adds	r1, r1, r2
    11e6:	8a9a      	ldrh	r2, [r3, #20]
    11e8:	1889      	adds	r1, r1, r2
    11ea:	8ada      	ldrh	r2, [r3, #22]
    11ec:	188b      	adds	r3, r1, r2
    11ee:	2bc8      	cmp	r3, #200	; 0xc8
    11f0:	dd01      	ble.n	11f6 <flight+0x1ba>
            unpluggedJingle();
    11f2:	4b15      	ldr	r3, [pc, #84]	; (1248 <flight+0x20c>)
    11f4:	4798      	blx	r3

//         if (altitudeAGL() > 15 | altitudeAGL() < -15) {
//             beep(100);
//         }

        if (writeLog) {
    11f6:	4b1b      	ldr	r3, [pc, #108]	; (1264 <flight+0x228>)
    11f8:	781b      	ldrb	r3, [r3, #0]
    11fa:	2b00      	cmp	r3, #0
    11fc:	d001      	beq.n	1202 <flight+0x1c6>
            logSensors( );
    11fe:	4b20      	ldr	r3, [pc, #128]	; (1280 <flight+0x244>)
    1200:	4798      	blx	r3
        break;
    }



    if ((flightState != flightStatrup) & ((flightState != flightIdle) & unplugged())) {
    1202:	2301      	movs	r3, #1
    1204:	782c      	ldrb	r4, [r5, #0]
    1206:	42a3      	cmp	r3, r4
    1208:	41a4      	sbcs	r4, r4
    120a:	4b0e      	ldr	r3, [pc, #56]	; (1244 <flight+0x208>)
    120c:	4264      	negs	r4, r4
    120e:	4798      	blx	r3
    1210:	2800      	cmp	r0, #0
    1212:	d003      	beq.n	121c <flight+0x1e0>
    1214:	2c00      	cmp	r4, #0
    1216:	d001      	beq.n	121c <flight+0x1e0>
        finishFlight();
    1218:	4b22      	ldr	r3, [pc, #136]	; (12a4 <flight+0x268>)
    121a:	4798      	blx	r3
    }

    121c:	bd70      	pop	{r4, r5, r6, pc}
    121e:	46c0      	nop			; (mov r8, r8)
    1220:	200006a0 	.word	0x200006a0
    1224:	000012a9 	.word	0x000012a9
    1228:	00000f39 	.word	0x00000f39
    122c:	2000052c 	.word	0x2000052c
    1230:	00002710 	.word	0x00002710
    1234:	000024bd 	.word	0x000024bd
    1238:	000021d9 	.word	0x000021d9
    123c:	00000c99 	.word	0x00000c99
    1240:	00002c59 	.word	0x00002c59
    1244:	00000b1d 	.word	0x00000b1d
    1248:	00000cd1 	.word	0x00000cd1
    124c:	200004d8 	.word	0x200004d8
    1250:	00000c5d 	.word	0x00000c5d
    1254:	42001400 	.word	0x42001400
    1258:	000029f5 	.word	0x000029f5
    125c:	05fa0004 	.word	0x05fa0004
    1260:	e000ed00 	.word	0xe000ed00
    1264:	2000052a 	.word	0x2000052a
    1268:	41004400 	.word	0x41004400
    126c:	200006b0 	.word	0x200006b0
    1270:	00004075 	.word	0x00004075
    1274:	402e0000 	.word	0x402e0000
    1278:	200006a8 	.word	0x200006a8
    127c:	00000ae9 	.word	0x00000ae9
    1280:	00002289 	.word	0x00002289
    1284:	0000404d 	.word	0x0000404d
    1288:	000015f5 	.word	0x000015f5
    128c:	00002235 	.word	0x00002235
    1290:	20000510 	.word	0x20000510
    1294:	00005e85 	.word	0x00005e85
    1298:	200007e8 	.word	0x200007e8
    129c:	00001599 	.word	0x00001599
    12a0:	40140000 	.word	0x40140000
    12a4:	00000b51 	.word	0x00000b51

000012a8 <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    12a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    12aa:	4c2b      	ldr	r4, [pc, #172]	; (1358 <updateGround+0xb0>)
    12ac:	4d2b      	ldr	r5, [pc, #172]	; (135c <updateGround+0xb4>)
    12ae:	4a2c      	ldr	r2, [pc, #176]	; (1360 <updateGround+0xb8>)
    12b0:	6920      	ldr	r0, [r4, #16]
    12b2:	6961      	ldr	r1, [r4, #20]
    12b4:	4b2b      	ldr	r3, [pc, #172]	; (1364 <updateGround+0xbc>)
    12b6:	47a8      	blx	r5
    12b8:	4b2b      	ldr	r3, [pc, #172]	; (1368 <updateGround+0xc0>)
    12ba:	0006      	movs	r6, r0
    12bc:	6b58      	ldr	r0, [r3, #52]	; 0x34
    12be:	4b2b      	ldr	r3, [pc, #172]	; (136c <updateGround+0xc4>)
    12c0:	000f      	movs	r7, r1
    12c2:	4798      	blx	r3
    12c4:	4a26      	ldr	r2, [pc, #152]	; (1360 <updateGround+0xb8>)
    12c6:	4b2a      	ldr	r3, [pc, #168]	; (1370 <updateGround+0xc8>)
    12c8:	47a8      	blx	r5
    12ca:	0002      	movs	r2, r0
    12cc:	000b      	movs	r3, r1
    12ce:	0030      	movs	r0, r6
    12d0:	0039      	movs	r1, r7
    12d2:	4e28      	ldr	r6, [pc, #160]	; (1374 <updateGround+0xcc>)
    12d4:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    12d6:	4e28      	ldr	r6, [pc, #160]	; (1378 <updateGround+0xd0>)

void updateGround(Altimeter *my_altimeter) {



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    12d8:	6120      	str	r0, [r4, #16]
    12da:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    12dc:	69e0      	ldr	r0, [r4, #28]
    12de:	47b0      	blx	r6
    12e0:	2200      	movs	r2, #0
    12e2:	4b26      	ldr	r3, [pc, #152]	; (137c <updateGround+0xd4>)
    12e4:	47a8      	blx	r5
    12e6:	9000      	str	r0, [sp, #0]
    12e8:	9101      	str	r1, [sp, #4]
    12ea:	4925      	ldr	r1, [pc, #148]	; (1380 <updateGround+0xd8>)
    12ec:	2200      	movs	r2, #0
    12ee:	6808      	ldr	r0, [r1, #0]
    12f0:	6849      	ldr	r1, [r1, #4]
    12f2:	4b22      	ldr	r3, [pc, #136]	; (137c <updateGround+0xd4>)
    12f4:	47a8      	blx	r5
    12f6:	4f1f      	ldr	r7, [pc, #124]	; (1374 <updateGround+0xcc>)
    12f8:	0002      	movs	r2, r0
    12fa:	000b      	movs	r3, r1
    12fc:	9800      	ldr	r0, [sp, #0]
    12fe:	9901      	ldr	r1, [sp, #4]
    1300:	47b8      	blx	r7
    1302:	4f20      	ldr	r7, [pc, #128]	; (1384 <updateGround+0xdc>)
    1304:	47b8      	blx	r7
    1306:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    1308:	6a60      	ldr	r0, [r4, #36]	; 0x24
    130a:	47b0      	blx	r6
    130c:	4a14      	ldr	r2, [pc, #80]	; (1360 <updateGround+0xb8>)
    130e:	4b15      	ldr	r3, [pc, #84]	; (1364 <updateGround+0xbc>)
    1310:	47a8      	blx	r5
    1312:	4b15      	ldr	r3, [pc, #84]	; (1368 <updateGround+0xc0>)
    1314:	9000      	str	r0, [sp, #0]
    1316:	9101      	str	r1, [sp, #4]
    1318:	6d58      	ldr	r0, [r3, #84]	; 0x54
    131a:	47b0      	blx	r6
    131c:	4a10      	ldr	r2, [pc, #64]	; (1360 <updateGround+0xb8>)
    131e:	4b14      	ldr	r3, [pc, #80]	; (1370 <updateGround+0xc8>)
    1320:	47a8      	blx	r5
    1322:	4d14      	ldr	r5, [pc, #80]	; (1374 <updateGround+0xcc>)
    1324:	000b      	movs	r3, r1
    1326:	0002      	movs	r2, r0
    1328:	9800      	ldr	r0, [sp, #0]
    132a:	9901      	ldr	r1, [sp, #4]
    132c:	47a8      	blx	r5
    132e:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    1330:	4d15      	ldr	r5, [pc, #84]	; (1388 <updateGround+0xe0>)



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    1332:	6260      	str	r0, [r4, #36]	; 0x24

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    1334:	47a8      	blx	r5
    1336:	6823      	ldr	r3, [r4, #0]
    1338:	1ac0      	subs	r0, r0, r3
    133a:	23fa      	movs	r3, #250	; 0xfa
    133c:	00db      	lsls	r3, r3, #3
    133e:	4298      	cmp	r0, r3
    1340:	d909      	bls.n	1356 <updateGround+0xae>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    1342:	69e3      	ldr	r3, [r4, #28]
    1344:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    1346:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1348:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    134a:	6922      	ldr	r2, [r4, #16]
    134c:	6963      	ldr	r3, [r4, #20]
    134e:	60a2      	str	r2, [r4, #8]
    1350:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    1352:	47a8      	blx	r5
    1354:	6020      	str	r0, [r4, #0]
    }
}
    1356:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1358:	200004d8 	.word	0x200004d8
    135c:	0000523d 	.word	0x0000523d
    1360:	9999999a 	.word	0x9999999a
    1364:	3fe99999 	.word	0x3fe99999
    1368:	200007e8 	.word	0x200007e8
    136c:	00005f79 	.word	0x00005f79
    1370:	3fc99999 	.word	0x3fc99999
    1374:	0000439d 	.word	0x0000439d
    1378:	00005f09 	.word	0x00005f09
    137c:	3fe00000 	.word	0x3fe00000
    1380:	200006b8 	.word	0x200006b8
    1384:	000040f5 	.word	0x000040f5
    1388:	00000f39 	.word	0x00000f39

0000138c <isItPointingUp>:

void isItPointingUp() {
    138c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    u8_t i;

    double pointingUpBuffer;

    pointingUpBuffer = sample.accelZ;
    138e:	4f25      	ldr	r7, [pc, #148]	; (1424 <isItPointingUp+0x98>)
    1390:	4b25      	ldr	r3, [pc, #148]	; (1428 <isItPointingUp+0x9c>)
    1392:	6b78      	ldr	r0, [r7, #52]	; 0x34
    1394:	4798      	blx	r3
    1396:	260a      	movs	r6, #10
    1398:	0004      	movs	r4, r0
    139a:	000d      	movs	r5, r1
    139c:	9701      	str	r7, [sp, #4]

    for ( i = 0; i < 10 ; ++i ) {
        delay_ms(10);
    139e:	200a      	movs	r0, #10
    13a0:	4b22      	ldr	r3, [pc, #136]	; (142c <isItPointingUp+0xa0>)
    13a2:	4798      	blx	r3
        sampleTick();
    13a4:	4b22      	ldr	r3, [pc, #136]	; (1430 <isItPointingUp+0xa4>)
    13a6:	4798      	blx	r3
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    13a8:	4a22      	ldr	r2, [pc, #136]	; (1434 <isItPointingUp+0xa8>)
    13aa:	4b23      	ldr	r3, [pc, #140]	; (1438 <isItPointingUp+0xac>)
    13ac:	0020      	movs	r0, r4
    13ae:	0029      	movs	r1, r5
    13b0:	4c22      	ldr	r4, [pc, #136]	; (143c <isItPointingUp+0xb0>)
    13b2:	47a0      	blx	r4
    13b4:	0004      	movs	r4, r0
    13b6:	000d      	movs	r5, r1
    13b8:	9b01      	ldr	r3, [sp, #4]
    13ba:	3e01      	subs	r6, #1
    13bc:	6b58      	ldr	r0, [r3, #52]	; 0x34
    13be:	4b1a      	ldr	r3, [pc, #104]	; (1428 <isItPointingUp+0x9c>)
    13c0:	4798      	blx	r3
    13c2:	4a1c      	ldr	r2, [pc, #112]	; (1434 <isItPointingUp+0xa8>)
    13c4:	4b1e      	ldr	r3, [pc, #120]	; (1440 <isItPointingUp+0xb4>)
    13c6:	4f1d      	ldr	r7, [pc, #116]	; (143c <isItPointingUp+0xb0>)
    13c8:	47b8      	blx	r7
    13ca:	0022      	movs	r2, r4
    13cc:	002b      	movs	r3, r5
    13ce:	4c1d      	ldr	r4, [pc, #116]	; (1444 <isItPointingUp+0xb8>)
    13d0:	47a0      	blx	r4
    13d2:	b2f6      	uxtb	r6, r6
    13d4:	0004      	movs	r4, r0
    13d6:	000d      	movs	r5, r1

    double pointingUpBuffer;

    pointingUpBuffer = sample.accelZ;

    for ( i = 0; i < 10 ; ++i ) {
    13d8:	2e00      	cmp	r6, #0
    13da:	d1e0      	bne.n	139e <isItPointingUp+0x12>
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    13dc:	4e1a      	ldr	r6, [pc, #104]	; (1448 <isItPointingUp+0xbc>)
    13de:	4a1b      	ldr	r2, [pc, #108]	; (144c <isItPointingUp+0xc0>)
    13e0:	4b1b      	ldr	r3, [pc, #108]	; (1450 <isItPointingUp+0xc4>)
    13e2:	47b0      	blx	r6
    13e4:	0037      	movs	r7, r6
    13e6:	4e1b      	ldr	r6, [pc, #108]	; (1454 <isItPointingUp+0xc8>)
    13e8:	2800      	cmp	r0, #0
    13ea:	d007      	beq.n	13fc <isItPointingUp+0x70>
    13ec:	4a11      	ldr	r2, [pc, #68]	; (1434 <isItPointingUp+0xa8>)
    13ee:	4b1a      	ldr	r3, [pc, #104]	; (1458 <isItPointingUp+0xcc>)
    13f0:	0020      	movs	r0, r4
    13f2:	0029      	movs	r1, r5
    13f4:	47b0      	blx	r6
        altimeter.pointingUp = true;
    13f6:	2201      	movs	r2, #1
    for ( i = 0; i < 10 ; ++i ) {
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    13f8:	2800      	cmp	r0, #0
    13fa:	d10e      	bne.n	141a <isItPointingUp+0x8e>
        altimeter.pointingUp = true;
    } else if ((pointingUpBuffer < -0.9) & (pointingUpBuffer > -1.1)) {
    13fc:	4a13      	ldr	r2, [pc, #76]	; (144c <isItPointingUp+0xc0>)
    13fe:	4b17      	ldr	r3, [pc, #92]	; (145c <isItPointingUp+0xd0>)
    1400:	0020      	movs	r0, r4
    1402:	0029      	movs	r1, r5
    1404:	47b0      	blx	r6
    1406:	2800      	cmp	r0, #0
    1408:	d00a      	beq.n	1420 <isItPointingUp+0x94>
    140a:	4a0a      	ldr	r2, [pc, #40]	; (1434 <isItPointingUp+0xa8>)
    140c:	4b14      	ldr	r3, [pc, #80]	; (1460 <isItPointingUp+0xd4>)
    140e:	0020      	movs	r0, r4
    1410:	0029      	movs	r1, r5
    1412:	47b8      	blx	r7
    1414:	2800      	cmp	r0, #0
    1416:	d003      	beq.n	1420 <isItPointingUp+0x94>
        altimeter.pointingUp = false;
    1418:	2200      	movs	r2, #0
    141a:	4b12      	ldr	r3, [pc, #72]	; (1464 <isItPointingUp+0xd8>)
    141c:	715a      	strb	r2, [r3, #5]

        }

    }

    141e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1420:	e7fe      	b.n	1420 <isItPointingUp+0x94>
    1422:	46c0      	nop			; (mov r8, r8)
    1424:	200007e8 	.word	0x200007e8
    1428:	00005f79 	.word	0x00005f79
    142c:	00000eed 	.word	0x00000eed
    1430:	00002585 	.word	0x00002585
    1434:	9999999a 	.word	0x9999999a
    1438:	3fe99999 	.word	0x3fe99999
    143c:	0000523d 	.word	0x0000523d
    1440:	3fc99999 	.word	0x3fc99999
    1444:	0000439d 	.word	0x0000439d
    1448:	00004075 	.word	0x00004075
    144c:	cccccccd 	.word	0xcccccccd
    1450:	3feccccc 	.word	0x3feccccc
    1454:	0000404d 	.word	0x0000404d
    1458:	3ff19999 	.word	0x3ff19999
    145c:	bfeccccc 	.word	0xbfeccccc
    1460:	bff19999 	.word	0xbff19999
    1464:	20000530 	.word	0x20000530

00001468 <igniterTick>:
#include <util.h>
#include <boardDefines.h>


void igniterTick() {
    1468:	b510      	push	{r4, lr}

    if (charges.igniterAHot) {
    146a:	4c23      	ldr	r4, [pc, #140]	; (14f8 <igniterTick+0x90>)
    146c:	7823      	ldrb	r3, [r4, #0]
    146e:	2b00      	cmp	r3, #0
    1470:	d00d      	beq.n	148e <igniterTick+0x26>
        if ((millis() - charges.igniterATick) > 2000) {
    1472:	4b22      	ldr	r3, [pc, #136]	; (14fc <igniterTick+0x94>)
    1474:	4798      	blx	r3
    1476:	6863      	ldr	r3, [r4, #4]
    1478:	1ac0      	subs	r0, r0, r3
    147a:	23fa      	movs	r3, #250	; 0xfa
    147c:	00db      	lsls	r3, r3, #3
    147e:	4298      	cmp	r0, r3
    1480:	d905      	bls.n	148e <igniterTick+0x26>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1482:	2280      	movs	r2, #128	; 0x80
    1484:	4b1e      	ldr	r3, [pc, #120]	; (1500 <igniterTick+0x98>)
    1486:	0412      	lsls	r2, r2, #16
    1488:	601a      	str	r2, [r3, #0]
            pinLow(fireAPin);
            charges.igniterAHot = false;
    148a:	2300      	movs	r3, #0
    148c:	7023      	strb	r3, [r4, #0]
        }
    }

    if (charges.igniterBHot) {
    148e:	7a23      	ldrb	r3, [r4, #8]
    1490:	2b00      	cmp	r3, #0
    1492:	d00d      	beq.n	14b0 <igniterTick+0x48>
        if ((millis() - charges.igniterBTick) > 2000) {
    1494:	4b19      	ldr	r3, [pc, #100]	; (14fc <igniterTick+0x94>)
    1496:	4798      	blx	r3
    1498:	68e3      	ldr	r3, [r4, #12]
    149a:	1ac0      	subs	r0, r0, r3
    149c:	23fa      	movs	r3, #250	; 0xfa
    149e:	00db      	lsls	r3, r3, #3
    14a0:	4298      	cmp	r0, r3
    14a2:	d905      	bls.n	14b0 <igniterTick+0x48>
    14a4:	2280      	movs	r2, #128	; 0x80
    14a6:	4b16      	ldr	r3, [pc, #88]	; (1500 <igniterTick+0x98>)
    14a8:	03d2      	lsls	r2, r2, #15
    14aa:	601a      	str	r2, [r3, #0]
            pinLow(fireBPin);
            charges.igniterBHot = false;
    14ac:	2300      	movs	r3, #0
    14ae:	7223      	strb	r3, [r4, #8]
        }
    }

    if (charges.igniterCHot) {
    14b0:	7c23      	ldrb	r3, [r4, #16]
    14b2:	2b00      	cmp	r3, #0
    14b4:	d00d      	beq.n	14d2 <igniterTick+0x6a>
        if ((millis() - charges.igniterCTick) > 2000) {
    14b6:	4b11      	ldr	r3, [pc, #68]	; (14fc <igniterTick+0x94>)
    14b8:	4798      	blx	r3
    14ba:	6963      	ldr	r3, [r4, #20]
    14bc:	1ac0      	subs	r0, r0, r3
    14be:	23fa      	movs	r3, #250	; 0xfa
    14c0:	00db      	lsls	r3, r3, #3
    14c2:	4298      	cmp	r0, r3
    14c4:	d905      	bls.n	14d2 <igniterTick+0x6a>
    14c6:	2280      	movs	r2, #128	; 0x80
    14c8:	4b0e      	ldr	r3, [pc, #56]	; (1504 <igniterTick+0x9c>)
    14ca:	0492      	lsls	r2, r2, #18
    14cc:	615a      	str	r2, [r3, #20]
            pinLow(fireCPin);
            charges.igniterCHot = false;
    14ce:	2300      	movs	r3, #0
    14d0:	7423      	strb	r3, [r4, #16]
        }
    }

    if (charges.igniterDHot) {
    14d2:	7e23      	ldrb	r3, [r4, #24]
    14d4:	2b00      	cmp	r3, #0
    14d6:	d00d      	beq.n	14f4 <igniterTick+0x8c>
        if ((millis() - charges.igniterDTick) > 2000) {
    14d8:	4b08      	ldr	r3, [pc, #32]	; (14fc <igniterTick+0x94>)
    14da:	4798      	blx	r3
    14dc:	69e3      	ldr	r3, [r4, #28]
    14de:	1ac0      	subs	r0, r0, r3
    14e0:	23fa      	movs	r3, #250	; 0xfa
    14e2:	00db      	lsls	r3, r3, #3
    14e4:	4298      	cmp	r0, r3
    14e6:	d905      	bls.n	14f4 <igniterTick+0x8c>
    14e8:	2280      	movs	r2, #128	; 0x80
    14ea:	4b06      	ldr	r3, [pc, #24]	; (1504 <igniterTick+0x9c>)
    14ec:	0452      	lsls	r2, r2, #17
    14ee:	615a      	str	r2, [r3, #20]
            pinLow(fireDPin);
            charges.igniterDHot = false;
    14f0:	2300      	movs	r3, #0
    14f2:	7623      	strb	r3, [r4, #24]
        }
    }
}
    14f4:	bd10      	pop	{r4, pc}
    14f6:	46c0      	nop			; (mov r8, r8)
    14f8:	20000680 	.word	0x20000680
    14fc:	00000f39 	.word	0x00000f39
    1500:	41004494 	.word	0x41004494
    1504:	41004400 	.word	0x41004400

00001508 <lightIgniterA>:
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1508:	2280      	movs	r2, #128	; 0x80
    150a:	4b05      	ldr	r3, [pc, #20]	; (1520 <lightIgniterA+0x18>)
    150c:	0412      	lsls	r2, r2, #16
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
        lightIgniterD();
    }
}

void lightIgniterA() {
    150e:	b510      	push	{r4, lr}
    1510:	601a      	str	r2, [r3, #0]
    pinHigh(fireAPin);
    charges.igniterAHot = true;
    1512:	2301      	movs	r3, #1
    1514:	4c03      	ldr	r4, [pc, #12]	; (1524 <lightIgniterA+0x1c>)
    1516:	7023      	strb	r3, [r4, #0]
    charges.igniterATick = millis();
    1518:	4b03      	ldr	r3, [pc, #12]	; (1528 <lightIgniterA+0x20>)
    151a:	4798      	blx	r3
    151c:	6060      	str	r0, [r4, #4]
}
    151e:	bd10      	pop	{r4, pc}
    1520:	41004498 	.word	0x41004498
    1524:	20000680 	.word	0x20000680
    1528:	00000f39 	.word	0x00000f39

0000152c <lightIgniterB>:
    152c:	2280      	movs	r2, #128	; 0x80
    152e:	4b05      	ldr	r3, [pc, #20]	; (1544 <lightIgniterB+0x18>)
    1530:	03d2      	lsls	r2, r2, #15

void lightIgniterB() {
    1532:	b510      	push	{r4, lr}
    1534:	601a      	str	r2, [r3, #0]
    pinHigh(fireBPin);
    charges.igniterBHot = true;
    1536:	2301      	movs	r3, #1
    1538:	4c03      	ldr	r4, [pc, #12]	; (1548 <lightIgniterB+0x1c>)
    153a:	7223      	strb	r3, [r4, #8]
    charges.igniterBTick = millis();
    153c:	4b03      	ldr	r3, [pc, #12]	; (154c <lightIgniterB+0x20>)
    153e:	4798      	blx	r3
    1540:	60e0      	str	r0, [r4, #12]
}
    1542:	bd10      	pop	{r4, pc}
    1544:	41004498 	.word	0x41004498
    1548:	20000680 	.word	0x20000680
    154c:	00000f39 	.word	0x00000f39

00001550 <lightIgniterC>:
    1550:	2280      	movs	r2, #128	; 0x80
    1552:	4b05      	ldr	r3, [pc, #20]	; (1568 <lightIgniterC+0x18>)
    1554:	0492      	lsls	r2, r2, #18

void lightIgniterC() {
    1556:	b510      	push	{r4, lr}
    1558:	619a      	str	r2, [r3, #24]
    pinHigh(fireCPin);
    charges.igniterCHot = true;
    155a:	2301      	movs	r3, #1
    155c:	4c03      	ldr	r4, [pc, #12]	; (156c <lightIgniterC+0x1c>)
    155e:	7423      	strb	r3, [r4, #16]
    charges.igniterCTick = millis();
    1560:	4b03      	ldr	r3, [pc, #12]	; (1570 <lightIgniterC+0x20>)
    1562:	4798      	blx	r3
    1564:	6160      	str	r0, [r4, #20]
}
    1566:	bd10      	pop	{r4, pc}
    1568:	41004400 	.word	0x41004400
    156c:	20000680 	.word	0x20000680
    1570:	00000f39 	.word	0x00000f39

00001574 <lightIgniterD>:
    1574:	2280      	movs	r2, #128	; 0x80
    1576:	4b05      	ldr	r3, [pc, #20]	; (158c <lightIgniterD+0x18>)
    1578:	0452      	lsls	r2, r2, #17

void lightIgniterD() {
    157a:	b510      	push	{r4, lr}
    157c:	619a      	str	r2, [r3, #24]
    pinHigh(fireDPin);
    charges.igniterDHot = true;
    157e:	2301      	movs	r3, #1
    1580:	4c03      	ldr	r4, [pc, #12]	; (1590 <lightIgniterD+0x1c>)
    1582:	7623      	strb	r3, [r4, #24]
    charges.igniterDTick = millis();
    1584:	4b03      	ldr	r3, [pc, #12]	; (1594 <lightIgniterD+0x20>)
    1586:	4798      	blx	r3
    1588:	61e0      	str	r0, [r4, #28]
    158a:	bd10      	pop	{r4, pc}
    158c:	41004400 	.word	0x41004400
    1590:	20000680 	.word	0x20000680
    1594:	00000f39 	.word	0x00000f39

00001598 <igniteMain>:
            charges.igniterDHot = false;
        }
    }
}

void igniteMain() {
    1598:	b510      	push	{r4, lr}

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    159a:	4c11      	ldr	r4, [pc, #68]	; (15e0 <igniteMain+0x48>)
    159c:	7863      	ldrb	r3, [r4, #1]
    159e:	2b00      	cmp	r3, #0
    15a0:	d104      	bne.n	15ac <igniteMain+0x14>
    15a2:	7823      	ldrb	r3, [r4, #0]
    15a4:	2b00      	cmp	r3, #0
    15a6:	d001      	beq.n	15ac <igniteMain+0x14>
        lightIgniterA();
    15a8:	4b0e      	ldr	r3, [pc, #56]	; (15e4 <igniteMain+0x4c>)
    15aa:	4798      	blx	r3
    }
    if(deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    15ac:	79e3      	ldrb	r3, [r4, #7]
    15ae:	2b00      	cmp	r3, #0
    15b0:	d104      	bne.n	15bc <igniteMain+0x24>
    15b2:	79a3      	ldrb	r3, [r4, #6]
    15b4:	2b00      	cmp	r3, #0
    15b6:	d001      	beq.n	15bc <igniteMain+0x24>
        lightIgniterB();
    15b8:	4b0b      	ldr	r3, [pc, #44]	; (15e8 <igniteMain+0x50>)
    15ba:	4798      	blx	r3
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    15bc:	7b63      	ldrb	r3, [r4, #13]
    15be:	2b00      	cmp	r3, #0
    15c0:	d104      	bne.n	15cc <igniteMain+0x34>
    15c2:	7b23      	ldrb	r3, [r4, #12]
    15c4:	2b00      	cmp	r3, #0
    15c6:	d001      	beq.n	15cc <igniteMain+0x34>
        lightIgniterC();
    15c8:	4b08      	ldr	r3, [pc, #32]	; (15ec <igniteMain+0x54>)
    15ca:	4798      	blx	r3
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    15cc:	7ce3      	ldrb	r3, [r4, #19]
    15ce:	2b00      	cmp	r3, #0
    15d0:	d104      	bne.n	15dc <igniteMain+0x44>
    15d2:	7ca3      	ldrb	r3, [r4, #18]
    15d4:	2b00      	cmp	r3, #0
    15d6:	d001      	beq.n	15dc <igniteMain+0x44>
        lightIgniterD();
    15d8:	4b05      	ldr	r3, [pc, #20]	; (15f0 <igniteMain+0x58>)
    15da:	4798      	blx	r3
    }
}
    15dc:	bd10      	pop	{r4, pc}
    15de:	46c0      	nop			; (mov r8, r8)
    15e0:	20000510 	.word	0x20000510
    15e4:	00001509 	.word	0x00001509
    15e8:	0000152d 	.word	0x0000152d
    15ec:	00001551 	.word	0x00001551
    15f0:	00001575 	.word	0x00001575

000015f4 <igniteDrogue>:

void igniteDrogue() {
    15f4:	b510      	push	{r4, lr}

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == DROGUE_t)) {
    15f6:	4c11      	ldr	r4, [pc, #68]	; (163c <igniteDrogue+0x48>)
    15f8:	7863      	ldrb	r3, [r4, #1]
    15fa:	2b01      	cmp	r3, #1
    15fc:	d104      	bne.n	1608 <igniteDrogue+0x14>
    15fe:	7823      	ldrb	r3, [r4, #0]
    1600:	2b00      	cmp	r3, #0
    1602:	d001      	beq.n	1608 <igniteDrogue+0x14>
        lightIgniterA();
    1604:	4b0e      	ldr	r3, [pc, #56]	; (1640 <igniteDrogue+0x4c>)
    1606:	4798      	blx	r3
    }
    if (deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == DROGUE_t)) {
    1608:	79e3      	ldrb	r3, [r4, #7]
    160a:	2b01      	cmp	r3, #1
    160c:	d104      	bne.n	1618 <igniteDrogue+0x24>
    160e:	79a3      	ldrb	r3, [r4, #6]
    1610:	2b00      	cmp	r3, #0
    1612:	d001      	beq.n	1618 <igniteDrogue+0x24>
        lightIgniterB();
    1614:	4b0b      	ldr	r3, [pc, #44]	; (1644 <igniteDrogue+0x50>)
    1616:	4798      	blx	r3
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == DROGUE_t)) {
    1618:	7b63      	ldrb	r3, [r4, #13]
    161a:	2b01      	cmp	r3, #1
    161c:	d104      	bne.n	1628 <igniteDrogue+0x34>
    161e:	7b23      	ldrb	r3, [r4, #12]
    1620:	2b00      	cmp	r3, #0
    1622:	d001      	beq.n	1628 <igniteDrogue+0x34>
        lightIgniterC();
    1624:	4b08      	ldr	r3, [pc, #32]	; (1648 <igniteDrogue+0x54>)
    1626:	4798      	blx	r3
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
    1628:	7ce3      	ldrb	r3, [r4, #19]
    162a:	2b01      	cmp	r3, #1
    162c:	d104      	bne.n	1638 <igniteDrogue+0x44>
    162e:	7ca3      	ldrb	r3, [r4, #18]
    1630:	2b00      	cmp	r3, #0
    1632:	d001      	beq.n	1638 <igniteDrogue+0x44>
        lightIgniterD();
    1634:	4b05      	ldr	r3, [pc, #20]	; (164c <igniteDrogue+0x58>)
    1636:	4798      	blx	r3
    }
}
    1638:	bd10      	pop	{r4, pc}
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	20000510 	.word	0x20000510
    1640:	00001509 	.word	0x00001509
    1644:	0000152d 	.word	0x0000152d
    1648:	00001551 	.word	0x00001551
    164c:	00001575 	.word	0x00001575

00001650 <computeKalmanGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    1650:	4bdc      	ldr	r3, [pc, #880]	; (19c4 <computeKalmanGains+0x374>)
    1652:	48dd      	ldr	r0, [pc, #884]	; (19c8 <computeKalmanGains+0x378>)
    1654:	49dd      	ldr	r1, [pc, #884]	; (19cc <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    1656:	b5f0      	push	{r4, r5, r6, r7, lr}
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    1658:	6098      	str	r0, [r3, #8]
    165a:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    165c:	6298      	str	r0, [r3, #40]	; 0x28
    165e:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    1660:	48db      	ldr	r0, [pc, #876]	; (19d0 <computeKalmanGains+0x380>)
    1662:	49dc      	ldr	r1, [pc, #880]	; (19d4 <computeKalmanGains+0x384>)
    1664:	2200      	movs	r2, #0
    1666:	6118      	str	r0, [r3, #16]
    1668:	6159      	str	r1, [r3, #20]
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
            kgain[i][j] = 1.0;
    166a:	2000      	movs	r0, #0
    166c:	49da      	ldr	r1, [pc, #872]	; (19d8 <computeKalmanGains+0x388>)
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    166e:	4cdb      	ldr	r4, [pc, #876]	; (19dc <computeKalmanGains+0x38c>)
    1670:	468c      	mov	ip, r1
    1672:	4ddb      	ldr	r5, [pc, #876]	; (19e0 <computeKalmanGains+0x390>)
            kgain[i][j] = 1.0;
    1674:	49db      	ldr	r1, [pc, #876]	; (19e4 <computeKalmanGains+0x394>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    1676:	b0cd      	sub	sp, #308	; 0x134
    1678:	ae40      	add	r6, sp, #256	; 0x100
    167a:	1997      	adds	r7, r2, r6
    167c:	4666      	mov	r6, ip
    167e:	1996      	adds	r6, r2, r6
    1680:	3210      	adds	r2, #16
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    1682:	603c      	str	r4, [r7, #0]
    1684:	607d      	str	r5, [r7, #4]
            kgain[i][j] = 1.0;
    1686:	6030      	str	r0, [r6, #0]
    1688:	6071      	str	r1, [r6, #4]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    168a:	60bc      	str	r4, [r7, #8]
    168c:	60fd      	str	r5, [r7, #12]
            kgain[i][j] = 1.0;
    168e:	60b0      	str	r0, [r6, #8]
    1690:	60f1      	str	r1, [r6, #12]
    phi[0][2]    = dt*dt/2.0;
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
    1692:	2a30      	cmp	r2, #48	; 0x30
    1694:	d1f0      	bne.n	1678 <computeKalmanGains+0x28>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1696:	6819      	ldr	r1, [r3, #0]
    1698:	685a      	ldr	r2, [r3, #4]
    169a:	911a      	str	r1, [sp, #104]	; 0x68
    169c:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    169e:	6999      	ldr	r1, [r3, #24]
    16a0:	69da      	ldr	r2, [r3, #28]
    16a2:	911c      	str	r1, [sp, #112]	; 0x70
    16a4:	921d      	str	r2, [sp, #116]	; 0x74
    16a6:	6a19      	ldr	r1, [r3, #32]
    16a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    16aa:	911e      	str	r1, [sp, #120]	; 0x78
    16ac:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    16ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
    16b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    16b2:	9120      	str	r1, [sp, #128]	; 0x80
    16b4:	9221      	str	r2, [sp, #132]	; 0x84
    16b6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    16b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    16ba:	9122      	str	r1, [sp, #136]	; 0x88
    16bc:	9223      	str	r2, [sp, #140]	; 0x8c
    16be:	6c19      	ldr	r1, [r3, #64]	; 0x40
    16c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    16c2:	9124      	str	r1, [sp, #144]	; 0x90
    16c4:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    16c6:	6c99      	ldr	r1, [r3, #72]	; 0x48
    16c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    16ca:	913a      	str	r1, [sp, #232]	; 0xe8
    16cc:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    16ce:	6d19      	ldr	r1, [r3, #80]	; 0x50
    16d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    16d2:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    16d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    16d6:	933e      	str	r3, [sp, #248]	; 0xf8
    16d8:	943f      	str	r4, [sp, #252]	; 0xfc
    16da:	2300      	movs	r3, #0
    16dc:	4cc2      	ldr	r4, [pc, #776]	; (19e8 <computeKalmanGains+0x398>)
    16de:	913c      	str	r1, [sp, #240]	; 0xf0
    16e0:	923d      	str	r2, [sp, #244]	; 0xf4
    16e2:	9302      	str	r3, [sp, #8]
    16e4:	9403      	str	r4, [sp, #12]
    16e6:	2300      	movs	r3, #0
    16e8:	2400      	movs	r4, #0
    16ea:	9310      	str	r3, [sp, #64]	; 0x40
    16ec:	9411      	str	r4, [sp, #68]	; 0x44
    16ee:	9300      	str	r3, [sp, #0]
    16f0:	9401      	str	r4, [sp, #4]
    16f2:	9304      	str	r3, [sp, #16]
    16f4:	9405      	str	r4, [sp, #20]
    16f6:	2300      	movs	r3, #0
    16f8:	4cbb      	ldr	r4, [pc, #748]	; (19e8 <computeKalmanGains+0x398>)
    16fa:	930e      	str	r3, [sp, #56]	; 0x38
    16fc:	940f      	str	r4, [sp, #60]	; 0x3c
    16fe:	2300      	movs	r3, #0
    1700:	2400      	movs	r4, #0
    1702:	9308      	str	r3, [sp, #32]
    1704:	9409      	str	r4, [sp, #36]	; 0x24
    1706:	930c      	str	r3, [sp, #48]	; 0x30
    1708:	940d      	str	r4, [sp, #52]	; 0x34
    170a:	930a      	str	r3, [sp, #40]	; 0x28
    170c:	940b      	str	r4, [sp, #44]	; 0x2c
    170e:	2480      	movs	r4, #128	; 0x80
    1710:	2300      	movs	r3, #0
    1712:	05e4      	lsls	r4, r4, #23
    1714:	9306      	str	r3, [sp, #24]
    1716:	9407      	str	r4, [sp, #28]
    1718:	2300      	movs	r3, #0
    171a:	9338      	str	r3, [sp, #224]	; 0xe0

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    171c:	4db3      	ldr	r5, [pc, #716]	; (19ec <computeKalmanGains+0x39c>)
    171e:	9a06      	ldr	r2, [sp, #24]
    1720:	9b07      	ldr	r3, [sp, #28]
    1722:	981a      	ldr	r0, [sp, #104]	; 0x68
    1724:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1726:	47a8      	blx	r5
    1728:	4aa7      	ldr	r2, [pc, #668]	; (19c8 <computeKalmanGains+0x378>)
    172a:	0006      	movs	r6, r0
    172c:	000f      	movs	r7, r1
    172e:	9808      	ldr	r0, [sp, #32]
    1730:	9909      	ldr	r1, [sp, #36]	; 0x24
    1732:	4ba6      	ldr	r3, [pc, #664]	; (19cc <computeKalmanGains+0x37c>)
    1734:	47a8      	blx	r5
    1736:	4cae      	ldr	r4, [pc, #696]	; (19f0 <computeKalmanGains+0x3a0>)
    1738:	0002      	movs	r2, r0
    173a:	000b      	movs	r3, r1
    173c:	0030      	movs	r0, r6
    173e:	0039      	movs	r1, r7
    1740:	47a0      	blx	r4
    1742:	4aa3      	ldr	r2, [pc, #652]	; (19d0 <computeKalmanGains+0x380>)
    1744:	0006      	movs	r6, r0
    1746:	000f      	movs	r7, r1
    1748:	9800      	ldr	r0, [sp, #0]
    174a:	9901      	ldr	r1, [sp, #4]
    174c:	4ba1      	ldr	r3, [pc, #644]	; (19d4 <computeKalmanGains+0x384>)
    174e:	47a8      	blx	r5
    1750:	0002      	movs	r2, r0
    1752:	000b      	movs	r3, r1
    1754:	0030      	movs	r0, r6
    1756:	0039      	movs	r1, r7
    1758:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    175a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    175c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    175e:	9016      	str	r0, [sp, #88]	; 0x58
    1760:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1762:	981a      	ldr	r0, [sp, #104]	; 0x68
    1764:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1766:	47a8      	blx	r5
    1768:	4a97      	ldr	r2, [pc, #604]	; (19c8 <computeKalmanGains+0x378>)
    176a:	0006      	movs	r6, r0
    176c:	000f      	movs	r7, r1
    176e:	980e      	ldr	r0, [sp, #56]	; 0x38
    1770:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1772:	4b96      	ldr	r3, [pc, #600]	; (19cc <computeKalmanGains+0x37c>)
    1774:	47a8      	blx	r5
    1776:	0002      	movs	r2, r0
    1778:	000b      	movs	r3, r1
    177a:	0030      	movs	r0, r6
    177c:	0039      	movs	r1, r7
    177e:	47a0      	blx	r4
    1780:	4a93      	ldr	r2, [pc, #588]	; (19d0 <computeKalmanGains+0x380>)
    1782:	0006      	movs	r6, r0
    1784:	000f      	movs	r7, r1
    1786:	9810      	ldr	r0, [sp, #64]	; 0x40
    1788:	9911      	ldr	r1, [sp, #68]	; 0x44
    178a:	4b92      	ldr	r3, [pc, #584]	; (19d4 <computeKalmanGains+0x384>)
    178c:	47a8      	blx	r5
    178e:	0002      	movs	r2, r0
    1790:	000b      	movs	r3, r1
    1792:	0030      	movs	r0, r6
    1794:	0039      	movs	r1, r7
    1796:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    179a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    179c:	9012      	str	r0, [sp, #72]	; 0x48
    179e:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    17a0:	981a      	ldr	r0, [sp, #104]	; 0x68
    17a2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    17a4:	47a8      	blx	r5
    17a6:	4a88      	ldr	r2, [pc, #544]	; (19c8 <computeKalmanGains+0x378>)
    17a8:	0006      	movs	r6, r0
    17aa:	000f      	movs	r7, r1
    17ac:	9804      	ldr	r0, [sp, #16]
    17ae:	9905      	ldr	r1, [sp, #20]
    17b0:	4b86      	ldr	r3, [pc, #536]	; (19cc <computeKalmanGains+0x37c>)
    17b2:	47a8      	blx	r5
    17b4:	0002      	movs	r2, r0
    17b6:	000b      	movs	r3, r1
    17b8:	0030      	movs	r0, r6
    17ba:	0039      	movs	r1, r7
    17bc:	47a0      	blx	r4
    17be:	4a84      	ldr	r2, [pc, #528]	; (19d0 <computeKalmanGains+0x380>)
    17c0:	0006      	movs	r6, r0
    17c2:	000f      	movs	r7, r1
    17c4:	9802      	ldr	r0, [sp, #8]
    17c6:	9903      	ldr	r1, [sp, #12]
    17c8:	4b82      	ldr	r3, [pc, #520]	; (19d4 <computeKalmanGains+0x384>)
    17ca:	47a8      	blx	r5
    17cc:	0002      	movs	r2, r0
    17ce:	000b      	movs	r3, r1
    17d0:	0030      	movs	r0, r6
    17d2:	0039      	movs	r1, r7
    17d4:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    17d6:	9a06      	ldr	r2, [sp, #24]
    17d8:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    17da:	9014      	str	r0, [sp, #80]	; 0x50
    17dc:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    17de:	981c      	ldr	r0, [sp, #112]	; 0x70
    17e0:	991d      	ldr	r1, [sp, #116]	; 0x74
    17e2:	47a8      	blx	r5
    17e4:	9a08      	ldr	r2, [sp, #32]
    17e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    17e8:	0006      	movs	r6, r0
    17ea:	000f      	movs	r7, r1
    17ec:	981e      	ldr	r0, [sp, #120]	; 0x78
    17ee:	991f      	ldr	r1, [sp, #124]	; 0x7c
    17f0:	47a8      	blx	r5
    17f2:	0002      	movs	r2, r0
    17f4:	000b      	movs	r3, r1
    17f6:	0030      	movs	r0, r6
    17f8:	0039      	movs	r1, r7
    17fa:	47a0      	blx	r4
    17fc:	4a72      	ldr	r2, [pc, #456]	; (19c8 <computeKalmanGains+0x378>)
    17fe:	0006      	movs	r6, r0
    1800:	000f      	movs	r7, r1
    1802:	9800      	ldr	r0, [sp, #0]
    1804:	9901      	ldr	r1, [sp, #4]
    1806:	4b71      	ldr	r3, [pc, #452]	; (19cc <computeKalmanGains+0x37c>)
    1808:	47a8      	blx	r5
    180a:	0002      	movs	r2, r0
    180c:	000b      	movs	r3, r1
    180e:	0030      	movs	r0, r6
    1810:	0039      	movs	r1, r7
    1812:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1818:	9018      	str	r0, [sp, #96]	; 0x60
    181a:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    181c:	981c      	ldr	r0, [sp, #112]	; 0x70
    181e:	991d      	ldr	r1, [sp, #116]	; 0x74
    1820:	47a8      	blx	r5
    1822:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1824:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1826:	0006      	movs	r6, r0
    1828:	000f      	movs	r7, r1
    182a:	981e      	ldr	r0, [sp, #120]	; 0x78
    182c:	991f      	ldr	r1, [sp, #124]	; 0x7c
    182e:	47a8      	blx	r5
    1830:	0002      	movs	r2, r0
    1832:	000b      	movs	r3, r1
    1834:	0030      	movs	r0, r6
    1836:	0039      	movs	r1, r7
    1838:	47a0      	blx	r4
    183a:	4a63      	ldr	r2, [pc, #396]	; (19c8 <computeKalmanGains+0x378>)
    183c:	0006      	movs	r6, r0
    183e:	000f      	movs	r7, r1
    1840:	9810      	ldr	r0, [sp, #64]	; 0x40
    1842:	9911      	ldr	r1, [sp, #68]	; 0x44
    1844:	4b61      	ldr	r3, [pc, #388]	; (19cc <computeKalmanGains+0x37c>)
    1846:	47a8      	blx	r5
    1848:	0002      	movs	r2, r0
    184a:	000b      	movs	r3, r1
    184c:	0030      	movs	r0, r6
    184e:	0039      	movs	r1, r7
    1850:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1852:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1854:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1856:	9026      	str	r0, [sp, #152]	; 0x98
    1858:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    185a:	981c      	ldr	r0, [sp, #112]	; 0x70
    185c:	991d      	ldr	r1, [sp, #116]	; 0x74
    185e:	47a8      	blx	r5
    1860:	9a04      	ldr	r2, [sp, #16]
    1862:	9b05      	ldr	r3, [sp, #20]
    1864:	0006      	movs	r6, r0
    1866:	000f      	movs	r7, r1
    1868:	981e      	ldr	r0, [sp, #120]	; 0x78
    186a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    186c:	47a8      	blx	r5
    186e:	0002      	movs	r2, r0
    1870:	000b      	movs	r3, r1
    1872:	0030      	movs	r0, r6
    1874:	0039      	movs	r1, r7
    1876:	47a0      	blx	r4
    1878:	4a53      	ldr	r2, [pc, #332]	; (19c8 <computeKalmanGains+0x378>)
    187a:	0006      	movs	r6, r0
    187c:	000f      	movs	r7, r1
    187e:	9802      	ldr	r0, [sp, #8]
    1880:	9903      	ldr	r1, [sp, #12]
    1882:	4b52      	ldr	r3, [pc, #328]	; (19cc <computeKalmanGains+0x37c>)
    1884:	47a8      	blx	r5
    1886:	0002      	movs	r2, r0
    1888:	000b      	movs	r3, r1
    188a:	0030      	movs	r0, r6
    188c:	0039      	movs	r1, r7
    188e:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1890:	9a06      	ldr	r2, [sp, #24]
    1892:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1894:	9028      	str	r0, [sp, #160]	; 0xa0
    1896:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1898:	9820      	ldr	r0, [sp, #128]	; 0x80
    189a:	9921      	ldr	r1, [sp, #132]	; 0x84
    189c:	47a8      	blx	r5
    189e:	9a08      	ldr	r2, [sp, #32]
    18a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    18a2:	0006      	movs	r6, r0
    18a4:	000f      	movs	r7, r1
    18a6:	9822      	ldr	r0, [sp, #136]	; 0x88
    18a8:	9923      	ldr	r1, [sp, #140]	; 0x8c
    18aa:	47a8      	blx	r5
    18ac:	0002      	movs	r2, r0
    18ae:	000b      	movs	r3, r1
    18b0:	0030      	movs	r0, r6
    18b2:	0039      	movs	r1, r7
    18b4:	47a0      	blx	r4
    18b6:	9a00      	ldr	r2, [sp, #0]
    18b8:	9b01      	ldr	r3, [sp, #4]
    18ba:	0006      	movs	r6, r0
    18bc:	000f      	movs	r7, r1
    18be:	9824      	ldr	r0, [sp, #144]	; 0x90
    18c0:	9925      	ldr	r1, [sp, #148]	; 0x94
    18c2:	47a8      	blx	r5
    18c4:	0002      	movs	r2, r0
    18c6:	000b      	movs	r3, r1
    18c8:	0030      	movs	r0, r6
    18ca:	0039      	movs	r1, r7
    18cc:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    18ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    18d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    18d2:	902e      	str	r0, [sp, #184]	; 0xb8
    18d4:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    18d6:	9820      	ldr	r0, [sp, #128]	; 0x80
    18d8:	9921      	ldr	r1, [sp, #132]	; 0x84
    18da:	47a8      	blx	r5
    18dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    18de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    18e0:	0006      	movs	r6, r0
    18e2:	000f      	movs	r7, r1
    18e4:	9822      	ldr	r0, [sp, #136]	; 0x88
    18e6:	9923      	ldr	r1, [sp, #140]	; 0x8c
    18e8:	47a8      	blx	r5
    18ea:	0002      	movs	r2, r0
    18ec:	000b      	movs	r3, r1
    18ee:	0030      	movs	r0, r6
    18f0:	0039      	movs	r1, r7
    18f2:	47a0      	blx	r4
    18f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    18f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    18f8:	0006      	movs	r6, r0
    18fa:	000f      	movs	r7, r1
    18fc:	9824      	ldr	r0, [sp, #144]	; 0x90
    18fe:	9925      	ldr	r1, [sp, #148]	; 0x94
    1900:	47a8      	blx	r5
    1902:	0002      	movs	r2, r0
    1904:	000b      	movs	r3, r1
    1906:	0030      	movs	r0, r6
    1908:	0039      	movs	r1, r7
    190a:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    190c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    190e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1910:	9006      	str	r0, [sp, #24]
    1912:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1914:	9820      	ldr	r0, [sp, #128]	; 0x80
    1916:	9921      	ldr	r1, [sp, #132]	; 0x84
    1918:	47a8      	blx	r5
    191a:	9a04      	ldr	r2, [sp, #16]
    191c:	9b05      	ldr	r3, [sp, #20]
    191e:	0006      	movs	r6, r0
    1920:	000f      	movs	r7, r1
    1922:	9822      	ldr	r0, [sp, #136]	; 0x88
    1924:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1926:	47a8      	blx	r5
    1928:	0002      	movs	r2, r0
    192a:	000b      	movs	r3, r1
    192c:	0030      	movs	r0, r6
    192e:	0039      	movs	r1, r7
    1930:	47a0      	blx	r4
    1932:	9a02      	ldr	r2, [sp, #8]
    1934:	9b03      	ldr	r3, [sp, #12]
    1936:	0006      	movs	r6, r0
    1938:	000f      	movs	r7, r1
    193a:	9824      	ldr	r0, [sp, #144]	; 0x90
    193c:	9925      	ldr	r1, [sp, #148]	; 0x94
    193e:	47a8      	blx	r5
    1940:	0002      	movs	r2, r0
    1942:	000b      	movs	r3, r1
    1944:	0030      	movs	r0, r6
    1946:	0039      	movs	r1, r7
    1948:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    194a:	4a1f      	ldr	r2, [pc, #124]	; (19c8 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    194c:	9002      	str	r0, [sp, #8]
    194e:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1950:	9812      	ldr	r0, [sp, #72]	; 0x48
    1952:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1954:	4b1d      	ldr	r3, [pc, #116]	; (19cc <computeKalmanGains+0x37c>)
    1956:	47a8      	blx	r5
    1958:	9a16      	ldr	r2, [sp, #88]	; 0x58
    195a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    195c:	47a0      	blx	r4
    195e:	4a1c      	ldr	r2, [pc, #112]	; (19d0 <computeKalmanGains+0x380>)
    1960:	0006      	movs	r6, r0
    1962:	000f      	movs	r7, r1
    1964:	9814      	ldr	r0, [sp, #80]	; 0x50
    1966:	9915      	ldr	r1, [sp, #84]	; 0x54
    1968:	4b1a      	ldr	r3, [pc, #104]	; (19d4 <computeKalmanGains+0x384>)
    196a:	47a8      	blx	r5
    196c:	0002      	movs	r2, r0
    196e:	000b      	movs	r3, r1
    1970:	0030      	movs	r0, r6
    1972:	0039      	movs	r1, r7
    1974:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1976:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1978:	9008      	str	r0, [sp, #32]
    197a:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    197c:	9816      	ldr	r0, [sp, #88]	; 0x58
    197e:	9917      	ldr	r1, [sp, #92]	; 0x5c
    1980:	2300      	movs	r3, #0
    1982:	47a8      	blx	r5
    1984:	0006      	movs	r6, r0
    1986:	000f      	movs	r7, r1
    1988:	0002      	movs	r2, r0
    198a:	000b      	movs	r3, r1
    198c:	9812      	ldr	r0, [sp, #72]	; 0x48
    198e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1990:	47a0      	blx	r4
    1992:	4a0d      	ldr	r2, [pc, #52]	; (19c8 <computeKalmanGains+0x378>)
    1994:	9000      	str	r0, [sp, #0]
    1996:	9101      	str	r1, [sp, #4]
    1998:	9814      	ldr	r0, [sp, #80]	; 0x50
    199a:	9915      	ldr	r1, [sp, #84]	; 0x54
    199c:	4b0b      	ldr	r3, [pc, #44]	; (19cc <computeKalmanGains+0x37c>)
    199e:	47a8      	blx	r5
    19a0:	0002      	movs	r2, r0
    19a2:	000b      	movs	r3, r1
    19a4:	9800      	ldr	r0, [sp, #0]
    19a6:	9901      	ldr	r1, [sp, #4]
    19a8:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    19aa:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    19ac:	9030      	str	r0, [sp, #192]	; 0xc0
    19ae:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    19b0:	9812      	ldr	r0, [sp, #72]	; 0x48
    19b2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    19b4:	2300      	movs	r3, #0
    19b6:	47a8      	blx	r5
    19b8:	0032      	movs	r2, r6
    19ba:	003b      	movs	r3, r7
    19bc:	47a0      	blx	r4
    19be:	9a14      	ldr	r2, [sp, #80]	; 0x50
    19c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    19c2:	e017      	b.n	19f4 <computeKalmanGains+0x3a4>
    19c4:	20000010 	.word	0x20000010
    19c8:	47ae147b 	.word	0x47ae147b
    19cc:	3f747ae1 	.word	0x3f747ae1
    19d0:	eb1c432d 	.word	0xeb1c432d
    19d4:	3eea36e2 	.word	0x3eea36e2
    19d8:	20000650 	.word	0x20000650
    19dc:	d2f1a9fc 	.word	0xd2f1a9fc
    19e0:	3f50624d 	.word	0x3f50624d
    19e4:	3ff00000 	.word	0x3ff00000
    19e8:	40220000 	.word	0x40220000
    19ec:	0000523d 	.word	0x0000523d
    19f0:	0000439d 	.word	0x0000439d
    19f4:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    19f6:	4ad9      	ldr	r2, [pc, #868]	; (1d5c <computeKalmanGains+0x70c>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    19f8:	9112      	str	r1, [sp, #72]	; 0x48
    19fa:	9004      	str	r0, [sp, #16]
    19fc:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    19fe:	4bd8      	ldr	r3, [pc, #864]	; (1d60 <computeKalmanGains+0x710>)
    1a00:	9826      	ldr	r0, [sp, #152]	; 0x98
    1a02:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1a04:	47a8      	blx	r5
    1a06:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1a08:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1a0a:	47a0      	blx	r4
    1a0c:	4ad5      	ldr	r2, [pc, #852]	; (1d64 <computeKalmanGains+0x714>)
    1a0e:	0006      	movs	r6, r0
    1a10:	000f      	movs	r7, r1
    1a12:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1a14:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1a16:	4bd4      	ldr	r3, [pc, #848]	; (1d68 <computeKalmanGains+0x718>)
    1a18:	47a8      	blx	r5
    1a1a:	0002      	movs	r2, r0
    1a1c:	000b      	movs	r3, r1
    1a1e:	0030      	movs	r0, r6
    1a20:	0039      	movs	r1, r7
    1a22:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1a24:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1a26:	902a      	str	r0, [sp, #168]	; 0xa8
    1a28:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1a2a:	9818      	ldr	r0, [sp, #96]	; 0x60
    1a2c:	9919      	ldr	r1, [sp, #100]	; 0x64
    1a2e:	2300      	movs	r3, #0
    1a30:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1a32:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1a34:	9032      	str	r0, [sp, #200]	; 0xc8
    1a36:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1a38:	9826      	ldr	r0, [sp, #152]	; 0x98
    1a3a:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1a3c:	2300      	movs	r3, #0
    1a3e:	47a8      	blx	r5
    1a40:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1a42:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1a44:	47a0      	blx	r4
    1a46:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1a48:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1a4a:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1a4c:	4ac3      	ldr	r2, [pc, #780]	; (1d5c <computeKalmanGains+0x70c>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1a4e:	902c      	str	r0, [sp, #176]	; 0xb0
    1a50:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1a52:	9806      	ldr	r0, [sp, #24]
    1a54:	9907      	ldr	r1, [sp, #28]
    1a56:	4bc2      	ldr	r3, [pc, #776]	; (1d60 <computeKalmanGains+0x710>)
    1a58:	47a8      	blx	r5
    1a5a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    1a5c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1a5e:	47a0      	blx	r4
    1a60:	4ac0      	ldr	r2, [pc, #768]	; (1d64 <computeKalmanGains+0x714>)
    1a62:	0006      	movs	r6, r0
    1a64:	000f      	movs	r7, r1
    1a66:	9802      	ldr	r0, [sp, #8]
    1a68:	9903      	ldr	r1, [sp, #12]
    1a6a:	4bbf      	ldr	r3, [pc, #764]	; (1d68 <computeKalmanGains+0x718>)
    1a6c:	47a8      	blx	r5
    1a6e:	0002      	movs	r2, r0
    1a70:	000b      	movs	r3, r1
    1a72:	0030      	movs	r0, r6
    1a74:	0039      	movs	r1, r7
    1a76:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1a78:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1a7a:	9000      	str	r0, [sp, #0]
    1a7c:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1a7e:	982e      	ldr	r0, [sp, #184]	; 0xb8
    1a80:	992f      	ldr	r1, [sp, #188]	; 0xbc
    1a82:	2300      	movs	r3, #0
    1a84:	47a8      	blx	r5
    1a86:	0006      	movs	r6, r0
    1a88:	000f      	movs	r7, r1
    1a8a:	0002      	movs	r2, r0
    1a8c:	000b      	movs	r3, r1
    1a8e:	9806      	ldr	r0, [sp, #24]
    1a90:	9907      	ldr	r1, [sp, #28]
    1a92:	47a0      	blx	r4
    1a94:	4ab1      	ldr	r2, [pc, #708]	; (1d5c <computeKalmanGains+0x70c>)
    1a96:	900a      	str	r0, [sp, #40]	; 0x28
    1a98:	910b      	str	r1, [sp, #44]	; 0x2c
    1a9a:	9802      	ldr	r0, [sp, #8]
    1a9c:	9903      	ldr	r1, [sp, #12]
    1a9e:	4bb0      	ldr	r3, [pc, #704]	; (1d60 <computeKalmanGains+0x710>)
    1aa0:	47a8      	blx	r5
    1aa2:	0002      	movs	r2, r0
    1aa4:	000b      	movs	r3, r1
    1aa6:	980a      	ldr	r0, [sp, #40]	; 0x28
    1aa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1aaa:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1aac:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1aae:	9010      	str	r0, [sp, #64]	; 0x40
    1ab0:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1ab2:	9806      	ldr	r0, [sp, #24]
    1ab4:	9907      	ldr	r1, [sp, #28]
    1ab6:	2300      	movs	r3, #0
    1ab8:	47a8      	blx	r5
    1aba:	0032      	movs	r2, r6
    1abc:	003b      	movs	r3, r7
    1abe:	47a0      	blx	r4
    1ac0:	9a02      	ldr	r2, [sp, #8]
    1ac2:	9b03      	ldr	r3, [sp, #12]
    1ac4:	47a0      	blx	r4
    1ac6:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    1ac8:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    1aca:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1acc:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    1ace:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1ad0:	9002      	str	r0, [sp, #8]
    1ad2:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1ad4:	9808      	ldr	r0, [sp, #32]
    1ad6:	9909      	ldr	r1, [sp, #36]	; 0x24
    1ad8:	47a0      	blx	r4
    1ada:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    1adc:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1ade:	900a      	str	r0, [sp, #40]	; 0x28
    1ae0:	910b      	str	r1, [sp, #44]	; 0x2c
    1ae2:	9802      	ldr	r0, [sp, #8]
    1ae4:	9903      	ldr	r1, [sp, #12]
    1ae6:	47a0      	blx	r4
    1ae8:	9a00      	ldr	r2, [sp, #0]
    1aea:	9b01      	ldr	r3, [sp, #4]
    1aec:	900c      	str	r0, [sp, #48]	; 0x30
    1aee:	910d      	str	r1, [sp, #52]	; 0x34
    1af0:	9804      	ldr	r0, [sp, #16]
    1af2:	9916      	ldr	r1, [sp, #88]	; 0x58
    1af4:	47a8      	blx	r5
    1af6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1af8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1afa:	900e      	str	r0, [sp, #56]	; 0x38
    1afc:	910f      	str	r1, [sp, #60]	; 0x3c
    1afe:	980a      	ldr	r0, [sp, #40]	; 0x28
    1b00:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1b02:	47a8      	blx	r5
    1b04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1b06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b08:	4e98      	ldr	r6, [pc, #608]	; (1d6c <computeKalmanGains+0x71c>)
    1b0a:	47b0      	blx	r6

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1b0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1b10:	9006      	str	r0, [sp, #24]
    1b12:	9107      	str	r1, [sp, #28]

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1b14:	9808      	ldr	r0, [sp, #32]
    1b16:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b18:	47a8      	blx	r5
    1b1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1b1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b1e:	47b0      	blx	r6
    1b20:	9a06      	ldr	r2, [sp, #24]
    1b22:	9b07      	ldr	r3, [sp, #28]
    1b24:	4e92      	ldr	r6, [pc, #584]	; (1d70 <computeKalmanGains+0x720>)
    1b26:	47b0      	blx	r6
    1b28:	9034      	str	r0, [sp, #208]	; 0xd0
    1b2a:	9135      	str	r1, [sp, #212]	; 0xd4
    1b2c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1b2e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1b30:	4990      	ldr	r1, [pc, #576]	; (1d74 <computeKalmanGains+0x724>)
    1b32:	600a      	str	r2, [r1, #0]
    1b34:	604b      	str	r3, [r1, #4]
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1b36:	9808      	ldr	r0, [sp, #32]
    1b38:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b3a:	2280      	movs	r2, #128	; 0x80
    1b3c:	0612      	lsls	r2, r2, #24
    1b3e:	4694      	mov	ip, r2
    1b40:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1b42:	9a04      	ldr	r2, [sp, #16]
    1b44:	4463      	add	r3, ip
    1b46:	932e      	str	r3, [sp, #184]	; 0xb8
    1b48:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1b4a:	47a8      	blx	r5
    1b4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1b50:	0006      	movs	r6, r0
    1b52:	000f      	movs	r7, r1
    1b54:	9804      	ldr	r0, [sp, #16]
    1b56:	9916      	ldr	r1, [sp, #88]	; 0x58
    1b58:	47a8      	blx	r5
    1b5a:	0002      	movs	r2, r0
    1b5c:	000b      	movs	r3, r1
    1b5e:	0030      	movs	r0, r6
    1b60:	0039      	movs	r1, r7
    1b62:	47a0      	blx	r4
    1b64:	9a06      	ldr	r2, [sp, #24]
    1b66:	9b07      	ldr	r3, [sp, #28]
    1b68:	4e81      	ldr	r6, [pc, #516]	; (1d70 <computeKalmanGains+0x720>)
    1b6a:	47b0      	blx	r6
    1b6c:	900e      	str	r0, [sp, #56]	; 0x38
    1b6e:	910f      	str	r1, [sp, #60]	; 0x3c
    1b70:	4980      	ldr	r1, [pc, #512]	; (1d74 <computeKalmanGains+0x724>)
    1b72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1b74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b76:	608a      	str	r2, [r1, #8]
    1b78:	60cb      	str	r3, [r1, #12]
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1b7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b7e:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1b80:	992b      	ldr	r1, [sp, #172]	; 0xac
    1b82:	47a8      	blx	r5
    1b84:	9a00      	ldr	r2, [sp, #0]
    1b86:	9b01      	ldr	r3, [sp, #4]
    1b88:	0006      	movs	r6, r0
    1b8a:	000f      	movs	r7, r1
    1b8c:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1b8e:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1b90:	47a8      	blx	r5
    1b92:	0002      	movs	r2, r0
    1b94:	000b      	movs	r3, r1
    1b96:	0030      	movs	r0, r6
    1b98:	0039      	movs	r1, r7
    1b9a:	4e74      	ldr	r6, [pc, #464]	; (1d6c <computeKalmanGains+0x71c>)
    1b9c:	47b0      	blx	r6
    1b9e:	9a06      	ldr	r2, [sp, #24]
    1ba0:	9b07      	ldr	r3, [sp, #28]
    1ba2:	4e73      	ldr	r6, [pc, #460]	; (1d70 <computeKalmanGains+0x720>)
    1ba4:	47b0      	blx	r6
    1ba6:	0002      	movs	r2, r0
    1ba8:	000b      	movs	r3, r1
    1baa:	9139      	str	r1, [sp, #228]	; 0xe4
    1bac:	4971      	ldr	r1, [pc, #452]	; (1d74 <computeKalmanGains+0x724>)
    1bae:	9018      	str	r0, [sp, #96]	; 0x60
    1bb0:	610a      	str	r2, [r1, #16]
    1bb2:	614b      	str	r3, [r1, #20]
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1bb4:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1bb6:	992b      	ldr	r1, [sp, #172]	; 0xac
    1bb8:	9a04      	ldr	r2, [sp, #16]
    1bba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1bbc:	47a8      	blx	r5
    1bbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1bc2:	0006      	movs	r6, r0
    1bc4:	000f      	movs	r7, r1
    1bc6:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1bc8:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1bca:	47a8      	blx	r5
    1bcc:	0002      	movs	r2, r0
    1bce:	000b      	movs	r3, r1
    1bd0:	0030      	movs	r0, r6
    1bd2:	0039      	movs	r1, r7
    1bd4:	47a0      	blx	r4
    1bd6:	9a06      	ldr	r2, [sp, #24]
    1bd8:	9b07      	ldr	r3, [sp, #28]
    1bda:	4e65      	ldr	r6, [pc, #404]	; (1d70 <computeKalmanGains+0x720>)
    1bdc:	47b0      	blx	r6
    1bde:	9012      	str	r0, [sp, #72]	; 0x48
    1be0:	9113      	str	r1, [sp, #76]	; 0x4c
    1be2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1be4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1be6:	4963      	ldr	r1, [pc, #396]	; (1d74 <computeKalmanGains+0x724>)
    1be8:	618a      	str	r2, [r1, #24]
    1bea:	61cb      	str	r3, [r1, #28]
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1bec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1bee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1bf0:	9800      	ldr	r0, [sp, #0]
    1bf2:	9901      	ldr	r1, [sp, #4]
    1bf4:	47a8      	blx	r5
    1bf6:	9a02      	ldr	r2, [sp, #8]
    1bf8:	9b03      	ldr	r3, [sp, #12]
    1bfa:	0006      	movs	r6, r0
    1bfc:	000f      	movs	r7, r1
    1bfe:	9800      	ldr	r0, [sp, #0]
    1c00:	9901      	ldr	r1, [sp, #4]
    1c02:	47a8      	blx	r5
    1c04:	0002      	movs	r2, r0
    1c06:	000b      	movs	r3, r1
    1c08:	0030      	movs	r0, r6
    1c0a:	0039      	movs	r1, r7
    1c0c:	4e57      	ldr	r6, [pc, #348]	; (1d6c <computeKalmanGains+0x71c>)
    1c0e:	47b0      	blx	r6
    1c10:	9a06      	ldr	r2, [sp, #24]
    1c12:	9b07      	ldr	r3, [sp, #28]
    1c14:	4e56      	ldr	r6, [pc, #344]	; (1d70 <computeKalmanGains+0x720>)
    1c16:	47b0      	blx	r6
    1c18:	9014      	str	r0, [sp, #80]	; 0x50
    1c1a:	9115      	str	r1, [sp, #84]	; 0x54
    1c1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1c1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1c20:	4954      	ldr	r1, [pc, #336]	; (1d74 <computeKalmanGains+0x724>)
    1c22:	620a      	str	r2, [r1, #32]
    1c24:	624b      	str	r3, [r1, #36]	; 0x24
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1c26:	9800      	ldr	r0, [sp, #0]
    1c28:	9901      	ldr	r1, [sp, #4]
    1c2a:	9a04      	ldr	r2, [sp, #16]
    1c2c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1c2e:	47a8      	blx	r5
    1c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1c34:	0006      	movs	r6, r0
    1c36:	000f      	movs	r7, r1
    1c38:	9802      	ldr	r0, [sp, #8]
    1c3a:	9903      	ldr	r1, [sp, #12]
    1c3c:	47a8      	blx	r5
    1c3e:	0002      	movs	r2, r0
    1c40:	000b      	movs	r3, r1
    1c42:	0030      	movs	r0, r6
    1c44:	0039      	movs	r1, r7
    1c46:	47a0      	blx	r4
    1c48:	9a06      	ldr	r2, [sp, #24]
    1c4a:	9b07      	ldr	r3, [sp, #28]
    1c4c:	4e48      	ldr	r6, [pc, #288]	; (1d70 <computeKalmanGains+0x720>)
    1c4e:	47b0      	blx	r6
    1c50:	9036      	str	r0, [sp, #216]	; 0xd8
    1c52:	9137      	str	r1, [sp, #220]	; 0xdc
    1c54:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1c56:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    1c58:	4946      	ldr	r1, [pc, #280]	; (1d74 <computeKalmanGains+0x724>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1c5a:	4e44      	ldr	r6, [pc, #272]	; (1d6c <computeKalmanGains+0x71c>)
        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1c5c:	628a      	str	r2, [r1, #40]	; 0x28
    1c5e:	62cb      	str	r3, [r1, #44]	; 0x2c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1c60:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1c62:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1c64:	2000      	movs	r0, #0
    1c66:	4944      	ldr	r1, [pc, #272]	; (1d78 <computeKalmanGains+0x728>)
    1c68:	47b0      	blx	r6
    1c6a:	0002      	movs	r2, r0
    1c6c:	000b      	movs	r3, r1
    1c6e:	900c      	str	r0, [sp, #48]	; 0x30
    1c70:	910d      	str	r1, [sp, #52]	; 0x34
    1c72:	9808      	ldr	r0, [sp, #32]
    1c74:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c76:	47a8      	blx	r5
    1c78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1c7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1c7c:	0006      	movs	r6, r0
    1c7e:	000f      	movs	r7, r1
    1c80:	9800      	ldr	r0, [sp, #0]
    1c82:	9901      	ldr	r1, [sp, #4]
    1c84:	47a8      	blx	r5
    1c86:	0002      	movs	r2, r0
    1c88:	000b      	movs	r3, r1
    1c8a:	0030      	movs	r0, r6
    1c8c:	0039      	movs	r1, r7
    1c8e:	4e37      	ldr	r6, [pc, #220]	; (1d6c <computeKalmanGains+0x71c>)
    1c90:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1c92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1c94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1c96:	9006      	str	r0, [sp, #24]
    1c98:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1c9a:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1c9c:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1c9e:	47a8      	blx	r5
    1ca0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1ca2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1ca4:	0006      	movs	r6, r0
    1ca6:	000f      	movs	r7, r1
    1ca8:	9810      	ldr	r0, [sp, #64]	; 0x40
    1caa:	9911      	ldr	r1, [sp, #68]	; 0x44
    1cac:	47a8      	blx	r5
    1cae:	0002      	movs	r2, r0
    1cb0:	000b      	movs	r3, r1
    1cb2:	0030      	movs	r0, r6
    1cb4:	0039      	movs	r1, r7
    1cb6:	4e2d      	ldr	r6, [pc, #180]	; (1d6c <computeKalmanGains+0x71c>)
    1cb8:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1cba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1cbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1cbe:	900a      	str	r0, [sp, #40]	; 0x28
    1cc0:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1cc2:	9804      	ldr	r0, [sp, #16]
    1cc4:	9916      	ldr	r1, [sp, #88]	; 0x58
    1cc6:	47a8      	blx	r5
    1cc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1cca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1ccc:	0006      	movs	r6, r0
    1cce:	000f      	movs	r7, r1
    1cd0:	9802      	ldr	r0, [sp, #8]
    1cd2:	9903      	ldr	r1, [sp, #12]
    1cd4:	47a8      	blx	r5
    1cd6:	0002      	movs	r2, r0
    1cd8:	000b      	movs	r3, r1
    1cda:	0030      	movs	r0, r6
    1cdc:	0039      	movs	r1, r7
    1cde:	4e23      	ldr	r6, [pc, #140]	; (1d6c <computeKalmanGains+0x71c>)
    1ce0:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1ce2:	2280      	movs	r2, #128	; 0x80
    1ce4:	0612      	lsls	r2, r2, #24
    1ce6:	4694      	mov	ip, r2
    1ce8:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1cea:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1cec:	4463      	add	r3, ip
    1cee:	932e      	str	r3, [sp, #184]	; 0xb8
    1cf0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1cf2:	900c      	str	r0, [sp, #48]	; 0x30
    1cf4:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1cf6:	9808      	ldr	r0, [sp, #32]
    1cf8:	9909      	ldr	r1, [sp, #36]	; 0x24
    1cfa:	47a8      	blx	r5
    1cfc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1cfe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1d00:	47a0      	blx	r4
    1d02:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1d04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1d06:	0006      	movs	r6, r0
    1d08:	000f      	movs	r7, r1
    1d0a:	9800      	ldr	r0, [sp, #0]
    1d0c:	9901      	ldr	r1, [sp, #4]
    1d0e:	47a8      	blx	r5
    1d10:	0002      	movs	r2, r0
    1d12:	000b      	movs	r3, r1
    1d14:	0030      	movs	r0, r6
    1d16:	0039      	movs	r1, r7
    1d18:	4e14      	ldr	r6, [pc, #80]	; (1d6c <computeKalmanGains+0x71c>)
    1d1a:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1d1c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1d1e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1d20:	9008      	str	r0, [sp, #32]
    1d22:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1d24:	9826      	ldr	r0, [sp, #152]	; 0x98
    1d26:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1d28:	47a0      	blx	r4
    1d2a:	4a0c      	ldr	r2, [pc, #48]	; (1d5c <computeKalmanGains+0x70c>)
    1d2c:	0006      	movs	r6, r0
    1d2e:	000f      	movs	r7, r1
    1d30:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1d32:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1d34:	4b0a      	ldr	r3, [pc, #40]	; (1d60 <computeKalmanGains+0x710>)
    1d36:	47a8      	blx	r5
    1d38:	0002      	movs	r2, r0
    1d3a:	000b      	movs	r3, r1
    1d3c:	0030      	movs	r0, r6
    1d3e:	0039      	movs	r1, r7
    1d40:	47a0      	blx	r4
    1d42:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1d44:	0006      	movs	r6, r0
    1d46:	000f      	movs	r7, r1
    1d48:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1d4a:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1d4c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1d4e:	47a8      	blx	r5
    1d50:	0002      	movs	r2, r0
    1d52:	000b      	movs	r3, r1
    1d54:	0030      	movs	r0, r6
    1d56:	0039      	movs	r1, r7
    1d58:	47a0      	blx	r4
    1d5a:	e00f      	b.n	1d7c <computeKalmanGains+0x72c>
    1d5c:	47ae147b 	.word	0x47ae147b
    1d60:	3f747ae1 	.word	0x3f747ae1
    1d64:	eb1c432d 	.word	0xeb1c432d
    1d68:	3eea36e2 	.word	0x3eea36e2
    1d6c:	00005731 	.word	0x00005731
    1d70:	000049f5 	.word	0x000049f5
    1d74:	20000650 	.word	0x20000650
    1d78:	3ff00000 	.word	0x3ff00000
    1d7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1d7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1d80:	0006      	movs	r6, r0
    1d82:	000f      	movs	r7, r1
    1d84:	9810      	ldr	r0, [sp, #64]	; 0x40
    1d86:	9911      	ldr	r1, [sp, #68]	; 0x44
    1d88:	47a8      	blx	r5
    1d8a:	0002      	movs	r2, r0
    1d8c:	000b      	movs	r3, r1
    1d8e:	0030      	movs	r0, r6
    1d90:	0039      	movs	r1, r7
    1d92:	4e50      	ldr	r6, [pc, #320]	; (1ed4 <computeKalmanGains+0x884>)
    1d94:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1d96:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1d98:	900e      	str	r0, [sp, #56]	; 0x38
    1d9a:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1d9c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1d9e:	9804      	ldr	r0, [sp, #16]
    1da0:	9916      	ldr	r1, [sp, #88]	; 0x58
    1da2:	47a8      	blx	r5
    1da4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1da6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1da8:	47a0      	blx	r4
    1daa:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1dac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1dae:	0006      	movs	r6, r0
    1db0:	000f      	movs	r7, r1
    1db2:	9802      	ldr	r0, [sp, #8]
    1db4:	9903      	ldr	r1, [sp, #12]
    1db6:	47a8      	blx	r5
    1db8:	4c46      	ldr	r4, [pc, #280]	; (1ed4 <computeKalmanGains+0x884>)
    1dba:	0002      	movs	r2, r0
    1dbc:	000b      	movs	r3, r1
    1dbe:	0030      	movs	r0, r6
    1dc0:	0039      	movs	r1, r7
    1dc2:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1dc4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1dc6:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1dc8:	9004      	str	r0, [sp, #16]
    1dca:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1dcc:	2000      	movs	r0, #0
    1dce:	4942      	ldr	r1, [pc, #264]	; (1ed8 <computeKalmanGains+0x888>)
    1dd0:	47a0      	blx	r4
    1dd2:	0002      	movs	r2, r0
    1dd4:	000b      	movs	r3, r1
    1dd6:	9012      	str	r0, [sp, #72]	; 0x48
    1dd8:	9113      	str	r1, [sp, #76]	; 0x4c
    1dda:	9800      	ldr	r0, [sp, #0]
    1ddc:	9901      	ldr	r1, [sp, #4]
    1dde:	47a8      	blx	r5
    1de0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1de2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1de4:	0006      	movs	r6, r0
    1de6:	000f      	movs	r7, r1
    1de8:	9800      	ldr	r0, [sp, #0]
    1dea:	9901      	ldr	r1, [sp, #4]
    1dec:	47a8      	blx	r5
    1dee:	0002      	movs	r2, r0
    1df0:	000b      	movs	r3, r1
    1df2:	0030      	movs	r0, r6
    1df4:	0039      	movs	r1, r7
    1df6:	47a0      	blx	r4
    1df8:	9000      	str	r0, [sp, #0]
    1dfa:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1dfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1dfe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1e00:	9810      	ldr	r0, [sp, #64]	; 0x40
    1e02:	9911      	ldr	r1, [sp, #68]	; 0x44
    1e04:	47a8      	blx	r5
    1e06:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1e08:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1e0a:	0006      	movs	r6, r0
    1e0c:	000f      	movs	r7, r1
    1e0e:	9810      	ldr	r0, [sp, #64]	; 0x40
    1e10:	9911      	ldr	r1, [sp, #68]	; 0x44
    1e12:	47a8      	blx	r5
    1e14:	0002      	movs	r2, r0
    1e16:	000b      	movs	r3, r1
    1e18:	0030      	movs	r0, r6
    1e1a:	0039      	movs	r1, r7
    1e1c:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1e1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1e22:	9010      	str	r0, [sp, #64]	; 0x40
    1e24:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1e26:	9802      	ldr	r0, [sp, #8]
    1e28:	9903      	ldr	r1, [sp, #12]
    1e2a:	47a8      	blx	r5
    1e2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1e2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1e30:	0006      	movs	r6, r0
    1e32:	000f      	movs	r7, r1
    1e34:	9802      	ldr	r0, [sp, #8]
    1e36:	9903      	ldr	r1, [sp, #12]
    1e38:	47a8      	blx	r5
    1e3a:	000b      	movs	r3, r1
    1e3c:	0002      	movs	r2, r0
    1e3e:	0039      	movs	r1, r7
    1e40:	0030      	movs	r0, r6
    1e42:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1e44:	2400      	movs	r4, #0
    1e46:	9b38      	ldr	r3, [sp, #224]	; 0xe0
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1e48:	9002      	str	r0, [sp, #8]
    1e4a:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1e4c:	3301      	adds	r3, #1
    1e4e:	9338      	str	r3, [sp, #224]	; 0xe0
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1e50:	4b22      	ldr	r3, [pc, #136]	; (1edc <computeKalmanGains+0x88c>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1e52:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1e54:	9326      	str	r3, [sp, #152]	; 0x98
    1e56:	4b1f      	ldr	r3, [pc, #124]	; (1ed4 <computeKalmanGains+0x884>)
    1e58:	9328      	str	r3, [sp, #160]	; 0xa0
    1e5a:	ab40      	add	r3, sp, #256	; 0x100
    1e5c:	18e5      	adds	r5, r4, r3

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1e5e:	2300      	movs	r3, #0
    1e60:	9516      	str	r5, [sp, #88]	; 0x58
    1e62:	9312      	str	r3, [sp, #72]	; 0x48
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1e64:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1e66:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1e68:	18e3      	adds	r3, r4, r3
    1e6a:	189b      	adds	r3, r3, r2
    1e6c:	681a      	ldr	r2, [r3, #0]
    1e6e:	685b      	ldr	r3, [r3, #4]
    1e70:	9218      	str	r2, [sp, #96]	; 0x60
    1e72:	9319      	str	r3, [sp, #100]	; 0x64
    1e74:	9818      	ldr	r0, [sp, #96]	; 0x60
    1e76:	9919      	ldr	r1, [sp, #100]	; 0x64
    1e78:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1e7a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1e7c:	681e      	ldr	r6, [r3, #0]
    1e7e:	685f      	ldr	r7, [r3, #4]
    1e80:	0032      	movs	r2, r6
    1e82:	003b      	movs	r3, r7
    1e84:	47a8      	blx	r5
    1e86:	0032      	movs	r2, r6
    1e88:	003b      	movs	r3, r7
    1e8a:	4d15      	ldr	r5, [pc, #84]	; (1ee0 <computeKalmanGains+0x890>)
    1e8c:	47a8      	blx	r5
    1e8e:	4b15      	ldr	r3, [pc, #84]	; (1ee4 <computeKalmanGains+0x894>)
    1e90:	4a15      	ldr	r2, [pc, #84]	; (1ee8 <computeKalmanGains+0x898>)
    1e92:	4e16      	ldr	r6, [pc, #88]	; (1eec <computeKalmanGains+0x89c>)
    1e94:	47b0      	blx	r6
                    notdone++;
    1e96:	1e43      	subs	r3, r0, #1
    1e98:	4198      	sbcs	r0, r3
    1e9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1e9c:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1e9e:	181b      	adds	r3, r3, r0
    1ea0:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1ea2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1ea4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1ea6:	c10c      	stmia	r1!, {r2, r3}
    1ea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1eaa:	9116      	str	r1, [sp, #88]	; 0x58
    1eac:	3308      	adds	r3, #8
    1eae:	9312      	str	r3, [sp, #72]	; 0x48
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1eb0:	2b10      	cmp	r3, #16
    1eb2:	d1d7      	bne.n	1e64 <computeKalmanGains+0x814>
    1eb4:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1eb6:	2c30      	cmp	r4, #48	; 0x30
    1eb8:	d1cf      	bne.n	1e5a <computeKalmanGains+0x80a>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1eba:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1ebc:	2b00      	cmp	r3, #0
    1ebe:	d001      	beq.n	1ec4 <computeKalmanGains+0x874>
    1ec0:	f7ff fc2c 	bl	171c <computeKalmanGains+0xcc>
    1ec4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    1ec6:	2b63      	cmp	r3, #99	; 0x63
    1ec8:	dc01      	bgt.n	1ece <computeKalmanGains+0x87e>
    1eca:	f7ff fc27 	bl	171c <computeKalmanGains+0xcc>
            continue;
        else
            break;
    }
}
    1ece:	b04d      	add	sp, #308	; 0x134
    1ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	00005731 	.word	0x00005731
    1ed8:	3ff00000 	.word	0x3ff00000
    1edc:	20000650 	.word	0x20000650
    1ee0:	000049f5 	.word	0x000049f5
    1ee4:	3ee4f8b5 	.word	0x3ee4f8b5
    1ee8:	88e368f1 	.word	0x88e368f1
    1eec:	00004075 	.word	0x00004075

00001ef0 <computeKalmanStates>:

void computeKalmanStates() {
    1ef0:	b5f0      	push	{r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation, acceleration;

    if (altimeter.pointingUp) {
    1ef2:	4b85      	ldr	r3, [pc, #532]	; (2108 <STACK_SIZE+0x108>)
        else
            break;
    }
}

void computeKalmanStates() {
    1ef4:	b08f      	sub	sp, #60	; 0x3c

    double alt_inovation, accel_inovation, acceleration;

    if (altimeter.pointingUp) {
    1ef6:	795a      	ldrb	r2, [r3, #5]
    1ef8:	4c84      	ldr	r4, [pc, #528]	; (210c <STACK_SIZE+0x10c>)
    1efa:	4b85      	ldr	r3, [pc, #532]	; (2110 <STACK_SIZE+0x110>)
    1efc:	4e85      	ldr	r6, [pc, #532]	; (2114 <STACK_SIZE+0x114>)
    1efe:	4d86      	ldr	r5, [pc, #536]	; (2118 <STACK_SIZE+0x118>)
    1f00:	2a00      	cmp	r2, #0
    1f02:	d001      	beq.n	1f08 <computeKalmanStates+0x18>
        acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1f04:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1f06:	e003      	b.n	1f10 <computeKalmanStates+0x20>
    } else {
        acceleration = (-sample.accelZ - offsets.gravityOffset) * 32.17417;
    1f08:	2180      	movs	r1, #128	; 0x80
    1f0a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    1f0c:	0609      	lsls	r1, r1, #24
    1f0e:	1850      	adds	r0, r2, r1
    1f10:	4798      	blx	r3
    1f12:	68b2      	ldr	r2, [r6, #8]
    1f14:	68f3      	ldr	r3, [r6, #12]
    1f16:	47a8      	blx	r5
    1f18:	4a80      	ldr	r2, [pc, #512]	; (211c <STACK_SIZE+0x11c>)
    1f1a:	4b81      	ldr	r3, [pc, #516]	; (2120 <STACK_SIZE+0x120>)
    1f1c:	4d81      	ldr	r5, [pc, #516]	; (2124 <STACK_SIZE+0x124>)
    1f1e:	47a8      	blx	r5
    }

    double pressure = sample.pressureAltitude;
    1f20:	6da3      	ldr	r3, [r4, #88]	; 0x58
    1f22:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    1f24:	9300      	str	r3, [sp, #0]
    1f26:	9401      	str	r4, [sp, #4]

    if (altitude == 0) {
    1f28:	4c7f      	ldr	r4, [pc, #508]	; (2128 <STACK_SIZE+0x128>)
    double alt_inovation, accel_inovation, acceleration;

    if (altimeter.pointingUp) {
        acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    } else {
        acceleration = (-sample.accelZ - offsets.gravityOffset) * 32.17417;
    1f2a:	0006      	movs	r6, r0
    1f2c:	000f      	movs	r7, r1
    }

    double pressure = sample.pressureAltitude;

    if (altitude == 0) {
    1f2e:	6820      	ldr	r0, [r4, #0]
    1f30:	6861      	ldr	r1, [r4, #4]
    1f32:	2200      	movs	r2, #0
    1f34:	2300      	movs	r3, #0
    1f36:	4d7d      	ldr	r5, [pc, #500]	; (212c <STACK_SIZE+0x12c>)
    1f38:	47a8      	blx	r5
    1f3a:	2800      	cmp	r0, #0
    1f3c:	d003      	beq.n	1f46 <computeKalmanStates+0x56>
        altitude = pressure;
    1f3e:	9a00      	ldr	r2, [sp, #0]
    1f40:	9b01      	ldr	r3, [sp, #4]
    1f42:	6022      	str	r2, [r4, #0]
    1f44:	6063      	str	r3, [r4, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1f46:	9800      	ldr	r0, [sp, #0]
    1f48:	9901      	ldr	r1, [sp, #4]
    1f4a:	4b79      	ldr	r3, [pc, #484]	; (2130 <STACK_SIZE+0x130>)
    1f4c:	4c72      	ldr	r4, [pc, #456]	; (2118 <STACK_SIZE+0x118>)
    1f4e:	681a      	ldr	r2, [r3, #0]
    1f50:	685b      	ldr	r3, [r3, #4]
    1f52:	47a0      	blx	r4
    accel_inovation = acceleration - estp[2];
    1f54:	4b76      	ldr	r3, [pc, #472]	; (2130 <STACK_SIZE+0x130>)
    if (altitude == 0) {
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1f56:	9006      	str	r0, [sp, #24]
    1f58:	9107      	str	r1, [sp, #28]
    accel_inovation = acceleration - estp[2];
    1f5a:	691a      	ldr	r2, [r3, #16]
    1f5c:	695b      	ldr	r3, [r3, #20]
    1f5e:	0030      	movs	r0, r6
    1f60:	0039      	movs	r1, r7
    1f62:	47a0      	blx	r4


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    1f64:	4b70      	ldr	r3, [pc, #448]	; (2128 <STACK_SIZE+0x128>)
    1f66:	4d6f      	ldr	r5, [pc, #444]	; (2124 <STACK_SIZE+0x124>)
    1f68:	685c      	ldr	r4, [r3, #4]
    1f6a:	681b      	ldr	r3, [r3, #0]
    1f6c:	9300      	str	r3, [sp, #0]
    1f6e:	9401      	str	r4, [sp, #4]
    1f70:	4b70      	ldr	r3, [pc, #448]	; (2134 <STACK_SIZE+0x134>)
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    accel_inovation = acceleration - estp[2];
    1f72:	9008      	str	r0, [sp, #32]
    1f74:	9109      	str	r1, [sp, #36]	; 0x24


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    1f76:	685c      	ldr	r4, [r3, #4]
    1f78:	681b      	ldr	r3, [r3, #0]
    1f7a:	9800      	ldr	r0, [sp, #0]
    1f7c:	9901      	ldr	r1, [sp, #4]
    1f7e:	9302      	str	r3, [sp, #8]
    1f80:	9403      	str	r4, [sp, #12]
    1f82:	4b6d      	ldr	r3, [pc, #436]	; (2138 <STACK_SIZE+0x138>)
    1f84:	685c      	ldr	r4, [r3, #4]
    1f86:	681b      	ldr	r3, [r3, #0]
    1f88:	9304      	str	r3, [sp, #16]
    1f8a:	9405      	str	r4, [sp, #20]
    1f8c:	4c6b      	ldr	r4, [pc, #428]	; (213c <STACK_SIZE+0x13c>)
    1f8e:	6822      	ldr	r2, [r4, #0]
    1f90:	6863      	ldr	r3, [r4, #4]
    1f92:	47a8      	blx	r5
    1f94:	68a2      	ldr	r2, [r4, #8]
    1f96:	68e3      	ldr	r3, [r4, #12]
    1f98:	0006      	movs	r6, r0
    1f9a:	000f      	movs	r7, r1
    1f9c:	9802      	ldr	r0, [sp, #8]
    1f9e:	9903      	ldr	r1, [sp, #12]
    1fa0:	47a8      	blx	r5
    1fa2:	0002      	movs	r2, r0
    1fa4:	000b      	movs	r3, r1
    1fa6:	0030      	movs	r0, r6
    1fa8:	0039      	movs	r1, r7
    1faa:	4e65      	ldr	r6, [pc, #404]	; (2140 <STACK_SIZE+0x140>)
    1fac:	47b0      	blx	r6
    1fae:	6922      	ldr	r2, [r4, #16]
    1fb0:	6963      	ldr	r3, [r4, #20]
    1fb2:	0006      	movs	r6, r0
    1fb4:	000f      	movs	r7, r1
    1fb6:	9804      	ldr	r0, [sp, #16]
    1fb8:	9905      	ldr	r1, [sp, #20]
    1fba:	47a8      	blx	r5
    1fbc:	0002      	movs	r2, r0
    1fbe:	000b      	movs	r3, r1
    1fc0:	0030      	movs	r0, r6
    1fc2:	0039      	movs	r1, r7
    1fc4:	4e5e      	ldr	r6, [pc, #376]	; (2140 <STACK_SIZE+0x140>)
    1fc6:	47b0      	blx	r6
    1fc8:	900a      	str	r0, [sp, #40]	; 0x28
    1fca:	910b      	str	r1, [sp, #44]	; 0x2c
    1fcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1fd0:	4957      	ldr	r1, [pc, #348]	; (2130 <STACK_SIZE+0x130>)
    1fd2:	600a      	str	r2, [r1, #0]
    1fd4:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    1fd6:	69a2      	ldr	r2, [r4, #24]
    1fd8:	69e3      	ldr	r3, [r4, #28]
    1fda:	9800      	ldr	r0, [sp, #0]
    1fdc:	9901      	ldr	r1, [sp, #4]
    1fde:	47a8      	blx	r5
    1fe0:	6a22      	ldr	r2, [r4, #32]
    1fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1fe4:	0006      	movs	r6, r0
    1fe6:	000f      	movs	r7, r1
    1fe8:	9802      	ldr	r0, [sp, #8]
    1fea:	9903      	ldr	r1, [sp, #12]
    1fec:	47a8      	blx	r5
    1fee:	0002      	movs	r2, r0
    1ff0:	000b      	movs	r3, r1
    1ff2:	0030      	movs	r0, r6
    1ff4:	0039      	movs	r1, r7
    1ff6:	4e52      	ldr	r6, [pc, #328]	; (2140 <STACK_SIZE+0x140>)
    1ff8:	47b0      	blx	r6
    1ffa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1ffc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1ffe:	0006      	movs	r6, r0
    2000:	000f      	movs	r7, r1
    2002:	9804      	ldr	r0, [sp, #16]
    2004:	9905      	ldr	r1, [sp, #20]
    2006:	47a8      	blx	r5
    2008:	0002      	movs	r2, r0
    200a:	000b      	movs	r3, r1
    200c:	0030      	movs	r0, r6
    200e:	0039      	movs	r1, r7
    2010:	4e4b      	ldr	r6, [pc, #300]	; (2140 <STACK_SIZE+0x140>)
    2012:	47b0      	blx	r6
    2014:	900c      	str	r0, [sp, #48]	; 0x30
    2016:	910d      	str	r1, [sp, #52]	; 0x34
    2018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    201a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    201c:	4944      	ldr	r1, [pc, #272]	; (2130 <STACK_SIZE+0x130>)
    201e:	608a      	str	r2, [r1, #8]
    2020:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    2022:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2024:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2026:	9800      	ldr	r0, [sp, #0]
    2028:	9901      	ldr	r1, [sp, #4]
    202a:	47a8      	blx	r5
    202c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    202e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2030:	0006      	movs	r6, r0
    2032:	000f      	movs	r7, r1
    2034:	9802      	ldr	r0, [sp, #8]
    2036:	9903      	ldr	r1, [sp, #12]
    2038:	47a8      	blx	r5
    203a:	0002      	movs	r2, r0
    203c:	000b      	movs	r3, r1
    203e:	0030      	movs	r0, r6
    2040:	0039      	movs	r1, r7
    2042:	4e3f      	ldr	r6, [pc, #252]	; (2140 <STACK_SIZE+0x140>)
    2044:	47b0      	blx	r6
    2046:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2048:	6c63      	ldr	r3, [r4, #68]	; 0x44
    204a:	0006      	movs	r6, r0
    204c:	000f      	movs	r7, r1
    204e:	9804      	ldr	r0, [sp, #16]
    2050:	9905      	ldr	r1, [sp, #20]
    2052:	47a8      	blx	r5
    2054:	4c3a      	ldr	r4, [pc, #232]	; (2140 <STACK_SIZE+0x140>)
    2056:	0002      	movs	r2, r0
    2058:	000b      	movs	r3, r1
    205a:	0030      	movs	r0, r6
    205c:	0039      	movs	r1, r7
    205e:	47a0      	blx	r4
    2060:	0003      	movs	r3, r0
    2062:	000c      	movs	r4, r1
    2064:	4a32      	ldr	r2, [pc, #200]	; (2130 <STACK_SIZE+0x130>)
    2066:	9000      	str	r0, [sp, #0]
    2068:	9101      	str	r1, [sp, #4]
    206a:	6113      	str	r3, [r2, #16]
    206c:	6154      	str	r4, [r2, #20]

    /*
    Update state
    */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    206e:	4c35      	ldr	r4, [pc, #212]	; (2144 <STACK_SIZE+0x144>)
    2070:	6822      	ldr	r2, [r4, #0]
    2072:	6863      	ldr	r3, [r4, #4]
    2074:	9806      	ldr	r0, [sp, #24]
    2076:	9907      	ldr	r1, [sp, #28]
    2078:	47a8      	blx	r5
    207a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    207c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    207e:	4e30      	ldr	r6, [pc, #192]	; (2140 <STACK_SIZE+0x140>)
    2080:	47b0      	blx	r6
    2082:	68a2      	ldr	r2, [r4, #8]
    2084:	68e3      	ldr	r3, [r4, #12]
    2086:	0006      	movs	r6, r0
    2088:	000f      	movs	r7, r1
    208a:	9808      	ldr	r0, [sp, #32]
    208c:	9909      	ldr	r1, [sp, #36]	; 0x24
    208e:	47a8      	blx	r5
    2090:	0002      	movs	r2, r0
    2092:	000b      	movs	r3, r1
    2094:	0030      	movs	r0, r6
    2096:	0039      	movs	r1, r7
    2098:	4e29      	ldr	r6, [pc, #164]	; (2140 <STACK_SIZE+0x140>)
    209a:	47b0      	blx	r6
    209c:	4b22      	ldr	r3, [pc, #136]	; (2128 <STACK_SIZE+0x128>)
    209e:	6018      	str	r0, [r3, #0]
    20a0:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    20a2:	6922      	ldr	r2, [r4, #16]
    20a4:	6963      	ldr	r3, [r4, #20]
    20a6:	9806      	ldr	r0, [sp, #24]
    20a8:	9907      	ldr	r1, [sp, #28]
    20aa:	47a8      	blx	r5
    20ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    20ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    20b0:	47b0      	blx	r6
    20b2:	69a2      	ldr	r2, [r4, #24]
    20b4:	69e3      	ldr	r3, [r4, #28]
    20b6:	0006      	movs	r6, r0
    20b8:	000f      	movs	r7, r1
    20ba:	9808      	ldr	r0, [sp, #32]
    20bc:	9909      	ldr	r1, [sp, #36]	; 0x24
    20be:	47a8      	blx	r5
    20c0:	0002      	movs	r2, r0
    20c2:	000b      	movs	r3, r1
    20c4:	0030      	movs	r0, r6
    20c6:	0039      	movs	r1, r7
    20c8:	4e1d      	ldr	r6, [pc, #116]	; (2140 <STACK_SIZE+0x140>)
    20ca:	47b0      	blx	r6
    20cc:	4b19      	ldr	r3, [pc, #100]	; (2134 <STACK_SIZE+0x134>)
    20ce:	6018      	str	r0, [r3, #0]
    20d0:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    20d2:	6a22      	ldr	r2, [r4, #32]
    20d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    20d6:	9806      	ldr	r0, [sp, #24]
    20d8:	9907      	ldr	r1, [sp, #28]
    20da:	47a8      	blx	r5
    20dc:	9a00      	ldr	r2, [sp, #0]
    20de:	9b01      	ldr	r3, [sp, #4]
    20e0:	47b0      	blx	r6
    20e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    20e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    20e6:	0006      	movs	r6, r0
    20e8:	000f      	movs	r7, r1
    20ea:	9808      	ldr	r0, [sp, #32]
    20ec:	9909      	ldr	r1, [sp, #36]	; 0x24
    20ee:	47a8      	blx	r5
    20f0:	4c13      	ldr	r4, [pc, #76]	; (2140 <STACK_SIZE+0x140>)
    20f2:	0002      	movs	r2, r0
    20f4:	000b      	movs	r3, r1
    20f6:	0030      	movs	r0, r6
    20f8:	0039      	movs	r1, r7
    20fa:	47a0      	blx	r4
    20fc:	4b0e      	ldr	r3, [pc, #56]	; (2138 <STACK_SIZE+0x138>)
    20fe:	6018      	str	r0, [r3, #0]
    2100:	6059      	str	r1, [r3, #4]

}
    2102:	b00f      	add	sp, #60	; 0x3c
    2104:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2106:	46c0      	nop			; (mov r8, r8)
    2108:	20000530 	.word	0x20000530
    210c:	200007e8 	.word	0x200007e8
    2110:	00005f79 	.word	0x00005f79
    2114:	200004d8 	.word	0x200004d8
    2118:	00005731 	.word	0x00005731
    211c:	33daf8df 	.word	0x33daf8df
    2120:	4040164b 	.word	0x4040164b
    2124:	0000523d 	.word	0x0000523d
    2128:	200006b8 	.word	0x200006b8
    212c:	00004041 	.word	0x00004041
    2130:	200006c0 	.word	0x200006c0
    2134:	200006b0 	.word	0x200006b0
    2138:	200006a8 	.word	0x200006a8
    213c:	20000010 	.word	0x20000010
    2140:	0000439d 	.word	0x0000439d
    2144:	20000650 	.word	0x20000650

00002148 <makePage>:
u8_t pageLocation;

bool pageReady;


void makePage(u8_t bytesToWrite, u8_t* data) {
    2148:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    214a:	4a1f      	ldr	r2, [pc, #124]	; (21c8 <makePage+0x80>)
    214c:	7815      	ldrb	r5, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    214e:	1943      	adds	r3, r0, r5
    2150:	2bff      	cmp	r3, #255	; 0xff
    2152:	dc03      	bgt.n	215c <makePage+0x14>
    2154:	2300      	movs	r3, #0
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2156:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    2158:	4c1c      	ldr	r4, [pc, #112]	; (21cc <makePage+0x84>)
    215a:	e029      	b.n	21b0 <makePage+0x68>
    215c:	2300      	movs	r3, #0
    215e:	4e1b      	ldr	r6, [pc, #108]	; (21cc <makePage+0x84>)

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2160:	195f      	adds	r7, r3, r5
    2162:	b2dc      	uxtb	r4, r3
    2164:	46b4      	mov	ip, r6
    2166:	2fff      	cmp	r7, #255	; 0xff
    2168:	dc04      	bgt.n	2174 <makePage+0x2c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    216a:	5ccc      	ldrb	r4, [r1, r3]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    216c:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    216e:	55f4      	strb	r4, [r6, r7]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2170:	b29b      	uxth	r3, r3
    2172:	e7f5      	b.n	2160 <makePage+0x18>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    2174:	2300      	movs	r3, #0
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    2176:	4f16      	ldr	r7, [pc, #88]	; (21d0 <makePage+0x88>)
    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    2178:	7013      	strb	r3, [r2, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    217a:	4665      	mov	r5, ip
    217c:	18ed      	adds	r5, r5, r3
    217e:	782e      	ldrb	r6, [r5, #0]
    2180:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    2182:	2600      	movs	r6, #0
    2184:	702e      	strb	r6, [r5, #0]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    2186:	2580      	movs	r5, #128	; 0x80
    2188:	3301      	adds	r3, #1
    218a:	006d      	lsls	r5, r5, #1
    218c:	42ab      	cmp	r3, r5
    218e:	d1f4      	bne.n	217a <makePage+0x32>
    2190:	2300      	movs	r3, #0
    2192:	1c5d      	adds	r5, r3, #1
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    2194:	4284      	cmp	r4, r0
    2196:	d207      	bcs.n	21a8 <makePage+0x60>
            pageBuffer[dataByte] = data[bytesWritten];
    2198:	4667      	mov	r7, ip
    219a:	5d0e      	ldrb	r6, [r1, r4]
            bytesWritten++;
    219c:	3401      	adds	r4, #1
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            pageBuffer[dataByte] = data[bytesWritten];
    219e:	54fe      	strb	r6, [r7, r3]
            bytesWritten++;
    21a0:	b2e4      	uxtb	r4, r4
            pageLocation = dataByte + 1;
    21a2:	7015      	strb	r5, [r2, #0]
    21a4:	002b      	movs	r3, r5
    21a6:	e7f4      	b.n	2192 <makePage+0x4a>
        }
        pageReady = true;
    21a8:	2201      	movs	r2, #1
    21aa:	4b0a      	ldr	r3, [pc, #40]	; (21d4 <makePage+0x8c>)
    21ac:	701a      	strb	r2, [r3, #0]
    21ae:	e009      	b.n	21c4 <makePage+0x7c>

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    21b0:	4283      	cmp	r3, r0
    21b2:	d807      	bhi.n	21c4 <makePage+0x7c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    21b4:	5ccf      	ldrb	r7, [r1, r3]
    21b6:	18e6      	adds	r6, r4, r3
    21b8:	5577      	strb	r7, [r6, r5]
            bytesWritten++;
            pageLocation = location + dataByte;
    21ba:	18ee      	adds	r6, r5, r3
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    21bc:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
    21be:	7016      	strb	r6, [r2, #0]
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    21c0:	b29b      	uxth	r3, r3
    21c2:	e7f5      	b.n	21b0 <makePage+0x68>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
        }
    }
}
    21c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21c6:	46c0      	nop			; (mov r8, r8)
    21c8:	200007e4 	.word	0x200007e4
    21cc:	2000053d 	.word	0x2000053d
    21d0:	200006d8 	.word	0x200006d8
    21d4:	200007d8 	.word	0x200007d8

000021d8 <logFlight>:


void logFlight() {
    21d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    21da:	2346      	movs	r3, #70	; 0x46
    21dc:	466a      	mov	r2, sp
    21de:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    21e0:	2300      	movs	r3, #0

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    21e2:	4669      	mov	r1, sp
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    21e4:	4668      	mov	r0, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;
    21e6:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    21e8:	4a10      	ldr	r2, [pc, #64]	; (222c <logFlight+0x54>)
    21ea:	6813      	ldr	r3, [r2, #0]
    21ec:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    21ee:	0a19      	lsrs	r1, r3, #8
    21f0:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    21f2:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.offsetBufferTime >> 24;
    21f4:	0e1b      	lsrs	r3, r3, #24
    21f6:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    21f8:	6993      	ldr	r3, [r2, #24]
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    21fa:	7101      	strb	r1, [r0, #4]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    21fc:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    21fe:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    2200:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    2202:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    2204:	0e1b      	lsrs	r3, r3, #24
    2206:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    2208:	6a13      	ldr	r3, [r2, #32]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    220a:	7201      	strb	r1, [r0, #8]
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    220c:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    220e:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    2210:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    2212:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    2214:	0e1b      	lsrs	r3, r3, #24
    2216:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    2218:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    dataToSend[12] = offsets.groundTemperature >> 16;
    221a:	7302      	strb	r2, [r0, #12]
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    221c:	73c3      	strb	r3, [r0, #15]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;
    221e:	4669      	mov	r1, sp
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
    2220:	2010      	movs	r0, #16
    2222:	4b03      	ldr	r3, [pc, #12]	; (2230 <logFlight+0x58>)
    2224:	4798      	blx	r3
}
    2226:	b005      	add	sp, #20
    2228:	bd00      	pop	{pc}
    222a:	46c0      	nop			; (mov r8, r8)
    222c:	200004d8 	.word	0x200004d8
    2230:	00002149 	.word	0x00002149

00002234 <logEvent>:

void logEvent(u8_t eventType) {
    2234:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    2236:	2345      	movs	r3, #69	; 0x45
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    2238:	4d10      	ldr	r5, [pc, #64]	; (227c <logEvent+0x48>)
void logEvent(u8_t eventType) {

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    223a:	ac01      	add	r4, sp, #4
    223c:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    223e:	686b      	ldr	r3, [r5, #4]
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    2240:	4e0f      	ldr	r6, [pc, #60]	; (2280 <logEvent+0x4c>)
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    2242:	0a1a      	lsrs	r2, r3, #8
    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    2244:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 8;
    2246:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 16;
    2248:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = sample.sampleTick >> 24;
    224a:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    224c:	7122      	strb	r2, [r4, #4]
    dataToSend[5] = sample.sampleTick >> 24;
    224e:	7163      	strb	r3, [r4, #5]

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    2250:	7060      	strb	r0, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    2252:	47b0      	blx	r6
    2254:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 8;
    2256:	47b0      	blx	r6
    2258:	1200      	asrs	r0, r0, #8
    225a:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 16;
    225c:	47b0      	blx	r6
    225e:	1400      	asrs	r0, r0, #16
    2260:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = altitudeAGL() >> 24;
    2262:	47b0      	blx	r6
    2264:	1600      	asrs	r0, r0, #24
    2266:	7260      	strb	r0, [r4, #9]

    dataToSend[10] = sample.voltage.batV >> 0;
    2268:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    226a:	0021      	movs	r1, r4
    dataToSend[6] = altitudeAGL() >> 0;
    dataToSend[7] = altitudeAGL() >> 8;
    dataToSend[8] = altitudeAGL() >> 16;
    dataToSend[9] = altitudeAGL() >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    226c:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    226e:	0a1b      	lsrs	r3, r3, #8
    2270:	72e3      	strb	r3, [r4, #11]

    makePage(bytesToSend, dataToSend);
    2272:	200c      	movs	r0, #12
    2274:	4b03      	ldr	r3, [pc, #12]	; (2284 <logEvent+0x50>)
    2276:	4798      	blx	r3

}
    2278:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    227a:	46c0      	nop			; (mov r8, r8)
    227c:	200007e8 	.word	0x200007e8
    2280:	00000ae9 	.word	0x00000ae9
    2284:	00002149 	.word	0x00002149

00002288 <logSensors>:

void logSensors() {

    writeLog = false;
    2288:	2200      	movs	r2, #0
    228a:	4b50      	ldr	r3, [pc, #320]	; (23cc <logSensors+0x144>)

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    228c:	b5f0      	push	{r4, r5, r6, r7, lr}

    writeLog = false;
    228e:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = 29;
    u8_t dataToSend[29];

    dataToSend[0] = SENSOR_LOG;
    2290:	2353      	movs	r3, #83	; 0x53

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2292:	b08d      	sub	sp, #52	; 0x34
    u8_t bytesToSend = 29;
    u8_t dataToSend[29];

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    2294:	4d4e      	ldr	r5, [pc, #312]	; (23d0 <logSensors+0x148>)
    writeLog = false;

    u8_t bytesToSend = 29;
    u8_t dataToSend[29];

    dataToSend[0] = SENSOR_LOG;
    2296:	ac04      	add	r4, sp, #16
    2298:	7023      	strb	r3, [r4, #0]

    dataToSend[1] = sample.sampleTick >> 0;
    229a:	686b      	ldr	r3, [r5, #4]
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    229c:	4e4d      	ldr	r6, [pc, #308]	; (23d4 <logSensors+0x14c>)
    u8_t dataToSend[29];

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    229e:	0a1a      	lsrs	r2, r3, #8
    u8_t bytesToSend = 29;
    u8_t dataToSend[29];

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    22a0:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    22a2:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    22a4:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    22a6:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    22a8:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    22aa:	7123      	strb	r3, [r4, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    22ac:	47b0      	blx	r6
    22ae:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    22b0:	47b0      	blx	r6
    22b2:	1200      	asrs	r0, r0, #8
    22b4:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    22b6:	47b0      	blx	r6
    22b8:	1400      	asrs	r0, r0, #16
    22ba:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    22bc:	47b0      	blx	r6

    volatile float fractionalAccel = accel - (int16_t)(accel);
    22be:	4b46      	ldr	r3, [pc, #280]	; (23d8 <logSensors+0x150>)
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    22c0:	1600      	asrs	r0, r0, #24

    volatile float fractionalAccel = accel - (int16_t)(accel);
    22c2:	681e      	ldr	r6, [r3, #0]
    22c4:	685f      	ldr	r7, [r3, #4]
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    22c6:	7220      	strb	r0, [r4, #8]

    volatile float fractionalAccel = accel - (int16_t)(accel);
    22c8:	0039      	movs	r1, r7
    22ca:	4b44      	ldr	r3, [pc, #272]	; (23dc <logSensors+0x154>)
    22cc:	0030      	movs	r0, r6
    22ce:	4798      	blx	r3
    22d0:	b203      	sxth	r3, r0
    22d2:	9300      	str	r3, [sp, #0]
    22d4:	0018      	movs	r0, r3
    22d6:	4b42      	ldr	r3, [pc, #264]	; (23e0 <logSensors+0x158>)
    22d8:	4798      	blx	r3
    22da:	0002      	movs	r2, r0
    22dc:	000b      	movs	r3, r1
    22de:	0030      	movs	r0, r6
    22e0:	0039      	movs	r1, r7
    22e2:	4e40      	ldr	r6, [pc, #256]	; (23e4 <logSensors+0x15c>)
    22e4:	47b0      	blx	r6
    22e6:	4b40      	ldr	r3, [pc, #256]	; (23e8 <logSensors+0x160>)
    22e8:	4798      	blx	r3
    22ea:	9003      	str	r0, [sp, #12]
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    22ec:	9803      	ldr	r0, [sp, #12]
    22ee:	493f      	ldr	r1, [pc, #252]	; (23ec <logSensors+0x164>)
    22f0:	4b3f      	ldr	r3, [pc, #252]	; (23f0 <logSensors+0x168>)
    22f2:	4798      	blx	r3
    22f4:	4b3f      	ldr	r3, [pc, #252]	; (23f4 <logSensors+0x16c>)
    22f6:	4798      	blx	r3

    dataToSend[9] = (int16_t)(accel) >> 0;
    22f8:	466a      	mov	r2, sp
    22fa:	7812      	ldrb	r2, [r2, #0]
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    22fc:	ab02      	add	r3, sp, #8
    22fe:	b200      	sxth	r0, r0

    dataToSend[9] = (int16_t)(accel) >> 0;
    2300:	7262      	strb	r2, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    2302:	9a00      	ldr	r2, [sp, #0]
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    2304:	8058      	strh	r0, [r3, #2]

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    2306:	1210      	asrs	r0, r2, #8
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    2308:	3302      	adds	r3, #2

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    230a:	881a      	ldrh	r2, [r3, #0]
    dataToSend[12] = fractAccelPart >> 8;
    230c:	881b      	ldrh	r3, [r3, #0]

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    230e:	72a0      	strb	r0, [r4, #10]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    2310:	0a1b      	lsrs	r3, r3, #8
    2312:	7323      	strb	r3, [r4, #12]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    2314:	4b38      	ldr	r3, [pc, #224]	; (23f8 <logSensors+0x170>)
    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2316:	72e2      	strb	r2, [r4, #11]
    dataToSend[12] = fractAccelPart >> 8;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    2318:	681a      	ldr	r2, [r3, #0]
    231a:	685b      	ldr	r3, [r3, #4]
    231c:	9200      	str	r2, [sp, #0]
    231e:	9301      	str	r3, [sp, #4]
    2320:	0010      	movs	r0, r2
    2322:	0019      	movs	r1, r3
    2324:	4b2d      	ldr	r3, [pc, #180]	; (23dc <logSensors+0x154>)
    2326:	4798      	blx	r3
    2328:	b206      	sxth	r6, r0
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    232a:	4b2d      	ldr	r3, [pc, #180]	; (23e0 <logSensors+0x158>)
    232c:	0030      	movs	r0, r6
    232e:	4798      	blx	r3
    2330:	4f2c      	ldr	r7, [pc, #176]	; (23e4 <logSensors+0x15c>)
    2332:	0002      	movs	r2, r0
    2334:	000b      	movs	r3, r1
    2336:	9800      	ldr	r0, [sp, #0]
    2338:	9901      	ldr	r1, [sp, #4]
    233a:	47b8      	blx	r7
    233c:	4b2a      	ldr	r3, [pc, #168]	; (23e8 <logSensors+0x160>)
    233e:	4798      	blx	r3
    2340:	492a      	ldr	r1, [pc, #168]	; (23ec <logSensors+0x164>)
    2342:	4b2b      	ldr	r3, [pc, #172]	; (23f0 <logSensors+0x168>)
    2344:	4798      	blx	r3
    2346:	4b2b      	ldr	r3, [pc, #172]	; (23f4 <logSensors+0x16c>)
    2348:	4798      	blx	r3
    234a:	b203      	sxth	r3, r0

    dataToSend[13] = (int16_t)(velocity) >> 0;
    234c:	7366      	strb	r6, [r4, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    234e:	73e3      	strb	r3, [r4, #15]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2350:	1236      	asrs	r6, r6, #8
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    2352:	121b      	asrs	r3, r3, #8

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2354:	73a6      	strb	r6, [r4, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    2356:	7423      	strb	r3, [r4, #16]

    dataToSend[17] = sample.accelXint >> 0;
    2358:	2220      	movs	r2, #32
    235a:	5eab      	ldrsh	r3, [r5, r2]
    //dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    //dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;



    makePage(bytesToSend, dataToSend);
    235c:	0021      	movs	r1, r4
    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = sample.accelXint >> 0;
    235e:	7463      	strb	r3, [r4, #17]
    dataToSend[18] = sample.accelXint >> 8;
    2360:	121b      	asrs	r3, r3, #8
    2362:	74a3      	strb	r3, [r4, #18]

    dataToSend[19] = sample.accelYint >> 0;
    2364:	2228      	movs	r2, #40	; 0x28
    2366:	5eab      	ldrsh	r3, [r5, r2]
    //dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    //dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;



    makePage(bytesToSend, dataToSend);
    2368:	201d      	movs	r0, #29
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = sample.accelXint >> 0;
    dataToSend[18] = sample.accelXint >> 8;

    dataToSend[19] = sample.accelYint >> 0;
    236a:	74e3      	strb	r3, [r4, #19]
    dataToSend[20] = sample.accelYint >> 8;
    236c:	121b      	asrs	r3, r3, #8
    236e:	7523      	strb	r3, [r4, #20]

    dataToSend[21] = sample.gyroXint >> 0;
    2370:	2238      	movs	r2, #56	; 0x38
    2372:	5eab      	ldrsh	r3, [r5, r2]
    2374:	7563      	strb	r3, [r4, #21]
    dataToSend[22] = sample.gyroXint >> 8;
    2376:	121b      	asrs	r3, r3, #8
    2378:	75a3      	strb	r3, [r4, #22]

    dataToSend[23] = sample.gyroYint >> 0;
    237a:	1cab      	adds	r3, r5, #2
    237c:	223e      	movs	r2, #62	; 0x3e
    237e:	5e9b      	ldrsh	r3, [r3, r2]
    2380:	75e3      	strb	r3, [r4, #23]
    dataToSend[24] = sample.gyroYint >> 8;
    2382:	121b      	asrs	r3, r3, #8
    2384:	7623      	strb	r3, [r4, #24]

    dataToSend[25] = sample.gyroZint >> 0;
    2386:	002b      	movs	r3, r5
    2388:	3348      	adds	r3, #72	; 0x48
    238a:	2200      	movs	r2, #0
    238c:	5e9b      	ldrsh	r3, [r3, r2]
    238e:	7663      	strb	r3, [r4, #25]
    dataToSend[26] = sample.gyroZint >> 8;
    2390:	121b      	asrs	r3, r3, #8
    2392:	76a3      	strb	r3, [r4, #26]

    dataToSend[27] = sample.analogRaw >> 0;
    2394:	8b2b      	ldrh	r3, [r5, #24]
    2396:	76e3      	strb	r3, [r4, #27]
    dataToSend[28] = sample.analogRaw >> 8;
    2398:	0a1b      	lsrs	r3, r3, #8
    239a:	7723      	strb	r3, [r4, #28]
    //dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    //dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;



    makePage(bytesToSend, dataToSend);
    239c:	4b17      	ldr	r3, [pc, #92]	; (23fc <logSensors+0x174>)
    239e:	4798      	blx	r3

    if (pageReady) {
    23a0:	4b17      	ldr	r3, [pc, #92]	; (2400 <logSensors+0x178>)
    23a2:	781a      	ldrb	r2, [r3, #0]
    23a4:	2a00      	cmp	r2, #0
    23a6:	d00e      	beq.n	23c6 <logSensors+0x13e>
        pageReady = false;
    23a8:	2200      	movs	r2, #0
    23aa:	701a      	strb	r2, [r3, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    23ac:	2280      	movs	r2, #128	; 0x80
    23ae:	4b15      	ldr	r3, [pc, #84]	; (2404 <logSensors+0x17c>)
        pinToggle(LedPin);
        u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    23b0:	4c15      	ldr	r4, [pc, #84]	; (2408 <logSensors+0x180>)
    23b2:	0352      	lsls	r2, r2, #13
    23b4:	61da      	str	r2, [r3, #28]
    23b6:	4915      	ldr	r1, [pc, #84]	; (240c <logSensors+0x184>)
    23b8:	4b15      	ldr	r3, [pc, #84]	; (2410 <logSensors+0x188>)
    23ba:	6820      	ldr	r0, [r4, #0]
    23bc:	4798      	blx	r3
        currentAddress = (currentAddress + 0x100);
    23be:	6823      	ldr	r3, [r4, #0]
    23c0:	3301      	adds	r3, #1
    23c2:	33ff      	adds	r3, #255	; 0xff
    23c4:	6023      	str	r3, [r4, #0]
    }
}
    23c6:	b00d      	add	sp, #52	; 0x34
    23c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23ca:	46c0      	nop			; (mov r8, r8)
    23cc:	2000052a 	.word	0x2000052a
    23d0:	200007e8 	.word	0x200007e8
    23d4:	00000ae9 	.word	0x00000ae9
    23d8:	200006a8 	.word	0x200006a8
    23dc:	00005e19 	.word	0x00005e19
    23e0:	00005e85 	.word	0x00005e85
    23e4:	00005731 	.word	0x00005731
    23e8:	00006021 	.word	0x00006021
    23ec:	447a0000 	.word	0x447a0000
    23f0:	00004131 	.word	0x00004131
    23f4:	00004359 	.word	0x00004359
    23f8:	200006b0 	.word	0x200006b0
    23fc:	00002149 	.word	0x00002149
    2400:	200007d8 	.word	0x200007d8
    2404:	41004400 	.word	0x41004400
    2408:	200007dc 	.word	0x200007dc
    240c:	200006d8 	.word	0x200006d8
    2410:	0000029d 	.word	0x0000029d

00002414 <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2414:	2306      	movs	r3, #6
    }
}



u32_t getFlightStartAddress(u8_t flightToFind) {
    2416:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2418:	4358      	muls	r0, r3
    241a:	ac01      	add	r4, sp, #4
    241c:	3001      	adds	r0, #1
    241e:	30ff      	adds	r0, #255	; 0xff
    2420:	0022      	movs	r2, r4
    2422:	2103      	movs	r1, #3
    2424:	4b04      	ldr	r3, [pc, #16]	; (2438 <getFlightStartAddress+0x24>)
    2426:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2428:	7860      	ldrb	r0, [r4, #1]
    242a:	78a3      	ldrb	r3, [r4, #2]
    242c:	0200      	lsls	r0, r0, #8
    242e:	041b      	lsls	r3, r3, #16
    2430:	4318      	orrs	r0, r3
    2432:	7823      	ldrb	r3, [r4, #0]
    2434:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    2436:	bd16      	pop	{r1, r2, r4, pc}
    2438:	000002f9 	.word	0x000002f9

0000243c <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    243c:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    243e:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2440:	4358      	muls	r0, r3
    2442:	ac01      	add	r4, sp, #4
    2444:	3004      	adds	r0, #4
    2446:	30ff      	adds	r0, #255	; 0xff
    2448:	0022      	movs	r2, r4
    244a:	2103      	movs	r1, #3
    244c:	4b04      	ldr	r3, [pc, #16]	; (2460 <FindFlightEndingAddress+0x24>)
    244e:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2450:	7860      	ldrb	r0, [r4, #1]
    2452:	78a3      	ldrb	r3, [r4, #2]
    2454:	0200      	lsls	r0, r0, #8
    2456:	041b      	lsls	r3, r3, #16
    2458:	4318      	orrs	r0, r3
    245a:	7823      	ldrb	r3, [r4, #0]
    245c:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    245e:	bd16      	pop	{r1, r2, r4, pc}
    2460:	000002f9 	.word	0x000002f9

00002464 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    2464:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    2466:	4b04      	ldr	r3, [pc, #16]	; (2478 <isFlightLogged+0x14>)
    2468:	4798      	blx	r3
    246a:	4b04      	ldr	r3, [pc, #16]	; (247c <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    246c:	18c0      	adds	r0, r0, r3
    246e:	1e43      	subs	r3, r0, #1
    2470:	4198      	sbcs	r0, r3
    2472:	b2c0      	uxtb	r0, r0
    2474:	bd10      	pop	{r4, pc}
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	00002415 	.word	0x00002415
    247c:	ff000001 	.word	0xff000001

00002480 <writeFlightEndAddress>:


void writeFlightEndAddress() {
    2480:	b507      	push	{r0, r1, r2, lr}
    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    2482:	2006      	movs	r0, #6
}


void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    2484:	4b09      	ldr	r3, [pc, #36]	; (24ac <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2486:	aa01      	add	r2, sp, #4
}


void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    2488:	681b      	ldr	r3, [r3, #0]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    248a:	7013      	strb	r3, [r2, #0]
    248c:	0a19      	lsrs	r1, r3, #8
    248e:	0c1b      	lsrs	r3, r3, #16
    2490:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    2492:	4b07      	ldr	r3, [pc, #28]	; (24b0 <writeFlightEndAddress+0x30>)

void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2494:	7051      	strb	r1, [r2, #1]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    2496:	781b      	ldrb	r3, [r3, #0]
    2498:	2103      	movs	r1, #3
    249a:	4358      	muls	r0, r3
    249c:	3004      	adds	r0, #4
    249e:	30ff      	adds	r0, #255	; 0xff
    24a0:	4b04      	ldr	r3, [pc, #16]	; (24b4 <writeFlightEndAddress+0x34>)
    24a2:	4798      	blx	r3
    delay_ms(10);
    24a4:	200a      	movs	r0, #10
    24a6:	4b04      	ldr	r3, [pc, #16]	; (24b8 <writeFlightEndAddress+0x38>)
    24a8:	4798      	blx	r3

}
    24aa:	bd07      	pop	{r0, r1, r2, pc}
    24ac:	200007dc 	.word	0x200007dc
    24b0:	2000052b 	.word	0x2000052b
    24b4:	00000241 	.word	0x00000241
    24b8:	00000eed 	.word	0x00000eed

000024bc <findNewFlightStart>:




void findNewFlightStart() {
    24bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    24be:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    24c0:	0020      	movs	r0, r4
    24c2:	4b23      	ldr	r3, [pc, #140]	; (2550 <findNewFlightStart+0x94>)
    24c4:	4798      	blx	r3
    24c6:	2800      	cmp	r0, #0
    24c8:	d13d      	bne.n	2546 <findNewFlightStart+0x8a>
    24ca:	4f22      	ldr	r7, [pc, #136]	; (2554 <findNewFlightStart+0x98>)
    24cc:	ad01      	add	r5, sp, #4

            if (flightNumbToCheck > 0) {
    24ce:	2c00      	cmp	r4, #0
    24d0:	d016      	beq.n	2500 <findNewFlightStart+0x44>

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    24d2:	1e60      	subs	r0, r4, #1
    24d4:	4b20      	ldr	r3, [pc, #128]	; (2558 <findNewFlightStart+0x9c>)
    24d6:	b2c0      	uxtb	r0, r0
    24d8:	4798      	blx	r3
                delay_ms(5);
    24da:	4b20      	ldr	r3, [pc, #128]	; (255c <findNewFlightStart+0xa0>)

        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    24dc:	0006      	movs	r6, r0
                delay_ms(5);
    24de:	2005      	movs	r0, #5
    24e0:	4798      	blx	r3
                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    24e2:	2006      	movs	r0, #6
    24e4:	4360      	muls	r0, r4
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    24e6:	0a33      	lsrs	r3, r6, #8

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    24e8:	3001      	adds	r0, #1
            if (flightNumbToCheck > 0) {

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;
    24ea:	603e      	str	r6, [r7, #0]

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    24ec:	702e      	strb	r6, [r5, #0]
    24ee:	706b      	strb	r3, [r5, #1]
    24f0:	0c36      	lsrs	r6, r6, #16

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    24f2:	30ff      	adds	r0, #255	; 0xff
    24f4:	002a      	movs	r2, r5
    24f6:	2103      	movs	r1, #3
    24f8:	4b19      	ldr	r3, [pc, #100]	; (2560 <findNewFlightStart+0xa4>)
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    24fa:	70ae      	strb	r6, [r5, #2]

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    24fc:	4798      	blx	r3
    24fe:	e010      	b.n	2522 <findNewFlightStart+0x66>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    2500:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2502:	2080      	movs	r0, #128	; 0x80
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    2504:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2506:	0040      	lsls	r0, r0, #1
    2508:	4b15      	ldr	r3, [pc, #84]	; (2560 <findNewFlightStart+0xa4>)
    250a:	002a      	movs	r2, r5
    250c:	2103      	movs	r1, #3
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    250e:	702c      	strb	r4, [r5, #0]
    2510:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2512:	4798      	blx	r3
                currentAddress = 0x001000;
    2514:	2380      	movs	r3, #128	; 0x80
                beep(1000);
    2516:	20fa      	movs	r0, #250	; 0xfa

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
                currentAddress = 0x001000;
    2518:	015b      	lsls	r3, r3, #5
    251a:	603b      	str	r3, [r7, #0]
                beep(1000);
    251c:	0080      	lsls	r0, r0, #2
    251e:	4b11      	ldr	r3, [pc, #68]	; (2564 <findNewFlightStart+0xa8>)
    2520:	4798      	blx	r3
            }
            flightNumb = flightNumbToCheck;
    2522:	4b11      	ldr	r3, [pc, #68]	; (2568 <findNewFlightStart+0xac>)
    2524:	701c      	strb	r4, [r3, #0]

            while (flightNumbToCheck > 0) {
                beep(500);
    2526:	20fa      	movs	r0, #250	; 0xfa
    2528:	0040      	lsls	r0, r0, #1
                currentAddress = 0x001000;
                beep(1000);
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    252a:	2c00      	cmp	r4, #0
    252c:	d008      	beq.n	2540 <findNewFlightStart+0x84>
                beep(500);
    252e:	4b0d      	ldr	r3, [pc, #52]	; (2564 <findNewFlightStart+0xa8>)
    2530:	4798      	blx	r3
                delay_ms(500);
    2532:	20fa      	movs	r0, #250	; 0xfa
    2534:	4b09      	ldr	r3, [pc, #36]	; (255c <findNewFlightStart+0xa0>)
    2536:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    2538:	3c01      	subs	r4, #1
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    253a:	4798      	blx	r3
                --flightNumbToCheck;
    253c:	b2e4      	uxtb	r4, r4
    253e:	e7f2      	b.n	2526 <findNewFlightStart+0x6a>
            }
            delay_ms(500);
    2540:	4b06      	ldr	r3, [pc, #24]	; (255c <findNewFlightStart+0xa0>)
    2542:	4798      	blx	r3
            break;
    2544:	e003      	b.n	254e <findNewFlightStart+0x92>



void findNewFlightStart() {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    2546:	3401      	adds	r4, #1
    2548:	b2e4      	uxtb	r4, r4
    254a:	2c14      	cmp	r4, #20
    254c:	d1b8      	bne.n	24c0 <findNewFlightStart+0x4>
            }
            delay_ms(500);
            break;
        }
    }
}
    254e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2550:	00002465 	.word	0x00002465
    2554:	200007dc 	.word	0x200007dc
    2558:	0000243d 	.word	0x0000243d
    255c:	00000eed 	.word	0x00000eed
    2560:	00000241 	.word	0x00000241
    2564:	00000c5d 	.word	0x00000c5d
    2568:	2000052b 	.word	0x2000052b

0000256c <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    256c:	4b01      	ldr	r3, [pc, #4]	; (2574 <takeSample+0x8>)
    256e:	7818      	ldrb	r0, [r3, #0]
}
    2570:	4770      	bx	lr
    2572:	46c0      	nop			; (mov r8, r8)
    2574:	2000053c 	.word	0x2000053c

00002578 <pullSample>:

void pullSample() {
    SampleBool = true;
    2578:	2201      	movs	r2, #1
    257a:	4b01      	ldr	r3, [pc, #4]	; (2580 <pullSample+0x8>)
    257c:	701a      	strb	r2, [r3, #0]
}
    257e:	4770      	bx	lr
    2580:	2000053c 	.word	0x2000053c

00002584 <sampleTick>:
}

sample_t sample;

void sampleTick() {
    SampleBool = false;
    2584:	2200      	movs	r2, #0
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    2586:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;
    2588:	4baa      	ldr	r3, [pc, #680]	; (2834 <sampleTick+0x2b0>)

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    258a:	4cab      	ldr	r4, [pc, #684]	; (2838 <sampleTick+0x2b4>)
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    258c:	b085      	sub	sp, #20
    SampleBool = false;
    258e:	701a      	strb	r2, [r3, #0]

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis() - startupTick;
    2590:	4baa      	ldr	r3, [pc, #680]	; (283c <sampleTick+0x2b8>)

void sampleTick() {
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    2592:	6865      	ldr	r5, [r4, #4]
    sample.sampleTick = millis() - startupTick;
    2594:	4798      	blx	r3
    2596:	4baa      	ldr	r3, [pc, #680]	; (2840 <sampleTick+0x2bc>)

    // altimeter.flightTime = sample.sampleTick - offsets.StartupTick;



    sample.voltage.batV = adc_read(senseBatPin);
    2598:	4faa      	ldr	r7, [pc, #680]	; (2844 <sampleTick+0x2c0>)
void sampleTick() {
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis() - startupTick;
    259a:	681b      	ldr	r3, [r3, #0]
    259c:	1ac0      	subs	r0, r0, r3
    259e:	6060      	str	r0, [r4, #4]
    sample.tickDelta = sample.sampleTick - lastTick;
    25a0:	1b40      	subs	r0, r0, r5

    // altimeter.flightTime = sample.sampleTick - offsets.StartupTick;



    sample.voltage.batV = adc_read(senseBatPin);
    25a2:	4da9      	ldr	r5, [pc, #676]	; (2848 <sampleTick+0x2c4>)
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis() - startupTick;
    sample.tickDelta = sample.sampleTick - lastTick;
    25a4:	8020      	strh	r0, [r4, #0]

    // altimeter.flightTime = sample.sampleTick - offsets.StartupTick;



    sample.voltage.batV = adc_read(senseBatPin);
    25a6:	786b      	ldrb	r3, [r5, #1]
    25a8:	7829      	ldrb	r1, [r5, #0]
    25aa:	78a8      	ldrb	r0, [r5, #2]
    25ac:	021b      	lsls	r3, r3, #8
    25ae:	430b      	orrs	r3, r1
    25b0:	0400      	lsls	r0, r0, #16
    25b2:	001a      	movs	r2, r3
    25b4:	0003      	movs	r3, r0
    25b6:	78e8      	ldrb	r0, [r5, #3]
    25b8:	4313      	orrs	r3, r2
    25ba:	0600      	lsls	r0, r0, #24
    25bc:	7929      	ldrb	r1, [r5, #4]
    25be:	4318      	orrs	r0, r3
    25c0:	47b8      	blx	r7

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    25c2:	4ba2      	ldr	r3, [pc, #648]	; (284c <sampleTick+0x2c8>)

    // altimeter.flightTime = sample.sampleTick - offsets.StartupTick;



    sample.voltage.batV = adc_read(senseBatPin);
    25c4:	8120      	strh	r0, [r4, #8]

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    25c6:	4798      	blx	r3
    25c8:	4aa1      	ldr	r2, [pc, #644]	; (2850 <sampleTick+0x2cc>)
    25ca:	4ea2      	ldr	r6, [pc, #648]	; (2854 <sampleTick+0x2d0>)
    25cc:	4ba2      	ldr	r3, [pc, #648]	; (2858 <sampleTick+0x2d4>)
    25ce:	47b0      	blx	r6
    25d0:	4ba2      	ldr	r3, [pc, #648]	; (285c <sampleTick+0x2d8>)
    25d2:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    25d4:	79ab      	ldrb	r3, [r5, #6]
    25d6:	7969      	ldrb	r1, [r5, #5]



    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    25d8:	60e0      	str	r0, [r4, #12]

    sample.voltage.senseA = adc_read(senseAPin);
    25da:	79e8      	ldrb	r0, [r5, #7]
    25dc:	021b      	lsls	r3, r3, #8
    25de:	430b      	orrs	r3, r1
    25e0:	0400      	lsls	r0, r0, #16
    25e2:	001a      	movs	r2, r3
    25e4:	0003      	movs	r3, r0
    25e6:	7a28      	ldrb	r0, [r5, #8]
    25e8:	4313      	orrs	r3, r2
    25ea:	0600      	lsls	r0, r0, #24
    25ec:	7a69      	ldrb	r1, [r5, #9]
    25ee:	4318      	orrs	r0, r3
    25f0:	47b8      	blx	r7
    sample.voltage.senseB = adc_read(senseBPin);
    25f2:	7aeb      	ldrb	r3, [r5, #11]
    25f4:	7aa9      	ldrb	r1, [r5, #10]

    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    25f6:	8220      	strh	r0, [r4, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    25f8:	7b28      	ldrb	r0, [r5, #12]
    25fa:	021b      	lsls	r3, r3, #8
    25fc:	430b      	orrs	r3, r1
    25fe:	0400      	lsls	r0, r0, #16
    2600:	001a      	movs	r2, r3
    2602:	0003      	movs	r3, r0
    2604:	7b68      	ldrb	r0, [r5, #13]
    2606:	4313      	orrs	r3, r2
    2608:	0600      	lsls	r0, r0, #24
    260a:	7ba9      	ldrb	r1, [r5, #14]
    260c:	4318      	orrs	r0, r3
    260e:	47b8      	blx	r7
    sample.voltage.senseC = adc_read(senseCPin);
    2610:	7c2b      	ldrb	r3, [r5, #16]
    2612:	7be9      	ldrb	r1, [r5, #15]
    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    2614:	8260      	strh	r0, [r4, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    2616:	7c68      	ldrb	r0, [r5, #17]
    2618:	021b      	lsls	r3, r3, #8
    261a:	430b      	orrs	r3, r1
    261c:	0400      	lsls	r0, r0, #16
    261e:	001a      	movs	r2, r3
    2620:	0003      	movs	r3, r0
    2622:	7ca8      	ldrb	r0, [r5, #18]
    2624:	4313      	orrs	r3, r2
    2626:	0600      	lsls	r0, r0, #24
    2628:	7ce9      	ldrb	r1, [r5, #19]
    262a:	4318      	orrs	r0, r3
    262c:	47b8      	blx	r7
    sample.voltage.senseD = adc_read(senseDPin);
    262e:	7d6b      	ldrb	r3, [r5, #21]
    2630:	7d29      	ldrb	r1, [r5, #20]

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    2632:	82a0      	strh	r0, [r4, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    2634:	7da8      	ldrb	r0, [r5, #22]
    2636:	021b      	lsls	r3, r3, #8
    2638:	430b      	orrs	r3, r1
    263a:	0400      	lsls	r0, r0, #16
    263c:	001a      	movs	r2, r3
    263e:	0003      	movs	r3, r0
    2640:	7de8      	ldrb	r0, [r5, #23]
    2642:	4313      	orrs	r3, r2
    2644:	0600      	lsls	r0, r0, #24
    2646:	7e29      	ldrb	r1, [r5, #24]
    2648:	4318      	orrs	r0, r3
    264a:	47b8      	blx	r7


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    264c:	2210      	movs	r2, #16
    264e:	4e84      	ldr	r6, [pc, #528]	; (2860 <sampleTick+0x2dc>)
    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);
    2650:	82e0      	strh	r0, [r4, #22]


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    2652:	88b3      	ldrh	r3, [r6, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    2654:	7e69      	ldrb	r1, [r5, #25]
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    2656:	4313      	orrs	r3, r2
    2658:	80b3      	strh	r3, [r6, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;
    265a:	2304      	movs	r3, #4
    265c:	70b3      	strb	r3, [r6, #2]

    sample.analogRaw = adc_read(analogAccelPin);
    265e:	7eab      	ldrb	r3, [r5, #26]
    2660:	7ee8      	ldrb	r0, [r5, #27]
    2662:	021b      	lsls	r3, r3, #8
    2664:	430b      	orrs	r3, r1
    2666:	0400      	lsls	r0, r0, #16
    2668:	4303      	orrs	r3, r0
    266a:	7f28      	ldrb	r0, [r5, #28]
    266c:	7f69      	ldrb	r1, [r5, #29]
    266e:	0600      	lsls	r0, r0, #24
    2670:	4318      	orrs	r0, r3
    2672:	47b8      	blx	r7
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    2674:	4b7b      	ldr	r3, [pc, #492]	; (2864 <sampleTick+0x2e0>)


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    2676:	8320      	strh	r0, [r4, #24]
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    2678:	18c0      	adds	r0, r0, r3
    267a:	4b74      	ldr	r3, [pc, #464]	; (284c <sampleTick+0x2c8>)
    267c:	4798      	blx	r3
    267e:	4a7a      	ldr	r2, [pc, #488]	; (2868 <sampleTick+0x2e4>)
    2680:	4d74      	ldr	r5, [pc, #464]	; (2854 <sampleTick+0x2d0>)
    2682:	4b7a      	ldr	r3, [pc, #488]	; (286c <sampleTick+0x2e8>)
    2684:	47a8      	blx	r5
    2686:	4b75      	ldr	r3, [pc, #468]	; (285c <sampleTick+0x2d8>)
    2688:	4798      	blx	r3

    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    268a:	2300      	movs	r3, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    268c:	2580      	movs	r5, #128	; 0x80

    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    268e:	61e0      	str	r0, [r4, #28]

    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    2690:	70b3      	strb	r3, [r6, #2]
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_12BIT;
    2692:	88b3      	ldrh	r3, [r6, #4]
    2694:	01ed      	lsls	r5, r5, #7
    2696:	b29b      	uxth	r3, r3
    2698:	80b3      	strh	r3, [r6, #4]
    269a:	4e75      	ldr	r6, [pc, #468]	; (2870 <sampleTick+0x2ec>)

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    269c:	2150      	movs	r1, #80	; 0x50
    269e:	6175      	str	r5, [r6, #20]
    26a0:	2002      	movs	r0, #2
    26a2:	4b74      	ldr	r3, [pc, #464]	; (2874 <sampleTick+0x2f0>)
    26a4:	4798      	blx	r3
    pinHigh(cs_baro);
    delay_us(600);
    26a6:	2096      	movs	r0, #150	; 0x96
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    26a8:	61b5      	str	r5, [r6, #24]
    26aa:	0080      	lsls	r0, r0, #2
    26ac:	4b72      	ldr	r3, [pc, #456]	; (2878 <sampleTick+0x2f4>)
    26ae:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    26b0:	4b72      	ldr	r3, [pc, #456]	; (287c <sampleTick+0x2f8>)
    26b2:	4798      	blx	r3

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    26b4:	2140      	movs	r1, #64	; 0x40

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    pinHigh(cs_baro);
    delay_us(600);
    uint32_t tempRaw = readMS5803AdcResults();
    26b6:	9003      	str	r0, [sp, #12]

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    26b8:	4b6e      	ldr	r3, [pc, #440]	; (2874 <sampleTick+0x2f0>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    26ba:	6175      	str	r5, [r6, #20]
    26bc:	2002      	movs	r0, #2
    26be:	4798      	blx	r3
    26c0:	0033      	movs	r3, r6
    26c2:	2280      	movs	r2, #128	; 0x80
    26c4:	3394      	adds	r3, #148	; 0x94
    26c6:	00d2      	lsls	r2, r2, #3

    u8_t byteOne;
    u8_t byteTwo;
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    26c8:	2182      	movs	r1, #130	; 0x82
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    26ca:	61b5      	str	r5, [r6, #24]
    26cc:	2000      	movs	r0, #0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    26ce:	601a      	str	r2, [r3, #0]
    26d0:	4b68      	ldr	r3, [pc, #416]	; (2874 <sampleTick+0x2f0>)
    26d2:	4798      	blx	r3
    byteOne = spiDataIn(ACCEL_SPI);
    26d4:	4f6a      	ldr	r7, [pc, #424]	; (2880 <sampleTick+0x2fc>)
    26d6:	2000      	movs	r0, #0
    26d8:	47b8      	blx	r7
    26da:	0005      	movs	r5, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    26dc:	2000      	movs	r0, #0
    26de:	47b8      	blx	r7
    sample.accelXint = twosComp(byteOne,byteTwo);
    26e0:	0200      	lsls	r0, r0, #8
    26e2:	4305      	orrs	r5, r0
    byteOne = spiDataIn(ACCEL_SPI);
    26e4:	2000      	movs	r0, #0
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelXint = twosComp(byteOne,byteTwo);
    26e6:	8425      	strh	r5, [r4, #32]
    byteOne = spiDataIn(ACCEL_SPI);
    26e8:	47b8      	blx	r7
    26ea:	0005      	movs	r5, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    26ec:	2000      	movs	r0, #0
    26ee:	47b8      	blx	r7
    sample.accelYint = twosComp(byteOne,byteTwo);
    26f0:	0200      	lsls	r0, r0, #8
    26f2:	4305      	orrs	r5, r0
    byteOne = spiDataIn(ACCEL_SPI);
    26f4:	2000      	movs	r0, #0
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelYint = twosComp(byteOne,byteTwo);
    26f6:	8525      	strh	r5, [r4, #40]	; 0x28
    byteOne = spiDataIn(ACCEL_SPI);
    26f8:	47b8      	blx	r7
    26fa:	0005      	movs	r5, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    26fc:	2000      	movs	r0, #0
    26fe:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2700:	0033      	movs	r3, r6
    2702:	2280      	movs	r2, #128	; 0x80
    2704:	3398      	adds	r3, #152	; 0x98
    2706:	00d2      	lsls	r2, r2, #3
    2708:	601a      	str	r2, [r3, #0]
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    270a:	2220      	movs	r2, #32
    270c:	5ea3      	ldrsh	r3, [r4, r2]
    sample.accelYint =  sample.accelYint >> 4;
    270e:	2128      	movs	r1, #40	; 0x28
    2710:	5e62      	ldrsh	r2, [r4, r1]
    sample.accelZint =  sample.accelZint >> 4;
    2712:	0200      	lsls	r0, r0, #8
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    sample.accelYint =  sample.accelYint >> 4;
    2714:	1112      	asrs	r2, r2, #4
    2716:	9201      	str	r2, [sp, #4]
    2718:	466a      	mov	r2, sp
    sample.accelZint =  sample.accelZint >> 4;
    271a:	4305      	orrs	r5, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    sample.accelYint =  sample.accelYint >> 4;
    271c:	8892      	ldrh	r2, [r2, #4]
    sample.accelZint =  sample.accelZint >> 4;
    271e:	b22d      	sxth	r5, r5
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    sample.accelYint =  sample.accelYint >> 4;
    2720:	8522      	strh	r2, [r4, #40]	; 0x28
    sample.accelZint =  sample.accelZint >> 4;
    2722:	112a      	asrs	r2, r5, #4
    2724:	9202      	str	r2, [sp, #8]
    2726:	466a      	mov	r2, sp
    2728:	8912      	ldrh	r2, [r2, #8]
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    272a:	111b      	asrs	r3, r3, #4
    272c:	8423      	strh	r3, [r4, #32]
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;
    272e:	8622      	strh	r2, [r4, #48]	; 0x30

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    2730:	0018      	movs	r0, r3
    2732:	4b46      	ldr	r3, [pc, #280]	; (284c <sampleTick+0x2c8>)
    2734:	4798      	blx	r3
    2736:	23fe      	movs	r3, #254	; 0xfe
    2738:	4d46      	ldr	r5, [pc, #280]	; (2854 <sampleTick+0x2d0>)
    273a:	2200      	movs	r2, #0
    273c:	059b      	lsls	r3, r3, #22
    273e:	47a8      	blx	r5
    2740:	4b46      	ldr	r3, [pc, #280]	; (285c <sampleTick+0x2d8>)
    2742:	4798      	blx	r3
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    2744:	4b41      	ldr	r3, [pc, #260]	; (284c <sampleTick+0x2c8>)

    sample.accelXint =  sample.accelXint >> 4;
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    2746:	6260      	str	r0, [r4, #36]	; 0x24
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    2748:	9801      	ldr	r0, [sp, #4]
    274a:	4798      	blx	r3
    274c:	23fe      	movs	r3, #254	; 0xfe
    274e:	2200      	movs	r2, #0
    2750:	059b      	lsls	r3, r3, #22
    2752:	47a8      	blx	r5
    2754:	4b41      	ldr	r3, [pc, #260]	; (285c <sampleTick+0x2d8>)
    2756:	4798      	blx	r3
    sample.accelZ = -sample.accelZint * BMI055_ACCEL_16G_DIV;
    2758:	9b02      	ldr	r3, [sp, #8]
    sample.accelXint =  sample.accelXint >> 4;
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    275a:	62e0      	str	r0, [r4, #44]	; 0x2c
    sample.accelZ = -sample.accelZint * BMI055_ACCEL_16G_DIV;
    275c:	4258      	negs	r0, r3
    275e:	4b3b      	ldr	r3, [pc, #236]	; (284c <sampleTick+0x2c8>)
    2760:	4798      	blx	r3
    2762:	23fe      	movs	r3, #254	; 0xfe
    2764:	2200      	movs	r2, #0
    2766:	059b      	lsls	r3, r3, #22
    2768:	47a8      	blx	r5
    276a:	4b3c      	ldr	r3, [pc, #240]	; (285c <sampleTick+0x2d8>)
    276c:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    276e:	2380      	movs	r3, #128	; 0x80
    2770:	00db      	lsls	r3, r3, #3

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    2772:	2182      	movs	r1, #130	; 0x82
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    sample.accelZ = -sample.accelZint * BMI055_ACCEL_16G_DIV;
    2774:	6360      	str	r0, [r4, #52]	; 0x34
    2776:	6173      	str	r3, [r6, #20]

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    2778:	2000      	movs	r0, #0
    277a:	4b3e      	ldr	r3, [pc, #248]	; (2874 <sampleTick+0x2f0>)
    277c:	4798      	blx	r3
    byteOne = spiDataIn(GYRO_SPI);
    277e:	2000      	movs	r0, #0
    2780:	47b8      	blx	r7
    2782:	0005      	movs	r5, r0
    byteTwo = spiDataIn(GYRO_SPI);
    2784:	2000      	movs	r0, #0
    2786:	47b8      	blx	r7
    sample.gyroXint = twosComp(byteOne,byteTwo);
    2788:	0200      	lsls	r0, r0, #8
    278a:	4305      	orrs	r5, r0
    byteOne = spiDataIn(GYRO_SPI);
    278c:	2000      	movs	r0, #0
    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroXint = twosComp(byteOne,byteTwo);
    278e:	8725      	strh	r5, [r4, #56]	; 0x38
    byteOne = spiDataIn(GYRO_SPI);
    2790:	47b8      	blx	r7
    2792:	0005      	movs	r5, r0
    byteTwo = spiDataIn(GYRO_SPI);
    2794:	2000      	movs	r0, #0
    2796:	47b8      	blx	r7
    sample.gyroYint = twosComp(byteOne,byteTwo);
    2798:	4b3a      	ldr	r3, [pc, #232]	; (2884 <sampleTick+0x300>)
    279a:	0200      	lsls	r0, r0, #8
    279c:	4305      	orrs	r5, r0
    byteOne = spiDataIn(GYRO_SPI);
    279e:	2000      	movs	r0, #0
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroYint = twosComp(byteOne,byteTwo);
    27a0:	87dd      	strh	r5, [r3, #62]	; 0x3e
    byteOne = spiDataIn(GYRO_SPI);
    27a2:	47b8      	blx	r7
    27a4:	0005      	movs	r5, r0
    byteTwo = spiDataIn(GYRO_SPI);
    27a6:	2000      	movs	r0, #0
    27a8:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    27aa:	2380      	movs	r3, #128	; 0x80
    27ac:	00db      	lsls	r3, r3, #3
    27ae:	61b3      	str	r3, [r6, #24]
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    27b0:	2238      	movs	r2, #56	; 0x38
    27b2:	5ea3      	ldrsh	r3, [r4, r2]
    sample.gyroYint = sample.gyroYint >> 4;
    27b4:	4a33      	ldr	r2, [pc, #204]	; (2884 <sampleTick+0x300>)
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    27b6:	111b      	asrs	r3, r3, #4
    27b8:	8723      	strh	r3, [r4, #56]	; 0x38
    sample.gyroYint = sample.gyroYint >> 4;
    27ba:	273e      	movs	r7, #62	; 0x3e
    27bc:	5fd7      	ldrsh	r7, [r2, r7]
    27be:	4a31      	ldr	r2, [pc, #196]	; (2884 <sampleTick+0x300>)
    27c0:	113f      	asrs	r7, r7, #4
    27c2:	87d7      	strh	r7, [r2, #62]	; 0x3e
    sample.gyroZint = sample.gyroZint >> 4;
    27c4:	0022      	movs	r2, r4
    27c6:	0200      	lsls	r0, r0, #8
    27c8:	4305      	orrs	r5, r0
    27ca:	b22d      	sxth	r5, r5
    27cc:	112d      	asrs	r5, r5, #4
    27ce:	3248      	adds	r2, #72	; 0x48
    27d0:	8015      	strh	r5, [r2, #0]

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    27d2:	0018      	movs	r0, r3
    27d4:	4b1d      	ldr	r3, [pc, #116]	; (284c <sampleTick+0x2c8>)
    27d6:	4798      	blx	r3
    27d8:	23fe      	movs	r3, #254	; 0xfe
    27da:	4e1e      	ldr	r6, [pc, #120]	; (2854 <sampleTick+0x2d0>)
    27dc:	2200      	movs	r2, #0
    27de:	059b      	lsls	r3, r3, #22
    27e0:	47b0      	blx	r6
    27e2:	4b1e      	ldr	r3, [pc, #120]	; (285c <sampleTick+0x2d8>)
    27e4:	4798      	blx	r3
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    27e6:	4b19      	ldr	r3, [pc, #100]	; (284c <sampleTick+0x2c8>)

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    sample.gyroZint = sample.gyroZint >> 4;

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    27e8:	63e0      	str	r0, [r4, #60]	; 0x3c
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    27ea:	0038      	movs	r0, r7
    27ec:	4798      	blx	r3
    27ee:	23fe      	movs	r3, #254	; 0xfe
    27f0:	2200      	movs	r2, #0
    27f2:	059b      	lsls	r3, r3, #22
    27f4:	47b0      	blx	r6
    27f6:	4b19      	ldr	r3, [pc, #100]	; (285c <sampleTick+0x2d8>)
    27f8:	4798      	blx	r3
    sample.gyroZ =  sample.gyroZint * BMI055_GYRO_2000DS_DIV;
    27fa:	4b14      	ldr	r3, [pc, #80]	; (284c <sampleTick+0x2c8>)
    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    sample.gyroZint = sample.gyroZint >> 4;

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    27fc:	6460      	str	r0, [r4, #68]	; 0x44
    sample.gyroZ =  sample.gyroZint * BMI055_GYRO_2000DS_DIV;
    27fe:	0028      	movs	r0, r5
    2800:	4798      	blx	r3
    2802:	23fe      	movs	r3, #254	; 0xfe
    2804:	2200      	movs	r2, #0
    2806:	059b      	lsls	r3, r3, #22
    2808:	47b0      	blx	r6
    280a:	4b14      	ldr	r3, [pc, #80]	; (285c <sampleTick+0x2d8>)
    280c:	4798      	blx	r3
    280e:	64e0      	str	r0, [r4, #76]	; 0x4c


    delay_us(400);
    2810:	20c8      	movs	r0, #200	; 0xc8
    2812:	4b19      	ldr	r3, [pc, #100]	; (2878 <sampleTick+0x2f4>)
    2814:	0040      	lsls	r0, r0, #1
    2816:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    2818:	4b18      	ldr	r3, [pc, #96]	; (287c <sampleTick+0x2f8>)
    281a:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    281c:	4a1a      	ldr	r2, [pc, #104]	; (2888 <sampleTick+0x304>)
    281e:	9903      	ldr	r1, [sp, #12]
    2820:	4b1a      	ldr	r3, [pc, #104]	; (288c <sampleTick+0x308>)
    2822:	4d1b      	ldr	r5, [pc, #108]	; (2890 <sampleTick+0x30c>)
    2824:	47a8      	blx	r5
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
    2826:	6d20      	ldr	r0, [r4, #80]	; 0x50
    2828:	4b1a      	ldr	r3, [pc, #104]	; (2894 <sampleTick+0x310>)
    282a:	4798      	blx	r3
    282c:	65a0      	str	r0, [r4, #88]	; 0x58
    282e:	65e1      	str	r1, [r4, #92]	; 0x5c
}
    2830:	b005      	add	sp, #20
    2832:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2834:	2000053c 	.word	0x2000053c
    2838:	200007e8 	.word	0x200007e8
    283c:	00000f39 	.word	0x00000f39
    2840:	2000052c 	.word	0x2000052c
    2844:	00000bf5 	.word	0x00000bf5
    2848:	000062f8 	.word	0x000062f8
    284c:	00005e85 	.word	0x00005e85
    2850:	a97e132b 	.word	0xa97e132b
    2854:	0000523d 	.word	0x0000523d
    2858:	3f65379f 	.word	0x3f65379f
    285c:	00006021 	.word	0x00006021
    2860:	42004000 	.word	0x42004000
    2864:	ffff41c9 	.word	0xffff41c9
    2868:	abb44e51 	.word	0xabb44e51
    286c:	3f73f290 	.word	0x3f73f290
    2870:	41004400 	.word	0x41004400
    2874:	000029a9 	.word	0x000029a9
    2878:	00000ebd 	.word	0x00000ebd
    287c:	000003ad 	.word	0x000003ad
    2880:	000029c1 	.word	0x000029c1
    2884:	200007ea 	.word	0x200007ea
    2888:	2000083c 	.word	0x2000083c
    288c:	20000838 	.word	0x20000838
    2890:	000003ed 	.word	0x000003ed
    2894:	0000048d 	.word	0x0000048d

00002898 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2898:	b570      	push	{r4, r5, r6, lr}
    289a:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    289c:	2301      	movs	r3, #1
    289e:	1ca6      	adds	r6, r4, #2
    28a0:	40b3      	lsls	r3, r6
    28a2:	480d      	ldr	r0, [pc, #52]	; (28d8 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    28a4:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    28a6:	6a01      	ldr	r1, [r0, #32]
    28a8:	430b      	orrs	r3, r1
    28aa:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    28ac:	2d00      	cmp	r5, #0
    28ae:	d003      	beq.n	28b8 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    28b0:	2107      	movs	r1, #7
    28b2:	0028      	movs	r0, r5
    28b4:	4b09      	ldr	r3, [pc, #36]	; (28dc <sercomClockEnable+0x44>)
    28b6:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    28b8:	22f0      	movs	r2, #240	; 0xf0
    28ba:	2080      	movs	r0, #128	; 0x80
    28bc:	0229      	lsls	r1, r5, #8
    28be:	0112      	lsls	r2, r2, #4
    28c0:	4011      	ands	r1, r2
    28c2:	01c0      	lsls	r0, r0, #7
    28c4:	4301      	orrs	r1, r0
    28c6:	0020      	movs	r0, r4
    28c8:	3014      	adds	r0, #20
    28ca:	223f      	movs	r2, #63	; 0x3f
    28cc:	0003      	movs	r3, r0
    28ce:	4013      	ands	r3, r2
    28d0:	4319      	orrs	r1, r3
    28d2:	4b03      	ldr	r3, [pc, #12]	; (28e0 <sercomClockEnable+0x48>)
    28d4:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    28d6:	bd70      	pop	{r4, r5, r6, pc}
    28d8:	40000400 	.word	0x40000400
    28dc:	00000e6d 	.word	0x00000e6d
    28e0:	40000c00 	.word	0x40000c00

000028e4 <sercomReset>:
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    28e4:	4b04      	ldr	r3, [pc, #16]	; (28f8 <sercomReset+0x14>)
    28e6:	0280      	lsls	r0, r0, #10
    28e8:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    28ea:	2301      	movs	r3, #1
    28ec:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    28ee:	6802      	ldr	r2, [r0, #0]
    28f0:	421a      	tst	r2, r3
    28f2:	d1fc      	bne.n	28ee <sercomReset+0xa>
}
    28f4:	4770      	bx	lr
    28f6:	46c0      	nop			; (mov r8, r8)
    28f8:	42000800 	.word	0x42000800

000028fc <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    28fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    28fe:	0004      	movs	r4, r0
    2900:	9300      	str	r3, [sp, #0]
    2902:	ab08      	add	r3, sp, #32
    2904:	781b      	ldrb	r3, [r3, #0]
    2906:	000e      	movs	r6, r1
    2908:	9301      	str	r3, [sp, #4]
    290a:	ab09      	add	r3, sp, #36	; 0x24
    290c:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    290e:	4b12      	ldr	r3, [pc, #72]	; (2958 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2910:	0015      	movs	r5, r2

    sercomReset(id);
    2912:	4798      	blx	r3
    2914:	4b11      	ldr	r3, [pc, #68]	; (295c <sercomSpiMasterInit+0x60>)
    2916:	02a4      	lsls	r4, r4, #10
    2918:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    291a:	2380      	movs	r3, #128	; 0x80
    291c:	029b      	lsls	r3, r3, #10
    291e:	6063      	str	r3, [r4, #4]
    2920:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    2922:	21c0      	movs	r1, #192	; 0xc0
    2924:	042d      	lsls	r5, r5, #16
    2926:	029b      	lsls	r3, r3, #10
    2928:	402b      	ands	r3, r5
    292a:	250e      	movs	r5, #14
    292c:	0536      	lsls	r6, r6, #20
    292e:	0389      	lsls	r1, r1, #14
    2930:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2932:	9e00      	ldr	r6, [sp, #0]
    2934:	431d      	orrs	r5, r3
    2936:	1e73      	subs	r3, r6, #1
    2938:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    293a:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    293c:	0772      	lsls	r2, r6, #29
    293e:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2940:	432a      	orrs	r2, r5
    2942:	1e59      	subs	r1, r3, #1
    2944:	418b      	sbcs	r3, r1
    2946:	0016      	movs	r6, r2
    2948:	071b      	lsls	r3, r3, #28
    294a:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    294c:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    294e:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    2950:	69e3      	ldr	r3, [r4, #28]
    2952:	075b      	lsls	r3, r3, #29
    2954:	d4fc      	bmi.n	2950 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    2956:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2958:	000028e5 	.word	0x000028e5
    295c:	42000800 	.word	0x42000800

00002960 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2960:	b570      	push	{r4, r5, r6, lr}
    2962:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    2964:	4b0c      	ldr	r3, [pc, #48]	; (2998 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2966:	000d      	movs	r5, r1
    2968:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    296a:	4798      	blx	r3
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    296c:	4b0b      	ldr	r3, [pc, #44]	; (299c <sercomUartInit+0x3c>)
    296e:	02b0      	lsls	r0, r6, #10
    2970:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2972:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2974:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2976:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    2978:	4b09      	ldr	r3, [pc, #36]	; (29a0 <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    297a:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    297c:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    297e:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2980:	0392      	lsls	r2, r2, #14
    2982:	4011      	ands	r1, r2
    2984:	4a07      	ldr	r2, [pc, #28]	; (29a4 <sercomUartInit+0x44>)

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2986:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2988:	0424      	lsls	r4, r4, #16

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    298a:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    298c:	4311      	orrs	r1, r2
    298e:	4023      	ands	r3, r4
    2990:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    2992:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    2994:	bd70      	pop	{r4, r5, r6, pc}
    2996:	46c0      	nop			; (mov r8, r8)
    2998:	000028e5 	.word	0x000028e5
    299c:	42000800 	.word	0x42000800
    29a0:	ffffb15b 	.word	0xffffb15b
    29a4:	40000006 	.word	0x40000006

000029a8 <spiDataOut>:
    29a8:	4b04      	ldr	r3, [pc, #16]	; (29bc <spiDataOut+0x14>)
    29aa:	0280      	lsls	r0, r0, #10
    29ac:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    return sercom(id)->SPI.DATA.reg;
}

void spiDataOut(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    29ae:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    29b0:	7e03      	ldrb	r3, [r0, #24]
    29b2:	075b      	lsls	r3, r3, #29
    29b4:	d5fc      	bpl.n	29b0 <spiDataOut+0x8>
    u8_t dummy = sercom(id)->SPI.DATA.reg;
    29b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
}
    29b8:	4770      	bx	lr
    29ba:	46c0      	nop			; (mov r8, r8)
    29bc:	42000800 	.word	0x42000800

000029c0 <spiDataIn>:
    29c0:	4b05      	ldr	r3, [pc, #20]	; (29d8 <spiDataIn+0x18>)
    29c2:	0280      	lsls	r0, r0, #10
    29c4:	18c0      	adds	r0, r0, r3

u8_t spiDataIn(SercomId id) {
    sercom(id)->SPI.DATA.reg = 0xFF;
    29c6:	23ff      	movs	r3, #255	; 0xff
    29c8:	6283      	str	r3, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    29ca:	7e03      	ldrb	r3, [r0, #24]
    29cc:	075b      	lsls	r3, r3, #29
    29ce:	d5fc      	bpl.n	29ca <spiDataIn+0xa>
    return sercom(id)->SPI.DATA.reg;
    29d0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    29d2:	b2c0      	uxtb	r0, r0
}
    29d4:	4770      	bx	lr
    29d6:	46c0      	nop			; (mov r8, r8)
    29d8:	42000800 	.word	0x42000800

000029dc <usartDataOut>:
    29dc:	4b04      	ldr	r3, [pc, #16]	; (29f0 <usartDataOut+0x14>)
    29de:	0280      	lsls	r0, r0, #10
    29e0:	18c0      	adds	r0, r0, r3

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    29e2:	b289      	uxth	r1, r1
    29e4:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    29e6:	7e03      	ldrb	r3, [r0, #24]
    29e8:	07db      	lsls	r3, r3, #31
    29ea:	d5fc      	bpl.n	29e6 <usartDataOut+0xa>
}
    29ec:	4770      	bx	lr
    29ee:	46c0      	nop			; (mov r8, r8)
    29f0:	42000800 	.word	0x42000800

000029f4 <usartDataIn>:
    29f4:	4b02      	ldr	r3, [pc, #8]	; (2a00 <usartDataIn+0xc>)
    29f6:	0280      	lsls	r0, r0, #10
    29f8:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    29fa:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    29fc:	b2c0      	uxtb	r0, r0
}
    29fe:	4770      	bx	lr
    2a00:	42000800 	.word	0x42000800

00002a04 <findMainAltitude>:
#include <boardDefines.h>


void findMainAltitude() {

    if (deploymentSettings.channelASettings.ENABLED & deploymentSettings.channelASettings.TYPE == MAIN_t) {
    2a04:	4a11      	ldr	r2, [pc, #68]	; (2a4c <findMainAltitude+0x48>)
    2a06:	7851      	ldrb	r1, [r2, #1]
    2a08:	0013      	movs	r3, r2
    2a0a:	2900      	cmp	r1, #0
    2a0c:	d105      	bne.n	2a1a <findMainAltitude+0x16>
    2a0e:	7811      	ldrb	r1, [r2, #0]
    2a10:	2900      	cmp	r1, #0
    2a12:	d002      	beq.n	2a1a <findMainAltitude+0x16>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelASettings.MAIN_DEPLOY;
    2a14:	8853      	ldrh	r3, [r2, #2]
    2a16:	8313      	strh	r3, [r2, #24]
        return;
    2a18:	e017      	b.n	2a4a <findMainAltitude+0x46>
    }
    if ((deploymentSettings.channelBSettings.ENABLED & deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    2a1a:	79da      	ldrb	r2, [r3, #7]
    2a1c:	2a00      	cmp	r2, #0
    2a1e:	d104      	bne.n	2a2a <findMainAltitude+0x26>
    2a20:	799a      	ldrb	r2, [r3, #6]
    2a22:	2a00      	cmp	r2, #0
    2a24:	d001      	beq.n	2a2a <findMainAltitude+0x26>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelBSettings.MAIN_DEPLOY;
    2a26:	891a      	ldrh	r2, [r3, #8]
    2a28:	e00e      	b.n	2a48 <findMainAltitude+0x44>
        return;
    }
    if ((deploymentSettings.channelCSettings.ENABLED & deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    2a2a:	7b5a      	ldrb	r2, [r3, #13]
    2a2c:	2a00      	cmp	r2, #0
    2a2e:	d104      	bne.n	2a3a <findMainAltitude+0x36>
    2a30:	7b1a      	ldrb	r2, [r3, #12]
    2a32:	2a00      	cmp	r2, #0
    2a34:	d001      	beq.n	2a3a <findMainAltitude+0x36>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelCSettings.MAIN_DEPLOY;
    2a36:	89da      	ldrh	r2, [r3, #14]
    2a38:	e006      	b.n	2a48 <findMainAltitude+0x44>
        return;
    }
    if ((deploymentSettings.channelDSettings.ENABLED & deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    2a3a:	7cda      	ldrb	r2, [r3, #19]
    2a3c:	2a00      	cmp	r2, #0
    2a3e:	d104      	bne.n	2a4a <findMainAltitude+0x46>
    2a40:	7c9a      	ldrb	r2, [r3, #18]
    2a42:	2a00      	cmp	r2, #0
    2a44:	d001      	beq.n	2a4a <findMainAltitude+0x46>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelDSettings.MAIN_DEPLOY;
    2a46:	8a9a      	ldrh	r2, [r3, #20]
    2a48:	831a      	strh	r2, [r3, #24]
        return;
    }


}
    2a4a:	4770      	bx	lr
    2a4c:	20000510 	.word	0x20000510

00002a50 <applyDefaultSettings>:
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2a50:	2096      	movs	r0, #150	; 0x96

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    2a52:	2200      	movs	r2, #0

}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    2a54:	2101      	movs	r1, #1
    2a56:	4b09      	ldr	r3, [pc, #36]	; (2a7c <applyDefaultSettings+0x2c>)
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2a58:	0040      	lsls	r0, r0, #1

}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    2a5a:	7019      	strb	r1, [r3, #0]
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    2a5c:	7059      	strb	r1, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    2a5e:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;
    2a60:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = true;
    2a62:	7199      	strb	r1, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    2a64:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2a66:	8118      	strh	r0, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = 0;
    2a68:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = false;
    2a6a:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = DROGUE_t;
    2a6c:	7359      	strb	r1, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = 0;
    2a6e:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = 0;
    2a70:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = false;
    2a72:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = MAIN_t;
    2a74:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = 300;
    2a76:	8298      	strh	r0, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = 0;
    2a78:	759a      	strb	r2, [r3, #22]
}
    2a7a:	4770      	bx	lr
    2a7c:	20000510 	.word	0x20000510

00002a80 <putSettings>:

void putSettings() {
    2a80:	b500      	push	{lr}
    2a82:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    2a84:	4669      	mov	r1, sp
    settings[1] = deploymentSettings.channelASettings.TYPE;
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    2a86:	4668      	mov	r0, sp

void putSettings() {

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    2a88:	4b17      	ldr	r3, [pc, #92]	; (2ae8 <putSettings+0x68>)
    2a8a:	781a      	ldrb	r2, [r3, #0]
    2a8c:	700a      	strb	r2, [r1, #0]
    settings[1] = deploymentSettings.channelASettings.TYPE;
    2a8e:	785a      	ldrb	r2, [r3, #1]
    2a90:	704a      	strb	r2, [r1, #1]
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    2a92:	885a      	ldrh	r2, [r3, #2]
    2a94:	0a11      	lsrs	r1, r2, #8
    2a96:	7081      	strb	r1, [r0, #2]
    settings[3] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 0;
    2a98:	70c2      	strb	r2, [r0, #3]
    settings[4] = deploymentSettings.channelASettings.APPOGE_DELAY;
    2a9a:	791a      	ldrb	r2, [r3, #4]
    2a9c:	7102      	strb	r2, [r0, #4]

    settings[5] = deploymentSettings.channelBSettings.ENABLED;
    2a9e:	799a      	ldrb	r2, [r3, #6]
    2aa0:	7142      	strb	r2, [r0, #5]
    settings[6] = deploymentSettings.channelBSettings.TYPE;
    2aa2:	79da      	ldrb	r2, [r3, #7]
    2aa4:	7182      	strb	r2, [r0, #6]
    settings[7] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 8;
    2aa6:	891a      	ldrh	r2, [r3, #8]
    2aa8:	0a11      	lsrs	r1, r2, #8
    2aaa:	71c1      	strb	r1, [r0, #7]
    settings[8] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 0;
    2aac:	7202      	strb	r2, [r0, #8]
    settings[9] = deploymentSettings.channelBSettings.APPOGE_DELAY;
    2aae:	7a9a      	ldrb	r2, [r3, #10]
    2ab0:	7242      	strb	r2, [r0, #9]

    settings[10] = deploymentSettings.channelCSettings.ENABLED;
    2ab2:	7b1a      	ldrb	r2, [r3, #12]
    2ab4:	7282      	strb	r2, [r0, #10]
    settings[11] = deploymentSettings.channelCSettings.TYPE;
    2ab6:	7b5a      	ldrb	r2, [r3, #13]
    2ab8:	72c2      	strb	r2, [r0, #11]
    settings[12] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 8;
    2aba:	89da      	ldrh	r2, [r3, #14]
    2abc:	0a11      	lsrs	r1, r2, #8
    2abe:	7301      	strb	r1, [r0, #12]
    settings[13] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 0;
    2ac0:	7342      	strb	r2, [r0, #13]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;
    2ac2:	7c1a      	ldrb	r2, [r3, #16]
    2ac4:	7382      	strb	r2, [r0, #14]

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    2ac6:	7c9a      	ldrb	r2, [r3, #18]
    2ac8:	73c2      	strb	r2, [r0, #15]
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    2aca:	7cda      	ldrb	r2, [r3, #19]
    2acc:	7402      	strb	r2, [r0, #16]
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    2ace:	8a9a      	ldrh	r2, [r3, #20]
    2ad0:	0a11      	lsrs	r1, r2, #8
    2ad2:	7441      	strb	r1, [r0, #17]
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    2ad4:	7482      	strb	r2, [r0, #18]
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    2ad6:	7d9b      	ldrb	r3, [r3, #22]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    2ad8:	4669      	mov	r1, sp
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    2ada:	74c3      	strb	r3, [r0, #19]

    settings[20] = 0x00;
    2adc:	2000      	movs	r0, #0

    AT25SEWritePage(0x00,settings);
    2ade:	4b03      	ldr	r3, [pc, #12]	; (2aec <putSettings+0x6c>)
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;

    settings[20] = 0x00;
    2ae0:	7508      	strb	r0, [r1, #20]

    AT25SEWritePage(0x00,settings);
    2ae2:	4798      	blx	r3
}
    2ae4:	b041      	add	sp, #260	; 0x104
    2ae6:	bd00      	pop	{pc}
    2ae8:	20000510 	.word	0x20000510
    2aec:	0000029d 	.word	0x0000029d

00002af0 <getSettings>:




void getSettings() {
    2af0:	b500      	push	{lr}
    2af2:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);
    2af4:	4669      	mov	r1, sp
    2af6:	4b2c      	ldr	r3, [pc, #176]	; (2ba8 <getSettings+0xb8>)
    2af8:	2000      	movs	r0, #0
    2afa:	4798      	blx	r3

    deploymentSettings.channelASettings.ENABLED = settings[0];
    2afc:	466a      	mov	r2, sp
    2afe:	7812      	ldrb	r2, [r2, #0]
    2b00:	4b2a      	ldr	r3, [pc, #168]	; (2bac <getSettings+0xbc>)
    2b02:	1e51      	subs	r1, r2, #1
    2b04:	418a      	sbcs	r2, r1
    2b06:	701a      	strb	r2, [r3, #0]
    deploymentSettings.channelASettings.TYPE = settings[1];
    2b08:	466a      	mov	r2, sp
    2b0a:	7852      	ldrb	r2, [r2, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    2b0c:	4669      	mov	r1, sp
    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);

    deploymentSettings.channelASettings.ENABLED = settings[0];
    deploymentSettings.channelASettings.TYPE = settings[1];
    2b0e:	705a      	strb	r2, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    2b10:	466a      	mov	r2, sp
    2b12:	7892      	ldrb	r2, [r2, #2]
    2b14:	78c9      	ldrb	r1, [r1, #3]
    2b16:	0212      	lsls	r2, r2, #8
    2b18:	430a      	orrs	r2, r1
    2b1a:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];
    2b1c:	466a      	mov	r2, sp
    2b1e:	7912      	ldrb	r2, [r2, #4]
    2b20:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    2b22:	466a      	mov	r2, sp
    2b24:	7952      	ldrb	r2, [r2, #5]
    2b26:	1e51      	subs	r1, r2, #1
    2b28:	418a      	sbcs	r2, r1
    2b2a:	719a      	strb	r2, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = settings[6];
    2b2c:	466a      	mov	r2, sp
    2b2e:	7992      	ldrb	r2, [r2, #6]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    2b30:	4669      	mov	r1, sp
    deploymentSettings.channelASettings.TYPE = settings[1];
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    deploymentSettings.channelBSettings.TYPE = settings[6];
    2b32:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    2b34:	466a      	mov	r2, sp
    2b36:	79d2      	ldrb	r2, [r2, #7]
    2b38:	7a09      	ldrb	r1, [r1, #8]
    2b3a:	0212      	lsls	r2, r2, #8
    2b3c:	430a      	orrs	r2, r1
    2b3e:	811a      	strh	r2, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];
    2b40:	466a      	mov	r2, sp
    2b42:	7a52      	ldrb	r2, [r2, #9]
    2b44:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    2b46:	466a      	mov	r2, sp
    2b48:	7a92      	ldrb	r2, [r2, #10]
    2b4a:	1e51      	subs	r1, r2, #1
    2b4c:	418a      	sbcs	r2, r1
    2b4e:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = settings[11];
    2b50:	466a      	mov	r2, sp
    2b52:	7ad2      	ldrb	r2, [r2, #11]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    2b54:	4669      	mov	r1, sp
    deploymentSettings.channelBSettings.TYPE = settings[6];
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    deploymentSettings.channelCSettings.TYPE = settings[11];
    2b56:	735a      	strb	r2, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    2b58:	466a      	mov	r2, sp
    2b5a:	7b12      	ldrb	r2, [r2, #12]
    2b5c:	7b49      	ldrb	r1, [r1, #13]
    2b5e:	0212      	lsls	r2, r2, #8
    2b60:	430a      	orrs	r2, r1
    2b62:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];
    2b64:	466a      	mov	r2, sp
    2b66:	7b92      	ldrb	r2, [r2, #14]
    2b68:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    2b6a:	466a      	mov	r2, sp
    2b6c:	7bd2      	ldrb	r2, [r2, #15]
    2b6e:	1e51      	subs	r1, r2, #1
    2b70:	418a      	sbcs	r2, r1
    2b72:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = settings[16];
    2b74:	466a      	mov	r2, sp
    2b76:	7c12      	ldrb	r2, [r2, #16]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    2b78:	4669      	mov	r1, sp
    deploymentSettings.channelCSettings.TYPE = settings[11];
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    deploymentSettings.channelDSettings.TYPE = settings[16];
    2b7a:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    2b7c:	466a      	mov	r2, sp
    2b7e:	7c52      	ldrb	r2, [r2, #17]
    2b80:	7c89      	ldrb	r1, [r1, #18]
    2b82:	0212      	lsls	r2, r2, #8
    2b84:	430a      	orrs	r2, r1
    2b86:	829a      	strh	r2, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = settings[19];
    2b88:	466a      	mov	r2, sp
    2b8a:	7cd2      	ldrb	r2, [r2, #19]
    2b8c:	759a      	strb	r2, [r3, #22]


    if (settings[20] == 0xFF) {
    2b8e:	466b      	mov	r3, sp
    2b90:	7d1b      	ldrb	r3, [r3, #20]
    2b92:	2bff      	cmp	r3, #255	; 0xff
    2b94:	d103      	bne.n	2b9e <getSettings+0xae>
        applyDefaultSettings();
    2b96:	4b06      	ldr	r3, [pc, #24]	; (2bb0 <getSettings+0xc0>)
    2b98:	4798      	blx	r3
        putSettings();
    2b9a:	4b06      	ldr	r3, [pc, #24]	; (2bb4 <getSettings+0xc4>)
    2b9c:	4798      	blx	r3
    }

    findMainAltitude();
    2b9e:	4b06      	ldr	r3, [pc, #24]	; (2bb8 <getSettings+0xc8>)
    2ba0:	4798      	blx	r3

}
    2ba2:	b041      	add	sp, #260	; 0x104
    2ba4:	bd00      	pop	{pc}
    2ba6:	46c0      	nop			; (mov r8, r8)
    2ba8:	00000355 	.word	0x00000355
    2bac:	20000510 	.word	0x20000510
    2bb0:	00002a51 	.word	0x00002a51
    2bb4:	00002a81 	.word	0x00002a81
    2bb8:	00002a05 	.word	0x00002a05

00002bbc <sendFlightLogs>:
#include <util.h>
#include <boardDefines.h>

void sendFlightLogs() {
    2bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    2bbe:	2400      	movs	r4, #0

        if (isFlightLogged(flightLog)) {
    2bc0:	0020      	movs	r0, r4
    2bc2:	4b1e      	ldr	r3, [pc, #120]	; (2c3c <sendFlightLogs+0x80>)
    2bc4:	4798      	blx	r3
    2bc6:	2800      	cmp	r0, #0
    2bc8:	d003      	beq.n	2bd2 <sendFlightLogs+0x16>

            usartDataOut(USART3, flightLog);
    2bca:	0021      	movs	r1, r4
    2bcc:	2003      	movs	r0, #3
    2bce:	4b1c      	ldr	r3, [pc, #112]	; (2c40 <sendFlightLogs+0x84>)
    2bd0:	4798      	blx	r3
#include <boardDefines.h>

void sendFlightLogs() {

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    2bd2:	3401      	adds	r4, #1
    2bd4:	b2e4      	uxtb	r4, r4
    2bd6:	2c14      	cmp	r4, #20
    2bd8:	d1f2      	bne.n	2bc0 <sendFlightLogs+0x4>

            usartDataOut(USART3, flightLog);
        }
    }
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);
    2bda:	21ff      	movs	r1, #255	; 0xff
    2bdc:	2003      	movs	r0, #3
    2bde:	4c18      	ldr	r4, [pc, #96]	; (2c40 <sendFlightLogs+0x84>)
    2be0:	47a0      	blx	r4

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2be2:	4a18      	ldr	r2, [pc, #96]	; (2c44 <sendFlightLogs+0x88>)
    2be4:	7e13      	ldrb	r3, [r2, #24]
    2be6:	075b      	lsls	r3, r3, #29
    2be8:	d5fc      	bpl.n	2be4 <sendFlightLogs+0x28>
    volatile u8_t flightToRead = usartDataIn(USART3);
    2bea:	4b17      	ldr	r3, [pc, #92]	; (2c48 <sendFlightLogs+0x8c>)
    2bec:	2003      	movs	r0, #3
    2bee:	4798      	blx	r3
    2bf0:	466b      	mov	r3, sp
    2bf2:	71d8      	strb	r0, [r3, #7]


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2bf4:	79d8      	ldrb	r0, [r3, #7]
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    volatile u8_t flightToRead = usartDataIn(USART3);
    2bf6:	1ddd      	adds	r5, r3, #7


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2bf8:	b2c0      	uxtb	r0, r0
    2bfa:	4b14      	ldr	r3, [pc, #80]	; (2c4c <sendFlightLogs+0x90>)
    2bfc:	4798      	blx	r3
    2bfe:	0007      	movs	r7, r0
    u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
    2c00:	7828      	ldrb	r0, [r5, #0]
    2c02:	4b13      	ldr	r3, [pc, #76]	; (2c50 <sendFlightLogs+0x94>)
    2c04:	b2c0      	uxtb	r0, r0
    2c06:	4798      	blx	r3
    2c08:	0006      	movs	r6, r0

    //inform of page numbers
    u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    2c0a:	1bc5      	subs	r5, r0, r7
    2c0c:	0a2d      	lsrs	r5, r5, #8
    usartDataOut(USART3, pagesToSend >> 0);
    2c0e:	b2e9      	uxtb	r1, r5
    2c10:	2003      	movs	r0, #3
    2c12:	47a0      	blx	r4
    usartDataOut(USART3, pagesToSend >> 8);
    2c14:	b2a9      	uxth	r1, r5
    2c16:	0a09      	lsrs	r1, r1, #8
    2c18:	2003      	movs	r0, #3
    2c1a:	47a0      	blx	r4

    //send flight end address for % full
    usartDataOut(USART3, flightEndAddress >> 0);
    2c1c:	b2f1      	uxtb	r1, r6
    2c1e:	2003      	movs	r0, #3
    2c20:	47a0      	blx	r4
    usartDataOut(USART3, flightEndAddress >> 8);
    2c22:	0a31      	lsrs	r1, r6, #8
    2c24:	b2c9      	uxtb	r1, r1
    2c26:	2003      	movs	r0, #3
    2c28:	47a0      	blx	r4
    usartDataOut(USART3, flightEndAddress >> 16);
    2c2a:	0c31      	lsrs	r1, r6, #16
    2c2c:	b2c9      	uxtb	r1, r1
    2c2e:	2003      	movs	r0, #3
    2c30:	47a0      	blx	r4

    //USART out the flights pages
    sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    2c32:	0031      	movs	r1, r6
    2c34:	0038      	movs	r0, r7
    2c36:	4b07      	ldr	r3, [pc, #28]	; (2c54 <sendFlightLogs+0x98>)
    2c38:	4798      	blx	r3

}
    2c3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2c3c:	00002465 	.word	0x00002465
    2c40:	000029dd 	.word	0x000029dd
    2c44:	42001400 	.word	0x42001400
    2c48:	000029f5 	.word	0x000029f5
    2c4c:	00002415 	.word	0x00002415
    2c50:	0000243d 	.word	0x0000243d
    2c54:	00000aa1 	.word	0x00000aa1

00002c58 <attemptConnection>:

void attemptConnection() {
    2c58:	b570      	push	{r4, r5, r6, lr}

    if (USARTconnectionAvaliable()) {
    2c5a:	4b14      	ldr	r3, [pc, #80]	; (2cac <attemptConnection+0x54>)
    2c5c:	4798      	blx	r3
    2c5e:	2800      	cmp	r0, #0
    2c60:	d022      	beq.n	2ca8 <attemptConnection+0x50>

        flightState = flightIdle;
    2c62:	2201      	movs	r2, #1
    2c64:	4b12      	ldr	r3, [pc, #72]	; (2cb0 <attemptConnection+0x58>)
    2c66:	701a      	strb	r2, [r3, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2c68:	4a12      	ldr	r2, [pc, #72]	; (2cb4 <attemptConnection+0x5c>)
    2c6a:	7e13      	ldrb	r3, [r2, #24]
    2c6c:	075b      	lsls	r3, r3, #29
    2c6e:	d5fc      	bpl.n	2c6a <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    2c70:	2003      	movs	r0, #3
    2c72:	4b11      	ldr	r3, [pc, #68]	; (2cb8 <attemptConnection+0x60>)
    2c74:	4798      	blx	r3
    2c76:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    2c78:	2c4c      	cmp	r4, #76	; 0x4c
    2c7a:	d102      	bne.n	2c82 <attemptConnection+0x2a>

            sendFlightLogs();
    2c7c:	4b0f      	ldr	r3, [pc, #60]	; (2cbc <attemptConnection+0x64>)
    2c7e:	4798      	blx	r3
    2c80:	e012      	b.n	2ca8 <attemptConnection+0x50>
        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    2c82:	2845      	cmp	r0, #69	; 0x45
    2c84:	d110      	bne.n	2ca8 <attemptConnection+0x50>

            //getSettings();

            AT25SFChipErase();
    2c86:	4e0e      	ldr	r6, [pc, #56]	; (2cc0 <attemptConnection+0x68>)
    2c88:	47b0      	blx	r6
            AT25SFHoldTillReady();
    2c8a:	4d0e      	ldr	r5, [pc, #56]	; (2cc4 <attemptConnection+0x6c>)
    2c8c:	47a8      	blx	r5
            delay_ms(100);
    2c8e:	2064      	movs	r0, #100	; 0x64
    2c90:	4b0d      	ldr	r3, [pc, #52]	; (2cc8 <attemptConnection+0x70>)
    2c92:	4798      	blx	r3
            AT25SFChipErase();
    2c94:	47b0      	blx	r6

            AT25SFHoldTillReady();
    2c96:	47a8      	blx	r5

            //getSettings();

            usartDataOut(USART3, 'E');
    2c98:	2003      	movs	r0, #3
    2c9a:	4b0c      	ldr	r3, [pc, #48]	; (2ccc <attemptConnection+0x74>)
    2c9c:	0021      	movs	r1, r4
    2c9e:	4798      	blx	r3
            beep(400);
    2ca0:	20c8      	movs	r0, #200	; 0xc8
    2ca2:	4b0b      	ldr	r3, [pc, #44]	; (2cd0 <attemptConnection+0x78>)
    2ca4:	0040      	lsls	r0, r0, #1
    2ca6:	4798      	blx	r3


        }
    }

}
    2ca8:	bd70      	pop	{r4, r5, r6, pc}
    2caa:	46c0      	nop			; (mov r8, r8)
    2cac:	00000a6d 	.word	0x00000a6d
    2cb0:	200006a0 	.word	0x200006a0
    2cb4:	42001400 	.word	0x42001400
    2cb8:	000029f5 	.word	0x000029f5
    2cbc:	00002bbd 	.word	0x00002bbd
    2cc0:	00000219 	.word	0x00000219
    2cc4:	000001e5 	.word	0x000001e5
    2cc8:	00000eed 	.word	0x00000eed
    2ccc:	000029dd 	.word	0x000029dd
    2cd0:	00000c5d 	.word	0x00000c5d

00002cd4 <pow>:
    2cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cd6:	465f      	mov	r7, fp
    2cd8:	464d      	mov	r5, r9
    2cda:	4656      	mov	r6, sl
    2cdc:	4644      	mov	r4, r8
    2cde:	b4f0      	push	{r4, r5, r6, r7}
    2ce0:	b091      	sub	sp, #68	; 0x44
    2ce2:	001f      	movs	r7, r3
    2ce4:	0004      	movs	r4, r0
    2ce6:	000d      	movs	r5, r1
    2ce8:	0016      	movs	r6, r2
    2cea:	f000 f9af 	bl	304c <__ieee754_pow>
    2cee:	4bcf      	ldr	r3, [pc, #828]	; (302c <pow+0x358>)
    2cf0:	9002      	str	r0, [sp, #8]
    2cf2:	9103      	str	r1, [sp, #12]
    2cf4:	469b      	mov	fp, r3
    2cf6:	781b      	ldrb	r3, [r3, #0]
    2cf8:	b25b      	sxtb	r3, r3
    2cfa:	4699      	mov	r9, r3
    2cfc:	3301      	adds	r3, #1
    2cfe:	d04f      	beq.n	2da0 <pow+0xcc>
    2d00:	0032      	movs	r2, r6
    2d02:	003b      	movs	r3, r7
    2d04:	0030      	movs	r0, r6
    2d06:	0039      	movs	r1, r7
    2d08:	f003 f866 	bl	5dd8 <__aeabi_dcmpun>
    2d0c:	9000      	str	r0, [sp, #0]
    2d0e:	2800      	cmp	r0, #0
    2d10:	d146      	bne.n	2da0 <pow+0xcc>
    2d12:	0022      	movs	r2, r4
    2d14:	002b      	movs	r3, r5
    2d16:	0020      	movs	r0, r4
    2d18:	0029      	movs	r1, r5
    2d1a:	f003 f85d 	bl	5dd8 <__aeabi_dcmpun>
    2d1e:	2200      	movs	r2, #0
    2d20:	4682      	mov	sl, r0
    2d22:	2800      	cmp	r0, #0
    2d24:	d134      	bne.n	2d90 <pow+0xbc>
    2d26:	2300      	movs	r3, #0
    2d28:	0020      	movs	r0, r4
    2d2a:	0029      	movs	r1, r5
    2d2c:	f001 f988 	bl	4040 <__aeabi_dcmpeq>
    2d30:	2800      	cmp	r0, #0
    2d32:	d03a      	beq.n	2daa <pow+0xd6>
    2d34:	2200      	movs	r2, #0
    2d36:	2300      	movs	r3, #0
    2d38:	0030      	movs	r0, r6
    2d3a:	0039      	movs	r1, r7
    2d3c:	f001 f980 	bl	4040 <__aeabi_dcmpeq>
    2d40:	9005      	str	r0, [sp, #20]
    2d42:	2800      	cmp	r0, #0
    2d44:	d100      	bne.n	2d48 <pow+0x74>
    2d46:	e074      	b.n	2e32 <pow+0x15e>
    2d48:	ab06      	add	r3, sp, #24
    2d4a:	4698      	mov	r8, r3
    2d4c:	2301      	movs	r3, #1
    2d4e:	4642      	mov	r2, r8
    2d50:	9306      	str	r3, [sp, #24]
    2d52:	4bb7      	ldr	r3, [pc, #732]	; (3030 <pow+0x35c>)
    2d54:	6053      	str	r3, [r2, #4]
    2d56:	4643      	mov	r3, r8
    2d58:	4652      	mov	r2, sl
    2d5a:	609c      	str	r4, [r3, #8]
    2d5c:	60dd      	str	r5, [r3, #12]
    2d5e:	621a      	str	r2, [r3, #32]
    2d60:	611e      	str	r6, [r3, #16]
    2d62:	615f      	str	r7, [r3, #20]
    2d64:	4642      	mov	r2, r8
    2d66:	2300      	movs	r3, #0
    2d68:	2400      	movs	r4, #0
    2d6a:	6193      	str	r3, [r2, #24]
    2d6c:	61d4      	str	r4, [r2, #28]
    2d6e:	464b      	mov	r3, r9
    2d70:	2b00      	cmp	r3, #0
    2d72:	d100      	bne.n	2d76 <pow+0xa2>
    2d74:	e094      	b.n	2ea0 <pow+0x1cc>
    2d76:	2300      	movs	r3, #0
    2d78:	4cae      	ldr	r4, [pc, #696]	; (3034 <pow+0x360>)
    2d7a:	9300      	str	r3, [sp, #0]
    2d7c:	9401      	str	r4, [sp, #4]
    2d7e:	9800      	ldr	r0, [sp, #0]
    2d80:	9901      	ldr	r1, [sp, #4]
    2d82:	b011      	add	sp, #68	; 0x44
    2d84:	bc3c      	pop	{r2, r3, r4, r5}
    2d86:	4690      	mov	r8, r2
    2d88:	4699      	mov	r9, r3
    2d8a:	46a2      	mov	sl, r4
    2d8c:	46ab      	mov	fp, r5
    2d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d90:	2300      	movs	r3, #0
    2d92:	0030      	movs	r0, r6
    2d94:	0039      	movs	r1, r7
    2d96:	f001 f953 	bl	4040 <__aeabi_dcmpeq>
    2d9a:	2800      	cmp	r0, #0
    2d9c:	d000      	beq.n	2da0 <pow+0xcc>
    2d9e:	e0eb      	b.n	2f78 <pow+0x2a4>
    2da0:	9b02      	ldr	r3, [sp, #8]
    2da2:	9c03      	ldr	r4, [sp, #12]
    2da4:	9300      	str	r3, [sp, #0]
    2da6:	9401      	str	r4, [sp, #4]
    2da8:	e7e9      	b.n	2d7e <pow+0xaa>
    2daa:	9802      	ldr	r0, [sp, #8]
    2dac:	9903      	ldr	r1, [sp, #12]
    2dae:	f000 ff7d 	bl	3cac <finite>
    2db2:	4681      	mov	r9, r0
    2db4:	2800      	cmp	r0, #0
    2db6:	d100      	bne.n	2dba <pow+0xe6>
    2db8:	e086      	b.n	2ec8 <pow+0x1f4>
    2dba:	9802      	ldr	r0, [sp, #8]
    2dbc:	9903      	ldr	r1, [sp, #12]
    2dbe:	2200      	movs	r2, #0
    2dc0:	2300      	movs	r3, #0
    2dc2:	f001 f93d 	bl	4040 <__aeabi_dcmpeq>
    2dc6:	2800      	cmp	r0, #0
    2dc8:	d0ea      	beq.n	2da0 <pow+0xcc>
    2dca:	0020      	movs	r0, r4
    2dcc:	0029      	movs	r1, r5
    2dce:	f000 ff6d 	bl	3cac <finite>
    2dd2:	9a02      	ldr	r2, [sp, #8]
    2dd4:	9b03      	ldr	r3, [sp, #12]
    2dd6:	9200      	str	r2, [sp, #0]
    2dd8:	9301      	str	r3, [sp, #4]
    2dda:	2800      	cmp	r0, #0
    2ddc:	d0cf      	beq.n	2d7e <pow+0xaa>
    2dde:	0030      	movs	r0, r6
    2de0:	0039      	movs	r1, r7
    2de2:	f000 ff63 	bl	3cac <finite>
    2de6:	9a02      	ldr	r2, [sp, #8]
    2de8:	9b03      	ldr	r3, [sp, #12]
    2dea:	9200      	str	r2, [sp, #0]
    2dec:	9301      	str	r3, [sp, #4]
    2dee:	2800      	cmp	r0, #0
    2df0:	d0c5      	beq.n	2d7e <pow+0xaa>
    2df2:	ab06      	add	r3, sp, #24
    2df4:	4698      	mov	r8, r3
    2df6:	2304      	movs	r3, #4
    2df8:	4642      	mov	r2, r8
    2dfa:	9306      	str	r3, [sp, #24]
    2dfc:	4b8c      	ldr	r3, [pc, #560]	; (3030 <pow+0x35c>)
    2dfe:	6094      	str	r4, [r2, #8]
    2e00:	60d5      	str	r5, [r2, #12]
    2e02:	6053      	str	r3, [r2, #4]
    2e04:	2300      	movs	r3, #0
    2e06:	2400      	movs	r4, #0
    2e08:	6213      	str	r3, [r2, #32]
    2e0a:	2300      	movs	r3, #0
    2e0c:	6193      	str	r3, [r2, #24]
    2e0e:	61d4      	str	r4, [r2, #28]
    2e10:	465b      	mov	r3, fp
    2e12:	781b      	ldrb	r3, [r3, #0]
    2e14:	6116      	str	r6, [r2, #16]
    2e16:	6157      	str	r7, [r2, #20]
    2e18:	b25b      	sxtb	r3, r3
    2e1a:	2b02      	cmp	r3, #2
    2e1c:	d004      	beq.n	2e28 <pow+0x154>
    2e1e:	4640      	mov	r0, r8
    2e20:	f000 ff4e 	bl	3cc0 <matherr>
    2e24:	2800      	cmp	r0, #0
    2e26:	d140      	bne.n	2eaa <pow+0x1d6>
    2e28:	f003 f9a4 	bl	6174 <__errno>
    2e2c:	2322      	movs	r3, #34	; 0x22
    2e2e:	6003      	str	r3, [r0, #0]
    2e30:	e03b      	b.n	2eaa <pow+0x1d6>
    2e32:	0030      	movs	r0, r6
    2e34:	0039      	movs	r1, r7
    2e36:	f000 ff39 	bl	3cac <finite>
    2e3a:	9a02      	ldr	r2, [sp, #8]
    2e3c:	9b03      	ldr	r3, [sp, #12]
    2e3e:	9200      	str	r2, [sp, #0]
    2e40:	9301      	str	r3, [sp, #4]
    2e42:	2800      	cmp	r0, #0
    2e44:	d09b      	beq.n	2d7e <pow+0xaa>
    2e46:	2200      	movs	r2, #0
    2e48:	2300      	movs	r3, #0
    2e4a:	0030      	movs	r0, r6
    2e4c:	0039      	movs	r1, r7
    2e4e:	f001 f8fd 	bl	404c <__aeabi_dcmplt>
    2e52:	2800      	cmp	r0, #0
    2e54:	d100      	bne.n	2e58 <pow+0x184>
    2e56:	e792      	b.n	2d7e <pow+0xaa>
    2e58:	ab06      	add	r3, sp, #24
    2e5a:	4698      	mov	r8, r3
    2e5c:	2301      	movs	r3, #1
    2e5e:	4642      	mov	r2, r8
    2e60:	9306      	str	r3, [sp, #24]
    2e62:	4b73      	ldr	r3, [pc, #460]	; (3030 <pow+0x35c>)
    2e64:	6053      	str	r3, [r2, #4]
    2e66:	4643      	mov	r3, r8
    2e68:	9a05      	ldr	r2, [sp, #20]
    2e6a:	609c      	str	r4, [r3, #8]
    2e6c:	60dd      	str	r5, [r3, #12]
    2e6e:	621a      	str	r2, [r3, #32]
    2e70:	611e      	str	r6, [r3, #16]
    2e72:	615f      	str	r7, [r3, #20]
    2e74:	465b      	mov	r3, fp
    2e76:	781b      	ldrb	r3, [r3, #0]
    2e78:	b25b      	sxtb	r3, r3
    2e7a:	2b00      	cmp	r3, #0
    2e7c:	d00b      	beq.n	2e96 <pow+0x1c2>
    2e7e:	2000      	movs	r0, #0
    2e80:	4642      	mov	r2, r8
    2e82:	496d      	ldr	r1, [pc, #436]	; (3038 <pow+0x364>)
    2e84:	6190      	str	r0, [r2, #24]
    2e86:	61d1      	str	r1, [r2, #28]
    2e88:	2b02      	cmp	r3, #2
    2e8a:	d109      	bne.n	2ea0 <pow+0x1cc>
    2e8c:	f003 f972 	bl	6174 <__errno>
    2e90:	2321      	movs	r3, #33	; 0x21
    2e92:	6003      	str	r3, [r0, #0]
    2e94:	e009      	b.n	2eaa <pow+0x1d6>
    2e96:	4642      	mov	r2, r8
    2e98:	2300      	movs	r3, #0
    2e9a:	2400      	movs	r4, #0
    2e9c:	6193      	str	r3, [r2, #24]
    2e9e:	61d4      	str	r4, [r2, #28]
    2ea0:	4640      	mov	r0, r8
    2ea2:	f000 ff0d 	bl	3cc0 <matherr>
    2ea6:	2800      	cmp	r0, #0
    2ea8:	d0f0      	beq.n	2e8c <pow+0x1b8>
    2eaa:	4643      	mov	r3, r8
    2eac:	6a1b      	ldr	r3, [r3, #32]
    2eae:	2b00      	cmp	r3, #0
    2eb0:	d004      	beq.n	2ebc <pow+0x1e8>
    2eb2:	f003 f95f 	bl	6174 <__errno>
    2eb6:	4643      	mov	r3, r8
    2eb8:	6a1b      	ldr	r3, [r3, #32]
    2eba:	6003      	str	r3, [r0, #0]
    2ebc:	4643      	mov	r3, r8
    2ebe:	69dc      	ldr	r4, [r3, #28]
    2ec0:	699b      	ldr	r3, [r3, #24]
    2ec2:	9300      	str	r3, [sp, #0]
    2ec4:	9401      	str	r4, [sp, #4]
    2ec6:	e75a      	b.n	2d7e <pow+0xaa>
    2ec8:	0020      	movs	r0, r4
    2eca:	0029      	movs	r1, r5
    2ecc:	f000 feee 	bl	3cac <finite>
    2ed0:	2800      	cmp	r0, #0
    2ed2:	d100      	bne.n	2ed6 <pow+0x202>
    2ed4:	e771      	b.n	2dba <pow+0xe6>
    2ed6:	0030      	movs	r0, r6
    2ed8:	0039      	movs	r1, r7
    2eda:	f000 fee7 	bl	3cac <finite>
    2ede:	2800      	cmp	r0, #0
    2ee0:	d100      	bne.n	2ee4 <pow+0x210>
    2ee2:	e76a      	b.n	2dba <pow+0xe6>
    2ee4:	9802      	ldr	r0, [sp, #8]
    2ee6:	9903      	ldr	r1, [sp, #12]
    2ee8:	000b      	movs	r3, r1
    2eea:	0002      	movs	r2, r0
    2eec:	f002 ff74 	bl	5dd8 <__aeabi_dcmpun>
    2ef0:	ab06      	add	r3, sp, #24
    2ef2:	4698      	mov	r8, r3
    2ef4:	2800      	cmp	r0, #0
    2ef6:	d17a      	bne.n	2fee <pow+0x31a>
    2ef8:	2303      	movs	r3, #3
    2efa:	4642      	mov	r2, r8
    2efc:	9306      	str	r3, [sp, #24]
    2efe:	4b4c      	ldr	r3, [pc, #304]	; (3030 <pow+0x35c>)
    2f00:	6210      	str	r0, [r2, #32]
    2f02:	6053      	str	r3, [r2, #4]
    2f04:	465b      	mov	r3, fp
    2f06:	781b      	ldrb	r3, [r3, #0]
    2f08:	6094      	str	r4, [r2, #8]
    2f0a:	60d5      	str	r5, [r2, #12]
    2f0c:	b25b      	sxtb	r3, r3
    2f0e:	6116      	str	r6, [r2, #16]
    2f10:	6157      	str	r7, [r2, #20]
    2f12:	4699      	mov	r9, r3
    2f14:	2b00      	cmp	r3, #0
    2f16:	d148      	bne.n	2faa <pow+0x2d6>
    2f18:	22e0      	movs	r2, #224	; 0xe0
    2f1a:	4641      	mov	r1, r8
    2f1c:	4b47      	ldr	r3, [pc, #284]	; (303c <pow+0x368>)
    2f1e:	0612      	lsls	r2, r2, #24
    2f20:	618a      	str	r2, [r1, #24]
    2f22:	61cb      	str	r3, [r1, #28]
    2f24:	0020      	movs	r0, r4
    2f26:	2200      	movs	r2, #0
    2f28:	2300      	movs	r3, #0
    2f2a:	0029      	movs	r1, r5
    2f2c:	f001 f88e 	bl	404c <__aeabi_dcmplt>
    2f30:	2800      	cmp	r0, #0
    2f32:	d100      	bne.n	2f36 <pow+0x262>
    2f34:	e773      	b.n	2e1e <pow+0x14a>
    2f36:	2200      	movs	r2, #0
    2f38:	4b41      	ldr	r3, [pc, #260]	; (3040 <pow+0x36c>)
    2f3a:	0030      	movs	r0, r6
    2f3c:	0039      	movs	r1, r7
    2f3e:	f002 f97d 	bl	523c <__aeabi_dmul>
    2f42:	0004      	movs	r4, r0
    2f44:	000d      	movs	r5, r1
    2f46:	f000 fec3 	bl	3cd0 <rint>
    2f4a:	0002      	movs	r2, r0
    2f4c:	000b      	movs	r3, r1
    2f4e:	0020      	movs	r0, r4
    2f50:	0029      	movs	r1, r5
    2f52:	f001 f875 	bl	4040 <__aeabi_dcmpeq>
    2f56:	2800      	cmp	r0, #0
    2f58:	d105      	bne.n	2f66 <pow+0x292>
    2f5a:	22e0      	movs	r2, #224	; 0xe0
    2f5c:	4b39      	ldr	r3, [pc, #228]	; (3044 <pow+0x370>)
    2f5e:	0612      	lsls	r2, r2, #24
    2f60:	4641      	mov	r1, r8
    2f62:	618a      	str	r2, [r1, #24]
    2f64:	61cb      	str	r3, [r1, #28]
    2f66:	465b      	mov	r3, fp
    2f68:	781b      	ldrb	r3, [r3, #0]
    2f6a:	b25b      	sxtb	r3, r3
    2f6c:	4699      	mov	r9, r3
    2f6e:	464b      	mov	r3, r9
    2f70:	2b02      	cmp	r3, #2
    2f72:	d000      	beq.n	2f76 <pow+0x2a2>
    2f74:	e753      	b.n	2e1e <pow+0x14a>
    2f76:	e757      	b.n	2e28 <pow+0x154>
    2f78:	ab06      	add	r3, sp, #24
    2f7a:	4698      	mov	r8, r3
    2f7c:	2301      	movs	r3, #1
    2f7e:	4642      	mov	r2, r8
    2f80:	9306      	str	r3, [sp, #24]
    2f82:	4b2b      	ldr	r3, [pc, #172]	; (3030 <pow+0x35c>)
    2f84:	6053      	str	r3, [r2, #4]
    2f86:	4643      	mov	r3, r8
    2f88:	609c      	str	r4, [r3, #8]
    2f8a:	60dd      	str	r5, [r3, #12]
    2f8c:	2400      	movs	r4, #0
    2f8e:	9a00      	ldr	r2, [sp, #0]
    2f90:	4d28      	ldr	r5, [pc, #160]	; (3034 <pow+0x360>)
    2f92:	621a      	str	r2, [r3, #32]
    2f94:	611e      	str	r6, [r3, #16]
    2f96:	615f      	str	r7, [r3, #20]
    2f98:	619c      	str	r4, [r3, #24]
    2f9a:	61dd      	str	r5, [r3, #28]
    2f9c:	464b      	mov	r3, r9
    2f9e:	9400      	str	r4, [sp, #0]
    2fa0:	9501      	str	r5, [sp, #4]
    2fa2:	2b02      	cmp	r3, #2
    2fa4:	d000      	beq.n	2fa8 <pow+0x2d4>
    2fa6:	e77b      	b.n	2ea0 <pow+0x1cc>
    2fa8:	e6e9      	b.n	2d7e <pow+0xaa>
    2faa:	2200      	movs	r2, #0
    2fac:	4641      	mov	r1, r8
    2fae:	4b26      	ldr	r3, [pc, #152]	; (3048 <pow+0x374>)
    2fb0:	0020      	movs	r0, r4
    2fb2:	618a      	str	r2, [r1, #24]
    2fb4:	61cb      	str	r3, [r1, #28]
    2fb6:	2200      	movs	r2, #0
    2fb8:	2300      	movs	r3, #0
    2fba:	0029      	movs	r1, r5
    2fbc:	f001 f846 	bl	404c <__aeabi_dcmplt>
    2fc0:	2800      	cmp	r0, #0
    2fc2:	d0d4      	beq.n	2f6e <pow+0x29a>
    2fc4:	2200      	movs	r2, #0
    2fc6:	4b1e      	ldr	r3, [pc, #120]	; (3040 <pow+0x36c>)
    2fc8:	0030      	movs	r0, r6
    2fca:	0039      	movs	r1, r7
    2fcc:	f002 f936 	bl	523c <__aeabi_dmul>
    2fd0:	0004      	movs	r4, r0
    2fd2:	000d      	movs	r5, r1
    2fd4:	f000 fe7c 	bl	3cd0 <rint>
    2fd8:	0002      	movs	r2, r0
    2fda:	000b      	movs	r3, r1
    2fdc:	0020      	movs	r0, r4
    2fde:	0029      	movs	r1, r5
    2fe0:	f001 f82e 	bl	4040 <__aeabi_dcmpeq>
    2fe4:	2800      	cmp	r0, #0
    2fe6:	d1be      	bne.n	2f66 <pow+0x292>
    2fe8:	2200      	movs	r2, #0
    2fea:	4b13      	ldr	r3, [pc, #76]	; (3038 <pow+0x364>)
    2fec:	e7b8      	b.n	2f60 <pow+0x28c>
    2fee:	2301      	movs	r3, #1
    2ff0:	4642      	mov	r2, r8
    2ff2:	9306      	str	r3, [sp, #24]
    2ff4:	4b0e      	ldr	r3, [pc, #56]	; (3030 <pow+0x35c>)
    2ff6:	6053      	str	r3, [r2, #4]
    2ff8:	4643      	mov	r3, r8
    2ffa:	464a      	mov	r2, r9
    2ffc:	609c      	str	r4, [r3, #8]
    2ffe:	60dd      	str	r5, [r3, #12]
    3000:	621a      	str	r2, [r3, #32]
    3002:	611e      	str	r6, [r3, #16]
    3004:	615f      	str	r7, [r3, #20]
    3006:	2400      	movs	r4, #0
    3008:	465b      	mov	r3, fp
    300a:	571c      	ldrsb	r4, [r3, r4]
    300c:	2c00      	cmp	r4, #0
    300e:	d100      	bne.n	3012 <pow+0x33e>
    3010:	e741      	b.n	2e96 <pow+0x1c2>
    3012:	2300      	movs	r3, #0
    3014:	2200      	movs	r2, #0
    3016:	0019      	movs	r1, r3
    3018:	0010      	movs	r0, r2
    301a:	f001 fceb 	bl	49f4 <__aeabi_ddiv>
    301e:	4643      	mov	r3, r8
    3020:	6198      	str	r0, [r3, #24]
    3022:	61d9      	str	r1, [r3, #28]
    3024:	2c02      	cmp	r4, #2
    3026:	d100      	bne.n	302a <pow+0x356>
    3028:	e730      	b.n	2e8c <pow+0x1b8>
    302a:	e739      	b.n	2ea0 <pow+0x1cc>
    302c:	20000070 	.word	0x20000070
    3030:	00006318 	.word	0x00006318
    3034:	3ff00000 	.word	0x3ff00000
    3038:	fff00000 	.word	0xfff00000
    303c:	47efffff 	.word	0x47efffff
    3040:	3fe00000 	.word	0x3fe00000
    3044:	c7efffff 	.word	0xc7efffff
    3048:	7ff00000 	.word	0x7ff00000

0000304c <__ieee754_pow>:
    304c:	b5f0      	push	{r4, r5, r6, r7, lr}
    304e:	4656      	mov	r6, sl
    3050:	464d      	mov	r5, r9
    3052:	4644      	mov	r4, r8
    3054:	465f      	mov	r7, fp
    3056:	b4f0      	push	{r4, r5, r6, r7}
    3058:	001c      	movs	r4, r3
    305a:	0013      	movs	r3, r2
    305c:	0067      	lsls	r7, r4, #1
    305e:	b091      	sub	sp, #68	; 0x44
    3060:	087f      	lsrs	r7, r7, #1
    3062:	9300      	str	r3, [sp, #0]
    3064:	9401      	str	r4, [sp, #4]
    3066:	0006      	movs	r6, r0
    3068:	000d      	movs	r5, r1
    306a:	4680      	mov	r8, r0
    306c:	4689      	mov	r9, r1
    306e:	46a2      	mov	sl, r4
    3070:	433b      	orrs	r3, r7
    3072:	d032      	beq.n	30da <__ieee754_pow+0x8e>
    3074:	4b6e      	ldr	r3, [pc, #440]	; (3230 <__ieee754_pow+0x1e4>)
    3076:	006c      	lsls	r4, r5, #1
    3078:	0864      	lsrs	r4, r4, #1
    307a:	429c      	cmp	r4, r3
    307c:	dc29      	bgt.n	30d2 <__ieee754_pow+0x86>
    307e:	d026      	beq.n	30ce <__ieee754_pow+0x82>
    3080:	429f      	cmp	r7, r3
    3082:	dc26      	bgt.n	30d2 <__ieee754_pow+0x86>
    3084:	4b6a      	ldr	r3, [pc, #424]	; (3230 <__ieee754_pow+0x1e4>)
    3086:	429f      	cmp	r7, r3
    3088:	d100      	bne.n	308c <__ieee754_pow+0x40>
    308a:	e089      	b.n	31a0 <__ieee754_pow+0x154>
    308c:	2300      	movs	r3, #0
    308e:	469b      	mov	fp, r3
    3090:	464b      	mov	r3, r9
    3092:	2b00      	cmp	r3, #0
    3094:	da00      	bge.n	3098 <__ieee754_pow+0x4c>
    3096:	e087      	b.n	31a8 <__ieee754_pow+0x15c>
    3098:	2a00      	cmp	r2, #0
    309a:	d12f      	bne.n	30fc <__ieee754_pow+0xb0>
    309c:	4b64      	ldr	r3, [pc, #400]	; (3230 <__ieee754_pow+0x1e4>)
    309e:	429f      	cmp	r7, r3
    30a0:	d100      	bne.n	30a4 <__ieee754_pow+0x58>
    30a2:	e09f      	b.n	31e4 <__ieee754_pow+0x198>
    30a4:	4b63      	ldr	r3, [pc, #396]	; (3234 <__ieee754_pow+0x1e8>)
    30a6:	429f      	cmp	r7, r3
    30a8:	d05d      	beq.n	3166 <__ieee754_pow+0x11a>
    30aa:	2380      	movs	r3, #128	; 0x80
    30ac:	05db      	lsls	r3, r3, #23
    30ae:	459a      	cmp	sl, r3
    30b0:	d101      	bne.n	30b6 <__ieee754_pow+0x6a>
    30b2:	f000 fbc1 	bl	3838 <__ieee754_pow+0x7ec>
    30b6:	4b60      	ldr	r3, [pc, #384]	; (3238 <__ieee754_pow+0x1ec>)
    30b8:	459a      	cmp	sl, r3
    30ba:	d11f      	bne.n	30fc <__ieee754_pow+0xb0>
    30bc:	464b      	mov	r3, r9
    30be:	2b00      	cmp	r3, #0
    30c0:	db1c      	blt.n	30fc <__ieee754_pow+0xb0>
    30c2:	0030      	movs	r0, r6
    30c4:	0029      	movs	r1, r5
    30c6:	f000 fcf7 	bl	3ab8 <__ieee754_sqrt>
    30ca:	0006      	movs	r6, r0
    30cc:	e007      	b.n	30de <__ieee754_pow+0x92>
    30ce:	2800      	cmp	r0, #0
    30d0:	d00d      	beq.n	30ee <__ieee754_pow+0xa2>
    30d2:	4b5a      	ldr	r3, [pc, #360]	; (323c <__ieee754_pow+0x1f0>)
    30d4:	18e0      	adds	r0, r4, r3
    30d6:	4330      	orrs	r0, r6
    30d8:	d10b      	bne.n	30f2 <__ieee754_pow+0xa6>
    30da:	2600      	movs	r6, #0
    30dc:	4955      	ldr	r1, [pc, #340]	; (3234 <__ieee754_pow+0x1e8>)
    30de:	0030      	movs	r0, r6
    30e0:	b011      	add	sp, #68	; 0x44
    30e2:	bc3c      	pop	{r2, r3, r4, r5}
    30e4:	4690      	mov	r8, r2
    30e6:	4699      	mov	r9, r3
    30e8:	46a2      	mov	sl, r4
    30ea:	46ab      	mov	fp, r5
    30ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30ee:	42a7      	cmp	r7, r4
    30f0:	ddc8      	ble.n	3084 <__ieee754_pow+0x38>
    30f2:	4853      	ldr	r0, [pc, #332]	; (3240 <__ieee754_pow+0x1f4>)
    30f4:	f000 fde6 	bl	3cc4 <nan>
    30f8:	0006      	movs	r6, r0
    30fa:	e7f0      	b.n	30de <__ieee754_pow+0x92>
    30fc:	0030      	movs	r0, r6
    30fe:	0029      	movs	r1, r5
    3100:	f000 fdd0 	bl	3ca4 <fabs>
    3104:	4643      	mov	r3, r8
    3106:	2b00      	cmp	r3, #0
    3108:	d01d      	beq.n	3146 <__ieee754_pow+0xfa>
    310a:	0feb      	lsrs	r3, r5, #31
    310c:	3b01      	subs	r3, #1
    310e:	4698      	mov	r8, r3
    3110:	465b      	mov	r3, fp
    3112:	4642      	mov	r2, r8
    3114:	4313      	orrs	r3, r2
    3116:	d079      	beq.n	320c <__ieee754_pow+0x1c0>
    3118:	4b4a      	ldr	r3, [pc, #296]	; (3244 <__ieee754_pow+0x1f8>)
    311a:	429f      	cmp	r7, r3
    311c:	dc00      	bgt.n	3120 <__ieee754_pow+0xd4>
    311e:	e09f      	b.n	3260 <__ieee754_pow+0x214>
    3120:	4b49      	ldr	r3, [pc, #292]	; (3248 <__ieee754_pow+0x1fc>)
    3122:	429f      	cmp	r7, r3
    3124:	dc01      	bgt.n	312a <__ieee754_pow+0xde>
    3126:	f000 fbce 	bl	38c6 <__ieee754_pow+0x87a>
    312a:	4b48      	ldr	r3, [pc, #288]	; (324c <__ieee754_pow+0x200>)
    312c:	429c      	cmp	r4, r3
    312e:	dd79      	ble.n	3224 <__ieee754_pow+0x1d8>
    3130:	4653      	mov	r3, sl
    3132:	2b00      	cmp	r3, #0
    3134:	dd79      	ble.n	322a <__ieee754_pow+0x1de>
    3136:	4a46      	ldr	r2, [pc, #280]	; (3250 <__ieee754_pow+0x204>)
    3138:	4b46      	ldr	r3, [pc, #280]	; (3254 <__ieee754_pow+0x208>)
    313a:	0010      	movs	r0, r2
    313c:	0019      	movs	r1, r3
    313e:	f002 f87d 	bl	523c <__aeabi_dmul>
    3142:	0006      	movs	r6, r0
    3144:	e7cb      	b.n	30de <__ieee754_pow+0x92>
    3146:	2c00      	cmp	r4, #0
    3148:	d004      	beq.n	3154 <__ieee754_pow+0x108>
    314a:	4a3a      	ldr	r2, [pc, #232]	; (3234 <__ieee754_pow+0x1e8>)
    314c:	00ab      	lsls	r3, r5, #2
    314e:	089b      	lsrs	r3, r3, #2
    3150:	4293      	cmp	r3, r2
    3152:	d1da      	bne.n	310a <__ieee754_pow+0xbe>
    3154:	4653      	mov	r3, sl
    3156:	2b00      	cmp	r3, #0
    3158:	da00      	bge.n	315c <__ieee754_pow+0x110>
    315a:	e3ad      	b.n	38b8 <__ieee754_pow+0x86c>
    315c:	464b      	mov	r3, r9
    315e:	2b00      	cmp	r3, #0
    3160:	db0d      	blt.n	317e <__ieee754_pow+0x132>
    3162:	0006      	movs	r6, r0
    3164:	e7bb      	b.n	30de <__ieee754_pow+0x92>
    3166:	4653      	mov	r3, sl
    3168:	0029      	movs	r1, r5
    316a:	2b00      	cmp	r3, #0
    316c:	dab7      	bge.n	30de <__ieee754_pow+0x92>
    316e:	0032      	movs	r2, r6
    3170:	002b      	movs	r3, r5
    3172:	2000      	movs	r0, #0
    3174:	492f      	ldr	r1, [pc, #188]	; (3234 <__ieee754_pow+0x1e8>)
    3176:	f001 fc3d 	bl	49f4 <__aeabi_ddiv>
    317a:	0006      	movs	r6, r0
    317c:	e7af      	b.n	30de <__ieee754_pow+0x92>
    317e:	4b2f      	ldr	r3, [pc, #188]	; (323c <__ieee754_pow+0x1f0>)
    3180:	469c      	mov	ip, r3
    3182:	465b      	mov	r3, fp
    3184:	4464      	add	r4, ip
    3186:	431c      	orrs	r4, r3
    3188:	d101      	bne.n	318e <__ieee754_pow+0x142>
    318a:	f000 fc2b 	bl	39e4 <__ieee754_pow+0x998>
    318e:	465b      	mov	r3, fp
    3190:	0006      	movs	r6, r0
    3192:	2b01      	cmp	r3, #1
    3194:	d1a3      	bne.n	30de <__ieee754_pow+0x92>
    3196:	2380      	movs	r3, #128	; 0x80
    3198:	061b      	lsls	r3, r3, #24
    319a:	469c      	mov	ip, r3
    319c:	4461      	add	r1, ip
    319e:	e79e      	b.n	30de <__ieee754_pow+0x92>
    31a0:	2a00      	cmp	r2, #0
    31a2:	d100      	bne.n	31a6 <__ieee754_pow+0x15a>
    31a4:	e772      	b.n	308c <__ieee754_pow+0x40>
    31a6:	e794      	b.n	30d2 <__ieee754_pow+0x86>
    31a8:	4b2b      	ldr	r3, [pc, #172]	; (3258 <__ieee754_pow+0x20c>)
    31aa:	429f      	cmp	r7, r3
    31ac:	dc2b      	bgt.n	3206 <__ieee754_pow+0x1ba>
    31ae:	4b27      	ldr	r3, [pc, #156]	; (324c <__ieee754_pow+0x200>)
    31b0:	429f      	cmp	r7, r3
    31b2:	dc00      	bgt.n	31b6 <__ieee754_pow+0x16a>
    31b4:	e770      	b.n	3098 <__ieee754_pow+0x4c>
    31b6:	4929      	ldr	r1, [pc, #164]	; (325c <__ieee754_pow+0x210>)
    31b8:	153b      	asrs	r3, r7, #20
    31ba:	468c      	mov	ip, r1
    31bc:	4463      	add	r3, ip
    31be:	2b14      	cmp	r3, #20
    31c0:	dc01      	bgt.n	31c6 <__ieee754_pow+0x17a>
    31c2:	f000 fbf2 	bl	39aa <__ieee754_pow+0x95e>
    31c6:	2134      	movs	r1, #52	; 0x34
    31c8:	1acb      	subs	r3, r1, r3
    31ca:	9900      	ldr	r1, [sp, #0]
    31cc:	40d9      	lsrs	r1, r3
    31ce:	0008      	movs	r0, r1
    31d0:	4098      	lsls	r0, r3
    31d2:	4282      	cmp	r2, r0
    31d4:	d000      	beq.n	31d8 <__ieee754_pow+0x18c>
    31d6:	e75f      	b.n	3098 <__ieee754_pow+0x4c>
    31d8:	2301      	movs	r3, #1
    31da:	4019      	ands	r1, r3
    31dc:	3301      	adds	r3, #1
    31de:	1a5b      	subs	r3, r3, r1
    31e0:	469b      	mov	fp, r3
    31e2:	e759      	b.n	3098 <__ieee754_pow+0x4c>
    31e4:	4b15      	ldr	r3, [pc, #84]	; (323c <__ieee754_pow+0x1f0>)
    31e6:	18e0      	adds	r0, r4, r3
    31e8:	4306      	orrs	r6, r0
    31ea:	d100      	bne.n	31ee <__ieee754_pow+0x1a2>
    31ec:	e775      	b.n	30da <__ieee754_pow+0x8e>
    31ee:	4b17      	ldr	r3, [pc, #92]	; (324c <__ieee754_pow+0x200>)
    31f0:	429c      	cmp	r4, r3
    31f2:	dc00      	bgt.n	31f6 <__ieee754_pow+0x1aa>
    31f4:	e351      	b.n	389a <__ieee754_pow+0x84e>
    31f6:	4653      	mov	r3, sl
    31f8:	2b00      	cmp	r3, #0
    31fa:	db16      	blt.n	322a <__ieee754_pow+0x1de>
    31fc:	9b00      	ldr	r3, [sp, #0]
    31fe:	9c01      	ldr	r4, [sp, #4]
    3200:	001e      	movs	r6, r3
    3202:	0021      	movs	r1, r4
    3204:	e76b      	b.n	30de <__ieee754_pow+0x92>
    3206:	2302      	movs	r3, #2
    3208:	469b      	mov	fp, r3
    320a:	e745      	b.n	3098 <__ieee754_pow+0x4c>
    320c:	0032      	movs	r2, r6
    320e:	002b      	movs	r3, r5
    3210:	0030      	movs	r0, r6
    3212:	0029      	movs	r1, r5
    3214:	f002 fa8c 	bl	5730 <__aeabi_dsub>
    3218:	0002      	movs	r2, r0
    321a:	000b      	movs	r3, r1
    321c:	f001 fbea 	bl	49f4 <__aeabi_ddiv>
    3220:	0006      	movs	r6, r0
    3222:	e75c      	b.n	30de <__ieee754_pow+0x92>
    3224:	4653      	mov	r3, sl
    3226:	2b00      	cmp	r3, #0
    3228:	db85      	blt.n	3136 <__ieee754_pow+0xea>
    322a:	2600      	movs	r6, #0
    322c:	2100      	movs	r1, #0
    322e:	e756      	b.n	30de <__ieee754_pow+0x92>
    3230:	7ff00000 	.word	0x7ff00000
    3234:	3ff00000 	.word	0x3ff00000
    3238:	3fe00000 	.word	0x3fe00000
    323c:	c0100000 	.word	0xc0100000
    3240:	0000631c 	.word	0x0000631c
    3244:	41e00000 	.word	0x41e00000
    3248:	43f00000 	.word	0x43f00000
    324c:	3fefffff 	.word	0x3fefffff
    3250:	8800759c 	.word	0x8800759c
    3254:	7e37e43c 	.word	0x7e37e43c
    3258:	433fffff 	.word	0x433fffff
    325c:	fffffc01 	.word	0xfffffc01
    3260:	4be8      	ldr	r3, [pc, #928]	; (3604 <__ieee754_pow+0x5b8>)
    3262:	2200      	movs	r2, #0
    3264:	429c      	cmp	r4, r3
    3266:	dc06      	bgt.n	3276 <__ieee754_pow+0x22a>
    3268:	2200      	movs	r2, #0
    326a:	4be7      	ldr	r3, [pc, #924]	; (3608 <__ieee754_pow+0x5bc>)
    326c:	f001 ffe6 	bl	523c <__aeabi_dmul>
    3270:	2235      	movs	r2, #53	; 0x35
    3272:	000c      	movs	r4, r1
    3274:	4252      	negs	r2, r2
    3276:	4de5      	ldr	r5, [pc, #916]	; (360c <__ieee754_pow+0x5c0>)
    3278:	1523      	asrs	r3, r4, #20
    327a:	46ac      	mov	ip, r5
    327c:	4463      	add	r3, ip
    327e:	4699      	mov	r9, r3
    3280:	0324      	lsls	r4, r4, #12
    3282:	4de3      	ldr	r5, [pc, #908]	; (3610 <__ieee754_pow+0x5c4>)
    3284:	4be3      	ldr	r3, [pc, #908]	; (3614 <__ieee754_pow+0x5c8>)
    3286:	0b24      	lsrs	r4, r4, #12
    3288:	4491      	add	r9, r2
    328a:	4325      	orrs	r5, r4
    328c:	429c      	cmp	r4, r3
    328e:	dd09      	ble.n	32a4 <__ieee754_pow+0x258>
    3290:	4be1      	ldr	r3, [pc, #900]	; (3618 <__ieee754_pow+0x5cc>)
    3292:	429c      	cmp	r4, r3
    3294:	dc00      	bgt.n	3298 <__ieee754_pow+0x24c>
    3296:	e3a9      	b.n	39ec <__ieee754_pow+0x9a0>
    3298:	2301      	movs	r3, #1
    329a:	469c      	mov	ip, r3
    329c:	4bdf      	ldr	r3, [pc, #892]	; (361c <__ieee754_pow+0x5d0>)
    329e:	44e1      	add	r9, ip
    32a0:	469c      	mov	ip, r3
    32a2:	4465      	add	r5, ip
    32a4:	2300      	movs	r3, #0
    32a6:	2400      	movs	r4, #0
    32a8:	2200      	movs	r2, #0
    32aa:	9308      	str	r3, [sp, #32]
    32ac:	9409      	str	r4, [sp, #36]	; 0x24
    32ae:	930c      	str	r3, [sp, #48]	; 0x30
    32b0:	940d      	str	r4, [sp, #52]	; 0x34
    32b2:	2400      	movs	r4, #0
    32b4:	4bd6      	ldr	r3, [pc, #856]	; (3610 <__ieee754_pow+0x5c4>)
    32b6:	9206      	str	r2, [sp, #24]
    32b8:	9307      	str	r3, [sp, #28]
    32ba:	9a06      	ldr	r2, [sp, #24]
    32bc:	9b07      	ldr	r3, [sp, #28]
    32be:	0029      	movs	r1, r5
    32c0:	900a      	str	r0, [sp, #40]	; 0x28
    32c2:	910b      	str	r1, [sp, #44]	; 0x2c
    32c4:	f002 fa34 	bl	5730 <__aeabi_dsub>
    32c8:	9a06      	ldr	r2, [sp, #24]
    32ca:	9b07      	ldr	r3, [sp, #28]
    32cc:	0006      	movs	r6, r0
    32ce:	000f      	movs	r7, r1
    32d0:	980a      	ldr	r0, [sp, #40]	; 0x28
    32d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    32d4:	f001 f862 	bl	439c <__aeabi_dadd>
    32d8:	0002      	movs	r2, r0
    32da:	000b      	movs	r3, r1
    32dc:	2000      	movs	r0, #0
    32de:	49cc      	ldr	r1, [pc, #816]	; (3610 <__ieee754_pow+0x5c4>)
    32e0:	f001 fb88 	bl	49f4 <__aeabi_ddiv>
    32e4:	000a      	movs	r2, r1
    32e6:	0001      	movs	r1, r0
    32e8:	0013      	movs	r3, r2
    32ea:	910e      	str	r1, [sp, #56]	; 0x38
    32ec:	920f      	str	r2, [sp, #60]	; 0x3c
    32ee:	0002      	movs	r2, r0
    32f0:	0039      	movs	r1, r7
    32f2:	0030      	movs	r0, r6
    32f4:	f001 ffa2 	bl	523c <__aeabi_dmul>
    32f8:	000a      	movs	r2, r1
    32fa:	0001      	movs	r1, r0
    32fc:	2080      	movs	r0, #128	; 0x80
    32fe:	9104      	str	r1, [sp, #16]
    3300:	9205      	str	r2, [sp, #20]
    3302:	0013      	movs	r3, r2
    3304:	2200      	movs	r2, #0
    3306:	2180      	movs	r1, #128	; 0x80
    3308:	0300      	lsls	r0, r0, #12
    330a:	4684      	mov	ip, r0
    330c:	9202      	str	r2, [sp, #8]
    330e:	9303      	str	r3, [sp, #12]
    3310:	2200      	movs	r2, #0
    3312:	0589      	lsls	r1, r1, #22
    3314:	106d      	asrs	r5, r5, #1
    3316:	430d      	orrs	r5, r1
    3318:	4465      	add	r5, ip
    331a:	192b      	adds	r3, r5, r4
    331c:	9802      	ldr	r0, [sp, #8]
    331e:	9903      	ldr	r1, [sp, #12]
    3320:	0014      	movs	r4, r2
    3322:	001d      	movs	r5, r3
    3324:	f001 ff8a 	bl	523c <__aeabi_dmul>
    3328:	0002      	movs	r2, r0
    332a:	000b      	movs	r3, r1
    332c:	0030      	movs	r0, r6
    332e:	0039      	movs	r1, r7
    3330:	f002 f9fe 	bl	5730 <__aeabi_dsub>
    3334:	9a06      	ldr	r2, [sp, #24]
    3336:	9b07      	ldr	r3, [sp, #28]
    3338:	0006      	movs	r6, r0
    333a:	000f      	movs	r7, r1
    333c:	0020      	movs	r0, r4
    333e:	0029      	movs	r1, r5
    3340:	f002 f9f6 	bl	5730 <__aeabi_dsub>
    3344:	0002      	movs	r2, r0
    3346:	000b      	movs	r3, r1
    3348:	980a      	ldr	r0, [sp, #40]	; 0x28
    334a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    334c:	f002 f9f0 	bl	5730 <__aeabi_dsub>
    3350:	9a02      	ldr	r2, [sp, #8]
    3352:	9b03      	ldr	r3, [sp, #12]
    3354:	f001 ff72 	bl	523c <__aeabi_dmul>
    3358:	0002      	movs	r2, r0
    335a:	000b      	movs	r3, r1
    335c:	0030      	movs	r0, r6
    335e:	0039      	movs	r1, r7
    3360:	f002 f9e6 	bl	5730 <__aeabi_dsub>
    3364:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3366:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3368:	f001 ff68 	bl	523c <__aeabi_dmul>
    336c:	9d04      	ldr	r5, [sp, #16]
    336e:	9e05      	ldr	r6, [sp, #20]
    3370:	9006      	str	r0, [sp, #24]
    3372:	9107      	str	r1, [sp, #28]
    3374:	002a      	movs	r2, r5
    3376:	0033      	movs	r3, r6
    3378:	0028      	movs	r0, r5
    337a:	0031      	movs	r1, r6
    337c:	f001 ff5e 	bl	523c <__aeabi_dmul>
    3380:	0006      	movs	r6, r0
    3382:	000f      	movs	r7, r1
    3384:	4aa6      	ldr	r2, [pc, #664]	; (3620 <__ieee754_pow+0x5d4>)
    3386:	4ba7      	ldr	r3, [pc, #668]	; (3624 <__ieee754_pow+0x5d8>)
    3388:	f001 ff58 	bl	523c <__aeabi_dmul>
    338c:	4aa6      	ldr	r2, [pc, #664]	; (3628 <__ieee754_pow+0x5dc>)
    338e:	4ba7      	ldr	r3, [pc, #668]	; (362c <__ieee754_pow+0x5e0>)
    3390:	f001 f804 	bl	439c <__aeabi_dadd>
    3394:	0032      	movs	r2, r6
    3396:	003b      	movs	r3, r7
    3398:	f001 ff50 	bl	523c <__aeabi_dmul>
    339c:	4aa4      	ldr	r2, [pc, #656]	; (3630 <__ieee754_pow+0x5e4>)
    339e:	4ba5      	ldr	r3, [pc, #660]	; (3634 <__ieee754_pow+0x5e8>)
    33a0:	f000 fffc 	bl	439c <__aeabi_dadd>
    33a4:	0032      	movs	r2, r6
    33a6:	003b      	movs	r3, r7
    33a8:	f001 ff48 	bl	523c <__aeabi_dmul>
    33ac:	4aa2      	ldr	r2, [pc, #648]	; (3638 <__ieee754_pow+0x5ec>)
    33ae:	4ba3      	ldr	r3, [pc, #652]	; (363c <__ieee754_pow+0x5f0>)
    33b0:	f000 fff4 	bl	439c <__aeabi_dadd>
    33b4:	0032      	movs	r2, r6
    33b6:	003b      	movs	r3, r7
    33b8:	f001 ff40 	bl	523c <__aeabi_dmul>
    33bc:	4aa0      	ldr	r2, [pc, #640]	; (3640 <__ieee754_pow+0x5f4>)
    33be:	4ba1      	ldr	r3, [pc, #644]	; (3644 <__ieee754_pow+0x5f8>)
    33c0:	f000 ffec 	bl	439c <__aeabi_dadd>
    33c4:	0032      	movs	r2, r6
    33c6:	003b      	movs	r3, r7
    33c8:	f001 ff38 	bl	523c <__aeabi_dmul>
    33cc:	4a9e      	ldr	r2, [pc, #632]	; (3648 <__ieee754_pow+0x5fc>)
    33ce:	4b9f      	ldr	r3, [pc, #636]	; (364c <__ieee754_pow+0x600>)
    33d0:	f000 ffe4 	bl	439c <__aeabi_dadd>
    33d4:	0032      	movs	r2, r6
    33d6:	0004      	movs	r4, r0
    33d8:	000d      	movs	r5, r1
    33da:	003b      	movs	r3, r7
    33dc:	0030      	movs	r0, r6
    33de:	0039      	movs	r1, r7
    33e0:	f001 ff2c 	bl	523c <__aeabi_dmul>
    33e4:	0002      	movs	r2, r0
    33e6:	000b      	movs	r3, r1
    33e8:	0020      	movs	r0, r4
    33ea:	0029      	movs	r1, r5
    33ec:	f001 ff26 	bl	523c <__aeabi_dmul>
    33f0:	9e02      	ldr	r6, [sp, #8]
    33f2:	9f03      	ldr	r7, [sp, #12]
    33f4:	0004      	movs	r4, r0
    33f6:	000d      	movs	r5, r1
    33f8:	9804      	ldr	r0, [sp, #16]
    33fa:	9905      	ldr	r1, [sp, #20]
    33fc:	0032      	movs	r2, r6
    33fe:	003b      	movs	r3, r7
    3400:	f000 ffcc 	bl	439c <__aeabi_dadd>
    3404:	9a06      	ldr	r2, [sp, #24]
    3406:	9b07      	ldr	r3, [sp, #28]
    3408:	f001 ff18 	bl	523c <__aeabi_dmul>
    340c:	0022      	movs	r2, r4
    340e:	002b      	movs	r3, r5
    3410:	f000 ffc4 	bl	439c <__aeabi_dadd>
    3414:	0032      	movs	r2, r6
    3416:	900a      	str	r0, [sp, #40]	; 0x28
    3418:	910b      	str	r1, [sp, #44]	; 0x2c
    341a:	003b      	movs	r3, r7
    341c:	0030      	movs	r0, r6
    341e:	0039      	movs	r1, r7
    3420:	9602      	str	r6, [sp, #8]
    3422:	9703      	str	r7, [sp, #12]
    3424:	f001 ff0a 	bl	523c <__aeabi_dmul>
    3428:	2200      	movs	r2, #0
    342a:	4b89      	ldr	r3, [pc, #548]	; (3650 <__ieee754_pow+0x604>)
    342c:	0004      	movs	r4, r0
    342e:	000d      	movs	r5, r1
    3430:	f000 ffb4 	bl	439c <__aeabi_dadd>
    3434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3438:	f000 ffb0 	bl	439c <__aeabi_dadd>
    343c:	2600      	movs	r6, #0
    343e:	000f      	movs	r7, r1
    3440:	0032      	movs	r2, r6
    3442:	000b      	movs	r3, r1
    3444:	9802      	ldr	r0, [sp, #8]
    3446:	9903      	ldr	r1, [sp, #12]
    3448:	f001 fef8 	bl	523c <__aeabi_dmul>
    344c:	2200      	movs	r2, #0
    344e:	9002      	str	r0, [sp, #8]
    3450:	9103      	str	r1, [sp, #12]
    3452:	4b7f      	ldr	r3, [pc, #508]	; (3650 <__ieee754_pow+0x604>)
    3454:	0030      	movs	r0, r6
    3456:	0039      	movs	r1, r7
    3458:	f002 f96a 	bl	5730 <__aeabi_dsub>
    345c:	0022      	movs	r2, r4
    345e:	002b      	movs	r3, r5
    3460:	f002 f966 	bl	5730 <__aeabi_dsub>
    3464:	0002      	movs	r2, r0
    3466:	000b      	movs	r3, r1
    3468:	980a      	ldr	r0, [sp, #40]	; 0x28
    346a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    346c:	f002 f960 	bl	5730 <__aeabi_dsub>
    3470:	9a04      	ldr	r2, [sp, #16]
    3472:	9b05      	ldr	r3, [sp, #20]
    3474:	f001 fee2 	bl	523c <__aeabi_dmul>
    3478:	0032      	movs	r2, r6
    347a:	0004      	movs	r4, r0
    347c:	000d      	movs	r5, r1
    347e:	9806      	ldr	r0, [sp, #24]
    3480:	9907      	ldr	r1, [sp, #28]
    3482:	003b      	movs	r3, r7
    3484:	f001 feda 	bl	523c <__aeabi_dmul>
    3488:	0002      	movs	r2, r0
    348a:	000b      	movs	r3, r1
    348c:	0020      	movs	r0, r4
    348e:	0029      	movs	r1, r5
    3490:	f000 ff84 	bl	439c <__aeabi_dadd>
    3494:	0004      	movs	r4, r0
    3496:	000d      	movs	r5, r1
    3498:	0002      	movs	r2, r0
    349a:	000b      	movs	r3, r1
    349c:	9802      	ldr	r0, [sp, #8]
    349e:	9903      	ldr	r1, [sp, #12]
    34a0:	f000 ff7c 	bl	439c <__aeabi_dadd>
    34a4:	2600      	movs	r6, #0
    34a6:	22e0      	movs	r2, #224	; 0xe0
    34a8:	4b6a      	ldr	r3, [pc, #424]	; (3654 <__ieee754_pow+0x608>)
    34aa:	0612      	lsls	r2, r2, #24
    34ac:	0030      	movs	r0, r6
    34ae:	000f      	movs	r7, r1
    34b0:	f001 fec4 	bl	523c <__aeabi_dmul>
    34b4:	9a02      	ldr	r2, [sp, #8]
    34b6:	9b03      	ldr	r3, [sp, #12]
    34b8:	9004      	str	r0, [sp, #16]
    34ba:	9105      	str	r1, [sp, #20]
    34bc:	0030      	movs	r0, r6
    34be:	0039      	movs	r1, r7
    34c0:	f002 f936 	bl	5730 <__aeabi_dsub>
    34c4:	0002      	movs	r2, r0
    34c6:	000b      	movs	r3, r1
    34c8:	0020      	movs	r0, r4
    34ca:	0029      	movs	r1, r5
    34cc:	f002 f930 	bl	5730 <__aeabi_dsub>
    34d0:	4a61      	ldr	r2, [pc, #388]	; (3658 <__ieee754_pow+0x60c>)
    34d2:	4b60      	ldr	r3, [pc, #384]	; (3654 <__ieee754_pow+0x608>)
    34d4:	f001 feb2 	bl	523c <__aeabi_dmul>
    34d8:	4a60      	ldr	r2, [pc, #384]	; (365c <__ieee754_pow+0x610>)
    34da:	0004      	movs	r4, r0
    34dc:	000d      	movs	r5, r1
    34de:	4b60      	ldr	r3, [pc, #384]	; (3660 <__ieee754_pow+0x614>)
    34e0:	0030      	movs	r0, r6
    34e2:	0039      	movs	r1, r7
    34e4:	f001 feaa 	bl	523c <__aeabi_dmul>
    34e8:	0002      	movs	r2, r0
    34ea:	000b      	movs	r3, r1
    34ec:	0020      	movs	r0, r4
    34ee:	0029      	movs	r1, r5
    34f0:	f000 ff54 	bl	439c <__aeabi_dadd>
    34f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    34f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    34f8:	f000 ff50 	bl	439c <__aeabi_dadd>
    34fc:	0006      	movs	r6, r0
    34fe:	4648      	mov	r0, r9
    3500:	000f      	movs	r7, r1
    3502:	f002 fcbf 	bl	5e84 <__aeabi_i2d>
    3506:	0004      	movs	r4, r0
    3508:	000d      	movs	r5, r1
    350a:	9804      	ldr	r0, [sp, #16]
    350c:	9905      	ldr	r1, [sp, #20]
    350e:	0032      	movs	r2, r6
    3510:	003b      	movs	r3, r7
    3512:	f000 ff43 	bl	439c <__aeabi_dadd>
    3516:	9a08      	ldr	r2, [sp, #32]
    3518:	9b09      	ldr	r3, [sp, #36]	; 0x24
    351a:	f000 ff3f 	bl	439c <__aeabi_dadd>
    351e:	0022      	movs	r2, r4
    3520:	002b      	movs	r3, r5
    3522:	f000 ff3b 	bl	439c <__aeabi_dadd>
    3526:	2000      	movs	r0, #0
    3528:	0022      	movs	r2, r4
    352a:	002b      	movs	r3, r5
    352c:	9002      	str	r0, [sp, #8]
    352e:	9103      	str	r1, [sp, #12]
    3530:	f002 f8fe 	bl	5730 <__aeabi_dsub>
    3534:	9a08      	ldr	r2, [sp, #32]
    3536:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3538:	f002 f8fa 	bl	5730 <__aeabi_dsub>
    353c:	9a04      	ldr	r2, [sp, #16]
    353e:	9b05      	ldr	r3, [sp, #20]
    3540:	f002 f8f6 	bl	5730 <__aeabi_dsub>
    3544:	0002      	movs	r2, r0
    3546:	000b      	movs	r3, r1
    3548:	0030      	movs	r0, r6
    354a:	0039      	movs	r1, r7
    354c:	f002 f8f0 	bl	5730 <__aeabi_dsub>
    3550:	9004      	str	r0, [sp, #16]
    3552:	9105      	str	r1, [sp, #20]
    3554:	465b      	mov	r3, fp
    3556:	4642      	mov	r2, r8
    3558:	3b01      	subs	r3, #1
    355a:	4313      	orrs	r3, r2
    355c:	d100      	bne.n	3560 <__ieee754_pow+0x514>
    355e:	e197      	b.n	3890 <__ieee754_pow+0x844>
    3560:	2300      	movs	r3, #0
    3562:	4c2b      	ldr	r4, [pc, #172]	; (3610 <__ieee754_pow+0x5c4>)
    3564:	9306      	str	r3, [sp, #24]
    3566:	9407      	str	r4, [sp, #28]
    3568:	9800      	ldr	r0, [sp, #0]
    356a:	9901      	ldr	r1, [sp, #4]
    356c:	2600      	movs	r6, #0
    356e:	000b      	movs	r3, r1
    3570:	0032      	movs	r2, r6
    3572:	000f      	movs	r7, r1
    3574:	f002 f8dc 	bl	5730 <__aeabi_dsub>
    3578:	9a02      	ldr	r2, [sp, #8]
    357a:	9b03      	ldr	r3, [sp, #12]
    357c:	f001 fe5e 	bl	523c <__aeabi_dmul>
    3580:	9a00      	ldr	r2, [sp, #0]
    3582:	9b01      	ldr	r3, [sp, #4]
    3584:	0004      	movs	r4, r0
    3586:	000d      	movs	r5, r1
    3588:	9804      	ldr	r0, [sp, #16]
    358a:	9905      	ldr	r1, [sp, #20]
    358c:	f001 fe56 	bl	523c <__aeabi_dmul>
    3590:	0002      	movs	r2, r0
    3592:	000b      	movs	r3, r1
    3594:	0020      	movs	r0, r4
    3596:	0029      	movs	r1, r5
    3598:	f000 ff00 	bl	439c <__aeabi_dadd>
    359c:	0004      	movs	r4, r0
    359e:	000d      	movs	r5, r1
    35a0:	9802      	ldr	r0, [sp, #8]
    35a2:	9903      	ldr	r1, [sp, #12]
    35a4:	003b      	movs	r3, r7
    35a6:	0032      	movs	r2, r6
    35a8:	9404      	str	r4, [sp, #16]
    35aa:	9505      	str	r5, [sp, #20]
    35ac:	f001 fe46 	bl	523c <__aeabi_dmul>
    35b0:	9000      	str	r0, [sp, #0]
    35b2:	9101      	str	r1, [sp, #4]
    35b4:	000b      	movs	r3, r1
    35b6:	0002      	movs	r2, r0
    35b8:	0029      	movs	r1, r5
    35ba:	0020      	movs	r0, r4
    35bc:	f000 feee 	bl	439c <__aeabi_dadd>
    35c0:	4b28      	ldr	r3, [pc, #160]	; (3664 <__ieee754_pow+0x618>)
    35c2:	4681      	mov	r9, r0
    35c4:	1e0f      	subs	r7, r1, #0
    35c6:	468a      	mov	sl, r1
    35c8:	429f      	cmp	r7, r3
    35ca:	dc00      	bgt.n	35ce <__ieee754_pow+0x582>
    35cc:	e13c      	b.n	3848 <__ieee754_pow+0x7fc>
    35ce:	4b26      	ldr	r3, [pc, #152]	; (3668 <__ieee754_pow+0x61c>)
    35d0:	18cb      	adds	r3, r1, r3
    35d2:	4303      	orrs	r3, r0
    35d4:	d000      	beq.n	35d8 <__ieee754_pow+0x58c>
    35d6:	e1db      	b.n	3990 <__ieee754_pow+0x944>
    35d8:	9804      	ldr	r0, [sp, #16]
    35da:	9905      	ldr	r1, [sp, #20]
    35dc:	4a23      	ldr	r2, [pc, #140]	; (366c <__ieee754_pow+0x620>)
    35de:	4b24      	ldr	r3, [pc, #144]	; (3670 <__ieee754_pow+0x624>)
    35e0:	f000 fedc 	bl	439c <__aeabi_dadd>
    35e4:	9a00      	ldr	r2, [sp, #0]
    35e6:	9b01      	ldr	r3, [sp, #4]
    35e8:	0004      	movs	r4, r0
    35ea:	000d      	movs	r5, r1
    35ec:	4648      	mov	r0, r9
    35ee:	0039      	movs	r1, r7
    35f0:	f002 f89e 	bl	5730 <__aeabi_dsub>
    35f4:	0002      	movs	r2, r0
    35f6:	000b      	movs	r3, r1
    35f8:	0020      	movs	r0, r4
    35fa:	0029      	movs	r1, r5
    35fc:	f000 fd3a 	bl	4074 <__aeabi_dcmpgt>
    3600:	003e      	movs	r6, r7
    3602:	e037      	b.n	3674 <__ieee754_pow+0x628>
    3604:	000fffff 	.word	0x000fffff
    3608:	43400000 	.word	0x43400000
    360c:	fffffc01 	.word	0xfffffc01
    3610:	3ff00000 	.word	0x3ff00000
    3614:	0003988e 	.word	0x0003988e
    3618:	000bb679 	.word	0x000bb679
    361c:	fff00000 	.word	0xfff00000
    3620:	4a454eef 	.word	0x4a454eef
    3624:	3fca7e28 	.word	0x3fca7e28
    3628:	93c9db65 	.word	0x93c9db65
    362c:	3fcd864a 	.word	0x3fcd864a
    3630:	a91d4101 	.word	0xa91d4101
    3634:	3fd17460 	.word	0x3fd17460
    3638:	518f264d 	.word	0x518f264d
    363c:	3fd55555 	.word	0x3fd55555
    3640:	db6fabff 	.word	0xdb6fabff
    3644:	3fdb6db6 	.word	0x3fdb6db6
    3648:	33333303 	.word	0x33333303
    364c:	3fe33333 	.word	0x3fe33333
    3650:	40080000 	.word	0x40080000
    3654:	3feec709 	.word	0x3feec709
    3658:	dc3a03fd 	.word	0xdc3a03fd
    365c:	145b01f5 	.word	0x145b01f5
    3660:	be3e2fe0 	.word	0xbe3e2fe0
    3664:	408fffff 	.word	0x408fffff
    3668:	bf700000 	.word	0xbf700000
    366c:	652b82fe 	.word	0x652b82fe
    3670:	3c971547 	.word	0x3c971547
    3674:	2800      	cmp	r0, #0
    3676:	d000      	beq.n	367a <__ieee754_pow+0x62e>
    3678:	e18a      	b.n	3990 <__ieee754_pow+0x944>
    367a:	2280      	movs	r2, #128	; 0x80
    367c:	4be7      	ldr	r3, [pc, #924]	; (3a1c <__ieee754_pow+0x9d0>)
    367e:	0352      	lsls	r2, r2, #13
    3680:	469c      	mov	ip, r3
    3682:	0013      	movs	r3, r2
    3684:	1536      	asrs	r6, r6, #20
    3686:	4466      	add	r6, ip
    3688:	4133      	asrs	r3, r6
    368a:	49e5      	ldr	r1, [pc, #916]	; (3a20 <__ieee754_pow+0x9d4>)
    368c:	19db      	adds	r3, r3, r7
    368e:	005e      	lsls	r6, r3, #1
    3690:	001c      	movs	r4, r3
    3692:	031b      	lsls	r3, r3, #12
    3694:	468c      	mov	ip, r1
    3696:	0b1b      	lsrs	r3, r3, #12
    3698:	4313      	orrs	r3, r2
    369a:	2214      	movs	r2, #20
    369c:	0d76      	lsrs	r6, r6, #21
    369e:	4fe1      	ldr	r7, [pc, #900]	; (3a24 <__ieee754_pow+0x9d8>)
    36a0:	4466      	add	r6, ip
    36a2:	4137      	asrs	r7, r6
    36a4:	1b96      	subs	r6, r2, r6
    36a6:	4133      	asrs	r3, r6
    36a8:	4698      	mov	r8, r3
    36aa:	4653      	mov	r3, sl
    36ac:	43bc      	bics	r4, r7
    36ae:	2000      	movs	r0, #0
    36b0:	0021      	movs	r1, r4
    36b2:	2b00      	cmp	r3, #0
    36b4:	da00      	bge.n	36b8 <__ieee754_pow+0x66c>
    36b6:	e1a9      	b.n	3a0c <__ieee754_pow+0x9c0>
    36b8:	0002      	movs	r2, r0
    36ba:	000b      	movs	r3, r1
    36bc:	9800      	ldr	r0, [sp, #0]
    36be:	9901      	ldr	r1, [sp, #4]
    36c0:	f002 f836 	bl	5730 <__aeabi_dsub>
    36c4:	000b      	movs	r3, r1
    36c6:	9000      	str	r0, [sp, #0]
    36c8:	9101      	str	r1, [sp, #4]
    36ca:	0002      	movs	r2, r0
    36cc:	9804      	ldr	r0, [sp, #16]
    36ce:	9905      	ldr	r1, [sp, #20]
    36d0:	f000 fe64 	bl	439c <__aeabi_dadd>
    36d4:	4643      	mov	r3, r8
    36d6:	051b      	lsls	r3, r3, #20
    36d8:	4699      	mov	r9, r3
    36da:	2000      	movs	r0, #0
    36dc:	2200      	movs	r2, #0
    36de:	4bd2      	ldr	r3, [pc, #840]	; (3a28 <__ieee754_pow+0x9dc>)
    36e0:	0006      	movs	r6, r0
    36e2:	000f      	movs	r7, r1
    36e4:	f001 fdaa 	bl	523c <__aeabi_dmul>
    36e8:	9a00      	ldr	r2, [sp, #0]
    36ea:	9b01      	ldr	r3, [sp, #4]
    36ec:	9002      	str	r0, [sp, #8]
    36ee:	9103      	str	r1, [sp, #12]
    36f0:	0030      	movs	r0, r6
    36f2:	0039      	movs	r1, r7
    36f4:	f002 f81c 	bl	5730 <__aeabi_dsub>
    36f8:	0002      	movs	r2, r0
    36fa:	000b      	movs	r3, r1
    36fc:	9804      	ldr	r0, [sp, #16]
    36fe:	9905      	ldr	r1, [sp, #20]
    3700:	f002 f816 	bl	5730 <__aeabi_dsub>
    3704:	4ac9      	ldr	r2, [pc, #804]	; (3a2c <__ieee754_pow+0x9e0>)
    3706:	4bca      	ldr	r3, [pc, #808]	; (3a30 <__ieee754_pow+0x9e4>)
    3708:	f001 fd98 	bl	523c <__aeabi_dmul>
    370c:	4ac9      	ldr	r2, [pc, #804]	; (3a34 <__ieee754_pow+0x9e8>)
    370e:	0004      	movs	r4, r0
    3710:	000d      	movs	r5, r1
    3712:	4bc9      	ldr	r3, [pc, #804]	; (3a38 <__ieee754_pow+0x9ec>)
    3714:	0030      	movs	r0, r6
    3716:	0039      	movs	r1, r7
    3718:	f001 fd90 	bl	523c <__aeabi_dmul>
    371c:	0002      	movs	r2, r0
    371e:	000b      	movs	r3, r1
    3720:	0020      	movs	r0, r4
    3722:	0029      	movs	r1, r5
    3724:	f000 fe3a 	bl	439c <__aeabi_dadd>
    3728:	0004      	movs	r4, r0
    372a:	000d      	movs	r5, r1
    372c:	0002      	movs	r2, r0
    372e:	000b      	movs	r3, r1
    3730:	9802      	ldr	r0, [sp, #8]
    3732:	9903      	ldr	r1, [sp, #12]
    3734:	f000 fe32 	bl	439c <__aeabi_dadd>
    3738:	9a02      	ldr	r2, [sp, #8]
    373a:	9b03      	ldr	r3, [sp, #12]
    373c:	0006      	movs	r6, r0
    373e:	000f      	movs	r7, r1
    3740:	f001 fff6 	bl	5730 <__aeabi_dsub>
    3744:	0002      	movs	r2, r0
    3746:	000b      	movs	r3, r1
    3748:	0020      	movs	r0, r4
    374a:	0029      	movs	r1, r5
    374c:	f001 fff0 	bl	5730 <__aeabi_dsub>
    3750:	0032      	movs	r2, r6
    3752:	9000      	str	r0, [sp, #0]
    3754:	9101      	str	r1, [sp, #4]
    3756:	003b      	movs	r3, r7
    3758:	0030      	movs	r0, r6
    375a:	0039      	movs	r1, r7
    375c:	f001 fd6e 	bl	523c <__aeabi_dmul>
    3760:	0004      	movs	r4, r0
    3762:	000d      	movs	r5, r1
    3764:	4ab5      	ldr	r2, [pc, #724]	; (3a3c <__ieee754_pow+0x9f0>)
    3766:	4bb6      	ldr	r3, [pc, #728]	; (3a40 <__ieee754_pow+0x9f4>)
    3768:	f001 fd68 	bl	523c <__aeabi_dmul>
    376c:	4ab5      	ldr	r2, [pc, #724]	; (3a44 <__ieee754_pow+0x9f8>)
    376e:	4bb6      	ldr	r3, [pc, #728]	; (3a48 <__ieee754_pow+0x9fc>)
    3770:	f001 ffde 	bl	5730 <__aeabi_dsub>
    3774:	0022      	movs	r2, r4
    3776:	002b      	movs	r3, r5
    3778:	f001 fd60 	bl	523c <__aeabi_dmul>
    377c:	4ab3      	ldr	r2, [pc, #716]	; (3a4c <__ieee754_pow+0xa00>)
    377e:	4bb4      	ldr	r3, [pc, #720]	; (3a50 <__ieee754_pow+0xa04>)
    3780:	f000 fe0c 	bl	439c <__aeabi_dadd>
    3784:	0022      	movs	r2, r4
    3786:	002b      	movs	r3, r5
    3788:	f001 fd58 	bl	523c <__aeabi_dmul>
    378c:	4ab1      	ldr	r2, [pc, #708]	; (3a54 <__ieee754_pow+0xa08>)
    378e:	4bb2      	ldr	r3, [pc, #712]	; (3a58 <__ieee754_pow+0xa0c>)
    3790:	f001 ffce 	bl	5730 <__aeabi_dsub>
    3794:	0022      	movs	r2, r4
    3796:	002b      	movs	r3, r5
    3798:	f001 fd50 	bl	523c <__aeabi_dmul>
    379c:	4aaf      	ldr	r2, [pc, #700]	; (3a5c <__ieee754_pow+0xa10>)
    379e:	4bb0      	ldr	r3, [pc, #704]	; (3a60 <__ieee754_pow+0xa14>)
    37a0:	f000 fdfc 	bl	439c <__aeabi_dadd>
    37a4:	0022      	movs	r2, r4
    37a6:	002b      	movs	r3, r5
    37a8:	f001 fd48 	bl	523c <__aeabi_dmul>
    37ac:	0002      	movs	r2, r0
    37ae:	000b      	movs	r3, r1
    37b0:	0030      	movs	r0, r6
    37b2:	0039      	movs	r1, r7
    37b4:	f001 ffbc 	bl	5730 <__aeabi_dsub>
    37b8:	0004      	movs	r4, r0
    37ba:	000d      	movs	r5, r1
    37bc:	0002      	movs	r2, r0
    37be:	000b      	movs	r3, r1
    37c0:	0030      	movs	r0, r6
    37c2:	0039      	movs	r1, r7
    37c4:	f001 fd3a 	bl	523c <__aeabi_dmul>
    37c8:	2380      	movs	r3, #128	; 0x80
    37ca:	9002      	str	r0, [sp, #8]
    37cc:	9103      	str	r1, [sp, #12]
    37ce:	2200      	movs	r2, #0
    37d0:	05db      	lsls	r3, r3, #23
    37d2:	0020      	movs	r0, r4
    37d4:	0029      	movs	r1, r5
    37d6:	f001 ffab 	bl	5730 <__aeabi_dsub>
    37da:	0002      	movs	r2, r0
    37dc:	000b      	movs	r3, r1
    37de:	9802      	ldr	r0, [sp, #8]
    37e0:	9903      	ldr	r1, [sp, #12]
    37e2:	f001 f907 	bl	49f4 <__aeabi_ddiv>
    37e6:	9a00      	ldr	r2, [sp, #0]
    37e8:	9b01      	ldr	r3, [sp, #4]
    37ea:	0004      	movs	r4, r0
    37ec:	000d      	movs	r5, r1
    37ee:	0030      	movs	r0, r6
    37f0:	0039      	movs	r1, r7
    37f2:	f001 fd23 	bl	523c <__aeabi_dmul>
    37f6:	9a00      	ldr	r2, [sp, #0]
    37f8:	9b01      	ldr	r3, [sp, #4]
    37fa:	f000 fdcf 	bl	439c <__aeabi_dadd>
    37fe:	0002      	movs	r2, r0
    3800:	000b      	movs	r3, r1
    3802:	0020      	movs	r0, r4
    3804:	0029      	movs	r1, r5
    3806:	f001 ff93 	bl	5730 <__aeabi_dsub>
    380a:	0032      	movs	r2, r6
    380c:	003b      	movs	r3, r7
    380e:	f001 ff8f 	bl	5730 <__aeabi_dsub>
    3812:	0002      	movs	r2, r0
    3814:	000b      	movs	r3, r1
    3816:	2000      	movs	r0, #0
    3818:	4992      	ldr	r1, [pc, #584]	; (3a64 <__ieee754_pow+0xa18>)
    381a:	f001 ff89 	bl	5730 <__aeabi_dsub>
    381e:	464b      	mov	r3, r9
    3820:	185b      	adds	r3, r3, r1
    3822:	151a      	asrs	r2, r3, #20
    3824:	2a00      	cmp	r2, #0
    3826:	dc00      	bgt.n	382a <__ieee754_pow+0x7de>
    3828:	e0f4      	b.n	3a14 <__ieee754_pow+0x9c8>
    382a:	0019      	movs	r1, r3
    382c:	9a06      	ldr	r2, [sp, #24]
    382e:	9b07      	ldr	r3, [sp, #28]
    3830:	f001 fd04 	bl	523c <__aeabi_dmul>
    3834:	0006      	movs	r6, r0
    3836:	e452      	b.n	30de <__ieee754_pow+0x92>
    3838:	0032      	movs	r2, r6
    383a:	0030      	movs	r0, r6
    383c:	002b      	movs	r3, r5
    383e:	0029      	movs	r1, r5
    3840:	f001 fcfc 	bl	523c <__aeabi_dmul>
    3844:	0006      	movs	r6, r0
    3846:	e44a      	b.n	30de <__ieee754_pow+0x92>
    3848:	4b87      	ldr	r3, [pc, #540]	; (3a68 <__ieee754_pow+0xa1c>)
    384a:	004e      	lsls	r6, r1, #1
    384c:	0876      	lsrs	r6, r6, #1
    384e:	429e      	cmp	r6, r3
    3850:	dc00      	bgt.n	3854 <__ieee754_pow+0x808>
    3852:	e0bf      	b.n	39d4 <__ieee754_pow+0x988>
    3854:	4b85      	ldr	r3, [pc, #532]	; (3a6c <__ieee754_pow+0xa20>)
    3856:	18cb      	adds	r3, r1, r3
    3858:	4303      	orrs	r3, r0
    385a:	d10c      	bne.n	3876 <__ieee754_pow+0x82a>
    385c:	9a00      	ldr	r2, [sp, #0]
    385e:	9b01      	ldr	r3, [sp, #4]
    3860:	f001 ff66 	bl	5730 <__aeabi_dsub>
    3864:	0002      	movs	r2, r0
    3866:	000b      	movs	r3, r1
    3868:	9804      	ldr	r0, [sp, #16]
    386a:	9905      	ldr	r1, [sp, #20]
    386c:	f000 fbf8 	bl	4060 <__aeabi_dcmple>
    3870:	2800      	cmp	r0, #0
    3872:	d100      	bne.n	3876 <__ieee754_pow+0x82a>
    3874:	e701      	b.n	367a <__ieee754_pow+0x62e>
    3876:	9806      	ldr	r0, [sp, #24]
    3878:	9907      	ldr	r1, [sp, #28]
    387a:	4a7d      	ldr	r2, [pc, #500]	; (3a70 <__ieee754_pow+0xa24>)
    387c:	4b7d      	ldr	r3, [pc, #500]	; (3a74 <__ieee754_pow+0xa28>)
    387e:	f001 fcdd 	bl	523c <__aeabi_dmul>
    3882:	4a7b      	ldr	r2, [pc, #492]	; (3a70 <__ieee754_pow+0xa24>)
    3884:	4b7b      	ldr	r3, [pc, #492]	; (3a74 <__ieee754_pow+0xa28>)
    3886:	f001 fcd9 	bl	523c <__aeabi_dmul>
    388a:	0006      	movs	r6, r0
    388c:	f7ff fc27 	bl	30de <__ieee754_pow+0x92>
    3890:	2300      	movs	r3, #0
    3892:	4c79      	ldr	r4, [pc, #484]	; (3a78 <__ieee754_pow+0xa2c>)
    3894:	9306      	str	r3, [sp, #24]
    3896:	9407      	str	r4, [sp, #28]
    3898:	e666      	b.n	3568 <__ieee754_pow+0x51c>
    389a:	4653      	mov	r3, sl
    389c:	2b00      	cmp	r3, #0
    389e:	db00      	blt.n	38a2 <__ieee754_pow+0x856>
    38a0:	e4c3      	b.n	322a <__ieee754_pow+0x1de>
    38a2:	9b00      	ldr	r3, [sp, #0]
    38a4:	9c01      	ldr	r4, [sp, #4]
    38a6:	2280      	movs	r2, #128	; 0x80
    38a8:	0612      	lsls	r2, r2, #24
    38aa:	001e      	movs	r6, r3
    38ac:	4694      	mov	ip, r2
    38ae:	0023      	movs	r3, r4
    38b0:	4463      	add	r3, ip
    38b2:	0019      	movs	r1, r3
    38b4:	f7ff fc13 	bl	30de <__ieee754_pow+0x92>
    38b8:	0002      	movs	r2, r0
    38ba:	000b      	movs	r3, r1
    38bc:	2000      	movs	r0, #0
    38be:	4969      	ldr	r1, [pc, #420]	; (3a64 <__ieee754_pow+0xa18>)
    38c0:	f001 f898 	bl	49f4 <__aeabi_ddiv>
    38c4:	e44a      	b.n	315c <__ieee754_pow+0x110>
    38c6:	4b6d      	ldr	r3, [pc, #436]	; (3a7c <__ieee754_pow+0xa30>)
    38c8:	429c      	cmp	r4, r3
    38ca:	dc00      	bgt.n	38ce <__ieee754_pow+0x882>
    38cc:	e4aa      	b.n	3224 <__ieee754_pow+0x1d8>
    38ce:	4b65      	ldr	r3, [pc, #404]	; (3a64 <__ieee754_pow+0xa18>)
    38d0:	429c      	cmp	r4, r3
    38d2:	dd01      	ble.n	38d8 <__ieee754_pow+0x88c>
    38d4:	f7ff fc2c 	bl	3130 <__ieee754_pow+0xe4>
    38d8:	2200      	movs	r2, #0
    38da:	4b62      	ldr	r3, [pc, #392]	; (3a64 <__ieee754_pow+0xa18>)
    38dc:	f001 ff28 	bl	5730 <__aeabi_dsub>
    38e0:	22c0      	movs	r2, #192	; 0xc0
    38e2:	4b67      	ldr	r3, [pc, #412]	; (3a80 <__ieee754_pow+0xa34>)
    38e4:	05d2      	lsls	r2, r2, #23
    38e6:	0004      	movs	r4, r0
    38e8:	000d      	movs	r5, r1
    38ea:	f001 fca7 	bl	523c <__aeabi_dmul>
    38ee:	4a65      	ldr	r2, [pc, #404]	; (3a84 <__ieee754_pow+0xa38>)
    38f0:	0006      	movs	r6, r0
    38f2:	000f      	movs	r7, r1
    38f4:	4b64      	ldr	r3, [pc, #400]	; (3a88 <__ieee754_pow+0xa3c>)
    38f6:	0020      	movs	r0, r4
    38f8:	0029      	movs	r1, r5
    38fa:	f001 fc9f 	bl	523c <__aeabi_dmul>
    38fe:	2200      	movs	r2, #0
    3900:	9002      	str	r0, [sp, #8]
    3902:	9103      	str	r1, [sp, #12]
    3904:	4b61      	ldr	r3, [pc, #388]	; (3a8c <__ieee754_pow+0xa40>)
    3906:	0020      	movs	r0, r4
    3908:	0029      	movs	r1, r5
    390a:	f001 fc97 	bl	523c <__aeabi_dmul>
    390e:	0002      	movs	r2, r0
    3910:	000b      	movs	r3, r1
    3912:	485f      	ldr	r0, [pc, #380]	; (3a90 <__ieee754_pow+0xa44>)
    3914:	495f      	ldr	r1, [pc, #380]	; (3a94 <__ieee754_pow+0xa48>)
    3916:	f001 ff0b 	bl	5730 <__aeabi_dsub>
    391a:	0022      	movs	r2, r4
    391c:	002b      	movs	r3, r5
    391e:	f001 fc8d 	bl	523c <__aeabi_dmul>
    3922:	0002      	movs	r2, r0
    3924:	000b      	movs	r3, r1
    3926:	2000      	movs	r0, #0
    3928:	495b      	ldr	r1, [pc, #364]	; (3a98 <__ieee754_pow+0xa4c>)
    392a:	f001 ff01 	bl	5730 <__aeabi_dsub>
    392e:	0022      	movs	r2, r4
    3930:	9004      	str	r0, [sp, #16]
    3932:	9105      	str	r1, [sp, #20]
    3934:	002b      	movs	r3, r5
    3936:	0020      	movs	r0, r4
    3938:	0029      	movs	r1, r5
    393a:	f001 fc7f 	bl	523c <__aeabi_dmul>
    393e:	0002      	movs	r2, r0
    3940:	000b      	movs	r3, r1
    3942:	9804      	ldr	r0, [sp, #16]
    3944:	9905      	ldr	r1, [sp, #20]
    3946:	f001 fc79 	bl	523c <__aeabi_dmul>
    394a:	4a54      	ldr	r2, [pc, #336]	; (3a9c <__ieee754_pow+0xa50>)
    394c:	4b4c      	ldr	r3, [pc, #304]	; (3a80 <__ieee754_pow+0xa34>)
    394e:	f001 fc75 	bl	523c <__aeabi_dmul>
    3952:	0002      	movs	r2, r0
    3954:	000b      	movs	r3, r1
    3956:	9802      	ldr	r0, [sp, #8]
    3958:	9903      	ldr	r1, [sp, #12]
    395a:	f001 fee9 	bl	5730 <__aeabi_dsub>
    395e:	0002      	movs	r2, r0
    3960:	000b      	movs	r3, r1
    3962:	0004      	movs	r4, r0
    3964:	000d      	movs	r5, r1
    3966:	0030      	movs	r0, r6
    3968:	0039      	movs	r1, r7
    396a:	f000 fd17 	bl	439c <__aeabi_dadd>
    396e:	2200      	movs	r2, #0
    3970:	0010      	movs	r0, r2
    3972:	003b      	movs	r3, r7
    3974:	0032      	movs	r2, r6
    3976:	9002      	str	r0, [sp, #8]
    3978:	9103      	str	r1, [sp, #12]
    397a:	f001 fed9 	bl	5730 <__aeabi_dsub>
    397e:	0002      	movs	r2, r0
    3980:	000b      	movs	r3, r1
    3982:	0020      	movs	r0, r4
    3984:	0029      	movs	r1, r5
    3986:	f001 fed3 	bl	5730 <__aeabi_dsub>
    398a:	9004      	str	r0, [sp, #16]
    398c:	9105      	str	r1, [sp, #20]
    398e:	e5e1      	b.n	3554 <__ieee754_pow+0x508>
    3990:	4a43      	ldr	r2, [pc, #268]	; (3aa0 <__ieee754_pow+0xa54>)
    3992:	4b44      	ldr	r3, [pc, #272]	; (3aa4 <__ieee754_pow+0xa58>)
    3994:	9806      	ldr	r0, [sp, #24]
    3996:	9907      	ldr	r1, [sp, #28]
    3998:	f001 fc50 	bl	523c <__aeabi_dmul>
    399c:	4a40      	ldr	r2, [pc, #256]	; (3aa0 <__ieee754_pow+0xa54>)
    399e:	4b41      	ldr	r3, [pc, #260]	; (3aa4 <__ieee754_pow+0xa58>)
    39a0:	f001 fc4c 	bl	523c <__aeabi_dmul>
    39a4:	0006      	movs	r6, r0
    39a6:	f7ff fb9a 	bl	30de <__ieee754_pow+0x92>
    39aa:	2a00      	cmp	r2, #0
    39ac:	d001      	beq.n	39b2 <__ieee754_pow+0x966>
    39ae:	f7ff fba5 	bl	30fc <__ieee754_pow+0xb0>
    39b2:	3214      	adds	r2, #20
    39b4:	1ad3      	subs	r3, r2, r3
    39b6:	003a      	movs	r2, r7
    39b8:	411a      	asrs	r2, r3
    39ba:	0011      	movs	r1, r2
    39bc:	4099      	lsls	r1, r3
    39be:	428f      	cmp	r7, r1
    39c0:	d001      	beq.n	39c6 <__ieee754_pow+0x97a>
    39c2:	f7ff fb6f 	bl	30a4 <__ieee754_pow+0x58>
    39c6:	2301      	movs	r3, #1
    39c8:	4013      	ands	r3, r2
    39ca:	2202      	movs	r2, #2
    39cc:	1ad3      	subs	r3, r2, r3
    39ce:	469b      	mov	fp, r3
    39d0:	f7ff fb68 	bl	30a4 <__ieee754_pow+0x58>
    39d4:	4b30      	ldr	r3, [pc, #192]	; (3a98 <__ieee754_pow+0xa4c>)
    39d6:	429e      	cmp	r6, r3
    39d8:	dd00      	ble.n	39dc <__ieee754_pow+0x990>
    39da:	e64e      	b.n	367a <__ieee754_pow+0x62e>
    39dc:	2300      	movs	r3, #0
    39de:	4699      	mov	r9, r3
    39e0:	4698      	mov	r8, r3
    39e2:	e67a      	b.n	36da <__ieee754_pow+0x68e>
    39e4:	0002      	movs	r2, r0
    39e6:	000b      	movs	r3, r1
    39e8:	f7ff fc14 	bl	3214 <__ieee754_pow+0x1c8>
    39ec:	2380      	movs	r3, #128	; 0x80
    39ee:	4c2e      	ldr	r4, [pc, #184]	; (3aa8 <__ieee754_pow+0xa5c>)
    39f0:	05db      	lsls	r3, r3, #23
    39f2:	9308      	str	r3, [sp, #32]
    39f4:	9409      	str	r4, [sp, #36]	; 0x24
    39f6:	4b2d      	ldr	r3, [pc, #180]	; (3aac <__ieee754_pow+0xa60>)
    39f8:	4c2d      	ldr	r4, [pc, #180]	; (3ab0 <__ieee754_pow+0xa64>)
    39fa:	2200      	movs	r2, #0
    39fc:	930c      	str	r3, [sp, #48]	; 0x30
    39fe:	940d      	str	r4, [sp, #52]	; 0x34
    3a00:	2480      	movs	r4, #128	; 0x80
    3a02:	4b2c      	ldr	r3, [pc, #176]	; (3ab4 <__ieee754_pow+0xa68>)
    3a04:	02e4      	lsls	r4, r4, #11
    3a06:	9206      	str	r2, [sp, #24]
    3a08:	9307      	str	r3, [sp, #28]
    3a0a:	e456      	b.n	32ba <__ieee754_pow+0x26e>
    3a0c:	4643      	mov	r3, r8
    3a0e:	425b      	negs	r3, r3
    3a10:	4698      	mov	r8, r3
    3a12:	e651      	b.n	36b8 <__ieee754_pow+0x66c>
    3a14:	4642      	mov	r2, r8
    3a16:	f000 f9fd 	bl	3e14 <scalbn>
    3a1a:	e707      	b.n	382c <__ieee754_pow+0x7e0>
    3a1c:	fffffc02 	.word	0xfffffc02
    3a20:	fffffc01 	.word	0xfffffc01
    3a24:	000fffff 	.word	0x000fffff
    3a28:	3fe62e43 	.word	0x3fe62e43
    3a2c:	fefa39ef 	.word	0xfefa39ef
    3a30:	3fe62e42 	.word	0x3fe62e42
    3a34:	0ca86c39 	.word	0x0ca86c39
    3a38:	be205c61 	.word	0xbe205c61
    3a3c:	72bea4d0 	.word	0x72bea4d0
    3a40:	3e663769 	.word	0x3e663769
    3a44:	c5d26bf1 	.word	0xc5d26bf1
    3a48:	3ebbbd41 	.word	0x3ebbbd41
    3a4c:	af25de2c 	.word	0xaf25de2c
    3a50:	3f11566a 	.word	0x3f11566a
    3a54:	16bebd93 	.word	0x16bebd93
    3a58:	3f66c16c 	.word	0x3f66c16c
    3a5c:	5555553e 	.word	0x5555553e
    3a60:	3fc55555 	.word	0x3fc55555
    3a64:	3ff00000 	.word	0x3ff00000
    3a68:	4090cbff 	.word	0x4090cbff
    3a6c:	3f6f3400 	.word	0x3f6f3400
    3a70:	c2f8f359 	.word	0xc2f8f359
    3a74:	01a56e1f 	.word	0x01a56e1f
    3a78:	bff00000 	.word	0xbff00000
    3a7c:	3feffffe 	.word	0x3feffffe
    3a80:	3ff71547 	.word	0x3ff71547
    3a84:	f85ddf44 	.word	0xf85ddf44
    3a88:	3e54ae0b 	.word	0x3e54ae0b
    3a8c:	3fd00000 	.word	0x3fd00000
    3a90:	55555555 	.word	0x55555555
    3a94:	3fd55555 	.word	0x3fd55555
    3a98:	3fe00000 	.word	0x3fe00000
    3a9c:	652b82fe 	.word	0x652b82fe
    3aa0:	8800759c 	.word	0x8800759c
    3aa4:	7e37e43c 	.word	0x7e37e43c
    3aa8:	3fe2b803 	.word	0x3fe2b803
    3aac:	43cfd006 	.word	0x43cfd006
    3ab0:	3e4cfdeb 	.word	0x3e4cfdeb
    3ab4:	3ff80000 	.word	0x3ff80000

00003ab8 <__ieee754_sqrt>:
    3ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3aba:	4656      	mov	r6, sl
    3abc:	464d      	mov	r5, r9
    3abe:	4644      	mov	r4, r8
    3ac0:	465f      	mov	r7, fp
    3ac2:	4b75      	ldr	r3, [pc, #468]	; (3c98 <__ieee754_sqrt+0x1e0>)
    3ac4:	b4f0      	push	{r4, r5, r6, r7}
    3ac6:	000a      	movs	r2, r1
    3ac8:	000d      	movs	r5, r1
    3aca:	0019      	movs	r1, r3
    3acc:	b083      	sub	sp, #12
    3ace:	0006      	movs	r6, r0
    3ad0:	0004      	movs	r4, r0
    3ad2:	4029      	ands	r1, r5
    3ad4:	4299      	cmp	r1, r3
    3ad6:	d100      	bne.n	3ada <__ieee754_sqrt+0x22>
    3ad8:	e0ba      	b.n	3c50 <__ieee754_sqrt+0x198>
    3ada:	2d00      	cmp	r5, #0
    3adc:	dc00      	bgt.n	3ae0 <__ieee754_sqrt+0x28>
    3ade:	e094      	b.n	3c0a <__ieee754_sqrt+0x152>
    3ae0:	152d      	asrs	r5, r5, #20
    3ae2:	d100      	bne.n	3ae6 <__ieee754_sqrt+0x2e>
    3ae4:	e0a3      	b.n	3c2e <__ieee754_sqrt+0x176>
    3ae6:	4b6d      	ldr	r3, [pc, #436]	; (3c9c <__ieee754_sqrt+0x1e4>)
    3ae8:	0312      	lsls	r2, r2, #12
    3aea:	469c      	mov	ip, r3
    3aec:	2380      	movs	r3, #128	; 0x80
    3aee:	0b12      	lsrs	r2, r2, #12
    3af0:	035b      	lsls	r3, r3, #13
    3af2:	4465      	add	r5, ip
    3af4:	431a      	orrs	r2, r3
    3af6:	07eb      	lsls	r3, r5, #31
    3af8:	d500      	bpl.n	3afc <__ieee754_sqrt+0x44>
    3afa:	e081      	b.n	3c00 <__ieee754_sqrt+0x148>
    3afc:	106b      	asrs	r3, r5, #1
    3afe:	4698      	mov	r8, r3
    3b00:	0fe3      	lsrs	r3, r4, #31
    3b02:	189b      	adds	r3, r3, r2
    3b04:	189b      	adds	r3, r3, r2
    3b06:	2280      	movs	r2, #128	; 0x80
    3b08:	2116      	movs	r1, #22
    3b0a:	2600      	movs	r6, #0
    3b0c:	2700      	movs	r7, #0
    3b0e:	0064      	lsls	r4, r4, #1
    3b10:	0392      	lsls	r2, r2, #14
    3b12:	18b8      	adds	r0, r7, r2
    3b14:	4298      	cmp	r0, r3
    3b16:	dc02      	bgt.n	3b1e <__ieee754_sqrt+0x66>
    3b18:	1887      	adds	r7, r0, r2
    3b1a:	1a1b      	subs	r3, r3, r0
    3b1c:	18b6      	adds	r6, r6, r2
    3b1e:	0fe0      	lsrs	r0, r4, #31
    3b20:	005b      	lsls	r3, r3, #1
    3b22:	3901      	subs	r1, #1
    3b24:	181b      	adds	r3, r3, r0
    3b26:	0064      	lsls	r4, r4, #1
    3b28:	0852      	lsrs	r2, r2, #1
    3b2a:	2900      	cmp	r1, #0
    3b2c:	d1f1      	bne.n	3b12 <__ieee754_sqrt+0x5a>
    3b2e:	2200      	movs	r2, #0
    3b30:	9201      	str	r2, [sp, #4]
    3b32:	4694      	mov	ip, r2
    3b34:	2280      	movs	r2, #128	; 0x80
    3b36:	0612      	lsls	r2, r2, #24
    3b38:	2020      	movs	r0, #32
    3b3a:	4691      	mov	r9, r2
    3b3c:	e009      	b.n	3b52 <__ieee754_sqrt+0x9a>
    3b3e:	429f      	cmp	r7, r3
    3b40:	d041      	beq.n	3bc6 <__ieee754_sqrt+0x10e>
    3b42:	0fe1      	lsrs	r1, r4, #31
    3b44:	18c9      	adds	r1, r1, r3
    3b46:	3801      	subs	r0, #1
    3b48:	18cb      	adds	r3, r1, r3
    3b4a:	0064      	lsls	r4, r4, #1
    3b4c:	0852      	lsrs	r2, r2, #1
    3b4e:	2800      	cmp	r0, #0
    3b50:	d01e      	beq.n	3b90 <__ieee754_sqrt+0xd8>
    3b52:	4661      	mov	r1, ip
    3b54:	1851      	adds	r1, r2, r1
    3b56:	429f      	cmp	r7, r3
    3b58:	daf1      	bge.n	3b3e <__ieee754_sqrt+0x86>
    3b5a:	188d      	adds	r5, r1, r2
    3b5c:	46ac      	mov	ip, r5
    3b5e:	0fcd      	lsrs	r5, r1, #31
    3b60:	07ed      	lsls	r5, r5, #31
    3b62:	46ba      	mov	sl, r7
    3b64:	454d      	cmp	r5, r9
    3b66:	d039      	beq.n	3bdc <__ieee754_sqrt+0x124>
    3b68:	1bdb      	subs	r3, r3, r7
    3b6a:	428c      	cmp	r4, r1
    3b6c:	41bf      	sbcs	r7, r7
    3b6e:	427f      	negs	r7, r7
    3b70:	1bdb      	subs	r3, r3, r7
    3b72:	1a64      	subs	r4, r4, r1
    3b74:	9901      	ldr	r1, [sp, #4]
    3b76:	3801      	subs	r0, #1
    3b78:	468b      	mov	fp, r1
    3b7a:	4493      	add	fp, r2
    3b7c:	4659      	mov	r1, fp
    3b7e:	9101      	str	r1, [sp, #4]
    3b80:	0fe1      	lsrs	r1, r4, #31
    3b82:	18c9      	adds	r1, r1, r3
    3b84:	4657      	mov	r7, sl
    3b86:	18cb      	adds	r3, r1, r3
    3b88:	0064      	lsls	r4, r4, #1
    3b8a:	0852      	lsrs	r2, r2, #1
    3b8c:	2800      	cmp	r0, #0
    3b8e:	d1e0      	bne.n	3b52 <__ieee754_sqrt+0x9a>
    3b90:	4323      	orrs	r3, r4
    3b92:	d12b      	bne.n	3bec <__ieee754_sqrt+0x134>
    3b94:	9b01      	ldr	r3, [sp, #4]
    3b96:	085b      	lsrs	r3, r3, #1
    3b98:	4941      	ldr	r1, [pc, #260]	; (3ca0 <__ieee754_sqrt+0x1e8>)
    3b9a:	1072      	asrs	r2, r6, #1
    3b9c:	468c      	mov	ip, r1
    3b9e:	4462      	add	r2, ip
    3ba0:	07f1      	lsls	r1, r6, #31
    3ba2:	d502      	bpl.n	3baa <__ieee754_sqrt+0xf2>
    3ba4:	2180      	movs	r1, #128	; 0x80
    3ba6:	0609      	lsls	r1, r1, #24
    3ba8:	430b      	orrs	r3, r1
    3baa:	4641      	mov	r1, r8
    3bac:	0509      	lsls	r1, r1, #20
    3bae:	188d      	adds	r5, r1, r2
    3bb0:	001e      	movs	r6, r3
    3bb2:	002f      	movs	r7, r5
    3bb4:	0030      	movs	r0, r6
    3bb6:	0039      	movs	r1, r7
    3bb8:	b003      	add	sp, #12
    3bba:	bc3c      	pop	{r2, r3, r4, r5}
    3bbc:	4690      	mov	r8, r2
    3bbe:	4699      	mov	r9, r3
    3bc0:	46a2      	mov	sl, r4
    3bc2:	46ab      	mov	fp, r5
    3bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bc6:	42a1      	cmp	r1, r4
    3bc8:	d80e      	bhi.n	3be8 <__ieee754_sqrt+0x130>
    3bca:	188d      	adds	r5, r1, r2
    3bcc:	46ac      	mov	ip, r5
    3bce:	0fcd      	lsrs	r5, r1, #31
    3bd0:	07ed      	lsls	r5, r5, #31
    3bd2:	454d      	cmp	r5, r9
    3bd4:	d048      	beq.n	3c68 <__ieee754_sqrt+0x1b0>
    3bd6:	469a      	mov	sl, r3
    3bd8:	2300      	movs	r3, #0
    3bda:	e7ca      	b.n	3b72 <__ieee754_sqrt+0xba>
    3bdc:	4665      	mov	r5, ip
    3bde:	2d00      	cmp	r5, #0
    3be0:	dbc2      	blt.n	3b68 <__ieee754_sqrt+0xb0>
    3be2:	1c7d      	adds	r5, r7, #1
    3be4:	46aa      	mov	sl, r5
    3be6:	e7bf      	b.n	3b68 <__ieee754_sqrt+0xb0>
    3be8:	003b      	movs	r3, r7
    3bea:	e7aa      	b.n	3b42 <__ieee754_sqrt+0x8a>
    3bec:	9b01      	ldr	r3, [sp, #4]
    3bee:	3301      	adds	r3, #1
    3bf0:	d03e      	beq.n	3c70 <__ieee754_sqrt+0x1b8>
    3bf2:	9a01      	ldr	r2, [sp, #4]
    3bf4:	2301      	movs	r3, #1
    3bf6:	4694      	mov	ip, r2
    3bf8:	4013      	ands	r3, r2
    3bfa:	4463      	add	r3, ip
    3bfc:	085b      	lsrs	r3, r3, #1
    3bfe:	e7cb      	b.n	3b98 <__ieee754_sqrt+0xe0>
    3c00:	0fe3      	lsrs	r3, r4, #31
    3c02:	0052      	lsls	r2, r2, #1
    3c04:	189a      	adds	r2, r3, r2
    3c06:	0064      	lsls	r4, r4, #1
    3c08:	e778      	b.n	3afc <__ieee754_sqrt+0x44>
    3c0a:	006b      	lsls	r3, r5, #1
    3c0c:	085b      	lsrs	r3, r3, #1
    3c0e:	4303      	orrs	r3, r0
    3c10:	002f      	movs	r7, r5
    3c12:	2b00      	cmp	r3, #0
    3c14:	d0ce      	beq.n	3bb4 <__ieee754_sqrt+0xfc>
    3c16:	2500      	movs	r5, #0
    3c18:	2a00      	cmp	r2, #0
    3c1a:	d131      	bne.n	3c80 <__ieee754_sqrt+0x1c8>
    3c1c:	0ae2      	lsrs	r2, r4, #11
    3c1e:	3d15      	subs	r5, #21
    3c20:	0564      	lsls	r4, r4, #21
    3c22:	2a00      	cmp	r2, #0
    3c24:	d0fa      	beq.n	3c1c <__ieee754_sqrt+0x164>
    3c26:	2380      	movs	r3, #128	; 0x80
    3c28:	035b      	lsls	r3, r3, #13
    3c2a:	421a      	tst	r2, r3
    3c2c:	d123      	bne.n	3c76 <__ieee754_sqrt+0x1be>
    3c2e:	2080      	movs	r0, #128	; 0x80
    3c30:	2300      	movs	r3, #0
    3c32:	0340      	lsls	r0, r0, #13
    3c34:	e000      	b.n	3c38 <__ieee754_sqrt+0x180>
    3c36:	000b      	movs	r3, r1
    3c38:	0052      	lsls	r2, r2, #1
    3c3a:	1c59      	adds	r1, r3, #1
    3c3c:	4202      	tst	r2, r0
    3c3e:	d0fa      	beq.n	3c36 <__ieee754_sqrt+0x17e>
    3c40:	2020      	movs	r0, #32
    3c42:	1a40      	subs	r0, r0, r1
    3c44:	1aed      	subs	r5, r5, r3
    3c46:	0023      	movs	r3, r4
    3c48:	40c3      	lsrs	r3, r0
    3c4a:	408c      	lsls	r4, r1
    3c4c:	431a      	orrs	r2, r3
    3c4e:	e74a      	b.n	3ae6 <__ieee754_sqrt+0x2e>
    3c50:	0002      	movs	r2, r0
    3c52:	002b      	movs	r3, r5
    3c54:	0029      	movs	r1, r5
    3c56:	f001 faf1 	bl	523c <__aeabi_dmul>
    3c5a:	0032      	movs	r2, r6
    3c5c:	002b      	movs	r3, r5
    3c5e:	f000 fb9d 	bl	439c <__aeabi_dadd>
    3c62:	0006      	movs	r6, r0
    3c64:	000f      	movs	r7, r1
    3c66:	e7a5      	b.n	3bb4 <__ieee754_sqrt+0xfc>
    3c68:	4665      	mov	r5, ip
    3c6a:	2d00      	cmp	r5, #0
    3c6c:	dab9      	bge.n	3be2 <__ieee754_sqrt+0x12a>
    3c6e:	e7b2      	b.n	3bd6 <__ieee754_sqrt+0x11e>
    3c70:	3601      	adds	r6, #1
    3c72:	2300      	movs	r3, #0
    3c74:	e790      	b.n	3b98 <__ieee754_sqrt+0xe0>
    3c76:	2301      	movs	r3, #1
    3c78:	2020      	movs	r0, #32
    3c7a:	425b      	negs	r3, r3
    3c7c:	2100      	movs	r1, #0
    3c7e:	e7e1      	b.n	3c44 <__ieee754_sqrt+0x18c>
    3c80:	003b      	movs	r3, r7
    3c82:	0002      	movs	r2, r0
    3c84:	0039      	movs	r1, r7
    3c86:	f001 fd53 	bl	5730 <__aeabi_dsub>
    3c8a:	0002      	movs	r2, r0
    3c8c:	000b      	movs	r3, r1
    3c8e:	f000 feb1 	bl	49f4 <__aeabi_ddiv>
    3c92:	0006      	movs	r6, r0
    3c94:	000f      	movs	r7, r1
    3c96:	e78d      	b.n	3bb4 <__ieee754_sqrt+0xfc>
    3c98:	7ff00000 	.word	0x7ff00000
    3c9c:	fffffc01 	.word	0xfffffc01
    3ca0:	3fe00000 	.word	0x3fe00000

00003ca4 <fabs>:
    3ca4:	0049      	lsls	r1, r1, #1
    3ca6:	084b      	lsrs	r3, r1, #1
    3ca8:	0019      	movs	r1, r3
    3caa:	4770      	bx	lr

00003cac <finite>:
    3cac:	4b03      	ldr	r3, [pc, #12]	; (3cbc <finite+0x10>)
    3cae:	0048      	lsls	r0, r1, #1
    3cb0:	469c      	mov	ip, r3
    3cb2:	0840      	lsrs	r0, r0, #1
    3cb4:	4460      	add	r0, ip
    3cb6:	0fc0      	lsrs	r0, r0, #31
    3cb8:	4770      	bx	lr
    3cba:	46c0      	nop			; (mov r8, r8)
    3cbc:	80100000 	.word	0x80100000

00003cc0 <matherr>:
    3cc0:	2000      	movs	r0, #0
    3cc2:	4770      	bx	lr

00003cc4 <nan>:
    3cc4:	2000      	movs	r0, #0
    3cc6:	4901      	ldr	r1, [pc, #4]	; (3ccc <nan+0x8>)
    3cc8:	4770      	bx	lr
    3cca:	46c0      	nop			; (mov r8, r8)
    3ccc:	7ff80000 	.word	0x7ff80000

00003cd0 <rint>:
    3cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cd2:	4647      	mov	r7, r8
    3cd4:	b480      	push	{r7}
    3cd6:	0fcb      	lsrs	r3, r1, #31
    3cd8:	4698      	mov	r8, r3
    3cda:	4c4a      	ldr	r4, [pc, #296]	; (3e04 <rint+0x134>)
    3cdc:	004b      	lsls	r3, r1, #1
    3cde:	0d5b      	lsrs	r3, r3, #21
    3ce0:	191e      	adds	r6, r3, r4
    3ce2:	b082      	sub	sp, #8
    3ce4:	0007      	movs	r7, r0
    3ce6:	000a      	movs	r2, r1
    3ce8:	2e13      	cmp	r6, #19
    3cea:	dc35      	bgt.n	3d58 <rint+0x88>
    3cec:	2e00      	cmp	r6, #0
    3cee:	db57      	blt.n	3da0 <rint+0xd0>
    3cf0:	4b45      	ldr	r3, [pc, #276]	; (3e08 <rint+0x138>)
    3cf2:	0004      	movs	r4, r0
    3cf4:	4133      	asrs	r3, r6
    3cf6:	001f      	movs	r7, r3
    3cf8:	400f      	ands	r7, r1
    3cfa:	4307      	orrs	r7, r0
    3cfc:	000d      	movs	r5, r1
    3cfe:	2f00      	cmp	r7, #0
    3d00:	d024      	beq.n	3d4c <rint+0x7c>
    3d02:	085b      	lsrs	r3, r3, #1
    3d04:	001c      	movs	r4, r3
    3d06:	400c      	ands	r4, r1
    3d08:	4320      	orrs	r0, r4
    3d0a:	2700      	movs	r7, #0
    3d0c:	2800      	cmp	r0, #0
    3d0e:	d007      	beq.n	3d20 <rint+0x50>
    3d10:	2e13      	cmp	r6, #19
    3d12:	d100      	bne.n	3d16 <rint+0x46>
    3d14:	e072      	b.n	3dfc <rint+0x12c>
    3d16:	2280      	movs	r2, #128	; 0x80
    3d18:	02d2      	lsls	r2, r2, #11
    3d1a:	4132      	asrs	r2, r6
    3d1c:	4399      	bics	r1, r3
    3d1e:	430a      	orrs	r2, r1
    3d20:	4643      	mov	r3, r8
    3d22:	00de      	lsls	r6, r3, #3
    3d24:	4b39      	ldr	r3, [pc, #228]	; (3e0c <rint+0x13c>)
    3d26:	0011      	movs	r1, r2
    3d28:	199e      	adds	r6, r3, r6
    3d2a:	6834      	ldr	r4, [r6, #0]
    3d2c:	6875      	ldr	r5, [r6, #4]
    3d2e:	0038      	movs	r0, r7
    3d30:	0022      	movs	r2, r4
    3d32:	002b      	movs	r3, r5
    3d34:	f000 fb32 	bl	439c <__aeabi_dadd>
    3d38:	9000      	str	r0, [sp, #0]
    3d3a:	9101      	str	r1, [sp, #4]
    3d3c:	9800      	ldr	r0, [sp, #0]
    3d3e:	9901      	ldr	r1, [sp, #4]
    3d40:	0022      	movs	r2, r4
    3d42:	002b      	movs	r3, r5
    3d44:	f001 fcf4 	bl	5730 <__aeabi_dsub>
    3d48:	0004      	movs	r4, r0
    3d4a:	000d      	movs	r5, r1
    3d4c:	0020      	movs	r0, r4
    3d4e:	0029      	movs	r1, r5
    3d50:	b002      	add	sp, #8
    3d52:	bc04      	pop	{r2}
    3d54:	4690      	mov	r8, r2
    3d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d58:	2e33      	cmp	r6, #51	; 0x33
    3d5a:	dd0c      	ble.n	3d76 <rint+0xa6>
    3d5c:	2380      	movs	r3, #128	; 0x80
    3d5e:	0004      	movs	r4, r0
    3d60:	000d      	movs	r5, r1
    3d62:	00db      	lsls	r3, r3, #3
    3d64:	429e      	cmp	r6, r3
    3d66:	d1f1      	bne.n	3d4c <rint+0x7c>
    3d68:	0002      	movs	r2, r0
    3d6a:	000b      	movs	r3, r1
    3d6c:	f000 fb16 	bl	439c <__aeabi_dadd>
    3d70:	0004      	movs	r4, r0
    3d72:	000d      	movs	r5, r1
    3d74:	e7ea      	b.n	3d4c <rint+0x7c>
    3d76:	4c26      	ldr	r4, [pc, #152]	; (3e10 <rint+0x140>)
    3d78:	000d      	movs	r5, r1
    3d7a:	46a4      	mov	ip, r4
    3d7c:	2401      	movs	r4, #1
    3d7e:	4463      	add	r3, ip
    3d80:	4264      	negs	r4, r4
    3d82:	40dc      	lsrs	r4, r3
    3d84:	46a4      	mov	ip, r4
    3d86:	4661      	mov	r1, ip
    3d88:	0004      	movs	r4, r0
    3d8a:	4201      	tst	r1, r0
    3d8c:	d0de      	beq.n	3d4c <rint+0x7c>
    3d8e:	0849      	lsrs	r1, r1, #1
    3d90:	4201      	tst	r1, r0
    3d92:	d0c5      	beq.n	3d20 <rint+0x50>
    3d94:	2780      	movs	r7, #128	; 0x80
    3d96:	05ff      	lsls	r7, r7, #23
    3d98:	411f      	asrs	r7, r3
    3d9a:	4388      	bics	r0, r1
    3d9c:	4307      	orrs	r7, r0
    3d9e:	e7bf      	b.n	3d20 <rint+0x50>
    3da0:	004b      	lsls	r3, r1, #1
    3da2:	085b      	lsrs	r3, r3, #1
    3da4:	4303      	orrs	r3, r0
    3da6:	0004      	movs	r4, r0
    3da8:	000d      	movs	r5, r1
    3daa:	2b00      	cmp	r3, #0
    3dac:	d0ce      	beq.n	3d4c <rint+0x7c>
    3dae:	030b      	lsls	r3, r1, #12
    3db0:	0b1b      	lsrs	r3, r3, #12
    3db2:	4303      	orrs	r3, r0
    3db4:	425a      	negs	r2, r3
    3db6:	4313      	orrs	r3, r2
    3db8:	2280      	movs	r2, #128	; 0x80
    3dba:	0b1b      	lsrs	r3, r3, #12
    3dbc:	0312      	lsls	r2, r2, #12
    3dbe:	4013      	ands	r3, r2
    3dc0:	0c4a      	lsrs	r2, r1, #17
    3dc2:	0452      	lsls	r2, r2, #17
    3dc4:	4313      	orrs	r3, r2
    3dc6:	0019      	movs	r1, r3
    3dc8:	4643      	mov	r3, r8
    3dca:	4a10      	ldr	r2, [pc, #64]	; (3e0c <rint+0x13c>)
    3dcc:	00db      	lsls	r3, r3, #3
    3dce:	18d3      	adds	r3, r2, r3
    3dd0:	681c      	ldr	r4, [r3, #0]
    3dd2:	685d      	ldr	r5, [r3, #4]
    3dd4:	0022      	movs	r2, r4
    3dd6:	002b      	movs	r3, r5
    3dd8:	f000 fae0 	bl	439c <__aeabi_dadd>
    3ddc:	9000      	str	r0, [sp, #0]
    3dde:	9101      	str	r1, [sp, #4]
    3de0:	9800      	ldr	r0, [sp, #0]
    3de2:	9901      	ldr	r1, [sp, #4]
    3de4:	0022      	movs	r2, r4
    3de6:	002b      	movs	r3, r5
    3de8:	f001 fca2 	bl	5730 <__aeabi_dsub>
    3dec:	4642      	mov	r2, r8
    3dee:	004b      	lsls	r3, r1, #1
    3df0:	085b      	lsrs	r3, r3, #1
    3df2:	07d6      	lsls	r6, r2, #31
    3df4:	4333      	orrs	r3, r6
    3df6:	0004      	movs	r4, r0
    3df8:	001d      	movs	r5, r3
    3dfa:	e7a7      	b.n	3d4c <rint+0x7c>
    3dfc:	2780      	movs	r7, #128	; 0x80
    3dfe:	063f      	lsls	r7, r7, #24
    3e00:	e789      	b.n	3d16 <rint+0x46>
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	fffffc01 	.word	0xfffffc01
    3e08:	000fffff 	.word	0x000fffff
    3e0c:	00006320 	.word	0x00006320
    3e10:	fffffbed 	.word	0xfffffbed

00003e14 <scalbn>:
    3e14:	004b      	lsls	r3, r1, #1
    3e16:	b570      	push	{r4, r5, r6, lr}
    3e18:	0d5b      	lsrs	r3, r3, #21
    3e1a:	0014      	movs	r4, r2
    3e1c:	000a      	movs	r2, r1
    3e1e:	2b00      	cmp	r3, #0
    3e20:	d11a      	bne.n	3e58 <scalbn+0x44>
    3e22:	004b      	lsls	r3, r1, #1
    3e24:	085b      	lsrs	r3, r3, #1
    3e26:	4303      	orrs	r3, r0
    3e28:	d015      	beq.n	3e56 <scalbn+0x42>
    3e2a:	2200      	movs	r2, #0
    3e2c:	4b22      	ldr	r3, [pc, #136]	; (3eb8 <scalbn+0xa4>)
    3e2e:	f001 fa05 	bl	523c <__aeabi_dmul>
    3e32:	4b22      	ldr	r3, [pc, #136]	; (3ebc <scalbn+0xa8>)
    3e34:	000a      	movs	r2, r1
    3e36:	429c      	cmp	r4, r3
    3e38:	db22      	blt.n	3e80 <scalbn+0x6c>
    3e3a:	004b      	lsls	r3, r1, #1
    3e3c:	0d5b      	lsrs	r3, r3, #21
    3e3e:	3b36      	subs	r3, #54	; 0x36
    3e40:	4d1f      	ldr	r5, [pc, #124]	; (3ec0 <scalbn+0xac>)
    3e42:	18e3      	adds	r3, r4, r3
    3e44:	42ab      	cmp	r3, r5
    3e46:	dc20      	bgt.n	3e8a <scalbn+0x76>
    3e48:	2b00      	cmp	r3, #0
    3e4a:	dd0d      	ble.n	3e68 <scalbn+0x54>
    3e4c:	4c1d      	ldr	r4, [pc, #116]	; (3ec4 <scalbn+0xb0>)
    3e4e:	051b      	lsls	r3, r3, #20
    3e50:	4022      	ands	r2, r4
    3e52:	431a      	orrs	r2, r3
    3e54:	0011      	movs	r1, r2
    3e56:	bd70      	pop	{r4, r5, r6, pc}
    3e58:	4d1b      	ldr	r5, [pc, #108]	; (3ec8 <scalbn+0xb4>)
    3e5a:	42ab      	cmp	r3, r5
    3e5c:	d1f0      	bne.n	3e40 <scalbn+0x2c>
    3e5e:	0002      	movs	r2, r0
    3e60:	000b      	movs	r3, r1
    3e62:	f000 fa9b 	bl	439c <__aeabi_dadd>
    3e66:	e7f6      	b.n	3e56 <scalbn+0x42>
    3e68:	001d      	movs	r5, r3
    3e6a:	3535      	adds	r5, #53	; 0x35
    3e6c:	da18      	bge.n	3ea0 <scalbn+0x8c>
    3e6e:	4b17      	ldr	r3, [pc, #92]	; (3ecc <scalbn+0xb8>)
    3e70:	0002      	movs	r2, r0
    3e72:	429c      	cmp	r4, r3
    3e74:	dc0a      	bgt.n	3e8c <scalbn+0x78>
    3e76:	000b      	movs	r3, r1
    3e78:	4815      	ldr	r0, [pc, #84]	; (3ed0 <scalbn+0xbc>)
    3e7a:	4916      	ldr	r1, [pc, #88]	; (3ed4 <scalbn+0xc0>)
    3e7c:	f000 f832 	bl	3ee4 <copysign>
    3e80:	4a13      	ldr	r2, [pc, #76]	; (3ed0 <scalbn+0xbc>)
    3e82:	4b14      	ldr	r3, [pc, #80]	; (3ed4 <scalbn+0xc0>)
    3e84:	f001 f9da 	bl	523c <__aeabi_dmul>
    3e88:	e7e5      	b.n	3e56 <scalbn+0x42>
    3e8a:	0002      	movs	r2, r0
    3e8c:	000b      	movs	r3, r1
    3e8e:	4812      	ldr	r0, [pc, #72]	; (3ed8 <scalbn+0xc4>)
    3e90:	4912      	ldr	r1, [pc, #72]	; (3edc <scalbn+0xc8>)
    3e92:	f000 f827 	bl	3ee4 <copysign>
    3e96:	4a10      	ldr	r2, [pc, #64]	; (3ed8 <scalbn+0xc4>)
    3e98:	4b10      	ldr	r3, [pc, #64]	; (3edc <scalbn+0xc8>)
    3e9a:	f001 f9cf 	bl	523c <__aeabi_dmul>
    3e9e:	e7da      	b.n	3e56 <scalbn+0x42>
    3ea0:	4c08      	ldr	r4, [pc, #32]	; (3ec4 <scalbn+0xb0>)
    3ea2:	3336      	adds	r3, #54	; 0x36
    3ea4:	4022      	ands	r2, r4
    3ea6:	051b      	lsls	r3, r3, #20
    3ea8:	4313      	orrs	r3, r2
    3eaa:	0019      	movs	r1, r3
    3eac:	2200      	movs	r2, #0
    3eae:	4b0c      	ldr	r3, [pc, #48]	; (3ee0 <scalbn+0xcc>)
    3eb0:	f001 f9c4 	bl	523c <__aeabi_dmul>
    3eb4:	e7cf      	b.n	3e56 <scalbn+0x42>
    3eb6:	46c0      	nop			; (mov r8, r8)
    3eb8:	43500000 	.word	0x43500000
    3ebc:	ffff3cb0 	.word	0xffff3cb0
    3ec0:	000007fe 	.word	0x000007fe
    3ec4:	800fffff 	.word	0x800fffff
    3ec8:	000007ff 	.word	0x000007ff
    3ecc:	0000c350 	.word	0x0000c350
    3ed0:	c2f8f359 	.word	0xc2f8f359
    3ed4:	01a56e1f 	.word	0x01a56e1f
    3ed8:	8800759c 	.word	0x8800759c
    3edc:	7e37e43c 	.word	0x7e37e43c
    3ee0:	3c900000 	.word	0x3c900000

00003ee4 <copysign>:
    3ee4:	b530      	push	{r4, r5, lr}
    3ee6:	004a      	lsls	r2, r1, #1
    3ee8:	0fdb      	lsrs	r3, r3, #31
    3eea:	07db      	lsls	r3, r3, #31
    3eec:	0852      	lsrs	r2, r2, #1
    3eee:	431a      	orrs	r2, r3
    3ef0:	0011      	movs	r1, r2
    3ef2:	bd30      	pop	{r4, r5, pc}

00003ef4 <__gnu_thumb1_case_uqi>:
    3ef4:	b402      	push	{r1}
    3ef6:	4671      	mov	r1, lr
    3ef8:	0849      	lsrs	r1, r1, #1
    3efa:	0049      	lsls	r1, r1, #1
    3efc:	5c09      	ldrb	r1, [r1, r0]
    3efe:	0049      	lsls	r1, r1, #1
    3f00:	448e      	add	lr, r1
    3f02:	bc02      	pop	{r1}
    3f04:	4770      	bx	lr
    3f06:	46c0      	nop			; (mov r8, r8)

00003f08 <__aeabi_uidiv>:
    3f08:	2200      	movs	r2, #0
    3f0a:	0843      	lsrs	r3, r0, #1
    3f0c:	428b      	cmp	r3, r1
    3f0e:	d374      	bcc.n	3ffa <__aeabi_uidiv+0xf2>
    3f10:	0903      	lsrs	r3, r0, #4
    3f12:	428b      	cmp	r3, r1
    3f14:	d35f      	bcc.n	3fd6 <__aeabi_uidiv+0xce>
    3f16:	0a03      	lsrs	r3, r0, #8
    3f18:	428b      	cmp	r3, r1
    3f1a:	d344      	bcc.n	3fa6 <__aeabi_uidiv+0x9e>
    3f1c:	0b03      	lsrs	r3, r0, #12
    3f1e:	428b      	cmp	r3, r1
    3f20:	d328      	bcc.n	3f74 <__aeabi_uidiv+0x6c>
    3f22:	0c03      	lsrs	r3, r0, #16
    3f24:	428b      	cmp	r3, r1
    3f26:	d30d      	bcc.n	3f44 <__aeabi_uidiv+0x3c>
    3f28:	22ff      	movs	r2, #255	; 0xff
    3f2a:	0209      	lsls	r1, r1, #8
    3f2c:	ba12      	rev	r2, r2
    3f2e:	0c03      	lsrs	r3, r0, #16
    3f30:	428b      	cmp	r3, r1
    3f32:	d302      	bcc.n	3f3a <__aeabi_uidiv+0x32>
    3f34:	1212      	asrs	r2, r2, #8
    3f36:	0209      	lsls	r1, r1, #8
    3f38:	d065      	beq.n	4006 <__aeabi_uidiv+0xfe>
    3f3a:	0b03      	lsrs	r3, r0, #12
    3f3c:	428b      	cmp	r3, r1
    3f3e:	d319      	bcc.n	3f74 <__aeabi_uidiv+0x6c>
    3f40:	e000      	b.n	3f44 <__aeabi_uidiv+0x3c>
    3f42:	0a09      	lsrs	r1, r1, #8
    3f44:	0bc3      	lsrs	r3, r0, #15
    3f46:	428b      	cmp	r3, r1
    3f48:	d301      	bcc.n	3f4e <__aeabi_uidiv+0x46>
    3f4a:	03cb      	lsls	r3, r1, #15
    3f4c:	1ac0      	subs	r0, r0, r3
    3f4e:	4152      	adcs	r2, r2
    3f50:	0b83      	lsrs	r3, r0, #14
    3f52:	428b      	cmp	r3, r1
    3f54:	d301      	bcc.n	3f5a <__aeabi_uidiv+0x52>
    3f56:	038b      	lsls	r3, r1, #14
    3f58:	1ac0      	subs	r0, r0, r3
    3f5a:	4152      	adcs	r2, r2
    3f5c:	0b43      	lsrs	r3, r0, #13
    3f5e:	428b      	cmp	r3, r1
    3f60:	d301      	bcc.n	3f66 <__aeabi_uidiv+0x5e>
    3f62:	034b      	lsls	r3, r1, #13
    3f64:	1ac0      	subs	r0, r0, r3
    3f66:	4152      	adcs	r2, r2
    3f68:	0b03      	lsrs	r3, r0, #12
    3f6a:	428b      	cmp	r3, r1
    3f6c:	d301      	bcc.n	3f72 <__aeabi_uidiv+0x6a>
    3f6e:	030b      	lsls	r3, r1, #12
    3f70:	1ac0      	subs	r0, r0, r3
    3f72:	4152      	adcs	r2, r2
    3f74:	0ac3      	lsrs	r3, r0, #11
    3f76:	428b      	cmp	r3, r1
    3f78:	d301      	bcc.n	3f7e <__aeabi_uidiv+0x76>
    3f7a:	02cb      	lsls	r3, r1, #11
    3f7c:	1ac0      	subs	r0, r0, r3
    3f7e:	4152      	adcs	r2, r2
    3f80:	0a83      	lsrs	r3, r0, #10
    3f82:	428b      	cmp	r3, r1
    3f84:	d301      	bcc.n	3f8a <__aeabi_uidiv+0x82>
    3f86:	028b      	lsls	r3, r1, #10
    3f88:	1ac0      	subs	r0, r0, r3
    3f8a:	4152      	adcs	r2, r2
    3f8c:	0a43      	lsrs	r3, r0, #9
    3f8e:	428b      	cmp	r3, r1
    3f90:	d301      	bcc.n	3f96 <__aeabi_uidiv+0x8e>
    3f92:	024b      	lsls	r3, r1, #9
    3f94:	1ac0      	subs	r0, r0, r3
    3f96:	4152      	adcs	r2, r2
    3f98:	0a03      	lsrs	r3, r0, #8
    3f9a:	428b      	cmp	r3, r1
    3f9c:	d301      	bcc.n	3fa2 <__aeabi_uidiv+0x9a>
    3f9e:	020b      	lsls	r3, r1, #8
    3fa0:	1ac0      	subs	r0, r0, r3
    3fa2:	4152      	adcs	r2, r2
    3fa4:	d2cd      	bcs.n	3f42 <__aeabi_uidiv+0x3a>
    3fa6:	09c3      	lsrs	r3, r0, #7
    3fa8:	428b      	cmp	r3, r1
    3faa:	d301      	bcc.n	3fb0 <__aeabi_uidiv+0xa8>
    3fac:	01cb      	lsls	r3, r1, #7
    3fae:	1ac0      	subs	r0, r0, r3
    3fb0:	4152      	adcs	r2, r2
    3fb2:	0983      	lsrs	r3, r0, #6
    3fb4:	428b      	cmp	r3, r1
    3fb6:	d301      	bcc.n	3fbc <__aeabi_uidiv+0xb4>
    3fb8:	018b      	lsls	r3, r1, #6
    3fba:	1ac0      	subs	r0, r0, r3
    3fbc:	4152      	adcs	r2, r2
    3fbe:	0943      	lsrs	r3, r0, #5
    3fc0:	428b      	cmp	r3, r1
    3fc2:	d301      	bcc.n	3fc8 <__aeabi_uidiv+0xc0>
    3fc4:	014b      	lsls	r3, r1, #5
    3fc6:	1ac0      	subs	r0, r0, r3
    3fc8:	4152      	adcs	r2, r2
    3fca:	0903      	lsrs	r3, r0, #4
    3fcc:	428b      	cmp	r3, r1
    3fce:	d301      	bcc.n	3fd4 <__aeabi_uidiv+0xcc>
    3fd0:	010b      	lsls	r3, r1, #4
    3fd2:	1ac0      	subs	r0, r0, r3
    3fd4:	4152      	adcs	r2, r2
    3fd6:	08c3      	lsrs	r3, r0, #3
    3fd8:	428b      	cmp	r3, r1
    3fda:	d301      	bcc.n	3fe0 <__aeabi_uidiv+0xd8>
    3fdc:	00cb      	lsls	r3, r1, #3
    3fde:	1ac0      	subs	r0, r0, r3
    3fe0:	4152      	adcs	r2, r2
    3fe2:	0883      	lsrs	r3, r0, #2
    3fe4:	428b      	cmp	r3, r1
    3fe6:	d301      	bcc.n	3fec <__aeabi_uidiv+0xe4>
    3fe8:	008b      	lsls	r3, r1, #2
    3fea:	1ac0      	subs	r0, r0, r3
    3fec:	4152      	adcs	r2, r2
    3fee:	0843      	lsrs	r3, r0, #1
    3ff0:	428b      	cmp	r3, r1
    3ff2:	d301      	bcc.n	3ff8 <__aeabi_uidiv+0xf0>
    3ff4:	004b      	lsls	r3, r1, #1
    3ff6:	1ac0      	subs	r0, r0, r3
    3ff8:	4152      	adcs	r2, r2
    3ffa:	1a41      	subs	r1, r0, r1
    3ffc:	d200      	bcs.n	4000 <__aeabi_uidiv+0xf8>
    3ffe:	4601      	mov	r1, r0
    4000:	4152      	adcs	r2, r2
    4002:	4610      	mov	r0, r2
    4004:	4770      	bx	lr
    4006:	e7ff      	b.n	4008 <__aeabi_uidiv+0x100>
    4008:	b501      	push	{r0, lr}
    400a:	2000      	movs	r0, #0
    400c:	f000 f806 	bl	401c <__aeabi_idiv0>
    4010:	bd02      	pop	{r1, pc}
    4012:	46c0      	nop			; (mov r8, r8)

00004014 <__aeabi_uidivmod>:
    4014:	2900      	cmp	r1, #0
    4016:	d0f7      	beq.n	4008 <__aeabi_uidiv+0x100>
    4018:	e776      	b.n	3f08 <__aeabi_uidiv>
    401a:	4770      	bx	lr

0000401c <__aeabi_idiv0>:
    401c:	4770      	bx	lr
    401e:	46c0      	nop			; (mov r8, r8)

00004020 <__aeabi_cdrcmple>:
    4020:	4684      	mov	ip, r0
    4022:	1c10      	adds	r0, r2, #0
    4024:	4662      	mov	r2, ip
    4026:	468c      	mov	ip, r1
    4028:	1c19      	adds	r1, r3, #0
    402a:	4663      	mov	r3, ip
    402c:	e000      	b.n	4030 <__aeabi_cdcmpeq>
    402e:	46c0      	nop			; (mov r8, r8)

00004030 <__aeabi_cdcmpeq>:
    4030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4032:	f001 f899 	bl	5168 <__ledf2>
    4036:	2800      	cmp	r0, #0
    4038:	d401      	bmi.n	403e <__aeabi_cdcmpeq+0xe>
    403a:	2100      	movs	r1, #0
    403c:	42c8      	cmn	r0, r1
    403e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004040 <__aeabi_dcmpeq>:
    4040:	b510      	push	{r4, lr}
    4042:	f000 ffed 	bl	5020 <__eqdf2>
    4046:	4240      	negs	r0, r0
    4048:	3001      	adds	r0, #1
    404a:	bd10      	pop	{r4, pc}

0000404c <__aeabi_dcmplt>:
    404c:	b510      	push	{r4, lr}
    404e:	f001 f88b 	bl	5168 <__ledf2>
    4052:	2800      	cmp	r0, #0
    4054:	db01      	blt.n	405a <__aeabi_dcmplt+0xe>
    4056:	2000      	movs	r0, #0
    4058:	bd10      	pop	{r4, pc}
    405a:	2001      	movs	r0, #1
    405c:	bd10      	pop	{r4, pc}
    405e:	46c0      	nop			; (mov r8, r8)

00004060 <__aeabi_dcmple>:
    4060:	b510      	push	{r4, lr}
    4062:	f001 f881 	bl	5168 <__ledf2>
    4066:	2800      	cmp	r0, #0
    4068:	dd01      	ble.n	406e <__aeabi_dcmple+0xe>
    406a:	2000      	movs	r0, #0
    406c:	bd10      	pop	{r4, pc}
    406e:	2001      	movs	r0, #1
    4070:	bd10      	pop	{r4, pc}
    4072:	46c0      	nop			; (mov r8, r8)

00004074 <__aeabi_dcmpgt>:
    4074:	b510      	push	{r4, lr}
    4076:	f001 f813 	bl	50a0 <__gedf2>
    407a:	2800      	cmp	r0, #0
    407c:	dc01      	bgt.n	4082 <__aeabi_dcmpgt+0xe>
    407e:	2000      	movs	r0, #0
    4080:	bd10      	pop	{r4, pc}
    4082:	2001      	movs	r0, #1
    4084:	bd10      	pop	{r4, pc}
    4086:	46c0      	nop			; (mov r8, r8)

00004088 <__aeabi_dcmpge>:
    4088:	b510      	push	{r4, lr}
    408a:	f001 f809 	bl	50a0 <__gedf2>
    408e:	2800      	cmp	r0, #0
    4090:	da01      	bge.n	4096 <__aeabi_dcmpge+0xe>
    4092:	2000      	movs	r0, #0
    4094:	bd10      	pop	{r4, pc}
    4096:	2001      	movs	r0, #1
    4098:	bd10      	pop	{r4, pc}
    409a:	46c0      	nop			; (mov r8, r8)

0000409c <__aeabi_lmul>:
    409c:	b5f0      	push	{r4, r5, r6, r7, lr}
    409e:	464f      	mov	r7, r9
    40a0:	4646      	mov	r6, r8
    40a2:	b4c0      	push	{r6, r7}
    40a4:	0416      	lsls	r6, r2, #16
    40a6:	0c36      	lsrs	r6, r6, #16
    40a8:	4699      	mov	r9, r3
    40aa:	0033      	movs	r3, r6
    40ac:	0405      	lsls	r5, r0, #16
    40ae:	0c2c      	lsrs	r4, r5, #16
    40b0:	0c07      	lsrs	r7, r0, #16
    40b2:	0c15      	lsrs	r5, r2, #16
    40b4:	4363      	muls	r3, r4
    40b6:	437e      	muls	r6, r7
    40b8:	436f      	muls	r7, r5
    40ba:	4365      	muls	r5, r4
    40bc:	0c1c      	lsrs	r4, r3, #16
    40be:	19ad      	adds	r5, r5, r6
    40c0:	1964      	adds	r4, r4, r5
    40c2:	469c      	mov	ip, r3
    40c4:	42a6      	cmp	r6, r4
    40c6:	d903      	bls.n	40d0 <__aeabi_lmul+0x34>
    40c8:	2380      	movs	r3, #128	; 0x80
    40ca:	025b      	lsls	r3, r3, #9
    40cc:	4698      	mov	r8, r3
    40ce:	4447      	add	r7, r8
    40d0:	4663      	mov	r3, ip
    40d2:	0c25      	lsrs	r5, r4, #16
    40d4:	19ef      	adds	r7, r5, r7
    40d6:	041d      	lsls	r5, r3, #16
    40d8:	464b      	mov	r3, r9
    40da:	434a      	muls	r2, r1
    40dc:	4343      	muls	r3, r0
    40de:	0c2d      	lsrs	r5, r5, #16
    40e0:	0424      	lsls	r4, r4, #16
    40e2:	1964      	adds	r4, r4, r5
    40e4:	1899      	adds	r1, r3, r2
    40e6:	19c9      	adds	r1, r1, r7
    40e8:	0020      	movs	r0, r4
    40ea:	bc0c      	pop	{r2, r3}
    40ec:	4690      	mov	r8, r2
    40ee:	4699      	mov	r9, r3
    40f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40f2:	46c0      	nop			; (mov r8, r8)

000040f4 <__aeabi_d2uiz>:
    40f4:	b570      	push	{r4, r5, r6, lr}
    40f6:	2200      	movs	r2, #0
    40f8:	4b0c      	ldr	r3, [pc, #48]	; (412c <__aeabi_d2uiz+0x38>)
    40fa:	0004      	movs	r4, r0
    40fc:	000d      	movs	r5, r1
    40fe:	f7ff ffc3 	bl	4088 <__aeabi_dcmpge>
    4102:	2800      	cmp	r0, #0
    4104:	d104      	bne.n	4110 <__aeabi_d2uiz+0x1c>
    4106:	0020      	movs	r0, r4
    4108:	0029      	movs	r1, r5
    410a:	f001 fe85 	bl	5e18 <__aeabi_d2iz>
    410e:	bd70      	pop	{r4, r5, r6, pc}
    4110:	4b06      	ldr	r3, [pc, #24]	; (412c <__aeabi_d2uiz+0x38>)
    4112:	2200      	movs	r2, #0
    4114:	0020      	movs	r0, r4
    4116:	0029      	movs	r1, r5
    4118:	f001 fb0a 	bl	5730 <__aeabi_dsub>
    411c:	f001 fe7c 	bl	5e18 <__aeabi_d2iz>
    4120:	2380      	movs	r3, #128	; 0x80
    4122:	061b      	lsls	r3, r3, #24
    4124:	469c      	mov	ip, r3
    4126:	4460      	add	r0, ip
    4128:	e7f1      	b.n	410e <__aeabi_d2uiz+0x1a>
    412a:	46c0      	nop			; (mov r8, r8)
    412c:	41e00000 	.word	0x41e00000

00004130 <__aeabi_fmul>:
    4130:	b5f0      	push	{r4, r5, r6, r7, lr}
    4132:	4657      	mov	r7, sl
    4134:	464e      	mov	r6, r9
    4136:	4645      	mov	r5, r8
    4138:	0043      	lsls	r3, r0, #1
    413a:	b4e0      	push	{r5, r6, r7}
    413c:	0246      	lsls	r6, r0, #9
    413e:	4688      	mov	r8, r1
    4140:	0a76      	lsrs	r6, r6, #9
    4142:	0e1f      	lsrs	r7, r3, #24
    4144:	0fc4      	lsrs	r4, r0, #31
    4146:	2f00      	cmp	r7, #0
    4148:	d047      	beq.n	41da <__aeabi_fmul+0xaa>
    414a:	2fff      	cmp	r7, #255	; 0xff
    414c:	d025      	beq.n	419a <__aeabi_fmul+0x6a>
    414e:	2300      	movs	r3, #0
    4150:	2580      	movs	r5, #128	; 0x80
    4152:	469a      	mov	sl, r3
    4154:	4699      	mov	r9, r3
    4156:	00f6      	lsls	r6, r6, #3
    4158:	04ed      	lsls	r5, r5, #19
    415a:	432e      	orrs	r6, r5
    415c:	3f7f      	subs	r7, #127	; 0x7f
    415e:	4643      	mov	r3, r8
    4160:	4642      	mov	r2, r8
    4162:	025d      	lsls	r5, r3, #9
    4164:	0fd2      	lsrs	r2, r2, #31
    4166:	005b      	lsls	r3, r3, #1
    4168:	0a6d      	lsrs	r5, r5, #9
    416a:	0e1b      	lsrs	r3, r3, #24
    416c:	4690      	mov	r8, r2
    416e:	d040      	beq.n	41f2 <__aeabi_fmul+0xc2>
    4170:	2bff      	cmp	r3, #255	; 0xff
    4172:	d039      	beq.n	41e8 <__aeabi_fmul+0xb8>
    4174:	2280      	movs	r2, #128	; 0x80
    4176:	2000      	movs	r0, #0
    4178:	00ed      	lsls	r5, r5, #3
    417a:	04d2      	lsls	r2, r2, #19
    417c:	4315      	orrs	r5, r2
    417e:	3b7f      	subs	r3, #127	; 0x7f
    4180:	18fb      	adds	r3, r7, r3
    4182:	4642      	mov	r2, r8
    4184:	4657      	mov	r7, sl
    4186:	1c59      	adds	r1, r3, #1
    4188:	4062      	eors	r2, r4
    418a:	468c      	mov	ip, r1
    418c:	4307      	orrs	r7, r0
    418e:	2f0f      	cmp	r7, #15
    4190:	d85c      	bhi.n	424c <__aeabi_fmul+0x11c>
    4192:	496f      	ldr	r1, [pc, #444]	; (4350 <__aeabi_fmul+0x220>)
    4194:	00bf      	lsls	r7, r7, #2
    4196:	59c9      	ldr	r1, [r1, r7]
    4198:	468f      	mov	pc, r1
    419a:	2e00      	cmp	r6, #0
    419c:	d145      	bne.n	422a <__aeabi_fmul+0xfa>
    419e:	2308      	movs	r3, #8
    41a0:	469a      	mov	sl, r3
    41a2:	3b06      	subs	r3, #6
    41a4:	4699      	mov	r9, r3
    41a6:	e7da      	b.n	415e <__aeabi_fmul+0x2e>
    41a8:	4642      	mov	r2, r8
    41aa:	2802      	cmp	r0, #2
    41ac:	d02d      	beq.n	420a <__aeabi_fmul+0xda>
    41ae:	2803      	cmp	r0, #3
    41b0:	d100      	bne.n	41b4 <__aeabi_fmul+0x84>
    41b2:	e0c3      	b.n	433c <__aeabi_fmul+0x20c>
    41b4:	2801      	cmp	r0, #1
    41b6:	d000      	beq.n	41ba <__aeabi_fmul+0x8a>
    41b8:	e0a2      	b.n	4300 <__aeabi_fmul+0x1d0>
    41ba:	2500      	movs	r5, #0
    41bc:	2600      	movs	r6, #0
    41be:	4002      	ands	r2, r0
    41c0:	b2d4      	uxtb	r4, r2
    41c2:	0276      	lsls	r6, r6, #9
    41c4:	05ed      	lsls	r5, r5, #23
    41c6:	0a76      	lsrs	r6, r6, #9
    41c8:	432e      	orrs	r6, r5
    41ca:	07e4      	lsls	r4, r4, #31
    41cc:	4326      	orrs	r6, r4
    41ce:	0030      	movs	r0, r6
    41d0:	bc1c      	pop	{r2, r3, r4}
    41d2:	4690      	mov	r8, r2
    41d4:	4699      	mov	r9, r3
    41d6:	46a2      	mov	sl, r4
    41d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41da:	2e00      	cmp	r6, #0
    41dc:	d11a      	bne.n	4214 <__aeabi_fmul+0xe4>
    41de:	2304      	movs	r3, #4
    41e0:	469a      	mov	sl, r3
    41e2:	3b03      	subs	r3, #3
    41e4:	4699      	mov	r9, r3
    41e6:	e7ba      	b.n	415e <__aeabi_fmul+0x2e>
    41e8:	002a      	movs	r2, r5
    41ea:	1e51      	subs	r1, r2, #1
    41ec:	418a      	sbcs	r2, r1
    41ee:	1c90      	adds	r0, r2, #2
    41f0:	e7c6      	b.n	4180 <__aeabi_fmul+0x50>
    41f2:	2001      	movs	r0, #1
    41f4:	2d00      	cmp	r5, #0
    41f6:	d0c3      	beq.n	4180 <__aeabi_fmul+0x50>
    41f8:	0028      	movs	r0, r5
    41fa:	f001 ff9d 	bl	6138 <__clzsi2>
    41fe:	1f43      	subs	r3, r0, #5
    4200:	3076      	adds	r0, #118	; 0x76
    4202:	409d      	lsls	r5, r3
    4204:	4243      	negs	r3, r0
    4206:	2000      	movs	r0, #0
    4208:	e7ba      	b.n	4180 <__aeabi_fmul+0x50>
    420a:	2401      	movs	r4, #1
    420c:	25ff      	movs	r5, #255	; 0xff
    420e:	4014      	ands	r4, r2
    4210:	2600      	movs	r6, #0
    4212:	e7d6      	b.n	41c2 <__aeabi_fmul+0x92>
    4214:	0030      	movs	r0, r6
    4216:	f001 ff8f 	bl	6138 <__clzsi2>
    421a:	1f43      	subs	r3, r0, #5
    421c:	409e      	lsls	r6, r3
    421e:	2300      	movs	r3, #0
    4220:	3076      	adds	r0, #118	; 0x76
    4222:	4247      	negs	r7, r0
    4224:	469a      	mov	sl, r3
    4226:	4699      	mov	r9, r3
    4228:	e799      	b.n	415e <__aeabi_fmul+0x2e>
    422a:	230c      	movs	r3, #12
    422c:	469a      	mov	sl, r3
    422e:	3b09      	subs	r3, #9
    4230:	4699      	mov	r9, r3
    4232:	e794      	b.n	415e <__aeabi_fmul+0x2e>
    4234:	2680      	movs	r6, #128	; 0x80
    4236:	2400      	movs	r4, #0
    4238:	03f6      	lsls	r6, r6, #15
    423a:	25ff      	movs	r5, #255	; 0xff
    423c:	e7c1      	b.n	41c2 <__aeabi_fmul+0x92>
    423e:	0035      	movs	r5, r6
    4240:	4648      	mov	r0, r9
    4242:	e7b2      	b.n	41aa <__aeabi_fmul+0x7a>
    4244:	0035      	movs	r5, r6
    4246:	0022      	movs	r2, r4
    4248:	4648      	mov	r0, r9
    424a:	e7ae      	b.n	41aa <__aeabi_fmul+0x7a>
    424c:	0429      	lsls	r1, r5, #16
    424e:	0c09      	lsrs	r1, r1, #16
    4250:	0008      	movs	r0, r1
    4252:	0c37      	lsrs	r7, r6, #16
    4254:	0436      	lsls	r6, r6, #16
    4256:	0c36      	lsrs	r6, r6, #16
    4258:	0c2c      	lsrs	r4, r5, #16
    425a:	4379      	muls	r1, r7
    425c:	4370      	muls	r0, r6
    425e:	4367      	muls	r7, r4
    4260:	4374      	muls	r4, r6
    4262:	0c06      	lsrs	r6, r0, #16
    4264:	1864      	adds	r4, r4, r1
    4266:	1936      	adds	r6, r6, r4
    4268:	42b1      	cmp	r1, r6
    426a:	d903      	bls.n	4274 <__aeabi_fmul+0x144>
    426c:	2180      	movs	r1, #128	; 0x80
    426e:	0249      	lsls	r1, r1, #9
    4270:	4688      	mov	r8, r1
    4272:	4447      	add	r7, r8
    4274:	0400      	lsls	r0, r0, #16
    4276:	0c00      	lsrs	r0, r0, #16
    4278:	0431      	lsls	r1, r6, #16
    427a:	1809      	adds	r1, r1, r0
    427c:	018d      	lsls	r5, r1, #6
    427e:	1e68      	subs	r0, r5, #1
    4280:	4185      	sbcs	r5, r0
    4282:	0e89      	lsrs	r1, r1, #26
    4284:	4329      	orrs	r1, r5
    4286:	0c35      	lsrs	r5, r6, #16
    4288:	19ed      	adds	r5, r5, r7
    428a:	01ad      	lsls	r5, r5, #6
    428c:	430d      	orrs	r5, r1
    428e:	0129      	lsls	r1, r5, #4
    4290:	d504      	bpl.n	429c <__aeabi_fmul+0x16c>
    4292:	2301      	movs	r3, #1
    4294:	0869      	lsrs	r1, r5, #1
    4296:	401d      	ands	r5, r3
    4298:	4663      	mov	r3, ip
    429a:	430d      	orrs	r5, r1
    429c:	0019      	movs	r1, r3
    429e:	317f      	adds	r1, #127	; 0x7f
    42a0:	2900      	cmp	r1, #0
    42a2:	dd25      	ble.n	42f0 <__aeabi_fmul+0x1c0>
    42a4:	0768      	lsls	r0, r5, #29
    42a6:	d004      	beq.n	42b2 <__aeabi_fmul+0x182>
    42a8:	200f      	movs	r0, #15
    42aa:	4028      	ands	r0, r5
    42ac:	2804      	cmp	r0, #4
    42ae:	d000      	beq.n	42b2 <__aeabi_fmul+0x182>
    42b0:	3504      	adds	r5, #4
    42b2:	0128      	lsls	r0, r5, #4
    42b4:	d503      	bpl.n	42be <__aeabi_fmul+0x18e>
    42b6:	4927      	ldr	r1, [pc, #156]	; (4354 <__aeabi_fmul+0x224>)
    42b8:	3380      	adds	r3, #128	; 0x80
    42ba:	400d      	ands	r5, r1
    42bc:	0019      	movs	r1, r3
    42be:	29fe      	cmp	r1, #254	; 0xfe
    42c0:	dca3      	bgt.n	420a <__aeabi_fmul+0xda>
    42c2:	2401      	movs	r4, #1
    42c4:	01ad      	lsls	r5, r5, #6
    42c6:	0a6e      	lsrs	r6, r5, #9
    42c8:	4014      	ands	r4, r2
    42ca:	b2cd      	uxtb	r5, r1
    42cc:	e779      	b.n	41c2 <__aeabi_fmul+0x92>
    42ce:	2080      	movs	r0, #128	; 0x80
    42d0:	03c0      	lsls	r0, r0, #15
    42d2:	4206      	tst	r6, r0
    42d4:	d007      	beq.n	42e6 <__aeabi_fmul+0x1b6>
    42d6:	4205      	tst	r5, r0
    42d8:	d105      	bne.n	42e6 <__aeabi_fmul+0x1b6>
    42da:	4328      	orrs	r0, r5
    42dc:	0246      	lsls	r6, r0, #9
    42de:	0a76      	lsrs	r6, r6, #9
    42e0:	4644      	mov	r4, r8
    42e2:	25ff      	movs	r5, #255	; 0xff
    42e4:	e76d      	b.n	41c2 <__aeabi_fmul+0x92>
    42e6:	4306      	orrs	r6, r0
    42e8:	0276      	lsls	r6, r6, #9
    42ea:	0a76      	lsrs	r6, r6, #9
    42ec:	25ff      	movs	r5, #255	; 0xff
    42ee:	e768      	b.n	41c2 <__aeabi_fmul+0x92>
    42f0:	2401      	movs	r4, #1
    42f2:	1a61      	subs	r1, r4, r1
    42f4:	291b      	cmp	r1, #27
    42f6:	dd05      	ble.n	4304 <__aeabi_fmul+0x1d4>
    42f8:	4014      	ands	r4, r2
    42fa:	2500      	movs	r5, #0
    42fc:	2600      	movs	r6, #0
    42fe:	e760      	b.n	41c2 <__aeabi_fmul+0x92>
    4300:	4663      	mov	r3, ip
    4302:	e7cb      	b.n	429c <__aeabi_fmul+0x16c>
    4304:	002e      	movs	r6, r5
    4306:	2320      	movs	r3, #32
    4308:	40ce      	lsrs	r6, r1
    430a:	1a59      	subs	r1, r3, r1
    430c:	408d      	lsls	r5, r1
    430e:	1e6b      	subs	r3, r5, #1
    4310:	419d      	sbcs	r5, r3
    4312:	432e      	orrs	r6, r5
    4314:	0773      	lsls	r3, r6, #29
    4316:	d004      	beq.n	4322 <__aeabi_fmul+0x1f2>
    4318:	230f      	movs	r3, #15
    431a:	4033      	ands	r3, r6
    431c:	2b04      	cmp	r3, #4
    431e:	d000      	beq.n	4322 <__aeabi_fmul+0x1f2>
    4320:	3604      	adds	r6, #4
    4322:	0173      	lsls	r3, r6, #5
    4324:	d504      	bpl.n	4330 <__aeabi_fmul+0x200>
    4326:	2401      	movs	r4, #1
    4328:	2501      	movs	r5, #1
    432a:	4014      	ands	r4, r2
    432c:	2600      	movs	r6, #0
    432e:	e748      	b.n	41c2 <__aeabi_fmul+0x92>
    4330:	2401      	movs	r4, #1
    4332:	01b6      	lsls	r6, r6, #6
    4334:	0a76      	lsrs	r6, r6, #9
    4336:	4014      	ands	r4, r2
    4338:	2500      	movs	r5, #0
    433a:	e742      	b.n	41c2 <__aeabi_fmul+0x92>
    433c:	2680      	movs	r6, #128	; 0x80
    433e:	2401      	movs	r4, #1
    4340:	03f6      	lsls	r6, r6, #15
    4342:	432e      	orrs	r6, r5
    4344:	0276      	lsls	r6, r6, #9
    4346:	0a76      	lsrs	r6, r6, #9
    4348:	4014      	ands	r4, r2
    434a:	25ff      	movs	r5, #255	; 0xff
    434c:	e739      	b.n	41c2 <__aeabi_fmul+0x92>
    434e:	46c0      	nop			; (mov r8, r8)
    4350:	00006330 	.word	0x00006330
    4354:	f7ffffff 	.word	0xf7ffffff

00004358 <__aeabi_f2iz>:
    4358:	0243      	lsls	r3, r0, #9
    435a:	0a59      	lsrs	r1, r3, #9
    435c:	0043      	lsls	r3, r0, #1
    435e:	0fc2      	lsrs	r2, r0, #31
    4360:	0e1b      	lsrs	r3, r3, #24
    4362:	2000      	movs	r0, #0
    4364:	2b7e      	cmp	r3, #126	; 0x7e
    4366:	dd0e      	ble.n	4386 <__aeabi_f2iz+0x2e>
    4368:	2b9d      	cmp	r3, #157	; 0x9d
    436a:	dc0d      	bgt.n	4388 <__aeabi_f2iz+0x30>
    436c:	2080      	movs	r0, #128	; 0x80
    436e:	0400      	lsls	r0, r0, #16
    4370:	4301      	orrs	r1, r0
    4372:	2b95      	cmp	r3, #149	; 0x95
    4374:	dc0b      	bgt.n	438e <__aeabi_f2iz+0x36>
    4376:	2096      	movs	r0, #150	; 0x96
    4378:	1ac3      	subs	r3, r0, r3
    437a:	40d9      	lsrs	r1, r3
    437c:	000b      	movs	r3, r1
    437e:	4258      	negs	r0, r3
    4380:	2a00      	cmp	r2, #0
    4382:	d100      	bne.n	4386 <__aeabi_f2iz+0x2e>
    4384:	0018      	movs	r0, r3
    4386:	4770      	bx	lr
    4388:	4b03      	ldr	r3, [pc, #12]	; (4398 <__aeabi_f2iz+0x40>)
    438a:	18d0      	adds	r0, r2, r3
    438c:	e7fb      	b.n	4386 <__aeabi_f2iz+0x2e>
    438e:	3b96      	subs	r3, #150	; 0x96
    4390:	4099      	lsls	r1, r3
    4392:	000b      	movs	r3, r1
    4394:	e7f3      	b.n	437e <__aeabi_f2iz+0x26>
    4396:	46c0      	nop			; (mov r8, r8)
    4398:	7fffffff 	.word	0x7fffffff

0000439c <__aeabi_dadd>:
    439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    439e:	4656      	mov	r6, sl
    43a0:	465f      	mov	r7, fp
    43a2:	464d      	mov	r5, r9
    43a4:	4644      	mov	r4, r8
    43a6:	b4f0      	push	{r4, r5, r6, r7}
    43a8:	000f      	movs	r7, r1
    43aa:	0ffd      	lsrs	r5, r7, #31
    43ac:	46aa      	mov	sl, r5
    43ae:	0309      	lsls	r1, r1, #12
    43b0:	007c      	lsls	r4, r7, #1
    43b2:	002e      	movs	r6, r5
    43b4:	005f      	lsls	r7, r3, #1
    43b6:	0f45      	lsrs	r5, r0, #29
    43b8:	0a49      	lsrs	r1, r1, #9
    43ba:	0d7f      	lsrs	r7, r7, #21
    43bc:	4329      	orrs	r1, r5
    43be:	00c5      	lsls	r5, r0, #3
    43c0:	0318      	lsls	r0, r3, #12
    43c2:	46bc      	mov	ip, r7
    43c4:	0a40      	lsrs	r0, r0, #9
    43c6:	0f57      	lsrs	r7, r2, #29
    43c8:	0d64      	lsrs	r4, r4, #21
    43ca:	0fdb      	lsrs	r3, r3, #31
    43cc:	4338      	orrs	r0, r7
    43ce:	00d2      	lsls	r2, r2, #3
    43d0:	459a      	cmp	sl, r3
    43d2:	d100      	bne.n	43d6 <__aeabi_dadd+0x3a>
    43d4:	e0aa      	b.n	452c <__aeabi_dadd+0x190>
    43d6:	4666      	mov	r6, ip
    43d8:	1ba6      	subs	r6, r4, r6
    43da:	2e00      	cmp	r6, #0
    43dc:	dc00      	bgt.n	43e0 <__aeabi_dadd+0x44>
    43de:	e0ff      	b.n	45e0 <__aeabi_dadd+0x244>
    43e0:	4663      	mov	r3, ip
    43e2:	2b00      	cmp	r3, #0
    43e4:	d139      	bne.n	445a <__aeabi_dadd+0xbe>
    43e6:	0003      	movs	r3, r0
    43e8:	4313      	orrs	r3, r2
    43ea:	d000      	beq.n	43ee <__aeabi_dadd+0x52>
    43ec:	e0d9      	b.n	45a2 <__aeabi_dadd+0x206>
    43ee:	076b      	lsls	r3, r5, #29
    43f0:	d009      	beq.n	4406 <__aeabi_dadd+0x6a>
    43f2:	230f      	movs	r3, #15
    43f4:	402b      	ands	r3, r5
    43f6:	2b04      	cmp	r3, #4
    43f8:	d005      	beq.n	4406 <__aeabi_dadd+0x6a>
    43fa:	1d2b      	adds	r3, r5, #4
    43fc:	42ab      	cmp	r3, r5
    43fe:	41ad      	sbcs	r5, r5
    4400:	426d      	negs	r5, r5
    4402:	1949      	adds	r1, r1, r5
    4404:	001d      	movs	r5, r3
    4406:	020b      	lsls	r3, r1, #8
    4408:	d400      	bmi.n	440c <__aeabi_dadd+0x70>
    440a:	e082      	b.n	4512 <__aeabi_dadd+0x176>
    440c:	4bca      	ldr	r3, [pc, #808]	; (4738 <__aeabi_dadd+0x39c>)
    440e:	3401      	adds	r4, #1
    4410:	429c      	cmp	r4, r3
    4412:	d100      	bne.n	4416 <__aeabi_dadd+0x7a>
    4414:	e0fe      	b.n	4614 <__aeabi_dadd+0x278>
    4416:	000a      	movs	r2, r1
    4418:	4656      	mov	r6, sl
    441a:	4bc8      	ldr	r3, [pc, #800]	; (473c <__aeabi_dadd+0x3a0>)
    441c:	08ed      	lsrs	r5, r5, #3
    441e:	401a      	ands	r2, r3
    4420:	0750      	lsls	r0, r2, #29
    4422:	0564      	lsls	r4, r4, #21
    4424:	0252      	lsls	r2, r2, #9
    4426:	4305      	orrs	r5, r0
    4428:	0b12      	lsrs	r2, r2, #12
    442a:	0d64      	lsrs	r4, r4, #21
    442c:	2100      	movs	r1, #0
    442e:	0312      	lsls	r2, r2, #12
    4430:	0d0b      	lsrs	r3, r1, #20
    4432:	051b      	lsls	r3, r3, #20
    4434:	0564      	lsls	r4, r4, #21
    4436:	0b12      	lsrs	r2, r2, #12
    4438:	431a      	orrs	r2, r3
    443a:	0863      	lsrs	r3, r4, #1
    443c:	4cc0      	ldr	r4, [pc, #768]	; (4740 <__aeabi_dadd+0x3a4>)
    443e:	07f6      	lsls	r6, r6, #31
    4440:	4014      	ands	r4, r2
    4442:	431c      	orrs	r4, r3
    4444:	0064      	lsls	r4, r4, #1
    4446:	0864      	lsrs	r4, r4, #1
    4448:	4334      	orrs	r4, r6
    444a:	0028      	movs	r0, r5
    444c:	0021      	movs	r1, r4
    444e:	bc3c      	pop	{r2, r3, r4, r5}
    4450:	4690      	mov	r8, r2
    4452:	4699      	mov	r9, r3
    4454:	46a2      	mov	sl, r4
    4456:	46ab      	mov	fp, r5
    4458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    445a:	4bb7      	ldr	r3, [pc, #732]	; (4738 <__aeabi_dadd+0x39c>)
    445c:	429c      	cmp	r4, r3
    445e:	d0c6      	beq.n	43ee <__aeabi_dadd+0x52>
    4460:	2380      	movs	r3, #128	; 0x80
    4462:	041b      	lsls	r3, r3, #16
    4464:	4318      	orrs	r0, r3
    4466:	2e38      	cmp	r6, #56	; 0x38
    4468:	dd00      	ble.n	446c <__aeabi_dadd+0xd0>
    446a:	e0eb      	b.n	4644 <__aeabi_dadd+0x2a8>
    446c:	2e1f      	cmp	r6, #31
    446e:	dd00      	ble.n	4472 <__aeabi_dadd+0xd6>
    4470:	e11e      	b.n	46b0 <__aeabi_dadd+0x314>
    4472:	2320      	movs	r3, #32
    4474:	1b9b      	subs	r3, r3, r6
    4476:	469c      	mov	ip, r3
    4478:	0003      	movs	r3, r0
    447a:	4667      	mov	r7, ip
    447c:	40bb      	lsls	r3, r7
    447e:	4698      	mov	r8, r3
    4480:	0013      	movs	r3, r2
    4482:	4647      	mov	r7, r8
    4484:	40f3      	lsrs	r3, r6
    4486:	433b      	orrs	r3, r7
    4488:	4667      	mov	r7, ip
    448a:	40ba      	lsls	r2, r7
    448c:	1e57      	subs	r7, r2, #1
    448e:	41ba      	sbcs	r2, r7
    4490:	4313      	orrs	r3, r2
    4492:	0002      	movs	r2, r0
    4494:	40f2      	lsrs	r2, r6
    4496:	1aeb      	subs	r3, r5, r3
    4498:	429d      	cmp	r5, r3
    449a:	41b6      	sbcs	r6, r6
    449c:	001d      	movs	r5, r3
    449e:	1a8a      	subs	r2, r1, r2
    44a0:	4276      	negs	r6, r6
    44a2:	1b91      	subs	r1, r2, r6
    44a4:	020b      	lsls	r3, r1, #8
    44a6:	d531      	bpl.n	450c <__aeabi_dadd+0x170>
    44a8:	024a      	lsls	r2, r1, #9
    44aa:	0a56      	lsrs	r6, r2, #9
    44ac:	2e00      	cmp	r6, #0
    44ae:	d100      	bne.n	44b2 <__aeabi_dadd+0x116>
    44b0:	e0b4      	b.n	461c <__aeabi_dadd+0x280>
    44b2:	0030      	movs	r0, r6
    44b4:	f001 fe40 	bl	6138 <__clzsi2>
    44b8:	0003      	movs	r3, r0
    44ba:	3b08      	subs	r3, #8
    44bc:	2b1f      	cmp	r3, #31
    44be:	dd00      	ble.n	44c2 <__aeabi_dadd+0x126>
    44c0:	e0b5      	b.n	462e <__aeabi_dadd+0x292>
    44c2:	2220      	movs	r2, #32
    44c4:	0029      	movs	r1, r5
    44c6:	1ad2      	subs	r2, r2, r3
    44c8:	40d1      	lsrs	r1, r2
    44ca:	409e      	lsls	r6, r3
    44cc:	000a      	movs	r2, r1
    44ce:	409d      	lsls	r5, r3
    44d0:	4332      	orrs	r2, r6
    44d2:	429c      	cmp	r4, r3
    44d4:	dd00      	ble.n	44d8 <__aeabi_dadd+0x13c>
    44d6:	e0b1      	b.n	463c <__aeabi_dadd+0x2a0>
    44d8:	1b1c      	subs	r4, r3, r4
    44da:	1c63      	adds	r3, r4, #1
    44dc:	2b1f      	cmp	r3, #31
    44de:	dd00      	ble.n	44e2 <__aeabi_dadd+0x146>
    44e0:	e0d5      	b.n	468e <__aeabi_dadd+0x2f2>
    44e2:	2120      	movs	r1, #32
    44e4:	0014      	movs	r4, r2
    44e6:	0028      	movs	r0, r5
    44e8:	1ac9      	subs	r1, r1, r3
    44ea:	408c      	lsls	r4, r1
    44ec:	40d8      	lsrs	r0, r3
    44ee:	408d      	lsls	r5, r1
    44f0:	4304      	orrs	r4, r0
    44f2:	40da      	lsrs	r2, r3
    44f4:	1e68      	subs	r0, r5, #1
    44f6:	4185      	sbcs	r5, r0
    44f8:	0011      	movs	r1, r2
    44fa:	4325      	orrs	r5, r4
    44fc:	2400      	movs	r4, #0
    44fe:	e776      	b.n	43ee <__aeabi_dadd+0x52>
    4500:	4641      	mov	r1, r8
    4502:	4331      	orrs	r1, r6
    4504:	d100      	bne.n	4508 <__aeabi_dadd+0x16c>
    4506:	e234      	b.n	4972 <__aeabi_dadd+0x5d6>
    4508:	0031      	movs	r1, r6
    450a:	4645      	mov	r5, r8
    450c:	076b      	lsls	r3, r5, #29
    450e:	d000      	beq.n	4512 <__aeabi_dadd+0x176>
    4510:	e76f      	b.n	43f2 <__aeabi_dadd+0x56>
    4512:	4656      	mov	r6, sl
    4514:	0748      	lsls	r0, r1, #29
    4516:	08ed      	lsrs	r5, r5, #3
    4518:	08c9      	lsrs	r1, r1, #3
    451a:	4305      	orrs	r5, r0
    451c:	4b86      	ldr	r3, [pc, #536]	; (4738 <__aeabi_dadd+0x39c>)
    451e:	429c      	cmp	r4, r3
    4520:	d035      	beq.n	458e <__aeabi_dadd+0x1f2>
    4522:	030a      	lsls	r2, r1, #12
    4524:	0564      	lsls	r4, r4, #21
    4526:	0b12      	lsrs	r2, r2, #12
    4528:	0d64      	lsrs	r4, r4, #21
    452a:	e77f      	b.n	442c <__aeabi_dadd+0x90>
    452c:	4663      	mov	r3, ip
    452e:	1ae3      	subs	r3, r4, r3
    4530:	469b      	mov	fp, r3
    4532:	2b00      	cmp	r3, #0
    4534:	dc00      	bgt.n	4538 <__aeabi_dadd+0x19c>
    4536:	e08b      	b.n	4650 <__aeabi_dadd+0x2b4>
    4538:	4667      	mov	r7, ip
    453a:	2f00      	cmp	r7, #0
    453c:	d03c      	beq.n	45b8 <__aeabi_dadd+0x21c>
    453e:	4f7e      	ldr	r7, [pc, #504]	; (4738 <__aeabi_dadd+0x39c>)
    4540:	42bc      	cmp	r4, r7
    4542:	d100      	bne.n	4546 <__aeabi_dadd+0x1aa>
    4544:	e753      	b.n	43ee <__aeabi_dadd+0x52>
    4546:	2780      	movs	r7, #128	; 0x80
    4548:	043f      	lsls	r7, r7, #16
    454a:	4338      	orrs	r0, r7
    454c:	465b      	mov	r3, fp
    454e:	2b38      	cmp	r3, #56	; 0x38
    4550:	dc00      	bgt.n	4554 <__aeabi_dadd+0x1b8>
    4552:	e0f7      	b.n	4744 <__aeabi_dadd+0x3a8>
    4554:	4302      	orrs	r2, r0
    4556:	1e50      	subs	r0, r2, #1
    4558:	4182      	sbcs	r2, r0
    455a:	2000      	movs	r0, #0
    455c:	b2d2      	uxtb	r2, r2
    455e:	1953      	adds	r3, r2, r5
    4560:	1842      	adds	r2, r0, r1
    4562:	42ab      	cmp	r3, r5
    4564:	4189      	sbcs	r1, r1
    4566:	001d      	movs	r5, r3
    4568:	4249      	negs	r1, r1
    456a:	1889      	adds	r1, r1, r2
    456c:	020b      	lsls	r3, r1, #8
    456e:	d5cd      	bpl.n	450c <__aeabi_dadd+0x170>
    4570:	4b71      	ldr	r3, [pc, #452]	; (4738 <__aeabi_dadd+0x39c>)
    4572:	3401      	adds	r4, #1
    4574:	429c      	cmp	r4, r3
    4576:	d100      	bne.n	457a <__aeabi_dadd+0x1de>
    4578:	e13d      	b.n	47f6 <__aeabi_dadd+0x45a>
    457a:	2001      	movs	r0, #1
    457c:	4a6f      	ldr	r2, [pc, #444]	; (473c <__aeabi_dadd+0x3a0>)
    457e:	086b      	lsrs	r3, r5, #1
    4580:	400a      	ands	r2, r1
    4582:	4028      	ands	r0, r5
    4584:	4318      	orrs	r0, r3
    4586:	07d5      	lsls	r5, r2, #31
    4588:	4305      	orrs	r5, r0
    458a:	0851      	lsrs	r1, r2, #1
    458c:	e72f      	b.n	43ee <__aeabi_dadd+0x52>
    458e:	002b      	movs	r3, r5
    4590:	430b      	orrs	r3, r1
    4592:	d100      	bne.n	4596 <__aeabi_dadd+0x1fa>
    4594:	e1cb      	b.n	492e <__aeabi_dadd+0x592>
    4596:	2380      	movs	r3, #128	; 0x80
    4598:	031b      	lsls	r3, r3, #12
    459a:	430b      	orrs	r3, r1
    459c:	031a      	lsls	r2, r3, #12
    459e:	0b12      	lsrs	r2, r2, #12
    45a0:	e744      	b.n	442c <__aeabi_dadd+0x90>
    45a2:	3e01      	subs	r6, #1
    45a4:	2e00      	cmp	r6, #0
    45a6:	d16d      	bne.n	4684 <__aeabi_dadd+0x2e8>
    45a8:	1aae      	subs	r6, r5, r2
    45aa:	42b5      	cmp	r5, r6
    45ac:	419b      	sbcs	r3, r3
    45ae:	1a09      	subs	r1, r1, r0
    45b0:	425b      	negs	r3, r3
    45b2:	1ac9      	subs	r1, r1, r3
    45b4:	0035      	movs	r5, r6
    45b6:	e775      	b.n	44a4 <__aeabi_dadd+0x108>
    45b8:	0007      	movs	r7, r0
    45ba:	4317      	orrs	r7, r2
    45bc:	d100      	bne.n	45c0 <__aeabi_dadd+0x224>
    45be:	e716      	b.n	43ee <__aeabi_dadd+0x52>
    45c0:	2301      	movs	r3, #1
    45c2:	425b      	negs	r3, r3
    45c4:	469c      	mov	ip, r3
    45c6:	44e3      	add	fp, ip
    45c8:	465b      	mov	r3, fp
    45ca:	2b00      	cmp	r3, #0
    45cc:	d000      	beq.n	45d0 <__aeabi_dadd+0x234>
    45ce:	e0e0      	b.n	4792 <__aeabi_dadd+0x3f6>
    45d0:	18aa      	adds	r2, r5, r2
    45d2:	42aa      	cmp	r2, r5
    45d4:	419b      	sbcs	r3, r3
    45d6:	1809      	adds	r1, r1, r0
    45d8:	425b      	negs	r3, r3
    45da:	1859      	adds	r1, r3, r1
    45dc:	0015      	movs	r5, r2
    45de:	e7c5      	b.n	456c <__aeabi_dadd+0x1d0>
    45e0:	2e00      	cmp	r6, #0
    45e2:	d175      	bne.n	46d0 <__aeabi_dadd+0x334>
    45e4:	1c66      	adds	r6, r4, #1
    45e6:	0576      	lsls	r6, r6, #21
    45e8:	0d76      	lsrs	r6, r6, #21
    45ea:	2e01      	cmp	r6, #1
    45ec:	dc00      	bgt.n	45f0 <__aeabi_dadd+0x254>
    45ee:	e0f3      	b.n	47d8 <__aeabi_dadd+0x43c>
    45f0:	1aae      	subs	r6, r5, r2
    45f2:	46b0      	mov	r8, r6
    45f4:	4545      	cmp	r5, r8
    45f6:	41bf      	sbcs	r7, r7
    45f8:	1a0e      	subs	r6, r1, r0
    45fa:	427f      	negs	r7, r7
    45fc:	1bf6      	subs	r6, r6, r7
    45fe:	0237      	lsls	r7, r6, #8
    4600:	d400      	bmi.n	4604 <__aeabi_dadd+0x268>
    4602:	e08f      	b.n	4724 <__aeabi_dadd+0x388>
    4604:	1b55      	subs	r5, r2, r5
    4606:	42aa      	cmp	r2, r5
    4608:	41b6      	sbcs	r6, r6
    460a:	1a41      	subs	r1, r0, r1
    460c:	4276      	negs	r6, r6
    460e:	1b8e      	subs	r6, r1, r6
    4610:	469a      	mov	sl, r3
    4612:	e74b      	b.n	44ac <__aeabi_dadd+0x110>
    4614:	4656      	mov	r6, sl
    4616:	2200      	movs	r2, #0
    4618:	2500      	movs	r5, #0
    461a:	e707      	b.n	442c <__aeabi_dadd+0x90>
    461c:	0028      	movs	r0, r5
    461e:	f001 fd8b 	bl	6138 <__clzsi2>
    4622:	3020      	adds	r0, #32
    4624:	0003      	movs	r3, r0
    4626:	3b08      	subs	r3, #8
    4628:	2b1f      	cmp	r3, #31
    462a:	dc00      	bgt.n	462e <__aeabi_dadd+0x292>
    462c:	e749      	b.n	44c2 <__aeabi_dadd+0x126>
    462e:	002a      	movs	r2, r5
    4630:	3828      	subs	r0, #40	; 0x28
    4632:	4082      	lsls	r2, r0
    4634:	2500      	movs	r5, #0
    4636:	429c      	cmp	r4, r3
    4638:	dc00      	bgt.n	463c <__aeabi_dadd+0x2a0>
    463a:	e74d      	b.n	44d8 <__aeabi_dadd+0x13c>
    463c:	493f      	ldr	r1, [pc, #252]	; (473c <__aeabi_dadd+0x3a0>)
    463e:	1ae4      	subs	r4, r4, r3
    4640:	4011      	ands	r1, r2
    4642:	e6d4      	b.n	43ee <__aeabi_dadd+0x52>
    4644:	4302      	orrs	r2, r0
    4646:	1e50      	subs	r0, r2, #1
    4648:	4182      	sbcs	r2, r0
    464a:	b2d3      	uxtb	r3, r2
    464c:	2200      	movs	r2, #0
    464e:	e722      	b.n	4496 <__aeabi_dadd+0xfa>
    4650:	2b00      	cmp	r3, #0
    4652:	d000      	beq.n	4656 <__aeabi_dadd+0x2ba>
    4654:	e0f3      	b.n	483e <__aeabi_dadd+0x4a2>
    4656:	1c63      	adds	r3, r4, #1
    4658:	469c      	mov	ip, r3
    465a:	055b      	lsls	r3, r3, #21
    465c:	0d5b      	lsrs	r3, r3, #21
    465e:	2b01      	cmp	r3, #1
    4660:	dc00      	bgt.n	4664 <__aeabi_dadd+0x2c8>
    4662:	e09f      	b.n	47a4 <__aeabi_dadd+0x408>
    4664:	4b34      	ldr	r3, [pc, #208]	; (4738 <__aeabi_dadd+0x39c>)
    4666:	459c      	cmp	ip, r3
    4668:	d100      	bne.n	466c <__aeabi_dadd+0x2d0>
    466a:	e0c3      	b.n	47f4 <__aeabi_dadd+0x458>
    466c:	18aa      	adds	r2, r5, r2
    466e:	1809      	adds	r1, r1, r0
    4670:	42aa      	cmp	r2, r5
    4672:	4180      	sbcs	r0, r0
    4674:	4240      	negs	r0, r0
    4676:	1841      	adds	r1, r0, r1
    4678:	07cd      	lsls	r5, r1, #31
    467a:	0852      	lsrs	r2, r2, #1
    467c:	4315      	orrs	r5, r2
    467e:	0849      	lsrs	r1, r1, #1
    4680:	4664      	mov	r4, ip
    4682:	e6b4      	b.n	43ee <__aeabi_dadd+0x52>
    4684:	4b2c      	ldr	r3, [pc, #176]	; (4738 <__aeabi_dadd+0x39c>)
    4686:	429c      	cmp	r4, r3
    4688:	d000      	beq.n	468c <__aeabi_dadd+0x2f0>
    468a:	e6ec      	b.n	4466 <__aeabi_dadd+0xca>
    468c:	e6af      	b.n	43ee <__aeabi_dadd+0x52>
    468e:	0011      	movs	r1, r2
    4690:	3c1f      	subs	r4, #31
    4692:	40e1      	lsrs	r1, r4
    4694:	000c      	movs	r4, r1
    4696:	2b20      	cmp	r3, #32
    4698:	d100      	bne.n	469c <__aeabi_dadd+0x300>
    469a:	e07f      	b.n	479c <__aeabi_dadd+0x400>
    469c:	2140      	movs	r1, #64	; 0x40
    469e:	1acb      	subs	r3, r1, r3
    46a0:	409a      	lsls	r2, r3
    46a2:	4315      	orrs	r5, r2
    46a4:	1e6a      	subs	r2, r5, #1
    46a6:	4195      	sbcs	r5, r2
    46a8:	2100      	movs	r1, #0
    46aa:	4325      	orrs	r5, r4
    46ac:	2400      	movs	r4, #0
    46ae:	e72d      	b.n	450c <__aeabi_dadd+0x170>
    46b0:	0033      	movs	r3, r6
    46b2:	0007      	movs	r7, r0
    46b4:	3b20      	subs	r3, #32
    46b6:	40df      	lsrs	r7, r3
    46b8:	003b      	movs	r3, r7
    46ba:	2e20      	cmp	r6, #32
    46bc:	d070      	beq.n	47a0 <__aeabi_dadd+0x404>
    46be:	2740      	movs	r7, #64	; 0x40
    46c0:	1bbe      	subs	r6, r7, r6
    46c2:	40b0      	lsls	r0, r6
    46c4:	4302      	orrs	r2, r0
    46c6:	1e50      	subs	r0, r2, #1
    46c8:	4182      	sbcs	r2, r0
    46ca:	4313      	orrs	r3, r2
    46cc:	2200      	movs	r2, #0
    46ce:	e6e2      	b.n	4496 <__aeabi_dadd+0xfa>
    46d0:	2c00      	cmp	r4, #0
    46d2:	d04f      	beq.n	4774 <__aeabi_dadd+0x3d8>
    46d4:	4c18      	ldr	r4, [pc, #96]	; (4738 <__aeabi_dadd+0x39c>)
    46d6:	45a4      	cmp	ip, r4
    46d8:	d100      	bne.n	46dc <__aeabi_dadd+0x340>
    46da:	e0ab      	b.n	4834 <__aeabi_dadd+0x498>
    46dc:	2480      	movs	r4, #128	; 0x80
    46de:	0424      	lsls	r4, r4, #16
    46e0:	4276      	negs	r6, r6
    46e2:	4321      	orrs	r1, r4
    46e4:	2e38      	cmp	r6, #56	; 0x38
    46e6:	dd00      	ble.n	46ea <__aeabi_dadd+0x34e>
    46e8:	e0df      	b.n	48aa <__aeabi_dadd+0x50e>
    46ea:	2e1f      	cmp	r6, #31
    46ec:	dd00      	ble.n	46f0 <__aeabi_dadd+0x354>
    46ee:	e143      	b.n	4978 <__aeabi_dadd+0x5dc>
    46f0:	2720      	movs	r7, #32
    46f2:	1bbc      	subs	r4, r7, r6
    46f4:	46a1      	mov	r9, r4
    46f6:	000c      	movs	r4, r1
    46f8:	464f      	mov	r7, r9
    46fa:	40bc      	lsls	r4, r7
    46fc:	46a0      	mov	r8, r4
    46fe:	002c      	movs	r4, r5
    4700:	4647      	mov	r7, r8
    4702:	40f4      	lsrs	r4, r6
    4704:	433c      	orrs	r4, r7
    4706:	464f      	mov	r7, r9
    4708:	40bd      	lsls	r5, r7
    470a:	1e6f      	subs	r7, r5, #1
    470c:	41bd      	sbcs	r5, r7
    470e:	40f1      	lsrs	r1, r6
    4710:	432c      	orrs	r4, r5
    4712:	1b15      	subs	r5, r2, r4
    4714:	42aa      	cmp	r2, r5
    4716:	4192      	sbcs	r2, r2
    4718:	1a41      	subs	r1, r0, r1
    471a:	4252      	negs	r2, r2
    471c:	1a89      	subs	r1, r1, r2
    471e:	4664      	mov	r4, ip
    4720:	469a      	mov	sl, r3
    4722:	e6bf      	b.n	44a4 <__aeabi_dadd+0x108>
    4724:	4641      	mov	r1, r8
    4726:	4645      	mov	r5, r8
    4728:	4331      	orrs	r1, r6
    472a:	d000      	beq.n	472e <__aeabi_dadd+0x392>
    472c:	e6be      	b.n	44ac <__aeabi_dadd+0x110>
    472e:	2600      	movs	r6, #0
    4730:	2400      	movs	r4, #0
    4732:	2500      	movs	r5, #0
    4734:	e6f2      	b.n	451c <__aeabi_dadd+0x180>
    4736:	46c0      	nop			; (mov r8, r8)
    4738:	000007ff 	.word	0x000007ff
    473c:	ff7fffff 	.word	0xff7fffff
    4740:	800fffff 	.word	0x800fffff
    4744:	2b1f      	cmp	r3, #31
    4746:	dc59      	bgt.n	47fc <__aeabi_dadd+0x460>
    4748:	2720      	movs	r7, #32
    474a:	1aff      	subs	r7, r7, r3
    474c:	46bc      	mov	ip, r7
    474e:	0007      	movs	r7, r0
    4750:	4663      	mov	r3, ip
    4752:	409f      	lsls	r7, r3
    4754:	465b      	mov	r3, fp
    4756:	46b9      	mov	r9, r7
    4758:	0017      	movs	r7, r2
    475a:	40df      	lsrs	r7, r3
    475c:	46b8      	mov	r8, r7
    475e:	464f      	mov	r7, r9
    4760:	4643      	mov	r3, r8
    4762:	431f      	orrs	r7, r3
    4764:	4663      	mov	r3, ip
    4766:	409a      	lsls	r2, r3
    4768:	1e53      	subs	r3, r2, #1
    476a:	419a      	sbcs	r2, r3
    476c:	465b      	mov	r3, fp
    476e:	433a      	orrs	r2, r7
    4770:	40d8      	lsrs	r0, r3
    4772:	e6f4      	b.n	455e <__aeabi_dadd+0x1c2>
    4774:	000c      	movs	r4, r1
    4776:	432c      	orrs	r4, r5
    4778:	d05c      	beq.n	4834 <__aeabi_dadd+0x498>
    477a:	43f6      	mvns	r6, r6
    477c:	2e00      	cmp	r6, #0
    477e:	d155      	bne.n	482c <__aeabi_dadd+0x490>
    4780:	1b55      	subs	r5, r2, r5
    4782:	42aa      	cmp	r2, r5
    4784:	41a4      	sbcs	r4, r4
    4786:	1a41      	subs	r1, r0, r1
    4788:	4264      	negs	r4, r4
    478a:	1b09      	subs	r1, r1, r4
    478c:	469a      	mov	sl, r3
    478e:	4664      	mov	r4, ip
    4790:	e688      	b.n	44a4 <__aeabi_dadd+0x108>
    4792:	4f96      	ldr	r7, [pc, #600]	; (49ec <__aeabi_dadd+0x650>)
    4794:	42bc      	cmp	r4, r7
    4796:	d000      	beq.n	479a <__aeabi_dadd+0x3fe>
    4798:	e6d8      	b.n	454c <__aeabi_dadd+0x1b0>
    479a:	e628      	b.n	43ee <__aeabi_dadd+0x52>
    479c:	2200      	movs	r2, #0
    479e:	e780      	b.n	46a2 <__aeabi_dadd+0x306>
    47a0:	2000      	movs	r0, #0
    47a2:	e78f      	b.n	46c4 <__aeabi_dadd+0x328>
    47a4:	000b      	movs	r3, r1
    47a6:	432b      	orrs	r3, r5
    47a8:	2c00      	cmp	r4, #0
    47aa:	d000      	beq.n	47ae <__aeabi_dadd+0x412>
    47ac:	e0c2      	b.n	4934 <__aeabi_dadd+0x598>
    47ae:	2b00      	cmp	r3, #0
    47b0:	d100      	bne.n	47b4 <__aeabi_dadd+0x418>
    47b2:	e101      	b.n	49b8 <__aeabi_dadd+0x61c>
    47b4:	0003      	movs	r3, r0
    47b6:	4313      	orrs	r3, r2
    47b8:	d100      	bne.n	47bc <__aeabi_dadd+0x420>
    47ba:	e618      	b.n	43ee <__aeabi_dadd+0x52>
    47bc:	18ab      	adds	r3, r5, r2
    47be:	42ab      	cmp	r3, r5
    47c0:	41b6      	sbcs	r6, r6
    47c2:	1809      	adds	r1, r1, r0
    47c4:	4276      	negs	r6, r6
    47c6:	1871      	adds	r1, r6, r1
    47c8:	020a      	lsls	r2, r1, #8
    47ca:	d400      	bmi.n	47ce <__aeabi_dadd+0x432>
    47cc:	e109      	b.n	49e2 <__aeabi_dadd+0x646>
    47ce:	4a88      	ldr	r2, [pc, #544]	; (49f0 <__aeabi_dadd+0x654>)
    47d0:	001d      	movs	r5, r3
    47d2:	4011      	ands	r1, r2
    47d4:	4664      	mov	r4, ip
    47d6:	e60a      	b.n	43ee <__aeabi_dadd+0x52>
    47d8:	2c00      	cmp	r4, #0
    47da:	d15b      	bne.n	4894 <__aeabi_dadd+0x4f8>
    47dc:	000e      	movs	r6, r1
    47de:	432e      	orrs	r6, r5
    47e0:	d000      	beq.n	47e4 <__aeabi_dadd+0x448>
    47e2:	e08a      	b.n	48fa <__aeabi_dadd+0x55e>
    47e4:	0001      	movs	r1, r0
    47e6:	4311      	orrs	r1, r2
    47e8:	d100      	bne.n	47ec <__aeabi_dadd+0x450>
    47ea:	e0c2      	b.n	4972 <__aeabi_dadd+0x5d6>
    47ec:	0001      	movs	r1, r0
    47ee:	0015      	movs	r5, r2
    47f0:	469a      	mov	sl, r3
    47f2:	e5fc      	b.n	43ee <__aeabi_dadd+0x52>
    47f4:	4664      	mov	r4, ip
    47f6:	2100      	movs	r1, #0
    47f8:	2500      	movs	r5, #0
    47fa:	e68f      	b.n	451c <__aeabi_dadd+0x180>
    47fc:	2320      	movs	r3, #32
    47fe:	425b      	negs	r3, r3
    4800:	469c      	mov	ip, r3
    4802:	44dc      	add	ip, fp
    4804:	4663      	mov	r3, ip
    4806:	0007      	movs	r7, r0
    4808:	40df      	lsrs	r7, r3
    480a:	465b      	mov	r3, fp
    480c:	46bc      	mov	ip, r7
    480e:	2b20      	cmp	r3, #32
    4810:	d100      	bne.n	4814 <__aeabi_dadd+0x478>
    4812:	e0ac      	b.n	496e <__aeabi_dadd+0x5d2>
    4814:	2340      	movs	r3, #64	; 0x40
    4816:	465f      	mov	r7, fp
    4818:	1bdb      	subs	r3, r3, r7
    481a:	4098      	lsls	r0, r3
    481c:	4302      	orrs	r2, r0
    481e:	1e50      	subs	r0, r2, #1
    4820:	4182      	sbcs	r2, r0
    4822:	4663      	mov	r3, ip
    4824:	4313      	orrs	r3, r2
    4826:	001a      	movs	r2, r3
    4828:	2000      	movs	r0, #0
    482a:	e698      	b.n	455e <__aeabi_dadd+0x1c2>
    482c:	4c6f      	ldr	r4, [pc, #444]	; (49ec <__aeabi_dadd+0x650>)
    482e:	45a4      	cmp	ip, r4
    4830:	d000      	beq.n	4834 <__aeabi_dadd+0x498>
    4832:	e757      	b.n	46e4 <__aeabi_dadd+0x348>
    4834:	0001      	movs	r1, r0
    4836:	0015      	movs	r5, r2
    4838:	4664      	mov	r4, ip
    483a:	469a      	mov	sl, r3
    483c:	e5d7      	b.n	43ee <__aeabi_dadd+0x52>
    483e:	2c00      	cmp	r4, #0
    4840:	d139      	bne.n	48b6 <__aeabi_dadd+0x51a>
    4842:	000c      	movs	r4, r1
    4844:	432c      	orrs	r4, r5
    4846:	d06e      	beq.n	4926 <__aeabi_dadd+0x58a>
    4848:	43db      	mvns	r3, r3
    484a:	2b00      	cmp	r3, #0
    484c:	d01a      	beq.n	4884 <__aeabi_dadd+0x4e8>
    484e:	4c67      	ldr	r4, [pc, #412]	; (49ec <__aeabi_dadd+0x650>)
    4850:	45a4      	cmp	ip, r4
    4852:	d068      	beq.n	4926 <__aeabi_dadd+0x58a>
    4854:	2b38      	cmp	r3, #56	; 0x38
    4856:	dd00      	ble.n	485a <__aeabi_dadd+0x4be>
    4858:	e0a4      	b.n	49a4 <__aeabi_dadd+0x608>
    485a:	2b1f      	cmp	r3, #31
    485c:	dd00      	ble.n	4860 <__aeabi_dadd+0x4c4>
    485e:	e0ae      	b.n	49be <__aeabi_dadd+0x622>
    4860:	2420      	movs	r4, #32
    4862:	000f      	movs	r7, r1
    4864:	1ae4      	subs	r4, r4, r3
    4866:	40a7      	lsls	r7, r4
    4868:	46b9      	mov	r9, r7
    486a:	002f      	movs	r7, r5
    486c:	40df      	lsrs	r7, r3
    486e:	46b8      	mov	r8, r7
    4870:	46a3      	mov	fp, r4
    4872:	464f      	mov	r7, r9
    4874:	4644      	mov	r4, r8
    4876:	4327      	orrs	r7, r4
    4878:	465c      	mov	r4, fp
    487a:	40a5      	lsls	r5, r4
    487c:	1e6c      	subs	r4, r5, #1
    487e:	41a5      	sbcs	r5, r4
    4880:	40d9      	lsrs	r1, r3
    4882:	433d      	orrs	r5, r7
    4884:	18ad      	adds	r5, r5, r2
    4886:	4295      	cmp	r5, r2
    4888:	419b      	sbcs	r3, r3
    488a:	1809      	adds	r1, r1, r0
    488c:	425b      	negs	r3, r3
    488e:	1859      	adds	r1, r3, r1
    4890:	4664      	mov	r4, ip
    4892:	e66b      	b.n	456c <__aeabi_dadd+0x1d0>
    4894:	000c      	movs	r4, r1
    4896:	432c      	orrs	r4, r5
    4898:	d115      	bne.n	48c6 <__aeabi_dadd+0x52a>
    489a:	0001      	movs	r1, r0
    489c:	4311      	orrs	r1, r2
    489e:	d07b      	beq.n	4998 <__aeabi_dadd+0x5fc>
    48a0:	0001      	movs	r1, r0
    48a2:	0015      	movs	r5, r2
    48a4:	469a      	mov	sl, r3
    48a6:	4c51      	ldr	r4, [pc, #324]	; (49ec <__aeabi_dadd+0x650>)
    48a8:	e5a1      	b.n	43ee <__aeabi_dadd+0x52>
    48aa:	430d      	orrs	r5, r1
    48ac:	1e69      	subs	r1, r5, #1
    48ae:	418d      	sbcs	r5, r1
    48b0:	2100      	movs	r1, #0
    48b2:	b2ec      	uxtb	r4, r5
    48b4:	e72d      	b.n	4712 <__aeabi_dadd+0x376>
    48b6:	4c4d      	ldr	r4, [pc, #308]	; (49ec <__aeabi_dadd+0x650>)
    48b8:	45a4      	cmp	ip, r4
    48ba:	d034      	beq.n	4926 <__aeabi_dadd+0x58a>
    48bc:	2480      	movs	r4, #128	; 0x80
    48be:	0424      	lsls	r4, r4, #16
    48c0:	425b      	negs	r3, r3
    48c2:	4321      	orrs	r1, r4
    48c4:	e7c6      	b.n	4854 <__aeabi_dadd+0x4b8>
    48c6:	0004      	movs	r4, r0
    48c8:	4314      	orrs	r4, r2
    48ca:	d04e      	beq.n	496a <__aeabi_dadd+0x5ce>
    48cc:	08ed      	lsrs	r5, r5, #3
    48ce:	074c      	lsls	r4, r1, #29
    48d0:	432c      	orrs	r4, r5
    48d2:	2580      	movs	r5, #128	; 0x80
    48d4:	08c9      	lsrs	r1, r1, #3
    48d6:	032d      	lsls	r5, r5, #12
    48d8:	4229      	tst	r1, r5
    48da:	d008      	beq.n	48ee <__aeabi_dadd+0x552>
    48dc:	08c6      	lsrs	r6, r0, #3
    48de:	422e      	tst	r6, r5
    48e0:	d105      	bne.n	48ee <__aeabi_dadd+0x552>
    48e2:	08d2      	lsrs	r2, r2, #3
    48e4:	0741      	lsls	r1, r0, #29
    48e6:	4311      	orrs	r1, r2
    48e8:	000c      	movs	r4, r1
    48ea:	469a      	mov	sl, r3
    48ec:	0031      	movs	r1, r6
    48ee:	0f62      	lsrs	r2, r4, #29
    48f0:	00c9      	lsls	r1, r1, #3
    48f2:	00e5      	lsls	r5, r4, #3
    48f4:	4311      	orrs	r1, r2
    48f6:	4c3d      	ldr	r4, [pc, #244]	; (49ec <__aeabi_dadd+0x650>)
    48f8:	e579      	b.n	43ee <__aeabi_dadd+0x52>
    48fa:	0006      	movs	r6, r0
    48fc:	4316      	orrs	r6, r2
    48fe:	d100      	bne.n	4902 <__aeabi_dadd+0x566>
    4900:	e575      	b.n	43ee <__aeabi_dadd+0x52>
    4902:	1aae      	subs	r6, r5, r2
    4904:	46b0      	mov	r8, r6
    4906:	4545      	cmp	r5, r8
    4908:	41bf      	sbcs	r7, r7
    490a:	1a0e      	subs	r6, r1, r0
    490c:	427f      	negs	r7, r7
    490e:	1bf6      	subs	r6, r6, r7
    4910:	0237      	lsls	r7, r6, #8
    4912:	d400      	bmi.n	4916 <__aeabi_dadd+0x57a>
    4914:	e5f4      	b.n	4500 <__aeabi_dadd+0x164>
    4916:	1b55      	subs	r5, r2, r5
    4918:	42aa      	cmp	r2, r5
    491a:	41b6      	sbcs	r6, r6
    491c:	1a41      	subs	r1, r0, r1
    491e:	4276      	negs	r6, r6
    4920:	1b89      	subs	r1, r1, r6
    4922:	469a      	mov	sl, r3
    4924:	e563      	b.n	43ee <__aeabi_dadd+0x52>
    4926:	0001      	movs	r1, r0
    4928:	0015      	movs	r5, r2
    492a:	4664      	mov	r4, ip
    492c:	e55f      	b.n	43ee <__aeabi_dadd+0x52>
    492e:	2200      	movs	r2, #0
    4930:	2500      	movs	r5, #0
    4932:	e57b      	b.n	442c <__aeabi_dadd+0x90>
    4934:	2b00      	cmp	r3, #0
    4936:	d03b      	beq.n	49b0 <__aeabi_dadd+0x614>
    4938:	0003      	movs	r3, r0
    493a:	4313      	orrs	r3, r2
    493c:	d015      	beq.n	496a <__aeabi_dadd+0x5ce>
    493e:	08ed      	lsrs	r5, r5, #3
    4940:	074b      	lsls	r3, r1, #29
    4942:	432b      	orrs	r3, r5
    4944:	2580      	movs	r5, #128	; 0x80
    4946:	08c9      	lsrs	r1, r1, #3
    4948:	032d      	lsls	r5, r5, #12
    494a:	4229      	tst	r1, r5
    494c:	d007      	beq.n	495e <__aeabi_dadd+0x5c2>
    494e:	08c4      	lsrs	r4, r0, #3
    4950:	422c      	tst	r4, r5
    4952:	d104      	bne.n	495e <__aeabi_dadd+0x5c2>
    4954:	0741      	lsls	r1, r0, #29
    4956:	000b      	movs	r3, r1
    4958:	0021      	movs	r1, r4
    495a:	08d2      	lsrs	r2, r2, #3
    495c:	4313      	orrs	r3, r2
    495e:	00c9      	lsls	r1, r1, #3
    4960:	0f5a      	lsrs	r2, r3, #29
    4962:	4311      	orrs	r1, r2
    4964:	00dd      	lsls	r5, r3, #3
    4966:	4c21      	ldr	r4, [pc, #132]	; (49ec <__aeabi_dadd+0x650>)
    4968:	e541      	b.n	43ee <__aeabi_dadd+0x52>
    496a:	4c20      	ldr	r4, [pc, #128]	; (49ec <__aeabi_dadd+0x650>)
    496c:	e53f      	b.n	43ee <__aeabi_dadd+0x52>
    496e:	2000      	movs	r0, #0
    4970:	e754      	b.n	481c <__aeabi_dadd+0x480>
    4972:	2600      	movs	r6, #0
    4974:	2500      	movs	r5, #0
    4976:	e5d1      	b.n	451c <__aeabi_dadd+0x180>
    4978:	0034      	movs	r4, r6
    497a:	000f      	movs	r7, r1
    497c:	3c20      	subs	r4, #32
    497e:	40e7      	lsrs	r7, r4
    4980:	003c      	movs	r4, r7
    4982:	2e20      	cmp	r6, #32
    4984:	d02b      	beq.n	49de <__aeabi_dadd+0x642>
    4986:	2740      	movs	r7, #64	; 0x40
    4988:	1bbe      	subs	r6, r7, r6
    498a:	40b1      	lsls	r1, r6
    498c:	430d      	orrs	r5, r1
    498e:	1e69      	subs	r1, r5, #1
    4990:	418d      	sbcs	r5, r1
    4992:	2100      	movs	r1, #0
    4994:	432c      	orrs	r4, r5
    4996:	e6bc      	b.n	4712 <__aeabi_dadd+0x376>
    4998:	2180      	movs	r1, #128	; 0x80
    499a:	2600      	movs	r6, #0
    499c:	0309      	lsls	r1, r1, #12
    499e:	4c13      	ldr	r4, [pc, #76]	; (49ec <__aeabi_dadd+0x650>)
    49a0:	2500      	movs	r5, #0
    49a2:	e5bb      	b.n	451c <__aeabi_dadd+0x180>
    49a4:	430d      	orrs	r5, r1
    49a6:	1e69      	subs	r1, r5, #1
    49a8:	418d      	sbcs	r5, r1
    49aa:	2100      	movs	r1, #0
    49ac:	b2ed      	uxtb	r5, r5
    49ae:	e769      	b.n	4884 <__aeabi_dadd+0x4e8>
    49b0:	0001      	movs	r1, r0
    49b2:	0015      	movs	r5, r2
    49b4:	4c0d      	ldr	r4, [pc, #52]	; (49ec <__aeabi_dadd+0x650>)
    49b6:	e51a      	b.n	43ee <__aeabi_dadd+0x52>
    49b8:	0001      	movs	r1, r0
    49ba:	0015      	movs	r5, r2
    49bc:	e517      	b.n	43ee <__aeabi_dadd+0x52>
    49be:	001c      	movs	r4, r3
    49c0:	000f      	movs	r7, r1
    49c2:	3c20      	subs	r4, #32
    49c4:	40e7      	lsrs	r7, r4
    49c6:	003c      	movs	r4, r7
    49c8:	2b20      	cmp	r3, #32
    49ca:	d00c      	beq.n	49e6 <__aeabi_dadd+0x64a>
    49cc:	2740      	movs	r7, #64	; 0x40
    49ce:	1afb      	subs	r3, r7, r3
    49d0:	4099      	lsls	r1, r3
    49d2:	430d      	orrs	r5, r1
    49d4:	1e69      	subs	r1, r5, #1
    49d6:	418d      	sbcs	r5, r1
    49d8:	2100      	movs	r1, #0
    49da:	4325      	orrs	r5, r4
    49dc:	e752      	b.n	4884 <__aeabi_dadd+0x4e8>
    49de:	2100      	movs	r1, #0
    49e0:	e7d4      	b.n	498c <__aeabi_dadd+0x5f0>
    49e2:	001d      	movs	r5, r3
    49e4:	e592      	b.n	450c <__aeabi_dadd+0x170>
    49e6:	2100      	movs	r1, #0
    49e8:	e7f3      	b.n	49d2 <__aeabi_dadd+0x636>
    49ea:	46c0      	nop			; (mov r8, r8)
    49ec:	000007ff 	.word	0x000007ff
    49f0:	ff7fffff 	.word	0xff7fffff

000049f4 <__aeabi_ddiv>:
    49f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    49f6:	4656      	mov	r6, sl
    49f8:	464d      	mov	r5, r9
    49fa:	4644      	mov	r4, r8
    49fc:	465f      	mov	r7, fp
    49fe:	b4f0      	push	{r4, r5, r6, r7}
    4a00:	001d      	movs	r5, r3
    4a02:	030e      	lsls	r6, r1, #12
    4a04:	004c      	lsls	r4, r1, #1
    4a06:	0fcb      	lsrs	r3, r1, #31
    4a08:	b087      	sub	sp, #28
    4a0a:	0007      	movs	r7, r0
    4a0c:	4692      	mov	sl, r2
    4a0e:	4681      	mov	r9, r0
    4a10:	0b36      	lsrs	r6, r6, #12
    4a12:	0d64      	lsrs	r4, r4, #21
    4a14:	4698      	mov	r8, r3
    4a16:	d06a      	beq.n	4aee <__aeabi_ddiv+0xfa>
    4a18:	4b6d      	ldr	r3, [pc, #436]	; (4bd0 <__aeabi_ddiv+0x1dc>)
    4a1a:	429c      	cmp	r4, r3
    4a1c:	d035      	beq.n	4a8a <__aeabi_ddiv+0x96>
    4a1e:	2280      	movs	r2, #128	; 0x80
    4a20:	0f43      	lsrs	r3, r0, #29
    4a22:	0412      	lsls	r2, r2, #16
    4a24:	4313      	orrs	r3, r2
    4a26:	00f6      	lsls	r6, r6, #3
    4a28:	431e      	orrs	r6, r3
    4a2a:	00c3      	lsls	r3, r0, #3
    4a2c:	4699      	mov	r9, r3
    4a2e:	4b69      	ldr	r3, [pc, #420]	; (4bd4 <__aeabi_ddiv+0x1e0>)
    4a30:	2700      	movs	r7, #0
    4a32:	469c      	mov	ip, r3
    4a34:	2300      	movs	r3, #0
    4a36:	4464      	add	r4, ip
    4a38:	9302      	str	r3, [sp, #8]
    4a3a:	032b      	lsls	r3, r5, #12
    4a3c:	0068      	lsls	r0, r5, #1
    4a3e:	0b1b      	lsrs	r3, r3, #12
    4a40:	0fed      	lsrs	r5, r5, #31
    4a42:	4651      	mov	r1, sl
    4a44:	469b      	mov	fp, r3
    4a46:	0d40      	lsrs	r0, r0, #21
    4a48:	9500      	str	r5, [sp, #0]
    4a4a:	d100      	bne.n	4a4e <__aeabi_ddiv+0x5a>
    4a4c:	e078      	b.n	4b40 <__aeabi_ddiv+0x14c>
    4a4e:	4b60      	ldr	r3, [pc, #384]	; (4bd0 <__aeabi_ddiv+0x1dc>)
    4a50:	4298      	cmp	r0, r3
    4a52:	d06c      	beq.n	4b2e <__aeabi_ddiv+0x13a>
    4a54:	465b      	mov	r3, fp
    4a56:	00da      	lsls	r2, r3, #3
    4a58:	0f4b      	lsrs	r3, r1, #29
    4a5a:	2180      	movs	r1, #128	; 0x80
    4a5c:	0409      	lsls	r1, r1, #16
    4a5e:	430b      	orrs	r3, r1
    4a60:	4313      	orrs	r3, r2
    4a62:	469b      	mov	fp, r3
    4a64:	4653      	mov	r3, sl
    4a66:	00d9      	lsls	r1, r3, #3
    4a68:	4b5a      	ldr	r3, [pc, #360]	; (4bd4 <__aeabi_ddiv+0x1e0>)
    4a6a:	469c      	mov	ip, r3
    4a6c:	2300      	movs	r3, #0
    4a6e:	4460      	add	r0, ip
    4a70:	4642      	mov	r2, r8
    4a72:	1a20      	subs	r0, r4, r0
    4a74:	406a      	eors	r2, r5
    4a76:	4692      	mov	sl, r2
    4a78:	9001      	str	r0, [sp, #4]
    4a7a:	431f      	orrs	r7, r3
    4a7c:	2f0f      	cmp	r7, #15
    4a7e:	d900      	bls.n	4a82 <__aeabi_ddiv+0x8e>
    4a80:	e0b0      	b.n	4be4 <__aeabi_ddiv+0x1f0>
    4a82:	4855      	ldr	r0, [pc, #340]	; (4bd8 <__aeabi_ddiv+0x1e4>)
    4a84:	00bf      	lsls	r7, r7, #2
    4a86:	59c0      	ldr	r0, [r0, r7]
    4a88:	4687      	mov	pc, r0
    4a8a:	4337      	orrs	r7, r6
    4a8c:	d000      	beq.n	4a90 <__aeabi_ddiv+0x9c>
    4a8e:	e088      	b.n	4ba2 <__aeabi_ddiv+0x1ae>
    4a90:	2300      	movs	r3, #0
    4a92:	4699      	mov	r9, r3
    4a94:	3302      	adds	r3, #2
    4a96:	2708      	movs	r7, #8
    4a98:	2600      	movs	r6, #0
    4a9a:	9302      	str	r3, [sp, #8]
    4a9c:	e7cd      	b.n	4a3a <__aeabi_ddiv+0x46>
    4a9e:	4643      	mov	r3, r8
    4aa0:	46b3      	mov	fp, r6
    4aa2:	4649      	mov	r1, r9
    4aa4:	9300      	str	r3, [sp, #0]
    4aa6:	9b02      	ldr	r3, [sp, #8]
    4aa8:	9a00      	ldr	r2, [sp, #0]
    4aaa:	4692      	mov	sl, r2
    4aac:	2b02      	cmp	r3, #2
    4aae:	d000      	beq.n	4ab2 <__aeabi_ddiv+0xbe>
    4ab0:	e1bf      	b.n	4e32 <__aeabi_ddiv+0x43e>
    4ab2:	2100      	movs	r1, #0
    4ab4:	4653      	mov	r3, sl
    4ab6:	2201      	movs	r2, #1
    4ab8:	2600      	movs	r6, #0
    4aba:	4689      	mov	r9, r1
    4abc:	401a      	ands	r2, r3
    4abe:	4b44      	ldr	r3, [pc, #272]	; (4bd0 <__aeabi_ddiv+0x1dc>)
    4ac0:	2100      	movs	r1, #0
    4ac2:	0336      	lsls	r6, r6, #12
    4ac4:	0d0c      	lsrs	r4, r1, #20
    4ac6:	0524      	lsls	r4, r4, #20
    4ac8:	0b36      	lsrs	r6, r6, #12
    4aca:	4326      	orrs	r6, r4
    4acc:	4c43      	ldr	r4, [pc, #268]	; (4bdc <__aeabi_ddiv+0x1e8>)
    4ace:	051b      	lsls	r3, r3, #20
    4ad0:	4026      	ands	r6, r4
    4ad2:	431e      	orrs	r6, r3
    4ad4:	0076      	lsls	r6, r6, #1
    4ad6:	07d2      	lsls	r2, r2, #31
    4ad8:	0876      	lsrs	r6, r6, #1
    4ada:	4316      	orrs	r6, r2
    4adc:	4648      	mov	r0, r9
    4ade:	0031      	movs	r1, r6
    4ae0:	b007      	add	sp, #28
    4ae2:	bc3c      	pop	{r2, r3, r4, r5}
    4ae4:	4690      	mov	r8, r2
    4ae6:	4699      	mov	r9, r3
    4ae8:	46a2      	mov	sl, r4
    4aea:	46ab      	mov	fp, r5
    4aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4aee:	0033      	movs	r3, r6
    4af0:	4303      	orrs	r3, r0
    4af2:	d04f      	beq.n	4b94 <__aeabi_ddiv+0x1a0>
    4af4:	2e00      	cmp	r6, #0
    4af6:	d100      	bne.n	4afa <__aeabi_ddiv+0x106>
    4af8:	e1bc      	b.n	4e74 <__aeabi_ddiv+0x480>
    4afa:	0030      	movs	r0, r6
    4afc:	f001 fb1c 	bl	6138 <__clzsi2>
    4b00:	0003      	movs	r3, r0
    4b02:	3b0b      	subs	r3, #11
    4b04:	2b1c      	cmp	r3, #28
    4b06:	dd00      	ble.n	4b0a <__aeabi_ddiv+0x116>
    4b08:	e1ad      	b.n	4e66 <__aeabi_ddiv+0x472>
    4b0a:	221d      	movs	r2, #29
    4b0c:	0001      	movs	r1, r0
    4b0e:	1ad3      	subs	r3, r2, r3
    4b10:	3908      	subs	r1, #8
    4b12:	003a      	movs	r2, r7
    4b14:	408f      	lsls	r7, r1
    4b16:	408e      	lsls	r6, r1
    4b18:	40da      	lsrs	r2, r3
    4b1a:	46b9      	mov	r9, r7
    4b1c:	4316      	orrs	r6, r2
    4b1e:	4b30      	ldr	r3, [pc, #192]	; (4be0 <__aeabi_ddiv+0x1ec>)
    4b20:	2700      	movs	r7, #0
    4b22:	469c      	mov	ip, r3
    4b24:	2300      	movs	r3, #0
    4b26:	4460      	add	r0, ip
    4b28:	4244      	negs	r4, r0
    4b2a:	9302      	str	r3, [sp, #8]
    4b2c:	e785      	b.n	4a3a <__aeabi_ddiv+0x46>
    4b2e:	4653      	mov	r3, sl
    4b30:	465a      	mov	r2, fp
    4b32:	4313      	orrs	r3, r2
    4b34:	d12c      	bne.n	4b90 <__aeabi_ddiv+0x19c>
    4b36:	2300      	movs	r3, #0
    4b38:	2100      	movs	r1, #0
    4b3a:	469b      	mov	fp, r3
    4b3c:	3302      	adds	r3, #2
    4b3e:	e797      	b.n	4a70 <__aeabi_ddiv+0x7c>
    4b40:	430b      	orrs	r3, r1
    4b42:	d020      	beq.n	4b86 <__aeabi_ddiv+0x192>
    4b44:	465b      	mov	r3, fp
    4b46:	2b00      	cmp	r3, #0
    4b48:	d100      	bne.n	4b4c <__aeabi_ddiv+0x158>
    4b4a:	e19e      	b.n	4e8a <__aeabi_ddiv+0x496>
    4b4c:	4658      	mov	r0, fp
    4b4e:	f001 faf3 	bl	6138 <__clzsi2>
    4b52:	0003      	movs	r3, r0
    4b54:	3b0b      	subs	r3, #11
    4b56:	2b1c      	cmp	r3, #28
    4b58:	dd00      	ble.n	4b5c <__aeabi_ddiv+0x168>
    4b5a:	e18f      	b.n	4e7c <__aeabi_ddiv+0x488>
    4b5c:	0002      	movs	r2, r0
    4b5e:	4659      	mov	r1, fp
    4b60:	3a08      	subs	r2, #8
    4b62:	4091      	lsls	r1, r2
    4b64:	468b      	mov	fp, r1
    4b66:	211d      	movs	r1, #29
    4b68:	1acb      	subs	r3, r1, r3
    4b6a:	4651      	mov	r1, sl
    4b6c:	40d9      	lsrs	r1, r3
    4b6e:	000b      	movs	r3, r1
    4b70:	4659      	mov	r1, fp
    4b72:	430b      	orrs	r3, r1
    4b74:	4651      	mov	r1, sl
    4b76:	469b      	mov	fp, r3
    4b78:	4091      	lsls	r1, r2
    4b7a:	4b19      	ldr	r3, [pc, #100]	; (4be0 <__aeabi_ddiv+0x1ec>)
    4b7c:	469c      	mov	ip, r3
    4b7e:	4460      	add	r0, ip
    4b80:	4240      	negs	r0, r0
    4b82:	2300      	movs	r3, #0
    4b84:	e774      	b.n	4a70 <__aeabi_ddiv+0x7c>
    4b86:	2300      	movs	r3, #0
    4b88:	2100      	movs	r1, #0
    4b8a:	469b      	mov	fp, r3
    4b8c:	3301      	adds	r3, #1
    4b8e:	e76f      	b.n	4a70 <__aeabi_ddiv+0x7c>
    4b90:	2303      	movs	r3, #3
    4b92:	e76d      	b.n	4a70 <__aeabi_ddiv+0x7c>
    4b94:	2300      	movs	r3, #0
    4b96:	4699      	mov	r9, r3
    4b98:	3301      	adds	r3, #1
    4b9a:	2704      	movs	r7, #4
    4b9c:	2600      	movs	r6, #0
    4b9e:	9302      	str	r3, [sp, #8]
    4ba0:	e74b      	b.n	4a3a <__aeabi_ddiv+0x46>
    4ba2:	2303      	movs	r3, #3
    4ba4:	270c      	movs	r7, #12
    4ba6:	9302      	str	r3, [sp, #8]
    4ba8:	e747      	b.n	4a3a <__aeabi_ddiv+0x46>
    4baa:	2201      	movs	r2, #1
    4bac:	1ad5      	subs	r5, r2, r3
    4bae:	2d38      	cmp	r5, #56	; 0x38
    4bb0:	dc00      	bgt.n	4bb4 <__aeabi_ddiv+0x1c0>
    4bb2:	e1b0      	b.n	4f16 <__aeabi_ddiv+0x522>
    4bb4:	4653      	mov	r3, sl
    4bb6:	401a      	ands	r2, r3
    4bb8:	2100      	movs	r1, #0
    4bba:	2300      	movs	r3, #0
    4bbc:	2600      	movs	r6, #0
    4bbe:	4689      	mov	r9, r1
    4bc0:	e77e      	b.n	4ac0 <__aeabi_ddiv+0xcc>
    4bc2:	2300      	movs	r3, #0
    4bc4:	2680      	movs	r6, #128	; 0x80
    4bc6:	4699      	mov	r9, r3
    4bc8:	2200      	movs	r2, #0
    4bca:	0336      	lsls	r6, r6, #12
    4bcc:	4b00      	ldr	r3, [pc, #0]	; (4bd0 <__aeabi_ddiv+0x1dc>)
    4bce:	e777      	b.n	4ac0 <__aeabi_ddiv+0xcc>
    4bd0:	000007ff 	.word	0x000007ff
    4bd4:	fffffc01 	.word	0xfffffc01
    4bd8:	00006370 	.word	0x00006370
    4bdc:	800fffff 	.word	0x800fffff
    4be0:	000003f3 	.word	0x000003f3
    4be4:	455e      	cmp	r6, fp
    4be6:	d900      	bls.n	4bea <__aeabi_ddiv+0x1f6>
    4be8:	e172      	b.n	4ed0 <__aeabi_ddiv+0x4dc>
    4bea:	d100      	bne.n	4bee <__aeabi_ddiv+0x1fa>
    4bec:	e16d      	b.n	4eca <__aeabi_ddiv+0x4d6>
    4bee:	9b01      	ldr	r3, [sp, #4]
    4bf0:	464d      	mov	r5, r9
    4bf2:	3b01      	subs	r3, #1
    4bf4:	9301      	str	r3, [sp, #4]
    4bf6:	2300      	movs	r3, #0
    4bf8:	0034      	movs	r4, r6
    4bfa:	9302      	str	r3, [sp, #8]
    4bfc:	465b      	mov	r3, fp
    4bfe:	021e      	lsls	r6, r3, #8
    4c00:	0e0b      	lsrs	r3, r1, #24
    4c02:	431e      	orrs	r6, r3
    4c04:	020b      	lsls	r3, r1, #8
    4c06:	9303      	str	r3, [sp, #12]
    4c08:	0c33      	lsrs	r3, r6, #16
    4c0a:	4699      	mov	r9, r3
    4c0c:	0433      	lsls	r3, r6, #16
    4c0e:	0c1b      	lsrs	r3, r3, #16
    4c10:	4649      	mov	r1, r9
    4c12:	0020      	movs	r0, r4
    4c14:	9300      	str	r3, [sp, #0]
    4c16:	f7ff f977 	bl	3f08 <__aeabi_uidiv>
    4c1a:	9b00      	ldr	r3, [sp, #0]
    4c1c:	0037      	movs	r7, r6
    4c1e:	4343      	muls	r3, r0
    4c20:	0006      	movs	r6, r0
    4c22:	4649      	mov	r1, r9
    4c24:	0020      	movs	r0, r4
    4c26:	4698      	mov	r8, r3
    4c28:	f7ff f9f4 	bl	4014 <__aeabi_uidivmod>
    4c2c:	0c2c      	lsrs	r4, r5, #16
    4c2e:	0409      	lsls	r1, r1, #16
    4c30:	430c      	orrs	r4, r1
    4c32:	45a0      	cmp	r8, r4
    4c34:	d909      	bls.n	4c4a <__aeabi_ddiv+0x256>
    4c36:	19e4      	adds	r4, r4, r7
    4c38:	1e73      	subs	r3, r6, #1
    4c3a:	42a7      	cmp	r7, r4
    4c3c:	d900      	bls.n	4c40 <__aeabi_ddiv+0x24c>
    4c3e:	e15c      	b.n	4efa <__aeabi_ddiv+0x506>
    4c40:	45a0      	cmp	r8, r4
    4c42:	d800      	bhi.n	4c46 <__aeabi_ddiv+0x252>
    4c44:	e159      	b.n	4efa <__aeabi_ddiv+0x506>
    4c46:	3e02      	subs	r6, #2
    4c48:	19e4      	adds	r4, r4, r7
    4c4a:	4643      	mov	r3, r8
    4c4c:	1ae4      	subs	r4, r4, r3
    4c4e:	4649      	mov	r1, r9
    4c50:	0020      	movs	r0, r4
    4c52:	f7ff f959 	bl	3f08 <__aeabi_uidiv>
    4c56:	0003      	movs	r3, r0
    4c58:	9a00      	ldr	r2, [sp, #0]
    4c5a:	4680      	mov	r8, r0
    4c5c:	4353      	muls	r3, r2
    4c5e:	4649      	mov	r1, r9
    4c60:	0020      	movs	r0, r4
    4c62:	469b      	mov	fp, r3
    4c64:	f7ff f9d6 	bl	4014 <__aeabi_uidivmod>
    4c68:	042a      	lsls	r2, r5, #16
    4c6a:	0409      	lsls	r1, r1, #16
    4c6c:	0c12      	lsrs	r2, r2, #16
    4c6e:	430a      	orrs	r2, r1
    4c70:	4593      	cmp	fp, r2
    4c72:	d90d      	bls.n	4c90 <__aeabi_ddiv+0x29c>
    4c74:	4643      	mov	r3, r8
    4c76:	19d2      	adds	r2, r2, r7
    4c78:	3b01      	subs	r3, #1
    4c7a:	4297      	cmp	r7, r2
    4c7c:	d900      	bls.n	4c80 <__aeabi_ddiv+0x28c>
    4c7e:	e13a      	b.n	4ef6 <__aeabi_ddiv+0x502>
    4c80:	4593      	cmp	fp, r2
    4c82:	d800      	bhi.n	4c86 <__aeabi_ddiv+0x292>
    4c84:	e137      	b.n	4ef6 <__aeabi_ddiv+0x502>
    4c86:	2302      	movs	r3, #2
    4c88:	425b      	negs	r3, r3
    4c8a:	469c      	mov	ip, r3
    4c8c:	19d2      	adds	r2, r2, r7
    4c8e:	44e0      	add	r8, ip
    4c90:	465b      	mov	r3, fp
    4c92:	1ad2      	subs	r2, r2, r3
    4c94:	4643      	mov	r3, r8
    4c96:	0436      	lsls	r6, r6, #16
    4c98:	4333      	orrs	r3, r6
    4c9a:	469b      	mov	fp, r3
    4c9c:	9903      	ldr	r1, [sp, #12]
    4c9e:	0c18      	lsrs	r0, r3, #16
    4ca0:	0c0b      	lsrs	r3, r1, #16
    4ca2:	001d      	movs	r5, r3
    4ca4:	9305      	str	r3, [sp, #20]
    4ca6:	0409      	lsls	r1, r1, #16
    4ca8:	465b      	mov	r3, fp
    4caa:	0c09      	lsrs	r1, r1, #16
    4cac:	000c      	movs	r4, r1
    4cae:	041b      	lsls	r3, r3, #16
    4cb0:	0c1b      	lsrs	r3, r3, #16
    4cb2:	4344      	muls	r4, r0
    4cb4:	9104      	str	r1, [sp, #16]
    4cb6:	4359      	muls	r1, r3
    4cb8:	436b      	muls	r3, r5
    4cba:	4368      	muls	r0, r5
    4cbc:	191b      	adds	r3, r3, r4
    4cbe:	0c0d      	lsrs	r5, r1, #16
    4cc0:	18eb      	adds	r3, r5, r3
    4cc2:	429c      	cmp	r4, r3
    4cc4:	d903      	bls.n	4cce <__aeabi_ddiv+0x2da>
    4cc6:	2480      	movs	r4, #128	; 0x80
    4cc8:	0264      	lsls	r4, r4, #9
    4cca:	46a4      	mov	ip, r4
    4ccc:	4460      	add	r0, ip
    4cce:	0c1c      	lsrs	r4, r3, #16
    4cd0:	0409      	lsls	r1, r1, #16
    4cd2:	041b      	lsls	r3, r3, #16
    4cd4:	0c09      	lsrs	r1, r1, #16
    4cd6:	1820      	adds	r0, r4, r0
    4cd8:	185d      	adds	r5, r3, r1
    4cda:	4282      	cmp	r2, r0
    4cdc:	d200      	bcs.n	4ce0 <__aeabi_ddiv+0x2ec>
    4cde:	e0de      	b.n	4e9e <__aeabi_ddiv+0x4aa>
    4ce0:	d100      	bne.n	4ce4 <__aeabi_ddiv+0x2f0>
    4ce2:	e0d7      	b.n	4e94 <__aeabi_ddiv+0x4a0>
    4ce4:	1a16      	subs	r6, r2, r0
    4ce6:	9b02      	ldr	r3, [sp, #8]
    4ce8:	469c      	mov	ip, r3
    4cea:	1b5d      	subs	r5, r3, r5
    4cec:	45ac      	cmp	ip, r5
    4cee:	419b      	sbcs	r3, r3
    4cf0:	425b      	negs	r3, r3
    4cf2:	1af6      	subs	r6, r6, r3
    4cf4:	42b7      	cmp	r7, r6
    4cf6:	d100      	bne.n	4cfa <__aeabi_ddiv+0x306>
    4cf8:	e106      	b.n	4f08 <__aeabi_ddiv+0x514>
    4cfa:	4649      	mov	r1, r9
    4cfc:	0030      	movs	r0, r6
    4cfe:	f7ff f903 	bl	3f08 <__aeabi_uidiv>
    4d02:	9b00      	ldr	r3, [sp, #0]
    4d04:	0004      	movs	r4, r0
    4d06:	4343      	muls	r3, r0
    4d08:	4649      	mov	r1, r9
    4d0a:	0030      	movs	r0, r6
    4d0c:	4698      	mov	r8, r3
    4d0e:	f7ff f981 	bl	4014 <__aeabi_uidivmod>
    4d12:	0c2e      	lsrs	r6, r5, #16
    4d14:	0409      	lsls	r1, r1, #16
    4d16:	430e      	orrs	r6, r1
    4d18:	45b0      	cmp	r8, r6
    4d1a:	d909      	bls.n	4d30 <__aeabi_ddiv+0x33c>
    4d1c:	19f6      	adds	r6, r6, r7
    4d1e:	1e63      	subs	r3, r4, #1
    4d20:	42b7      	cmp	r7, r6
    4d22:	d900      	bls.n	4d26 <__aeabi_ddiv+0x332>
    4d24:	e0f3      	b.n	4f0e <__aeabi_ddiv+0x51a>
    4d26:	45b0      	cmp	r8, r6
    4d28:	d800      	bhi.n	4d2c <__aeabi_ddiv+0x338>
    4d2a:	e0f0      	b.n	4f0e <__aeabi_ddiv+0x51a>
    4d2c:	3c02      	subs	r4, #2
    4d2e:	19f6      	adds	r6, r6, r7
    4d30:	4643      	mov	r3, r8
    4d32:	1af3      	subs	r3, r6, r3
    4d34:	4649      	mov	r1, r9
    4d36:	0018      	movs	r0, r3
    4d38:	9302      	str	r3, [sp, #8]
    4d3a:	f7ff f8e5 	bl	3f08 <__aeabi_uidiv>
    4d3e:	9b00      	ldr	r3, [sp, #0]
    4d40:	0006      	movs	r6, r0
    4d42:	4343      	muls	r3, r0
    4d44:	4649      	mov	r1, r9
    4d46:	9802      	ldr	r0, [sp, #8]
    4d48:	4698      	mov	r8, r3
    4d4a:	f7ff f963 	bl	4014 <__aeabi_uidivmod>
    4d4e:	042d      	lsls	r5, r5, #16
    4d50:	0409      	lsls	r1, r1, #16
    4d52:	0c2d      	lsrs	r5, r5, #16
    4d54:	430d      	orrs	r5, r1
    4d56:	45a8      	cmp	r8, r5
    4d58:	d909      	bls.n	4d6e <__aeabi_ddiv+0x37a>
    4d5a:	19ed      	adds	r5, r5, r7
    4d5c:	1e73      	subs	r3, r6, #1
    4d5e:	42af      	cmp	r7, r5
    4d60:	d900      	bls.n	4d64 <__aeabi_ddiv+0x370>
    4d62:	e0d6      	b.n	4f12 <__aeabi_ddiv+0x51e>
    4d64:	45a8      	cmp	r8, r5
    4d66:	d800      	bhi.n	4d6a <__aeabi_ddiv+0x376>
    4d68:	e0d3      	b.n	4f12 <__aeabi_ddiv+0x51e>
    4d6a:	3e02      	subs	r6, #2
    4d6c:	19ed      	adds	r5, r5, r7
    4d6e:	0424      	lsls	r4, r4, #16
    4d70:	0021      	movs	r1, r4
    4d72:	4643      	mov	r3, r8
    4d74:	4331      	orrs	r1, r6
    4d76:	9e04      	ldr	r6, [sp, #16]
    4d78:	9a05      	ldr	r2, [sp, #20]
    4d7a:	0030      	movs	r0, r6
    4d7c:	1aed      	subs	r5, r5, r3
    4d7e:	040b      	lsls	r3, r1, #16
    4d80:	0c0c      	lsrs	r4, r1, #16
    4d82:	0c1b      	lsrs	r3, r3, #16
    4d84:	4358      	muls	r0, r3
    4d86:	4366      	muls	r6, r4
    4d88:	4353      	muls	r3, r2
    4d8a:	4354      	muls	r4, r2
    4d8c:	199a      	adds	r2, r3, r6
    4d8e:	0c03      	lsrs	r3, r0, #16
    4d90:	189b      	adds	r3, r3, r2
    4d92:	429e      	cmp	r6, r3
    4d94:	d903      	bls.n	4d9e <__aeabi_ddiv+0x3aa>
    4d96:	2280      	movs	r2, #128	; 0x80
    4d98:	0252      	lsls	r2, r2, #9
    4d9a:	4694      	mov	ip, r2
    4d9c:	4464      	add	r4, ip
    4d9e:	0c1a      	lsrs	r2, r3, #16
    4da0:	0400      	lsls	r0, r0, #16
    4da2:	041b      	lsls	r3, r3, #16
    4da4:	0c00      	lsrs	r0, r0, #16
    4da6:	1914      	adds	r4, r2, r4
    4da8:	181b      	adds	r3, r3, r0
    4daa:	42a5      	cmp	r5, r4
    4dac:	d350      	bcc.n	4e50 <__aeabi_ddiv+0x45c>
    4dae:	d04d      	beq.n	4e4c <__aeabi_ddiv+0x458>
    4db0:	2301      	movs	r3, #1
    4db2:	4319      	orrs	r1, r3
    4db4:	4a96      	ldr	r2, [pc, #600]	; (5010 <__aeabi_ddiv+0x61c>)
    4db6:	9b01      	ldr	r3, [sp, #4]
    4db8:	4694      	mov	ip, r2
    4dba:	4463      	add	r3, ip
    4dbc:	2b00      	cmp	r3, #0
    4dbe:	dc00      	bgt.n	4dc2 <__aeabi_ddiv+0x3ce>
    4dc0:	e6f3      	b.n	4baa <__aeabi_ddiv+0x1b6>
    4dc2:	074a      	lsls	r2, r1, #29
    4dc4:	d009      	beq.n	4dda <__aeabi_ddiv+0x3e6>
    4dc6:	220f      	movs	r2, #15
    4dc8:	400a      	ands	r2, r1
    4dca:	2a04      	cmp	r2, #4
    4dcc:	d005      	beq.n	4dda <__aeabi_ddiv+0x3e6>
    4dce:	1d0a      	adds	r2, r1, #4
    4dd0:	428a      	cmp	r2, r1
    4dd2:	4189      	sbcs	r1, r1
    4dd4:	4249      	negs	r1, r1
    4dd6:	448b      	add	fp, r1
    4dd8:	0011      	movs	r1, r2
    4dda:	465a      	mov	r2, fp
    4ddc:	01d2      	lsls	r2, r2, #7
    4dde:	d508      	bpl.n	4df2 <__aeabi_ddiv+0x3fe>
    4de0:	465a      	mov	r2, fp
    4de2:	4b8c      	ldr	r3, [pc, #560]	; (5014 <__aeabi_ddiv+0x620>)
    4de4:	401a      	ands	r2, r3
    4de6:	4693      	mov	fp, r2
    4de8:	2280      	movs	r2, #128	; 0x80
    4dea:	00d2      	lsls	r2, r2, #3
    4dec:	4694      	mov	ip, r2
    4dee:	9b01      	ldr	r3, [sp, #4]
    4df0:	4463      	add	r3, ip
    4df2:	4a89      	ldr	r2, [pc, #548]	; (5018 <__aeabi_ddiv+0x624>)
    4df4:	4293      	cmp	r3, r2
    4df6:	dd00      	ble.n	4dfa <__aeabi_ddiv+0x406>
    4df8:	e65b      	b.n	4ab2 <__aeabi_ddiv+0xbe>
    4dfa:	465a      	mov	r2, fp
    4dfc:	08c9      	lsrs	r1, r1, #3
    4dfe:	0750      	lsls	r0, r2, #29
    4e00:	4308      	orrs	r0, r1
    4e02:	0256      	lsls	r6, r2, #9
    4e04:	4651      	mov	r1, sl
    4e06:	2201      	movs	r2, #1
    4e08:	055b      	lsls	r3, r3, #21
    4e0a:	4681      	mov	r9, r0
    4e0c:	0b36      	lsrs	r6, r6, #12
    4e0e:	0d5b      	lsrs	r3, r3, #21
    4e10:	400a      	ands	r2, r1
    4e12:	e655      	b.n	4ac0 <__aeabi_ddiv+0xcc>
    4e14:	2380      	movs	r3, #128	; 0x80
    4e16:	031b      	lsls	r3, r3, #12
    4e18:	421e      	tst	r6, r3
    4e1a:	d011      	beq.n	4e40 <__aeabi_ddiv+0x44c>
    4e1c:	465a      	mov	r2, fp
    4e1e:	421a      	tst	r2, r3
    4e20:	d10e      	bne.n	4e40 <__aeabi_ddiv+0x44c>
    4e22:	465e      	mov	r6, fp
    4e24:	431e      	orrs	r6, r3
    4e26:	0336      	lsls	r6, r6, #12
    4e28:	0b36      	lsrs	r6, r6, #12
    4e2a:	002a      	movs	r2, r5
    4e2c:	4689      	mov	r9, r1
    4e2e:	4b7b      	ldr	r3, [pc, #492]	; (501c <__aeabi_ddiv+0x628>)
    4e30:	e646      	b.n	4ac0 <__aeabi_ddiv+0xcc>
    4e32:	2b03      	cmp	r3, #3
    4e34:	d100      	bne.n	4e38 <__aeabi_ddiv+0x444>
    4e36:	e0e1      	b.n	4ffc <__aeabi_ddiv+0x608>
    4e38:	2b01      	cmp	r3, #1
    4e3a:	d1bb      	bne.n	4db4 <__aeabi_ddiv+0x3c0>
    4e3c:	401a      	ands	r2, r3
    4e3e:	e6bb      	b.n	4bb8 <__aeabi_ddiv+0x1c4>
    4e40:	431e      	orrs	r6, r3
    4e42:	0336      	lsls	r6, r6, #12
    4e44:	0b36      	lsrs	r6, r6, #12
    4e46:	4642      	mov	r2, r8
    4e48:	4b74      	ldr	r3, [pc, #464]	; (501c <__aeabi_ddiv+0x628>)
    4e4a:	e639      	b.n	4ac0 <__aeabi_ddiv+0xcc>
    4e4c:	2b00      	cmp	r3, #0
    4e4e:	d0b1      	beq.n	4db4 <__aeabi_ddiv+0x3c0>
    4e50:	197d      	adds	r5, r7, r5
    4e52:	1e4a      	subs	r2, r1, #1
    4e54:	42af      	cmp	r7, r5
    4e56:	d952      	bls.n	4efe <__aeabi_ddiv+0x50a>
    4e58:	0011      	movs	r1, r2
    4e5a:	42a5      	cmp	r5, r4
    4e5c:	d1a8      	bne.n	4db0 <__aeabi_ddiv+0x3bc>
    4e5e:	9a03      	ldr	r2, [sp, #12]
    4e60:	429a      	cmp	r2, r3
    4e62:	d1a5      	bne.n	4db0 <__aeabi_ddiv+0x3bc>
    4e64:	e7a6      	b.n	4db4 <__aeabi_ddiv+0x3c0>
    4e66:	0003      	movs	r3, r0
    4e68:	003e      	movs	r6, r7
    4e6a:	3b28      	subs	r3, #40	; 0x28
    4e6c:	409e      	lsls	r6, r3
    4e6e:	2300      	movs	r3, #0
    4e70:	4699      	mov	r9, r3
    4e72:	e654      	b.n	4b1e <__aeabi_ddiv+0x12a>
    4e74:	f001 f960 	bl	6138 <__clzsi2>
    4e78:	3020      	adds	r0, #32
    4e7a:	e641      	b.n	4b00 <__aeabi_ddiv+0x10c>
    4e7c:	0003      	movs	r3, r0
    4e7e:	4652      	mov	r2, sl
    4e80:	3b28      	subs	r3, #40	; 0x28
    4e82:	409a      	lsls	r2, r3
    4e84:	2100      	movs	r1, #0
    4e86:	4693      	mov	fp, r2
    4e88:	e677      	b.n	4b7a <__aeabi_ddiv+0x186>
    4e8a:	4650      	mov	r0, sl
    4e8c:	f001 f954 	bl	6138 <__clzsi2>
    4e90:	3020      	adds	r0, #32
    4e92:	e65e      	b.n	4b52 <__aeabi_ddiv+0x15e>
    4e94:	9b02      	ldr	r3, [sp, #8]
    4e96:	2600      	movs	r6, #0
    4e98:	42ab      	cmp	r3, r5
    4e9a:	d300      	bcc.n	4e9e <__aeabi_ddiv+0x4aa>
    4e9c:	e723      	b.n	4ce6 <__aeabi_ddiv+0x2f2>
    4e9e:	9e03      	ldr	r6, [sp, #12]
    4ea0:	9902      	ldr	r1, [sp, #8]
    4ea2:	46b4      	mov	ip, r6
    4ea4:	4461      	add	r1, ip
    4ea6:	4688      	mov	r8, r1
    4ea8:	45b0      	cmp	r8, r6
    4eaa:	41b6      	sbcs	r6, r6
    4eac:	465b      	mov	r3, fp
    4eae:	4276      	negs	r6, r6
    4eb0:	19f6      	adds	r6, r6, r7
    4eb2:	18b2      	adds	r2, r6, r2
    4eb4:	3b01      	subs	r3, #1
    4eb6:	9102      	str	r1, [sp, #8]
    4eb8:	4297      	cmp	r7, r2
    4eba:	d213      	bcs.n	4ee4 <__aeabi_ddiv+0x4f0>
    4ebc:	4290      	cmp	r0, r2
    4ebe:	d84f      	bhi.n	4f60 <__aeabi_ddiv+0x56c>
    4ec0:	d100      	bne.n	4ec4 <__aeabi_ddiv+0x4d0>
    4ec2:	e08e      	b.n	4fe2 <__aeabi_ddiv+0x5ee>
    4ec4:	1a16      	subs	r6, r2, r0
    4ec6:	469b      	mov	fp, r3
    4ec8:	e70d      	b.n	4ce6 <__aeabi_ddiv+0x2f2>
    4eca:	4589      	cmp	r9, r1
    4ecc:	d200      	bcs.n	4ed0 <__aeabi_ddiv+0x4dc>
    4ece:	e68e      	b.n	4bee <__aeabi_ddiv+0x1fa>
    4ed0:	0874      	lsrs	r4, r6, #1
    4ed2:	464b      	mov	r3, r9
    4ed4:	07f6      	lsls	r6, r6, #31
    4ed6:	0035      	movs	r5, r6
    4ed8:	085b      	lsrs	r3, r3, #1
    4eda:	431d      	orrs	r5, r3
    4edc:	464b      	mov	r3, r9
    4ede:	07db      	lsls	r3, r3, #31
    4ee0:	9302      	str	r3, [sp, #8]
    4ee2:	e68b      	b.n	4bfc <__aeabi_ddiv+0x208>
    4ee4:	4297      	cmp	r7, r2
    4ee6:	d1ed      	bne.n	4ec4 <__aeabi_ddiv+0x4d0>
    4ee8:	9903      	ldr	r1, [sp, #12]
    4eea:	9c02      	ldr	r4, [sp, #8]
    4eec:	42a1      	cmp	r1, r4
    4eee:	d9e5      	bls.n	4ebc <__aeabi_ddiv+0x4c8>
    4ef0:	1a3e      	subs	r6, r7, r0
    4ef2:	469b      	mov	fp, r3
    4ef4:	e6f7      	b.n	4ce6 <__aeabi_ddiv+0x2f2>
    4ef6:	4698      	mov	r8, r3
    4ef8:	e6ca      	b.n	4c90 <__aeabi_ddiv+0x29c>
    4efa:	001e      	movs	r6, r3
    4efc:	e6a5      	b.n	4c4a <__aeabi_ddiv+0x256>
    4efe:	42ac      	cmp	r4, r5
    4f00:	d83e      	bhi.n	4f80 <__aeabi_ddiv+0x58c>
    4f02:	d074      	beq.n	4fee <__aeabi_ddiv+0x5fa>
    4f04:	0011      	movs	r1, r2
    4f06:	e753      	b.n	4db0 <__aeabi_ddiv+0x3bc>
    4f08:	2101      	movs	r1, #1
    4f0a:	4249      	negs	r1, r1
    4f0c:	e752      	b.n	4db4 <__aeabi_ddiv+0x3c0>
    4f0e:	001c      	movs	r4, r3
    4f10:	e70e      	b.n	4d30 <__aeabi_ddiv+0x33c>
    4f12:	001e      	movs	r6, r3
    4f14:	e72b      	b.n	4d6e <__aeabi_ddiv+0x37a>
    4f16:	2d1f      	cmp	r5, #31
    4f18:	dc3c      	bgt.n	4f94 <__aeabi_ddiv+0x5a0>
    4f1a:	2320      	movs	r3, #32
    4f1c:	000a      	movs	r2, r1
    4f1e:	4658      	mov	r0, fp
    4f20:	1b5b      	subs	r3, r3, r5
    4f22:	4098      	lsls	r0, r3
    4f24:	40ea      	lsrs	r2, r5
    4f26:	4099      	lsls	r1, r3
    4f28:	4302      	orrs	r2, r0
    4f2a:	1e48      	subs	r0, r1, #1
    4f2c:	4181      	sbcs	r1, r0
    4f2e:	465e      	mov	r6, fp
    4f30:	4311      	orrs	r1, r2
    4f32:	40ee      	lsrs	r6, r5
    4f34:	074b      	lsls	r3, r1, #29
    4f36:	d009      	beq.n	4f4c <__aeabi_ddiv+0x558>
    4f38:	230f      	movs	r3, #15
    4f3a:	400b      	ands	r3, r1
    4f3c:	2b04      	cmp	r3, #4
    4f3e:	d005      	beq.n	4f4c <__aeabi_ddiv+0x558>
    4f40:	000b      	movs	r3, r1
    4f42:	1d19      	adds	r1, r3, #4
    4f44:	4299      	cmp	r1, r3
    4f46:	419b      	sbcs	r3, r3
    4f48:	425b      	negs	r3, r3
    4f4a:	18f6      	adds	r6, r6, r3
    4f4c:	0233      	lsls	r3, r6, #8
    4f4e:	d53c      	bpl.n	4fca <__aeabi_ddiv+0x5d6>
    4f50:	4653      	mov	r3, sl
    4f52:	2201      	movs	r2, #1
    4f54:	2100      	movs	r1, #0
    4f56:	401a      	ands	r2, r3
    4f58:	2600      	movs	r6, #0
    4f5a:	2301      	movs	r3, #1
    4f5c:	4689      	mov	r9, r1
    4f5e:	e5af      	b.n	4ac0 <__aeabi_ddiv+0xcc>
    4f60:	2302      	movs	r3, #2
    4f62:	425b      	negs	r3, r3
    4f64:	469c      	mov	ip, r3
    4f66:	9c03      	ldr	r4, [sp, #12]
    4f68:	44e3      	add	fp, ip
    4f6a:	46a4      	mov	ip, r4
    4f6c:	9b02      	ldr	r3, [sp, #8]
    4f6e:	4463      	add	r3, ip
    4f70:	4698      	mov	r8, r3
    4f72:	45a0      	cmp	r8, r4
    4f74:	41b6      	sbcs	r6, r6
    4f76:	4276      	negs	r6, r6
    4f78:	19f6      	adds	r6, r6, r7
    4f7a:	9302      	str	r3, [sp, #8]
    4f7c:	18b2      	adds	r2, r6, r2
    4f7e:	e6b1      	b.n	4ce4 <__aeabi_ddiv+0x2f0>
    4f80:	9803      	ldr	r0, [sp, #12]
    4f82:	1e8a      	subs	r2, r1, #2
    4f84:	0041      	lsls	r1, r0, #1
    4f86:	4281      	cmp	r1, r0
    4f88:	41b6      	sbcs	r6, r6
    4f8a:	4276      	negs	r6, r6
    4f8c:	19f6      	adds	r6, r6, r7
    4f8e:	19ad      	adds	r5, r5, r6
    4f90:	9103      	str	r1, [sp, #12]
    4f92:	e761      	b.n	4e58 <__aeabi_ddiv+0x464>
    4f94:	221f      	movs	r2, #31
    4f96:	4252      	negs	r2, r2
    4f98:	1ad3      	subs	r3, r2, r3
    4f9a:	465a      	mov	r2, fp
    4f9c:	40da      	lsrs	r2, r3
    4f9e:	0013      	movs	r3, r2
    4fa0:	2d20      	cmp	r5, #32
    4fa2:	d029      	beq.n	4ff8 <__aeabi_ddiv+0x604>
    4fa4:	2240      	movs	r2, #64	; 0x40
    4fa6:	4658      	mov	r0, fp
    4fa8:	1b55      	subs	r5, r2, r5
    4faa:	40a8      	lsls	r0, r5
    4fac:	4301      	orrs	r1, r0
    4fae:	1e48      	subs	r0, r1, #1
    4fb0:	4181      	sbcs	r1, r0
    4fb2:	2007      	movs	r0, #7
    4fb4:	430b      	orrs	r3, r1
    4fb6:	4018      	ands	r0, r3
    4fb8:	2600      	movs	r6, #0
    4fba:	2800      	cmp	r0, #0
    4fbc:	d009      	beq.n	4fd2 <__aeabi_ddiv+0x5de>
    4fbe:	220f      	movs	r2, #15
    4fc0:	2600      	movs	r6, #0
    4fc2:	401a      	ands	r2, r3
    4fc4:	0019      	movs	r1, r3
    4fc6:	2a04      	cmp	r2, #4
    4fc8:	d1bb      	bne.n	4f42 <__aeabi_ddiv+0x54e>
    4fca:	000b      	movs	r3, r1
    4fcc:	0770      	lsls	r0, r6, #29
    4fce:	0276      	lsls	r6, r6, #9
    4fd0:	0b36      	lsrs	r6, r6, #12
    4fd2:	08db      	lsrs	r3, r3, #3
    4fd4:	4303      	orrs	r3, r0
    4fd6:	4699      	mov	r9, r3
    4fd8:	2201      	movs	r2, #1
    4fda:	4653      	mov	r3, sl
    4fdc:	401a      	ands	r2, r3
    4fde:	2300      	movs	r3, #0
    4fe0:	e56e      	b.n	4ac0 <__aeabi_ddiv+0xcc>
    4fe2:	9902      	ldr	r1, [sp, #8]
    4fe4:	428d      	cmp	r5, r1
    4fe6:	d8bb      	bhi.n	4f60 <__aeabi_ddiv+0x56c>
    4fe8:	469b      	mov	fp, r3
    4fea:	2600      	movs	r6, #0
    4fec:	e67b      	b.n	4ce6 <__aeabi_ddiv+0x2f2>
    4fee:	9803      	ldr	r0, [sp, #12]
    4ff0:	4298      	cmp	r0, r3
    4ff2:	d3c5      	bcc.n	4f80 <__aeabi_ddiv+0x58c>
    4ff4:	0011      	movs	r1, r2
    4ff6:	e732      	b.n	4e5e <__aeabi_ddiv+0x46a>
    4ff8:	2000      	movs	r0, #0
    4ffa:	e7d7      	b.n	4fac <__aeabi_ddiv+0x5b8>
    4ffc:	2680      	movs	r6, #128	; 0x80
    4ffe:	465b      	mov	r3, fp
    5000:	0336      	lsls	r6, r6, #12
    5002:	431e      	orrs	r6, r3
    5004:	0336      	lsls	r6, r6, #12
    5006:	0b36      	lsrs	r6, r6, #12
    5008:	9a00      	ldr	r2, [sp, #0]
    500a:	4689      	mov	r9, r1
    500c:	4b03      	ldr	r3, [pc, #12]	; (501c <__aeabi_ddiv+0x628>)
    500e:	e557      	b.n	4ac0 <__aeabi_ddiv+0xcc>
    5010:	000003ff 	.word	0x000003ff
    5014:	feffffff 	.word	0xfeffffff
    5018:	000007fe 	.word	0x000007fe
    501c:	000007ff 	.word	0x000007ff

00005020 <__eqdf2>:
    5020:	b5f0      	push	{r4, r5, r6, r7, lr}
    5022:	465f      	mov	r7, fp
    5024:	4656      	mov	r6, sl
    5026:	464d      	mov	r5, r9
    5028:	4644      	mov	r4, r8
    502a:	b4f0      	push	{r4, r5, r6, r7}
    502c:	031f      	lsls	r7, r3, #12
    502e:	005c      	lsls	r4, r3, #1
    5030:	0fdb      	lsrs	r3, r3, #31
    5032:	469a      	mov	sl, r3
    5034:	4b19      	ldr	r3, [pc, #100]	; (509c <__eqdf2+0x7c>)
    5036:	030e      	lsls	r6, r1, #12
    5038:	004d      	lsls	r5, r1, #1
    503a:	0fc9      	lsrs	r1, r1, #31
    503c:	4680      	mov	r8, r0
    503e:	0b36      	lsrs	r6, r6, #12
    5040:	0d6d      	lsrs	r5, r5, #21
    5042:	468b      	mov	fp, r1
    5044:	4691      	mov	r9, r2
    5046:	0b3f      	lsrs	r7, r7, #12
    5048:	0d64      	lsrs	r4, r4, #21
    504a:	429d      	cmp	r5, r3
    504c:	d019      	beq.n	5082 <__eqdf2+0x62>
    504e:	4b13      	ldr	r3, [pc, #76]	; (509c <__eqdf2+0x7c>)
    5050:	429c      	cmp	r4, r3
    5052:	d01b      	beq.n	508c <__eqdf2+0x6c>
    5054:	2301      	movs	r3, #1
    5056:	42a5      	cmp	r5, r4
    5058:	d006      	beq.n	5068 <__eqdf2+0x48>
    505a:	0018      	movs	r0, r3
    505c:	bc3c      	pop	{r2, r3, r4, r5}
    505e:	4690      	mov	r8, r2
    5060:	4699      	mov	r9, r3
    5062:	46a2      	mov	sl, r4
    5064:	46ab      	mov	fp, r5
    5066:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5068:	42be      	cmp	r6, r7
    506a:	d1f6      	bne.n	505a <__eqdf2+0x3a>
    506c:	45c8      	cmp	r8, r9
    506e:	d1f4      	bne.n	505a <__eqdf2+0x3a>
    5070:	45d3      	cmp	fp, sl
    5072:	d010      	beq.n	5096 <__eqdf2+0x76>
    5074:	2d00      	cmp	r5, #0
    5076:	d1f0      	bne.n	505a <__eqdf2+0x3a>
    5078:	4330      	orrs	r0, r6
    507a:	0003      	movs	r3, r0
    507c:	1e5a      	subs	r2, r3, #1
    507e:	4193      	sbcs	r3, r2
    5080:	e7eb      	b.n	505a <__eqdf2+0x3a>
    5082:	0031      	movs	r1, r6
    5084:	2301      	movs	r3, #1
    5086:	4301      	orrs	r1, r0
    5088:	d1e7      	bne.n	505a <__eqdf2+0x3a>
    508a:	e7e0      	b.n	504e <__eqdf2+0x2e>
    508c:	433a      	orrs	r2, r7
    508e:	2301      	movs	r3, #1
    5090:	2a00      	cmp	r2, #0
    5092:	d1e2      	bne.n	505a <__eqdf2+0x3a>
    5094:	e7de      	b.n	5054 <__eqdf2+0x34>
    5096:	2300      	movs	r3, #0
    5098:	e7df      	b.n	505a <__eqdf2+0x3a>
    509a:	46c0      	nop			; (mov r8, r8)
    509c:	000007ff 	.word	0x000007ff

000050a0 <__gedf2>:
    50a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    50a2:	465f      	mov	r7, fp
    50a4:	4644      	mov	r4, r8
    50a6:	4656      	mov	r6, sl
    50a8:	464d      	mov	r5, r9
    50aa:	b4f0      	push	{r4, r5, r6, r7}
    50ac:	031f      	lsls	r7, r3, #12
    50ae:	0b3c      	lsrs	r4, r7, #12
    50b0:	4f2c      	ldr	r7, [pc, #176]	; (5164 <__gedf2+0xc4>)
    50b2:	030e      	lsls	r6, r1, #12
    50b4:	004d      	lsls	r5, r1, #1
    50b6:	46a3      	mov	fp, r4
    50b8:	005c      	lsls	r4, r3, #1
    50ba:	4684      	mov	ip, r0
    50bc:	0b36      	lsrs	r6, r6, #12
    50be:	0d6d      	lsrs	r5, r5, #21
    50c0:	0fc9      	lsrs	r1, r1, #31
    50c2:	4690      	mov	r8, r2
    50c4:	0d64      	lsrs	r4, r4, #21
    50c6:	0fdb      	lsrs	r3, r3, #31
    50c8:	42bd      	cmp	r5, r7
    50ca:	d02b      	beq.n	5124 <__gedf2+0x84>
    50cc:	4f25      	ldr	r7, [pc, #148]	; (5164 <__gedf2+0xc4>)
    50ce:	42bc      	cmp	r4, r7
    50d0:	d02e      	beq.n	5130 <__gedf2+0x90>
    50d2:	2d00      	cmp	r5, #0
    50d4:	d10e      	bne.n	50f4 <__gedf2+0x54>
    50d6:	4330      	orrs	r0, r6
    50d8:	0007      	movs	r7, r0
    50da:	4681      	mov	r9, r0
    50dc:	4278      	negs	r0, r7
    50de:	4178      	adcs	r0, r7
    50e0:	2c00      	cmp	r4, #0
    50e2:	d117      	bne.n	5114 <__gedf2+0x74>
    50e4:	465f      	mov	r7, fp
    50e6:	433a      	orrs	r2, r7
    50e8:	d114      	bne.n	5114 <__gedf2+0x74>
    50ea:	464b      	mov	r3, r9
    50ec:	2000      	movs	r0, #0
    50ee:	2b00      	cmp	r3, #0
    50f0:	d00a      	beq.n	5108 <__gedf2+0x68>
    50f2:	e006      	b.n	5102 <__gedf2+0x62>
    50f4:	2c00      	cmp	r4, #0
    50f6:	d102      	bne.n	50fe <__gedf2+0x5e>
    50f8:	4658      	mov	r0, fp
    50fa:	4302      	orrs	r2, r0
    50fc:	d001      	beq.n	5102 <__gedf2+0x62>
    50fe:	4299      	cmp	r1, r3
    5100:	d01a      	beq.n	5138 <__gedf2+0x98>
    5102:	2301      	movs	r3, #1
    5104:	4248      	negs	r0, r1
    5106:	4318      	orrs	r0, r3
    5108:	bc3c      	pop	{r2, r3, r4, r5}
    510a:	4690      	mov	r8, r2
    510c:	4699      	mov	r9, r3
    510e:	46a2      	mov	sl, r4
    5110:	46ab      	mov	fp, r5
    5112:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5114:	2800      	cmp	r0, #0
    5116:	d0f2      	beq.n	50fe <__gedf2+0x5e>
    5118:	4258      	negs	r0, r3
    511a:	4158      	adcs	r0, r3
    511c:	2201      	movs	r2, #1
    511e:	4240      	negs	r0, r0
    5120:	4310      	orrs	r0, r2
    5122:	e7f1      	b.n	5108 <__gedf2+0x68>
    5124:	0037      	movs	r7, r6
    5126:	4307      	orrs	r7, r0
    5128:	d0d0      	beq.n	50cc <__gedf2+0x2c>
    512a:	2002      	movs	r0, #2
    512c:	4240      	negs	r0, r0
    512e:	e7eb      	b.n	5108 <__gedf2+0x68>
    5130:	465f      	mov	r7, fp
    5132:	4317      	orrs	r7, r2
    5134:	d0cd      	beq.n	50d2 <__gedf2+0x32>
    5136:	e7f8      	b.n	512a <__gedf2+0x8a>
    5138:	42a5      	cmp	r5, r4
    513a:	dce2      	bgt.n	5102 <__gedf2+0x62>
    513c:	db05      	blt.n	514a <__gedf2+0xaa>
    513e:	455e      	cmp	r6, fp
    5140:	d8df      	bhi.n	5102 <__gedf2+0x62>
    5142:	d008      	beq.n	5156 <__gedf2+0xb6>
    5144:	2000      	movs	r0, #0
    5146:	455e      	cmp	r6, fp
    5148:	d2de      	bcs.n	5108 <__gedf2+0x68>
    514a:	4248      	negs	r0, r1
    514c:	4148      	adcs	r0, r1
    514e:	2301      	movs	r3, #1
    5150:	4240      	negs	r0, r0
    5152:	4318      	orrs	r0, r3
    5154:	e7d8      	b.n	5108 <__gedf2+0x68>
    5156:	45c4      	cmp	ip, r8
    5158:	d8d3      	bhi.n	5102 <__gedf2+0x62>
    515a:	2000      	movs	r0, #0
    515c:	45c4      	cmp	ip, r8
    515e:	d3f4      	bcc.n	514a <__gedf2+0xaa>
    5160:	e7d2      	b.n	5108 <__gedf2+0x68>
    5162:	46c0      	nop			; (mov r8, r8)
    5164:	000007ff 	.word	0x000007ff

00005168 <__ledf2>:
    5168:	b5f0      	push	{r4, r5, r6, r7, lr}
    516a:	465f      	mov	r7, fp
    516c:	464d      	mov	r5, r9
    516e:	4644      	mov	r4, r8
    5170:	4656      	mov	r6, sl
    5172:	b4f0      	push	{r4, r5, r6, r7}
    5174:	031c      	lsls	r4, r3, #12
    5176:	0b24      	lsrs	r4, r4, #12
    5178:	46a4      	mov	ip, r4
    517a:	4c2f      	ldr	r4, [pc, #188]	; (5238 <__ledf2+0xd0>)
    517c:	030f      	lsls	r7, r1, #12
    517e:	004d      	lsls	r5, r1, #1
    5180:	005e      	lsls	r6, r3, #1
    5182:	0fc9      	lsrs	r1, r1, #31
    5184:	4680      	mov	r8, r0
    5186:	0b3f      	lsrs	r7, r7, #12
    5188:	0d6d      	lsrs	r5, r5, #21
    518a:	468b      	mov	fp, r1
    518c:	4691      	mov	r9, r2
    518e:	0d76      	lsrs	r6, r6, #21
    5190:	0fdb      	lsrs	r3, r3, #31
    5192:	42a5      	cmp	r5, r4
    5194:	d020      	beq.n	51d8 <__ledf2+0x70>
    5196:	4c28      	ldr	r4, [pc, #160]	; (5238 <__ledf2+0xd0>)
    5198:	42a6      	cmp	r6, r4
    519a:	d022      	beq.n	51e2 <__ledf2+0x7a>
    519c:	2d00      	cmp	r5, #0
    519e:	d112      	bne.n	51c6 <__ledf2+0x5e>
    51a0:	4338      	orrs	r0, r7
    51a2:	4244      	negs	r4, r0
    51a4:	4144      	adcs	r4, r0
    51a6:	2e00      	cmp	r6, #0
    51a8:	d020      	beq.n	51ec <__ledf2+0x84>
    51aa:	2c00      	cmp	r4, #0
    51ac:	d00d      	beq.n	51ca <__ledf2+0x62>
    51ae:	425c      	negs	r4, r3
    51b0:	4163      	adcs	r3, r4
    51b2:	2401      	movs	r4, #1
    51b4:	425b      	negs	r3, r3
    51b6:	431c      	orrs	r4, r3
    51b8:	0020      	movs	r0, r4
    51ba:	bc3c      	pop	{r2, r3, r4, r5}
    51bc:	4690      	mov	r8, r2
    51be:	4699      	mov	r9, r3
    51c0:	46a2      	mov	sl, r4
    51c2:	46ab      	mov	fp, r5
    51c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51c6:	2e00      	cmp	r6, #0
    51c8:	d017      	beq.n	51fa <__ledf2+0x92>
    51ca:	455b      	cmp	r3, fp
    51cc:	d019      	beq.n	5202 <__ledf2+0x9a>
    51ce:	465b      	mov	r3, fp
    51d0:	425c      	negs	r4, r3
    51d2:	2301      	movs	r3, #1
    51d4:	431c      	orrs	r4, r3
    51d6:	e7ef      	b.n	51b8 <__ledf2+0x50>
    51d8:	0039      	movs	r1, r7
    51da:	2402      	movs	r4, #2
    51dc:	4301      	orrs	r1, r0
    51de:	d1eb      	bne.n	51b8 <__ledf2+0x50>
    51e0:	e7d9      	b.n	5196 <__ledf2+0x2e>
    51e2:	4661      	mov	r1, ip
    51e4:	2402      	movs	r4, #2
    51e6:	4311      	orrs	r1, r2
    51e8:	d1e6      	bne.n	51b8 <__ledf2+0x50>
    51ea:	e7d7      	b.n	519c <__ledf2+0x34>
    51ec:	4661      	mov	r1, ip
    51ee:	430a      	orrs	r2, r1
    51f0:	d1db      	bne.n	51aa <__ledf2+0x42>
    51f2:	2400      	movs	r4, #0
    51f4:	2800      	cmp	r0, #0
    51f6:	d0df      	beq.n	51b8 <__ledf2+0x50>
    51f8:	e7e9      	b.n	51ce <__ledf2+0x66>
    51fa:	4661      	mov	r1, ip
    51fc:	430a      	orrs	r2, r1
    51fe:	d1e4      	bne.n	51ca <__ledf2+0x62>
    5200:	e7e5      	b.n	51ce <__ledf2+0x66>
    5202:	42b5      	cmp	r5, r6
    5204:	dd03      	ble.n	520e <__ledf2+0xa6>
    5206:	2201      	movs	r2, #1
    5208:	425c      	negs	r4, r3
    520a:	4314      	orrs	r4, r2
    520c:	e7d4      	b.n	51b8 <__ledf2+0x50>
    520e:	42b5      	cmp	r5, r6
    5210:	dbcd      	blt.n	51ae <__ledf2+0x46>
    5212:	4567      	cmp	r7, ip
    5214:	d8db      	bhi.n	51ce <__ledf2+0x66>
    5216:	d009      	beq.n	522c <__ledf2+0xc4>
    5218:	2400      	movs	r4, #0
    521a:	4567      	cmp	r7, ip
    521c:	d2cc      	bcs.n	51b8 <__ledf2+0x50>
    521e:	4659      	mov	r1, fp
    5220:	424c      	negs	r4, r1
    5222:	4161      	adcs	r1, r4
    5224:	2401      	movs	r4, #1
    5226:	4249      	negs	r1, r1
    5228:	430c      	orrs	r4, r1
    522a:	e7c5      	b.n	51b8 <__ledf2+0x50>
    522c:	45c8      	cmp	r8, r9
    522e:	d8ce      	bhi.n	51ce <__ledf2+0x66>
    5230:	2400      	movs	r4, #0
    5232:	45c8      	cmp	r8, r9
    5234:	d3f3      	bcc.n	521e <__ledf2+0xb6>
    5236:	e7bf      	b.n	51b8 <__ledf2+0x50>
    5238:	000007ff 	.word	0x000007ff

0000523c <__aeabi_dmul>:
    523c:	b5f0      	push	{r4, r5, r6, r7, lr}
    523e:	465f      	mov	r7, fp
    5240:	4656      	mov	r6, sl
    5242:	464d      	mov	r5, r9
    5244:	4644      	mov	r4, r8
    5246:	b4f0      	push	{r4, r5, r6, r7}
    5248:	030d      	lsls	r5, r1, #12
    524a:	4699      	mov	r9, r3
    524c:	004e      	lsls	r6, r1, #1
    524e:	0b2b      	lsrs	r3, r5, #12
    5250:	b087      	sub	sp, #28
    5252:	0007      	movs	r7, r0
    5254:	4692      	mov	sl, r2
    5256:	4680      	mov	r8, r0
    5258:	469b      	mov	fp, r3
    525a:	0d76      	lsrs	r6, r6, #21
    525c:	0fcc      	lsrs	r4, r1, #31
    525e:	2e00      	cmp	r6, #0
    5260:	d069      	beq.n	5336 <__aeabi_dmul+0xfa>
    5262:	4b6d      	ldr	r3, [pc, #436]	; (5418 <__aeabi_dmul+0x1dc>)
    5264:	429e      	cmp	r6, r3
    5266:	d035      	beq.n	52d4 <__aeabi_dmul+0x98>
    5268:	465b      	mov	r3, fp
    526a:	2280      	movs	r2, #128	; 0x80
    526c:	00dd      	lsls	r5, r3, #3
    526e:	0412      	lsls	r2, r2, #16
    5270:	0f43      	lsrs	r3, r0, #29
    5272:	4313      	orrs	r3, r2
    5274:	432b      	orrs	r3, r5
    5276:	469b      	mov	fp, r3
    5278:	00c3      	lsls	r3, r0, #3
    527a:	4698      	mov	r8, r3
    527c:	4b67      	ldr	r3, [pc, #412]	; (541c <__aeabi_dmul+0x1e0>)
    527e:	2700      	movs	r7, #0
    5280:	469c      	mov	ip, r3
    5282:	2300      	movs	r3, #0
    5284:	4466      	add	r6, ip
    5286:	9301      	str	r3, [sp, #4]
    5288:	464a      	mov	r2, r9
    528a:	0315      	lsls	r5, r2, #12
    528c:	0050      	lsls	r0, r2, #1
    528e:	0fd2      	lsrs	r2, r2, #31
    5290:	4653      	mov	r3, sl
    5292:	0b2d      	lsrs	r5, r5, #12
    5294:	0d40      	lsrs	r0, r0, #21
    5296:	4691      	mov	r9, r2
    5298:	d100      	bne.n	529c <__aeabi_dmul+0x60>
    529a:	e076      	b.n	538a <__aeabi_dmul+0x14e>
    529c:	4a5e      	ldr	r2, [pc, #376]	; (5418 <__aeabi_dmul+0x1dc>)
    529e:	4290      	cmp	r0, r2
    52a0:	d06c      	beq.n	537c <__aeabi_dmul+0x140>
    52a2:	2280      	movs	r2, #128	; 0x80
    52a4:	0f5b      	lsrs	r3, r3, #29
    52a6:	0412      	lsls	r2, r2, #16
    52a8:	4313      	orrs	r3, r2
    52aa:	4a5c      	ldr	r2, [pc, #368]	; (541c <__aeabi_dmul+0x1e0>)
    52ac:	00ed      	lsls	r5, r5, #3
    52ae:	4694      	mov	ip, r2
    52b0:	431d      	orrs	r5, r3
    52b2:	4653      	mov	r3, sl
    52b4:	2200      	movs	r2, #0
    52b6:	00db      	lsls	r3, r3, #3
    52b8:	4460      	add	r0, ip
    52ba:	4649      	mov	r1, r9
    52bc:	1836      	adds	r6, r6, r0
    52be:	1c70      	adds	r0, r6, #1
    52c0:	4061      	eors	r1, r4
    52c2:	9002      	str	r0, [sp, #8]
    52c4:	4317      	orrs	r7, r2
    52c6:	2f0f      	cmp	r7, #15
    52c8:	d900      	bls.n	52cc <__aeabi_dmul+0x90>
    52ca:	e0af      	b.n	542c <__aeabi_dmul+0x1f0>
    52cc:	4854      	ldr	r0, [pc, #336]	; (5420 <__aeabi_dmul+0x1e4>)
    52ce:	00bf      	lsls	r7, r7, #2
    52d0:	59c7      	ldr	r7, [r0, r7]
    52d2:	46bf      	mov	pc, r7
    52d4:	465b      	mov	r3, fp
    52d6:	431f      	orrs	r7, r3
    52d8:	d000      	beq.n	52dc <__aeabi_dmul+0xa0>
    52da:	e088      	b.n	53ee <__aeabi_dmul+0x1b2>
    52dc:	2300      	movs	r3, #0
    52de:	469b      	mov	fp, r3
    52e0:	4698      	mov	r8, r3
    52e2:	3302      	adds	r3, #2
    52e4:	2708      	movs	r7, #8
    52e6:	9301      	str	r3, [sp, #4]
    52e8:	e7ce      	b.n	5288 <__aeabi_dmul+0x4c>
    52ea:	4649      	mov	r1, r9
    52ec:	2a02      	cmp	r2, #2
    52ee:	d06a      	beq.n	53c6 <__aeabi_dmul+0x18a>
    52f0:	2a03      	cmp	r2, #3
    52f2:	d100      	bne.n	52f6 <__aeabi_dmul+0xba>
    52f4:	e209      	b.n	570a <__aeabi_dmul+0x4ce>
    52f6:	2a01      	cmp	r2, #1
    52f8:	d000      	beq.n	52fc <__aeabi_dmul+0xc0>
    52fa:	e1bb      	b.n	5674 <__aeabi_dmul+0x438>
    52fc:	4011      	ands	r1, r2
    52fe:	2200      	movs	r2, #0
    5300:	2300      	movs	r3, #0
    5302:	2500      	movs	r5, #0
    5304:	4690      	mov	r8, r2
    5306:	b2cc      	uxtb	r4, r1
    5308:	2100      	movs	r1, #0
    530a:	032d      	lsls	r5, r5, #12
    530c:	0d0a      	lsrs	r2, r1, #20
    530e:	0512      	lsls	r2, r2, #20
    5310:	0b2d      	lsrs	r5, r5, #12
    5312:	4315      	orrs	r5, r2
    5314:	4a43      	ldr	r2, [pc, #268]	; (5424 <__aeabi_dmul+0x1e8>)
    5316:	051b      	lsls	r3, r3, #20
    5318:	4015      	ands	r5, r2
    531a:	431d      	orrs	r5, r3
    531c:	006d      	lsls	r5, r5, #1
    531e:	07e4      	lsls	r4, r4, #31
    5320:	086d      	lsrs	r5, r5, #1
    5322:	4325      	orrs	r5, r4
    5324:	4640      	mov	r0, r8
    5326:	0029      	movs	r1, r5
    5328:	b007      	add	sp, #28
    532a:	bc3c      	pop	{r2, r3, r4, r5}
    532c:	4690      	mov	r8, r2
    532e:	4699      	mov	r9, r3
    5330:	46a2      	mov	sl, r4
    5332:	46ab      	mov	fp, r5
    5334:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5336:	4303      	orrs	r3, r0
    5338:	d052      	beq.n	53e0 <__aeabi_dmul+0x1a4>
    533a:	465b      	mov	r3, fp
    533c:	2b00      	cmp	r3, #0
    533e:	d100      	bne.n	5342 <__aeabi_dmul+0x106>
    5340:	e18a      	b.n	5658 <__aeabi_dmul+0x41c>
    5342:	4658      	mov	r0, fp
    5344:	f000 fef8 	bl	6138 <__clzsi2>
    5348:	0003      	movs	r3, r0
    534a:	3b0b      	subs	r3, #11
    534c:	2b1c      	cmp	r3, #28
    534e:	dd00      	ble.n	5352 <__aeabi_dmul+0x116>
    5350:	e17b      	b.n	564a <__aeabi_dmul+0x40e>
    5352:	221d      	movs	r2, #29
    5354:	1ad3      	subs	r3, r2, r3
    5356:	003a      	movs	r2, r7
    5358:	0001      	movs	r1, r0
    535a:	465d      	mov	r5, fp
    535c:	40da      	lsrs	r2, r3
    535e:	3908      	subs	r1, #8
    5360:	408d      	lsls	r5, r1
    5362:	0013      	movs	r3, r2
    5364:	408f      	lsls	r7, r1
    5366:	432b      	orrs	r3, r5
    5368:	469b      	mov	fp, r3
    536a:	46b8      	mov	r8, r7
    536c:	4b2e      	ldr	r3, [pc, #184]	; (5428 <__aeabi_dmul+0x1ec>)
    536e:	2700      	movs	r7, #0
    5370:	469c      	mov	ip, r3
    5372:	2300      	movs	r3, #0
    5374:	4460      	add	r0, ip
    5376:	4246      	negs	r6, r0
    5378:	9301      	str	r3, [sp, #4]
    537a:	e785      	b.n	5288 <__aeabi_dmul+0x4c>
    537c:	4652      	mov	r2, sl
    537e:	432a      	orrs	r2, r5
    5380:	d12c      	bne.n	53dc <__aeabi_dmul+0x1a0>
    5382:	2500      	movs	r5, #0
    5384:	2300      	movs	r3, #0
    5386:	2202      	movs	r2, #2
    5388:	e797      	b.n	52ba <__aeabi_dmul+0x7e>
    538a:	4652      	mov	r2, sl
    538c:	432a      	orrs	r2, r5
    538e:	d021      	beq.n	53d4 <__aeabi_dmul+0x198>
    5390:	2d00      	cmp	r5, #0
    5392:	d100      	bne.n	5396 <__aeabi_dmul+0x15a>
    5394:	e154      	b.n	5640 <__aeabi_dmul+0x404>
    5396:	0028      	movs	r0, r5
    5398:	f000 fece 	bl	6138 <__clzsi2>
    539c:	0003      	movs	r3, r0
    539e:	3b0b      	subs	r3, #11
    53a0:	2b1c      	cmp	r3, #28
    53a2:	dd00      	ble.n	53a6 <__aeabi_dmul+0x16a>
    53a4:	e146      	b.n	5634 <__aeabi_dmul+0x3f8>
    53a6:	211d      	movs	r1, #29
    53a8:	1acb      	subs	r3, r1, r3
    53aa:	4651      	mov	r1, sl
    53ac:	0002      	movs	r2, r0
    53ae:	40d9      	lsrs	r1, r3
    53b0:	4653      	mov	r3, sl
    53b2:	3a08      	subs	r2, #8
    53b4:	4095      	lsls	r5, r2
    53b6:	4093      	lsls	r3, r2
    53b8:	430d      	orrs	r5, r1
    53ba:	4a1b      	ldr	r2, [pc, #108]	; (5428 <__aeabi_dmul+0x1ec>)
    53bc:	4694      	mov	ip, r2
    53be:	4460      	add	r0, ip
    53c0:	4240      	negs	r0, r0
    53c2:	2200      	movs	r2, #0
    53c4:	e779      	b.n	52ba <__aeabi_dmul+0x7e>
    53c6:	2401      	movs	r4, #1
    53c8:	2200      	movs	r2, #0
    53ca:	400c      	ands	r4, r1
    53cc:	4b12      	ldr	r3, [pc, #72]	; (5418 <__aeabi_dmul+0x1dc>)
    53ce:	2500      	movs	r5, #0
    53d0:	4690      	mov	r8, r2
    53d2:	e799      	b.n	5308 <__aeabi_dmul+0xcc>
    53d4:	2500      	movs	r5, #0
    53d6:	2300      	movs	r3, #0
    53d8:	2201      	movs	r2, #1
    53da:	e76e      	b.n	52ba <__aeabi_dmul+0x7e>
    53dc:	2203      	movs	r2, #3
    53de:	e76c      	b.n	52ba <__aeabi_dmul+0x7e>
    53e0:	2300      	movs	r3, #0
    53e2:	469b      	mov	fp, r3
    53e4:	4698      	mov	r8, r3
    53e6:	3301      	adds	r3, #1
    53e8:	2704      	movs	r7, #4
    53ea:	9301      	str	r3, [sp, #4]
    53ec:	e74c      	b.n	5288 <__aeabi_dmul+0x4c>
    53ee:	2303      	movs	r3, #3
    53f0:	270c      	movs	r7, #12
    53f2:	9301      	str	r3, [sp, #4]
    53f4:	e748      	b.n	5288 <__aeabi_dmul+0x4c>
    53f6:	2300      	movs	r3, #0
    53f8:	2580      	movs	r5, #128	; 0x80
    53fa:	4698      	mov	r8, r3
    53fc:	2400      	movs	r4, #0
    53fe:	032d      	lsls	r5, r5, #12
    5400:	4b05      	ldr	r3, [pc, #20]	; (5418 <__aeabi_dmul+0x1dc>)
    5402:	e781      	b.n	5308 <__aeabi_dmul+0xcc>
    5404:	465d      	mov	r5, fp
    5406:	4643      	mov	r3, r8
    5408:	9a01      	ldr	r2, [sp, #4]
    540a:	e76f      	b.n	52ec <__aeabi_dmul+0xb0>
    540c:	465d      	mov	r5, fp
    540e:	4643      	mov	r3, r8
    5410:	0021      	movs	r1, r4
    5412:	9a01      	ldr	r2, [sp, #4]
    5414:	e76a      	b.n	52ec <__aeabi_dmul+0xb0>
    5416:	46c0      	nop			; (mov r8, r8)
    5418:	000007ff 	.word	0x000007ff
    541c:	fffffc01 	.word	0xfffffc01
    5420:	000063b0 	.word	0x000063b0
    5424:	800fffff 	.word	0x800fffff
    5428:	000003f3 	.word	0x000003f3
    542c:	4642      	mov	r2, r8
    542e:	0c12      	lsrs	r2, r2, #16
    5430:	4691      	mov	r9, r2
    5432:	0c1a      	lsrs	r2, r3, #16
    5434:	4694      	mov	ip, r2
    5436:	4642      	mov	r2, r8
    5438:	0417      	lsls	r7, r2, #16
    543a:	464a      	mov	r2, r9
    543c:	041b      	lsls	r3, r3, #16
    543e:	0c1b      	lsrs	r3, r3, #16
    5440:	435a      	muls	r2, r3
    5442:	4660      	mov	r0, ip
    5444:	4690      	mov	r8, r2
    5446:	464a      	mov	r2, r9
    5448:	4342      	muls	r2, r0
    544a:	0010      	movs	r0, r2
    544c:	9203      	str	r2, [sp, #12]
    544e:	4662      	mov	r2, ip
    5450:	001c      	movs	r4, r3
    5452:	0c3f      	lsrs	r7, r7, #16
    5454:	437a      	muls	r2, r7
    5456:	437c      	muls	r4, r7
    5458:	4442      	add	r2, r8
    545a:	9201      	str	r2, [sp, #4]
    545c:	0c22      	lsrs	r2, r4, #16
    545e:	4692      	mov	sl, r2
    5460:	9a01      	ldr	r2, [sp, #4]
    5462:	4452      	add	r2, sl
    5464:	4590      	cmp	r8, r2
    5466:	d906      	bls.n	5476 <__aeabi_dmul+0x23a>
    5468:	4682      	mov	sl, r0
    546a:	2080      	movs	r0, #128	; 0x80
    546c:	0240      	lsls	r0, r0, #9
    546e:	4680      	mov	r8, r0
    5470:	44c2      	add	sl, r8
    5472:	4650      	mov	r0, sl
    5474:	9003      	str	r0, [sp, #12]
    5476:	0c10      	lsrs	r0, r2, #16
    5478:	9004      	str	r0, [sp, #16]
    547a:	4648      	mov	r0, r9
    547c:	0424      	lsls	r4, r4, #16
    547e:	0c24      	lsrs	r4, r4, #16
    5480:	0412      	lsls	r2, r2, #16
    5482:	1912      	adds	r2, r2, r4
    5484:	9205      	str	r2, [sp, #20]
    5486:	0c2a      	lsrs	r2, r5, #16
    5488:	042d      	lsls	r5, r5, #16
    548a:	0c2d      	lsrs	r5, r5, #16
    548c:	4368      	muls	r0, r5
    548e:	002c      	movs	r4, r5
    5490:	4682      	mov	sl, r0
    5492:	4648      	mov	r0, r9
    5494:	437c      	muls	r4, r7
    5496:	4350      	muls	r0, r2
    5498:	4681      	mov	r9, r0
    549a:	0c20      	lsrs	r0, r4, #16
    549c:	4680      	mov	r8, r0
    549e:	4357      	muls	r7, r2
    54a0:	4457      	add	r7, sl
    54a2:	4447      	add	r7, r8
    54a4:	45ba      	cmp	sl, r7
    54a6:	d903      	bls.n	54b0 <__aeabi_dmul+0x274>
    54a8:	2080      	movs	r0, #128	; 0x80
    54aa:	0240      	lsls	r0, r0, #9
    54ac:	4680      	mov	r8, r0
    54ae:	44c1      	add	r9, r8
    54b0:	0c38      	lsrs	r0, r7, #16
    54b2:	043f      	lsls	r7, r7, #16
    54b4:	46b8      	mov	r8, r7
    54b6:	4448      	add	r0, r9
    54b8:	0424      	lsls	r4, r4, #16
    54ba:	0c24      	lsrs	r4, r4, #16
    54bc:	9001      	str	r0, [sp, #4]
    54be:	9804      	ldr	r0, [sp, #16]
    54c0:	44a0      	add	r8, r4
    54c2:	4440      	add	r0, r8
    54c4:	9004      	str	r0, [sp, #16]
    54c6:	4658      	mov	r0, fp
    54c8:	0c00      	lsrs	r0, r0, #16
    54ca:	4681      	mov	r9, r0
    54cc:	4658      	mov	r0, fp
    54ce:	0404      	lsls	r4, r0, #16
    54d0:	0c20      	lsrs	r0, r4, #16
    54d2:	4682      	mov	sl, r0
    54d4:	0007      	movs	r7, r0
    54d6:	4648      	mov	r0, r9
    54d8:	435f      	muls	r7, r3
    54da:	464c      	mov	r4, r9
    54dc:	4343      	muls	r3, r0
    54de:	4660      	mov	r0, ip
    54e0:	4360      	muls	r0, r4
    54e2:	4664      	mov	r4, ip
    54e4:	4683      	mov	fp, r0
    54e6:	4650      	mov	r0, sl
    54e8:	4344      	muls	r4, r0
    54ea:	0c38      	lsrs	r0, r7, #16
    54ec:	4684      	mov	ip, r0
    54ee:	18e4      	adds	r4, r4, r3
    54f0:	4464      	add	r4, ip
    54f2:	42a3      	cmp	r3, r4
    54f4:	d903      	bls.n	54fe <__aeabi_dmul+0x2c2>
    54f6:	2380      	movs	r3, #128	; 0x80
    54f8:	025b      	lsls	r3, r3, #9
    54fa:	469c      	mov	ip, r3
    54fc:	44e3      	add	fp, ip
    54fe:	4648      	mov	r0, r9
    5500:	043f      	lsls	r7, r7, #16
    5502:	0c23      	lsrs	r3, r4, #16
    5504:	0c3f      	lsrs	r7, r7, #16
    5506:	0424      	lsls	r4, r4, #16
    5508:	19e4      	adds	r4, r4, r7
    550a:	4657      	mov	r7, sl
    550c:	4368      	muls	r0, r5
    550e:	436f      	muls	r7, r5
    5510:	4684      	mov	ip, r0
    5512:	464d      	mov	r5, r9
    5514:	4650      	mov	r0, sl
    5516:	4355      	muls	r5, r2
    5518:	4342      	muls	r2, r0
    551a:	0c38      	lsrs	r0, r7, #16
    551c:	4681      	mov	r9, r0
    551e:	4462      	add	r2, ip
    5520:	444a      	add	r2, r9
    5522:	445b      	add	r3, fp
    5524:	4594      	cmp	ip, r2
    5526:	d903      	bls.n	5530 <__aeabi_dmul+0x2f4>
    5528:	2080      	movs	r0, #128	; 0x80
    552a:	0240      	lsls	r0, r0, #9
    552c:	4684      	mov	ip, r0
    552e:	4465      	add	r5, ip
    5530:	9803      	ldr	r0, [sp, #12]
    5532:	043f      	lsls	r7, r7, #16
    5534:	4683      	mov	fp, r0
    5536:	9804      	ldr	r0, [sp, #16]
    5538:	0c3f      	lsrs	r7, r7, #16
    553a:	4684      	mov	ip, r0
    553c:	44e3      	add	fp, ip
    553e:	45c3      	cmp	fp, r8
    5540:	4180      	sbcs	r0, r0
    5542:	4240      	negs	r0, r0
    5544:	4682      	mov	sl, r0
    5546:	0410      	lsls	r0, r2, #16
    5548:	4684      	mov	ip, r0
    554a:	9801      	ldr	r0, [sp, #4]
    554c:	4467      	add	r7, ip
    554e:	4684      	mov	ip, r0
    5550:	4467      	add	r7, ip
    5552:	44a3      	add	fp, r4
    5554:	46bc      	mov	ip, r7
    5556:	45a3      	cmp	fp, r4
    5558:	41a4      	sbcs	r4, r4
    555a:	4699      	mov	r9, r3
    555c:	44d4      	add	ip, sl
    555e:	4264      	negs	r4, r4
    5560:	4287      	cmp	r7, r0
    5562:	41bf      	sbcs	r7, r7
    5564:	45d4      	cmp	ip, sl
    5566:	4180      	sbcs	r0, r0
    5568:	44e1      	add	r9, ip
    556a:	46a0      	mov	r8, r4
    556c:	4599      	cmp	r9, r3
    556e:	419b      	sbcs	r3, r3
    5570:	427f      	negs	r7, r7
    5572:	4240      	negs	r0, r0
    5574:	44c8      	add	r8, r9
    5576:	4307      	orrs	r7, r0
    5578:	0c12      	lsrs	r2, r2, #16
    557a:	18ba      	adds	r2, r7, r2
    557c:	45a0      	cmp	r8, r4
    557e:	41a4      	sbcs	r4, r4
    5580:	425f      	negs	r7, r3
    5582:	003b      	movs	r3, r7
    5584:	4264      	negs	r4, r4
    5586:	4323      	orrs	r3, r4
    5588:	18d7      	adds	r7, r2, r3
    558a:	4643      	mov	r3, r8
    558c:	197d      	adds	r5, r7, r5
    558e:	0ddb      	lsrs	r3, r3, #23
    5590:	026d      	lsls	r5, r5, #9
    5592:	431d      	orrs	r5, r3
    5594:	465b      	mov	r3, fp
    5596:	025a      	lsls	r2, r3, #9
    5598:	9b05      	ldr	r3, [sp, #20]
    559a:	431a      	orrs	r2, r3
    559c:	1e53      	subs	r3, r2, #1
    559e:	419a      	sbcs	r2, r3
    55a0:	465b      	mov	r3, fp
    55a2:	0ddb      	lsrs	r3, r3, #23
    55a4:	431a      	orrs	r2, r3
    55a6:	4643      	mov	r3, r8
    55a8:	025b      	lsls	r3, r3, #9
    55aa:	4313      	orrs	r3, r2
    55ac:	01ea      	lsls	r2, r5, #7
    55ae:	d507      	bpl.n	55c0 <__aeabi_dmul+0x384>
    55b0:	2201      	movs	r2, #1
    55b2:	085c      	lsrs	r4, r3, #1
    55b4:	4013      	ands	r3, r2
    55b6:	4323      	orrs	r3, r4
    55b8:	07ea      	lsls	r2, r5, #31
    55ba:	9e02      	ldr	r6, [sp, #8]
    55bc:	4313      	orrs	r3, r2
    55be:	086d      	lsrs	r5, r5, #1
    55c0:	4a57      	ldr	r2, [pc, #348]	; (5720 <__aeabi_dmul+0x4e4>)
    55c2:	18b2      	adds	r2, r6, r2
    55c4:	2a00      	cmp	r2, #0
    55c6:	dd4b      	ble.n	5660 <__aeabi_dmul+0x424>
    55c8:	0758      	lsls	r0, r3, #29
    55ca:	d009      	beq.n	55e0 <__aeabi_dmul+0x3a4>
    55cc:	200f      	movs	r0, #15
    55ce:	4018      	ands	r0, r3
    55d0:	2804      	cmp	r0, #4
    55d2:	d005      	beq.n	55e0 <__aeabi_dmul+0x3a4>
    55d4:	1d18      	adds	r0, r3, #4
    55d6:	4298      	cmp	r0, r3
    55d8:	419b      	sbcs	r3, r3
    55da:	425b      	negs	r3, r3
    55dc:	18ed      	adds	r5, r5, r3
    55de:	0003      	movs	r3, r0
    55e0:	01e8      	lsls	r0, r5, #7
    55e2:	d504      	bpl.n	55ee <__aeabi_dmul+0x3b2>
    55e4:	4a4f      	ldr	r2, [pc, #316]	; (5724 <__aeabi_dmul+0x4e8>)
    55e6:	4015      	ands	r5, r2
    55e8:	2280      	movs	r2, #128	; 0x80
    55ea:	00d2      	lsls	r2, r2, #3
    55ec:	18b2      	adds	r2, r6, r2
    55ee:	484e      	ldr	r0, [pc, #312]	; (5728 <__aeabi_dmul+0x4ec>)
    55f0:	4282      	cmp	r2, r0
    55f2:	dd00      	ble.n	55f6 <__aeabi_dmul+0x3ba>
    55f4:	e6e7      	b.n	53c6 <__aeabi_dmul+0x18a>
    55f6:	2401      	movs	r4, #1
    55f8:	08db      	lsrs	r3, r3, #3
    55fa:	0768      	lsls	r0, r5, #29
    55fc:	4318      	orrs	r0, r3
    55fe:	026d      	lsls	r5, r5, #9
    5600:	0553      	lsls	r3, r2, #21
    5602:	4680      	mov	r8, r0
    5604:	0b2d      	lsrs	r5, r5, #12
    5606:	0d5b      	lsrs	r3, r3, #21
    5608:	400c      	ands	r4, r1
    560a:	e67d      	b.n	5308 <__aeabi_dmul+0xcc>
    560c:	2280      	movs	r2, #128	; 0x80
    560e:	4659      	mov	r1, fp
    5610:	0312      	lsls	r2, r2, #12
    5612:	4211      	tst	r1, r2
    5614:	d008      	beq.n	5628 <__aeabi_dmul+0x3ec>
    5616:	4215      	tst	r5, r2
    5618:	d106      	bne.n	5628 <__aeabi_dmul+0x3ec>
    561a:	4315      	orrs	r5, r2
    561c:	032d      	lsls	r5, r5, #12
    561e:	4698      	mov	r8, r3
    5620:	0b2d      	lsrs	r5, r5, #12
    5622:	464c      	mov	r4, r9
    5624:	4b41      	ldr	r3, [pc, #260]	; (572c <__aeabi_dmul+0x4f0>)
    5626:	e66f      	b.n	5308 <__aeabi_dmul+0xcc>
    5628:	465d      	mov	r5, fp
    562a:	4315      	orrs	r5, r2
    562c:	032d      	lsls	r5, r5, #12
    562e:	0b2d      	lsrs	r5, r5, #12
    5630:	4b3e      	ldr	r3, [pc, #248]	; (572c <__aeabi_dmul+0x4f0>)
    5632:	e669      	b.n	5308 <__aeabi_dmul+0xcc>
    5634:	0003      	movs	r3, r0
    5636:	4655      	mov	r5, sl
    5638:	3b28      	subs	r3, #40	; 0x28
    563a:	409d      	lsls	r5, r3
    563c:	2300      	movs	r3, #0
    563e:	e6bc      	b.n	53ba <__aeabi_dmul+0x17e>
    5640:	4650      	mov	r0, sl
    5642:	f000 fd79 	bl	6138 <__clzsi2>
    5646:	3020      	adds	r0, #32
    5648:	e6a8      	b.n	539c <__aeabi_dmul+0x160>
    564a:	0003      	movs	r3, r0
    564c:	3b28      	subs	r3, #40	; 0x28
    564e:	409f      	lsls	r7, r3
    5650:	2300      	movs	r3, #0
    5652:	46bb      	mov	fp, r7
    5654:	4698      	mov	r8, r3
    5656:	e689      	b.n	536c <__aeabi_dmul+0x130>
    5658:	f000 fd6e 	bl	6138 <__clzsi2>
    565c:	3020      	adds	r0, #32
    565e:	e673      	b.n	5348 <__aeabi_dmul+0x10c>
    5660:	2401      	movs	r4, #1
    5662:	1aa6      	subs	r6, r4, r2
    5664:	2e38      	cmp	r6, #56	; 0x38
    5666:	dd07      	ble.n	5678 <__aeabi_dmul+0x43c>
    5668:	2200      	movs	r2, #0
    566a:	400c      	ands	r4, r1
    566c:	2300      	movs	r3, #0
    566e:	2500      	movs	r5, #0
    5670:	4690      	mov	r8, r2
    5672:	e649      	b.n	5308 <__aeabi_dmul+0xcc>
    5674:	9e02      	ldr	r6, [sp, #8]
    5676:	e7a3      	b.n	55c0 <__aeabi_dmul+0x384>
    5678:	2e1f      	cmp	r6, #31
    567a:	dc20      	bgt.n	56be <__aeabi_dmul+0x482>
    567c:	2220      	movs	r2, #32
    567e:	002c      	movs	r4, r5
    5680:	0018      	movs	r0, r3
    5682:	1b92      	subs	r2, r2, r6
    5684:	40f0      	lsrs	r0, r6
    5686:	4094      	lsls	r4, r2
    5688:	4093      	lsls	r3, r2
    568a:	4304      	orrs	r4, r0
    568c:	1e58      	subs	r0, r3, #1
    568e:	4183      	sbcs	r3, r0
    5690:	431c      	orrs	r4, r3
    5692:	40f5      	lsrs	r5, r6
    5694:	0763      	lsls	r3, r4, #29
    5696:	d009      	beq.n	56ac <__aeabi_dmul+0x470>
    5698:	230f      	movs	r3, #15
    569a:	4023      	ands	r3, r4
    569c:	2b04      	cmp	r3, #4
    569e:	d005      	beq.n	56ac <__aeabi_dmul+0x470>
    56a0:	0023      	movs	r3, r4
    56a2:	1d1c      	adds	r4, r3, #4
    56a4:	429c      	cmp	r4, r3
    56a6:	4192      	sbcs	r2, r2
    56a8:	4252      	negs	r2, r2
    56aa:	18ad      	adds	r5, r5, r2
    56ac:	022b      	lsls	r3, r5, #8
    56ae:	d51f      	bpl.n	56f0 <__aeabi_dmul+0x4b4>
    56b0:	2401      	movs	r4, #1
    56b2:	2200      	movs	r2, #0
    56b4:	400c      	ands	r4, r1
    56b6:	2301      	movs	r3, #1
    56b8:	2500      	movs	r5, #0
    56ba:	4690      	mov	r8, r2
    56bc:	e624      	b.n	5308 <__aeabi_dmul+0xcc>
    56be:	201f      	movs	r0, #31
    56c0:	002c      	movs	r4, r5
    56c2:	4240      	negs	r0, r0
    56c4:	1a82      	subs	r2, r0, r2
    56c6:	40d4      	lsrs	r4, r2
    56c8:	2e20      	cmp	r6, #32
    56ca:	d01c      	beq.n	5706 <__aeabi_dmul+0x4ca>
    56cc:	2240      	movs	r2, #64	; 0x40
    56ce:	1b96      	subs	r6, r2, r6
    56d0:	40b5      	lsls	r5, r6
    56d2:	432b      	orrs	r3, r5
    56d4:	1e58      	subs	r0, r3, #1
    56d6:	4183      	sbcs	r3, r0
    56d8:	2007      	movs	r0, #7
    56da:	4323      	orrs	r3, r4
    56dc:	4018      	ands	r0, r3
    56de:	2500      	movs	r5, #0
    56e0:	2800      	cmp	r0, #0
    56e2:	d009      	beq.n	56f8 <__aeabi_dmul+0x4bc>
    56e4:	220f      	movs	r2, #15
    56e6:	2500      	movs	r5, #0
    56e8:	401a      	ands	r2, r3
    56ea:	001c      	movs	r4, r3
    56ec:	2a04      	cmp	r2, #4
    56ee:	d1d8      	bne.n	56a2 <__aeabi_dmul+0x466>
    56f0:	0023      	movs	r3, r4
    56f2:	0768      	lsls	r0, r5, #29
    56f4:	026d      	lsls	r5, r5, #9
    56f6:	0b2d      	lsrs	r5, r5, #12
    56f8:	2401      	movs	r4, #1
    56fa:	08db      	lsrs	r3, r3, #3
    56fc:	4303      	orrs	r3, r0
    56fe:	4698      	mov	r8, r3
    5700:	400c      	ands	r4, r1
    5702:	2300      	movs	r3, #0
    5704:	e600      	b.n	5308 <__aeabi_dmul+0xcc>
    5706:	2500      	movs	r5, #0
    5708:	e7e3      	b.n	56d2 <__aeabi_dmul+0x496>
    570a:	2280      	movs	r2, #128	; 0x80
    570c:	2401      	movs	r4, #1
    570e:	0312      	lsls	r2, r2, #12
    5710:	4315      	orrs	r5, r2
    5712:	032d      	lsls	r5, r5, #12
    5714:	4698      	mov	r8, r3
    5716:	0b2d      	lsrs	r5, r5, #12
    5718:	400c      	ands	r4, r1
    571a:	4b04      	ldr	r3, [pc, #16]	; (572c <__aeabi_dmul+0x4f0>)
    571c:	e5f4      	b.n	5308 <__aeabi_dmul+0xcc>
    571e:	46c0      	nop			; (mov r8, r8)
    5720:	000003ff 	.word	0x000003ff
    5724:	feffffff 	.word	0xfeffffff
    5728:	000007fe 	.word	0x000007fe
    572c:	000007ff 	.word	0x000007ff

00005730 <__aeabi_dsub>:
    5730:	b5f0      	push	{r4, r5, r6, r7, lr}
    5732:	4657      	mov	r7, sl
    5734:	464e      	mov	r6, r9
    5736:	4645      	mov	r5, r8
    5738:	b4e0      	push	{r5, r6, r7}
    573a:	000e      	movs	r6, r1
    573c:	0011      	movs	r1, r2
    573e:	0ff2      	lsrs	r2, r6, #31
    5740:	4692      	mov	sl, r2
    5742:	00c5      	lsls	r5, r0, #3
    5744:	0f42      	lsrs	r2, r0, #29
    5746:	0318      	lsls	r0, r3, #12
    5748:	0337      	lsls	r7, r6, #12
    574a:	0074      	lsls	r4, r6, #1
    574c:	0a40      	lsrs	r0, r0, #9
    574e:	0f4e      	lsrs	r6, r1, #29
    5750:	0a7f      	lsrs	r7, r7, #9
    5752:	4330      	orrs	r0, r6
    5754:	4ecf      	ldr	r6, [pc, #828]	; (5a94 <__aeabi_dsub+0x364>)
    5756:	4317      	orrs	r7, r2
    5758:	005a      	lsls	r2, r3, #1
    575a:	0d64      	lsrs	r4, r4, #21
    575c:	0d52      	lsrs	r2, r2, #21
    575e:	0fdb      	lsrs	r3, r3, #31
    5760:	00c9      	lsls	r1, r1, #3
    5762:	42b2      	cmp	r2, r6
    5764:	d100      	bne.n	5768 <__aeabi_dsub+0x38>
    5766:	e0e5      	b.n	5934 <__aeabi_dsub+0x204>
    5768:	2601      	movs	r6, #1
    576a:	4073      	eors	r3, r6
    576c:	1aa6      	subs	r6, r4, r2
    576e:	46b4      	mov	ip, r6
    5770:	4553      	cmp	r3, sl
    5772:	d100      	bne.n	5776 <__aeabi_dsub+0x46>
    5774:	e0af      	b.n	58d6 <__aeabi_dsub+0x1a6>
    5776:	2e00      	cmp	r6, #0
    5778:	dc00      	bgt.n	577c <__aeabi_dsub+0x4c>
    577a:	e10d      	b.n	5998 <__aeabi_dsub+0x268>
    577c:	2a00      	cmp	r2, #0
    577e:	d13a      	bne.n	57f6 <__aeabi_dsub+0xc6>
    5780:	0003      	movs	r3, r0
    5782:	430b      	orrs	r3, r1
    5784:	d000      	beq.n	5788 <__aeabi_dsub+0x58>
    5786:	e0e4      	b.n	5952 <__aeabi_dsub+0x222>
    5788:	076b      	lsls	r3, r5, #29
    578a:	d009      	beq.n	57a0 <__aeabi_dsub+0x70>
    578c:	230f      	movs	r3, #15
    578e:	402b      	ands	r3, r5
    5790:	2b04      	cmp	r3, #4
    5792:	d005      	beq.n	57a0 <__aeabi_dsub+0x70>
    5794:	1d2b      	adds	r3, r5, #4
    5796:	42ab      	cmp	r3, r5
    5798:	41ad      	sbcs	r5, r5
    579a:	426d      	negs	r5, r5
    579c:	197f      	adds	r7, r7, r5
    579e:	001d      	movs	r5, r3
    57a0:	023b      	lsls	r3, r7, #8
    57a2:	d400      	bmi.n	57a6 <__aeabi_dsub+0x76>
    57a4:	e088      	b.n	58b8 <__aeabi_dsub+0x188>
    57a6:	4bbb      	ldr	r3, [pc, #748]	; (5a94 <__aeabi_dsub+0x364>)
    57a8:	3401      	adds	r4, #1
    57aa:	429c      	cmp	r4, r3
    57ac:	d100      	bne.n	57b0 <__aeabi_dsub+0x80>
    57ae:	e110      	b.n	59d2 <__aeabi_dsub+0x2a2>
    57b0:	003a      	movs	r2, r7
    57b2:	4bb9      	ldr	r3, [pc, #740]	; (5a98 <__aeabi_dsub+0x368>)
    57b4:	4651      	mov	r1, sl
    57b6:	401a      	ands	r2, r3
    57b8:	2301      	movs	r3, #1
    57ba:	0750      	lsls	r0, r2, #29
    57bc:	08ed      	lsrs	r5, r5, #3
    57be:	0252      	lsls	r2, r2, #9
    57c0:	0564      	lsls	r4, r4, #21
    57c2:	4305      	orrs	r5, r0
    57c4:	0b12      	lsrs	r2, r2, #12
    57c6:	0d64      	lsrs	r4, r4, #21
    57c8:	400b      	ands	r3, r1
    57ca:	2100      	movs	r1, #0
    57cc:	0028      	movs	r0, r5
    57ce:	0312      	lsls	r2, r2, #12
    57d0:	0d0d      	lsrs	r5, r1, #20
    57d2:	0b12      	lsrs	r2, r2, #12
    57d4:	0564      	lsls	r4, r4, #21
    57d6:	052d      	lsls	r5, r5, #20
    57d8:	4315      	orrs	r5, r2
    57da:	0862      	lsrs	r2, r4, #1
    57dc:	4caf      	ldr	r4, [pc, #700]	; (5a9c <__aeabi_dsub+0x36c>)
    57de:	07db      	lsls	r3, r3, #31
    57e0:	402c      	ands	r4, r5
    57e2:	4314      	orrs	r4, r2
    57e4:	0064      	lsls	r4, r4, #1
    57e6:	0864      	lsrs	r4, r4, #1
    57e8:	431c      	orrs	r4, r3
    57ea:	0021      	movs	r1, r4
    57ec:	bc1c      	pop	{r2, r3, r4}
    57ee:	4690      	mov	r8, r2
    57f0:	4699      	mov	r9, r3
    57f2:	46a2      	mov	sl, r4
    57f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    57f6:	4ba7      	ldr	r3, [pc, #668]	; (5a94 <__aeabi_dsub+0x364>)
    57f8:	429c      	cmp	r4, r3
    57fa:	d0c5      	beq.n	5788 <__aeabi_dsub+0x58>
    57fc:	2380      	movs	r3, #128	; 0x80
    57fe:	041b      	lsls	r3, r3, #16
    5800:	4318      	orrs	r0, r3
    5802:	4663      	mov	r3, ip
    5804:	2b38      	cmp	r3, #56	; 0x38
    5806:	dd00      	ble.n	580a <__aeabi_dsub+0xda>
    5808:	e0fd      	b.n	5a06 <__aeabi_dsub+0x2d6>
    580a:	2b1f      	cmp	r3, #31
    580c:	dd00      	ble.n	5810 <__aeabi_dsub+0xe0>
    580e:	e130      	b.n	5a72 <__aeabi_dsub+0x342>
    5810:	4662      	mov	r2, ip
    5812:	2320      	movs	r3, #32
    5814:	1a9b      	subs	r3, r3, r2
    5816:	0002      	movs	r2, r0
    5818:	409a      	lsls	r2, r3
    581a:	4666      	mov	r6, ip
    581c:	4690      	mov	r8, r2
    581e:	000a      	movs	r2, r1
    5820:	4099      	lsls	r1, r3
    5822:	40f2      	lsrs	r2, r6
    5824:	4646      	mov	r6, r8
    5826:	1e4b      	subs	r3, r1, #1
    5828:	4199      	sbcs	r1, r3
    582a:	4332      	orrs	r2, r6
    582c:	4311      	orrs	r1, r2
    582e:	4663      	mov	r3, ip
    5830:	0002      	movs	r2, r0
    5832:	40da      	lsrs	r2, r3
    5834:	1a69      	subs	r1, r5, r1
    5836:	428d      	cmp	r5, r1
    5838:	419b      	sbcs	r3, r3
    583a:	000d      	movs	r5, r1
    583c:	1aba      	subs	r2, r7, r2
    583e:	425b      	negs	r3, r3
    5840:	1ad7      	subs	r7, r2, r3
    5842:	023b      	lsls	r3, r7, #8
    5844:	d535      	bpl.n	58b2 <__aeabi_dsub+0x182>
    5846:	027a      	lsls	r2, r7, #9
    5848:	0a53      	lsrs	r3, r2, #9
    584a:	4698      	mov	r8, r3
    584c:	4643      	mov	r3, r8
    584e:	2b00      	cmp	r3, #0
    5850:	d100      	bne.n	5854 <__aeabi_dsub+0x124>
    5852:	e0c4      	b.n	59de <__aeabi_dsub+0x2ae>
    5854:	4640      	mov	r0, r8
    5856:	f000 fc6f 	bl	6138 <__clzsi2>
    585a:	0003      	movs	r3, r0
    585c:	3b08      	subs	r3, #8
    585e:	2b1f      	cmp	r3, #31
    5860:	dd00      	ble.n	5864 <__aeabi_dsub+0x134>
    5862:	e0c5      	b.n	59f0 <__aeabi_dsub+0x2c0>
    5864:	2220      	movs	r2, #32
    5866:	0029      	movs	r1, r5
    5868:	1ad2      	subs	r2, r2, r3
    586a:	4647      	mov	r7, r8
    586c:	40d1      	lsrs	r1, r2
    586e:	409f      	lsls	r7, r3
    5870:	000a      	movs	r2, r1
    5872:	409d      	lsls	r5, r3
    5874:	433a      	orrs	r2, r7
    5876:	429c      	cmp	r4, r3
    5878:	dd00      	ble.n	587c <__aeabi_dsub+0x14c>
    587a:	e0c0      	b.n	59fe <__aeabi_dsub+0x2ce>
    587c:	1b1c      	subs	r4, r3, r4
    587e:	1c63      	adds	r3, r4, #1
    5880:	2b1f      	cmp	r3, #31
    5882:	dd00      	ble.n	5886 <__aeabi_dsub+0x156>
    5884:	e0e4      	b.n	5a50 <__aeabi_dsub+0x320>
    5886:	2120      	movs	r1, #32
    5888:	0014      	movs	r4, r2
    588a:	0028      	movs	r0, r5
    588c:	1ac9      	subs	r1, r1, r3
    588e:	40d8      	lsrs	r0, r3
    5890:	408c      	lsls	r4, r1
    5892:	408d      	lsls	r5, r1
    5894:	4304      	orrs	r4, r0
    5896:	40da      	lsrs	r2, r3
    5898:	1e68      	subs	r0, r5, #1
    589a:	4185      	sbcs	r5, r0
    589c:	0017      	movs	r7, r2
    589e:	4325      	orrs	r5, r4
    58a0:	2400      	movs	r4, #0
    58a2:	e771      	b.n	5788 <__aeabi_dsub+0x58>
    58a4:	4642      	mov	r2, r8
    58a6:	4663      	mov	r3, ip
    58a8:	431a      	orrs	r2, r3
    58aa:	d100      	bne.n	58ae <__aeabi_dsub+0x17e>
    58ac:	e24c      	b.n	5d48 <__aeabi_dsub+0x618>
    58ae:	4667      	mov	r7, ip
    58b0:	4645      	mov	r5, r8
    58b2:	076b      	lsls	r3, r5, #29
    58b4:	d000      	beq.n	58b8 <__aeabi_dsub+0x188>
    58b6:	e769      	b.n	578c <__aeabi_dsub+0x5c>
    58b8:	2301      	movs	r3, #1
    58ba:	4651      	mov	r1, sl
    58bc:	0778      	lsls	r0, r7, #29
    58be:	08ed      	lsrs	r5, r5, #3
    58c0:	08fa      	lsrs	r2, r7, #3
    58c2:	400b      	ands	r3, r1
    58c4:	4305      	orrs	r5, r0
    58c6:	4973      	ldr	r1, [pc, #460]	; (5a94 <__aeabi_dsub+0x364>)
    58c8:	428c      	cmp	r4, r1
    58ca:	d038      	beq.n	593e <__aeabi_dsub+0x20e>
    58cc:	0312      	lsls	r2, r2, #12
    58ce:	0564      	lsls	r4, r4, #21
    58d0:	0b12      	lsrs	r2, r2, #12
    58d2:	0d64      	lsrs	r4, r4, #21
    58d4:	e779      	b.n	57ca <__aeabi_dsub+0x9a>
    58d6:	2e00      	cmp	r6, #0
    58d8:	dc00      	bgt.n	58dc <__aeabi_dsub+0x1ac>
    58da:	e09a      	b.n	5a12 <__aeabi_dsub+0x2e2>
    58dc:	2a00      	cmp	r2, #0
    58de:	d047      	beq.n	5970 <__aeabi_dsub+0x240>
    58e0:	4a6c      	ldr	r2, [pc, #432]	; (5a94 <__aeabi_dsub+0x364>)
    58e2:	4294      	cmp	r4, r2
    58e4:	d100      	bne.n	58e8 <__aeabi_dsub+0x1b8>
    58e6:	e74f      	b.n	5788 <__aeabi_dsub+0x58>
    58e8:	2280      	movs	r2, #128	; 0x80
    58ea:	0412      	lsls	r2, r2, #16
    58ec:	4310      	orrs	r0, r2
    58ee:	4662      	mov	r2, ip
    58f0:	2a38      	cmp	r2, #56	; 0x38
    58f2:	dc00      	bgt.n	58f6 <__aeabi_dsub+0x1c6>
    58f4:	e108      	b.n	5b08 <__aeabi_dsub+0x3d8>
    58f6:	4301      	orrs	r1, r0
    58f8:	1e48      	subs	r0, r1, #1
    58fa:	4181      	sbcs	r1, r0
    58fc:	2200      	movs	r2, #0
    58fe:	b2c9      	uxtb	r1, r1
    5900:	1949      	adds	r1, r1, r5
    5902:	19d2      	adds	r2, r2, r7
    5904:	42a9      	cmp	r1, r5
    5906:	41bf      	sbcs	r7, r7
    5908:	000d      	movs	r5, r1
    590a:	427f      	negs	r7, r7
    590c:	18bf      	adds	r7, r7, r2
    590e:	023a      	lsls	r2, r7, #8
    5910:	d400      	bmi.n	5914 <__aeabi_dsub+0x1e4>
    5912:	e142      	b.n	5b9a <__aeabi_dsub+0x46a>
    5914:	4a5f      	ldr	r2, [pc, #380]	; (5a94 <__aeabi_dsub+0x364>)
    5916:	3401      	adds	r4, #1
    5918:	4294      	cmp	r4, r2
    591a:	d100      	bne.n	591e <__aeabi_dsub+0x1ee>
    591c:	e14e      	b.n	5bbc <__aeabi_dsub+0x48c>
    591e:	2001      	movs	r0, #1
    5920:	4a5d      	ldr	r2, [pc, #372]	; (5a98 <__aeabi_dsub+0x368>)
    5922:	0869      	lsrs	r1, r5, #1
    5924:	403a      	ands	r2, r7
    5926:	4028      	ands	r0, r5
    5928:	4308      	orrs	r0, r1
    592a:	07d5      	lsls	r5, r2, #31
    592c:	4305      	orrs	r5, r0
    592e:	0857      	lsrs	r7, r2, #1
    5930:	469a      	mov	sl, r3
    5932:	e729      	b.n	5788 <__aeabi_dsub+0x58>
    5934:	0006      	movs	r6, r0
    5936:	430e      	orrs	r6, r1
    5938:	d000      	beq.n	593c <__aeabi_dsub+0x20c>
    593a:	e717      	b.n	576c <__aeabi_dsub+0x3c>
    593c:	e714      	b.n	5768 <__aeabi_dsub+0x38>
    593e:	0029      	movs	r1, r5
    5940:	4311      	orrs	r1, r2
    5942:	d100      	bne.n	5946 <__aeabi_dsub+0x216>
    5944:	e1f9      	b.n	5d3a <__aeabi_dsub+0x60a>
    5946:	2180      	movs	r1, #128	; 0x80
    5948:	0309      	lsls	r1, r1, #12
    594a:	430a      	orrs	r2, r1
    594c:	0312      	lsls	r2, r2, #12
    594e:	0b12      	lsrs	r2, r2, #12
    5950:	e73b      	b.n	57ca <__aeabi_dsub+0x9a>
    5952:	2301      	movs	r3, #1
    5954:	425b      	negs	r3, r3
    5956:	4698      	mov	r8, r3
    5958:	44c4      	add	ip, r8
    595a:	4663      	mov	r3, ip
    595c:	2b00      	cmp	r3, #0
    595e:	d172      	bne.n	5a46 <__aeabi_dsub+0x316>
    5960:	1a69      	subs	r1, r5, r1
    5962:	428d      	cmp	r5, r1
    5964:	419b      	sbcs	r3, r3
    5966:	1a3f      	subs	r7, r7, r0
    5968:	425b      	negs	r3, r3
    596a:	1aff      	subs	r7, r7, r3
    596c:	000d      	movs	r5, r1
    596e:	e768      	b.n	5842 <__aeabi_dsub+0x112>
    5970:	0002      	movs	r2, r0
    5972:	430a      	orrs	r2, r1
    5974:	d100      	bne.n	5978 <__aeabi_dsub+0x248>
    5976:	e707      	b.n	5788 <__aeabi_dsub+0x58>
    5978:	2201      	movs	r2, #1
    597a:	4252      	negs	r2, r2
    597c:	4690      	mov	r8, r2
    597e:	44c4      	add	ip, r8
    5980:	4662      	mov	r2, ip
    5982:	2a00      	cmp	r2, #0
    5984:	d000      	beq.n	5988 <__aeabi_dsub+0x258>
    5986:	e0e6      	b.n	5b56 <__aeabi_dsub+0x426>
    5988:	1869      	adds	r1, r5, r1
    598a:	42a9      	cmp	r1, r5
    598c:	41b6      	sbcs	r6, r6
    598e:	183f      	adds	r7, r7, r0
    5990:	4276      	negs	r6, r6
    5992:	19f7      	adds	r7, r6, r7
    5994:	000d      	movs	r5, r1
    5996:	e7ba      	b.n	590e <__aeabi_dsub+0x1de>
    5998:	2e00      	cmp	r6, #0
    599a:	d000      	beq.n	599e <__aeabi_dsub+0x26e>
    599c:	e080      	b.n	5aa0 <__aeabi_dsub+0x370>
    599e:	1c62      	adds	r2, r4, #1
    59a0:	0552      	lsls	r2, r2, #21
    59a2:	0d52      	lsrs	r2, r2, #21
    59a4:	2a01      	cmp	r2, #1
    59a6:	dc00      	bgt.n	59aa <__aeabi_dsub+0x27a>
    59a8:	e0f9      	b.n	5b9e <__aeabi_dsub+0x46e>
    59aa:	1a6a      	subs	r2, r5, r1
    59ac:	4691      	mov	r9, r2
    59ae:	454d      	cmp	r5, r9
    59b0:	41b6      	sbcs	r6, r6
    59b2:	1a3a      	subs	r2, r7, r0
    59b4:	4276      	negs	r6, r6
    59b6:	1b92      	subs	r2, r2, r6
    59b8:	4690      	mov	r8, r2
    59ba:	0212      	lsls	r2, r2, #8
    59bc:	d400      	bmi.n	59c0 <__aeabi_dsub+0x290>
    59be:	e099      	b.n	5af4 <__aeabi_dsub+0x3c4>
    59c0:	1b4d      	subs	r5, r1, r5
    59c2:	42a9      	cmp	r1, r5
    59c4:	4189      	sbcs	r1, r1
    59c6:	1bc7      	subs	r7, r0, r7
    59c8:	4249      	negs	r1, r1
    59ca:	1a7a      	subs	r2, r7, r1
    59cc:	4690      	mov	r8, r2
    59ce:	469a      	mov	sl, r3
    59d0:	e73c      	b.n	584c <__aeabi_dsub+0x11c>
    59d2:	4652      	mov	r2, sl
    59d4:	2301      	movs	r3, #1
    59d6:	2500      	movs	r5, #0
    59d8:	4013      	ands	r3, r2
    59da:	2200      	movs	r2, #0
    59dc:	e6f5      	b.n	57ca <__aeabi_dsub+0x9a>
    59de:	0028      	movs	r0, r5
    59e0:	f000 fbaa 	bl	6138 <__clzsi2>
    59e4:	3020      	adds	r0, #32
    59e6:	0003      	movs	r3, r0
    59e8:	3b08      	subs	r3, #8
    59ea:	2b1f      	cmp	r3, #31
    59ec:	dc00      	bgt.n	59f0 <__aeabi_dsub+0x2c0>
    59ee:	e739      	b.n	5864 <__aeabi_dsub+0x134>
    59f0:	002a      	movs	r2, r5
    59f2:	3828      	subs	r0, #40	; 0x28
    59f4:	4082      	lsls	r2, r0
    59f6:	2500      	movs	r5, #0
    59f8:	429c      	cmp	r4, r3
    59fa:	dc00      	bgt.n	59fe <__aeabi_dsub+0x2ce>
    59fc:	e73e      	b.n	587c <__aeabi_dsub+0x14c>
    59fe:	4f26      	ldr	r7, [pc, #152]	; (5a98 <__aeabi_dsub+0x368>)
    5a00:	1ae4      	subs	r4, r4, r3
    5a02:	4017      	ands	r7, r2
    5a04:	e6c0      	b.n	5788 <__aeabi_dsub+0x58>
    5a06:	4301      	orrs	r1, r0
    5a08:	1e48      	subs	r0, r1, #1
    5a0a:	4181      	sbcs	r1, r0
    5a0c:	2200      	movs	r2, #0
    5a0e:	b2c9      	uxtb	r1, r1
    5a10:	e710      	b.n	5834 <__aeabi_dsub+0x104>
    5a12:	2e00      	cmp	r6, #0
    5a14:	d000      	beq.n	5a18 <__aeabi_dsub+0x2e8>
    5a16:	e0f1      	b.n	5bfc <__aeabi_dsub+0x4cc>
    5a18:	1c62      	adds	r2, r4, #1
    5a1a:	4694      	mov	ip, r2
    5a1c:	0552      	lsls	r2, r2, #21
    5a1e:	0d52      	lsrs	r2, r2, #21
    5a20:	2a01      	cmp	r2, #1
    5a22:	dc00      	bgt.n	5a26 <__aeabi_dsub+0x2f6>
    5a24:	e0a0      	b.n	5b68 <__aeabi_dsub+0x438>
    5a26:	4a1b      	ldr	r2, [pc, #108]	; (5a94 <__aeabi_dsub+0x364>)
    5a28:	4594      	cmp	ip, r2
    5a2a:	d100      	bne.n	5a2e <__aeabi_dsub+0x2fe>
    5a2c:	e0c5      	b.n	5bba <__aeabi_dsub+0x48a>
    5a2e:	1869      	adds	r1, r5, r1
    5a30:	42a9      	cmp	r1, r5
    5a32:	4192      	sbcs	r2, r2
    5a34:	183f      	adds	r7, r7, r0
    5a36:	4252      	negs	r2, r2
    5a38:	19d2      	adds	r2, r2, r7
    5a3a:	0849      	lsrs	r1, r1, #1
    5a3c:	07d5      	lsls	r5, r2, #31
    5a3e:	430d      	orrs	r5, r1
    5a40:	0857      	lsrs	r7, r2, #1
    5a42:	4664      	mov	r4, ip
    5a44:	e6a0      	b.n	5788 <__aeabi_dsub+0x58>
    5a46:	4b13      	ldr	r3, [pc, #76]	; (5a94 <__aeabi_dsub+0x364>)
    5a48:	429c      	cmp	r4, r3
    5a4a:	d000      	beq.n	5a4e <__aeabi_dsub+0x31e>
    5a4c:	e6d9      	b.n	5802 <__aeabi_dsub+0xd2>
    5a4e:	e69b      	b.n	5788 <__aeabi_dsub+0x58>
    5a50:	0011      	movs	r1, r2
    5a52:	3c1f      	subs	r4, #31
    5a54:	40e1      	lsrs	r1, r4
    5a56:	000c      	movs	r4, r1
    5a58:	2b20      	cmp	r3, #32
    5a5a:	d100      	bne.n	5a5e <__aeabi_dsub+0x32e>
    5a5c:	e080      	b.n	5b60 <__aeabi_dsub+0x430>
    5a5e:	2140      	movs	r1, #64	; 0x40
    5a60:	1acb      	subs	r3, r1, r3
    5a62:	409a      	lsls	r2, r3
    5a64:	4315      	orrs	r5, r2
    5a66:	1e6a      	subs	r2, r5, #1
    5a68:	4195      	sbcs	r5, r2
    5a6a:	2700      	movs	r7, #0
    5a6c:	4325      	orrs	r5, r4
    5a6e:	2400      	movs	r4, #0
    5a70:	e71f      	b.n	58b2 <__aeabi_dsub+0x182>
    5a72:	4663      	mov	r3, ip
    5a74:	0002      	movs	r2, r0
    5a76:	3b20      	subs	r3, #32
    5a78:	40da      	lsrs	r2, r3
    5a7a:	4663      	mov	r3, ip
    5a7c:	2b20      	cmp	r3, #32
    5a7e:	d071      	beq.n	5b64 <__aeabi_dsub+0x434>
    5a80:	2340      	movs	r3, #64	; 0x40
    5a82:	4666      	mov	r6, ip
    5a84:	1b9b      	subs	r3, r3, r6
    5a86:	4098      	lsls	r0, r3
    5a88:	4301      	orrs	r1, r0
    5a8a:	1e48      	subs	r0, r1, #1
    5a8c:	4181      	sbcs	r1, r0
    5a8e:	4311      	orrs	r1, r2
    5a90:	2200      	movs	r2, #0
    5a92:	e6cf      	b.n	5834 <__aeabi_dsub+0x104>
    5a94:	000007ff 	.word	0x000007ff
    5a98:	ff7fffff 	.word	0xff7fffff
    5a9c:	800fffff 	.word	0x800fffff
    5aa0:	2c00      	cmp	r4, #0
    5aa2:	d048      	beq.n	5b36 <__aeabi_dsub+0x406>
    5aa4:	4cca      	ldr	r4, [pc, #808]	; (5dd0 <__aeabi_dsub+0x6a0>)
    5aa6:	42a2      	cmp	r2, r4
    5aa8:	d100      	bne.n	5aac <__aeabi_dsub+0x37c>
    5aaa:	e0a2      	b.n	5bf2 <__aeabi_dsub+0x4c2>
    5aac:	4274      	negs	r4, r6
    5aae:	46a1      	mov	r9, r4
    5ab0:	2480      	movs	r4, #128	; 0x80
    5ab2:	0424      	lsls	r4, r4, #16
    5ab4:	4327      	orrs	r7, r4
    5ab6:	464c      	mov	r4, r9
    5ab8:	2c38      	cmp	r4, #56	; 0x38
    5aba:	dd00      	ble.n	5abe <__aeabi_dsub+0x38e>
    5abc:	e0db      	b.n	5c76 <__aeabi_dsub+0x546>
    5abe:	2c1f      	cmp	r4, #31
    5ac0:	dd00      	ble.n	5ac4 <__aeabi_dsub+0x394>
    5ac2:	e144      	b.n	5d4e <__aeabi_dsub+0x61e>
    5ac4:	464e      	mov	r6, r9
    5ac6:	2420      	movs	r4, #32
    5ac8:	1ba4      	subs	r4, r4, r6
    5aca:	003e      	movs	r6, r7
    5acc:	40a6      	lsls	r6, r4
    5ace:	46a2      	mov	sl, r4
    5ad0:	46b0      	mov	r8, r6
    5ad2:	464c      	mov	r4, r9
    5ad4:	002e      	movs	r6, r5
    5ad6:	40e6      	lsrs	r6, r4
    5ad8:	46b4      	mov	ip, r6
    5ada:	4646      	mov	r6, r8
    5adc:	4664      	mov	r4, ip
    5ade:	4326      	orrs	r6, r4
    5ae0:	4654      	mov	r4, sl
    5ae2:	40a5      	lsls	r5, r4
    5ae4:	1e6c      	subs	r4, r5, #1
    5ae6:	41a5      	sbcs	r5, r4
    5ae8:	0034      	movs	r4, r6
    5aea:	432c      	orrs	r4, r5
    5aec:	464d      	mov	r5, r9
    5aee:	40ef      	lsrs	r7, r5
    5af0:	1b0d      	subs	r5, r1, r4
    5af2:	e028      	b.n	5b46 <__aeabi_dsub+0x416>
    5af4:	464a      	mov	r2, r9
    5af6:	4643      	mov	r3, r8
    5af8:	464d      	mov	r5, r9
    5afa:	431a      	orrs	r2, r3
    5afc:	d000      	beq.n	5b00 <__aeabi_dsub+0x3d0>
    5afe:	e6a5      	b.n	584c <__aeabi_dsub+0x11c>
    5b00:	2300      	movs	r3, #0
    5b02:	2400      	movs	r4, #0
    5b04:	2500      	movs	r5, #0
    5b06:	e6de      	b.n	58c6 <__aeabi_dsub+0x196>
    5b08:	2a1f      	cmp	r2, #31
    5b0a:	dc5a      	bgt.n	5bc2 <__aeabi_dsub+0x492>
    5b0c:	4666      	mov	r6, ip
    5b0e:	2220      	movs	r2, #32
    5b10:	1b92      	subs	r2, r2, r6
    5b12:	0006      	movs	r6, r0
    5b14:	4096      	lsls	r6, r2
    5b16:	4691      	mov	r9, r2
    5b18:	46b0      	mov	r8, r6
    5b1a:	4662      	mov	r2, ip
    5b1c:	000e      	movs	r6, r1
    5b1e:	40d6      	lsrs	r6, r2
    5b20:	4642      	mov	r2, r8
    5b22:	4316      	orrs	r6, r2
    5b24:	464a      	mov	r2, r9
    5b26:	4091      	lsls	r1, r2
    5b28:	1e4a      	subs	r2, r1, #1
    5b2a:	4191      	sbcs	r1, r2
    5b2c:	0002      	movs	r2, r0
    5b2e:	4660      	mov	r0, ip
    5b30:	4331      	orrs	r1, r6
    5b32:	40c2      	lsrs	r2, r0
    5b34:	e6e4      	b.n	5900 <__aeabi_dsub+0x1d0>
    5b36:	003c      	movs	r4, r7
    5b38:	432c      	orrs	r4, r5
    5b3a:	d05a      	beq.n	5bf2 <__aeabi_dsub+0x4c2>
    5b3c:	43f4      	mvns	r4, r6
    5b3e:	46a1      	mov	r9, r4
    5b40:	2c00      	cmp	r4, #0
    5b42:	d152      	bne.n	5bea <__aeabi_dsub+0x4ba>
    5b44:	1b4d      	subs	r5, r1, r5
    5b46:	42a9      	cmp	r1, r5
    5b48:	4189      	sbcs	r1, r1
    5b4a:	1bc7      	subs	r7, r0, r7
    5b4c:	4249      	negs	r1, r1
    5b4e:	1a7f      	subs	r7, r7, r1
    5b50:	0014      	movs	r4, r2
    5b52:	469a      	mov	sl, r3
    5b54:	e675      	b.n	5842 <__aeabi_dsub+0x112>
    5b56:	4a9e      	ldr	r2, [pc, #632]	; (5dd0 <__aeabi_dsub+0x6a0>)
    5b58:	4294      	cmp	r4, r2
    5b5a:	d000      	beq.n	5b5e <__aeabi_dsub+0x42e>
    5b5c:	e6c7      	b.n	58ee <__aeabi_dsub+0x1be>
    5b5e:	e613      	b.n	5788 <__aeabi_dsub+0x58>
    5b60:	2200      	movs	r2, #0
    5b62:	e77f      	b.n	5a64 <__aeabi_dsub+0x334>
    5b64:	2000      	movs	r0, #0
    5b66:	e78f      	b.n	5a88 <__aeabi_dsub+0x358>
    5b68:	2c00      	cmp	r4, #0
    5b6a:	d000      	beq.n	5b6e <__aeabi_dsub+0x43e>
    5b6c:	e0c8      	b.n	5d00 <__aeabi_dsub+0x5d0>
    5b6e:	003b      	movs	r3, r7
    5b70:	432b      	orrs	r3, r5
    5b72:	d100      	bne.n	5b76 <__aeabi_dsub+0x446>
    5b74:	e10f      	b.n	5d96 <__aeabi_dsub+0x666>
    5b76:	0003      	movs	r3, r0
    5b78:	430b      	orrs	r3, r1
    5b7a:	d100      	bne.n	5b7e <__aeabi_dsub+0x44e>
    5b7c:	e604      	b.n	5788 <__aeabi_dsub+0x58>
    5b7e:	1869      	adds	r1, r5, r1
    5b80:	42a9      	cmp	r1, r5
    5b82:	419b      	sbcs	r3, r3
    5b84:	183f      	adds	r7, r7, r0
    5b86:	425b      	negs	r3, r3
    5b88:	19df      	adds	r7, r3, r7
    5b8a:	023b      	lsls	r3, r7, #8
    5b8c:	d400      	bmi.n	5b90 <__aeabi_dsub+0x460>
    5b8e:	e11a      	b.n	5dc6 <__aeabi_dsub+0x696>
    5b90:	4b90      	ldr	r3, [pc, #576]	; (5dd4 <__aeabi_dsub+0x6a4>)
    5b92:	000d      	movs	r5, r1
    5b94:	401f      	ands	r7, r3
    5b96:	4664      	mov	r4, ip
    5b98:	e5f6      	b.n	5788 <__aeabi_dsub+0x58>
    5b9a:	469a      	mov	sl, r3
    5b9c:	e689      	b.n	58b2 <__aeabi_dsub+0x182>
    5b9e:	003a      	movs	r2, r7
    5ba0:	432a      	orrs	r2, r5
    5ba2:	2c00      	cmp	r4, #0
    5ba4:	d15c      	bne.n	5c60 <__aeabi_dsub+0x530>
    5ba6:	2a00      	cmp	r2, #0
    5ba8:	d175      	bne.n	5c96 <__aeabi_dsub+0x566>
    5baa:	0002      	movs	r2, r0
    5bac:	430a      	orrs	r2, r1
    5bae:	d100      	bne.n	5bb2 <__aeabi_dsub+0x482>
    5bb0:	e0ca      	b.n	5d48 <__aeabi_dsub+0x618>
    5bb2:	0007      	movs	r7, r0
    5bb4:	000d      	movs	r5, r1
    5bb6:	469a      	mov	sl, r3
    5bb8:	e5e6      	b.n	5788 <__aeabi_dsub+0x58>
    5bba:	4664      	mov	r4, ip
    5bbc:	2200      	movs	r2, #0
    5bbe:	2500      	movs	r5, #0
    5bc0:	e681      	b.n	58c6 <__aeabi_dsub+0x196>
    5bc2:	4662      	mov	r2, ip
    5bc4:	0006      	movs	r6, r0
    5bc6:	3a20      	subs	r2, #32
    5bc8:	40d6      	lsrs	r6, r2
    5bca:	4662      	mov	r2, ip
    5bcc:	46b0      	mov	r8, r6
    5bce:	2a20      	cmp	r2, #32
    5bd0:	d100      	bne.n	5bd4 <__aeabi_dsub+0x4a4>
    5bd2:	e0b7      	b.n	5d44 <__aeabi_dsub+0x614>
    5bd4:	2240      	movs	r2, #64	; 0x40
    5bd6:	4666      	mov	r6, ip
    5bd8:	1b92      	subs	r2, r2, r6
    5bda:	4090      	lsls	r0, r2
    5bdc:	4301      	orrs	r1, r0
    5bde:	4642      	mov	r2, r8
    5be0:	1e48      	subs	r0, r1, #1
    5be2:	4181      	sbcs	r1, r0
    5be4:	4311      	orrs	r1, r2
    5be6:	2200      	movs	r2, #0
    5be8:	e68a      	b.n	5900 <__aeabi_dsub+0x1d0>
    5bea:	4c79      	ldr	r4, [pc, #484]	; (5dd0 <__aeabi_dsub+0x6a0>)
    5bec:	42a2      	cmp	r2, r4
    5bee:	d000      	beq.n	5bf2 <__aeabi_dsub+0x4c2>
    5bf0:	e761      	b.n	5ab6 <__aeabi_dsub+0x386>
    5bf2:	0007      	movs	r7, r0
    5bf4:	000d      	movs	r5, r1
    5bf6:	0014      	movs	r4, r2
    5bf8:	469a      	mov	sl, r3
    5bfa:	e5c5      	b.n	5788 <__aeabi_dsub+0x58>
    5bfc:	2c00      	cmp	r4, #0
    5bfe:	d141      	bne.n	5c84 <__aeabi_dsub+0x554>
    5c00:	003c      	movs	r4, r7
    5c02:	432c      	orrs	r4, r5
    5c04:	d078      	beq.n	5cf8 <__aeabi_dsub+0x5c8>
    5c06:	43f4      	mvns	r4, r6
    5c08:	46a1      	mov	r9, r4
    5c0a:	2c00      	cmp	r4, #0
    5c0c:	d020      	beq.n	5c50 <__aeabi_dsub+0x520>
    5c0e:	4c70      	ldr	r4, [pc, #448]	; (5dd0 <__aeabi_dsub+0x6a0>)
    5c10:	42a2      	cmp	r2, r4
    5c12:	d071      	beq.n	5cf8 <__aeabi_dsub+0x5c8>
    5c14:	464c      	mov	r4, r9
    5c16:	2c38      	cmp	r4, #56	; 0x38
    5c18:	dd00      	ble.n	5c1c <__aeabi_dsub+0x4ec>
    5c1a:	e0b2      	b.n	5d82 <__aeabi_dsub+0x652>
    5c1c:	2c1f      	cmp	r4, #31
    5c1e:	dd00      	ble.n	5c22 <__aeabi_dsub+0x4f2>
    5c20:	e0bc      	b.n	5d9c <__aeabi_dsub+0x66c>
    5c22:	2620      	movs	r6, #32
    5c24:	1b34      	subs	r4, r6, r4
    5c26:	46a2      	mov	sl, r4
    5c28:	003c      	movs	r4, r7
    5c2a:	4656      	mov	r6, sl
    5c2c:	40b4      	lsls	r4, r6
    5c2e:	464e      	mov	r6, r9
    5c30:	46a0      	mov	r8, r4
    5c32:	002c      	movs	r4, r5
    5c34:	40f4      	lsrs	r4, r6
    5c36:	46a4      	mov	ip, r4
    5c38:	4644      	mov	r4, r8
    5c3a:	4666      	mov	r6, ip
    5c3c:	4334      	orrs	r4, r6
    5c3e:	46a4      	mov	ip, r4
    5c40:	4654      	mov	r4, sl
    5c42:	40a5      	lsls	r5, r4
    5c44:	4664      	mov	r4, ip
    5c46:	1e6e      	subs	r6, r5, #1
    5c48:	41b5      	sbcs	r5, r6
    5c4a:	4325      	orrs	r5, r4
    5c4c:	464c      	mov	r4, r9
    5c4e:	40e7      	lsrs	r7, r4
    5c50:	186d      	adds	r5, r5, r1
    5c52:	428d      	cmp	r5, r1
    5c54:	4189      	sbcs	r1, r1
    5c56:	183f      	adds	r7, r7, r0
    5c58:	4249      	negs	r1, r1
    5c5a:	19cf      	adds	r7, r1, r7
    5c5c:	0014      	movs	r4, r2
    5c5e:	e656      	b.n	590e <__aeabi_dsub+0x1de>
    5c60:	2a00      	cmp	r2, #0
    5c62:	d12f      	bne.n	5cc4 <__aeabi_dsub+0x594>
    5c64:	0002      	movs	r2, r0
    5c66:	430a      	orrs	r2, r1
    5c68:	d100      	bne.n	5c6c <__aeabi_dsub+0x53c>
    5c6a:	e084      	b.n	5d76 <__aeabi_dsub+0x646>
    5c6c:	0007      	movs	r7, r0
    5c6e:	000d      	movs	r5, r1
    5c70:	469a      	mov	sl, r3
    5c72:	4c57      	ldr	r4, [pc, #348]	; (5dd0 <__aeabi_dsub+0x6a0>)
    5c74:	e588      	b.n	5788 <__aeabi_dsub+0x58>
    5c76:	433d      	orrs	r5, r7
    5c78:	1e6f      	subs	r7, r5, #1
    5c7a:	41bd      	sbcs	r5, r7
    5c7c:	b2ec      	uxtb	r4, r5
    5c7e:	2700      	movs	r7, #0
    5c80:	1b0d      	subs	r5, r1, r4
    5c82:	e760      	b.n	5b46 <__aeabi_dsub+0x416>
    5c84:	4c52      	ldr	r4, [pc, #328]	; (5dd0 <__aeabi_dsub+0x6a0>)
    5c86:	42a2      	cmp	r2, r4
    5c88:	d036      	beq.n	5cf8 <__aeabi_dsub+0x5c8>
    5c8a:	4274      	negs	r4, r6
    5c8c:	2680      	movs	r6, #128	; 0x80
    5c8e:	0436      	lsls	r6, r6, #16
    5c90:	46a1      	mov	r9, r4
    5c92:	4337      	orrs	r7, r6
    5c94:	e7be      	b.n	5c14 <__aeabi_dsub+0x4e4>
    5c96:	0002      	movs	r2, r0
    5c98:	430a      	orrs	r2, r1
    5c9a:	d100      	bne.n	5c9e <__aeabi_dsub+0x56e>
    5c9c:	e574      	b.n	5788 <__aeabi_dsub+0x58>
    5c9e:	1a6a      	subs	r2, r5, r1
    5ca0:	4690      	mov	r8, r2
    5ca2:	4545      	cmp	r5, r8
    5ca4:	41b6      	sbcs	r6, r6
    5ca6:	1a3a      	subs	r2, r7, r0
    5ca8:	4276      	negs	r6, r6
    5caa:	1b92      	subs	r2, r2, r6
    5cac:	4694      	mov	ip, r2
    5cae:	0212      	lsls	r2, r2, #8
    5cb0:	d400      	bmi.n	5cb4 <__aeabi_dsub+0x584>
    5cb2:	e5f7      	b.n	58a4 <__aeabi_dsub+0x174>
    5cb4:	1b4d      	subs	r5, r1, r5
    5cb6:	42a9      	cmp	r1, r5
    5cb8:	4189      	sbcs	r1, r1
    5cba:	1bc7      	subs	r7, r0, r7
    5cbc:	4249      	negs	r1, r1
    5cbe:	1a7f      	subs	r7, r7, r1
    5cc0:	469a      	mov	sl, r3
    5cc2:	e561      	b.n	5788 <__aeabi_dsub+0x58>
    5cc4:	0002      	movs	r2, r0
    5cc6:	430a      	orrs	r2, r1
    5cc8:	d03a      	beq.n	5d40 <__aeabi_dsub+0x610>
    5cca:	08ed      	lsrs	r5, r5, #3
    5ccc:	077c      	lsls	r4, r7, #29
    5cce:	432c      	orrs	r4, r5
    5cd0:	2580      	movs	r5, #128	; 0x80
    5cd2:	08fa      	lsrs	r2, r7, #3
    5cd4:	032d      	lsls	r5, r5, #12
    5cd6:	422a      	tst	r2, r5
    5cd8:	d008      	beq.n	5cec <__aeabi_dsub+0x5bc>
    5cda:	08c7      	lsrs	r7, r0, #3
    5cdc:	422f      	tst	r7, r5
    5cde:	d105      	bne.n	5cec <__aeabi_dsub+0x5bc>
    5ce0:	0745      	lsls	r5, r0, #29
    5ce2:	002c      	movs	r4, r5
    5ce4:	003a      	movs	r2, r7
    5ce6:	469a      	mov	sl, r3
    5ce8:	08c9      	lsrs	r1, r1, #3
    5cea:	430c      	orrs	r4, r1
    5cec:	0f67      	lsrs	r7, r4, #29
    5cee:	00d2      	lsls	r2, r2, #3
    5cf0:	00e5      	lsls	r5, r4, #3
    5cf2:	4317      	orrs	r7, r2
    5cf4:	4c36      	ldr	r4, [pc, #216]	; (5dd0 <__aeabi_dsub+0x6a0>)
    5cf6:	e547      	b.n	5788 <__aeabi_dsub+0x58>
    5cf8:	0007      	movs	r7, r0
    5cfa:	000d      	movs	r5, r1
    5cfc:	0014      	movs	r4, r2
    5cfe:	e543      	b.n	5788 <__aeabi_dsub+0x58>
    5d00:	003a      	movs	r2, r7
    5d02:	432a      	orrs	r2, r5
    5d04:	d043      	beq.n	5d8e <__aeabi_dsub+0x65e>
    5d06:	0002      	movs	r2, r0
    5d08:	430a      	orrs	r2, r1
    5d0a:	d019      	beq.n	5d40 <__aeabi_dsub+0x610>
    5d0c:	08ed      	lsrs	r5, r5, #3
    5d0e:	077c      	lsls	r4, r7, #29
    5d10:	432c      	orrs	r4, r5
    5d12:	2580      	movs	r5, #128	; 0x80
    5d14:	08fa      	lsrs	r2, r7, #3
    5d16:	032d      	lsls	r5, r5, #12
    5d18:	422a      	tst	r2, r5
    5d1a:	d007      	beq.n	5d2c <__aeabi_dsub+0x5fc>
    5d1c:	08c6      	lsrs	r6, r0, #3
    5d1e:	422e      	tst	r6, r5
    5d20:	d104      	bne.n	5d2c <__aeabi_dsub+0x5fc>
    5d22:	0747      	lsls	r7, r0, #29
    5d24:	003c      	movs	r4, r7
    5d26:	0032      	movs	r2, r6
    5d28:	08c9      	lsrs	r1, r1, #3
    5d2a:	430c      	orrs	r4, r1
    5d2c:	00d7      	lsls	r7, r2, #3
    5d2e:	0f62      	lsrs	r2, r4, #29
    5d30:	00e5      	lsls	r5, r4, #3
    5d32:	4317      	orrs	r7, r2
    5d34:	469a      	mov	sl, r3
    5d36:	4c26      	ldr	r4, [pc, #152]	; (5dd0 <__aeabi_dsub+0x6a0>)
    5d38:	e526      	b.n	5788 <__aeabi_dsub+0x58>
    5d3a:	2200      	movs	r2, #0
    5d3c:	2500      	movs	r5, #0
    5d3e:	e544      	b.n	57ca <__aeabi_dsub+0x9a>
    5d40:	4c23      	ldr	r4, [pc, #140]	; (5dd0 <__aeabi_dsub+0x6a0>)
    5d42:	e521      	b.n	5788 <__aeabi_dsub+0x58>
    5d44:	2000      	movs	r0, #0
    5d46:	e749      	b.n	5bdc <__aeabi_dsub+0x4ac>
    5d48:	2300      	movs	r3, #0
    5d4a:	2500      	movs	r5, #0
    5d4c:	e5bb      	b.n	58c6 <__aeabi_dsub+0x196>
    5d4e:	464c      	mov	r4, r9
    5d50:	003e      	movs	r6, r7
    5d52:	3c20      	subs	r4, #32
    5d54:	40e6      	lsrs	r6, r4
    5d56:	464c      	mov	r4, r9
    5d58:	46b4      	mov	ip, r6
    5d5a:	2c20      	cmp	r4, #32
    5d5c:	d031      	beq.n	5dc2 <__aeabi_dsub+0x692>
    5d5e:	2440      	movs	r4, #64	; 0x40
    5d60:	464e      	mov	r6, r9
    5d62:	1ba6      	subs	r6, r4, r6
    5d64:	40b7      	lsls	r7, r6
    5d66:	433d      	orrs	r5, r7
    5d68:	1e6c      	subs	r4, r5, #1
    5d6a:	41a5      	sbcs	r5, r4
    5d6c:	4664      	mov	r4, ip
    5d6e:	432c      	orrs	r4, r5
    5d70:	2700      	movs	r7, #0
    5d72:	1b0d      	subs	r5, r1, r4
    5d74:	e6e7      	b.n	5b46 <__aeabi_dsub+0x416>
    5d76:	2280      	movs	r2, #128	; 0x80
    5d78:	2300      	movs	r3, #0
    5d7a:	0312      	lsls	r2, r2, #12
    5d7c:	4c14      	ldr	r4, [pc, #80]	; (5dd0 <__aeabi_dsub+0x6a0>)
    5d7e:	2500      	movs	r5, #0
    5d80:	e5a1      	b.n	58c6 <__aeabi_dsub+0x196>
    5d82:	433d      	orrs	r5, r7
    5d84:	1e6f      	subs	r7, r5, #1
    5d86:	41bd      	sbcs	r5, r7
    5d88:	2700      	movs	r7, #0
    5d8a:	b2ed      	uxtb	r5, r5
    5d8c:	e760      	b.n	5c50 <__aeabi_dsub+0x520>
    5d8e:	0007      	movs	r7, r0
    5d90:	000d      	movs	r5, r1
    5d92:	4c0f      	ldr	r4, [pc, #60]	; (5dd0 <__aeabi_dsub+0x6a0>)
    5d94:	e4f8      	b.n	5788 <__aeabi_dsub+0x58>
    5d96:	0007      	movs	r7, r0
    5d98:	000d      	movs	r5, r1
    5d9a:	e4f5      	b.n	5788 <__aeabi_dsub+0x58>
    5d9c:	464e      	mov	r6, r9
    5d9e:	003c      	movs	r4, r7
    5da0:	3e20      	subs	r6, #32
    5da2:	40f4      	lsrs	r4, r6
    5da4:	46a0      	mov	r8, r4
    5da6:	464c      	mov	r4, r9
    5da8:	2c20      	cmp	r4, #32
    5daa:	d00e      	beq.n	5dca <__aeabi_dsub+0x69a>
    5dac:	2440      	movs	r4, #64	; 0x40
    5dae:	464e      	mov	r6, r9
    5db0:	1ba4      	subs	r4, r4, r6
    5db2:	40a7      	lsls	r7, r4
    5db4:	433d      	orrs	r5, r7
    5db6:	1e6f      	subs	r7, r5, #1
    5db8:	41bd      	sbcs	r5, r7
    5dba:	4644      	mov	r4, r8
    5dbc:	2700      	movs	r7, #0
    5dbe:	4325      	orrs	r5, r4
    5dc0:	e746      	b.n	5c50 <__aeabi_dsub+0x520>
    5dc2:	2700      	movs	r7, #0
    5dc4:	e7cf      	b.n	5d66 <__aeabi_dsub+0x636>
    5dc6:	000d      	movs	r5, r1
    5dc8:	e573      	b.n	58b2 <__aeabi_dsub+0x182>
    5dca:	2700      	movs	r7, #0
    5dcc:	e7f2      	b.n	5db4 <__aeabi_dsub+0x684>
    5dce:	46c0      	nop			; (mov r8, r8)
    5dd0:	000007ff 	.word	0x000007ff
    5dd4:	ff7fffff 	.word	0xff7fffff

00005dd8 <__aeabi_dcmpun>:
    5dd8:	b570      	push	{r4, r5, r6, lr}
    5dda:	4e0e      	ldr	r6, [pc, #56]	; (5e14 <__aeabi_dcmpun+0x3c>)
    5ddc:	030c      	lsls	r4, r1, #12
    5dde:	031d      	lsls	r5, r3, #12
    5de0:	0049      	lsls	r1, r1, #1
    5de2:	005b      	lsls	r3, r3, #1
    5de4:	0b24      	lsrs	r4, r4, #12
    5de6:	0d49      	lsrs	r1, r1, #21
    5de8:	0b2d      	lsrs	r5, r5, #12
    5dea:	0d5b      	lsrs	r3, r3, #21
    5dec:	42b1      	cmp	r1, r6
    5dee:	d004      	beq.n	5dfa <__aeabi_dcmpun+0x22>
    5df0:	4908      	ldr	r1, [pc, #32]	; (5e14 <__aeabi_dcmpun+0x3c>)
    5df2:	2000      	movs	r0, #0
    5df4:	428b      	cmp	r3, r1
    5df6:	d008      	beq.n	5e0a <__aeabi_dcmpun+0x32>
    5df8:	bd70      	pop	{r4, r5, r6, pc}
    5dfa:	4304      	orrs	r4, r0
    5dfc:	2001      	movs	r0, #1
    5dfe:	2c00      	cmp	r4, #0
    5e00:	d1fa      	bne.n	5df8 <__aeabi_dcmpun+0x20>
    5e02:	4904      	ldr	r1, [pc, #16]	; (5e14 <__aeabi_dcmpun+0x3c>)
    5e04:	2000      	movs	r0, #0
    5e06:	428b      	cmp	r3, r1
    5e08:	d1f6      	bne.n	5df8 <__aeabi_dcmpun+0x20>
    5e0a:	4315      	orrs	r5, r2
    5e0c:	0028      	movs	r0, r5
    5e0e:	1e45      	subs	r5, r0, #1
    5e10:	41a8      	sbcs	r0, r5
    5e12:	e7f1      	b.n	5df8 <__aeabi_dcmpun+0x20>
    5e14:	000007ff 	.word	0x000007ff

00005e18 <__aeabi_d2iz>:
    5e18:	030b      	lsls	r3, r1, #12
    5e1a:	b530      	push	{r4, r5, lr}
    5e1c:	4d13      	ldr	r5, [pc, #76]	; (5e6c <__aeabi_d2iz+0x54>)
    5e1e:	0b1a      	lsrs	r2, r3, #12
    5e20:	004b      	lsls	r3, r1, #1
    5e22:	0d5b      	lsrs	r3, r3, #21
    5e24:	0fc9      	lsrs	r1, r1, #31
    5e26:	2400      	movs	r4, #0
    5e28:	42ab      	cmp	r3, r5
    5e2a:	dd11      	ble.n	5e50 <__aeabi_d2iz+0x38>
    5e2c:	4c10      	ldr	r4, [pc, #64]	; (5e70 <__aeabi_d2iz+0x58>)
    5e2e:	42a3      	cmp	r3, r4
    5e30:	dc10      	bgt.n	5e54 <__aeabi_d2iz+0x3c>
    5e32:	2480      	movs	r4, #128	; 0x80
    5e34:	0364      	lsls	r4, r4, #13
    5e36:	4322      	orrs	r2, r4
    5e38:	4c0e      	ldr	r4, [pc, #56]	; (5e74 <__aeabi_d2iz+0x5c>)
    5e3a:	1ae4      	subs	r4, r4, r3
    5e3c:	2c1f      	cmp	r4, #31
    5e3e:	dd0c      	ble.n	5e5a <__aeabi_d2iz+0x42>
    5e40:	480d      	ldr	r0, [pc, #52]	; (5e78 <__aeabi_d2iz+0x60>)
    5e42:	1ac3      	subs	r3, r0, r3
    5e44:	40da      	lsrs	r2, r3
    5e46:	0013      	movs	r3, r2
    5e48:	425c      	negs	r4, r3
    5e4a:	2900      	cmp	r1, #0
    5e4c:	d100      	bne.n	5e50 <__aeabi_d2iz+0x38>
    5e4e:	001c      	movs	r4, r3
    5e50:	0020      	movs	r0, r4
    5e52:	bd30      	pop	{r4, r5, pc}
    5e54:	4b09      	ldr	r3, [pc, #36]	; (5e7c <__aeabi_d2iz+0x64>)
    5e56:	18cc      	adds	r4, r1, r3
    5e58:	e7fa      	b.n	5e50 <__aeabi_d2iz+0x38>
    5e5a:	40e0      	lsrs	r0, r4
    5e5c:	4c08      	ldr	r4, [pc, #32]	; (5e80 <__aeabi_d2iz+0x68>)
    5e5e:	46a4      	mov	ip, r4
    5e60:	4463      	add	r3, ip
    5e62:	409a      	lsls	r2, r3
    5e64:	0013      	movs	r3, r2
    5e66:	4303      	orrs	r3, r0
    5e68:	e7ee      	b.n	5e48 <__aeabi_d2iz+0x30>
    5e6a:	46c0      	nop			; (mov r8, r8)
    5e6c:	000003fe 	.word	0x000003fe
    5e70:	0000041d 	.word	0x0000041d
    5e74:	00000433 	.word	0x00000433
    5e78:	00000413 	.word	0x00000413
    5e7c:	7fffffff 	.word	0x7fffffff
    5e80:	fffffbed 	.word	0xfffffbed

00005e84 <__aeabi_i2d>:
    5e84:	b570      	push	{r4, r5, r6, lr}
    5e86:	2800      	cmp	r0, #0
    5e88:	d030      	beq.n	5eec <__aeabi_i2d+0x68>
    5e8a:	17c3      	asrs	r3, r0, #31
    5e8c:	18c4      	adds	r4, r0, r3
    5e8e:	405c      	eors	r4, r3
    5e90:	0fc5      	lsrs	r5, r0, #31
    5e92:	0020      	movs	r0, r4
    5e94:	f000 f950 	bl	6138 <__clzsi2>
    5e98:	4b17      	ldr	r3, [pc, #92]	; (5ef8 <__aeabi_i2d+0x74>)
    5e9a:	4a18      	ldr	r2, [pc, #96]	; (5efc <__aeabi_i2d+0x78>)
    5e9c:	1a1b      	subs	r3, r3, r0
    5e9e:	1ad2      	subs	r2, r2, r3
    5ea0:	2a1f      	cmp	r2, #31
    5ea2:	dd18      	ble.n	5ed6 <__aeabi_i2d+0x52>
    5ea4:	4a16      	ldr	r2, [pc, #88]	; (5f00 <__aeabi_i2d+0x7c>)
    5ea6:	1ad2      	subs	r2, r2, r3
    5ea8:	4094      	lsls	r4, r2
    5eaa:	2200      	movs	r2, #0
    5eac:	0324      	lsls	r4, r4, #12
    5eae:	055b      	lsls	r3, r3, #21
    5eb0:	0b24      	lsrs	r4, r4, #12
    5eb2:	0d5b      	lsrs	r3, r3, #21
    5eb4:	2100      	movs	r1, #0
    5eb6:	0010      	movs	r0, r2
    5eb8:	0324      	lsls	r4, r4, #12
    5eba:	0d0a      	lsrs	r2, r1, #20
    5ebc:	0512      	lsls	r2, r2, #20
    5ebe:	0b24      	lsrs	r4, r4, #12
    5ec0:	4314      	orrs	r4, r2
    5ec2:	4a10      	ldr	r2, [pc, #64]	; (5f04 <__aeabi_i2d+0x80>)
    5ec4:	051b      	lsls	r3, r3, #20
    5ec6:	4014      	ands	r4, r2
    5ec8:	431c      	orrs	r4, r3
    5eca:	0064      	lsls	r4, r4, #1
    5ecc:	07ed      	lsls	r5, r5, #31
    5ece:	0864      	lsrs	r4, r4, #1
    5ed0:	432c      	orrs	r4, r5
    5ed2:	0021      	movs	r1, r4
    5ed4:	bd70      	pop	{r4, r5, r6, pc}
    5ed6:	0021      	movs	r1, r4
    5ed8:	4091      	lsls	r1, r2
    5eda:	000a      	movs	r2, r1
    5edc:	210b      	movs	r1, #11
    5ede:	1a08      	subs	r0, r1, r0
    5ee0:	40c4      	lsrs	r4, r0
    5ee2:	055b      	lsls	r3, r3, #21
    5ee4:	0324      	lsls	r4, r4, #12
    5ee6:	0b24      	lsrs	r4, r4, #12
    5ee8:	0d5b      	lsrs	r3, r3, #21
    5eea:	e7e3      	b.n	5eb4 <__aeabi_i2d+0x30>
    5eec:	2500      	movs	r5, #0
    5eee:	2300      	movs	r3, #0
    5ef0:	2400      	movs	r4, #0
    5ef2:	2200      	movs	r2, #0
    5ef4:	e7de      	b.n	5eb4 <__aeabi_i2d+0x30>
    5ef6:	46c0      	nop			; (mov r8, r8)
    5ef8:	0000041e 	.word	0x0000041e
    5efc:	00000433 	.word	0x00000433
    5f00:	00000413 	.word	0x00000413
    5f04:	800fffff 	.word	0x800fffff

00005f08 <__aeabi_ui2d>:
    5f08:	b570      	push	{r4, r5, r6, lr}
    5f0a:	1e05      	subs	r5, r0, #0
    5f0c:	d028      	beq.n	5f60 <__aeabi_ui2d+0x58>
    5f0e:	f000 f913 	bl	6138 <__clzsi2>
    5f12:	4b15      	ldr	r3, [pc, #84]	; (5f68 <__aeabi_ui2d+0x60>)
    5f14:	4a15      	ldr	r2, [pc, #84]	; (5f6c <__aeabi_ui2d+0x64>)
    5f16:	1a1b      	subs	r3, r3, r0
    5f18:	1ad2      	subs	r2, r2, r3
    5f1a:	2a1f      	cmp	r2, #31
    5f1c:	dd16      	ble.n	5f4c <__aeabi_ui2d+0x44>
    5f1e:	002c      	movs	r4, r5
    5f20:	4a13      	ldr	r2, [pc, #76]	; (5f70 <__aeabi_ui2d+0x68>)
    5f22:	2500      	movs	r5, #0
    5f24:	1ad2      	subs	r2, r2, r3
    5f26:	4094      	lsls	r4, r2
    5f28:	055a      	lsls	r2, r3, #21
    5f2a:	0324      	lsls	r4, r4, #12
    5f2c:	0b24      	lsrs	r4, r4, #12
    5f2e:	0d52      	lsrs	r2, r2, #21
    5f30:	2100      	movs	r1, #0
    5f32:	0324      	lsls	r4, r4, #12
    5f34:	0d0b      	lsrs	r3, r1, #20
    5f36:	0b24      	lsrs	r4, r4, #12
    5f38:	051b      	lsls	r3, r3, #20
    5f3a:	4323      	orrs	r3, r4
    5f3c:	4c0d      	ldr	r4, [pc, #52]	; (5f74 <__aeabi_ui2d+0x6c>)
    5f3e:	0512      	lsls	r2, r2, #20
    5f40:	4023      	ands	r3, r4
    5f42:	4313      	orrs	r3, r2
    5f44:	005b      	lsls	r3, r3, #1
    5f46:	0028      	movs	r0, r5
    5f48:	0859      	lsrs	r1, r3, #1
    5f4a:	bd70      	pop	{r4, r5, r6, pc}
    5f4c:	210b      	movs	r1, #11
    5f4e:	002c      	movs	r4, r5
    5f50:	1a08      	subs	r0, r1, r0
    5f52:	40c4      	lsrs	r4, r0
    5f54:	4095      	lsls	r5, r2
    5f56:	0324      	lsls	r4, r4, #12
    5f58:	055a      	lsls	r2, r3, #21
    5f5a:	0b24      	lsrs	r4, r4, #12
    5f5c:	0d52      	lsrs	r2, r2, #21
    5f5e:	e7e7      	b.n	5f30 <__aeabi_ui2d+0x28>
    5f60:	2200      	movs	r2, #0
    5f62:	2400      	movs	r4, #0
    5f64:	e7e4      	b.n	5f30 <__aeabi_ui2d+0x28>
    5f66:	46c0      	nop			; (mov r8, r8)
    5f68:	0000041e 	.word	0x0000041e
    5f6c:	00000433 	.word	0x00000433
    5f70:	00000413 	.word	0x00000413
    5f74:	800fffff 	.word	0x800fffff

00005f78 <__aeabi_f2d>:
    5f78:	0042      	lsls	r2, r0, #1
    5f7a:	0e12      	lsrs	r2, r2, #24
    5f7c:	1c51      	adds	r1, r2, #1
    5f7e:	0243      	lsls	r3, r0, #9
    5f80:	b2c9      	uxtb	r1, r1
    5f82:	b570      	push	{r4, r5, r6, lr}
    5f84:	0a5d      	lsrs	r5, r3, #9
    5f86:	0fc4      	lsrs	r4, r0, #31
    5f88:	2901      	cmp	r1, #1
    5f8a:	dd15      	ble.n	5fb8 <__aeabi_f2d+0x40>
    5f8c:	21e0      	movs	r1, #224	; 0xe0
    5f8e:	0089      	lsls	r1, r1, #2
    5f90:	468c      	mov	ip, r1
    5f92:	076d      	lsls	r5, r5, #29
    5f94:	0b1b      	lsrs	r3, r3, #12
    5f96:	4462      	add	r2, ip
    5f98:	2100      	movs	r1, #0
    5f9a:	0028      	movs	r0, r5
    5f9c:	0d0d      	lsrs	r5, r1, #20
    5f9e:	052d      	lsls	r5, r5, #20
    5fa0:	432b      	orrs	r3, r5
    5fa2:	4d1c      	ldr	r5, [pc, #112]	; (6014 <__aeabi_f2d+0x9c>)
    5fa4:	0552      	lsls	r2, r2, #21
    5fa6:	402b      	ands	r3, r5
    5fa8:	0852      	lsrs	r2, r2, #1
    5faa:	4313      	orrs	r3, r2
    5fac:	005b      	lsls	r3, r3, #1
    5fae:	07e4      	lsls	r4, r4, #31
    5fb0:	085b      	lsrs	r3, r3, #1
    5fb2:	4323      	orrs	r3, r4
    5fb4:	0019      	movs	r1, r3
    5fb6:	bd70      	pop	{r4, r5, r6, pc}
    5fb8:	2a00      	cmp	r2, #0
    5fba:	d115      	bne.n	5fe8 <__aeabi_f2d+0x70>
    5fbc:	2d00      	cmp	r5, #0
    5fbe:	d01f      	beq.n	6000 <__aeabi_f2d+0x88>
    5fc0:	0028      	movs	r0, r5
    5fc2:	f000 f8b9 	bl	6138 <__clzsi2>
    5fc6:	280a      	cmp	r0, #10
    5fc8:	dc1d      	bgt.n	6006 <__aeabi_f2d+0x8e>
    5fca:	230b      	movs	r3, #11
    5fcc:	002a      	movs	r2, r5
    5fce:	1a1b      	subs	r3, r3, r0
    5fd0:	40da      	lsrs	r2, r3
    5fd2:	0013      	movs	r3, r2
    5fd4:	0002      	movs	r2, r0
    5fd6:	3215      	adds	r2, #21
    5fd8:	4095      	lsls	r5, r2
    5fda:	4a0f      	ldr	r2, [pc, #60]	; (6018 <__aeabi_f2d+0xa0>)
    5fdc:	031b      	lsls	r3, r3, #12
    5fde:	1a12      	subs	r2, r2, r0
    5fe0:	0552      	lsls	r2, r2, #21
    5fe2:	0b1b      	lsrs	r3, r3, #12
    5fe4:	0d52      	lsrs	r2, r2, #21
    5fe6:	e7d7      	b.n	5f98 <__aeabi_f2d+0x20>
    5fe8:	2d00      	cmp	r5, #0
    5fea:	d006      	beq.n	5ffa <__aeabi_f2d+0x82>
    5fec:	2280      	movs	r2, #128	; 0x80
    5fee:	0b1b      	lsrs	r3, r3, #12
    5ff0:	0312      	lsls	r2, r2, #12
    5ff2:	4313      	orrs	r3, r2
    5ff4:	076d      	lsls	r5, r5, #29
    5ff6:	4a09      	ldr	r2, [pc, #36]	; (601c <__aeabi_f2d+0xa4>)
    5ff8:	e7ce      	b.n	5f98 <__aeabi_f2d+0x20>
    5ffa:	4a08      	ldr	r2, [pc, #32]	; (601c <__aeabi_f2d+0xa4>)
    5ffc:	2300      	movs	r3, #0
    5ffe:	e7cb      	b.n	5f98 <__aeabi_f2d+0x20>
    6000:	2200      	movs	r2, #0
    6002:	2300      	movs	r3, #0
    6004:	e7c8      	b.n	5f98 <__aeabi_f2d+0x20>
    6006:	0003      	movs	r3, r0
    6008:	3b0b      	subs	r3, #11
    600a:	409d      	lsls	r5, r3
    600c:	002b      	movs	r3, r5
    600e:	2500      	movs	r5, #0
    6010:	e7e3      	b.n	5fda <__aeabi_f2d+0x62>
    6012:	46c0      	nop			; (mov r8, r8)
    6014:	800fffff 	.word	0x800fffff
    6018:	00000389 	.word	0x00000389
    601c:	000007ff 	.word	0x000007ff

00006020 <__aeabi_d2f>:
    6020:	004b      	lsls	r3, r1, #1
    6022:	b570      	push	{r4, r5, r6, lr}
    6024:	0d5e      	lsrs	r6, r3, #21
    6026:	030c      	lsls	r4, r1, #12
    6028:	1c75      	adds	r5, r6, #1
    602a:	0a64      	lsrs	r4, r4, #9
    602c:	0f42      	lsrs	r2, r0, #29
    602e:	056d      	lsls	r5, r5, #21
    6030:	4322      	orrs	r2, r4
    6032:	0fc9      	lsrs	r1, r1, #31
    6034:	00c4      	lsls	r4, r0, #3
    6036:	0d6d      	lsrs	r5, r5, #21
    6038:	2d01      	cmp	r5, #1
    603a:	dd2a      	ble.n	6092 <__aeabi_d2f+0x72>
    603c:	4b3b      	ldr	r3, [pc, #236]	; (612c <__aeabi_d2f+0x10c>)
    603e:	18f3      	adds	r3, r6, r3
    6040:	2bfe      	cmp	r3, #254	; 0xfe
    6042:	dc1a      	bgt.n	607a <__aeabi_d2f+0x5a>
    6044:	2b00      	cmp	r3, #0
    6046:	dd42      	ble.n	60ce <__aeabi_d2f+0xae>
    6048:	0180      	lsls	r0, r0, #6
    604a:	1e45      	subs	r5, r0, #1
    604c:	41a8      	sbcs	r0, r5
    604e:	00d2      	lsls	r2, r2, #3
    6050:	4310      	orrs	r0, r2
    6052:	0f62      	lsrs	r2, r4, #29
    6054:	4302      	orrs	r2, r0
    6056:	0750      	lsls	r0, r2, #29
    6058:	d004      	beq.n	6064 <__aeabi_d2f+0x44>
    605a:	200f      	movs	r0, #15
    605c:	4010      	ands	r0, r2
    605e:	2804      	cmp	r0, #4
    6060:	d000      	beq.n	6064 <__aeabi_d2f+0x44>
    6062:	3204      	adds	r2, #4
    6064:	2080      	movs	r0, #128	; 0x80
    6066:	04c0      	lsls	r0, r0, #19
    6068:	4010      	ands	r0, r2
    606a:	d021      	beq.n	60b0 <__aeabi_d2f+0x90>
    606c:	3301      	adds	r3, #1
    606e:	2bff      	cmp	r3, #255	; 0xff
    6070:	d003      	beq.n	607a <__aeabi_d2f+0x5a>
    6072:	0192      	lsls	r2, r2, #6
    6074:	0a52      	lsrs	r2, r2, #9
    6076:	b2db      	uxtb	r3, r3
    6078:	e001      	b.n	607e <__aeabi_d2f+0x5e>
    607a:	23ff      	movs	r3, #255	; 0xff
    607c:	2200      	movs	r2, #0
    607e:	0252      	lsls	r2, r2, #9
    6080:	0a52      	lsrs	r2, r2, #9
    6082:	05db      	lsls	r3, r3, #23
    6084:	4313      	orrs	r3, r2
    6086:	005b      	lsls	r3, r3, #1
    6088:	07c9      	lsls	r1, r1, #31
    608a:	085b      	lsrs	r3, r3, #1
    608c:	430b      	orrs	r3, r1
    608e:	0018      	movs	r0, r3
    6090:	bd70      	pop	{r4, r5, r6, pc}
    6092:	2e00      	cmp	r6, #0
    6094:	d007      	beq.n	60a6 <__aeabi_d2f+0x86>
    6096:	4314      	orrs	r4, r2
    6098:	d0ef      	beq.n	607a <__aeabi_d2f+0x5a>
    609a:	2080      	movs	r0, #128	; 0x80
    609c:	00d2      	lsls	r2, r2, #3
    609e:	0480      	lsls	r0, r0, #18
    60a0:	4302      	orrs	r2, r0
    60a2:	23ff      	movs	r3, #255	; 0xff
    60a4:	e7d7      	b.n	6056 <__aeabi_d2f+0x36>
    60a6:	4322      	orrs	r2, r4
    60a8:	2300      	movs	r3, #0
    60aa:	2a00      	cmp	r2, #0
    60ac:	d003      	beq.n	60b6 <__aeabi_d2f+0x96>
    60ae:	2205      	movs	r2, #5
    60b0:	08d2      	lsrs	r2, r2, #3
    60b2:	2bff      	cmp	r3, #255	; 0xff
    60b4:	d003      	beq.n	60be <__aeabi_d2f+0x9e>
    60b6:	0252      	lsls	r2, r2, #9
    60b8:	0a52      	lsrs	r2, r2, #9
    60ba:	b2db      	uxtb	r3, r3
    60bc:	e7df      	b.n	607e <__aeabi_d2f+0x5e>
    60be:	2a00      	cmp	r2, #0
    60c0:	d032      	beq.n	6128 <__aeabi_d2f+0x108>
    60c2:	2080      	movs	r0, #128	; 0x80
    60c4:	03c0      	lsls	r0, r0, #15
    60c6:	4302      	orrs	r2, r0
    60c8:	0252      	lsls	r2, r2, #9
    60ca:	0a52      	lsrs	r2, r2, #9
    60cc:	e7d7      	b.n	607e <__aeabi_d2f+0x5e>
    60ce:	0018      	movs	r0, r3
    60d0:	3017      	adds	r0, #23
    60d2:	db14      	blt.n	60fe <__aeabi_d2f+0xde>
    60d4:	2080      	movs	r0, #128	; 0x80
    60d6:	0400      	lsls	r0, r0, #16
    60d8:	4302      	orrs	r2, r0
    60da:	201e      	movs	r0, #30
    60dc:	1ac0      	subs	r0, r0, r3
    60de:	281f      	cmp	r0, #31
    60e0:	dc0f      	bgt.n	6102 <__aeabi_d2f+0xe2>
    60e2:	0025      	movs	r5, r4
    60e4:	4b12      	ldr	r3, [pc, #72]	; (6130 <__aeabi_d2f+0x110>)
    60e6:	18f3      	adds	r3, r6, r3
    60e8:	409d      	lsls	r5, r3
    60ea:	1e6e      	subs	r6, r5, #1
    60ec:	41b5      	sbcs	r5, r6
    60ee:	409a      	lsls	r2, r3
    60f0:	002b      	movs	r3, r5
    60f2:	4313      	orrs	r3, r2
    60f4:	0022      	movs	r2, r4
    60f6:	40c2      	lsrs	r2, r0
    60f8:	431a      	orrs	r2, r3
    60fa:	2300      	movs	r3, #0
    60fc:	e7ab      	b.n	6056 <__aeabi_d2f+0x36>
    60fe:	2300      	movs	r3, #0
    6100:	e7d5      	b.n	60ae <__aeabi_d2f+0x8e>
    6102:	2502      	movs	r5, #2
    6104:	426d      	negs	r5, r5
    6106:	1aeb      	subs	r3, r5, r3
    6108:	0015      	movs	r5, r2
    610a:	40dd      	lsrs	r5, r3
    610c:	2820      	cmp	r0, #32
    610e:	d009      	beq.n	6124 <__aeabi_d2f+0x104>
    6110:	4b08      	ldr	r3, [pc, #32]	; (6134 <__aeabi_d2f+0x114>)
    6112:	18f3      	adds	r3, r6, r3
    6114:	409a      	lsls	r2, r3
    6116:	4314      	orrs	r4, r2
    6118:	1e62      	subs	r2, r4, #1
    611a:	4194      	sbcs	r4, r2
    611c:	0022      	movs	r2, r4
    611e:	2300      	movs	r3, #0
    6120:	432a      	orrs	r2, r5
    6122:	e798      	b.n	6056 <__aeabi_d2f+0x36>
    6124:	2200      	movs	r2, #0
    6126:	e7f6      	b.n	6116 <__aeabi_d2f+0xf6>
    6128:	2200      	movs	r2, #0
    612a:	e7a8      	b.n	607e <__aeabi_d2f+0x5e>
    612c:	fffffc80 	.word	0xfffffc80
    6130:	fffffc82 	.word	0xfffffc82
    6134:	fffffca2 	.word	0xfffffca2

00006138 <__clzsi2>:
    6138:	211c      	movs	r1, #28
    613a:	2301      	movs	r3, #1
    613c:	041b      	lsls	r3, r3, #16
    613e:	4298      	cmp	r0, r3
    6140:	d301      	bcc.n	6146 <__clzsi2+0xe>
    6142:	0c00      	lsrs	r0, r0, #16
    6144:	3910      	subs	r1, #16
    6146:	0a1b      	lsrs	r3, r3, #8
    6148:	4298      	cmp	r0, r3
    614a:	d301      	bcc.n	6150 <__clzsi2+0x18>
    614c:	0a00      	lsrs	r0, r0, #8
    614e:	3908      	subs	r1, #8
    6150:	091b      	lsrs	r3, r3, #4
    6152:	4298      	cmp	r0, r3
    6154:	d301      	bcc.n	615a <__clzsi2+0x22>
    6156:	0900      	lsrs	r0, r0, #4
    6158:	3904      	subs	r1, #4
    615a:	a202      	add	r2, pc, #8	; (adr r2, 6164 <__clzsi2+0x2c>)
    615c:	5c10      	ldrb	r0, [r2, r0]
    615e:	1840      	adds	r0, r0, r1
    6160:	4770      	bx	lr
    6162:	46c0      	nop			; (mov r8, r8)
    6164:	02020304 	.word	0x02020304
    6168:	01010101 	.word	0x01010101
	...

00006174 <__errno>:
    6174:	4b01      	ldr	r3, [pc, #4]	; (617c <__errno+0x8>)
    6176:	6818      	ldr	r0, [r3, #0]
    6178:	4770      	bx	lr
    617a:	46c0      	nop			; (mov r8, r8)
    617c:	200004a0 	.word	0x200004a0

00006180 <__libc_init_array>:
    6180:	b570      	push	{r4, r5, r6, lr}
    6182:	4e0d      	ldr	r6, [pc, #52]	; (61b8 <__libc_init_array+0x38>)
    6184:	4d0d      	ldr	r5, [pc, #52]	; (61bc <__libc_init_array+0x3c>)
    6186:	2400      	movs	r4, #0
    6188:	1bad      	subs	r5, r5, r6
    618a:	10ad      	asrs	r5, r5, #2
    618c:	d005      	beq.n	619a <__libc_init_array+0x1a>
    618e:	00a3      	lsls	r3, r4, #2
    6190:	58f3      	ldr	r3, [r6, r3]
    6192:	3401      	adds	r4, #1
    6194:	4798      	blx	r3
    6196:	42a5      	cmp	r5, r4
    6198:	d1f9      	bne.n	618e <__libc_init_array+0xe>
    619a:	f000 f92d 	bl	63f8 <_init>
    619e:	4e08      	ldr	r6, [pc, #32]	; (61c0 <__libc_init_array+0x40>)
    61a0:	4d08      	ldr	r5, [pc, #32]	; (61c4 <__libc_init_array+0x44>)
    61a2:	2400      	movs	r4, #0
    61a4:	1bad      	subs	r5, r5, r6
    61a6:	10ad      	asrs	r5, r5, #2
    61a8:	d005      	beq.n	61b6 <__libc_init_array+0x36>
    61aa:	00a3      	lsls	r3, r4, #2
    61ac:	58f3      	ldr	r3, [r6, r3]
    61ae:	3401      	adds	r4, #1
    61b0:	4798      	blx	r3
    61b2:	42a5      	cmp	r5, r4
    61b4:	d1f9      	bne.n	61aa <__libc_init_array+0x2a>
    61b6:	bd70      	pop	{r4, r5, r6, pc}
    61b8:	00006404 	.word	0x00006404
    61bc:	00006404 	.word	0x00006404
    61c0:	00006404 	.word	0x00006404
    61c4:	0000640c 	.word	0x0000640c

000061c8 <register_fini>:
    61c8:	4b03      	ldr	r3, [pc, #12]	; (61d8 <register_fini+0x10>)
    61ca:	b510      	push	{r4, lr}
    61cc:	2b00      	cmp	r3, #0
    61ce:	d002      	beq.n	61d6 <register_fini+0xe>
    61d0:	4802      	ldr	r0, [pc, #8]	; (61dc <register_fini+0x14>)
    61d2:	f000 f805 	bl	61e0 <atexit>
    61d6:	bd10      	pop	{r4, pc}
    61d8:	00000000 	.word	0x00000000
    61dc:	000061f1 	.word	0x000061f1

000061e0 <atexit>:
    61e0:	b510      	push	{r4, lr}
    61e2:	0001      	movs	r1, r0
    61e4:	2300      	movs	r3, #0
    61e6:	2200      	movs	r2, #0
    61e8:	2000      	movs	r0, #0
    61ea:	f000 f81b 	bl	6224 <__register_exitproc>
    61ee:	bd10      	pop	{r4, pc}

000061f0 <__libc_fini_array>:
    61f0:	b570      	push	{r4, r5, r6, lr}
    61f2:	4b09      	ldr	r3, [pc, #36]	; (6218 <__libc_fini_array+0x28>)
    61f4:	4c09      	ldr	r4, [pc, #36]	; (621c <__libc_fini_array+0x2c>)
    61f6:	1ae4      	subs	r4, r4, r3
    61f8:	10a4      	asrs	r4, r4, #2
    61fa:	d009      	beq.n	6210 <__libc_fini_array+0x20>
    61fc:	4a08      	ldr	r2, [pc, #32]	; (6220 <__libc_fini_array+0x30>)
    61fe:	18a5      	adds	r5, r4, r2
    6200:	00ad      	lsls	r5, r5, #2
    6202:	18ed      	adds	r5, r5, r3
    6204:	682b      	ldr	r3, [r5, #0]
    6206:	3c01      	subs	r4, #1
    6208:	4798      	blx	r3
    620a:	3d04      	subs	r5, #4
    620c:	2c00      	cmp	r4, #0
    620e:	d1f9      	bne.n	6204 <__libc_fini_array+0x14>
    6210:	f000 f8fc 	bl	640c <_fini>
    6214:	bd70      	pop	{r4, r5, r6, pc}
    6216:	46c0      	nop			; (mov r8, r8)
    6218:	00006418 	.word	0x00006418
    621c:	0000641c 	.word	0x0000641c
    6220:	3fffffff 	.word	0x3fffffff

00006224 <__register_exitproc>:
    6224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6226:	4644      	mov	r4, r8
    6228:	465f      	mov	r7, fp
    622a:	4656      	mov	r6, sl
    622c:	464d      	mov	r5, r9
    622e:	469b      	mov	fp, r3
    6230:	4b2f      	ldr	r3, [pc, #188]	; (62f0 <__register_exitproc+0xcc>)
    6232:	b4f0      	push	{r4, r5, r6, r7}
    6234:	681c      	ldr	r4, [r3, #0]
    6236:	23a4      	movs	r3, #164	; 0xa4
    6238:	005b      	lsls	r3, r3, #1
    623a:	0005      	movs	r5, r0
    623c:	58e0      	ldr	r0, [r4, r3]
    623e:	000e      	movs	r6, r1
    6240:	4690      	mov	r8, r2
    6242:	2800      	cmp	r0, #0
    6244:	d04b      	beq.n	62de <__register_exitproc+0xba>
    6246:	6843      	ldr	r3, [r0, #4]
    6248:	2b1f      	cmp	r3, #31
    624a:	dc0d      	bgt.n	6268 <__register_exitproc+0x44>
    624c:	1c5c      	adds	r4, r3, #1
    624e:	2d00      	cmp	r5, #0
    6250:	d121      	bne.n	6296 <__register_exitproc+0x72>
    6252:	3302      	adds	r3, #2
    6254:	009b      	lsls	r3, r3, #2
    6256:	6044      	str	r4, [r0, #4]
    6258:	501e      	str	r6, [r3, r0]
    625a:	2000      	movs	r0, #0
    625c:	bc3c      	pop	{r2, r3, r4, r5}
    625e:	4690      	mov	r8, r2
    6260:	4699      	mov	r9, r3
    6262:	46a2      	mov	sl, r4
    6264:	46ab      	mov	fp, r5
    6266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6268:	4b22      	ldr	r3, [pc, #136]	; (62f4 <__register_exitproc+0xd0>)
    626a:	2b00      	cmp	r3, #0
    626c:	d03c      	beq.n	62e8 <__register_exitproc+0xc4>
    626e:	20c8      	movs	r0, #200	; 0xc8
    6270:	0040      	lsls	r0, r0, #1
    6272:	e000      	b.n	6276 <__register_exitproc+0x52>
    6274:	bf00      	nop
    6276:	2800      	cmp	r0, #0
    6278:	d036      	beq.n	62e8 <__register_exitproc+0xc4>
    627a:	22a4      	movs	r2, #164	; 0xa4
    627c:	2300      	movs	r3, #0
    627e:	0052      	lsls	r2, r2, #1
    6280:	58a1      	ldr	r1, [r4, r2]
    6282:	6043      	str	r3, [r0, #4]
    6284:	6001      	str	r1, [r0, #0]
    6286:	50a0      	str	r0, [r4, r2]
    6288:	3240      	adds	r2, #64	; 0x40
    628a:	5083      	str	r3, [r0, r2]
    628c:	3204      	adds	r2, #4
    628e:	5083      	str	r3, [r0, r2]
    6290:	2401      	movs	r4, #1
    6292:	2d00      	cmp	r5, #0
    6294:	d0dd      	beq.n	6252 <__register_exitproc+0x2e>
    6296:	009a      	lsls	r2, r3, #2
    6298:	4691      	mov	r9, r2
    629a:	4481      	add	r9, r0
    629c:	4642      	mov	r2, r8
    629e:	2188      	movs	r1, #136	; 0x88
    62a0:	464f      	mov	r7, r9
    62a2:	507a      	str	r2, [r7, r1]
    62a4:	22c4      	movs	r2, #196	; 0xc4
    62a6:	0052      	lsls	r2, r2, #1
    62a8:	4690      	mov	r8, r2
    62aa:	4480      	add	r8, r0
    62ac:	4642      	mov	r2, r8
    62ae:	3987      	subs	r1, #135	; 0x87
    62b0:	4099      	lsls	r1, r3
    62b2:	6812      	ldr	r2, [r2, #0]
    62b4:	468a      	mov	sl, r1
    62b6:	430a      	orrs	r2, r1
    62b8:	4694      	mov	ip, r2
    62ba:	4642      	mov	r2, r8
    62bc:	4661      	mov	r1, ip
    62be:	6011      	str	r1, [r2, #0]
    62c0:	2284      	movs	r2, #132	; 0x84
    62c2:	4649      	mov	r1, r9
    62c4:	465f      	mov	r7, fp
    62c6:	0052      	lsls	r2, r2, #1
    62c8:	508f      	str	r7, [r1, r2]
    62ca:	2d02      	cmp	r5, #2
    62cc:	d1c1      	bne.n	6252 <__register_exitproc+0x2e>
    62ce:	0002      	movs	r2, r0
    62d0:	4655      	mov	r5, sl
    62d2:	328d      	adds	r2, #141	; 0x8d
    62d4:	32ff      	adds	r2, #255	; 0xff
    62d6:	6811      	ldr	r1, [r2, #0]
    62d8:	430d      	orrs	r5, r1
    62da:	6015      	str	r5, [r2, #0]
    62dc:	e7b9      	b.n	6252 <__register_exitproc+0x2e>
    62de:	0020      	movs	r0, r4
    62e0:	304d      	adds	r0, #77	; 0x4d
    62e2:	30ff      	adds	r0, #255	; 0xff
    62e4:	50e0      	str	r0, [r4, r3]
    62e6:	e7ae      	b.n	6246 <__register_exitproc+0x22>
    62e8:	2001      	movs	r0, #1
    62ea:	4240      	negs	r0, r0
    62ec:	e7b6      	b.n	625c <__register_exitproc+0x38>
    62ee:	46c0      	nop			; (mov r8, r8)
    62f0:	000063f4 	.word	0x000063f4
    62f4:	00000000 	.word	0x00000000

000062f8 <senseBatPin>:
    62f8:	06000000 01000106                                .....

000062fd <senseAPin>:
    62fd:	03010001 0100010b                                .....

00006302 <senseBPin>:
    6302:	02010001 0000010a                                .....

00006307 <senseCPin>:
    6307:	03000001 00000101                                .....

0000630c <senseDPin>:
    630c:	02000001 00000100                                .....

00006311 <analogAccelPin>:
    6311:	07000001 70000007 0000776f 00000000              .......pow.....

00006320 <TWO52>:
    6320:	00000000 43300000 00000000 c3300000     ......0C......0.
    6330:	0000424c 000041aa 000041aa 000041a8     LB...A...A...A..
    6340:	0000423e 0000423e 00004234 000041a8     >B..>B..4B...A..
    6350:	0000423e 00004234 0000423e 000041a8     >B..4B..>B...A..
    6360:	00004244 00004244 00004244 000042ce     DB..DB..DB...B..
    6370:	00004be4 00004ab2 00004bb8 00004aa8     .K...J...K...J..
    6380:	00004bb8 00004bc2 00004bb8 00004aa8     .K...K...K...J..
    6390:	00004ab2 00004ab2 00004bc2 00004aa8     .J...J...K...J..
    63a0:	00004a9e 00004a9e 00004a9e 00004e14     .J...J...J...N..
    63b0:	0000542c 000052ec 000052ec 000052ea     ,T...R...R...R..
    63c0:	00005404 00005404 000053f6 000052ea     .T...T...S...R..
    63d0:	00005404 000053f6 00005404 000052ea     .T...S...T...R..
    63e0:	0000540c 0000540c 0000540c 0000560c     .T...T...T...V..
    63f0:	00000043                                C...

000063f4 <_global_impure_ptr>:
    63f4:	20000078                                x.. 

000063f8 <_init>:
    63f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63fa:	46c0      	nop			; (mov r8, r8)
    63fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    63fe:	bc08      	pop	{r3}
    6400:	469e      	mov	lr, r3
    6402:	4770      	bx	lr

00006404 <__init_array_start>:
    6404:	000061c9 	.word	0x000061c9

00006408 <__frame_dummy_init_array_entry>:
    6408:	000000dd                                ....

0000640c <_fini>:
    640c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    640e:	46c0      	nop			; (mov r8, r8)
    6410:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6412:	bc08      	pop	{r3}
    6414:	469e      	mov	lr, r3
    6416:	4770      	bx	lr

00006418 <__fini_array_start>:
    6418:	000000b5 	.word	0x000000b5
