
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007378  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000120  20000000  00007378  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000530  20000120  00007498  00020120  2**3
                  ALLOC
  3 .stack        00002000  20000650  000079c8  00020120  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
  6 .debug_info   00032f88  00000000  00000000  000201a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003af5  00000000  00000000  00053129  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000035b0  00000000  00000000  00056c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000538  00000000  00000000  0005a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000cd0  00000000  00000000  0005a706  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017694  00000000  00000000  0005b3d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b200  00000000  00000000  00072a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00075b4d  00000000  00000000  0007dc6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001234  00000000  00000000  000f37b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
        // Not implemented
        SystemCoreClock = __SYSTEM_CLOCK;
       0:	50 26 00 20 19 01 00 00 15 01 00 00 85 0a 00 00     P&. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	8d 11 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	bd 11 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	61 12 00 00 c9 12 00 00 00 00 00 00 00 00 00 00     a...............
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000120 	.word	0x20000120
      d4:	00000000 	.word	0x00000000
      d8:	00007378 	.word	0x00007378

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000124 	.word	0x20000124
     108:	00007378 	.word	0x00007378
     10c:	00007378 	.word	0x00007378
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
        if (pSrc != pDest) {
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
{
     11c:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d004      	beq.n	12c <Reset_Handler+0x14>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	18ca      	adds	r2, r1, r3
     128:	42a2      	cmp	r2, r4
     12a:	d332      	bcc.n	192 <Reset_Handler+0x7a>
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	4b1f      	ldr	r3, [pc, #124]	; (1ac <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
     130:	4a1f      	ldr	r2, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
     132:	4293      	cmp	r3, r2
     134:	d331      	bcc.n	19a <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     136:	21ff      	movs	r1, #255	; 0xff
     138:	4b1e      	ldr	r3, [pc, #120]	; (1b4 <Reset_Handler+0x9c>)
     13a:	4a1f      	ldr	r2, [pc, #124]	; (1b8 <Reset_Handler+0xa0>)
     13c:	438b      	bics	r3, r1
     13e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     140:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     142:	250c      	movs	r5, #12
     144:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
     146:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	4b1c      	ldr	r3, [pc, #112]	; (1bc <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	481d      	ldr	r0, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     14c:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14e:	78c3      	ldrb	r3, [r0, #3]
     150:	39fc      	subs	r1, #252	; 0xfc
     152:	438b      	bics	r3, r1
     154:	4313      	orrs	r3, r2
     156:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     158:	78c3      	ldrb	r3, [r0, #3]
     15a:	43ab      	bics	r3, r5
     15c:	4323      	orrs	r3, r4
     15e:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     160:	4b18      	ldr	r3, [pc, #96]	; (1c4 <Reset_Handler+0xac>)
     162:	7b98      	ldrb	r0, [r3, #14]
     164:	43b0      	bics	r0, r6
     166:	0006      	movs	r6, r0
     168:	2020      	movs	r0, #32
     16a:	4330      	orrs	r0, r6
     16c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     16e:	7b98      	ldrb	r0, [r3, #14]
     170:	43a8      	bics	r0, r5
     172:	4304      	orrs	r4, r0
     174:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	4388      	bics	r0, r1
     17a:	4302      	orrs	r2, r0
     17c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     17e:	2380      	movs	r3, #128	; 0x80
     180:	4a11      	ldr	r2, [pc, #68]	; (1c8 <Reset_Handler+0xb0>)
     182:	6851      	ldr	r1, [r2, #4]
     184:	430b      	orrs	r3, r1
     186:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     188:	4b10      	ldr	r3, [pc, #64]	; (1cc <Reset_Handler+0xb4>)
     18a:	4798      	blx	r3
        main();
     18c:	4b10      	ldr	r3, [pc, #64]	; (1d0 <Reset_Handler+0xb8>)
     18e:	4798      	blx	r3
     190:	e7fe      	b.n	190 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
     192:	58c5      	ldr	r5, [r0, r3]
     194:	3304      	adds	r3, #4
     196:	6015      	str	r5, [r2, #0]
     198:	e7c5      	b.n	126 <Reset_Handler+0xe>
                *pDest++ = 0;
     19a:	c302      	stmia	r3!, {r1}
     19c:	e7c9      	b.n	132 <Reset_Handler+0x1a>
     19e:	46c0      	nop			; (mov r8, r8)
     1a0:	00007378 	.word	0x00007378
     1a4:	20000000 	.word	0x20000000
     1a8:	20000120 	.word	0x20000120
     1ac:	20000120 	.word	0x20000120
     1b0:	20000650 	.word	0x20000650
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00007215 	.word	0x00007215
     1d0:	000009dd 	.word	0x000009dd

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady() {
     1e6:	b570      	push	{r4, r5, r6, lr}
     1e8:	4d08      	ldr	r5, [pc, #32]	; (20c <AT25SFHoldTillReady+0x28>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	616b      	str	r3, [r5, #20]
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_READSTATUS);
     1ee:	2105      	movs	r1, #5
     1f0:	2001      	movs	r0, #1
     1f2:	4b07      	ldr	r3, [pc, #28]	; (210 <AT25SFHoldTillReady+0x2c>)
     1f4:	4798      	blx	r3
    while (spiDataIn(MEM_SPI) & 0x01);
     1f6:	2401      	movs	r4, #1
     1f8:	0020      	movs	r0, r4
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <AT25SFHoldTillReady+0x30>)
     1fc:	4798      	blx	r3
     1fe:	4220      	tst	r0, r4
     200:	d1fa      	bne.n	1f8 <AT25SFHoldTillReady+0x14>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     202:	2380      	movs	r3, #128	; 0x80
     204:	02db      	lsls	r3, r3, #11
     206:	61ab      	str	r3, [r5, #24]
    pinHigh(cs_mem);
}
     208:	bd70      	pop	{r4, r5, r6, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	41004400 	.word	0x41004400
     210:	0000388d 	.word	0x0000388d
     214:	000038a5 	.word	0x000038a5

00000218 <AT25SFChipErase>:
void AT25SFChipErase() {
     218:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     21a:	2580      	movs	r5, #128	; 0x80
     21c:	4c06      	ldr	r4, [pc, #24]	; (238 <AT25SFChipErase+0x20>)
     21e:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     220:	4e06      	ldr	r6, [pc, #24]	; (23c <AT25SFChipErase+0x24>)
     222:	6165      	str	r5, [r4, #20]
     224:	2106      	movs	r1, #6
     226:	2001      	movs	r0, #1
     228:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_CHIP_ERASE);
     22c:	2160      	movs	r1, #96	; 0x60
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     22e:	6165      	str	r5, [r4, #20]
     230:	2001      	movs	r0, #1
     232:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     234:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     236:	bd70      	pop	{r4, r5, r6, pc}
     238:	41004400 	.word	0x41004400
     23c:	0000388d 	.word	0x0000388d

00000240 <AT25SFWriteBytes>:
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     242:	2780      	movs	r7, #128	; 0x80
     244:	0006      	movs	r6, r0
     246:	4c14      	ldr	r4, [pc, #80]	; (298 <AT25SFWriteBytes+0x58>)

    AT25SFHoldTillReady();
     248:	4b14      	ldr	r3, [pc, #80]	; (29c <AT25SFWriteBytes+0x5c>)
     24a:	02ff      	lsls	r7, r7, #11
void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     24c:	9201      	str	r2, [sp, #4]
     24e:	9100      	str	r1, [sp, #0]
    AT25SFHoldTillReady();
     250:	4798      	blx	r3

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     252:	4d13      	ldr	r5, [pc, #76]	; (2a0 <AT25SFWriteBytes+0x60>)
     254:	6167      	str	r7, [r4, #20]
     256:	2106      	movs	r1, #6
     258:	2001      	movs	r0, #1
     25a:	47a8      	blx	r5
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     25c:	61a7      	str	r7, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     25e:	2102      	movs	r1, #2
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     260:	6167      	str	r7, [r4, #20]
     262:	2001      	movs	r0, #1
     264:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((address & 0xFF0000) >> 16));
     266:	0c31      	lsrs	r1, r6, #16
     268:	b2c9      	uxtb	r1, r1
     26a:	2001      	movs	r0, #1
     26c:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((address & 0x00FF00) >>  8));
     26e:	0a31      	lsrs	r1, r6, #8
     270:	b2c9      	uxtb	r1, r1
     272:	2001      	movs	r0, #1
     274:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((address & 0x0000FF) >>  0));
     276:	b2f1      	uxtb	r1, r6
     278:	2001      	movs	r0, #1
     27a:	47a8      	blx	r5
     27c:	9e01      	ldr	r6, [sp, #4]
     27e:	9b00      	ldr	r3, [sp, #0]
     280:	18f7      	adds	r7, r6, r3

    for (u8_t pos = 0; pos < len; ++pos) {
     282:	42be      	cmp	r6, r7
     284:	d103      	bne.n	28e <AT25SFWriteBytes+0x4e>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     286:	2380      	movs	r3, #128	; 0x80
     288:	02db      	lsls	r3, r3, #11
     28a:	61a3      	str	r3, [r4, #24]
        spiDataOut(MEM_SPI, bytes[pos]);
    }

    pinHigh(cs_mem);

}
     28c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        spiDataOut(MEM_SPI, bytes[pos]);
     28e:	7831      	ldrb	r1, [r6, #0]
     290:	2001      	movs	r0, #1
     292:	47a8      	blx	r5
     294:	3601      	adds	r6, #1
     296:	e7f4      	b.n	282 <AT25SFWriteBytes+0x42>
     298:	41004400 	.word	0x41004400
     29c:	000001e5 	.word	0x000001e5
     2a0:	0000388d 	.word	0x0000388d

000002a4 <AT25SEWritePage>:
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2a6:	2780      	movs	r7, #128	; 0x80
     2a8:	0006      	movs	r6, r0
     2aa:	4c13      	ldr	r4, [pc, #76]	; (2f8 <AT25SEWritePage+0x54>)
     2ac:	02ff      	lsls	r7, r7, #11

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2ae:	4d13      	ldr	r5, [pc, #76]	; (2fc <AT25SEWritePage+0x58>)
u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2b0:	9101      	str	r1, [sp, #4]
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2b2:	2001      	movs	r0, #1
     2b4:	6167      	str	r7, [r4, #20]
     2b6:	2106      	movs	r1, #6
     2b8:	47a8      	blx	r5
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ba:	61a7      	str	r7, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     2bc:	2102      	movs	r1, #2
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2be:	6167      	str	r7, [r4, #20]
     2c0:	2001      	movs	r0, #1
     2c2:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     2c4:	0c31      	lsrs	r1, r6, #16
     2c6:	b2c9      	uxtb	r1, r1
     2c8:	2001      	movs	r0, #1
     2ca:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     2cc:	0a31      	lsrs	r1, r6, #8
     2ce:	b2c9      	uxtb	r1, r1
     2d0:	2001      	movs	r0, #1
     2d2:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     2d4:	b2f1      	uxtb	r1, r6
     2d6:	2001      	movs	r0, #1
     2d8:	47a8      	blx	r5
     2da:	9e01      	ldr	r6, [sp, #4]
     2dc:	1c77      	adds	r7, r6, #1
     2de:	37ff      	adds	r7, #255	; 0xff


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        spiDataOut(SPI1,data[pos]);
     2e0:	7831      	ldrb	r1, [r6, #0]
     2e2:	2001      	movs	r0, #1
     2e4:	3601      	adds	r6, #1
     2e6:	47a8      	blx	r5
    for (u16_t pos = 0; pos < 256; ++pos) {
     2e8:	42b7      	cmp	r7, r6
     2ea:	d1f9      	bne.n	2e0 <AT25SEWritePage+0x3c>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ec:	2380      	movs	r3, #128	; 0x80
     2ee:	02db      	lsls	r3, r3, #11
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     2f0:	2000      	movs	r0, #0
     2f2:	61a3      	str	r3, [r4, #24]
     2f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	41004400 	.word	0x41004400
     2fc:	0000388d 	.word	0x0000388d

00000300 <AT25SEreadSample>:
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     300:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     304:	0005      	movs	r5, r0
     306:	000f      	movs	r7, r1
     308:	4e11      	ldr	r6, [pc, #68]	; (350 <AT25SEreadSample+0x50>)
     30a:	02db      	lsls	r3, r3, #11
     30c:	9201      	str	r2, [sp, #4]

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     30e:	4c11      	ldr	r4, [pc, #68]	; (354 <AT25SEreadSample+0x54>)
     310:	6173      	str	r3, [r6, #20]
     312:	210b      	movs	r1, #11
     314:	2001      	movs	r0, #1
     316:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     318:	0c29      	lsrs	r1, r5, #16
     31a:	b2c9      	uxtb	r1, r1
     31c:	2001      	movs	r0, #1
     31e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     320:	0a29      	lsrs	r1, r5, #8
     322:	b2c9      	uxtb	r1, r1
     324:	2001      	movs	r0, #1
     326:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     328:	b2e9      	uxtb	r1, r5
     32a:	2001      	movs	r0, #1
     32c:	47a0      	blx	r4
    spiDataOut(MEM_SPI, 0xFF);
     32e:	21ff      	movs	r1, #255	; 0xff
     330:	2001      	movs	r0, #1
     332:	47a0      	blx	r4
     334:	9c01      	ldr	r4, [sp, #4]
     336:	19e7      	adds	r7, r4, r7


    for (u8_t pos = 0; pos < len; ++pos) {
     338:	42bc      	cmp	r4, r7
     33a:	d103      	bne.n	344 <AT25SEreadSample+0x44>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     33c:	2380      	movs	r3, #128	; 0x80
     33e:	02db      	lsls	r3, r3, #11
     340:	61b3      	str	r3, [r6, #24]
        data[pos] = spiDataIn(MEM_SPI);
    }
    pinHigh(cs_mem);

}
     342:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        data[pos] = spiDataIn(MEM_SPI);
     344:	2001      	movs	r0, #1
     346:	4b04      	ldr	r3, [pc, #16]	; (358 <AT25SEreadSample+0x58>)
     348:	4798      	blx	r3
     34a:	7020      	strb	r0, [r4, #0]
     34c:	3401      	adds	r4, #1
     34e:	e7f3      	b.n	338 <AT25SEreadSample+0x38>
     350:	41004400 	.word	0x41004400
     354:	0000388d 	.word	0x0000388d
     358:	000038a5 	.word	0x000038a5

0000035c <AT25SEreadPage>:

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     35e:	2380      	movs	r3, #128	; 0x80
     360:	0007      	movs	r7, r0
     362:	000c      	movs	r4, r1
     364:	4e10      	ldr	r6, [pc, #64]	; (3a8 <AT25SEreadPage+0x4c>)
     366:	02db      	lsls	r3, r3, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     368:	4d10      	ldr	r5, [pc, #64]	; (3ac <AT25SEreadPage+0x50>)
     36a:	6173      	str	r3, [r6, #20]
     36c:	210b      	movs	r1, #11
     36e:	2001      	movs	r0, #1
     370:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     372:	0c39      	lsrs	r1, r7, #16
     374:	b2c9      	uxtb	r1, r1
     376:	2001      	movs	r0, #1
     378:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     37a:	0a39      	lsrs	r1, r7, #8
     37c:	b2c9      	uxtb	r1, r1
     37e:	2001      	movs	r0, #1
     380:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     382:	b2f9      	uxtb	r1, r7
     384:	2001      	movs	r0, #1
     386:	47a8      	blx	r5
    spiDataOut(MEM_SPI, 0xFF);
     388:	21ff      	movs	r1, #255	; 0xff
     38a:	2001      	movs	r0, #1
     38c:	47a8      	blx	r5
     38e:	1c65      	adds	r5, r4, #1
     390:	35ff      	adds	r5, #255	; 0xff

    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataIn(MEM_SPI);
     392:	2001      	movs	r0, #1
     394:	4b06      	ldr	r3, [pc, #24]	; (3b0 <AT25SEreadPage+0x54>)
     396:	4798      	blx	r3
     398:	7020      	strb	r0, [r4, #0]
     39a:	3401      	adds	r4, #1
    for (u16_t pos = 0; pos < 256; ++pos) {
     39c:	42ac      	cmp	r4, r5
     39e:	d1f8      	bne.n	392 <AT25SEreadPage+0x36>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3a0:	2380      	movs	r3, #128	; 0x80
     3a2:	02db      	lsls	r3, r3, #11
     3a4:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);

}
     3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3a8:	41004400 	.word	0x41004400
     3ac:	0000388d 	.word	0x0000388d
     3b0:	000038a5 	.word	0x000038a5

000003b4 <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>

u32_t readMS5803AdcResults() {
     3b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b6:	2780      	movs	r7, #128	; 0x80
     3b8:	4e0b      	ldr	r6, [pc, #44]	; (3e8 <readMS5803AdcResults+0x34>)
     3ba:	01ff      	lsls	r7, r7, #7

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, cmdAdcRead_);
     3bc:	2100      	movs	r1, #0
     3be:	4b0b      	ldr	r3, [pc, #44]	; (3ec <readMS5803AdcResults+0x38>)
     3c0:	6177      	str	r7, [r6, #20]
     3c2:	2002      	movs	r0, #2
     3c4:	4798      	blx	r3
    u8_t _byte1 = spiDataIn(SPI2);
     3c6:	4d0a      	ldr	r5, [pc, #40]	; (3f0 <readMS5803AdcResults+0x3c>)
     3c8:	2002      	movs	r0, #2
     3ca:	47a8      	blx	r5
     3cc:	0004      	movs	r4, r0
    u8_t _byte2 = spiDataIn(SPI2);
     3ce:	2002      	movs	r0, #2
     3d0:	47a8      	blx	r5
     3d2:	9001      	str	r0, [sp, #4]
    u8_t _byte3 = spiDataIn(SPI2);
     3d4:	2002      	movs	r0, #2
     3d6:	47a8      	blx	r5
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3d8:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
     3da:	9b01      	ldr	r3, [sp, #4]
     3dc:	0424      	lsls	r4, r4, #16
     3de:	021b      	lsls	r3, r3, #8
     3e0:	431c      	orrs	r4, r3
     3e2:	4320      	orrs	r0, r4
    return _receive;
}
     3e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	41004400 	.word	0x41004400
     3ec:	0000388d 	.word	0x0000388d
     3f0:	000038a5 	.word	0x000038a5

000003f4 <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     3f6:	2600      	movs	r6, #0
void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3f8:	b089      	sub	sp, #36	; 0x24
     3fa:	9306      	str	r3, [sp, #24]
    const u16_t C1 = coefficients_[1];
     3fc:	4b25      	ldr	r3, [pc, #148]	; (494 <ConvertPressureTemperature+0xa0>)
void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3fe:	9004      	str	r0, [sp, #16]
     400:	9205      	str	r2, [sp, #20]
    const u16_t C1 = coefficients_[1];
     402:	885a      	ldrh	r2, [r3, #2]
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     404:	4c24      	ldr	r4, [pc, #144]	; (498 <ConvertPressureTemperature+0xa4>)
    const u16_t C1 = coefficients_[1];
     406:	9202      	str	r2, [sp, #8]
    const u16_t C2 = coefficients_[2];
     408:	889a      	ldrh	r2, [r3, #4]
     40a:	9201      	str	r2, [sp, #4]
    const u16_t C4 = coefficients_[4];
     40c:	891a      	ldrh	r2, [r3, #8]
    const u16_t C3 = coefficients_[3];
     40e:	88dd      	ldrh	r5, [r3, #6]
    const u16_t C4 = coefficients_[4];
     410:	9203      	str	r2, [sp, #12]
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
     412:	895f      	ldrh	r7, [r3, #10]
     414:	023f      	lsls	r7, r7, #8
     416:	1bcf      	subs	r7, r1, r7
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     418:	17fa      	asrs	r2, r7, #31
     41a:	9207      	str	r2, [sp, #28]
     41c:	8998      	ldrh	r0, [r3, #12]
     41e:	003a      	movs	r2, r7
     420:	17fb      	asrs	r3, r7, #31
     422:	0031      	movs	r1, r6
     424:	47a0      	blx	r4
     426:	23fa      	movs	r3, #250	; 0xfa
     428:	0249      	lsls	r1, r1, #9
     42a:	0dc0      	lsrs	r0, r0, #23
     42c:	4308      	orrs	r0, r1
     42e:	00db      	lsls	r3, r3, #3
     430:	18c0      	adds	r0, r0, r3
     432:	9b05      	ldr	r3, [sp, #20]

    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
    const  int64_t SENS  =  ((int64_t)C1 << 16) + ((C3 * (int64_t)dT) >> 7);
     434:	003a      	movs	r2, r7
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     436:	6018      	str	r0, [r3, #0]
    const  int64_t SENS  =  ((int64_t)C1 << 16) + ((C3 * (int64_t)dT) >> 7);
     438:	0031      	movs	r1, r6
     43a:	17fb      	asrs	r3, r7, #31
     43c:	0028      	movs	r0, r5
     43e:	47a0      	blx	r4
     440:	064c      	lsls	r4, r1, #25
     442:	11cb      	asrs	r3, r1, #7
     444:	0031      	movs	r1, r6
     446:	09c2      	lsrs	r2, r0, #7
     448:	4322      	orrs	r2, r4
     44a:	9c02      	ldr	r4, [sp, #8]
     44c:	0420      	lsls	r0, r4, #16
     44e:	1880      	adds	r0, r0, r2
     450:	4159      	adcs	r1, r3
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     452:	4c11      	ldr	r4, [pc, #68]	; (498 <ConvertPressureTemperature+0xa4>)
     454:	9a04      	ldr	r2, [sp, #16]
     456:	0033      	movs	r3, r6
     458:	47a0      	blx	r4
     45a:	02cb      	lsls	r3, r1, #11
     45c:	0d44      	lsrs	r4, r0, #21
    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
     45e:	003a      	movs	r2, r7
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     460:	431c      	orrs	r4, r3
    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
     462:	4f0d      	ldr	r7, [pc, #52]	; (498 <ConvertPressureTemperature+0xa4>)
     464:	9b07      	ldr	r3, [sp, #28]
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     466:	154d      	asrs	r5, r1, #21
    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
     468:	9803      	ldr	r0, [sp, #12]
     46a:	0031      	movs	r1, r6
     46c:	47b8      	blx	r7
     46e:	9e01      	ldr	r6, [sp, #4]
     470:	068f      	lsls	r7, r1, #26
     472:	0982      	lsrs	r2, r0, #6
     474:	433a      	orrs	r2, r7
     476:	118b      	asrs	r3, r1, #6
     478:	0470      	lsls	r0, r6, #17
     47a:	0bf1      	lsrs	r1, r6, #15
     47c:	1812      	adds	r2, r2, r0
     47e:	414b      	adcs	r3, r1
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     480:	1aa4      	subs	r4, r4, r2
     482:	419d      	sbcs	r5, r3
     484:	046b      	lsls	r3, r5, #17
     486:	0be4      	lsrs	r4, r4, #15
     488:	431c      	orrs	r4, r3
     48a:	9b06      	ldr	r3, [sp, #24]
     48c:	601c      	str	r4, [r3, #0]

}
     48e:	b009      	add	sp, #36	; 0x24
     490:	bdf0      	pop	{r4, r5, r6, r7, pc}
     492:	46c0      	nop			; (mov r8, r8)
     494:	200002ae 	.word	0x200002ae
     498:	000051b5 	.word	0x000051b5

0000049c <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     49c:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/100)/1013.25);
     49e:	4b0c      	ldr	r3, [pc, #48]	; (4d0 <paToFeetNOAA+0x34>)
     4a0:	4798      	blx	r3
     4a2:	4c0c      	ldr	r4, [pc, #48]	; (4d4 <paToFeetNOAA+0x38>)
     4a4:	2200      	movs	r2, #0
     4a6:	4b0c      	ldr	r3, [pc, #48]	; (4d8 <paToFeetNOAA+0x3c>)
     4a8:	47a0      	blx	r4
     4aa:	2200      	movs	r2, #0
     4ac:	4b0b      	ldr	r3, [pc, #44]	; (4dc <paToFeetNOAA+0x40>)
     4ae:	47a0      	blx	r4
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     4b0:	4a0b      	ldr	r2, [pc, #44]	; (4e0 <paToFeetNOAA+0x44>)
     4b2:	4b0c      	ldr	r3, [pc, #48]	; (4e4 <paToFeetNOAA+0x48>)
     4b4:	4c0c      	ldr	r4, [pc, #48]	; (4e8 <paToFeetNOAA+0x4c>)
     4b6:	47a0      	blx	r4
     4b8:	4c0c      	ldr	r4, [pc, #48]	; (4ec <paToFeetNOAA+0x50>)
     4ba:	0002      	movs	r2, r0
     4bc:	000b      	movs	r3, r1
     4be:	2000      	movs	r0, #0
     4c0:	490b      	ldr	r1, [pc, #44]	; (4f0 <paToFeetNOAA+0x54>)
     4c2:	47a0      	blx	r4
     4c4:	4a0b      	ldr	r2, [pc, #44]	; (4f4 <paToFeetNOAA+0x58>)
     4c6:	4b0c      	ldr	r3, [pc, #48]	; (4f8 <paToFeetNOAA+0x5c>)
     4c8:	4c0c      	ldr	r4, [pc, #48]	; (4fc <paToFeetNOAA+0x60>)
     4ca:	47a0      	blx	r4
    return altFeet;

}
     4cc:	bd10      	pop	{r4, pc}
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	00006f21 	.word	0x00006f21
     4d4:	00005ae5 	.word	0x00005ae5
     4d8:	40590000 	.word	0x40590000
     4dc:	408faa00 	.word	0x408faa00
     4e0:	e279dd3c 	.word	0xe279dd3c
     4e4:	3fc85b39 	.word	0x3fc85b39
     4e8:	00003c65 	.word	0x00003c65
     4ec:	0000684d 	.word	0x0000684d
     4f0:	3ff00000 	.word	0x3ff00000
     4f4:	9999999a 	.word	0x9999999a
     4f8:	4101beb3 	.word	0x4101beb3
     4fc:	0000634d 	.word	0x0000634d

00000500 <readMS5803Coefficients>:



void readMS5803Coefficients() {
     500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     502:	2400      	movs	r4, #0
    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
        delay_us(600);
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
        delay_us(600);
        pinLow(cs_baro);
        spiDataOut(SPI2, _cmd);
     504:	2502      	movs	r5, #2
        delay_us(600);
     506:	2096      	movs	r0, #150	; 0x96
     508:	4e11      	ldr	r6, [pc, #68]	; (550 <readMS5803Coefficients+0x50>)
     50a:	0080      	lsls	r0, r0, #2
     50c:	47b0      	blx	r6
        delay_us(600);
     50e:	2096      	movs	r0, #150	; 0x96
     510:	0080      	lsls	r0, r0, #2
     512:	47b0      	blx	r6
        spiDataOut(SPI2, _cmd);
     514:	0021      	movs	r1, r4
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     516:	2380      	movs	r3, #128	; 0x80
     518:	4e0e      	ldr	r6, [pc, #56]	; (554 <readMS5803Coefficients+0x54>)
     51a:	01db      	lsls	r3, r3, #7
     51c:	395e      	subs	r1, #94	; 0x5e
     51e:	b2c9      	uxtb	r1, r1
     520:	6173      	str	r3, [r6, #20]
     522:	0028      	movs	r0, r5
     524:	4b0c      	ldr	r3, [pc, #48]	; (558 <readMS5803Coefficients+0x58>)
     526:	4798      	blx	r3
        u8_t _byte1 = spiDataIn(SPI2);
     528:	4f0c      	ldr	r7, [pc, #48]	; (55c <readMS5803Coefficients+0x5c>)
     52a:	0028      	movs	r0, r5
     52c:	47b8      	blx	r7
     52e:	9001      	str	r0, [sp, #4]
        u8_t _byte2 = spiDataIn(SPI2);
     530:	0028      	movs	r0, r5
     532:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     534:	2380      	movs	r3, #128	; 0x80
     536:	01db      	lsls	r3, r3, #7
     538:	61b3      	str	r3, [r6, #24]
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     53a:	9b01      	ldr	r3, [sp, #4]
     53c:	4a08      	ldr	r2, [pc, #32]	; (560 <readMS5803Coefficients+0x60>)
     53e:	021b      	lsls	r3, r3, #8
     540:	18a2      	adds	r2, r4, r2
     542:	4318      	orrs	r0, r3
     544:	3402      	adds	r4, #2
     546:	8050      	strh	r0, [r2, #2]
    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
     548:	2c0c      	cmp	r4, #12
     54a:	d1dc      	bne.n	506 <readMS5803Coefficients+0x6>
    }

}
     54c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     54e:	46c0      	nop			; (mov r8, r8)
     550:	00001161 	.word	0x00001161
     554:	41004400 	.word	0x41004400
     558:	0000388d 	.word	0x0000388d
     55c:	000038a5 	.word	0x000038a5
     560:	200002ae 	.word	0x200002ae

00000564 <initMS5803Barometer>:

void initMS5803Barometer() {
     564:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     566:	2580      	movs	r5, #128	; 0x80
     568:	4c06      	ldr	r4, [pc, #24]	; (584 <initMS5803Barometer+0x20>)
     56a:	01ed      	lsls	r5, r5, #7


    pinLow(cs_baro);
    spiDataOut(BARO_SPI, MS5803_CMD_RES);
     56c:	211e      	movs	r1, #30
     56e:	6165      	str	r5, [r4, #20]
     570:	2002      	movs	r0, #2
     572:	4b05      	ldr	r3, [pc, #20]	; (588 <initMS5803Barometer+0x24>)
     574:	4798      	blx	r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     576:	61a5      	str	r5, [r4, #24]

    pinHigh(cs_baro);
    delay_ms(200);
     578:	20c8      	movs	r0, #200	; 0xc8
     57a:	4b04      	ldr	r3, [pc, #16]	; (58c <initMS5803Barometer+0x28>)
     57c:	4798      	blx	r3
    readMS5803Coefficients();
     57e:	4b04      	ldr	r3, [pc, #16]	; (590 <initMS5803Barometer+0x2c>)
     580:	4798      	blx	r3

}
     582:	bd70      	pop	{r4, r5, r6, pc}
     584:	41004400 	.word	0x41004400
     588:	0000388d 	.word	0x0000388d
     58c:	00001191 	.word	0x00001191
     590:	00000501 	.word	0x00000501

00000594 <MS5803_CRC4>:
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     594:	4b02      	ldr	r3, [pc, #8]	; (5a0 <MS5803_CRC4+0xc>)
    return (n_rem & 0x00);
}
     596:	2000      	movs	r0, #0
    coefficients_[7] = crc_read;
     598:	7b9a      	ldrb	r2, [r3, #14]
     59a:	81da      	strh	r2, [r3, #14]
}
     59c:	4770      	bx	lr
     59e:	46c0      	nop			; (mov r8, r8)
     5a0:	200002ae 	.word	0x200002ae

000005a4 <init>:
#include "math.h"

void init() {

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     5a4:	211e      	movs	r1, #30
void init() {
     5a6:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     5a8:	4afb      	ldr	r2, [pc, #1004]	; (998 <init+0x3f4>)
void init() {
     5aa:	b085      	sub	sp, #20
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     5ac:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5ae:	2401      	movs	r4, #1
     5b0:	438b      	bics	r3, r1
     5b2:	391c      	subs	r1, #28
     5b4:	430b      	orrs	r3, r1
     5b6:	6053      	str	r3, [r2, #4]

    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     5b8:	4af8      	ldr	r2, [pc, #992]	; (99c <init+0x3f8>)
     5ba:	3106      	adds	r1, #6
     5bc:	6993      	ldr	r3, [r2, #24]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5be:	260f      	movs	r6, #15
     5c0:	430b      	orrs	r3, r1
     5c2:	6193      	str	r3, [r2, #24]

    SystemInit();
     5c4:	4bf6      	ldr	r3, [pc, #984]	; (9a0 <init+0x3fc>)
     5c6:	4798      	blx	r3
    GclkInit(0);
     5c8:	2000      	movs	r0, #0
     5ca:	4bf6      	ldr	r3, [pc, #984]	; (9a4 <init+0x400>)
     5cc:	4798      	blx	r3
    RtcInit();
     5ce:	4bf6      	ldr	r3, [pc, #984]	; (9a8 <init+0x404>)
     5d0:	4798      	blx	r3
    delayInit();
     5d2:	4bf6      	ldr	r3, [pc, #984]	; (9ac <init+0x408>)
     5d4:	4798      	blx	r3
    adcInit();
     5d6:	4bf6      	ldr	r3, [pc, #984]	; (9b0 <init+0x40c>)
     5d8:	4798      	blx	r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5da:	4bf6      	ldr	r3, [pc, #984]	; (9b4 <init+0x410>)
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5dc:	2002      	movs	r0, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5de:	0019      	movs	r1, r3
     5e0:	3154      	adds	r1, #84	; 0x54
     5e2:	780a      	ldrb	r2, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5e4:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5e6:	43a2      	bics	r2, r4
     5e8:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5ea:	2280      	movs	r2, #128	; 0x80
     5ec:	0352      	lsls	r2, r2, #13
     5ee:	609a      	str	r2, [r3, #8]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5f0:	3533      	adds	r5, #51	; 0x33
     5f2:	782a      	ldrb	r2, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f4:	390e      	subs	r1, #14
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5f6:	43b2      	bics	r2, r6
     5f8:	4322      	orrs	r2, r4
     5fa:	702a      	strb	r2, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5fc:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5fe:	001f      	movs	r7, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     600:	4322      	orrs	r2, r4
     602:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     604:	001a      	movs	r2, r3
     606:	3247      	adds	r2, #71	; 0x47
     608:	7811      	ldrb	r1, [r2, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     60a:	3794      	adds	r7, #148	; 0x94
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     60c:	43a1      	bics	r1, r4
     60e:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     610:	7811      	ldrb	r1, [r2, #0]
     612:	4301      	orrs	r1, r0
     614:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     616:	2180      	movs	r1, #128	; 0x80
     618:	6059      	str	r1, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     61a:	7828      	ldrb	r0, [r5, #0]
     61c:	3970      	subs	r1, #112	; 0x70
     61e:	4030      	ands	r0, r6
     620:	4308      	orrs	r0, r1
     622:	7028      	strb	r0, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     624:	2502      	movs	r5, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     626:	7810      	ldrb	r0, [r2, #0]
     628:	4320      	orrs	r0, r4
     62a:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     62c:	327c      	adds	r2, #124	; 0x7c
     62e:	7810      	ldrb	r0, [r2, #0]
     630:	43a0      	bics	r0, r4
     632:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     634:	7810      	ldrb	r0, [r2, #0]
     636:	4328      	orrs	r0, r5
     638:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     63a:	2008      	movs	r0, #8
     63c:	4684      	mov	ip, r0
     63e:	449c      	add	ip, r3
     640:	4660      	mov	r0, ip
     642:	3506      	adds	r5, #6
     644:	67c5      	str	r5, [r0, #124]	; 0x7c
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     646:	30a9      	adds	r0, #169	; 0xa9
     648:	7805      	ldrb	r5, [r0, #0]
     64a:	4035      	ands	r5, r6
     64c:	430d      	orrs	r5, r1
     64e:	7005      	strb	r5, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     650:	7815      	ldrb	r5, [r2, #0]
     652:	4325      	orrs	r5, r4
     654:	7015      	strb	r5, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     656:	001d      	movs	r5, r3
     658:	35d7      	adds	r5, #215	; 0xd7
     65a:	782a      	ldrb	r2, [r5, #0]
     65c:	43a2      	bics	r2, r4
     65e:	702a      	strb	r2, [r5, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     660:	2580      	movs	r5, #128	; 0x80
     662:	4ad5      	ldr	r2, [pc, #852]	; (9b8 <init+0x414>)
     664:	042d      	lsls	r5, r5, #16
     666:	6015      	str	r5, [r2, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     668:	002a      	movs	r2, r5
     66a:	9703      	str	r7, [sp, #12]
     66c:	603a      	str	r2, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     66e:	001a      	movs	r2, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     670:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     672:	32c2      	adds	r2, #194	; 0xc2
     674:	7815      	ldrb	r5, [r2, #0]
     676:	43a5      	bics	r5, r4
     678:	7015      	strb	r5, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     67a:	7815      	ldrb	r5, [r2, #0]
     67c:	433d      	orrs	r5, r7
     67e:	7015      	strb	r5, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     680:	4665      	mov	r5, ip
     682:	19ff      	adds	r7, r7, r7
     684:	67ef      	str	r7, [r5, #124]	; 0x7c
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     686:	7805      	ldrb	r5, [r0, #0]
     688:	43b5      	bics	r5, r6
     68a:	4325      	orrs	r5, r4
     68c:	7005      	strb	r5, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     68e:	7810      	ldrb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     690:	2502      	movs	r5, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     692:	4320      	orrs	r0, r4
     694:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     696:	0018      	movs	r0, r3
     698:	30d6      	adds	r0, #214	; 0xd6
     69a:	7802      	ldrb	r2, [r0, #0]
     69c:	43a2      	bics	r2, r4
     69e:	7002      	strb	r2, [r0, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6a0:	2080      	movs	r0, #128	; 0x80
     6a2:	4ac5      	ldr	r2, [pc, #788]	; (9b8 <init+0x414>)
     6a4:	03c0      	lsls	r0, r0, #15
     6a6:	6010      	str	r0, [r2, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6a8:	0002      	movs	r2, r0
     6aa:	9803      	ldr	r0, [sp, #12]
     6ac:	6002      	str	r2, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ae:	001a      	movs	r2, r3
     6b0:	3243      	adds	r2, #67	; 0x43
     6b2:	7810      	ldrb	r0, [r2, #0]
     6b4:	43a0      	bics	r0, r4
     6b6:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6b8:	7810      	ldrb	r0, [r2, #0]
     6ba:	4328      	orrs	r0, r5
     6bc:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6be:	2008      	movs	r0, #8
     6c0:	6058      	str	r0, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6c2:	0018      	movs	r0, r3
     6c4:	3031      	adds	r0, #49	; 0x31
     6c6:	7805      	ldrb	r5, [r0, #0]
     6c8:	4035      	ands	r5, r6
     6ca:	4329      	orrs	r1, r5
     6cc:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6ce:	7811      	ldrb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6d0:	2502      	movs	r5, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6d2:	4321      	orrs	r1, r4
     6d4:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6d6:	0019      	movs	r1, r3
     6d8:	3159      	adds	r1, #89	; 0x59
     6da:	780a      	ldrb	r2, [r1, #0]
     6dc:	43a2      	bics	r2, r4
     6de:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6e0:	2280      	movs	r2, #128	; 0x80
     6e2:	0492      	lsls	r2, r2, #18
     6e4:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6e6:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6e8:	001a      	movs	r2, r3
     6ea:	3242      	adds	r2, #66	; 0x42
     6ec:	7811      	ldrb	r1, [r2, #0]
     6ee:	43a1      	bics	r1, r4
     6f0:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6f2:	7811      	ldrb	r1, [r2, #0]
     6f4:	4329      	orrs	r1, r5
     6f6:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6f8:	605f      	str	r7, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6fa:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6fc:	001f      	movs	r7, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6fe:	43b1      	bics	r1, r6
     700:	4321      	orrs	r1, r4
     702:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     704:	7811      	ldrb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     706:	3749      	adds	r7, #73	; 0x49
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     708:	4321      	orrs	r1, r4
     70a:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     70c:	0019      	movs	r1, r3
     70e:	3158      	adds	r1, #88	; 0x58
     710:	780a      	ldrb	r2, [r1, #0]
     712:	43a2      	bics	r2, r4
     714:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     716:	2280      	movs	r2, #128	; 0x80
    pinIn(senseDPin);
    pinMux(senseDPin);
    pinOut(fireDPin);
    pinLow(fireDPin);

    charges.igniterAHot = false;
     718:	2100      	movs	r1, #0
     71a:	0452      	lsls	r2, r2, #17
     71c:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     71e:	615a      	str	r2, [r3, #20]
     720:	4aa6      	ldr	r2, [pc, #664]	; (9bc <init+0x418>)
     722:	7011      	strb	r1, [r2, #0]
    charges.igniterBHot = false;
     724:	2100      	movs	r1, #0
     726:	7211      	strb	r1, [r2, #8]
    charges.igniterCHot = false;
     728:	2100      	movs	r1, #0
     72a:	7411      	strb	r1, [r2, #16]
    charges.igniterDHot = false;
     72c:	2100      	movs	r1, #0
     72e:	7611      	strb	r1, [r2, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     730:	7dc2      	ldrb	r2, [r0, #23]
     732:	43a2      	bics	r2, r4
     734:	75c2      	strb	r2, [r0, #23]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     736:	2280      	movs	r2, #128	; 0x80
     738:	0052      	lsls	r2, r2, #1
     73a:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     73c:	783a      	ldrb	r2, [r7, #0]
     73e:	43a2      	bics	r2, r4
     740:	703a      	strb	r2, [r7, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     742:	2280      	movs	r2, #128	; 0x80
     744:	0092      	lsls	r2, r2, #2
     746:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     748:	001a      	movs	r2, r3
     74a:	324b      	adds	r2, #75	; 0x4b
     74c:	7811      	ldrb	r1, [r2, #0]
     74e:	43a1      	bics	r1, r4
     750:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     752:	7811      	ldrb	r1, [r2, #0]
     754:	4329      	orrs	r1, r5
     756:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     758:	2180      	movs	r1, #128	; 0x80
     75a:	0109      	lsls	r1, r1, #4
     75c:	6059      	str	r1, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     75e:	2135      	movs	r1, #53	; 0x35
     760:	468c      	mov	ip, r1
     762:	449c      	add	ip, r3
     764:	4661      	mov	r1, ip
     766:	7809      	ldrb	r1, [r1, #0]
     768:	351e      	adds	r5, #30
     76a:	4031      	ands	r1, r6
     76c:	4329      	orrs	r1, r5
     76e:	4665      	mov	r5, ip
     770:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     772:	7811      	ldrb	r1, [r2, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     774:	2520      	movs	r5, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     776:	4321      	orrs	r1, r4
     778:	7011      	strb	r1, [r2, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     77a:	0019      	movs	r1, r3
     77c:	3134      	adds	r1, #52	; 0x34
     77e:	780a      	ldrb	r2, [r1, #0]
     780:	4032      	ands	r2, r6
     782:	432a      	orrs	r2, r5
     784:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     786:	783a      	ldrb	r2, [r7, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     788:	3d1e      	subs	r5, #30
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     78a:	4322      	orrs	r2, r4
     78c:	703a      	strb	r2, [r7, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     78e:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     790:	3706      	adds	r7, #6
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     792:	43b2      	bics	r2, r6
     794:	432a      	orrs	r2, r5
     796:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     798:	7dc2      	ldrb	r2, [r0, #23]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79a:	3196      	adds	r1, #150	; 0x96
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     79c:	4322      	orrs	r2, r4
     79e:	75c2      	strb	r2, [r0, #23]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7a0:	780a      	ldrb	r2, [r1, #0]
     7a2:	43a2      	bics	r2, r4
     7a4:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a6:	2280      	movs	r2, #128	; 0x80
     7a8:	4983      	ldr	r1, [pc, #524]	; (9b8 <init+0x414>)
     7aa:	00d2      	lsls	r2, r2, #3
     7ac:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7ae:	0019      	movs	r1, r3
     7b0:	3198      	adds	r1, #152	; 0x98
     7b2:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b4:	7e41      	ldrb	r1, [r0, #25]
     7b6:	43a1      	bics	r1, r4
     7b8:	7641      	strb	r1, [r0, #25]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ba:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7bc:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7be:	7fc2      	ldrb	r2, [r0, #31]
     7c0:	43a2      	bics	r2, r4
     7c2:	77c2      	strb	r2, [r0, #31]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7c4:	2280      	movs	r2, #128	; 0x80
     7c6:	0252      	lsls	r2, r2, #9
     7c8:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ca:	78ba      	ldrb	r2, [r7, #2]
     7cc:	43a2      	bics	r2, r4
     7ce:	70ba      	strb	r2, [r7, #2]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7d0:	2280      	movs	r2, #128	; 0x80
     7d2:	0292      	lsls	r2, r2, #10
     7d4:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7d6:	001a      	movs	r2, r3
     7d8:	3253      	adds	r2, #83	; 0x53
     7da:	7811      	ldrb	r1, [r2, #0]
     7dc:	43a1      	bics	r1, r4
     7de:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7e0:	7811      	ldrb	r1, [r2, #0]
     7e2:	4329      	orrs	r1, r5
     7e4:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7e6:	2180      	movs	r1, #128	; 0x80
     7e8:	0309      	lsls	r1, r1, #12
     7ea:	6059      	str	r1, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7ec:	2139      	movs	r1, #57	; 0x39
     7ee:	468c      	mov	ip, r1
     7f0:	449c      	add	ip, r3
     7f2:	4661      	mov	r1, ip
     7f4:	7809      	ldrb	r1, [r1, #0]
     7f6:	351e      	adds	r5, #30
     7f8:	4031      	ands	r1, r6
     7fa:	4329      	orrs	r1, r5
     7fc:	4665      	mov	r5, ip
     7fe:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     800:	7811      	ldrb	r1, [r2, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     802:	2520      	movs	r5, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     804:	4321      	orrs	r1, r4
     806:	7011      	strb	r1, [r2, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     808:	0019      	movs	r1, r3
     80a:	3138      	adds	r1, #56	; 0x38
     80c:	780a      	ldrb	r2, [r1, #0]
     80e:	4032      	ands	r2, r6
     810:	432a      	orrs	r2, r5
     812:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     814:	78ba      	ldrb	r2, [r7, #2]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     816:	3d1e      	subs	r5, #30
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     818:	4322      	orrs	r2, r4
     81a:	70ba      	strb	r2, [r7, #2]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     81c:	780a      	ldrb	r2, [r1, #0]
     81e:	43b2      	bics	r2, r6
     820:	432a      	orrs	r2, r5
     822:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     824:	7fc2      	ldrb	r2, [r0, #31]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     826:	3114      	adds	r1, #20
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     828:	4322      	orrs	r2, r4
     82a:	77c2      	strb	r2, [r0, #31]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     82c:	798a      	ldrb	r2, [r1, #6]
     82e:	43a2      	bics	r2, r4
     830:	718a      	strb	r2, [r1, #6]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     832:	2280      	movs	r2, #128	; 0x80
     834:	02d2      	lsls	r2, r2, #11
     836:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     838:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     83a:	9103      	str	r1, [sp, #12]
     83c:	780a      	ldrb	r2, [r1, #0]
     83e:	43a2      	bics	r2, r4
     840:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     842:	2280      	movs	r2, #128	; 0x80
     844:	0152      	lsls	r2, r2, #5
     846:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     848:	783a      	ldrb	r2, [r7, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     84a:	2120      	movs	r1, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     84c:	43a2      	bics	r2, r4
     84e:	703a      	strb	r2, [r7, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     850:	2280      	movs	r2, #128	; 0x80
     852:	0212      	lsls	r2, r2, #8
     854:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     856:	001a      	movs	r2, r3
     858:	324d      	adds	r2, #77	; 0x4d
     85a:	7810      	ldrb	r0, [r2, #0]
     85c:	43a0      	bics	r0, r4
     85e:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     860:	7810      	ldrb	r0, [r2, #0]
     862:	4328      	orrs	r0, r5
     864:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     866:	2080      	movs	r0, #128	; 0x80
     868:	0180      	lsls	r0, r0, #6
     86a:	6058      	str	r0, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     86c:	0018      	movs	r0, r3
     86e:	3036      	adds	r0, #54	; 0x36
     870:	7805      	ldrb	r5, [r0, #0]
     872:	4035      	ands	r5, r6
     874:	430d      	orrs	r5, r1
     876:	7005      	strb	r5, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     878:	7811      	ldrb	r1, [r2, #0]
     87a:	000d      	movs	r5, r1
     87c:	4325      	orrs	r5, r4
     87e:	7015      	strb	r5, [r2, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     880:	2237      	movs	r2, #55	; 0x37
     882:	4694      	mov	ip, r2
     884:	449c      	add	ip, r3
     886:	4662      	mov	r2, ip
     888:	2120      	movs	r1, #32
     88a:	7812      	ldrb	r2, [r2, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     88c:	2502      	movs	r5, #2
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     88e:	4032      	ands	r2, r6
     890:	430a      	orrs	r2, r1
     892:	4661      	mov	r1, ip
     894:	700a      	strb	r2, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     896:	2102      	movs	r1, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     898:	783a      	ldrb	r2, [r7, #0]
     89a:	4322      	orrs	r2, r4
     89c:	703a      	strb	r2, [r7, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     89e:	7802      	ldrb	r2, [r0, #0]
     8a0:	43b2      	bics	r2, r6
     8a2:	430a      	orrs	r2, r1
     8a4:	7002      	strb	r2, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8a6:	9a03      	ldr	r2, [sp, #12]
     8a8:	9903      	ldr	r1, [sp, #12]
     8aa:	7812      	ldrb	r2, [r2, #0]
     8ac:	4322      	orrs	r2, r4
     8ae:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8b0:	0019      	movs	r1, r3
     8b2:	314e      	adds	r1, #78	; 0x4e
     8b4:	780a      	ldrb	r2, [r1, #0]
     8b6:	43a2      	bics	r2, r4
     8b8:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8ba:	2280      	movs	r2, #128	; 0x80
     8bc:	01d2      	lsls	r2, r2, #7
     8be:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8c0:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8c2:	001a      	movs	r2, r3
     8c4:	3255      	adds	r2, #85	; 0x55
     8c6:	7811      	ldrb	r1, [r2, #0]
     8c8:	43a1      	bics	r1, r4
     8ca:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8cc:	2180      	movs	r1, #128	; 0x80
     8ce:	0389      	lsls	r1, r1, #14
     8d0:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8d2:	7811      	ldrb	r1, [r2, #0]
     8d4:	43a1      	bics	r1, r4
     8d6:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8d8:	2140      	movs	r1, #64	; 0x40
     8da:	7810      	ldrb	r0, [r2, #0]
     8dc:	4301      	orrs	r1, r0
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8de:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8e0:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e2:	3056      	adds	r0, #86	; 0x56
     8e4:	7802      	ldrb	r2, [r0, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8e6:	0019      	movs	r1, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e8:	43a2      	bics	r2, r4
     8ea:	7002      	strb	r2, [r0, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8ec:	2280      	movs	r2, #128	; 0x80
     8ee:	03d2      	lsls	r2, r2, #15
     8f0:	609a      	str	r2, [r3, #8]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8f2:	313b      	adds	r1, #59	; 0x3b
     8f4:	780a      	ldrb	r2, [r1, #0]
     8f6:	43b2      	bics	r2, r6
     8f8:	432a      	orrs	r2, r5
     8fa:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8fc:	7802      	ldrb	r2, [r0, #0]
     8fe:	4322      	orrs	r2, r4
     900:	7002      	strb	r2, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     902:	001a      	movs	r2, r3
     904:	3257      	adds	r2, #87	; 0x57
     906:	7810      	ldrb	r0, [r2, #0]
     908:	43a0      	bics	r0, r4
     90a:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     90c:	7810      	ldrb	r0, [r2, #0]
     90e:	4328      	orrs	r0, r5
     910:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     912:	2080      	movs	r0, #128	; 0x80
     914:	0400      	lsls	r0, r0, #16
     916:	6058      	str	r0, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     918:	2020      	movs	r0, #32
     91a:	780b      	ldrb	r3, [r1, #0]
     91c:	4033      	ands	r3, r6
     91e:	4303      	orrs	r3, r0
     920:	700b      	strb	r3, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     922:	7813      	ldrb	r3, [r2, #0]
    pinOut(TxPo);
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);

    delay_ms(200);
     924:	30a8      	adds	r0, #168	; 0xa8
     926:	4323      	orrs	r3, r4
     928:	7013      	strb	r3, [r2, #0]
     92a:	4b25      	ldr	r3, [pc, #148]	; (9c0 <init+0x41c>)
     92c:	4798      	blx	r3

    sercomClockEnable(SPI2, 3, 4);
     92e:	4f25      	ldr	r7, [pc, #148]	; (9c4 <init+0x420>)
     930:	0028      	movs	r0, r5
     932:	2204      	movs	r2, #4
     934:	2103      	movs	r1, #3
     936:	47b8      	blx	r7
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 0x00);
     938:	2300      	movs	r3, #0
     93a:	4e23      	ldr	r6, [pc, #140]	; (9c8 <init+0x424>)
     93c:	9301      	str	r3, [sp, #4]
     93e:	9300      	str	r3, [sp, #0]
     940:	0021      	movs	r1, r4
     942:	0028      	movs	r0, r5
     944:	2203      	movs	r2, #3
     946:	47b0      	blx	r6

    sercomClockEnable(SPI0, 3, 4);
     948:	2204      	movs	r2, #4
     94a:	2103      	movs	r1, #3
     94c:	2000      	movs	r0, #0
     94e:	47b8      	blx	r7
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     950:	2300      	movs	r3, #0
     952:	2103      	movs	r1, #3
     954:	9301      	str	r3, [sp, #4]
     956:	9300      	str	r3, [sp, #0]
     958:	001a      	movs	r2, r3
     95a:	0018      	movs	r0, r3
     95c:	47b0      	blx	r6

    sercomClockEnable(SPI1, 3, 4);
     95e:	0020      	movs	r0, r4
     960:	2204      	movs	r2, #4
     962:	2103      	movs	r1, #3
     964:	47b8      	blx	r7
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     966:	2300      	movs	r3, #0
     968:	0020      	movs	r0, r4
     96a:	9301      	str	r3, [sp, #4]
     96c:	9300      	str	r3, [sp, #0]
     96e:	001a      	movs	r2, r3
     970:	2103      	movs	r1, #3
     972:	47b0      	blx	r6

    sercomClockEnable(USART3, 4, 8);
     974:	2208      	movs	r2, #8
     976:	2104      	movs	r1, #4
     978:	2003      	movs	r0, #3
     97a:	47b8      	blx	r7
    sercomUartInit(USART3,1,0,19200);
     97c:	2396      	movs	r3, #150	; 0x96
     97e:	0021      	movs	r1, r4
     980:	2200      	movs	r2, #0
     982:	2003      	movs	r0, #3
     984:	01db      	lsls	r3, r3, #7
     986:	4c11      	ldr	r4, [pc, #68]	; (9cc <init+0x428>)
     988:	47a0      	blx	r4

    TC4Init();
     98a:	4b11      	ldr	r3, [pc, #68]	; (9d0 <init+0x42c>)
     98c:	4798      	blx	r3
    TC5Init();
     98e:	4b11      	ldr	r3, [pc, #68]	; (9d4 <init+0x430>)
     990:	4798      	blx	r3
}
     992:	b005      	add	sp, #20
     994:	e020      	b.n	9d8 <init+0x434>
     996:	46c0      	nop			; (mov r8, r8)
     998:	41004000 	.word	0x41004000
     99c:	40000400 	.word	0x40000400
     9a0:	000001d5 	.word	0x000001d5
     9a4:	000010bd 	.word	0x000010bd
     9a8:	00000fc5 	.word	0x00000fc5
     9ac:	00001135 	.word	0x00001135
     9b0:	00000db9 	.word	0x00000db9
     9b4:	41004400 	.word	0x41004400
     9b8:	41004488 	.word	0x41004488
     9bc:	200002c4 	.word	0x200002c4
     9c0:	00001191 	.word	0x00001191
     9c4:	00003769 	.word	0x00003769
     9c8:	000037c9 	.word	0x000037c9
     9cc:	0000382d 	.word	0x0000382d
     9d0:	00001211 	.word	0x00001211
     9d4:	00001279 	.word	0x00001279
     9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9da:	46c0      	nop			; (mov r8, r8)

000009dc <main>:


int main(void) {
     9dc:	b510      	push	{r4, lr}

    init();
     9de:	4b16      	ldr	r3, [pc, #88]	; (a38 <main+0x5c>)
     9e0:	4798      	blx	r3

    initMS5803Barometer();
     9e2:	4b16      	ldr	r3, [pc, #88]	; (a3c <main+0x60>)
     9e4:	4798      	blx	r3
    IMUinit();
     9e6:	4b16      	ldr	r3, [pc, #88]	; (a40 <main+0x64>)
     9e8:	4798      	blx	r3

    computeKalmanGains();
     9ea:	4b16      	ldr	r3, [pc, #88]	; (a44 <main+0x68>)
     9ec:	4798      	blx	r3

    computeKalmanBaroOnlyGains();
     9ee:	4b16      	ldr	r3, [pc, #88]	; (a48 <main+0x6c>)
     9f0:	4798      	blx	r3

    sampleTick();
     9f2:	4c16      	ldr	r4, [pc, #88]	; (a4c <main+0x70>)
     9f4:	47a0      	blx	r4

    POST();
     9f6:	4b16      	ldr	r3, [pc, #88]	; (a50 <main+0x74>)
     9f8:	4798      	blx	r3

    isItPointingUp();
     9fa:	4b16      	ldr	r3, [pc, #88]	; (a54 <main+0x78>)
     9fc:	4798      	blx	r3

    getSettings();
     9fe:	4b16      	ldr	r3, [pc, #88]	; (a58 <main+0x7c>)
     a00:	4798      	blx	r3

    beep(100);
     a02:	2064      	movs	r0, #100	; 0x64
     a04:	4b15      	ldr	r3, [pc, #84]	; (a5c <main+0x80>)
     a06:	4798      	blx	r3
    delay_ms(500);
     a08:	20fa      	movs	r0, #250	; 0xfa
     a0a:	4b15      	ldr	r3, [pc, #84]	; (a60 <main+0x84>)
     a0c:	0040      	lsls	r0, r0, #1
     a0e:	4798      	blx	r3

    continuityBeep();
     a10:	4b14      	ldr	r3, [pc, #80]	; (a64 <main+0x88>)
     a12:	4798      	blx	r3
    //delay_ms(1000);

    startupTick = millis();
     a14:	4b14      	ldr	r3, [pc, #80]	; (a68 <main+0x8c>)
     a16:	4798      	blx	r3
     a18:	4b14      	ldr	r3, [pc, #80]	; (a6c <main+0x90>)
     a1a:	6018      	str	r0, [r3, #0]

    while (1) {
        if (takeSample()) {
     a1c:	4b14      	ldr	r3, [pc, #80]	; (a70 <main+0x94>)
     a1e:	4798      	blx	r3
     a20:	2800      	cmp	r0, #0
     a22:	d0fb      	beq.n	a1c <main+0x40>
			lookForUSARTReset();
     a24:	4b13      	ldr	r3, [pc, #76]	; (a74 <main+0x98>)
     a26:	4798      	blx	r3
            sampleTick();
     a28:	47a0      	blx	r4
            flight();
     a2a:	4b13      	ldr	r3, [pc, #76]	; (a78 <main+0x9c>)
     a2c:	4798      	blx	r3
            igniterTick();
     a2e:	4b13      	ldr	r3, [pc, #76]	; (a7c <main+0xa0>)
     a30:	4798      	blx	r3
            computeKalmanStates();
     a32:	4b13      	ldr	r3, [pc, #76]	; (a80 <main+0xa4>)
     a34:	4798      	blx	r3
     a36:	e7f1      	b.n	a1c <main+0x40>
     a38:	000005a5 	.word	0x000005a5
     a3c:	00000565 	.word	0x00000565
     a40:	00000aa1 	.word	0x00000aa1
     a44:	000019dd 	.word	0x000019dd
     a48:	00002281 	.word	0x00002281
     a4c:	00003471 	.word	0x00003471
     a50:	00000cc5 	.word	0x00000cc5
     a54:	00001679 	.word	0x00001679
     a58:	000039d1 	.word	0x000039d1
     a5c:	00000e99 	.word	0x00000e99
     a60:	00001191 	.word	0x00001191
     a64:	000017a9 	.word	0x000017a9
     a68:	000011d9 	.word	0x000011d9
     a6c:	2000019c 	.word	0x2000019c
     a70:	00003459 	.word	0x00003459
     a74:	00000acd 	.word	0x00000acd
     a78:	000012e1 	.word	0x000012e1
     a7c:	000017fd 	.word	0x000017fd
     a80:	00002ce1 	.word	0x00002ce1

00000a84 <HardFault_Handler>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     a84:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     a88:	4a03      	ldr	r2, [pc, #12]	; (a98 <HardFault_Handler+0x14>)
     a8a:	4b04      	ldr	r3, [pc, #16]	; (a9c <HardFault_Handler+0x18>)
     a8c:	60da      	str	r2, [r3, #12]
     a8e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	e7fd      	b.n	a92 <HardFault_Handler+0xe>
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	05fa0004 	.word	0x05fa0004
     a9c:	e000ed00 	.word	0xe000ed00

00000aa0 <IMUinit>:
extern uint32_t _ezero;
extern uint32_t _sstack;
extern uint32_t _estack;


void IMUinit() {
     aa0:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     aa2:	4c08      	ldr	r4, [pc, #32]	; (ac4 <IMUinit+0x24>)
     aa4:	2580      	movs	r5, #128	; 0x80
     aa6:	0023      	movs	r3, r4
     aa8:	00ed      	lsls	r5, r5, #3
     aaa:	3394      	adds	r3, #148	; 0x94
     aac:	601d      	str	r5, [r3, #0]

    pinLow(cs_accel);
    spiDataOut(SPI0, BMI_ACCEL_PMU_RANGE);
     aae:	4e06      	ldr	r6, [pc, #24]	; (ac8 <IMUinit+0x28>)
     ab0:	210f      	movs	r1, #15
     ab2:	2000      	movs	r0, #0
     ab4:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ab6:	3498      	adds	r4, #152	; 0x98
    spiDataOut(SPI0, BMI_ACCEL_16G_RANGE);
     ab8:	210c      	movs	r1, #12
     aba:	2000      	movs	r0, #0
     abc:	47b0      	blx	r6
     abe:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     ac0:	bd70      	pop	{r4, r5, r6, pc}
     ac2:	46c0      	nop			; (mov r8, r8)
     ac4:	41004400 	.word	0x41004400
     ac8:	0000388d 	.word	0x0000388d

00000acc <lookForUSARTReset>:

void lookForUSARTReset(){
     acc:	b510      	push	{r4, lr}
	 if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     ace:	4b09      	ldr	r3, [pc, #36]	; (af4 <lookForUSARTReset+0x28>)
     ad0:	7e1b      	ldrb	r3, [r3, #24]
     ad2:	075b      	lsls	r3, r3, #29
     ad4:	d50d      	bpl.n	af2 <lookForUSARTReset+0x26>
		 u8_t possibleReset = usartDataIn(USART3);
     ad6:	2003      	movs	r0, #3
     ad8:	4b07      	ldr	r3, [pc, #28]	; (af8 <lookForUSARTReset+0x2c>)
     ada:	4798      	blx	r3
		 if (possibleReset == 0x52) {
     adc:	2852      	cmp	r0, #82	; 0x52
     ade:	d108      	bne.n	af2 <lookForUSARTReset+0x26>
     ae0:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     ae4:	4a05      	ldr	r2, [pc, #20]	; (afc <lookForUSARTReset+0x30>)
     ae6:	4b06      	ldr	r3, [pc, #24]	; (b00 <lookForUSARTReset+0x34>)
     ae8:	60da      	str	r2, [r3, #12]
     aea:	f3bf 8f4f 	dsb	sy
    __NOP();
     aee:	46c0      	nop			; (mov r8, r8)
     af0:	e7fd      	b.n	aee <lookForUSARTReset+0x22>
	 
	 
	
	
}
}
     af2:	bd10      	pop	{r4, pc}
     af4:	42001400 	.word	0x42001400
     af8:	000038d9 	.word	0x000038d9
     afc:	05fa0004 	.word	0x05fa0004
     b00:	e000ed00 	.word	0xe000ed00

00000b04 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     b04:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     b06:	4b09      	ldr	r3, [pc, #36]	; (b2c <USARTconnectionAvaliable+0x28>)
     b08:	7e1c      	ldrb	r4, [r3, #24]
     b0a:	0764      	lsls	r4, r4, #29
     b0c:	0fe4      	lsrs	r4, r4, #31
     b0e:	2c01      	cmp	r4, #1
     b10:	d001      	beq.n	b16 <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     b12:	2000      	movs	r0, #0
}
     b14:	bd10      	pop	{r4, pc}
        u8_t connectAttempt = usartDataIn(USART3);
     b16:	2003      	movs	r0, #3
     b18:	4b05      	ldr	r3, [pc, #20]	; (b30 <USARTconnectionAvaliable+0x2c>)
     b1a:	4798      	blx	r3
     b1c:	0001      	movs	r1, r0
        if (connectAttempt == 0x48) {
     b1e:	2848      	cmp	r0, #72	; 0x48
     b20:	d1f7      	bne.n	b12 <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     b22:	2003      	movs	r0, #3
     b24:	4b03      	ldr	r3, [pc, #12]	; (b34 <USARTconnectionAvaliable+0x30>)
     b26:	4798      	blx	r3
            return true;
     b28:	0020      	movs	r0, r4
     b2a:	e7f3      	b.n	b14 <USARTconnectionAvaliable+0x10>
     b2c:	42001400 	.word	0x42001400
     b30:	000038d9 	.word	0x000038d9
     b34:	000038c1 	.word	0x000038c1

00000b38 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     b38:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b3a:	2780      	movs	r7, #128	; 0x80
void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     b3c:	0005      	movs	r5, r0
    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b3e:	2400      	movs	r4, #0
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     b40:	1a09      	subs	r1, r1, r0
     b42:	0a09      	lsrs	r1, r1, #8
void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     b44:	b0c3      	sub	sp, #268	; 0x10c
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     b46:	b28b      	uxth	r3, r1
     b48:	9301      	str	r3, [sp, #4]
        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b4a:	007f      	lsls	r7, r7, #1
        AT25SEreadPage(pageToReadAddress , data);
     b4c:	a902      	add	r1, sp, #8
     b4e:	0028      	movs	r0, r5
     b50:	4b09      	ldr	r3, [pc, #36]	; (b78 <sendTheasePagesToComputer+0x40>)
     b52:	4798      	blx	r3
     b54:	2600      	movs	r6, #0
            usartDataOut(USART3, data[dataByte]);
     b56:	ab02      	add	r3, sp, #8
     b58:	5d99      	ldrb	r1, [r3, r6]
     b5a:	2003      	movs	r0, #3
     b5c:	4b07      	ldr	r3, [pc, #28]	; (b7c <sendTheasePagesToComputer+0x44>)
     b5e:	3601      	adds	r6, #1
     b60:	4798      	blx	r3
        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b62:	42be      	cmp	r6, r7
     b64:	d1f7      	bne.n	b56 <sendTheasePagesToComputer+0x1e>
    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b66:	3401      	adds	r4, #1
     b68:	9b01      	ldr	r3, [sp, #4]
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b6a:	3501      	adds	r5, #1
    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b6c:	b2a4      	uxth	r4, r4
        pageToReadAddress = pageToReadAddress + 0x100;
     b6e:	35ff      	adds	r5, #255	; 0xff
    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b70:	42a3      	cmp	r3, r4
     b72:	d2eb      	bcs.n	b4c <sendTheasePagesToComputer+0x14>
    }
}
     b74:	b043      	add	sp, #268	; 0x10c
     b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b78:	0000035d 	.word	0x0000035d
     b7c:	000038c1 	.word	0x000038c1

00000b80 <altitudeAGL>:

int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
     b80:	4b07      	ldr	r3, [pc, #28]	; (ba0 <altitudeAGL+0x20>)
int32_t altitudeAGL() {
     b82:	b510      	push	{r4, lr}
    return altitude - offsets.groundOffset;
     b84:	6998      	ldr	r0, [r3, #24]
     b86:	4b07      	ldr	r3, [pc, #28]	; (ba4 <altitudeAGL+0x24>)
     b88:	4798      	blx	r3
     b8a:	000b      	movs	r3, r1
     b8c:	4906      	ldr	r1, [pc, #24]	; (ba8 <altitudeAGL+0x28>)
     b8e:	0002      	movs	r2, r0
     b90:	6808      	ldr	r0, [r1, #0]
     b92:	6849      	ldr	r1, [r1, #4]
     b94:	4c05      	ldr	r4, [pc, #20]	; (bac <altitudeAGL+0x2c>)
     b96:	47a0      	blx	r4
     b98:	4b05      	ldr	r3, [pc, #20]	; (bb0 <altitudeAGL+0x30>)
     b9a:	4798      	blx	r3
}
     b9c:	bd10      	pop	{r4, pc}
     b9e:	46c0      	nop			; (mov r8, r8)
     ba0:	20000150 	.word	0x20000150
     ba4:	00006fa5 	.word	0x00006fa5
     ba8:	20000328 	.word	0x20000328
     bac:	0000684d 	.word	0x0000684d
     bb0:	00006eb9 	.word	0x00006eb9

00000bb4 <unplugged>:


bool unplugged() {
    if (sample.voltage.batFloat < 3.4) {
     bb4:	4b07      	ldr	r3, [pc, #28]	; (bd4 <unplugged+0x20>)
bool unplugged() {
     bb6:	b570      	push	{r4, r5, r6, lr}
    if (sample.voltage.batFloat < 3.4) {
     bb8:	68d8      	ldr	r0, [r3, #12]
     bba:	4b07      	ldr	r3, [pc, #28]	; (bd8 <unplugged+0x24>)
     bbc:	4798      	blx	r3
     bbe:	4a07      	ldr	r2, [pc, #28]	; (bdc <unplugged+0x28>)
     bc0:	4b07      	ldr	r3, [pc, #28]	; (be0 <unplugged+0x2c>)
     bc2:	4d08      	ldr	r5, [pc, #32]	; (be4 <unplugged+0x30>)
     bc4:	2401      	movs	r4, #1
     bc6:	47a8      	blx	r5
     bc8:	2800      	cmp	r0, #0
     bca:	d100      	bne.n	bce <unplugged+0x1a>
     bcc:	1c04      	adds	r4, r0, #0
     bce:	b2e0      	uxtb	r0, r4
        return true;
    } else {
        return false;
    }
}
     bd0:	bd70      	pop	{r4, r5, r6, pc}
     bd2:	46c0      	nop			; (mov r8, r8)
     bd4:	200005f0 	.word	0x200005f0
     bd8:	00007015 	.word	0x00007015
     bdc:	33333333 	.word	0x33333333
     be0:	400b3333 	.word	0x400b3333
     be4:	00005165 	.word	0x00005165

00000be8 <shutDown>:

void shutDown() {
     be8:	b510      	push	{r4, lr}


    delay_ms(100);
     bea:	2064      	movs	r0, #100	; 0x64
     bec:	4b1a      	ldr	r3, [pc, #104]	; (c58 <shutDown+0x70>)
     bee:	4798      	blx	r3
    TC4->COUNT8.CTRLA.reg = 0;
     bf0:	2200      	movs	r2, #0
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     bf2:	2180      	movs	r1, #128	; 0x80
     bf4:	4b19      	ldr	r3, [pc, #100]	; (c5c <shutDown+0x74>)
     bf6:	0309      	lsls	r1, r1, #12
     bf8:	801a      	strh	r2, [r3, #0]
    TC5->COUNT8.CTRLA.reg = 0;
     bfa:	4b19      	ldr	r3, [pc, #100]	; (c60 <shutDown+0x78>)
     bfc:	801a      	strh	r2, [r3, #0]
     bfe:	4b19      	ldr	r3, [pc, #100]	; (c64 <shutDown+0x7c>)
     c00:	67d9      	str	r1, [r3, #124]	; 0x7c
     c02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c06:	f3bf 8f6f 	isb	sy
     c0a:	2080      	movs	r0, #128	; 0x80
     c0c:	0340      	lsls	r0, r0, #13
     c0e:	67d8      	str	r0, [r3, #124]	; 0x7c
  __ASM volatile ("dsb 0xF":::"memory");
     c10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c14:	f3bf 8f6f 	isb	sy
     c18:	2108      	movs	r1, #8
     c1a:	67d9      	str	r1, [r3, #124]	; 0x7c
  __ASM volatile ("dsb 0xF":::"memory");
     c1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c20:	f3bf 8f6f 	isb	sy
    NVIC_DisableIRQ(TC4_IRQn);
    NVIC_DisableIRQ(TC5_IRQn);
    NVIC_DisableIRQ(RTC_IRQn);
    RTC->MODE1.CTRL.bit.ENABLE = 0;
     c24:	2302      	movs	r3, #2
     c26:	4c10      	ldr	r4, [pc, #64]	; (c68 <shutDown+0x80>)
     c28:	8821      	ldrh	r1, [r4, #0]
     c2a:	4399      	bics	r1, r3
     c2c:	8021      	strh	r1, [r4, #0]
    SysTick->CTRL = 0;
     c2e:	490f      	ldr	r1, [pc, #60]	; (c6c <shutDown+0x84>)
     c30:	600a      	str	r2, [r1, #0]
    PM->APBAMASK.reg = 0;
     c32:	490f      	ldr	r1, [pc, #60]	; (c70 <shutDown+0x88>)
     c34:	618a      	str	r2, [r1, #24]

    //turn off sercom clocks
    //GCLK->CLKCTRL.reg

    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     c36:	2180      	movs	r1, #128	; 0x80
     c38:	4a0e      	ldr	r2, [pc, #56]	; (c74 <shutDown+0x8c>)
     c3a:	0049      	lsls	r1, r1, #1
     c3c:	6091      	str	r1, [r2, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_OSC8M) | (GCLK_GENCTRL_GENEN));
     c3e:	2183      	movs	r1, #131	; 0x83
     c40:	0249      	lsls	r1, r1, #9
     c42:	6051      	str	r1, [r2, #4]
     c44:	4a0c      	ldr	r2, [pc, #48]	; (c78 <shutDown+0x90>)

    pinHigh(LedPin);

    SYSCTRL->BOD33.reg = SYSCTRL_BOD33_PSEL_DIV8 | SYSCTRL_BOD33_ACTION_RESET | SYSCTRL_BOD33_LEVEL(60);
     c46:	490d      	ldr	r1, [pc, #52]	; (c7c <shutDown+0x94>)
     c48:	6190      	str	r0, [r2, #24]
     c4a:	4a0d      	ldr	r2, [pc, #52]	; (c80 <shutDown+0x98>)
     c4c:	6351      	str	r1, [r2, #52]	; 0x34

    SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
     c4e:	6b51      	ldr	r1, [r2, #52]	; 0x34
     c50:	430b      	orrs	r3, r1
     c52:	6353      	str	r3, [r2, #52]	; 0x34
     c54:	e7fe      	b.n	c54 <shutDown+0x6c>
     c56:	46c0      	nop			; (mov r8, r8)
     c58:	00001191 	.word	0x00001191
     c5c:	42003000 	.word	0x42003000
     c60:	42003400 	.word	0x42003400
     c64:	e000e104 	.word	0xe000e104
     c68:	40001400 	.word	0x40001400
     c6c:	e000e010 	.word	0xe000e010
     c70:	40000400 	.word	0x40000400
     c74:	40000c00 	.word	0x40000c00
     c78:	41004400 	.word	0x41004400
     c7c:	003c2008 	.word	0x003c2008
     c80:	40000800 	.word	0x40000800

00000c84 <finishFlight>:
    }
}

void finishFlight() {

    flightState = flightIdle;
     c84:	2201      	movs	r2, #1
     c86:	4b05      	ldr	r3, [pc, #20]	; (c9c <finishFlight+0x18>)
void finishFlight() {
     c88:	b510      	push	{r4, lr}
    flightState = flightIdle;
     c8a:	701a      	strb	r2, [r3, #0]
    AT25SFHoldTillReady();
     c8c:	4b04      	ldr	r3, [pc, #16]	; (ca0 <finishFlight+0x1c>)
     c8e:	4798      	blx	r3
    writeFlightEndAddress( );
     c90:	4b04      	ldr	r3, [pc, #16]	; (ca4 <finishFlight+0x20>)
     c92:	4798      	blx	r3
    unpluggedJingle();
     c94:	4b04      	ldr	r3, [pc, #16]	; (ca8 <finishFlight+0x24>)
     c96:	4798      	blx	r3
    shutDown();
     c98:	4b04      	ldr	r3, [pc, #16]	; (cac <finishFlight+0x28>)
     c9a:	4798      	blx	r3
     c9c:	200001ac 	.word	0x200001ac
     ca0:	000001e5 	.word	0x000001e5
     ca4:	000032f9 	.word	0x000032f9
     ca8:	00000f41 	.word	0x00000f41
     cac:	00000be9 	.word	0x00000be9

00000cb0 <finishFromPad>:

}

void finishFromPad() {
    unpluggedJingle();
     cb0:	4b02      	ldr	r3, [pc, #8]	; (cbc <finishFromPad+0xc>)
void finishFromPad() {
     cb2:	b510      	push	{r4, lr}
    unpluggedJingle();
     cb4:	4798      	blx	r3
    shutDown();
     cb6:	4b02      	ldr	r3, [pc, #8]	; (cc0 <finishFromPad+0x10>)
     cb8:	4798      	blx	r3
     cba:	46c0      	nop			; (mov r8, r8)
     cbc:	00000f41 	.word	0x00000f41
     cc0:	00000be9 	.word	0x00000be9

00000cc4 <POST>:
}


void POST() {
     cc4:	b5f0      	push	{r4, r5, r6, r7, lr}

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     cc6:	4b31      	ldr	r3, [pc, #196]	; (d8c <POST+0xc8>)
void POST() {
     cc8:	b085      	sub	sp, #20
    u8_t crc = MS5803_CRC4();
     cca:	4798      	blx	r3
    if (crc != coefficients_[7]) {
     ccc:	4b30      	ldr	r3, [pc, #192]	; (d90 <POST+0xcc>)
     cce:	b280      	uxth	r0, r0
     cd0:	89db      	ldrh	r3, [r3, #14]
        postFailed = true;
        failType = 1;
     cd2:	2401      	movs	r4, #1
    if (crc != coefficients_[7]) {
     cd4:	4283      	cmp	r3, r0
     cd6:	d100      	bne.n	cda <POST+0x16>
    u8_t failType = 0;
     cd8:	2400      	movs	r4, #0
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cda:	2780      	movs	r7, #128	; 0x80
     cdc:	4d2d      	ldr	r5, [pc, #180]	; (d94 <POST+0xd0>)
     cde:	02ff      	lsls	r7, r7, #11
    }

    //Memory Post
    pinLow(cs_mem);
    spiDataOut(SPI1,0x9f); // read id and mfg code
     ce0:	219f      	movs	r1, #159	; 0x9f
     ce2:	4b2d      	ldr	r3, [pc, #180]	; (d98 <POST+0xd4>)
    bool postFailed = false;
     ce4:	9401      	str	r4, [sp, #4]
    spiDataOut(SPI1,0x9f); // read id and mfg code
     ce6:	2001      	movs	r0, #1
     ce8:	616f      	str	r7, [r5, #20]
     cea:	4798      	blx	r3
    u8_t mfgID = spiDataIn(SPI1);
     cec:	4e2b      	ldr	r6, [pc, #172]	; (d9c <POST+0xd8>)
     cee:	2001      	movs	r0, #1
     cf0:	47b0      	blx	r6
     cf2:	9002      	str	r0, [sp, #8]
    u8_t deviceID1 = spiDataIn(SPI1);
     cf4:	2001      	movs	r0, #1
     cf6:	47b0      	blx	r6
     cf8:	9003      	str	r0, [sp, #12]
    u8_t deviceID2 = spiDataIn(SPI1);
     cfa:	2001      	movs	r0, #1
     cfc:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cfe:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    if ( (mfgID != 0x1f) & (deviceID1 != 0x86) & (deviceID2 != 0x01)) {
     d00:	9902      	ldr	r1, [sp, #8]
     d02:	9b03      	ldr	r3, [sp, #12]
     d04:	391f      	subs	r1, #31
     d06:	3b86      	subs	r3, #134	; 0x86
     d08:	1e4a      	subs	r2, r1, #1
     d0a:	4191      	sbcs	r1, r2
     d0c:	1e5a      	subs	r2, r3, #1
     d0e:	4193      	sbcs	r3, r2
     d10:	3801      	subs	r0, #1
     d12:	1e42      	subs	r2, r0, #1
     d14:	4190      	sbcs	r0, r2
     d16:	400b      	ands	r3, r1
     d18:	4018      	ands	r0, r3
     d1a:	d001      	beq.n	d20 <POST+0x5c>
        postFailed = true;
        failType = 2;
     d1c:	2402      	movs	r4, #2
        postFailed = true;
     d1e:	9001      	str	r0, [sp, #4]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d20:	2680      	movs	r6, #128	; 0x80
     d22:	4b1f      	ldr	r3, [pc, #124]	; (da0 <POST+0xdc>)
     d24:	00f6      	lsls	r6, r6, #3
     d26:	601e      	str	r6, [r3, #0]
    }

    //Accelerometer Post
    pinLow(cs_accel);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     d28:	2180      	movs	r1, #128	; 0x80
     d2a:	4b1b      	ldr	r3, [pc, #108]	; (d98 <POST+0xd4>)
     d2c:	2000      	movs	r0, #0
     d2e:	4798      	blx	r3
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
     d30:	21ff      	movs	r1, #255	; 0xff
     d32:	2000      	movs	r0, #0
     d34:	4f1b      	ldr	r7, [pc, #108]	; (da4 <POST+0xe0>)
     d36:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d38:	4b1b      	ldr	r3, [pc, #108]	; (da8 <POST+0xe4>)
     d3a:	601e      	str	r6, [r3, #0]
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
     d3c:	28fa      	cmp	r0, #250	; 0xfa
     d3e:	d002      	beq.n	d46 <POST+0x82>
        postFailed = true;
     d40:	2301      	movs	r3, #1
        failType = 3;
     d42:	2403      	movs	r4, #3
        postFailed = true;
     d44:	9301      	str	r3, [sp, #4]
    }

    //Gyro Post
    pinLow(cs_gyro);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     d46:	2180      	movs	r1, #128	; 0x80
     d48:	2000      	movs	r0, #0
     d4a:	4b13      	ldr	r3, [pc, #76]	; (d98 <POST+0xd4>)
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d4c:	616e      	str	r6, [r5, #20]
     d4e:	4798      	blx	r3
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
     d50:	21ff      	movs	r1, #255	; 0xff
     d52:	2000      	movs	r0, #0
     d54:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d56:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
     d58:	280f      	cmp	r0, #15
     d5a:	d104      	bne.n	d66 <POST+0xa2>
    }

    //Analog Accelerometer Post


    if (postFailed) {
     d5c:	9b01      	ldr	r3, [sp, #4]
     d5e:	2b00      	cmp	r3, #0
     d60:	d102      	bne.n	d68 <POST+0xa4>
                delay_ms(300);
            }
            delay_ms(1500);
        }
    }
}
     d62:	b005      	add	sp, #20
     d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        failType = 4;
     d66:	2404      	movs	r4, #4
                beep(300);
     d68:	2696      	movs	r6, #150	; 0x96
     d6a:	0076      	lsls	r6, r6, #1
            for (beepCount = failType; beepCount > 0; beepCount--) {
     d6c:	0025      	movs	r5, r4
     d6e:	4f0f      	ldr	r7, [pc, #60]	; (dac <POST+0xe8>)
     d70:	2d00      	cmp	r5, #0
     d72:	d102      	bne.n	d7a <POST+0xb6>
            delay_ms(1500);
     d74:	480e      	ldr	r0, [pc, #56]	; (db0 <POST+0xec>)
     d76:	47b8      	blx	r7
        while (1) {
     d78:	e7f8      	b.n	d6c <POST+0xa8>
                beep(300);
     d7a:	0030      	movs	r0, r6
     d7c:	4b0d      	ldr	r3, [pc, #52]	; (db4 <POST+0xf0>)
     d7e:	4798      	blx	r3
            for (beepCount = failType; beepCount > 0; beepCount--) {
     d80:	3d01      	subs	r5, #1
                delay_ms(300);
     d82:	0030      	movs	r0, r6
     d84:	47b8      	blx	r7
            for (beepCount = failType; beepCount > 0; beepCount--) {
     d86:	b2ed      	uxtb	r5, r5
     d88:	e7f1      	b.n	d6e <POST+0xaa>
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	00000595 	.word	0x00000595
     d90:	200002ae 	.word	0x200002ae
     d94:	41004400 	.word	0x41004400
     d98:	0000388d 	.word	0x0000388d
     d9c:	000038a5 	.word	0x000038a5
     da0:	41004494 	.word	0x41004494
     da4:	00003875 	.word	0x00003875
     da8:	41004498 	.word	0x41004498
     dac:	00001191 	.word	0x00001191
     db0:	000005dc 	.word	0x000005dc
     db4:	00000e99 	.word	0x00000e99

00000db8 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     db8:	2380      	movs	r3, #128	; 0x80
     dba:	4a10      	ldr	r2, [pc, #64]	; (dfc <adcInit+0x44>)
     dbc:	025b      	lsls	r3, r3, #9
     dbe:	6a11      	ldr	r1, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     dc0:	480f      	ldr	r0, [pc, #60]	; (e00 <adcInit+0x48>)
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     dc2:	430b      	orrs	r3, r1
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     dc4:	21e0      	movs	r1, #224	; 0xe0
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     dc6:	6213      	str	r3, [r2, #32]
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     dc8:	4b0e      	ldr	r3, [pc, #56]	; (e04 <adcInit+0x4c>)
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     dca:	4a0f      	ldr	r2, [pc, #60]	; (e08 <adcInit+0x50>)
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     dcc:	00c9      	lsls	r1, r1, #3
     dce:	8099      	strh	r1, [r3, #4]
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     dd0:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     dd2:	4a0e      	ldr	r2, [pc, #56]	; (e0c <adcInit+0x54>)
     dd4:	6810      	ldr	r0, [r2, #0]
     dd6:	0142      	lsls	r2, r0, #5
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     dd8:	0010      	movs	r0, r2
        ADC_CALIB_BIAS_CAL(
     dda:	4011      	ands	r1, r2
        ADC_CALIB_LINEARITY_CAL(
     ddc:	4a0c      	ldr	r2, [pc, #48]	; (e10 <adcInit+0x58>)
     dde:	6812      	ldr	r2, [r2, #0]
     de0:	0ed2      	lsrs	r2, r2, #27
     de2:	4302      	orrs	r2, r0
     de4:	b2d2      	uxtb	r2, r2
        ) |
     de6:	430a      	orrs	r2, r1
    ADC->CALIB.reg =
     de8:	851a      	strh	r2, [r3, #40]	; 0x28
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC0;
     dea:	2201      	movs	r2, #1
     dec:	705a      	strb	r2, [r3, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     dee:	1892      	adds	r2, r2, r2
     df0:	701a      	strb	r2, [r3, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     df2:	7e5a      	ldrb	r2, [r3, #25]
     df4:	b252      	sxtb	r2, r2
     df6:	2a00      	cmp	r2, #0
     df8:	dbfb      	blt.n	df2 <adcInit+0x3a>
}
     dfa:	4770      	bx	lr
     dfc:	40000400 	.word	0x40000400
     e00:	0000401e 	.word	0x0000401e
     e04:	42004000 	.word	0x42004000
     e08:	40000c00 	.word	0x40000c00
     e0c:	00806024 	.word	0x00806024
     e10:	00806020 	.word	0x00806020

00000e14 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     e14:	2202      	movs	r2, #2
     e16:	4b04      	ldr	r3, [pc, #16]	; (e28 <adcSample+0x14>)
     e18:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     e1a:	3a01      	subs	r2, #1
     e1c:	7e19      	ldrb	r1, [r3, #24]
     e1e:	4211      	tst	r1, r2
     e20:	d0fc      	beq.n	e1c <adcSample+0x8>
    return ADC->RESULT.reg;
     e22:	8b58      	ldrh	r0, [r3, #26]
     e24:	b280      	uxth	r0, r0
}
     e26:	4770      	bx	lr
     e28:	42004000 	.word	0x42004000

00000e2c <adc_read>:


u16_t adc_read(Pin p) {
     e2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
     e2e:	9101      	str	r1, [sp, #4]
    if (p.pin & 1) {
     e30:	2101      	movs	r1, #1
     e32:	0c02      	lsrs	r2, r0, #16
     e34:	9000      	str	r0, [sp, #0]
     e36:	b2d2      	uxtb	r2, r2
     e38:	0e00      	lsrs	r0, r0, #24
     e3a:	0843      	lsrs	r3, r0, #1
     e3c:	01d2      	lsls	r2, r2, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     e3e:	189b      	adds	r3, r3, r2
    if (p.pin & 1) {
     e40:	4208      	tst	r0, r1
     e42:	d01a      	beq.n	e7a <adc_read+0x4e>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     e44:	240f      	movs	r4, #15
     e46:	4910      	ldr	r1, [pc, #64]	; (e88 <adc_read+0x5c>)
     e48:	185b      	adds	r3, r3, r1
     e4a:	7819      	ldrb	r1, [r3, #0]
     e4c:	400c      	ands	r4, r1
     e4e:	2110      	movs	r1, #16
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     e50:	4321      	orrs	r1, r4
     e52:	7019      	strb	r1, [r3, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     e54:	4b0d      	ldr	r3, [pc, #52]	; (e8c <adc_read+0x60>)
     e56:	1880      	adds	r0, r0, r2
     e58:	18c0      	adds	r0, r0, r3
     e5a:	2301      	movs	r3, #1
     e5c:	7802      	ldrb	r2, [r0, #0]
     e5e:	4313      	orrs	r3, r2
     e60:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     e62:	466b      	mov	r3, sp
     e64:	221f      	movs	r2, #31
     e66:	791b      	ldrb	r3, [r3, #4]
     e68:	401a      	ands	r2, r3
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     e6a:	23c0      	movs	r3, #192	; 0xc0
     e6c:	015b      	lsls	r3, r3, #5
     e6e:	4313      	orrs	r3, r2
    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     e70:	4a07      	ldr	r2, [pc, #28]	; (e90 <adc_read+0x64>)
     e72:	6113      	str	r3, [r2, #16]

    return adcSample();
     e74:	4b07      	ldr	r3, [pc, #28]	; (e94 <adc_read+0x68>)
     e76:	4798      	blx	r3
     e78:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     e7a:	250f      	movs	r5, #15
     e7c:	4c02      	ldr	r4, [pc, #8]	; (e88 <adc_read+0x5c>)
     e7e:	191b      	adds	r3, r3, r4
     e80:	781c      	ldrb	r4, [r3, #0]
     e82:	43ac      	bics	r4, r5
     e84:	e7e4      	b.n	e50 <adc_read+0x24>
     e86:	46c0      	nop			; (mov r8, r8)
     e88:	41004430 	.word	0x41004430
     e8c:	41004440 	.word	0x41004440
     e90:	42004000 	.word	0x42004000
     e94:	00000e15 	.word	0x00000e15

00000e98 <beep>:
#include <util.h>
#include <boardDefines.h>
#include <math.h>


void beep(u16_t duration) {
     e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


    long count = 0;

    long beepStop = duration*1000 / 122;
     e9a:	23fa      	movs	r3, #250	; 0xfa
     e9c:	009b      	lsls	r3, r3, #2
     e9e:	4358      	muls	r0, r3
     ea0:	217a      	movs	r1, #122	; 0x7a
     ea2:	4b0b      	ldr	r3, [pc, #44]	; (ed0 <beep+0x38>)
     ea4:	4798      	blx	r3
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     ea6:	2380      	movs	r3, #128	; 0x80
     ea8:	2680      	movs	r6, #128	; 0x80
     eaa:	0007      	movs	r7, r0
    long count = 0;
     eac:	2500      	movs	r5, #0
     eae:	4c09      	ldr	r4, [pc, #36]	; (ed4 <beep+0x3c>)
     eb0:	035b      	lsls	r3, r3, #13
     eb2:	61e3      	str	r3, [r4, #28]
     eb4:	03b6      	lsls	r6, r6, #14

    pinToggle(LedPin);

    while(count < beepStop) {
     eb6:	42bd      	cmp	r5, r7
     eb8:	d104      	bne.n	ec4 <beep+0x2c>
     eba:	2380      	movs	r3, #128	; 0x80
     ebc:	035b      	lsls	r3, r3, #13
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ebe:	6166      	str	r6, [r4, #20]
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     ec0:	61e3      	str	r3, [r4, #28]
        delay_us(120);
        count++;
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ec4:	61e6      	str	r6, [r4, #28]
        delay_us(120);
     ec6:	2078      	movs	r0, #120	; 0x78
     ec8:	4b03      	ldr	r3, [pc, #12]	; (ed8 <beep+0x40>)
     eca:	4798      	blx	r3
        count++;
     ecc:	3501      	adds	r5, #1
     ece:	e7f2      	b.n	eb6 <beep+0x1e>
     ed0:	00004f61 	.word	0x00004f61
     ed4:	41004400 	.word	0x41004400
     ed8:	00001161 	.word	0x00001161

00000edc <beepDigit>:

void beepDigit(u8_t digit) {
     edc:	b570      	push	{r4, r5, r6, lr}
     ede:	1e04      	subs	r4, r0, #0
     ee0:	4d08      	ldr	r5, [pc, #32]	; (f04 <beepDigit+0x28>)
    if (digit == 0) {
     ee2:	d103      	bne.n	eec <beepDigit+0x10>
        beep(600);
     ee4:	2096      	movs	r0, #150	; 0x96
     ee6:	0080      	lsls	r0, r0, #2
     ee8:	47a8      	blx	r5
            beep(200);
            delay_ms(300);
            --digit;
        }
    }
}
     eea:	bd70      	pop	{r4, r5, r6, pc}
            delay_ms(300);
     eec:	2696      	movs	r6, #150	; 0x96
     eee:	0076      	lsls	r6, r6, #1
            beep(200);
     ef0:	20c8      	movs	r0, #200	; 0xc8
            --digit;
     ef2:	3c01      	subs	r4, #1
            beep(200);
     ef4:	47a8      	blx	r5
            --digit;
     ef6:	b2e4      	uxtb	r4, r4
            delay_ms(300);
     ef8:	0030      	movs	r0, r6
     efa:	4b03      	ldr	r3, [pc, #12]	; (f08 <beepDigit+0x2c>)
     efc:	4798      	blx	r3
        while (digit > 0) {
     efe:	2c00      	cmp	r4, #0
     f00:	d1f6      	bne.n	ef0 <beepDigit+0x14>
     f02:	e7f2      	b.n	eea <beepDigit+0xe>
     f04:	00000e99 	.word	0x00000e99
     f08:	00001191 	.word	0x00001191

00000f0c <startupJingle>:
    }
    beepDigit(number);

}

void startupJingle() {
     f0c:	b570      	push	{r4, r5, r6, lr}
    beep(150);
     f0e:	2096      	movs	r0, #150	; 0x96
     f10:	4d09      	ldr	r5, [pc, #36]	; (f38 <startupJingle+0x2c>)
     f12:	47a8      	blx	r5
    delay_ms(60);
     f14:	4c09      	ldr	r4, [pc, #36]	; (f3c <startupJingle+0x30>)
     f16:	203c      	movs	r0, #60	; 0x3c
     f18:	47a0      	blx	r4
    beep(150);
     f1a:	2096      	movs	r0, #150	; 0x96
     f1c:	47a8      	blx	r5
    delay_ms(250);
     f1e:	20fa      	movs	r0, #250	; 0xfa
     f20:	47a0      	blx	r4
    beep(150);
     f22:	2096      	movs	r0, #150	; 0x96
     f24:	47a8      	blx	r5
    delay_ms(60);
     f26:	203c      	movs	r0, #60	; 0x3c
     f28:	47a0      	blx	r4
    beep(150);
     f2a:	2096      	movs	r0, #150	; 0x96
     f2c:	47a8      	blx	r5
    delay_ms(500);
     f2e:	20fa      	movs	r0, #250	; 0xfa
     f30:	0040      	lsls	r0, r0, #1
     f32:	47a0      	blx	r4
}
     f34:	bd70      	pop	{r4, r5, r6, pc}
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	00000e99 	.word	0x00000e99
     f3c:	00001191 	.word	0x00001191

00000f40 <unpluggedJingle>:

void unpluggedJingle() {
     f40:	b570      	push	{r4, r5, r6, lr}
    delay_ms(60);
     f42:	203c      	movs	r0, #60	; 0x3c
     f44:	4c0b      	ldr	r4, [pc, #44]	; (f74 <unpluggedJingle+0x34>)
     f46:	47a0      	blx	r4
    beep(150);
     f48:	4d0b      	ldr	r5, [pc, #44]	; (f78 <unpluggedJingle+0x38>)
     f4a:	2096      	movs	r0, #150	; 0x96
     f4c:	47a8      	blx	r5
    delay_ms(60);
     f4e:	203c      	movs	r0, #60	; 0x3c
     f50:	47a0      	blx	r4
    beep(150);
     f52:	2096      	movs	r0, #150	; 0x96
     f54:	47a8      	blx	r5
    delay_ms(60);
     f56:	203c      	movs	r0, #60	; 0x3c
     f58:	47a0      	blx	r4
    beep(150);
     f5a:	2096      	movs	r0, #150	; 0x96
     f5c:	47a8      	blx	r5
    delay_ms(60);
     f5e:	203c      	movs	r0, #60	; 0x3c
     f60:	47a0      	blx	r4
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f62:	2280      	movs	r2, #128	; 0x80
     f64:	4b05      	ldr	r3, [pc, #20]	; (f7c <unpluggedJingle+0x3c>)
     f66:	0392      	lsls	r2, r2, #14
     f68:	615a      	str	r2, [r3, #20]
     f6a:	2280      	movs	r2, #128	; 0x80
     f6c:	0352      	lsls	r2, r2, #13
     f6e:	615a      	str	r2, [r3, #20]
    pinLow(buzzerPin);
    pinLow(LedPin);

}
     f70:	bd70      	pop	{r4, r5, r6, pc}
     f72:	46c0      	nop			; (mov r8, r8)
     f74:	00001191 	.word	0x00001191
     f78:	00000e99 	.word	0x00000e99
     f7c:	41004400 	.word	0x41004400

00000f80 <dfll_nvm_val>:
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10

uint32_t dfll_nvm_val() {
    uint32_t coarse = ( *((uint32_t *)(NVMCTRL_OTP4)
     f80:	4b08      	ldr	r3, [pc, #32]	; (fa4 <dfll_nvm_val+0x24>)
     f82:	681b      	ldr	r3, [r3, #0]
     f84:	0e9b      	lsrs	r3, r3, #26
                          + (NVM_DFLL_COARSE_POS / 32))
                        >> (NVM_DFLL_COARSE_POS % 32))
                      & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     f86:	2b3f      	cmp	r3, #63	; 0x3f
     f88:	d100      	bne.n	f8c <dfll_nvm_val+0xc>
        coarse = 0x1f;
     f8a:	3b20      	subs	r3, #32
    }
    uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
                        + (NVM_DFLL_FINE_POS / 32))
                      >> (NVM_DFLL_FINE_POS % 32))
     f8c:	4a06      	ldr	r2, [pc, #24]	; (fa8 <dfll_nvm_val+0x28>)
    uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
     f8e:	6810      	ldr	r0, [r2, #0]
                    & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     f90:	4a06      	ldr	r2, [pc, #24]	; (fac <dfll_nvm_val+0x2c>)
    uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
     f92:	0580      	lsls	r0, r0, #22
     f94:	0d80      	lsrs	r0, r0, #22
    if (fine == 0x3ff) {
     f96:	4290      	cmp	r0, r2
     f98:	d100      	bne.n	f9c <dfll_nvm_val+0x1c>
        fine = 0x1ff;
     f9a:	4805      	ldr	r0, [pc, #20]	; (fb0 <dfll_nvm_val+0x30>)
    }

    return SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     f9c:	029b      	lsls	r3, r3, #10
     f9e:	4318      	orrs	r0, r3
}
     fa0:	4770      	bx	lr
     fa2:	46c0      	nop			; (mov r8, r8)
     fa4:	00806024 	.word	0x00806024
     fa8:	00806028 	.word	0x00806028
     fac:	000003ff 	.word	0x000003ff
     fb0:	000001ff 	.word	0x000001ff

00000fb4 <dfll_wait_for_sync>:

void dfll_wait_for_sync() {
    while (!SYSCTRL->PCLKSR.bit.DFLLRDY);
     fb4:	4a02      	ldr	r2, [pc, #8]	; (fc0 <dfll_wait_for_sync+0xc>)
     fb6:	68d3      	ldr	r3, [r2, #12]
     fb8:	06db      	lsls	r3, r3, #27
     fba:	d5fc      	bpl.n	fb6 <dfll_wait_for_sync+0x2>
}
     fbc:	4770      	bx	lr
     fbe:	46c0      	nop			; (mov r8, r8)
     fc0:	40000800 	.word	0x40000800

00000fc4 <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     fc4:	4b25      	ldr	r3, [pc, #148]	; (105c <RtcInit+0x98>)
     fc6:	4a26      	ldr	r2, [pc, #152]	; (1060 <RtcInit+0x9c>)
void RtcInit() {
     fc8:	b510      	push	{r4, lr}
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     fca:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     fcc:	4a25      	ldr	r2, [pc, #148]	; (1064 <RtcInit+0xa0>)
    SYSCTRL->OSC32K.bit.CALIB =
     fce:	6998      	ldr	r0, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     fd0:	6812      	ldr	r2, [r2, #0]
    SYSCTRL->OSC32K.bit.CALIB =
     fd2:	4c25      	ldr	r4, [pc, #148]	; (1068 <RtcInit+0xa4>)
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);
     fd4:	04d2      	lsls	r2, r2, #19
    SYSCTRL->OSC32K.bit.CALIB =
     fd6:	0e52      	lsrs	r2, r2, #25
     fd8:	0412      	lsls	r2, r2, #16

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     fda:	4924      	ldr	r1, [pc, #144]	; (106c <RtcInit+0xa8>)
    SYSCTRL->OSC32K.bit.CALIB =
     fdc:	4020      	ands	r0, r4
     fde:	4310      	orrs	r0, r2
     fe0:	6198      	str	r0, [r3, #24]
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     fe2:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     fe4:	6999      	ldr	r1, [r3, #24]
     fe6:	4021      	ands	r1, r4
     fe8:	430a      	orrs	r2, r1
     fea:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     fec:	2202      	movs	r2, #2
     fee:	6999      	ldr	r1, [r3, #24]
     ff0:	430a      	orrs	r2, r1
     ff2:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     ff4:	2204      	movs	r2, #4
     ff6:	68d9      	ldr	r1, [r3, #12]
     ff8:	4211      	tst	r1, r2
     ffa:	d0fc      	beq.n	ff6 <RtcInit+0x32>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     ffc:	2281      	movs	r2, #129	; 0x81
     ffe:	4b1c      	ldr	r3, [pc, #112]	; (1070 <RtcInit+0xac>)
    1000:	0052      	lsls	r2, r2, #1
    1002:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
    1004:	4a1b      	ldr	r2, [pc, #108]	; (1074 <RtcInit+0xb0>)
    1006:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    1008:	785a      	ldrb	r2, [r3, #1]
    100a:	b252      	sxtb	r2, r2
    100c:	2a00      	cmp	r2, #0
    100e:	dbfb      	blt.n	1008 <RtcInit+0x44>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
    1010:	4a19      	ldr	r2, [pc, #100]	; (1078 <RtcInit+0xb4>)
    1012:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
    1014:	2204      	movs	r2, #4
    1016:	4b19      	ldr	r3, [pc, #100]	; (107c <RtcInit+0xb8>)
    1018:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    101a:	7a9a      	ldrb	r2, [r3, #10]
    101c:	09d2      	lsrs	r2, r2, #7
    101e:	d1fc      	bne.n	101a <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
    1020:	22a0      	movs	r2, #160	; 0xa0
    1022:	8819      	ldrh	r1, [r3, #0]
    1024:	00d2      	lsls	r2, r2, #3
    1026:	430a      	orrs	r2, r1
    1028:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    102a:	7a9a      	ldrb	r2, [r3, #10]
    102c:	09d2      	lsrs	r2, r2, #7
    102e:	d1fc      	bne.n	102a <RtcInit+0x66>

    RTC->MODE1.PER.reg = 998;
    1030:	4a13      	ldr	r2, [pc, #76]	; (1080 <RtcInit+0xbc>)
    1032:	829a      	strh	r2, [r3, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    1034:	7a9a      	ldrb	r2, [r3, #10]
    1036:	09d2      	lsrs	r2, r2, #7
    1038:	d1fc      	bne.n	1034 <RtcInit+0x70>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
    103a:	8859      	ldrh	r1, [r3, #2]
    103c:	4a11      	ldr	r2, [pc, #68]	; (1084 <RtcInit+0xc0>)
    103e:	430a      	orrs	r2, r1
    1040:	805a      	strh	r2, [r3, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
    1042:	2280      	movs	r2, #128	; 0x80
    1044:	71da      	strb	r2, [r3, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
    1046:	8819      	ldrh	r1, [r3, #0]
    1048:	3a7e      	subs	r2, #126	; 0x7e
    104a:	430a      	orrs	r2, r1
    104c:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    104e:	7a9a      	ldrb	r2, [r3, #10]
    1050:	09d2      	lsrs	r2, r2, #7
    1052:	d1fc      	bne.n	104e <RtcInit+0x8a>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1054:	4b0c      	ldr	r3, [pc, #48]	; (1088 <RtcInit+0xc4>)
    1056:	3208      	adds	r2, #8
    1058:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
    105a:	bd10      	pop	{r4, pc}
    105c:	40000800 	.word	0x40000800
    1060:	00000606 	.word	0x00000606
    1064:	00806024 	.word	0x00806024
    1068:	ff80ffff 	.word	0xff80ffff
    106c:	00000604 	.word	0x00000604
    1070:	40000c00 	.word	0x40000c00
    1074:	00230002 	.word	0x00230002
    1078:	00004204 	.word	0x00004204
    107c:	40001400 	.word	0x40001400
    1080:	000003e6 	.word	0x000003e6
    1084:	00004010 	.word	0x00004010
    1088:	e000e100 	.word	0xe000e100

0000108c <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    108c:	230f      	movs	r3, #15
    108e:	4003      	ands	r3, r0
    1090:	4808      	ldr	r0, [pc, #32]	; (10b4 <gclkEnable+0x28>)
    1092:	0212      	lsls	r2, r2, #8
    1094:	4002      	ands	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    1096:	20f8      	movs	r0, #248	; 0xf8
    1098:	0209      	lsls	r1, r1, #8
    109a:	0140      	lsls	r0, r0, #5
    109c:	4001      	ands	r1, r0
    109e:	2080      	movs	r0, #128	; 0x80
void gclkEnable(u32_t id, u32_t src, u32_t div) {
    10a0:	b510      	push	{r4, lr}
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    10a2:	0240      	lsls	r0, r0, #9
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    10a4:	4c04      	ldr	r4, [pc, #16]	; (10b8 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    10a6:	4308      	orrs	r0, r1
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    10a8:	431a      	orrs	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    10aa:	4318      	orrs	r0, r3
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    10ac:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    10ae:	6060      	str	r0, [r4, #4]
}
    10b0:	bd10      	pop	{r4, pc}
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	00ffff00 	.word	0x00ffff00
    10b8:	40000c00 	.word	0x40000c00

000010bc <GclkInit>:
    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    10bc:	23c2      	movs	r3, #194	; 0xc2
    NVMCTRL->CTRLB.bit.RWS = 2;
    10be:	221e      	movs	r2, #30
void GclkInit(u8_t clk_system) {
    10c0:	b570      	push	{r4, r5, r6, lr}
    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    10c2:	4c13      	ldr	r4, [pc, #76]	; (1110 <GclkInit+0x54>)
    NVMCTRL->CTRLB.bit.RWS = 2;
    10c4:	4913      	ldr	r1, [pc, #76]	; (1114 <GclkInit+0x58>)
    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    10c6:	00db      	lsls	r3, r3, #3
    10c8:	60a3      	str	r3, [r4, #8]
    NVMCTRL->CTRLB.bit.RWS = 2;
    10ca:	684b      	ldr	r3, [r1, #4]
void GclkInit(u8_t clk_system) {
    10cc:	0005      	movs	r5, r0
    NVMCTRL->CTRLB.bit.RWS = 2;
    10ce:	4393      	bics	r3, r2
    10d0:	001a      	movs	r2, r3
    10d2:	2304      	movs	r3, #4
    10d4:	4313      	orrs	r3, r2
    10d6:	604b      	str	r3, [r1, #4]
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
    10d8:	2308      	movs	r3, #8
    10da:	4a0f      	ldr	r2, [pc, #60]	; (1118 <GclkInit+0x5c>)
    10dc:	6991      	ldr	r1, [r2, #24]
    10de:	430b      	orrs	r3, r1
    10e0:	6193      	str	r3, [r2, #24]
    GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    10e2:	2301      	movs	r3, #1
    10e4:	4a0d      	ldr	r2, [pc, #52]	; (111c <GclkInit+0x60>)
    10e6:	7013      	strb	r3, [r2, #0]
    while (GCLK->CTRL.reg & GCLK_CTRL_SWRST);
    10e8:	7811      	ldrb	r1, [r2, #0]
    10ea:	4219      	tst	r1, r3
    10ec:	d1fc      	bne.n	10e8 <GclkInit+0x2c>
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    10ee:	4b0c      	ldr	r3, [pc, #48]	; (1120 <GclkInit+0x64>)
    dfll_wait_for_sync();
    10f0:	4e0c      	ldr	r6, [pc, #48]	; (1124 <GclkInit+0x68>)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    10f2:	84a3      	strh	r3, [r4, #36]	; 0x24
    dfll_wait_for_sync();
    10f4:	47b0      	blx	r6
    SYSCTRL->DFLLVAL.reg = dfll_nvm_val();
    10f6:	4b0c      	ldr	r3, [pc, #48]	; (1128 <GclkInit+0x6c>)
    10f8:	4798      	blx	r3
    10fa:	62a0      	str	r0, [r4, #40]	; 0x28
    dfll_wait_for_sync();
    10fc:	47b0      	blx	r6
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl;
    10fe:	4b0b      	ldr	r3, [pc, #44]	; (112c <GclkInit+0x70>)
    gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
    1100:	0028      	movs	r0, r5
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl;
    1102:	84a3      	strh	r3, [r4, #36]	; 0x24
    gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
    1104:	2201      	movs	r2, #1
    1106:	2107      	movs	r1, #7
    1108:	4b09      	ldr	r3, [pc, #36]	; (1130 <GclkInit+0x74>)
    110a:	4798      	blx	r3
}
    110c:	bd70      	pop	{r4, r5, r6, pc}
    110e:	46c0      	nop			; (mov r8, r8)
    1110:	40000800 	.word	0x40000800
    1114:	41004000 	.word	0x41004000
    1118:	40000400 	.word	0x40000400
    111c:	40000c00 	.word	0x40000c00
    1120:	00000502 	.word	0x00000502
    1124:	00000fb5 	.word	0x00000fb5
    1128:	00000f81 	.word	0x00000f81
    112c:	00000582 	.word	0x00000582
    1130:	0000108d 	.word	0x0000108d

00001134 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
    cycles_per_us = cycles_per_ms / 1000;
    1134:	2230      	movs	r2, #48	; 0x30
    cycles_per_ms /= 1000;
    1136:	4b06      	ldr	r3, [pc, #24]	; (1150 <delayInit+0x1c>)
    cycles_per_us = cycles_per_ms / 1000;
    1138:	4906      	ldr	r1, [pc, #24]	; (1154 <delayInit+0x20>)
    113a:	c306      	stmia	r3!, {r1, r2}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    113c:	4a06      	ldr	r2, [pc, #24]	; (1158 <delayInit+0x24>)
    113e:	6a13      	ldr	r3, [r2, #32]
    1140:	021b      	lsls	r3, r3, #8
    1142:	0a1b      	lsrs	r3, r3, #8
    1144:	6213      	str	r3, [r2, #32]

    NVIC_SetPriority(SysTick_IRQn, 0x0);

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1146:	2205      	movs	r2, #5
    1148:	4b04      	ldr	r3, [pc, #16]	; (115c <delayInit+0x28>)
    114a:	601a      	str	r2, [r3, #0]
}
    114c:	4770      	bx	lr
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	20000004 	.word	0x20000004
    1154:	0000bb80 	.word	0x0000bb80
    1158:	e000ed00 	.word	0xe000ed00
    115c:	e000e010 	.word	0xe000e010

00001160 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    1160:	b530      	push	{r4, r5, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1162:	2480      	movs	r4, #128	; 0x80
        SysTick->VAL = 0;
    1164:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    1166:	4b07      	ldr	r3, [pc, #28]	; (1184 <delay_us+0x24>)
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1168:	0264      	lsls	r4, r4, #9
    116a:	685a      	ldr	r2, [r3, #4]
        SysTick->LOAD = n;
    116c:	4b06      	ldr	r3, [pc, #24]	; (1188 <delay_us+0x28>)
    while (n--) {
    116e:	3801      	subs	r0, #1
    1170:	d200      	bcs.n	1174 <delay_us+0x14>
    }
}
    1172:	bd30      	pop	{r4, r5, pc}
    if (n > 0) {
    1174:	2a00      	cmp	r2, #0
    1176:	d0fa      	beq.n	116e <delay_us+0xe>
        SysTick->LOAD = n;
    1178:	605a      	str	r2, [r3, #4]
        SysTick->VAL = 0;
    117a:	6099      	str	r1, [r3, #8]
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    117c:	681d      	ldr	r5, [r3, #0]
    117e:	4225      	tst	r5, r4
    1180:	d0fc      	beq.n	117c <delay_us+0x1c>
    1182:	e7f4      	b.n	116e <delay_us+0xe>
    1184:	20000004 	.word	0x20000004
    1188:	e000e010 	.word	0xe000e010

0000118c <SysTick_Handler>:


void SysTick_Handler(void) {
    //g_msTicks++;
}
    118c:	4770      	bx	lr
	...

00001190 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    1190:	b530      	push	{r4, r5, lr}
    1192:	2480      	movs	r4, #128	; 0x80
        SysTick->VAL = 0;
    1194:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    1196:	4b07      	ldr	r3, [pc, #28]	; (11b4 <delay_ms+0x24>)
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1198:	0264      	lsls	r4, r4, #9
    119a:	681a      	ldr	r2, [r3, #0]
        SysTick->LOAD = n;
    119c:	4b06      	ldr	r3, [pc, #24]	; (11b8 <delay_ms+0x28>)
    while (n--) {
    119e:	3801      	subs	r0, #1
    11a0:	d200      	bcs.n	11a4 <delay_ms+0x14>
    }
}
    11a2:	bd30      	pop	{r4, r5, pc}
    if (n > 0) {
    11a4:	2a00      	cmp	r2, #0
    11a6:	d0fa      	beq.n	119e <delay_ms+0xe>
        SysTick->LOAD = n;
    11a8:	605a      	str	r2, [r3, #4]
        SysTick->VAL = 0;
    11aa:	6099      	str	r1, [r3, #8]
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    11ac:	681d      	ldr	r5, [r3, #0]
    11ae:	4225      	tst	r5, r4
    11b0:	d0fc      	beq.n	11ac <delay_ms+0x1c>
    11b2:	e7f4      	b.n	119e <delay_ms+0xe>
    11b4:	20000004 	.word	0x20000004
    11b8:	e000e010 	.word	0xe000e010

000011bc <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    11bc:	21fa      	movs	r1, #250	; 0xfa
    11be:	4a04      	ldr	r2, [pc, #16]	; (11d0 <RTC_Handler+0x14>)
    11c0:	0089      	lsls	r1, r1, #2
    11c2:	6813      	ldr	r3, [r2, #0]
    11c4:	185b      	adds	r3, r3, r1
    11c6:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    11c8:	22ff      	movs	r2, #255	; 0xff
    11ca:	4b02      	ldr	r3, [pc, #8]	; (11d4 <RTC_Handler+0x18>)
    11cc:	721a      	strb	r2, [r3, #8]
}
    11ce:	4770      	bx	lr
    11d0:	2000013c 	.word	0x2000013c
    11d4:	40001400 	.word	0x40001400

000011d8 <millis>:

uint32_t millis(void) {
    11d8:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    11da:	f3ef 8110 	mrs	r1, PRIMASK
    11de:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    11e0:	4b09      	ldr	r3, [pc, #36]	; (1208 <millis+0x30>)
    11e2:	4c0a      	ldr	r4, [pc, #40]	; (120c <millis+0x34>)
    11e4:	8a18      	ldrh	r0, [r3, #16]
    11e6:	6825      	ldr	r5, [r4, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    11e8:	7a1a      	ldrb	r2, [r3, #8]
    ms = time_ms + RTC->MODE1.COUNT.reg;
    11ea:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    11ec:	09d2      	lsrs	r2, r2, #7
    ms = time_ms + RTC->MODE1.COUNT.reg;
    11ee:	1940      	adds	r0, r0, r5
    if (RTC->MODE1.INTFLAG.bit.OVF)
    11f0:	2a00      	cmp	r2, #0
    11f2:	d005      	beq.n	1200 <millis+0x28>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    11f4:	22fa      	movs	r2, #250	; 0xfa
    11f6:	8a1b      	ldrh	r3, [r3, #16]
    11f8:	6820      	ldr	r0, [r4, #0]
    11fa:	0092      	lsls	r2, r2, #2
    11fc:	1880      	adds	r0, r0, r2
    11fe:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    1200:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    1204:	bd30      	pop	{r4, r5, pc}
    1206:	46c0      	nop			; (mov r8, r8)
    1208:	40001400 	.word	0x40001400
    120c:	2000013c 	.word	0x2000013c

00001210 <TC4Init>:

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1210:	4a0d      	ldr	r2, [pc, #52]	; (1248 <TC4Init+0x38>)
    1212:	4b0e      	ldr	r3, [pc, #56]	; (124c <TC4Init+0x3c>)
    1214:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1216:	2380      	movs	r3, #128	; 0x80
    1218:	4a0d      	ldr	r2, [pc, #52]	; (1250 <TC4Init+0x40>)
    121a:	015b      	lsls	r3, r3, #5
    121c:	6a11      	ldr	r1, [r2, #32]
    121e:	430b      	orrs	r3, r1
    1220:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1222:	4b0c      	ldr	r3, [pc, #48]	; (1254 <TC4Init+0x44>)
    1224:	4a0c      	ldr	r2, [pc, #48]	; (1258 <TC4Init+0x48>)
    1226:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x50;
    1228:	2250      	movs	r2, #80	; 0x50
    122a:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    122c:	3a4f      	subs	r2, #79	; 0x4f
    122e:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1230:	32ff      	adds	r2, #255	; 0xff
    1232:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1234:	8819      	ldrh	r1, [r3, #0]
    1236:	3afe      	subs	r2, #254	; 0xfe
    1238:	430a      	orrs	r2, r1
    123a:	801a      	strh	r2, [r3, #0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    123c:	2280      	movs	r2, #128	; 0x80
    123e:	4b07      	ldr	r3, [pc, #28]	; (125c <TC4Init+0x4c>)
    1240:	0312      	lsls	r2, r2, #12
    1242:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    1244:	4770      	bx	lr
    1246:	46c0      	nop			; (mov r8, r8)
    1248:	0000421c 	.word	0x0000421c
    124c:	40000c00 	.word	0x40000c00
    1250:	40000400 	.word	0x40000400
    1254:	42003000 	.word	0x42003000
    1258:	00000904 	.word	0x00000904
    125c:	e000e100 	.word	0xe000e100

00001260 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1260:	22ff      	movs	r2, #255	; 0xff
void TC4_Handler( void ) {
    1262:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1264:	4b02      	ldr	r3, [pc, #8]	; (1270 <TC4_Handler+0x10>)
    1266:	739a      	strb	r2, [r3, #14]
    //pinToggle(TxPo);
    pullSample();
    1268:	4b02      	ldr	r3, [pc, #8]	; (1274 <TC4_Handler+0x14>)
    126a:	4798      	blx	r3
}
    126c:	bd10      	pop	{r4, pc}
    126e:	46c0      	nop			; (mov r8, r8)
    1270:	42003000 	.word	0x42003000
    1274:	00003465 	.word	0x00003465

00001278 <TC5Init>:

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    1278:	4a0d      	ldr	r2, [pc, #52]	; (12b0 <TC5Init+0x38>)
    127a:	4b0e      	ldr	r3, [pc, #56]	; (12b4 <TC5Init+0x3c>)
    127c:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    127e:	2380      	movs	r3, #128	; 0x80
    1280:	4a0d      	ldr	r2, [pc, #52]	; (12b8 <TC5Init+0x40>)
    1282:	019b      	lsls	r3, r3, #6
    1284:	6a11      	ldr	r1, [r2, #32]
    1286:	430b      	orrs	r3, r1
    1288:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    128a:	4b0c      	ldr	r3, [pc, #48]	; (12bc <TC5Init+0x44>)
    128c:	4a0c      	ldr	r2, [pc, #48]	; (12c0 <TC5Init+0x48>)
    128e:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_PRESCALER_DIV16;

    u16_t logSpeed = 20; //Hz
    u8_t PER_Reg = (long)((32768/16) / logSpeed);

    TC5->COUNT8.PER.reg = PER_Reg;
    1290:	2266      	movs	r2, #102	; 0x66
    1292:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1294:	3a65      	subs	r2, #101	; 0x65
    1296:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1298:	32ff      	adds	r2, #255	; 0xff
    129a:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    129c:	8819      	ldrh	r1, [r3, #0]
    129e:	3afe      	subs	r2, #254	; 0xfe
    12a0:	430a      	orrs	r2, r1
    12a2:	801a      	strh	r2, [r3, #0]
    12a4:	2280      	movs	r2, #128	; 0x80
    12a6:	4b07      	ldr	r3, [pc, #28]	; (12c4 <TC5Init+0x4c>)
    12a8:	0352      	lsls	r2, r2, #13
    12aa:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    12ac:	4770      	bx	lr
    12ae:	46c0      	nop			; (mov r8, r8)
    12b0:	0000421c 	.word	0x0000421c
    12b4:	40000c00 	.word	0x40000c00
    12b8:	40000400 	.word	0x40000400
    12bc:	42003400 	.word	0x42003400
    12c0:	00000c04 	.word	0x00000c04
    12c4:	e000e100 	.word	0xe000e100

000012c8 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    12c8:	22ff      	movs	r2, #255	; 0xff
    12ca:	4b03      	ldr	r3, [pc, #12]	; (12d8 <TC5_Handler+0x10>)
    12cc:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    12ce:	4b03      	ldr	r3, [pc, #12]	; (12dc <TC5_Handler+0x14>)
    12d0:	3afe      	subs	r2, #254	; 0xfe
    12d2:	701a      	strb	r2, [r3, #0]
}
    12d4:	4770      	bx	lr
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	42003400 	.word	0x42003400
    12dc:	2000019a 	.word	0x2000019a

000012e0 <flight>:

#define TESTFLIGHT 1
#define GROUNDTEST 0


void flight() {
    12e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    switch(flightState) {
    12e2:	4c87      	ldr	r4, [pc, #540]	; (1500 <flight+0x220>)
    12e4:	7820      	ldrb	r0, [r4, #0]
    12e6:	280a      	cmp	r0, #10
    12e8:	d823      	bhi.n	1332 <flight+0x52>
    12ea:	f003 fda5 	bl	4e38 <__gnu_thumb1_case_uhi>
    12ee:	000b      	.short	0x000b
    12f0:	00680041 	.word	0x00680041
    12f4:	00220094 	.word	0x00220094
    12f8:	00be00a8 	.word	0x00be00a8
    12fc:	00f000d1 	.word	0x00f000d1
    1300:	01010022 	.word	0x01010022
    case flightStatrup:
        updateGround( );
    1304:	4b7f      	ldr	r3, [pc, #508]	; (1504 <flight+0x224>)
    1306:	4798      	blx	r3
        if ((millis() - startupTick) > 10000) {
    1308:	4b7f      	ldr	r3, [pc, #508]	; (1508 <flight+0x228>)
    130a:	4798      	blx	r3
    130c:	4b7f      	ldr	r3, [pc, #508]	; (150c <flight+0x22c>)
    130e:	681b      	ldr	r3, [r3, #0]
    1310:	1ac0      	subs	r0, r0, r3
    1312:	4b7f      	ldr	r3, [pc, #508]	; (1510 <flight+0x230>)
    1314:	4298      	cmp	r0, r3
    1316:	d928      	bls.n	136a <flight+0x8a>
            findNewFlightStart();
    1318:	4b7e      	ldr	r3, [pc, #504]	; (1514 <flight+0x234>)
    131a:	4798      	blx	r3
            startupJingle();
    131c:	4b7e      	ldr	r3, [pc, #504]	; (1518 <flight+0x238>)
    131e:	4798      	blx	r3

#if TESTFLIGHT
            flightState = flightTest;
    1320:	230a      	movs	r3, #10
    1322:	7023      	strb	r3, [r4, #0]
            writeFlightStartAddress();
    1324:	4b7d      	ldr	r3, [pc, #500]	; (151c <flight+0x23c>)
    1326:	4798      	blx	r3
            logFlight( );
    1328:	4b7d      	ldr	r3, [pc, #500]	; (1520 <flight+0x240>)
    132a:	4798      	blx	r3
            logEvent('L');
    132c:	204c      	movs	r0, #76	; 0x4c


        if (altitudeAGL() < deploymentSettings.MAIN_DEPLOY) {
            flightState = flightMain;
            igniteMain();
            logEvent('M');
    132e:	4b7d      	ldr	r3, [pc, #500]	; (1524 <flight+0x244>)
    1330:	4798      	blx	r3
        break;
    }



    if ((flightState > flightPad) & unplugged()) {
    1332:	2602      	movs	r6, #2
    1334:	7823      	ldrb	r3, [r4, #0]
    1336:	429e      	cmp	r6, r3
    1338:	41b6      	sbcs	r6, r6
    133a:	4b7b      	ldr	r3, [pc, #492]	; (1528 <flight+0x248>)
    133c:	4276      	negs	r6, r6
    133e:	4798      	blx	r3
    1340:	2e00      	cmp	r6, #0
    1342:	d003      	beq.n	134c <flight+0x6c>
    1344:	2800      	cmp	r0, #0
    1346:	d001      	beq.n	134c <flight+0x6c>
        finishFlight();
    1348:	4b78      	ldr	r3, [pc, #480]	; (152c <flight+0x24c>)
    134a:	4798      	blx	r3
    }

    if ((flightState <= flightPad) & unplugged()) {
    134c:	2300      	movs	r3, #0
    134e:	2102      	movs	r1, #2
    1350:	7822      	ldrb	r2, [r4, #0]
    1352:	4291      	cmp	r1, r2
    1354:	415b      	adcs	r3, r3
    1356:	b2dc      	uxtb	r4, r3
    1358:	4b73      	ldr	r3, [pc, #460]	; (1528 <flight+0x248>)
    135a:	4798      	blx	r3
    135c:	2c00      	cmp	r4, #0
    135e:	d003      	beq.n	1368 <flight+0x88>
    1360:	2800      	cmp	r0, #0
    1362:	d001      	beq.n	1368 <flight+0x88>
        finishFromPad();
    1364:	4b72      	ldr	r3, [pc, #456]	; (1530 <flight+0x250>)
    1366:	4798      	blx	r3
    }

    1368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        attemptConnection();
    136a:	4b72      	ldr	r3, [pc, #456]	; (1534 <flight+0x254>)
           logSensors( );
    136c:	4798      	blx	r3
    136e:	e7e0      	b.n	1332 <flight+0x52>
        if (millis() - offsets.groundBeep > 2000) {
    1370:	4f65      	ldr	r7, [pc, #404]	; (1508 <flight+0x228>)
    1372:	47b8      	blx	r7
    1374:	4e70      	ldr	r6, [pc, #448]	; (1538 <flight+0x258>)
    1376:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1378:	1ac0      	subs	r0, r0, r3
    137a:	23fa      	movs	r3, #250	; 0xfa
    137c:	00db      	lsls	r3, r3, #3
    137e:	4298      	cmp	r0, r3
    1380:	d905      	bls.n	138e <flight+0xae>
            offsets.groundBeep = millis();
    1382:	47b8      	blx	r7
    1384:	62f0      	str	r0, [r6, #44]	; 0x2c
            beep(400);
    1386:	20c8      	movs	r0, #200	; 0xc8
    1388:	4b6c      	ldr	r3, [pc, #432]	; (153c <flight+0x25c>)
    138a:	0040      	lsls	r0, r0, #1
    138c:	4798      	blx	r3
        if (unplugged()) {
    138e:	4b66      	ldr	r3, [pc, #408]	; (1528 <flight+0x248>)
    1390:	4798      	blx	r3
    1392:	2800      	cmp	r0, #0
    1394:	d001      	beq.n	139a <flight+0xba>
            finishFromPad();
    1396:	4b66      	ldr	r3, [pc, #408]	; (1530 <flight+0x250>)
    1398:	4798      	blx	r3
        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    139a:	4b69      	ldr	r3, [pc, #420]	; (1540 <flight+0x260>)
    139c:	7e1b      	ldrb	r3, [r3, #24]
    139e:	075b      	lsls	r3, r3, #29
    13a0:	d5c7      	bpl.n	1332 <flight+0x52>
            u8_t possibleReset = usartDataIn(USART3);
    13a2:	2003      	movs	r0, #3
    13a4:	4b67      	ldr	r3, [pc, #412]	; (1544 <flight+0x264>)
    13a6:	4798      	blx	r3
            if (possibleReset == 0x52) {
    13a8:	2852      	cmp	r0, #82	; 0x52
    13aa:	d1c2      	bne.n	1332 <flight+0x52>
  __ASM volatile ("dsb 0xF":::"memory");
    13ac:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    13b0:	4a65      	ldr	r2, [pc, #404]	; (1548 <flight+0x268>)
    13b2:	4b66      	ldr	r3, [pc, #408]	; (154c <flight+0x26c>)
    13b4:	60da      	str	r2, [r3, #12]
    13b6:	f3bf 8f4f 	dsb	sy
    __NOP();
    13ba:	46c0      	nop			; (mov r8, r8)
    13bc:	e7fd      	b.n	13ba <flight+0xda>
        updateGround();
    13be:	4b51      	ldr	r3, [pc, #324]	; (1504 <flight+0x224>)
    13c0:	4798      	blx	r3
        if (writeLog) {
    13c2:	4b63      	ldr	r3, [pc, #396]	; (1550 <flight+0x270>)
    13c4:	781b      	ldrb	r3, [r3, #0]
    13c6:	2b00      	cmp	r3, #0
    13c8:	d005      	beq.n	13d6 <flight+0xf6>
            logSensorsOnPad( );
    13ca:	4b62      	ldr	r3, [pc, #392]	; (1554 <flight+0x274>)
    13cc:	4798      	blx	r3
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    13ce:	2280      	movs	r2, #128	; 0x80
    13d0:	4b61      	ldr	r3, [pc, #388]	; (1558 <flight+0x278>)
    13d2:	0352      	lsls	r2, r2, #13
    13d4:	61da      	str	r2, [r3, #28]
        if ((( velocity > 10) && (accel > 2)) | (altitudeAGL() > 100)) {
    13d6:	4961      	ldr	r1, [pc, #388]	; (155c <flight+0x27c>)
    13d8:	4f61      	ldr	r7, [pc, #388]	; (1560 <flight+0x280>)
    13da:	2200      	movs	r2, #0
    13dc:	6808      	ldr	r0, [r1, #0]
    13de:	6849      	ldr	r1, [r1, #4]
    13e0:	4b60      	ldr	r3, [pc, #384]	; (1564 <flight+0x284>)
    13e2:	47b8      	blx	r7
    13e4:	1e06      	subs	r6, r0, #0
    13e6:	d00b      	beq.n	1400 <flight+0x120>
    13e8:	2380      	movs	r3, #128	; 0x80
    13ea:	495f      	ldr	r1, [pc, #380]	; (1568 <flight+0x288>)
    13ec:	2200      	movs	r2, #0
    13ee:	6808      	ldr	r0, [r1, #0]
    13f0:	6849      	ldr	r1, [r1, #4]
    13f2:	05db      	lsls	r3, r3, #23
    13f4:	2601      	movs	r6, #1
    13f6:	47b8      	blx	r7
    13f8:	2800      	cmp	r0, #0
    13fa:	d100      	bne.n	13fe <flight+0x11e>
    13fc:	1c06      	adds	r6, r0, #0
    13fe:	b2f6      	uxtb	r6, r6
    1400:	4b5a      	ldr	r3, [pc, #360]	; (156c <flight+0x28c>)
    1402:	4798      	blx	r3
    1404:	2864      	cmp	r0, #100	; 0x64
    1406:	dc02      	bgt.n	140e <flight+0x12e>
    1408:	07f3      	lsls	r3, r6, #31
    140a:	d400      	bmi.n	140e <flight+0x12e>
    140c:	e791      	b.n	1332 <flight+0x52>
            flightState = flightBoost;
    140e:	2303      	movs	r3, #3
    1410:	7023      	strb	r3, [r4, #0]
            beginFlightLog();
    1412:	4b57      	ldr	r3, [pc, #348]	; (1570 <flight+0x290>)
    1414:	e7aa      	b.n	136c <flight+0x8c>
        if (writeLog) {
    1416:	4b4e      	ldr	r3, [pc, #312]	; (1550 <flight+0x270>)
    1418:	781b      	ldrb	r3, [r3, #0]
    141a:	2b00      	cmp	r3, #0
    141c:	d001      	beq.n	1422 <flight+0x142>
            logSensors( );
    141e:	4b55      	ldr	r3, [pc, #340]	; (1574 <flight+0x294>)
    1420:	4798      	blx	r3
        if (accel < 0.25) {
    1422:	4951      	ldr	r1, [pc, #324]	; (1568 <flight+0x288>)
    1424:	2200      	movs	r2, #0
    1426:	6808      	ldr	r0, [r1, #0]
    1428:	6849      	ldr	r1, [r1, #4]
    142a:	4b53      	ldr	r3, [pc, #332]	; (1578 <flight+0x298>)
    142c:	4e53      	ldr	r6, [pc, #332]	; (157c <flight+0x29c>)
    142e:	47b0      	blx	r6
    1430:	2800      	cmp	r0, #0
    1432:	d100      	bne.n	1436 <flight+0x156>
    1434:	e77d      	b.n	1332 <flight+0x52>
            flightState = flightCoast;
    1436:	2305      	movs	r3, #5
            logEvent('B');
    1438:	2042      	movs	r0, #66	; 0x42
            flightState = flightCoast;
    143a:	7023      	strb	r3, [r4, #0]
    143c:	e777      	b.n	132e <flight+0x4e>
        if (writeLog) {
    143e:	4b44      	ldr	r3, [pc, #272]	; (1550 <flight+0x270>)
    1440:	781b      	ldrb	r3, [r3, #0]
    1442:	2b00      	cmp	r3, #0
    1444:	d001      	beq.n	144a <flight+0x16a>
            logSensors( );
    1446:	4b4b      	ldr	r3, [pc, #300]	; (1574 <flight+0x294>)
    1448:	4798      	blx	r3
        if (velocity < 0) {
    144a:	4944      	ldr	r1, [pc, #272]	; (155c <flight+0x27c>)
    144c:	2200      	movs	r2, #0
    144e:	6808      	ldr	r0, [r1, #0]
    1450:	6849      	ldr	r1, [r1, #4]
    1452:	2300      	movs	r3, #0
    1454:	4e49      	ldr	r6, [pc, #292]	; (157c <flight+0x29c>)
    1456:	47b0      	blx	r6
    1458:	2800      	cmp	r0, #0
    145a:	d100      	bne.n	145e <flight+0x17e>
    145c:	e769      	b.n	1332 <flight+0x52>
            flightState = flightDrogue;
    145e:	2306      	movs	r3, #6
    1460:	7023      	strb	r3, [r4, #0]
            igniteDrogue();
    1462:	4b47      	ldr	r3, [pc, #284]	; (1580 <flight+0x2a0>)
    1464:	4798      	blx	r3
            logEvent('A');
    1466:	2041      	movs	r0, #65	; 0x41
    1468:	e761      	b.n	132e <flight+0x4e>
        if (writeLog) {
    146a:	4b39      	ldr	r3, [pc, #228]	; (1550 <flight+0x270>)
    146c:	781b      	ldrb	r3, [r3, #0]
    146e:	2b00      	cmp	r3, #0
    1470:	d001      	beq.n	1476 <flight+0x196>
            logSensors( );
    1472:	4b40      	ldr	r3, [pc, #256]	; (1574 <flight+0x294>)
    1474:	4798      	blx	r3
        if (altitudeAGL() < deploymentSettings.MAIN_DEPLOY) {
    1476:	4b3d      	ldr	r3, [pc, #244]	; (156c <flight+0x28c>)
    1478:	4798      	blx	r3
    147a:	4b42      	ldr	r3, [pc, #264]	; (1584 <flight+0x2a4>)
    147c:	8b1b      	ldrh	r3, [r3, #24]
    147e:	4298      	cmp	r0, r3
    1480:	db00      	blt.n	1484 <flight+0x1a4>
    1482:	e756      	b.n	1332 <flight+0x52>
            flightState = flightMain;
    1484:	2307      	movs	r3, #7
    1486:	7023      	strb	r3, [r4, #0]
            igniteMain();
    1488:	4b3f      	ldr	r3, [pc, #252]	; (1588 <flight+0x2a8>)
    148a:	4798      	blx	r3
            logEvent('M');
    148c:	204d      	movs	r0, #77	; 0x4d
    148e:	e74e      	b.n	132e <flight+0x4e>
        if (writeLog) {
    1490:	4b2f      	ldr	r3, [pc, #188]	; (1550 <flight+0x270>)
    1492:	781b      	ldrb	r3, [r3, #0]
    1494:	2b00      	cmp	r3, #0
    1496:	d001      	beq.n	149c <flight+0x1bc>
            logSensors( );
    1498:	4b36      	ldr	r3, [pc, #216]	; (1574 <flight+0x294>)
    149a:	4798      	blx	r3
        if ((velocity > -1) && (velocity < 1) ) {
    149c:	4b2f      	ldr	r3, [pc, #188]	; (155c <flight+0x27c>)
    149e:	2200      	movs	r2, #0
    14a0:	681e      	ldr	r6, [r3, #0]
    14a2:	685f      	ldr	r7, [r3, #4]
    14a4:	4d2e      	ldr	r5, [pc, #184]	; (1560 <flight+0x280>)
    14a6:	4b39      	ldr	r3, [pc, #228]	; (158c <flight+0x2ac>)
    14a8:	0030      	movs	r0, r6
    14aa:	0039      	movs	r1, r7
    14ac:	47a8      	blx	r5
    14ae:	2800      	cmp	r0, #0
    14b0:	d100      	bne.n	14b4 <flight+0x1d4>
    14b2:	e73e      	b.n	1332 <flight+0x52>
    14b4:	0030      	movs	r0, r6
    14b6:	2200      	movs	r2, #0
    14b8:	4b35      	ldr	r3, [pc, #212]	; (1590 <flight+0x2b0>)
    14ba:	0039      	movs	r1, r7
    14bc:	4e2f      	ldr	r6, [pc, #188]	; (157c <flight+0x29c>)
    14be:	47b0      	blx	r6
    14c0:	2800      	cmp	r0, #0
    14c2:	d100      	bne.n	14c6 <flight+0x1e6>
    14c4:	e735      	b.n	1332 <flight+0x52>
            flightState = flightLanded;
    14c6:	2308      	movs	r3, #8
    14c8:	7023      	strb	r3, [r4, #0]
            finishFlight();
    14ca:	4b18      	ldr	r3, [pc, #96]	; (152c <flight+0x24c>)
    14cc:	e74e      	b.n	136c <flight+0x8c>
        if (millis() - offsets.groundBeep > 2000) {
    14ce:	4f0e      	ldr	r7, [pc, #56]	; (1508 <flight+0x228>)
    14d0:	47b8      	blx	r7
    14d2:	4e19      	ldr	r6, [pc, #100]	; (1538 <flight+0x258>)
    14d4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    14d6:	1ac0      	subs	r0, r0, r3
    14d8:	23fa      	movs	r3, #250	; 0xfa
    14da:	00db      	lsls	r3, r3, #3
    14dc:	4298      	cmp	r0, r3
    14de:	d800      	bhi.n	14e2 <flight+0x202>
    14e0:	e727      	b.n	1332 <flight+0x52>
            offsets.groundBeep = millis();
    14e2:	47b8      	blx	r7
    14e4:	62f0      	str	r0, [r6, #44]	; 0x2c
            beep(400);
    14e6:	20c8      	movs	r0, #200	; 0xc8
    14e8:	4b14      	ldr	r3, [pc, #80]	; (153c <flight+0x25c>)
    14ea:	0040      	lsls	r0, r0, #1
    14ec:	4798      	blx	r3
    14ee:	e720      	b.n	1332 <flight+0x52>
        if (writeLog) {
    14f0:	4b17      	ldr	r3, [pc, #92]	; (1550 <flight+0x270>)
    14f2:	781b      	ldrb	r3, [r3, #0]
    14f4:	2b00      	cmp	r3, #0
    14f6:	d100      	bne.n	14fa <flight+0x21a>
    14f8:	e71b      	b.n	1332 <flight+0x52>
           logSensors( );
    14fa:	4b1e      	ldr	r3, [pc, #120]	; (1574 <flight+0x294>)
    14fc:	e736      	b.n	136c <flight+0x8c>
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	200001ac 	.word	0x200001ac
    1504:	00001595 	.word	0x00001595
    1508:	000011d9 	.word	0x000011d9
    150c:	2000019c 	.word	0x2000019c
    1510:	00002710 	.word	0x00002710
    1514:	000033b9 	.word	0x000033b9
    1518:	00000f0d 	.word	0x00000f0d
    151c:	000032dd 	.word	0x000032dd
    1520:	00002e71 	.word	0x00002e71
    1524:	00002ed5 	.word	0x00002ed5
    1528:	00000bb5 	.word	0x00000bb5
    152c:	00000c85 	.word	0x00000c85
    1530:	00000cb1 	.word	0x00000cb1
    1534:	00003c41 	.word	0x00003c41
    1538:	20000150 	.word	0x20000150
    153c:	00000e99 	.word	0x00000e99
    1540:	42001400 	.word	0x42001400
    1544:	000038d9 	.word	0x000038d9
    1548:	05fa0004 	.word	0x05fa0004
    154c:	e000ed00 	.word	0xe000ed00
    1550:	2000019a 	.word	0x2000019a
    1554:	000030e9 	.word	0x000030e9
    1558:	41004400 	.word	0x41004400
    155c:	20000308 	.word	0x20000308
    1560:	0000518d 	.word	0x0000518d
    1564:	40240000 	.word	0x40240000
    1568:	200002e8 	.word	0x200002e8
    156c:	00000b81 	.word	0x00000b81
    1570:	00003391 	.word	0x00003391
    1574:	00002f31 	.word	0x00002f31
    1578:	3fd00000 	.word	0x3fd00000
    157c:	00005165 	.word	0x00005165
    1580:	00001981 	.word	0x00001981
    1584:	20000180 	.word	0x20000180
    1588:	00001925 	.word	0x00001925
    158c:	bff00000 	.word	0xbff00000
    1590:	3ff00000 	.word	0x3ff00000

00001594 <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    1594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    1596:	4c2b      	ldr	r4, [pc, #172]	; (1644 <updateGround+0xb0>)
    1598:	4d2b      	ldr	r5, [pc, #172]	; (1648 <updateGround+0xb4>)
    159a:	4a2c      	ldr	r2, [pc, #176]	; (164c <updateGround+0xb8>)
    159c:	6920      	ldr	r0, [r4, #16]
    159e:	6961      	ldr	r1, [r4, #20]
    15a0:	4b2b      	ldr	r3, [pc, #172]	; (1650 <updateGround+0xbc>)
    15a2:	47a8      	blx	r5
    15a4:	4b2b      	ldr	r3, [pc, #172]	; (1654 <updateGround+0xc0>)
    15a6:	0006      	movs	r6, r0
    15a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
    15aa:	4b2b      	ldr	r3, [pc, #172]	; (1658 <updateGround+0xc4>)
    15ac:	000f      	movs	r7, r1
    15ae:	4798      	blx	r3
    15b0:	4a26      	ldr	r2, [pc, #152]	; (164c <updateGround+0xb8>)
    15b2:	4b2a      	ldr	r3, [pc, #168]	; (165c <updateGround+0xc8>)
    15b4:	47a8      	blx	r5
    15b6:	0002      	movs	r2, r0
    15b8:	000b      	movs	r3, r1
    15ba:	0030      	movs	r0, r6
    15bc:	0039      	movs	r1, r7
    15be:	4e28      	ldr	r6, [pc, #160]	; (1660 <updateGround+0xcc>)
    15c0:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    15c2:	4e28      	ldr	r6, [pc, #160]	; (1664 <updateGround+0xd0>)
    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    15c4:	6120      	str	r0, [r4, #16]
    15c6:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    15c8:	69e0      	ldr	r0, [r4, #28]
    15ca:	47b0      	blx	r6
    15cc:	2200      	movs	r2, #0
    15ce:	4b26      	ldr	r3, [pc, #152]	; (1668 <updateGround+0xd4>)
    15d0:	47a8      	blx	r5
    15d2:	9000      	str	r0, [sp, #0]
    15d4:	9101      	str	r1, [sp, #4]
    15d6:	4925      	ldr	r1, [pc, #148]	; (166c <updateGround+0xd8>)
    15d8:	2200      	movs	r2, #0
    15da:	6808      	ldr	r0, [r1, #0]
    15dc:	6849      	ldr	r1, [r1, #4]
    15de:	4b22      	ldr	r3, [pc, #136]	; (1668 <updateGround+0xd4>)
    15e0:	47a8      	blx	r5
    15e2:	4f1f      	ldr	r7, [pc, #124]	; (1660 <updateGround+0xcc>)
    15e4:	0002      	movs	r2, r0
    15e6:	000b      	movs	r3, r1
    15e8:	9800      	ldr	r0, [sp, #0]
    15ea:	9901      	ldr	r1, [sp, #4]
    15ec:	47b8      	blx	r7
    15ee:	4f20      	ldr	r7, [pc, #128]	; (1670 <updateGround+0xdc>)
    15f0:	47b8      	blx	r7
    15f2:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    15f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    15f6:	47b0      	blx	r6
    15f8:	4a14      	ldr	r2, [pc, #80]	; (164c <updateGround+0xb8>)
    15fa:	4b15      	ldr	r3, [pc, #84]	; (1650 <updateGround+0xbc>)
    15fc:	47a8      	blx	r5
    15fe:	4b15      	ldr	r3, [pc, #84]	; (1654 <updateGround+0xc0>)
    1600:	9000      	str	r0, [sp, #0]
    1602:	9101      	str	r1, [sp, #4]
    1604:	6d58      	ldr	r0, [r3, #84]	; 0x54
    1606:	47b0      	blx	r6
    1608:	4a10      	ldr	r2, [pc, #64]	; (164c <updateGround+0xb8>)
    160a:	4b14      	ldr	r3, [pc, #80]	; (165c <updateGround+0xc8>)
    160c:	47a8      	blx	r5
    160e:	4d14      	ldr	r5, [pc, #80]	; (1660 <updateGround+0xcc>)
    1610:	000b      	movs	r3, r1
    1612:	0002      	movs	r2, r0
    1614:	9800      	ldr	r0, [sp, #0]
    1616:	9901      	ldr	r1, [sp, #4]
    1618:	47a8      	blx	r5
    161a:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    161c:	4d15      	ldr	r5, [pc, #84]	; (1674 <updateGround+0xe0>)
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    161e:	6260      	str	r0, [r4, #36]	; 0x24
    if ((millis() - offsets.offsetBufferTime) > 2000) {
    1620:	47a8      	blx	r5
    1622:	6823      	ldr	r3, [r4, #0]
    1624:	1ac0      	subs	r0, r0, r3
    1626:	23fa      	movs	r3, #250	; 0xfa
    1628:	00db      	lsls	r3, r3, #3
    162a:	4298      	cmp	r0, r3
    162c:	d909      	bls.n	1642 <updateGround+0xae>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    162e:	69e3      	ldr	r3, [r4, #28]
    1630:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    1632:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1634:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    1636:	6922      	ldr	r2, [r4, #16]
    1638:	6963      	ldr	r3, [r4, #20]
    163a:	60a2      	str	r2, [r4, #8]
    163c:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    163e:	47a8      	blx	r5
    1640:	6020      	str	r0, [r4, #0]
    }
}
    1642:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1644:	20000150 	.word	0x20000150
    1648:	0000634d 	.word	0x0000634d
    164c:	9999999a 	.word	0x9999999a
    1650:	3fe99999 	.word	0x3fe99999
    1654:	200005f0 	.word	0x200005f0
    1658:	00007015 	.word	0x00007015
    165c:	3fc99999 	.word	0x3fc99999
    1660:	000054c5 	.word	0x000054c5
    1664:	00006fa5 	.word	0x00006fa5
    1668:	3fe00000 	.word	0x3fe00000
    166c:	20000328 	.word	0x20000328
    1670:	00005209 	.word	0x00005209
    1674:	000011d9 	.word	0x000011d9

00001678 <isItPointingUp>:

void isItPointingUp() {
    1678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    167a:	261e      	movs	r6, #30
    u8_t i;

    double pointingUpBuffer;

    pointingUpBuffer = 0;
    167c:	2400      	movs	r4, #0
    167e:	2500      	movs	r5, #0

    for ( i = 0; i < 30 ; ++i ) {
        delay_ms(10);
    1680:	200a      	movs	r0, #10
    1682:	4b21      	ldr	r3, [pc, #132]	; (1708 <isItPointingUp+0x90>)
    1684:	4798      	blx	r3
        sampleTick();
    1686:	4b21      	ldr	r3, [pc, #132]	; (170c <isItPointingUp+0x94>)
    1688:	4798      	blx	r3
        pointingUpBuffer = pointingUpBuffer * 0.8 + (-sample.accelX) * 0.2;
    168a:	4a21      	ldr	r2, [pc, #132]	; (1710 <isItPointingUp+0x98>)
    168c:	4f21      	ldr	r7, [pc, #132]	; (1714 <isItPointingUp+0x9c>)
    168e:	4b22      	ldr	r3, [pc, #136]	; (1718 <isItPointingUp+0xa0>)
    1690:	0020      	movs	r0, r4
    1692:	0029      	movs	r1, r5
    1694:	47b8      	blx	r7
    1696:	4b21      	ldr	r3, [pc, #132]	; (171c <isItPointingUp+0xa4>)
    1698:	0004      	movs	r4, r0
    169a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    169c:	2380      	movs	r3, #128	; 0x80
    169e:	000d      	movs	r5, r1
    16a0:	061b      	lsls	r3, r3, #24
    16a2:	18c0      	adds	r0, r0, r3
    16a4:	4b1e      	ldr	r3, [pc, #120]	; (1720 <isItPointingUp+0xa8>)
    16a6:	4798      	blx	r3
    16a8:	4a19      	ldr	r2, [pc, #100]	; (1710 <isItPointingUp+0x98>)
    16aa:	4b1e      	ldr	r3, [pc, #120]	; (1724 <isItPointingUp+0xac>)
    16ac:	47b8      	blx	r7
    16ae:	0022      	movs	r2, r4
    16b0:	002b      	movs	r3, r5
    16b2:	4c1d      	ldr	r4, [pc, #116]	; (1728 <isItPointingUp+0xb0>)
    16b4:	47a0      	blx	r4
    16b6:	3e01      	subs	r6, #1
    16b8:	b2f6      	uxtb	r6, r6
    16ba:	0004      	movs	r4, r0
    16bc:	000d      	movs	r5, r1
    for ( i = 0; i < 30 ; ++i ) {
    16be:	2e00      	cmp	r6, #0
    16c0:	d1de      	bne.n	1680 <isItPointingUp+0x8>
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    16c2:	4e1a      	ldr	r6, [pc, #104]	; (172c <isItPointingUp+0xb4>)
    16c4:	4a1a      	ldr	r2, [pc, #104]	; (1730 <isItPointingUp+0xb8>)
    16c6:	4b1b      	ldr	r3, [pc, #108]	; (1734 <isItPointingUp+0xbc>)
    16c8:	47b0      	blx	r6
    16ca:	4f1b      	ldr	r7, [pc, #108]	; (1738 <isItPointingUp+0xc0>)
    16cc:	2800      	cmp	r0, #0
    16ce:	d007      	beq.n	16e0 <isItPointingUp+0x68>
    16d0:	4a0f      	ldr	r2, [pc, #60]	; (1710 <isItPointingUp+0x98>)
    16d2:	4b1a      	ldr	r3, [pc, #104]	; (173c <isItPointingUp+0xc4>)
    16d4:	0020      	movs	r0, r4
    16d6:	0029      	movs	r1, r5
    16d8:	47b8      	blx	r7
        altimeter.pointingUp = true;
    16da:	2201      	movs	r2, #1
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    16dc:	2800      	cmp	r0, #0
    16de:	d10e      	bne.n	16fe <isItPointingUp+0x86>
    } else if ((pointingUpBuffer < -0.9) & (pointingUpBuffer > -1.1)) {
    16e0:	4a13      	ldr	r2, [pc, #76]	; (1730 <isItPointingUp+0xb8>)
    16e2:	4b17      	ldr	r3, [pc, #92]	; (1740 <isItPointingUp+0xc8>)
    16e4:	0020      	movs	r0, r4
    16e6:	0029      	movs	r1, r5
    16e8:	47b8      	blx	r7
    16ea:	2800      	cmp	r0, #0
    16ec:	d00a      	beq.n	1704 <isItPointingUp+0x8c>
    16ee:	4a08      	ldr	r2, [pc, #32]	; (1710 <isItPointingUp+0x98>)
    16f0:	4b14      	ldr	r3, [pc, #80]	; (1744 <isItPointingUp+0xcc>)
    16f2:	0020      	movs	r0, r4
    16f4:	0029      	movs	r1, r5
    16f6:	47b0      	blx	r6
    16f8:	2800      	cmp	r0, #0
    16fa:	d003      	beq.n	1704 <isItPointingUp+0x8c>
        altimeter.pointingUp = false;
    16fc:	2200      	movs	r2, #0
    16fe:	4b12      	ldr	r3, [pc, #72]	; (1748 <isItPointingUp+0xd0>)
    1700:	715a      	strb	r2, [r3, #5]

        }

    }

    1702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1704:	e7fe      	b.n	1704 <isItPointingUp+0x8c>
    1706:	46c0      	nop			; (mov r8, r8)
    1708:	00001191 	.word	0x00001191
    170c:	00003471 	.word	0x00003471
    1710:	9999999a 	.word	0x9999999a
    1714:	0000634d 	.word	0x0000634d
    1718:	3fe99999 	.word	0x3fe99999
    171c:	200005f0 	.word	0x200005f0
    1720:	00007015 	.word	0x00007015
    1724:	3fc99999 	.word	0x3fc99999
    1728:	000054c5 	.word	0x000054c5
    172c:	0000518d 	.word	0x0000518d
    1730:	cccccccd 	.word	0xcccccccd
    1734:	3feccccc 	.word	0x3feccccc
    1738:	00005165 	.word	0x00005165
    173c:	3ff19999 	.word	0x3ff19999
    1740:	bfeccccc 	.word	0xbfeccccc
    1744:	bff19999 	.word	0xbff19999
    1748:	200001a0 	.word	0x200001a0

0000174c <checkContinuity>:
    }
}

void checkContinuity() {

    charges.mainFound = false;
    174c:	2200      	movs	r2, #0
    174e:	4b13      	ldr	r3, [pc, #76]	; (179c <checkContinuity+0x50>)
void checkContinuity() {
    1750:	b510      	push	{r4, lr}
    charges.mainFound = false;
    1752:	1c59      	adds	r1, r3, #1
    1754:	77ca      	strb	r2, [r1, #31]
    charges.drogueFound = false;
    1756:	1c99      	adds	r1, r3, #2
    1758:	77ca      	strb	r2, [r1, #31]
    if (chan.ENABLED & (chan.TYPE == DROGUE_t)) {
    175a:	4a11      	ldr	r2, [pc, #68]	; (17a0 <checkContinuity+0x54>)
    175c:	7850      	ldrb	r0, [r2, #1]
    175e:	2801      	cmp	r0, #1
    1760:	d102      	bne.n	1768 <checkContinuity+0x1c>
    1762:	7810      	ldrb	r0, [r2, #0]
    1764:	2800      	cmp	r0, #0
    1766:	d106      	bne.n	1776 <checkContinuity+0x2a>
    if (chan.ENABLED & (chan.TYPE == MAIN_t)) {
    1768:	79d1      	ldrb	r1, [r2, #7]
    176a:	2900      	cmp	r1, #0
    176c:	d102      	bne.n	1774 <checkContinuity+0x28>
    176e:	7992      	ldrb	r2, [r2, #6]
    1770:	2a00      	cmp	r2, #0
    1772:	d109      	bne.n	1788 <checkContinuity+0x3c>
            charges.mainFound = true;
        }
    }


}
    1774:	bd10      	pop	{r4, pc}
        if (sample.voltage.senseA > 500) {
    1776:	20fa      	movs	r0, #250	; 0xfa
    1778:	4c0a      	ldr	r4, [pc, #40]	; (17a4 <checkContinuity+0x58>)
    177a:	0040      	lsls	r0, r0, #1
    177c:	8a24      	ldrh	r4, [r4, #16]
    177e:	4284      	cmp	r4, r0
    1780:	d9f2      	bls.n	1768 <checkContinuity+0x1c>
            charges.drogueFound = true;
    1782:	2001      	movs	r0, #1
    1784:	77c8      	strb	r0, [r1, #31]
    1786:	e7ef      	b.n	1768 <checkContinuity+0x1c>
        if (sample.voltage.senseB > 500) {
    1788:	22fa      	movs	r2, #250	; 0xfa
    178a:	4906      	ldr	r1, [pc, #24]	; (17a4 <checkContinuity+0x58>)
    178c:	0052      	lsls	r2, r2, #1
    178e:	8a49      	ldrh	r1, [r1, #18]
    1790:	4291      	cmp	r1, r2
    1792:	d9ef      	bls.n	1774 <checkContinuity+0x28>
            charges.mainFound = true;
    1794:	2201      	movs	r2, #1
    1796:	3301      	adds	r3, #1
    1798:	77da      	strb	r2, [r3, #31]
}
    179a:	e7eb      	b.n	1774 <checkContinuity+0x28>
    179c:	200002c4 	.word	0x200002c4
    17a0:	20000180 	.word	0x20000180
    17a4:	200005f0 	.word	0x200005f0

000017a8 <continuityBeep>:

void continuityBeep() {
    17a8:	b510      	push	{r4, lr}

    checkContinuity();
    17aa:	4b11      	ldr	r3, [pc, #68]	; (17f0 <continuityBeep+0x48>)
    17ac:	4798      	blx	r3

    if ((charges.mainFound == false) & (charges.drogueFound == false)) {
    17ae:	4a11      	ldr	r2, [pc, #68]	; (17f4 <continuityBeep+0x4c>)
    17b0:	1c53      	adds	r3, r2, #1
    17b2:	7fd9      	ldrb	r1, [r3, #31]
    17b4:	2301      	movs	r3, #1
    17b6:	001c      	movs	r4, r3
    17b8:	1c90      	adds	r0, r2, #2
    17ba:	404c      	eors	r4, r1
    17bc:	7fc0      	ldrb	r0, [r0, #31]
    17be:	2900      	cmp	r1, #0
    17c0:	d104      	bne.n	17cc <continuityBeep+0x24>
    17c2:	2800      	cmp	r0, #0
    17c4:	d102      	bne.n	17cc <continuityBeep+0x24>
    } else if ((charges.mainFound == false) & (charges.drogueFound == true)) {
        beepDigit(1);
    } else if ((charges.mainFound == true) & (charges.drogueFound == false)) {
        beepDigit(2);
    } else if ((charges.mainFound == true) & (charges.drogueFound == true)) {
        beepDigit(3);
    17c6:	4b0c      	ldr	r3, [pc, #48]	; (17f8 <continuityBeep+0x50>)
    17c8:	4798      	blx	r3
    }


}
    17ca:	bd10      	pop	{r4, pc}
    } else if ((charges.mainFound == false) & (charges.drogueFound == true)) {
    17cc:	2c00      	cmp	r4, #0
    17ce:	d003      	beq.n	17d8 <continuityBeep+0x30>
    17d0:	2800      	cmp	r0, #0
    17d2:	d001      	beq.n	17d8 <continuityBeep+0x30>
        beepDigit(1);
    17d4:	2001      	movs	r0, #1
    17d6:	e7f6      	b.n	17c6 <continuityBeep+0x1e>
    } else if ((charges.mainFound == true) & (charges.drogueFound == false)) {
    17d8:	4283      	cmp	r3, r0
    17da:	d002      	beq.n	17e2 <continuityBeep+0x3a>
        beepDigit(2);
    17dc:	2002      	movs	r0, #2
    } else if ((charges.mainFound == true) & (charges.drogueFound == false)) {
    17de:	2900      	cmp	r1, #0
    17e0:	d1f1      	bne.n	17c6 <continuityBeep+0x1e>
    } else if ((charges.mainFound == true) & (charges.drogueFound == true)) {
    17e2:	2302      	movs	r3, #2
    17e4:	8c12      	ldrh	r2, [r2, #32]
    17e6:	33ff      	adds	r3, #255	; 0xff
    17e8:	429a      	cmp	r2, r3
    17ea:	d1ee      	bne.n	17ca <continuityBeep+0x22>
        beepDigit(3);
    17ec:	2003      	movs	r0, #3
    17ee:	e7ea      	b.n	17c6 <continuityBeep+0x1e>
    17f0:	0000174d 	.word	0x0000174d
    17f4:	200002c4 	.word	0x200002c4
    17f8:	00000edd 	.word	0x00000edd

000017fc <igniterTick>:

void igniterTick() {

    if (charges.igniterAHot) {
    17fc:	4b20      	ldr	r3, [pc, #128]	; (1880 <igniterTick+0x84>)
    17fe:	781a      	ldrb	r2, [r3, #0]
    1800:	2a00      	cmp	r2, #0
    1802:	d00c      	beq.n	181e <igniterTick+0x22>
        if ((charges.igniterATick + 3000) < (int)sample.sampleTick ) {
    1804:	491f      	ldr	r1, [pc, #124]	; (1884 <igniterTick+0x88>)
    1806:	685a      	ldr	r2, [r3, #4]
    1808:	1852      	adds	r2, r2, r1
    180a:	491f      	ldr	r1, [pc, #124]	; (1888 <igniterTick+0x8c>)
    180c:	6849      	ldr	r1, [r1, #4]
    180e:	428a      	cmp	r2, r1
    1810:	d205      	bcs.n	181e <igniterTick+0x22>
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1812:	2180      	movs	r1, #128	; 0x80
    1814:	4a1d      	ldr	r2, [pc, #116]	; (188c <igniterTick+0x90>)
    1816:	0409      	lsls	r1, r1, #16
    1818:	6011      	str	r1, [r2, #0]
            pinLow(fireAPin);
            charges.igniterAHot = false;
    181a:	2200      	movs	r2, #0
    181c:	701a      	strb	r2, [r3, #0]
        }
    }

    if (charges.igniterBHot) {
    181e:	7a1a      	ldrb	r2, [r3, #8]
    1820:	2a00      	cmp	r2, #0
    1822:	d00c      	beq.n	183e <igniterTick+0x42>
        if ((charges.igniterBTick + 3000) < (int)sample.sampleTick ) {
    1824:	4917      	ldr	r1, [pc, #92]	; (1884 <igniterTick+0x88>)
    1826:	68da      	ldr	r2, [r3, #12]
    1828:	1852      	adds	r2, r2, r1
    182a:	4917      	ldr	r1, [pc, #92]	; (1888 <igniterTick+0x8c>)
    182c:	6849      	ldr	r1, [r1, #4]
    182e:	428a      	cmp	r2, r1
    1830:	d205      	bcs.n	183e <igniterTick+0x42>
    1832:	2180      	movs	r1, #128	; 0x80
    1834:	4a15      	ldr	r2, [pc, #84]	; (188c <igniterTick+0x90>)
    1836:	03c9      	lsls	r1, r1, #15
    1838:	6011      	str	r1, [r2, #0]
            pinLow(fireBPin);
            charges.igniterBHot = false;
    183a:	2200      	movs	r2, #0
    183c:	721a      	strb	r2, [r3, #8]
        }
    }

    if (charges.igniterCHot) {
    183e:	7c1a      	ldrb	r2, [r3, #16]
    1840:	2a00      	cmp	r2, #0
    1842:	d00c      	beq.n	185e <igniterTick+0x62>
        if ((charges.igniterCTick + 3000) < (int)sample.sampleTick ) {
    1844:	490f      	ldr	r1, [pc, #60]	; (1884 <igniterTick+0x88>)
    1846:	695a      	ldr	r2, [r3, #20]
    1848:	1852      	adds	r2, r2, r1
    184a:	490f      	ldr	r1, [pc, #60]	; (1888 <igniterTick+0x8c>)
    184c:	6849      	ldr	r1, [r1, #4]
    184e:	428a      	cmp	r2, r1
    1850:	d205      	bcs.n	185e <igniterTick+0x62>
    1852:	2180      	movs	r1, #128	; 0x80
    1854:	4a0e      	ldr	r2, [pc, #56]	; (1890 <igniterTick+0x94>)
    1856:	0489      	lsls	r1, r1, #18
    1858:	6151      	str	r1, [r2, #20]
            pinLow(fireCPin);
            charges.igniterCHot = false;
    185a:	2200      	movs	r2, #0
    185c:	741a      	strb	r2, [r3, #16]
        }
    }

    if (charges.igniterDHot) {
    185e:	7e1a      	ldrb	r2, [r3, #24]
    1860:	2a00      	cmp	r2, #0
    1862:	d00c      	beq.n	187e <igniterTick+0x82>
        if ((charges.igniterDTick + 3000) <  (int)sample.sampleTick ) {
    1864:	4907      	ldr	r1, [pc, #28]	; (1884 <igniterTick+0x88>)
    1866:	69da      	ldr	r2, [r3, #28]
    1868:	1852      	adds	r2, r2, r1
    186a:	4907      	ldr	r1, [pc, #28]	; (1888 <igniterTick+0x8c>)
    186c:	6849      	ldr	r1, [r1, #4]
    186e:	428a      	cmp	r2, r1
    1870:	d205      	bcs.n	187e <igniterTick+0x82>
    1872:	2180      	movs	r1, #128	; 0x80
    1874:	4a06      	ldr	r2, [pc, #24]	; (1890 <igniterTick+0x94>)
    1876:	0449      	lsls	r1, r1, #17
    1878:	6151      	str	r1, [r2, #20]
            pinLow(fireDPin);
            charges.igniterDHot = false;
    187a:	2200      	movs	r2, #0
    187c:	761a      	strb	r2, [r3, #24]
        }
    }
}
    187e:	4770      	bx	lr
    1880:	200002c4 	.word	0x200002c4
    1884:	00000bb8 	.word	0x00000bb8
    1888:	200005f0 	.word	0x200005f0
    188c:	41004494 	.word	0x41004494
    1890:	41004400 	.word	0x41004400

00001894 <lightIgniterA>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1894:	2280      	movs	r2, #128	; 0x80
    1896:	4b05      	ldr	r3, [pc, #20]	; (18ac <lightIgniterA+0x18>)
    1898:	0412      	lsls	r2, r2, #16
    189a:	601a      	str	r2, [r3, #0]
    }
}

void lightIgniterA() {
    pinHigh(fireAPin);
    charges.igniterAHot = true;
    189c:	2201      	movs	r2, #1
    189e:	4b04      	ldr	r3, [pc, #16]	; (18b0 <lightIgniterA+0x1c>)
    18a0:	701a      	strb	r2, [r3, #0]
    charges.igniterATick = sample.sampleTick;
    18a2:	4a04      	ldr	r2, [pc, #16]	; (18b4 <lightIgniterA+0x20>)
    18a4:	6852      	ldr	r2, [r2, #4]
    18a6:	605a      	str	r2, [r3, #4]
}
    18a8:	4770      	bx	lr
    18aa:	46c0      	nop			; (mov r8, r8)
    18ac:	41004498 	.word	0x41004498
    18b0:	200002c4 	.word	0x200002c4
    18b4:	200005f0 	.word	0x200005f0

000018b8 <lightIgniterB>:
    18b8:	2280      	movs	r2, #128	; 0x80
    18ba:	4b05      	ldr	r3, [pc, #20]	; (18d0 <lightIgniterB+0x18>)
    18bc:	03d2      	lsls	r2, r2, #15
    18be:	601a      	str	r2, [r3, #0]

void lightIgniterB() {
    pinHigh(fireBPin);
    charges.igniterBHot = true;
    18c0:	2201      	movs	r2, #1
    18c2:	4b04      	ldr	r3, [pc, #16]	; (18d4 <lightIgniterB+0x1c>)
    18c4:	721a      	strb	r2, [r3, #8]
    charges.igniterBTick = sample.sampleTick;
    18c6:	4a04      	ldr	r2, [pc, #16]	; (18d8 <lightIgniterB+0x20>)
    18c8:	6852      	ldr	r2, [r2, #4]
    18ca:	60da      	str	r2, [r3, #12]
}
    18cc:	4770      	bx	lr
    18ce:	46c0      	nop			; (mov r8, r8)
    18d0:	41004498 	.word	0x41004498
    18d4:	200002c4 	.word	0x200002c4
    18d8:	200005f0 	.word	0x200005f0

000018dc <lightIgniterC>:
    18dc:	2280      	movs	r2, #128	; 0x80
    18de:	4b05      	ldr	r3, [pc, #20]	; (18f4 <lightIgniterC+0x18>)
    18e0:	0492      	lsls	r2, r2, #18
    18e2:	619a      	str	r2, [r3, #24]

void lightIgniterC() {
    pinHigh(fireCPin);
    charges.igniterCHot = true;
    18e4:	2201      	movs	r2, #1
    18e6:	4b04      	ldr	r3, [pc, #16]	; (18f8 <lightIgniterC+0x1c>)
    18e8:	741a      	strb	r2, [r3, #16]
    charges.igniterCTick = sample.sampleTick;
    18ea:	4a04      	ldr	r2, [pc, #16]	; (18fc <lightIgniterC+0x20>)
    18ec:	6852      	ldr	r2, [r2, #4]
    18ee:	615a      	str	r2, [r3, #20]
}
    18f0:	4770      	bx	lr
    18f2:	46c0      	nop			; (mov r8, r8)
    18f4:	41004400 	.word	0x41004400
    18f8:	200002c4 	.word	0x200002c4
    18fc:	200005f0 	.word	0x200005f0

00001900 <lightIgniterD>:
    1900:	2280      	movs	r2, #128	; 0x80
    1902:	4b05      	ldr	r3, [pc, #20]	; (1918 <lightIgniterD+0x18>)
    1904:	0452      	lsls	r2, r2, #17
    1906:	619a      	str	r2, [r3, #24]

void lightIgniterD() {
    pinHigh(fireDPin);
    charges.igniterDHot = true;
    1908:	2201      	movs	r2, #1
    190a:	4b04      	ldr	r3, [pc, #16]	; (191c <lightIgniterD+0x1c>)
    190c:	761a      	strb	r2, [r3, #24]
    charges.igniterDTick = sample.sampleTick;
    190e:	4a04      	ldr	r2, [pc, #16]	; (1920 <lightIgniterD+0x20>)
    1910:	6852      	ldr	r2, [r2, #4]
    1912:	61da      	str	r2, [r3, #28]
    1914:	4770      	bx	lr
    1916:	46c0      	nop			; (mov r8, r8)
    1918:	41004400 	.word	0x41004400
    191c:	200002c4 	.word	0x200002c4
    1920:	200005f0 	.word	0x200005f0

00001924 <igniteMain>:
void igniteMain() {
    1924:	b510      	push	{r4, lr}
    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    1926:	4c11      	ldr	r4, [pc, #68]	; (196c <igniteMain+0x48>)
    1928:	7863      	ldrb	r3, [r4, #1]
    192a:	2b00      	cmp	r3, #0
    192c:	d104      	bne.n	1938 <igniteMain+0x14>
    192e:	7823      	ldrb	r3, [r4, #0]
    1930:	2b00      	cmp	r3, #0
    1932:	d001      	beq.n	1938 <igniteMain+0x14>
        lightIgniterA();
    1934:	4b0e      	ldr	r3, [pc, #56]	; (1970 <igniteMain+0x4c>)
    1936:	4798      	blx	r3
    if(deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    1938:	79e3      	ldrb	r3, [r4, #7]
    193a:	2b00      	cmp	r3, #0
    193c:	d104      	bne.n	1948 <igniteMain+0x24>
    193e:	79a3      	ldrb	r3, [r4, #6]
    1940:	2b00      	cmp	r3, #0
    1942:	d001      	beq.n	1948 <igniteMain+0x24>
        lightIgniterB();
    1944:	4b0b      	ldr	r3, [pc, #44]	; (1974 <igniteMain+0x50>)
    1946:	4798      	blx	r3
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    1948:	7b63      	ldrb	r3, [r4, #13]
    194a:	2b00      	cmp	r3, #0
    194c:	d104      	bne.n	1958 <igniteMain+0x34>
    194e:	7b23      	ldrb	r3, [r4, #12]
    1950:	2b00      	cmp	r3, #0
    1952:	d001      	beq.n	1958 <igniteMain+0x34>
        lightIgniterC();
    1954:	4b08      	ldr	r3, [pc, #32]	; (1978 <igniteMain+0x54>)
    1956:	4798      	blx	r3
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    1958:	7ce3      	ldrb	r3, [r4, #19]
    195a:	2b00      	cmp	r3, #0
    195c:	d104      	bne.n	1968 <igniteMain+0x44>
    195e:	7ca3      	ldrb	r3, [r4, #18]
    1960:	2b00      	cmp	r3, #0
    1962:	d001      	beq.n	1968 <igniteMain+0x44>
        lightIgniterD();
    1964:	4b05      	ldr	r3, [pc, #20]	; (197c <igniteMain+0x58>)
    1966:	4798      	blx	r3
}
    1968:	bd10      	pop	{r4, pc}
    196a:	46c0      	nop			; (mov r8, r8)
    196c:	20000180 	.word	0x20000180
    1970:	00001895 	.word	0x00001895
    1974:	000018b9 	.word	0x000018b9
    1978:	000018dd 	.word	0x000018dd
    197c:	00001901 	.word	0x00001901

00001980 <igniteDrogue>:
void igniteDrogue() {
    1980:	b510      	push	{r4, lr}
    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == DROGUE_t)) {
    1982:	4c11      	ldr	r4, [pc, #68]	; (19c8 <igniteDrogue+0x48>)
    1984:	7863      	ldrb	r3, [r4, #1]
    1986:	2b01      	cmp	r3, #1
    1988:	d104      	bne.n	1994 <igniteDrogue+0x14>
    198a:	7823      	ldrb	r3, [r4, #0]
    198c:	2b00      	cmp	r3, #0
    198e:	d001      	beq.n	1994 <igniteDrogue+0x14>
        lightIgniterA();
    1990:	4b0e      	ldr	r3, [pc, #56]	; (19cc <igniteDrogue+0x4c>)
    1992:	4798      	blx	r3
    if (deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == DROGUE_t)) {
    1994:	79e3      	ldrb	r3, [r4, #7]
    1996:	2b01      	cmp	r3, #1
    1998:	d104      	bne.n	19a4 <igniteDrogue+0x24>
    199a:	79a3      	ldrb	r3, [r4, #6]
    199c:	2b00      	cmp	r3, #0
    199e:	d001      	beq.n	19a4 <igniteDrogue+0x24>
        lightIgniterB();
    19a0:	4b0b      	ldr	r3, [pc, #44]	; (19d0 <igniteDrogue+0x50>)
    19a2:	4798      	blx	r3
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == DROGUE_t)) {
    19a4:	7b63      	ldrb	r3, [r4, #13]
    19a6:	2b01      	cmp	r3, #1
    19a8:	d104      	bne.n	19b4 <igniteDrogue+0x34>
    19aa:	7b23      	ldrb	r3, [r4, #12]
    19ac:	2b00      	cmp	r3, #0
    19ae:	d001      	beq.n	19b4 <igniteDrogue+0x34>
        lightIgniterC();
    19b0:	4b08      	ldr	r3, [pc, #32]	; (19d4 <igniteDrogue+0x54>)
    19b2:	4798      	blx	r3
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
    19b4:	7ce3      	ldrb	r3, [r4, #19]
    19b6:	2b01      	cmp	r3, #1
    19b8:	d104      	bne.n	19c4 <igniteDrogue+0x44>
    19ba:	7ca3      	ldrb	r3, [r4, #18]
    19bc:	2b00      	cmp	r3, #0
    19be:	d001      	beq.n	19c4 <igniteDrogue+0x44>
        lightIgniterD();
    19c0:	4b05      	ldr	r3, [pc, #20]	; (19d8 <igniteDrogue+0x58>)
    19c2:	4798      	blx	r3
}
    19c4:	bd10      	pop	{r4, pc}
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	20000180 	.word	0x20000180
    19cc:	00001895 	.word	0x00001895
    19d0:	000018b9 	.word	0x000018b9
    19d4:	000018dd 	.word	0x000018dd
    19d8:	00001901 	.word	0x00001901

000019dc <computeKalmanGains>:
    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    phi[1][2]    = dt;
    phi[0][2]    = dt*dt/2.0;
    19dc:	2208      	movs	r2, #8
    phi[0][1]    = dt;
    19de:	4bdd      	ldr	r3, [pc, #884]	; (1d54 <computeKalmanGains+0x378>)
    19e0:	48dd      	ldr	r0, [pc, #884]	; (1d58 <computeKalmanGains+0x37c>)
    19e2:	49de      	ldr	r1, [pc, #888]	; (1d5c <computeKalmanGains+0x380>)
void computeKalmanGains() {
    19e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    phi[0][1]    = dt;
    19e6:	6098      	str	r0, [r3, #8]
    19e8:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    19ea:	6298      	str	r0, [r3, #40]	; 0x28
    19ec:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    19ee:	48dc      	ldr	r0, [pc, #880]	; (1d60 <computeKalmanGains+0x384>)
    19f0:	49dc      	ldr	r1, [pc, #880]	; (1d64 <computeKalmanGains+0x388>)
void computeKalmanGains() {
    19f2:	b0cd      	sub	sp, #308	; 0x134
    phi[0][2]    = dt*dt/2.0;
    19f4:	6118      	str	r0, [r3, #16]
    19f6:	6159      	str	r1, [r3, #20]
    19f8:	a940      	add	r1, sp, #256	; 0x100
    19fa:	1857      	adds	r7, r2, r1
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    19fc:	003e      	movs	r6, r7
    19fe:	48da      	ldr	r0, [pc, #872]	; (1d68 <computeKalmanGains+0x38c>)
    1a00:	49da      	ldr	r1, [pc, #872]	; (1d6c <computeKalmanGains+0x390>)
    1a02:	3e08      	subs	r6, #8
    1a04:	6030      	str	r0, [r6, #0]
    1a06:	6071      	str	r1, [r6, #4]
            kgain[i][j] = 1.0;
    1a08:	2108      	movs	r1, #8
    1a0a:	4249      	negs	r1, r1
    1a0c:	468c      	mov	ip, r1
    1a0e:	4ed8      	ldr	r6, [pc, #864]	; (1d70 <computeKalmanGains+0x394>)
    1a10:	2400      	movs	r4, #0
    1a12:	1996      	adds	r6, r2, r6
    1a14:	44b4      	add	ip, r6
    1a16:	4661      	mov	r1, ip
    1a18:	4dd6      	ldr	r5, [pc, #856]	; (1d74 <computeKalmanGains+0x398>)
            lastkgain[i][j] = .001;
    1a1a:	48d3      	ldr	r0, [pc, #844]	; (1d68 <computeKalmanGains+0x38c>)
            kgain[i][j] = 1.0;
    1a1c:	600c      	str	r4, [r1, #0]
    1a1e:	604d      	str	r5, [r1, #4]
            lastkgain[i][j] = .001;
    1a20:	49d2      	ldr	r1, [pc, #840]	; (1d6c <computeKalmanGains+0x390>)
    1a22:	3210      	adds	r2, #16
    1a24:	6038      	str	r0, [r7, #0]
    1a26:	6079      	str	r1, [r7, #4]
            kgain[i][j] = 1.0;
    1a28:	0020      	movs	r0, r4
    1a2a:	0029      	movs	r1, r5
    1a2c:	6030      	str	r0, [r6, #0]
    1a2e:	6071      	str	r1, [r6, #4]
    for( i = 0; i <= 2; i++)
    1a30:	2a38      	cmp	r2, #56	; 0x38
    1a32:	d1e1      	bne.n	19f8 <computeKalmanGains+0x1c>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1a34:	6819      	ldr	r1, [r3, #0]
    1a36:	685a      	ldr	r2, [r3, #4]
    1a38:	911a      	str	r1, [sp, #104]	; 0x68
    1a3a:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1a3c:	6999      	ldr	r1, [r3, #24]
    1a3e:	69da      	ldr	r2, [r3, #28]
    1a40:	911c      	str	r1, [sp, #112]	; 0x70
    1a42:	921d      	str	r2, [sp, #116]	; 0x74
    1a44:	6a19      	ldr	r1, [r3, #32]
    1a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1a48:	911e      	str	r1, [sp, #120]	; 0x78
    1a4a:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1a4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    1a50:	9120      	str	r1, [sp, #128]	; 0x80
    1a52:	9221      	str	r2, [sp, #132]	; 0x84
    1a54:	6b99      	ldr	r1, [r3, #56]	; 0x38
    1a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1a58:	9122      	str	r1, [sp, #136]	; 0x88
    1a5a:	9223      	str	r2, [sp, #140]	; 0x8c
    1a5c:	6c19      	ldr	r1, [r3, #64]	; 0x40
    1a5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1a60:	9124      	str	r1, [sp, #144]	; 0x90
    1a62:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1a64:	6c99      	ldr	r1, [r3, #72]	; 0x48
    1a66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    1a68:	913a      	str	r1, [sp, #232]	; 0xe8
    1a6a:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1a6c:	6d19      	ldr	r1, [r3, #80]	; 0x50
    1a6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    1a70:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    1a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1a74:	933e      	str	r3, [sp, #248]	; 0xf8
    1a76:	943f      	str	r4, [sp, #252]	; 0xfc
    1a78:	2300      	movs	r3, #0
    1a7a:	4cbf      	ldr	r4, [pc, #764]	; (1d78 <computeKalmanGains+0x39c>)
    1a7c:	913c      	str	r1, [sp, #240]	; 0xf0
    1a7e:	923d      	str	r2, [sp, #244]	; 0xf4
    1a80:	9302      	str	r3, [sp, #8]
    1a82:	9403      	str	r4, [sp, #12]
    1a84:	2300      	movs	r3, #0
    1a86:	2400      	movs	r4, #0
    1a88:	9310      	str	r3, [sp, #64]	; 0x40
    1a8a:	9411      	str	r4, [sp, #68]	; 0x44
    1a8c:	9300      	str	r3, [sp, #0]
    1a8e:	9401      	str	r4, [sp, #4]
    1a90:	9304      	str	r3, [sp, #16]
    1a92:	9405      	str	r4, [sp, #20]
    1a94:	2300      	movs	r3, #0
    1a96:	4cb8      	ldr	r4, [pc, #736]	; (1d78 <computeKalmanGains+0x39c>)
    1a98:	930e      	str	r3, [sp, #56]	; 0x38
    1a9a:	940f      	str	r4, [sp, #60]	; 0x3c
    1a9c:	2300      	movs	r3, #0
    1a9e:	2400      	movs	r4, #0
    1aa0:	9308      	str	r3, [sp, #32]
    1aa2:	9409      	str	r4, [sp, #36]	; 0x24
    1aa4:	930c      	str	r3, [sp, #48]	; 0x30
    1aa6:	940d      	str	r4, [sp, #52]	; 0x34
    1aa8:	930a      	str	r3, [sp, #40]	; 0x28
    1aaa:	940b      	str	r4, [sp, #44]	; 0x2c
    1aac:	2480      	movs	r4, #128	; 0x80
    1aae:	2300      	movs	r3, #0
    1ab0:	05e4      	lsls	r4, r4, #23
    1ab2:	9306      	str	r3, [sp, #24]
    1ab4:	9407      	str	r4, [sp, #28]
    1ab6:	2300      	movs	r3, #0
    1ab8:	9338      	str	r3, [sp, #224]	; 0xe0
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1aba:	4db0      	ldr	r5, [pc, #704]	; (1d7c <computeKalmanGains+0x3a0>)
    1abc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    1abe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    1ac0:	9806      	ldr	r0, [sp, #24]
    1ac2:	9907      	ldr	r1, [sp, #28]
    1ac4:	47a8      	blx	r5
    1ac6:	4aa4      	ldr	r2, [pc, #656]	; (1d58 <computeKalmanGains+0x37c>)
    1ac8:	0006      	movs	r6, r0
    1aca:	000f      	movs	r7, r1
    1acc:	9808      	ldr	r0, [sp, #32]
    1ace:	9909      	ldr	r1, [sp, #36]	; 0x24
    1ad0:	4ba2      	ldr	r3, [pc, #648]	; (1d5c <computeKalmanGains+0x380>)
    1ad2:	47a8      	blx	r5
    1ad4:	4caa      	ldr	r4, [pc, #680]	; (1d80 <computeKalmanGains+0x3a4>)
    1ad6:	0002      	movs	r2, r0
    1ad8:	000b      	movs	r3, r1
    1ada:	0030      	movs	r0, r6
    1adc:	0039      	movs	r1, r7
    1ade:	47a0      	blx	r4
    1ae0:	4a9f      	ldr	r2, [pc, #636]	; (1d60 <computeKalmanGains+0x384>)
    1ae2:	0006      	movs	r6, r0
    1ae4:	000f      	movs	r7, r1
    1ae6:	9800      	ldr	r0, [sp, #0]
    1ae8:	9901      	ldr	r1, [sp, #4]
    1aea:	4b9e      	ldr	r3, [pc, #632]	; (1d64 <computeKalmanGains+0x388>)
    1aec:	47a8      	blx	r5
    1aee:	0002      	movs	r2, r0
    1af0:	000b      	movs	r3, r1
    1af2:	0030      	movs	r0, r6
    1af4:	0039      	movs	r1, r7
    1af6:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1af8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    1afa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1afc:	9016      	str	r0, [sp, #88]	; 0x58
    1afe:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1b00:	980a      	ldr	r0, [sp, #40]	; 0x28
    1b02:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1b04:	47a8      	blx	r5
    1b06:	4a94      	ldr	r2, [pc, #592]	; (1d58 <computeKalmanGains+0x37c>)
    1b08:	0006      	movs	r6, r0
    1b0a:	000f      	movs	r7, r1
    1b0c:	980e      	ldr	r0, [sp, #56]	; 0x38
    1b0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1b10:	4b92      	ldr	r3, [pc, #584]	; (1d5c <computeKalmanGains+0x380>)
    1b12:	47a8      	blx	r5
    1b14:	0002      	movs	r2, r0
    1b16:	000b      	movs	r3, r1
    1b18:	0030      	movs	r0, r6
    1b1a:	0039      	movs	r1, r7
    1b1c:	47a0      	blx	r4
    1b1e:	4a90      	ldr	r2, [pc, #576]	; (1d60 <computeKalmanGains+0x384>)
    1b20:	0006      	movs	r6, r0
    1b22:	000f      	movs	r7, r1
    1b24:	9810      	ldr	r0, [sp, #64]	; 0x40
    1b26:	9911      	ldr	r1, [sp, #68]	; 0x44
    1b28:	4b8e      	ldr	r3, [pc, #568]	; (1d64 <computeKalmanGains+0x388>)
    1b2a:	47a8      	blx	r5
    1b2c:	0002      	movs	r2, r0
    1b2e:	000b      	movs	r3, r1
    1b30:	0030      	movs	r0, r6
    1b32:	0039      	movs	r1, r7
    1b34:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1b36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    1b38:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1b3a:	9012      	str	r0, [sp, #72]	; 0x48
    1b3c:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1b3e:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b40:	990d      	ldr	r1, [sp, #52]	; 0x34
    1b42:	47a8      	blx	r5
    1b44:	4a84      	ldr	r2, [pc, #528]	; (1d58 <computeKalmanGains+0x37c>)
    1b46:	0006      	movs	r6, r0
    1b48:	000f      	movs	r7, r1
    1b4a:	9804      	ldr	r0, [sp, #16]
    1b4c:	9905      	ldr	r1, [sp, #20]
    1b4e:	4b83      	ldr	r3, [pc, #524]	; (1d5c <computeKalmanGains+0x380>)
    1b50:	47a8      	blx	r5
    1b52:	0002      	movs	r2, r0
    1b54:	000b      	movs	r3, r1
    1b56:	0030      	movs	r0, r6
    1b58:	0039      	movs	r1, r7
    1b5a:	47a0      	blx	r4
    1b5c:	4a80      	ldr	r2, [pc, #512]	; (1d60 <computeKalmanGains+0x384>)
    1b5e:	0006      	movs	r6, r0
    1b60:	000f      	movs	r7, r1
    1b62:	9802      	ldr	r0, [sp, #8]
    1b64:	9903      	ldr	r1, [sp, #12]
    1b66:	4b7f      	ldr	r3, [pc, #508]	; (1d64 <computeKalmanGains+0x388>)
    1b68:	47a8      	blx	r5
    1b6a:	0002      	movs	r2, r0
    1b6c:	000b      	movs	r3, r1
    1b6e:	0030      	movs	r0, r6
    1b70:	0039      	movs	r1, r7
    1b72:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1b74:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    1b76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1b78:	9014      	str	r0, [sp, #80]	; 0x50
    1b7a:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1b7c:	9806      	ldr	r0, [sp, #24]
    1b7e:	9907      	ldr	r1, [sp, #28]
    1b80:	47a8      	blx	r5
    1b82:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    1b84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1b86:	0006      	movs	r6, r0
    1b88:	000f      	movs	r7, r1
    1b8a:	9808      	ldr	r0, [sp, #32]
    1b8c:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b8e:	47a8      	blx	r5
    1b90:	0002      	movs	r2, r0
    1b92:	000b      	movs	r3, r1
    1b94:	0030      	movs	r0, r6
    1b96:	0039      	movs	r1, r7
    1b98:	47a0      	blx	r4
    1b9a:	4a6f      	ldr	r2, [pc, #444]	; (1d58 <computeKalmanGains+0x37c>)
    1b9c:	0006      	movs	r6, r0
    1b9e:	000f      	movs	r7, r1
    1ba0:	9800      	ldr	r0, [sp, #0]
    1ba2:	9901      	ldr	r1, [sp, #4]
    1ba4:	4b6d      	ldr	r3, [pc, #436]	; (1d5c <computeKalmanGains+0x380>)
    1ba6:	47a8      	blx	r5
    1ba8:	0002      	movs	r2, r0
    1baa:	000b      	movs	r3, r1
    1bac:	0030      	movs	r0, r6
    1bae:	0039      	movs	r1, r7
    1bb0:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1bb2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    1bb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1bb6:	9018      	str	r0, [sp, #96]	; 0x60
    1bb8:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1bba:	980a      	ldr	r0, [sp, #40]	; 0x28
    1bbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1bbe:	47a8      	blx	r5
    1bc0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    1bc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1bc4:	0006      	movs	r6, r0
    1bc6:	000f      	movs	r7, r1
    1bc8:	980e      	ldr	r0, [sp, #56]	; 0x38
    1bca:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1bcc:	47a8      	blx	r5
    1bce:	0002      	movs	r2, r0
    1bd0:	000b      	movs	r3, r1
    1bd2:	0030      	movs	r0, r6
    1bd4:	0039      	movs	r1, r7
    1bd6:	47a0      	blx	r4
    1bd8:	4a5f      	ldr	r2, [pc, #380]	; (1d58 <computeKalmanGains+0x37c>)
    1bda:	0006      	movs	r6, r0
    1bdc:	000f      	movs	r7, r1
    1bde:	9810      	ldr	r0, [sp, #64]	; 0x40
    1be0:	9911      	ldr	r1, [sp, #68]	; 0x44
    1be2:	4b5e      	ldr	r3, [pc, #376]	; (1d5c <computeKalmanGains+0x380>)
    1be4:	47a8      	blx	r5
    1be6:	0002      	movs	r2, r0
    1be8:	000b      	movs	r3, r1
    1bea:	0030      	movs	r0, r6
    1bec:	0039      	movs	r1, r7
    1bee:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1bf0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    1bf2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1bf4:	9026      	str	r0, [sp, #152]	; 0x98
    1bf6:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1bf8:	980c      	ldr	r0, [sp, #48]	; 0x30
    1bfa:	990d      	ldr	r1, [sp, #52]	; 0x34
    1bfc:	47a8      	blx	r5
    1bfe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    1c00:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1c02:	0006      	movs	r6, r0
    1c04:	000f      	movs	r7, r1
    1c06:	9804      	ldr	r0, [sp, #16]
    1c08:	9905      	ldr	r1, [sp, #20]
    1c0a:	47a8      	blx	r5
    1c0c:	0002      	movs	r2, r0
    1c0e:	000b      	movs	r3, r1
    1c10:	0030      	movs	r0, r6
    1c12:	0039      	movs	r1, r7
    1c14:	47a0      	blx	r4
    1c16:	4a50      	ldr	r2, [pc, #320]	; (1d58 <computeKalmanGains+0x37c>)
    1c18:	0006      	movs	r6, r0
    1c1a:	000f      	movs	r7, r1
    1c1c:	9802      	ldr	r0, [sp, #8]
    1c1e:	9903      	ldr	r1, [sp, #12]
    1c20:	4b4e      	ldr	r3, [pc, #312]	; (1d5c <computeKalmanGains+0x380>)
    1c22:	47a8      	blx	r5
    1c24:	0002      	movs	r2, r0
    1c26:	000b      	movs	r3, r1
    1c28:	0030      	movs	r0, r6
    1c2a:	0039      	movs	r1, r7
    1c2c:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1c2e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    1c30:	9b21      	ldr	r3, [sp, #132]	; 0x84
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1c32:	9028      	str	r0, [sp, #160]	; 0xa0
    1c34:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1c36:	9806      	ldr	r0, [sp, #24]
    1c38:	9907      	ldr	r1, [sp, #28]
    1c3a:	47a8      	blx	r5
    1c3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1c3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1c40:	0006      	movs	r6, r0
    1c42:	000f      	movs	r7, r1
    1c44:	9808      	ldr	r0, [sp, #32]
    1c46:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c48:	47a8      	blx	r5
    1c4a:	0002      	movs	r2, r0
    1c4c:	000b      	movs	r3, r1
    1c4e:	0030      	movs	r0, r6
    1c50:	0039      	movs	r1, r7
    1c52:	47a0      	blx	r4
    1c54:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1c56:	9b25      	ldr	r3, [sp, #148]	; 0x94
    1c58:	0006      	movs	r6, r0
    1c5a:	000f      	movs	r7, r1
    1c5c:	9800      	ldr	r0, [sp, #0]
    1c5e:	9901      	ldr	r1, [sp, #4]
    1c60:	47a8      	blx	r5
    1c62:	0002      	movs	r2, r0
    1c64:	000b      	movs	r3, r1
    1c66:	0030      	movs	r0, r6
    1c68:	0039      	movs	r1, r7
    1c6a:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1c6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
    1c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1c70:	902e      	str	r0, [sp, #184]	; 0xb8
    1c72:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1c74:	980a      	ldr	r0, [sp, #40]	; 0x28
    1c76:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1c78:	47a8      	blx	r5
    1c7a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1c7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1c7e:	0006      	movs	r6, r0
    1c80:	000f      	movs	r7, r1
    1c82:	980e      	ldr	r0, [sp, #56]	; 0x38
    1c84:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1c86:	47a8      	blx	r5
    1c88:	0002      	movs	r2, r0
    1c8a:	000b      	movs	r3, r1
    1c8c:	0030      	movs	r0, r6
    1c8e:	0039      	movs	r1, r7
    1c90:	47a0      	blx	r4
    1c92:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1c94:	9b25      	ldr	r3, [sp, #148]	; 0x94
    1c96:	0006      	movs	r6, r0
    1c98:	000f      	movs	r7, r1
    1c9a:	9810      	ldr	r0, [sp, #64]	; 0x40
    1c9c:	9911      	ldr	r1, [sp, #68]	; 0x44
    1c9e:	47a8      	blx	r5
    1ca0:	0002      	movs	r2, r0
    1ca2:	000b      	movs	r3, r1
    1ca4:	0030      	movs	r0, r6
    1ca6:	0039      	movs	r1, r7
    1ca8:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1caa:	9a20      	ldr	r2, [sp, #128]	; 0x80
    1cac:	9b21      	ldr	r3, [sp, #132]	; 0x84
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1cae:	9006      	str	r0, [sp, #24]
    1cb0:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1cb2:	980c      	ldr	r0, [sp, #48]	; 0x30
    1cb4:	990d      	ldr	r1, [sp, #52]	; 0x34
    1cb6:	47a8      	blx	r5
    1cb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1cba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1cbc:	0006      	movs	r6, r0
    1cbe:	000f      	movs	r7, r1
    1cc0:	9804      	ldr	r0, [sp, #16]
    1cc2:	9905      	ldr	r1, [sp, #20]
    1cc4:	47a8      	blx	r5
    1cc6:	0002      	movs	r2, r0
    1cc8:	000b      	movs	r3, r1
    1cca:	0030      	movs	r0, r6
    1ccc:	0039      	movs	r1, r7
    1cce:	47a0      	blx	r4
    1cd0:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1cd2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    1cd4:	0006      	movs	r6, r0
    1cd6:	000f      	movs	r7, r1
    1cd8:	9802      	ldr	r0, [sp, #8]
    1cda:	9903      	ldr	r1, [sp, #12]
    1cdc:	47a8      	blx	r5
    1cde:	0002      	movs	r2, r0
    1ce0:	000b      	movs	r3, r1
    1ce2:	0030      	movs	r0, r6
    1ce4:	0039      	movs	r1, r7
    1ce6:	47a0      	blx	r4
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1ce8:	4a1b      	ldr	r2, [pc, #108]	; (1d58 <computeKalmanGains+0x37c>)
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1cea:	9002      	str	r0, [sp, #8]
    1cec:	9103      	str	r1, [sp, #12]
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1cee:	9812      	ldr	r0, [sp, #72]	; 0x48
    1cf0:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1cf2:	4b1a      	ldr	r3, [pc, #104]	; (1d5c <computeKalmanGains+0x380>)
    1cf4:	47a8      	blx	r5
    1cf6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1cf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1cfa:	47a0      	blx	r4
    1cfc:	4a18      	ldr	r2, [pc, #96]	; (1d60 <computeKalmanGains+0x384>)
    1cfe:	0006      	movs	r6, r0
    1d00:	000f      	movs	r7, r1
    1d02:	9814      	ldr	r0, [sp, #80]	; 0x50
    1d04:	9915      	ldr	r1, [sp, #84]	; 0x54
    1d06:	4b17      	ldr	r3, [pc, #92]	; (1d64 <computeKalmanGains+0x388>)
    1d08:	47a8      	blx	r5
    1d0a:	0002      	movs	r2, r0
    1d0c:	000b      	movs	r3, r1
    1d0e:	0030      	movs	r0, r6
    1d10:	0039      	movs	r1, r7
    1d12:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1d14:	2200      	movs	r2, #0
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1d16:	9008      	str	r0, [sp, #32]
    1d18:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1d1a:	9816      	ldr	r0, [sp, #88]	; 0x58
    1d1c:	9917      	ldr	r1, [sp, #92]	; 0x5c
    1d1e:	2300      	movs	r3, #0
    1d20:	47a8      	blx	r5
    1d22:	0006      	movs	r6, r0
    1d24:	000f      	movs	r7, r1
    1d26:	0002      	movs	r2, r0
    1d28:	000b      	movs	r3, r1
    1d2a:	9812      	ldr	r0, [sp, #72]	; 0x48
    1d2c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1d2e:	47a0      	blx	r4
    1d30:	4a09      	ldr	r2, [pc, #36]	; (1d58 <computeKalmanGains+0x37c>)
    1d32:	9000      	str	r0, [sp, #0]
    1d34:	9101      	str	r1, [sp, #4]
    1d36:	9814      	ldr	r0, [sp, #80]	; 0x50
    1d38:	9915      	ldr	r1, [sp, #84]	; 0x54
    1d3a:	4b08      	ldr	r3, [pc, #32]	; (1d5c <computeKalmanGains+0x380>)
    1d3c:	47a8      	blx	r5
    1d3e:	0002      	movs	r2, r0
    1d40:	000b      	movs	r3, r1
    1d42:	9800      	ldr	r0, [sp, #0]
    1d44:	9901      	ldr	r1, [sp, #4]
    1d46:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1d48:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1d4a:	9030      	str	r0, [sp, #192]	; 0xc0
    1d4c:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1d4e:	9812      	ldr	r0, [sp, #72]	; 0x48
    1d50:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1d52:	e017      	b.n	1d84 <computeKalmanGains+0x3a8>
    1d54:	20000010 	.word	0x20000010
    1d58:	47ae147b 	.word	0x47ae147b
    1d5c:	3f747ae1 	.word	0x3f747ae1
    1d60:	eb1c432d 	.word	0xeb1c432d
    1d64:	3eea36e2 	.word	0x3eea36e2
    1d68:	d2f1a9fc 	.word	0xd2f1a9fc
    1d6c:	3f50624d 	.word	0x3f50624d
    1d70:	20000348 	.word	0x20000348
    1d74:	3ff00000 	.word	0x3ff00000
    1d78:	40220000 	.word	0x40220000
    1d7c:	0000634d 	.word	0x0000634d
    1d80:	000054c5 	.word	0x000054c5
    1d84:	2300      	movs	r3, #0
    1d86:	47a8      	blx	r5
    1d88:	0032      	movs	r2, r6
    1d8a:	003b      	movs	r3, r7
    1d8c:	47a0      	blx	r4
    1d8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1d90:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1d92:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1d94:	4ad9      	ldr	r2, [pc, #868]	; (20fc <STACK_SIZE+0xfc>)
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1d96:	9112      	str	r1, [sp, #72]	; 0x48
    1d98:	9004      	str	r0, [sp, #16]
    1d9a:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1d9c:	4bd8      	ldr	r3, [pc, #864]	; (2100 <STACK_SIZE+0x100>)
    1d9e:	9826      	ldr	r0, [sp, #152]	; 0x98
    1da0:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1da2:	47a8      	blx	r5
    1da4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1da6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1da8:	47a0      	blx	r4
    1daa:	4ad6      	ldr	r2, [pc, #856]	; (2104 <STACK_SIZE+0x104>)
    1dac:	0006      	movs	r6, r0
    1dae:	000f      	movs	r7, r1
    1db0:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1db2:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1db4:	4bd4      	ldr	r3, [pc, #848]	; (2108 <STACK_SIZE+0x108>)
    1db6:	47a8      	blx	r5
    1db8:	0002      	movs	r2, r0
    1dba:	000b      	movs	r3, r1
    1dbc:	0030      	movs	r0, r6
    1dbe:	0039      	movs	r1, r7
    1dc0:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1dc2:	2200      	movs	r2, #0
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1dc4:	902a      	str	r0, [sp, #168]	; 0xa8
    1dc6:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1dc8:	9818      	ldr	r0, [sp, #96]	; 0x60
    1dca:	9919      	ldr	r1, [sp, #100]	; 0x64
    1dcc:	2300      	movs	r3, #0
    1dce:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1dd0:	2200      	movs	r2, #0
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1dd2:	9032      	str	r0, [sp, #200]	; 0xc8
    1dd4:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1dd6:	9826      	ldr	r0, [sp, #152]	; 0x98
    1dd8:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1dda:	2300      	movs	r3, #0
    1ddc:	47a8      	blx	r5
    1dde:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1de0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1de2:	47a0      	blx	r4
    1de4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1de6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1de8:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1dea:	4ac4      	ldr	r2, [pc, #784]	; (20fc <STACK_SIZE+0xfc>)
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1dec:	902c      	str	r0, [sp, #176]	; 0xb0
    1dee:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1df0:	9806      	ldr	r0, [sp, #24]
    1df2:	9907      	ldr	r1, [sp, #28]
    1df4:	4bc2      	ldr	r3, [pc, #776]	; (2100 <STACK_SIZE+0x100>)
    1df6:	47a8      	blx	r5
    1df8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    1dfa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1dfc:	47a0      	blx	r4
    1dfe:	4ac1      	ldr	r2, [pc, #772]	; (2104 <STACK_SIZE+0x104>)
    1e00:	0006      	movs	r6, r0
    1e02:	000f      	movs	r7, r1
    1e04:	9802      	ldr	r0, [sp, #8]
    1e06:	9903      	ldr	r1, [sp, #12]
    1e08:	4bbf      	ldr	r3, [pc, #764]	; (2108 <STACK_SIZE+0x108>)
    1e0a:	47a8      	blx	r5
    1e0c:	0002      	movs	r2, r0
    1e0e:	000b      	movs	r3, r1
    1e10:	0030      	movs	r0, r6
    1e12:	0039      	movs	r1, r7
    1e14:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1e16:	2200      	movs	r2, #0
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1e18:	9000      	str	r0, [sp, #0]
    1e1a:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1e1c:	982e      	ldr	r0, [sp, #184]	; 0xb8
    1e1e:	992f      	ldr	r1, [sp, #188]	; 0xbc
    1e20:	2300      	movs	r3, #0
    1e22:	47a8      	blx	r5
    1e24:	0006      	movs	r6, r0
    1e26:	000f      	movs	r7, r1
    1e28:	0002      	movs	r2, r0
    1e2a:	000b      	movs	r3, r1
    1e2c:	9806      	ldr	r0, [sp, #24]
    1e2e:	9907      	ldr	r1, [sp, #28]
    1e30:	47a0      	blx	r4
    1e32:	4ab2      	ldr	r2, [pc, #712]	; (20fc <STACK_SIZE+0xfc>)
    1e34:	900a      	str	r0, [sp, #40]	; 0x28
    1e36:	910b      	str	r1, [sp, #44]	; 0x2c
    1e38:	9802      	ldr	r0, [sp, #8]
    1e3a:	9903      	ldr	r1, [sp, #12]
    1e3c:	4bb0      	ldr	r3, [pc, #704]	; (2100 <STACK_SIZE+0x100>)
    1e3e:	47a8      	blx	r5
    1e40:	0002      	movs	r2, r0
    1e42:	000b      	movs	r3, r1
    1e44:	980a      	ldr	r0, [sp, #40]	; 0x28
    1e46:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1e48:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];
    1e4a:	2200      	movs	r2, #0
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1e4c:	9010      	str	r0, [sp, #64]	; 0x40
    1e4e:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];
    1e50:	9806      	ldr	r0, [sp, #24]
    1e52:	9907      	ldr	r1, [sp, #28]
    1e54:	2300      	movs	r3, #0
    1e56:	47a8      	blx	r5
    1e58:	0032      	movs	r2, r6
    1e5a:	003b      	movs	r3, r7
    1e5c:	47a0      	blx	r4
    1e5e:	9a02      	ldr	r2, [sp, #8]
    1e60:	9b03      	ldr	r3, [sp, #12]
    1e62:	47a0      	blx	r4
        pestp[2][2] = pestp[2][2] + model_variance;
    1e64:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    1e66:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    1e68:	47a0      	blx	r4
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1e6a:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    1e6c:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[2][2] = pestp[2][2] + model_variance;
    1e6e:	9002      	str	r0, [sp, #8]
    1e70:	9103      	str	r1, [sp, #12]
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1e72:	9808      	ldr	r0, [sp, #32]
    1e74:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e76:	47a0      	blx	r4
    1e78:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    1e7a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1e7c:	900a      	str	r0, [sp, #40]	; 0x28
    1e7e:	910b      	str	r1, [sp, #44]	; 0x2c
    1e80:	9802      	ldr	r0, [sp, #8]
    1e82:	9903      	ldr	r1, [sp, #12]
    1e84:	47a0      	blx	r4
    1e86:	9a00      	ldr	r2, [sp, #0]
    1e88:	9b01      	ldr	r3, [sp, #4]
    1e8a:	900c      	str	r0, [sp, #48]	; 0x30
    1e8c:	910d      	str	r1, [sp, #52]	; 0x34
    1e8e:	9804      	ldr	r0, [sp, #16]
    1e90:	9916      	ldr	r1, [sp, #88]	; 0x58
    1e92:	47a8      	blx	r5
    1e94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1e98:	900e      	str	r0, [sp, #56]	; 0x38
    1e9a:	910f      	str	r1, [sp, #60]	; 0x3c
    1e9c:	980a      	ldr	r0, [sp, #40]	; 0x28
    1e9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1ea0:	47a8      	blx	r5
    1ea2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1ea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1ea6:	4e99      	ldr	r6, [pc, #612]	; (210c <STACK_SIZE+0x10c>)
    1ea8:	47b0      	blx	r6

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1eaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1eac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1eae:	9006      	str	r0, [sp, #24]
    1eb0:	9107      	str	r1, [sp, #28]
        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1eb2:	9808      	ldr	r0, [sp, #32]
    1eb4:	9909      	ldr	r1, [sp, #36]	; 0x24
    1eb6:	47a8      	blx	r5
    1eb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1eba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1ebc:	47b0      	blx	r6
    1ebe:	9a06      	ldr	r2, [sp, #24]
    1ec0:	9b07      	ldr	r3, [sp, #28]
    1ec2:	4e93      	ldr	r6, [pc, #588]	; (2110 <STACK_SIZE+0x110>)
    1ec4:	47b0      	blx	r6
    1ec6:	9034      	str	r0, [sp, #208]	; 0xd0
    1ec8:	9135      	str	r1, [sp, #212]	; 0xd4
    1eca:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1ecc:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1ece:	4991      	ldr	r1, [pc, #580]	; (2114 <STACK_SIZE+0x114>)
    1ed0:	600a      	str	r2, [r1, #0]
    1ed2:	604b      	str	r3, [r1, #4]
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1ed4:	9808      	ldr	r0, [sp, #32]
    1ed6:	9909      	ldr	r1, [sp, #36]	; 0x24
    1ed8:	2280      	movs	r2, #128	; 0x80
    1eda:	0612      	lsls	r2, r2, #24
    1edc:	4694      	mov	ip, r2
    1ede:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1ee0:	9a04      	ldr	r2, [sp, #16]
    1ee2:	4463      	add	r3, ip
    1ee4:	932e      	str	r3, [sp, #184]	; 0xb8
    1ee6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1ee8:	47a8      	blx	r5
    1eea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1eec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1eee:	0006      	movs	r6, r0
    1ef0:	000f      	movs	r7, r1
    1ef2:	9804      	ldr	r0, [sp, #16]
    1ef4:	9916      	ldr	r1, [sp, #88]	; 0x58
    1ef6:	47a8      	blx	r5
    1ef8:	0002      	movs	r2, r0
    1efa:	000b      	movs	r3, r1
    1efc:	0030      	movs	r0, r6
    1efe:	0039      	movs	r1, r7
    1f00:	47a0      	blx	r4
    1f02:	9a06      	ldr	r2, [sp, #24]
    1f04:	9b07      	ldr	r3, [sp, #28]
    1f06:	4e82      	ldr	r6, [pc, #520]	; (2110 <STACK_SIZE+0x110>)
    1f08:	47b0      	blx	r6
    1f0a:	900e      	str	r0, [sp, #56]	; 0x38
    1f0c:	910f      	str	r1, [sp, #60]	; 0x3c
    1f0e:	4981      	ldr	r1, [pc, #516]	; (2114 <STACK_SIZE+0x114>)
    1f10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1f12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1f14:	608a      	str	r2, [r1, #8]
    1f16:	60cb      	str	r3, [r1, #12]
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1f18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1f1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1f1c:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1f1e:	992b      	ldr	r1, [sp, #172]	; 0xac
    1f20:	47a8      	blx	r5
    1f22:	9a00      	ldr	r2, [sp, #0]
    1f24:	9b01      	ldr	r3, [sp, #4]
    1f26:	0006      	movs	r6, r0
    1f28:	000f      	movs	r7, r1
    1f2a:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1f2c:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1f2e:	47a8      	blx	r5
    1f30:	0002      	movs	r2, r0
    1f32:	000b      	movs	r3, r1
    1f34:	0030      	movs	r0, r6
    1f36:	0039      	movs	r1, r7
    1f38:	4e74      	ldr	r6, [pc, #464]	; (210c <STACK_SIZE+0x10c>)
    1f3a:	47b0      	blx	r6
    1f3c:	9a06      	ldr	r2, [sp, #24]
    1f3e:	9b07      	ldr	r3, [sp, #28]
    1f40:	4e73      	ldr	r6, [pc, #460]	; (2110 <STACK_SIZE+0x110>)
    1f42:	47b0      	blx	r6
    1f44:	0002      	movs	r2, r0
    1f46:	000b      	movs	r3, r1
    1f48:	9139      	str	r1, [sp, #228]	; 0xe4
    1f4a:	4972      	ldr	r1, [pc, #456]	; (2114 <STACK_SIZE+0x114>)
    1f4c:	9018      	str	r0, [sp, #96]	; 0x60
    1f4e:	610a      	str	r2, [r1, #16]
    1f50:	614b      	str	r3, [r1, #20]
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1f52:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1f54:	992b      	ldr	r1, [sp, #172]	; 0xac
    1f56:	9a04      	ldr	r2, [sp, #16]
    1f58:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1f5a:	47a8      	blx	r5
    1f5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1f60:	0006      	movs	r6, r0
    1f62:	000f      	movs	r7, r1
    1f64:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1f66:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1f68:	47a8      	blx	r5
    1f6a:	0002      	movs	r2, r0
    1f6c:	000b      	movs	r3, r1
    1f6e:	0030      	movs	r0, r6
    1f70:	0039      	movs	r1, r7
    1f72:	47a0      	blx	r4
    1f74:	9a06      	ldr	r2, [sp, #24]
    1f76:	9b07      	ldr	r3, [sp, #28]
    1f78:	4e65      	ldr	r6, [pc, #404]	; (2110 <STACK_SIZE+0x110>)
    1f7a:	47b0      	blx	r6
    1f7c:	9012      	str	r0, [sp, #72]	; 0x48
    1f7e:	9113      	str	r1, [sp, #76]	; 0x4c
    1f80:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1f82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1f84:	4963      	ldr	r1, [pc, #396]	; (2114 <STACK_SIZE+0x114>)
    1f86:	618a      	str	r2, [r1, #24]
    1f88:	61cb      	str	r3, [r1, #28]
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1f8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1f8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1f8e:	9800      	ldr	r0, [sp, #0]
    1f90:	9901      	ldr	r1, [sp, #4]
    1f92:	47a8      	blx	r5
    1f94:	9a02      	ldr	r2, [sp, #8]
    1f96:	9b03      	ldr	r3, [sp, #12]
    1f98:	0006      	movs	r6, r0
    1f9a:	000f      	movs	r7, r1
    1f9c:	9800      	ldr	r0, [sp, #0]
    1f9e:	9901      	ldr	r1, [sp, #4]
    1fa0:	47a8      	blx	r5
    1fa2:	0002      	movs	r2, r0
    1fa4:	000b      	movs	r3, r1
    1fa6:	0030      	movs	r0, r6
    1fa8:	0039      	movs	r1, r7
    1faa:	4e58      	ldr	r6, [pc, #352]	; (210c <STACK_SIZE+0x10c>)
    1fac:	47b0      	blx	r6
    1fae:	9a06      	ldr	r2, [sp, #24]
    1fb0:	9b07      	ldr	r3, [sp, #28]
    1fb2:	4e57      	ldr	r6, [pc, #348]	; (2110 <STACK_SIZE+0x110>)
    1fb4:	47b0      	blx	r6
    1fb6:	9014      	str	r0, [sp, #80]	; 0x50
    1fb8:	9115      	str	r1, [sp, #84]	; 0x54
    1fba:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1fbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1fbe:	4955      	ldr	r1, [pc, #340]	; (2114 <STACK_SIZE+0x114>)
    1fc0:	620a      	str	r2, [r1, #32]
    1fc2:	624b      	str	r3, [r1, #36]	; 0x24
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1fc4:	9800      	ldr	r0, [sp, #0]
    1fc6:	9901      	ldr	r1, [sp, #4]
    1fc8:	9a04      	ldr	r2, [sp, #16]
    1fca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1fcc:	47a8      	blx	r5
    1fce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1fd2:	0006      	movs	r6, r0
    1fd4:	000f      	movs	r7, r1
    1fd6:	9802      	ldr	r0, [sp, #8]
    1fd8:	9903      	ldr	r1, [sp, #12]
    1fda:	47a8      	blx	r5
    1fdc:	0002      	movs	r2, r0
    1fde:	000b      	movs	r3, r1
    1fe0:	0030      	movs	r0, r6
    1fe2:	0039      	movs	r1, r7
    1fe4:	47a0      	blx	r4
    1fe6:	9a06      	ldr	r2, [sp, #24]
    1fe8:	9b07      	ldr	r3, [sp, #28]
    1fea:	4e49      	ldr	r6, [pc, #292]	; (2110 <STACK_SIZE+0x110>)
    1fec:	47b0      	blx	r6
    1fee:	9036      	str	r0, [sp, #216]	; 0xd8
    1ff0:	9137      	str	r1, [sp, #220]	; 0xdc
    1ff2:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1ff4:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    1ff6:	4947      	ldr	r1, [pc, #284]	; (2114 <STACK_SIZE+0x114>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1ff8:	4e44      	ldr	r6, [pc, #272]	; (210c <STACK_SIZE+0x10c>)
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1ffa:	628a      	str	r2, [r1, #40]	; 0x28
    1ffc:	62cb      	str	r3, [r1, #44]	; 0x2c
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1ffe:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    2000:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    2002:	2000      	movs	r0, #0
    2004:	4944      	ldr	r1, [pc, #272]	; (2118 <STACK_SIZE+0x118>)
    2006:	47b0      	blx	r6
    2008:	0002      	movs	r2, r0
    200a:	000b      	movs	r3, r1
    200c:	900c      	str	r0, [sp, #48]	; 0x30
    200e:	910d      	str	r1, [sp, #52]	; 0x34
    2010:	9808      	ldr	r0, [sp, #32]
    2012:	9909      	ldr	r1, [sp, #36]	; 0x24
    2014:	47a8      	blx	r5
    2016:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2018:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    201a:	0006      	movs	r6, r0
    201c:	000f      	movs	r7, r1
    201e:	9800      	ldr	r0, [sp, #0]
    2020:	9901      	ldr	r1, [sp, #4]
    2022:	47a8      	blx	r5
    2024:	0002      	movs	r2, r0
    2026:	000b      	movs	r3, r1
    2028:	0030      	movs	r0, r6
    202a:	0039      	movs	r1, r7
    202c:	4e37      	ldr	r6, [pc, #220]	; (210c <STACK_SIZE+0x10c>)
    202e:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    2030:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    2034:	9006      	str	r0, [sp, #24]
    2036:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    2038:	9830      	ldr	r0, [sp, #192]	; 0xc0
    203a:	9931      	ldr	r1, [sp, #196]	; 0xc4
    203c:	47a8      	blx	r5
    203e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2040:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2042:	0006      	movs	r6, r0
    2044:	000f      	movs	r7, r1
    2046:	9810      	ldr	r0, [sp, #64]	; 0x40
    2048:	9911      	ldr	r1, [sp, #68]	; 0x44
    204a:	47a8      	blx	r5
    204c:	0002      	movs	r2, r0
    204e:	000b      	movs	r3, r1
    2050:	0030      	movs	r0, r6
    2052:	0039      	movs	r1, r7
    2054:	4e2d      	ldr	r6, [pc, #180]	; (210c <STACK_SIZE+0x10c>)
    2056:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    2058:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    205a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    205c:	900a      	str	r0, [sp, #40]	; 0x28
    205e:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    2060:	9804      	ldr	r0, [sp, #16]
    2062:	9916      	ldr	r1, [sp, #88]	; 0x58
    2064:	47a8      	blx	r5
    2066:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2068:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    206a:	0006      	movs	r6, r0
    206c:	000f      	movs	r7, r1
    206e:	9802      	ldr	r0, [sp, #8]
    2070:	9903      	ldr	r1, [sp, #12]
    2072:	47a8      	blx	r5
    2074:	0002      	movs	r2, r0
    2076:	000b      	movs	r3, r1
    2078:	0030      	movs	r0, r6
    207a:	0039      	movs	r1, r7
    207c:	4e23      	ldr	r6, [pc, #140]	; (210c <STACK_SIZE+0x10c>)
    207e:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    2080:	2280      	movs	r2, #128	; 0x80
    2082:	0612      	lsls	r2, r2, #24
    2084:	4694      	mov	ip, r2
    2086:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    2088:	9a18      	ldr	r2, [sp, #96]	; 0x60
    208a:	4463      	add	r3, ip
    208c:	932e      	str	r3, [sp, #184]	; 0xb8
    208e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    2090:	900c      	str	r0, [sp, #48]	; 0x30
    2092:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    2094:	9808      	ldr	r0, [sp, #32]
    2096:	9909      	ldr	r1, [sp, #36]	; 0x24
    2098:	47a8      	blx	r5
    209a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    209c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    209e:	47a0      	blx	r4
    20a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    20a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    20a4:	0006      	movs	r6, r0
    20a6:	000f      	movs	r7, r1
    20a8:	9800      	ldr	r0, [sp, #0]
    20aa:	9901      	ldr	r1, [sp, #4]
    20ac:	47a8      	blx	r5
    20ae:	0002      	movs	r2, r0
    20b0:	000b      	movs	r3, r1
    20b2:	0030      	movs	r0, r6
    20b4:	0039      	movs	r1, r7
    20b6:	4e15      	ldr	r6, [pc, #84]	; (210c <STACK_SIZE+0x10c>)
    20b8:	47b0      	blx	r6
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    20ba:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    20bc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    20be:	9008      	str	r0, [sp, #32]
    20c0:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    20c2:	9826      	ldr	r0, [sp, #152]	; 0x98
    20c4:	9927      	ldr	r1, [sp, #156]	; 0x9c
    20c6:	47a0      	blx	r4
    20c8:	4a0c      	ldr	r2, [pc, #48]	; (20fc <STACK_SIZE+0xfc>)
    20ca:	0006      	movs	r6, r0
    20cc:	000f      	movs	r7, r1
    20ce:	9828      	ldr	r0, [sp, #160]	; 0xa0
    20d0:	9929      	ldr	r1, [sp, #164]	; 0xa4
    20d2:	4b0b      	ldr	r3, [pc, #44]	; (2100 <STACK_SIZE+0x100>)
    20d4:	47a8      	blx	r5
    20d6:	0002      	movs	r2, r0
    20d8:	000b      	movs	r3, r1
    20da:	0030      	movs	r0, r6
    20dc:	0039      	movs	r1, r7
    20de:	47a0      	blx	r4
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    20e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    20e2:	0006      	movs	r6, r0
    20e4:	000f      	movs	r7, r1
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    20e6:	9830      	ldr	r0, [sp, #192]	; 0xc0
    20e8:	9931      	ldr	r1, [sp, #196]	; 0xc4
    20ea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    20ec:	47a8      	blx	r5
    20ee:	0002      	movs	r2, r0
    20f0:	000b      	movs	r3, r1
    20f2:	0030      	movs	r0, r6
    20f4:	0039      	movs	r1, r7
    20f6:	47a0      	blx	r4
    20f8:	e010      	b.n	211c <STACK_SIZE+0x11c>
    20fa:	46c0      	nop			; (mov r8, r8)
    20fc:	47ae147b 	.word	0x47ae147b
    2100:	3f747ae1 	.word	0x3f747ae1
    2104:	eb1c432d 	.word	0xeb1c432d
    2108:	3eea36e2 	.word	0x3eea36e2
    210c:	0000684d 	.word	0x0000684d
    2110:	00005ae5 	.word	0x00005ae5
    2114:	20000348 	.word	0x20000348
    2118:	3ff00000 	.word	0x3ff00000
    211c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    211e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2120:	0006      	movs	r6, r0
    2122:	000f      	movs	r7, r1
    2124:	9810      	ldr	r0, [sp, #64]	; 0x40
    2126:	9911      	ldr	r1, [sp, #68]	; 0x44
    2128:	47a8      	blx	r5
    212a:	0002      	movs	r2, r0
    212c:	000b      	movs	r3, r1
    212e:	0030      	movs	r0, r6
    2130:	0039      	movs	r1, r7
    2132:	4e4c      	ldr	r6, [pc, #304]	; (2264 <STACK_SIZE+0x264>)
    2134:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    2136:	9a18      	ldr	r2, [sp, #96]	; 0x60
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    2138:	900e      	str	r0, [sp, #56]	; 0x38
    213a:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    213c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    213e:	9804      	ldr	r0, [sp, #16]
    2140:	9916      	ldr	r1, [sp, #88]	; 0x58
    2142:	47a8      	blx	r5
    2144:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    2146:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    2148:	47a0      	blx	r4
    214a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    214c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    214e:	0006      	movs	r6, r0
    2150:	000f      	movs	r7, r1
    2152:	9802      	ldr	r0, [sp, #8]
    2154:	9903      	ldr	r1, [sp, #12]
    2156:	47a8      	blx	r5
    2158:	4c42      	ldr	r4, [pc, #264]	; (2264 <STACK_SIZE+0x264>)
    215a:	0002      	movs	r2, r0
    215c:	000b      	movs	r3, r1
    215e:	0030      	movs	r0, r6
    2160:	0039      	movs	r1, r7
    2162:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    2164:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    2166:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    2168:	9004      	str	r0, [sp, #16]
    216a:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    216c:	2000      	movs	r0, #0
    216e:	493e      	ldr	r1, [pc, #248]	; (2268 <STACK_SIZE+0x268>)
    2170:	47a0      	blx	r4
    2172:	0002      	movs	r2, r0
    2174:	000b      	movs	r3, r1
    2176:	9012      	str	r0, [sp, #72]	; 0x48
    2178:	9113      	str	r1, [sp, #76]	; 0x4c
    217a:	9800      	ldr	r0, [sp, #0]
    217c:	9901      	ldr	r1, [sp, #4]
    217e:	47a8      	blx	r5
    2180:	9a14      	ldr	r2, [sp, #80]	; 0x50
    2182:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2184:	0006      	movs	r6, r0
    2186:	000f      	movs	r7, r1
    2188:	9800      	ldr	r0, [sp, #0]
    218a:	9901      	ldr	r1, [sp, #4]
    218c:	47a8      	blx	r5
    218e:	0002      	movs	r2, r0
    2190:	000b      	movs	r3, r1
    2192:	0030      	movs	r0, r6
    2194:	0039      	movs	r1, r7
    2196:	47a0      	blx	r4
    2198:	9000      	str	r0, [sp, #0]
    219a:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    219c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    219e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    21a0:	9810      	ldr	r0, [sp, #64]	; 0x40
    21a2:	9911      	ldr	r1, [sp, #68]	; 0x44
    21a4:	47a8      	blx	r5
    21a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    21a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    21aa:	0006      	movs	r6, r0
    21ac:	000f      	movs	r7, r1
    21ae:	9810      	ldr	r0, [sp, #64]	; 0x40
    21b0:	9911      	ldr	r1, [sp, #68]	; 0x44
    21b2:	47a8      	blx	r5
    21b4:	0002      	movs	r2, r0
    21b6:	000b      	movs	r3, r1
    21b8:	0030      	movs	r0, r6
    21ba:	0039      	movs	r1, r7
    21bc:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    21be:	9a12      	ldr	r2, [sp, #72]	; 0x48
    21c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    21c2:	9010      	str	r0, [sp, #64]	; 0x40
    21c4:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    21c6:	9802      	ldr	r0, [sp, #8]
    21c8:	9903      	ldr	r1, [sp, #12]
    21ca:	47a8      	blx	r5
    21cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
    21ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
    21d0:	000f      	movs	r7, r1
    21d2:	0006      	movs	r6, r0
    21d4:	9802      	ldr	r0, [sp, #8]
    21d6:	9903      	ldr	r1, [sp, #12]
    21d8:	47a8      	blx	r5
    21da:	000b      	movs	r3, r1
    21dc:	0002      	movs	r2, r0
    21de:	0039      	movs	r1, r7
    21e0:	0030      	movs	r0, r6
    21e2:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    21e4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    21e6:	2510      	movs	r5, #16
    21e8:	3301      	adds	r3, #1
    21ea:	9338      	str	r3, [sp, #224]	; 0xe0
        notdone = 0;
    21ec:	2300      	movs	r3, #0
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    21ee:	9002      	str	r0, [sp, #8]
    21f0:	9103      	str	r1, [sp, #12]
        notdone = 0;
    21f2:	001f      	movs	r7, r3
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    21f4:	4b1d      	ldr	r3, [pc, #116]	; (226c <STACK_SIZE+0x26c>)
    21f6:	9426      	str	r4, [sp, #152]	; 0x98
    21f8:	9318      	str	r3, [sp, #96]	; 0x60
    21fa:	002c      	movs	r4, r5
    21fc:	3c10      	subs	r4, #16
    21fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2200:	9e26      	ldr	r6, [sp, #152]	; 0x98
    2202:	18e3      	adds	r3, r4, r3
    2204:	681a      	ldr	r2, [r3, #0]
    2206:	685b      	ldr	r3, [r3, #4]
    2208:	9212      	str	r2, [sp, #72]	; 0x48
    220a:	9313      	str	r3, [sp, #76]	; 0x4c
    220c:	9812      	ldr	r0, [sp, #72]	; 0x48
    220e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    2210:	aa40      	add	r2, sp, #256	; 0x100
    2212:	18a3      	adds	r3, r4, r2
    2214:	9316      	str	r3, [sp, #88]	; 0x58
    2216:	681a      	ldr	r2, [r3, #0]
    2218:	685b      	ldr	r3, [r3, #4]
    221a:	9214      	str	r2, [sp, #80]	; 0x50
    221c:	9315      	str	r3, [sp, #84]	; 0x54
    221e:	47b0      	blx	r6
    2220:	9a14      	ldr	r2, [sp, #80]	; 0x50
    2222:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2224:	4e12      	ldr	r6, [pc, #72]	; (2270 <STACK_SIZE+0x270>)
    2226:	47b0      	blx	r6
    2228:	4b12      	ldr	r3, [pc, #72]	; (2274 <STACK_SIZE+0x274>)
    222a:	4a13      	ldr	r2, [pc, #76]	; (2278 <STACK_SIZE+0x278>)
    222c:	4e13      	ldr	r6, [pc, #76]	; (227c <STACK_SIZE+0x27c>)
    222e:	47b0      	blx	r6
                    notdone++;
    2230:	1e43      	subs	r3, r0, #1
    2232:	4198      	sbcs	r0, r3
                lastkgain[i][j] = kgain[i][j];
    2234:	9916      	ldr	r1, [sp, #88]	; 0x58
                    notdone++;
    2236:	183b      	adds	r3, r7, r0
    2238:	3408      	adds	r4, #8
    223a:	001f      	movs	r7, r3
                lastkgain[i][j] = kgain[i][j];
    223c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    223e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2240:	600a      	str	r2, [r1, #0]
    2242:	604b      	str	r3, [r1, #4]
            for( j = 0; j <= 1; j++) {
    2244:	42a5      	cmp	r5, r4
    2246:	d1da      	bne.n	21fe <STACK_SIZE+0x1fe>
    2248:	3510      	adds	r5, #16
        for( i = 0; i <= 2; i++)
    224a:	2d40      	cmp	r5, #64	; 0x40
    224c:	d1d5      	bne.n	21fa <STACK_SIZE+0x1fa>
            }
        if( notdone || k < 100)
    224e:	2f00      	cmp	r7, #0
    2250:	d001      	beq.n	2256 <STACK_SIZE+0x256>
    2252:	f7ff fc32 	bl	1aba <computeKalmanGains+0xde>
    2256:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    2258:	2b63      	cmp	r3, #99	; 0x63
    225a:	dc01      	bgt.n	2260 <STACK_SIZE+0x260>
    225c:	f7ff fc2d 	bl	1aba <computeKalmanGains+0xde>
            continue;
        else
            break;
    }
}
    2260:	b04d      	add	sp, #308	; 0x134
    2262:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2264:	0000684d 	.word	0x0000684d
    2268:	3ff00000 	.word	0x3ff00000
    226c:	20000348 	.word	0x20000348
    2270:	00005ae5 	.word	0x00005ae5
    2274:	3ee4f8b5 	.word	0x3ee4f8b5
    2278:	88e368f1 	.word	0x88e368f1
    227c:	0000518d 	.word	0x0000518d

00002280 <computeKalmanBaroOnlyGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    baro_phi[0][1]    = dt;
    2280:	4bd7      	ldr	r3, [pc, #860]	; (25e0 <computeKalmanBaroOnlyGains+0x360>)
    2282:	48d8      	ldr	r0, [pc, #864]	; (25e4 <computeKalmanBaroOnlyGains+0x364>)
    baro_phi[1][2]    = dt;
    2284:	001a      	movs	r2, r3
    baro_phi[0][1]    = dt;
    2286:	49d8      	ldr	r1, [pc, #864]	; (25e8 <computeKalmanBaroOnlyGains+0x368>)
    baro_phi[1][2]    = dt;
    2288:	3288      	adds	r2, #136	; 0x88
void computeKalmanBaroOnlyGains() {
    228a:	b5f0      	push	{r4, r5, r6, r7, lr}
    baro_phi[1][2]    = dt;
    228c:	6010      	str	r0, [r2, #0]
    228e:	6051      	str	r1, [r2, #4]
    baro_phi[0][2]    = dt*dt/2.0;
    2290:	2200      	movs	r2, #0
    baro_phi[0][1]    = dt;
    2292:	6698      	str	r0, [r3, #104]	; 0x68
    2294:	66d9      	str	r1, [r3, #108]	; 0x6c
    baro_phi[0][2]    = dt*dt/2.0;
    2296:	48d5      	ldr	r0, [pc, #852]	; (25ec <computeKalmanBaroOnlyGains+0x36c>)
    2298:	49d5      	ldr	r1, [pc, #852]	; (25f0 <computeKalmanBaroOnlyGains+0x370>)
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
        lastkgain[i] = .001;
    229a:	4cd6      	ldr	r4, [pc, #856]	; (25f4 <computeKalmanBaroOnlyGains+0x374>)
    baro_phi[0][2]    = dt*dt/2.0;
    229c:	6718      	str	r0, [r3, #112]	; 0x70
    229e:	6759      	str	r1, [r3, #116]	; 0x74
        lastkgain[i] = .001;
    22a0:	4dd5      	ldr	r5, [pc, #852]	; (25f8 <computeKalmanBaroOnlyGains+0x378>)
        baro_kgain[i] = 1.0;
    22a2:	4fd6      	ldr	r7, [pc, #856]	; (25fc <computeKalmanBaroOnlyGains+0x37c>)
void computeKalmanBaroOnlyGains() {
    22a4:	b0c5      	sub	sp, #276	; 0x114
        baro_kgain[i] = 1.0;
    22a6:	2000      	movs	r0, #0
        lastkgain[i] = .001;
    22a8:	a93e      	add	r1, sp, #248	; 0xf8
    22aa:	1856      	adds	r6, r2, r1
        baro_kgain[i] = 1.0;
    22ac:	49d4      	ldr	r1, [pc, #848]	; (2600 <computeKalmanBaroOnlyGains+0x380>)
        lastkgain[i] = .001;
    22ae:	6034      	str	r4, [r6, #0]
    22b0:	6075      	str	r5, [r6, #4]
        baro_kgain[i] = 1.0;
    22b2:	19d6      	adds	r6, r2, r7
    22b4:	3208      	adds	r2, #8
    22b6:	6030      	str	r0, [r6, #0]
    22b8:	6071      	str	r1, [r6, #4]
    for( i = 0; i <= 2; i++) {
    22ba:	2a18      	cmp	r2, #24
    22bc:	d1f3      	bne.n	22a6 <computeKalmanBaroOnlyGains+0x26>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    22be:	6819      	ldr	r1, [r3, #0]
    22c0:	685a      	ldr	r2, [r3, #4]
    22c2:	9108      	str	r1, [sp, #32]
    22c4:	9209      	str	r2, [sp, #36]	; 0x24
    22c6:	6899      	ldr	r1, [r3, #8]
    22c8:	68da      	ldr	r2, [r3, #12]
    22ca:	910a      	str	r1, [sp, #40]	; 0x28
    22cc:	920b      	str	r2, [sp, #44]	; 0x2c
    22ce:	6919      	ldr	r1, [r3, #16]
    22d0:	695a      	ldr	r2, [r3, #20]
    22d2:	910c      	str	r1, [sp, #48]	; 0x30
    22d4:	920d      	str	r2, [sp, #52]	; 0x34
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    22d6:	6999      	ldr	r1, [r3, #24]
    22d8:	69da      	ldr	r2, [r3, #28]
    22da:	910e      	str	r1, [sp, #56]	; 0x38
    22dc:	920f      	str	r2, [sp, #60]	; 0x3c
    22de:	6a19      	ldr	r1, [r3, #32]
    22e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    22e2:	9110      	str	r1, [sp, #64]	; 0x40
    22e4:	9211      	str	r2, [sp, #68]	; 0x44
    22e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    22e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    22ea:	9112      	str	r1, [sp, #72]	; 0x48
    22ec:	9213      	str	r2, [sp, #76]	; 0x4c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    22ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
    22f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    22f2:	9114      	str	r1, [sp, #80]	; 0x50
    22f4:	9215      	str	r2, [sp, #84]	; 0x54
    22f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    22f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    22fa:	9116      	str	r1, [sp, #88]	; 0x58
    22fc:	9217      	str	r2, [sp, #92]	; 0x5c
    22fe:	6c19      	ldr	r1, [r3, #64]	; 0x40
    2300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2302:	9118      	str	r1, [sp, #96]	; 0x60
    2304:	9219      	str	r2, [sp, #100]	; 0x64
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[0][0] = pestp[0][0] + model_variance;
    2306:	6c99      	ldr	r1, [r3, #72]	; 0x48
    2308:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);
    230a:	6d5c      	ldr	r4, [r3, #84]	; 0x54
    230c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    230e:	933c      	str	r3, [sp, #240]	; 0xf0
    2310:	943d      	str	r4, [sp, #244]	; 0xf4
    2312:	2300      	movs	r3, #0
    2314:	4cbb      	ldr	r4, [pc, #748]	; (2604 <computeKalmanBaroOnlyGains+0x384>)
        pestp[0][0] = pestp[0][0] + model_variance;
    2316:	913a      	str	r1, [sp, #232]	; 0xe8
    2318:	923b      	str	r2, [sp, #236]	; 0xec
        det = (pestp[0][0]+altitude_variance);
    231a:	9304      	str	r3, [sp, #16]
    231c:	9405      	str	r4, [sp, #20]
    231e:	2300      	movs	r3, #0
    2320:	2400      	movs	r4, #0
    2322:	9302      	str	r3, [sp, #8]
    2324:	9403      	str	r4, [sp, #12]
    2326:	9300      	str	r3, [sp, #0]
    2328:	9401      	str	r4, [sp, #4]
    232a:	9306      	str	r3, [sp, #24]
    232c:	9407      	str	r4, [sp, #28]
    232e:	2300      	movs	r3, #0
    2330:	4cb4      	ldr	r4, [pc, #720]	; (2604 <computeKalmanBaroOnlyGains+0x384>)
    2332:	9322      	str	r3, [sp, #136]	; 0x88
    2334:	9423      	str	r4, [sp, #140]	; 0x8c
    2336:	2300      	movs	r3, #0
    2338:	2400      	movs	r4, #0
    233a:	9320      	str	r3, [sp, #128]	; 0x80
    233c:	9421      	str	r4, [sp, #132]	; 0x84
    233e:	931e      	str	r3, [sp, #120]	; 0x78
    2340:	941f      	str	r4, [sp, #124]	; 0x7c
    2342:	931c      	str	r3, [sp, #112]	; 0x70
    2344:	941d      	str	r4, [sp, #116]	; 0x74
    2346:	2480      	movs	r4, #128	; 0x80
    2348:	2300      	movs	r3, #0
    234a:	05e4      	lsls	r4, r4, #23
    234c:	931a      	str	r3, [sp, #104]	; 0x68
    234e:	941b      	str	r4, [sp, #108]	; 0x6c
    2350:	2300      	movs	r3, #0
    2352:	9327      	str	r3, [sp, #156]	; 0x9c
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    2354:	4cac      	ldr	r4, [pc, #688]	; (2608 <computeKalmanBaroOnlyGains+0x388>)
    2356:	9a08      	ldr	r2, [sp, #32]
    2358:	9b09      	ldr	r3, [sp, #36]	; 0x24
    235a:	981a      	ldr	r0, [sp, #104]	; 0x68
    235c:	991b      	ldr	r1, [sp, #108]	; 0x6c
    235e:	47a0      	blx	r4
    2360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2364:	0006      	movs	r6, r0
    2366:	000f      	movs	r7, r1
    2368:	9820      	ldr	r0, [sp, #128]	; 0x80
    236a:	9921      	ldr	r1, [sp, #132]	; 0x84
    236c:	47a0      	blx	r4
    236e:	4da7      	ldr	r5, [pc, #668]	; (260c <computeKalmanBaroOnlyGains+0x38c>)
    2370:	0002      	movs	r2, r0
    2372:	000b      	movs	r3, r1
    2374:	0030      	movs	r0, r6
    2376:	0039      	movs	r1, r7
    2378:	47a8      	blx	r5
    237a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    237c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    237e:	0006      	movs	r6, r0
    2380:	000f      	movs	r7, r1
    2382:	9800      	ldr	r0, [sp, #0]
    2384:	9901      	ldr	r1, [sp, #4]
    2386:	47a0      	blx	r4
    2388:	0002      	movs	r2, r0
    238a:	000b      	movs	r3, r1
    238c:	0030      	movs	r0, r6
    238e:	0039      	movs	r1, r7
    2390:	47a8      	blx	r5
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    2392:	9a08      	ldr	r2, [sp, #32]
    2394:	9b09      	ldr	r3, [sp, #36]	; 0x24
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    2396:	9024      	str	r0, [sp, #144]	; 0x90
    2398:	9125      	str	r1, [sp, #148]	; 0x94
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    239a:	981c      	ldr	r0, [sp, #112]	; 0x70
    239c:	991d      	ldr	r1, [sp, #116]	; 0x74
    239e:	47a0      	blx	r4
    23a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    23a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    23a4:	0006      	movs	r6, r0
    23a6:	000f      	movs	r7, r1
    23a8:	9822      	ldr	r0, [sp, #136]	; 0x88
    23aa:	9923      	ldr	r1, [sp, #140]	; 0x8c
    23ac:	47a0      	blx	r4
    23ae:	0002      	movs	r2, r0
    23b0:	000b      	movs	r3, r1
    23b2:	0030      	movs	r0, r6
    23b4:	0039      	movs	r1, r7
    23b6:	47a8      	blx	r5
    23b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    23ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    23bc:	0006      	movs	r6, r0
    23be:	000f      	movs	r7, r1
    23c0:	9802      	ldr	r0, [sp, #8]
    23c2:	9903      	ldr	r1, [sp, #12]
    23c4:	47a0      	blx	r4
    23c6:	0002      	movs	r2, r0
    23c8:	000b      	movs	r3, r1
    23ca:	0030      	movs	r0, r6
    23cc:	0039      	movs	r1, r7
    23ce:	47a8      	blx	r5
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    23d0:	9a08      	ldr	r2, [sp, #32]
    23d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    23d4:	9028      	str	r0, [sp, #160]	; 0xa0
    23d6:	9129      	str	r1, [sp, #164]	; 0xa4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    23d8:	981e      	ldr	r0, [sp, #120]	; 0x78
    23da:	991f      	ldr	r1, [sp, #124]	; 0x7c
    23dc:	47a0      	blx	r4
    23de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    23e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    23e2:	0006      	movs	r6, r0
    23e4:	000f      	movs	r7, r1
    23e6:	9806      	ldr	r0, [sp, #24]
    23e8:	9907      	ldr	r1, [sp, #28]
    23ea:	47a0      	blx	r4
    23ec:	0002      	movs	r2, r0
    23ee:	000b      	movs	r3, r1
    23f0:	0030      	movs	r0, r6
    23f2:	0039      	movs	r1, r7
    23f4:	47a8      	blx	r5
    23f6:	9a04      	ldr	r2, [sp, #16]
    23f8:	9b05      	ldr	r3, [sp, #20]
    23fa:	0006      	movs	r6, r0
    23fc:	000f      	movs	r7, r1
    23fe:	980c      	ldr	r0, [sp, #48]	; 0x30
    2400:	990d      	ldr	r1, [sp, #52]	; 0x34
    2402:	47a0      	blx	r4
    2404:	0002      	movs	r2, r0
    2406:	000b      	movs	r3, r1
    2408:	0030      	movs	r0, r6
    240a:	0039      	movs	r1, r7
    240c:	47a8      	blx	r5
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    240e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2410:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    2412:	902a      	str	r0, [sp, #168]	; 0xa8
    2414:	912b      	str	r1, [sp, #172]	; 0xac
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    2416:	981a      	ldr	r0, [sp, #104]	; 0x68
    2418:	991b      	ldr	r1, [sp, #108]	; 0x6c
    241a:	47a0      	blx	r4
    241c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    241e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2420:	0006      	movs	r6, r0
    2422:	000f      	movs	r7, r1
    2424:	9820      	ldr	r0, [sp, #128]	; 0x80
    2426:	9921      	ldr	r1, [sp, #132]	; 0x84
    2428:	47a0      	blx	r4
    242a:	0002      	movs	r2, r0
    242c:	000b      	movs	r3, r1
    242e:	0030      	movs	r0, r6
    2430:	0039      	movs	r1, r7
    2432:	47a8      	blx	r5
    2434:	9a12      	ldr	r2, [sp, #72]	; 0x48
    2436:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2438:	0006      	movs	r6, r0
    243a:	000f      	movs	r7, r1
    243c:	9800      	ldr	r0, [sp, #0]
    243e:	9901      	ldr	r1, [sp, #4]
    2440:	47a0      	blx	r4
    2442:	0002      	movs	r2, r0
    2444:	000b      	movs	r3, r1
    2446:	0030      	movs	r0, r6
    2448:	0039      	movs	r1, r7
    244a:	47a8      	blx	r5
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    244c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    244e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    2450:	9034      	str	r0, [sp, #208]	; 0xd0
    2452:	9135      	str	r1, [sp, #212]	; 0xd4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    2454:	981c      	ldr	r0, [sp, #112]	; 0x70
    2456:	991d      	ldr	r1, [sp, #116]	; 0x74
    2458:	47a0      	blx	r4
    245a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    245c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    245e:	0006      	movs	r6, r0
    2460:	000f      	movs	r7, r1
    2462:	9822      	ldr	r0, [sp, #136]	; 0x88
    2464:	9923      	ldr	r1, [sp, #140]	; 0x8c
    2466:	47a0      	blx	r4
    2468:	0002      	movs	r2, r0
    246a:	000b      	movs	r3, r1
    246c:	0030      	movs	r0, r6
    246e:	0039      	movs	r1, r7
    2470:	47a8      	blx	r5
    2472:	9a12      	ldr	r2, [sp, #72]	; 0x48
    2474:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2476:	0006      	movs	r6, r0
    2478:	000f      	movs	r7, r1
    247a:	9802      	ldr	r0, [sp, #8]
    247c:	9903      	ldr	r1, [sp, #12]
    247e:	47a0      	blx	r4
    2480:	0002      	movs	r2, r0
    2482:	000b      	movs	r3, r1
    2484:	0030      	movs	r0, r6
    2486:	0039      	movs	r1, r7
    2488:	47a8      	blx	r5
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    248a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    248c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    248e:	902c      	str	r0, [sp, #176]	; 0xb0
    2490:	912d      	str	r1, [sp, #180]	; 0xb4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    2492:	981e      	ldr	r0, [sp, #120]	; 0x78
    2494:	991f      	ldr	r1, [sp, #124]	; 0x7c
    2496:	47a0      	blx	r4
    2498:	9a10      	ldr	r2, [sp, #64]	; 0x40
    249a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    249c:	0006      	movs	r6, r0
    249e:	000f      	movs	r7, r1
    24a0:	9806      	ldr	r0, [sp, #24]
    24a2:	9907      	ldr	r1, [sp, #28]
    24a4:	47a0      	blx	r4
    24a6:	0002      	movs	r2, r0
    24a8:	000b      	movs	r3, r1
    24aa:	0030      	movs	r0, r6
    24ac:	0039      	movs	r1, r7
    24ae:	47a8      	blx	r5
    24b0:	9a04      	ldr	r2, [sp, #16]
    24b2:	9b05      	ldr	r3, [sp, #20]
    24b4:	0006      	movs	r6, r0
    24b6:	000f      	movs	r7, r1
    24b8:	9812      	ldr	r0, [sp, #72]	; 0x48
    24ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
    24bc:	47a0      	blx	r4
    24be:	0002      	movs	r2, r0
    24c0:	000b      	movs	r3, r1
    24c2:	0030      	movs	r0, r6
    24c4:	0039      	movs	r1, r7
    24c6:	47a8      	blx	r5
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    24c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    24ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    24cc:	902e      	str	r0, [sp, #184]	; 0xb8
    24ce:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    24d0:	981a      	ldr	r0, [sp, #104]	; 0x68
    24d2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    24d4:	47a0      	blx	r4
    24d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    24d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    24da:	0006      	movs	r6, r0
    24dc:	000f      	movs	r7, r1
    24de:	9820      	ldr	r0, [sp, #128]	; 0x80
    24e0:	9921      	ldr	r1, [sp, #132]	; 0x84
    24e2:	47a0      	blx	r4
    24e4:	0002      	movs	r2, r0
    24e6:	000b      	movs	r3, r1
    24e8:	0030      	movs	r0, r6
    24ea:	0039      	movs	r1, r7
    24ec:	47a8      	blx	r5
    24ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
    24f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    24f2:	0006      	movs	r6, r0
    24f4:	000f      	movs	r7, r1
    24f6:	9800      	ldr	r0, [sp, #0]
    24f8:	9901      	ldr	r1, [sp, #4]
    24fa:	47a0      	blx	r4
    24fc:	0002      	movs	r2, r0
    24fe:	000b      	movs	r3, r1
    2500:	0030      	movs	r0, r6
    2502:	0039      	movs	r1, r7
    2504:	47a8      	blx	r5
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    2506:	9a14      	ldr	r2, [sp, #80]	; 0x50
    2508:	9b15      	ldr	r3, [sp, #84]	; 0x54
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    250a:	9000      	str	r0, [sp, #0]
    250c:	9101      	str	r1, [sp, #4]
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    250e:	981c      	ldr	r0, [sp, #112]	; 0x70
    2510:	991d      	ldr	r1, [sp, #116]	; 0x74
    2512:	47a0      	blx	r4
    2514:	9a16      	ldr	r2, [sp, #88]	; 0x58
    2516:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    2518:	0006      	movs	r6, r0
    251a:	000f      	movs	r7, r1
    251c:	9822      	ldr	r0, [sp, #136]	; 0x88
    251e:	9923      	ldr	r1, [sp, #140]	; 0x8c
    2520:	47a0      	blx	r4
    2522:	0002      	movs	r2, r0
    2524:	000b      	movs	r3, r1
    2526:	0030      	movs	r0, r6
    2528:	0039      	movs	r1, r7
    252a:	47a8      	blx	r5
    252c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    252e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2530:	0006      	movs	r6, r0
    2532:	000f      	movs	r7, r1
    2534:	9802      	ldr	r0, [sp, #8]
    2536:	9903      	ldr	r1, [sp, #12]
    2538:	47a0      	blx	r4
    253a:	0002      	movs	r2, r0
    253c:	000b      	movs	r3, r1
    253e:	0030      	movs	r0, r6
    2540:	0039      	movs	r1, r7
    2542:	47a8      	blx	r5
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    2544:	9a14      	ldr	r2, [sp, #80]	; 0x50
    2546:	9b15      	ldr	r3, [sp, #84]	; 0x54
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    2548:	9030      	str	r0, [sp, #192]	; 0xc0
    254a:	9131      	str	r1, [sp, #196]	; 0xc4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    254c:	981e      	ldr	r0, [sp, #120]	; 0x78
    254e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    2550:	47a0      	blx	r4
    2552:	9a16      	ldr	r2, [sp, #88]	; 0x58
    2554:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    2556:	0006      	movs	r6, r0
    2558:	000f      	movs	r7, r1
    255a:	9806      	ldr	r0, [sp, #24]
    255c:	9907      	ldr	r1, [sp, #28]
    255e:	47a0      	blx	r4
    2560:	0002      	movs	r2, r0
    2562:	000b      	movs	r3, r1
    2564:	0030      	movs	r0, r6
    2566:	0039      	movs	r1, r7
    2568:	47a8      	blx	r5
    256a:	9a04      	ldr	r2, [sp, #16]
    256c:	9b05      	ldr	r3, [sp, #20]
    256e:	0006      	movs	r6, r0
    2570:	000f      	movs	r7, r1
    2572:	9818      	ldr	r0, [sp, #96]	; 0x60
    2574:	9919      	ldr	r1, [sp, #100]	; 0x64
    2576:	47a0      	blx	r4
    2578:	0002      	movs	r2, r0
    257a:	000b      	movs	r3, r1
    257c:	0030      	movs	r0, r6
    257e:	0039      	movs	r1, r7
    2580:	47a8      	blx	r5
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    2582:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    2584:	9032      	str	r0, [sp, #200]	; 0xc8
    2586:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    2588:	9824      	ldr	r0, [sp, #144]	; 0x90
    258a:	9925      	ldr	r1, [sp, #148]	; 0x94
    258c:	2300      	movs	r3, #0
    258e:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    2590:	4a14      	ldr	r2, [pc, #80]	; (25e4 <computeKalmanBaroOnlyGains+0x364>)
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    2592:	9036      	str	r0, [sp, #216]	; 0xd8
    2594:	9137      	str	r1, [sp, #220]	; 0xdc
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    2596:	982c      	ldr	r0, [sp, #176]	; 0xb0
    2598:	992d      	ldr	r1, [sp, #180]	; 0xb4
    259a:	4b13      	ldr	r3, [pc, #76]	; (25e8 <computeKalmanBaroOnlyGains+0x368>)
    259c:	47a0      	blx	r4
    259e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    25a0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    25a2:	47a8      	blx	r5
    25a4:	4a11      	ldr	r2, [pc, #68]	; (25ec <computeKalmanBaroOnlyGains+0x36c>)
    25a6:	0006      	movs	r6, r0
    25a8:	000f      	movs	r7, r1
    25aa:	982e      	ldr	r0, [sp, #184]	; 0xb8
    25ac:	992f      	ldr	r1, [sp, #188]	; 0xbc
    25ae:	4b10      	ldr	r3, [pc, #64]	; (25f0 <computeKalmanBaroOnlyGains+0x370>)
    25b0:	47a0      	blx	r4
    25b2:	0002      	movs	r2, r0
    25b4:	000b      	movs	r3, r1
    25b6:	0030      	movs	r0, r6
    25b8:	0039      	movs	r1, r7
    25ba:	47a8      	blx	r5
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    25bc:	2200      	movs	r2, #0
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    25be:	9002      	str	r0, [sp, #8]
    25c0:	9103      	str	r1, [sp, #12]
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    25c2:	9834      	ldr	r0, [sp, #208]	; 0xd0
    25c4:	9935      	ldr	r1, [sp, #212]	; 0xd4
    25c6:	2300      	movs	r3, #0
    25c8:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    25ca:	4a06      	ldr	r2, [pc, #24]	; (25e4 <computeKalmanBaroOnlyGains+0x364>)
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    25cc:	9034      	str	r0, [sp, #208]	; 0xd0
    25ce:	9135      	str	r1, [sp, #212]	; 0xd4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    25d0:	9830      	ldr	r0, [sp, #192]	; 0xc0
    25d2:	9931      	ldr	r1, [sp, #196]	; 0xc4
    25d4:	4b04      	ldr	r3, [pc, #16]	; (25e8 <computeKalmanBaroOnlyGains+0x368>)
    25d6:	47a0      	blx	r4
    25d8:	9a00      	ldr	r2, [sp, #0]
    25da:	9b01      	ldr	r3, [sp, #4]
    25dc:	47a8      	blx	r5
    25de:	e017      	b.n	2610 <computeKalmanBaroOnlyGains+0x390>
    25e0:	20000010 	.word	0x20000010
    25e4:	47ae147b 	.word	0x47ae147b
    25e8:	3f747ae1 	.word	0x3f747ae1
    25ec:	eb1c432d 	.word	0xeb1c432d
    25f0:	3eea36e2 	.word	0x3eea36e2
    25f4:	d2f1a9fc 	.word	0xd2f1a9fc
    25f8:	3f50624d 	.word	0x3f50624d
    25fc:	20000310 	.word	0x20000310
    2600:	3ff00000 	.word	0x3ff00000
    2604:	40220000 	.word	0x40220000
    2608:	0000634d 	.word	0x0000634d
    260c:	000054c5 	.word	0x000054c5
    2610:	4ad6      	ldr	r2, [pc, #856]	; (296c <computeKalmanBaroOnlyGains+0x6ec>)
    2612:	0006      	movs	r6, r0
    2614:	000f      	movs	r7, r1
    2616:	9832      	ldr	r0, [sp, #200]	; 0xc8
    2618:	9933      	ldr	r1, [sp, #204]	; 0xcc
    261a:	4bd5      	ldr	r3, [pc, #852]	; (2970 <computeKalmanBaroOnlyGains+0x6f0>)
    261c:	47a0      	blx	r4
    261e:	0002      	movs	r2, r0
    2620:	000b      	movs	r3, r1
    2622:	0030      	movs	r0, r6
    2624:	0039      	movs	r1, r7
    2626:	47a8      	blx	r5
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    2628:	2200      	movs	r2, #0
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    262a:	9004      	str	r0, [sp, #16]
    262c:	9105      	str	r1, [sp, #20]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    262e:	9800      	ldr	r0, [sp, #0]
    2630:	9901      	ldr	r1, [sp, #4]
    2632:	2300      	movs	r3, #0
    2634:	47a0      	blx	r4
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    2636:	4acf      	ldr	r2, [pc, #828]	; (2974 <computeKalmanBaroOnlyGains+0x6f4>)
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    2638:	9038      	str	r0, [sp, #224]	; 0xe0
    263a:	9139      	str	r1, [sp, #228]	; 0xe4
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    263c:	9828      	ldr	r0, [sp, #160]	; 0xa0
    263e:	9929      	ldr	r1, [sp, #164]	; 0xa4
    2640:	4bcd      	ldr	r3, [pc, #820]	; (2978 <computeKalmanBaroOnlyGains+0x6f8>)
    2642:	47a0      	blx	r4
    2644:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2646:	9b25      	ldr	r3, [sp, #148]	; 0x94
    2648:	47a8      	blx	r5
    264a:	4ac8      	ldr	r2, [pc, #800]	; (296c <computeKalmanBaroOnlyGains+0x6ec>)
    264c:	0006      	movs	r6, r0
    264e:	000f      	movs	r7, r1
    2650:	982a      	ldr	r0, [sp, #168]	; 0xa8
    2652:	992b      	ldr	r1, [sp, #172]	; 0xac
    2654:	4bc6      	ldr	r3, [pc, #792]	; (2970 <computeKalmanBaroOnlyGains+0x6f0>)
    2656:	47a0      	blx	r4
    2658:	0002      	movs	r2, r0
    265a:	000b      	movs	r3, r1
    265c:	0030      	movs	r0, r6
    265e:	0039      	movs	r1, r7
    2660:	47a8      	blx	r5
        pestp[0][0] = pestp[0][0] + model_variance;
    2662:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    2664:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    2666:	47a8      	blx	r5
        det = (pestp[0][0]+altitude_variance);
    2668:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    266a:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[0][0] = pestp[0][0] + model_variance;
    266c:	9000      	str	r0, [sp, #0]
    266e:	9101      	str	r1, [sp, #4]
        det = (pestp[0][0]+altitude_variance);
    2670:	47a8      	blx	r5

        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
    2672:	9a00      	ldr	r2, [sp, #0]
    2674:	9b01      	ldr	r3, [sp, #4]
        det = (pestp[0][0]+altitude_variance);
    2676:	901a      	str	r0, [sp, #104]	; 0x68
    2678:	911b      	str	r1, [sp, #108]	; 0x6c
        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
    267a:	9808      	ldr	r0, [sp, #32]
    267c:	9909      	ldr	r1, [sp, #36]	; 0x24
    267e:	47a0      	blx	r4
                         phi[0][1] * pestp[1][0] +
    2680:	9a02      	ldr	r2, [sp, #8]
    2682:	9b03      	ldr	r3, [sp, #12]
        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
    2684:	0006      	movs	r6, r0
    2686:	000f      	movs	r7, r1
                         phi[0][1] * pestp[1][0] +
    2688:	980a      	ldr	r0, [sp, #40]	; 0x28
    268a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    268c:	47a0      	blx	r4
    268e:	0002      	movs	r2, r0
    2690:	000b      	movs	r3, r1
        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
    2692:	0030      	movs	r0, r6
    2694:	0039      	movs	r1, r7
    2696:	47a8      	blx	r5
                         phi[0][2] * pestp[2][0] )/ det;
    2698:	9a04      	ldr	r2, [sp, #16]
    269a:	9b05      	ldr	r3, [sp, #20]
        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
    269c:	0006      	movs	r6, r0
    269e:	000f      	movs	r7, r1
                         phi[0][2] * pestp[2][0] )/ det;
    26a0:	980c      	ldr	r0, [sp, #48]	; 0x30
    26a2:	990d      	ldr	r1, [sp, #52]	; 0x34
    26a4:	47a0      	blx	r4
    26a6:	0002      	movs	r2, r0
    26a8:	000b      	movs	r3, r1
                         phi[0][1] * pestp[1][0] +
    26aa:	0030      	movs	r0, r6
    26ac:	0039      	movs	r1, r7
    26ae:	47a8      	blx	r5
                         phi[0][2] * pestp[2][0] )/ det;
    26b0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    26b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    26b4:	4eb1      	ldr	r6, [pc, #708]	; (297c <computeKalmanBaroOnlyGains+0x6fc>)
    26b6:	47b0      	blx	r6
    26b8:	901c      	str	r0, [sp, #112]	; 0x70
    26ba:	911d      	str	r1, [sp, #116]	; 0x74
        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
    26bc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    26be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    26c0:	49af      	ldr	r1, [pc, #700]	; (2980 <computeKalmanBaroOnlyGains+0x700>)
    26c2:	600a      	str	r2, [r1, #0]
    26c4:	604b      	str	r3, [r1, #4]
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
    26c6:	9a00      	ldr	r2, [sp, #0]
    26c8:	9b01      	ldr	r3, [sp, #4]
    26ca:	980e      	ldr	r0, [sp, #56]	; 0x38
    26cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    26ce:	47a0      	blx	r4
                         phi[1][1] * pestp[1][0] +
    26d0:	9a02      	ldr	r2, [sp, #8]
    26d2:	9b03      	ldr	r3, [sp, #12]
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
    26d4:	0006      	movs	r6, r0
    26d6:	000f      	movs	r7, r1
                         phi[1][1] * pestp[1][0] +
    26d8:	9810      	ldr	r0, [sp, #64]	; 0x40
    26da:	9911      	ldr	r1, [sp, #68]	; 0x44
    26dc:	47a0      	blx	r4
    26de:	0002      	movs	r2, r0
    26e0:	000b      	movs	r3, r1
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
    26e2:	0030      	movs	r0, r6
    26e4:	0039      	movs	r1, r7
    26e6:	47a8      	blx	r5
                         phi[1][2] * pestp[2][0] )/ det;
    26e8:	9a04      	ldr	r2, [sp, #16]
    26ea:	9b05      	ldr	r3, [sp, #20]
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
    26ec:	0006      	movs	r6, r0
    26ee:	000f      	movs	r7, r1
                         phi[1][2] * pestp[2][0] )/ det;
    26f0:	9812      	ldr	r0, [sp, #72]	; 0x48
    26f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    26f4:	47a0      	blx	r4
    26f6:	0002      	movs	r2, r0
    26f8:	000b      	movs	r3, r1
                         phi[1][1] * pestp[1][0] +
    26fa:	0030      	movs	r0, r6
    26fc:	0039      	movs	r1, r7
    26fe:	47a8      	blx	r5
                         phi[1][2] * pestp[2][0] )/ det;
    2700:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    2702:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    2704:	4e9d      	ldr	r6, [pc, #628]	; (297c <computeKalmanBaroOnlyGains+0x6fc>)
    2706:	47b0      	blx	r6
    2708:	9006      	str	r0, [sp, #24]
    270a:	9107      	str	r1, [sp, #28]
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
    270c:	9a06      	ldr	r2, [sp, #24]
    270e:	9b07      	ldr	r3, [sp, #28]
    2710:	499b      	ldr	r1, [pc, #620]	; (2980 <computeKalmanBaroOnlyGains+0x700>)
    2712:	608a      	str	r2, [r1, #8]
    2714:	60cb      	str	r3, [r1, #12]
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
    2716:	9a00      	ldr	r2, [sp, #0]
    2718:	9b01      	ldr	r3, [sp, #4]
    271a:	9814      	ldr	r0, [sp, #80]	; 0x50
    271c:	9915      	ldr	r1, [sp, #84]	; 0x54
    271e:	47a0      	blx	r4
                         phi[2][1] * pestp[1][0] +
    2720:	9a02      	ldr	r2, [sp, #8]
    2722:	9b03      	ldr	r3, [sp, #12]
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
    2724:	0006      	movs	r6, r0
    2726:	000f      	movs	r7, r1
                         phi[2][1] * pestp[1][0] +
    2728:	9816      	ldr	r0, [sp, #88]	; 0x58
    272a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    272c:	47a0      	blx	r4
    272e:	0002      	movs	r2, r0
    2730:	000b      	movs	r3, r1
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
    2732:	0030      	movs	r0, r6
    2734:	0039      	movs	r1, r7
    2736:	47a8      	blx	r5
                         phi[2][2] * pestp[2][0] )/det;
    2738:	9a04      	ldr	r2, [sp, #16]
    273a:	9b05      	ldr	r3, [sp, #20]
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
    273c:	0006      	movs	r6, r0
    273e:	000f      	movs	r7, r1
                         phi[2][2] * pestp[2][0] )/det;
    2740:	9818      	ldr	r0, [sp, #96]	; 0x60
    2742:	9919      	ldr	r1, [sp, #100]	; 0x64
    2744:	47a0      	blx	r4
    2746:	0002      	movs	r2, r0
    2748:	000b      	movs	r3, r1
                         phi[2][1] * pestp[1][0] +
    274a:	0030      	movs	r0, r6
    274c:	0039      	movs	r1, r7
    274e:	47a8      	blx	r5
                         phi[2][2] * pestp[2][0] )/det;
    2750:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    2752:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    2754:	4e89      	ldr	r6, [pc, #548]	; (297c <computeKalmanBaroOnlyGains+0x6fc>)
    2756:	47b0      	blx	r6
    2758:	9024      	str	r0, [sp, #144]	; 0x90
    275a:	9125      	str	r1, [sp, #148]	; 0x94
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
    275c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    275e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    2760:	4987      	ldr	r1, [pc, #540]	; (2980 <computeKalmanBaroOnlyGains+0x700>)

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
    2762:	4e88      	ldr	r6, [pc, #544]	; (2984 <computeKalmanBaroOnlyGains+0x704>)
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
    2764:	610a      	str	r2, [r1, #16]
    2766:	614b      	str	r3, [r1, #20]
        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
    2768:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    276a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    276c:	2000      	movs	r0, #0
    276e:	4986      	ldr	r1, [pc, #536]	; (2988 <computeKalmanBaroOnlyGains+0x708>)
    2770:	47b0      	blx	r6
    2772:	0006      	movs	r6, r0
    2774:	000f      	movs	r7, r1
    2776:	0002      	movs	r2, r0
    2778:	000b      	movs	r3, r1
    277a:	9800      	ldr	r0, [sp, #0]
    277c:	9901      	ldr	r1, [sp, #4]
    277e:	47a0      	blx	r4
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
    2780:	0032      	movs	r2, r6
    2782:	003b      	movs	r3, r7
        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
    2784:	901a      	str	r0, [sp, #104]	; 0x68
    2786:	911b      	str	r1, [sp, #108]	; 0x6c
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
    2788:	9802      	ldr	r0, [sp, #8]
    278a:	9903      	ldr	r1, [sp, #12]
    278c:	47a0      	blx	r4
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
    278e:	0032      	movs	r2, r6
    2790:	003b      	movs	r3, r7
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
    2792:	901c      	str	r0, [sp, #112]	; 0x70
    2794:	911d      	str	r1, [sp, #116]	; 0x74
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
    2796:	9804      	ldr	r0, [sp, #16]
    2798:	9905      	ldr	r1, [sp, #20]
    279a:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    279c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    279e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
    27a0:	901e      	str	r0, [sp, #120]	; 0x78
    27a2:	911f      	str	r1, [sp, #124]	; 0x7c
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    27a4:	9828      	ldr	r0, [sp, #160]	; 0xa0
    27a6:	9929      	ldr	r1, [sp, #164]	; 0xa4
    27a8:	47a8      	blx	r5
    27aa:	4a72      	ldr	r2, [pc, #456]	; (2974 <computeKalmanBaroOnlyGains+0x6f4>)
    27ac:	0006      	movs	r6, r0
    27ae:	000f      	movs	r7, r1
    27b0:	982a      	ldr	r0, [sp, #168]	; 0xa8
    27b2:	992b      	ldr	r1, [sp, #172]	; 0xac
    27b4:	4b70      	ldr	r3, [pc, #448]	; (2978 <computeKalmanBaroOnlyGains+0x6f8>)
    27b6:	47a0      	blx	r4
    27b8:	0002      	movs	r2, r0
    27ba:	000b      	movs	r3, r1
    27bc:	0030      	movs	r0, r6
    27be:	0039      	movs	r1, r7
    27c0:	47a8      	blx	r5
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
    27c2:	9a06      	ldr	r2, [sp, #24]
    27c4:	9b07      	ldr	r3, [sp, #28]
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    27c6:	0006      	movs	r6, r0
    27c8:	000f      	movs	r7, r1
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
    27ca:	9800      	ldr	r0, [sp, #0]
    27cc:	9901      	ldr	r1, [sp, #4]
    27ce:	47a0      	blx	r4
    27d0:	0002      	movs	r2, r0
    27d2:	000b      	movs	r3, r1
    27d4:	0030      	movs	r0, r6
    27d6:	0039      	movs	r1, r7
    27d8:	4e6a      	ldr	r6, [pc, #424]	; (2984 <computeKalmanBaroOnlyGains+0x704>)
    27da:	47b0      	blx	r6
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    27dc:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    27de:	9b35      	ldr	r3, [sp, #212]	; 0xd4
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
    27e0:	9020      	str	r0, [sp, #128]	; 0x80
    27e2:	9121      	str	r1, [sp, #132]	; 0x84
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    27e4:	982c      	ldr	r0, [sp, #176]	; 0xb0
    27e6:	992d      	ldr	r1, [sp, #180]	; 0xb4
    27e8:	47a8      	blx	r5
    27ea:	4a62      	ldr	r2, [pc, #392]	; (2974 <computeKalmanBaroOnlyGains+0x6f4>)
    27ec:	0006      	movs	r6, r0
    27ee:	000f      	movs	r7, r1
    27f0:	982e      	ldr	r0, [sp, #184]	; 0xb8
    27f2:	992f      	ldr	r1, [sp, #188]	; 0xbc
    27f4:	4b60      	ldr	r3, [pc, #384]	; (2978 <computeKalmanBaroOnlyGains+0x6f8>)
    27f6:	47a0      	blx	r4
    27f8:	0002      	movs	r2, r0
    27fa:	000b      	movs	r3, r1
    27fc:	0030      	movs	r0, r6
    27fe:	0039      	movs	r1, r7
    2800:	47a8      	blx	r5
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
    2802:	9a06      	ldr	r2, [sp, #24]
    2804:	9b07      	ldr	r3, [sp, #28]
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    2806:	0006      	movs	r6, r0
    2808:	000f      	movs	r7, r1
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
    280a:	9802      	ldr	r0, [sp, #8]
    280c:	9903      	ldr	r1, [sp, #12]
    280e:	47a0      	blx	r4
    2810:	0002      	movs	r2, r0
    2812:	000b      	movs	r3, r1
    2814:	0030      	movs	r0, r6
    2816:	0039      	movs	r1, r7
    2818:	4e5a      	ldr	r6, [pc, #360]	; (2984 <computeKalmanBaroOnlyGains+0x704>)
    281a:	47b0      	blx	r6
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    281c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    281e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
    2820:	9022      	str	r0, [sp, #136]	; 0x88
    2822:	9123      	str	r1, [sp, #140]	; 0x8c
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    2824:	9830      	ldr	r0, [sp, #192]	; 0xc0
    2826:	9931      	ldr	r1, [sp, #196]	; 0xc4
    2828:	47a8      	blx	r5
    282a:	4a52      	ldr	r2, [pc, #328]	; (2974 <computeKalmanBaroOnlyGains+0x6f4>)
    282c:	0006      	movs	r6, r0
    282e:	000f      	movs	r7, r1
    2830:	9832      	ldr	r0, [sp, #200]	; 0xc8
    2832:	9933      	ldr	r1, [sp, #204]	; 0xcc
    2834:	4b50      	ldr	r3, [pc, #320]	; (2978 <computeKalmanBaroOnlyGains+0x6f8>)
    2836:	47a0      	blx	r4
    2838:	0002      	movs	r2, r0
    283a:	000b      	movs	r3, r1
    283c:	0030      	movs	r0, r6
    283e:	0039      	movs	r1, r7
    2840:	47a8      	blx	r5
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
    2842:	9a06      	ldr	r2, [sp, #24]
    2844:	9b07      	ldr	r3, [sp, #28]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    2846:	0006      	movs	r6, r0
    2848:	000f      	movs	r7, r1
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
    284a:	9804      	ldr	r0, [sp, #16]
    284c:	9905      	ldr	r1, [sp, #20]
    284e:	47a0      	blx	r4
    2850:	0002      	movs	r2, r0
    2852:	000b      	movs	r3, r1
    2854:	0030      	movs	r0, r6
    2856:	0039      	movs	r1, r7
    2858:	4e4a      	ldr	r6, [pc, #296]	; (2984 <computeKalmanBaroOnlyGains+0x704>)
    285a:	47b0      	blx	r6
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    285c:	2200      	movs	r2, #0
    285e:	2300      	movs	r3, #0
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
    2860:	9006      	str	r0, [sp, #24]
    2862:	9107      	str	r1, [sp, #28]
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    2864:	9828      	ldr	r0, [sp, #160]	; 0xa0
    2866:	9929      	ldr	r1, [sp, #164]	; 0xa4
    2868:	47a0      	blx	r4
    286a:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    286c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    286e:	47a8      	blx	r5
    2870:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    2872:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    2874:	47a8      	blx	r5
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
    2876:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2878:	9b25      	ldr	r3, [sp, #148]	; 0x94
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    287a:	0006      	movs	r6, r0
    287c:	000f      	movs	r7, r1
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
    287e:	9800      	ldr	r0, [sp, #0]
    2880:	9901      	ldr	r1, [sp, #4]
    2882:	47a0      	blx	r4
    2884:	0002      	movs	r2, r0
    2886:	000b      	movs	r3, r1
    2888:	0030      	movs	r0, r6
    288a:	0039      	movs	r1, r7
    288c:	4e3d      	ldr	r6, [pc, #244]	; (2984 <computeKalmanBaroOnlyGains+0x704>)
    288e:	47b0      	blx	r6
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    2890:	2200      	movs	r2, #0
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
    2892:	9000      	str	r0, [sp, #0]
    2894:	9101      	str	r1, [sp, #4]
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    2896:	982c      	ldr	r0, [sp, #176]	; 0xb0
    2898:	992d      	ldr	r1, [sp, #180]	; 0xb4
    289a:	2300      	movs	r3, #0
    289c:	47a0      	blx	r4
    289e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    28a0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    28a2:	47a8      	blx	r5
    28a4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    28a6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    28a8:	47a8      	blx	r5
        pest[2][1] = pestp[1][2] - baro_kgain[2] * pestp[1][0];
    28aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
    28ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    28ae:	0006      	movs	r6, r0
    28b0:	000f      	movs	r7, r1
        pest[2][1] = pestp[1][2] - baro_kgain[2] * pestp[1][0];
    28b2:	9802      	ldr	r0, [sp, #8]
    28b4:	9903      	ldr	r1, [sp, #12]
    28b6:	47a0      	blx	r4
    28b8:	0002      	movs	r2, r0
    28ba:	000b      	movs	r3, r1
    28bc:	0030      	movs	r0, r6
    28be:	0039      	movs	r1, r7
    28c0:	4e30      	ldr	r6, [pc, #192]	; (2984 <computeKalmanBaroOnlyGains+0x704>)
    28c2:	47b0      	blx	r6
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];
    28c4:	2200      	movs	r2, #0
        pest[2][1] = pestp[1][2] - baro_kgain[2] * pestp[1][0];
    28c6:	9002      	str	r0, [sp, #8]
    28c8:	9103      	str	r1, [sp, #12]
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];
    28ca:	9830      	ldr	r0, [sp, #192]	; 0xc0
    28cc:	9931      	ldr	r1, [sp, #196]	; 0xc4
    28ce:	2300      	movs	r3, #0
    28d0:	47a0      	blx	r4
    28d2:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    28d4:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    28d6:	47a8      	blx	r5
    28d8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    28da:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    28dc:	47a8      	blx	r5
        pest[2][2] = pestp[2][2] - baro_kgain[2] * pestp[2][0];
    28de:	9a24      	ldr	r2, [sp, #144]	; 0x90
    28e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];
    28e2:	0006      	movs	r6, r0
    28e4:	000f      	movs	r7, r1
        pest[2][2] = pestp[2][2] - baro_kgain[2] * pestp[2][0];
    28e6:	9804      	ldr	r0, [sp, #16]
    28e8:	9905      	ldr	r1, [sp, #20]
    28ea:	47a0      	blx	r4
    28ec:	4c25      	ldr	r4, [pc, #148]	; (2984 <computeKalmanBaroOnlyGains+0x704>)
    28ee:	000b      	movs	r3, r1
    28f0:	0002      	movs	r2, r0
    28f2:	0039      	movs	r1, r7
    28f4:	0030      	movs	r0, r6
    28f6:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    28f8:	2400      	movs	r4, #0
    28fa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
        pest[2][2] = pestp[2][2] - baro_kgain[2] * pestp[2][0];
    28fc:	9004      	str	r0, [sp, #16]
    28fe:	9105      	str	r1, [sp, #20]
        k++;
    2900:	3301      	adds	r3, #1
    2902:	9327      	str	r3, [sp, #156]	; 0x9c
        for( i = 0; i <= 2; i++) {
            if( (baro_kgain[i] - lastkgain[i])/lastkgain[i] > 0.00001)
    2904:	4b1e      	ldr	r3, [pc, #120]	; (2980 <computeKalmanBaroOnlyGains+0x700>)
        notdone = 0;
    2906:	9424      	str	r4, [sp, #144]	; 0x90
            if( (baro_kgain[i] - lastkgain[i])/lastkgain[i] > 0.00001)
    2908:	932c      	str	r3, [sp, #176]	; 0xb0
    290a:	4b1e      	ldr	r3, [pc, #120]	; (2984 <computeKalmanBaroOnlyGains+0x704>)
    290c:	932e      	str	r3, [sp, #184]	; 0xb8
    290e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    2910:	18e3      	adds	r3, r4, r3
    2912:	681a      	ldr	r2, [r3, #0]
    2914:	685b      	ldr	r3, [r3, #4]
    2916:	9228      	str	r2, [sp, #160]	; 0xa0
    2918:	9329      	str	r3, [sp, #164]	; 0xa4
    291a:	9828      	ldr	r0, [sp, #160]	; 0xa0
    291c:	9929      	ldr	r1, [sp, #164]	; 0xa4
    291e:	ab3e      	add	r3, sp, #248	; 0xf8
    2920:	18e5      	adds	r5, r4, r3
    2922:	682e      	ldr	r6, [r5, #0]
    2924:	686f      	ldr	r7, [r5, #4]
    2926:	952a      	str	r5, [sp, #168]	; 0xa8
    2928:	0032      	movs	r2, r6
    292a:	003b      	movs	r3, r7
    292c:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
    292e:	47a8      	blx	r5
    2930:	0032      	movs	r2, r6
    2932:	003b      	movs	r3, r7
    2934:	4e11      	ldr	r6, [pc, #68]	; (297c <computeKalmanBaroOnlyGains+0x6fc>)
    2936:	47b0      	blx	r6
    2938:	4b14      	ldr	r3, [pc, #80]	; (298c <computeKalmanBaroOnlyGains+0x70c>)
    293a:	4a15      	ldr	r2, [pc, #84]	; (2990 <computeKalmanBaroOnlyGains+0x710>)
    293c:	4e15      	ldr	r6, [pc, #84]	; (2994 <computeKalmanBaroOnlyGains+0x714>)
    293e:	47b0      	blx	r6
                notdone++;
    2940:	1e43      	subs	r3, r0, #1
    2942:	4198      	sbcs	r0, r3
    2944:	9b24      	ldr	r3, [sp, #144]	; 0x90
            lastkgain[i] = baro_kgain[i];
    2946:	992a      	ldr	r1, [sp, #168]	; 0xa8
                notdone++;
    2948:	181b      	adds	r3, r3, r0
    294a:	3408      	adds	r4, #8
    294c:	9324      	str	r3, [sp, #144]	; 0x90
            lastkgain[i] = baro_kgain[i];
    294e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    2950:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    2952:	600a      	str	r2, [r1, #0]
    2954:	604b      	str	r3, [r1, #4]
        for( i = 0; i <= 2; i++) {
    2956:	2c18      	cmp	r4, #24
    2958:	d1d9      	bne.n	290e <computeKalmanBaroOnlyGains+0x68e>
        }
        if( notdone || k < 100)
    295a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    295c:	2b00      	cmp	r3, #0
    295e:	d000      	beq.n	2962 <computeKalmanBaroOnlyGains+0x6e2>
    2960:	e4f8      	b.n	2354 <computeKalmanBaroOnlyGains+0xd4>
    2962:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    2964:	2b63      	cmp	r3, #99	; 0x63
    2966:	dc00      	bgt.n	296a <computeKalmanBaroOnlyGains+0x6ea>
    2968:	e4f4      	b.n	2354 <computeKalmanBaroOnlyGains+0xd4>
    296a:	e015      	b.n	2998 <computeKalmanBaroOnlyGains+0x718>
    296c:	eb1c432d 	.word	0xeb1c432d
    2970:	3eea36e2 	.word	0x3eea36e2
    2974:	47ae147b 	.word	0x47ae147b
    2978:	3f747ae1 	.word	0x3f747ae1
    297c:	00005ae5 	.word	0x00005ae5
    2980:	20000310 	.word	0x20000310
    2984:	0000684d 	.word	0x0000684d
    2988:	3ff00000 	.word	0x3ff00000
    298c:	3ee4f8b5 	.word	0x3ee4f8b5
    2990:	88e368f1 	.word	0x88e368f1
    2994:	0000518d 	.word	0x0000518d
            continue;
        else
            break;
    }
}
    2998:	b045      	add	sp, #276	; 0x114
    299a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000299c <KalmanBaroUpdate>:

void KalmanBaroUpdate(double alt_inovation) {
    299c:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    299e:	4b55      	ldr	r3, [pc, #340]	; (2af4 <KalmanBaroUpdate+0x158>)
void KalmanBaroUpdate(double alt_inovation) {
    29a0:	b08d      	sub	sp, #52	; 0x34
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    29a2:	685c      	ldr	r4, [r3, #4]
    29a4:	681b      	ldr	r3, [r3, #0]
    29a6:	9300      	str	r3, [sp, #0]
    29a8:	9401      	str	r4, [sp, #4]
    29aa:	4b53      	ldr	r3, [pc, #332]	; (2af8 <KalmanBaroUpdate+0x15c>)
    29ac:	4d53      	ldr	r5, [pc, #332]	; (2afc <KalmanBaroUpdate+0x160>)
    29ae:	685c      	ldr	r4, [r3, #4]
    29b0:	681b      	ldr	r3, [r3, #0]
    29b2:	9302      	str	r3, [sp, #8]
    29b4:	9403      	str	r4, [sp, #12]
    29b6:	4b52      	ldr	r3, [pc, #328]	; (2b00 <KalmanBaroUpdate+0x164>)
void KalmanBaroUpdate(double alt_inovation) {
    29b8:	9006      	str	r0, [sp, #24]
    29ba:	9107      	str	r1, [sp, #28]
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    29bc:	685c      	ldr	r4, [r3, #4]
    29be:	681b      	ldr	r3, [r3, #0]
    29c0:	9800      	ldr	r0, [sp, #0]
    29c2:	9901      	ldr	r1, [sp, #4]
    29c4:	9304      	str	r3, [sp, #16]
    29c6:	9405      	str	r4, [sp, #20]
    29c8:	4c4e      	ldr	r4, [pc, #312]	; (2b04 <KalmanBaroUpdate+0x168>)
    29ca:	6822      	ldr	r2, [r4, #0]
    29cc:	6863      	ldr	r3, [r4, #4]
    29ce:	47a8      	blx	r5
    29d0:	68a2      	ldr	r2, [r4, #8]
    29d2:	68e3      	ldr	r3, [r4, #12]
    29d4:	0006      	movs	r6, r0
    29d6:	000f      	movs	r7, r1
    29d8:	9802      	ldr	r0, [sp, #8]
    29da:	9903      	ldr	r1, [sp, #12]
    29dc:	47a8      	blx	r5
    29de:	0002      	movs	r2, r0
    29e0:	000b      	movs	r3, r1
    29e2:	0030      	movs	r0, r6
    29e4:	0039      	movs	r1, r7
    29e6:	4e48      	ldr	r6, [pc, #288]	; (2b08 <KalmanBaroUpdate+0x16c>)
    29e8:	47b0      	blx	r6
    29ea:	6922      	ldr	r2, [r4, #16]
    29ec:	6963      	ldr	r3, [r4, #20]
    29ee:	0006      	movs	r6, r0
    29f0:	000f      	movs	r7, r1
    29f2:	9804      	ldr	r0, [sp, #16]
    29f4:	9905      	ldr	r1, [sp, #20]
    29f6:	47a8      	blx	r5
    29f8:	0002      	movs	r2, r0
    29fa:	000b      	movs	r3, r1
    29fc:	0030      	movs	r0, r6
    29fe:	0039      	movs	r1, r7
    2a00:	4e41      	ldr	r6, [pc, #260]	; (2b08 <KalmanBaroUpdate+0x16c>)
    2a02:	47b0      	blx	r6
    2a04:	9008      	str	r0, [sp, #32]
    2a06:	9109      	str	r1, [sp, #36]	; 0x24
    2a08:	9a08      	ldr	r2, [sp, #32]
    2a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2a0c:	493f      	ldr	r1, [pc, #252]	; (2b0c <KalmanBaroUpdate+0x170>)
    2a0e:	600a      	str	r2, [r1, #0]
    2a10:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    2a12:	69a2      	ldr	r2, [r4, #24]
    2a14:	69e3      	ldr	r3, [r4, #28]
    2a16:	9800      	ldr	r0, [sp, #0]
    2a18:	9901      	ldr	r1, [sp, #4]
    2a1a:	47a8      	blx	r5
    2a1c:	6a22      	ldr	r2, [r4, #32]
    2a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2a20:	0006      	movs	r6, r0
    2a22:	000f      	movs	r7, r1
    2a24:	9802      	ldr	r0, [sp, #8]
    2a26:	9903      	ldr	r1, [sp, #12]
    2a28:	47a8      	blx	r5
    2a2a:	0002      	movs	r2, r0
    2a2c:	000b      	movs	r3, r1
    2a2e:	0030      	movs	r0, r6
    2a30:	0039      	movs	r1, r7
    2a32:	4e35      	ldr	r6, [pc, #212]	; (2b08 <KalmanBaroUpdate+0x16c>)
    2a34:	47b0      	blx	r6
    2a36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2a38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2a3a:	0006      	movs	r6, r0
    2a3c:	000f      	movs	r7, r1
    2a3e:	9804      	ldr	r0, [sp, #16]
    2a40:	9905      	ldr	r1, [sp, #20]
    2a42:	47a8      	blx	r5
    2a44:	0002      	movs	r2, r0
    2a46:	000b      	movs	r3, r1
    2a48:	0030      	movs	r0, r6
    2a4a:	0039      	movs	r1, r7
    2a4c:	4e2e      	ldr	r6, [pc, #184]	; (2b08 <KalmanBaroUpdate+0x16c>)
    2a4e:	47b0      	blx	r6
    2a50:	900a      	str	r0, [sp, #40]	; 0x28
    2a52:	910b      	str	r1, [sp, #44]	; 0x2c
    2a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2a58:	492c      	ldr	r1, [pc, #176]	; (2b0c <KalmanBaroUpdate+0x170>)
    2a5a:	608a      	str	r2, [r1, #8]
    2a5c:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    2a5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2a60:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2a62:	9800      	ldr	r0, [sp, #0]
    2a64:	9901      	ldr	r1, [sp, #4]
    2a66:	47a8      	blx	r5
    2a68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2a6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2a6c:	0006      	movs	r6, r0
    2a6e:	000f      	movs	r7, r1
    2a70:	9802      	ldr	r0, [sp, #8]
    2a72:	9903      	ldr	r1, [sp, #12]
    2a74:	47a8      	blx	r5
    2a76:	0002      	movs	r2, r0
    2a78:	000b      	movs	r3, r1
    2a7a:	0030      	movs	r0, r6
    2a7c:	0039      	movs	r1, r7
    2a7e:	4e22      	ldr	r6, [pc, #136]	; (2b08 <KalmanBaroUpdate+0x16c>)
    2a80:	47b0      	blx	r6
    2a82:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2a84:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2a86:	0006      	movs	r6, r0
    2a88:	000f      	movs	r7, r1
    2a8a:	9804      	ldr	r0, [sp, #16]
    2a8c:	9905      	ldr	r1, [sp, #20]
    2a8e:	47a8      	blx	r5
    2a90:	4c1d      	ldr	r4, [pc, #116]	; (2b08 <KalmanBaroUpdate+0x16c>)
    2a92:	0002      	movs	r2, r0
    2a94:	000b      	movs	r3, r1
    2a96:	0030      	movs	r0, r6
    2a98:	0039      	movs	r1, r7
    2a9a:	47a0      	blx	r4
    2a9c:	0006      	movs	r6, r0
    2a9e:	000f      	movs	r7, r1

    /* Update state */
    altitude = estp[0] + baro_kgain[0] * alt_inovation;
    2aa0:	9806      	ldr	r0, [sp, #24]
    2aa2:	9907      	ldr	r1, [sp, #28]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    2aa4:	4b19      	ldr	r3, [pc, #100]	; (2b0c <KalmanBaroUpdate+0x170>)
    2aa6:	611e      	str	r6, [r3, #16]
    2aa8:	615f      	str	r7, [r3, #20]
    altitude = estp[0] + baro_kgain[0] * alt_inovation;
    2aaa:	4b19      	ldr	r3, [pc, #100]	; (2b10 <KalmanBaroUpdate+0x174>)
    2aac:	681a      	ldr	r2, [r3, #0]
    2aae:	685b      	ldr	r3, [r3, #4]
    2ab0:	47a8      	blx	r5
    2ab2:	9a08      	ldr	r2, [sp, #32]
    2ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2ab6:	47a0      	blx	r4
    2ab8:	4b0e      	ldr	r3, [pc, #56]	; (2af4 <KalmanBaroUpdate+0x158>)
    2aba:	6018      	str	r0, [r3, #0]
    2abc:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + baro_kgain[1] * alt_inovation;
    2abe:	9806      	ldr	r0, [sp, #24]
    2ac0:	9907      	ldr	r1, [sp, #28]
    2ac2:	4b13      	ldr	r3, [pc, #76]	; (2b10 <KalmanBaroUpdate+0x174>)
    2ac4:	689a      	ldr	r2, [r3, #8]
    2ac6:	68db      	ldr	r3, [r3, #12]
    2ac8:	47a8      	blx	r5
    2aca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2acc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2ace:	47a0      	blx	r4
    2ad0:	4b09      	ldr	r3, [pc, #36]	; (2af8 <KalmanBaroUpdate+0x15c>)
    2ad2:	6018      	str	r0, [r3, #0]
    2ad4:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + baro_kgain[2] * alt_inovation;
    2ad6:	9806      	ldr	r0, [sp, #24]
    2ad8:	9907      	ldr	r1, [sp, #28]
    2ada:	4b0d      	ldr	r3, [pc, #52]	; (2b10 <KalmanBaroUpdate+0x174>)
    2adc:	691a      	ldr	r2, [r3, #16]
    2ade:	695b      	ldr	r3, [r3, #20]
    2ae0:	47a8      	blx	r5
    2ae2:	003b      	movs	r3, r7
    2ae4:	0032      	movs	r2, r6
    2ae6:	47a0      	blx	r4
    2ae8:	4b05      	ldr	r3, [pc, #20]	; (2b00 <KalmanBaroUpdate+0x164>)
    2aea:	6018      	str	r0, [r3, #0]
    2aec:	6059      	str	r1, [r3, #4]

}
    2aee:	b00d      	add	sp, #52	; 0x34
    2af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2af2:	46c0      	nop			; (mov r8, r8)
    2af4:	20000328 	.word	0x20000328
    2af8:	20000308 	.word	0x20000308
    2afc:	0000634d 	.word	0x0000634d
    2b00:	200002e8 	.word	0x200002e8
    2b04:	20000010 	.word	0x20000010
    2b08:	000054c5 	.word	0x000054c5
    2b0c:	20000330 	.word	0x20000330
    2b10:	20000310 	.word	0x20000310

00002b14 <KalmanBothUpdate>:

void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    2b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b16:	b08f      	sub	sp, #60	; 0x3c
    2b18:	9208      	str	r2, [sp, #32]
    2b1a:	9309      	str	r3, [sp, #36]	; 0x24

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    2b1c:	4b68      	ldr	r3, [pc, #416]	; (2cc0 <KalmanBothUpdate+0x1ac>)
    2b1e:	4d69      	ldr	r5, [pc, #420]	; (2cc4 <KalmanBothUpdate+0x1b0>)
    2b20:	685c      	ldr	r4, [r3, #4]
    2b22:	681b      	ldr	r3, [r3, #0]
    2b24:	9300      	str	r3, [sp, #0]
    2b26:	9401      	str	r4, [sp, #4]
    2b28:	4b67      	ldr	r3, [pc, #412]	; (2cc8 <KalmanBothUpdate+0x1b4>)
void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    2b2a:	9006      	str	r0, [sp, #24]
    2b2c:	9107      	str	r1, [sp, #28]
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    2b2e:	685c      	ldr	r4, [r3, #4]
    2b30:	681b      	ldr	r3, [r3, #0]
    2b32:	9800      	ldr	r0, [sp, #0]
    2b34:	9901      	ldr	r1, [sp, #4]
    2b36:	9302      	str	r3, [sp, #8]
    2b38:	9403      	str	r4, [sp, #12]
    2b3a:	4b64      	ldr	r3, [pc, #400]	; (2ccc <KalmanBothUpdate+0x1b8>)
    2b3c:	685c      	ldr	r4, [r3, #4]
    2b3e:	681b      	ldr	r3, [r3, #0]
    2b40:	9304      	str	r3, [sp, #16]
    2b42:	9405      	str	r4, [sp, #20]
    2b44:	4c62      	ldr	r4, [pc, #392]	; (2cd0 <KalmanBothUpdate+0x1bc>)
    2b46:	6822      	ldr	r2, [r4, #0]
    2b48:	6863      	ldr	r3, [r4, #4]
    2b4a:	47a8      	blx	r5
    2b4c:	68a2      	ldr	r2, [r4, #8]
    2b4e:	68e3      	ldr	r3, [r4, #12]
    2b50:	0006      	movs	r6, r0
    2b52:	000f      	movs	r7, r1
    2b54:	9802      	ldr	r0, [sp, #8]
    2b56:	9903      	ldr	r1, [sp, #12]
    2b58:	47a8      	blx	r5
    2b5a:	0002      	movs	r2, r0
    2b5c:	000b      	movs	r3, r1
    2b5e:	0030      	movs	r0, r6
    2b60:	0039      	movs	r1, r7
    2b62:	4e5c      	ldr	r6, [pc, #368]	; (2cd4 <KalmanBothUpdate+0x1c0>)
    2b64:	47b0      	blx	r6
    2b66:	6922      	ldr	r2, [r4, #16]
    2b68:	6963      	ldr	r3, [r4, #20]
    2b6a:	0006      	movs	r6, r0
    2b6c:	000f      	movs	r7, r1
    2b6e:	9804      	ldr	r0, [sp, #16]
    2b70:	9905      	ldr	r1, [sp, #20]
    2b72:	47a8      	blx	r5
    2b74:	0002      	movs	r2, r0
    2b76:	000b      	movs	r3, r1
    2b78:	0030      	movs	r0, r6
    2b7a:	0039      	movs	r1, r7
    2b7c:	4e55      	ldr	r6, [pc, #340]	; (2cd4 <KalmanBothUpdate+0x1c0>)
    2b7e:	47b0      	blx	r6
    2b80:	900a      	str	r0, [sp, #40]	; 0x28
    2b82:	910b      	str	r1, [sp, #44]	; 0x2c
    2b84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2b88:	4953      	ldr	r1, [pc, #332]	; (2cd8 <KalmanBothUpdate+0x1c4>)
    2b8a:	600a      	str	r2, [r1, #0]
    2b8c:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    2b8e:	69a2      	ldr	r2, [r4, #24]
    2b90:	69e3      	ldr	r3, [r4, #28]
    2b92:	9800      	ldr	r0, [sp, #0]
    2b94:	9901      	ldr	r1, [sp, #4]
    2b96:	47a8      	blx	r5
    2b98:	6a22      	ldr	r2, [r4, #32]
    2b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2b9c:	0006      	movs	r6, r0
    2b9e:	000f      	movs	r7, r1
    2ba0:	9802      	ldr	r0, [sp, #8]
    2ba2:	9903      	ldr	r1, [sp, #12]
    2ba4:	47a8      	blx	r5
    2ba6:	0002      	movs	r2, r0
    2ba8:	000b      	movs	r3, r1
    2baa:	0030      	movs	r0, r6
    2bac:	0039      	movs	r1, r7
    2bae:	4e49      	ldr	r6, [pc, #292]	; (2cd4 <KalmanBothUpdate+0x1c0>)
    2bb0:	47b0      	blx	r6
    2bb2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2bb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2bb6:	0006      	movs	r6, r0
    2bb8:	000f      	movs	r7, r1
    2bba:	9804      	ldr	r0, [sp, #16]
    2bbc:	9905      	ldr	r1, [sp, #20]
    2bbe:	47a8      	blx	r5
    2bc0:	0002      	movs	r2, r0
    2bc2:	000b      	movs	r3, r1
    2bc4:	0030      	movs	r0, r6
    2bc6:	0039      	movs	r1, r7
    2bc8:	4e42      	ldr	r6, [pc, #264]	; (2cd4 <KalmanBothUpdate+0x1c0>)
    2bca:	47b0      	blx	r6
    2bcc:	900c      	str	r0, [sp, #48]	; 0x30
    2bce:	910d      	str	r1, [sp, #52]	; 0x34
    2bd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2bd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2bd4:	4940      	ldr	r1, [pc, #256]	; (2cd8 <KalmanBothUpdate+0x1c4>)
    2bd6:	608a      	str	r2, [r1, #8]
    2bd8:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    2bda:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2bdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2bde:	9800      	ldr	r0, [sp, #0]
    2be0:	9901      	ldr	r1, [sp, #4]
    2be2:	47a8      	blx	r5
    2be4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2be6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2be8:	0006      	movs	r6, r0
    2bea:	000f      	movs	r7, r1
    2bec:	9802      	ldr	r0, [sp, #8]
    2bee:	9903      	ldr	r1, [sp, #12]
    2bf0:	47a8      	blx	r5
    2bf2:	0002      	movs	r2, r0
    2bf4:	000b      	movs	r3, r1
    2bf6:	0030      	movs	r0, r6
    2bf8:	0039      	movs	r1, r7
    2bfa:	4e36      	ldr	r6, [pc, #216]	; (2cd4 <KalmanBothUpdate+0x1c0>)
    2bfc:	47b0      	blx	r6
    2bfe:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2c00:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2c02:	0006      	movs	r6, r0
    2c04:	000f      	movs	r7, r1
    2c06:	9804      	ldr	r0, [sp, #16]
    2c08:	9905      	ldr	r1, [sp, #20]
    2c0a:	47a8      	blx	r5
    2c0c:	4c31      	ldr	r4, [pc, #196]	; (2cd4 <KalmanBothUpdate+0x1c0>)
    2c0e:	0002      	movs	r2, r0
    2c10:	000b      	movs	r3, r1
    2c12:	0030      	movs	r0, r6
    2c14:	0039      	movs	r1, r7
    2c16:	47a0      	blx	r4
    2c18:	0003      	movs	r3, r0
    2c1a:	000c      	movs	r4, r1
    2c1c:	4a2e      	ldr	r2, [pc, #184]	; (2cd8 <KalmanBothUpdate+0x1c4>)
    2c1e:	9000      	str	r0, [sp, #0]
    2c20:	9101      	str	r1, [sp, #4]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    2c22:	9806      	ldr	r0, [sp, #24]
    2c24:	9907      	ldr	r1, [sp, #28]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    2c26:	6113      	str	r3, [r2, #16]
    2c28:	6154      	str	r4, [r2, #20]
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    2c2a:	4c2c      	ldr	r4, [pc, #176]	; (2cdc <KalmanBothUpdate+0x1c8>)
    2c2c:	6822      	ldr	r2, [r4, #0]
    2c2e:	6863      	ldr	r3, [r4, #4]
    2c30:	47a8      	blx	r5
    2c32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2c36:	4e27      	ldr	r6, [pc, #156]	; (2cd4 <KalmanBothUpdate+0x1c0>)
    2c38:	47b0      	blx	r6
    2c3a:	68a2      	ldr	r2, [r4, #8]
    2c3c:	68e3      	ldr	r3, [r4, #12]
    2c3e:	0006      	movs	r6, r0
    2c40:	000f      	movs	r7, r1
    2c42:	9808      	ldr	r0, [sp, #32]
    2c44:	9909      	ldr	r1, [sp, #36]	; 0x24
    2c46:	47a8      	blx	r5
    2c48:	0002      	movs	r2, r0
    2c4a:	000b      	movs	r3, r1
    2c4c:	0030      	movs	r0, r6
    2c4e:	0039      	movs	r1, r7
    2c50:	4e20      	ldr	r6, [pc, #128]	; (2cd4 <KalmanBothUpdate+0x1c0>)
    2c52:	47b0      	blx	r6
    2c54:	4b1a      	ldr	r3, [pc, #104]	; (2cc0 <KalmanBothUpdate+0x1ac>)
    2c56:	6018      	str	r0, [r3, #0]
    2c58:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    2c5a:	6922      	ldr	r2, [r4, #16]
    2c5c:	6963      	ldr	r3, [r4, #20]
    2c5e:	9806      	ldr	r0, [sp, #24]
    2c60:	9907      	ldr	r1, [sp, #28]
    2c62:	47a8      	blx	r5
    2c64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2c68:	47b0      	blx	r6
    2c6a:	69a2      	ldr	r2, [r4, #24]
    2c6c:	69e3      	ldr	r3, [r4, #28]
    2c6e:	0006      	movs	r6, r0
    2c70:	000f      	movs	r7, r1
    2c72:	9808      	ldr	r0, [sp, #32]
    2c74:	9909      	ldr	r1, [sp, #36]	; 0x24
    2c76:	47a8      	blx	r5
    2c78:	0002      	movs	r2, r0
    2c7a:	000b      	movs	r3, r1
    2c7c:	0030      	movs	r0, r6
    2c7e:	0039      	movs	r1, r7
    2c80:	4e14      	ldr	r6, [pc, #80]	; (2cd4 <KalmanBothUpdate+0x1c0>)
    2c82:	47b0      	blx	r6
    2c84:	4b10      	ldr	r3, [pc, #64]	; (2cc8 <KalmanBothUpdate+0x1b4>)
    2c86:	6018      	str	r0, [r3, #0]
    2c88:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    2c8a:	6a22      	ldr	r2, [r4, #32]
    2c8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2c8e:	9806      	ldr	r0, [sp, #24]
    2c90:	9907      	ldr	r1, [sp, #28]
    2c92:	47a8      	blx	r5
    2c94:	9a00      	ldr	r2, [sp, #0]
    2c96:	9b01      	ldr	r3, [sp, #4]
    2c98:	47b0      	blx	r6
    2c9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2c9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2c9e:	0006      	movs	r6, r0
    2ca0:	000f      	movs	r7, r1
    2ca2:	9808      	ldr	r0, [sp, #32]
    2ca4:	9909      	ldr	r1, [sp, #36]	; 0x24
    2ca6:	47a8      	blx	r5
    2ca8:	4c0a      	ldr	r4, [pc, #40]	; (2cd4 <KalmanBothUpdate+0x1c0>)
    2caa:	0002      	movs	r2, r0
    2cac:	000b      	movs	r3, r1
    2cae:	0030      	movs	r0, r6
    2cb0:	0039      	movs	r1, r7
    2cb2:	47a0      	blx	r4
    2cb4:	4b05      	ldr	r3, [pc, #20]	; (2ccc <KalmanBothUpdate+0x1b8>)
    2cb6:	6018      	str	r0, [r3, #0]
    2cb8:	6059      	str	r1, [r3, #4]
}
    2cba:	b00f      	add	sp, #60	; 0x3c
    2cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cbe:	46c0      	nop			; (mov r8, r8)
    2cc0:	20000328 	.word	0x20000328
    2cc4:	0000634d 	.word	0x0000634d
    2cc8:	20000308 	.word	0x20000308
    2ccc:	200002e8 	.word	0x200002e8
    2cd0:	20000010 	.word	0x20000010
    2cd4:	000054c5 	.word	0x000054c5
    2cd8:	20000330 	.word	0x20000330
    2cdc:	20000348 	.word	0x20000348

00002ce0 <computeKalmanStates>:

void computeKalmanStates() {
    2ce0:	b5f0      	push	{r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2ce2:	4b20      	ldr	r3, [pc, #128]	; (2d64 <computeKalmanStates+0x84>)
void computeKalmanStates() {
    2ce4:	b085      	sub	sp, #20
    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2ce6:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    2ce8:	4a1f      	ldr	r2, [pc, #124]	; (2d68 <computeKalmanStates+0x88>)

    pressure = sample.pressureAltitude;
    2cea:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    2cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2cee:	9300      	str	r3, [sp, #0]
    2cf0:	9401      	str	r4, [sp, #4]
    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2cf2:	6891      	ldr	r1, [r2, #8]
    2cf4:	68d2      	ldr	r2, [r2, #12]

    if (altitude == 0) {
    2cf6:	4c1d      	ldr	r4, [pc, #116]	; (2d6c <computeKalmanStates+0x8c>)
    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2cf8:	9102      	str	r1, [sp, #8]
    2cfa:	9203      	str	r2, [sp, #12]
    if (altitude == 0) {
    2cfc:	6820      	ldr	r0, [r4, #0]
    2cfe:	6861      	ldr	r1, [r4, #4]
    2d00:	2200      	movs	r2, #0
    2d02:	2300      	movs	r3, #0
    2d04:	4d1a      	ldr	r5, [pc, #104]	; (2d70 <computeKalmanStates+0x90>)
    2d06:	47a8      	blx	r5
    2d08:	2800      	cmp	r0, #0
    2d0a:	d003      	beq.n	2d14 <computeKalmanStates+0x34>
        altitude = pressure;
    2d0c:	9a00      	ldr	r2, [sp, #0]
    2d0e:	9b01      	ldr	r3, [sp, #4]
    2d10:	6022      	str	r2, [r4, #0]
    2d12:	6063      	str	r3, [r4, #4]
    }


    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    2d14:	9800      	ldr	r0, [sp, #0]
    2d16:	9901      	ldr	r1, [sp, #4]
    2d18:	4e16      	ldr	r6, [pc, #88]	; (2d74 <computeKalmanStates+0x94>)
    2d1a:	4c17      	ldr	r4, [pc, #92]	; (2d78 <computeKalmanStates+0x98>)
    2d1c:	6832      	ldr	r2, [r6, #0]
    2d1e:	6873      	ldr	r3, [r6, #4]
    2d20:	47a0      	blx	r4
    accel_inovation = acceleration - estp[2];

    if (flightState > flightCoast) {
    2d22:	4b16      	ldr	r3, [pc, #88]	; (2d7c <computeKalmanStates+0x9c>)
    alt_inovation = pressure - estp[0];
    2d24:	0004      	movs	r4, r0
    if (flightState > flightCoast) {
    2d26:	781b      	ldrb	r3, [r3, #0]
    alt_inovation = pressure - estp[0];
    2d28:	000d      	movs	r5, r1
    if (flightState > flightCoast) {
    2d2a:	2b05      	cmp	r3, #5
    2d2c:	d903      	bls.n	2d36 <computeKalmanStates+0x56>
        KalmanBaroUpdate(alt_inovation);
    2d2e:	4b14      	ldr	r3, [pc, #80]	; (2d80 <computeKalmanStates+0xa0>)
    2d30:	4798      	blx	r3
    } else {
        KalmanBothUpdate(alt_inovation, accel_inovation);
    }
}
    2d32:	b005      	add	sp, #20
    2d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2d36:	1c38      	adds	r0, r7, #0
    2d38:	4b12      	ldr	r3, [pc, #72]	; (2d84 <computeKalmanStates+0xa4>)
    2d3a:	4798      	blx	r3
    2d3c:	9a02      	ldr	r2, [sp, #8]
    2d3e:	9b03      	ldr	r3, [sp, #12]
    2d40:	4f0d      	ldr	r7, [pc, #52]	; (2d78 <computeKalmanStates+0x98>)
    2d42:	47b8      	blx	r7
    2d44:	4a10      	ldr	r2, [pc, #64]	; (2d88 <computeKalmanStates+0xa8>)
    2d46:	4b11      	ldr	r3, [pc, #68]	; (2d8c <computeKalmanStates+0xac>)
    2d48:	4f11      	ldr	r7, [pc, #68]	; (2d90 <computeKalmanStates+0xb0>)
    2d4a:	47b8      	blx	r7
    accel_inovation = acceleration - estp[2];
    2d4c:	6932      	ldr	r2, [r6, #16]
    2d4e:	6973      	ldr	r3, [r6, #20]
    2d50:	4e09      	ldr	r6, [pc, #36]	; (2d78 <computeKalmanStates+0x98>)
    2d52:	47b0      	blx	r6
    2d54:	0002      	movs	r2, r0
    2d56:	000b      	movs	r3, r1
        KalmanBothUpdate(alt_inovation, accel_inovation);
    2d58:	0020      	movs	r0, r4
    2d5a:	0029      	movs	r1, r5
    2d5c:	4c0d      	ldr	r4, [pc, #52]	; (2d94 <computeKalmanStates+0xb4>)
    2d5e:	47a0      	blx	r4
}
    2d60:	e7e7      	b.n	2d32 <computeKalmanStates+0x52>
    2d62:	46c0      	nop			; (mov r8, r8)
    2d64:	200005f0 	.word	0x200005f0
    2d68:	20000150 	.word	0x20000150
    2d6c:	20000328 	.word	0x20000328
    2d70:	00005159 	.word	0x00005159
    2d74:	20000330 	.word	0x20000330
    2d78:	0000684d 	.word	0x0000684d
    2d7c:	200001ac 	.word	0x200001ac
    2d80:	0000299d 	.word	0x0000299d
    2d84:	00007015 	.word	0x00007015
    2d88:	33daf8df 	.word	0x33daf8df
    2d8c:	4040164b 	.word	0x4040164b
    2d90:	0000634d 	.word	0x0000634d
    2d94:	00002b15 	.word	0x00002b15

00002d98 <makePage>:
u16_t flightAddressLocationInIndex;

u8_t flightStartAddress[3];


void makePage(u8_t bytesToWrite, u8_t* data) {
    2d98:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    2d9a:	4a1f      	ldr	r2, [pc, #124]	; (2e18 <makePage+0x80>)
    2d9c:	7814      	ldrb	r4, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    2d9e:	1903      	adds	r3, r0, r4
    2da0:	2bff      	cmp	r3, #255	; 0xff
    2da2:	dc0c      	bgt.n	2dbe <makePage+0x26>
    2da4:	2300      	movs	r3, #0
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
    2da6:	4d1d      	ldr	r5, [pc, #116]	; (2e1c <makePage+0x84>)
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2da8:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    2daa:	1965      	adds	r5, r4, r5
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2dac:	b29e      	uxth	r6, r3
    2dae:	42b0      	cmp	r0, r6
    2db0:	d322      	bcc.n	2df8 <makePage+0x60>
            pageBuffer[(dataByte + location)] = data[dataByte];
    2db2:	5cce      	ldrb	r6, [r1, r3]
    2db4:	54ee      	strb	r6, [r5, r3]
            bytesWritten++;
            pageLocation = location + dataByte;
    2db6:	18e6      	adds	r6, r4, r3
    2db8:	7016      	strb	r6, [r2, #0]
    2dba:	3301      	adds	r3, #1
    2dbc:	e7f6      	b.n	2dac <makePage+0x14>
    2dbe:	2300      	movs	r3, #0
    2dc0:	4d16      	ldr	r5, [pc, #88]	; (2e1c <makePage+0x84>)
    2dc2:	b2de      	uxtb	r6, r3
    2dc4:	46b4      	mov	ip, r6
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2dc6:	191e      	adds	r6, r3, r4
    2dc8:	2eff      	cmp	r6, #255	; 0xff
    2dca:	dd16      	ble.n	2dfa <makePage+0x62>
        pageLocation = 0x00;
    2dcc:	2300      	movs	r3, #0
            pageToWrite[i] = pageBuffer[i];
    2dce:	4f14      	ldr	r7, [pc, #80]	; (2e20 <makePage+0x88>)
        pageLocation = 0x00;
    2dd0:	7013      	strb	r3, [r2, #0]
            pageToWrite[i] = pageBuffer[i];
    2dd2:	18ec      	adds	r4, r5, r3
    2dd4:	7826      	ldrb	r6, [r4, #0]
    2dd6:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    2dd8:	2600      	movs	r6, #0
    2dda:	7026      	strb	r6, [r4, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
    2ddc:	2480      	movs	r4, #128	; 0x80
    2dde:	3301      	adds	r3, #1
    2de0:	0064      	lsls	r4, r4, #1
    2de2:	42a3      	cmp	r3, r4
    2de4:	d1f5      	bne.n	2dd2 <makePage+0x3a>
    2de6:	4663      	mov	r3, ip
    2de8:	2500      	movs	r5, #0
            pageBuffer[dataByte] = data[bytesWritten];
    2dea:	4f0c      	ldr	r7, [pc, #48]	; (2e1c <makePage+0x84>)
    2dec:	1c6c      	adds	r4, r5, #1
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    2dee:	4283      	cmp	r3, r0
    2df0:	d308      	bcc.n	2e04 <makePage+0x6c>
        pageReady = true;
    2df2:	2201      	movs	r2, #1
    2df4:	4b0b      	ldr	r3, [pc, #44]	; (2e24 <makePage+0x8c>)
    2df6:	701a      	strb	r2, [r3, #0]
        }
    }
}
    2df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            pageBuffer[(dataByte + location)] = data[dataByte];
    2dfa:	5ccf      	ldrb	r7, [r1, r3]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2dfc:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    2dfe:	55af      	strb	r7, [r5, r6]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2e00:	b29b      	uxth	r3, r3
    2e02:	e7de      	b.n	2dc2 <makePage+0x2a>
            pageBuffer[dataByte] = data[bytesWritten];
    2e04:	4666      	mov	r6, ip
    2e06:	1936      	adds	r6, r6, r4
    2e08:	3e01      	subs	r6, #1
    2e0a:	5d8e      	ldrb	r6, [r1, r6]
            bytesWritten++;
    2e0c:	3301      	adds	r3, #1
            pageBuffer[dataByte] = data[bytesWritten];
    2e0e:	557e      	strb	r6, [r7, r5]
            bytesWritten++;
    2e10:	b2db      	uxtb	r3, r3
            pageLocation = dataByte + 1;
    2e12:	7014      	strb	r4, [r2, #0]
    2e14:	0025      	movs	r5, r4
    2e16:	e7e9      	b.n	2dec <makePage+0x54>
    2e18:	200005e8 	.word	0x200005e8
    2e1c:	200001ae 	.word	0x200001ae
    2e20:	2000037a 	.word	0x2000037a
    2e24:	2000047a 	.word	0x2000047a

00002e28 <writePadBuffer>:

void writePadBuffer(u8_t bytesToWrite, u8_t* data) {
    2e28:	b570      	push	{r4, r5, r6, lr}
    2e2a:	4a0e      	ldr	r2, [pc, #56]	; (2e64 <writePadBuffer+0x3c>)
    2e2c:	4c0e      	ldr	r4, [pc, #56]	; (2e68 <writePadBuffer+0x40>)
    2e2e:	2300      	movs	r3, #0
    2e30:	e004      	b.n	2e3c <writePadBuffer+0x14>
    u8_t i, j;

    for (i = 1; i < 10; i++) {
        for (j = 0; j < bytesToWrite; j++) {
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
    2e32:	001d      	movs	r5, r3
    2e34:	5cd6      	ldrb	r6, [r2, r3]
    2e36:	3d23      	subs	r5, #35	; 0x23
    2e38:	5556      	strb	r6, [r2, r5]
    2e3a:	3301      	adds	r3, #1
        for (j = 0; j < bytesToWrite; j++) {
    2e3c:	b2dd      	uxtb	r5, r3
    2e3e:	42a8      	cmp	r0, r5
    2e40:	d8f7      	bhi.n	2e32 <writePadBuffer+0xa>
    2e42:	3223      	adds	r2, #35	; 0x23
    for (i = 1; i < 10; i++) {
    2e44:	42a2      	cmp	r2, r4
    2e46:	d1f2      	bne.n	2e2e <writePadBuffer+0x6>
    2e48:	2300      	movs	r3, #0
        }
    }

    for (i = 0; i < bytesToWrite ; i++) {
        padSensorBuffer[9][i] = data[i];
    2e4a:	4c08      	ldr	r4, [pc, #32]	; (2e6c <writePadBuffer+0x44>)
    for (i = 0; i < bytesToWrite ; i++) {
    2e4c:	b2da      	uxtb	r2, r3
    2e4e:	4290      	cmp	r0, r2
    2e50:	d800      	bhi.n	2e54 <writePadBuffer+0x2c>
    }
}
    2e52:	bd70      	pop	{r4, r5, r6, pc}
        padSensorBuffer[9][i] = data[i];
    2e54:	001a      	movs	r2, r3
    2e56:	5ccd      	ldrb	r5, [r1, r3]
    2e58:	323c      	adds	r2, #60	; 0x3c
    2e5a:	32ff      	adds	r2, #255	; 0xff
    2e5c:	54a5      	strb	r5, [r4, r2]
    2e5e:	3301      	adds	r3, #1
    2e60:	e7f4      	b.n	2e4c <writePadBuffer+0x24>
    2e62:	46c0      	nop			; (mov r8, r8)
    2e64:	200004a7 	.word	0x200004a7
    2e68:	200005e2 	.word	0x200005e2
    2e6c:	20000484 	.word	0x20000484

00002e70 <logFlight>:


void logFlight() {
    2e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    2e72:	2346      	movs	r3, #70	; 0x46
    2e74:	466a      	mov	r2, sp
    2e76:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    2e78:	2300      	movs	r3, #0

    offsets.TminusZeroTime = sample.sampleTick;

    dataToSend[2] = offsets.TminusZeroTime >> 0;
    2e7a:	4669      	mov	r1, sp
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    2e7c:	4668      	mov	r0, sp
    dataToSend[1] = 0;
    2e7e:	7053      	strb	r3, [r2, #1]
    offsets.TminusZeroTime = sample.sampleTick;
    2e80:	4b11      	ldr	r3, [pc, #68]	; (2ec8 <logFlight+0x58>)
    2e82:	4a12      	ldr	r2, [pc, #72]	; (2ecc <logFlight+0x5c>)
    2e84:	685b      	ldr	r3, [r3, #4]
    dataToSend[2] = offsets.TminusZeroTime >> 0;
    2e86:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    2e88:	0a19      	lsrs	r1, r3, #8
    offsets.TminusZeroTime = sample.sampleTick;
    2e8a:	6053      	str	r3, [r2, #4]
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    2e8c:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    2e8e:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.TminusZeroTime >> 24;
    2e90:	0e1b      	lsrs	r3, r3, #24
    2e92:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    2e94:	6993      	ldr	r3, [r2, #24]
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    2e96:	7101      	strb	r1, [r0, #4]
    dataToSend[7] = offsets.groundOffset >> 8;
    2e98:	0a19      	lsrs	r1, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    2e9a:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    2e9c:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    2e9e:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    2ea0:	0e1b      	lsrs	r3, r3, #24
    2ea2:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    2ea4:	6a13      	ldr	r3, [r2, #32]
    dataToSend[8] = offsets.groundOffset >> 16;
    2ea6:	7201      	strb	r1, [r0, #8]
    dataToSend[11] = offsets.groundTemperature >> 8;
    2ea8:	0a1a      	lsrs	r2, r3, #8
    dataToSend[10] = offsets.groundTemperature >> 0;
    2eaa:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    2eac:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    2eae:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    2eb0:	0e1b      	lsrs	r3, r3, #24
    2eb2:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    2eb4:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[12] = offsets.groundTemperature >> 16;
    2eb6:	7302      	strb	r2, [r0, #12]
    dataToSend[15] = 0xfe;
    2eb8:	73c3      	strb	r3, [r0, #15]
    dataToSend[9] = offsets.groundOffset >> 24;
    2eba:	4669      	mov	r1, sp

    makePage(bytesToSend, dataToSend);
    2ebc:	2010      	movs	r0, #16
    2ebe:	4b04      	ldr	r3, [pc, #16]	; (2ed0 <logFlight+0x60>)
    2ec0:	4798      	blx	r3
}
    2ec2:	b005      	add	sp, #20
    2ec4:	bd00      	pop	{pc}
    2ec6:	46c0      	nop			; (mov r8, r8)
    2ec8:	200005f0 	.word	0x200005f0
    2ecc:	20000150 	.word	0x20000150
    2ed0:	00002d99 	.word	0x00002d99

00002ed4 <logEvent>:

void logEvent(u8_t eventType) {
    2ed4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;
    2ed6:	4d12      	ldr	r5, [pc, #72]	; (2f20 <logEvent+0x4c>)
    2ed8:	4b12      	ldr	r3, [pc, #72]	; (2f24 <logEvent+0x50>)
    2eda:	686a      	ldr	r2, [r5, #4]
    2edc:	685b      	ldr	r3, [r3, #4]

    dataToSend[0] = EVENT_LOG;
    2ede:	ac01      	add	r4, sp, #4
    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;
    2ee0:	1ad3      	subs	r3, r2, r3
    dataToSend[0] = EVENT_LOG;
    2ee2:	2245      	movs	r2, #69	; 0x45
    2ee4:	7022      	strb	r2, [r4, #0]
    dataToSend[1] = eventType;
    dataToSend[2] = eventTick >> 0;
    dataToSend[3] = eventTick >> 8;
    2ee6:	0a1a      	lsrs	r2, r3, #8
    dataToSend[4] = eventTick >> 16;
    dataToSend[5] = eventTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    2ee8:	4e0f      	ldr	r6, [pc, #60]	; (2f28 <logEvent+0x54>)
    dataToSend[2] = eventTick >> 0;
    2eea:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = eventTick >> 8;
    2eec:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = eventTick >> 16;
    2eee:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = eventTick >> 24;
    2ef0:	0e1b      	lsrs	r3, r3, #24
    dataToSend[4] = eventTick >> 16;
    2ef2:	7122      	strb	r2, [r4, #4]
    dataToSend[5] = eventTick >> 24;
    2ef4:	7163      	strb	r3, [r4, #5]
    dataToSend[1] = eventType;
    2ef6:	7060      	strb	r0, [r4, #1]
    dataToSend[6] = altitudeAGL() >> 0;
    2ef8:	47b0      	blx	r6
    2efa:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 8;
    2efc:	47b0      	blx	r6
    2efe:	1200      	asrs	r0, r0, #8
    2f00:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 16;
    2f02:	47b0      	blx	r6
    2f04:	1400      	asrs	r0, r0, #16
    2f06:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = altitudeAGL() >> 24;
    2f08:	47b0      	blx	r6
    2f0a:	1600      	asrs	r0, r0, #24
    2f0c:	7260      	strb	r0, [r4, #9]

    dataToSend[10] = sample.voltage.batV >> 0;
    2f0e:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    2f10:	0021      	movs	r1, r4
    dataToSend[10] = sample.voltage.batV >> 0;
    2f12:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    2f14:	0a1b      	lsrs	r3, r3, #8
    2f16:	72e3      	strb	r3, [r4, #11]
    makePage(bytesToSend, dataToSend);
    2f18:	200c      	movs	r0, #12
    2f1a:	4b04      	ldr	r3, [pc, #16]	; (2f2c <logEvent+0x58>)
    2f1c:	4798      	blx	r3

}
    2f1e:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    2f20:	200005f0 	.word	0x200005f0
    2f24:	20000150 	.word	0x20000150
    2f28:	00000b81 	.word	0x00000b81
    2f2c:	00002d99 	.word	0x00002d99

00002f30 <logSensors>:

void logSensors() {

    writeLog = false;
    2f30:	2200      	movs	r2, #0
void logSensors() {
    2f32:	b5f0      	push	{r4, r5, r6, r7, lr}
    writeLog = false;
    2f34:	4b59      	ldr	r3, [pc, #356]	; (309c <logSensors+0x16c>)
void logSensors() {
    2f36:	b08f      	sub	sp, #60	; 0x3c
    writeLog = false;
    2f38:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = SENSOR_LOG_LENGTH;
    u8_t dataToSend[SENSOR_LOG_LENGTH];

    float fractionalAccel = accel - (int16_t)(accel);
    2f3a:	4b59      	ldr	r3, [pc, #356]	; (30a0 <logSensors+0x170>)
    2f3c:	681e      	ldr	r6, [r3, #0]
    2f3e:	685f      	ldr	r7, [r3, #4]
    2f40:	4b58      	ldr	r3, [pc, #352]	; (30a4 <logSensors+0x174>)
    2f42:	0039      	movs	r1, r7
    2f44:	0030      	movs	r0, r6
    2f46:	4798      	blx	r3
    2f48:	4d57      	ldr	r5, [pc, #348]	; (30a8 <logSensors+0x178>)
    2f4a:	b200      	sxth	r0, r0
    2f4c:	47a8      	blx	r5
    2f4e:	4c57      	ldr	r4, [pc, #348]	; (30ac <logSensors+0x17c>)
    2f50:	0002      	movs	r2, r0
    2f52:	000b      	movs	r3, r1
    2f54:	0030      	movs	r0, r6
    2f56:	0039      	movs	r1, r7
    2f58:	47a0      	blx	r4
    2f5a:	4f55      	ldr	r7, [pc, #340]	; (30b0 <logSensors+0x180>)
    2f5c:	47b8      	blx	r7
    int16_t fractAccelPart = fractionalAccel * 1000;
    2f5e:	4b55      	ldr	r3, [pc, #340]	; (30b4 <logSensors+0x184>)
    2f60:	4955      	ldr	r1, [pc, #340]	; (30b8 <logSensors+0x188>)
    2f62:	4798      	blx	r3
    2f64:	4e55      	ldr	r6, [pc, #340]	; (30bc <logSensors+0x18c>)
    2f66:	47b0      	blx	r6
    2f68:	b203      	sxth	r3, r0
    2f6a:	9301      	str	r3, [sp, #4]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    2f6c:	4b54      	ldr	r3, [pc, #336]	; (30c0 <logSensors+0x190>)
    2f6e:	681a      	ldr	r2, [r3, #0]
    2f70:	685b      	ldr	r3, [r3, #4]
    2f72:	9202      	str	r2, [sp, #8]
    2f74:	9303      	str	r3, [sp, #12]
    2f76:	0010      	movs	r0, r2
    2f78:	0019      	movs	r1, r3
    2f7a:	4b4a      	ldr	r3, [pc, #296]	; (30a4 <logSensors+0x174>)
    2f7c:	4798      	blx	r3
    2f7e:	b200      	sxth	r0, r0
    2f80:	47a8      	blx	r5
    2f82:	0002      	movs	r2, r0
    2f84:	000b      	movs	r3, r1
    2f86:	9802      	ldr	r0, [sp, #8]
    2f88:	9903      	ldr	r1, [sp, #12]
    2f8a:	47a0      	blx	r4
    2f8c:	47b8      	blx	r7
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2f8e:	494a      	ldr	r1, [pc, #296]	; (30b8 <logSensors+0x188>)
    2f90:	4b48      	ldr	r3, [pc, #288]	; (30b4 <logSensors+0x184>)
    2f92:	4798      	blx	r3
    2f94:	47b0      	blx	r6

    dataToSend[0] = SENSOR_LOG;
    2f96:	2353      	movs	r3, #83	; 0x53

    dataToSend[1] = sample.sampleTick >> 0;
    2f98:	4d4a      	ldr	r5, [pc, #296]	; (30c4 <logSensors+0x194>)
    dataToSend[0] = SENSOR_LOG;
    2f9a:	ac05      	add	r4, sp, #20
    2f9c:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = sample.sampleTick >> 0;
    2f9e:	686b      	ldr	r3, [r5, #4]
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2fa0:	b206      	sxth	r6, r0
    dataToSend[2] = sample.sampleTick >> 8;
    2fa2:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = sample.sampleTick >> 0;
    2fa4:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    2fa6:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    2fa8:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    2faa:	0e1b      	lsrs	r3, r3, #24
    dataToSend[3] = sample.sampleTick >> 16;
    2fac:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    2fae:	7123      	strb	r3, [r4, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    2fb0:	4f45      	ldr	r7, [pc, #276]	; (30c8 <logSensors+0x198>)
    2fb2:	47b8      	blx	r7
    2fb4:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    2fb6:	47b8      	blx	r7
    2fb8:	1200      	asrs	r0, r0, #8
    2fba:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    2fbc:	47b8      	blx	r7
    2fbe:	1400      	asrs	r0, r0, #16
    2fc0:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    2fc2:	47b8      	blx	r7

    dataToSend[9] = (int16_t)(accel) >> 0;
    2fc4:	4b36      	ldr	r3, [pc, #216]	; (30a0 <logSensors+0x170>)
    dataToSend[8] = altitudeAGL() >> 24;
    2fc6:	1600      	asrs	r0, r0, #24
    2fc8:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = (int16_t)(accel) >> 0;
    2fca:	6818      	ldr	r0, [r3, #0]
    2fcc:	6859      	ldr	r1, [r3, #4]
    2fce:	4b35      	ldr	r3, [pc, #212]	; (30a4 <logSensors+0x174>)
    2fd0:	4798      	blx	r3
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2fd2:	466b      	mov	r3, sp
    2fd4:	791b      	ldrb	r3, [r3, #4]
    dataToSend[9] = (int16_t)(accel) >> 0;
    2fd6:	b200      	sxth	r0, r0
    dataToSend[11] = fractAccelPart >> 0;
    2fd8:	72e3      	strb	r3, [r4, #11]
    dataToSend[12] = fractAccelPart >> 8;
    2fda:	9b01      	ldr	r3, [sp, #4]
    dataToSend[9] = (int16_t)(accel) >> 0;
    2fdc:	7260      	strb	r0, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    2fde:	1200      	asrs	r0, r0, #8
    2fe0:	72a0      	strb	r0, [r4, #10]
    dataToSend[12] = fractAccelPart >> 8;
    2fe2:	1218      	asrs	r0, r3, #8

    dataToSend[13] = (int16_t)(velocity) >> 0;
    2fe4:	4b36      	ldr	r3, [pc, #216]	; (30c0 <logSensors+0x190>)
    dataToSend[12] = fractAccelPart >> 8;
    2fe6:	7320      	strb	r0, [r4, #12]
    dataToSend[13] = (int16_t)(velocity) >> 0;
    2fe8:	6818      	ldr	r0, [r3, #0]
    2fea:	6859      	ldr	r1, [r3, #4]
    2fec:	4b2d      	ldr	r3, [pc, #180]	; (30a4 <logSensors+0x174>)
    2fee:	4798      	blx	r3
    2ff0:	b200      	sxth	r0, r0
    2ff2:	7360      	strb	r0, [r4, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    2ff4:	73e6      	strb	r6, [r4, #15]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2ff6:	1200      	asrs	r0, r0, #8
    dataToSend[16] = fractVelocityPart >> 8;
    2ff8:	1236      	asrs	r6, r6, #8

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2ffa:	4b34      	ldr	r3, [pc, #208]	; (30cc <logSensors+0x19c>)
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2ffc:	73a0      	strb	r0, [r4, #14]
    dataToSend[16] = fractVelocityPart >> 8;
    2ffe:	7426      	strb	r6, [r4, #16]
    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    3000:	6da8      	ldr	r0, [r5, #88]	; 0x58
    3002:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    3004:	4798      	blx	r3
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    3006:	0a03      	lsrs	r3, r0, #8
    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    3008:	7460      	strb	r0, [r4, #17]
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    300a:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    300c:	0c03      	lsrs	r3, r0, #16
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;
    300e:	0e00      	lsrs	r0, r0, #24
    3010:	7520      	strb	r0, [r4, #20]
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    3012:	74e3      	strb	r3, [r4, #19]

    dataToSend[21] = sample.accelXint >> 0;
    3014:	2220      	movs	r2, #32
    3016:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    makePage(bytesToSend, dataToSend);
    3018:	0021      	movs	r1, r4
    dataToSend[21] = sample.accelXint >> 0;
    301a:	7563      	strb	r3, [r4, #21]
    dataToSend[22] = sample.accelXint >> 8;
    301c:	121b      	asrs	r3, r3, #8
    301e:	75a3      	strb	r3, [r4, #22]
    dataToSend[23] = sample.accelYint >> 0;
    3020:	2228      	movs	r2, #40	; 0x28
    3022:	5eab      	ldrsh	r3, [r5, r2]
    makePage(bytesToSend, dataToSend);
    3024:	2023      	movs	r0, #35	; 0x23
    dataToSend[23] = sample.accelYint >> 0;
    3026:	75e3      	strb	r3, [r4, #23]
    dataToSend[24] = sample.accelYint >> 8;
    3028:	121b      	asrs	r3, r3, #8
    302a:	7623      	strb	r3, [r4, #24]
    dataToSend[25] = sample.accelZint >> 0;
    302c:	2230      	movs	r2, #48	; 0x30
    302e:	5eab      	ldrsh	r3, [r5, r2]
    3030:	7663      	strb	r3, [r4, #25]
    dataToSend[26] = sample.accelZint >> 8;
    3032:	121b      	asrs	r3, r3, #8
    3034:	76a3      	strb	r3, [r4, #26]
    dataToSend[27] = sample.gyroXint >> 0;
    3036:	2238      	movs	r2, #56	; 0x38
    3038:	5eab      	ldrsh	r3, [r5, r2]
    303a:	76e3      	strb	r3, [r4, #27]
    dataToSend[28] = sample.gyroXint >> 8;
    303c:	121b      	asrs	r3, r3, #8
    303e:	7723      	strb	r3, [r4, #28]
    dataToSend[29] = sample.gyroYint >> 0;
    3040:	1cab      	adds	r3, r5, #2
    3042:	223e      	movs	r2, #62	; 0x3e
    3044:	5e9b      	ldrsh	r3, [r3, r2]
    3046:	7763      	strb	r3, [r4, #29]
    dataToSend[30] = sample.gyroYint >> 8;
    3048:	121b      	asrs	r3, r3, #8
    304a:	77a3      	strb	r3, [r4, #30]
    dataToSend[31] = sample.gyroZint >> 0;
    304c:	002b      	movs	r3, r5
    304e:	3348      	adds	r3, #72	; 0x48
    3050:	2200      	movs	r2, #0
    3052:	5e9b      	ldrsh	r3, [r3, r2]
    dataToSend[32] = sample.gyroZint >> 8;
    3054:	aa04      	add	r2, sp, #16
    dataToSend[31] = sample.gyroZint >> 0;
    3056:	77e3      	strb	r3, [r4, #31]
    dataToSend[32] = sample.gyroZint >> 8;
    3058:	3205      	adds	r2, #5
    305a:	121b      	asrs	r3, r3, #8
    305c:	77d3      	strb	r3, [r2, #31]
    dataToSend[33] = sample.analogRaw >> 0;
    305e:	8b2b      	ldrh	r3, [r5, #24]
    3060:	aa04      	add	r2, sp, #16
    3062:	3206      	adds	r2, #6
    3064:	77d3      	strb	r3, [r2, #31]
    dataToSend[34] = sample.analogRaw >> 8;
    3066:	aa04      	add	r2, sp, #16
    3068:	3207      	adds	r2, #7
    306a:	0a1b      	lsrs	r3, r3, #8
    306c:	77d3      	strb	r3, [r2, #31]
    makePage(bytesToSend, dataToSend);
    306e:	4b18      	ldr	r3, [pc, #96]	; (30d0 <logSensors+0x1a0>)
    3070:	4798      	blx	r3

    if (pageReady) {
    3072:	4b18      	ldr	r3, [pc, #96]	; (30d4 <logSensors+0x1a4>)
    3074:	781a      	ldrb	r2, [r3, #0]
    3076:	2a00      	cmp	r2, #0
    3078:	d00e      	beq.n	3098 <logSensors+0x168>
        pageReady = false;
    307a:	2200      	movs	r2, #0
    307c:	701a      	strb	r2, [r3, #0]
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    307e:	2280      	movs	r2, #128	; 0x80
    3080:	4b15      	ldr	r3, [pc, #84]	; (30d8 <logSensors+0x1a8>)
        pinToggle(LedPin);
        AT25SEWritePage(currentAddress,pageToWrite);
    3082:	4c16      	ldr	r4, [pc, #88]	; (30dc <logSensors+0x1ac>)
    3084:	0352      	lsls	r2, r2, #13
    3086:	61da      	str	r2, [r3, #28]
    3088:	4915      	ldr	r1, [pc, #84]	; (30e0 <logSensors+0x1b0>)
    308a:	4b16      	ldr	r3, [pc, #88]	; (30e4 <logSensors+0x1b4>)
    308c:	6820      	ldr	r0, [r4, #0]
    308e:	4798      	blx	r3
        currentAddress = (currentAddress + 0x100);
    3090:	6823      	ldr	r3, [r4, #0]
    3092:	3301      	adds	r3, #1
    3094:	33ff      	adds	r3, #255	; 0xff
    3096:	6023      	str	r3, [r4, #0]
    }

}
    3098:	b00f      	add	sp, #60	; 0x3c
    309a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    309c:	2000019a 	.word	0x2000019a
    30a0:	200002e8 	.word	0x200002e8
    30a4:	00006eb9 	.word	0x00006eb9
    30a8:	00006f21 	.word	0x00006f21
    30ac:	0000684d 	.word	0x0000684d
    30b0:	000070b9 	.word	0x000070b9
    30b4:	00005245 	.word	0x00005245
    30b8:	447a0000 	.word	0x447a0000
    30bc:	00005485 	.word	0x00005485
    30c0:	20000308 	.word	0x20000308
    30c4:	200005f0 	.word	0x200005f0
    30c8:	00000b81 	.word	0x00000b81
    30cc:	00005209 	.word	0x00005209
    30d0:	00002d99 	.word	0x00002d99
    30d4:	2000047a 	.word	0x2000047a
    30d8:	41004400 	.word	0x41004400
    30dc:	20000480 	.word	0x20000480
    30e0:	2000037a 	.word	0x2000037a
    30e4:	000002a5 	.word	0x000002a5

000030e8 <logSensorsOnPad>:

void logSensorsOnPad() {

    writeLog = false;
    30e8:	2200      	movs	r2, #0
void logSensorsOnPad() {
    30ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    writeLog = false;
    30ec:	4b50      	ldr	r3, [pc, #320]	; (3230 <logSensorsOnPad+0x148>)
void logSensorsOnPad() {
    30ee:	b08f      	sub	sp, #60	; 0x3c
    writeLog = false;
    30f0:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = SENSOR_LOG_LENGTH;
    u8_t dataToSend[SENSOR_LOG_LENGTH];

    float fractionalAccel = accel - (int16_t)(accel);
    30f2:	4b50      	ldr	r3, [pc, #320]	; (3234 <logSensorsOnPad+0x14c>)
    30f4:	681c      	ldr	r4, [r3, #0]
    30f6:	685d      	ldr	r5, [r3, #4]
    30f8:	4b4f      	ldr	r3, [pc, #316]	; (3238 <logSensorsOnPad+0x150>)
    30fa:	0029      	movs	r1, r5
    30fc:	0020      	movs	r0, r4
    30fe:	4798      	blx	r3
    3100:	4e4e      	ldr	r6, [pc, #312]	; (323c <logSensorsOnPad+0x154>)
    3102:	b200      	sxth	r0, r0
    3104:	47b0      	blx	r6
    3106:	4f4e      	ldr	r7, [pc, #312]	; (3240 <logSensorsOnPad+0x158>)
    3108:	0002      	movs	r2, r0
    310a:	000b      	movs	r3, r1
    310c:	0020      	movs	r0, r4
    310e:	0029      	movs	r1, r5
    3110:	47b8      	blx	r7
    3112:	4c4c      	ldr	r4, [pc, #304]	; (3244 <logSensorsOnPad+0x15c>)
    3114:	47a0      	blx	r4
    int16_t fractAccelPart = fractionalAccel * 1000;
    3116:	4d4c      	ldr	r5, [pc, #304]	; (3248 <logSensorsOnPad+0x160>)
    3118:	494c      	ldr	r1, [pc, #304]	; (324c <logSensorsOnPad+0x164>)
    311a:	47a8      	blx	r5
    311c:	4b4c      	ldr	r3, [pc, #304]	; (3250 <logSensorsOnPad+0x168>)
    311e:	4798      	blx	r3
    3120:	b203      	sxth	r3, r0
    3122:	9301      	str	r3, [sp, #4]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    3124:	4b4b      	ldr	r3, [pc, #300]	; (3254 <logSensorsOnPad+0x16c>)
    3126:	681a      	ldr	r2, [r3, #0]
    3128:	685b      	ldr	r3, [r3, #4]
    312a:	9202      	str	r2, [sp, #8]
    312c:	9303      	str	r3, [sp, #12]
    312e:	0010      	movs	r0, r2
    3130:	0019      	movs	r1, r3
    3132:	4b41      	ldr	r3, [pc, #260]	; (3238 <logSensorsOnPad+0x150>)
    3134:	4798      	blx	r3
    3136:	b200      	sxth	r0, r0
    3138:	47b0      	blx	r6
    313a:	0002      	movs	r2, r0
    313c:	000b      	movs	r3, r1
    313e:	9802      	ldr	r0, [sp, #8]
    3140:	9903      	ldr	r1, [sp, #12]
    3142:	47b8      	blx	r7
    3144:	47a0      	blx	r4
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    3146:	4941      	ldr	r1, [pc, #260]	; (324c <logSensorsOnPad+0x164>)
    3148:	47a8      	blx	r5
    314a:	4b41      	ldr	r3, [pc, #260]	; (3250 <logSensorsOnPad+0x168>)
    314c:	4798      	blx	r3

    dataToSend[0] = SENSOR_LOG;
    314e:	2353      	movs	r3, #83	; 0x53

    dataToSend[1] = sample.sampleTick >> 0;
    3150:	4d41      	ldr	r5, [pc, #260]	; (3258 <logSensorsOnPad+0x170>)
    dataToSend[0] = SENSOR_LOG;
    3152:	ac05      	add	r4, sp, #20
    3154:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = sample.sampleTick >> 0;
    3156:	686b      	ldr	r3, [r5, #4]
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    3158:	b206      	sxth	r6, r0
    dataToSend[2] = sample.sampleTick >> 8;
    315a:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = sample.sampleTick >> 0;
    315c:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    315e:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    3160:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    3162:	0e1b      	lsrs	r3, r3, #24
    dataToSend[3] = sample.sampleTick >> 16;
    3164:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    3166:	7123      	strb	r3, [r4, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    3168:	4f3c      	ldr	r7, [pc, #240]	; (325c <logSensorsOnPad+0x174>)
    316a:	47b8      	blx	r7
    316c:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    316e:	47b8      	blx	r7
    3170:	1200      	asrs	r0, r0, #8
    3172:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    3174:	47b8      	blx	r7
    3176:	1400      	asrs	r0, r0, #16
    3178:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    317a:	47b8      	blx	r7

    dataToSend[9] = (int16_t)(accel) >> 0;
    317c:	4b2d      	ldr	r3, [pc, #180]	; (3234 <logSensorsOnPad+0x14c>)
    dataToSend[8] = altitudeAGL() >> 24;
    317e:	1600      	asrs	r0, r0, #24
    3180:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = (int16_t)(accel) >> 0;
    3182:	6818      	ldr	r0, [r3, #0]
    3184:	6859      	ldr	r1, [r3, #4]
    3186:	4b2c      	ldr	r3, [pc, #176]	; (3238 <logSensorsOnPad+0x150>)
    3188:	4798      	blx	r3
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    318a:	466b      	mov	r3, sp
    318c:	791b      	ldrb	r3, [r3, #4]
    dataToSend[9] = (int16_t)(accel) >> 0;
    318e:	b200      	sxth	r0, r0
    dataToSend[11] = fractAccelPart >> 0;
    3190:	72e3      	strb	r3, [r4, #11]
    dataToSend[12] = fractAccelPart >> 8;
    3192:	9b01      	ldr	r3, [sp, #4]
    dataToSend[9] = (int16_t)(accel) >> 0;
    3194:	7260      	strb	r0, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    3196:	1200      	asrs	r0, r0, #8
    3198:	72a0      	strb	r0, [r4, #10]
    dataToSend[12] = fractAccelPart >> 8;
    319a:	1218      	asrs	r0, r3, #8

    dataToSend[13] = (int16_t)(velocity) >> 0;
    319c:	4b2d      	ldr	r3, [pc, #180]	; (3254 <logSensorsOnPad+0x16c>)
    dataToSend[12] = fractAccelPart >> 8;
    319e:	7320      	strb	r0, [r4, #12]
    dataToSend[13] = (int16_t)(velocity) >> 0;
    31a0:	6818      	ldr	r0, [r3, #0]
    31a2:	6859      	ldr	r1, [r3, #4]
    31a4:	4b24      	ldr	r3, [pc, #144]	; (3238 <logSensorsOnPad+0x150>)
    31a6:	4798      	blx	r3
    31a8:	b200      	sxth	r0, r0
    31aa:	7360      	strb	r0, [r4, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    31ac:	73e6      	strb	r6, [r4, #15]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    31ae:	1200      	asrs	r0, r0, #8
    dataToSend[16] = fractVelocityPart >> 8;
    31b0:	1236      	asrs	r6, r6, #8
    dataToSend[14] = (int16_t)(velocity) >> 8;
    31b2:	73a0      	strb	r0, [r4, #14]

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    31b4:	4b2a      	ldr	r3, [pc, #168]	; (3260 <logSensorsOnPad+0x178>)
    31b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
    31b8:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    dataToSend[16] = fractVelocityPart >> 8;
    31ba:	7426      	strb	r6, [r4, #16]
    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    31bc:	4798      	blx	r3
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    31be:	0a03      	lsrs	r3, r0, #8
    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    31c0:	7460      	strb	r0, [r4, #17]
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    31c2:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    31c4:	0c03      	lsrs	r3, r0, #16
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;
    31c6:	0e00      	lsrs	r0, r0, #24
    31c8:	7520      	strb	r0, [r4, #20]
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    31ca:	74e3      	strb	r3, [r4, #19]

    dataToSend[21] = sample.accelXint >> 0;
    31cc:	2220      	movs	r2, #32
    31ce:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    writePadBuffer(bytesToSend, dataToSend);
    31d0:	0021      	movs	r1, r4
    dataToSend[21] = sample.accelXint >> 0;
    31d2:	7563      	strb	r3, [r4, #21]
    dataToSend[22] = sample.accelXint >> 8;
    31d4:	121b      	asrs	r3, r3, #8
    31d6:	75a3      	strb	r3, [r4, #22]
    dataToSend[23] = sample.accelYint >> 0;
    31d8:	2228      	movs	r2, #40	; 0x28
    31da:	5eab      	ldrsh	r3, [r5, r2]
    writePadBuffer(bytesToSend, dataToSend);
    31dc:	2023      	movs	r0, #35	; 0x23
    dataToSend[23] = sample.accelYint >> 0;
    31de:	75e3      	strb	r3, [r4, #23]
    dataToSend[24] = sample.accelYint >> 8;
    31e0:	121b      	asrs	r3, r3, #8
    31e2:	7623      	strb	r3, [r4, #24]
    dataToSend[25] = sample.accelZint >> 0;
    31e4:	2230      	movs	r2, #48	; 0x30
    31e6:	5eab      	ldrsh	r3, [r5, r2]
    31e8:	7663      	strb	r3, [r4, #25]
    dataToSend[26] = sample.accelZint >> 8;
    31ea:	121b      	asrs	r3, r3, #8
    31ec:	76a3      	strb	r3, [r4, #26]
    dataToSend[27] = sample.gyroXint >> 0;
    31ee:	2238      	movs	r2, #56	; 0x38
    31f0:	5eab      	ldrsh	r3, [r5, r2]
    31f2:	76e3      	strb	r3, [r4, #27]
    dataToSend[28] = sample.gyroXint >> 8;
    31f4:	121b      	asrs	r3, r3, #8
    31f6:	7723      	strb	r3, [r4, #28]
    dataToSend[29] = sample.gyroYint >> 0;
    31f8:	1cab      	adds	r3, r5, #2
    31fa:	223e      	movs	r2, #62	; 0x3e
    31fc:	5e9b      	ldrsh	r3, [r3, r2]
    31fe:	7763      	strb	r3, [r4, #29]
    dataToSend[30] = sample.gyroYint >> 8;
    3200:	121b      	asrs	r3, r3, #8
    3202:	77a3      	strb	r3, [r4, #30]
    dataToSend[31] = sample.gyroZint >> 0;
    3204:	002b      	movs	r3, r5
    3206:	3348      	adds	r3, #72	; 0x48
    3208:	2200      	movs	r2, #0
    320a:	5e9b      	ldrsh	r3, [r3, r2]
    dataToSend[32] = sample.gyroZint >> 8;
    320c:	aa04      	add	r2, sp, #16
    dataToSend[31] = sample.gyroZint >> 0;
    320e:	77e3      	strb	r3, [r4, #31]
    dataToSend[32] = sample.gyroZint >> 8;
    3210:	3205      	adds	r2, #5
    3212:	121b      	asrs	r3, r3, #8
    3214:	77d3      	strb	r3, [r2, #31]
    dataToSend[33] = sample.analogRaw >> 0;
    3216:	8b2b      	ldrh	r3, [r5, #24]
    3218:	aa04      	add	r2, sp, #16
    321a:	3206      	adds	r2, #6
    321c:	77d3      	strb	r3, [r2, #31]
    dataToSend[34] = sample.analogRaw >> 8;
    321e:	aa04      	add	r2, sp, #16
    3220:	3207      	adds	r2, #7
    3222:	0a1b      	lsrs	r3, r3, #8
    3224:	77d3      	strb	r3, [r2, #31]
    writePadBuffer(bytesToSend, dataToSend);
    3226:	4b0f      	ldr	r3, [pc, #60]	; (3264 <logSensorsOnPad+0x17c>)
    3228:	4798      	blx	r3

}
    322a:	b00f      	add	sp, #60	; 0x3c
    322c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    322e:	46c0      	nop			; (mov r8, r8)
    3230:	2000019a 	.word	0x2000019a
    3234:	200002e8 	.word	0x200002e8
    3238:	00006eb9 	.word	0x00006eb9
    323c:	00006f21 	.word	0x00006f21
    3240:	0000684d 	.word	0x0000684d
    3244:	000070b9 	.word	0x000070b9
    3248:	00005245 	.word	0x00005245
    324c:	447a0000 	.word	0x447a0000
    3250:	00005485 	.word	0x00005485
    3254:	20000308 	.word	0x20000308
    3258:	200005f0 	.word	0x200005f0
    325c:	00000b81 	.word	0x00000b81
    3260:	00005209 	.word	0x00005209
    3264:	00002e29 	.word	0x00002e29

00003268 <getFlightStartAddress>:



u32_t getFlightStartAddress(u8_t flightToFind) {
    3268:	b513      	push	{r0, r1, r4, lr}
    326a:	0003      	movs	r3, r0

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);
    326c:	2006      	movs	r0, #6
    326e:	4358      	muls	r0, r3

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    3270:	ac01      	add	r4, sp, #4
    3272:	3001      	adds	r0, #1
    3274:	30ff      	adds	r0, #255	; 0xff
    3276:	0022      	movs	r2, r4
    3278:	2103      	movs	r1, #3
    327a:	4b05      	ldr	r3, [pc, #20]	; (3290 <getFlightStartAddress+0x28>)
    327c:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    327e:	7860      	ldrb	r0, [r4, #1]
    3280:	78a3      	ldrb	r3, [r4, #2]
    3282:	0200      	lsls	r0, r0, #8
    3284:	041b      	lsls	r3, r3, #16
    3286:	4318      	orrs	r0, r3
    3288:	7823      	ldrb	r3, [r4, #0]
    328a:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    328c:	bd16      	pop	{r1, r2, r4, pc}
    328e:	46c0      	nop			; (mov r8, r8)
    3290:	00000301 	.word	0x00000301

00003294 <FindFlightEndingAddress>:

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    3294:	b513      	push	{r0, r1, r4, lr}
    3296:	0003      	movs	r3, r0

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);
    3298:	2006      	movs	r0, #6
    329a:	4358      	muls	r0, r3

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    329c:	ac01      	add	r4, sp, #4
    329e:	3004      	adds	r0, #4
    32a0:	30ff      	adds	r0, #255	; 0xff
    32a2:	0022      	movs	r2, r4
    32a4:	2103      	movs	r1, #3
    32a6:	4b05      	ldr	r3, [pc, #20]	; (32bc <FindFlightEndingAddress+0x28>)
    32a8:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    32aa:	7860      	ldrb	r0, [r4, #1]
    32ac:	78a3      	ldrb	r3, [r4, #2]
    32ae:	0200      	lsls	r0, r0, #8
    32b0:	041b      	lsls	r3, r3, #16
    32b2:	4318      	orrs	r0, r3
    32b4:	7823      	ldrb	r3, [r4, #0]
    32b6:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    32b8:	bd16      	pop	{r1, r2, r4, pc}
    32ba:	46c0      	nop			; (mov r8, r8)
    32bc:	00000301 	.word	0x00000301

000032c0 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    32c0:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    32c2:	4b04      	ldr	r3, [pc, #16]	; (32d4 <isFlightLogged+0x14>)
    32c4:	4798      	blx	r3

    if (possibleStart == 0xFFFFFF) {
    32c6:	4b04      	ldr	r3, [pc, #16]	; (32d8 <isFlightLogged+0x18>)
    32c8:	18c0      	adds	r0, r0, r3
    32ca:	1e43      	subs	r3, r0, #1
    32cc:	4198      	sbcs	r0, r3
    32ce:	b2c0      	uxtb	r0, r0
        return false;
    } else {
        return true;
    }
}
    32d0:	bd10      	pop	{r4, pc}
    32d2:	46c0      	nop			; (mov r8, r8)
    32d4:	00003269 	.word	0x00003269
    32d8:	ff000001 	.word	0xff000001

000032dc <writeFlightStartAddress>:

void writeFlightStartAddress() {
    32dc:	b510      	push	{r4, lr}
    AT25SFWriteBytes(flightAddressLocationInIndex,3,flightStartAddress);
    32de:	4b03      	ldr	r3, [pc, #12]	; (32ec <writeFlightStartAddress+0x10>)
    32e0:	4a03      	ldr	r2, [pc, #12]	; (32f0 <writeFlightStartAddress+0x14>)
    32e2:	8818      	ldrh	r0, [r3, #0]
    32e4:	2103      	movs	r1, #3
    32e6:	4b03      	ldr	r3, [pc, #12]	; (32f4 <writeFlightStartAddress+0x18>)
    32e8:	4798      	blx	r3
}
    32ea:	bd10      	pop	{r4, pc}
    32ec:	20000378 	.word	0x20000378
    32f0:	2000047b 	.word	0x2000047b
    32f4:	00000241 	.word	0x00000241

000032f8 <writeFlightEndAddress>:




void writeFlightEndAddress() {
    32f8:	b507      	push	{r0, r1, r2, lr}

    u32_t endingAddress = currentAddress;
    32fa:	4b0a      	ldr	r3, [pc, #40]	; (3324 <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    32fc:	aa01      	add	r2, sp, #4
    u32_t endingAddress = currentAddress;
    32fe:	681b      	ldr	r3, [r3, #0]
    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    3300:	7013      	strb	r3, [r2, #0]
    3302:	0a19      	lsrs	r1, r3, #8
    3304:	0c1b      	lsrs	r3, r3, #16
    3306:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    3308:	4b07      	ldr	r3, [pc, #28]	; (3328 <writeFlightEndAddress+0x30>)
    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    330a:	7051      	strb	r1, [r2, #1]
    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    330c:	7818      	ldrb	r0, [r3, #0]
    330e:	2306      	movs	r3, #6
    3310:	4358      	muls	r0, r3
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    3312:	3004      	adds	r0, #4
    3314:	30ff      	adds	r0, #255	; 0xff
    3316:	2103      	movs	r1, #3
    3318:	4b04      	ldr	r3, [pc, #16]	; (332c <writeFlightEndAddress+0x34>)
    331a:	4798      	blx	r3
    delay_ms(10);
    331c:	200a      	movs	r0, #10
    331e:	4b04      	ldr	r3, [pc, #16]	; (3330 <writeFlightEndAddress+0x38>)
    3320:	4798      	blx	r3
}
    3322:	bd07      	pop	{r0, r1, r2, pc}
    3324:	20000480 	.word	0x20000480
    3328:	2000019b 	.word	0x2000019b
    332c:	00000241 	.word	0x00000241
    3330:	00001191 	.word	0x00001191

00003334 <writeGroundLog>:

void writeGroundLog() {
    3334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3336:	2780      	movs	r7, #128	; 0x80
    3338:	4c0d      	ldr	r4, [pc, #52]	; (3370 <writeGroundLog+0x3c>)
    333a:	4e0e      	ldr	r6, [pc, #56]	; (3374 <writeGroundLog+0x40>)
    333c:	037f      	lsls	r7, r7, #13
    u8_t i;

    for (i = 0; i < 10; i++) {
        makePage(SENSOR_LOG_LENGTH, &padSensorBuffer[i][0]);
    333e:	4b0e      	ldr	r3, [pc, #56]	; (3378 <writeGroundLog+0x44>)
    3340:	0021      	movs	r1, r4
    3342:	2023      	movs	r0, #35	; 0x23
    3344:	4798      	blx	r3

        if (pageReady) {
    3346:	4b0d      	ldr	r3, [pc, #52]	; (337c <writeGroundLog+0x48>)
    3348:	781a      	ldrb	r2, [r3, #0]
    334a:	2a00      	cmp	r2, #0
    334c:	d00c      	beq.n	3368 <writeGroundLog+0x34>
            pageReady = false;
    334e:	2200      	movs	r2, #0
    3350:	701a      	strb	r2, [r3, #0]
    3352:	4b0b      	ldr	r3, [pc, #44]	; (3380 <writeGroundLog+0x4c>)
            pinToggle(LedPin);
            AT25SEWritePage(currentAddress,pageToWrite);
    3354:	4d0b      	ldr	r5, [pc, #44]	; (3384 <writeGroundLog+0x50>)
    3356:	61df      	str	r7, [r3, #28]
    3358:	490b      	ldr	r1, [pc, #44]	; (3388 <writeGroundLog+0x54>)
    335a:	4b0c      	ldr	r3, [pc, #48]	; (338c <writeGroundLog+0x58>)
    335c:	6828      	ldr	r0, [r5, #0]
    335e:	4798      	blx	r3
            currentAddress = (currentAddress + 0x100);
    3360:	682b      	ldr	r3, [r5, #0]
    3362:	3301      	adds	r3, #1
    3364:	33ff      	adds	r3, #255	; 0xff
    3366:	602b      	str	r3, [r5, #0]
    3368:	3423      	adds	r4, #35	; 0x23
    for (i = 0; i < 10; i++) {
    336a:	42b4      	cmp	r4, r6
    336c:	d1e7      	bne.n	333e <writeGroundLog+0xa>
        }

    }

}
    336e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3370:	20000484 	.word	0x20000484
    3374:	200005e2 	.word	0x200005e2
    3378:	00002d99 	.word	0x00002d99
    337c:	2000047a 	.word	0x2000047a
    3380:	41004400 	.word	0x41004400
    3384:	20000480 	.word	0x20000480
    3388:	2000037a 	.word	0x2000037a
    338c:	000002a5 	.word	0x000002a5

00003390 <beginFlightLog>:

void beginFlightLog() {
    3390:	b510      	push	{r4, lr}
    writeFlightStartAddress();
    3392:	4b05      	ldr	r3, [pc, #20]	; (33a8 <beginFlightLog+0x18>)
    3394:	4798      	blx	r3
    logFlight( );
    3396:	4b05      	ldr	r3, [pc, #20]	; (33ac <beginFlightLog+0x1c>)
    3398:	4798      	blx	r3
    writeGroundLog();
    339a:	4b05      	ldr	r3, [pc, #20]	; (33b0 <beginFlightLog+0x20>)
    339c:	4798      	blx	r3
    logEvent('L');
    339e:	204c      	movs	r0, #76	; 0x4c
    33a0:	4b04      	ldr	r3, [pc, #16]	; (33b4 <beginFlightLog+0x24>)
    33a2:	4798      	blx	r3

}
    33a4:	bd10      	pop	{r4, pc}
    33a6:	46c0      	nop			; (mov r8, r8)
    33a8:	000032dd 	.word	0x000032dd
    33ac:	00002e71 	.word	0x00002e71
    33b0:	00003335 	.word	0x00003335
    33b4:	00002ed5 	.word	0x00002ed5

000033b8 <findNewFlightStart>:


void findNewFlightStart() {
    33b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    33ba:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    33bc:	0020      	movs	r0, r4
    33be:	4b1d      	ldr	r3, [pc, #116]	; (3434 <findNewFlightStart+0x7c>)
    33c0:	4798      	blx	r3
    33c2:	2800      	cmp	r0, #0
    33c4:	d130      	bne.n	3428 <findNewFlightStart+0x70>
    33c6:	4f1c      	ldr	r7, [pc, #112]	; (3438 <findNewFlightStart+0x80>)
    33c8:	4d1c      	ldr	r5, [pc, #112]	; (343c <findNewFlightStart+0x84>)

            if (flightNumbToCheck > 0) {
    33ca:	2c00      	cmp	r4, #0
    33cc:	d01d      	beq.n	340a <findNewFlightStart+0x52>

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    33ce:	1e60      	subs	r0, r4, #1
    33d0:	4b1b      	ldr	r3, [pc, #108]	; (3440 <findNewFlightStart+0x88>)
    33d2:	b2c0      	uxtb	r0, r0
    33d4:	4798      	blx	r3
    33d6:	0006      	movs	r6, r0
                delay_ms(5);
    33d8:	4b1a      	ldr	r3, [pc, #104]	; (3444 <findNewFlightStart+0x8c>)
    33da:	2005      	movs	r0, #5
    33dc:	4798      	blx	r3

                currentAddress = startAddress;

                flightStartAddress[0] = startAddress >> 0;
                flightStartAddress[1] = startAddress >> 8;
    33de:	0a33      	lsrs	r3, r6, #8
    33e0:	706b      	strb	r3, [r5, #1]
                flightStartAddress[2] = startAddress >> 16;

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    33e2:	2306      	movs	r3, #6
    33e4:	4363      	muls	r3, r4
    33e6:	4a18      	ldr	r2, [pc, #96]	; (3448 <findNewFlightStart+0x90>)
    33e8:	3301      	adds	r3, #1
                currentAddress = startAddress;
    33ea:	603e      	str	r6, [r7, #0]
                flightStartAddress[0] = startAddress >> 0;
    33ec:	702e      	strb	r6, [r5, #0]
                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    33ee:	33ff      	adds	r3, #255	; 0xff
                flightStartAddress[2] = startAddress >> 16;
    33f0:	0c36      	lsrs	r6, r6, #16
    33f2:	70ae      	strb	r6, [r5, #2]
                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    33f4:	8013      	strh	r3, [r2, #0]
                flightAddressLocationInIndex = FLIGHTZEROSTART;

                currentAddress = 0x001000;
                beep(1000);
            }
            flightNumb = flightNumbToCheck;
    33f6:	4b15      	ldr	r3, [pc, #84]	; (344c <findNewFlightStart+0x94>)

            beepDigit(flightNumb);
    33f8:	0020      	movs	r0, r4
            flightNumb = flightNumbToCheck;
    33fa:	701c      	strb	r4, [r3, #0]
            beepDigit(flightNumb);
    33fc:	4b14      	ldr	r3, [pc, #80]	; (3450 <findNewFlightStart+0x98>)
    33fe:	4798      	blx	r3
            delay_ms(1000);
    3400:	20fa      	movs	r0, #250	; 0xfa
    3402:	4b10      	ldr	r3, [pc, #64]	; (3444 <findNewFlightStart+0x8c>)
    3404:	0080      	lsls	r0, r0, #2
    3406:	4798      	blx	r3
            break;
        }
    }
}
    3408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                flightStartAddress[1] = 0x10;
    340a:	2310      	movs	r3, #16
                flightAddressLocationInIndex = FLIGHTZEROSTART;
    340c:	4a0e      	ldr	r2, [pc, #56]	; (3448 <findNewFlightStart+0x90>)
                flightStartAddress[1] = 0x10;
    340e:	706b      	strb	r3, [r5, #1]
                flightAddressLocationInIndex = FLIGHTZEROSTART;
    3410:	33f0      	adds	r3, #240	; 0xf0
    3412:	8013      	strh	r3, [r2, #0]
                currentAddress = 0x001000;
    3414:	2380      	movs	r3, #128	; 0x80
                beep(1000);
    3416:	20fa      	movs	r0, #250	; 0xfa
                currentAddress = 0x001000;
    3418:	015b      	lsls	r3, r3, #5
    341a:	603b      	str	r3, [r7, #0]
                beep(1000);
    341c:	0080      	lsls	r0, r0, #2
    341e:	4b0d      	ldr	r3, [pc, #52]	; (3454 <findNewFlightStart+0x9c>)
                flightStartAddress[0] = 0x00;
    3420:	702c      	strb	r4, [r5, #0]
                flightStartAddress[2] = 0x00;
    3422:	70ac      	strb	r4, [r5, #2]
                beep(1000);
    3424:	4798      	blx	r3
    3426:	e7e6      	b.n	33f6 <findNewFlightStart+0x3e>
    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    3428:	3401      	adds	r4, #1
    342a:	b2e4      	uxtb	r4, r4
    342c:	2c14      	cmp	r4, #20
    342e:	d1c5      	bne.n	33bc <findNewFlightStart+0x4>
    3430:	e7ea      	b.n	3408 <findNewFlightStart+0x50>
    3432:	46c0      	nop			; (mov r8, r8)
    3434:	000032c1 	.word	0x000032c1
    3438:	20000480 	.word	0x20000480
    343c:	2000047b 	.word	0x2000047b
    3440:	00003295 	.word	0x00003295
    3444:	00001191 	.word	0x00001191
    3448:	20000378 	.word	0x20000378
    344c:	2000019b 	.word	0x2000019b
    3450:	00000edd 	.word	0x00000edd
    3454:	00000e99 	.word	0x00000e99

00003458 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    3458:	4b01      	ldr	r3, [pc, #4]	; (3460 <takeSample+0x8>)
    345a:	7818      	ldrb	r0, [r3, #0]
}
    345c:	4770      	bx	lr
    345e:	46c0      	nop			; (mov r8, r8)
    3460:	200001ad 	.word	0x200001ad

00003464 <pullSample>:

void pullSample() {
    SampleBool = true;
    3464:	2201      	movs	r2, #1
    3466:	4b01      	ldr	r3, [pc, #4]	; (346c <pullSample+0x8>)
    3468:	701a      	strb	r2, [r3, #0]
}
    346a:	4770      	bx	lr
    346c:	200001ad 	.word	0x200001ad

00003470 <sampleTick>:
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    3470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    SampleBool = false;
    3472:	2200      	movs	r2, #0
    3474:	4ba2      	ldr	r3, [pc, #648]	; (3700 <sampleTick+0x290>)

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    3476:	4fa3      	ldr	r7, [pc, #652]	; (3704 <sampleTick+0x294>)
    SampleBool = false;
    3478:	701a      	strb	r2, [r3, #0]
    sample.sampleTick = millis();
    347a:	4ba3      	ldr	r3, [pc, #652]	; (3708 <sampleTick+0x298>)
    u32_t lastTick = sample.sampleTick;
    347c:	687c      	ldr	r4, [r7, #4]
    sample.sampleTick = millis();
    347e:	4798      	blx	r3
    3480:	6078      	str	r0, [r7, #4]
    sample.tickDelta = sample.sampleTick - lastTick;
    3482:	1b00      	subs	r0, r0, r4

    sample.voltage.batV = adc_read(senseBatPin);
    3484:	4ca1      	ldr	r4, [pc, #644]	; (370c <sampleTick+0x29c>)
    sample.tickDelta = sample.sampleTick - lastTick;
    3486:	8038      	strh	r0, [r7, #0]
    sample.voltage.batV = adc_read(senseBatPin);
    3488:	7863      	ldrb	r3, [r4, #1]
    348a:	7820      	ldrb	r0, [r4, #0]
    348c:	021b      	lsls	r3, r3, #8
    348e:	4303      	orrs	r3, r0
    3490:	78a0      	ldrb	r0, [r4, #2]
    3492:	4e9f      	ldr	r6, [pc, #636]	; (3710 <sampleTick+0x2a0>)
    3494:	0400      	lsls	r0, r0, #16
    3496:	4303      	orrs	r3, r0
    3498:	78e0      	ldrb	r0, [r4, #3]
    349a:	7921      	ldrb	r1, [r4, #4]
    349c:	0600      	lsls	r0, r0, #24
    349e:	4318      	orrs	r0, r3
    34a0:	47b0      	blx	r6

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    34a2:	4b9c      	ldr	r3, [pc, #624]	; (3714 <sampleTick+0x2a4>)
    sample.voltage.batV = adc_read(senseBatPin);
    34a4:	8138      	strh	r0, [r7, #8]
    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    34a6:	4798      	blx	r3
    34a8:	4a9b      	ldr	r2, [pc, #620]	; (3718 <sampleTick+0x2a8>)
    34aa:	4d9c      	ldr	r5, [pc, #624]	; (371c <sampleTick+0x2ac>)
    34ac:	4b9c      	ldr	r3, [pc, #624]	; (3720 <sampleTick+0x2b0>)
    34ae:	47a8      	blx	r5
    34b0:	4b9c      	ldr	r3, [pc, #624]	; (3724 <sampleTick+0x2b4>)
    34b2:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    34b4:	79a3      	ldrb	r3, [r4, #6]
    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    34b6:	60f8      	str	r0, [r7, #12]
    sample.voltage.senseA = adc_read(senseAPin);
    34b8:	7960      	ldrb	r0, [r4, #5]
    34ba:	021b      	lsls	r3, r3, #8
    34bc:	4303      	orrs	r3, r0
    34be:	79e0      	ldrb	r0, [r4, #7]
    34c0:	7a61      	ldrb	r1, [r4, #9]
    34c2:	0400      	lsls	r0, r0, #16
    34c4:	4303      	orrs	r3, r0
    34c6:	7a20      	ldrb	r0, [r4, #8]
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    34c8:	4d97      	ldr	r5, [pc, #604]	; (3728 <sampleTick+0x2b8>)
    sample.voltage.senseA = adc_read(senseAPin);
    34ca:	0600      	lsls	r0, r0, #24
    34cc:	4318      	orrs	r0, r3
    34ce:	47b0      	blx	r6
    sample.voltage.senseB = adc_read(senseBPin);
    34d0:	7ae3      	ldrb	r3, [r4, #11]
    sample.voltage.senseA = adc_read(senseAPin);
    34d2:	8238      	strh	r0, [r7, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    34d4:	7aa0      	ldrb	r0, [r4, #10]
    34d6:	021b      	lsls	r3, r3, #8
    34d8:	4303      	orrs	r3, r0
    34da:	7b20      	ldrb	r0, [r4, #12]
    34dc:	7ba1      	ldrb	r1, [r4, #14]
    34de:	0400      	lsls	r0, r0, #16
    34e0:	4303      	orrs	r3, r0
    34e2:	7b60      	ldrb	r0, [r4, #13]
    34e4:	0600      	lsls	r0, r0, #24
    34e6:	4318      	orrs	r0, r3
    34e8:	47b0      	blx	r6
    sample.voltage.senseC = adc_read(senseCPin);
    34ea:	7c23      	ldrb	r3, [r4, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    34ec:	8278      	strh	r0, [r7, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    34ee:	7be0      	ldrb	r0, [r4, #15]
    34f0:	021b      	lsls	r3, r3, #8
    34f2:	4303      	orrs	r3, r0
    34f4:	7c60      	ldrb	r0, [r4, #17]
    34f6:	7ce1      	ldrb	r1, [r4, #19]
    34f8:	0400      	lsls	r0, r0, #16
    34fa:	4303      	orrs	r3, r0
    34fc:	7ca0      	ldrb	r0, [r4, #18]
    34fe:	0600      	lsls	r0, r0, #24
    3500:	4318      	orrs	r0, r3
    3502:	47b0      	blx	r6
    sample.voltage.senseD = adc_read(senseDPin);
    3504:	7d63      	ldrb	r3, [r4, #21]
    sample.voltage.senseC = adc_read(senseCPin);
    3506:	82b8      	strh	r0, [r7, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    3508:	7d20      	ldrb	r0, [r4, #20]
    350a:	021b      	lsls	r3, r3, #8
    350c:	4303      	orrs	r3, r0
    350e:	7da0      	ldrb	r0, [r4, #22]
    3510:	7e21      	ldrb	r1, [r4, #24]
    3512:	0400      	lsls	r0, r0, #16
    3514:	4303      	orrs	r3, r0
    3516:	7de0      	ldrb	r0, [r4, #23]
    3518:	0600      	lsls	r0, r0, #24
    351a:	4318      	orrs	r0, r3
    351c:	47b0      	blx	r6
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    351e:	2310      	movs	r3, #16
    sample.voltage.senseD = adc_read(senseDPin);
    3520:	82f8      	strh	r0, [r7, #22]
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    3522:	88aa      	ldrh	r2, [r5, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    3524:	7e60      	ldrb	r0, [r4, #25]
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    3526:	4313      	orrs	r3, r2
    3528:	80ab      	strh	r3, [r5, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;
    352a:	2304      	movs	r3, #4
    352c:	70ab      	strb	r3, [r5, #2]
    sample.analogRaw = adc_read(analogAccelPin);
    352e:	7ea3      	ldrb	r3, [r4, #26]
    3530:	7f61      	ldrb	r1, [r4, #29]
    3532:	021b      	lsls	r3, r3, #8
    3534:	4303      	orrs	r3, r0
    3536:	7ee0      	ldrb	r0, [r4, #27]
    3538:	0400      	lsls	r0, r0, #16
    353a:	4303      	orrs	r3, r0
    353c:	7f20      	ldrb	r0, [r4, #28]
    353e:	0600      	lsls	r0, r0, #24
    3540:	4318      	orrs	r0, r3
    3542:	47b0      	blx	r6
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    3544:	4b79      	ldr	r3, [pc, #484]	; (372c <sampleTick+0x2bc>)
    sample.analogRaw = adc_read(analogAccelPin);
    3546:	8338      	strh	r0, [r7, #24]
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    3548:	18c0      	adds	r0, r0, r3
    354a:	4b72      	ldr	r3, [pc, #456]	; (3714 <sampleTick+0x2a4>)
    354c:	4798      	blx	r3
    354e:	4a78      	ldr	r2, [pc, #480]	; (3730 <sampleTick+0x2c0>)
    3550:	4c72      	ldr	r4, [pc, #456]	; (371c <sampleTick+0x2ac>)
    3552:	4b78      	ldr	r3, [pc, #480]	; (3734 <sampleTick+0x2c4>)
    3554:	47a0      	blx	r4
    3556:	4b73      	ldr	r3, [pc, #460]	; (3724 <sampleTick+0x2b4>)
    3558:	4798      	blx	r3



    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    355a:	2300      	movs	r3, #0
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    355c:	2680      	movs	r6, #128	; 0x80
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    355e:	61f8      	str	r0, [r7, #28]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    3560:	70ab      	strb	r3, [r5, #2]
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_12BIT;
    3562:	88ab      	ldrh	r3, [r5, #4]
    3564:	01f6      	lsls	r6, r6, #7
    3566:	b29b      	uxth	r3, r3
    3568:	80ab      	strh	r3, [r5, #4]
    356a:	4d73      	ldr	r5, [pc, #460]	; (3738 <sampleTick+0x2c8>)

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    356c:	2150      	movs	r1, #80	; 0x50
    356e:	4c73      	ldr	r4, [pc, #460]	; (373c <sampleTick+0x2cc>)
    3570:	616e      	str	r6, [r5, #20]
    3572:	2002      	movs	r0, #2
    3574:	47a0      	blx	r4
    pinHigh(cs_baro);
    delay_us(600);
    3576:	2096      	movs	r0, #150	; 0x96
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    3578:	61ae      	str	r6, [r5, #24]
    357a:	0080      	lsls	r0, r0, #2
    357c:	4b70      	ldr	r3, [pc, #448]	; (3740 <sampleTick+0x2d0>)
    357e:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    3580:	4b70      	ldr	r3, [pc, #448]	; (3744 <sampleTick+0x2d4>)
    3582:	4798      	blx	r3

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    3584:	2140      	movs	r1, #64	; 0x40
    uint32_t tempRaw = readMS5803AdcResults();
    3586:	9001      	str	r0, [sp, #4]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    3588:	616e      	str	r6, [r5, #20]
    spiDataOut(BARO_SPI, 0x40);
    358a:	2002      	movs	r0, #2
    358c:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    358e:	61ae      	str	r6, [r5, #24]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    3590:	2680      	movs	r6, #128	; 0x80
    3592:	4b6d      	ldr	r3, [pc, #436]	; (3748 <sampleTick+0x2d8>)
    3594:	00f6      	lsls	r6, r6, #3

    u8_t byteOne;
    u8_t byteTwo;
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    3596:	2182      	movs	r1, #130	; 0x82
    3598:	601e      	str	r6, [r3, #0]
    359a:	2000      	movs	r0, #0
    359c:	47a0      	blx	r4
    byteOne = spiDataIn(ACCEL_SPI);
    359e:	4c6b      	ldr	r4, [pc, #428]	; (374c <sampleTick+0x2dc>)
    35a0:	2000      	movs	r0, #0
    35a2:	47a0      	blx	r4
    35a4:	9000      	str	r0, [sp, #0]
    byteTwo = spiDataIn(ACCEL_SPI);
    35a6:	2000      	movs	r0, #0
    35a8:	47a0      	blx	r4
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    35aa:	9b00      	ldr	r3, [sp, #0]
    35ac:	0200      	lsls	r0, r0, #8
    35ae:	4303      	orrs	r3, r0
    byteOne = spiDataIn(ACCEL_SPI);
    35b0:	2000      	movs	r0, #0
    sample.accelXint = twosComp(byteOne,byteTwo);
    35b2:	843b      	strh	r3, [r7, #32]
    byteOne = spiDataIn(ACCEL_SPI);
    35b4:	47a0      	blx	r4
    35b6:	9000      	str	r0, [sp, #0]
    byteTwo = spiDataIn(ACCEL_SPI);
    35b8:	2000      	movs	r0, #0
    35ba:	47a0      	blx	r4
    u16_t comp = byteOne | (byteTwo << 8);
    35bc:	9b00      	ldr	r3, [sp, #0]
    35be:	0200      	lsls	r0, r0, #8
    35c0:	4303      	orrs	r3, r0
    byteOne = spiDataIn(ACCEL_SPI);
    35c2:	2000      	movs	r0, #0
    sample.accelYint = twosComp(byteOne,byteTwo);
    35c4:	853b      	strh	r3, [r7, #40]	; 0x28
    byteOne = spiDataIn(ACCEL_SPI);
    35c6:	47a0      	blx	r4
    35c8:	9000      	str	r0, [sp, #0]
    byteTwo = spiDataIn(ACCEL_SPI);
    35ca:	2000      	movs	r0, #0
    35cc:	47a0      	blx	r4
    u16_t comp = byteOne | (byteTwo << 8);
    35ce:	9b00      	ldr	r3, [sp, #0]
    35d0:	0204      	lsls	r4, r0, #8
    35d2:	4323      	orrs	r3, r4
    35d4:	b21c      	sxth	r4, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    35d6:	4b5e      	ldr	r3, [pc, #376]	; (3750 <sampleTick+0x2e0>)
    35d8:	601e      	str	r6, [r3, #0]
    if (altimeter.pointingUp) {
    35da:	4b5e      	ldr	r3, [pc, #376]	; (3754 <sampleTick+0x2e4>)
    35dc:	795a      	ldrb	r2, [r3, #5]
    35de:	9500      	str	r5, [sp, #0]
    35e0:	2120      	movs	r1, #32
    35e2:	5e7b      	ldrsh	r3, [r7, r1]
    35e4:	2a00      	cmp	r2, #0
    35e6:	d000      	beq.n	35ea <sampleTick+0x17a>
        sample.accelXint =  -sample.accelXint >> 4;
    35e8:	425b      	negs	r3, r3
        sample.accelXint =  sample.accelXint >> 4;
    35ea:	111b      	asrs	r3, r3, #4
    35ec:	843b      	strh	r3, [r7, #32]
    sample.accelYint =  sample.accelYint >> 4;
    35ee:	2328      	movs	r3, #40	; 0x28
    35f0:	5efd      	ldrsh	r5, [r7, r3]
    sample.accelZint =  sample.accelZint >> 4;
    35f2:	1124      	asrs	r4, r4, #4
    sample.accelYint =  sample.accelYint >> 4;
    35f4:	112d      	asrs	r5, r5, #4
    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    35f6:	2320      	movs	r3, #32
    35f8:	5ef8      	ldrsh	r0, [r7, r3]
    sample.accelYint =  sample.accelYint >> 4;
    35fa:	853d      	strh	r5, [r7, #40]	; 0x28
    sample.accelZint =  sample.accelZint >> 4;
    35fc:	863c      	strh	r4, [r7, #48]	; 0x30
    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    35fe:	4b45      	ldr	r3, [pc, #276]	; (3714 <sampleTick+0x2a4>)
    3600:	4798      	blx	r3
    3602:	23fe      	movs	r3, #254	; 0xfe
    3604:	4e45      	ldr	r6, [pc, #276]	; (371c <sampleTick+0x2ac>)
    3606:	2200      	movs	r2, #0
    3608:	059b      	lsls	r3, r3, #22
    360a:	47b0      	blx	r6
    360c:	4b45      	ldr	r3, [pc, #276]	; (3724 <sampleTick+0x2b4>)
    360e:	4798      	blx	r3
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    3610:	4b40      	ldr	r3, [pc, #256]	; (3714 <sampleTick+0x2a4>)
    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    3612:	6278      	str	r0, [r7, #36]	; 0x24
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    3614:	0028      	movs	r0, r5
    3616:	4798      	blx	r3
    3618:	23fe      	movs	r3, #254	; 0xfe
    361a:	2200      	movs	r2, #0
    361c:	059b      	lsls	r3, r3, #22
    361e:	47b0      	blx	r6
    3620:	4b40      	ldr	r3, [pc, #256]	; (3724 <sampleTick+0x2b4>)
    3622:	4798      	blx	r3
    sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    3624:	4b3b      	ldr	r3, [pc, #236]	; (3714 <sampleTick+0x2a4>)
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    3626:	62f8      	str	r0, [r7, #44]	; 0x2c
    sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    3628:	0020      	movs	r0, r4
    362a:	4798      	blx	r3
    362c:	23fe      	movs	r3, #254	; 0xfe
    362e:	2200      	movs	r2, #0
    3630:	059b      	lsls	r3, r3, #22
    3632:	47b0      	blx	r6
    3634:	4b3b      	ldr	r3, [pc, #236]	; (3724 <sampleTick+0x2b4>)
    3636:	4798      	blx	r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    3638:	2380      	movs	r3, #128	; 0x80
    363a:	9a00      	ldr	r2, [sp, #0]
    363c:	00db      	lsls	r3, r3, #3
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    363e:	2182      	movs	r1, #130	; 0x82
    sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    3640:	6378      	str	r0, [r7, #52]	; 0x34
    3642:	6153      	str	r3, [r2, #20]
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    3644:	2000      	movs	r0, #0
    3646:	4b3d      	ldr	r3, [pc, #244]	; (373c <sampleTick+0x2cc>)
    3648:	4798      	blx	r3
    byteOne = spiDataIn(GYRO_SPI);
    364a:	4c40      	ldr	r4, [pc, #256]	; (374c <sampleTick+0x2dc>)
    364c:	2000      	movs	r0, #0
    364e:	47a0      	blx	r4
    3650:	0005      	movs	r5, r0
    byteTwo = spiDataIn(GYRO_SPI);
    3652:	2000      	movs	r0, #0
    3654:	47a0      	blx	r4
    u16_t comp = byteOne | (byteTwo << 8);
    3656:	0200      	lsls	r0, r0, #8
    3658:	4305      	orrs	r5, r0
    byteOne = spiDataIn(GYRO_SPI);
    365a:	2000      	movs	r0, #0
    sample.gyroXint = twosComp(byteOne,byteTwo);
    365c:	873d      	strh	r5, [r7, #56]	; 0x38
    byteOne = spiDataIn(GYRO_SPI);
    365e:	47a0      	blx	r4
    3660:	0005      	movs	r5, r0
    byteTwo = spiDataIn(GYRO_SPI);
    3662:	2000      	movs	r0, #0
    3664:	47a0      	blx	r4
    u16_t comp = byteOne | (byteTwo << 8);
    3666:	0200      	lsls	r0, r0, #8
    3668:	4328      	orrs	r0, r5
    sample.gyroYint = twosComp(byteOne,byteTwo);
    366a:	1cbd      	adds	r5, r7, #2
    366c:	87e8      	strh	r0, [r5, #62]	; 0x3e
    byteOne = spiDataIn(GYRO_SPI);
    366e:	2000      	movs	r0, #0
    3670:	47a0      	blx	r4
    3672:	0006      	movs	r6, r0
    byteTwo = spiDataIn(GYRO_SPI);
    3674:	2000      	movs	r0, #0
    3676:	47a0      	blx	r4
    3678:	0003      	movs	r3, r0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    367a:	2280      	movs	r2, #128	; 0x80
    u16_t comp = byteOne | (byteTwo << 8);
    367c:	021b      	lsls	r3, r3, #8
    367e:	431e      	orrs	r6, r3
    sample.gyroZint = sample.gyroZint >> 4;
    3680:	003b      	movs	r3, r7
    3682:	9900      	ldr	r1, [sp, #0]
    3684:	00d2      	lsls	r2, r2, #3
    3686:	618a      	str	r2, [r1, #24]
    sample.gyroXint = sample.gyroXint >> 4;
    3688:	2238      	movs	r2, #56	; 0x38
    368a:	5eb8      	ldrsh	r0, [r7, r2]
    sample.gyroZint = sample.gyroZint >> 4;
    368c:	b236      	sxth	r6, r6
    sample.gyroXint = sample.gyroXint >> 4;
    368e:	1100      	asrs	r0, r0, #4
    3690:	8738      	strh	r0, [r7, #56]	; 0x38
    sample.gyroYint = sample.gyroYint >> 4;
    3692:	223e      	movs	r2, #62	; 0x3e
    3694:	5eac      	ldrsh	r4, [r5, r2]
    sample.gyroZint = sample.gyroZint >> 4;
    3696:	1136      	asrs	r6, r6, #4
    sample.gyroYint = sample.gyroYint >> 4;
    3698:	1124      	asrs	r4, r4, #4
    sample.gyroZint = sample.gyroZint >> 4;
    369a:	3348      	adds	r3, #72	; 0x48
    369c:	801e      	strh	r6, [r3, #0]
    sample.gyroYint = sample.gyroYint >> 4;
    369e:	87ec      	strh	r4, [r5, #62]	; 0x3e
    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    36a0:	4b1c      	ldr	r3, [pc, #112]	; (3714 <sampleTick+0x2a4>)
    36a2:	4798      	blx	r3
    36a4:	23fe      	movs	r3, #254	; 0xfe
    36a6:	4d1d      	ldr	r5, [pc, #116]	; (371c <sampleTick+0x2ac>)
    36a8:	2200      	movs	r2, #0
    36aa:	059b      	lsls	r3, r3, #22
    36ac:	47a8      	blx	r5
    36ae:	4b1d      	ldr	r3, [pc, #116]	; (3724 <sampleTick+0x2b4>)
    36b0:	4798      	blx	r3
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    36b2:	4b18      	ldr	r3, [pc, #96]	; (3714 <sampleTick+0x2a4>)
    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    36b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    36b6:	0020      	movs	r0, r4
    36b8:	4798      	blx	r3
    36ba:	23fe      	movs	r3, #254	; 0xfe
    36bc:	2200      	movs	r2, #0
    36be:	059b      	lsls	r3, r3, #22
    36c0:	47a8      	blx	r5
    36c2:	4b18      	ldr	r3, [pc, #96]	; (3724 <sampleTick+0x2b4>)
    36c4:	4798      	blx	r3
    sample.gyroZ =  sample.gyroZint * BMI055_GYRO_2000DS_DIV;
    36c6:	4b13      	ldr	r3, [pc, #76]	; (3714 <sampleTick+0x2a4>)
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    36c8:	6478      	str	r0, [r7, #68]	; 0x44
    sample.gyroZ =  sample.gyroZint * BMI055_GYRO_2000DS_DIV;
    36ca:	0030      	movs	r0, r6
    36cc:	4798      	blx	r3
    36ce:	23fe      	movs	r3, #254	; 0xfe
    36d0:	2200      	movs	r2, #0
    36d2:	059b      	lsls	r3, r3, #22
    36d4:	47a8      	blx	r5
    36d6:	4b13      	ldr	r3, [pc, #76]	; (3724 <sampleTick+0x2b4>)
    36d8:	4798      	blx	r3
    36da:	64f8      	str	r0, [r7, #76]	; 0x4c
    delay_us(400);
    36dc:	20c8      	movs	r0, #200	; 0xc8
    36de:	4b18      	ldr	r3, [pc, #96]	; (3740 <sampleTick+0x2d0>)
    36e0:	0040      	lsls	r0, r0, #1
    36e2:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    36e4:	4b17      	ldr	r3, [pc, #92]	; (3744 <sampleTick+0x2d4>)
    36e6:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    36e8:	4a1b      	ldr	r2, [pc, #108]	; (3758 <sampleTick+0x2e8>)
    36ea:	9901      	ldr	r1, [sp, #4]
    36ec:	4b1b      	ldr	r3, [pc, #108]	; (375c <sampleTick+0x2ec>)
    36ee:	4c1c      	ldr	r4, [pc, #112]	; (3760 <sampleTick+0x2f0>)
    36f0:	47a0      	blx	r4
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
    36f2:	6d38      	ldr	r0, [r7, #80]	; 0x50
    36f4:	4b1b      	ldr	r3, [pc, #108]	; (3764 <sampleTick+0x2f4>)
    36f6:	4798      	blx	r3
    36f8:	65b8      	str	r0, [r7, #88]	; 0x58
    36fa:	65f9      	str	r1, [r7, #92]	; 0x5c
}
    36fc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    36fe:	46c0      	nop			; (mov r8, r8)
    3700:	200001ad 	.word	0x200001ad
    3704:	200005f0 	.word	0x200005f0
    3708:	000011d9 	.word	0x000011d9
    370c:	0000725c 	.word	0x0000725c
    3710:	00000e2d 	.word	0x00000e2d
    3714:	00006f21 	.word	0x00006f21
    3718:	a97e132b 	.word	0xa97e132b
    371c:	0000634d 	.word	0x0000634d
    3720:	3f65379f 	.word	0x3f65379f
    3724:	000070b9 	.word	0x000070b9
    3728:	42004000 	.word	0x42004000
    372c:	ffff41c9 	.word	0xffff41c9
    3730:	abb44e51 	.word	0xabb44e51
    3734:	3f73f290 	.word	0x3f73f290
    3738:	41004400 	.word	0x41004400
    373c:	0000388d 	.word	0x0000388d
    3740:	00001161 	.word	0x00001161
    3744:	000003b5 	.word	0x000003b5
    3748:	41004494 	.word	0x41004494
    374c:	000038a5 	.word	0x000038a5
    3750:	41004498 	.word	0x41004498
    3754:	200001a0 	.word	0x200001a0
    3758:	20000644 	.word	0x20000644
    375c:	20000640 	.word	0x20000640
    3760:	000003f5 	.word	0x000003f5
    3764:	0000049d 	.word	0x0000049d

00003768 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    3768:	b570      	push	{r4, r5, r6, lr}
    376a:	0005      	movs	r5, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    376c:	2301      	movs	r3, #1
    376e:	1cae      	adds	r6, r5, #2
    3770:	40b3      	lsls	r3, r6
void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    3772:	000c      	movs	r4, r1
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    3774:	490b      	ldr	r1, [pc, #44]	; (37a4 <sercomClockEnable+0x3c>)
    3776:	6a08      	ldr	r0, [r1, #32]
    3778:	4303      	orrs	r3, r0
    377a:	620b      	str	r3, [r1, #32]


    if (clock_channel != 0) {
    377c:	2c00      	cmp	r4, #0
    377e:	d003      	beq.n	3788 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    3780:	2107      	movs	r1, #7
    3782:	0020      	movs	r0, r4
    3784:	4b08      	ldr	r3, [pc, #32]	; (37a8 <sercomClockEnable+0x40>)
    3786:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(clock_channel) |
    3788:	23f0      	movs	r3, #240	; 0xf0
    378a:	0224      	lsls	r4, r4, #8
    378c:	011b      	lsls	r3, r3, #4
    378e:	401c      	ands	r4, r3
    3790:	2380      	movs	r3, #128	; 0x80
    3792:	01db      	lsls	r3, r3, #7
    3794:	431c      	orrs	r4, r3
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
    3796:	233f      	movs	r3, #63	; 0x3f
    3798:	3514      	adds	r5, #20
    379a:	401d      	ands	r5, r3
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    379c:	4b03      	ldr	r3, [pc, #12]	; (37ac <sercomClockEnable+0x44>)
                        GCLK_CLKCTRL_GEN(clock_channel) |
    379e:	4325      	orrs	r5, r4
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    37a0:	805d      	strh	r5, [r3, #2]
}
    37a2:	bd70      	pop	{r4, r5, r6, pc}
    37a4:	40000400 	.word	0x40000400
    37a8:	0000108d 	.word	0x0000108d
    37ac:	40000c00 	.word	0x40000c00

000037b0 <sercomReset>:
    return (Sercom*) (0x42000800U + id * 1024);
    37b0:	4b04      	ldr	r3, [pc, #16]	; (37c4 <sercomReset+0x14>)
    37b2:	0280      	lsls	r0, r0, #10
    37b4:	18c0      	adds	r0, r0, r3
//                         GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    37b6:	2301      	movs	r3, #1
    37b8:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    37ba:	6802      	ldr	r2, [r0, #0]
    37bc:	421a      	tst	r2, r3
    37be:	d1fc      	bne.n	37ba <sercomReset+0xa>
}
    37c0:	4770      	bx	lr
    37c2:	46c0      	nop			; (mov r8, r8)
    37c4:	42000800 	.word	0x42000800

000037c8 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    37c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    37ca:	0004      	movs	r4, r0
    37cc:	9300      	str	r3, [sp, #0]
    37ce:	ab08      	add	r3, sp, #32
    37d0:	781b      	ldrb	r3, [r3, #0]
    37d2:	0016      	movs	r6, r2
    37d4:	9301      	str	r3, [sp, #4]
    37d6:	ab09      	add	r3, sp, #36	; 0x24
    37d8:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    37da:	4b12      	ldr	r3, [pc, #72]	; (3824 <sercomSpiMasterInit+0x5c>)
void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    37dc:	000d      	movs	r5, r1
    sercomReset(id);
    37de:	4798      	blx	r3
    37e0:	4b11      	ldr	r3, [pc, #68]	; (3828 <sercomSpiMasterInit+0x60>)
    37e2:	02a4      	lsls	r4, r4, #10
    37e4:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    37e6:	2380      	movs	r3, #128	; 0x80
    37e8:	029b      	lsls	r3, r3, #10
    37ea:	6063      	str	r3, [r4, #4]
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    37ec:	23c0      	movs	r3, #192	; 0xc0
    37ee:	052d      	lsls	r5, r5, #20
    37f0:	039b      	lsls	r3, r3, #14
    37f2:	401d      	ands	r5, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
    37f4:	23c0      	movs	r3, #192	; 0xc0
    37f6:	0436      	lsls	r6, r6, #16
    37f8:	029b      	lsls	r3, r3, #10
    37fa:	401e      	ands	r6, r3
    37fc:	230e      	movs	r3, #14
    37fe:	431e      	orrs	r6, r3
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    3800:	9b00      	ldr	r3, [sp, #0]
    3802:	4335      	orrs	r5, r6
    3804:	1e5a      	subs	r2, r3, #1
    3806:	4193      	sbcs	r3, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    3808:	9a01      	ldr	r2, [sp, #4]
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    380a:	075b      	lsls	r3, r3, #29
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    380c:	1e51      	subs	r1, r2, #1
    380e:	418a      	sbcs	r2, r1
    3810:	431d      	orrs	r5, r3
    3812:	0712      	lsls	r2, r2, #28
    3814:	4315      	orrs	r5, r2
    sercom(id)->SPI.BAUD.reg = baud;
    3816:	7327      	strb	r7, [r4, #12]
        = SERCOM_SPI_CTRLA_ENABLE
    3818:	6025      	str	r5, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    381a:	69e3      	ldr	r3, [r4, #28]
    381c:	075b      	lsls	r3, r3, #29
    381e:	d4fc      	bmi.n	381a <sercomSpiMasterInit+0x52>

    SPI_sync(id);
}
    3820:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3822:	46c0      	nop			; (mov r8, r8)
    3824:	000037b1 	.word	0x000037b1
    3828:	42000800 	.word	0x42000800

0000382c <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    382c:	b570      	push	{r4, r5, r6, lr}
    382e:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    3830:	4b0c      	ldr	r3, [pc, #48]	; (3864 <sercomUartInit+0x38>)
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    3832:	000d      	movs	r5, r1
    3834:	0014      	movs	r4, r2
    sercomReset(id);
    3836:	4798      	blx	r3
    return (Sercom*) (0x42000800U + id * 1024);
    3838:	4b0b      	ldr	r3, [pc, #44]	; (3868 <sercomUartInit+0x3c>)
    383a:	02b0      	lsls	r0, r6, #10
    383c:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    383e:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    3840:	22c0      	movs	r2, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    3842:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    3844:	4b09      	ldr	r3, [pc, #36]	; (386c <sercomUartInit+0x40>)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    3846:	0392      	lsls	r2, r2, #14
    sercom(id)->USART.BAUD.reg = 45403;
    3848:	8183      	strh	r3, [r0, #12]
        = SERCOM_USART_CTRLB_RXEN
    384a:	23c0      	movs	r3, #192	; 0xc0
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    384c:	052d      	lsls	r5, r5, #20
    384e:	4015      	ands	r5, r2
    3850:	4a07      	ldr	r2, [pc, #28]	; (3870 <sercomUartInit+0x44>)
        = SERCOM_USART_CTRLB_RXEN
    3852:	029b      	lsls	r3, r3, #10
          | SERCOM_USART_CTRLA_TXPO(txpo)
    3854:	0424      	lsls	r4, r4, #16
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    3856:	432a      	orrs	r2, r5
          | SERCOM_USART_CTRLA_TXPO(txpo)
    3858:	401c      	ands	r4, r3
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    385a:	4322      	orrs	r2, r4
        = SERCOM_USART_CTRLB_RXEN
    385c:	6043      	str	r3, [r0, #4]
        = SERCOM_USART_CTRLA_ENABLE
    385e:	6002      	str	r2, [r0, #0]
}
    3860:	bd70      	pop	{r4, r5, r6, pc}
    3862:	46c0      	nop			; (mov r8, r8)
    3864:	000037b1 	.word	0x000037b1
    3868:	42000800 	.word	0x42000800
    386c:	ffffb15b 	.word	0xffffb15b
    3870:	40000006 	.word	0x40000006

00003874 <spiDataTransfer>:
    3874:	4b04      	ldr	r3, [pc, #16]	; (3888 <spiDataTransfer+0x14>)
    3876:	0280      	lsls	r0, r0, #10
    3878:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    387a:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    387c:	7e03      	ldrb	r3, [r0, #24]
    387e:	075b      	lsls	r3, r3, #29
    3880:	d5fc      	bpl.n	387c <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    3882:	6a80      	ldr	r0, [r0, #40]	; 0x28
    3884:	b2c0      	uxtb	r0, r0
}
    3886:	4770      	bx	lr
    3888:	42000800 	.word	0x42000800

0000388c <spiDataOut>:
    388c:	4b04      	ldr	r3, [pc, #16]	; (38a0 <spiDataOut+0x14>)
    388e:	0280      	lsls	r0, r0, #10
    3890:	18c0      	adds	r0, r0, r3

void spiDataOut(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    3892:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    3894:	7e03      	ldrb	r3, [r0, #24]
    3896:	075b      	lsls	r3, r3, #29
    3898:	d5fc      	bpl.n	3894 <spiDataOut+0x8>
    u8_t dummy = sercom(id)->SPI.DATA.reg;
    389a:	6a83      	ldr	r3, [r0, #40]	; 0x28
}
    389c:	4770      	bx	lr
    389e:	46c0      	nop			; (mov r8, r8)
    38a0:	42000800 	.word	0x42000800

000038a4 <spiDataIn>:
    38a4:	4b05      	ldr	r3, [pc, #20]	; (38bc <spiDataIn+0x18>)
    38a6:	0280      	lsls	r0, r0, #10
    38a8:	18c0      	adds	r0, r0, r3

u8_t spiDataIn(SercomId id) {
    sercom(id)->SPI.DATA.reg = 0xFF;
    38aa:	23ff      	movs	r3, #255	; 0xff
    38ac:	6283      	str	r3, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    38ae:	7e03      	ldrb	r3, [r0, #24]
    38b0:	075b      	lsls	r3, r3, #29
    38b2:	d5fc      	bpl.n	38ae <spiDataIn+0xa>
    return sercom(id)->SPI.DATA.reg;
    38b4:	6a80      	ldr	r0, [r0, #40]	; 0x28
    38b6:	b2c0      	uxtb	r0, r0
}
    38b8:	4770      	bx	lr
    38ba:	46c0      	nop			; (mov r8, r8)
    38bc:	42000800 	.word	0x42000800

000038c0 <usartDataOut>:
    38c0:	4b04      	ldr	r3, [pc, #16]	; (38d4 <usartDataOut+0x14>)
    38c2:	0280      	lsls	r0, r0, #10
    38c4:	18c0      	adds	r0, r0, r3

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    38c6:	b289      	uxth	r1, r1
    38c8:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    38ca:	7e03      	ldrb	r3, [r0, #24]
    38cc:	07db      	lsls	r3, r3, #31
    38ce:	d5fc      	bpl.n	38ca <usartDataOut+0xa>
}
    38d0:	4770      	bx	lr
    38d2:	46c0      	nop			; (mov r8, r8)
    38d4:	42000800 	.word	0x42000800

000038d8 <usartDataIn>:
    38d8:	4b02      	ldr	r3, [pc, #8]	; (38e4 <usartDataIn+0xc>)
    38da:	0280      	lsls	r0, r0, #10
    38dc:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    38de:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    38e0:	b2c0      	uxtb	r0, r0
}
    38e2:	4770      	bx	lr
    38e4:	42000800 	.word	0x42000800

000038e8 <findMainAltitude>:
#include <boardDefines.h>


void findMainAltitude() {

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    38e8:	4b10      	ldr	r3, [pc, #64]	; (392c <findMainAltitude+0x44>)
    38ea:	785a      	ldrb	r2, [r3, #1]
    38ec:	2a00      	cmp	r2, #0
    38ee:	d105      	bne.n	38fc <findMainAltitude+0x14>
    38f0:	781a      	ldrb	r2, [r3, #0]
    38f2:	2a00      	cmp	r2, #0
    38f4:	d002      	beq.n	38fc <findMainAltitude+0x14>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelASettings.MAIN_DEPLOY;
    38f6:	885a      	ldrh	r2, [r3, #2]
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelCSettings.MAIN_DEPLOY;
        return;
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelDSettings.MAIN_DEPLOY;
    38f8:	831a      	strh	r2, [r3, #24]
        return;
    }
}
    38fa:	4770      	bx	lr
    if (deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    38fc:	79da      	ldrb	r2, [r3, #7]
    38fe:	2a00      	cmp	r2, #0
    3900:	d104      	bne.n	390c <findMainAltitude+0x24>
    3902:	799a      	ldrb	r2, [r3, #6]
    3904:	2a00      	cmp	r2, #0
    3906:	d001      	beq.n	390c <findMainAltitude+0x24>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelBSettings.MAIN_DEPLOY;
    3908:	891a      	ldrh	r2, [r3, #8]
    390a:	e7f5      	b.n	38f8 <findMainAltitude+0x10>
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    390c:	7b5a      	ldrb	r2, [r3, #13]
    390e:	2a00      	cmp	r2, #0
    3910:	d104      	bne.n	391c <findMainAltitude+0x34>
    3912:	7b1a      	ldrb	r2, [r3, #12]
    3914:	2a00      	cmp	r2, #0
    3916:	d001      	beq.n	391c <findMainAltitude+0x34>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelCSettings.MAIN_DEPLOY;
    3918:	89da      	ldrh	r2, [r3, #14]
    391a:	e7ed      	b.n	38f8 <findMainAltitude+0x10>
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    391c:	7cda      	ldrb	r2, [r3, #19]
    391e:	2a00      	cmp	r2, #0
    3920:	d1eb      	bne.n	38fa <findMainAltitude+0x12>
    3922:	7c9a      	ldrb	r2, [r3, #18]
    3924:	2a00      	cmp	r2, #0
    3926:	d0e8      	beq.n	38fa <findMainAltitude+0x12>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelDSettings.MAIN_DEPLOY;
    3928:	8a9a      	ldrh	r2, [r3, #20]
    392a:	e7e5      	b.n	38f8 <findMainAltitude+0x10>
    392c:	20000180 	.word	0x20000180

00003930 <applyDefaultSettings>:
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    3930:	2096      	movs	r0, #150	; 0x96
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    3932:	2200      	movs	r2, #0
    deploymentSettings.channelASettings.ENABLED = true;
    3934:	2101      	movs	r1, #1
    3936:	4b09      	ldr	r3, [pc, #36]	; (395c <applyDefaultSettings+0x2c>)
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    3938:	0040      	lsls	r0, r0, #1
    deploymentSettings.channelASettings.ENABLED = true;
    393a:	7019      	strb	r1, [r3, #0]
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    393c:	7059      	strb	r1, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    393e:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;
    3940:	711a      	strb	r2, [r3, #4]
    deploymentSettings.channelBSettings.ENABLED = true;
    3942:	7199      	strb	r1, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    3944:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    3946:	8118      	strh	r0, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = 0;
    3948:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = false;
    394a:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = DROGUE_t;
    394c:	7359      	strb	r1, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = 0;
    394e:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = 0;
    3950:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = false;
    3952:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = MAIN_t;
    3954:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = 300;
    3956:	8298      	strh	r0, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = 0;
    3958:	759a      	strb	r2, [r3, #22]
}
    395a:	4770      	bx	lr
    395c:	20000180 	.word	0x20000180

00003960 <putSettings>:

void putSettings() {
    3960:	b500      	push	{lr}
    3962:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    3964:	4669      	mov	r1, sp
    settings[1] = deploymentSettings.channelASettings.TYPE;
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    3966:	4668      	mov	r0, sp
    settings[0] = deploymentSettings.channelASettings.ENABLED;
    3968:	4b17      	ldr	r3, [pc, #92]	; (39c8 <putSettings+0x68>)
    396a:	781a      	ldrb	r2, [r3, #0]
    396c:	700a      	strb	r2, [r1, #0]
    settings[1] = deploymentSettings.channelASettings.TYPE;
    396e:	785a      	ldrb	r2, [r3, #1]
    3970:	704a      	strb	r2, [r1, #1]
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    3972:	885a      	ldrh	r2, [r3, #2]
    3974:	0a11      	lsrs	r1, r2, #8
    3976:	7081      	strb	r1, [r0, #2]
    settings[3] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 0;
    3978:	70c2      	strb	r2, [r0, #3]
    settings[4] = deploymentSettings.channelASettings.APPOGE_DELAY;
    397a:	791a      	ldrb	r2, [r3, #4]
    397c:	7102      	strb	r2, [r0, #4]

    settings[5] = deploymentSettings.channelBSettings.ENABLED;
    397e:	799a      	ldrb	r2, [r3, #6]
    3980:	7142      	strb	r2, [r0, #5]
    settings[6] = deploymentSettings.channelBSettings.TYPE;
    3982:	79da      	ldrb	r2, [r3, #7]
    3984:	7182      	strb	r2, [r0, #6]
    settings[7] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 8;
    3986:	891a      	ldrh	r2, [r3, #8]
    3988:	0a11      	lsrs	r1, r2, #8
    398a:	71c1      	strb	r1, [r0, #7]
    settings[8] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 0;
    398c:	7202      	strb	r2, [r0, #8]
    settings[9] = deploymentSettings.channelBSettings.APPOGE_DELAY;
    398e:	7a9a      	ldrb	r2, [r3, #10]
    3990:	7242      	strb	r2, [r0, #9]

    settings[10] = deploymentSettings.channelCSettings.ENABLED;
    3992:	7b1a      	ldrb	r2, [r3, #12]
    3994:	7282      	strb	r2, [r0, #10]
    settings[11] = deploymentSettings.channelCSettings.TYPE;
    3996:	7b5a      	ldrb	r2, [r3, #13]
    3998:	72c2      	strb	r2, [r0, #11]
    settings[12] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 8;
    399a:	89da      	ldrh	r2, [r3, #14]
    399c:	0a11      	lsrs	r1, r2, #8
    399e:	7301      	strb	r1, [r0, #12]
    settings[13] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 0;
    39a0:	7342      	strb	r2, [r0, #13]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;
    39a2:	7c1a      	ldrb	r2, [r3, #16]
    39a4:	7382      	strb	r2, [r0, #14]

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    39a6:	7c9a      	ldrb	r2, [r3, #18]
    39a8:	73c2      	strb	r2, [r0, #15]
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    39aa:	7cda      	ldrb	r2, [r3, #19]
    39ac:	7402      	strb	r2, [r0, #16]
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    39ae:	8a9a      	ldrh	r2, [r3, #20]
    39b0:	0a11      	lsrs	r1, r2, #8
    39b2:	7441      	strb	r1, [r0, #17]
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    39b4:	7482      	strb	r2, [r0, #18]
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    39b6:	7d9b      	ldrb	r3, [r3, #22]
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    39b8:	4669      	mov	r1, sp
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    39ba:	74c3      	strb	r3, [r0, #19]

    settings[20] = 0x00;
    39bc:	2000      	movs	r0, #0

    AT25SEWritePage(0x00,settings);
    39be:	4b03      	ldr	r3, [pc, #12]	; (39cc <putSettings+0x6c>)
    settings[20] = 0x00;
    39c0:	7508      	strb	r0, [r1, #20]
    AT25SEWritePage(0x00,settings);
    39c2:	4798      	blx	r3
}
    39c4:	b041      	add	sp, #260	; 0x104
    39c6:	bd00      	pop	{pc}
    39c8:	20000180 	.word	0x20000180
    39cc:	000002a5 	.word	0x000002a5

000039d0 <getSettings>:


void getSettings() {
    39d0:	b500      	push	{lr}
    39d2:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);
    39d4:	4669      	mov	r1, sp
    39d6:	4b2a      	ldr	r3, [pc, #168]	; (3a80 <getSettings+0xb0>)
    39d8:	2000      	movs	r0, #0
    39da:	4798      	blx	r3

    deploymentSettings.channelASettings.ENABLED = settings[0];
    39dc:	466a      	mov	r2, sp
    39de:	7812      	ldrb	r2, [r2, #0]
    39e0:	4b28      	ldr	r3, [pc, #160]	; (3a84 <getSettings+0xb4>)
    39e2:	1e51      	subs	r1, r2, #1
    39e4:	418a      	sbcs	r2, r1
    39e6:	701a      	strb	r2, [r3, #0]
    deploymentSettings.channelASettings.TYPE = settings[1];
    39e8:	466a      	mov	r2, sp
    39ea:	7852      	ldrb	r2, [r2, #1]
    39ec:	705a      	strb	r2, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    39ee:	466a      	mov	r2, sp
    39f0:	7891      	ldrb	r1, [r2, #2]
    39f2:	78d2      	ldrb	r2, [r2, #3]
    39f4:	0209      	lsls	r1, r1, #8
    39f6:	430a      	orrs	r2, r1
    39f8:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];
    39fa:	466a      	mov	r2, sp
    39fc:	7912      	ldrb	r2, [r2, #4]
    39fe:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    3a00:	466a      	mov	r2, sp
    3a02:	7952      	ldrb	r2, [r2, #5]
    3a04:	1e51      	subs	r1, r2, #1
    3a06:	418a      	sbcs	r2, r1
    3a08:	719a      	strb	r2, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = settings[6];
    3a0a:	466a      	mov	r2, sp
    3a0c:	7992      	ldrb	r2, [r2, #6]
    3a0e:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    3a10:	466a      	mov	r2, sp
    3a12:	79d1      	ldrb	r1, [r2, #7]
    3a14:	7a12      	ldrb	r2, [r2, #8]
    3a16:	0209      	lsls	r1, r1, #8
    3a18:	430a      	orrs	r2, r1
    3a1a:	811a      	strh	r2, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];
    3a1c:	466a      	mov	r2, sp
    3a1e:	7a52      	ldrb	r2, [r2, #9]
    3a20:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    3a22:	466a      	mov	r2, sp
    3a24:	7a92      	ldrb	r2, [r2, #10]
    3a26:	1e51      	subs	r1, r2, #1
    3a28:	418a      	sbcs	r2, r1
    3a2a:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = settings[11];
    3a2c:	466a      	mov	r2, sp
    3a2e:	7ad2      	ldrb	r2, [r2, #11]
    3a30:	735a      	strb	r2, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    3a32:	466a      	mov	r2, sp
    3a34:	7b11      	ldrb	r1, [r2, #12]
    3a36:	7b52      	ldrb	r2, [r2, #13]
    3a38:	0209      	lsls	r1, r1, #8
    3a3a:	430a      	orrs	r2, r1
    3a3c:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];
    3a3e:	466a      	mov	r2, sp
    3a40:	7b92      	ldrb	r2, [r2, #14]
    3a42:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    3a44:	466a      	mov	r2, sp
    3a46:	7bd2      	ldrb	r2, [r2, #15]
    3a48:	1e51      	subs	r1, r2, #1
    3a4a:	418a      	sbcs	r2, r1
    3a4c:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = settings[16];
    3a4e:	466a      	mov	r2, sp
    3a50:	7c12      	ldrb	r2, [r2, #16]
    3a52:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    3a54:	466a      	mov	r2, sp
    3a56:	7c51      	ldrb	r1, [r2, #17]
    3a58:	7c92      	ldrb	r2, [r2, #18]
    3a5a:	0209      	lsls	r1, r1, #8
    3a5c:	430a      	orrs	r2, r1
    3a5e:	829a      	strh	r2, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = settings[19];
    3a60:	466a      	mov	r2, sp
    3a62:	7cd2      	ldrb	r2, [r2, #19]
    3a64:	759a      	strb	r2, [r3, #22]


    if (settings[20] == 0xFF) {
    3a66:	466b      	mov	r3, sp
    3a68:	7d1b      	ldrb	r3, [r3, #20]
    3a6a:	2bff      	cmp	r3, #255	; 0xff
    3a6c:	d103      	bne.n	3a76 <getSettings+0xa6>
        applyDefaultSettings();
    3a6e:	4b06      	ldr	r3, [pc, #24]	; (3a88 <getSettings+0xb8>)
    3a70:	4798      	blx	r3
        putSettings();
    3a72:	4b06      	ldr	r3, [pc, #24]	; (3a8c <getSettings+0xbc>)
    3a74:	4798      	blx	r3
    }

    findMainAltitude();
    3a76:	4b06      	ldr	r3, [pc, #24]	; (3a90 <getSettings+0xc0>)
    3a78:	4798      	blx	r3

}
    3a7a:	b041      	add	sp, #260	; 0x104
    3a7c:	bd00      	pop	{pc}
    3a7e:	46c0      	nop			; (mov r8, r8)
    3a80:	0000035d 	.word	0x0000035d
    3a84:	20000180 	.word	0x20000180
    3a88:	00003931 	.word	0x00003931
    3a8c:	00003961 	.word	0x00003961
    3a90:	000038e9 	.word	0x000038e9

00003a94 <sendFlightLogs>:
#include <util.h>
#include <boardDefines.h>

void sendFlightLogs() {
    3a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    3a96:	2400      	movs	r4, #0

        if (isFlightLogged(flightLog)) {
    3a98:	0020      	movs	r0, r4
    3a9a:	4b1e      	ldr	r3, [pc, #120]	; (3b14 <sendFlightLogs+0x80>)
    3a9c:	4798      	blx	r3
    3a9e:	2800      	cmp	r0, #0
    3aa0:	d003      	beq.n	3aaa <sendFlightLogs+0x16>

            usartDataOut(USART3, flightLog);
    3aa2:	0021      	movs	r1, r4
    3aa4:	2003      	movs	r0, #3
    3aa6:	4b1c      	ldr	r3, [pc, #112]	; (3b18 <sendFlightLogs+0x84>)
    3aa8:	4798      	blx	r3
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    3aaa:	3401      	adds	r4, #1
    3aac:	b2e4      	uxtb	r4, r4
    3aae:	2c14      	cmp	r4, #20
    3ab0:	d1f2      	bne.n	3a98 <sendFlightLogs+0x4>
        }
    }
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);
    3ab2:	21ff      	movs	r1, #255	; 0xff
    3ab4:	2003      	movs	r0, #3
    3ab6:	4d18      	ldr	r5, [pc, #96]	; (3b18 <sendFlightLogs+0x84>)
    3ab8:	47a8      	blx	r5

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    3aba:	4a18      	ldr	r2, [pc, #96]	; (3b1c <sendFlightLogs+0x88>)
    3abc:	7e13      	ldrb	r3, [r2, #24]
    3abe:	075b      	lsls	r3, r3, #29
    3ac0:	d5fc      	bpl.n	3abc <sendFlightLogs+0x28>
    volatile u8_t flightToRead = usartDataIn(USART3);
    3ac2:	4b17      	ldr	r3, [pc, #92]	; (3b20 <sendFlightLogs+0x8c>)
    3ac4:	2003      	movs	r0, #3
    3ac6:	4798      	blx	r3
    3ac8:	466b      	mov	r3, sp
    3aca:	71d8      	strb	r0, [r3, #7]


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    3acc:	79d8      	ldrb	r0, [r3, #7]
    volatile u8_t flightToRead = usartDataIn(USART3);
    3ace:	1ddc      	adds	r4, r3, #7
    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    3ad0:	b2c0      	uxtb	r0, r0
    3ad2:	4b14      	ldr	r3, [pc, #80]	; (3b24 <sendFlightLogs+0x90>)
    3ad4:	4798      	blx	r3
    3ad6:	0007      	movs	r7, r0
    u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
    3ad8:	7820      	ldrb	r0, [r4, #0]
    3ada:	4b13      	ldr	r3, [pc, #76]	; (3b28 <sendFlightLogs+0x94>)
    3adc:	b2c0      	uxtb	r0, r0
    3ade:	4798      	blx	r3
    3ae0:	0006      	movs	r6, r0

    //inform of page numbers
    u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    3ae2:	1bc4      	subs	r4, r0, r7
    3ae4:	0a24      	lsrs	r4, r4, #8
    usartDataOut(USART3, pagesToSend >> 0);
    3ae6:	b2e1      	uxtb	r1, r4
    3ae8:	2003      	movs	r0, #3
    3aea:	47a8      	blx	r5
    usartDataOut(USART3, pagesToSend >> 8);
    3aec:	b2a1      	uxth	r1, r4
    3aee:	0a09      	lsrs	r1, r1, #8
    3af0:	2003      	movs	r0, #3
    3af2:	47a8      	blx	r5

    //send flight end address for % full
    usartDataOut(USART3, flightEndAddress >> 0);
    3af4:	b2f1      	uxtb	r1, r6
    3af6:	2003      	movs	r0, #3
    3af8:	47a8      	blx	r5
    usartDataOut(USART3, flightEndAddress >> 8);
    3afa:	0a31      	lsrs	r1, r6, #8
    3afc:	b2c9      	uxtb	r1, r1
    3afe:	2003      	movs	r0, #3
    3b00:	47a8      	blx	r5
    usartDataOut(USART3, flightEndAddress >> 16);
    3b02:	0c31      	lsrs	r1, r6, #16
    3b04:	b2c9      	uxtb	r1, r1
    3b06:	2003      	movs	r0, #3
    3b08:	47a8      	blx	r5

    //USART out the flights pages
    sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    3b0a:	0031      	movs	r1, r6
    3b0c:	0038      	movs	r0, r7
    3b0e:	4b07      	ldr	r3, [pc, #28]	; (3b2c <sendFlightLogs+0x98>)
    3b10:	4798      	blx	r3

}
    3b12:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3b14:	000032c1 	.word	0x000032c1
    3b18:	000038c1 	.word	0x000038c1
    3b1c:	42001400 	.word	0x42001400
    3b20:	000038d9 	.word	0x000038d9
    3b24:	00003269 	.word	0x00003269
    3b28:	00003295 	.word	0x00003295
    3b2c:	00000b39 	.word	0x00000b39

00003b30 <streamSensorData>:

void streamSensorData() {
    3b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usartDataOut(USART3, 'R');
    3b32:	2152      	movs	r1, #82	; 0x52
    3b34:	2003      	movs	r0, #3
    3b36:	4c1a      	ldr	r4, [pc, #104]	; (3ba0 <streamSensorData+0x70>)
    3b38:	47a0      	blx	r4
    while(1) {
        //wait for comp to request datapoint
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    3b3a:	4a1a      	ldr	r2, [pc, #104]	; (3ba4 <streamSensorData+0x74>)
    3b3c:	7e13      	ldrb	r3, [r2, #24]
    3b3e:	075b      	lsls	r3, r3, #29
    3b40:	d5fc      	bpl.n	3b3c <streamSensorData+0xc>
        volatile u8_t compRequest = usartDataIn(USART3);
    3b42:	4b19      	ldr	r3, [pc, #100]	; (3ba8 <streamSensorData+0x78>)
    3b44:	2003      	movs	r0, #3
    3b46:	4798      	blx	r3
    3b48:	466b      	mov	r3, sp
    3b4a:	3307      	adds	r3, #7
    3b4c:	7018      	strb	r0, [r3, #0]
        if (compRequest == 0x44) {
    3b4e:	781a      	ldrb	r2, [r3, #0]
    3b50:	2a44      	cmp	r2, #68	; 0x44
    3b52:	d11f      	bne.n	3b94 <streamSensorData+0x64>
            sampleTick();
    3b54:	4b15      	ldr	r3, [pc, #84]	; (3bac <streamSensorData+0x7c>)
    3b56:	4798      	blx	r3
            usartDataOut(USART3, 'A');
    3b58:	2141      	movs	r1, #65	; 0x41
    3b5a:	2003      	movs	r0, #3
    3b5c:	47a0      	blx	r4
			u8_t alt0 = (uint32_t)(sample.pressureAltitude) >> 0;
    3b5e:	4b14      	ldr	r3, [pc, #80]	; (3bb0 <streamSensorData+0x80>)
    3b60:	6d98      	ldr	r0, [r3, #88]	; 0x58
    3b62:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    3b64:	4b13      	ldr	r3, [pc, #76]	; (3bb4 <streamSensorData+0x84>)
    3b66:	4798      	blx	r3
    3b68:	0005      	movs	r5, r0
			u8_t alt1 = (uint32_t)(sample.pressureAltitude) >> 8;
			u8_t alt2 = (uint32_t)(sample.pressureAltitude) >> 16;
			u8_t alt3 = (uint32_t)(sample.pressureAltitude) >> 24;
            usartDataOut(USART3, alt0);
    3b6a:	b2c1      	uxtb	r1, r0
    3b6c:	2003      	movs	r0, #3
    3b6e:	47a0      	blx	r4
			u8_t alt1 = (uint32_t)(sample.pressureAltitude) >> 8;
    3b70:	0a29      	lsrs	r1, r5, #8
            usartDataOut(USART3, alt1);
    3b72:	b2c9      	uxtb	r1, r1
    3b74:	2003      	movs	r0, #3
    3b76:	47a0      	blx	r4
			u8_t alt2 = (uint32_t)(sample.pressureAltitude) >> 16;
    3b78:	0c29      	lsrs	r1, r5, #16
            usartDataOut(USART3, alt2);
    3b7a:	b2c9      	uxtb	r1, r1
    3b7c:	2003      	movs	r0, #3
    3b7e:	47a0      	blx	r4
            usartDataOut(USART3, alt3);
    3b80:	0e29      	lsrs	r1, r5, #24
    3b82:	2003      	movs	r0, #3
    3b84:	47a0      	blx	r4
        }
		else if (compRequest == 0x46)
		{
			finishFromPad();
		}
        if (unplugged()) {
    3b86:	4b0c      	ldr	r3, [pc, #48]	; (3bb8 <streamSensorData+0x88>)
    3b88:	4798      	blx	r3
    3b8a:	2800      	cmp	r0, #0
    3b8c:	d0d5      	beq.n	3b3a <streamSensorData+0xa>
            finishFromPad();
    3b8e:	4b0b      	ldr	r3, [pc, #44]	; (3bbc <streamSensorData+0x8c>)
    3b90:	4798      	blx	r3
    3b92:	e7d2      	b.n	3b3a <streamSensorData+0xa>
		else if (compRequest == 0x46)
    3b94:	781b      	ldrb	r3, [r3, #0]
    3b96:	2b46      	cmp	r3, #70	; 0x46
    3b98:	d1f5      	bne.n	3b86 <streamSensorData+0x56>
			finishFromPad();
    3b9a:	4b08      	ldr	r3, [pc, #32]	; (3bbc <streamSensorData+0x8c>)
    3b9c:	4798      	blx	r3
    3b9e:	e7f2      	b.n	3b86 <streamSensorData+0x56>
    3ba0:	000038c1 	.word	0x000038c1
    3ba4:	42001400 	.word	0x42001400
    3ba8:	000038d9 	.word	0x000038d9
    3bac:	00003471 	.word	0x00003471
    3bb0:	200005f0 	.word	0x200005f0
    3bb4:	00005209 	.word	0x00005209
    3bb8:	00000bb5 	.word	0x00000bb5
    3bbc:	00000cb1 	.word	0x00000cb1

00003bc0 <startupConnetion>:
    }
}

void startupConnetion() {

    flightState = flightIdle;
    3bc0:	2201      	movs	r2, #1
    3bc2:	4b15      	ldr	r3, [pc, #84]	; (3c18 <startupConnetion+0x58>)
void startupConnetion() {
    3bc4:	b570      	push	{r4, r5, r6, lr}
    flightState = flightIdle;
    3bc6:	701a      	strb	r2, [r3, #0]

    //wait for user to tell us what they want
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    3bc8:	4a14      	ldr	r2, [pc, #80]	; (3c1c <startupConnetion+0x5c>)
    3bca:	7e13      	ldrb	r3, [r2, #24]
    3bcc:	075b      	lsls	r3, r3, #29
    3bce:	d5fc      	bpl.n	3bca <startupConnetion+0xa>
    u8_t option = usartDataIn(USART3);
    3bd0:	2003      	movs	r0, #3
    3bd2:	4b13      	ldr	r3, [pc, #76]	; (3c20 <startupConnetion+0x60>)
    3bd4:	4798      	blx	r3
    3bd6:	0004      	movs	r4, r0

    //user wants to read flight logs
    if (option == 0x4C) {
    3bd8:	284c      	cmp	r0, #76	; 0x4c
    3bda:	d102      	bne.n	3be2 <startupConnetion+0x22>

        sendFlightLogs();
    3bdc:	4b11      	ldr	r3, [pc, #68]	; (3c24 <startupConnetion+0x64>)
    3bde:	4798      	blx	r3
        delay_ms(1);
        streamSensorData();

    }

}
    3be0:	bd70      	pop	{r4, r5, r6, pc}
    if (option == 0x45) { // 'E'
    3be2:	2845      	cmp	r0, #69	; 0x45
    3be4:	d111      	bne.n	3c0a <startupConnetion+0x4a>
        AT25SFChipErase();
    3be6:	4e10      	ldr	r6, [pc, #64]	; (3c28 <startupConnetion+0x68>)
    3be8:	47b0      	blx	r6
        AT25SFHoldTillReady();
    3bea:	4d10      	ldr	r5, [pc, #64]	; (3c2c <startupConnetion+0x6c>)
    3bec:	47a8      	blx	r5
        delay_ms(100);
    3bee:	2064      	movs	r0, #100	; 0x64
    3bf0:	4b0f      	ldr	r3, [pc, #60]	; (3c30 <startupConnetion+0x70>)
    3bf2:	4798      	blx	r3
        AT25SFChipErase();
    3bf4:	47b0      	blx	r6
        AT25SFHoldTillReady();
    3bf6:	47a8      	blx	r5
        usartDataOut(USART3, 'E');
    3bf8:	0021      	movs	r1, r4
    3bfa:	2003      	movs	r0, #3
    3bfc:	4b0d      	ldr	r3, [pc, #52]	; (3c34 <startupConnetion+0x74>)
    3bfe:	4798      	blx	r3
        beep(400);
    3c00:	20c8      	movs	r0, #200	; 0xc8
    3c02:	4b0d      	ldr	r3, [pc, #52]	; (3c38 <startupConnetion+0x78>)
    3c04:	0040      	lsls	r0, r0, #1
    3c06:	4798      	blx	r3
    3c08:	e7ea      	b.n	3be0 <startupConnetion+0x20>
    if (option == 0x53 ) { // 'S'
    3c0a:	2853      	cmp	r0, #83	; 0x53
    3c0c:	d1e8      	bne.n	3be0 <startupConnetion+0x20>
        delay_ms(1);
    3c0e:	4b08      	ldr	r3, [pc, #32]	; (3c30 <startupConnetion+0x70>)
    3c10:	2001      	movs	r0, #1
    3c12:	4798      	blx	r3
        streamSensorData();
    3c14:	4b09      	ldr	r3, [pc, #36]	; (3c3c <startupConnetion+0x7c>)
    3c16:	4798      	blx	r3
    3c18:	200001ac 	.word	0x200001ac
    3c1c:	42001400 	.word	0x42001400
    3c20:	000038d9 	.word	0x000038d9
    3c24:	00003a95 	.word	0x00003a95
    3c28:	00000219 	.word	0x00000219
    3c2c:	000001e5 	.word	0x000001e5
    3c30:	00001191 	.word	0x00001191
    3c34:	000038c1 	.word	0x000038c1
    3c38:	00000e99 	.word	0x00000e99
    3c3c:	00003b31 	.word	0x00003b31

00003c40 <attemptConnection>:

void attemptConnection() {
    3c40:	b510      	push	{r4, lr}

    if (USARTconnectionAvaliable()) {
    3c42:	4b05      	ldr	r3, [pc, #20]	; (3c58 <attemptConnection+0x18>)
    3c44:	4798      	blx	r3
    3c46:	2800      	cmp	r0, #0
    3c48:	d005      	beq.n	3c56 <attemptConnection+0x16>

        if (flightState == flightStatrup) {
    3c4a:	4b04      	ldr	r3, [pc, #16]	; (3c5c <attemptConnection+0x1c>)
    3c4c:	781b      	ldrb	r3, [r3, #0]
    3c4e:	2b00      	cmp	r3, #0
    3c50:	d101      	bne.n	3c56 <attemptConnection+0x16>
            startupConnetion();
    3c52:	4b03      	ldr	r3, [pc, #12]	; (3c60 <attemptConnection+0x20>)
    3c54:	4798      	blx	r3
        }


    }

}
    3c56:	bd10      	pop	{r4, pc}
    3c58:	00000b05 	.word	0x00000b05
    3c5c:	200001ac 	.word	0x200001ac
    3c60:	00003bc1 	.word	0x00003bc1

00003c64 <pow>:
    3c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c66:	4657      	mov	r7, sl
    3c68:	464e      	mov	r6, r9
    3c6a:	46de      	mov	lr, fp
    3c6c:	4645      	mov	r5, r8
    3c6e:	b5e0      	push	{r5, r6, r7, lr}
    3c70:	b08f      	sub	sp, #60	; 0x3c
    3c72:	001d      	movs	r5, r3
    3c74:	0006      	movs	r6, r0
    3c76:	000f      	movs	r7, r1
    3c78:	0014      	movs	r4, r2
    3c7a:	f000 f99f 	bl	3fbc <__ieee754_pow>
    3c7e:	4bc7      	ldr	r3, [pc, #796]	; (3f9c <pow+0x338>)
    3c80:	9000      	str	r0, [sp, #0]
    3c82:	9101      	str	r1, [sp, #4]
    3c84:	469a      	mov	sl, r3
    3c86:	781b      	ldrb	r3, [r3, #0]
    3c88:	b25b      	sxtb	r3, r3
    3c8a:	4699      	mov	r9, r3
    3c8c:	3301      	adds	r3, #1
    3c8e:	d03e      	beq.n	3d0e <pow+0xaa>
    3c90:	0022      	movs	r2, r4
    3c92:	002b      	movs	r3, r5
    3c94:	0020      	movs	r0, r4
    3c96:	0029      	movs	r1, r5
    3c98:	f003 f8ee 	bl	6e78 <__aeabi_dcmpun>
    3c9c:	4683      	mov	fp, r0
    3c9e:	2800      	cmp	r0, #0
    3ca0:	d135      	bne.n	3d0e <pow+0xaa>
    3ca2:	0032      	movs	r2, r6
    3ca4:	003b      	movs	r3, r7
    3ca6:	0030      	movs	r0, r6
    3ca8:	0039      	movs	r1, r7
    3caa:	f003 f8e5 	bl	6e78 <__aeabi_dcmpun>
    3cae:	2200      	movs	r2, #0
    3cb0:	9003      	str	r0, [sp, #12]
    3cb2:	2800      	cmp	r0, #0
    3cb4:	d000      	beq.n	3cb8 <pow+0x54>
    3cb6:	e0b6      	b.n	3e26 <pow+0x1c2>
    3cb8:	2300      	movs	r3, #0
    3cba:	0030      	movs	r0, r6
    3cbc:	0039      	movs	r1, r7
    3cbe:	f001 fa4b 	bl	5158 <__aeabi_dcmpeq>
    3cc2:	2800      	cmp	r0, #0
    3cc4:	d02c      	beq.n	3d20 <pow+0xbc>
    3cc6:	2200      	movs	r2, #0
    3cc8:	2300      	movs	r3, #0
    3cca:	0020      	movs	r0, r4
    3ccc:	0029      	movs	r1, r5
    3cce:	f001 fa43 	bl	5158 <__aeabi_dcmpeq>
    3cd2:	4683      	mov	fp, r0
    3cd4:	2800      	cmp	r0, #0
    3cd6:	d100      	bne.n	3cda <pow+0x76>
    3cd8:	e077      	b.n	3dca <pow+0x166>
    3cda:	ab04      	add	r3, sp, #16
    3cdc:	4698      	mov	r8, r3
    3cde:	2301      	movs	r3, #1
    3ce0:	4642      	mov	r2, r8
    3ce2:	9304      	str	r3, [sp, #16]
    3ce4:	4bae      	ldr	r3, [pc, #696]	; (3fa0 <pow+0x33c>)
    3ce6:	6053      	str	r3, [r2, #4]
    3ce8:	4643      	mov	r3, r8
    3cea:	9a03      	ldr	r2, [sp, #12]
    3cec:	611c      	str	r4, [r3, #16]
    3cee:	615d      	str	r5, [r3, #20]
    3cf0:	621a      	str	r2, [r3, #32]
    3cf2:	609e      	str	r6, [r3, #8]
    3cf4:	60df      	str	r7, [r3, #12]
    3cf6:	4642      	mov	r2, r8
    3cf8:	2300      	movs	r3, #0
    3cfa:	2400      	movs	r4, #0
    3cfc:	6193      	str	r3, [r2, #24]
    3cfe:	61d4      	str	r4, [r2, #28]
    3d00:	464b      	mov	r3, r9
    3d02:	2b00      	cmp	r3, #0
    3d04:	d04d      	beq.n	3da2 <pow+0x13e>
    3d06:	2300      	movs	r3, #0
    3d08:	4ca6      	ldr	r4, [pc, #664]	; (3fa4 <pow+0x340>)
    3d0a:	9300      	str	r3, [sp, #0]
    3d0c:	9401      	str	r4, [sp, #4]
    3d0e:	9800      	ldr	r0, [sp, #0]
    3d10:	9901      	ldr	r1, [sp, #4]
    3d12:	b00f      	add	sp, #60	; 0x3c
    3d14:	bc3c      	pop	{r2, r3, r4, r5}
    3d16:	4690      	mov	r8, r2
    3d18:	4699      	mov	r9, r3
    3d1a:	46a2      	mov	sl, r4
    3d1c:	46ab      	mov	fp, r5
    3d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d20:	9800      	ldr	r0, [sp, #0]
    3d22:	9901      	ldr	r1, [sp, #4]
    3d24:	f000 ff64 	bl	4bf0 <finite>
    3d28:	4681      	mov	r9, r0
    3d2a:	2800      	cmp	r0, #0
    3d2c:	d100      	bne.n	3d30 <pow+0xcc>
    3d2e:	e09b      	b.n	3e68 <pow+0x204>
    3d30:	9800      	ldr	r0, [sp, #0]
    3d32:	9901      	ldr	r1, [sp, #4]
    3d34:	2200      	movs	r2, #0
    3d36:	2300      	movs	r3, #0
    3d38:	f001 fa0e 	bl	5158 <__aeabi_dcmpeq>
    3d3c:	2800      	cmp	r0, #0
    3d3e:	d0e6      	beq.n	3d0e <pow+0xaa>
    3d40:	0030      	movs	r0, r6
    3d42:	0039      	movs	r1, r7
    3d44:	f000 ff54 	bl	4bf0 <finite>
    3d48:	2800      	cmp	r0, #0
    3d4a:	d0e0      	beq.n	3d0e <pow+0xaa>
    3d4c:	0020      	movs	r0, r4
    3d4e:	0029      	movs	r1, r5
    3d50:	f000 ff4e 	bl	4bf0 <finite>
    3d54:	2800      	cmp	r0, #0
    3d56:	d0da      	beq.n	3d0e <pow+0xaa>
    3d58:	ab04      	add	r3, sp, #16
    3d5a:	4698      	mov	r8, r3
    3d5c:	2304      	movs	r3, #4
    3d5e:	4642      	mov	r2, r8
    3d60:	9304      	str	r3, [sp, #16]
    3d62:	4b8f      	ldr	r3, [pc, #572]	; (3fa0 <pow+0x33c>)
    3d64:	6114      	str	r4, [r2, #16]
    3d66:	6155      	str	r5, [r2, #20]
    3d68:	6053      	str	r3, [r2, #4]
    3d6a:	2300      	movs	r3, #0
    3d6c:	2400      	movs	r4, #0
    3d6e:	6213      	str	r3, [r2, #32]
    3d70:	2300      	movs	r3, #0
    3d72:	6193      	str	r3, [r2, #24]
    3d74:	61d4      	str	r4, [r2, #28]
    3d76:	4653      	mov	r3, sl
    3d78:	781b      	ldrb	r3, [r3, #0]
    3d7a:	6096      	str	r6, [r2, #8]
    3d7c:	60d7      	str	r7, [r2, #12]
    3d7e:	b25b      	sxtb	r3, r3
    3d80:	2b02      	cmp	r3, #2
    3d82:	d004      	beq.n	3d8e <pow+0x12a>
    3d84:	4640      	mov	r0, r8
    3d86:	f000 ff3d 	bl	4c04 <matherr>
    3d8a:	2800      	cmp	r0, #0
    3d8c:	d10e      	bne.n	3dac <pow+0x148>
    3d8e:	f003 fa3b 	bl	7208 <__errno>
    3d92:	2322      	movs	r3, #34	; 0x22
    3d94:	6003      	str	r3, [r0, #0]
    3d96:	e009      	b.n	3dac <pow+0x148>
    3d98:	4642      	mov	r2, r8
    3d9a:	2300      	movs	r3, #0
    3d9c:	2400      	movs	r4, #0
    3d9e:	6193      	str	r3, [r2, #24]
    3da0:	61d4      	str	r4, [r2, #28]
    3da2:	4640      	mov	r0, r8
    3da4:	f000 ff2e 	bl	4c04 <matherr>
    3da8:	2800      	cmp	r0, #0
    3daa:	d037      	beq.n	3e1c <pow+0x1b8>
    3dac:	4643      	mov	r3, r8
    3dae:	6a1b      	ldr	r3, [r3, #32]
    3db0:	2b00      	cmp	r3, #0
    3db2:	d004      	beq.n	3dbe <pow+0x15a>
    3db4:	f003 fa28 	bl	7208 <__errno>
    3db8:	4643      	mov	r3, r8
    3dba:	6a1b      	ldr	r3, [r3, #32]
    3dbc:	6003      	str	r3, [r0, #0]
    3dbe:	4643      	mov	r3, r8
    3dc0:	69dc      	ldr	r4, [r3, #28]
    3dc2:	699b      	ldr	r3, [r3, #24]
    3dc4:	9300      	str	r3, [sp, #0]
    3dc6:	9401      	str	r4, [sp, #4]
    3dc8:	e7a1      	b.n	3d0e <pow+0xaa>
    3dca:	0020      	movs	r0, r4
    3dcc:	0029      	movs	r1, r5
    3dce:	f000 ff0f 	bl	4bf0 <finite>
    3dd2:	2800      	cmp	r0, #0
    3dd4:	d09b      	beq.n	3d0e <pow+0xaa>
    3dd6:	2200      	movs	r2, #0
    3dd8:	2300      	movs	r3, #0
    3dda:	0020      	movs	r0, r4
    3ddc:	0029      	movs	r1, r5
    3dde:	f001 f9c1 	bl	5164 <__aeabi_dcmplt>
    3de2:	2800      	cmp	r0, #0
    3de4:	d100      	bne.n	3de8 <pow+0x184>
    3de6:	e792      	b.n	3d0e <pow+0xaa>
    3de8:	ab04      	add	r3, sp, #16
    3dea:	4698      	mov	r8, r3
    3dec:	2301      	movs	r3, #1
    3dee:	4642      	mov	r2, r8
    3df0:	9304      	str	r3, [sp, #16]
    3df2:	4b6b      	ldr	r3, [pc, #428]	; (3fa0 <pow+0x33c>)
    3df4:	6053      	str	r3, [r2, #4]
    3df6:	4643      	mov	r3, r8
    3df8:	465a      	mov	r2, fp
    3dfa:	609e      	str	r6, [r3, #8]
    3dfc:	60df      	str	r7, [r3, #12]
    3dfe:	621a      	str	r2, [r3, #32]
    3e00:	611c      	str	r4, [r3, #16]
    3e02:	615d      	str	r5, [r3, #20]
    3e04:	4653      	mov	r3, sl
    3e06:	781b      	ldrb	r3, [r3, #0]
    3e08:	b25b      	sxtb	r3, r3
    3e0a:	2b00      	cmp	r3, #0
    3e0c:	d0c4      	beq.n	3d98 <pow+0x134>
    3e0e:	2000      	movs	r0, #0
    3e10:	4642      	mov	r2, r8
    3e12:	4965      	ldr	r1, [pc, #404]	; (3fa8 <pow+0x344>)
    3e14:	6190      	str	r0, [r2, #24]
    3e16:	61d1      	str	r1, [r2, #28]
    3e18:	2b02      	cmp	r3, #2
    3e1a:	d1c2      	bne.n	3da2 <pow+0x13e>
    3e1c:	f003 f9f4 	bl	7208 <__errno>
    3e20:	2321      	movs	r3, #33	; 0x21
    3e22:	6003      	str	r3, [r0, #0]
    3e24:	e7c2      	b.n	3dac <pow+0x148>
    3e26:	2300      	movs	r3, #0
    3e28:	0020      	movs	r0, r4
    3e2a:	0029      	movs	r1, r5
    3e2c:	f001 f994 	bl	5158 <__aeabi_dcmpeq>
    3e30:	2800      	cmp	r0, #0
    3e32:	d100      	bne.n	3e36 <pow+0x1d2>
    3e34:	e76b      	b.n	3d0e <pow+0xaa>
    3e36:	ab04      	add	r3, sp, #16
    3e38:	4698      	mov	r8, r3
    3e3a:	2301      	movs	r3, #1
    3e3c:	4642      	mov	r2, r8
    3e3e:	9304      	str	r3, [sp, #16]
    3e40:	4b57      	ldr	r3, [pc, #348]	; (3fa0 <pow+0x33c>)
    3e42:	4641      	mov	r1, r8
    3e44:	6053      	str	r3, [r2, #4]
    3e46:	4643      	mov	r3, r8
    3e48:	465a      	mov	r2, fp
    3e4a:	621a      	str	r2, [r3, #32]
    3e4c:	2200      	movs	r2, #0
    3e4e:	609e      	str	r6, [r3, #8]
    3e50:	60df      	str	r7, [r3, #12]
    3e52:	611c      	str	r4, [r3, #16]
    3e54:	615d      	str	r5, [r3, #20]
    3e56:	4b53      	ldr	r3, [pc, #332]	; (3fa4 <pow+0x340>)
    3e58:	618a      	str	r2, [r1, #24]
    3e5a:	61cb      	str	r3, [r1, #28]
    3e5c:	9200      	str	r2, [sp, #0]
    3e5e:	9301      	str	r3, [sp, #4]
    3e60:	464b      	mov	r3, r9
    3e62:	2b02      	cmp	r3, #2
    3e64:	d19d      	bne.n	3da2 <pow+0x13e>
    3e66:	e752      	b.n	3d0e <pow+0xaa>
    3e68:	0030      	movs	r0, r6
    3e6a:	0039      	movs	r1, r7
    3e6c:	f000 fec0 	bl	4bf0 <finite>
    3e70:	2800      	cmp	r0, #0
    3e72:	d100      	bne.n	3e76 <pow+0x212>
    3e74:	e75c      	b.n	3d30 <pow+0xcc>
    3e76:	0020      	movs	r0, r4
    3e78:	0029      	movs	r1, r5
    3e7a:	f000 feb9 	bl	4bf0 <finite>
    3e7e:	2800      	cmp	r0, #0
    3e80:	d100      	bne.n	3e84 <pow+0x220>
    3e82:	e755      	b.n	3d30 <pow+0xcc>
    3e84:	9800      	ldr	r0, [sp, #0]
    3e86:	9901      	ldr	r1, [sp, #4]
    3e88:	000b      	movs	r3, r1
    3e8a:	0002      	movs	r2, r0
    3e8c:	f002 fff4 	bl	6e78 <__aeabi_dcmpun>
    3e90:	ab04      	add	r3, sp, #16
    3e92:	4698      	mov	r8, r3
    3e94:	2800      	cmp	r0, #0
    3e96:	d161      	bne.n	3f5c <pow+0x2f8>
    3e98:	2303      	movs	r3, #3
    3e9a:	4642      	mov	r2, r8
    3e9c:	9304      	str	r3, [sp, #16]
    3e9e:	4b40      	ldr	r3, [pc, #256]	; (3fa0 <pow+0x33c>)
    3ea0:	6210      	str	r0, [r2, #32]
    3ea2:	6053      	str	r3, [r2, #4]
    3ea4:	4653      	mov	r3, sl
    3ea6:	781b      	ldrb	r3, [r3, #0]
    3ea8:	6096      	str	r6, [r2, #8]
    3eaa:	60d7      	str	r7, [r2, #12]
    3eac:	b25b      	sxtb	r3, r3
    3eae:	6114      	str	r4, [r2, #16]
    3eb0:	6155      	str	r5, [r2, #20]
    3eb2:	4699      	mov	r9, r3
    3eb4:	2b00      	cmp	r3, #0
    3eb6:	d12f      	bne.n	3f18 <pow+0x2b4>
    3eb8:	22e0      	movs	r2, #224	; 0xe0
    3eba:	4641      	mov	r1, r8
    3ebc:	4b3b      	ldr	r3, [pc, #236]	; (3fac <pow+0x348>)
    3ebe:	0612      	lsls	r2, r2, #24
    3ec0:	618a      	str	r2, [r1, #24]
    3ec2:	61cb      	str	r3, [r1, #28]
    3ec4:	0030      	movs	r0, r6
    3ec6:	2200      	movs	r2, #0
    3ec8:	2300      	movs	r3, #0
    3eca:	0039      	movs	r1, r7
    3ecc:	f001 f94a 	bl	5164 <__aeabi_dcmplt>
    3ed0:	2800      	cmp	r0, #0
    3ed2:	d100      	bne.n	3ed6 <pow+0x272>
    3ed4:	e756      	b.n	3d84 <pow+0x120>
    3ed6:	2200      	movs	r2, #0
    3ed8:	4b35      	ldr	r3, [pc, #212]	; (3fb0 <pow+0x34c>)
    3eda:	0020      	movs	r0, r4
    3edc:	0029      	movs	r1, r5
    3ede:	f002 fa35 	bl	634c <__aeabi_dmul>
    3ee2:	0004      	movs	r4, r0
    3ee4:	000d      	movs	r5, r1
    3ee6:	f000 fe95 	bl	4c14 <rint>
    3eea:	0002      	movs	r2, r0
    3eec:	000b      	movs	r3, r1
    3eee:	0020      	movs	r0, r4
    3ef0:	0029      	movs	r1, r5
    3ef2:	f001 f931 	bl	5158 <__aeabi_dcmpeq>
    3ef6:	2800      	cmp	r0, #0
    3ef8:	d105      	bne.n	3f06 <pow+0x2a2>
    3efa:	22e0      	movs	r2, #224	; 0xe0
    3efc:	4b2d      	ldr	r3, [pc, #180]	; (3fb4 <pow+0x350>)
    3efe:	0612      	lsls	r2, r2, #24
    3f00:	4641      	mov	r1, r8
    3f02:	618a      	str	r2, [r1, #24]
    3f04:	61cb      	str	r3, [r1, #28]
    3f06:	4653      	mov	r3, sl
    3f08:	781b      	ldrb	r3, [r3, #0]
    3f0a:	b25b      	sxtb	r3, r3
    3f0c:	4699      	mov	r9, r3
    3f0e:	464b      	mov	r3, r9
    3f10:	2b02      	cmp	r3, #2
    3f12:	d000      	beq.n	3f16 <pow+0x2b2>
    3f14:	e736      	b.n	3d84 <pow+0x120>
    3f16:	e73a      	b.n	3d8e <pow+0x12a>
    3f18:	2200      	movs	r2, #0
    3f1a:	4641      	mov	r1, r8
    3f1c:	4b26      	ldr	r3, [pc, #152]	; (3fb8 <pow+0x354>)
    3f1e:	0030      	movs	r0, r6
    3f20:	618a      	str	r2, [r1, #24]
    3f22:	61cb      	str	r3, [r1, #28]
    3f24:	2200      	movs	r2, #0
    3f26:	2300      	movs	r3, #0
    3f28:	0039      	movs	r1, r7
    3f2a:	f001 f91b 	bl	5164 <__aeabi_dcmplt>
    3f2e:	2800      	cmp	r0, #0
    3f30:	d0ed      	beq.n	3f0e <pow+0x2aa>
    3f32:	2200      	movs	r2, #0
    3f34:	4b1e      	ldr	r3, [pc, #120]	; (3fb0 <pow+0x34c>)
    3f36:	0020      	movs	r0, r4
    3f38:	0029      	movs	r1, r5
    3f3a:	f002 fa07 	bl	634c <__aeabi_dmul>
    3f3e:	0004      	movs	r4, r0
    3f40:	000d      	movs	r5, r1
    3f42:	f000 fe67 	bl	4c14 <rint>
    3f46:	0002      	movs	r2, r0
    3f48:	000b      	movs	r3, r1
    3f4a:	0020      	movs	r0, r4
    3f4c:	0029      	movs	r1, r5
    3f4e:	f001 f903 	bl	5158 <__aeabi_dcmpeq>
    3f52:	2800      	cmp	r0, #0
    3f54:	d1d7      	bne.n	3f06 <pow+0x2a2>
    3f56:	2200      	movs	r2, #0
    3f58:	4b13      	ldr	r3, [pc, #76]	; (3fa8 <pow+0x344>)
    3f5a:	e7d1      	b.n	3f00 <pow+0x29c>
    3f5c:	2301      	movs	r3, #1
    3f5e:	4642      	mov	r2, r8
    3f60:	9304      	str	r3, [sp, #16]
    3f62:	4b0f      	ldr	r3, [pc, #60]	; (3fa0 <pow+0x33c>)
    3f64:	6053      	str	r3, [r2, #4]
    3f66:	4643      	mov	r3, r8
    3f68:	464a      	mov	r2, r9
    3f6a:	611c      	str	r4, [r3, #16]
    3f6c:	615d      	str	r5, [r3, #20]
    3f6e:	621a      	str	r2, [r3, #32]
    3f70:	609e      	str	r6, [r3, #8]
    3f72:	60df      	str	r7, [r3, #12]
    3f74:	2400      	movs	r4, #0
    3f76:	4653      	mov	r3, sl
    3f78:	571c      	ldrsb	r4, [r3, r4]
    3f7a:	2c00      	cmp	r4, #0
    3f7c:	d100      	bne.n	3f80 <pow+0x31c>
    3f7e:	e70b      	b.n	3d98 <pow+0x134>
    3f80:	2300      	movs	r3, #0
    3f82:	2200      	movs	r2, #0
    3f84:	0019      	movs	r1, r3
    3f86:	0010      	movs	r0, r2
    3f88:	f001 fdac 	bl	5ae4 <__aeabi_ddiv>
    3f8c:	4643      	mov	r3, r8
    3f8e:	6198      	str	r0, [r3, #24]
    3f90:	61d9      	str	r1, [r3, #28]
    3f92:	2c02      	cmp	r4, #2
    3f94:	d100      	bne.n	3f98 <pow+0x334>
    3f96:	e741      	b.n	3e1c <pow+0x1b8>
    3f98:	e703      	b.n	3da2 <pow+0x13e>
    3f9a:	46c0      	nop			; (mov r8, r8)
    3f9c:	200000b8 	.word	0x200000b8
    3fa0:	0000727c 	.word	0x0000727c
    3fa4:	3ff00000 	.word	0x3ff00000
    3fa8:	fff00000 	.word	0xfff00000
    3fac:	47efffff 	.word	0x47efffff
    3fb0:	3fe00000 	.word	0x3fe00000
    3fb4:	c7efffff 	.word	0xc7efffff
    3fb8:	7ff00000 	.word	0x7ff00000

00003fbc <__ieee754_pow>:
    3fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fbe:	4657      	mov	r7, sl
    3fc0:	464e      	mov	r6, r9
    3fc2:	4645      	mov	r5, r8
    3fc4:	46de      	mov	lr, fp
    3fc6:	001c      	movs	r4, r3
    3fc8:	0013      	movs	r3, r2
    3fca:	b5e0      	push	{r5, r6, r7, lr}
    3fcc:	0065      	lsls	r5, r4, #1
    3fce:	b091      	sub	sp, #68	; 0x44
    3fd0:	086d      	lsrs	r5, r5, #1
    3fd2:	9300      	str	r3, [sp, #0]
    3fd4:	9401      	str	r4, [sp, #4]
    3fd6:	0007      	movs	r7, r0
    3fd8:	000e      	movs	r6, r1
    3fda:	4680      	mov	r8, r0
    3fdc:	4689      	mov	r9, r1
    3fde:	46a2      	mov	sl, r4
    3fe0:	432b      	orrs	r3, r5
    3fe2:	d031      	beq.n	4048 <__ieee754_pow+0x8c>
    3fe4:	4b67      	ldr	r3, [pc, #412]	; (4184 <__ieee754_pow+0x1c8>)
    3fe6:	0074      	lsls	r4, r6, #1
    3fe8:	0864      	lsrs	r4, r4, #1
    3fea:	429c      	cmp	r4, r3
    3fec:	dc27      	bgt.n	403e <__ieee754_pow+0x82>
    3fee:	d024      	beq.n	403a <__ieee754_pow+0x7e>
    3ff0:	429d      	cmp	r5, r3
    3ff2:	dc24      	bgt.n	403e <__ieee754_pow+0x82>
    3ff4:	4b63      	ldr	r3, [pc, #396]	; (4184 <__ieee754_pow+0x1c8>)
    3ff6:	429d      	cmp	r5, r3
    3ff8:	d100      	bne.n	3ffc <__ieee754_pow+0x40>
    3ffa:	e081      	b.n	4100 <__ieee754_pow+0x144>
    3ffc:	2300      	movs	r3, #0
    3ffe:	469b      	mov	fp, r3
    4000:	464b      	mov	r3, r9
    4002:	2b00      	cmp	r3, #0
    4004:	da00      	bge.n	4008 <__ieee754_pow+0x4c>
    4006:	e07f      	b.n	4108 <__ieee754_pow+0x14c>
    4008:	2a00      	cmp	r2, #0
    400a:	d12c      	bne.n	4066 <__ieee754_pow+0xaa>
    400c:	4b5d      	ldr	r3, [pc, #372]	; (4184 <__ieee754_pow+0x1c8>)
    400e:	429d      	cmp	r5, r3
    4010:	d100      	bne.n	4014 <__ieee754_pow+0x58>
    4012:	e097      	b.n	4144 <__ieee754_pow+0x188>
    4014:	4b5c      	ldr	r3, [pc, #368]	; (4188 <__ieee754_pow+0x1cc>)
    4016:	429d      	cmp	r5, r3
    4018:	d066      	beq.n	40e8 <__ieee754_pow+0x12c>
    401a:	2380      	movs	r3, #128	; 0x80
    401c:	05db      	lsls	r3, r3, #23
    401e:	459a      	cmp	sl, r3
    4020:	d100      	bne.n	4024 <__ieee754_pow+0x68>
    4022:	e3b9      	b.n	4798 <__ieee754_pow+0x7dc>
    4024:	4b59      	ldr	r3, [pc, #356]	; (418c <__ieee754_pow+0x1d0>)
    4026:	459a      	cmp	sl, r3
    4028:	d11d      	bne.n	4066 <__ieee754_pow+0xaa>
    402a:	464b      	mov	r3, r9
    402c:	2b00      	cmp	r3, #0
    402e:	db1a      	blt.n	4066 <__ieee754_pow+0xaa>
    4030:	0038      	movs	r0, r7
    4032:	0031      	movs	r1, r6
    4034:	f000 fcf8 	bl	4a28 <__ieee754_sqrt>
    4038:	e008      	b.n	404c <__ieee754_pow+0x90>
    403a:	2800      	cmp	r0, #0
    403c:	d00d      	beq.n	405a <__ieee754_pow+0x9e>
    403e:	4b54      	ldr	r3, [pc, #336]	; (4190 <__ieee754_pow+0x1d4>)
    4040:	469c      	mov	ip, r3
    4042:	4464      	add	r4, ip
    4044:	4327      	orrs	r7, r4
    4046:	d10a      	bne.n	405e <__ieee754_pow+0xa2>
    4048:	2000      	movs	r0, #0
    404a:	494f      	ldr	r1, [pc, #316]	; (4188 <__ieee754_pow+0x1cc>)
    404c:	b011      	add	sp, #68	; 0x44
    404e:	bc3c      	pop	{r2, r3, r4, r5}
    4050:	4690      	mov	r8, r2
    4052:	4699      	mov	r9, r3
    4054:	46a2      	mov	sl, r4
    4056:	46ab      	mov	fp, r5
    4058:	bdf0      	pop	{r4, r5, r6, r7, pc}
    405a:	42a5      	cmp	r5, r4
    405c:	ddca      	ble.n	3ff4 <__ieee754_pow+0x38>
    405e:	484d      	ldr	r0, [pc, #308]	; (4194 <__ieee754_pow+0x1d8>)
    4060:	f000 fdd2 	bl	4c08 <nan>
    4064:	e7f2      	b.n	404c <__ieee754_pow+0x90>
    4066:	0038      	movs	r0, r7
    4068:	0031      	movs	r1, r6
    406a:	f000 fdbd 	bl	4be8 <fabs>
    406e:	4643      	mov	r3, r8
    4070:	2b00      	cmp	r3, #0
    4072:	d11d      	bne.n	40b0 <__ieee754_pow+0xf4>
    4074:	2c00      	cmp	r4, #0
    4076:	d004      	beq.n	4082 <__ieee754_pow+0xc6>
    4078:	4a43      	ldr	r2, [pc, #268]	; (4188 <__ieee754_pow+0x1cc>)
    407a:	00b3      	lsls	r3, r6, #2
    407c:	089b      	lsrs	r3, r3, #2
    407e:	4293      	cmp	r3, r2
    4080:	d116      	bne.n	40b0 <__ieee754_pow+0xf4>
    4082:	4653      	mov	r3, sl
    4084:	2b00      	cmp	r3, #0
    4086:	da00      	bge.n	408a <__ieee754_pow+0xce>
    4088:	e3c5      	b.n	4816 <__ieee754_pow+0x85a>
    408a:	464b      	mov	r3, r9
    408c:	2b00      	cmp	r3, #0
    408e:	dadd      	bge.n	404c <__ieee754_pow+0x90>
    4090:	4b3f      	ldr	r3, [pc, #252]	; (4190 <__ieee754_pow+0x1d4>)
    4092:	469c      	mov	ip, r3
    4094:	465b      	mov	r3, fp
    4096:	4464      	add	r4, ip
    4098:	431c      	orrs	r4, r3
    409a:	d101      	bne.n	40a0 <__ieee754_pow+0xe4>
    409c:	f000 fc53 	bl	4946 <__ieee754_pow+0x98a>
    40a0:	465b      	mov	r3, fp
    40a2:	2b01      	cmp	r3, #1
    40a4:	d1d2      	bne.n	404c <__ieee754_pow+0x90>
    40a6:	2480      	movs	r4, #128	; 0x80
    40a8:	0624      	lsls	r4, r4, #24
    40aa:	190b      	adds	r3, r1, r4
    40ac:	0019      	movs	r1, r3
    40ae:	e7cd      	b.n	404c <__ieee754_pow+0x90>
    40b0:	0ff3      	lsrs	r3, r6, #31
    40b2:	3b01      	subs	r3, #1
    40b4:	4698      	mov	r8, r3
    40b6:	465b      	mov	r3, fp
    40b8:	4642      	mov	r2, r8
    40ba:	4313      	orrs	r3, r2
    40bc:	d057      	beq.n	416e <__ieee754_pow+0x1b2>
    40be:	4b36      	ldr	r3, [pc, #216]	; (4198 <__ieee754_pow+0x1dc>)
    40c0:	429d      	cmp	r5, r3
    40c2:	dd77      	ble.n	41b4 <__ieee754_pow+0x1f8>
    40c4:	4b35      	ldr	r3, [pc, #212]	; (419c <__ieee754_pow+0x1e0>)
    40c6:	429d      	cmp	r5, r3
    40c8:	dc00      	bgt.n	40cc <__ieee754_pow+0x110>
    40ca:	e3b1      	b.n	4830 <__ieee754_pow+0x874>
    40cc:	4b34      	ldr	r3, [pc, #208]	; (41a0 <__ieee754_pow+0x1e4>)
    40ce:	429c      	cmp	r4, r3
    40d0:	dc00      	bgt.n	40d4 <__ieee754_pow+0x118>
    40d2:	e3a8      	b.n	4826 <__ieee754_pow+0x86a>
    40d4:	4653      	mov	r3, sl
    40d6:	2b00      	cmp	r3, #0
    40d8:	dd43      	ble.n	4162 <__ieee754_pow+0x1a6>
    40da:	4a32      	ldr	r2, [pc, #200]	; (41a4 <__ieee754_pow+0x1e8>)
    40dc:	4b32      	ldr	r3, [pc, #200]	; (41a8 <__ieee754_pow+0x1ec>)
    40de:	0010      	movs	r0, r2
    40e0:	0019      	movs	r1, r3
    40e2:	f002 f933 	bl	634c <__aeabi_dmul>
    40e6:	e7b1      	b.n	404c <__ieee754_pow+0x90>
    40e8:	4653      	mov	r3, sl
    40ea:	0038      	movs	r0, r7
    40ec:	0031      	movs	r1, r6
    40ee:	2b00      	cmp	r3, #0
    40f0:	daac      	bge.n	404c <__ieee754_pow+0x90>
    40f2:	003a      	movs	r2, r7
    40f4:	0033      	movs	r3, r6
    40f6:	2000      	movs	r0, #0
    40f8:	4923      	ldr	r1, [pc, #140]	; (4188 <__ieee754_pow+0x1cc>)
    40fa:	f001 fcf3 	bl	5ae4 <__aeabi_ddiv>
    40fe:	e7a5      	b.n	404c <__ieee754_pow+0x90>
    4100:	2a00      	cmp	r2, #0
    4102:	d100      	bne.n	4106 <__ieee754_pow+0x14a>
    4104:	e77a      	b.n	3ffc <__ieee754_pow+0x40>
    4106:	e79a      	b.n	403e <__ieee754_pow+0x82>
    4108:	4b28      	ldr	r3, [pc, #160]	; (41ac <__ieee754_pow+0x1f0>)
    410a:	429d      	cmp	r5, r3
    410c:	dc2c      	bgt.n	4168 <__ieee754_pow+0x1ac>
    410e:	4b24      	ldr	r3, [pc, #144]	; (41a0 <__ieee754_pow+0x1e4>)
    4110:	429d      	cmp	r5, r3
    4112:	dc00      	bgt.n	4116 <__ieee754_pow+0x15a>
    4114:	e778      	b.n	4008 <__ieee754_pow+0x4c>
    4116:	4926      	ldr	r1, [pc, #152]	; (41b0 <__ieee754_pow+0x1f4>)
    4118:	152b      	asrs	r3, r5, #20
    411a:	468c      	mov	ip, r1
    411c:	4463      	add	r3, ip
    411e:	2b14      	cmp	r3, #20
    4120:	dc01      	bgt.n	4126 <__ieee754_pow+0x16a>
    4122:	f000 fbf3 	bl	490c <__ieee754_pow+0x950>
    4126:	2134      	movs	r1, #52	; 0x34
    4128:	1acb      	subs	r3, r1, r3
    412a:	9900      	ldr	r1, [sp, #0]
    412c:	40d9      	lsrs	r1, r3
    412e:	0008      	movs	r0, r1
    4130:	4098      	lsls	r0, r3
    4132:	4282      	cmp	r2, r0
    4134:	d000      	beq.n	4138 <__ieee754_pow+0x17c>
    4136:	e767      	b.n	4008 <__ieee754_pow+0x4c>
    4138:	2301      	movs	r3, #1
    413a:	4019      	ands	r1, r3
    413c:	3301      	adds	r3, #1
    413e:	1a5b      	subs	r3, r3, r1
    4140:	469b      	mov	fp, r3
    4142:	e761      	b.n	4008 <__ieee754_pow+0x4c>
    4144:	4b12      	ldr	r3, [pc, #72]	; (4190 <__ieee754_pow+0x1d4>)
    4146:	18e3      	adds	r3, r4, r3
    4148:	431f      	orrs	r7, r3
    414a:	d100      	bne.n	414e <__ieee754_pow+0x192>
    414c:	e77c      	b.n	4048 <__ieee754_pow+0x8c>
    414e:	4b14      	ldr	r3, [pc, #80]	; (41a0 <__ieee754_pow+0x1e4>)
    4150:	429c      	cmp	r4, r3
    4152:	dc00      	bgt.n	4156 <__ieee754_pow+0x19a>
    4154:	e327      	b.n	47a6 <__ieee754_pow+0x7ea>
    4156:	9800      	ldr	r0, [sp, #0]
    4158:	9901      	ldr	r1, [sp, #4]
    415a:	4653      	mov	r3, sl
    415c:	2b00      	cmp	r3, #0
    415e:	db00      	blt.n	4162 <__ieee754_pow+0x1a6>
    4160:	e774      	b.n	404c <__ieee754_pow+0x90>
    4162:	2000      	movs	r0, #0
    4164:	2100      	movs	r1, #0
    4166:	e771      	b.n	404c <__ieee754_pow+0x90>
    4168:	2302      	movs	r3, #2
    416a:	469b      	mov	fp, r3
    416c:	e74c      	b.n	4008 <__ieee754_pow+0x4c>
    416e:	003a      	movs	r2, r7
    4170:	0033      	movs	r3, r6
    4172:	0038      	movs	r0, r7
    4174:	0031      	movs	r1, r6
    4176:	f002 fb69 	bl	684c <__aeabi_dsub>
    417a:	0002      	movs	r2, r0
    417c:	000b      	movs	r3, r1
    417e:	f001 fcb1 	bl	5ae4 <__aeabi_ddiv>
    4182:	e763      	b.n	404c <__ieee754_pow+0x90>
    4184:	7ff00000 	.word	0x7ff00000
    4188:	3ff00000 	.word	0x3ff00000
    418c:	3fe00000 	.word	0x3fe00000
    4190:	c0100000 	.word	0xc0100000
    4194:	00007280 	.word	0x00007280
    4198:	41e00000 	.word	0x41e00000
    419c:	43f00000 	.word	0x43f00000
    41a0:	3fefffff 	.word	0x3fefffff
    41a4:	8800759c 	.word	0x8800759c
    41a8:	7e37e43c 	.word	0x7e37e43c
    41ac:	433fffff 	.word	0x433fffff
    41b0:	fffffc01 	.word	0xfffffc01
    41b4:	4be9      	ldr	r3, [pc, #932]	; (455c <__ieee754_pow+0x5a0>)
    41b6:	2200      	movs	r2, #0
    41b8:	429c      	cmp	r4, r3
    41ba:	dc06      	bgt.n	41ca <__ieee754_pow+0x20e>
    41bc:	2200      	movs	r2, #0
    41be:	4be8      	ldr	r3, [pc, #928]	; (4560 <__ieee754_pow+0x5a4>)
    41c0:	f002 f8c4 	bl	634c <__aeabi_dmul>
    41c4:	2235      	movs	r2, #53	; 0x35
    41c6:	000c      	movs	r4, r1
    41c8:	4252      	negs	r2, r2
    41ca:	4de6      	ldr	r5, [pc, #920]	; (4564 <__ieee754_pow+0x5a8>)
    41cc:	1523      	asrs	r3, r4, #20
    41ce:	46ac      	mov	ip, r5
    41d0:	4463      	add	r3, ip
    41d2:	4699      	mov	r9, r3
    41d4:	0324      	lsls	r4, r4, #12
    41d6:	4de4      	ldr	r5, [pc, #912]	; (4568 <__ieee754_pow+0x5ac>)
    41d8:	4be4      	ldr	r3, [pc, #912]	; (456c <__ieee754_pow+0x5b0>)
    41da:	0b24      	lsrs	r4, r4, #12
    41dc:	4491      	add	r9, r2
    41de:	4325      	orrs	r5, r4
    41e0:	429c      	cmp	r4, r3
    41e2:	dd09      	ble.n	41f8 <__ieee754_pow+0x23c>
    41e4:	4be2      	ldr	r3, [pc, #904]	; (4570 <__ieee754_pow+0x5b4>)
    41e6:	429c      	cmp	r4, r3
    41e8:	dc00      	bgt.n	41ec <__ieee754_pow+0x230>
    41ea:	e3b6      	b.n	495a <__ieee754_pow+0x99e>
    41ec:	2301      	movs	r3, #1
    41ee:	469c      	mov	ip, r3
    41f0:	4be0      	ldr	r3, [pc, #896]	; (4574 <__ieee754_pow+0x5b8>)
    41f2:	44e1      	add	r9, ip
    41f4:	469c      	mov	ip, r3
    41f6:	4465      	add	r5, ip
    41f8:	2300      	movs	r3, #0
    41fa:	2400      	movs	r4, #0
    41fc:	2200      	movs	r2, #0
    41fe:	9308      	str	r3, [sp, #32]
    4200:	9409      	str	r4, [sp, #36]	; 0x24
    4202:	930c      	str	r3, [sp, #48]	; 0x30
    4204:	940d      	str	r4, [sp, #52]	; 0x34
    4206:	2400      	movs	r4, #0
    4208:	4bd7      	ldr	r3, [pc, #860]	; (4568 <__ieee754_pow+0x5ac>)
    420a:	9206      	str	r2, [sp, #24]
    420c:	9307      	str	r3, [sp, #28]
    420e:	9a06      	ldr	r2, [sp, #24]
    4210:	9b07      	ldr	r3, [sp, #28]
    4212:	0029      	movs	r1, r5
    4214:	900a      	str	r0, [sp, #40]	; 0x28
    4216:	910b      	str	r1, [sp, #44]	; 0x2c
    4218:	f002 fb18 	bl	684c <__aeabi_dsub>
    421c:	9a06      	ldr	r2, [sp, #24]
    421e:	9b07      	ldr	r3, [sp, #28]
    4220:	0006      	movs	r6, r0
    4222:	000f      	movs	r7, r1
    4224:	980a      	ldr	r0, [sp, #40]	; 0x28
    4226:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4228:	f001 f94c 	bl	54c4 <__aeabi_dadd>
    422c:	0002      	movs	r2, r0
    422e:	000b      	movs	r3, r1
    4230:	2000      	movs	r0, #0
    4232:	49cd      	ldr	r1, [pc, #820]	; (4568 <__ieee754_pow+0x5ac>)
    4234:	f001 fc56 	bl	5ae4 <__aeabi_ddiv>
    4238:	000a      	movs	r2, r1
    423a:	0001      	movs	r1, r0
    423c:	0013      	movs	r3, r2
    423e:	910e      	str	r1, [sp, #56]	; 0x38
    4240:	920f      	str	r2, [sp, #60]	; 0x3c
    4242:	0002      	movs	r2, r0
    4244:	0039      	movs	r1, r7
    4246:	0030      	movs	r0, r6
    4248:	f002 f880 	bl	634c <__aeabi_dmul>
    424c:	000a      	movs	r2, r1
    424e:	0001      	movs	r1, r0
    4250:	2080      	movs	r0, #128	; 0x80
    4252:	9104      	str	r1, [sp, #16]
    4254:	9205      	str	r2, [sp, #20]
    4256:	0013      	movs	r3, r2
    4258:	2200      	movs	r2, #0
    425a:	1069      	asrs	r1, r5, #1
    425c:	2580      	movs	r5, #128	; 0x80
    425e:	0300      	lsls	r0, r0, #12
    4260:	4684      	mov	ip, r0
    4262:	9202      	str	r2, [sp, #8]
    4264:	9303      	str	r3, [sp, #12]
    4266:	2200      	movs	r2, #0
    4268:	05ad      	lsls	r5, r5, #22
    426a:	430d      	orrs	r5, r1
    426c:	4465      	add	r5, ip
    426e:	192b      	adds	r3, r5, r4
    4270:	9802      	ldr	r0, [sp, #8]
    4272:	9903      	ldr	r1, [sp, #12]
    4274:	0014      	movs	r4, r2
    4276:	001d      	movs	r5, r3
    4278:	f002 f868 	bl	634c <__aeabi_dmul>
    427c:	0002      	movs	r2, r0
    427e:	000b      	movs	r3, r1
    4280:	0030      	movs	r0, r6
    4282:	0039      	movs	r1, r7
    4284:	f002 fae2 	bl	684c <__aeabi_dsub>
    4288:	9a06      	ldr	r2, [sp, #24]
    428a:	9b07      	ldr	r3, [sp, #28]
    428c:	0006      	movs	r6, r0
    428e:	000f      	movs	r7, r1
    4290:	0020      	movs	r0, r4
    4292:	0029      	movs	r1, r5
    4294:	f002 fada 	bl	684c <__aeabi_dsub>
    4298:	0002      	movs	r2, r0
    429a:	000b      	movs	r3, r1
    429c:	980a      	ldr	r0, [sp, #40]	; 0x28
    429e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    42a0:	f002 fad4 	bl	684c <__aeabi_dsub>
    42a4:	9a02      	ldr	r2, [sp, #8]
    42a6:	9b03      	ldr	r3, [sp, #12]
    42a8:	f002 f850 	bl	634c <__aeabi_dmul>
    42ac:	0002      	movs	r2, r0
    42ae:	000b      	movs	r3, r1
    42b0:	0030      	movs	r0, r6
    42b2:	0039      	movs	r1, r7
    42b4:	f002 faca 	bl	684c <__aeabi_dsub>
    42b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    42ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    42bc:	f002 f846 	bl	634c <__aeabi_dmul>
    42c0:	9d04      	ldr	r5, [sp, #16]
    42c2:	9e05      	ldr	r6, [sp, #20]
    42c4:	9006      	str	r0, [sp, #24]
    42c6:	9107      	str	r1, [sp, #28]
    42c8:	002a      	movs	r2, r5
    42ca:	0033      	movs	r3, r6
    42cc:	0028      	movs	r0, r5
    42ce:	0031      	movs	r1, r6
    42d0:	f002 f83c 	bl	634c <__aeabi_dmul>
    42d4:	0006      	movs	r6, r0
    42d6:	000f      	movs	r7, r1
    42d8:	4aa7      	ldr	r2, [pc, #668]	; (4578 <__ieee754_pow+0x5bc>)
    42da:	4ba8      	ldr	r3, [pc, #672]	; (457c <__ieee754_pow+0x5c0>)
    42dc:	f002 f836 	bl	634c <__aeabi_dmul>
    42e0:	4aa7      	ldr	r2, [pc, #668]	; (4580 <__ieee754_pow+0x5c4>)
    42e2:	4ba8      	ldr	r3, [pc, #672]	; (4584 <__ieee754_pow+0x5c8>)
    42e4:	f001 f8ee 	bl	54c4 <__aeabi_dadd>
    42e8:	0032      	movs	r2, r6
    42ea:	003b      	movs	r3, r7
    42ec:	f002 f82e 	bl	634c <__aeabi_dmul>
    42f0:	4aa5      	ldr	r2, [pc, #660]	; (4588 <__ieee754_pow+0x5cc>)
    42f2:	4ba6      	ldr	r3, [pc, #664]	; (458c <__ieee754_pow+0x5d0>)
    42f4:	f001 f8e6 	bl	54c4 <__aeabi_dadd>
    42f8:	0032      	movs	r2, r6
    42fa:	003b      	movs	r3, r7
    42fc:	f002 f826 	bl	634c <__aeabi_dmul>
    4300:	4aa3      	ldr	r2, [pc, #652]	; (4590 <__ieee754_pow+0x5d4>)
    4302:	4ba4      	ldr	r3, [pc, #656]	; (4594 <__ieee754_pow+0x5d8>)
    4304:	f001 f8de 	bl	54c4 <__aeabi_dadd>
    4308:	0032      	movs	r2, r6
    430a:	003b      	movs	r3, r7
    430c:	f002 f81e 	bl	634c <__aeabi_dmul>
    4310:	4aa1      	ldr	r2, [pc, #644]	; (4598 <__ieee754_pow+0x5dc>)
    4312:	4ba2      	ldr	r3, [pc, #648]	; (459c <__ieee754_pow+0x5e0>)
    4314:	f001 f8d6 	bl	54c4 <__aeabi_dadd>
    4318:	0032      	movs	r2, r6
    431a:	003b      	movs	r3, r7
    431c:	f002 f816 	bl	634c <__aeabi_dmul>
    4320:	4a9f      	ldr	r2, [pc, #636]	; (45a0 <__ieee754_pow+0x5e4>)
    4322:	4ba0      	ldr	r3, [pc, #640]	; (45a4 <__ieee754_pow+0x5e8>)
    4324:	f001 f8ce 	bl	54c4 <__aeabi_dadd>
    4328:	0032      	movs	r2, r6
    432a:	0004      	movs	r4, r0
    432c:	000d      	movs	r5, r1
    432e:	003b      	movs	r3, r7
    4330:	0030      	movs	r0, r6
    4332:	0039      	movs	r1, r7
    4334:	f002 f80a 	bl	634c <__aeabi_dmul>
    4338:	0002      	movs	r2, r0
    433a:	000b      	movs	r3, r1
    433c:	0020      	movs	r0, r4
    433e:	0029      	movs	r1, r5
    4340:	f002 f804 	bl	634c <__aeabi_dmul>
    4344:	9e02      	ldr	r6, [sp, #8]
    4346:	9f03      	ldr	r7, [sp, #12]
    4348:	0004      	movs	r4, r0
    434a:	000d      	movs	r5, r1
    434c:	9804      	ldr	r0, [sp, #16]
    434e:	9905      	ldr	r1, [sp, #20]
    4350:	0032      	movs	r2, r6
    4352:	003b      	movs	r3, r7
    4354:	f001 f8b6 	bl	54c4 <__aeabi_dadd>
    4358:	9a06      	ldr	r2, [sp, #24]
    435a:	9b07      	ldr	r3, [sp, #28]
    435c:	f001 fff6 	bl	634c <__aeabi_dmul>
    4360:	0022      	movs	r2, r4
    4362:	002b      	movs	r3, r5
    4364:	f001 f8ae 	bl	54c4 <__aeabi_dadd>
    4368:	0032      	movs	r2, r6
    436a:	900a      	str	r0, [sp, #40]	; 0x28
    436c:	910b      	str	r1, [sp, #44]	; 0x2c
    436e:	003b      	movs	r3, r7
    4370:	0030      	movs	r0, r6
    4372:	0039      	movs	r1, r7
    4374:	9602      	str	r6, [sp, #8]
    4376:	9703      	str	r7, [sp, #12]
    4378:	f001 ffe8 	bl	634c <__aeabi_dmul>
    437c:	2200      	movs	r2, #0
    437e:	4b8a      	ldr	r3, [pc, #552]	; (45a8 <__ieee754_pow+0x5ec>)
    4380:	0004      	movs	r4, r0
    4382:	000d      	movs	r5, r1
    4384:	f001 f89e 	bl	54c4 <__aeabi_dadd>
    4388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    438a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    438c:	f001 f89a 	bl	54c4 <__aeabi_dadd>
    4390:	2600      	movs	r6, #0
    4392:	000f      	movs	r7, r1
    4394:	0032      	movs	r2, r6
    4396:	000b      	movs	r3, r1
    4398:	9802      	ldr	r0, [sp, #8]
    439a:	9903      	ldr	r1, [sp, #12]
    439c:	f001 ffd6 	bl	634c <__aeabi_dmul>
    43a0:	2200      	movs	r2, #0
    43a2:	9002      	str	r0, [sp, #8]
    43a4:	9103      	str	r1, [sp, #12]
    43a6:	4b80      	ldr	r3, [pc, #512]	; (45a8 <__ieee754_pow+0x5ec>)
    43a8:	0030      	movs	r0, r6
    43aa:	0039      	movs	r1, r7
    43ac:	f002 fa4e 	bl	684c <__aeabi_dsub>
    43b0:	0022      	movs	r2, r4
    43b2:	002b      	movs	r3, r5
    43b4:	f002 fa4a 	bl	684c <__aeabi_dsub>
    43b8:	0002      	movs	r2, r0
    43ba:	000b      	movs	r3, r1
    43bc:	980a      	ldr	r0, [sp, #40]	; 0x28
    43be:	990b      	ldr	r1, [sp, #44]	; 0x2c
    43c0:	f002 fa44 	bl	684c <__aeabi_dsub>
    43c4:	9a04      	ldr	r2, [sp, #16]
    43c6:	9b05      	ldr	r3, [sp, #20]
    43c8:	f001 ffc0 	bl	634c <__aeabi_dmul>
    43cc:	0032      	movs	r2, r6
    43ce:	0004      	movs	r4, r0
    43d0:	000d      	movs	r5, r1
    43d2:	9806      	ldr	r0, [sp, #24]
    43d4:	9907      	ldr	r1, [sp, #28]
    43d6:	003b      	movs	r3, r7
    43d8:	f001 ffb8 	bl	634c <__aeabi_dmul>
    43dc:	0002      	movs	r2, r0
    43de:	000b      	movs	r3, r1
    43e0:	0020      	movs	r0, r4
    43e2:	0029      	movs	r1, r5
    43e4:	f001 f86e 	bl	54c4 <__aeabi_dadd>
    43e8:	0004      	movs	r4, r0
    43ea:	000d      	movs	r5, r1
    43ec:	0002      	movs	r2, r0
    43ee:	000b      	movs	r3, r1
    43f0:	9802      	ldr	r0, [sp, #8]
    43f2:	9903      	ldr	r1, [sp, #12]
    43f4:	f001 f866 	bl	54c4 <__aeabi_dadd>
    43f8:	2600      	movs	r6, #0
    43fa:	22e0      	movs	r2, #224	; 0xe0
    43fc:	4b6b      	ldr	r3, [pc, #428]	; (45ac <__ieee754_pow+0x5f0>)
    43fe:	0612      	lsls	r2, r2, #24
    4400:	0030      	movs	r0, r6
    4402:	000f      	movs	r7, r1
    4404:	f001 ffa2 	bl	634c <__aeabi_dmul>
    4408:	9a02      	ldr	r2, [sp, #8]
    440a:	9b03      	ldr	r3, [sp, #12]
    440c:	9004      	str	r0, [sp, #16]
    440e:	9105      	str	r1, [sp, #20]
    4410:	0030      	movs	r0, r6
    4412:	0039      	movs	r1, r7
    4414:	f002 fa1a 	bl	684c <__aeabi_dsub>
    4418:	0002      	movs	r2, r0
    441a:	000b      	movs	r3, r1
    441c:	0020      	movs	r0, r4
    441e:	0029      	movs	r1, r5
    4420:	f002 fa14 	bl	684c <__aeabi_dsub>
    4424:	4a62      	ldr	r2, [pc, #392]	; (45b0 <__ieee754_pow+0x5f4>)
    4426:	4b61      	ldr	r3, [pc, #388]	; (45ac <__ieee754_pow+0x5f0>)
    4428:	f001 ff90 	bl	634c <__aeabi_dmul>
    442c:	4a61      	ldr	r2, [pc, #388]	; (45b4 <__ieee754_pow+0x5f8>)
    442e:	0004      	movs	r4, r0
    4430:	000d      	movs	r5, r1
    4432:	4b61      	ldr	r3, [pc, #388]	; (45b8 <__ieee754_pow+0x5fc>)
    4434:	0030      	movs	r0, r6
    4436:	0039      	movs	r1, r7
    4438:	f001 ff88 	bl	634c <__aeabi_dmul>
    443c:	0002      	movs	r2, r0
    443e:	000b      	movs	r3, r1
    4440:	0020      	movs	r0, r4
    4442:	0029      	movs	r1, r5
    4444:	f001 f83e 	bl	54c4 <__aeabi_dadd>
    4448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    444a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    444c:	f001 f83a 	bl	54c4 <__aeabi_dadd>
    4450:	0006      	movs	r6, r0
    4452:	4648      	mov	r0, r9
    4454:	000f      	movs	r7, r1
    4456:	f002 fd63 	bl	6f20 <__aeabi_i2d>
    445a:	0004      	movs	r4, r0
    445c:	000d      	movs	r5, r1
    445e:	9804      	ldr	r0, [sp, #16]
    4460:	9905      	ldr	r1, [sp, #20]
    4462:	0032      	movs	r2, r6
    4464:	003b      	movs	r3, r7
    4466:	f001 f82d 	bl	54c4 <__aeabi_dadd>
    446a:	9a08      	ldr	r2, [sp, #32]
    446c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    446e:	f001 f829 	bl	54c4 <__aeabi_dadd>
    4472:	0022      	movs	r2, r4
    4474:	002b      	movs	r3, r5
    4476:	f001 f825 	bl	54c4 <__aeabi_dadd>
    447a:	2000      	movs	r0, #0
    447c:	0022      	movs	r2, r4
    447e:	002b      	movs	r3, r5
    4480:	9002      	str	r0, [sp, #8]
    4482:	9103      	str	r1, [sp, #12]
    4484:	f002 f9e2 	bl	684c <__aeabi_dsub>
    4488:	9a08      	ldr	r2, [sp, #32]
    448a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    448c:	f002 f9de 	bl	684c <__aeabi_dsub>
    4490:	9a04      	ldr	r2, [sp, #16]
    4492:	9b05      	ldr	r3, [sp, #20]
    4494:	f002 f9da 	bl	684c <__aeabi_dsub>
    4498:	0002      	movs	r2, r0
    449a:	000b      	movs	r3, r1
    449c:	0030      	movs	r0, r6
    449e:	0039      	movs	r1, r7
    44a0:	f002 f9d4 	bl	684c <__aeabi_dsub>
    44a4:	9004      	str	r0, [sp, #16]
    44a6:	9105      	str	r1, [sp, #20]
    44a8:	465b      	mov	r3, fp
    44aa:	4642      	mov	r2, r8
    44ac:	3b01      	subs	r3, #1
    44ae:	4313      	orrs	r3, r2
    44b0:	d100      	bne.n	44b4 <__ieee754_pow+0x4f8>
    44b2:	e1ab      	b.n	480c <__ieee754_pow+0x850>
    44b4:	2300      	movs	r3, #0
    44b6:	4c2c      	ldr	r4, [pc, #176]	; (4568 <__ieee754_pow+0x5ac>)
    44b8:	9306      	str	r3, [sp, #24]
    44ba:	9407      	str	r4, [sp, #28]
    44bc:	9800      	ldr	r0, [sp, #0]
    44be:	9901      	ldr	r1, [sp, #4]
    44c0:	2600      	movs	r6, #0
    44c2:	000b      	movs	r3, r1
    44c4:	0032      	movs	r2, r6
    44c6:	000f      	movs	r7, r1
    44c8:	f002 f9c0 	bl	684c <__aeabi_dsub>
    44cc:	9a02      	ldr	r2, [sp, #8]
    44ce:	9b03      	ldr	r3, [sp, #12]
    44d0:	f001 ff3c 	bl	634c <__aeabi_dmul>
    44d4:	9a00      	ldr	r2, [sp, #0]
    44d6:	9b01      	ldr	r3, [sp, #4]
    44d8:	0004      	movs	r4, r0
    44da:	000d      	movs	r5, r1
    44dc:	9804      	ldr	r0, [sp, #16]
    44de:	9905      	ldr	r1, [sp, #20]
    44e0:	f001 ff34 	bl	634c <__aeabi_dmul>
    44e4:	0002      	movs	r2, r0
    44e6:	000b      	movs	r3, r1
    44e8:	0020      	movs	r0, r4
    44ea:	0029      	movs	r1, r5
    44ec:	f000 ffea 	bl	54c4 <__aeabi_dadd>
    44f0:	0004      	movs	r4, r0
    44f2:	000d      	movs	r5, r1
    44f4:	9802      	ldr	r0, [sp, #8]
    44f6:	9903      	ldr	r1, [sp, #12]
    44f8:	0032      	movs	r2, r6
    44fa:	003b      	movs	r3, r7
    44fc:	9400      	str	r4, [sp, #0]
    44fe:	9501      	str	r5, [sp, #4]
    4500:	f001 ff24 	bl	634c <__aeabi_dmul>
    4504:	0002      	movs	r2, r0
    4506:	000b      	movs	r3, r1
    4508:	0006      	movs	r6, r0
    450a:	000f      	movs	r7, r1
    450c:	0020      	movs	r0, r4
    450e:	0029      	movs	r1, r5
    4510:	f000 ffd8 	bl	54c4 <__aeabi_dadd>
    4514:	4b29      	ldr	r3, [pc, #164]	; (45bc <__ieee754_pow+0x600>)
    4516:	0004      	movs	r4, r0
    4518:	000d      	movs	r5, r1
    451a:	0002      	movs	r2, r0
    451c:	468b      	mov	fp, r1
    451e:	4299      	cmp	r1, r3
    4520:	dc00      	bgt.n	4524 <__ieee754_pow+0x568>
    4522:	e14f      	b.n	47c4 <__ieee754_pow+0x808>
    4524:	4b26      	ldr	r3, [pc, #152]	; (45c0 <__ieee754_pow+0x604>)
    4526:	18cb      	adds	r3, r1, r3
    4528:	4303      	orrs	r3, r0
    452a:	d000      	beq.n	452e <__ieee754_pow+0x572>
    452c:	e1e2      	b.n	48f4 <__ieee754_pow+0x938>
    452e:	9800      	ldr	r0, [sp, #0]
    4530:	9901      	ldr	r1, [sp, #4]
    4532:	4a24      	ldr	r2, [pc, #144]	; (45c4 <__ieee754_pow+0x608>)
    4534:	4b24      	ldr	r3, [pc, #144]	; (45c8 <__ieee754_pow+0x60c>)
    4536:	f000 ffc5 	bl	54c4 <__aeabi_dadd>
    453a:	0032      	movs	r2, r6
    453c:	9002      	str	r0, [sp, #8]
    453e:	9103      	str	r1, [sp, #12]
    4540:	003b      	movs	r3, r7
    4542:	0020      	movs	r0, r4
    4544:	0029      	movs	r1, r5
    4546:	f002 f981 	bl	684c <__aeabi_dsub>
    454a:	0002      	movs	r2, r0
    454c:	000b      	movs	r3, r1
    454e:	9802      	ldr	r0, [sp, #8]
    4550:	9903      	ldr	r1, [sp, #12]
    4552:	f000 fe1b 	bl	518c <__aeabi_dcmpgt>
    4556:	46aa      	mov	sl, r5
    4558:	e038      	b.n	45cc <__ieee754_pow+0x610>
    455a:	46c0      	nop			; (mov r8, r8)
    455c:	000fffff 	.word	0x000fffff
    4560:	43400000 	.word	0x43400000
    4564:	fffffc01 	.word	0xfffffc01
    4568:	3ff00000 	.word	0x3ff00000
    456c:	0003988e 	.word	0x0003988e
    4570:	000bb679 	.word	0x000bb679
    4574:	fff00000 	.word	0xfff00000
    4578:	4a454eef 	.word	0x4a454eef
    457c:	3fca7e28 	.word	0x3fca7e28
    4580:	93c9db65 	.word	0x93c9db65
    4584:	3fcd864a 	.word	0x3fcd864a
    4588:	a91d4101 	.word	0xa91d4101
    458c:	3fd17460 	.word	0x3fd17460
    4590:	518f264d 	.word	0x518f264d
    4594:	3fd55555 	.word	0x3fd55555
    4598:	db6fabff 	.word	0xdb6fabff
    459c:	3fdb6db6 	.word	0x3fdb6db6
    45a0:	33333303 	.word	0x33333303
    45a4:	3fe33333 	.word	0x3fe33333
    45a8:	40080000 	.word	0x40080000
    45ac:	3feec709 	.word	0x3feec709
    45b0:	dc3a03fd 	.word	0xdc3a03fd
    45b4:	145b01f5 	.word	0x145b01f5
    45b8:	be3e2fe0 	.word	0xbe3e2fe0
    45bc:	408fffff 	.word	0x408fffff
    45c0:	bf700000 	.word	0xbf700000
    45c4:	652b82fe 	.word	0x652b82fe
    45c8:	3c971547 	.word	0x3c971547
    45cc:	2800      	cmp	r0, #0
    45ce:	d000      	beq.n	45d2 <__ieee754_pow+0x616>
    45d0:	e190      	b.n	48f4 <__ieee754_pow+0x938>
    45d2:	4aec      	ldr	r2, [pc, #944]	; (4984 <__ieee754_pow+0x9c8>)
    45d4:	4653      	mov	r3, sl
    45d6:	4694      	mov	ip, r2
    45d8:	2280      	movs	r2, #128	; 0x80
    45da:	0352      	lsls	r2, r2, #13
    45dc:	0011      	movs	r1, r2
    45de:	151b      	asrs	r3, r3, #20
    45e0:	4463      	add	r3, ip
    45e2:	4119      	asrs	r1, r3
    45e4:	000b      	movs	r3, r1
    45e6:	4690      	mov	r8, r2
    45e8:	4ae7      	ldr	r2, [pc, #924]	; (4988 <__ieee754_pow+0x9cc>)
    45ea:	445b      	add	r3, fp
    45ec:	4694      	mov	ip, r2
    45ee:	005c      	lsls	r4, r3, #1
    45f0:	0d64      	lsrs	r4, r4, #21
    45f2:	4de6      	ldr	r5, [pc, #920]	; (498c <__ieee754_pow+0x9d0>)
    45f4:	4464      	add	r4, ip
    45f6:	4125      	asrs	r5, r4
    45f8:	001a      	movs	r2, r3
    45fa:	43aa      	bics	r2, r5
    45fc:	0011      	movs	r1, r2
    45fe:	4642      	mov	r2, r8
    4600:	031b      	lsls	r3, r3, #12
    4602:	0b1b      	lsrs	r3, r3, #12
    4604:	4313      	orrs	r3, r2
    4606:	2214      	movs	r2, #20
    4608:	1b14      	subs	r4, r2, r4
    460a:	4123      	asrs	r3, r4
    460c:	4699      	mov	r9, r3
    460e:	465b      	mov	r3, fp
    4610:	2000      	movs	r0, #0
    4612:	2b00      	cmp	r3, #0
    4614:	da00      	bge.n	4618 <__ieee754_pow+0x65c>
    4616:	e1b0      	b.n	497a <__ieee754_pow+0x9be>
    4618:	0002      	movs	r2, r0
    461a:	000b      	movs	r3, r1
    461c:	0030      	movs	r0, r6
    461e:	0039      	movs	r1, r7
    4620:	f002 f914 	bl	684c <__aeabi_dsub>
    4624:	000b      	movs	r3, r1
    4626:	0002      	movs	r2, r0
    4628:	0006      	movs	r6, r0
    462a:	000f      	movs	r7, r1
    462c:	9800      	ldr	r0, [sp, #0]
    462e:	9901      	ldr	r1, [sp, #4]
    4630:	f000 ff48 	bl	54c4 <__aeabi_dadd>
    4634:	464b      	mov	r3, r9
    4636:	051b      	lsls	r3, r3, #20
    4638:	000d      	movs	r5, r1
    463a:	4698      	mov	r8, r3
    463c:	2400      	movs	r4, #0
    463e:	2200      	movs	r2, #0
    4640:	4bd3      	ldr	r3, [pc, #844]	; (4990 <__ieee754_pow+0x9d4>)
    4642:	0020      	movs	r0, r4
    4644:	0029      	movs	r1, r5
    4646:	f001 fe81 	bl	634c <__aeabi_dmul>
    464a:	0032      	movs	r2, r6
    464c:	9002      	str	r0, [sp, #8]
    464e:	9103      	str	r1, [sp, #12]
    4650:	003b      	movs	r3, r7
    4652:	0020      	movs	r0, r4
    4654:	0029      	movs	r1, r5
    4656:	f002 f8f9 	bl	684c <__aeabi_dsub>
    465a:	0002      	movs	r2, r0
    465c:	000b      	movs	r3, r1
    465e:	9800      	ldr	r0, [sp, #0]
    4660:	9901      	ldr	r1, [sp, #4]
    4662:	f002 f8f3 	bl	684c <__aeabi_dsub>
    4666:	4acb      	ldr	r2, [pc, #812]	; (4994 <__ieee754_pow+0x9d8>)
    4668:	4bcb      	ldr	r3, [pc, #812]	; (4998 <__ieee754_pow+0x9dc>)
    466a:	f001 fe6f 	bl	634c <__aeabi_dmul>
    466e:	4acb      	ldr	r2, [pc, #812]	; (499c <__ieee754_pow+0x9e0>)
    4670:	0006      	movs	r6, r0
    4672:	000f      	movs	r7, r1
    4674:	4bca      	ldr	r3, [pc, #808]	; (49a0 <__ieee754_pow+0x9e4>)
    4676:	0020      	movs	r0, r4
    4678:	0029      	movs	r1, r5
    467a:	f001 fe67 	bl	634c <__aeabi_dmul>
    467e:	0002      	movs	r2, r0
    4680:	000b      	movs	r3, r1
    4682:	0030      	movs	r0, r6
    4684:	0039      	movs	r1, r7
    4686:	f000 ff1d 	bl	54c4 <__aeabi_dadd>
    468a:	0004      	movs	r4, r0
    468c:	000d      	movs	r5, r1
    468e:	0002      	movs	r2, r0
    4690:	000b      	movs	r3, r1
    4692:	9802      	ldr	r0, [sp, #8]
    4694:	9903      	ldr	r1, [sp, #12]
    4696:	f000 ff15 	bl	54c4 <__aeabi_dadd>
    469a:	9a02      	ldr	r2, [sp, #8]
    469c:	9b03      	ldr	r3, [sp, #12]
    469e:	0006      	movs	r6, r0
    46a0:	000f      	movs	r7, r1
    46a2:	f002 f8d3 	bl	684c <__aeabi_dsub>
    46a6:	0002      	movs	r2, r0
    46a8:	000b      	movs	r3, r1
    46aa:	0020      	movs	r0, r4
    46ac:	0029      	movs	r1, r5
    46ae:	f002 f8cd 	bl	684c <__aeabi_dsub>
    46b2:	0032      	movs	r2, r6
    46b4:	9000      	str	r0, [sp, #0]
    46b6:	9101      	str	r1, [sp, #4]
    46b8:	003b      	movs	r3, r7
    46ba:	0030      	movs	r0, r6
    46bc:	0039      	movs	r1, r7
    46be:	f001 fe45 	bl	634c <__aeabi_dmul>
    46c2:	0004      	movs	r4, r0
    46c4:	000d      	movs	r5, r1
    46c6:	4ab7      	ldr	r2, [pc, #732]	; (49a4 <__ieee754_pow+0x9e8>)
    46c8:	4bb7      	ldr	r3, [pc, #732]	; (49a8 <__ieee754_pow+0x9ec>)
    46ca:	f001 fe3f 	bl	634c <__aeabi_dmul>
    46ce:	4ab7      	ldr	r2, [pc, #732]	; (49ac <__ieee754_pow+0x9f0>)
    46d0:	4bb7      	ldr	r3, [pc, #732]	; (49b0 <__ieee754_pow+0x9f4>)
    46d2:	f002 f8bb 	bl	684c <__aeabi_dsub>
    46d6:	0022      	movs	r2, r4
    46d8:	002b      	movs	r3, r5
    46da:	f001 fe37 	bl	634c <__aeabi_dmul>
    46de:	4ab5      	ldr	r2, [pc, #724]	; (49b4 <__ieee754_pow+0x9f8>)
    46e0:	4bb5      	ldr	r3, [pc, #724]	; (49b8 <__ieee754_pow+0x9fc>)
    46e2:	f000 feef 	bl	54c4 <__aeabi_dadd>
    46e6:	0022      	movs	r2, r4
    46e8:	002b      	movs	r3, r5
    46ea:	f001 fe2f 	bl	634c <__aeabi_dmul>
    46ee:	4ab3      	ldr	r2, [pc, #716]	; (49bc <__ieee754_pow+0xa00>)
    46f0:	4bb3      	ldr	r3, [pc, #716]	; (49c0 <__ieee754_pow+0xa04>)
    46f2:	f002 f8ab 	bl	684c <__aeabi_dsub>
    46f6:	0022      	movs	r2, r4
    46f8:	002b      	movs	r3, r5
    46fa:	f001 fe27 	bl	634c <__aeabi_dmul>
    46fe:	4ab1      	ldr	r2, [pc, #708]	; (49c4 <__ieee754_pow+0xa08>)
    4700:	4bb1      	ldr	r3, [pc, #708]	; (49c8 <__ieee754_pow+0xa0c>)
    4702:	f000 fedf 	bl	54c4 <__aeabi_dadd>
    4706:	0022      	movs	r2, r4
    4708:	002b      	movs	r3, r5
    470a:	f001 fe1f 	bl	634c <__aeabi_dmul>
    470e:	0002      	movs	r2, r0
    4710:	000b      	movs	r3, r1
    4712:	0030      	movs	r0, r6
    4714:	0039      	movs	r1, r7
    4716:	f002 f899 	bl	684c <__aeabi_dsub>
    471a:	0004      	movs	r4, r0
    471c:	000d      	movs	r5, r1
    471e:	0002      	movs	r2, r0
    4720:	000b      	movs	r3, r1
    4722:	0030      	movs	r0, r6
    4724:	0039      	movs	r1, r7
    4726:	f001 fe11 	bl	634c <__aeabi_dmul>
    472a:	2380      	movs	r3, #128	; 0x80
    472c:	9002      	str	r0, [sp, #8]
    472e:	9103      	str	r1, [sp, #12]
    4730:	2200      	movs	r2, #0
    4732:	05db      	lsls	r3, r3, #23
    4734:	0020      	movs	r0, r4
    4736:	0029      	movs	r1, r5
    4738:	f002 f888 	bl	684c <__aeabi_dsub>
    473c:	0002      	movs	r2, r0
    473e:	000b      	movs	r3, r1
    4740:	9802      	ldr	r0, [sp, #8]
    4742:	9903      	ldr	r1, [sp, #12]
    4744:	f001 f9ce 	bl	5ae4 <__aeabi_ddiv>
    4748:	9a00      	ldr	r2, [sp, #0]
    474a:	9b01      	ldr	r3, [sp, #4]
    474c:	0004      	movs	r4, r0
    474e:	000d      	movs	r5, r1
    4750:	0030      	movs	r0, r6
    4752:	0039      	movs	r1, r7
    4754:	f001 fdfa 	bl	634c <__aeabi_dmul>
    4758:	9a00      	ldr	r2, [sp, #0]
    475a:	9b01      	ldr	r3, [sp, #4]
    475c:	f000 feb2 	bl	54c4 <__aeabi_dadd>
    4760:	0002      	movs	r2, r0
    4762:	000b      	movs	r3, r1
    4764:	0020      	movs	r0, r4
    4766:	0029      	movs	r1, r5
    4768:	f002 f870 	bl	684c <__aeabi_dsub>
    476c:	0032      	movs	r2, r6
    476e:	003b      	movs	r3, r7
    4770:	f002 f86c 	bl	684c <__aeabi_dsub>
    4774:	0002      	movs	r2, r0
    4776:	000b      	movs	r3, r1
    4778:	2000      	movs	r0, #0
    477a:	4994      	ldr	r1, [pc, #592]	; (49cc <__ieee754_pow+0xa10>)
    477c:	f002 f866 	bl	684c <__aeabi_dsub>
    4780:	4643      	mov	r3, r8
    4782:	185b      	adds	r3, r3, r1
    4784:	151a      	asrs	r2, r3, #20
    4786:	2a00      	cmp	r2, #0
    4788:	dc00      	bgt.n	478c <__ieee754_pow+0x7d0>
    478a:	e149      	b.n	4a20 <__ieee754_pow+0xa64>
    478c:	0019      	movs	r1, r3
    478e:	9a06      	ldr	r2, [sp, #24]
    4790:	9b07      	ldr	r3, [sp, #28]
    4792:	f001 fddb 	bl	634c <__aeabi_dmul>
    4796:	e459      	b.n	404c <__ieee754_pow+0x90>
    4798:	003a      	movs	r2, r7
    479a:	0033      	movs	r3, r6
    479c:	0038      	movs	r0, r7
    479e:	0031      	movs	r1, r6
    47a0:	f001 fdd4 	bl	634c <__aeabi_dmul>
    47a4:	e452      	b.n	404c <__ieee754_pow+0x90>
    47a6:	4653      	mov	r3, sl
    47a8:	2b00      	cmp	r3, #0
    47aa:	db00      	blt.n	47ae <__ieee754_pow+0x7f2>
    47ac:	e4d9      	b.n	4162 <__ieee754_pow+0x1a6>
    47ae:	9c00      	ldr	r4, [sp, #0]
    47b0:	9d01      	ldr	r5, [sp, #4]
    47b2:	2280      	movs	r2, #128	; 0x80
    47b4:	0612      	lsls	r2, r2, #24
    47b6:	002b      	movs	r3, r5
    47b8:	4694      	mov	ip, r2
    47ba:	4463      	add	r3, ip
    47bc:	0020      	movs	r0, r4
    47be:	0019      	movs	r1, r3
    47c0:	f7ff fc44 	bl	404c <__ieee754_pow+0x90>
    47c4:	004b      	lsls	r3, r1, #1
    47c6:	085b      	lsrs	r3, r3, #1
    47c8:	469a      	mov	sl, r3
    47ca:	4b81      	ldr	r3, [pc, #516]	; (49d0 <__ieee754_pow+0xa14>)
    47cc:	459a      	cmp	sl, r3
    47ce:	dc00      	bgt.n	47d2 <__ieee754_pow+0x816>
    47d0:	e0b1      	b.n	4936 <__ieee754_pow+0x97a>
    47d2:	4b80      	ldr	r3, [pc, #512]	; (49d4 <__ieee754_pow+0xa18>)
    47d4:	445b      	add	r3, fp
    47d6:	431a      	orrs	r2, r3
    47d8:	d10c      	bne.n	47f4 <__ieee754_pow+0x838>
    47da:	0032      	movs	r2, r6
    47dc:	003b      	movs	r3, r7
    47de:	f002 f835 	bl	684c <__aeabi_dsub>
    47e2:	0002      	movs	r2, r0
    47e4:	000b      	movs	r3, r1
    47e6:	9800      	ldr	r0, [sp, #0]
    47e8:	9901      	ldr	r1, [sp, #4]
    47ea:	f000 fcc5 	bl	5178 <__aeabi_dcmple>
    47ee:	2800      	cmp	r0, #0
    47f0:	d100      	bne.n	47f4 <__ieee754_pow+0x838>
    47f2:	e6ee      	b.n	45d2 <__ieee754_pow+0x616>
    47f4:	9806      	ldr	r0, [sp, #24]
    47f6:	9907      	ldr	r1, [sp, #28]
    47f8:	4a77      	ldr	r2, [pc, #476]	; (49d8 <__ieee754_pow+0xa1c>)
    47fa:	4b78      	ldr	r3, [pc, #480]	; (49dc <__ieee754_pow+0xa20>)
    47fc:	f001 fda6 	bl	634c <__aeabi_dmul>
    4800:	4a75      	ldr	r2, [pc, #468]	; (49d8 <__ieee754_pow+0xa1c>)
    4802:	4b76      	ldr	r3, [pc, #472]	; (49dc <__ieee754_pow+0xa20>)
    4804:	f001 fda2 	bl	634c <__aeabi_dmul>
    4808:	f7ff fc20 	bl	404c <__ieee754_pow+0x90>
    480c:	2300      	movs	r3, #0
    480e:	4c74      	ldr	r4, [pc, #464]	; (49e0 <__ieee754_pow+0xa24>)
    4810:	9306      	str	r3, [sp, #24]
    4812:	9407      	str	r4, [sp, #28]
    4814:	e652      	b.n	44bc <__ieee754_pow+0x500>
    4816:	0002      	movs	r2, r0
    4818:	000b      	movs	r3, r1
    481a:	2000      	movs	r0, #0
    481c:	496b      	ldr	r1, [pc, #428]	; (49cc <__ieee754_pow+0xa10>)
    481e:	f001 f961 	bl	5ae4 <__aeabi_ddiv>
    4822:	f7ff fc32 	bl	408a <__ieee754_pow+0xce>
    4826:	4653      	mov	r3, sl
    4828:	2b00      	cmp	r3, #0
    482a:	db00      	blt.n	482e <__ieee754_pow+0x872>
    482c:	e499      	b.n	4162 <__ieee754_pow+0x1a6>
    482e:	e454      	b.n	40da <__ieee754_pow+0x11e>
    4830:	4b6c      	ldr	r3, [pc, #432]	; (49e4 <__ieee754_pow+0xa28>)
    4832:	429c      	cmp	r4, r3
    4834:	ddf7      	ble.n	4826 <__ieee754_pow+0x86a>
    4836:	4b65      	ldr	r3, [pc, #404]	; (49cc <__ieee754_pow+0xa10>)
    4838:	429c      	cmp	r4, r3
    483a:	dd00      	ble.n	483e <__ieee754_pow+0x882>
    483c:	e44a      	b.n	40d4 <__ieee754_pow+0x118>
    483e:	2200      	movs	r2, #0
    4840:	4b62      	ldr	r3, [pc, #392]	; (49cc <__ieee754_pow+0xa10>)
    4842:	f002 f803 	bl	684c <__aeabi_dsub>
    4846:	22c0      	movs	r2, #192	; 0xc0
    4848:	4b67      	ldr	r3, [pc, #412]	; (49e8 <__ieee754_pow+0xa2c>)
    484a:	05d2      	lsls	r2, r2, #23
    484c:	0004      	movs	r4, r0
    484e:	000d      	movs	r5, r1
    4850:	f001 fd7c 	bl	634c <__aeabi_dmul>
    4854:	4a65      	ldr	r2, [pc, #404]	; (49ec <__ieee754_pow+0xa30>)
    4856:	0006      	movs	r6, r0
    4858:	000f      	movs	r7, r1
    485a:	4b65      	ldr	r3, [pc, #404]	; (49f0 <__ieee754_pow+0xa34>)
    485c:	0020      	movs	r0, r4
    485e:	0029      	movs	r1, r5
    4860:	f001 fd74 	bl	634c <__aeabi_dmul>
    4864:	2200      	movs	r2, #0
    4866:	9002      	str	r0, [sp, #8]
    4868:	9103      	str	r1, [sp, #12]
    486a:	4b62      	ldr	r3, [pc, #392]	; (49f4 <__ieee754_pow+0xa38>)
    486c:	0020      	movs	r0, r4
    486e:	0029      	movs	r1, r5
    4870:	f001 fd6c 	bl	634c <__aeabi_dmul>
    4874:	0002      	movs	r2, r0
    4876:	000b      	movs	r3, r1
    4878:	485f      	ldr	r0, [pc, #380]	; (49f8 <__ieee754_pow+0xa3c>)
    487a:	4960      	ldr	r1, [pc, #384]	; (49fc <__ieee754_pow+0xa40>)
    487c:	f001 ffe6 	bl	684c <__aeabi_dsub>
    4880:	0022      	movs	r2, r4
    4882:	002b      	movs	r3, r5
    4884:	f001 fd62 	bl	634c <__aeabi_dmul>
    4888:	0002      	movs	r2, r0
    488a:	000b      	movs	r3, r1
    488c:	2000      	movs	r0, #0
    488e:	495c      	ldr	r1, [pc, #368]	; (4a00 <__ieee754_pow+0xa44>)
    4890:	f001 ffdc 	bl	684c <__aeabi_dsub>
    4894:	0022      	movs	r2, r4
    4896:	9004      	str	r0, [sp, #16]
    4898:	9105      	str	r1, [sp, #20]
    489a:	002b      	movs	r3, r5
    489c:	0020      	movs	r0, r4
    489e:	0029      	movs	r1, r5
    48a0:	f001 fd54 	bl	634c <__aeabi_dmul>
    48a4:	0002      	movs	r2, r0
    48a6:	000b      	movs	r3, r1
    48a8:	9804      	ldr	r0, [sp, #16]
    48aa:	9905      	ldr	r1, [sp, #20]
    48ac:	f001 fd4e 	bl	634c <__aeabi_dmul>
    48b0:	4a54      	ldr	r2, [pc, #336]	; (4a04 <__ieee754_pow+0xa48>)
    48b2:	4b4d      	ldr	r3, [pc, #308]	; (49e8 <__ieee754_pow+0xa2c>)
    48b4:	f001 fd4a 	bl	634c <__aeabi_dmul>
    48b8:	0002      	movs	r2, r0
    48ba:	000b      	movs	r3, r1
    48bc:	9802      	ldr	r0, [sp, #8]
    48be:	9903      	ldr	r1, [sp, #12]
    48c0:	f001 ffc4 	bl	684c <__aeabi_dsub>
    48c4:	0002      	movs	r2, r0
    48c6:	000b      	movs	r3, r1
    48c8:	0004      	movs	r4, r0
    48ca:	000d      	movs	r5, r1
    48cc:	0030      	movs	r0, r6
    48ce:	0039      	movs	r1, r7
    48d0:	f000 fdf8 	bl	54c4 <__aeabi_dadd>
    48d4:	2000      	movs	r0, #0
    48d6:	0032      	movs	r2, r6
    48d8:	003b      	movs	r3, r7
    48da:	9002      	str	r0, [sp, #8]
    48dc:	9103      	str	r1, [sp, #12]
    48de:	f001 ffb5 	bl	684c <__aeabi_dsub>
    48e2:	0002      	movs	r2, r0
    48e4:	000b      	movs	r3, r1
    48e6:	0020      	movs	r0, r4
    48e8:	0029      	movs	r1, r5
    48ea:	f001 ffaf 	bl	684c <__aeabi_dsub>
    48ee:	9004      	str	r0, [sp, #16]
    48f0:	9105      	str	r1, [sp, #20]
    48f2:	e5d9      	b.n	44a8 <__ieee754_pow+0x4ec>
    48f4:	4a44      	ldr	r2, [pc, #272]	; (4a08 <__ieee754_pow+0xa4c>)
    48f6:	4b45      	ldr	r3, [pc, #276]	; (4a0c <__ieee754_pow+0xa50>)
    48f8:	9806      	ldr	r0, [sp, #24]
    48fa:	9907      	ldr	r1, [sp, #28]
    48fc:	f001 fd26 	bl	634c <__aeabi_dmul>
    4900:	4a41      	ldr	r2, [pc, #260]	; (4a08 <__ieee754_pow+0xa4c>)
    4902:	4b42      	ldr	r3, [pc, #264]	; (4a0c <__ieee754_pow+0xa50>)
    4904:	f001 fd22 	bl	634c <__aeabi_dmul>
    4908:	f7ff fba0 	bl	404c <__ieee754_pow+0x90>
    490c:	2a00      	cmp	r2, #0
    490e:	d001      	beq.n	4914 <__ieee754_pow+0x958>
    4910:	f7ff fba9 	bl	4066 <__ieee754_pow+0xaa>
    4914:	3214      	adds	r2, #20
    4916:	1ad3      	subs	r3, r2, r3
    4918:	002a      	movs	r2, r5
    491a:	411a      	asrs	r2, r3
    491c:	0011      	movs	r1, r2
    491e:	4099      	lsls	r1, r3
    4920:	428d      	cmp	r5, r1
    4922:	d001      	beq.n	4928 <__ieee754_pow+0x96c>
    4924:	f7ff fb76 	bl	4014 <__ieee754_pow+0x58>
    4928:	2301      	movs	r3, #1
    492a:	401a      	ands	r2, r3
    492c:	18db      	adds	r3, r3, r3
    492e:	1a9b      	subs	r3, r3, r2
    4930:	469b      	mov	fp, r3
    4932:	f7ff fb6f 	bl	4014 <__ieee754_pow+0x58>
    4936:	2200      	movs	r2, #0
    4938:	4b31      	ldr	r3, [pc, #196]	; (4a00 <__ieee754_pow+0xa44>)
    493a:	4690      	mov	r8, r2
    493c:	4691      	mov	r9, r2
    493e:	459a      	cmp	sl, r3
    4940:	dc00      	bgt.n	4944 <__ieee754_pow+0x988>
    4942:	e67b      	b.n	463c <__ieee754_pow+0x680>
    4944:	e645      	b.n	45d2 <__ieee754_pow+0x616>
    4946:	0002      	movs	r2, r0
    4948:	000b      	movs	r3, r1
    494a:	f001 ff7f 	bl	684c <__aeabi_dsub>
    494e:	0002      	movs	r2, r0
    4950:	000b      	movs	r3, r1
    4952:	f001 f8c7 	bl	5ae4 <__aeabi_ddiv>
    4956:	f7ff fb79 	bl	404c <__ieee754_pow+0x90>
    495a:	2380      	movs	r3, #128	; 0x80
    495c:	4c2c      	ldr	r4, [pc, #176]	; (4a10 <__ieee754_pow+0xa54>)
    495e:	05db      	lsls	r3, r3, #23
    4960:	9308      	str	r3, [sp, #32]
    4962:	9409      	str	r4, [sp, #36]	; 0x24
    4964:	4b2b      	ldr	r3, [pc, #172]	; (4a14 <__ieee754_pow+0xa58>)
    4966:	4c2c      	ldr	r4, [pc, #176]	; (4a18 <__ieee754_pow+0xa5c>)
    4968:	2200      	movs	r2, #0
    496a:	930c      	str	r3, [sp, #48]	; 0x30
    496c:	940d      	str	r4, [sp, #52]	; 0x34
    496e:	2480      	movs	r4, #128	; 0x80
    4970:	4b2a      	ldr	r3, [pc, #168]	; (4a1c <__ieee754_pow+0xa60>)
    4972:	02e4      	lsls	r4, r4, #11
    4974:	9206      	str	r2, [sp, #24]
    4976:	9307      	str	r3, [sp, #28]
    4978:	e449      	b.n	420e <__ieee754_pow+0x252>
    497a:	464b      	mov	r3, r9
    497c:	425b      	negs	r3, r3
    497e:	4699      	mov	r9, r3
    4980:	e64a      	b.n	4618 <__ieee754_pow+0x65c>
    4982:	46c0      	nop			; (mov r8, r8)
    4984:	fffffc02 	.word	0xfffffc02
    4988:	fffffc01 	.word	0xfffffc01
    498c:	000fffff 	.word	0x000fffff
    4990:	3fe62e43 	.word	0x3fe62e43
    4994:	fefa39ef 	.word	0xfefa39ef
    4998:	3fe62e42 	.word	0x3fe62e42
    499c:	0ca86c39 	.word	0x0ca86c39
    49a0:	be205c61 	.word	0xbe205c61
    49a4:	72bea4d0 	.word	0x72bea4d0
    49a8:	3e663769 	.word	0x3e663769
    49ac:	c5d26bf1 	.word	0xc5d26bf1
    49b0:	3ebbbd41 	.word	0x3ebbbd41
    49b4:	af25de2c 	.word	0xaf25de2c
    49b8:	3f11566a 	.word	0x3f11566a
    49bc:	16bebd93 	.word	0x16bebd93
    49c0:	3f66c16c 	.word	0x3f66c16c
    49c4:	5555553e 	.word	0x5555553e
    49c8:	3fc55555 	.word	0x3fc55555
    49cc:	3ff00000 	.word	0x3ff00000
    49d0:	4090cbff 	.word	0x4090cbff
    49d4:	3f6f3400 	.word	0x3f6f3400
    49d8:	c2f8f359 	.word	0xc2f8f359
    49dc:	01a56e1f 	.word	0x01a56e1f
    49e0:	bff00000 	.word	0xbff00000
    49e4:	3feffffe 	.word	0x3feffffe
    49e8:	3ff71547 	.word	0x3ff71547
    49ec:	f85ddf44 	.word	0xf85ddf44
    49f0:	3e54ae0b 	.word	0x3e54ae0b
    49f4:	3fd00000 	.word	0x3fd00000
    49f8:	55555555 	.word	0x55555555
    49fc:	3fd55555 	.word	0x3fd55555
    4a00:	3fe00000 	.word	0x3fe00000
    4a04:	652b82fe 	.word	0x652b82fe
    4a08:	8800759c 	.word	0x8800759c
    4a0c:	7e37e43c 	.word	0x7e37e43c
    4a10:	3fe2b803 	.word	0x3fe2b803
    4a14:	43cfd006 	.word	0x43cfd006
    4a18:	3e4cfdeb 	.word	0x3e4cfdeb
    4a1c:	3ff80000 	.word	0x3ff80000
    4a20:	464a      	mov	r2, r9
    4a22:	f000 f999 	bl	4d58 <scalbn>
    4a26:	e6b2      	b.n	478e <__ieee754_pow+0x7d2>

00004a28 <__ieee754_sqrt>:
    4a28:	4b6c      	ldr	r3, [pc, #432]	; (4bdc <__ieee754_sqrt+0x1b4>)
    4a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a2c:	000a      	movs	r2, r1
    4a2e:	4646      	mov	r6, r8
    4a30:	000d      	movs	r5, r1
    4a32:	46d6      	mov	lr, sl
    4a34:	464f      	mov	r7, r9
    4a36:	0019      	movs	r1, r3
    4a38:	b5c0      	push	{r6, r7, lr}
    4a3a:	0004      	movs	r4, r0
    4a3c:	0006      	movs	r6, r0
    4a3e:	4029      	ands	r1, r5
    4a40:	4299      	cmp	r1, r3
    4a42:	d100      	bne.n	4a46 <__ieee754_sqrt+0x1e>
    4a44:	e0a7      	b.n	4b96 <__ieee754_sqrt+0x16e>
    4a46:	2d00      	cmp	r5, #0
    4a48:	dc00      	bgt.n	4a4c <__ieee754_sqrt+0x24>
    4a4a:	e081      	b.n	4b50 <__ieee754_sqrt+0x128>
    4a4c:	152f      	asrs	r7, r5, #20
    4a4e:	d100      	bne.n	4a52 <__ieee754_sqrt+0x2a>
    4a50:	e08e      	b.n	4b70 <__ieee754_sqrt+0x148>
    4a52:	4b63      	ldr	r3, [pc, #396]	; (4be0 <__ieee754_sqrt+0x1b8>)
    4a54:	0312      	lsls	r2, r2, #12
    4a56:	469c      	mov	ip, r3
    4a58:	2380      	movs	r3, #128	; 0x80
    4a5a:	0b12      	lsrs	r2, r2, #12
    4a5c:	035b      	lsls	r3, r3, #13
    4a5e:	4467      	add	r7, ip
    4a60:	431a      	orrs	r2, r3
    4a62:	07fb      	lsls	r3, r7, #31
    4a64:	d468      	bmi.n	4b38 <__ieee754_sqrt+0x110>
    4a66:	107b      	asrs	r3, r7, #1
    4a68:	469c      	mov	ip, r3
    4a6a:	0fe3      	lsrs	r3, r4, #31
    4a6c:	189b      	adds	r3, r3, r2
    4a6e:	189b      	adds	r3, r3, r2
    4a70:	2280      	movs	r2, #128	; 0x80
    4a72:	2116      	movs	r1, #22
    4a74:	2600      	movs	r6, #0
    4a76:	2500      	movs	r5, #0
    4a78:	0064      	lsls	r4, r4, #1
    4a7a:	0392      	lsls	r2, r2, #14
    4a7c:	18a8      	adds	r0, r5, r2
    4a7e:	4298      	cmp	r0, r3
    4a80:	dc02      	bgt.n	4a88 <__ieee754_sqrt+0x60>
    4a82:	1885      	adds	r5, r0, r2
    4a84:	1a1b      	subs	r3, r3, r0
    4a86:	18b6      	adds	r6, r6, r2
    4a88:	0fe0      	lsrs	r0, r4, #31
    4a8a:	005b      	lsls	r3, r3, #1
    4a8c:	3901      	subs	r1, #1
    4a8e:	181b      	adds	r3, r3, r0
    4a90:	0064      	lsls	r4, r4, #1
    4a92:	0852      	lsrs	r2, r2, #1
    4a94:	2900      	cmp	r1, #0
    4a96:	d1f1      	bne.n	4a7c <__ieee754_sqrt+0x54>
    4a98:	2200      	movs	r2, #0
    4a9a:	4692      	mov	sl, r2
    4a9c:	4690      	mov	r8, r2
    4a9e:	2280      	movs	r2, #128	; 0x80
    4aa0:	2020      	movs	r0, #32
    4aa2:	0612      	lsls	r2, r2, #24
    4aa4:	e009      	b.n	4aba <__ieee754_sqrt+0x92>
    4aa6:	42ab      	cmp	r3, r5
    4aa8:	d038      	beq.n	4b1c <__ieee754_sqrt+0xf4>
    4aaa:	0fe1      	lsrs	r1, r4, #31
    4aac:	18c9      	adds	r1, r1, r3
    4aae:	3801      	subs	r0, #1
    4ab0:	18cb      	adds	r3, r1, r3
    4ab2:	0064      	lsls	r4, r4, #1
    4ab4:	0852      	lsrs	r2, r2, #1
    4ab6:	2800      	cmp	r0, #0
    4ab8:	d018      	beq.n	4aec <__ieee754_sqrt+0xc4>
    4aba:	4641      	mov	r1, r8
    4abc:	1851      	adds	r1, r2, r1
    4abe:	42ab      	cmp	r3, r5
    4ac0:	ddf1      	ble.n	4aa6 <__ieee754_sqrt+0x7e>
    4ac2:	188f      	adds	r7, r1, r2
    4ac4:	46b8      	mov	r8, r7
    4ac6:	46a9      	mov	r9, r5
    4ac8:	2900      	cmp	r1, #0
    4aca:	db30      	blt.n	4b2e <__ieee754_sqrt+0x106>
    4acc:	1b5b      	subs	r3, r3, r5
    4ace:	428c      	cmp	r4, r1
    4ad0:	41ad      	sbcs	r5, r5
    4ad2:	426d      	negs	r5, r5
    4ad4:	1b5b      	subs	r3, r3, r5
    4ad6:	1a64      	subs	r4, r4, r1
    4ad8:	0fe1      	lsrs	r1, r4, #31
    4ada:	18c9      	adds	r1, r1, r3
    4adc:	3801      	subs	r0, #1
    4ade:	4492      	add	sl, r2
    4ae0:	464d      	mov	r5, r9
    4ae2:	18cb      	adds	r3, r1, r3
    4ae4:	0064      	lsls	r4, r4, #1
    4ae6:	0852      	lsrs	r2, r2, #1
    4ae8:	2800      	cmp	r0, #0
    4aea:	d1e6      	bne.n	4aba <__ieee754_sqrt+0x92>
    4aec:	4323      	orrs	r3, r4
    4aee:	d128      	bne.n	4b42 <__ieee754_sqrt+0x11a>
    4af0:	4653      	mov	r3, sl
    4af2:	085b      	lsrs	r3, r3, #1
    4af4:	493b      	ldr	r1, [pc, #236]	; (4be4 <__ieee754_sqrt+0x1bc>)
    4af6:	1072      	asrs	r2, r6, #1
    4af8:	4688      	mov	r8, r1
    4afa:	4442      	add	r2, r8
    4afc:	07f1      	lsls	r1, r6, #31
    4afe:	d502      	bpl.n	4b06 <__ieee754_sqrt+0xde>
    4b00:	2180      	movs	r1, #128	; 0x80
    4b02:	0609      	lsls	r1, r1, #24
    4b04:	430b      	orrs	r3, r1
    4b06:	4661      	mov	r1, ip
    4b08:	001e      	movs	r6, r3
    4b0a:	050f      	lsls	r7, r1, #20
    4b0c:	18bd      	adds	r5, r7, r2
    4b0e:	0030      	movs	r0, r6
    4b10:	0029      	movs	r1, r5
    4b12:	bc1c      	pop	{r2, r3, r4}
    4b14:	4690      	mov	r8, r2
    4b16:	4699      	mov	r9, r3
    4b18:	46a2      	mov	sl, r4
    4b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b1c:	42a1      	cmp	r1, r4
    4b1e:	d8c4      	bhi.n	4aaa <__ieee754_sqrt+0x82>
    4b20:	188f      	adds	r7, r1, r2
    4b22:	46b8      	mov	r8, r7
    4b24:	2900      	cmp	r1, #0
    4b26:	db42      	blt.n	4bae <__ieee754_sqrt+0x186>
    4b28:	4699      	mov	r9, r3
    4b2a:	2300      	movs	r3, #0
    4b2c:	e7d3      	b.n	4ad6 <__ieee754_sqrt+0xae>
    4b2e:	2f00      	cmp	r7, #0
    4b30:	db2f      	blt.n	4b92 <__ieee754_sqrt+0x16a>
    4b32:	1c6f      	adds	r7, r5, #1
    4b34:	46b9      	mov	r9, r7
    4b36:	e7c9      	b.n	4acc <__ieee754_sqrt+0xa4>
    4b38:	0fe1      	lsrs	r1, r4, #31
    4b3a:	0052      	lsls	r2, r2, #1
    4b3c:	188a      	adds	r2, r1, r2
    4b3e:	0064      	lsls	r4, r4, #1
    4b40:	e791      	b.n	4a66 <__ieee754_sqrt+0x3e>
    4b42:	4653      	mov	r3, sl
    4b44:	3301      	adds	r3, #1
    4b46:	d035      	beq.n	4bb4 <__ieee754_sqrt+0x18c>
    4b48:	4653      	mov	r3, sl
    4b4a:	3301      	adds	r3, #1
    4b4c:	085b      	lsrs	r3, r3, #1
    4b4e:	e7d1      	b.n	4af4 <__ieee754_sqrt+0xcc>
    4b50:	006b      	lsls	r3, r5, #1
    4b52:	085b      	lsrs	r3, r3, #1
    4b54:	4303      	orrs	r3, r0
    4b56:	d0da      	beq.n	4b0e <__ieee754_sqrt+0xe6>
    4b58:	2700      	movs	r7, #0
    4b5a:	2d00      	cmp	r5, #0
    4b5c:	d132      	bne.n	4bc4 <__ieee754_sqrt+0x19c>
    4b5e:	0ae2      	lsrs	r2, r4, #11
    4b60:	3f15      	subs	r7, #21
    4b62:	0564      	lsls	r4, r4, #21
    4b64:	2a00      	cmp	r2, #0
    4b66:	d0fa      	beq.n	4b5e <__ieee754_sqrt+0x136>
    4b68:	2380      	movs	r3, #128	; 0x80
    4b6a:	035b      	lsls	r3, r3, #13
    4b6c:	421a      	tst	r2, r3
    4b6e:	d124      	bne.n	4bba <__ieee754_sqrt+0x192>
    4b70:	2080      	movs	r0, #128	; 0x80
    4b72:	2300      	movs	r3, #0
    4b74:	0340      	lsls	r0, r0, #13
    4b76:	e000      	b.n	4b7a <__ieee754_sqrt+0x152>
    4b78:	000b      	movs	r3, r1
    4b7a:	0052      	lsls	r2, r2, #1
    4b7c:	1c59      	adds	r1, r3, #1
    4b7e:	4202      	tst	r2, r0
    4b80:	d0fa      	beq.n	4b78 <__ieee754_sqrt+0x150>
    4b82:	2020      	movs	r0, #32
    4b84:	1a40      	subs	r0, r0, r1
    4b86:	1aff      	subs	r7, r7, r3
    4b88:	0023      	movs	r3, r4
    4b8a:	40c3      	lsrs	r3, r0
    4b8c:	408c      	lsls	r4, r1
    4b8e:	431a      	orrs	r2, r3
    4b90:	e75f      	b.n	4a52 <__ieee754_sqrt+0x2a>
    4b92:	46a9      	mov	r9, r5
    4b94:	e79a      	b.n	4acc <__ieee754_sqrt+0xa4>
    4b96:	002b      	movs	r3, r5
    4b98:	0002      	movs	r2, r0
    4b9a:	0029      	movs	r1, r5
    4b9c:	f001 fbd6 	bl	634c <__aeabi_dmul>
    4ba0:	0032      	movs	r2, r6
    4ba2:	002b      	movs	r3, r5
    4ba4:	f000 fc8e 	bl	54c4 <__aeabi_dadd>
    4ba8:	0006      	movs	r6, r0
    4baa:	000d      	movs	r5, r1
    4bac:	e7af      	b.n	4b0e <__ieee754_sqrt+0xe6>
    4bae:	2f00      	cmp	r7, #0
    4bb0:	dabf      	bge.n	4b32 <__ieee754_sqrt+0x10a>
    4bb2:	e7b9      	b.n	4b28 <__ieee754_sqrt+0x100>
    4bb4:	3601      	adds	r6, #1
    4bb6:	2300      	movs	r3, #0
    4bb8:	e79c      	b.n	4af4 <__ieee754_sqrt+0xcc>
    4bba:	2301      	movs	r3, #1
    4bbc:	2100      	movs	r1, #0
    4bbe:	2020      	movs	r0, #32
    4bc0:	425b      	negs	r3, r3
    4bc2:	e7e0      	b.n	4b86 <__ieee754_sqrt+0x15e>
    4bc4:	002b      	movs	r3, r5
    4bc6:	0002      	movs	r2, r0
    4bc8:	0029      	movs	r1, r5
    4bca:	f001 fe3f 	bl	684c <__aeabi_dsub>
    4bce:	0002      	movs	r2, r0
    4bd0:	000b      	movs	r3, r1
    4bd2:	f000 ff87 	bl	5ae4 <__aeabi_ddiv>
    4bd6:	0006      	movs	r6, r0
    4bd8:	000d      	movs	r5, r1
    4bda:	e798      	b.n	4b0e <__ieee754_sqrt+0xe6>
    4bdc:	7ff00000 	.word	0x7ff00000
    4be0:	fffffc01 	.word	0xfffffc01
    4be4:	3fe00000 	.word	0x3fe00000

00004be8 <fabs>:
    4be8:	0049      	lsls	r1, r1, #1
    4bea:	084b      	lsrs	r3, r1, #1
    4bec:	0019      	movs	r1, r3
    4bee:	4770      	bx	lr

00004bf0 <finite>:
    4bf0:	4b03      	ldr	r3, [pc, #12]	; (4c00 <finite+0x10>)
    4bf2:	0048      	lsls	r0, r1, #1
    4bf4:	469c      	mov	ip, r3
    4bf6:	0840      	lsrs	r0, r0, #1
    4bf8:	4460      	add	r0, ip
    4bfa:	0fc0      	lsrs	r0, r0, #31
    4bfc:	4770      	bx	lr
    4bfe:	46c0      	nop			; (mov r8, r8)
    4c00:	80100000 	.word	0x80100000

00004c04 <matherr>:
    4c04:	2000      	movs	r0, #0
    4c06:	4770      	bx	lr

00004c08 <nan>:
    4c08:	2000      	movs	r0, #0
    4c0a:	4901      	ldr	r1, [pc, #4]	; (4c10 <nan+0x8>)
    4c0c:	4770      	bx	lr
    4c0e:	46c0      	nop			; (mov r8, r8)
    4c10:	7ff80000 	.word	0x7ff80000

00004c14 <rint>:
    4c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c16:	46c6      	mov	lr, r8
    4c18:	b500      	push	{lr}
    4c1a:	0fcb      	lsrs	r3, r1, #31
    4c1c:	4698      	mov	r8, r3
    4c1e:	4c4a      	ldr	r4, [pc, #296]	; (4d48 <rint+0x134>)
    4c20:	004b      	lsls	r3, r1, #1
    4c22:	0d5b      	lsrs	r3, r3, #21
    4c24:	191e      	adds	r6, r3, r4
    4c26:	b082      	sub	sp, #8
    4c28:	0007      	movs	r7, r0
    4c2a:	000a      	movs	r2, r1
    4c2c:	2e13      	cmp	r6, #19
    4c2e:	dc35      	bgt.n	4c9c <rint+0x88>
    4c30:	2e00      	cmp	r6, #0
    4c32:	db57      	blt.n	4ce4 <rint+0xd0>
    4c34:	4b45      	ldr	r3, [pc, #276]	; (4d4c <rint+0x138>)
    4c36:	0004      	movs	r4, r0
    4c38:	4133      	asrs	r3, r6
    4c3a:	001f      	movs	r7, r3
    4c3c:	400f      	ands	r7, r1
    4c3e:	4307      	orrs	r7, r0
    4c40:	000d      	movs	r5, r1
    4c42:	2f00      	cmp	r7, #0
    4c44:	d024      	beq.n	4c90 <rint+0x7c>
    4c46:	085b      	lsrs	r3, r3, #1
    4c48:	001c      	movs	r4, r3
    4c4a:	400c      	ands	r4, r1
    4c4c:	4320      	orrs	r0, r4
    4c4e:	2700      	movs	r7, #0
    4c50:	2800      	cmp	r0, #0
    4c52:	d007      	beq.n	4c64 <rint+0x50>
    4c54:	2e13      	cmp	r6, #19
    4c56:	d100      	bne.n	4c5a <rint+0x46>
    4c58:	e073      	b.n	4d42 <rint+0x12e>
    4c5a:	2280      	movs	r2, #128	; 0x80
    4c5c:	02d2      	lsls	r2, r2, #11
    4c5e:	4132      	asrs	r2, r6
    4c60:	4399      	bics	r1, r3
    4c62:	430a      	orrs	r2, r1
    4c64:	4643      	mov	r3, r8
    4c66:	00de      	lsls	r6, r3, #3
    4c68:	4b39      	ldr	r3, [pc, #228]	; (4d50 <rint+0x13c>)
    4c6a:	0011      	movs	r1, r2
    4c6c:	199e      	adds	r6, r3, r6
    4c6e:	6834      	ldr	r4, [r6, #0]
    4c70:	6875      	ldr	r5, [r6, #4]
    4c72:	0038      	movs	r0, r7
    4c74:	0022      	movs	r2, r4
    4c76:	002b      	movs	r3, r5
    4c78:	f000 fc24 	bl	54c4 <__aeabi_dadd>
    4c7c:	9000      	str	r0, [sp, #0]
    4c7e:	9101      	str	r1, [sp, #4]
    4c80:	9800      	ldr	r0, [sp, #0]
    4c82:	9901      	ldr	r1, [sp, #4]
    4c84:	0022      	movs	r2, r4
    4c86:	002b      	movs	r3, r5
    4c88:	f001 fde0 	bl	684c <__aeabi_dsub>
    4c8c:	0004      	movs	r4, r0
    4c8e:	000d      	movs	r5, r1
    4c90:	0020      	movs	r0, r4
    4c92:	0029      	movs	r1, r5
    4c94:	b002      	add	sp, #8
    4c96:	bc04      	pop	{r2}
    4c98:	4690      	mov	r8, r2
    4c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c9c:	2e33      	cmp	r6, #51	; 0x33
    4c9e:	dd0c      	ble.n	4cba <rint+0xa6>
    4ca0:	2380      	movs	r3, #128	; 0x80
    4ca2:	0004      	movs	r4, r0
    4ca4:	00db      	lsls	r3, r3, #3
    4ca6:	000d      	movs	r5, r1
    4ca8:	429e      	cmp	r6, r3
    4caa:	d1f1      	bne.n	4c90 <rint+0x7c>
    4cac:	0002      	movs	r2, r0
    4cae:	000b      	movs	r3, r1
    4cb0:	f000 fc08 	bl	54c4 <__aeabi_dadd>
    4cb4:	0004      	movs	r4, r0
    4cb6:	000d      	movs	r5, r1
    4cb8:	e7ea      	b.n	4c90 <rint+0x7c>
    4cba:	4c26      	ldr	r4, [pc, #152]	; (4d54 <rint+0x140>)
    4cbc:	000d      	movs	r5, r1
    4cbe:	46a4      	mov	ip, r4
    4cc0:	2401      	movs	r4, #1
    4cc2:	4463      	add	r3, ip
    4cc4:	4264      	negs	r4, r4
    4cc6:	40dc      	lsrs	r4, r3
    4cc8:	46a4      	mov	ip, r4
    4cca:	4661      	mov	r1, ip
    4ccc:	0004      	movs	r4, r0
    4cce:	4201      	tst	r1, r0
    4cd0:	d0de      	beq.n	4c90 <rint+0x7c>
    4cd2:	0849      	lsrs	r1, r1, #1
    4cd4:	4201      	tst	r1, r0
    4cd6:	d0c5      	beq.n	4c64 <rint+0x50>
    4cd8:	2780      	movs	r7, #128	; 0x80
    4cda:	05ff      	lsls	r7, r7, #23
    4cdc:	411f      	asrs	r7, r3
    4cde:	4388      	bics	r0, r1
    4ce0:	4307      	orrs	r7, r0
    4ce2:	e7bf      	b.n	4c64 <rint+0x50>
    4ce4:	004b      	lsls	r3, r1, #1
    4ce6:	085b      	lsrs	r3, r3, #1
    4ce8:	4303      	orrs	r3, r0
    4cea:	0004      	movs	r4, r0
    4cec:	000d      	movs	r5, r1
    4cee:	2b00      	cmp	r3, #0
    4cf0:	d0ce      	beq.n	4c90 <rint+0x7c>
    4cf2:	030b      	lsls	r3, r1, #12
    4cf4:	0b1b      	lsrs	r3, r3, #12
    4cf6:	4303      	orrs	r3, r0
    4cf8:	001a      	movs	r2, r3
    4cfa:	425b      	negs	r3, r3
    4cfc:	4313      	orrs	r3, r2
    4cfe:	2280      	movs	r2, #128	; 0x80
    4d00:	0b1b      	lsrs	r3, r3, #12
    4d02:	0312      	lsls	r2, r2, #12
    4d04:	4013      	ands	r3, r2
    4d06:	0c4a      	lsrs	r2, r1, #17
    4d08:	0452      	lsls	r2, r2, #17
    4d0a:	4313      	orrs	r3, r2
    4d0c:	0019      	movs	r1, r3
    4d0e:	4643      	mov	r3, r8
    4d10:	00da      	lsls	r2, r3, #3
    4d12:	4b0f      	ldr	r3, [pc, #60]	; (4d50 <rint+0x13c>)
    4d14:	189b      	adds	r3, r3, r2
    4d16:	681c      	ldr	r4, [r3, #0]
    4d18:	685d      	ldr	r5, [r3, #4]
    4d1a:	0022      	movs	r2, r4
    4d1c:	002b      	movs	r3, r5
    4d1e:	f000 fbd1 	bl	54c4 <__aeabi_dadd>
    4d22:	9000      	str	r0, [sp, #0]
    4d24:	9101      	str	r1, [sp, #4]
    4d26:	9800      	ldr	r0, [sp, #0]
    4d28:	9901      	ldr	r1, [sp, #4]
    4d2a:	0022      	movs	r2, r4
    4d2c:	002b      	movs	r3, r5
    4d2e:	f001 fd8d 	bl	684c <__aeabi_dsub>
    4d32:	4642      	mov	r2, r8
    4d34:	004b      	lsls	r3, r1, #1
    4d36:	085b      	lsrs	r3, r3, #1
    4d38:	07d6      	lsls	r6, r2, #31
    4d3a:	4333      	orrs	r3, r6
    4d3c:	0004      	movs	r4, r0
    4d3e:	001d      	movs	r5, r3
    4d40:	e7a6      	b.n	4c90 <rint+0x7c>
    4d42:	2780      	movs	r7, #128	; 0x80
    4d44:	063f      	lsls	r7, r7, #24
    4d46:	e788      	b.n	4c5a <rint+0x46>
    4d48:	fffffc01 	.word	0xfffffc01
    4d4c:	000fffff 	.word	0x000fffff
    4d50:	00007288 	.word	0x00007288
    4d54:	fffffbed 	.word	0xfffffbed

00004d58 <scalbn>:
    4d58:	004b      	lsls	r3, r1, #1
    4d5a:	b570      	push	{r4, r5, r6, lr}
    4d5c:	0d5b      	lsrs	r3, r3, #21
    4d5e:	0014      	movs	r4, r2
    4d60:	000a      	movs	r2, r1
    4d62:	2b00      	cmp	r3, #0
    4d64:	d11a      	bne.n	4d9c <scalbn+0x44>
    4d66:	004b      	lsls	r3, r1, #1
    4d68:	085b      	lsrs	r3, r3, #1
    4d6a:	4303      	orrs	r3, r0
    4d6c:	d015      	beq.n	4d9a <scalbn+0x42>
    4d6e:	2200      	movs	r2, #0
    4d70:	4b22      	ldr	r3, [pc, #136]	; (4dfc <scalbn+0xa4>)
    4d72:	f001 faeb 	bl	634c <__aeabi_dmul>
    4d76:	4b22      	ldr	r3, [pc, #136]	; (4e00 <scalbn+0xa8>)
    4d78:	000a      	movs	r2, r1
    4d7a:	429c      	cmp	r4, r3
    4d7c:	db22      	blt.n	4dc4 <scalbn+0x6c>
    4d7e:	004b      	lsls	r3, r1, #1
    4d80:	0d5b      	lsrs	r3, r3, #21
    4d82:	3b36      	subs	r3, #54	; 0x36
    4d84:	4d1f      	ldr	r5, [pc, #124]	; (4e04 <scalbn+0xac>)
    4d86:	18e3      	adds	r3, r4, r3
    4d88:	42ab      	cmp	r3, r5
    4d8a:	dc20      	bgt.n	4dce <scalbn+0x76>
    4d8c:	2b00      	cmp	r3, #0
    4d8e:	dd0d      	ble.n	4dac <scalbn+0x54>
    4d90:	4c1d      	ldr	r4, [pc, #116]	; (4e08 <scalbn+0xb0>)
    4d92:	051b      	lsls	r3, r3, #20
    4d94:	4022      	ands	r2, r4
    4d96:	431a      	orrs	r2, r3
    4d98:	0011      	movs	r1, r2
    4d9a:	bd70      	pop	{r4, r5, r6, pc}
    4d9c:	4d1b      	ldr	r5, [pc, #108]	; (4e0c <scalbn+0xb4>)
    4d9e:	42ab      	cmp	r3, r5
    4da0:	d1f0      	bne.n	4d84 <scalbn+0x2c>
    4da2:	0002      	movs	r2, r0
    4da4:	000b      	movs	r3, r1
    4da6:	f000 fb8d 	bl	54c4 <__aeabi_dadd>
    4daa:	e7f6      	b.n	4d9a <scalbn+0x42>
    4dac:	001d      	movs	r5, r3
    4dae:	3535      	adds	r5, #53	; 0x35
    4db0:	da18      	bge.n	4de4 <scalbn+0x8c>
    4db2:	4b17      	ldr	r3, [pc, #92]	; (4e10 <scalbn+0xb8>)
    4db4:	0002      	movs	r2, r0
    4db6:	429c      	cmp	r4, r3
    4db8:	dc0a      	bgt.n	4dd0 <scalbn+0x78>
    4dba:	000b      	movs	r3, r1
    4dbc:	4815      	ldr	r0, [pc, #84]	; (4e14 <scalbn+0xbc>)
    4dbe:	4916      	ldr	r1, [pc, #88]	; (4e18 <scalbn+0xc0>)
    4dc0:	f000 f832 	bl	4e28 <copysign>
    4dc4:	4a13      	ldr	r2, [pc, #76]	; (4e14 <scalbn+0xbc>)
    4dc6:	4b14      	ldr	r3, [pc, #80]	; (4e18 <scalbn+0xc0>)
    4dc8:	f001 fac0 	bl	634c <__aeabi_dmul>
    4dcc:	e7e5      	b.n	4d9a <scalbn+0x42>
    4dce:	0002      	movs	r2, r0
    4dd0:	000b      	movs	r3, r1
    4dd2:	4812      	ldr	r0, [pc, #72]	; (4e1c <scalbn+0xc4>)
    4dd4:	4912      	ldr	r1, [pc, #72]	; (4e20 <scalbn+0xc8>)
    4dd6:	f000 f827 	bl	4e28 <copysign>
    4dda:	4a10      	ldr	r2, [pc, #64]	; (4e1c <scalbn+0xc4>)
    4ddc:	4b10      	ldr	r3, [pc, #64]	; (4e20 <scalbn+0xc8>)
    4dde:	f001 fab5 	bl	634c <__aeabi_dmul>
    4de2:	e7da      	b.n	4d9a <scalbn+0x42>
    4de4:	4c08      	ldr	r4, [pc, #32]	; (4e08 <scalbn+0xb0>)
    4de6:	3336      	adds	r3, #54	; 0x36
    4de8:	4022      	ands	r2, r4
    4dea:	051b      	lsls	r3, r3, #20
    4dec:	4313      	orrs	r3, r2
    4dee:	0019      	movs	r1, r3
    4df0:	2200      	movs	r2, #0
    4df2:	4b0c      	ldr	r3, [pc, #48]	; (4e24 <scalbn+0xcc>)
    4df4:	f001 faaa 	bl	634c <__aeabi_dmul>
    4df8:	e7cf      	b.n	4d9a <scalbn+0x42>
    4dfa:	46c0      	nop			; (mov r8, r8)
    4dfc:	43500000 	.word	0x43500000
    4e00:	ffff3cb0 	.word	0xffff3cb0
    4e04:	000007fe 	.word	0x000007fe
    4e08:	800fffff 	.word	0x800fffff
    4e0c:	000007ff 	.word	0x000007ff
    4e10:	0000c350 	.word	0x0000c350
    4e14:	c2f8f359 	.word	0xc2f8f359
    4e18:	01a56e1f 	.word	0x01a56e1f
    4e1c:	8800759c 	.word	0x8800759c
    4e20:	7e37e43c 	.word	0x7e37e43c
    4e24:	3c900000 	.word	0x3c900000

00004e28 <copysign>:
    4e28:	b530      	push	{r4, r5, lr}
    4e2a:	004a      	lsls	r2, r1, #1
    4e2c:	0fdb      	lsrs	r3, r3, #31
    4e2e:	07db      	lsls	r3, r3, #31
    4e30:	0852      	lsrs	r2, r2, #1
    4e32:	431a      	orrs	r2, r3
    4e34:	0011      	movs	r1, r2
    4e36:	bd30      	pop	{r4, r5, pc}

00004e38 <__gnu_thumb1_case_uhi>:
    4e38:	b403      	push	{r0, r1}
    4e3a:	4671      	mov	r1, lr
    4e3c:	0849      	lsrs	r1, r1, #1
    4e3e:	0040      	lsls	r0, r0, #1
    4e40:	0049      	lsls	r1, r1, #1
    4e42:	5a09      	ldrh	r1, [r1, r0]
    4e44:	0049      	lsls	r1, r1, #1
    4e46:	448e      	add	lr, r1
    4e48:	bc03      	pop	{r0, r1}
    4e4a:	4770      	bx	lr

00004e4c <__udivsi3>:
    4e4c:	2200      	movs	r2, #0
    4e4e:	0843      	lsrs	r3, r0, #1
    4e50:	428b      	cmp	r3, r1
    4e52:	d374      	bcc.n	4f3e <__udivsi3+0xf2>
    4e54:	0903      	lsrs	r3, r0, #4
    4e56:	428b      	cmp	r3, r1
    4e58:	d35f      	bcc.n	4f1a <__udivsi3+0xce>
    4e5a:	0a03      	lsrs	r3, r0, #8
    4e5c:	428b      	cmp	r3, r1
    4e5e:	d344      	bcc.n	4eea <__udivsi3+0x9e>
    4e60:	0b03      	lsrs	r3, r0, #12
    4e62:	428b      	cmp	r3, r1
    4e64:	d328      	bcc.n	4eb8 <__udivsi3+0x6c>
    4e66:	0c03      	lsrs	r3, r0, #16
    4e68:	428b      	cmp	r3, r1
    4e6a:	d30d      	bcc.n	4e88 <__udivsi3+0x3c>
    4e6c:	22ff      	movs	r2, #255	; 0xff
    4e6e:	0209      	lsls	r1, r1, #8
    4e70:	ba12      	rev	r2, r2
    4e72:	0c03      	lsrs	r3, r0, #16
    4e74:	428b      	cmp	r3, r1
    4e76:	d302      	bcc.n	4e7e <__udivsi3+0x32>
    4e78:	1212      	asrs	r2, r2, #8
    4e7a:	0209      	lsls	r1, r1, #8
    4e7c:	d065      	beq.n	4f4a <__udivsi3+0xfe>
    4e7e:	0b03      	lsrs	r3, r0, #12
    4e80:	428b      	cmp	r3, r1
    4e82:	d319      	bcc.n	4eb8 <__udivsi3+0x6c>
    4e84:	e000      	b.n	4e88 <__udivsi3+0x3c>
    4e86:	0a09      	lsrs	r1, r1, #8
    4e88:	0bc3      	lsrs	r3, r0, #15
    4e8a:	428b      	cmp	r3, r1
    4e8c:	d301      	bcc.n	4e92 <__udivsi3+0x46>
    4e8e:	03cb      	lsls	r3, r1, #15
    4e90:	1ac0      	subs	r0, r0, r3
    4e92:	4152      	adcs	r2, r2
    4e94:	0b83      	lsrs	r3, r0, #14
    4e96:	428b      	cmp	r3, r1
    4e98:	d301      	bcc.n	4e9e <__udivsi3+0x52>
    4e9a:	038b      	lsls	r3, r1, #14
    4e9c:	1ac0      	subs	r0, r0, r3
    4e9e:	4152      	adcs	r2, r2
    4ea0:	0b43      	lsrs	r3, r0, #13
    4ea2:	428b      	cmp	r3, r1
    4ea4:	d301      	bcc.n	4eaa <__udivsi3+0x5e>
    4ea6:	034b      	lsls	r3, r1, #13
    4ea8:	1ac0      	subs	r0, r0, r3
    4eaa:	4152      	adcs	r2, r2
    4eac:	0b03      	lsrs	r3, r0, #12
    4eae:	428b      	cmp	r3, r1
    4eb0:	d301      	bcc.n	4eb6 <__udivsi3+0x6a>
    4eb2:	030b      	lsls	r3, r1, #12
    4eb4:	1ac0      	subs	r0, r0, r3
    4eb6:	4152      	adcs	r2, r2
    4eb8:	0ac3      	lsrs	r3, r0, #11
    4eba:	428b      	cmp	r3, r1
    4ebc:	d301      	bcc.n	4ec2 <__udivsi3+0x76>
    4ebe:	02cb      	lsls	r3, r1, #11
    4ec0:	1ac0      	subs	r0, r0, r3
    4ec2:	4152      	adcs	r2, r2
    4ec4:	0a83      	lsrs	r3, r0, #10
    4ec6:	428b      	cmp	r3, r1
    4ec8:	d301      	bcc.n	4ece <__udivsi3+0x82>
    4eca:	028b      	lsls	r3, r1, #10
    4ecc:	1ac0      	subs	r0, r0, r3
    4ece:	4152      	adcs	r2, r2
    4ed0:	0a43      	lsrs	r3, r0, #9
    4ed2:	428b      	cmp	r3, r1
    4ed4:	d301      	bcc.n	4eda <__udivsi3+0x8e>
    4ed6:	024b      	lsls	r3, r1, #9
    4ed8:	1ac0      	subs	r0, r0, r3
    4eda:	4152      	adcs	r2, r2
    4edc:	0a03      	lsrs	r3, r0, #8
    4ede:	428b      	cmp	r3, r1
    4ee0:	d301      	bcc.n	4ee6 <__udivsi3+0x9a>
    4ee2:	020b      	lsls	r3, r1, #8
    4ee4:	1ac0      	subs	r0, r0, r3
    4ee6:	4152      	adcs	r2, r2
    4ee8:	d2cd      	bcs.n	4e86 <__udivsi3+0x3a>
    4eea:	09c3      	lsrs	r3, r0, #7
    4eec:	428b      	cmp	r3, r1
    4eee:	d301      	bcc.n	4ef4 <__udivsi3+0xa8>
    4ef0:	01cb      	lsls	r3, r1, #7
    4ef2:	1ac0      	subs	r0, r0, r3
    4ef4:	4152      	adcs	r2, r2
    4ef6:	0983      	lsrs	r3, r0, #6
    4ef8:	428b      	cmp	r3, r1
    4efa:	d301      	bcc.n	4f00 <__udivsi3+0xb4>
    4efc:	018b      	lsls	r3, r1, #6
    4efe:	1ac0      	subs	r0, r0, r3
    4f00:	4152      	adcs	r2, r2
    4f02:	0943      	lsrs	r3, r0, #5
    4f04:	428b      	cmp	r3, r1
    4f06:	d301      	bcc.n	4f0c <__udivsi3+0xc0>
    4f08:	014b      	lsls	r3, r1, #5
    4f0a:	1ac0      	subs	r0, r0, r3
    4f0c:	4152      	adcs	r2, r2
    4f0e:	0903      	lsrs	r3, r0, #4
    4f10:	428b      	cmp	r3, r1
    4f12:	d301      	bcc.n	4f18 <__udivsi3+0xcc>
    4f14:	010b      	lsls	r3, r1, #4
    4f16:	1ac0      	subs	r0, r0, r3
    4f18:	4152      	adcs	r2, r2
    4f1a:	08c3      	lsrs	r3, r0, #3
    4f1c:	428b      	cmp	r3, r1
    4f1e:	d301      	bcc.n	4f24 <__udivsi3+0xd8>
    4f20:	00cb      	lsls	r3, r1, #3
    4f22:	1ac0      	subs	r0, r0, r3
    4f24:	4152      	adcs	r2, r2
    4f26:	0883      	lsrs	r3, r0, #2
    4f28:	428b      	cmp	r3, r1
    4f2a:	d301      	bcc.n	4f30 <__udivsi3+0xe4>
    4f2c:	008b      	lsls	r3, r1, #2
    4f2e:	1ac0      	subs	r0, r0, r3
    4f30:	4152      	adcs	r2, r2
    4f32:	0843      	lsrs	r3, r0, #1
    4f34:	428b      	cmp	r3, r1
    4f36:	d301      	bcc.n	4f3c <__udivsi3+0xf0>
    4f38:	004b      	lsls	r3, r1, #1
    4f3a:	1ac0      	subs	r0, r0, r3
    4f3c:	4152      	adcs	r2, r2
    4f3e:	1a41      	subs	r1, r0, r1
    4f40:	d200      	bcs.n	4f44 <__udivsi3+0xf8>
    4f42:	4601      	mov	r1, r0
    4f44:	4152      	adcs	r2, r2
    4f46:	4610      	mov	r0, r2
    4f48:	4770      	bx	lr
    4f4a:	e7ff      	b.n	4f4c <__udivsi3+0x100>
    4f4c:	b501      	push	{r0, lr}
    4f4e:	2000      	movs	r0, #0
    4f50:	f000 f8f0 	bl	5134 <__aeabi_idiv0>
    4f54:	bd02      	pop	{r1, pc}
    4f56:	46c0      	nop			; (mov r8, r8)

00004f58 <__aeabi_uidivmod>:
    4f58:	2900      	cmp	r1, #0
    4f5a:	d0f7      	beq.n	4f4c <__udivsi3+0x100>
    4f5c:	e776      	b.n	4e4c <__udivsi3>
    4f5e:	4770      	bx	lr

00004f60 <__divsi3>:
    4f60:	4603      	mov	r3, r0
    4f62:	430b      	orrs	r3, r1
    4f64:	d47f      	bmi.n	5066 <__divsi3+0x106>
    4f66:	2200      	movs	r2, #0
    4f68:	0843      	lsrs	r3, r0, #1
    4f6a:	428b      	cmp	r3, r1
    4f6c:	d374      	bcc.n	5058 <__divsi3+0xf8>
    4f6e:	0903      	lsrs	r3, r0, #4
    4f70:	428b      	cmp	r3, r1
    4f72:	d35f      	bcc.n	5034 <__divsi3+0xd4>
    4f74:	0a03      	lsrs	r3, r0, #8
    4f76:	428b      	cmp	r3, r1
    4f78:	d344      	bcc.n	5004 <__divsi3+0xa4>
    4f7a:	0b03      	lsrs	r3, r0, #12
    4f7c:	428b      	cmp	r3, r1
    4f7e:	d328      	bcc.n	4fd2 <__divsi3+0x72>
    4f80:	0c03      	lsrs	r3, r0, #16
    4f82:	428b      	cmp	r3, r1
    4f84:	d30d      	bcc.n	4fa2 <__divsi3+0x42>
    4f86:	22ff      	movs	r2, #255	; 0xff
    4f88:	0209      	lsls	r1, r1, #8
    4f8a:	ba12      	rev	r2, r2
    4f8c:	0c03      	lsrs	r3, r0, #16
    4f8e:	428b      	cmp	r3, r1
    4f90:	d302      	bcc.n	4f98 <__divsi3+0x38>
    4f92:	1212      	asrs	r2, r2, #8
    4f94:	0209      	lsls	r1, r1, #8
    4f96:	d065      	beq.n	5064 <__divsi3+0x104>
    4f98:	0b03      	lsrs	r3, r0, #12
    4f9a:	428b      	cmp	r3, r1
    4f9c:	d319      	bcc.n	4fd2 <__divsi3+0x72>
    4f9e:	e000      	b.n	4fa2 <__divsi3+0x42>
    4fa0:	0a09      	lsrs	r1, r1, #8
    4fa2:	0bc3      	lsrs	r3, r0, #15
    4fa4:	428b      	cmp	r3, r1
    4fa6:	d301      	bcc.n	4fac <__divsi3+0x4c>
    4fa8:	03cb      	lsls	r3, r1, #15
    4faa:	1ac0      	subs	r0, r0, r3
    4fac:	4152      	adcs	r2, r2
    4fae:	0b83      	lsrs	r3, r0, #14
    4fb0:	428b      	cmp	r3, r1
    4fb2:	d301      	bcc.n	4fb8 <__divsi3+0x58>
    4fb4:	038b      	lsls	r3, r1, #14
    4fb6:	1ac0      	subs	r0, r0, r3
    4fb8:	4152      	adcs	r2, r2
    4fba:	0b43      	lsrs	r3, r0, #13
    4fbc:	428b      	cmp	r3, r1
    4fbe:	d301      	bcc.n	4fc4 <__divsi3+0x64>
    4fc0:	034b      	lsls	r3, r1, #13
    4fc2:	1ac0      	subs	r0, r0, r3
    4fc4:	4152      	adcs	r2, r2
    4fc6:	0b03      	lsrs	r3, r0, #12
    4fc8:	428b      	cmp	r3, r1
    4fca:	d301      	bcc.n	4fd0 <__divsi3+0x70>
    4fcc:	030b      	lsls	r3, r1, #12
    4fce:	1ac0      	subs	r0, r0, r3
    4fd0:	4152      	adcs	r2, r2
    4fd2:	0ac3      	lsrs	r3, r0, #11
    4fd4:	428b      	cmp	r3, r1
    4fd6:	d301      	bcc.n	4fdc <__divsi3+0x7c>
    4fd8:	02cb      	lsls	r3, r1, #11
    4fda:	1ac0      	subs	r0, r0, r3
    4fdc:	4152      	adcs	r2, r2
    4fde:	0a83      	lsrs	r3, r0, #10
    4fe0:	428b      	cmp	r3, r1
    4fe2:	d301      	bcc.n	4fe8 <__divsi3+0x88>
    4fe4:	028b      	lsls	r3, r1, #10
    4fe6:	1ac0      	subs	r0, r0, r3
    4fe8:	4152      	adcs	r2, r2
    4fea:	0a43      	lsrs	r3, r0, #9
    4fec:	428b      	cmp	r3, r1
    4fee:	d301      	bcc.n	4ff4 <__divsi3+0x94>
    4ff0:	024b      	lsls	r3, r1, #9
    4ff2:	1ac0      	subs	r0, r0, r3
    4ff4:	4152      	adcs	r2, r2
    4ff6:	0a03      	lsrs	r3, r0, #8
    4ff8:	428b      	cmp	r3, r1
    4ffa:	d301      	bcc.n	5000 <__divsi3+0xa0>
    4ffc:	020b      	lsls	r3, r1, #8
    4ffe:	1ac0      	subs	r0, r0, r3
    5000:	4152      	adcs	r2, r2
    5002:	d2cd      	bcs.n	4fa0 <__divsi3+0x40>
    5004:	09c3      	lsrs	r3, r0, #7
    5006:	428b      	cmp	r3, r1
    5008:	d301      	bcc.n	500e <__divsi3+0xae>
    500a:	01cb      	lsls	r3, r1, #7
    500c:	1ac0      	subs	r0, r0, r3
    500e:	4152      	adcs	r2, r2
    5010:	0983      	lsrs	r3, r0, #6
    5012:	428b      	cmp	r3, r1
    5014:	d301      	bcc.n	501a <__divsi3+0xba>
    5016:	018b      	lsls	r3, r1, #6
    5018:	1ac0      	subs	r0, r0, r3
    501a:	4152      	adcs	r2, r2
    501c:	0943      	lsrs	r3, r0, #5
    501e:	428b      	cmp	r3, r1
    5020:	d301      	bcc.n	5026 <__divsi3+0xc6>
    5022:	014b      	lsls	r3, r1, #5
    5024:	1ac0      	subs	r0, r0, r3
    5026:	4152      	adcs	r2, r2
    5028:	0903      	lsrs	r3, r0, #4
    502a:	428b      	cmp	r3, r1
    502c:	d301      	bcc.n	5032 <__divsi3+0xd2>
    502e:	010b      	lsls	r3, r1, #4
    5030:	1ac0      	subs	r0, r0, r3
    5032:	4152      	adcs	r2, r2
    5034:	08c3      	lsrs	r3, r0, #3
    5036:	428b      	cmp	r3, r1
    5038:	d301      	bcc.n	503e <__divsi3+0xde>
    503a:	00cb      	lsls	r3, r1, #3
    503c:	1ac0      	subs	r0, r0, r3
    503e:	4152      	adcs	r2, r2
    5040:	0883      	lsrs	r3, r0, #2
    5042:	428b      	cmp	r3, r1
    5044:	d301      	bcc.n	504a <__divsi3+0xea>
    5046:	008b      	lsls	r3, r1, #2
    5048:	1ac0      	subs	r0, r0, r3
    504a:	4152      	adcs	r2, r2
    504c:	0843      	lsrs	r3, r0, #1
    504e:	428b      	cmp	r3, r1
    5050:	d301      	bcc.n	5056 <__divsi3+0xf6>
    5052:	004b      	lsls	r3, r1, #1
    5054:	1ac0      	subs	r0, r0, r3
    5056:	4152      	adcs	r2, r2
    5058:	1a41      	subs	r1, r0, r1
    505a:	d200      	bcs.n	505e <__divsi3+0xfe>
    505c:	4601      	mov	r1, r0
    505e:	4152      	adcs	r2, r2
    5060:	4610      	mov	r0, r2
    5062:	4770      	bx	lr
    5064:	e05d      	b.n	5122 <__divsi3+0x1c2>
    5066:	0fca      	lsrs	r2, r1, #31
    5068:	d000      	beq.n	506c <__divsi3+0x10c>
    506a:	4249      	negs	r1, r1
    506c:	1003      	asrs	r3, r0, #32
    506e:	d300      	bcc.n	5072 <__divsi3+0x112>
    5070:	4240      	negs	r0, r0
    5072:	4053      	eors	r3, r2
    5074:	2200      	movs	r2, #0
    5076:	469c      	mov	ip, r3
    5078:	0903      	lsrs	r3, r0, #4
    507a:	428b      	cmp	r3, r1
    507c:	d32d      	bcc.n	50da <__divsi3+0x17a>
    507e:	0a03      	lsrs	r3, r0, #8
    5080:	428b      	cmp	r3, r1
    5082:	d312      	bcc.n	50aa <__divsi3+0x14a>
    5084:	22fc      	movs	r2, #252	; 0xfc
    5086:	0189      	lsls	r1, r1, #6
    5088:	ba12      	rev	r2, r2
    508a:	0a03      	lsrs	r3, r0, #8
    508c:	428b      	cmp	r3, r1
    508e:	d30c      	bcc.n	50aa <__divsi3+0x14a>
    5090:	0189      	lsls	r1, r1, #6
    5092:	1192      	asrs	r2, r2, #6
    5094:	428b      	cmp	r3, r1
    5096:	d308      	bcc.n	50aa <__divsi3+0x14a>
    5098:	0189      	lsls	r1, r1, #6
    509a:	1192      	asrs	r2, r2, #6
    509c:	428b      	cmp	r3, r1
    509e:	d304      	bcc.n	50aa <__divsi3+0x14a>
    50a0:	0189      	lsls	r1, r1, #6
    50a2:	d03a      	beq.n	511a <__divsi3+0x1ba>
    50a4:	1192      	asrs	r2, r2, #6
    50a6:	e000      	b.n	50aa <__divsi3+0x14a>
    50a8:	0989      	lsrs	r1, r1, #6
    50aa:	09c3      	lsrs	r3, r0, #7
    50ac:	428b      	cmp	r3, r1
    50ae:	d301      	bcc.n	50b4 <__divsi3+0x154>
    50b0:	01cb      	lsls	r3, r1, #7
    50b2:	1ac0      	subs	r0, r0, r3
    50b4:	4152      	adcs	r2, r2
    50b6:	0983      	lsrs	r3, r0, #6
    50b8:	428b      	cmp	r3, r1
    50ba:	d301      	bcc.n	50c0 <__divsi3+0x160>
    50bc:	018b      	lsls	r3, r1, #6
    50be:	1ac0      	subs	r0, r0, r3
    50c0:	4152      	adcs	r2, r2
    50c2:	0943      	lsrs	r3, r0, #5
    50c4:	428b      	cmp	r3, r1
    50c6:	d301      	bcc.n	50cc <__divsi3+0x16c>
    50c8:	014b      	lsls	r3, r1, #5
    50ca:	1ac0      	subs	r0, r0, r3
    50cc:	4152      	adcs	r2, r2
    50ce:	0903      	lsrs	r3, r0, #4
    50d0:	428b      	cmp	r3, r1
    50d2:	d301      	bcc.n	50d8 <__divsi3+0x178>
    50d4:	010b      	lsls	r3, r1, #4
    50d6:	1ac0      	subs	r0, r0, r3
    50d8:	4152      	adcs	r2, r2
    50da:	08c3      	lsrs	r3, r0, #3
    50dc:	428b      	cmp	r3, r1
    50de:	d301      	bcc.n	50e4 <__divsi3+0x184>
    50e0:	00cb      	lsls	r3, r1, #3
    50e2:	1ac0      	subs	r0, r0, r3
    50e4:	4152      	adcs	r2, r2
    50e6:	0883      	lsrs	r3, r0, #2
    50e8:	428b      	cmp	r3, r1
    50ea:	d301      	bcc.n	50f0 <__divsi3+0x190>
    50ec:	008b      	lsls	r3, r1, #2
    50ee:	1ac0      	subs	r0, r0, r3
    50f0:	4152      	adcs	r2, r2
    50f2:	d2d9      	bcs.n	50a8 <__divsi3+0x148>
    50f4:	0843      	lsrs	r3, r0, #1
    50f6:	428b      	cmp	r3, r1
    50f8:	d301      	bcc.n	50fe <__divsi3+0x19e>
    50fa:	004b      	lsls	r3, r1, #1
    50fc:	1ac0      	subs	r0, r0, r3
    50fe:	4152      	adcs	r2, r2
    5100:	1a41      	subs	r1, r0, r1
    5102:	d200      	bcs.n	5106 <__divsi3+0x1a6>
    5104:	4601      	mov	r1, r0
    5106:	4663      	mov	r3, ip
    5108:	4152      	adcs	r2, r2
    510a:	105b      	asrs	r3, r3, #1
    510c:	4610      	mov	r0, r2
    510e:	d301      	bcc.n	5114 <__divsi3+0x1b4>
    5110:	4240      	negs	r0, r0
    5112:	2b00      	cmp	r3, #0
    5114:	d500      	bpl.n	5118 <__divsi3+0x1b8>
    5116:	4249      	negs	r1, r1
    5118:	4770      	bx	lr
    511a:	4663      	mov	r3, ip
    511c:	105b      	asrs	r3, r3, #1
    511e:	d300      	bcc.n	5122 <__divsi3+0x1c2>
    5120:	4240      	negs	r0, r0
    5122:	b501      	push	{r0, lr}
    5124:	2000      	movs	r0, #0
    5126:	f000 f805 	bl	5134 <__aeabi_idiv0>
    512a:	bd02      	pop	{r1, pc}

0000512c <__aeabi_idivmod>:
    512c:	2900      	cmp	r1, #0
    512e:	d0f8      	beq.n	5122 <__divsi3+0x1c2>
    5130:	e716      	b.n	4f60 <__divsi3>
    5132:	4770      	bx	lr

00005134 <__aeabi_idiv0>:
    5134:	4770      	bx	lr
    5136:	46c0      	nop			; (mov r8, r8)

00005138 <__aeabi_cdrcmple>:
    5138:	4684      	mov	ip, r0
    513a:	1c10      	adds	r0, r2, #0
    513c:	4662      	mov	r2, ip
    513e:	468c      	mov	ip, r1
    5140:	1c19      	adds	r1, r3, #0
    5142:	4663      	mov	r3, ip
    5144:	e000      	b.n	5148 <__aeabi_cdcmpeq>
    5146:	46c0      	nop			; (mov r8, r8)

00005148 <__aeabi_cdcmpeq>:
    5148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    514a:	f001 f89d 	bl	6288 <__ledf2>
    514e:	2800      	cmp	r0, #0
    5150:	d401      	bmi.n	5156 <__aeabi_cdcmpeq+0xe>
    5152:	2100      	movs	r1, #0
    5154:	42c8      	cmn	r0, r1
    5156:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00005158 <__aeabi_dcmpeq>:
    5158:	b510      	push	{r4, lr}
    515a:	f000 fff7 	bl	614c <__eqdf2>
    515e:	4240      	negs	r0, r0
    5160:	3001      	adds	r0, #1
    5162:	bd10      	pop	{r4, pc}

00005164 <__aeabi_dcmplt>:
    5164:	b510      	push	{r4, lr}
    5166:	f001 f88f 	bl	6288 <__ledf2>
    516a:	2800      	cmp	r0, #0
    516c:	db01      	blt.n	5172 <__aeabi_dcmplt+0xe>
    516e:	2000      	movs	r0, #0
    5170:	bd10      	pop	{r4, pc}
    5172:	2001      	movs	r0, #1
    5174:	bd10      	pop	{r4, pc}
    5176:	46c0      	nop			; (mov r8, r8)

00005178 <__aeabi_dcmple>:
    5178:	b510      	push	{r4, lr}
    517a:	f001 f885 	bl	6288 <__ledf2>
    517e:	2800      	cmp	r0, #0
    5180:	dd01      	ble.n	5186 <__aeabi_dcmple+0xe>
    5182:	2000      	movs	r0, #0
    5184:	bd10      	pop	{r4, pc}
    5186:	2001      	movs	r0, #1
    5188:	bd10      	pop	{r4, pc}
    518a:	46c0      	nop			; (mov r8, r8)

0000518c <__aeabi_dcmpgt>:
    518c:	b510      	push	{r4, lr}
    518e:	f001 f817 	bl	61c0 <__gedf2>
    5192:	2800      	cmp	r0, #0
    5194:	dc01      	bgt.n	519a <__aeabi_dcmpgt+0xe>
    5196:	2000      	movs	r0, #0
    5198:	bd10      	pop	{r4, pc}
    519a:	2001      	movs	r0, #1
    519c:	bd10      	pop	{r4, pc}
    519e:	46c0      	nop			; (mov r8, r8)

000051a0 <__aeabi_dcmpge>:
    51a0:	b510      	push	{r4, lr}
    51a2:	f001 f80d 	bl	61c0 <__gedf2>
    51a6:	2800      	cmp	r0, #0
    51a8:	da01      	bge.n	51ae <__aeabi_dcmpge+0xe>
    51aa:	2000      	movs	r0, #0
    51ac:	bd10      	pop	{r4, pc}
    51ae:	2001      	movs	r0, #1
    51b0:	bd10      	pop	{r4, pc}
    51b2:	46c0      	nop			; (mov r8, r8)

000051b4 <__aeabi_lmul>:
    51b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    51b6:	46ce      	mov	lr, r9
    51b8:	4647      	mov	r7, r8
    51ba:	0415      	lsls	r5, r2, #16
    51bc:	0c2d      	lsrs	r5, r5, #16
    51be:	002e      	movs	r6, r5
    51c0:	b580      	push	{r7, lr}
    51c2:	0407      	lsls	r7, r0, #16
    51c4:	0c14      	lsrs	r4, r2, #16
    51c6:	0c3f      	lsrs	r7, r7, #16
    51c8:	4699      	mov	r9, r3
    51ca:	0c03      	lsrs	r3, r0, #16
    51cc:	437e      	muls	r6, r7
    51ce:	435d      	muls	r5, r3
    51d0:	4367      	muls	r7, r4
    51d2:	4363      	muls	r3, r4
    51d4:	197f      	adds	r7, r7, r5
    51d6:	0c34      	lsrs	r4, r6, #16
    51d8:	19e4      	adds	r4, r4, r7
    51da:	469c      	mov	ip, r3
    51dc:	42a5      	cmp	r5, r4
    51de:	d903      	bls.n	51e8 <__aeabi_lmul+0x34>
    51e0:	2380      	movs	r3, #128	; 0x80
    51e2:	025b      	lsls	r3, r3, #9
    51e4:	4698      	mov	r8, r3
    51e6:	44c4      	add	ip, r8
    51e8:	464b      	mov	r3, r9
    51ea:	4351      	muls	r1, r2
    51ec:	4343      	muls	r3, r0
    51ee:	0436      	lsls	r6, r6, #16
    51f0:	0c36      	lsrs	r6, r6, #16
    51f2:	0c25      	lsrs	r5, r4, #16
    51f4:	0424      	lsls	r4, r4, #16
    51f6:	4465      	add	r5, ip
    51f8:	19a4      	adds	r4, r4, r6
    51fa:	1859      	adds	r1, r3, r1
    51fc:	1949      	adds	r1, r1, r5
    51fe:	0020      	movs	r0, r4
    5200:	bc0c      	pop	{r2, r3}
    5202:	4690      	mov	r8, r2
    5204:	4699      	mov	r9, r3
    5206:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005208 <__aeabi_d2uiz>:
    5208:	b570      	push	{r4, r5, r6, lr}
    520a:	2200      	movs	r2, #0
    520c:	4b0c      	ldr	r3, [pc, #48]	; (5240 <__aeabi_d2uiz+0x38>)
    520e:	0004      	movs	r4, r0
    5210:	000d      	movs	r5, r1
    5212:	f7ff ffc5 	bl	51a0 <__aeabi_dcmpge>
    5216:	2800      	cmp	r0, #0
    5218:	d104      	bne.n	5224 <__aeabi_d2uiz+0x1c>
    521a:	0020      	movs	r0, r4
    521c:	0029      	movs	r1, r5
    521e:	f001 fe4b 	bl	6eb8 <__aeabi_d2iz>
    5222:	bd70      	pop	{r4, r5, r6, pc}
    5224:	4b06      	ldr	r3, [pc, #24]	; (5240 <__aeabi_d2uiz+0x38>)
    5226:	2200      	movs	r2, #0
    5228:	0020      	movs	r0, r4
    522a:	0029      	movs	r1, r5
    522c:	f001 fb0e 	bl	684c <__aeabi_dsub>
    5230:	f001 fe42 	bl	6eb8 <__aeabi_d2iz>
    5234:	2380      	movs	r3, #128	; 0x80
    5236:	061b      	lsls	r3, r3, #24
    5238:	469c      	mov	ip, r3
    523a:	4460      	add	r0, ip
    523c:	e7f1      	b.n	5222 <__aeabi_d2uiz+0x1a>
    523e:	46c0      	nop			; (mov r8, r8)
    5240:	41e00000 	.word	0x41e00000

00005244 <__aeabi_fmul>:
    5244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5246:	4657      	mov	r7, sl
    5248:	464e      	mov	r6, r9
    524a:	4645      	mov	r5, r8
    524c:	46de      	mov	lr, fp
    524e:	b5e0      	push	{r5, r6, r7, lr}
    5250:	0247      	lsls	r7, r0, #9
    5252:	0046      	lsls	r6, r0, #1
    5254:	4688      	mov	r8, r1
    5256:	0a7f      	lsrs	r7, r7, #9
    5258:	0e36      	lsrs	r6, r6, #24
    525a:	0fc4      	lsrs	r4, r0, #31
    525c:	2e00      	cmp	r6, #0
    525e:	d047      	beq.n	52f0 <__aeabi_fmul+0xac>
    5260:	2eff      	cmp	r6, #255	; 0xff
    5262:	d024      	beq.n	52ae <__aeabi_fmul+0x6a>
    5264:	00fb      	lsls	r3, r7, #3
    5266:	2780      	movs	r7, #128	; 0x80
    5268:	04ff      	lsls	r7, r7, #19
    526a:	431f      	orrs	r7, r3
    526c:	2300      	movs	r3, #0
    526e:	4699      	mov	r9, r3
    5270:	469a      	mov	sl, r3
    5272:	3e7f      	subs	r6, #127	; 0x7f
    5274:	4643      	mov	r3, r8
    5276:	025d      	lsls	r5, r3, #9
    5278:	0058      	lsls	r0, r3, #1
    527a:	0fdb      	lsrs	r3, r3, #31
    527c:	0a6d      	lsrs	r5, r5, #9
    527e:	0e00      	lsrs	r0, r0, #24
    5280:	4698      	mov	r8, r3
    5282:	d043      	beq.n	530c <__aeabi_fmul+0xc8>
    5284:	28ff      	cmp	r0, #255	; 0xff
    5286:	d03b      	beq.n	5300 <__aeabi_fmul+0xbc>
    5288:	00eb      	lsls	r3, r5, #3
    528a:	2580      	movs	r5, #128	; 0x80
    528c:	2200      	movs	r2, #0
    528e:	04ed      	lsls	r5, r5, #19
    5290:	431d      	orrs	r5, r3
    5292:	387f      	subs	r0, #127	; 0x7f
    5294:	1836      	adds	r6, r6, r0
    5296:	1c73      	adds	r3, r6, #1
    5298:	4641      	mov	r1, r8
    529a:	469b      	mov	fp, r3
    529c:	464b      	mov	r3, r9
    529e:	4061      	eors	r1, r4
    52a0:	4313      	orrs	r3, r2
    52a2:	2b0f      	cmp	r3, #15
    52a4:	d864      	bhi.n	5370 <__aeabi_fmul+0x12c>
    52a6:	4875      	ldr	r0, [pc, #468]	; (547c <__aeabi_fmul+0x238>)
    52a8:	009b      	lsls	r3, r3, #2
    52aa:	58c3      	ldr	r3, [r0, r3]
    52ac:	469f      	mov	pc, r3
    52ae:	2f00      	cmp	r7, #0
    52b0:	d142      	bne.n	5338 <__aeabi_fmul+0xf4>
    52b2:	2308      	movs	r3, #8
    52b4:	4699      	mov	r9, r3
    52b6:	3b06      	subs	r3, #6
    52b8:	26ff      	movs	r6, #255	; 0xff
    52ba:	469a      	mov	sl, r3
    52bc:	e7da      	b.n	5274 <__aeabi_fmul+0x30>
    52be:	4641      	mov	r1, r8
    52c0:	2a02      	cmp	r2, #2
    52c2:	d028      	beq.n	5316 <__aeabi_fmul+0xd2>
    52c4:	2a03      	cmp	r2, #3
    52c6:	d100      	bne.n	52ca <__aeabi_fmul+0x86>
    52c8:	e0ce      	b.n	5468 <__aeabi_fmul+0x224>
    52ca:	2a01      	cmp	r2, #1
    52cc:	d000      	beq.n	52d0 <__aeabi_fmul+0x8c>
    52ce:	e0ac      	b.n	542a <__aeabi_fmul+0x1e6>
    52d0:	4011      	ands	r1, r2
    52d2:	2000      	movs	r0, #0
    52d4:	2200      	movs	r2, #0
    52d6:	b2cc      	uxtb	r4, r1
    52d8:	0240      	lsls	r0, r0, #9
    52da:	05d2      	lsls	r2, r2, #23
    52dc:	0a40      	lsrs	r0, r0, #9
    52de:	07e4      	lsls	r4, r4, #31
    52e0:	4310      	orrs	r0, r2
    52e2:	4320      	orrs	r0, r4
    52e4:	bc3c      	pop	{r2, r3, r4, r5}
    52e6:	4690      	mov	r8, r2
    52e8:	4699      	mov	r9, r3
    52ea:	46a2      	mov	sl, r4
    52ec:	46ab      	mov	fp, r5
    52ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    52f0:	2f00      	cmp	r7, #0
    52f2:	d115      	bne.n	5320 <__aeabi_fmul+0xdc>
    52f4:	2304      	movs	r3, #4
    52f6:	4699      	mov	r9, r3
    52f8:	3b03      	subs	r3, #3
    52fa:	2600      	movs	r6, #0
    52fc:	469a      	mov	sl, r3
    52fe:	e7b9      	b.n	5274 <__aeabi_fmul+0x30>
    5300:	20ff      	movs	r0, #255	; 0xff
    5302:	2202      	movs	r2, #2
    5304:	2d00      	cmp	r5, #0
    5306:	d0c5      	beq.n	5294 <__aeabi_fmul+0x50>
    5308:	2203      	movs	r2, #3
    530a:	e7c3      	b.n	5294 <__aeabi_fmul+0x50>
    530c:	2d00      	cmp	r5, #0
    530e:	d119      	bne.n	5344 <__aeabi_fmul+0x100>
    5310:	2000      	movs	r0, #0
    5312:	2201      	movs	r2, #1
    5314:	e7be      	b.n	5294 <__aeabi_fmul+0x50>
    5316:	2401      	movs	r4, #1
    5318:	22ff      	movs	r2, #255	; 0xff
    531a:	400c      	ands	r4, r1
    531c:	2000      	movs	r0, #0
    531e:	e7db      	b.n	52d8 <__aeabi_fmul+0x94>
    5320:	0038      	movs	r0, r7
    5322:	f001 ff53 	bl	71cc <__clzsi2>
    5326:	2676      	movs	r6, #118	; 0x76
    5328:	1f43      	subs	r3, r0, #5
    532a:	409f      	lsls	r7, r3
    532c:	2300      	movs	r3, #0
    532e:	4276      	negs	r6, r6
    5330:	1a36      	subs	r6, r6, r0
    5332:	4699      	mov	r9, r3
    5334:	469a      	mov	sl, r3
    5336:	e79d      	b.n	5274 <__aeabi_fmul+0x30>
    5338:	230c      	movs	r3, #12
    533a:	4699      	mov	r9, r3
    533c:	3b09      	subs	r3, #9
    533e:	26ff      	movs	r6, #255	; 0xff
    5340:	469a      	mov	sl, r3
    5342:	e797      	b.n	5274 <__aeabi_fmul+0x30>
    5344:	0028      	movs	r0, r5
    5346:	f001 ff41 	bl	71cc <__clzsi2>
    534a:	1f43      	subs	r3, r0, #5
    534c:	409d      	lsls	r5, r3
    534e:	2376      	movs	r3, #118	; 0x76
    5350:	425b      	negs	r3, r3
    5352:	1a18      	subs	r0, r3, r0
    5354:	2200      	movs	r2, #0
    5356:	e79d      	b.n	5294 <__aeabi_fmul+0x50>
    5358:	2080      	movs	r0, #128	; 0x80
    535a:	2400      	movs	r4, #0
    535c:	03c0      	lsls	r0, r0, #15
    535e:	22ff      	movs	r2, #255	; 0xff
    5360:	e7ba      	b.n	52d8 <__aeabi_fmul+0x94>
    5362:	003d      	movs	r5, r7
    5364:	4652      	mov	r2, sl
    5366:	e7ab      	b.n	52c0 <__aeabi_fmul+0x7c>
    5368:	003d      	movs	r5, r7
    536a:	0021      	movs	r1, r4
    536c:	4652      	mov	r2, sl
    536e:	e7a7      	b.n	52c0 <__aeabi_fmul+0x7c>
    5370:	0c3b      	lsrs	r3, r7, #16
    5372:	469c      	mov	ip, r3
    5374:	042a      	lsls	r2, r5, #16
    5376:	0c12      	lsrs	r2, r2, #16
    5378:	0c2b      	lsrs	r3, r5, #16
    537a:	0014      	movs	r4, r2
    537c:	4660      	mov	r0, ip
    537e:	4665      	mov	r5, ip
    5380:	043f      	lsls	r7, r7, #16
    5382:	0c3f      	lsrs	r7, r7, #16
    5384:	437c      	muls	r4, r7
    5386:	4342      	muls	r2, r0
    5388:	435d      	muls	r5, r3
    538a:	437b      	muls	r3, r7
    538c:	0c27      	lsrs	r7, r4, #16
    538e:	189b      	adds	r3, r3, r2
    5390:	18ff      	adds	r7, r7, r3
    5392:	42ba      	cmp	r2, r7
    5394:	d903      	bls.n	539e <__aeabi_fmul+0x15a>
    5396:	2380      	movs	r3, #128	; 0x80
    5398:	025b      	lsls	r3, r3, #9
    539a:	469c      	mov	ip, r3
    539c:	4465      	add	r5, ip
    539e:	0424      	lsls	r4, r4, #16
    53a0:	043a      	lsls	r2, r7, #16
    53a2:	0c24      	lsrs	r4, r4, #16
    53a4:	1912      	adds	r2, r2, r4
    53a6:	0193      	lsls	r3, r2, #6
    53a8:	1e5c      	subs	r4, r3, #1
    53aa:	41a3      	sbcs	r3, r4
    53ac:	0c3f      	lsrs	r7, r7, #16
    53ae:	0e92      	lsrs	r2, r2, #26
    53b0:	197d      	adds	r5, r7, r5
    53b2:	431a      	orrs	r2, r3
    53b4:	01ad      	lsls	r5, r5, #6
    53b6:	4315      	orrs	r5, r2
    53b8:	012b      	lsls	r3, r5, #4
    53ba:	d504      	bpl.n	53c6 <__aeabi_fmul+0x182>
    53bc:	2301      	movs	r3, #1
    53be:	465e      	mov	r6, fp
    53c0:	086a      	lsrs	r2, r5, #1
    53c2:	401d      	ands	r5, r3
    53c4:	4315      	orrs	r5, r2
    53c6:	0032      	movs	r2, r6
    53c8:	327f      	adds	r2, #127	; 0x7f
    53ca:	2a00      	cmp	r2, #0
    53cc:	dd25      	ble.n	541a <__aeabi_fmul+0x1d6>
    53ce:	076b      	lsls	r3, r5, #29
    53d0:	d004      	beq.n	53dc <__aeabi_fmul+0x198>
    53d2:	230f      	movs	r3, #15
    53d4:	402b      	ands	r3, r5
    53d6:	2b04      	cmp	r3, #4
    53d8:	d000      	beq.n	53dc <__aeabi_fmul+0x198>
    53da:	3504      	adds	r5, #4
    53dc:	012b      	lsls	r3, r5, #4
    53de:	d503      	bpl.n	53e8 <__aeabi_fmul+0x1a4>
    53e0:	0032      	movs	r2, r6
    53e2:	4b27      	ldr	r3, [pc, #156]	; (5480 <__aeabi_fmul+0x23c>)
    53e4:	3280      	adds	r2, #128	; 0x80
    53e6:	401d      	ands	r5, r3
    53e8:	2afe      	cmp	r2, #254	; 0xfe
    53ea:	dc94      	bgt.n	5316 <__aeabi_fmul+0xd2>
    53ec:	2401      	movs	r4, #1
    53ee:	01a8      	lsls	r0, r5, #6
    53f0:	0a40      	lsrs	r0, r0, #9
    53f2:	b2d2      	uxtb	r2, r2
    53f4:	400c      	ands	r4, r1
    53f6:	e76f      	b.n	52d8 <__aeabi_fmul+0x94>
    53f8:	2080      	movs	r0, #128	; 0x80
    53fa:	03c0      	lsls	r0, r0, #15
    53fc:	4207      	tst	r7, r0
    53fe:	d007      	beq.n	5410 <__aeabi_fmul+0x1cc>
    5400:	4205      	tst	r5, r0
    5402:	d105      	bne.n	5410 <__aeabi_fmul+0x1cc>
    5404:	4328      	orrs	r0, r5
    5406:	0240      	lsls	r0, r0, #9
    5408:	0a40      	lsrs	r0, r0, #9
    540a:	4644      	mov	r4, r8
    540c:	22ff      	movs	r2, #255	; 0xff
    540e:	e763      	b.n	52d8 <__aeabi_fmul+0x94>
    5410:	4338      	orrs	r0, r7
    5412:	0240      	lsls	r0, r0, #9
    5414:	0a40      	lsrs	r0, r0, #9
    5416:	22ff      	movs	r2, #255	; 0xff
    5418:	e75e      	b.n	52d8 <__aeabi_fmul+0x94>
    541a:	2401      	movs	r4, #1
    541c:	1aa3      	subs	r3, r4, r2
    541e:	2b1b      	cmp	r3, #27
    5420:	dd05      	ble.n	542e <__aeabi_fmul+0x1ea>
    5422:	400c      	ands	r4, r1
    5424:	2200      	movs	r2, #0
    5426:	2000      	movs	r0, #0
    5428:	e756      	b.n	52d8 <__aeabi_fmul+0x94>
    542a:	465e      	mov	r6, fp
    542c:	e7cb      	b.n	53c6 <__aeabi_fmul+0x182>
    542e:	002a      	movs	r2, r5
    5430:	2020      	movs	r0, #32
    5432:	40da      	lsrs	r2, r3
    5434:	1ac3      	subs	r3, r0, r3
    5436:	409d      	lsls	r5, r3
    5438:	002b      	movs	r3, r5
    543a:	1e5d      	subs	r5, r3, #1
    543c:	41ab      	sbcs	r3, r5
    543e:	4313      	orrs	r3, r2
    5440:	075a      	lsls	r2, r3, #29
    5442:	d004      	beq.n	544e <__aeabi_fmul+0x20a>
    5444:	220f      	movs	r2, #15
    5446:	401a      	ands	r2, r3
    5448:	2a04      	cmp	r2, #4
    544a:	d000      	beq.n	544e <__aeabi_fmul+0x20a>
    544c:	3304      	adds	r3, #4
    544e:	015a      	lsls	r2, r3, #5
    5450:	d504      	bpl.n	545c <__aeabi_fmul+0x218>
    5452:	2401      	movs	r4, #1
    5454:	2201      	movs	r2, #1
    5456:	400c      	ands	r4, r1
    5458:	2000      	movs	r0, #0
    545a:	e73d      	b.n	52d8 <__aeabi_fmul+0x94>
    545c:	2401      	movs	r4, #1
    545e:	019b      	lsls	r3, r3, #6
    5460:	0a58      	lsrs	r0, r3, #9
    5462:	400c      	ands	r4, r1
    5464:	2200      	movs	r2, #0
    5466:	e737      	b.n	52d8 <__aeabi_fmul+0x94>
    5468:	2080      	movs	r0, #128	; 0x80
    546a:	2401      	movs	r4, #1
    546c:	03c0      	lsls	r0, r0, #15
    546e:	4328      	orrs	r0, r5
    5470:	0240      	lsls	r0, r0, #9
    5472:	0a40      	lsrs	r0, r0, #9
    5474:	400c      	ands	r4, r1
    5476:	22ff      	movs	r2, #255	; 0xff
    5478:	e72e      	b.n	52d8 <__aeabi_fmul+0x94>
    547a:	46c0      	nop			; (mov r8, r8)
    547c:	00007298 	.word	0x00007298
    5480:	f7ffffff 	.word	0xf7ffffff

00005484 <__aeabi_f2iz>:
    5484:	0241      	lsls	r1, r0, #9
    5486:	0043      	lsls	r3, r0, #1
    5488:	0fc2      	lsrs	r2, r0, #31
    548a:	0a49      	lsrs	r1, r1, #9
    548c:	0e1b      	lsrs	r3, r3, #24
    548e:	2000      	movs	r0, #0
    5490:	2b7e      	cmp	r3, #126	; 0x7e
    5492:	dd0d      	ble.n	54b0 <__aeabi_f2iz+0x2c>
    5494:	2b9d      	cmp	r3, #157	; 0x9d
    5496:	dc0c      	bgt.n	54b2 <__aeabi_f2iz+0x2e>
    5498:	2080      	movs	r0, #128	; 0x80
    549a:	0400      	lsls	r0, r0, #16
    549c:	4301      	orrs	r1, r0
    549e:	2b95      	cmp	r3, #149	; 0x95
    54a0:	dc0a      	bgt.n	54b8 <__aeabi_f2iz+0x34>
    54a2:	2096      	movs	r0, #150	; 0x96
    54a4:	1ac3      	subs	r3, r0, r3
    54a6:	40d9      	lsrs	r1, r3
    54a8:	4248      	negs	r0, r1
    54aa:	2a00      	cmp	r2, #0
    54ac:	d100      	bne.n	54b0 <__aeabi_f2iz+0x2c>
    54ae:	0008      	movs	r0, r1
    54b0:	4770      	bx	lr
    54b2:	4b03      	ldr	r3, [pc, #12]	; (54c0 <__aeabi_f2iz+0x3c>)
    54b4:	18d0      	adds	r0, r2, r3
    54b6:	e7fb      	b.n	54b0 <__aeabi_f2iz+0x2c>
    54b8:	3b96      	subs	r3, #150	; 0x96
    54ba:	4099      	lsls	r1, r3
    54bc:	e7f4      	b.n	54a8 <__aeabi_f2iz+0x24>
    54be:	46c0      	nop			; (mov r8, r8)
    54c0:	7fffffff 	.word	0x7fffffff

000054c4 <__aeabi_dadd>:
    54c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    54c6:	4645      	mov	r5, r8
    54c8:	46de      	mov	lr, fp
    54ca:	4657      	mov	r7, sl
    54cc:	464e      	mov	r6, r9
    54ce:	030c      	lsls	r4, r1, #12
    54d0:	b5e0      	push	{r5, r6, r7, lr}
    54d2:	004e      	lsls	r6, r1, #1
    54d4:	0fc9      	lsrs	r1, r1, #31
    54d6:	4688      	mov	r8, r1
    54d8:	000d      	movs	r5, r1
    54da:	0a61      	lsrs	r1, r4, #9
    54dc:	0f44      	lsrs	r4, r0, #29
    54de:	430c      	orrs	r4, r1
    54e0:	00c7      	lsls	r7, r0, #3
    54e2:	0319      	lsls	r1, r3, #12
    54e4:	0058      	lsls	r0, r3, #1
    54e6:	0fdb      	lsrs	r3, r3, #31
    54e8:	469b      	mov	fp, r3
    54ea:	0a4b      	lsrs	r3, r1, #9
    54ec:	0f51      	lsrs	r1, r2, #29
    54ee:	430b      	orrs	r3, r1
    54f0:	0d76      	lsrs	r6, r6, #21
    54f2:	0d40      	lsrs	r0, r0, #21
    54f4:	0019      	movs	r1, r3
    54f6:	00d2      	lsls	r2, r2, #3
    54f8:	45d8      	cmp	r8, fp
    54fa:	d100      	bne.n	54fe <__aeabi_dadd+0x3a>
    54fc:	e0ae      	b.n	565c <__aeabi_dadd+0x198>
    54fe:	1a35      	subs	r5, r6, r0
    5500:	2d00      	cmp	r5, #0
    5502:	dc00      	bgt.n	5506 <__aeabi_dadd+0x42>
    5504:	e0f6      	b.n	56f4 <__aeabi_dadd+0x230>
    5506:	2800      	cmp	r0, #0
    5508:	d10f      	bne.n	552a <__aeabi_dadd+0x66>
    550a:	4313      	orrs	r3, r2
    550c:	d100      	bne.n	5510 <__aeabi_dadd+0x4c>
    550e:	e0db      	b.n	56c8 <__aeabi_dadd+0x204>
    5510:	1e6b      	subs	r3, r5, #1
    5512:	2b00      	cmp	r3, #0
    5514:	d000      	beq.n	5518 <__aeabi_dadd+0x54>
    5516:	e137      	b.n	5788 <__aeabi_dadd+0x2c4>
    5518:	1aba      	subs	r2, r7, r2
    551a:	4297      	cmp	r7, r2
    551c:	41bf      	sbcs	r7, r7
    551e:	1a64      	subs	r4, r4, r1
    5520:	427f      	negs	r7, r7
    5522:	1be4      	subs	r4, r4, r7
    5524:	2601      	movs	r6, #1
    5526:	0017      	movs	r7, r2
    5528:	e024      	b.n	5574 <__aeabi_dadd+0xb0>
    552a:	4bc6      	ldr	r3, [pc, #792]	; (5844 <__aeabi_dadd+0x380>)
    552c:	429e      	cmp	r6, r3
    552e:	d04d      	beq.n	55cc <__aeabi_dadd+0x108>
    5530:	2380      	movs	r3, #128	; 0x80
    5532:	041b      	lsls	r3, r3, #16
    5534:	4319      	orrs	r1, r3
    5536:	2d38      	cmp	r5, #56	; 0x38
    5538:	dd00      	ble.n	553c <__aeabi_dadd+0x78>
    553a:	e107      	b.n	574c <__aeabi_dadd+0x288>
    553c:	2d1f      	cmp	r5, #31
    553e:	dd00      	ble.n	5542 <__aeabi_dadd+0x7e>
    5540:	e138      	b.n	57b4 <__aeabi_dadd+0x2f0>
    5542:	2020      	movs	r0, #32
    5544:	1b43      	subs	r3, r0, r5
    5546:	469a      	mov	sl, r3
    5548:	000b      	movs	r3, r1
    554a:	4650      	mov	r0, sl
    554c:	4083      	lsls	r3, r0
    554e:	4699      	mov	r9, r3
    5550:	0013      	movs	r3, r2
    5552:	4648      	mov	r0, r9
    5554:	40eb      	lsrs	r3, r5
    5556:	4318      	orrs	r0, r3
    5558:	0003      	movs	r3, r0
    555a:	4650      	mov	r0, sl
    555c:	4082      	lsls	r2, r0
    555e:	1e50      	subs	r0, r2, #1
    5560:	4182      	sbcs	r2, r0
    5562:	40e9      	lsrs	r1, r5
    5564:	431a      	orrs	r2, r3
    5566:	1aba      	subs	r2, r7, r2
    5568:	1a61      	subs	r1, r4, r1
    556a:	4297      	cmp	r7, r2
    556c:	41a4      	sbcs	r4, r4
    556e:	0017      	movs	r7, r2
    5570:	4264      	negs	r4, r4
    5572:	1b0c      	subs	r4, r1, r4
    5574:	0223      	lsls	r3, r4, #8
    5576:	d562      	bpl.n	563e <__aeabi_dadd+0x17a>
    5578:	0264      	lsls	r4, r4, #9
    557a:	0a65      	lsrs	r5, r4, #9
    557c:	2d00      	cmp	r5, #0
    557e:	d100      	bne.n	5582 <__aeabi_dadd+0xbe>
    5580:	e0df      	b.n	5742 <__aeabi_dadd+0x27e>
    5582:	0028      	movs	r0, r5
    5584:	f001 fe22 	bl	71cc <__clzsi2>
    5588:	0003      	movs	r3, r0
    558a:	3b08      	subs	r3, #8
    558c:	2b1f      	cmp	r3, #31
    558e:	dd00      	ble.n	5592 <__aeabi_dadd+0xce>
    5590:	e0d2      	b.n	5738 <__aeabi_dadd+0x274>
    5592:	2220      	movs	r2, #32
    5594:	003c      	movs	r4, r7
    5596:	1ad2      	subs	r2, r2, r3
    5598:	409d      	lsls	r5, r3
    559a:	40d4      	lsrs	r4, r2
    559c:	409f      	lsls	r7, r3
    559e:	4325      	orrs	r5, r4
    55a0:	429e      	cmp	r6, r3
    55a2:	dd00      	ble.n	55a6 <__aeabi_dadd+0xe2>
    55a4:	e0c4      	b.n	5730 <__aeabi_dadd+0x26c>
    55a6:	1b9e      	subs	r6, r3, r6
    55a8:	1c73      	adds	r3, r6, #1
    55aa:	2b1f      	cmp	r3, #31
    55ac:	dd00      	ble.n	55b0 <__aeabi_dadd+0xec>
    55ae:	e0f1      	b.n	5794 <__aeabi_dadd+0x2d0>
    55b0:	2220      	movs	r2, #32
    55b2:	0038      	movs	r0, r7
    55b4:	0029      	movs	r1, r5
    55b6:	1ad2      	subs	r2, r2, r3
    55b8:	40d8      	lsrs	r0, r3
    55ba:	4091      	lsls	r1, r2
    55bc:	4097      	lsls	r7, r2
    55be:	002c      	movs	r4, r5
    55c0:	4301      	orrs	r1, r0
    55c2:	1e78      	subs	r0, r7, #1
    55c4:	4187      	sbcs	r7, r0
    55c6:	40dc      	lsrs	r4, r3
    55c8:	2600      	movs	r6, #0
    55ca:	430f      	orrs	r7, r1
    55cc:	077b      	lsls	r3, r7, #29
    55ce:	d009      	beq.n	55e4 <__aeabi_dadd+0x120>
    55d0:	230f      	movs	r3, #15
    55d2:	403b      	ands	r3, r7
    55d4:	2b04      	cmp	r3, #4
    55d6:	d005      	beq.n	55e4 <__aeabi_dadd+0x120>
    55d8:	1d3b      	adds	r3, r7, #4
    55da:	42bb      	cmp	r3, r7
    55dc:	41bf      	sbcs	r7, r7
    55de:	427f      	negs	r7, r7
    55e0:	19e4      	adds	r4, r4, r7
    55e2:	001f      	movs	r7, r3
    55e4:	0223      	lsls	r3, r4, #8
    55e6:	d52c      	bpl.n	5642 <__aeabi_dadd+0x17e>
    55e8:	4b96      	ldr	r3, [pc, #600]	; (5844 <__aeabi_dadd+0x380>)
    55ea:	3601      	adds	r6, #1
    55ec:	429e      	cmp	r6, r3
    55ee:	d100      	bne.n	55f2 <__aeabi_dadd+0x12e>
    55f0:	e09a      	b.n	5728 <__aeabi_dadd+0x264>
    55f2:	4645      	mov	r5, r8
    55f4:	4b94      	ldr	r3, [pc, #592]	; (5848 <__aeabi_dadd+0x384>)
    55f6:	08ff      	lsrs	r7, r7, #3
    55f8:	401c      	ands	r4, r3
    55fa:	0760      	lsls	r0, r4, #29
    55fc:	0576      	lsls	r6, r6, #21
    55fe:	0264      	lsls	r4, r4, #9
    5600:	4307      	orrs	r7, r0
    5602:	0b24      	lsrs	r4, r4, #12
    5604:	0d76      	lsrs	r6, r6, #21
    5606:	2100      	movs	r1, #0
    5608:	0324      	lsls	r4, r4, #12
    560a:	0b23      	lsrs	r3, r4, #12
    560c:	0d0c      	lsrs	r4, r1, #20
    560e:	4a8f      	ldr	r2, [pc, #572]	; (584c <__aeabi_dadd+0x388>)
    5610:	0524      	lsls	r4, r4, #20
    5612:	431c      	orrs	r4, r3
    5614:	4014      	ands	r4, r2
    5616:	0533      	lsls	r3, r6, #20
    5618:	4323      	orrs	r3, r4
    561a:	005b      	lsls	r3, r3, #1
    561c:	07ed      	lsls	r5, r5, #31
    561e:	085b      	lsrs	r3, r3, #1
    5620:	432b      	orrs	r3, r5
    5622:	0038      	movs	r0, r7
    5624:	0019      	movs	r1, r3
    5626:	bc3c      	pop	{r2, r3, r4, r5}
    5628:	4690      	mov	r8, r2
    562a:	4699      	mov	r9, r3
    562c:	46a2      	mov	sl, r4
    562e:	46ab      	mov	fp, r5
    5630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5632:	4664      	mov	r4, ip
    5634:	4304      	orrs	r4, r0
    5636:	d100      	bne.n	563a <__aeabi_dadd+0x176>
    5638:	e211      	b.n	5a5e <__aeabi_dadd+0x59a>
    563a:	0004      	movs	r4, r0
    563c:	4667      	mov	r7, ip
    563e:	077b      	lsls	r3, r7, #29
    5640:	d1c6      	bne.n	55d0 <__aeabi_dadd+0x10c>
    5642:	4645      	mov	r5, r8
    5644:	0760      	lsls	r0, r4, #29
    5646:	08ff      	lsrs	r7, r7, #3
    5648:	4307      	orrs	r7, r0
    564a:	08e4      	lsrs	r4, r4, #3
    564c:	4b7d      	ldr	r3, [pc, #500]	; (5844 <__aeabi_dadd+0x380>)
    564e:	429e      	cmp	r6, r3
    5650:	d030      	beq.n	56b4 <__aeabi_dadd+0x1f0>
    5652:	0324      	lsls	r4, r4, #12
    5654:	0576      	lsls	r6, r6, #21
    5656:	0b24      	lsrs	r4, r4, #12
    5658:	0d76      	lsrs	r6, r6, #21
    565a:	e7d4      	b.n	5606 <__aeabi_dadd+0x142>
    565c:	1a33      	subs	r3, r6, r0
    565e:	469a      	mov	sl, r3
    5660:	2b00      	cmp	r3, #0
    5662:	dd78      	ble.n	5756 <__aeabi_dadd+0x292>
    5664:	2800      	cmp	r0, #0
    5666:	d031      	beq.n	56cc <__aeabi_dadd+0x208>
    5668:	4876      	ldr	r0, [pc, #472]	; (5844 <__aeabi_dadd+0x380>)
    566a:	4286      	cmp	r6, r0
    566c:	d0ae      	beq.n	55cc <__aeabi_dadd+0x108>
    566e:	2080      	movs	r0, #128	; 0x80
    5670:	0400      	lsls	r0, r0, #16
    5672:	4301      	orrs	r1, r0
    5674:	4653      	mov	r3, sl
    5676:	2b38      	cmp	r3, #56	; 0x38
    5678:	dc00      	bgt.n	567c <__aeabi_dadd+0x1b8>
    567a:	e0e9      	b.n	5850 <__aeabi_dadd+0x38c>
    567c:	430a      	orrs	r2, r1
    567e:	1e51      	subs	r1, r2, #1
    5680:	418a      	sbcs	r2, r1
    5682:	2100      	movs	r1, #0
    5684:	19d2      	adds	r2, r2, r7
    5686:	42ba      	cmp	r2, r7
    5688:	41bf      	sbcs	r7, r7
    568a:	1909      	adds	r1, r1, r4
    568c:	427c      	negs	r4, r7
    568e:	0017      	movs	r7, r2
    5690:	190c      	adds	r4, r1, r4
    5692:	0223      	lsls	r3, r4, #8
    5694:	d5d3      	bpl.n	563e <__aeabi_dadd+0x17a>
    5696:	4b6b      	ldr	r3, [pc, #428]	; (5844 <__aeabi_dadd+0x380>)
    5698:	3601      	adds	r6, #1
    569a:	429e      	cmp	r6, r3
    569c:	d100      	bne.n	56a0 <__aeabi_dadd+0x1dc>
    569e:	e13a      	b.n	5916 <__aeabi_dadd+0x452>
    56a0:	2001      	movs	r0, #1
    56a2:	4b69      	ldr	r3, [pc, #420]	; (5848 <__aeabi_dadd+0x384>)
    56a4:	401c      	ands	r4, r3
    56a6:	087b      	lsrs	r3, r7, #1
    56a8:	4007      	ands	r7, r0
    56aa:	431f      	orrs	r7, r3
    56ac:	07e0      	lsls	r0, r4, #31
    56ae:	4307      	orrs	r7, r0
    56b0:	0864      	lsrs	r4, r4, #1
    56b2:	e78b      	b.n	55cc <__aeabi_dadd+0x108>
    56b4:	0023      	movs	r3, r4
    56b6:	433b      	orrs	r3, r7
    56b8:	d100      	bne.n	56bc <__aeabi_dadd+0x1f8>
    56ba:	e1cb      	b.n	5a54 <__aeabi_dadd+0x590>
    56bc:	2280      	movs	r2, #128	; 0x80
    56be:	0312      	lsls	r2, r2, #12
    56c0:	4314      	orrs	r4, r2
    56c2:	0324      	lsls	r4, r4, #12
    56c4:	0b24      	lsrs	r4, r4, #12
    56c6:	e79e      	b.n	5606 <__aeabi_dadd+0x142>
    56c8:	002e      	movs	r6, r5
    56ca:	e77f      	b.n	55cc <__aeabi_dadd+0x108>
    56cc:	0008      	movs	r0, r1
    56ce:	4310      	orrs	r0, r2
    56d0:	d100      	bne.n	56d4 <__aeabi_dadd+0x210>
    56d2:	e0b4      	b.n	583e <__aeabi_dadd+0x37a>
    56d4:	1e58      	subs	r0, r3, #1
    56d6:	2800      	cmp	r0, #0
    56d8:	d000      	beq.n	56dc <__aeabi_dadd+0x218>
    56da:	e0de      	b.n	589a <__aeabi_dadd+0x3d6>
    56dc:	18ba      	adds	r2, r7, r2
    56de:	42ba      	cmp	r2, r7
    56e0:	419b      	sbcs	r3, r3
    56e2:	1864      	adds	r4, r4, r1
    56e4:	425b      	negs	r3, r3
    56e6:	18e4      	adds	r4, r4, r3
    56e8:	0017      	movs	r7, r2
    56ea:	2601      	movs	r6, #1
    56ec:	0223      	lsls	r3, r4, #8
    56ee:	d5a6      	bpl.n	563e <__aeabi_dadd+0x17a>
    56f0:	2602      	movs	r6, #2
    56f2:	e7d5      	b.n	56a0 <__aeabi_dadd+0x1dc>
    56f4:	2d00      	cmp	r5, #0
    56f6:	d16e      	bne.n	57d6 <__aeabi_dadd+0x312>
    56f8:	1c70      	adds	r0, r6, #1
    56fa:	0540      	lsls	r0, r0, #21
    56fc:	0d40      	lsrs	r0, r0, #21
    56fe:	2801      	cmp	r0, #1
    5700:	dc00      	bgt.n	5704 <__aeabi_dadd+0x240>
    5702:	e0f9      	b.n	58f8 <__aeabi_dadd+0x434>
    5704:	1ab8      	subs	r0, r7, r2
    5706:	4684      	mov	ip, r0
    5708:	4287      	cmp	r7, r0
    570a:	4180      	sbcs	r0, r0
    570c:	1ae5      	subs	r5, r4, r3
    570e:	4240      	negs	r0, r0
    5710:	1a2d      	subs	r5, r5, r0
    5712:	0228      	lsls	r0, r5, #8
    5714:	d400      	bmi.n	5718 <__aeabi_dadd+0x254>
    5716:	e089      	b.n	582c <__aeabi_dadd+0x368>
    5718:	1bd7      	subs	r7, r2, r7
    571a:	42ba      	cmp	r2, r7
    571c:	4192      	sbcs	r2, r2
    571e:	1b1c      	subs	r4, r3, r4
    5720:	4252      	negs	r2, r2
    5722:	1aa5      	subs	r5, r4, r2
    5724:	46d8      	mov	r8, fp
    5726:	e729      	b.n	557c <__aeabi_dadd+0xb8>
    5728:	4645      	mov	r5, r8
    572a:	2400      	movs	r4, #0
    572c:	2700      	movs	r7, #0
    572e:	e76a      	b.n	5606 <__aeabi_dadd+0x142>
    5730:	4c45      	ldr	r4, [pc, #276]	; (5848 <__aeabi_dadd+0x384>)
    5732:	1af6      	subs	r6, r6, r3
    5734:	402c      	ands	r4, r5
    5736:	e749      	b.n	55cc <__aeabi_dadd+0x108>
    5738:	003d      	movs	r5, r7
    573a:	3828      	subs	r0, #40	; 0x28
    573c:	4085      	lsls	r5, r0
    573e:	2700      	movs	r7, #0
    5740:	e72e      	b.n	55a0 <__aeabi_dadd+0xdc>
    5742:	0038      	movs	r0, r7
    5744:	f001 fd42 	bl	71cc <__clzsi2>
    5748:	3020      	adds	r0, #32
    574a:	e71d      	b.n	5588 <__aeabi_dadd+0xc4>
    574c:	430a      	orrs	r2, r1
    574e:	1e51      	subs	r1, r2, #1
    5750:	418a      	sbcs	r2, r1
    5752:	2100      	movs	r1, #0
    5754:	e707      	b.n	5566 <__aeabi_dadd+0xa2>
    5756:	2b00      	cmp	r3, #0
    5758:	d000      	beq.n	575c <__aeabi_dadd+0x298>
    575a:	e0f3      	b.n	5944 <__aeabi_dadd+0x480>
    575c:	1c70      	adds	r0, r6, #1
    575e:	0543      	lsls	r3, r0, #21
    5760:	0d5b      	lsrs	r3, r3, #21
    5762:	2b01      	cmp	r3, #1
    5764:	dc00      	bgt.n	5768 <__aeabi_dadd+0x2a4>
    5766:	e0ad      	b.n	58c4 <__aeabi_dadd+0x400>
    5768:	4b36      	ldr	r3, [pc, #216]	; (5844 <__aeabi_dadd+0x380>)
    576a:	4298      	cmp	r0, r3
    576c:	d100      	bne.n	5770 <__aeabi_dadd+0x2ac>
    576e:	e0d1      	b.n	5914 <__aeabi_dadd+0x450>
    5770:	18ba      	adds	r2, r7, r2
    5772:	42ba      	cmp	r2, r7
    5774:	41bf      	sbcs	r7, r7
    5776:	1864      	adds	r4, r4, r1
    5778:	427f      	negs	r7, r7
    577a:	19e4      	adds	r4, r4, r7
    577c:	07e7      	lsls	r7, r4, #31
    577e:	0852      	lsrs	r2, r2, #1
    5780:	4317      	orrs	r7, r2
    5782:	0864      	lsrs	r4, r4, #1
    5784:	0006      	movs	r6, r0
    5786:	e721      	b.n	55cc <__aeabi_dadd+0x108>
    5788:	482e      	ldr	r0, [pc, #184]	; (5844 <__aeabi_dadd+0x380>)
    578a:	4285      	cmp	r5, r0
    578c:	d100      	bne.n	5790 <__aeabi_dadd+0x2cc>
    578e:	e093      	b.n	58b8 <__aeabi_dadd+0x3f4>
    5790:	001d      	movs	r5, r3
    5792:	e6d0      	b.n	5536 <__aeabi_dadd+0x72>
    5794:	0029      	movs	r1, r5
    5796:	3e1f      	subs	r6, #31
    5798:	40f1      	lsrs	r1, r6
    579a:	2b20      	cmp	r3, #32
    579c:	d100      	bne.n	57a0 <__aeabi_dadd+0x2dc>
    579e:	e08d      	b.n	58bc <__aeabi_dadd+0x3f8>
    57a0:	2240      	movs	r2, #64	; 0x40
    57a2:	1ad3      	subs	r3, r2, r3
    57a4:	409d      	lsls	r5, r3
    57a6:	432f      	orrs	r7, r5
    57a8:	1e7d      	subs	r5, r7, #1
    57aa:	41af      	sbcs	r7, r5
    57ac:	2400      	movs	r4, #0
    57ae:	430f      	orrs	r7, r1
    57b0:	2600      	movs	r6, #0
    57b2:	e744      	b.n	563e <__aeabi_dadd+0x17a>
    57b4:	002b      	movs	r3, r5
    57b6:	0008      	movs	r0, r1
    57b8:	3b20      	subs	r3, #32
    57ba:	40d8      	lsrs	r0, r3
    57bc:	0003      	movs	r3, r0
    57be:	2d20      	cmp	r5, #32
    57c0:	d100      	bne.n	57c4 <__aeabi_dadd+0x300>
    57c2:	e07d      	b.n	58c0 <__aeabi_dadd+0x3fc>
    57c4:	2040      	movs	r0, #64	; 0x40
    57c6:	1b45      	subs	r5, r0, r5
    57c8:	40a9      	lsls	r1, r5
    57ca:	430a      	orrs	r2, r1
    57cc:	1e51      	subs	r1, r2, #1
    57ce:	418a      	sbcs	r2, r1
    57d0:	2100      	movs	r1, #0
    57d2:	431a      	orrs	r2, r3
    57d4:	e6c7      	b.n	5566 <__aeabi_dadd+0xa2>
    57d6:	2e00      	cmp	r6, #0
    57d8:	d050      	beq.n	587c <__aeabi_dadd+0x3b8>
    57da:	4e1a      	ldr	r6, [pc, #104]	; (5844 <__aeabi_dadd+0x380>)
    57dc:	42b0      	cmp	r0, r6
    57de:	d057      	beq.n	5890 <__aeabi_dadd+0x3cc>
    57e0:	2680      	movs	r6, #128	; 0x80
    57e2:	426b      	negs	r3, r5
    57e4:	4699      	mov	r9, r3
    57e6:	0436      	lsls	r6, r6, #16
    57e8:	4334      	orrs	r4, r6
    57ea:	464b      	mov	r3, r9
    57ec:	2b38      	cmp	r3, #56	; 0x38
    57ee:	dd00      	ble.n	57f2 <__aeabi_dadd+0x32e>
    57f0:	e0d6      	b.n	59a0 <__aeabi_dadd+0x4dc>
    57f2:	2b1f      	cmp	r3, #31
    57f4:	dd00      	ble.n	57f8 <__aeabi_dadd+0x334>
    57f6:	e135      	b.n	5a64 <__aeabi_dadd+0x5a0>
    57f8:	2620      	movs	r6, #32
    57fa:	1af5      	subs	r5, r6, r3
    57fc:	0026      	movs	r6, r4
    57fe:	40ae      	lsls	r6, r5
    5800:	46b2      	mov	sl, r6
    5802:	003e      	movs	r6, r7
    5804:	40de      	lsrs	r6, r3
    5806:	46ac      	mov	ip, r5
    5808:	0035      	movs	r5, r6
    580a:	4656      	mov	r6, sl
    580c:	432e      	orrs	r6, r5
    580e:	4665      	mov	r5, ip
    5810:	40af      	lsls	r7, r5
    5812:	1e7d      	subs	r5, r7, #1
    5814:	41af      	sbcs	r7, r5
    5816:	40dc      	lsrs	r4, r3
    5818:	4337      	orrs	r7, r6
    581a:	1bd7      	subs	r7, r2, r7
    581c:	42ba      	cmp	r2, r7
    581e:	4192      	sbcs	r2, r2
    5820:	1b0c      	subs	r4, r1, r4
    5822:	4252      	negs	r2, r2
    5824:	1aa4      	subs	r4, r4, r2
    5826:	0006      	movs	r6, r0
    5828:	46d8      	mov	r8, fp
    582a:	e6a3      	b.n	5574 <__aeabi_dadd+0xb0>
    582c:	4664      	mov	r4, ip
    582e:	4667      	mov	r7, ip
    5830:	432c      	orrs	r4, r5
    5832:	d000      	beq.n	5836 <__aeabi_dadd+0x372>
    5834:	e6a2      	b.n	557c <__aeabi_dadd+0xb8>
    5836:	2500      	movs	r5, #0
    5838:	2600      	movs	r6, #0
    583a:	2700      	movs	r7, #0
    583c:	e706      	b.n	564c <__aeabi_dadd+0x188>
    583e:	001e      	movs	r6, r3
    5840:	e6c4      	b.n	55cc <__aeabi_dadd+0x108>
    5842:	46c0      	nop			; (mov r8, r8)
    5844:	000007ff 	.word	0x000007ff
    5848:	ff7fffff 	.word	0xff7fffff
    584c:	800fffff 	.word	0x800fffff
    5850:	2b1f      	cmp	r3, #31
    5852:	dc63      	bgt.n	591c <__aeabi_dadd+0x458>
    5854:	2020      	movs	r0, #32
    5856:	1ac3      	subs	r3, r0, r3
    5858:	0008      	movs	r0, r1
    585a:	4098      	lsls	r0, r3
    585c:	469c      	mov	ip, r3
    585e:	4683      	mov	fp, r0
    5860:	4653      	mov	r3, sl
    5862:	0010      	movs	r0, r2
    5864:	40d8      	lsrs	r0, r3
    5866:	0003      	movs	r3, r0
    5868:	4658      	mov	r0, fp
    586a:	4318      	orrs	r0, r3
    586c:	4663      	mov	r3, ip
    586e:	409a      	lsls	r2, r3
    5870:	1e53      	subs	r3, r2, #1
    5872:	419a      	sbcs	r2, r3
    5874:	4653      	mov	r3, sl
    5876:	4302      	orrs	r2, r0
    5878:	40d9      	lsrs	r1, r3
    587a:	e703      	b.n	5684 <__aeabi_dadd+0x1c0>
    587c:	0026      	movs	r6, r4
    587e:	433e      	orrs	r6, r7
    5880:	d006      	beq.n	5890 <__aeabi_dadd+0x3cc>
    5882:	43eb      	mvns	r3, r5
    5884:	4699      	mov	r9, r3
    5886:	2b00      	cmp	r3, #0
    5888:	d0c7      	beq.n	581a <__aeabi_dadd+0x356>
    588a:	4e94      	ldr	r6, [pc, #592]	; (5adc <__aeabi_dadd+0x618>)
    588c:	42b0      	cmp	r0, r6
    588e:	d1ac      	bne.n	57ea <__aeabi_dadd+0x326>
    5890:	000c      	movs	r4, r1
    5892:	0017      	movs	r7, r2
    5894:	0006      	movs	r6, r0
    5896:	46d8      	mov	r8, fp
    5898:	e698      	b.n	55cc <__aeabi_dadd+0x108>
    589a:	4b90      	ldr	r3, [pc, #576]	; (5adc <__aeabi_dadd+0x618>)
    589c:	459a      	cmp	sl, r3
    589e:	d00b      	beq.n	58b8 <__aeabi_dadd+0x3f4>
    58a0:	4682      	mov	sl, r0
    58a2:	e6e7      	b.n	5674 <__aeabi_dadd+0x1b0>
    58a4:	2800      	cmp	r0, #0
    58a6:	d000      	beq.n	58aa <__aeabi_dadd+0x3e6>
    58a8:	e09e      	b.n	59e8 <__aeabi_dadd+0x524>
    58aa:	0018      	movs	r0, r3
    58ac:	4310      	orrs	r0, r2
    58ae:	d100      	bne.n	58b2 <__aeabi_dadd+0x3ee>
    58b0:	e0e9      	b.n	5a86 <__aeabi_dadd+0x5c2>
    58b2:	001c      	movs	r4, r3
    58b4:	0017      	movs	r7, r2
    58b6:	46d8      	mov	r8, fp
    58b8:	4e88      	ldr	r6, [pc, #544]	; (5adc <__aeabi_dadd+0x618>)
    58ba:	e687      	b.n	55cc <__aeabi_dadd+0x108>
    58bc:	2500      	movs	r5, #0
    58be:	e772      	b.n	57a6 <__aeabi_dadd+0x2e2>
    58c0:	2100      	movs	r1, #0
    58c2:	e782      	b.n	57ca <__aeabi_dadd+0x306>
    58c4:	0023      	movs	r3, r4
    58c6:	433b      	orrs	r3, r7
    58c8:	2e00      	cmp	r6, #0
    58ca:	d000      	beq.n	58ce <__aeabi_dadd+0x40a>
    58cc:	e0ab      	b.n	5a26 <__aeabi_dadd+0x562>
    58ce:	2b00      	cmp	r3, #0
    58d0:	d100      	bne.n	58d4 <__aeabi_dadd+0x410>
    58d2:	e0e7      	b.n	5aa4 <__aeabi_dadd+0x5e0>
    58d4:	000b      	movs	r3, r1
    58d6:	4313      	orrs	r3, r2
    58d8:	d100      	bne.n	58dc <__aeabi_dadd+0x418>
    58da:	e677      	b.n	55cc <__aeabi_dadd+0x108>
    58dc:	18ba      	adds	r2, r7, r2
    58de:	42ba      	cmp	r2, r7
    58e0:	41bf      	sbcs	r7, r7
    58e2:	1864      	adds	r4, r4, r1
    58e4:	427f      	negs	r7, r7
    58e6:	19e4      	adds	r4, r4, r7
    58e8:	0223      	lsls	r3, r4, #8
    58ea:	d400      	bmi.n	58ee <__aeabi_dadd+0x42a>
    58ec:	e0f2      	b.n	5ad4 <__aeabi_dadd+0x610>
    58ee:	4b7c      	ldr	r3, [pc, #496]	; (5ae0 <__aeabi_dadd+0x61c>)
    58f0:	0017      	movs	r7, r2
    58f2:	401c      	ands	r4, r3
    58f4:	0006      	movs	r6, r0
    58f6:	e669      	b.n	55cc <__aeabi_dadd+0x108>
    58f8:	0020      	movs	r0, r4
    58fa:	4338      	orrs	r0, r7
    58fc:	2e00      	cmp	r6, #0
    58fe:	d1d1      	bne.n	58a4 <__aeabi_dadd+0x3e0>
    5900:	2800      	cmp	r0, #0
    5902:	d15b      	bne.n	59bc <__aeabi_dadd+0x4f8>
    5904:	001c      	movs	r4, r3
    5906:	4314      	orrs	r4, r2
    5908:	d100      	bne.n	590c <__aeabi_dadd+0x448>
    590a:	e0a8      	b.n	5a5e <__aeabi_dadd+0x59a>
    590c:	001c      	movs	r4, r3
    590e:	0017      	movs	r7, r2
    5910:	46d8      	mov	r8, fp
    5912:	e65b      	b.n	55cc <__aeabi_dadd+0x108>
    5914:	0006      	movs	r6, r0
    5916:	2400      	movs	r4, #0
    5918:	2700      	movs	r7, #0
    591a:	e697      	b.n	564c <__aeabi_dadd+0x188>
    591c:	4650      	mov	r0, sl
    591e:	000b      	movs	r3, r1
    5920:	3820      	subs	r0, #32
    5922:	40c3      	lsrs	r3, r0
    5924:	4699      	mov	r9, r3
    5926:	4653      	mov	r3, sl
    5928:	2b20      	cmp	r3, #32
    592a:	d100      	bne.n	592e <__aeabi_dadd+0x46a>
    592c:	e095      	b.n	5a5a <__aeabi_dadd+0x596>
    592e:	2340      	movs	r3, #64	; 0x40
    5930:	4650      	mov	r0, sl
    5932:	1a1b      	subs	r3, r3, r0
    5934:	4099      	lsls	r1, r3
    5936:	430a      	orrs	r2, r1
    5938:	1e51      	subs	r1, r2, #1
    593a:	418a      	sbcs	r2, r1
    593c:	464b      	mov	r3, r9
    593e:	2100      	movs	r1, #0
    5940:	431a      	orrs	r2, r3
    5942:	e69f      	b.n	5684 <__aeabi_dadd+0x1c0>
    5944:	2e00      	cmp	r6, #0
    5946:	d130      	bne.n	59aa <__aeabi_dadd+0x4e6>
    5948:	0026      	movs	r6, r4
    594a:	433e      	orrs	r6, r7
    594c:	d067      	beq.n	5a1e <__aeabi_dadd+0x55a>
    594e:	43db      	mvns	r3, r3
    5950:	469a      	mov	sl, r3
    5952:	2b00      	cmp	r3, #0
    5954:	d01c      	beq.n	5990 <__aeabi_dadd+0x4cc>
    5956:	4e61      	ldr	r6, [pc, #388]	; (5adc <__aeabi_dadd+0x618>)
    5958:	42b0      	cmp	r0, r6
    595a:	d060      	beq.n	5a1e <__aeabi_dadd+0x55a>
    595c:	4653      	mov	r3, sl
    595e:	2b38      	cmp	r3, #56	; 0x38
    5960:	dd00      	ble.n	5964 <__aeabi_dadd+0x4a0>
    5962:	e096      	b.n	5a92 <__aeabi_dadd+0x5ce>
    5964:	2b1f      	cmp	r3, #31
    5966:	dd00      	ble.n	596a <__aeabi_dadd+0x4a6>
    5968:	e09f      	b.n	5aaa <__aeabi_dadd+0x5e6>
    596a:	2620      	movs	r6, #32
    596c:	1af3      	subs	r3, r6, r3
    596e:	0026      	movs	r6, r4
    5970:	409e      	lsls	r6, r3
    5972:	469c      	mov	ip, r3
    5974:	46b3      	mov	fp, r6
    5976:	4653      	mov	r3, sl
    5978:	003e      	movs	r6, r7
    597a:	40de      	lsrs	r6, r3
    597c:	0033      	movs	r3, r6
    597e:	465e      	mov	r6, fp
    5980:	431e      	orrs	r6, r3
    5982:	4663      	mov	r3, ip
    5984:	409f      	lsls	r7, r3
    5986:	1e7b      	subs	r3, r7, #1
    5988:	419f      	sbcs	r7, r3
    598a:	4653      	mov	r3, sl
    598c:	40dc      	lsrs	r4, r3
    598e:	4337      	orrs	r7, r6
    5990:	18bf      	adds	r7, r7, r2
    5992:	4297      	cmp	r7, r2
    5994:	4192      	sbcs	r2, r2
    5996:	1864      	adds	r4, r4, r1
    5998:	4252      	negs	r2, r2
    599a:	18a4      	adds	r4, r4, r2
    599c:	0006      	movs	r6, r0
    599e:	e678      	b.n	5692 <__aeabi_dadd+0x1ce>
    59a0:	4327      	orrs	r7, r4
    59a2:	1e7c      	subs	r4, r7, #1
    59a4:	41a7      	sbcs	r7, r4
    59a6:	2400      	movs	r4, #0
    59a8:	e737      	b.n	581a <__aeabi_dadd+0x356>
    59aa:	4e4c      	ldr	r6, [pc, #304]	; (5adc <__aeabi_dadd+0x618>)
    59ac:	42b0      	cmp	r0, r6
    59ae:	d036      	beq.n	5a1e <__aeabi_dadd+0x55a>
    59b0:	2680      	movs	r6, #128	; 0x80
    59b2:	425b      	negs	r3, r3
    59b4:	0436      	lsls	r6, r6, #16
    59b6:	469a      	mov	sl, r3
    59b8:	4334      	orrs	r4, r6
    59ba:	e7cf      	b.n	595c <__aeabi_dadd+0x498>
    59bc:	0018      	movs	r0, r3
    59be:	4310      	orrs	r0, r2
    59c0:	d100      	bne.n	59c4 <__aeabi_dadd+0x500>
    59c2:	e603      	b.n	55cc <__aeabi_dadd+0x108>
    59c4:	1ab8      	subs	r0, r7, r2
    59c6:	4684      	mov	ip, r0
    59c8:	4567      	cmp	r7, ip
    59ca:	41ad      	sbcs	r5, r5
    59cc:	1ae0      	subs	r0, r4, r3
    59ce:	426d      	negs	r5, r5
    59d0:	1b40      	subs	r0, r0, r5
    59d2:	0205      	lsls	r5, r0, #8
    59d4:	d400      	bmi.n	59d8 <__aeabi_dadd+0x514>
    59d6:	e62c      	b.n	5632 <__aeabi_dadd+0x16e>
    59d8:	1bd7      	subs	r7, r2, r7
    59da:	42ba      	cmp	r2, r7
    59dc:	4192      	sbcs	r2, r2
    59de:	1b1c      	subs	r4, r3, r4
    59e0:	4252      	negs	r2, r2
    59e2:	1aa4      	subs	r4, r4, r2
    59e4:	46d8      	mov	r8, fp
    59e6:	e5f1      	b.n	55cc <__aeabi_dadd+0x108>
    59e8:	0018      	movs	r0, r3
    59ea:	4310      	orrs	r0, r2
    59ec:	d100      	bne.n	59f0 <__aeabi_dadd+0x52c>
    59ee:	e763      	b.n	58b8 <__aeabi_dadd+0x3f4>
    59f0:	08f8      	lsrs	r0, r7, #3
    59f2:	0767      	lsls	r7, r4, #29
    59f4:	4307      	orrs	r7, r0
    59f6:	2080      	movs	r0, #128	; 0x80
    59f8:	08e4      	lsrs	r4, r4, #3
    59fa:	0300      	lsls	r0, r0, #12
    59fc:	4204      	tst	r4, r0
    59fe:	d008      	beq.n	5a12 <__aeabi_dadd+0x54e>
    5a00:	08dd      	lsrs	r5, r3, #3
    5a02:	4205      	tst	r5, r0
    5a04:	d105      	bne.n	5a12 <__aeabi_dadd+0x54e>
    5a06:	08d2      	lsrs	r2, r2, #3
    5a08:	0759      	lsls	r1, r3, #29
    5a0a:	4311      	orrs	r1, r2
    5a0c:	000f      	movs	r7, r1
    5a0e:	002c      	movs	r4, r5
    5a10:	46d8      	mov	r8, fp
    5a12:	0f7b      	lsrs	r3, r7, #29
    5a14:	00e4      	lsls	r4, r4, #3
    5a16:	431c      	orrs	r4, r3
    5a18:	00ff      	lsls	r7, r7, #3
    5a1a:	4e30      	ldr	r6, [pc, #192]	; (5adc <__aeabi_dadd+0x618>)
    5a1c:	e5d6      	b.n	55cc <__aeabi_dadd+0x108>
    5a1e:	000c      	movs	r4, r1
    5a20:	0017      	movs	r7, r2
    5a22:	0006      	movs	r6, r0
    5a24:	e5d2      	b.n	55cc <__aeabi_dadd+0x108>
    5a26:	2b00      	cmp	r3, #0
    5a28:	d038      	beq.n	5a9c <__aeabi_dadd+0x5d8>
    5a2a:	000b      	movs	r3, r1
    5a2c:	4313      	orrs	r3, r2
    5a2e:	d100      	bne.n	5a32 <__aeabi_dadd+0x56e>
    5a30:	e742      	b.n	58b8 <__aeabi_dadd+0x3f4>
    5a32:	08f8      	lsrs	r0, r7, #3
    5a34:	0767      	lsls	r7, r4, #29
    5a36:	4307      	orrs	r7, r0
    5a38:	2080      	movs	r0, #128	; 0x80
    5a3a:	08e4      	lsrs	r4, r4, #3
    5a3c:	0300      	lsls	r0, r0, #12
    5a3e:	4204      	tst	r4, r0
    5a40:	d0e7      	beq.n	5a12 <__aeabi_dadd+0x54e>
    5a42:	08cb      	lsrs	r3, r1, #3
    5a44:	4203      	tst	r3, r0
    5a46:	d1e4      	bne.n	5a12 <__aeabi_dadd+0x54e>
    5a48:	08d2      	lsrs	r2, r2, #3
    5a4a:	0749      	lsls	r1, r1, #29
    5a4c:	4311      	orrs	r1, r2
    5a4e:	000f      	movs	r7, r1
    5a50:	001c      	movs	r4, r3
    5a52:	e7de      	b.n	5a12 <__aeabi_dadd+0x54e>
    5a54:	2700      	movs	r7, #0
    5a56:	2400      	movs	r4, #0
    5a58:	e5d5      	b.n	5606 <__aeabi_dadd+0x142>
    5a5a:	2100      	movs	r1, #0
    5a5c:	e76b      	b.n	5936 <__aeabi_dadd+0x472>
    5a5e:	2500      	movs	r5, #0
    5a60:	2700      	movs	r7, #0
    5a62:	e5f3      	b.n	564c <__aeabi_dadd+0x188>
    5a64:	464e      	mov	r6, r9
    5a66:	0025      	movs	r5, r4
    5a68:	3e20      	subs	r6, #32
    5a6a:	40f5      	lsrs	r5, r6
    5a6c:	464b      	mov	r3, r9
    5a6e:	002e      	movs	r6, r5
    5a70:	2b20      	cmp	r3, #32
    5a72:	d02d      	beq.n	5ad0 <__aeabi_dadd+0x60c>
    5a74:	2540      	movs	r5, #64	; 0x40
    5a76:	1aed      	subs	r5, r5, r3
    5a78:	40ac      	lsls	r4, r5
    5a7a:	4327      	orrs	r7, r4
    5a7c:	1e7c      	subs	r4, r7, #1
    5a7e:	41a7      	sbcs	r7, r4
    5a80:	2400      	movs	r4, #0
    5a82:	4337      	orrs	r7, r6
    5a84:	e6c9      	b.n	581a <__aeabi_dadd+0x356>
    5a86:	2480      	movs	r4, #128	; 0x80
    5a88:	2500      	movs	r5, #0
    5a8a:	0324      	lsls	r4, r4, #12
    5a8c:	4e13      	ldr	r6, [pc, #76]	; (5adc <__aeabi_dadd+0x618>)
    5a8e:	2700      	movs	r7, #0
    5a90:	e5dc      	b.n	564c <__aeabi_dadd+0x188>
    5a92:	4327      	orrs	r7, r4
    5a94:	1e7c      	subs	r4, r7, #1
    5a96:	41a7      	sbcs	r7, r4
    5a98:	2400      	movs	r4, #0
    5a9a:	e779      	b.n	5990 <__aeabi_dadd+0x4cc>
    5a9c:	000c      	movs	r4, r1
    5a9e:	0017      	movs	r7, r2
    5aa0:	4e0e      	ldr	r6, [pc, #56]	; (5adc <__aeabi_dadd+0x618>)
    5aa2:	e593      	b.n	55cc <__aeabi_dadd+0x108>
    5aa4:	000c      	movs	r4, r1
    5aa6:	0017      	movs	r7, r2
    5aa8:	e590      	b.n	55cc <__aeabi_dadd+0x108>
    5aaa:	4656      	mov	r6, sl
    5aac:	0023      	movs	r3, r4
    5aae:	3e20      	subs	r6, #32
    5ab0:	40f3      	lsrs	r3, r6
    5ab2:	4699      	mov	r9, r3
    5ab4:	4653      	mov	r3, sl
    5ab6:	2b20      	cmp	r3, #32
    5ab8:	d00e      	beq.n	5ad8 <__aeabi_dadd+0x614>
    5aba:	2340      	movs	r3, #64	; 0x40
    5abc:	4656      	mov	r6, sl
    5abe:	1b9b      	subs	r3, r3, r6
    5ac0:	409c      	lsls	r4, r3
    5ac2:	4327      	orrs	r7, r4
    5ac4:	1e7c      	subs	r4, r7, #1
    5ac6:	41a7      	sbcs	r7, r4
    5ac8:	464b      	mov	r3, r9
    5aca:	2400      	movs	r4, #0
    5acc:	431f      	orrs	r7, r3
    5ace:	e75f      	b.n	5990 <__aeabi_dadd+0x4cc>
    5ad0:	2400      	movs	r4, #0
    5ad2:	e7d2      	b.n	5a7a <__aeabi_dadd+0x5b6>
    5ad4:	0017      	movs	r7, r2
    5ad6:	e5b2      	b.n	563e <__aeabi_dadd+0x17a>
    5ad8:	2400      	movs	r4, #0
    5ada:	e7f2      	b.n	5ac2 <__aeabi_dadd+0x5fe>
    5adc:	000007ff 	.word	0x000007ff
    5ae0:	ff7fffff 	.word	0xff7fffff

00005ae4 <__aeabi_ddiv>:
    5ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ae6:	4657      	mov	r7, sl
    5ae8:	4645      	mov	r5, r8
    5aea:	46de      	mov	lr, fp
    5aec:	464e      	mov	r6, r9
    5aee:	b5e0      	push	{r5, r6, r7, lr}
    5af0:	004c      	lsls	r4, r1, #1
    5af2:	030e      	lsls	r6, r1, #12
    5af4:	b087      	sub	sp, #28
    5af6:	4683      	mov	fp, r0
    5af8:	4692      	mov	sl, r2
    5afa:	001d      	movs	r5, r3
    5afc:	4680      	mov	r8, r0
    5afe:	0b36      	lsrs	r6, r6, #12
    5b00:	0d64      	lsrs	r4, r4, #21
    5b02:	0fcf      	lsrs	r7, r1, #31
    5b04:	2c00      	cmp	r4, #0
    5b06:	d04f      	beq.n	5ba8 <__aeabi_ddiv+0xc4>
    5b08:	4b6f      	ldr	r3, [pc, #444]	; (5cc8 <__aeabi_ddiv+0x1e4>)
    5b0a:	429c      	cmp	r4, r3
    5b0c:	d035      	beq.n	5b7a <__aeabi_ddiv+0x96>
    5b0e:	2380      	movs	r3, #128	; 0x80
    5b10:	0f42      	lsrs	r2, r0, #29
    5b12:	041b      	lsls	r3, r3, #16
    5b14:	00f6      	lsls	r6, r6, #3
    5b16:	4313      	orrs	r3, r2
    5b18:	4333      	orrs	r3, r6
    5b1a:	4699      	mov	r9, r3
    5b1c:	00c3      	lsls	r3, r0, #3
    5b1e:	4698      	mov	r8, r3
    5b20:	4b6a      	ldr	r3, [pc, #424]	; (5ccc <__aeabi_ddiv+0x1e8>)
    5b22:	2600      	movs	r6, #0
    5b24:	469c      	mov	ip, r3
    5b26:	2300      	movs	r3, #0
    5b28:	4464      	add	r4, ip
    5b2a:	9303      	str	r3, [sp, #12]
    5b2c:	032b      	lsls	r3, r5, #12
    5b2e:	0b1b      	lsrs	r3, r3, #12
    5b30:	469b      	mov	fp, r3
    5b32:	006b      	lsls	r3, r5, #1
    5b34:	0fed      	lsrs	r5, r5, #31
    5b36:	4650      	mov	r0, sl
    5b38:	0d5b      	lsrs	r3, r3, #21
    5b3a:	9501      	str	r5, [sp, #4]
    5b3c:	d05e      	beq.n	5bfc <__aeabi_ddiv+0x118>
    5b3e:	4a62      	ldr	r2, [pc, #392]	; (5cc8 <__aeabi_ddiv+0x1e4>)
    5b40:	4293      	cmp	r3, r2
    5b42:	d053      	beq.n	5bec <__aeabi_ddiv+0x108>
    5b44:	465a      	mov	r2, fp
    5b46:	00d1      	lsls	r1, r2, #3
    5b48:	2280      	movs	r2, #128	; 0x80
    5b4a:	0f40      	lsrs	r0, r0, #29
    5b4c:	0412      	lsls	r2, r2, #16
    5b4e:	4302      	orrs	r2, r0
    5b50:	430a      	orrs	r2, r1
    5b52:	4693      	mov	fp, r2
    5b54:	4652      	mov	r2, sl
    5b56:	00d1      	lsls	r1, r2, #3
    5b58:	4a5c      	ldr	r2, [pc, #368]	; (5ccc <__aeabi_ddiv+0x1e8>)
    5b5a:	4694      	mov	ip, r2
    5b5c:	2200      	movs	r2, #0
    5b5e:	4463      	add	r3, ip
    5b60:	0038      	movs	r0, r7
    5b62:	4068      	eors	r0, r5
    5b64:	4684      	mov	ip, r0
    5b66:	9002      	str	r0, [sp, #8]
    5b68:	1ae4      	subs	r4, r4, r3
    5b6a:	4316      	orrs	r6, r2
    5b6c:	2e0f      	cmp	r6, #15
    5b6e:	d900      	bls.n	5b72 <__aeabi_ddiv+0x8e>
    5b70:	e0b4      	b.n	5cdc <__aeabi_ddiv+0x1f8>
    5b72:	4b57      	ldr	r3, [pc, #348]	; (5cd0 <__aeabi_ddiv+0x1ec>)
    5b74:	00b6      	lsls	r6, r6, #2
    5b76:	599b      	ldr	r3, [r3, r6]
    5b78:	469f      	mov	pc, r3
    5b7a:	0003      	movs	r3, r0
    5b7c:	4333      	orrs	r3, r6
    5b7e:	4699      	mov	r9, r3
    5b80:	d16c      	bne.n	5c5c <__aeabi_ddiv+0x178>
    5b82:	2300      	movs	r3, #0
    5b84:	4698      	mov	r8, r3
    5b86:	3302      	adds	r3, #2
    5b88:	2608      	movs	r6, #8
    5b8a:	9303      	str	r3, [sp, #12]
    5b8c:	e7ce      	b.n	5b2c <__aeabi_ddiv+0x48>
    5b8e:	46cb      	mov	fp, r9
    5b90:	4641      	mov	r1, r8
    5b92:	9a03      	ldr	r2, [sp, #12]
    5b94:	9701      	str	r7, [sp, #4]
    5b96:	2a02      	cmp	r2, #2
    5b98:	d165      	bne.n	5c66 <__aeabi_ddiv+0x182>
    5b9a:	9b01      	ldr	r3, [sp, #4]
    5b9c:	4c4a      	ldr	r4, [pc, #296]	; (5cc8 <__aeabi_ddiv+0x1e4>)
    5b9e:	469c      	mov	ip, r3
    5ba0:	2300      	movs	r3, #0
    5ba2:	2200      	movs	r2, #0
    5ba4:	4698      	mov	r8, r3
    5ba6:	e06b      	b.n	5c80 <__aeabi_ddiv+0x19c>
    5ba8:	0003      	movs	r3, r0
    5baa:	4333      	orrs	r3, r6
    5bac:	4699      	mov	r9, r3
    5bae:	d04e      	beq.n	5c4e <__aeabi_ddiv+0x16a>
    5bb0:	2e00      	cmp	r6, #0
    5bb2:	d100      	bne.n	5bb6 <__aeabi_ddiv+0xd2>
    5bb4:	e1bc      	b.n	5f30 <__aeabi_ddiv+0x44c>
    5bb6:	0030      	movs	r0, r6
    5bb8:	f001 fb08 	bl	71cc <__clzsi2>
    5bbc:	0003      	movs	r3, r0
    5bbe:	3b0b      	subs	r3, #11
    5bc0:	2b1c      	cmp	r3, #28
    5bc2:	dd00      	ble.n	5bc6 <__aeabi_ddiv+0xe2>
    5bc4:	e1ac      	b.n	5f20 <__aeabi_ddiv+0x43c>
    5bc6:	221d      	movs	r2, #29
    5bc8:	1ad3      	subs	r3, r2, r3
    5bca:	465a      	mov	r2, fp
    5bcc:	0001      	movs	r1, r0
    5bce:	40da      	lsrs	r2, r3
    5bd0:	3908      	subs	r1, #8
    5bd2:	408e      	lsls	r6, r1
    5bd4:	0013      	movs	r3, r2
    5bd6:	4333      	orrs	r3, r6
    5bd8:	4699      	mov	r9, r3
    5bda:	465b      	mov	r3, fp
    5bdc:	408b      	lsls	r3, r1
    5bde:	4698      	mov	r8, r3
    5be0:	2300      	movs	r3, #0
    5be2:	4c3c      	ldr	r4, [pc, #240]	; (5cd4 <__aeabi_ddiv+0x1f0>)
    5be4:	2600      	movs	r6, #0
    5be6:	1a24      	subs	r4, r4, r0
    5be8:	9303      	str	r3, [sp, #12]
    5bea:	e79f      	b.n	5b2c <__aeabi_ddiv+0x48>
    5bec:	4651      	mov	r1, sl
    5bee:	465a      	mov	r2, fp
    5bf0:	4311      	orrs	r1, r2
    5bf2:	d129      	bne.n	5c48 <__aeabi_ddiv+0x164>
    5bf4:	2200      	movs	r2, #0
    5bf6:	4693      	mov	fp, r2
    5bf8:	3202      	adds	r2, #2
    5bfa:	e7b1      	b.n	5b60 <__aeabi_ddiv+0x7c>
    5bfc:	4659      	mov	r1, fp
    5bfe:	4301      	orrs	r1, r0
    5c00:	d01e      	beq.n	5c40 <__aeabi_ddiv+0x15c>
    5c02:	465b      	mov	r3, fp
    5c04:	2b00      	cmp	r3, #0
    5c06:	d100      	bne.n	5c0a <__aeabi_ddiv+0x126>
    5c08:	e19e      	b.n	5f48 <__aeabi_ddiv+0x464>
    5c0a:	4658      	mov	r0, fp
    5c0c:	f001 fade 	bl	71cc <__clzsi2>
    5c10:	0003      	movs	r3, r0
    5c12:	3b0b      	subs	r3, #11
    5c14:	2b1c      	cmp	r3, #28
    5c16:	dd00      	ble.n	5c1a <__aeabi_ddiv+0x136>
    5c18:	e18f      	b.n	5f3a <__aeabi_ddiv+0x456>
    5c1a:	0002      	movs	r2, r0
    5c1c:	4659      	mov	r1, fp
    5c1e:	3a08      	subs	r2, #8
    5c20:	4091      	lsls	r1, r2
    5c22:	468b      	mov	fp, r1
    5c24:	211d      	movs	r1, #29
    5c26:	1acb      	subs	r3, r1, r3
    5c28:	4651      	mov	r1, sl
    5c2a:	40d9      	lsrs	r1, r3
    5c2c:	000b      	movs	r3, r1
    5c2e:	4659      	mov	r1, fp
    5c30:	430b      	orrs	r3, r1
    5c32:	4651      	mov	r1, sl
    5c34:	469b      	mov	fp, r3
    5c36:	4091      	lsls	r1, r2
    5c38:	4b26      	ldr	r3, [pc, #152]	; (5cd4 <__aeabi_ddiv+0x1f0>)
    5c3a:	2200      	movs	r2, #0
    5c3c:	1a1b      	subs	r3, r3, r0
    5c3e:	e78f      	b.n	5b60 <__aeabi_ddiv+0x7c>
    5c40:	2300      	movs	r3, #0
    5c42:	2201      	movs	r2, #1
    5c44:	469b      	mov	fp, r3
    5c46:	e78b      	b.n	5b60 <__aeabi_ddiv+0x7c>
    5c48:	4651      	mov	r1, sl
    5c4a:	2203      	movs	r2, #3
    5c4c:	e788      	b.n	5b60 <__aeabi_ddiv+0x7c>
    5c4e:	2300      	movs	r3, #0
    5c50:	4698      	mov	r8, r3
    5c52:	3301      	adds	r3, #1
    5c54:	2604      	movs	r6, #4
    5c56:	2400      	movs	r4, #0
    5c58:	9303      	str	r3, [sp, #12]
    5c5a:	e767      	b.n	5b2c <__aeabi_ddiv+0x48>
    5c5c:	2303      	movs	r3, #3
    5c5e:	46b1      	mov	r9, r6
    5c60:	9303      	str	r3, [sp, #12]
    5c62:	260c      	movs	r6, #12
    5c64:	e762      	b.n	5b2c <__aeabi_ddiv+0x48>
    5c66:	2a03      	cmp	r2, #3
    5c68:	d100      	bne.n	5c6c <__aeabi_ddiv+0x188>
    5c6a:	e25c      	b.n	6126 <__aeabi_ddiv+0x642>
    5c6c:	9b01      	ldr	r3, [sp, #4]
    5c6e:	2a01      	cmp	r2, #1
    5c70:	d000      	beq.n	5c74 <__aeabi_ddiv+0x190>
    5c72:	e1e4      	b.n	603e <__aeabi_ddiv+0x55a>
    5c74:	4013      	ands	r3, r2
    5c76:	469c      	mov	ip, r3
    5c78:	2300      	movs	r3, #0
    5c7a:	2400      	movs	r4, #0
    5c7c:	2200      	movs	r2, #0
    5c7e:	4698      	mov	r8, r3
    5c80:	2100      	movs	r1, #0
    5c82:	0312      	lsls	r2, r2, #12
    5c84:	0b13      	lsrs	r3, r2, #12
    5c86:	0d0a      	lsrs	r2, r1, #20
    5c88:	0512      	lsls	r2, r2, #20
    5c8a:	431a      	orrs	r2, r3
    5c8c:	0523      	lsls	r3, r4, #20
    5c8e:	4c12      	ldr	r4, [pc, #72]	; (5cd8 <__aeabi_ddiv+0x1f4>)
    5c90:	4640      	mov	r0, r8
    5c92:	4022      	ands	r2, r4
    5c94:	4313      	orrs	r3, r2
    5c96:	4662      	mov	r2, ip
    5c98:	005b      	lsls	r3, r3, #1
    5c9a:	07d2      	lsls	r2, r2, #31
    5c9c:	085b      	lsrs	r3, r3, #1
    5c9e:	4313      	orrs	r3, r2
    5ca0:	0019      	movs	r1, r3
    5ca2:	b007      	add	sp, #28
    5ca4:	bc3c      	pop	{r2, r3, r4, r5}
    5ca6:	4690      	mov	r8, r2
    5ca8:	4699      	mov	r9, r3
    5caa:	46a2      	mov	sl, r4
    5cac:	46ab      	mov	fp, r5
    5cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5cb0:	2300      	movs	r3, #0
    5cb2:	2280      	movs	r2, #128	; 0x80
    5cb4:	469c      	mov	ip, r3
    5cb6:	0312      	lsls	r2, r2, #12
    5cb8:	4698      	mov	r8, r3
    5cba:	4c03      	ldr	r4, [pc, #12]	; (5cc8 <__aeabi_ddiv+0x1e4>)
    5cbc:	e7e0      	b.n	5c80 <__aeabi_ddiv+0x19c>
    5cbe:	2300      	movs	r3, #0
    5cc0:	4c01      	ldr	r4, [pc, #4]	; (5cc8 <__aeabi_ddiv+0x1e4>)
    5cc2:	2200      	movs	r2, #0
    5cc4:	4698      	mov	r8, r3
    5cc6:	e7db      	b.n	5c80 <__aeabi_ddiv+0x19c>
    5cc8:	000007ff 	.word	0x000007ff
    5ccc:	fffffc01 	.word	0xfffffc01
    5cd0:	000072d8 	.word	0x000072d8
    5cd4:	fffffc0d 	.word	0xfffffc0d
    5cd8:	800fffff 	.word	0x800fffff
    5cdc:	45d9      	cmp	r9, fp
    5cde:	d900      	bls.n	5ce2 <__aeabi_ddiv+0x1fe>
    5ce0:	e139      	b.n	5f56 <__aeabi_ddiv+0x472>
    5ce2:	d100      	bne.n	5ce6 <__aeabi_ddiv+0x202>
    5ce4:	e134      	b.n	5f50 <__aeabi_ddiv+0x46c>
    5ce6:	2300      	movs	r3, #0
    5ce8:	4646      	mov	r6, r8
    5cea:	464d      	mov	r5, r9
    5cec:	469a      	mov	sl, r3
    5cee:	3c01      	subs	r4, #1
    5cf0:	465b      	mov	r3, fp
    5cf2:	0e0a      	lsrs	r2, r1, #24
    5cf4:	021b      	lsls	r3, r3, #8
    5cf6:	431a      	orrs	r2, r3
    5cf8:	020b      	lsls	r3, r1, #8
    5cfa:	0c17      	lsrs	r7, r2, #16
    5cfc:	9303      	str	r3, [sp, #12]
    5cfe:	0413      	lsls	r3, r2, #16
    5d00:	0c1b      	lsrs	r3, r3, #16
    5d02:	0039      	movs	r1, r7
    5d04:	0028      	movs	r0, r5
    5d06:	4690      	mov	r8, r2
    5d08:	9301      	str	r3, [sp, #4]
    5d0a:	f7ff f89f 	bl	4e4c <__udivsi3>
    5d0e:	0002      	movs	r2, r0
    5d10:	9b01      	ldr	r3, [sp, #4]
    5d12:	4683      	mov	fp, r0
    5d14:	435a      	muls	r2, r3
    5d16:	0028      	movs	r0, r5
    5d18:	0039      	movs	r1, r7
    5d1a:	4691      	mov	r9, r2
    5d1c:	f7ff f91c 	bl	4f58 <__aeabi_uidivmod>
    5d20:	0c35      	lsrs	r5, r6, #16
    5d22:	0409      	lsls	r1, r1, #16
    5d24:	430d      	orrs	r5, r1
    5d26:	45a9      	cmp	r9, r5
    5d28:	d90d      	bls.n	5d46 <__aeabi_ddiv+0x262>
    5d2a:	465b      	mov	r3, fp
    5d2c:	4445      	add	r5, r8
    5d2e:	3b01      	subs	r3, #1
    5d30:	45a8      	cmp	r8, r5
    5d32:	d900      	bls.n	5d36 <__aeabi_ddiv+0x252>
    5d34:	e13a      	b.n	5fac <__aeabi_ddiv+0x4c8>
    5d36:	45a9      	cmp	r9, r5
    5d38:	d800      	bhi.n	5d3c <__aeabi_ddiv+0x258>
    5d3a:	e137      	b.n	5fac <__aeabi_ddiv+0x4c8>
    5d3c:	2302      	movs	r3, #2
    5d3e:	425b      	negs	r3, r3
    5d40:	469c      	mov	ip, r3
    5d42:	4445      	add	r5, r8
    5d44:	44e3      	add	fp, ip
    5d46:	464b      	mov	r3, r9
    5d48:	1aeb      	subs	r3, r5, r3
    5d4a:	0039      	movs	r1, r7
    5d4c:	0018      	movs	r0, r3
    5d4e:	9304      	str	r3, [sp, #16]
    5d50:	f7ff f87c 	bl	4e4c <__udivsi3>
    5d54:	9b01      	ldr	r3, [sp, #4]
    5d56:	0005      	movs	r5, r0
    5d58:	4343      	muls	r3, r0
    5d5a:	0039      	movs	r1, r7
    5d5c:	9804      	ldr	r0, [sp, #16]
    5d5e:	4699      	mov	r9, r3
    5d60:	f7ff f8fa 	bl	4f58 <__aeabi_uidivmod>
    5d64:	0433      	lsls	r3, r6, #16
    5d66:	0409      	lsls	r1, r1, #16
    5d68:	0c1b      	lsrs	r3, r3, #16
    5d6a:	430b      	orrs	r3, r1
    5d6c:	4599      	cmp	r9, r3
    5d6e:	d909      	bls.n	5d84 <__aeabi_ddiv+0x2a0>
    5d70:	4443      	add	r3, r8
    5d72:	1e6a      	subs	r2, r5, #1
    5d74:	4598      	cmp	r8, r3
    5d76:	d900      	bls.n	5d7a <__aeabi_ddiv+0x296>
    5d78:	e11a      	b.n	5fb0 <__aeabi_ddiv+0x4cc>
    5d7a:	4599      	cmp	r9, r3
    5d7c:	d800      	bhi.n	5d80 <__aeabi_ddiv+0x29c>
    5d7e:	e117      	b.n	5fb0 <__aeabi_ddiv+0x4cc>
    5d80:	3d02      	subs	r5, #2
    5d82:	4443      	add	r3, r8
    5d84:	464a      	mov	r2, r9
    5d86:	1a9b      	subs	r3, r3, r2
    5d88:	465a      	mov	r2, fp
    5d8a:	0412      	lsls	r2, r2, #16
    5d8c:	432a      	orrs	r2, r5
    5d8e:	9903      	ldr	r1, [sp, #12]
    5d90:	4693      	mov	fp, r2
    5d92:	0c10      	lsrs	r0, r2, #16
    5d94:	0c0a      	lsrs	r2, r1, #16
    5d96:	4691      	mov	r9, r2
    5d98:	0409      	lsls	r1, r1, #16
    5d9a:	465a      	mov	r2, fp
    5d9c:	0c09      	lsrs	r1, r1, #16
    5d9e:	464e      	mov	r6, r9
    5da0:	000d      	movs	r5, r1
    5da2:	0412      	lsls	r2, r2, #16
    5da4:	0c12      	lsrs	r2, r2, #16
    5da6:	4345      	muls	r5, r0
    5da8:	9105      	str	r1, [sp, #20]
    5daa:	4351      	muls	r1, r2
    5dac:	4372      	muls	r2, r6
    5dae:	4370      	muls	r0, r6
    5db0:	1952      	adds	r2, r2, r5
    5db2:	0c0e      	lsrs	r6, r1, #16
    5db4:	18b2      	adds	r2, r6, r2
    5db6:	4295      	cmp	r5, r2
    5db8:	d903      	bls.n	5dc2 <__aeabi_ddiv+0x2de>
    5dba:	2580      	movs	r5, #128	; 0x80
    5dbc:	026d      	lsls	r5, r5, #9
    5dbe:	46ac      	mov	ip, r5
    5dc0:	4460      	add	r0, ip
    5dc2:	0c15      	lsrs	r5, r2, #16
    5dc4:	0409      	lsls	r1, r1, #16
    5dc6:	0412      	lsls	r2, r2, #16
    5dc8:	0c09      	lsrs	r1, r1, #16
    5dca:	1828      	adds	r0, r5, r0
    5dcc:	1852      	adds	r2, r2, r1
    5dce:	4283      	cmp	r3, r0
    5dd0:	d200      	bcs.n	5dd4 <__aeabi_ddiv+0x2f0>
    5dd2:	e0ce      	b.n	5f72 <__aeabi_ddiv+0x48e>
    5dd4:	d100      	bne.n	5dd8 <__aeabi_ddiv+0x2f4>
    5dd6:	e0c8      	b.n	5f6a <__aeabi_ddiv+0x486>
    5dd8:	1a1d      	subs	r5, r3, r0
    5dda:	4653      	mov	r3, sl
    5ddc:	1a9e      	subs	r6, r3, r2
    5dde:	45b2      	cmp	sl, r6
    5de0:	4192      	sbcs	r2, r2
    5de2:	4252      	negs	r2, r2
    5de4:	1aab      	subs	r3, r5, r2
    5de6:	469a      	mov	sl, r3
    5de8:	4598      	cmp	r8, r3
    5dea:	d100      	bne.n	5dee <__aeabi_ddiv+0x30a>
    5dec:	e117      	b.n	601e <__aeabi_ddiv+0x53a>
    5dee:	0039      	movs	r1, r7
    5df0:	0018      	movs	r0, r3
    5df2:	f7ff f82b 	bl	4e4c <__udivsi3>
    5df6:	9b01      	ldr	r3, [sp, #4]
    5df8:	0005      	movs	r5, r0
    5dfa:	4343      	muls	r3, r0
    5dfc:	0039      	movs	r1, r7
    5dfe:	4650      	mov	r0, sl
    5e00:	9304      	str	r3, [sp, #16]
    5e02:	f7ff f8a9 	bl	4f58 <__aeabi_uidivmod>
    5e06:	9804      	ldr	r0, [sp, #16]
    5e08:	040b      	lsls	r3, r1, #16
    5e0a:	0c31      	lsrs	r1, r6, #16
    5e0c:	4319      	orrs	r1, r3
    5e0e:	4288      	cmp	r0, r1
    5e10:	d909      	bls.n	5e26 <__aeabi_ddiv+0x342>
    5e12:	4441      	add	r1, r8
    5e14:	1e6b      	subs	r3, r5, #1
    5e16:	4588      	cmp	r8, r1
    5e18:	d900      	bls.n	5e1c <__aeabi_ddiv+0x338>
    5e1a:	e107      	b.n	602c <__aeabi_ddiv+0x548>
    5e1c:	4288      	cmp	r0, r1
    5e1e:	d800      	bhi.n	5e22 <__aeabi_ddiv+0x33e>
    5e20:	e104      	b.n	602c <__aeabi_ddiv+0x548>
    5e22:	3d02      	subs	r5, #2
    5e24:	4441      	add	r1, r8
    5e26:	9b04      	ldr	r3, [sp, #16]
    5e28:	1acb      	subs	r3, r1, r3
    5e2a:	0018      	movs	r0, r3
    5e2c:	0039      	movs	r1, r7
    5e2e:	9304      	str	r3, [sp, #16]
    5e30:	f7ff f80c 	bl	4e4c <__udivsi3>
    5e34:	9b01      	ldr	r3, [sp, #4]
    5e36:	4682      	mov	sl, r0
    5e38:	4343      	muls	r3, r0
    5e3a:	0039      	movs	r1, r7
    5e3c:	9804      	ldr	r0, [sp, #16]
    5e3e:	9301      	str	r3, [sp, #4]
    5e40:	f7ff f88a 	bl	4f58 <__aeabi_uidivmod>
    5e44:	9801      	ldr	r0, [sp, #4]
    5e46:	040b      	lsls	r3, r1, #16
    5e48:	0431      	lsls	r1, r6, #16
    5e4a:	0c09      	lsrs	r1, r1, #16
    5e4c:	4319      	orrs	r1, r3
    5e4e:	4288      	cmp	r0, r1
    5e50:	d90d      	bls.n	5e6e <__aeabi_ddiv+0x38a>
    5e52:	4653      	mov	r3, sl
    5e54:	4441      	add	r1, r8
    5e56:	3b01      	subs	r3, #1
    5e58:	4588      	cmp	r8, r1
    5e5a:	d900      	bls.n	5e5e <__aeabi_ddiv+0x37a>
    5e5c:	e0e8      	b.n	6030 <__aeabi_ddiv+0x54c>
    5e5e:	4288      	cmp	r0, r1
    5e60:	d800      	bhi.n	5e64 <__aeabi_ddiv+0x380>
    5e62:	e0e5      	b.n	6030 <__aeabi_ddiv+0x54c>
    5e64:	2302      	movs	r3, #2
    5e66:	425b      	negs	r3, r3
    5e68:	469c      	mov	ip, r3
    5e6a:	4441      	add	r1, r8
    5e6c:	44e2      	add	sl, ip
    5e6e:	9b01      	ldr	r3, [sp, #4]
    5e70:	042d      	lsls	r5, r5, #16
    5e72:	1ace      	subs	r6, r1, r3
    5e74:	4651      	mov	r1, sl
    5e76:	4329      	orrs	r1, r5
    5e78:	9d05      	ldr	r5, [sp, #20]
    5e7a:	464f      	mov	r7, r9
    5e7c:	002a      	movs	r2, r5
    5e7e:	040b      	lsls	r3, r1, #16
    5e80:	0c08      	lsrs	r0, r1, #16
    5e82:	0c1b      	lsrs	r3, r3, #16
    5e84:	435a      	muls	r2, r3
    5e86:	4345      	muls	r5, r0
    5e88:	437b      	muls	r3, r7
    5e8a:	4378      	muls	r0, r7
    5e8c:	195b      	adds	r3, r3, r5
    5e8e:	0c17      	lsrs	r7, r2, #16
    5e90:	18fb      	adds	r3, r7, r3
    5e92:	429d      	cmp	r5, r3
    5e94:	d903      	bls.n	5e9e <__aeabi_ddiv+0x3ba>
    5e96:	2580      	movs	r5, #128	; 0x80
    5e98:	026d      	lsls	r5, r5, #9
    5e9a:	46ac      	mov	ip, r5
    5e9c:	4460      	add	r0, ip
    5e9e:	0c1d      	lsrs	r5, r3, #16
    5ea0:	0412      	lsls	r2, r2, #16
    5ea2:	041b      	lsls	r3, r3, #16
    5ea4:	0c12      	lsrs	r2, r2, #16
    5ea6:	1828      	adds	r0, r5, r0
    5ea8:	189b      	adds	r3, r3, r2
    5eaa:	4286      	cmp	r6, r0
    5eac:	d200      	bcs.n	5eb0 <__aeabi_ddiv+0x3cc>
    5eae:	e093      	b.n	5fd8 <__aeabi_ddiv+0x4f4>
    5eb0:	d100      	bne.n	5eb4 <__aeabi_ddiv+0x3d0>
    5eb2:	e08e      	b.n	5fd2 <__aeabi_ddiv+0x4ee>
    5eb4:	2301      	movs	r3, #1
    5eb6:	4319      	orrs	r1, r3
    5eb8:	4ba0      	ldr	r3, [pc, #640]	; (613c <__aeabi_ddiv+0x658>)
    5eba:	18e3      	adds	r3, r4, r3
    5ebc:	2b00      	cmp	r3, #0
    5ebe:	dc00      	bgt.n	5ec2 <__aeabi_ddiv+0x3de>
    5ec0:	e099      	b.n	5ff6 <__aeabi_ddiv+0x512>
    5ec2:	074a      	lsls	r2, r1, #29
    5ec4:	d000      	beq.n	5ec8 <__aeabi_ddiv+0x3e4>
    5ec6:	e09e      	b.n	6006 <__aeabi_ddiv+0x522>
    5ec8:	465a      	mov	r2, fp
    5eca:	01d2      	lsls	r2, r2, #7
    5ecc:	d506      	bpl.n	5edc <__aeabi_ddiv+0x3f8>
    5ece:	465a      	mov	r2, fp
    5ed0:	4b9b      	ldr	r3, [pc, #620]	; (6140 <__aeabi_ddiv+0x65c>)
    5ed2:	401a      	ands	r2, r3
    5ed4:	2380      	movs	r3, #128	; 0x80
    5ed6:	4693      	mov	fp, r2
    5ed8:	00db      	lsls	r3, r3, #3
    5eda:	18e3      	adds	r3, r4, r3
    5edc:	4a99      	ldr	r2, [pc, #612]	; (6144 <__aeabi_ddiv+0x660>)
    5ede:	4293      	cmp	r3, r2
    5ee0:	dd68      	ble.n	5fb4 <__aeabi_ddiv+0x4d0>
    5ee2:	2301      	movs	r3, #1
    5ee4:	9a02      	ldr	r2, [sp, #8]
    5ee6:	4c98      	ldr	r4, [pc, #608]	; (6148 <__aeabi_ddiv+0x664>)
    5ee8:	401a      	ands	r2, r3
    5eea:	2300      	movs	r3, #0
    5eec:	4694      	mov	ip, r2
    5eee:	4698      	mov	r8, r3
    5ef0:	2200      	movs	r2, #0
    5ef2:	e6c5      	b.n	5c80 <__aeabi_ddiv+0x19c>
    5ef4:	2280      	movs	r2, #128	; 0x80
    5ef6:	464b      	mov	r3, r9
    5ef8:	0312      	lsls	r2, r2, #12
    5efa:	4213      	tst	r3, r2
    5efc:	d00a      	beq.n	5f14 <__aeabi_ddiv+0x430>
    5efe:	465b      	mov	r3, fp
    5f00:	4213      	tst	r3, r2
    5f02:	d106      	bne.n	5f12 <__aeabi_ddiv+0x42e>
    5f04:	431a      	orrs	r2, r3
    5f06:	0312      	lsls	r2, r2, #12
    5f08:	0b12      	lsrs	r2, r2, #12
    5f0a:	46ac      	mov	ip, r5
    5f0c:	4688      	mov	r8, r1
    5f0e:	4c8e      	ldr	r4, [pc, #568]	; (6148 <__aeabi_ddiv+0x664>)
    5f10:	e6b6      	b.n	5c80 <__aeabi_ddiv+0x19c>
    5f12:	464b      	mov	r3, r9
    5f14:	431a      	orrs	r2, r3
    5f16:	0312      	lsls	r2, r2, #12
    5f18:	0b12      	lsrs	r2, r2, #12
    5f1a:	46bc      	mov	ip, r7
    5f1c:	4c8a      	ldr	r4, [pc, #552]	; (6148 <__aeabi_ddiv+0x664>)
    5f1e:	e6af      	b.n	5c80 <__aeabi_ddiv+0x19c>
    5f20:	0003      	movs	r3, r0
    5f22:	465a      	mov	r2, fp
    5f24:	3b28      	subs	r3, #40	; 0x28
    5f26:	409a      	lsls	r2, r3
    5f28:	2300      	movs	r3, #0
    5f2a:	4691      	mov	r9, r2
    5f2c:	4698      	mov	r8, r3
    5f2e:	e657      	b.n	5be0 <__aeabi_ddiv+0xfc>
    5f30:	4658      	mov	r0, fp
    5f32:	f001 f94b 	bl	71cc <__clzsi2>
    5f36:	3020      	adds	r0, #32
    5f38:	e640      	b.n	5bbc <__aeabi_ddiv+0xd8>
    5f3a:	0003      	movs	r3, r0
    5f3c:	4652      	mov	r2, sl
    5f3e:	3b28      	subs	r3, #40	; 0x28
    5f40:	409a      	lsls	r2, r3
    5f42:	2100      	movs	r1, #0
    5f44:	4693      	mov	fp, r2
    5f46:	e677      	b.n	5c38 <__aeabi_ddiv+0x154>
    5f48:	f001 f940 	bl	71cc <__clzsi2>
    5f4c:	3020      	adds	r0, #32
    5f4e:	e65f      	b.n	5c10 <__aeabi_ddiv+0x12c>
    5f50:	4588      	cmp	r8, r1
    5f52:	d200      	bcs.n	5f56 <__aeabi_ddiv+0x472>
    5f54:	e6c7      	b.n	5ce6 <__aeabi_ddiv+0x202>
    5f56:	464b      	mov	r3, r9
    5f58:	07de      	lsls	r6, r3, #31
    5f5a:	085d      	lsrs	r5, r3, #1
    5f5c:	4643      	mov	r3, r8
    5f5e:	085b      	lsrs	r3, r3, #1
    5f60:	431e      	orrs	r6, r3
    5f62:	4643      	mov	r3, r8
    5f64:	07db      	lsls	r3, r3, #31
    5f66:	469a      	mov	sl, r3
    5f68:	e6c2      	b.n	5cf0 <__aeabi_ddiv+0x20c>
    5f6a:	2500      	movs	r5, #0
    5f6c:	4592      	cmp	sl, r2
    5f6e:	d300      	bcc.n	5f72 <__aeabi_ddiv+0x48e>
    5f70:	e733      	b.n	5dda <__aeabi_ddiv+0x2f6>
    5f72:	9e03      	ldr	r6, [sp, #12]
    5f74:	4659      	mov	r1, fp
    5f76:	46b4      	mov	ip, r6
    5f78:	44e2      	add	sl, ip
    5f7a:	45b2      	cmp	sl, r6
    5f7c:	41ad      	sbcs	r5, r5
    5f7e:	426d      	negs	r5, r5
    5f80:	4445      	add	r5, r8
    5f82:	18eb      	adds	r3, r5, r3
    5f84:	3901      	subs	r1, #1
    5f86:	4598      	cmp	r8, r3
    5f88:	d207      	bcs.n	5f9a <__aeabi_ddiv+0x4b6>
    5f8a:	4298      	cmp	r0, r3
    5f8c:	d900      	bls.n	5f90 <__aeabi_ddiv+0x4ac>
    5f8e:	e07f      	b.n	6090 <__aeabi_ddiv+0x5ac>
    5f90:	d100      	bne.n	5f94 <__aeabi_ddiv+0x4b0>
    5f92:	e0bc      	b.n	610e <__aeabi_ddiv+0x62a>
    5f94:	1a1d      	subs	r5, r3, r0
    5f96:	468b      	mov	fp, r1
    5f98:	e71f      	b.n	5dda <__aeabi_ddiv+0x2f6>
    5f9a:	4598      	cmp	r8, r3
    5f9c:	d1fa      	bne.n	5f94 <__aeabi_ddiv+0x4b0>
    5f9e:	9d03      	ldr	r5, [sp, #12]
    5fa0:	4555      	cmp	r5, sl
    5fa2:	d9f2      	bls.n	5f8a <__aeabi_ddiv+0x4a6>
    5fa4:	4643      	mov	r3, r8
    5fa6:	468b      	mov	fp, r1
    5fa8:	1a1d      	subs	r5, r3, r0
    5faa:	e716      	b.n	5dda <__aeabi_ddiv+0x2f6>
    5fac:	469b      	mov	fp, r3
    5fae:	e6ca      	b.n	5d46 <__aeabi_ddiv+0x262>
    5fb0:	0015      	movs	r5, r2
    5fb2:	e6e7      	b.n	5d84 <__aeabi_ddiv+0x2a0>
    5fb4:	465a      	mov	r2, fp
    5fb6:	08c9      	lsrs	r1, r1, #3
    5fb8:	0752      	lsls	r2, r2, #29
    5fba:	430a      	orrs	r2, r1
    5fbc:	055b      	lsls	r3, r3, #21
    5fbe:	4690      	mov	r8, r2
    5fc0:	0d5c      	lsrs	r4, r3, #21
    5fc2:	465a      	mov	r2, fp
    5fc4:	2301      	movs	r3, #1
    5fc6:	9902      	ldr	r1, [sp, #8]
    5fc8:	0252      	lsls	r2, r2, #9
    5fca:	4019      	ands	r1, r3
    5fcc:	0b12      	lsrs	r2, r2, #12
    5fce:	468c      	mov	ip, r1
    5fd0:	e656      	b.n	5c80 <__aeabi_ddiv+0x19c>
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d100      	bne.n	5fd8 <__aeabi_ddiv+0x4f4>
    5fd6:	e76f      	b.n	5eb8 <__aeabi_ddiv+0x3d4>
    5fd8:	4446      	add	r6, r8
    5fda:	1e4a      	subs	r2, r1, #1
    5fdc:	45b0      	cmp	r8, r6
    5fde:	d929      	bls.n	6034 <__aeabi_ddiv+0x550>
    5fe0:	0011      	movs	r1, r2
    5fe2:	4286      	cmp	r6, r0
    5fe4:	d000      	beq.n	5fe8 <__aeabi_ddiv+0x504>
    5fe6:	e765      	b.n	5eb4 <__aeabi_ddiv+0x3d0>
    5fe8:	9a03      	ldr	r2, [sp, #12]
    5fea:	4293      	cmp	r3, r2
    5fec:	d000      	beq.n	5ff0 <__aeabi_ddiv+0x50c>
    5fee:	e761      	b.n	5eb4 <__aeabi_ddiv+0x3d0>
    5ff0:	e762      	b.n	5eb8 <__aeabi_ddiv+0x3d4>
    5ff2:	2101      	movs	r1, #1
    5ff4:	4249      	negs	r1, r1
    5ff6:	2001      	movs	r0, #1
    5ff8:	1ac2      	subs	r2, r0, r3
    5ffa:	2a38      	cmp	r2, #56	; 0x38
    5ffc:	dd21      	ble.n	6042 <__aeabi_ddiv+0x55e>
    5ffe:	9b02      	ldr	r3, [sp, #8]
    6000:	4003      	ands	r3, r0
    6002:	469c      	mov	ip, r3
    6004:	e638      	b.n	5c78 <__aeabi_ddiv+0x194>
    6006:	220f      	movs	r2, #15
    6008:	400a      	ands	r2, r1
    600a:	2a04      	cmp	r2, #4
    600c:	d100      	bne.n	6010 <__aeabi_ddiv+0x52c>
    600e:	e75b      	b.n	5ec8 <__aeabi_ddiv+0x3e4>
    6010:	000a      	movs	r2, r1
    6012:	1d11      	adds	r1, r2, #4
    6014:	4291      	cmp	r1, r2
    6016:	4192      	sbcs	r2, r2
    6018:	4252      	negs	r2, r2
    601a:	4493      	add	fp, r2
    601c:	e754      	b.n	5ec8 <__aeabi_ddiv+0x3e4>
    601e:	4b47      	ldr	r3, [pc, #284]	; (613c <__aeabi_ddiv+0x658>)
    6020:	18e3      	adds	r3, r4, r3
    6022:	2b00      	cmp	r3, #0
    6024:	dde5      	ble.n	5ff2 <__aeabi_ddiv+0x50e>
    6026:	2201      	movs	r2, #1
    6028:	4252      	negs	r2, r2
    602a:	e7f2      	b.n	6012 <__aeabi_ddiv+0x52e>
    602c:	001d      	movs	r5, r3
    602e:	e6fa      	b.n	5e26 <__aeabi_ddiv+0x342>
    6030:	469a      	mov	sl, r3
    6032:	e71c      	b.n	5e6e <__aeabi_ddiv+0x38a>
    6034:	42b0      	cmp	r0, r6
    6036:	d839      	bhi.n	60ac <__aeabi_ddiv+0x5c8>
    6038:	d06e      	beq.n	6118 <__aeabi_ddiv+0x634>
    603a:	0011      	movs	r1, r2
    603c:	e73a      	b.n	5eb4 <__aeabi_ddiv+0x3d0>
    603e:	9302      	str	r3, [sp, #8]
    6040:	e73a      	b.n	5eb8 <__aeabi_ddiv+0x3d4>
    6042:	2a1f      	cmp	r2, #31
    6044:	dc3c      	bgt.n	60c0 <__aeabi_ddiv+0x5dc>
    6046:	2320      	movs	r3, #32
    6048:	1a9b      	subs	r3, r3, r2
    604a:	000c      	movs	r4, r1
    604c:	4658      	mov	r0, fp
    604e:	4099      	lsls	r1, r3
    6050:	4098      	lsls	r0, r3
    6052:	1e4b      	subs	r3, r1, #1
    6054:	4199      	sbcs	r1, r3
    6056:	465b      	mov	r3, fp
    6058:	40d4      	lsrs	r4, r2
    605a:	40d3      	lsrs	r3, r2
    605c:	4320      	orrs	r0, r4
    605e:	4308      	orrs	r0, r1
    6060:	001a      	movs	r2, r3
    6062:	0743      	lsls	r3, r0, #29
    6064:	d009      	beq.n	607a <__aeabi_ddiv+0x596>
    6066:	230f      	movs	r3, #15
    6068:	4003      	ands	r3, r0
    606a:	2b04      	cmp	r3, #4
    606c:	d005      	beq.n	607a <__aeabi_ddiv+0x596>
    606e:	0001      	movs	r1, r0
    6070:	1d08      	adds	r0, r1, #4
    6072:	4288      	cmp	r0, r1
    6074:	419b      	sbcs	r3, r3
    6076:	425b      	negs	r3, r3
    6078:	18d2      	adds	r2, r2, r3
    607a:	0213      	lsls	r3, r2, #8
    607c:	d53a      	bpl.n	60f4 <__aeabi_ddiv+0x610>
    607e:	2301      	movs	r3, #1
    6080:	9a02      	ldr	r2, [sp, #8]
    6082:	2401      	movs	r4, #1
    6084:	401a      	ands	r2, r3
    6086:	2300      	movs	r3, #0
    6088:	4694      	mov	ip, r2
    608a:	4698      	mov	r8, r3
    608c:	2200      	movs	r2, #0
    608e:	e5f7      	b.n	5c80 <__aeabi_ddiv+0x19c>
    6090:	2102      	movs	r1, #2
    6092:	4249      	negs	r1, r1
    6094:	468c      	mov	ip, r1
    6096:	9d03      	ldr	r5, [sp, #12]
    6098:	44e3      	add	fp, ip
    609a:	46ac      	mov	ip, r5
    609c:	44e2      	add	sl, ip
    609e:	45aa      	cmp	sl, r5
    60a0:	41ad      	sbcs	r5, r5
    60a2:	426d      	negs	r5, r5
    60a4:	4445      	add	r5, r8
    60a6:	18ed      	adds	r5, r5, r3
    60a8:	1a2d      	subs	r5, r5, r0
    60aa:	e696      	b.n	5dda <__aeabi_ddiv+0x2f6>
    60ac:	1e8a      	subs	r2, r1, #2
    60ae:	9903      	ldr	r1, [sp, #12]
    60b0:	004d      	lsls	r5, r1, #1
    60b2:	428d      	cmp	r5, r1
    60b4:	4189      	sbcs	r1, r1
    60b6:	4249      	negs	r1, r1
    60b8:	4441      	add	r1, r8
    60ba:	1876      	adds	r6, r6, r1
    60bc:	9503      	str	r5, [sp, #12]
    60be:	e78f      	b.n	5fe0 <__aeabi_ddiv+0x4fc>
    60c0:	201f      	movs	r0, #31
    60c2:	4240      	negs	r0, r0
    60c4:	1ac3      	subs	r3, r0, r3
    60c6:	4658      	mov	r0, fp
    60c8:	40d8      	lsrs	r0, r3
    60ca:	0003      	movs	r3, r0
    60cc:	2a20      	cmp	r2, #32
    60ce:	d028      	beq.n	6122 <__aeabi_ddiv+0x63e>
    60d0:	2040      	movs	r0, #64	; 0x40
    60d2:	465d      	mov	r5, fp
    60d4:	1a82      	subs	r2, r0, r2
    60d6:	4095      	lsls	r5, r2
    60d8:	4329      	orrs	r1, r5
    60da:	1e4a      	subs	r2, r1, #1
    60dc:	4191      	sbcs	r1, r2
    60de:	4319      	orrs	r1, r3
    60e0:	2307      	movs	r3, #7
    60e2:	2200      	movs	r2, #0
    60e4:	400b      	ands	r3, r1
    60e6:	d009      	beq.n	60fc <__aeabi_ddiv+0x618>
    60e8:	230f      	movs	r3, #15
    60ea:	2200      	movs	r2, #0
    60ec:	400b      	ands	r3, r1
    60ee:	0008      	movs	r0, r1
    60f0:	2b04      	cmp	r3, #4
    60f2:	d1bd      	bne.n	6070 <__aeabi_ddiv+0x58c>
    60f4:	0001      	movs	r1, r0
    60f6:	0753      	lsls	r3, r2, #29
    60f8:	0252      	lsls	r2, r2, #9
    60fa:	0b12      	lsrs	r2, r2, #12
    60fc:	08c9      	lsrs	r1, r1, #3
    60fe:	4319      	orrs	r1, r3
    6100:	2301      	movs	r3, #1
    6102:	4688      	mov	r8, r1
    6104:	9902      	ldr	r1, [sp, #8]
    6106:	2400      	movs	r4, #0
    6108:	4019      	ands	r1, r3
    610a:	468c      	mov	ip, r1
    610c:	e5b8      	b.n	5c80 <__aeabi_ddiv+0x19c>
    610e:	4552      	cmp	r2, sl
    6110:	d8be      	bhi.n	6090 <__aeabi_ddiv+0x5ac>
    6112:	468b      	mov	fp, r1
    6114:	2500      	movs	r5, #0
    6116:	e660      	b.n	5dda <__aeabi_ddiv+0x2f6>
    6118:	9d03      	ldr	r5, [sp, #12]
    611a:	429d      	cmp	r5, r3
    611c:	d3c6      	bcc.n	60ac <__aeabi_ddiv+0x5c8>
    611e:	0011      	movs	r1, r2
    6120:	e762      	b.n	5fe8 <__aeabi_ddiv+0x504>
    6122:	2500      	movs	r5, #0
    6124:	e7d8      	b.n	60d8 <__aeabi_ddiv+0x5f4>
    6126:	2280      	movs	r2, #128	; 0x80
    6128:	465b      	mov	r3, fp
    612a:	0312      	lsls	r2, r2, #12
    612c:	431a      	orrs	r2, r3
    612e:	9b01      	ldr	r3, [sp, #4]
    6130:	0312      	lsls	r2, r2, #12
    6132:	0b12      	lsrs	r2, r2, #12
    6134:	469c      	mov	ip, r3
    6136:	4688      	mov	r8, r1
    6138:	4c03      	ldr	r4, [pc, #12]	; (6148 <__aeabi_ddiv+0x664>)
    613a:	e5a1      	b.n	5c80 <__aeabi_ddiv+0x19c>
    613c:	000003ff 	.word	0x000003ff
    6140:	feffffff 	.word	0xfeffffff
    6144:	000007fe 	.word	0x000007fe
    6148:	000007ff 	.word	0x000007ff

0000614c <__eqdf2>:
    614c:	b5f0      	push	{r4, r5, r6, r7, lr}
    614e:	464f      	mov	r7, r9
    6150:	4646      	mov	r6, r8
    6152:	46d6      	mov	lr, sl
    6154:	005c      	lsls	r4, r3, #1
    6156:	b5c0      	push	{r6, r7, lr}
    6158:	031f      	lsls	r7, r3, #12
    615a:	0fdb      	lsrs	r3, r3, #31
    615c:	469a      	mov	sl, r3
    615e:	4b17      	ldr	r3, [pc, #92]	; (61bc <__eqdf2+0x70>)
    6160:	030e      	lsls	r6, r1, #12
    6162:	004d      	lsls	r5, r1, #1
    6164:	4684      	mov	ip, r0
    6166:	4680      	mov	r8, r0
    6168:	0b36      	lsrs	r6, r6, #12
    616a:	0d6d      	lsrs	r5, r5, #21
    616c:	0fc9      	lsrs	r1, r1, #31
    616e:	4691      	mov	r9, r2
    6170:	0b3f      	lsrs	r7, r7, #12
    6172:	0d64      	lsrs	r4, r4, #21
    6174:	2001      	movs	r0, #1
    6176:	429d      	cmp	r5, r3
    6178:	d008      	beq.n	618c <__eqdf2+0x40>
    617a:	429c      	cmp	r4, r3
    617c:	d001      	beq.n	6182 <__eqdf2+0x36>
    617e:	42a5      	cmp	r5, r4
    6180:	d00b      	beq.n	619a <__eqdf2+0x4e>
    6182:	bc1c      	pop	{r2, r3, r4}
    6184:	4690      	mov	r8, r2
    6186:	4699      	mov	r9, r3
    6188:	46a2      	mov	sl, r4
    618a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    618c:	4663      	mov	r3, ip
    618e:	4333      	orrs	r3, r6
    6190:	d1f7      	bne.n	6182 <__eqdf2+0x36>
    6192:	42ac      	cmp	r4, r5
    6194:	d1f5      	bne.n	6182 <__eqdf2+0x36>
    6196:	433a      	orrs	r2, r7
    6198:	d1f3      	bne.n	6182 <__eqdf2+0x36>
    619a:	2001      	movs	r0, #1
    619c:	42be      	cmp	r6, r7
    619e:	d1f0      	bne.n	6182 <__eqdf2+0x36>
    61a0:	45c8      	cmp	r8, r9
    61a2:	d1ee      	bne.n	6182 <__eqdf2+0x36>
    61a4:	4551      	cmp	r1, sl
    61a6:	d007      	beq.n	61b8 <__eqdf2+0x6c>
    61a8:	2d00      	cmp	r5, #0
    61aa:	d1ea      	bne.n	6182 <__eqdf2+0x36>
    61ac:	4663      	mov	r3, ip
    61ae:	431e      	orrs	r6, r3
    61b0:	0030      	movs	r0, r6
    61b2:	1e46      	subs	r6, r0, #1
    61b4:	41b0      	sbcs	r0, r6
    61b6:	e7e4      	b.n	6182 <__eqdf2+0x36>
    61b8:	2000      	movs	r0, #0
    61ba:	e7e2      	b.n	6182 <__eqdf2+0x36>
    61bc:	000007ff 	.word	0x000007ff

000061c0 <__gedf2>:
    61c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    61c2:	4645      	mov	r5, r8
    61c4:	46de      	mov	lr, fp
    61c6:	4657      	mov	r7, sl
    61c8:	464e      	mov	r6, r9
    61ca:	b5e0      	push	{r5, r6, r7, lr}
    61cc:	031f      	lsls	r7, r3, #12
    61ce:	0b3d      	lsrs	r5, r7, #12
    61d0:	4f2c      	ldr	r7, [pc, #176]	; (6284 <__gedf2+0xc4>)
    61d2:	030e      	lsls	r6, r1, #12
    61d4:	004c      	lsls	r4, r1, #1
    61d6:	46ab      	mov	fp, r5
    61d8:	005d      	lsls	r5, r3, #1
    61da:	4684      	mov	ip, r0
    61dc:	0b36      	lsrs	r6, r6, #12
    61de:	0d64      	lsrs	r4, r4, #21
    61e0:	0fc9      	lsrs	r1, r1, #31
    61e2:	4690      	mov	r8, r2
    61e4:	0d6d      	lsrs	r5, r5, #21
    61e6:	0fdb      	lsrs	r3, r3, #31
    61e8:	42bc      	cmp	r4, r7
    61ea:	d02a      	beq.n	6242 <__gedf2+0x82>
    61ec:	4f25      	ldr	r7, [pc, #148]	; (6284 <__gedf2+0xc4>)
    61ee:	42bd      	cmp	r5, r7
    61f0:	d02d      	beq.n	624e <__gedf2+0x8e>
    61f2:	2c00      	cmp	r4, #0
    61f4:	d10f      	bne.n	6216 <__gedf2+0x56>
    61f6:	4330      	orrs	r0, r6
    61f8:	0007      	movs	r7, r0
    61fa:	4681      	mov	r9, r0
    61fc:	4278      	negs	r0, r7
    61fe:	4178      	adcs	r0, r7
    6200:	b2c0      	uxtb	r0, r0
    6202:	2d00      	cmp	r5, #0
    6204:	d117      	bne.n	6236 <__gedf2+0x76>
    6206:	465f      	mov	r7, fp
    6208:	433a      	orrs	r2, r7
    620a:	d114      	bne.n	6236 <__gedf2+0x76>
    620c:	464b      	mov	r3, r9
    620e:	2000      	movs	r0, #0
    6210:	2b00      	cmp	r3, #0
    6212:	d00a      	beq.n	622a <__gedf2+0x6a>
    6214:	e006      	b.n	6224 <__gedf2+0x64>
    6216:	2d00      	cmp	r5, #0
    6218:	d102      	bne.n	6220 <__gedf2+0x60>
    621a:	4658      	mov	r0, fp
    621c:	4302      	orrs	r2, r0
    621e:	d001      	beq.n	6224 <__gedf2+0x64>
    6220:	4299      	cmp	r1, r3
    6222:	d018      	beq.n	6256 <__gedf2+0x96>
    6224:	4248      	negs	r0, r1
    6226:	2101      	movs	r1, #1
    6228:	4308      	orrs	r0, r1
    622a:	bc3c      	pop	{r2, r3, r4, r5}
    622c:	4690      	mov	r8, r2
    622e:	4699      	mov	r9, r3
    6230:	46a2      	mov	sl, r4
    6232:	46ab      	mov	fp, r5
    6234:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6236:	2800      	cmp	r0, #0
    6238:	d0f2      	beq.n	6220 <__gedf2+0x60>
    623a:	2001      	movs	r0, #1
    623c:	3b01      	subs	r3, #1
    623e:	4318      	orrs	r0, r3
    6240:	e7f3      	b.n	622a <__gedf2+0x6a>
    6242:	0037      	movs	r7, r6
    6244:	4307      	orrs	r7, r0
    6246:	d0d1      	beq.n	61ec <__gedf2+0x2c>
    6248:	2002      	movs	r0, #2
    624a:	4240      	negs	r0, r0
    624c:	e7ed      	b.n	622a <__gedf2+0x6a>
    624e:	465f      	mov	r7, fp
    6250:	4317      	orrs	r7, r2
    6252:	d0ce      	beq.n	61f2 <__gedf2+0x32>
    6254:	e7f8      	b.n	6248 <__gedf2+0x88>
    6256:	42ac      	cmp	r4, r5
    6258:	dce4      	bgt.n	6224 <__gedf2+0x64>
    625a:	da03      	bge.n	6264 <__gedf2+0xa4>
    625c:	1e48      	subs	r0, r1, #1
    625e:	2101      	movs	r1, #1
    6260:	4308      	orrs	r0, r1
    6262:	e7e2      	b.n	622a <__gedf2+0x6a>
    6264:	455e      	cmp	r6, fp
    6266:	d8dd      	bhi.n	6224 <__gedf2+0x64>
    6268:	d006      	beq.n	6278 <__gedf2+0xb8>
    626a:	2000      	movs	r0, #0
    626c:	455e      	cmp	r6, fp
    626e:	d2dc      	bcs.n	622a <__gedf2+0x6a>
    6270:	2301      	movs	r3, #1
    6272:	1e48      	subs	r0, r1, #1
    6274:	4318      	orrs	r0, r3
    6276:	e7d8      	b.n	622a <__gedf2+0x6a>
    6278:	45c4      	cmp	ip, r8
    627a:	d8d3      	bhi.n	6224 <__gedf2+0x64>
    627c:	2000      	movs	r0, #0
    627e:	45c4      	cmp	ip, r8
    6280:	d3f6      	bcc.n	6270 <__gedf2+0xb0>
    6282:	e7d2      	b.n	622a <__gedf2+0x6a>
    6284:	000007ff 	.word	0x000007ff

00006288 <__ledf2>:
    6288:	b5f0      	push	{r4, r5, r6, r7, lr}
    628a:	464e      	mov	r6, r9
    628c:	4645      	mov	r5, r8
    628e:	46de      	mov	lr, fp
    6290:	4657      	mov	r7, sl
    6292:	005c      	lsls	r4, r3, #1
    6294:	b5e0      	push	{r5, r6, r7, lr}
    6296:	031f      	lsls	r7, r3, #12
    6298:	0fdb      	lsrs	r3, r3, #31
    629a:	4699      	mov	r9, r3
    629c:	4b2a      	ldr	r3, [pc, #168]	; (6348 <__ledf2+0xc0>)
    629e:	030e      	lsls	r6, r1, #12
    62a0:	004d      	lsls	r5, r1, #1
    62a2:	0fc9      	lsrs	r1, r1, #31
    62a4:	4684      	mov	ip, r0
    62a6:	0b36      	lsrs	r6, r6, #12
    62a8:	0d6d      	lsrs	r5, r5, #21
    62aa:	468b      	mov	fp, r1
    62ac:	4690      	mov	r8, r2
    62ae:	0b3f      	lsrs	r7, r7, #12
    62b0:	0d64      	lsrs	r4, r4, #21
    62b2:	429d      	cmp	r5, r3
    62b4:	d020      	beq.n	62f8 <__ledf2+0x70>
    62b6:	4b24      	ldr	r3, [pc, #144]	; (6348 <__ledf2+0xc0>)
    62b8:	429c      	cmp	r4, r3
    62ba:	d022      	beq.n	6302 <__ledf2+0x7a>
    62bc:	2d00      	cmp	r5, #0
    62be:	d112      	bne.n	62e6 <__ledf2+0x5e>
    62c0:	4330      	orrs	r0, r6
    62c2:	4243      	negs	r3, r0
    62c4:	4143      	adcs	r3, r0
    62c6:	b2db      	uxtb	r3, r3
    62c8:	2c00      	cmp	r4, #0
    62ca:	d01f      	beq.n	630c <__ledf2+0x84>
    62cc:	2b00      	cmp	r3, #0
    62ce:	d00c      	beq.n	62ea <__ledf2+0x62>
    62d0:	464b      	mov	r3, r9
    62d2:	2001      	movs	r0, #1
    62d4:	3b01      	subs	r3, #1
    62d6:	4303      	orrs	r3, r0
    62d8:	0018      	movs	r0, r3
    62da:	bc3c      	pop	{r2, r3, r4, r5}
    62dc:	4690      	mov	r8, r2
    62de:	4699      	mov	r9, r3
    62e0:	46a2      	mov	sl, r4
    62e2:	46ab      	mov	fp, r5
    62e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62e6:	2c00      	cmp	r4, #0
    62e8:	d016      	beq.n	6318 <__ledf2+0x90>
    62ea:	45cb      	cmp	fp, r9
    62ec:	d017      	beq.n	631e <__ledf2+0x96>
    62ee:	465b      	mov	r3, fp
    62f0:	4259      	negs	r1, r3
    62f2:	2301      	movs	r3, #1
    62f4:	430b      	orrs	r3, r1
    62f6:	e7ef      	b.n	62d8 <__ledf2+0x50>
    62f8:	0031      	movs	r1, r6
    62fa:	2302      	movs	r3, #2
    62fc:	4301      	orrs	r1, r0
    62fe:	d1eb      	bne.n	62d8 <__ledf2+0x50>
    6300:	e7d9      	b.n	62b6 <__ledf2+0x2e>
    6302:	0039      	movs	r1, r7
    6304:	2302      	movs	r3, #2
    6306:	4311      	orrs	r1, r2
    6308:	d1e6      	bne.n	62d8 <__ledf2+0x50>
    630a:	e7d7      	b.n	62bc <__ledf2+0x34>
    630c:	433a      	orrs	r2, r7
    630e:	d1dd      	bne.n	62cc <__ledf2+0x44>
    6310:	2300      	movs	r3, #0
    6312:	2800      	cmp	r0, #0
    6314:	d0e0      	beq.n	62d8 <__ledf2+0x50>
    6316:	e7ea      	b.n	62ee <__ledf2+0x66>
    6318:	433a      	orrs	r2, r7
    631a:	d1e6      	bne.n	62ea <__ledf2+0x62>
    631c:	e7e7      	b.n	62ee <__ledf2+0x66>
    631e:	42a5      	cmp	r5, r4
    6320:	dce5      	bgt.n	62ee <__ledf2+0x66>
    6322:	db05      	blt.n	6330 <__ledf2+0xa8>
    6324:	42be      	cmp	r6, r7
    6326:	d8e2      	bhi.n	62ee <__ledf2+0x66>
    6328:	d007      	beq.n	633a <__ledf2+0xb2>
    632a:	2300      	movs	r3, #0
    632c:	42be      	cmp	r6, r7
    632e:	d2d3      	bcs.n	62d8 <__ledf2+0x50>
    6330:	4659      	mov	r1, fp
    6332:	2301      	movs	r3, #1
    6334:	3901      	subs	r1, #1
    6336:	430b      	orrs	r3, r1
    6338:	e7ce      	b.n	62d8 <__ledf2+0x50>
    633a:	45c4      	cmp	ip, r8
    633c:	d8d7      	bhi.n	62ee <__ledf2+0x66>
    633e:	2300      	movs	r3, #0
    6340:	45c4      	cmp	ip, r8
    6342:	d3f5      	bcc.n	6330 <__ledf2+0xa8>
    6344:	e7c8      	b.n	62d8 <__ledf2+0x50>
    6346:	46c0      	nop			; (mov r8, r8)
    6348:	000007ff 	.word	0x000007ff

0000634c <__aeabi_dmul>:
    634c:	b5f0      	push	{r4, r5, r6, r7, lr}
    634e:	4657      	mov	r7, sl
    6350:	4645      	mov	r5, r8
    6352:	46de      	mov	lr, fp
    6354:	464e      	mov	r6, r9
    6356:	b5e0      	push	{r5, r6, r7, lr}
    6358:	030c      	lsls	r4, r1, #12
    635a:	4698      	mov	r8, r3
    635c:	004e      	lsls	r6, r1, #1
    635e:	0b23      	lsrs	r3, r4, #12
    6360:	b087      	sub	sp, #28
    6362:	0007      	movs	r7, r0
    6364:	4692      	mov	sl, r2
    6366:	469b      	mov	fp, r3
    6368:	0d76      	lsrs	r6, r6, #21
    636a:	0fcd      	lsrs	r5, r1, #31
    636c:	2e00      	cmp	r6, #0
    636e:	d06b      	beq.n	6448 <__aeabi_dmul+0xfc>
    6370:	4b6d      	ldr	r3, [pc, #436]	; (6528 <__aeabi_dmul+0x1dc>)
    6372:	429e      	cmp	r6, r3
    6374:	d035      	beq.n	63e2 <__aeabi_dmul+0x96>
    6376:	2480      	movs	r4, #128	; 0x80
    6378:	465b      	mov	r3, fp
    637a:	0f42      	lsrs	r2, r0, #29
    637c:	0424      	lsls	r4, r4, #16
    637e:	00db      	lsls	r3, r3, #3
    6380:	4314      	orrs	r4, r2
    6382:	431c      	orrs	r4, r3
    6384:	00c3      	lsls	r3, r0, #3
    6386:	4699      	mov	r9, r3
    6388:	4b68      	ldr	r3, [pc, #416]	; (652c <__aeabi_dmul+0x1e0>)
    638a:	46a3      	mov	fp, r4
    638c:	469c      	mov	ip, r3
    638e:	2300      	movs	r3, #0
    6390:	2700      	movs	r7, #0
    6392:	4466      	add	r6, ip
    6394:	9302      	str	r3, [sp, #8]
    6396:	4643      	mov	r3, r8
    6398:	031c      	lsls	r4, r3, #12
    639a:	005a      	lsls	r2, r3, #1
    639c:	0fdb      	lsrs	r3, r3, #31
    639e:	4650      	mov	r0, sl
    63a0:	0b24      	lsrs	r4, r4, #12
    63a2:	0d52      	lsrs	r2, r2, #21
    63a4:	4698      	mov	r8, r3
    63a6:	d100      	bne.n	63aa <__aeabi_dmul+0x5e>
    63a8:	e076      	b.n	6498 <__aeabi_dmul+0x14c>
    63aa:	4b5f      	ldr	r3, [pc, #380]	; (6528 <__aeabi_dmul+0x1dc>)
    63ac:	429a      	cmp	r2, r3
    63ae:	d06d      	beq.n	648c <__aeabi_dmul+0x140>
    63b0:	2380      	movs	r3, #128	; 0x80
    63b2:	0f41      	lsrs	r1, r0, #29
    63b4:	041b      	lsls	r3, r3, #16
    63b6:	430b      	orrs	r3, r1
    63b8:	495c      	ldr	r1, [pc, #368]	; (652c <__aeabi_dmul+0x1e0>)
    63ba:	00e4      	lsls	r4, r4, #3
    63bc:	468c      	mov	ip, r1
    63be:	431c      	orrs	r4, r3
    63c0:	00c3      	lsls	r3, r0, #3
    63c2:	2000      	movs	r0, #0
    63c4:	4462      	add	r2, ip
    63c6:	4641      	mov	r1, r8
    63c8:	18b6      	adds	r6, r6, r2
    63ca:	4069      	eors	r1, r5
    63cc:	1c72      	adds	r2, r6, #1
    63ce:	9101      	str	r1, [sp, #4]
    63d0:	4694      	mov	ip, r2
    63d2:	4307      	orrs	r7, r0
    63d4:	2f0f      	cmp	r7, #15
    63d6:	d900      	bls.n	63da <__aeabi_dmul+0x8e>
    63d8:	e0b0      	b.n	653c <__aeabi_dmul+0x1f0>
    63da:	4a55      	ldr	r2, [pc, #340]	; (6530 <__aeabi_dmul+0x1e4>)
    63dc:	00bf      	lsls	r7, r7, #2
    63de:	59d2      	ldr	r2, [r2, r7]
    63e0:	4697      	mov	pc, r2
    63e2:	465b      	mov	r3, fp
    63e4:	4303      	orrs	r3, r0
    63e6:	4699      	mov	r9, r3
    63e8:	d000      	beq.n	63ec <__aeabi_dmul+0xa0>
    63ea:	e087      	b.n	64fc <__aeabi_dmul+0x1b0>
    63ec:	2300      	movs	r3, #0
    63ee:	469b      	mov	fp, r3
    63f0:	3302      	adds	r3, #2
    63f2:	2708      	movs	r7, #8
    63f4:	9302      	str	r3, [sp, #8]
    63f6:	e7ce      	b.n	6396 <__aeabi_dmul+0x4a>
    63f8:	4642      	mov	r2, r8
    63fa:	9201      	str	r2, [sp, #4]
    63fc:	2802      	cmp	r0, #2
    63fe:	d067      	beq.n	64d0 <__aeabi_dmul+0x184>
    6400:	2803      	cmp	r0, #3
    6402:	d100      	bne.n	6406 <__aeabi_dmul+0xba>
    6404:	e20e      	b.n	6824 <__aeabi_dmul+0x4d8>
    6406:	2801      	cmp	r0, #1
    6408:	d000      	beq.n	640c <__aeabi_dmul+0xc0>
    640a:	e162      	b.n	66d2 <__aeabi_dmul+0x386>
    640c:	2300      	movs	r3, #0
    640e:	2400      	movs	r4, #0
    6410:	2200      	movs	r2, #0
    6412:	4699      	mov	r9, r3
    6414:	9901      	ldr	r1, [sp, #4]
    6416:	4001      	ands	r1, r0
    6418:	b2cd      	uxtb	r5, r1
    641a:	2100      	movs	r1, #0
    641c:	0312      	lsls	r2, r2, #12
    641e:	0d0b      	lsrs	r3, r1, #20
    6420:	0b12      	lsrs	r2, r2, #12
    6422:	051b      	lsls	r3, r3, #20
    6424:	4313      	orrs	r3, r2
    6426:	4a43      	ldr	r2, [pc, #268]	; (6534 <__aeabi_dmul+0x1e8>)
    6428:	0524      	lsls	r4, r4, #20
    642a:	4013      	ands	r3, r2
    642c:	431c      	orrs	r4, r3
    642e:	0064      	lsls	r4, r4, #1
    6430:	07ed      	lsls	r5, r5, #31
    6432:	0864      	lsrs	r4, r4, #1
    6434:	432c      	orrs	r4, r5
    6436:	4648      	mov	r0, r9
    6438:	0021      	movs	r1, r4
    643a:	b007      	add	sp, #28
    643c:	bc3c      	pop	{r2, r3, r4, r5}
    643e:	4690      	mov	r8, r2
    6440:	4699      	mov	r9, r3
    6442:	46a2      	mov	sl, r4
    6444:	46ab      	mov	fp, r5
    6446:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6448:	4303      	orrs	r3, r0
    644a:	4699      	mov	r9, r3
    644c:	d04f      	beq.n	64ee <__aeabi_dmul+0x1a2>
    644e:	465b      	mov	r3, fp
    6450:	2b00      	cmp	r3, #0
    6452:	d100      	bne.n	6456 <__aeabi_dmul+0x10a>
    6454:	e189      	b.n	676a <__aeabi_dmul+0x41e>
    6456:	4658      	mov	r0, fp
    6458:	f000 feb8 	bl	71cc <__clzsi2>
    645c:	0003      	movs	r3, r0
    645e:	3b0b      	subs	r3, #11
    6460:	2b1c      	cmp	r3, #28
    6462:	dd00      	ble.n	6466 <__aeabi_dmul+0x11a>
    6464:	e17a      	b.n	675c <__aeabi_dmul+0x410>
    6466:	221d      	movs	r2, #29
    6468:	1ad3      	subs	r3, r2, r3
    646a:	003a      	movs	r2, r7
    646c:	0001      	movs	r1, r0
    646e:	465c      	mov	r4, fp
    6470:	40da      	lsrs	r2, r3
    6472:	3908      	subs	r1, #8
    6474:	408c      	lsls	r4, r1
    6476:	0013      	movs	r3, r2
    6478:	408f      	lsls	r7, r1
    647a:	4323      	orrs	r3, r4
    647c:	469b      	mov	fp, r3
    647e:	46b9      	mov	r9, r7
    6480:	2300      	movs	r3, #0
    6482:	4e2d      	ldr	r6, [pc, #180]	; (6538 <__aeabi_dmul+0x1ec>)
    6484:	2700      	movs	r7, #0
    6486:	1a36      	subs	r6, r6, r0
    6488:	9302      	str	r3, [sp, #8]
    648a:	e784      	b.n	6396 <__aeabi_dmul+0x4a>
    648c:	4653      	mov	r3, sl
    648e:	4323      	orrs	r3, r4
    6490:	d12a      	bne.n	64e8 <__aeabi_dmul+0x19c>
    6492:	2400      	movs	r4, #0
    6494:	2002      	movs	r0, #2
    6496:	e796      	b.n	63c6 <__aeabi_dmul+0x7a>
    6498:	4653      	mov	r3, sl
    649a:	4323      	orrs	r3, r4
    649c:	d020      	beq.n	64e0 <__aeabi_dmul+0x194>
    649e:	2c00      	cmp	r4, #0
    64a0:	d100      	bne.n	64a4 <__aeabi_dmul+0x158>
    64a2:	e157      	b.n	6754 <__aeabi_dmul+0x408>
    64a4:	0020      	movs	r0, r4
    64a6:	f000 fe91 	bl	71cc <__clzsi2>
    64aa:	0003      	movs	r3, r0
    64ac:	3b0b      	subs	r3, #11
    64ae:	2b1c      	cmp	r3, #28
    64b0:	dd00      	ble.n	64b4 <__aeabi_dmul+0x168>
    64b2:	e149      	b.n	6748 <__aeabi_dmul+0x3fc>
    64b4:	211d      	movs	r1, #29
    64b6:	1acb      	subs	r3, r1, r3
    64b8:	4651      	mov	r1, sl
    64ba:	0002      	movs	r2, r0
    64bc:	40d9      	lsrs	r1, r3
    64be:	4653      	mov	r3, sl
    64c0:	3a08      	subs	r2, #8
    64c2:	4094      	lsls	r4, r2
    64c4:	4093      	lsls	r3, r2
    64c6:	430c      	orrs	r4, r1
    64c8:	4a1b      	ldr	r2, [pc, #108]	; (6538 <__aeabi_dmul+0x1ec>)
    64ca:	1a12      	subs	r2, r2, r0
    64cc:	2000      	movs	r0, #0
    64ce:	e77a      	b.n	63c6 <__aeabi_dmul+0x7a>
    64d0:	2501      	movs	r5, #1
    64d2:	9b01      	ldr	r3, [sp, #4]
    64d4:	4c14      	ldr	r4, [pc, #80]	; (6528 <__aeabi_dmul+0x1dc>)
    64d6:	401d      	ands	r5, r3
    64d8:	2300      	movs	r3, #0
    64da:	2200      	movs	r2, #0
    64dc:	4699      	mov	r9, r3
    64de:	e79c      	b.n	641a <__aeabi_dmul+0xce>
    64e0:	2400      	movs	r4, #0
    64e2:	2200      	movs	r2, #0
    64e4:	2001      	movs	r0, #1
    64e6:	e76e      	b.n	63c6 <__aeabi_dmul+0x7a>
    64e8:	4653      	mov	r3, sl
    64ea:	2003      	movs	r0, #3
    64ec:	e76b      	b.n	63c6 <__aeabi_dmul+0x7a>
    64ee:	2300      	movs	r3, #0
    64f0:	469b      	mov	fp, r3
    64f2:	3301      	adds	r3, #1
    64f4:	2704      	movs	r7, #4
    64f6:	2600      	movs	r6, #0
    64f8:	9302      	str	r3, [sp, #8]
    64fa:	e74c      	b.n	6396 <__aeabi_dmul+0x4a>
    64fc:	2303      	movs	r3, #3
    64fe:	4681      	mov	r9, r0
    6500:	270c      	movs	r7, #12
    6502:	9302      	str	r3, [sp, #8]
    6504:	e747      	b.n	6396 <__aeabi_dmul+0x4a>
    6506:	2280      	movs	r2, #128	; 0x80
    6508:	2300      	movs	r3, #0
    650a:	2500      	movs	r5, #0
    650c:	0312      	lsls	r2, r2, #12
    650e:	4699      	mov	r9, r3
    6510:	4c05      	ldr	r4, [pc, #20]	; (6528 <__aeabi_dmul+0x1dc>)
    6512:	e782      	b.n	641a <__aeabi_dmul+0xce>
    6514:	465c      	mov	r4, fp
    6516:	464b      	mov	r3, r9
    6518:	9802      	ldr	r0, [sp, #8]
    651a:	e76f      	b.n	63fc <__aeabi_dmul+0xb0>
    651c:	465c      	mov	r4, fp
    651e:	464b      	mov	r3, r9
    6520:	9501      	str	r5, [sp, #4]
    6522:	9802      	ldr	r0, [sp, #8]
    6524:	e76a      	b.n	63fc <__aeabi_dmul+0xb0>
    6526:	46c0      	nop			; (mov r8, r8)
    6528:	000007ff 	.word	0x000007ff
    652c:	fffffc01 	.word	0xfffffc01
    6530:	00007318 	.word	0x00007318
    6534:	800fffff 	.word	0x800fffff
    6538:	fffffc0d 	.word	0xfffffc0d
    653c:	464a      	mov	r2, r9
    653e:	4649      	mov	r1, r9
    6540:	0c17      	lsrs	r7, r2, #16
    6542:	0c1a      	lsrs	r2, r3, #16
    6544:	041b      	lsls	r3, r3, #16
    6546:	0c1b      	lsrs	r3, r3, #16
    6548:	0408      	lsls	r0, r1, #16
    654a:	0019      	movs	r1, r3
    654c:	0c00      	lsrs	r0, r0, #16
    654e:	4341      	muls	r1, r0
    6550:	0015      	movs	r5, r2
    6552:	4688      	mov	r8, r1
    6554:	0019      	movs	r1, r3
    6556:	437d      	muls	r5, r7
    6558:	4379      	muls	r1, r7
    655a:	9503      	str	r5, [sp, #12]
    655c:	4689      	mov	r9, r1
    655e:	0029      	movs	r1, r5
    6560:	0015      	movs	r5, r2
    6562:	4345      	muls	r5, r0
    6564:	444d      	add	r5, r9
    6566:	9502      	str	r5, [sp, #8]
    6568:	4645      	mov	r5, r8
    656a:	0c2d      	lsrs	r5, r5, #16
    656c:	46aa      	mov	sl, r5
    656e:	9d02      	ldr	r5, [sp, #8]
    6570:	4455      	add	r5, sl
    6572:	45a9      	cmp	r9, r5
    6574:	d906      	bls.n	6584 <__aeabi_dmul+0x238>
    6576:	468a      	mov	sl, r1
    6578:	2180      	movs	r1, #128	; 0x80
    657a:	0249      	lsls	r1, r1, #9
    657c:	4689      	mov	r9, r1
    657e:	44ca      	add	sl, r9
    6580:	4651      	mov	r1, sl
    6582:	9103      	str	r1, [sp, #12]
    6584:	0c29      	lsrs	r1, r5, #16
    6586:	9104      	str	r1, [sp, #16]
    6588:	4641      	mov	r1, r8
    658a:	0409      	lsls	r1, r1, #16
    658c:	042d      	lsls	r5, r5, #16
    658e:	0c09      	lsrs	r1, r1, #16
    6590:	4688      	mov	r8, r1
    6592:	0029      	movs	r1, r5
    6594:	0c25      	lsrs	r5, r4, #16
    6596:	0424      	lsls	r4, r4, #16
    6598:	4441      	add	r1, r8
    659a:	0c24      	lsrs	r4, r4, #16
    659c:	9105      	str	r1, [sp, #20]
    659e:	0021      	movs	r1, r4
    65a0:	4341      	muls	r1, r0
    65a2:	4688      	mov	r8, r1
    65a4:	0021      	movs	r1, r4
    65a6:	4379      	muls	r1, r7
    65a8:	468a      	mov	sl, r1
    65aa:	4368      	muls	r0, r5
    65ac:	4641      	mov	r1, r8
    65ae:	4450      	add	r0, sl
    65b0:	4681      	mov	r9, r0
    65b2:	0c08      	lsrs	r0, r1, #16
    65b4:	4448      	add	r0, r9
    65b6:	436f      	muls	r7, r5
    65b8:	4582      	cmp	sl, r0
    65ba:	d903      	bls.n	65c4 <__aeabi_dmul+0x278>
    65bc:	2180      	movs	r1, #128	; 0x80
    65be:	0249      	lsls	r1, r1, #9
    65c0:	4689      	mov	r9, r1
    65c2:	444f      	add	r7, r9
    65c4:	0c01      	lsrs	r1, r0, #16
    65c6:	4689      	mov	r9, r1
    65c8:	0039      	movs	r1, r7
    65ca:	4449      	add	r1, r9
    65cc:	9102      	str	r1, [sp, #8]
    65ce:	4641      	mov	r1, r8
    65d0:	040f      	lsls	r7, r1, #16
    65d2:	9904      	ldr	r1, [sp, #16]
    65d4:	0c3f      	lsrs	r7, r7, #16
    65d6:	4688      	mov	r8, r1
    65d8:	0400      	lsls	r0, r0, #16
    65da:	19c0      	adds	r0, r0, r7
    65dc:	4480      	add	r8, r0
    65de:	4641      	mov	r1, r8
    65e0:	9104      	str	r1, [sp, #16]
    65e2:	4659      	mov	r1, fp
    65e4:	0c0f      	lsrs	r7, r1, #16
    65e6:	0409      	lsls	r1, r1, #16
    65e8:	0c09      	lsrs	r1, r1, #16
    65ea:	4688      	mov	r8, r1
    65ec:	4359      	muls	r1, r3
    65ee:	468a      	mov	sl, r1
    65f0:	0039      	movs	r1, r7
    65f2:	4351      	muls	r1, r2
    65f4:	4689      	mov	r9, r1
    65f6:	4641      	mov	r1, r8
    65f8:	434a      	muls	r2, r1
    65fa:	4651      	mov	r1, sl
    65fc:	0c09      	lsrs	r1, r1, #16
    65fe:	468b      	mov	fp, r1
    6600:	437b      	muls	r3, r7
    6602:	18d2      	adds	r2, r2, r3
    6604:	445a      	add	r2, fp
    6606:	4293      	cmp	r3, r2
    6608:	d903      	bls.n	6612 <__aeabi_dmul+0x2c6>
    660a:	2380      	movs	r3, #128	; 0x80
    660c:	025b      	lsls	r3, r3, #9
    660e:	469b      	mov	fp, r3
    6610:	44d9      	add	r9, fp
    6612:	4651      	mov	r1, sl
    6614:	0409      	lsls	r1, r1, #16
    6616:	0c09      	lsrs	r1, r1, #16
    6618:	468a      	mov	sl, r1
    661a:	4641      	mov	r1, r8
    661c:	4361      	muls	r1, r4
    661e:	437c      	muls	r4, r7
    6620:	0c13      	lsrs	r3, r2, #16
    6622:	0412      	lsls	r2, r2, #16
    6624:	444b      	add	r3, r9
    6626:	4452      	add	r2, sl
    6628:	46a1      	mov	r9, r4
    662a:	468a      	mov	sl, r1
    662c:	003c      	movs	r4, r7
    662e:	4641      	mov	r1, r8
    6630:	436c      	muls	r4, r5
    6632:	434d      	muls	r5, r1
    6634:	4651      	mov	r1, sl
    6636:	444d      	add	r5, r9
    6638:	0c0f      	lsrs	r7, r1, #16
    663a:	197d      	adds	r5, r7, r5
    663c:	45a9      	cmp	r9, r5
    663e:	d903      	bls.n	6648 <__aeabi_dmul+0x2fc>
    6640:	2180      	movs	r1, #128	; 0x80
    6642:	0249      	lsls	r1, r1, #9
    6644:	4688      	mov	r8, r1
    6646:	4444      	add	r4, r8
    6648:	9f04      	ldr	r7, [sp, #16]
    664a:	9903      	ldr	r1, [sp, #12]
    664c:	46b8      	mov	r8, r7
    664e:	4441      	add	r1, r8
    6650:	468b      	mov	fp, r1
    6652:	4583      	cmp	fp, r0
    6654:	4180      	sbcs	r0, r0
    6656:	4241      	negs	r1, r0
    6658:	4688      	mov	r8, r1
    665a:	4651      	mov	r1, sl
    665c:	0408      	lsls	r0, r1, #16
    665e:	042f      	lsls	r7, r5, #16
    6660:	0c00      	lsrs	r0, r0, #16
    6662:	183f      	adds	r7, r7, r0
    6664:	4658      	mov	r0, fp
    6666:	9902      	ldr	r1, [sp, #8]
    6668:	1810      	adds	r0, r2, r0
    666a:	4689      	mov	r9, r1
    666c:	4290      	cmp	r0, r2
    666e:	4192      	sbcs	r2, r2
    6670:	444f      	add	r7, r9
    6672:	46ba      	mov	sl, r7
    6674:	4252      	negs	r2, r2
    6676:	4699      	mov	r9, r3
    6678:	4693      	mov	fp, r2
    667a:	44c2      	add	sl, r8
    667c:	44d1      	add	r9, sl
    667e:	44cb      	add	fp, r9
    6680:	428f      	cmp	r7, r1
    6682:	41bf      	sbcs	r7, r7
    6684:	45c2      	cmp	sl, r8
    6686:	4189      	sbcs	r1, r1
    6688:	4599      	cmp	r9, r3
    668a:	419b      	sbcs	r3, r3
    668c:	4593      	cmp	fp, r2
    668e:	4192      	sbcs	r2, r2
    6690:	427f      	negs	r7, r7
    6692:	4249      	negs	r1, r1
    6694:	0c2d      	lsrs	r5, r5, #16
    6696:	4252      	negs	r2, r2
    6698:	430f      	orrs	r7, r1
    669a:	425b      	negs	r3, r3
    669c:	4313      	orrs	r3, r2
    669e:	197f      	adds	r7, r7, r5
    66a0:	18ff      	adds	r7, r7, r3
    66a2:	465b      	mov	r3, fp
    66a4:	193c      	adds	r4, r7, r4
    66a6:	0ddb      	lsrs	r3, r3, #23
    66a8:	9a05      	ldr	r2, [sp, #20]
    66aa:	0264      	lsls	r4, r4, #9
    66ac:	431c      	orrs	r4, r3
    66ae:	0243      	lsls	r3, r0, #9
    66b0:	4313      	orrs	r3, r2
    66b2:	1e5d      	subs	r5, r3, #1
    66b4:	41ab      	sbcs	r3, r5
    66b6:	465a      	mov	r2, fp
    66b8:	0dc0      	lsrs	r0, r0, #23
    66ba:	4303      	orrs	r3, r0
    66bc:	0252      	lsls	r2, r2, #9
    66be:	4313      	orrs	r3, r2
    66c0:	01e2      	lsls	r2, r4, #7
    66c2:	d556      	bpl.n	6772 <__aeabi_dmul+0x426>
    66c4:	2001      	movs	r0, #1
    66c6:	085a      	lsrs	r2, r3, #1
    66c8:	4003      	ands	r3, r0
    66ca:	4313      	orrs	r3, r2
    66cc:	07e2      	lsls	r2, r4, #31
    66ce:	4313      	orrs	r3, r2
    66d0:	0864      	lsrs	r4, r4, #1
    66d2:	485a      	ldr	r0, [pc, #360]	; (683c <__aeabi_dmul+0x4f0>)
    66d4:	4460      	add	r0, ip
    66d6:	2800      	cmp	r0, #0
    66d8:	dd4d      	ble.n	6776 <__aeabi_dmul+0x42a>
    66da:	075a      	lsls	r2, r3, #29
    66dc:	d009      	beq.n	66f2 <__aeabi_dmul+0x3a6>
    66de:	220f      	movs	r2, #15
    66e0:	401a      	ands	r2, r3
    66e2:	2a04      	cmp	r2, #4
    66e4:	d005      	beq.n	66f2 <__aeabi_dmul+0x3a6>
    66e6:	1d1a      	adds	r2, r3, #4
    66e8:	429a      	cmp	r2, r3
    66ea:	419b      	sbcs	r3, r3
    66ec:	425b      	negs	r3, r3
    66ee:	18e4      	adds	r4, r4, r3
    66f0:	0013      	movs	r3, r2
    66f2:	01e2      	lsls	r2, r4, #7
    66f4:	d504      	bpl.n	6700 <__aeabi_dmul+0x3b4>
    66f6:	2080      	movs	r0, #128	; 0x80
    66f8:	4a51      	ldr	r2, [pc, #324]	; (6840 <__aeabi_dmul+0x4f4>)
    66fa:	00c0      	lsls	r0, r0, #3
    66fc:	4014      	ands	r4, r2
    66fe:	4460      	add	r0, ip
    6700:	4a50      	ldr	r2, [pc, #320]	; (6844 <__aeabi_dmul+0x4f8>)
    6702:	4290      	cmp	r0, r2
    6704:	dd00      	ble.n	6708 <__aeabi_dmul+0x3bc>
    6706:	e6e3      	b.n	64d0 <__aeabi_dmul+0x184>
    6708:	2501      	movs	r5, #1
    670a:	08db      	lsrs	r3, r3, #3
    670c:	0762      	lsls	r2, r4, #29
    670e:	431a      	orrs	r2, r3
    6710:	0264      	lsls	r4, r4, #9
    6712:	9b01      	ldr	r3, [sp, #4]
    6714:	4691      	mov	r9, r2
    6716:	0b22      	lsrs	r2, r4, #12
    6718:	0544      	lsls	r4, r0, #21
    671a:	0d64      	lsrs	r4, r4, #21
    671c:	401d      	ands	r5, r3
    671e:	e67c      	b.n	641a <__aeabi_dmul+0xce>
    6720:	2280      	movs	r2, #128	; 0x80
    6722:	4659      	mov	r1, fp
    6724:	0312      	lsls	r2, r2, #12
    6726:	4211      	tst	r1, r2
    6728:	d008      	beq.n	673c <__aeabi_dmul+0x3f0>
    672a:	4214      	tst	r4, r2
    672c:	d106      	bne.n	673c <__aeabi_dmul+0x3f0>
    672e:	4322      	orrs	r2, r4
    6730:	0312      	lsls	r2, r2, #12
    6732:	0b12      	lsrs	r2, r2, #12
    6734:	4645      	mov	r5, r8
    6736:	4699      	mov	r9, r3
    6738:	4c43      	ldr	r4, [pc, #268]	; (6848 <__aeabi_dmul+0x4fc>)
    673a:	e66e      	b.n	641a <__aeabi_dmul+0xce>
    673c:	465b      	mov	r3, fp
    673e:	431a      	orrs	r2, r3
    6740:	0312      	lsls	r2, r2, #12
    6742:	0b12      	lsrs	r2, r2, #12
    6744:	4c40      	ldr	r4, [pc, #256]	; (6848 <__aeabi_dmul+0x4fc>)
    6746:	e668      	b.n	641a <__aeabi_dmul+0xce>
    6748:	0003      	movs	r3, r0
    674a:	4654      	mov	r4, sl
    674c:	3b28      	subs	r3, #40	; 0x28
    674e:	409c      	lsls	r4, r3
    6750:	2300      	movs	r3, #0
    6752:	e6b9      	b.n	64c8 <__aeabi_dmul+0x17c>
    6754:	f000 fd3a 	bl	71cc <__clzsi2>
    6758:	3020      	adds	r0, #32
    675a:	e6a6      	b.n	64aa <__aeabi_dmul+0x15e>
    675c:	0003      	movs	r3, r0
    675e:	3b28      	subs	r3, #40	; 0x28
    6760:	409f      	lsls	r7, r3
    6762:	2300      	movs	r3, #0
    6764:	46bb      	mov	fp, r7
    6766:	4699      	mov	r9, r3
    6768:	e68a      	b.n	6480 <__aeabi_dmul+0x134>
    676a:	f000 fd2f 	bl	71cc <__clzsi2>
    676e:	3020      	adds	r0, #32
    6770:	e674      	b.n	645c <__aeabi_dmul+0x110>
    6772:	46b4      	mov	ip, r6
    6774:	e7ad      	b.n	66d2 <__aeabi_dmul+0x386>
    6776:	2501      	movs	r5, #1
    6778:	1a2a      	subs	r2, r5, r0
    677a:	2a38      	cmp	r2, #56	; 0x38
    677c:	dd06      	ble.n	678c <__aeabi_dmul+0x440>
    677e:	9b01      	ldr	r3, [sp, #4]
    6780:	2400      	movs	r4, #0
    6782:	401d      	ands	r5, r3
    6784:	2300      	movs	r3, #0
    6786:	2200      	movs	r2, #0
    6788:	4699      	mov	r9, r3
    678a:	e646      	b.n	641a <__aeabi_dmul+0xce>
    678c:	2a1f      	cmp	r2, #31
    678e:	dc21      	bgt.n	67d4 <__aeabi_dmul+0x488>
    6790:	2520      	movs	r5, #32
    6792:	0020      	movs	r0, r4
    6794:	1aad      	subs	r5, r5, r2
    6796:	001e      	movs	r6, r3
    6798:	40ab      	lsls	r3, r5
    679a:	40a8      	lsls	r0, r5
    679c:	40d6      	lsrs	r6, r2
    679e:	1e5d      	subs	r5, r3, #1
    67a0:	41ab      	sbcs	r3, r5
    67a2:	4330      	orrs	r0, r6
    67a4:	4318      	orrs	r0, r3
    67a6:	40d4      	lsrs	r4, r2
    67a8:	0743      	lsls	r3, r0, #29
    67aa:	d009      	beq.n	67c0 <__aeabi_dmul+0x474>
    67ac:	230f      	movs	r3, #15
    67ae:	4003      	ands	r3, r0
    67b0:	2b04      	cmp	r3, #4
    67b2:	d005      	beq.n	67c0 <__aeabi_dmul+0x474>
    67b4:	0003      	movs	r3, r0
    67b6:	1d18      	adds	r0, r3, #4
    67b8:	4298      	cmp	r0, r3
    67ba:	419b      	sbcs	r3, r3
    67bc:	425b      	negs	r3, r3
    67be:	18e4      	adds	r4, r4, r3
    67c0:	0223      	lsls	r3, r4, #8
    67c2:	d521      	bpl.n	6808 <__aeabi_dmul+0x4bc>
    67c4:	2501      	movs	r5, #1
    67c6:	9b01      	ldr	r3, [sp, #4]
    67c8:	2401      	movs	r4, #1
    67ca:	401d      	ands	r5, r3
    67cc:	2300      	movs	r3, #0
    67ce:	2200      	movs	r2, #0
    67d0:	4699      	mov	r9, r3
    67d2:	e622      	b.n	641a <__aeabi_dmul+0xce>
    67d4:	251f      	movs	r5, #31
    67d6:	0021      	movs	r1, r4
    67d8:	426d      	negs	r5, r5
    67da:	1a28      	subs	r0, r5, r0
    67dc:	40c1      	lsrs	r1, r0
    67de:	0008      	movs	r0, r1
    67e0:	2a20      	cmp	r2, #32
    67e2:	d01d      	beq.n	6820 <__aeabi_dmul+0x4d4>
    67e4:	355f      	adds	r5, #95	; 0x5f
    67e6:	1aaa      	subs	r2, r5, r2
    67e8:	4094      	lsls	r4, r2
    67ea:	4323      	orrs	r3, r4
    67ec:	1e5c      	subs	r4, r3, #1
    67ee:	41a3      	sbcs	r3, r4
    67f0:	2507      	movs	r5, #7
    67f2:	4303      	orrs	r3, r0
    67f4:	401d      	ands	r5, r3
    67f6:	2200      	movs	r2, #0
    67f8:	2d00      	cmp	r5, #0
    67fa:	d009      	beq.n	6810 <__aeabi_dmul+0x4c4>
    67fc:	220f      	movs	r2, #15
    67fe:	2400      	movs	r4, #0
    6800:	401a      	ands	r2, r3
    6802:	0018      	movs	r0, r3
    6804:	2a04      	cmp	r2, #4
    6806:	d1d6      	bne.n	67b6 <__aeabi_dmul+0x46a>
    6808:	0003      	movs	r3, r0
    680a:	0765      	lsls	r5, r4, #29
    680c:	0264      	lsls	r4, r4, #9
    680e:	0b22      	lsrs	r2, r4, #12
    6810:	08db      	lsrs	r3, r3, #3
    6812:	432b      	orrs	r3, r5
    6814:	2501      	movs	r5, #1
    6816:	4699      	mov	r9, r3
    6818:	9b01      	ldr	r3, [sp, #4]
    681a:	2400      	movs	r4, #0
    681c:	401d      	ands	r5, r3
    681e:	e5fc      	b.n	641a <__aeabi_dmul+0xce>
    6820:	2400      	movs	r4, #0
    6822:	e7e2      	b.n	67ea <__aeabi_dmul+0x49e>
    6824:	2280      	movs	r2, #128	; 0x80
    6826:	2501      	movs	r5, #1
    6828:	0312      	lsls	r2, r2, #12
    682a:	4322      	orrs	r2, r4
    682c:	9901      	ldr	r1, [sp, #4]
    682e:	0312      	lsls	r2, r2, #12
    6830:	0b12      	lsrs	r2, r2, #12
    6832:	400d      	ands	r5, r1
    6834:	4699      	mov	r9, r3
    6836:	4c04      	ldr	r4, [pc, #16]	; (6848 <__aeabi_dmul+0x4fc>)
    6838:	e5ef      	b.n	641a <__aeabi_dmul+0xce>
    683a:	46c0      	nop			; (mov r8, r8)
    683c:	000003ff 	.word	0x000003ff
    6840:	feffffff 	.word	0xfeffffff
    6844:	000007fe 	.word	0x000007fe
    6848:	000007ff 	.word	0x000007ff

0000684c <__aeabi_dsub>:
    684c:	b5f0      	push	{r4, r5, r6, r7, lr}
    684e:	4646      	mov	r6, r8
    6850:	46d6      	mov	lr, sl
    6852:	464f      	mov	r7, r9
    6854:	030c      	lsls	r4, r1, #12
    6856:	b5c0      	push	{r6, r7, lr}
    6858:	0fcd      	lsrs	r5, r1, #31
    685a:	004e      	lsls	r6, r1, #1
    685c:	0a61      	lsrs	r1, r4, #9
    685e:	0f44      	lsrs	r4, r0, #29
    6860:	430c      	orrs	r4, r1
    6862:	00c1      	lsls	r1, r0, #3
    6864:	0058      	lsls	r0, r3, #1
    6866:	0d40      	lsrs	r0, r0, #21
    6868:	4684      	mov	ip, r0
    686a:	468a      	mov	sl, r1
    686c:	000f      	movs	r7, r1
    686e:	0319      	lsls	r1, r3, #12
    6870:	0f50      	lsrs	r0, r2, #29
    6872:	0a49      	lsrs	r1, r1, #9
    6874:	4301      	orrs	r1, r0
    6876:	48c6      	ldr	r0, [pc, #792]	; (6b90 <__aeabi_dsub+0x344>)
    6878:	0d76      	lsrs	r6, r6, #21
    687a:	46a8      	mov	r8, r5
    687c:	0fdb      	lsrs	r3, r3, #31
    687e:	00d2      	lsls	r2, r2, #3
    6880:	4584      	cmp	ip, r0
    6882:	d100      	bne.n	6886 <__aeabi_dsub+0x3a>
    6884:	e0d8      	b.n	6a38 <__aeabi_dsub+0x1ec>
    6886:	2001      	movs	r0, #1
    6888:	4043      	eors	r3, r0
    688a:	42ab      	cmp	r3, r5
    688c:	d100      	bne.n	6890 <__aeabi_dsub+0x44>
    688e:	e0a6      	b.n	69de <__aeabi_dsub+0x192>
    6890:	4660      	mov	r0, ip
    6892:	1a35      	subs	r5, r6, r0
    6894:	2d00      	cmp	r5, #0
    6896:	dc00      	bgt.n	689a <__aeabi_dsub+0x4e>
    6898:	e105      	b.n	6aa6 <__aeabi_dsub+0x25a>
    689a:	2800      	cmp	r0, #0
    689c:	d110      	bne.n	68c0 <__aeabi_dsub+0x74>
    689e:	000b      	movs	r3, r1
    68a0:	4313      	orrs	r3, r2
    68a2:	d100      	bne.n	68a6 <__aeabi_dsub+0x5a>
    68a4:	e0d7      	b.n	6a56 <__aeabi_dsub+0x20a>
    68a6:	1e6b      	subs	r3, r5, #1
    68a8:	2b00      	cmp	r3, #0
    68aa:	d000      	beq.n	68ae <__aeabi_dsub+0x62>
    68ac:	e14b      	b.n	6b46 <__aeabi_dsub+0x2fa>
    68ae:	4653      	mov	r3, sl
    68b0:	1a9f      	subs	r7, r3, r2
    68b2:	45ba      	cmp	sl, r7
    68b4:	4180      	sbcs	r0, r0
    68b6:	1a64      	subs	r4, r4, r1
    68b8:	4240      	negs	r0, r0
    68ba:	1a24      	subs	r4, r4, r0
    68bc:	2601      	movs	r6, #1
    68be:	e01e      	b.n	68fe <__aeabi_dsub+0xb2>
    68c0:	4bb3      	ldr	r3, [pc, #716]	; (6b90 <__aeabi_dsub+0x344>)
    68c2:	429e      	cmp	r6, r3
    68c4:	d048      	beq.n	6958 <__aeabi_dsub+0x10c>
    68c6:	2380      	movs	r3, #128	; 0x80
    68c8:	041b      	lsls	r3, r3, #16
    68ca:	4319      	orrs	r1, r3
    68cc:	2d38      	cmp	r5, #56	; 0x38
    68ce:	dd00      	ble.n	68d2 <__aeabi_dsub+0x86>
    68d0:	e119      	b.n	6b06 <__aeabi_dsub+0x2ba>
    68d2:	2d1f      	cmp	r5, #31
    68d4:	dd00      	ble.n	68d8 <__aeabi_dsub+0x8c>
    68d6:	e14c      	b.n	6b72 <__aeabi_dsub+0x326>
    68d8:	2320      	movs	r3, #32
    68da:	000f      	movs	r7, r1
    68dc:	1b5b      	subs	r3, r3, r5
    68de:	0010      	movs	r0, r2
    68e0:	409a      	lsls	r2, r3
    68e2:	409f      	lsls	r7, r3
    68e4:	40e8      	lsrs	r0, r5
    68e6:	1e53      	subs	r3, r2, #1
    68e8:	419a      	sbcs	r2, r3
    68ea:	40e9      	lsrs	r1, r5
    68ec:	4307      	orrs	r7, r0
    68ee:	4317      	orrs	r7, r2
    68f0:	4653      	mov	r3, sl
    68f2:	1bdf      	subs	r7, r3, r7
    68f4:	1a61      	subs	r1, r4, r1
    68f6:	45ba      	cmp	sl, r7
    68f8:	41a4      	sbcs	r4, r4
    68fa:	4264      	negs	r4, r4
    68fc:	1b0c      	subs	r4, r1, r4
    68fe:	0223      	lsls	r3, r4, #8
    6900:	d400      	bmi.n	6904 <__aeabi_dsub+0xb8>
    6902:	e0c5      	b.n	6a90 <__aeabi_dsub+0x244>
    6904:	0264      	lsls	r4, r4, #9
    6906:	0a65      	lsrs	r5, r4, #9
    6908:	2d00      	cmp	r5, #0
    690a:	d100      	bne.n	690e <__aeabi_dsub+0xc2>
    690c:	e0f6      	b.n	6afc <__aeabi_dsub+0x2b0>
    690e:	0028      	movs	r0, r5
    6910:	f000 fc5c 	bl	71cc <__clzsi2>
    6914:	0003      	movs	r3, r0
    6916:	3b08      	subs	r3, #8
    6918:	2b1f      	cmp	r3, #31
    691a:	dd00      	ble.n	691e <__aeabi_dsub+0xd2>
    691c:	e0e9      	b.n	6af2 <__aeabi_dsub+0x2a6>
    691e:	2220      	movs	r2, #32
    6920:	003c      	movs	r4, r7
    6922:	1ad2      	subs	r2, r2, r3
    6924:	409d      	lsls	r5, r3
    6926:	40d4      	lsrs	r4, r2
    6928:	409f      	lsls	r7, r3
    692a:	4325      	orrs	r5, r4
    692c:	429e      	cmp	r6, r3
    692e:	dd00      	ble.n	6932 <__aeabi_dsub+0xe6>
    6930:	e0db      	b.n	6aea <__aeabi_dsub+0x29e>
    6932:	1b9e      	subs	r6, r3, r6
    6934:	1c73      	adds	r3, r6, #1
    6936:	2b1f      	cmp	r3, #31
    6938:	dd00      	ble.n	693c <__aeabi_dsub+0xf0>
    693a:	e10a      	b.n	6b52 <__aeabi_dsub+0x306>
    693c:	2220      	movs	r2, #32
    693e:	0038      	movs	r0, r7
    6940:	1ad2      	subs	r2, r2, r3
    6942:	0029      	movs	r1, r5
    6944:	4097      	lsls	r7, r2
    6946:	002c      	movs	r4, r5
    6948:	4091      	lsls	r1, r2
    694a:	40d8      	lsrs	r0, r3
    694c:	1e7a      	subs	r2, r7, #1
    694e:	4197      	sbcs	r7, r2
    6950:	40dc      	lsrs	r4, r3
    6952:	2600      	movs	r6, #0
    6954:	4301      	orrs	r1, r0
    6956:	430f      	orrs	r7, r1
    6958:	077b      	lsls	r3, r7, #29
    695a:	d009      	beq.n	6970 <__aeabi_dsub+0x124>
    695c:	230f      	movs	r3, #15
    695e:	403b      	ands	r3, r7
    6960:	2b04      	cmp	r3, #4
    6962:	d005      	beq.n	6970 <__aeabi_dsub+0x124>
    6964:	1d3b      	adds	r3, r7, #4
    6966:	42bb      	cmp	r3, r7
    6968:	41bf      	sbcs	r7, r7
    696a:	427f      	negs	r7, r7
    696c:	19e4      	adds	r4, r4, r7
    696e:	001f      	movs	r7, r3
    6970:	0223      	lsls	r3, r4, #8
    6972:	d525      	bpl.n	69c0 <__aeabi_dsub+0x174>
    6974:	4b86      	ldr	r3, [pc, #536]	; (6b90 <__aeabi_dsub+0x344>)
    6976:	3601      	adds	r6, #1
    6978:	429e      	cmp	r6, r3
    697a:	d100      	bne.n	697e <__aeabi_dsub+0x132>
    697c:	e0af      	b.n	6ade <__aeabi_dsub+0x292>
    697e:	4b85      	ldr	r3, [pc, #532]	; (6b94 <__aeabi_dsub+0x348>)
    6980:	2501      	movs	r5, #1
    6982:	401c      	ands	r4, r3
    6984:	4643      	mov	r3, r8
    6986:	0762      	lsls	r2, r4, #29
    6988:	08ff      	lsrs	r7, r7, #3
    698a:	0264      	lsls	r4, r4, #9
    698c:	0576      	lsls	r6, r6, #21
    698e:	4317      	orrs	r7, r2
    6990:	0b24      	lsrs	r4, r4, #12
    6992:	0d76      	lsrs	r6, r6, #21
    6994:	401d      	ands	r5, r3
    6996:	2100      	movs	r1, #0
    6998:	0324      	lsls	r4, r4, #12
    699a:	0b23      	lsrs	r3, r4, #12
    699c:	0d0c      	lsrs	r4, r1, #20
    699e:	4a7e      	ldr	r2, [pc, #504]	; (6b98 <__aeabi_dsub+0x34c>)
    69a0:	0524      	lsls	r4, r4, #20
    69a2:	431c      	orrs	r4, r3
    69a4:	4014      	ands	r4, r2
    69a6:	0533      	lsls	r3, r6, #20
    69a8:	4323      	orrs	r3, r4
    69aa:	005b      	lsls	r3, r3, #1
    69ac:	07ed      	lsls	r5, r5, #31
    69ae:	085b      	lsrs	r3, r3, #1
    69b0:	432b      	orrs	r3, r5
    69b2:	0038      	movs	r0, r7
    69b4:	0019      	movs	r1, r3
    69b6:	bc1c      	pop	{r2, r3, r4}
    69b8:	4690      	mov	r8, r2
    69ba:	4699      	mov	r9, r3
    69bc:	46a2      	mov	sl, r4
    69be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    69c0:	2501      	movs	r5, #1
    69c2:	4643      	mov	r3, r8
    69c4:	0762      	lsls	r2, r4, #29
    69c6:	08ff      	lsrs	r7, r7, #3
    69c8:	4317      	orrs	r7, r2
    69ca:	08e4      	lsrs	r4, r4, #3
    69cc:	401d      	ands	r5, r3
    69ce:	4b70      	ldr	r3, [pc, #448]	; (6b90 <__aeabi_dsub+0x344>)
    69d0:	429e      	cmp	r6, r3
    69d2:	d036      	beq.n	6a42 <__aeabi_dsub+0x1f6>
    69d4:	0324      	lsls	r4, r4, #12
    69d6:	0576      	lsls	r6, r6, #21
    69d8:	0b24      	lsrs	r4, r4, #12
    69da:	0d76      	lsrs	r6, r6, #21
    69dc:	e7db      	b.n	6996 <__aeabi_dsub+0x14a>
    69de:	4663      	mov	r3, ip
    69e0:	1af3      	subs	r3, r6, r3
    69e2:	2b00      	cmp	r3, #0
    69e4:	dc00      	bgt.n	69e8 <__aeabi_dsub+0x19c>
    69e6:	e094      	b.n	6b12 <__aeabi_dsub+0x2c6>
    69e8:	4660      	mov	r0, ip
    69ea:	2800      	cmp	r0, #0
    69ec:	d035      	beq.n	6a5a <__aeabi_dsub+0x20e>
    69ee:	4868      	ldr	r0, [pc, #416]	; (6b90 <__aeabi_dsub+0x344>)
    69f0:	4286      	cmp	r6, r0
    69f2:	d0b1      	beq.n	6958 <__aeabi_dsub+0x10c>
    69f4:	2780      	movs	r7, #128	; 0x80
    69f6:	043f      	lsls	r7, r7, #16
    69f8:	4339      	orrs	r1, r7
    69fa:	2b38      	cmp	r3, #56	; 0x38
    69fc:	dc00      	bgt.n	6a00 <__aeabi_dsub+0x1b4>
    69fe:	e0fd      	b.n	6bfc <__aeabi_dsub+0x3b0>
    6a00:	430a      	orrs	r2, r1
    6a02:	0017      	movs	r7, r2
    6a04:	2100      	movs	r1, #0
    6a06:	1e7a      	subs	r2, r7, #1
    6a08:	4197      	sbcs	r7, r2
    6a0a:	4457      	add	r7, sl
    6a0c:	4557      	cmp	r7, sl
    6a0e:	4180      	sbcs	r0, r0
    6a10:	1909      	adds	r1, r1, r4
    6a12:	4244      	negs	r4, r0
    6a14:	190c      	adds	r4, r1, r4
    6a16:	0223      	lsls	r3, r4, #8
    6a18:	d53a      	bpl.n	6a90 <__aeabi_dsub+0x244>
    6a1a:	4b5d      	ldr	r3, [pc, #372]	; (6b90 <__aeabi_dsub+0x344>)
    6a1c:	3601      	adds	r6, #1
    6a1e:	429e      	cmp	r6, r3
    6a20:	d100      	bne.n	6a24 <__aeabi_dsub+0x1d8>
    6a22:	e14b      	b.n	6cbc <__aeabi_dsub+0x470>
    6a24:	2201      	movs	r2, #1
    6a26:	4b5b      	ldr	r3, [pc, #364]	; (6b94 <__aeabi_dsub+0x348>)
    6a28:	401c      	ands	r4, r3
    6a2a:	087b      	lsrs	r3, r7, #1
    6a2c:	4017      	ands	r7, r2
    6a2e:	431f      	orrs	r7, r3
    6a30:	07e2      	lsls	r2, r4, #31
    6a32:	4317      	orrs	r7, r2
    6a34:	0864      	lsrs	r4, r4, #1
    6a36:	e78f      	b.n	6958 <__aeabi_dsub+0x10c>
    6a38:	0008      	movs	r0, r1
    6a3a:	4310      	orrs	r0, r2
    6a3c:	d000      	beq.n	6a40 <__aeabi_dsub+0x1f4>
    6a3e:	e724      	b.n	688a <__aeabi_dsub+0x3e>
    6a40:	e721      	b.n	6886 <__aeabi_dsub+0x3a>
    6a42:	0023      	movs	r3, r4
    6a44:	433b      	orrs	r3, r7
    6a46:	d100      	bne.n	6a4a <__aeabi_dsub+0x1fe>
    6a48:	e1b9      	b.n	6dbe <__aeabi_dsub+0x572>
    6a4a:	2280      	movs	r2, #128	; 0x80
    6a4c:	0312      	lsls	r2, r2, #12
    6a4e:	4314      	orrs	r4, r2
    6a50:	0324      	lsls	r4, r4, #12
    6a52:	0b24      	lsrs	r4, r4, #12
    6a54:	e79f      	b.n	6996 <__aeabi_dsub+0x14a>
    6a56:	002e      	movs	r6, r5
    6a58:	e77e      	b.n	6958 <__aeabi_dsub+0x10c>
    6a5a:	0008      	movs	r0, r1
    6a5c:	4310      	orrs	r0, r2
    6a5e:	d100      	bne.n	6a62 <__aeabi_dsub+0x216>
    6a60:	e0ca      	b.n	6bf8 <__aeabi_dsub+0x3ac>
    6a62:	1e58      	subs	r0, r3, #1
    6a64:	4684      	mov	ip, r0
    6a66:	2800      	cmp	r0, #0
    6a68:	d000      	beq.n	6a6c <__aeabi_dsub+0x220>
    6a6a:	e0e7      	b.n	6c3c <__aeabi_dsub+0x3f0>
    6a6c:	4452      	add	r2, sl
    6a6e:	4552      	cmp	r2, sl
    6a70:	4180      	sbcs	r0, r0
    6a72:	1864      	adds	r4, r4, r1
    6a74:	4240      	negs	r0, r0
    6a76:	1824      	adds	r4, r4, r0
    6a78:	0017      	movs	r7, r2
    6a7a:	2601      	movs	r6, #1
    6a7c:	0223      	lsls	r3, r4, #8
    6a7e:	d507      	bpl.n	6a90 <__aeabi_dsub+0x244>
    6a80:	2602      	movs	r6, #2
    6a82:	e7cf      	b.n	6a24 <__aeabi_dsub+0x1d8>
    6a84:	4664      	mov	r4, ip
    6a86:	432c      	orrs	r4, r5
    6a88:	d100      	bne.n	6a8c <__aeabi_dsub+0x240>
    6a8a:	e1b3      	b.n	6df4 <__aeabi_dsub+0x5a8>
    6a8c:	002c      	movs	r4, r5
    6a8e:	4667      	mov	r7, ip
    6a90:	077b      	lsls	r3, r7, #29
    6a92:	d000      	beq.n	6a96 <__aeabi_dsub+0x24a>
    6a94:	e762      	b.n	695c <__aeabi_dsub+0x110>
    6a96:	0763      	lsls	r3, r4, #29
    6a98:	08ff      	lsrs	r7, r7, #3
    6a9a:	431f      	orrs	r7, r3
    6a9c:	2501      	movs	r5, #1
    6a9e:	4643      	mov	r3, r8
    6aa0:	08e4      	lsrs	r4, r4, #3
    6aa2:	401d      	ands	r5, r3
    6aa4:	e793      	b.n	69ce <__aeabi_dsub+0x182>
    6aa6:	2d00      	cmp	r5, #0
    6aa8:	d178      	bne.n	6b9c <__aeabi_dsub+0x350>
    6aaa:	1c75      	adds	r5, r6, #1
    6aac:	056d      	lsls	r5, r5, #21
    6aae:	0d6d      	lsrs	r5, r5, #21
    6ab0:	2d01      	cmp	r5, #1
    6ab2:	dc00      	bgt.n	6ab6 <__aeabi_dsub+0x26a>
    6ab4:	e0f2      	b.n	6c9c <__aeabi_dsub+0x450>
    6ab6:	4650      	mov	r0, sl
    6ab8:	1a80      	subs	r0, r0, r2
    6aba:	4582      	cmp	sl, r0
    6abc:	41bf      	sbcs	r7, r7
    6abe:	1a65      	subs	r5, r4, r1
    6ac0:	427f      	negs	r7, r7
    6ac2:	1bed      	subs	r5, r5, r7
    6ac4:	4684      	mov	ip, r0
    6ac6:	0228      	lsls	r0, r5, #8
    6ac8:	d400      	bmi.n	6acc <__aeabi_dsub+0x280>
    6aca:	e08c      	b.n	6be6 <__aeabi_dsub+0x39a>
    6acc:	4650      	mov	r0, sl
    6ace:	1a17      	subs	r7, r2, r0
    6ad0:	42ba      	cmp	r2, r7
    6ad2:	4192      	sbcs	r2, r2
    6ad4:	1b0c      	subs	r4, r1, r4
    6ad6:	4255      	negs	r5, r2
    6ad8:	1b65      	subs	r5, r4, r5
    6ada:	4698      	mov	r8, r3
    6adc:	e714      	b.n	6908 <__aeabi_dsub+0xbc>
    6ade:	2501      	movs	r5, #1
    6ae0:	4643      	mov	r3, r8
    6ae2:	2400      	movs	r4, #0
    6ae4:	401d      	ands	r5, r3
    6ae6:	2700      	movs	r7, #0
    6ae8:	e755      	b.n	6996 <__aeabi_dsub+0x14a>
    6aea:	4c2a      	ldr	r4, [pc, #168]	; (6b94 <__aeabi_dsub+0x348>)
    6aec:	1af6      	subs	r6, r6, r3
    6aee:	402c      	ands	r4, r5
    6af0:	e732      	b.n	6958 <__aeabi_dsub+0x10c>
    6af2:	003d      	movs	r5, r7
    6af4:	3828      	subs	r0, #40	; 0x28
    6af6:	4085      	lsls	r5, r0
    6af8:	2700      	movs	r7, #0
    6afa:	e717      	b.n	692c <__aeabi_dsub+0xe0>
    6afc:	0038      	movs	r0, r7
    6afe:	f000 fb65 	bl	71cc <__clzsi2>
    6b02:	3020      	adds	r0, #32
    6b04:	e706      	b.n	6914 <__aeabi_dsub+0xc8>
    6b06:	430a      	orrs	r2, r1
    6b08:	0017      	movs	r7, r2
    6b0a:	2100      	movs	r1, #0
    6b0c:	1e7a      	subs	r2, r7, #1
    6b0e:	4197      	sbcs	r7, r2
    6b10:	e6ee      	b.n	68f0 <__aeabi_dsub+0xa4>
    6b12:	2b00      	cmp	r3, #0
    6b14:	d000      	beq.n	6b18 <__aeabi_dsub+0x2cc>
    6b16:	e0e5      	b.n	6ce4 <__aeabi_dsub+0x498>
    6b18:	1c73      	adds	r3, r6, #1
    6b1a:	469c      	mov	ip, r3
    6b1c:	055b      	lsls	r3, r3, #21
    6b1e:	0d5b      	lsrs	r3, r3, #21
    6b20:	2b01      	cmp	r3, #1
    6b22:	dc00      	bgt.n	6b26 <__aeabi_dsub+0x2da>
    6b24:	e09f      	b.n	6c66 <__aeabi_dsub+0x41a>
    6b26:	4b1a      	ldr	r3, [pc, #104]	; (6b90 <__aeabi_dsub+0x344>)
    6b28:	459c      	cmp	ip, r3
    6b2a:	d100      	bne.n	6b2e <__aeabi_dsub+0x2e2>
    6b2c:	e0c5      	b.n	6cba <__aeabi_dsub+0x46e>
    6b2e:	4452      	add	r2, sl
    6b30:	4552      	cmp	r2, sl
    6b32:	4180      	sbcs	r0, r0
    6b34:	1864      	adds	r4, r4, r1
    6b36:	4240      	negs	r0, r0
    6b38:	1824      	adds	r4, r4, r0
    6b3a:	07e7      	lsls	r7, r4, #31
    6b3c:	0852      	lsrs	r2, r2, #1
    6b3e:	4317      	orrs	r7, r2
    6b40:	0864      	lsrs	r4, r4, #1
    6b42:	4666      	mov	r6, ip
    6b44:	e708      	b.n	6958 <__aeabi_dsub+0x10c>
    6b46:	4812      	ldr	r0, [pc, #72]	; (6b90 <__aeabi_dsub+0x344>)
    6b48:	4285      	cmp	r5, r0
    6b4a:	d100      	bne.n	6b4e <__aeabi_dsub+0x302>
    6b4c:	e085      	b.n	6c5a <__aeabi_dsub+0x40e>
    6b4e:	001d      	movs	r5, r3
    6b50:	e6bc      	b.n	68cc <__aeabi_dsub+0x80>
    6b52:	0029      	movs	r1, r5
    6b54:	3e1f      	subs	r6, #31
    6b56:	40f1      	lsrs	r1, r6
    6b58:	2b20      	cmp	r3, #32
    6b5a:	d100      	bne.n	6b5e <__aeabi_dsub+0x312>
    6b5c:	e07f      	b.n	6c5e <__aeabi_dsub+0x412>
    6b5e:	2240      	movs	r2, #64	; 0x40
    6b60:	1ad3      	subs	r3, r2, r3
    6b62:	409d      	lsls	r5, r3
    6b64:	432f      	orrs	r7, r5
    6b66:	1e7d      	subs	r5, r7, #1
    6b68:	41af      	sbcs	r7, r5
    6b6a:	2400      	movs	r4, #0
    6b6c:	430f      	orrs	r7, r1
    6b6e:	2600      	movs	r6, #0
    6b70:	e78e      	b.n	6a90 <__aeabi_dsub+0x244>
    6b72:	002b      	movs	r3, r5
    6b74:	000f      	movs	r7, r1
    6b76:	3b20      	subs	r3, #32
    6b78:	40df      	lsrs	r7, r3
    6b7a:	2d20      	cmp	r5, #32
    6b7c:	d071      	beq.n	6c62 <__aeabi_dsub+0x416>
    6b7e:	2340      	movs	r3, #64	; 0x40
    6b80:	1b5d      	subs	r5, r3, r5
    6b82:	40a9      	lsls	r1, r5
    6b84:	430a      	orrs	r2, r1
    6b86:	1e51      	subs	r1, r2, #1
    6b88:	418a      	sbcs	r2, r1
    6b8a:	2100      	movs	r1, #0
    6b8c:	4317      	orrs	r7, r2
    6b8e:	e6af      	b.n	68f0 <__aeabi_dsub+0xa4>
    6b90:	000007ff 	.word	0x000007ff
    6b94:	ff7fffff 	.word	0xff7fffff
    6b98:	800fffff 	.word	0x800fffff
    6b9c:	2e00      	cmp	r6, #0
    6b9e:	d03e      	beq.n	6c1e <__aeabi_dsub+0x3d2>
    6ba0:	4eb3      	ldr	r6, [pc, #716]	; (6e70 <__aeabi_dsub+0x624>)
    6ba2:	45b4      	cmp	ip, r6
    6ba4:	d045      	beq.n	6c32 <__aeabi_dsub+0x3e6>
    6ba6:	2680      	movs	r6, #128	; 0x80
    6ba8:	0436      	lsls	r6, r6, #16
    6baa:	426d      	negs	r5, r5
    6bac:	4334      	orrs	r4, r6
    6bae:	2d38      	cmp	r5, #56	; 0x38
    6bb0:	dd00      	ble.n	6bb4 <__aeabi_dsub+0x368>
    6bb2:	e0a8      	b.n	6d06 <__aeabi_dsub+0x4ba>
    6bb4:	2d1f      	cmp	r5, #31
    6bb6:	dd00      	ble.n	6bba <__aeabi_dsub+0x36e>
    6bb8:	e11f      	b.n	6dfa <__aeabi_dsub+0x5ae>
    6bba:	2620      	movs	r6, #32
    6bbc:	0027      	movs	r7, r4
    6bbe:	4650      	mov	r0, sl
    6bc0:	1b76      	subs	r6, r6, r5
    6bc2:	40b7      	lsls	r7, r6
    6bc4:	40e8      	lsrs	r0, r5
    6bc6:	4307      	orrs	r7, r0
    6bc8:	4650      	mov	r0, sl
    6bca:	40b0      	lsls	r0, r6
    6bcc:	1e46      	subs	r6, r0, #1
    6bce:	41b0      	sbcs	r0, r6
    6bd0:	40ec      	lsrs	r4, r5
    6bd2:	4338      	orrs	r0, r7
    6bd4:	1a17      	subs	r7, r2, r0
    6bd6:	42ba      	cmp	r2, r7
    6bd8:	4192      	sbcs	r2, r2
    6bda:	1b0c      	subs	r4, r1, r4
    6bdc:	4252      	negs	r2, r2
    6bde:	1aa4      	subs	r4, r4, r2
    6be0:	4666      	mov	r6, ip
    6be2:	4698      	mov	r8, r3
    6be4:	e68b      	b.n	68fe <__aeabi_dsub+0xb2>
    6be6:	4664      	mov	r4, ip
    6be8:	4667      	mov	r7, ip
    6bea:	432c      	orrs	r4, r5
    6bec:	d000      	beq.n	6bf0 <__aeabi_dsub+0x3a4>
    6bee:	e68b      	b.n	6908 <__aeabi_dsub+0xbc>
    6bf0:	2500      	movs	r5, #0
    6bf2:	2600      	movs	r6, #0
    6bf4:	2700      	movs	r7, #0
    6bf6:	e6ea      	b.n	69ce <__aeabi_dsub+0x182>
    6bf8:	001e      	movs	r6, r3
    6bfa:	e6ad      	b.n	6958 <__aeabi_dsub+0x10c>
    6bfc:	2b1f      	cmp	r3, #31
    6bfe:	dc60      	bgt.n	6cc2 <__aeabi_dsub+0x476>
    6c00:	2720      	movs	r7, #32
    6c02:	1af8      	subs	r0, r7, r3
    6c04:	000f      	movs	r7, r1
    6c06:	4684      	mov	ip, r0
    6c08:	4087      	lsls	r7, r0
    6c0a:	0010      	movs	r0, r2
    6c0c:	40d8      	lsrs	r0, r3
    6c0e:	4307      	orrs	r7, r0
    6c10:	4660      	mov	r0, ip
    6c12:	4082      	lsls	r2, r0
    6c14:	1e50      	subs	r0, r2, #1
    6c16:	4182      	sbcs	r2, r0
    6c18:	40d9      	lsrs	r1, r3
    6c1a:	4317      	orrs	r7, r2
    6c1c:	e6f5      	b.n	6a0a <__aeabi_dsub+0x1be>
    6c1e:	0026      	movs	r6, r4
    6c20:	4650      	mov	r0, sl
    6c22:	4306      	orrs	r6, r0
    6c24:	d005      	beq.n	6c32 <__aeabi_dsub+0x3e6>
    6c26:	43ed      	mvns	r5, r5
    6c28:	2d00      	cmp	r5, #0
    6c2a:	d0d3      	beq.n	6bd4 <__aeabi_dsub+0x388>
    6c2c:	4e90      	ldr	r6, [pc, #576]	; (6e70 <__aeabi_dsub+0x624>)
    6c2e:	45b4      	cmp	ip, r6
    6c30:	d1bd      	bne.n	6bae <__aeabi_dsub+0x362>
    6c32:	000c      	movs	r4, r1
    6c34:	0017      	movs	r7, r2
    6c36:	4666      	mov	r6, ip
    6c38:	4698      	mov	r8, r3
    6c3a:	e68d      	b.n	6958 <__aeabi_dsub+0x10c>
    6c3c:	488c      	ldr	r0, [pc, #560]	; (6e70 <__aeabi_dsub+0x624>)
    6c3e:	4283      	cmp	r3, r0
    6c40:	d00b      	beq.n	6c5a <__aeabi_dsub+0x40e>
    6c42:	4663      	mov	r3, ip
    6c44:	e6d9      	b.n	69fa <__aeabi_dsub+0x1ae>
    6c46:	2d00      	cmp	r5, #0
    6c48:	d000      	beq.n	6c4c <__aeabi_dsub+0x400>
    6c4a:	e096      	b.n	6d7a <__aeabi_dsub+0x52e>
    6c4c:	0008      	movs	r0, r1
    6c4e:	4310      	orrs	r0, r2
    6c50:	d100      	bne.n	6c54 <__aeabi_dsub+0x408>
    6c52:	e0e2      	b.n	6e1a <__aeabi_dsub+0x5ce>
    6c54:	000c      	movs	r4, r1
    6c56:	0017      	movs	r7, r2
    6c58:	4698      	mov	r8, r3
    6c5a:	4e85      	ldr	r6, [pc, #532]	; (6e70 <__aeabi_dsub+0x624>)
    6c5c:	e67c      	b.n	6958 <__aeabi_dsub+0x10c>
    6c5e:	2500      	movs	r5, #0
    6c60:	e780      	b.n	6b64 <__aeabi_dsub+0x318>
    6c62:	2100      	movs	r1, #0
    6c64:	e78e      	b.n	6b84 <__aeabi_dsub+0x338>
    6c66:	0023      	movs	r3, r4
    6c68:	4650      	mov	r0, sl
    6c6a:	4303      	orrs	r3, r0
    6c6c:	2e00      	cmp	r6, #0
    6c6e:	d000      	beq.n	6c72 <__aeabi_dsub+0x426>
    6c70:	e0a8      	b.n	6dc4 <__aeabi_dsub+0x578>
    6c72:	2b00      	cmp	r3, #0
    6c74:	d100      	bne.n	6c78 <__aeabi_dsub+0x42c>
    6c76:	e0de      	b.n	6e36 <__aeabi_dsub+0x5ea>
    6c78:	000b      	movs	r3, r1
    6c7a:	4313      	orrs	r3, r2
    6c7c:	d100      	bne.n	6c80 <__aeabi_dsub+0x434>
    6c7e:	e66b      	b.n	6958 <__aeabi_dsub+0x10c>
    6c80:	4452      	add	r2, sl
    6c82:	4552      	cmp	r2, sl
    6c84:	4180      	sbcs	r0, r0
    6c86:	1864      	adds	r4, r4, r1
    6c88:	4240      	negs	r0, r0
    6c8a:	1824      	adds	r4, r4, r0
    6c8c:	0017      	movs	r7, r2
    6c8e:	0223      	lsls	r3, r4, #8
    6c90:	d400      	bmi.n	6c94 <__aeabi_dsub+0x448>
    6c92:	e6fd      	b.n	6a90 <__aeabi_dsub+0x244>
    6c94:	4b77      	ldr	r3, [pc, #476]	; (6e74 <__aeabi_dsub+0x628>)
    6c96:	4666      	mov	r6, ip
    6c98:	401c      	ands	r4, r3
    6c9a:	e65d      	b.n	6958 <__aeabi_dsub+0x10c>
    6c9c:	0025      	movs	r5, r4
    6c9e:	4650      	mov	r0, sl
    6ca0:	4305      	orrs	r5, r0
    6ca2:	2e00      	cmp	r6, #0
    6ca4:	d1cf      	bne.n	6c46 <__aeabi_dsub+0x3fa>
    6ca6:	2d00      	cmp	r5, #0
    6ca8:	d14f      	bne.n	6d4a <__aeabi_dsub+0x4fe>
    6caa:	000c      	movs	r4, r1
    6cac:	4314      	orrs	r4, r2
    6cae:	d100      	bne.n	6cb2 <__aeabi_dsub+0x466>
    6cb0:	e0a0      	b.n	6df4 <__aeabi_dsub+0x5a8>
    6cb2:	000c      	movs	r4, r1
    6cb4:	0017      	movs	r7, r2
    6cb6:	4698      	mov	r8, r3
    6cb8:	e64e      	b.n	6958 <__aeabi_dsub+0x10c>
    6cba:	4666      	mov	r6, ip
    6cbc:	2400      	movs	r4, #0
    6cbe:	2700      	movs	r7, #0
    6cc0:	e685      	b.n	69ce <__aeabi_dsub+0x182>
    6cc2:	001f      	movs	r7, r3
    6cc4:	0008      	movs	r0, r1
    6cc6:	3f20      	subs	r7, #32
    6cc8:	40f8      	lsrs	r0, r7
    6cca:	0007      	movs	r7, r0
    6ccc:	2b20      	cmp	r3, #32
    6cce:	d100      	bne.n	6cd2 <__aeabi_dsub+0x486>
    6cd0:	e08e      	b.n	6df0 <__aeabi_dsub+0x5a4>
    6cd2:	2040      	movs	r0, #64	; 0x40
    6cd4:	1ac3      	subs	r3, r0, r3
    6cd6:	4099      	lsls	r1, r3
    6cd8:	430a      	orrs	r2, r1
    6cda:	1e51      	subs	r1, r2, #1
    6cdc:	418a      	sbcs	r2, r1
    6cde:	2100      	movs	r1, #0
    6ce0:	4317      	orrs	r7, r2
    6ce2:	e692      	b.n	6a0a <__aeabi_dsub+0x1be>
    6ce4:	2e00      	cmp	r6, #0
    6ce6:	d114      	bne.n	6d12 <__aeabi_dsub+0x4c6>
    6ce8:	0026      	movs	r6, r4
    6cea:	4650      	mov	r0, sl
    6cec:	4306      	orrs	r6, r0
    6cee:	d062      	beq.n	6db6 <__aeabi_dsub+0x56a>
    6cf0:	43db      	mvns	r3, r3
    6cf2:	2b00      	cmp	r3, #0
    6cf4:	d15c      	bne.n	6db0 <__aeabi_dsub+0x564>
    6cf6:	1887      	adds	r7, r0, r2
    6cf8:	4297      	cmp	r7, r2
    6cfa:	4192      	sbcs	r2, r2
    6cfc:	1864      	adds	r4, r4, r1
    6cfe:	4252      	negs	r2, r2
    6d00:	18a4      	adds	r4, r4, r2
    6d02:	4666      	mov	r6, ip
    6d04:	e687      	b.n	6a16 <__aeabi_dsub+0x1ca>
    6d06:	4650      	mov	r0, sl
    6d08:	4320      	orrs	r0, r4
    6d0a:	1e44      	subs	r4, r0, #1
    6d0c:	41a0      	sbcs	r0, r4
    6d0e:	2400      	movs	r4, #0
    6d10:	e760      	b.n	6bd4 <__aeabi_dsub+0x388>
    6d12:	4e57      	ldr	r6, [pc, #348]	; (6e70 <__aeabi_dsub+0x624>)
    6d14:	45b4      	cmp	ip, r6
    6d16:	d04e      	beq.n	6db6 <__aeabi_dsub+0x56a>
    6d18:	2680      	movs	r6, #128	; 0x80
    6d1a:	0436      	lsls	r6, r6, #16
    6d1c:	425b      	negs	r3, r3
    6d1e:	4334      	orrs	r4, r6
    6d20:	2b38      	cmp	r3, #56	; 0x38
    6d22:	dd00      	ble.n	6d26 <__aeabi_dsub+0x4da>
    6d24:	e07f      	b.n	6e26 <__aeabi_dsub+0x5da>
    6d26:	2b1f      	cmp	r3, #31
    6d28:	dd00      	ble.n	6d2c <__aeabi_dsub+0x4e0>
    6d2a:	e08b      	b.n	6e44 <__aeabi_dsub+0x5f8>
    6d2c:	2620      	movs	r6, #32
    6d2e:	0027      	movs	r7, r4
    6d30:	4650      	mov	r0, sl
    6d32:	1af6      	subs	r6, r6, r3
    6d34:	40b7      	lsls	r7, r6
    6d36:	40d8      	lsrs	r0, r3
    6d38:	4307      	orrs	r7, r0
    6d3a:	4650      	mov	r0, sl
    6d3c:	40b0      	lsls	r0, r6
    6d3e:	1e46      	subs	r6, r0, #1
    6d40:	41b0      	sbcs	r0, r6
    6d42:	4307      	orrs	r7, r0
    6d44:	40dc      	lsrs	r4, r3
    6d46:	18bf      	adds	r7, r7, r2
    6d48:	e7d6      	b.n	6cf8 <__aeabi_dsub+0x4ac>
    6d4a:	000d      	movs	r5, r1
    6d4c:	4315      	orrs	r5, r2
    6d4e:	d100      	bne.n	6d52 <__aeabi_dsub+0x506>
    6d50:	e602      	b.n	6958 <__aeabi_dsub+0x10c>
    6d52:	4650      	mov	r0, sl
    6d54:	1a80      	subs	r0, r0, r2
    6d56:	4582      	cmp	sl, r0
    6d58:	41bf      	sbcs	r7, r7
    6d5a:	1a65      	subs	r5, r4, r1
    6d5c:	427f      	negs	r7, r7
    6d5e:	1bed      	subs	r5, r5, r7
    6d60:	4684      	mov	ip, r0
    6d62:	0228      	lsls	r0, r5, #8
    6d64:	d400      	bmi.n	6d68 <__aeabi_dsub+0x51c>
    6d66:	e68d      	b.n	6a84 <__aeabi_dsub+0x238>
    6d68:	4650      	mov	r0, sl
    6d6a:	1a17      	subs	r7, r2, r0
    6d6c:	42ba      	cmp	r2, r7
    6d6e:	4192      	sbcs	r2, r2
    6d70:	1b0c      	subs	r4, r1, r4
    6d72:	4252      	negs	r2, r2
    6d74:	1aa4      	subs	r4, r4, r2
    6d76:	4698      	mov	r8, r3
    6d78:	e5ee      	b.n	6958 <__aeabi_dsub+0x10c>
    6d7a:	000d      	movs	r5, r1
    6d7c:	4315      	orrs	r5, r2
    6d7e:	d100      	bne.n	6d82 <__aeabi_dsub+0x536>
    6d80:	e76b      	b.n	6c5a <__aeabi_dsub+0x40e>
    6d82:	4650      	mov	r0, sl
    6d84:	0767      	lsls	r7, r4, #29
    6d86:	08c0      	lsrs	r0, r0, #3
    6d88:	4307      	orrs	r7, r0
    6d8a:	2080      	movs	r0, #128	; 0x80
    6d8c:	08e4      	lsrs	r4, r4, #3
    6d8e:	0300      	lsls	r0, r0, #12
    6d90:	4204      	tst	r4, r0
    6d92:	d007      	beq.n	6da4 <__aeabi_dsub+0x558>
    6d94:	08cd      	lsrs	r5, r1, #3
    6d96:	4205      	tst	r5, r0
    6d98:	d104      	bne.n	6da4 <__aeabi_dsub+0x558>
    6d9a:	002c      	movs	r4, r5
    6d9c:	4698      	mov	r8, r3
    6d9e:	08d7      	lsrs	r7, r2, #3
    6da0:	0749      	lsls	r1, r1, #29
    6da2:	430f      	orrs	r7, r1
    6da4:	0f7b      	lsrs	r3, r7, #29
    6da6:	00e4      	lsls	r4, r4, #3
    6da8:	431c      	orrs	r4, r3
    6daa:	00ff      	lsls	r7, r7, #3
    6dac:	4e30      	ldr	r6, [pc, #192]	; (6e70 <__aeabi_dsub+0x624>)
    6dae:	e5d3      	b.n	6958 <__aeabi_dsub+0x10c>
    6db0:	4e2f      	ldr	r6, [pc, #188]	; (6e70 <__aeabi_dsub+0x624>)
    6db2:	45b4      	cmp	ip, r6
    6db4:	d1b4      	bne.n	6d20 <__aeabi_dsub+0x4d4>
    6db6:	000c      	movs	r4, r1
    6db8:	0017      	movs	r7, r2
    6dba:	4666      	mov	r6, ip
    6dbc:	e5cc      	b.n	6958 <__aeabi_dsub+0x10c>
    6dbe:	2700      	movs	r7, #0
    6dc0:	2400      	movs	r4, #0
    6dc2:	e5e8      	b.n	6996 <__aeabi_dsub+0x14a>
    6dc4:	2b00      	cmp	r3, #0
    6dc6:	d039      	beq.n	6e3c <__aeabi_dsub+0x5f0>
    6dc8:	000b      	movs	r3, r1
    6dca:	4313      	orrs	r3, r2
    6dcc:	d100      	bne.n	6dd0 <__aeabi_dsub+0x584>
    6dce:	e744      	b.n	6c5a <__aeabi_dsub+0x40e>
    6dd0:	08c0      	lsrs	r0, r0, #3
    6dd2:	0767      	lsls	r7, r4, #29
    6dd4:	4307      	orrs	r7, r0
    6dd6:	2080      	movs	r0, #128	; 0x80
    6dd8:	08e4      	lsrs	r4, r4, #3
    6dda:	0300      	lsls	r0, r0, #12
    6ddc:	4204      	tst	r4, r0
    6dde:	d0e1      	beq.n	6da4 <__aeabi_dsub+0x558>
    6de0:	08cb      	lsrs	r3, r1, #3
    6de2:	4203      	tst	r3, r0
    6de4:	d1de      	bne.n	6da4 <__aeabi_dsub+0x558>
    6de6:	08d7      	lsrs	r7, r2, #3
    6de8:	0749      	lsls	r1, r1, #29
    6dea:	430f      	orrs	r7, r1
    6dec:	001c      	movs	r4, r3
    6dee:	e7d9      	b.n	6da4 <__aeabi_dsub+0x558>
    6df0:	2100      	movs	r1, #0
    6df2:	e771      	b.n	6cd8 <__aeabi_dsub+0x48c>
    6df4:	2500      	movs	r5, #0
    6df6:	2700      	movs	r7, #0
    6df8:	e5e9      	b.n	69ce <__aeabi_dsub+0x182>
    6dfa:	002e      	movs	r6, r5
    6dfc:	0027      	movs	r7, r4
    6dfe:	3e20      	subs	r6, #32
    6e00:	40f7      	lsrs	r7, r6
    6e02:	2d20      	cmp	r5, #32
    6e04:	d02f      	beq.n	6e66 <__aeabi_dsub+0x61a>
    6e06:	2640      	movs	r6, #64	; 0x40
    6e08:	1b75      	subs	r5, r6, r5
    6e0a:	40ac      	lsls	r4, r5
    6e0c:	4650      	mov	r0, sl
    6e0e:	4320      	orrs	r0, r4
    6e10:	1e44      	subs	r4, r0, #1
    6e12:	41a0      	sbcs	r0, r4
    6e14:	2400      	movs	r4, #0
    6e16:	4338      	orrs	r0, r7
    6e18:	e6dc      	b.n	6bd4 <__aeabi_dsub+0x388>
    6e1a:	2480      	movs	r4, #128	; 0x80
    6e1c:	2500      	movs	r5, #0
    6e1e:	0324      	lsls	r4, r4, #12
    6e20:	4e13      	ldr	r6, [pc, #76]	; (6e70 <__aeabi_dsub+0x624>)
    6e22:	2700      	movs	r7, #0
    6e24:	e5d3      	b.n	69ce <__aeabi_dsub+0x182>
    6e26:	4650      	mov	r0, sl
    6e28:	4320      	orrs	r0, r4
    6e2a:	0007      	movs	r7, r0
    6e2c:	1e78      	subs	r0, r7, #1
    6e2e:	4187      	sbcs	r7, r0
    6e30:	2400      	movs	r4, #0
    6e32:	18bf      	adds	r7, r7, r2
    6e34:	e760      	b.n	6cf8 <__aeabi_dsub+0x4ac>
    6e36:	000c      	movs	r4, r1
    6e38:	0017      	movs	r7, r2
    6e3a:	e58d      	b.n	6958 <__aeabi_dsub+0x10c>
    6e3c:	000c      	movs	r4, r1
    6e3e:	0017      	movs	r7, r2
    6e40:	4e0b      	ldr	r6, [pc, #44]	; (6e70 <__aeabi_dsub+0x624>)
    6e42:	e589      	b.n	6958 <__aeabi_dsub+0x10c>
    6e44:	001e      	movs	r6, r3
    6e46:	0027      	movs	r7, r4
    6e48:	3e20      	subs	r6, #32
    6e4a:	40f7      	lsrs	r7, r6
    6e4c:	2b20      	cmp	r3, #32
    6e4e:	d00c      	beq.n	6e6a <__aeabi_dsub+0x61e>
    6e50:	2640      	movs	r6, #64	; 0x40
    6e52:	1af3      	subs	r3, r6, r3
    6e54:	409c      	lsls	r4, r3
    6e56:	4650      	mov	r0, sl
    6e58:	4320      	orrs	r0, r4
    6e5a:	1e44      	subs	r4, r0, #1
    6e5c:	41a0      	sbcs	r0, r4
    6e5e:	4307      	orrs	r7, r0
    6e60:	2400      	movs	r4, #0
    6e62:	18bf      	adds	r7, r7, r2
    6e64:	e748      	b.n	6cf8 <__aeabi_dsub+0x4ac>
    6e66:	2400      	movs	r4, #0
    6e68:	e7d0      	b.n	6e0c <__aeabi_dsub+0x5c0>
    6e6a:	2400      	movs	r4, #0
    6e6c:	e7f3      	b.n	6e56 <__aeabi_dsub+0x60a>
    6e6e:	46c0      	nop			; (mov r8, r8)
    6e70:	000007ff 	.word	0x000007ff
    6e74:	ff7fffff 	.word	0xff7fffff

00006e78 <__aeabi_dcmpun>:
    6e78:	b570      	push	{r4, r5, r6, lr}
    6e7a:	4e0e      	ldr	r6, [pc, #56]	; (6eb4 <__aeabi_dcmpun+0x3c>)
    6e7c:	030d      	lsls	r5, r1, #12
    6e7e:	031c      	lsls	r4, r3, #12
    6e80:	0049      	lsls	r1, r1, #1
    6e82:	005b      	lsls	r3, r3, #1
    6e84:	0b2d      	lsrs	r5, r5, #12
    6e86:	0d49      	lsrs	r1, r1, #21
    6e88:	0b24      	lsrs	r4, r4, #12
    6e8a:	0d5b      	lsrs	r3, r3, #21
    6e8c:	42b1      	cmp	r1, r6
    6e8e:	d004      	beq.n	6e9a <__aeabi_dcmpun+0x22>
    6e90:	4908      	ldr	r1, [pc, #32]	; (6eb4 <__aeabi_dcmpun+0x3c>)
    6e92:	2000      	movs	r0, #0
    6e94:	428b      	cmp	r3, r1
    6e96:	d008      	beq.n	6eaa <__aeabi_dcmpun+0x32>
    6e98:	bd70      	pop	{r4, r5, r6, pc}
    6e9a:	4305      	orrs	r5, r0
    6e9c:	2001      	movs	r0, #1
    6e9e:	2d00      	cmp	r5, #0
    6ea0:	d1fa      	bne.n	6e98 <__aeabi_dcmpun+0x20>
    6ea2:	4904      	ldr	r1, [pc, #16]	; (6eb4 <__aeabi_dcmpun+0x3c>)
    6ea4:	2000      	movs	r0, #0
    6ea6:	428b      	cmp	r3, r1
    6ea8:	d1f6      	bne.n	6e98 <__aeabi_dcmpun+0x20>
    6eaa:	4314      	orrs	r4, r2
    6eac:	0020      	movs	r0, r4
    6eae:	1e44      	subs	r4, r0, #1
    6eb0:	41a0      	sbcs	r0, r4
    6eb2:	e7f1      	b.n	6e98 <__aeabi_dcmpun+0x20>
    6eb4:	000007ff 	.word	0x000007ff

00006eb8 <__aeabi_d2iz>:
    6eb8:	b530      	push	{r4, r5, lr}
    6eba:	4d13      	ldr	r5, [pc, #76]	; (6f08 <__aeabi_d2iz+0x50>)
    6ebc:	030a      	lsls	r2, r1, #12
    6ebe:	004b      	lsls	r3, r1, #1
    6ec0:	0b12      	lsrs	r2, r2, #12
    6ec2:	0d5b      	lsrs	r3, r3, #21
    6ec4:	0fc9      	lsrs	r1, r1, #31
    6ec6:	2400      	movs	r4, #0
    6ec8:	42ab      	cmp	r3, r5
    6eca:	dd10      	ble.n	6eee <__aeabi_d2iz+0x36>
    6ecc:	4c0f      	ldr	r4, [pc, #60]	; (6f0c <__aeabi_d2iz+0x54>)
    6ece:	42a3      	cmp	r3, r4
    6ed0:	dc0f      	bgt.n	6ef2 <__aeabi_d2iz+0x3a>
    6ed2:	2480      	movs	r4, #128	; 0x80
    6ed4:	4d0e      	ldr	r5, [pc, #56]	; (6f10 <__aeabi_d2iz+0x58>)
    6ed6:	0364      	lsls	r4, r4, #13
    6ed8:	4322      	orrs	r2, r4
    6eda:	1aed      	subs	r5, r5, r3
    6edc:	2d1f      	cmp	r5, #31
    6ede:	dd0b      	ble.n	6ef8 <__aeabi_d2iz+0x40>
    6ee0:	480c      	ldr	r0, [pc, #48]	; (6f14 <__aeabi_d2iz+0x5c>)
    6ee2:	1ac3      	subs	r3, r0, r3
    6ee4:	40da      	lsrs	r2, r3
    6ee6:	4254      	negs	r4, r2
    6ee8:	2900      	cmp	r1, #0
    6eea:	d100      	bne.n	6eee <__aeabi_d2iz+0x36>
    6eec:	0014      	movs	r4, r2
    6eee:	0020      	movs	r0, r4
    6ef0:	bd30      	pop	{r4, r5, pc}
    6ef2:	4b09      	ldr	r3, [pc, #36]	; (6f18 <__aeabi_d2iz+0x60>)
    6ef4:	18cc      	adds	r4, r1, r3
    6ef6:	e7fa      	b.n	6eee <__aeabi_d2iz+0x36>
    6ef8:	4c08      	ldr	r4, [pc, #32]	; (6f1c <__aeabi_d2iz+0x64>)
    6efa:	40e8      	lsrs	r0, r5
    6efc:	46a4      	mov	ip, r4
    6efe:	4463      	add	r3, ip
    6f00:	409a      	lsls	r2, r3
    6f02:	4302      	orrs	r2, r0
    6f04:	e7ef      	b.n	6ee6 <__aeabi_d2iz+0x2e>
    6f06:	46c0      	nop			; (mov r8, r8)
    6f08:	000003fe 	.word	0x000003fe
    6f0c:	0000041d 	.word	0x0000041d
    6f10:	00000433 	.word	0x00000433
    6f14:	00000413 	.word	0x00000413
    6f18:	7fffffff 	.word	0x7fffffff
    6f1c:	fffffbed 	.word	0xfffffbed

00006f20 <__aeabi_i2d>:
    6f20:	b570      	push	{r4, r5, r6, lr}
    6f22:	2800      	cmp	r0, #0
    6f24:	d030      	beq.n	6f88 <__aeabi_i2d+0x68>
    6f26:	17c3      	asrs	r3, r0, #31
    6f28:	18c4      	adds	r4, r0, r3
    6f2a:	405c      	eors	r4, r3
    6f2c:	0fc5      	lsrs	r5, r0, #31
    6f2e:	0020      	movs	r0, r4
    6f30:	f000 f94c 	bl	71cc <__clzsi2>
    6f34:	4b17      	ldr	r3, [pc, #92]	; (6f94 <__aeabi_i2d+0x74>)
    6f36:	4a18      	ldr	r2, [pc, #96]	; (6f98 <__aeabi_i2d+0x78>)
    6f38:	1a1b      	subs	r3, r3, r0
    6f3a:	1ad2      	subs	r2, r2, r3
    6f3c:	2a1f      	cmp	r2, #31
    6f3e:	dd18      	ble.n	6f72 <__aeabi_i2d+0x52>
    6f40:	4a16      	ldr	r2, [pc, #88]	; (6f9c <__aeabi_i2d+0x7c>)
    6f42:	1ad2      	subs	r2, r2, r3
    6f44:	4094      	lsls	r4, r2
    6f46:	2200      	movs	r2, #0
    6f48:	0324      	lsls	r4, r4, #12
    6f4a:	055b      	lsls	r3, r3, #21
    6f4c:	0b24      	lsrs	r4, r4, #12
    6f4e:	0d5b      	lsrs	r3, r3, #21
    6f50:	2100      	movs	r1, #0
    6f52:	0010      	movs	r0, r2
    6f54:	0324      	lsls	r4, r4, #12
    6f56:	0d0a      	lsrs	r2, r1, #20
    6f58:	0b24      	lsrs	r4, r4, #12
    6f5a:	0512      	lsls	r2, r2, #20
    6f5c:	4322      	orrs	r2, r4
    6f5e:	4c10      	ldr	r4, [pc, #64]	; (6fa0 <__aeabi_i2d+0x80>)
    6f60:	051b      	lsls	r3, r3, #20
    6f62:	4022      	ands	r2, r4
    6f64:	4313      	orrs	r3, r2
    6f66:	005b      	lsls	r3, r3, #1
    6f68:	07ed      	lsls	r5, r5, #31
    6f6a:	085b      	lsrs	r3, r3, #1
    6f6c:	432b      	orrs	r3, r5
    6f6e:	0019      	movs	r1, r3
    6f70:	bd70      	pop	{r4, r5, r6, pc}
    6f72:	0021      	movs	r1, r4
    6f74:	4091      	lsls	r1, r2
    6f76:	000a      	movs	r2, r1
    6f78:	210b      	movs	r1, #11
    6f7a:	1a08      	subs	r0, r1, r0
    6f7c:	40c4      	lsrs	r4, r0
    6f7e:	055b      	lsls	r3, r3, #21
    6f80:	0324      	lsls	r4, r4, #12
    6f82:	0b24      	lsrs	r4, r4, #12
    6f84:	0d5b      	lsrs	r3, r3, #21
    6f86:	e7e3      	b.n	6f50 <__aeabi_i2d+0x30>
    6f88:	2500      	movs	r5, #0
    6f8a:	2300      	movs	r3, #0
    6f8c:	2400      	movs	r4, #0
    6f8e:	2200      	movs	r2, #0
    6f90:	e7de      	b.n	6f50 <__aeabi_i2d+0x30>
    6f92:	46c0      	nop			; (mov r8, r8)
    6f94:	0000041e 	.word	0x0000041e
    6f98:	00000433 	.word	0x00000433
    6f9c:	00000413 	.word	0x00000413
    6fa0:	800fffff 	.word	0x800fffff

00006fa4 <__aeabi_ui2d>:
    6fa4:	b510      	push	{r4, lr}
    6fa6:	1e04      	subs	r4, r0, #0
    6fa8:	d028      	beq.n	6ffc <__aeabi_ui2d+0x58>
    6faa:	f000 f90f 	bl	71cc <__clzsi2>
    6fae:	4b15      	ldr	r3, [pc, #84]	; (7004 <__aeabi_ui2d+0x60>)
    6fb0:	4a15      	ldr	r2, [pc, #84]	; (7008 <__aeabi_ui2d+0x64>)
    6fb2:	1a1b      	subs	r3, r3, r0
    6fb4:	1ad2      	subs	r2, r2, r3
    6fb6:	2a1f      	cmp	r2, #31
    6fb8:	dd15      	ble.n	6fe6 <__aeabi_ui2d+0x42>
    6fba:	4a14      	ldr	r2, [pc, #80]	; (700c <__aeabi_ui2d+0x68>)
    6fbc:	1ad2      	subs	r2, r2, r3
    6fbe:	4094      	lsls	r4, r2
    6fc0:	2200      	movs	r2, #0
    6fc2:	0324      	lsls	r4, r4, #12
    6fc4:	055b      	lsls	r3, r3, #21
    6fc6:	0b24      	lsrs	r4, r4, #12
    6fc8:	0d5b      	lsrs	r3, r3, #21
    6fca:	2100      	movs	r1, #0
    6fcc:	0010      	movs	r0, r2
    6fce:	0324      	lsls	r4, r4, #12
    6fd0:	0d0a      	lsrs	r2, r1, #20
    6fd2:	0b24      	lsrs	r4, r4, #12
    6fd4:	0512      	lsls	r2, r2, #20
    6fd6:	4322      	orrs	r2, r4
    6fd8:	4c0d      	ldr	r4, [pc, #52]	; (7010 <__aeabi_ui2d+0x6c>)
    6fda:	051b      	lsls	r3, r3, #20
    6fdc:	4022      	ands	r2, r4
    6fde:	4313      	orrs	r3, r2
    6fe0:	005b      	lsls	r3, r3, #1
    6fe2:	0859      	lsrs	r1, r3, #1
    6fe4:	bd10      	pop	{r4, pc}
    6fe6:	0021      	movs	r1, r4
    6fe8:	4091      	lsls	r1, r2
    6fea:	000a      	movs	r2, r1
    6fec:	210b      	movs	r1, #11
    6fee:	1a08      	subs	r0, r1, r0
    6ff0:	40c4      	lsrs	r4, r0
    6ff2:	055b      	lsls	r3, r3, #21
    6ff4:	0324      	lsls	r4, r4, #12
    6ff6:	0b24      	lsrs	r4, r4, #12
    6ff8:	0d5b      	lsrs	r3, r3, #21
    6ffa:	e7e6      	b.n	6fca <__aeabi_ui2d+0x26>
    6ffc:	2300      	movs	r3, #0
    6ffe:	2400      	movs	r4, #0
    7000:	2200      	movs	r2, #0
    7002:	e7e2      	b.n	6fca <__aeabi_ui2d+0x26>
    7004:	0000041e 	.word	0x0000041e
    7008:	00000433 	.word	0x00000433
    700c:	00000413 	.word	0x00000413
    7010:	800fffff 	.word	0x800fffff

00007014 <__aeabi_f2d>:
    7014:	0041      	lsls	r1, r0, #1
    7016:	0e09      	lsrs	r1, r1, #24
    7018:	1c4b      	adds	r3, r1, #1
    701a:	b570      	push	{r4, r5, r6, lr}
    701c:	b2db      	uxtb	r3, r3
    701e:	0246      	lsls	r6, r0, #9
    7020:	0a75      	lsrs	r5, r6, #9
    7022:	0fc4      	lsrs	r4, r0, #31
    7024:	2b01      	cmp	r3, #1
    7026:	dd14      	ble.n	7052 <__aeabi_f2d+0x3e>
    7028:	23e0      	movs	r3, #224	; 0xe0
    702a:	009b      	lsls	r3, r3, #2
    702c:	076d      	lsls	r5, r5, #29
    702e:	0b36      	lsrs	r6, r6, #12
    7030:	18cb      	adds	r3, r1, r3
    7032:	2100      	movs	r1, #0
    7034:	0d0a      	lsrs	r2, r1, #20
    7036:	0028      	movs	r0, r5
    7038:	0512      	lsls	r2, r2, #20
    703a:	4d1c      	ldr	r5, [pc, #112]	; (70ac <__aeabi_f2d+0x98>)
    703c:	4332      	orrs	r2, r6
    703e:	055b      	lsls	r3, r3, #21
    7040:	402a      	ands	r2, r5
    7042:	085b      	lsrs	r3, r3, #1
    7044:	4313      	orrs	r3, r2
    7046:	005b      	lsls	r3, r3, #1
    7048:	07e4      	lsls	r4, r4, #31
    704a:	085b      	lsrs	r3, r3, #1
    704c:	4323      	orrs	r3, r4
    704e:	0019      	movs	r1, r3
    7050:	bd70      	pop	{r4, r5, r6, pc}
    7052:	2900      	cmp	r1, #0
    7054:	d114      	bne.n	7080 <__aeabi_f2d+0x6c>
    7056:	2d00      	cmp	r5, #0
    7058:	d01e      	beq.n	7098 <__aeabi_f2d+0x84>
    705a:	0028      	movs	r0, r5
    705c:	f000 f8b6 	bl	71cc <__clzsi2>
    7060:	280a      	cmp	r0, #10
    7062:	dc1c      	bgt.n	709e <__aeabi_f2d+0x8a>
    7064:	230b      	movs	r3, #11
    7066:	002a      	movs	r2, r5
    7068:	1a1b      	subs	r3, r3, r0
    706a:	40da      	lsrs	r2, r3
    706c:	0003      	movs	r3, r0
    706e:	3315      	adds	r3, #21
    7070:	409d      	lsls	r5, r3
    7072:	4b0f      	ldr	r3, [pc, #60]	; (70b0 <__aeabi_f2d+0x9c>)
    7074:	0312      	lsls	r2, r2, #12
    7076:	1a1b      	subs	r3, r3, r0
    7078:	055b      	lsls	r3, r3, #21
    707a:	0b16      	lsrs	r6, r2, #12
    707c:	0d5b      	lsrs	r3, r3, #21
    707e:	e7d8      	b.n	7032 <__aeabi_f2d+0x1e>
    7080:	2d00      	cmp	r5, #0
    7082:	d006      	beq.n	7092 <__aeabi_f2d+0x7e>
    7084:	0b32      	lsrs	r2, r6, #12
    7086:	2680      	movs	r6, #128	; 0x80
    7088:	0336      	lsls	r6, r6, #12
    708a:	076d      	lsls	r5, r5, #29
    708c:	4316      	orrs	r6, r2
    708e:	4b09      	ldr	r3, [pc, #36]	; (70b4 <__aeabi_f2d+0xa0>)
    7090:	e7cf      	b.n	7032 <__aeabi_f2d+0x1e>
    7092:	4b08      	ldr	r3, [pc, #32]	; (70b4 <__aeabi_f2d+0xa0>)
    7094:	2600      	movs	r6, #0
    7096:	e7cc      	b.n	7032 <__aeabi_f2d+0x1e>
    7098:	2300      	movs	r3, #0
    709a:	2600      	movs	r6, #0
    709c:	e7c9      	b.n	7032 <__aeabi_f2d+0x1e>
    709e:	0003      	movs	r3, r0
    70a0:	002a      	movs	r2, r5
    70a2:	3b0b      	subs	r3, #11
    70a4:	409a      	lsls	r2, r3
    70a6:	2500      	movs	r5, #0
    70a8:	e7e3      	b.n	7072 <__aeabi_f2d+0x5e>
    70aa:	46c0      	nop			; (mov r8, r8)
    70ac:	800fffff 	.word	0x800fffff
    70b0:	00000389 	.word	0x00000389
    70b4:	000007ff 	.word	0x000007ff

000070b8 <__aeabi_d2f>:
    70b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    70ba:	004c      	lsls	r4, r1, #1
    70bc:	0d64      	lsrs	r4, r4, #21
    70be:	030b      	lsls	r3, r1, #12
    70c0:	1c62      	adds	r2, r4, #1
    70c2:	0f45      	lsrs	r5, r0, #29
    70c4:	0a5b      	lsrs	r3, r3, #9
    70c6:	0552      	lsls	r2, r2, #21
    70c8:	432b      	orrs	r3, r5
    70ca:	0fc9      	lsrs	r1, r1, #31
    70cc:	00c5      	lsls	r5, r0, #3
    70ce:	0d52      	lsrs	r2, r2, #21
    70d0:	2a01      	cmp	r2, #1
    70d2:	dd28      	ble.n	7126 <__aeabi_d2f+0x6e>
    70d4:	4a3a      	ldr	r2, [pc, #232]	; (71c0 <__aeabi_d2f+0x108>)
    70d6:	18a6      	adds	r6, r4, r2
    70d8:	2efe      	cmp	r6, #254	; 0xfe
    70da:	dc1b      	bgt.n	7114 <__aeabi_d2f+0x5c>
    70dc:	2e00      	cmp	r6, #0
    70de:	dd3e      	ble.n	715e <__aeabi_d2f+0xa6>
    70e0:	0180      	lsls	r0, r0, #6
    70e2:	0002      	movs	r2, r0
    70e4:	1e50      	subs	r0, r2, #1
    70e6:	4182      	sbcs	r2, r0
    70e8:	0f6d      	lsrs	r5, r5, #29
    70ea:	432a      	orrs	r2, r5
    70ec:	00db      	lsls	r3, r3, #3
    70ee:	4313      	orrs	r3, r2
    70f0:	075a      	lsls	r2, r3, #29
    70f2:	d004      	beq.n	70fe <__aeabi_d2f+0x46>
    70f4:	220f      	movs	r2, #15
    70f6:	401a      	ands	r2, r3
    70f8:	2a04      	cmp	r2, #4
    70fa:	d000      	beq.n	70fe <__aeabi_d2f+0x46>
    70fc:	3304      	adds	r3, #4
    70fe:	2280      	movs	r2, #128	; 0x80
    7100:	04d2      	lsls	r2, r2, #19
    7102:	401a      	ands	r2, r3
    7104:	d05a      	beq.n	71bc <__aeabi_d2f+0x104>
    7106:	3601      	adds	r6, #1
    7108:	2eff      	cmp	r6, #255	; 0xff
    710a:	d003      	beq.n	7114 <__aeabi_d2f+0x5c>
    710c:	019b      	lsls	r3, r3, #6
    710e:	0a5b      	lsrs	r3, r3, #9
    7110:	b2f4      	uxtb	r4, r6
    7112:	e001      	b.n	7118 <__aeabi_d2f+0x60>
    7114:	24ff      	movs	r4, #255	; 0xff
    7116:	2300      	movs	r3, #0
    7118:	0258      	lsls	r0, r3, #9
    711a:	05e4      	lsls	r4, r4, #23
    711c:	0a40      	lsrs	r0, r0, #9
    711e:	07c9      	lsls	r1, r1, #31
    7120:	4320      	orrs	r0, r4
    7122:	4308      	orrs	r0, r1
    7124:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7126:	2c00      	cmp	r4, #0
    7128:	d007      	beq.n	713a <__aeabi_d2f+0x82>
    712a:	431d      	orrs	r5, r3
    712c:	d0f2      	beq.n	7114 <__aeabi_d2f+0x5c>
    712e:	2080      	movs	r0, #128	; 0x80
    7130:	00db      	lsls	r3, r3, #3
    7132:	0480      	lsls	r0, r0, #18
    7134:	4303      	orrs	r3, r0
    7136:	26ff      	movs	r6, #255	; 0xff
    7138:	e7da      	b.n	70f0 <__aeabi_d2f+0x38>
    713a:	432b      	orrs	r3, r5
    713c:	d003      	beq.n	7146 <__aeabi_d2f+0x8e>
    713e:	2305      	movs	r3, #5
    7140:	08db      	lsrs	r3, r3, #3
    7142:	2cff      	cmp	r4, #255	; 0xff
    7144:	d003      	beq.n	714e <__aeabi_d2f+0x96>
    7146:	025b      	lsls	r3, r3, #9
    7148:	0a5b      	lsrs	r3, r3, #9
    714a:	b2e4      	uxtb	r4, r4
    714c:	e7e4      	b.n	7118 <__aeabi_d2f+0x60>
    714e:	2b00      	cmp	r3, #0
    7150:	d032      	beq.n	71b8 <__aeabi_d2f+0x100>
    7152:	2080      	movs	r0, #128	; 0x80
    7154:	03c0      	lsls	r0, r0, #15
    7156:	4303      	orrs	r3, r0
    7158:	025b      	lsls	r3, r3, #9
    715a:	0a5b      	lsrs	r3, r3, #9
    715c:	e7dc      	b.n	7118 <__aeabi_d2f+0x60>
    715e:	0032      	movs	r2, r6
    7160:	3217      	adds	r2, #23
    7162:	db14      	blt.n	718e <__aeabi_d2f+0xd6>
    7164:	2280      	movs	r2, #128	; 0x80
    7166:	271e      	movs	r7, #30
    7168:	0412      	lsls	r2, r2, #16
    716a:	4313      	orrs	r3, r2
    716c:	1bbf      	subs	r7, r7, r6
    716e:	2f1f      	cmp	r7, #31
    7170:	dc0f      	bgt.n	7192 <__aeabi_d2f+0xda>
    7172:	4a14      	ldr	r2, [pc, #80]	; (71c4 <__aeabi_d2f+0x10c>)
    7174:	4694      	mov	ip, r2
    7176:	4464      	add	r4, ip
    7178:	002a      	movs	r2, r5
    717a:	40a5      	lsls	r5, r4
    717c:	002e      	movs	r6, r5
    717e:	40a3      	lsls	r3, r4
    7180:	1e75      	subs	r5, r6, #1
    7182:	41ae      	sbcs	r6, r5
    7184:	40fa      	lsrs	r2, r7
    7186:	4333      	orrs	r3, r6
    7188:	4313      	orrs	r3, r2
    718a:	2600      	movs	r6, #0
    718c:	e7b0      	b.n	70f0 <__aeabi_d2f+0x38>
    718e:	2400      	movs	r4, #0
    7190:	e7d5      	b.n	713e <__aeabi_d2f+0x86>
    7192:	2202      	movs	r2, #2
    7194:	4252      	negs	r2, r2
    7196:	1b96      	subs	r6, r2, r6
    7198:	001a      	movs	r2, r3
    719a:	40f2      	lsrs	r2, r6
    719c:	2f20      	cmp	r7, #32
    719e:	d009      	beq.n	71b4 <__aeabi_d2f+0xfc>
    71a0:	4809      	ldr	r0, [pc, #36]	; (71c8 <__aeabi_d2f+0x110>)
    71a2:	4684      	mov	ip, r0
    71a4:	4464      	add	r4, ip
    71a6:	40a3      	lsls	r3, r4
    71a8:	432b      	orrs	r3, r5
    71aa:	1e5d      	subs	r5, r3, #1
    71ac:	41ab      	sbcs	r3, r5
    71ae:	2600      	movs	r6, #0
    71b0:	4313      	orrs	r3, r2
    71b2:	e79d      	b.n	70f0 <__aeabi_d2f+0x38>
    71b4:	2300      	movs	r3, #0
    71b6:	e7f7      	b.n	71a8 <__aeabi_d2f+0xf0>
    71b8:	2300      	movs	r3, #0
    71ba:	e7ad      	b.n	7118 <__aeabi_d2f+0x60>
    71bc:	0034      	movs	r4, r6
    71be:	e7bf      	b.n	7140 <__aeabi_d2f+0x88>
    71c0:	fffffc80 	.word	0xfffffc80
    71c4:	fffffc82 	.word	0xfffffc82
    71c8:	fffffca2 	.word	0xfffffca2

000071cc <__clzsi2>:
    71cc:	211c      	movs	r1, #28
    71ce:	2301      	movs	r3, #1
    71d0:	041b      	lsls	r3, r3, #16
    71d2:	4298      	cmp	r0, r3
    71d4:	d301      	bcc.n	71da <__clzsi2+0xe>
    71d6:	0c00      	lsrs	r0, r0, #16
    71d8:	3910      	subs	r1, #16
    71da:	0a1b      	lsrs	r3, r3, #8
    71dc:	4298      	cmp	r0, r3
    71de:	d301      	bcc.n	71e4 <__clzsi2+0x18>
    71e0:	0a00      	lsrs	r0, r0, #8
    71e2:	3908      	subs	r1, #8
    71e4:	091b      	lsrs	r3, r3, #4
    71e6:	4298      	cmp	r0, r3
    71e8:	d301      	bcc.n	71ee <__clzsi2+0x22>
    71ea:	0900      	lsrs	r0, r0, #4
    71ec:	3904      	subs	r1, #4
    71ee:	a202      	add	r2, pc, #8	; (adr r2, 71f8 <__clzsi2+0x2c>)
    71f0:	5c10      	ldrb	r0, [r2, r0]
    71f2:	1840      	adds	r0, r0, r1
    71f4:	4770      	bx	lr
    71f6:	46c0      	nop			; (mov r8, r8)
    71f8:	02020304 	.word	0x02020304
    71fc:	01010101 	.word	0x01010101
	...

00007208 <__errno>:
    7208:	4b01      	ldr	r3, [pc, #4]	; (7210 <__errno+0x8>)
    720a:	6818      	ldr	r0, [r3, #0]
    720c:	4770      	bx	lr
    720e:	46c0      	nop			; (mov r8, r8)
    7210:	200000bc 	.word	0x200000bc

00007214 <__libc_init_array>:
    7214:	b570      	push	{r4, r5, r6, lr}
    7216:	2600      	movs	r6, #0
    7218:	4d0c      	ldr	r5, [pc, #48]	; (724c <__libc_init_array+0x38>)
    721a:	4c0d      	ldr	r4, [pc, #52]	; (7250 <__libc_init_array+0x3c>)
    721c:	1b64      	subs	r4, r4, r5
    721e:	10a4      	asrs	r4, r4, #2
    7220:	42a6      	cmp	r6, r4
    7222:	d109      	bne.n	7238 <__libc_init_array+0x24>
    7224:	2600      	movs	r6, #0
    7226:	f000 f897 	bl	7358 <_init>
    722a:	4d0a      	ldr	r5, [pc, #40]	; (7254 <__libc_init_array+0x40>)
    722c:	4c0a      	ldr	r4, [pc, #40]	; (7258 <__libc_init_array+0x44>)
    722e:	1b64      	subs	r4, r4, r5
    7230:	10a4      	asrs	r4, r4, #2
    7232:	42a6      	cmp	r6, r4
    7234:	d105      	bne.n	7242 <__libc_init_array+0x2e>
    7236:	bd70      	pop	{r4, r5, r6, pc}
    7238:	00b3      	lsls	r3, r6, #2
    723a:	58eb      	ldr	r3, [r5, r3]
    723c:	4798      	blx	r3
    723e:	3601      	adds	r6, #1
    7240:	e7ee      	b.n	7220 <__libc_init_array+0xc>
    7242:	00b3      	lsls	r3, r6, #2
    7244:	58eb      	ldr	r3, [r5, r3]
    7246:	4798      	blx	r3
    7248:	3601      	adds	r6, #1
    724a:	e7f2      	b.n	7232 <__libc_init_array+0x1e>
    724c:	00007364 	.word	0x00007364
    7250:	00007364 	.word	0x00007364
    7254:	00007364 	.word	0x00007364
    7258:	00007368 	.word	0x00007368

0000725c <senseBatPin>:
    725c:	06000000 01000106                                .....

00007261 <senseAPin>:
    7261:	03010001 0100010b                                .....

00007266 <senseBPin>:
    7266:	02010001 0000010a                                .....

0000726b <senseCPin>:
    726b:	03000001 00000101                                .....

00007270 <senseDPin>:
    7270:	02000001 00000100                                .....

00007275 <analogAccelPin>:
    7275:	07000001 70000007 0000776f 00000000     .......pow......
    7285:	00000000                                         ...

00007288 <TWO52>:
    7288:	00000000 43300000 00000000 c3300000     ......0C......0.
    7298:	00005370 000052c0 000052c0 000052be     pS...R...R...R..
    72a8:	00005362 00005362 00005358 000052be     bS..bS..XS...R..
    72b8:	00005362 00005358 00005362 000052be     bS..XS..bS...R..
    72c8:	00005368 00005368 00005368 000053f8     hS..hS..hS...S..
    72d8:	00005cdc 00005cbe 00005c78 00005b96     .\...\..x\...[..
    72e8:	00005c78 00005cb0 00005c78 00005b96     x\...\..x\...[..
    72f8:	00005cbe 00005cbe 00005cb0 00005b96     .\...\...\...[..
    7308:	00005b8e 00005b8e 00005b8e 00005ef4     .[...[...[...^..
    7318:	0000653c 000063fc 000063fc 000063f8     <e...c...c...c..
    7328:	00006514 00006514 00006506 000063f8     .e...e...e...c..
    7338:	00006514 00006506 00006514 000063f8     .e...e...e...c..
    7348:	0000651c 0000651c 0000651c 00006720     .e...e...e.. g..

00007358 <_init>:
    7358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    735a:	46c0      	nop			; (mov r8, r8)
    735c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    735e:	bc08      	pop	{r3}
    7360:	469e      	mov	lr, r3
    7362:	4770      	bx	lr

00007364 <__init_array_start>:
    7364:	000000dd 	.word	0x000000dd

00007368 <_fini>:
    7368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    736a:	46c0      	nop			; (mov r8, r8)
    736c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    736e:	bc08      	pop	{r3}
    7370:	469e      	mov	lr, r3
    7372:	4770      	bx	lr

00007374 <__fini_array_start>:
    7374:	000000b5 	.word	0x000000b5
