
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007298  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000120  20000000  00007298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000530  20000120  000073b8  00020120  2**3
                  ALLOC
  3 .stack        00002000  20000650  000078e8  00020120  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
  6 .debug_info   00032f7c  00000000  00000000  000201a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003af5  00000000  00000000  0005311d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000035b0  00000000  00000000  00056c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000538  00000000  00000000  0005a1c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ca8  00000000  00000000  0005a6fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00017694  00000000  00000000  0005b3a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b21f  00000000  00000000  00072a36  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00075b4d  00000000  00000000  0007dc55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001238  00000000  00000000  000f37a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
        // Not implemented
        SystemCoreClock = __SYSTEM_CLOCK;
       0:	50 26 00 20 19 01 00 00 15 01 00 00 79 0a 00 00     P&. ........y...
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	81 11 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	b1 11 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	55 12 00 00 bd 12 00 00 00 00 00 00 00 00 00 00     U...............
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000120 	.word	0x20000120
      d4:	00000000 	.word	0x00000000
      d8:	00007298 	.word	0x00007298

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000124 	.word	0x20000124
     108:	00007298 	.word	0x00007298
     10c:	00007298 	.word	0x00007298
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
        if (pSrc != pDest) {
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
{
     11c:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d004      	beq.n	12c <Reset_Handler+0x14>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	18ca      	adds	r2, r1, r3
     128:	42a2      	cmp	r2, r4
     12a:	d332      	bcc.n	192 <Reset_Handler+0x7a>
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	4b1f      	ldr	r3, [pc, #124]	; (1ac <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
     130:	4a1f      	ldr	r2, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
     132:	4293      	cmp	r3, r2
     134:	d331      	bcc.n	19a <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     136:	21ff      	movs	r1, #255	; 0xff
     138:	4b1e      	ldr	r3, [pc, #120]	; (1b4 <Reset_Handler+0x9c>)
     13a:	4a1f      	ldr	r2, [pc, #124]	; (1b8 <Reset_Handler+0xa0>)
     13c:	438b      	bics	r3, r1
     13e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     140:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     142:	250c      	movs	r5, #12
     144:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
     146:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	4b1c      	ldr	r3, [pc, #112]	; (1bc <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	481d      	ldr	r0, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     14c:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14e:	78c3      	ldrb	r3, [r0, #3]
     150:	39fc      	subs	r1, #252	; 0xfc
     152:	438b      	bics	r3, r1
     154:	4313      	orrs	r3, r2
     156:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     158:	78c3      	ldrb	r3, [r0, #3]
     15a:	43ab      	bics	r3, r5
     15c:	4323      	orrs	r3, r4
     15e:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     160:	4b18      	ldr	r3, [pc, #96]	; (1c4 <Reset_Handler+0xac>)
     162:	7b98      	ldrb	r0, [r3, #14]
     164:	43b0      	bics	r0, r6
     166:	0006      	movs	r6, r0
     168:	2020      	movs	r0, #32
     16a:	4330      	orrs	r0, r6
     16c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     16e:	7b98      	ldrb	r0, [r3, #14]
     170:	43a8      	bics	r0, r5
     172:	4304      	orrs	r4, r0
     174:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	4388      	bics	r0, r1
     17a:	4302      	orrs	r2, r0
     17c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     17e:	2380      	movs	r3, #128	; 0x80
     180:	4a11      	ldr	r2, [pc, #68]	; (1c8 <Reset_Handler+0xb0>)
     182:	6851      	ldr	r1, [r2, #4]
     184:	430b      	orrs	r3, r1
     186:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     188:	4b10      	ldr	r3, [pc, #64]	; (1cc <Reset_Handler+0xb4>)
     18a:	4798      	blx	r3
        main();
     18c:	4b10      	ldr	r3, [pc, #64]	; (1d0 <Reset_Handler+0xb8>)
     18e:	4798      	blx	r3
     190:	e7fe      	b.n	190 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
     192:	58c5      	ldr	r5, [r0, r3]
     194:	3304      	adds	r3, #4
     196:	6015      	str	r5, [r2, #0]
     198:	e7c5      	b.n	126 <Reset_Handler+0xe>
                *pDest++ = 0;
     19a:	c302      	stmia	r3!, {r1}
     19c:	e7c9      	b.n	132 <Reset_Handler+0x1a>
     19e:	46c0      	nop			; (mov r8, r8)
     1a0:	00007298 	.word	0x00007298
     1a4:	20000000 	.word	0x20000000
     1a8:	20000120 	.word	0x20000120
     1ac:	20000120 	.word	0x20000120
     1b0:	20000650 	.word	0x20000650
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00007135 	.word	0x00007135
     1d0:	000009d1 	.word	0x000009d1

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady() {
     1e6:	b570      	push	{r4, r5, r6, lr}
     1e8:	4d08      	ldr	r5, [pc, #32]	; (20c <AT25SFHoldTillReady+0x28>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	616b      	str	r3, [r5, #20]
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_READSTATUS);
     1ee:	2105      	movs	r1, #5
     1f0:	2001      	movs	r0, #1
     1f2:	4b07      	ldr	r3, [pc, #28]	; (210 <AT25SFHoldTillReady+0x2c>)
     1f4:	4798      	blx	r3
    while (spiDataIn(MEM_SPI) & 0x01);
     1f6:	2401      	movs	r4, #1
     1f8:	0020      	movs	r0, r4
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <AT25SFHoldTillReady+0x30>)
     1fc:	4798      	blx	r3
     1fe:	4220      	tst	r0, r4
     200:	d1fa      	bne.n	1f8 <AT25SFHoldTillReady+0x14>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     202:	2380      	movs	r3, #128	; 0x80
     204:	02db      	lsls	r3, r3, #11
     206:	61ab      	str	r3, [r5, #24]
    pinHigh(cs_mem);
}
     208:	bd70      	pop	{r4, r5, r6, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	41004400 	.word	0x41004400
     210:	000037ad 	.word	0x000037ad
     214:	000037c5 	.word	0x000037c5

00000218 <AT25SFChipErase>:
void AT25SFChipErase() {
     218:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     21a:	2580      	movs	r5, #128	; 0x80
     21c:	4c06      	ldr	r4, [pc, #24]	; (238 <AT25SFChipErase+0x20>)
     21e:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     220:	4e06      	ldr	r6, [pc, #24]	; (23c <AT25SFChipErase+0x24>)
     222:	6165      	str	r5, [r4, #20]
     224:	2106      	movs	r1, #6
     226:	2001      	movs	r0, #1
     228:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_CHIP_ERASE);
     22c:	2160      	movs	r1, #96	; 0x60
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     22e:	6165      	str	r5, [r4, #20]
     230:	2001      	movs	r0, #1
     232:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     234:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     236:	bd70      	pop	{r4, r5, r6, pc}
     238:	41004400 	.word	0x41004400
     23c:	000037ad 	.word	0x000037ad

00000240 <AT25SFWriteBytes>:
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     242:	2780      	movs	r7, #128	; 0x80
     244:	0006      	movs	r6, r0
     246:	4c14      	ldr	r4, [pc, #80]	; (298 <AT25SFWriteBytes+0x58>)

    AT25SFHoldTillReady();
     248:	4b14      	ldr	r3, [pc, #80]	; (29c <AT25SFWriteBytes+0x5c>)
     24a:	02ff      	lsls	r7, r7, #11
void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     24c:	9201      	str	r2, [sp, #4]
     24e:	9100      	str	r1, [sp, #0]
    AT25SFHoldTillReady();
     250:	4798      	blx	r3

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     252:	4d13      	ldr	r5, [pc, #76]	; (2a0 <AT25SFWriteBytes+0x60>)
     254:	6167      	str	r7, [r4, #20]
     256:	2106      	movs	r1, #6
     258:	2001      	movs	r0, #1
     25a:	47a8      	blx	r5
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     25c:	61a7      	str	r7, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     25e:	2102      	movs	r1, #2
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     260:	6167      	str	r7, [r4, #20]
     262:	2001      	movs	r0, #1
     264:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((address & 0xFF0000) >> 16));
     266:	0c31      	lsrs	r1, r6, #16
     268:	b2c9      	uxtb	r1, r1
     26a:	2001      	movs	r0, #1
     26c:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((address & 0x00FF00) >>  8));
     26e:	0a31      	lsrs	r1, r6, #8
     270:	b2c9      	uxtb	r1, r1
     272:	2001      	movs	r0, #1
     274:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((address & 0x0000FF) >>  0));
     276:	b2f1      	uxtb	r1, r6
     278:	2001      	movs	r0, #1
     27a:	47a8      	blx	r5
     27c:	9e01      	ldr	r6, [sp, #4]
     27e:	9b00      	ldr	r3, [sp, #0]
     280:	18f7      	adds	r7, r6, r3

    for (u8_t pos = 0; pos < len; ++pos) {
     282:	42be      	cmp	r6, r7
     284:	d103      	bne.n	28e <AT25SFWriteBytes+0x4e>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     286:	2380      	movs	r3, #128	; 0x80
     288:	02db      	lsls	r3, r3, #11
     28a:	61a3      	str	r3, [r4, #24]
        spiDataOut(MEM_SPI, bytes[pos]);
    }

    pinHigh(cs_mem);

}
     28c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        spiDataOut(MEM_SPI, bytes[pos]);
     28e:	7831      	ldrb	r1, [r6, #0]
     290:	2001      	movs	r0, #1
     292:	47a8      	blx	r5
     294:	3601      	adds	r6, #1
     296:	e7f4      	b.n	282 <AT25SFWriteBytes+0x42>
     298:	41004400 	.word	0x41004400
     29c:	000001e5 	.word	0x000001e5
     2a0:	000037ad 	.word	0x000037ad

000002a4 <AT25SEWritePage>:
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2a6:	2780      	movs	r7, #128	; 0x80
     2a8:	0006      	movs	r6, r0
     2aa:	4c13      	ldr	r4, [pc, #76]	; (2f8 <AT25SEWritePage+0x54>)
     2ac:	02ff      	lsls	r7, r7, #11

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2ae:	4d13      	ldr	r5, [pc, #76]	; (2fc <AT25SEWritePage+0x58>)
u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2b0:	9101      	str	r1, [sp, #4]
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2b2:	2001      	movs	r0, #1
     2b4:	6167      	str	r7, [r4, #20]
     2b6:	2106      	movs	r1, #6
     2b8:	47a8      	blx	r5
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ba:	61a7      	str	r7, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     2bc:	2102      	movs	r1, #2
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2be:	6167      	str	r7, [r4, #20]
     2c0:	2001      	movs	r0, #1
     2c2:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     2c4:	0c31      	lsrs	r1, r6, #16
     2c6:	b2c9      	uxtb	r1, r1
     2c8:	2001      	movs	r0, #1
     2ca:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     2cc:	0a31      	lsrs	r1, r6, #8
     2ce:	b2c9      	uxtb	r1, r1
     2d0:	2001      	movs	r0, #1
     2d2:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     2d4:	b2f1      	uxtb	r1, r6
     2d6:	2001      	movs	r0, #1
     2d8:	47a8      	blx	r5
     2da:	9e01      	ldr	r6, [sp, #4]
     2dc:	1c77      	adds	r7, r6, #1
     2de:	37ff      	adds	r7, #255	; 0xff


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        spiDataOut(SPI1,data[pos]);
     2e0:	7831      	ldrb	r1, [r6, #0]
     2e2:	2001      	movs	r0, #1
     2e4:	3601      	adds	r6, #1
     2e6:	47a8      	blx	r5
    for (u16_t pos = 0; pos < 256; ++pos) {
     2e8:	42b7      	cmp	r7, r6
     2ea:	d1f9      	bne.n	2e0 <AT25SEWritePage+0x3c>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ec:	2380      	movs	r3, #128	; 0x80
     2ee:	02db      	lsls	r3, r3, #11
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     2f0:	2000      	movs	r0, #0
     2f2:	61a3      	str	r3, [r4, #24]
     2f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	41004400 	.word	0x41004400
     2fc:	000037ad 	.word	0x000037ad

00000300 <AT25SEreadSample>:
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     300:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     304:	0005      	movs	r5, r0
     306:	000f      	movs	r7, r1
     308:	4e11      	ldr	r6, [pc, #68]	; (350 <AT25SEreadSample+0x50>)
     30a:	02db      	lsls	r3, r3, #11
     30c:	9201      	str	r2, [sp, #4]

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     30e:	4c11      	ldr	r4, [pc, #68]	; (354 <AT25SEreadSample+0x54>)
     310:	6173      	str	r3, [r6, #20]
     312:	210b      	movs	r1, #11
     314:	2001      	movs	r0, #1
     316:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     318:	0c29      	lsrs	r1, r5, #16
     31a:	b2c9      	uxtb	r1, r1
     31c:	2001      	movs	r0, #1
     31e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     320:	0a29      	lsrs	r1, r5, #8
     322:	b2c9      	uxtb	r1, r1
     324:	2001      	movs	r0, #1
     326:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     328:	b2e9      	uxtb	r1, r5
     32a:	2001      	movs	r0, #1
     32c:	47a0      	blx	r4
    spiDataOut(MEM_SPI, 0xFF);
     32e:	21ff      	movs	r1, #255	; 0xff
     330:	2001      	movs	r0, #1
     332:	47a0      	blx	r4
     334:	9c01      	ldr	r4, [sp, #4]
     336:	19e7      	adds	r7, r4, r7


    for (u8_t pos = 0; pos < len; ++pos) {
     338:	42bc      	cmp	r4, r7
     33a:	d103      	bne.n	344 <AT25SEreadSample+0x44>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     33c:	2380      	movs	r3, #128	; 0x80
     33e:	02db      	lsls	r3, r3, #11
     340:	61b3      	str	r3, [r6, #24]
        data[pos] = spiDataIn(MEM_SPI);
    }
    pinHigh(cs_mem);

}
     342:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        data[pos] = spiDataIn(MEM_SPI);
     344:	2001      	movs	r0, #1
     346:	4b04      	ldr	r3, [pc, #16]	; (358 <AT25SEreadSample+0x58>)
     348:	4798      	blx	r3
     34a:	7020      	strb	r0, [r4, #0]
     34c:	3401      	adds	r4, #1
     34e:	e7f3      	b.n	338 <AT25SEreadSample+0x38>
     350:	41004400 	.word	0x41004400
     354:	000037ad 	.word	0x000037ad
     358:	000037c5 	.word	0x000037c5

0000035c <AT25SEreadPage>:

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     35e:	2380      	movs	r3, #128	; 0x80
     360:	0007      	movs	r7, r0
     362:	000c      	movs	r4, r1
     364:	4e10      	ldr	r6, [pc, #64]	; (3a8 <AT25SEreadPage+0x4c>)
     366:	02db      	lsls	r3, r3, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     368:	4d10      	ldr	r5, [pc, #64]	; (3ac <AT25SEreadPage+0x50>)
     36a:	6173      	str	r3, [r6, #20]
     36c:	210b      	movs	r1, #11
     36e:	2001      	movs	r0, #1
     370:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     372:	0c39      	lsrs	r1, r7, #16
     374:	b2c9      	uxtb	r1, r1
     376:	2001      	movs	r0, #1
     378:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     37a:	0a39      	lsrs	r1, r7, #8
     37c:	b2c9      	uxtb	r1, r1
     37e:	2001      	movs	r0, #1
     380:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     382:	b2f9      	uxtb	r1, r7
     384:	2001      	movs	r0, #1
     386:	47a8      	blx	r5
    spiDataOut(MEM_SPI, 0xFF);
     388:	21ff      	movs	r1, #255	; 0xff
     38a:	2001      	movs	r0, #1
     38c:	47a8      	blx	r5
     38e:	1c65      	adds	r5, r4, #1
     390:	35ff      	adds	r5, #255	; 0xff

    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataIn(MEM_SPI);
     392:	2001      	movs	r0, #1
     394:	4b06      	ldr	r3, [pc, #24]	; (3b0 <AT25SEreadPage+0x54>)
     396:	4798      	blx	r3
     398:	7020      	strb	r0, [r4, #0]
     39a:	3401      	adds	r4, #1
    for (u16_t pos = 0; pos < 256; ++pos) {
     39c:	42ac      	cmp	r4, r5
     39e:	d1f8      	bne.n	392 <AT25SEreadPage+0x36>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3a0:	2380      	movs	r3, #128	; 0x80
     3a2:	02db      	lsls	r3, r3, #11
     3a4:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);

}
     3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3a8:	41004400 	.word	0x41004400
     3ac:	000037ad 	.word	0x000037ad
     3b0:	000037c5 	.word	0x000037c5

000003b4 <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>

u32_t readMS5803AdcResults() {
     3b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b6:	2780      	movs	r7, #128	; 0x80
     3b8:	4e0b      	ldr	r6, [pc, #44]	; (3e8 <readMS5803AdcResults+0x34>)
     3ba:	01ff      	lsls	r7, r7, #7

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, cmdAdcRead_);
     3bc:	2100      	movs	r1, #0
     3be:	4b0b      	ldr	r3, [pc, #44]	; (3ec <readMS5803AdcResults+0x38>)
     3c0:	6177      	str	r7, [r6, #20]
     3c2:	2002      	movs	r0, #2
     3c4:	4798      	blx	r3
    u8_t _byte1 = spiDataIn(SPI2);
     3c6:	4d0a      	ldr	r5, [pc, #40]	; (3f0 <readMS5803AdcResults+0x3c>)
     3c8:	2002      	movs	r0, #2
     3ca:	47a8      	blx	r5
     3cc:	0004      	movs	r4, r0
    u8_t _byte2 = spiDataIn(SPI2);
     3ce:	2002      	movs	r0, #2
     3d0:	47a8      	blx	r5
     3d2:	9001      	str	r0, [sp, #4]
    u8_t _byte3 = spiDataIn(SPI2);
     3d4:	2002      	movs	r0, #2
     3d6:	47a8      	blx	r5
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3d8:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
     3da:	9b01      	ldr	r3, [sp, #4]
     3dc:	0424      	lsls	r4, r4, #16
     3de:	021b      	lsls	r3, r3, #8
     3e0:	431c      	orrs	r4, r3
     3e2:	4320      	orrs	r0, r4
    return _receive;
}
     3e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	41004400 	.word	0x41004400
     3ec:	000037ad 	.word	0x000037ad
     3f0:	000037c5 	.word	0x000037c5

000003f4 <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     3f6:	2600      	movs	r6, #0
void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3f8:	b089      	sub	sp, #36	; 0x24
     3fa:	9306      	str	r3, [sp, #24]
    const u16_t C1 = coefficients_[1];
     3fc:	4b25      	ldr	r3, [pc, #148]	; (494 <ConvertPressureTemperature+0xa0>)
void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3fe:	9004      	str	r0, [sp, #16]
     400:	9205      	str	r2, [sp, #20]
    const u16_t C1 = coefficients_[1];
     402:	885a      	ldrh	r2, [r3, #2]
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     404:	4c24      	ldr	r4, [pc, #144]	; (498 <ConvertPressureTemperature+0xa4>)
    const u16_t C1 = coefficients_[1];
     406:	9202      	str	r2, [sp, #8]
    const u16_t C2 = coefficients_[2];
     408:	889a      	ldrh	r2, [r3, #4]
     40a:	9201      	str	r2, [sp, #4]
    const u16_t C4 = coefficients_[4];
     40c:	891a      	ldrh	r2, [r3, #8]
    const u16_t C3 = coefficients_[3];
     40e:	88dd      	ldrh	r5, [r3, #6]
    const u16_t C4 = coefficients_[4];
     410:	9203      	str	r2, [sp, #12]
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
     412:	895f      	ldrh	r7, [r3, #10]
     414:	023f      	lsls	r7, r7, #8
     416:	1bcf      	subs	r7, r1, r7
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     418:	17fa      	asrs	r2, r7, #31
     41a:	9207      	str	r2, [sp, #28]
     41c:	8998      	ldrh	r0, [r3, #12]
     41e:	003a      	movs	r2, r7
     420:	17fb      	asrs	r3, r7, #31
     422:	0031      	movs	r1, r6
     424:	47a0      	blx	r4
     426:	23fa      	movs	r3, #250	; 0xfa
     428:	0249      	lsls	r1, r1, #9
     42a:	0dc0      	lsrs	r0, r0, #23
     42c:	4308      	orrs	r0, r1
     42e:	00db      	lsls	r3, r3, #3
     430:	18c0      	adds	r0, r0, r3
     432:	9b05      	ldr	r3, [sp, #20]

    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
    const  int64_t SENS  =  ((int64_t)C1 << 16) + ((C3 * (int64_t)dT) >> 7);
     434:	003a      	movs	r2, r7
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     436:	6018      	str	r0, [r3, #0]
    const  int64_t SENS  =  ((int64_t)C1 << 16) + ((C3 * (int64_t)dT) >> 7);
     438:	0031      	movs	r1, r6
     43a:	17fb      	asrs	r3, r7, #31
     43c:	0028      	movs	r0, r5
     43e:	47a0      	blx	r4
     440:	064c      	lsls	r4, r1, #25
     442:	11cb      	asrs	r3, r1, #7
     444:	0031      	movs	r1, r6
     446:	09c2      	lsrs	r2, r0, #7
     448:	4322      	orrs	r2, r4
     44a:	9c02      	ldr	r4, [sp, #8]
     44c:	0420      	lsls	r0, r4, #16
     44e:	1880      	adds	r0, r0, r2
     450:	4159      	adcs	r1, r3
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     452:	4c11      	ldr	r4, [pc, #68]	; (498 <ConvertPressureTemperature+0xa4>)
     454:	9a04      	ldr	r2, [sp, #16]
     456:	0033      	movs	r3, r6
     458:	47a0      	blx	r4
     45a:	02cb      	lsls	r3, r1, #11
     45c:	0d44      	lsrs	r4, r0, #21
    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
     45e:	003a      	movs	r2, r7
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     460:	431c      	orrs	r4, r3
    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
     462:	4f0d      	ldr	r7, [pc, #52]	; (498 <ConvertPressureTemperature+0xa4>)
     464:	9b07      	ldr	r3, [sp, #28]
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     466:	154d      	asrs	r5, r1, #21
    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
     468:	9803      	ldr	r0, [sp, #12]
     46a:	0031      	movs	r1, r6
     46c:	47b8      	blx	r7
     46e:	9e01      	ldr	r6, [sp, #4]
     470:	068f      	lsls	r7, r1, #26
     472:	0982      	lsrs	r2, r0, #6
     474:	433a      	orrs	r2, r7
     476:	118b      	asrs	r3, r1, #6
     478:	0470      	lsls	r0, r6, #17
     47a:	0bf1      	lsrs	r1, r6, #15
     47c:	1812      	adds	r2, r2, r0
     47e:	414b      	adcs	r3, r1
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     480:	1aa4      	subs	r4, r4, r2
     482:	419d      	sbcs	r5, r3
     484:	046b      	lsls	r3, r5, #17
     486:	0be4      	lsrs	r4, r4, #15
     488:	431c      	orrs	r4, r3
     48a:	9b06      	ldr	r3, [sp, #24]
     48c:	601c      	str	r4, [r3, #0]

}
     48e:	b009      	add	sp, #36	; 0x24
     490:	bdf0      	pop	{r4, r5, r6, r7, pc}
     492:	46c0      	nop			; (mov r8, r8)
     494:	200002ae 	.word	0x200002ae
     498:	000050d5 	.word	0x000050d5

0000049c <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     49c:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/100)/1013.25);
     49e:	4b0c      	ldr	r3, [pc, #48]	; (4d0 <paToFeetNOAA+0x34>)
     4a0:	4798      	blx	r3
     4a2:	4c0c      	ldr	r4, [pc, #48]	; (4d4 <paToFeetNOAA+0x38>)
     4a4:	2200      	movs	r2, #0
     4a6:	4b0c      	ldr	r3, [pc, #48]	; (4d8 <paToFeetNOAA+0x3c>)
     4a8:	47a0      	blx	r4
     4aa:	2200      	movs	r2, #0
     4ac:	4b0b      	ldr	r3, [pc, #44]	; (4dc <paToFeetNOAA+0x40>)
     4ae:	47a0      	blx	r4
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     4b0:	4a0b      	ldr	r2, [pc, #44]	; (4e0 <paToFeetNOAA+0x44>)
     4b2:	4b0c      	ldr	r3, [pc, #48]	; (4e4 <paToFeetNOAA+0x48>)
     4b4:	4c0c      	ldr	r4, [pc, #48]	; (4e8 <paToFeetNOAA+0x4c>)
     4b6:	47a0      	blx	r4
     4b8:	4c0c      	ldr	r4, [pc, #48]	; (4ec <paToFeetNOAA+0x50>)
     4ba:	0002      	movs	r2, r0
     4bc:	000b      	movs	r3, r1
     4be:	2000      	movs	r0, #0
     4c0:	490b      	ldr	r1, [pc, #44]	; (4f0 <paToFeetNOAA+0x54>)
     4c2:	47a0      	blx	r4
     4c4:	4a0b      	ldr	r2, [pc, #44]	; (4f4 <paToFeetNOAA+0x58>)
     4c6:	4b0c      	ldr	r3, [pc, #48]	; (4f8 <paToFeetNOAA+0x5c>)
     4c8:	4c0c      	ldr	r4, [pc, #48]	; (4fc <paToFeetNOAA+0x60>)
     4ca:	47a0      	blx	r4
    return altFeet;

}
     4cc:	bd10      	pop	{r4, pc}
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	00006e41 	.word	0x00006e41
     4d4:	00005a05 	.word	0x00005a05
     4d8:	40590000 	.word	0x40590000
     4dc:	408faa00 	.word	0x408faa00
     4e0:	e279dd3c 	.word	0xe279dd3c
     4e4:	3fc85b39 	.word	0x3fc85b39
     4e8:	00003b85 	.word	0x00003b85
     4ec:	0000676d 	.word	0x0000676d
     4f0:	3ff00000 	.word	0x3ff00000
     4f4:	9999999a 	.word	0x9999999a
     4f8:	4101beb3 	.word	0x4101beb3
     4fc:	0000626d 	.word	0x0000626d

00000500 <readMS5803Coefficients>:



void readMS5803Coefficients() {
     500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     502:	2400      	movs	r4, #0
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     504:	2380      	movs	r3, #128	; 0x80

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
        pinLow(cs_baro);
		delay_us(600);
     506:	2096      	movs	r0, #150	; 0x96
     508:	4e12      	ldr	r6, [pc, #72]	; (554 <readMS5803Coefficients+0x54>)
     50a:	01db      	lsls	r3, r3, #7
     50c:	4d12      	ldr	r5, [pc, #72]	; (558 <readMS5803Coefficients+0x58>)
     50e:	6173      	str	r3, [r6, #20]
     510:	0080      	lsls	r0, r0, #2
     512:	47a8      	blx	r5
        spiDataOut(SPI2, _cmd);
     514:	0021      	movs	r1, r4
     516:	395e      	subs	r1, #94	; 0x5e
     518:	b2c9      	uxtb	r1, r1
     51a:	4b10      	ldr	r3, [pc, #64]	; (55c <readMS5803Coefficients+0x5c>)
     51c:	2002      	movs	r0, #2
     51e:	4798      	blx	r3
		delay_us(600);
     520:	2096      	movs	r0, #150	; 0x96
     522:	0080      	lsls	r0, r0, #2
     524:	47a8      	blx	r5
        u8_t _byte1 = spiDataIn(SPI2);
     526:	4f0e      	ldr	r7, [pc, #56]	; (560 <readMS5803Coefficients+0x60>)
     528:	2002      	movs	r0, #2
     52a:	47b8      	blx	r7
     52c:	9001      	str	r0, [sp, #4]
        u8_t _byte2 = spiDataIn(SPI2);
     52e:	2002      	movs	r0, #2
     530:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     532:	2380      	movs	r3, #128	; 0x80
     534:	0007      	movs	r7, r0
        pinHigh(cs_baro);
		delay_us(600);
     536:	2096      	movs	r0, #150	; 0x96
     538:	01db      	lsls	r3, r3, #7
     53a:	61b3      	str	r3, [r6, #24]
     53c:	0080      	lsls	r0, r0, #2
     53e:	47a8      	blx	r5
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     540:	9a01      	ldr	r2, [sp, #4]
     542:	4b08      	ldr	r3, [pc, #32]	; (564 <readMS5803Coefficients+0x64>)
     544:	0215      	lsls	r5, r2, #8
     546:	18e3      	adds	r3, r4, r3
     548:	432f      	orrs	r7, r5
     54a:	3402      	adds	r4, #2
     54c:	805f      	strh	r7, [r3, #2]
    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
     54e:	2c0c      	cmp	r4, #12
     550:	d1d8      	bne.n	504 <readMS5803Coefficients+0x4>
    }

}
     552:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     554:	41004400 	.word	0x41004400
     558:	00001155 	.word	0x00001155
     55c:	000037ad 	.word	0x000037ad
     560:	000037c5 	.word	0x000037c5
     564:	200002ae 	.word	0x200002ae

00000568 <initMS5803Barometer>:

void initMS5803Barometer() {
     568:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     56a:	2580      	movs	r5, #128	; 0x80
     56c:	4c06      	ldr	r4, [pc, #24]	; (588 <initMS5803Barometer+0x20>)
     56e:	01ed      	lsls	r5, r5, #7


    pinLow(cs_baro);
    spiDataOut(BARO_SPI, MS5803_CMD_RES);
     570:	211e      	movs	r1, #30
     572:	6165      	str	r5, [r4, #20]
     574:	2002      	movs	r0, #2
     576:	4b05      	ldr	r3, [pc, #20]	; (58c <initMS5803Barometer+0x24>)
     578:	4798      	blx	r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     57a:	61a5      	str	r5, [r4, #24]

    pinHigh(cs_baro);
    delay_ms(200);
     57c:	20c8      	movs	r0, #200	; 0xc8
     57e:	4b04      	ldr	r3, [pc, #16]	; (590 <initMS5803Barometer+0x28>)
     580:	4798      	blx	r3
    readMS5803Coefficients();
     582:	4b04      	ldr	r3, [pc, #16]	; (594 <initMS5803Barometer+0x2c>)
     584:	4798      	blx	r3

}
     586:	bd70      	pop	{r4, r5, r6, pc}
     588:	41004400 	.word	0x41004400
     58c:	000037ad 	.word	0x000037ad
     590:	00001185 	.word	0x00001185
     594:	00000501 	.word	0x00000501

00000598 <MS5803_CRC4>:
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     598:	4b02      	ldr	r3, [pc, #8]	; (5a4 <MS5803_CRC4+0xc>)
    return (n_rem & 0x00);
}
     59a:	2000      	movs	r0, #0
    coefficients_[7] = crc_read;
     59c:	7b9a      	ldrb	r2, [r3, #14]
     59e:	81da      	strh	r2, [r3, #14]
}
     5a0:	4770      	bx	lr
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	200002ae 	.word	0x200002ae

000005a8 <init>:
#include "math.h"

void init() {

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     5a8:	211e      	movs	r1, #30
void init() {
     5aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     5ac:	4af7      	ldr	r2, [pc, #988]	; (98c <init+0x3e4>)
void init() {
     5ae:	b085      	sub	sp, #20
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     5b0:	6853      	ldr	r3, [r2, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5b2:	260f      	movs	r6, #15
     5b4:	438b      	bics	r3, r1
     5b6:	391c      	subs	r1, #28
     5b8:	430b      	orrs	r3, r1
     5ba:	6053      	str	r3, [r2, #4]

    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     5bc:	4af4      	ldr	r2, [pc, #976]	; (990 <init+0x3e8>)
     5be:	3106      	adds	r1, #6
     5c0:	6993      	ldr	r3, [r2, #24]
     5c2:	2401      	movs	r4, #1
     5c4:	430b      	orrs	r3, r1
     5c6:	6193      	str	r3, [r2, #24]

    SystemInit();
     5c8:	4bf2      	ldr	r3, [pc, #968]	; (994 <init+0x3ec>)
     5ca:	4798      	blx	r3
    GclkInit(0);
     5cc:	2000      	movs	r0, #0
     5ce:	4bf2      	ldr	r3, [pc, #968]	; (998 <init+0x3f0>)
     5d0:	4798      	blx	r3
    RtcInit();
     5d2:	4bf2      	ldr	r3, [pc, #968]	; (99c <init+0x3f4>)
     5d4:	4798      	blx	r3
    delayInit();
     5d6:	4bf2      	ldr	r3, [pc, #968]	; (9a0 <init+0x3f8>)
     5d8:	4798      	blx	r3
    adcInit();
     5da:	4bf2      	ldr	r3, [pc, #968]	; (9a4 <init+0x3fc>)
     5dc:	4798      	blx	r3
     5de:	4bf2      	ldr	r3, [pc, #968]	; (9a8 <init+0x400>)
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5e0:	2002      	movs	r0, #2
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5e2:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5e4:	0019      	movs	r1, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5e6:	3533      	adds	r5, #51	; 0x33
     5e8:	782a      	ldrb	r2, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5ea:	3146      	adds	r1, #70	; 0x46
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5ec:	43b2      	bics	r2, r6
     5ee:	4322      	orrs	r2, r4
     5f0:	702a      	strb	r2, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f2:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5f4:	001f      	movs	r7, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f6:	4322      	orrs	r2, r4
     5f8:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5fa:	001a      	movs	r2, r3
     5fc:	3247      	adds	r2, #71	; 0x47
     5fe:	7811      	ldrb	r1, [r2, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     600:	3794      	adds	r7, #148	; 0x94
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     602:	43a1      	bics	r1, r4
     604:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     606:	7811      	ldrb	r1, [r2, #0]
     608:	4301      	orrs	r1, r0
     60a:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     60c:	2180      	movs	r1, #128	; 0x80
     60e:	6059      	str	r1, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     610:	7828      	ldrb	r0, [r5, #0]
     612:	3970      	subs	r1, #112	; 0x70
     614:	4030      	ands	r0, r6
     616:	4308      	orrs	r0, r1
     618:	7028      	strb	r0, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     61a:	2502      	movs	r5, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     61c:	7810      	ldrb	r0, [r2, #0]
     61e:	4320      	orrs	r0, r4
     620:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     622:	327c      	adds	r2, #124	; 0x7c
     624:	7810      	ldrb	r0, [r2, #0]
     626:	43a0      	bics	r0, r4
     628:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     62a:	7810      	ldrb	r0, [r2, #0]
     62c:	4328      	orrs	r0, r5
     62e:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     630:	2008      	movs	r0, #8
     632:	4684      	mov	ip, r0
     634:	449c      	add	ip, r3
     636:	4660      	mov	r0, ip
     638:	3506      	adds	r5, #6
     63a:	67c5      	str	r5, [r0, #124]	; 0x7c
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     63c:	30a9      	adds	r0, #169	; 0xa9
     63e:	7805      	ldrb	r5, [r0, #0]
     640:	4035      	ands	r5, r6
     642:	430d      	orrs	r5, r1
     644:	7005      	strb	r5, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     646:	7815      	ldrb	r5, [r2, #0]
     648:	4325      	orrs	r5, r4
     64a:	7015      	strb	r5, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     64c:	001d      	movs	r5, r3
     64e:	35d7      	adds	r5, #215	; 0xd7
     650:	782a      	ldrb	r2, [r5, #0]
     652:	43a2      	bics	r2, r4
     654:	702a      	strb	r2, [r5, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     656:	2580      	movs	r5, #128	; 0x80
     658:	4ad4      	ldr	r2, [pc, #848]	; (9ac <init+0x404>)
     65a:	042d      	lsls	r5, r5, #16
     65c:	6015      	str	r5, [r2, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     65e:	002a      	movs	r2, r5
     660:	9703      	str	r7, [sp, #12]
     662:	603a      	str	r2, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     664:	001a      	movs	r2, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     666:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     668:	32c2      	adds	r2, #194	; 0xc2
     66a:	7815      	ldrb	r5, [r2, #0]
     66c:	43a5      	bics	r5, r4
     66e:	7015      	strb	r5, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     670:	7815      	ldrb	r5, [r2, #0]
     672:	433d      	orrs	r5, r7
     674:	7015      	strb	r5, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     676:	4665      	mov	r5, ip
     678:	19ff      	adds	r7, r7, r7
     67a:	67ef      	str	r7, [r5, #124]	; 0x7c
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     67c:	7805      	ldrb	r5, [r0, #0]
     67e:	43b5      	bics	r5, r6
     680:	4325      	orrs	r5, r4
     682:	7005      	strb	r5, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     684:	7810      	ldrb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     686:	2502      	movs	r5, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     688:	4320      	orrs	r0, r4
     68a:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     68c:	0018      	movs	r0, r3
     68e:	30d6      	adds	r0, #214	; 0xd6
     690:	7802      	ldrb	r2, [r0, #0]
     692:	43a2      	bics	r2, r4
     694:	7002      	strb	r2, [r0, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     696:	2080      	movs	r0, #128	; 0x80
     698:	4ac4      	ldr	r2, [pc, #784]	; (9ac <init+0x404>)
     69a:	03c0      	lsls	r0, r0, #15
     69c:	6010      	str	r0, [r2, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     69e:	0002      	movs	r2, r0
     6a0:	9803      	ldr	r0, [sp, #12]
     6a2:	6002      	str	r2, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6a4:	001a      	movs	r2, r3
     6a6:	3243      	adds	r2, #67	; 0x43
     6a8:	7810      	ldrb	r0, [r2, #0]
     6aa:	43a0      	bics	r0, r4
     6ac:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6ae:	7810      	ldrb	r0, [r2, #0]
     6b0:	4328      	orrs	r0, r5
     6b2:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6b4:	2008      	movs	r0, #8
     6b6:	6058      	str	r0, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6b8:	0018      	movs	r0, r3
     6ba:	3031      	adds	r0, #49	; 0x31
     6bc:	7805      	ldrb	r5, [r0, #0]
     6be:	4035      	ands	r5, r6
     6c0:	4329      	orrs	r1, r5
     6c2:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c4:	7811      	ldrb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6c6:	2502      	movs	r5, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c8:	4321      	orrs	r1, r4
     6ca:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6cc:	0019      	movs	r1, r3
     6ce:	3159      	adds	r1, #89	; 0x59
     6d0:	780a      	ldrb	r2, [r1, #0]
     6d2:	43a2      	bics	r2, r4
     6d4:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6d6:	2280      	movs	r2, #128	; 0x80
     6d8:	0492      	lsls	r2, r2, #18
     6da:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6dc:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6de:	001a      	movs	r2, r3
     6e0:	3242      	adds	r2, #66	; 0x42
     6e2:	7811      	ldrb	r1, [r2, #0]
     6e4:	43a1      	bics	r1, r4
     6e6:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6e8:	7811      	ldrb	r1, [r2, #0]
     6ea:	4329      	orrs	r1, r5
     6ec:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6ee:	605f      	str	r7, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6f0:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6f2:	001f      	movs	r7, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6f4:	43b1      	bics	r1, r6
     6f6:	4321      	orrs	r1, r4
     6f8:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fa:	7811      	ldrb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6fc:	3749      	adds	r7, #73	; 0x49
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fe:	4321      	orrs	r1, r4
     700:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     702:	0019      	movs	r1, r3
     704:	3158      	adds	r1, #88	; 0x58
     706:	780a      	ldrb	r2, [r1, #0]
     708:	43a2      	bics	r2, r4
     70a:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     70c:	2280      	movs	r2, #128	; 0x80
    pinIn(senseDPin);
    pinMux(senseDPin);
    pinOut(fireDPin);
    pinLow(fireDPin);

    charges.igniterAHot = false;
     70e:	2100      	movs	r1, #0
     710:	0452      	lsls	r2, r2, #17
     712:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     714:	615a      	str	r2, [r3, #20]
     716:	4aa6      	ldr	r2, [pc, #664]	; (9b0 <init+0x408>)
     718:	7011      	strb	r1, [r2, #0]
    charges.igniterBHot = false;
     71a:	2100      	movs	r1, #0
     71c:	7211      	strb	r1, [r2, #8]
    charges.igniterCHot = false;
     71e:	2100      	movs	r1, #0
     720:	7411      	strb	r1, [r2, #16]
    charges.igniterDHot = false;
     722:	2100      	movs	r1, #0
     724:	7611      	strb	r1, [r2, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     726:	7dc2      	ldrb	r2, [r0, #23]
     728:	43a2      	bics	r2, r4
     72a:	75c2      	strb	r2, [r0, #23]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     72c:	2280      	movs	r2, #128	; 0x80
     72e:	0052      	lsls	r2, r2, #1
     730:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     732:	783a      	ldrb	r2, [r7, #0]
     734:	43a2      	bics	r2, r4
     736:	703a      	strb	r2, [r7, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     738:	2280      	movs	r2, #128	; 0x80
     73a:	0092      	lsls	r2, r2, #2
     73c:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     73e:	001a      	movs	r2, r3
     740:	324b      	adds	r2, #75	; 0x4b
     742:	7811      	ldrb	r1, [r2, #0]
     744:	43a1      	bics	r1, r4
     746:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     748:	7811      	ldrb	r1, [r2, #0]
     74a:	4329      	orrs	r1, r5
     74c:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     74e:	2180      	movs	r1, #128	; 0x80
     750:	0109      	lsls	r1, r1, #4
     752:	6059      	str	r1, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     754:	2135      	movs	r1, #53	; 0x35
     756:	468c      	mov	ip, r1
     758:	449c      	add	ip, r3
     75a:	4661      	mov	r1, ip
     75c:	7809      	ldrb	r1, [r1, #0]
     75e:	351e      	adds	r5, #30
     760:	4031      	ands	r1, r6
     762:	4329      	orrs	r1, r5
     764:	4665      	mov	r5, ip
     766:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     768:	7811      	ldrb	r1, [r2, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     76a:	2520      	movs	r5, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76c:	4321      	orrs	r1, r4
     76e:	7011      	strb	r1, [r2, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     770:	0019      	movs	r1, r3
     772:	3134      	adds	r1, #52	; 0x34
     774:	780a      	ldrb	r2, [r1, #0]
     776:	4032      	ands	r2, r6
     778:	432a      	orrs	r2, r5
     77a:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     77c:	783a      	ldrb	r2, [r7, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     77e:	3d1e      	subs	r5, #30
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     780:	4322      	orrs	r2, r4
     782:	703a      	strb	r2, [r7, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     784:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     786:	3706      	adds	r7, #6
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     788:	43b2      	bics	r2, r6
     78a:	432a      	orrs	r2, r5
     78c:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     78e:	7dc2      	ldrb	r2, [r0, #23]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     790:	3196      	adds	r1, #150	; 0x96
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     792:	4322      	orrs	r2, r4
     794:	75c2      	strb	r2, [r0, #23]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     796:	780a      	ldrb	r2, [r1, #0]
     798:	43a2      	bics	r2, r4
     79a:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     79c:	2280      	movs	r2, #128	; 0x80
     79e:	4983      	ldr	r1, [pc, #524]	; (9ac <init+0x404>)
     7a0:	00d2      	lsls	r2, r2, #3
     7a2:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7a4:	0019      	movs	r1, r3
     7a6:	3198      	adds	r1, #152	; 0x98
     7a8:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7aa:	7e41      	ldrb	r1, [r0, #25]
     7ac:	43a1      	bics	r1, r4
     7ae:	7641      	strb	r1, [r0, #25]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b0:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7b2:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b4:	7fc2      	ldrb	r2, [r0, #31]
     7b6:	43a2      	bics	r2, r4
     7b8:	77c2      	strb	r2, [r0, #31]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ba:	2280      	movs	r2, #128	; 0x80
     7bc:	0252      	lsls	r2, r2, #9
     7be:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c0:	78ba      	ldrb	r2, [r7, #2]
     7c2:	43a2      	bics	r2, r4
     7c4:	70ba      	strb	r2, [r7, #2]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7c6:	2280      	movs	r2, #128	; 0x80
     7c8:	0292      	lsls	r2, r2, #10
     7ca:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7cc:	001a      	movs	r2, r3
     7ce:	3253      	adds	r2, #83	; 0x53
     7d0:	7811      	ldrb	r1, [r2, #0]
     7d2:	43a1      	bics	r1, r4
     7d4:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7d6:	7811      	ldrb	r1, [r2, #0]
     7d8:	4329      	orrs	r1, r5
     7da:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7dc:	2180      	movs	r1, #128	; 0x80
     7de:	0309      	lsls	r1, r1, #12
     7e0:	6059      	str	r1, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7e2:	2139      	movs	r1, #57	; 0x39
     7e4:	468c      	mov	ip, r1
     7e6:	449c      	add	ip, r3
     7e8:	4661      	mov	r1, ip
     7ea:	7809      	ldrb	r1, [r1, #0]
     7ec:	351e      	adds	r5, #30
     7ee:	4031      	ands	r1, r6
     7f0:	4329      	orrs	r1, r5
     7f2:	4665      	mov	r5, ip
     7f4:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7f6:	7811      	ldrb	r1, [r2, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7f8:	2520      	movs	r5, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fa:	4321      	orrs	r1, r4
     7fc:	7011      	strb	r1, [r2, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7fe:	0019      	movs	r1, r3
     800:	3138      	adds	r1, #56	; 0x38
     802:	780a      	ldrb	r2, [r1, #0]
     804:	4032      	ands	r2, r6
     806:	432a      	orrs	r2, r5
     808:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     80a:	78ba      	ldrb	r2, [r7, #2]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     80c:	3d1e      	subs	r5, #30
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     80e:	4322      	orrs	r2, r4
     810:	70ba      	strb	r2, [r7, #2]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     812:	780a      	ldrb	r2, [r1, #0]
     814:	43b2      	bics	r2, r6
     816:	432a      	orrs	r2, r5
     818:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     81a:	7fc2      	ldrb	r2, [r0, #31]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81c:	3114      	adds	r1, #20
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     81e:	4322      	orrs	r2, r4
     820:	77c2      	strb	r2, [r0, #31]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     822:	798a      	ldrb	r2, [r1, #6]
     824:	43a2      	bics	r2, r4
     826:	718a      	strb	r2, [r1, #6]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     828:	2280      	movs	r2, #128	; 0x80
     82a:	02d2      	lsls	r2, r2, #11
     82c:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     82e:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     830:	9103      	str	r1, [sp, #12]
     832:	780a      	ldrb	r2, [r1, #0]
     834:	43a2      	bics	r2, r4
     836:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     838:	2280      	movs	r2, #128	; 0x80
     83a:	0152      	lsls	r2, r2, #5
     83c:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     83e:	783a      	ldrb	r2, [r7, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     840:	2120      	movs	r1, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     842:	43a2      	bics	r2, r4
     844:	703a      	strb	r2, [r7, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     846:	2280      	movs	r2, #128	; 0x80
     848:	0212      	lsls	r2, r2, #8
     84a:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     84c:	001a      	movs	r2, r3
     84e:	324d      	adds	r2, #77	; 0x4d
     850:	7810      	ldrb	r0, [r2, #0]
     852:	43a0      	bics	r0, r4
     854:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     856:	7810      	ldrb	r0, [r2, #0]
     858:	4328      	orrs	r0, r5
     85a:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     85c:	2080      	movs	r0, #128	; 0x80
     85e:	0180      	lsls	r0, r0, #6
     860:	6058      	str	r0, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     862:	0018      	movs	r0, r3
     864:	3036      	adds	r0, #54	; 0x36
     866:	7805      	ldrb	r5, [r0, #0]
     868:	4035      	ands	r5, r6
     86a:	430d      	orrs	r5, r1
     86c:	7005      	strb	r5, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     86e:	7811      	ldrb	r1, [r2, #0]
     870:	000d      	movs	r5, r1
     872:	4325      	orrs	r5, r4
     874:	7015      	strb	r5, [r2, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     876:	2237      	movs	r2, #55	; 0x37
     878:	4694      	mov	ip, r2
     87a:	449c      	add	ip, r3
     87c:	4662      	mov	r2, ip
     87e:	2120      	movs	r1, #32
     880:	7812      	ldrb	r2, [r2, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     882:	2502      	movs	r5, #2
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     884:	4032      	ands	r2, r6
     886:	430a      	orrs	r2, r1
     888:	4661      	mov	r1, ip
     88a:	700a      	strb	r2, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     88c:	2102      	movs	r1, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     88e:	783a      	ldrb	r2, [r7, #0]
     890:	4322      	orrs	r2, r4
     892:	703a      	strb	r2, [r7, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     894:	7802      	ldrb	r2, [r0, #0]
     896:	43b2      	bics	r2, r6
     898:	430a      	orrs	r2, r1
     89a:	7002      	strb	r2, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     89c:	9a03      	ldr	r2, [sp, #12]
     89e:	9903      	ldr	r1, [sp, #12]
     8a0:	7812      	ldrb	r2, [r2, #0]
     8a2:	4322      	orrs	r2, r4
     8a4:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8a6:	0019      	movs	r1, r3
     8a8:	314e      	adds	r1, #78	; 0x4e
     8aa:	780a      	ldrb	r2, [r1, #0]
     8ac:	43a2      	bics	r2, r4
     8ae:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8b0:	2280      	movs	r2, #128	; 0x80
     8b2:	01d2      	lsls	r2, r2, #7
     8b4:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8b6:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8b8:	001a      	movs	r2, r3
     8ba:	3255      	adds	r2, #85	; 0x55
     8bc:	7811      	ldrb	r1, [r2, #0]
     8be:	43a1      	bics	r1, r4
     8c0:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8c2:	2180      	movs	r1, #128	; 0x80
     8c4:	0389      	lsls	r1, r1, #14
     8c6:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8c8:	7811      	ldrb	r1, [r2, #0]
     8ca:	43a1      	bics	r1, r4
     8cc:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8ce:	2140      	movs	r1, #64	; 0x40
     8d0:	7810      	ldrb	r0, [r2, #0]
     8d2:	4301      	orrs	r1, r0
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8d4:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8d6:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8d8:	3056      	adds	r0, #86	; 0x56
     8da:	7802      	ldrb	r2, [r0, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8dc:	0019      	movs	r1, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8de:	43a2      	bics	r2, r4
     8e0:	7002      	strb	r2, [r0, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8e2:	2280      	movs	r2, #128	; 0x80
     8e4:	03d2      	lsls	r2, r2, #15
     8e6:	609a      	str	r2, [r3, #8]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8e8:	313b      	adds	r1, #59	; 0x3b
     8ea:	780a      	ldrb	r2, [r1, #0]
     8ec:	43b2      	bics	r2, r6
     8ee:	432a      	orrs	r2, r5
     8f0:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8f2:	7802      	ldrb	r2, [r0, #0]
     8f4:	4322      	orrs	r2, r4
     8f6:	7002      	strb	r2, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8f8:	001a      	movs	r2, r3
     8fa:	3257      	adds	r2, #87	; 0x57
     8fc:	7810      	ldrb	r0, [r2, #0]
     8fe:	43a0      	bics	r0, r4
     900:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     902:	7810      	ldrb	r0, [r2, #0]
     904:	4328      	orrs	r0, r5
     906:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     908:	2080      	movs	r0, #128	; 0x80
     90a:	0400      	lsls	r0, r0, #16
     90c:	6058      	str	r0, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     90e:	2020      	movs	r0, #32
     910:	780b      	ldrb	r3, [r1, #0]
     912:	4033      	ands	r3, r6
     914:	4303      	orrs	r3, r0
     916:	700b      	strb	r3, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     918:	7813      	ldrb	r3, [r2, #0]
    pinOut(TxPo);
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);

    delay_ms(200);
     91a:	30a8      	adds	r0, #168	; 0xa8
     91c:	4323      	orrs	r3, r4
     91e:	7013      	strb	r3, [r2, #0]
     920:	4b24      	ldr	r3, [pc, #144]	; (9b4 <init+0x40c>)
     922:	4798      	blx	r3

    sercomClockEnable(SPI2, 3, 4);
     924:	4f24      	ldr	r7, [pc, #144]	; (9b8 <init+0x410>)
     926:	0028      	movs	r0, r5
     928:	2204      	movs	r2, #4
     92a:	2103      	movs	r1, #3
     92c:	47b8      	blx	r7
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 0x00);
     92e:	2300      	movs	r3, #0
     930:	4e22      	ldr	r6, [pc, #136]	; (9bc <init+0x414>)
     932:	9301      	str	r3, [sp, #4]
     934:	9300      	str	r3, [sp, #0]
     936:	0021      	movs	r1, r4
     938:	0028      	movs	r0, r5
     93a:	2203      	movs	r2, #3
     93c:	47b0      	blx	r6

    sercomClockEnable(SPI0, 3, 4);
     93e:	2204      	movs	r2, #4
     940:	2103      	movs	r1, #3
     942:	2000      	movs	r0, #0
     944:	47b8      	blx	r7
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     946:	2300      	movs	r3, #0
     948:	2103      	movs	r1, #3
     94a:	9301      	str	r3, [sp, #4]
     94c:	9300      	str	r3, [sp, #0]
     94e:	001a      	movs	r2, r3
     950:	0018      	movs	r0, r3
     952:	47b0      	blx	r6

    sercomClockEnable(SPI1, 3, 4);
     954:	0020      	movs	r0, r4
     956:	2204      	movs	r2, #4
     958:	2103      	movs	r1, #3
     95a:	47b8      	blx	r7
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     95c:	2300      	movs	r3, #0
     95e:	0020      	movs	r0, r4
     960:	9301      	str	r3, [sp, #4]
     962:	9300      	str	r3, [sp, #0]
     964:	001a      	movs	r2, r3
     966:	2103      	movs	r1, #3
     968:	47b0      	blx	r6

    sercomClockEnable(USART3, 4, 8);
     96a:	2208      	movs	r2, #8
     96c:	2104      	movs	r1, #4
     96e:	2003      	movs	r0, #3
     970:	47b8      	blx	r7
    sercomUartInit(USART3,1,0,19200);
     972:	2396      	movs	r3, #150	; 0x96
     974:	0021      	movs	r1, r4
     976:	2200      	movs	r2, #0
     978:	2003      	movs	r0, #3
     97a:	01db      	lsls	r3, r3, #7
     97c:	4c10      	ldr	r4, [pc, #64]	; (9c0 <init+0x418>)
     97e:	47a0      	blx	r4

    TC4Init();
     980:	4b10      	ldr	r3, [pc, #64]	; (9c4 <init+0x41c>)
     982:	4798      	blx	r3
    TC5Init();
     984:	4b10      	ldr	r3, [pc, #64]	; (9c8 <init+0x420>)
     986:	4798      	blx	r3
}
     988:	b005      	add	sp, #20
     98a:	e01f      	b.n	9cc <init+0x424>
     98c:	41004000 	.word	0x41004000
     990:	40000400 	.word	0x40000400
     994:	000001d5 	.word	0x000001d5
     998:	000010b1 	.word	0x000010b1
     99c:	00000fb9 	.word	0x00000fb9
     9a0:	00001129 	.word	0x00001129
     9a4:	00000dad 	.word	0x00000dad
     9a8:	41004400 	.word	0x41004400
     9ac:	41004488 	.word	0x41004488
     9b0:	200002c4 	.word	0x200002c4
     9b4:	00001185 	.word	0x00001185
     9b8:	00003689 	.word	0x00003689
     9bc:	000036e9 	.word	0x000036e9
     9c0:	0000374d 	.word	0x0000374d
     9c4:	00001205 	.word	0x00001205
     9c8:	0000126d 	.word	0x0000126d
     9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9ce:	46c0      	nop			; (mov r8, r8)

000009d0 <main>:


int main(void) {
     9d0:	b570      	push	{r4, r5, r6, lr}

    init();
     9d2:	4b17      	ldr	r3, [pc, #92]	; (a30 <main+0x60>)
     9d4:	4798      	blx	r3

    initMS5803Barometer();
     9d6:	4b17      	ldr	r3, [pc, #92]	; (a34 <main+0x64>)
     9d8:	4798      	blx	r3
    IMUinit();
     9da:	4b17      	ldr	r3, [pc, #92]	; (a38 <main+0x68>)
     9dc:	4798      	blx	r3

    computeKalmanGains();
     9de:	4b17      	ldr	r3, [pc, #92]	; (a3c <main+0x6c>)
     9e0:	4798      	blx	r3

    computeKalmanBaroOnlyGains();
     9e2:	4b17      	ldr	r3, [pc, #92]	; (a40 <main+0x70>)
     9e4:	4798      	blx	r3

    sampleTick();
     9e6:	4c17      	ldr	r4, [pc, #92]	; (a44 <main+0x74>)
     9e8:	47a0      	blx	r4

    POST();
     9ea:	4b17      	ldr	r3, [pc, #92]	; (a48 <main+0x78>)
     9ec:	4798      	blx	r3

    //isItPointingUp();

    getSettings();
     9ee:	4b17      	ldr	r3, [pc, #92]	; (a4c <main+0x7c>)
     9f0:	4798      	blx	r3

    beep(100);
     9f2:	4b17      	ldr	r3, [pc, #92]	; (a50 <main+0x80>)
     9f4:	2064      	movs	r0, #100	; 0x64
     9f6:	4798      	blx	r3
    delay_ms(500);
     9f8:	20fa      	movs	r0, #250	; 0xfa
     9fa:	4d16      	ldr	r5, [pc, #88]	; (a54 <main+0x84>)
     9fc:	0040      	lsls	r0, r0, #1
     9fe:	47a8      	blx	r5

    continuityBeep();
     a00:	4b15      	ldr	r3, [pc, #84]	; (a58 <main+0x88>)
     a02:	4798      	blx	r3
    delay_ms(1000);
     a04:	20fa      	movs	r0, #250	; 0xfa
     a06:	0080      	lsls	r0, r0, #2
     a08:	47a8      	blx	r5

    startupTick = millis();
     a0a:	4b14      	ldr	r3, [pc, #80]	; (a5c <main+0x8c>)
     a0c:	4798      	blx	r3
     a0e:	4b14      	ldr	r3, [pc, #80]	; (a60 <main+0x90>)
     a10:	6018      	str	r0, [r3, #0]

    while (1) {
		
		
        if (takeSample()) {
     a12:	4b14      	ldr	r3, [pc, #80]	; (a64 <main+0x94>)
     a14:	4798      	blx	r3
     a16:	2800      	cmp	r0, #0
     a18:	d0fb      	beq.n	a12 <main+0x42>
			lookForUSARTReset();
     a1a:	4b13      	ldr	r3, [pc, #76]	; (a68 <main+0x98>)
     a1c:	4798      	blx	r3
            sampleTick();
     a1e:	47a0      	blx	r4
            flight();
     a20:	4b12      	ldr	r3, [pc, #72]	; (a6c <main+0x9c>)
     a22:	4798      	blx	r3
            igniterTick();
     a24:	4b12      	ldr	r3, [pc, #72]	; (a70 <main+0xa0>)
     a26:	4798      	blx	r3
            computeKalmanStates();
     a28:	4b12      	ldr	r3, [pc, #72]	; (a74 <main+0xa4>)
     a2a:	4798      	blx	r3
     a2c:	e7f1      	b.n	a12 <main+0x42>
     a2e:	46c0      	nop			; (mov r8, r8)
     a30:	000005a9 	.word	0x000005a9
     a34:	00000569 	.word	0x00000569
     a38:	00000a95 	.word	0x00000a95
     a3c:	000018fd 	.word	0x000018fd
     a40:	000021a1 	.word	0x000021a1
     a44:	00003391 	.word	0x00003391
     a48:	00000cb9 	.word	0x00000cb9
     a4c:	000038f1 	.word	0x000038f1
     a50:	00000e8d 	.word	0x00000e8d
     a54:	00001185 	.word	0x00001185
     a58:	000016c9 	.word	0x000016c9
     a5c:	000011cd 	.word	0x000011cd
     a60:	2000019c 	.word	0x2000019c
     a64:	00003379 	.word	0x00003379
     a68:	00000ac1 	.word	0x00000ac1
     a6c:	000012d5 	.word	0x000012d5
     a70:	0000171d 	.word	0x0000171d
     a74:	00002c01 	.word	0x00002c01

00000a78 <HardFault_Handler>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     a78:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     a7c:	4a03      	ldr	r2, [pc, #12]	; (a8c <HardFault_Handler+0x14>)
     a7e:	4b04      	ldr	r3, [pc, #16]	; (a90 <HardFault_Handler+0x18>)
     a80:	60da      	str	r2, [r3, #12]
     a82:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	e7fd      	b.n	a86 <HardFault_Handler+0xe>
     a8a:	46c0      	nop			; (mov r8, r8)
     a8c:	05fa0004 	.word	0x05fa0004
     a90:	e000ed00 	.word	0xe000ed00

00000a94 <IMUinit>:
extern uint32_t _ezero;
extern uint32_t _sstack;
extern uint32_t _estack;


void IMUinit() {
     a94:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a96:	4c08      	ldr	r4, [pc, #32]	; (ab8 <IMUinit+0x24>)
     a98:	2580      	movs	r5, #128	; 0x80
     a9a:	0023      	movs	r3, r4
     a9c:	00ed      	lsls	r5, r5, #3
     a9e:	3394      	adds	r3, #148	; 0x94
     aa0:	601d      	str	r5, [r3, #0]

    pinLow(cs_accel);
    spiDataOut(SPI0, BMI_ACCEL_PMU_RANGE);
     aa2:	4e06      	ldr	r6, [pc, #24]	; (abc <IMUinit+0x28>)
     aa4:	210f      	movs	r1, #15
     aa6:	2000      	movs	r0, #0
     aa8:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     aaa:	3498      	adds	r4, #152	; 0x98
    spiDataOut(SPI0, BMI_ACCEL_16G_RANGE);
     aac:	210c      	movs	r1, #12
     aae:	2000      	movs	r0, #0
     ab0:	47b0      	blx	r6
     ab2:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     ab4:	bd70      	pop	{r4, r5, r6, pc}
     ab6:	46c0      	nop			; (mov r8, r8)
     ab8:	41004400 	.word	0x41004400
     abc:	000037ad 	.word	0x000037ad

00000ac0 <lookForUSARTReset>:

void lookForUSARTReset(){
     ac0:	b510      	push	{r4, lr}
	 if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     ac2:	4b09      	ldr	r3, [pc, #36]	; (ae8 <lookForUSARTReset+0x28>)
     ac4:	7e1b      	ldrb	r3, [r3, #24]
     ac6:	075b      	lsls	r3, r3, #29
     ac8:	d50d      	bpl.n	ae6 <lookForUSARTReset+0x26>
		 u8_t possibleReset = usartDataIn(USART3);
     aca:	2003      	movs	r0, #3
     acc:	4b07      	ldr	r3, [pc, #28]	; (aec <lookForUSARTReset+0x2c>)
     ace:	4798      	blx	r3
		 if (possibleReset == 0x52) {
     ad0:	2852      	cmp	r0, #82	; 0x52
     ad2:	d108      	bne.n	ae6 <lookForUSARTReset+0x26>
     ad4:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
     ad8:	4a05      	ldr	r2, [pc, #20]	; (af0 <lookForUSARTReset+0x30>)
     ada:	4b06      	ldr	r3, [pc, #24]	; (af4 <lookForUSARTReset+0x34>)
     adc:	60da      	str	r2, [r3, #12]
     ade:	f3bf 8f4f 	dsb	sy
    __NOP();
     ae2:	46c0      	nop			; (mov r8, r8)
     ae4:	e7fd      	b.n	ae2 <lookForUSARTReset+0x22>
	 
	 
	
	
}
}
     ae6:	bd10      	pop	{r4, pc}
     ae8:	42001400 	.word	0x42001400
     aec:	000037f9 	.word	0x000037f9
     af0:	05fa0004 	.word	0x05fa0004
     af4:	e000ed00 	.word	0xe000ed00

00000af8 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     af8:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     afa:	4b09      	ldr	r3, [pc, #36]	; (b20 <USARTconnectionAvaliable+0x28>)
     afc:	7e1c      	ldrb	r4, [r3, #24]
     afe:	0764      	lsls	r4, r4, #29
     b00:	0fe4      	lsrs	r4, r4, #31
     b02:	2c01      	cmp	r4, #1
     b04:	d001      	beq.n	b0a <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     b06:	2000      	movs	r0, #0
}
     b08:	bd10      	pop	{r4, pc}
        u8_t connectAttempt = usartDataIn(USART3);
     b0a:	2003      	movs	r0, #3
     b0c:	4b05      	ldr	r3, [pc, #20]	; (b24 <USARTconnectionAvaliable+0x2c>)
     b0e:	4798      	blx	r3
     b10:	0001      	movs	r1, r0
        if (connectAttempt == 0x48) {
     b12:	2848      	cmp	r0, #72	; 0x48
     b14:	d1f7      	bne.n	b06 <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     b16:	2003      	movs	r0, #3
     b18:	4b03      	ldr	r3, [pc, #12]	; (b28 <USARTconnectionAvaliable+0x30>)
     b1a:	4798      	blx	r3
            return true;
     b1c:	0020      	movs	r0, r4
     b1e:	e7f3      	b.n	b08 <USARTconnectionAvaliable+0x10>
     b20:	42001400 	.word	0x42001400
     b24:	000037f9 	.word	0x000037f9
     b28:	000037e1 	.word	0x000037e1

00000b2c <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b2e:	2780      	movs	r7, #128	; 0x80
void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     b30:	0005      	movs	r5, r0
    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b32:	2400      	movs	r4, #0
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     b34:	1a09      	subs	r1, r1, r0
     b36:	0a09      	lsrs	r1, r1, #8
void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     b38:	b0c3      	sub	sp, #268	; 0x10c
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     b3a:	b28b      	uxth	r3, r1
     b3c:	9301      	str	r3, [sp, #4]
        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b3e:	007f      	lsls	r7, r7, #1
        AT25SEreadPage(pageToReadAddress , data);
     b40:	a902      	add	r1, sp, #8
     b42:	0028      	movs	r0, r5
     b44:	4b09      	ldr	r3, [pc, #36]	; (b6c <sendTheasePagesToComputer+0x40>)
     b46:	4798      	blx	r3
     b48:	2600      	movs	r6, #0
            usartDataOut(USART3, data[dataByte]);
     b4a:	ab02      	add	r3, sp, #8
     b4c:	5d99      	ldrb	r1, [r3, r6]
     b4e:	2003      	movs	r0, #3
     b50:	4b07      	ldr	r3, [pc, #28]	; (b70 <sendTheasePagesToComputer+0x44>)
     b52:	3601      	adds	r6, #1
     b54:	4798      	blx	r3
        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b56:	42be      	cmp	r6, r7
     b58:	d1f7      	bne.n	b4a <sendTheasePagesToComputer+0x1e>
    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b5a:	3401      	adds	r4, #1
     b5c:	9b01      	ldr	r3, [sp, #4]
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b5e:	3501      	adds	r5, #1
    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b60:	b2a4      	uxth	r4, r4
        pageToReadAddress = pageToReadAddress + 0x100;
     b62:	35ff      	adds	r5, #255	; 0xff
    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b64:	42a3      	cmp	r3, r4
     b66:	d2eb      	bcs.n	b40 <sendTheasePagesToComputer+0x14>
    }
}
     b68:	b043      	add	sp, #268	; 0x10c
     b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b6c:	0000035d 	.word	0x0000035d
     b70:	000037e1 	.word	0x000037e1

00000b74 <altitudeAGL>:

int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
     b74:	4b07      	ldr	r3, [pc, #28]	; (b94 <altitudeAGL+0x20>)
int32_t altitudeAGL() {
     b76:	b510      	push	{r4, lr}
    return altitude - offsets.groundOffset;
     b78:	6998      	ldr	r0, [r3, #24]
     b7a:	4b07      	ldr	r3, [pc, #28]	; (b98 <altitudeAGL+0x24>)
     b7c:	4798      	blx	r3
     b7e:	000b      	movs	r3, r1
     b80:	4906      	ldr	r1, [pc, #24]	; (b9c <altitudeAGL+0x28>)
     b82:	0002      	movs	r2, r0
     b84:	6808      	ldr	r0, [r1, #0]
     b86:	6849      	ldr	r1, [r1, #4]
     b88:	4c05      	ldr	r4, [pc, #20]	; (ba0 <altitudeAGL+0x2c>)
     b8a:	47a0      	blx	r4
     b8c:	4b05      	ldr	r3, [pc, #20]	; (ba4 <altitudeAGL+0x30>)
     b8e:	4798      	blx	r3
}
     b90:	bd10      	pop	{r4, pc}
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	20000150 	.word	0x20000150
     b98:	00006ec5 	.word	0x00006ec5
     b9c:	20000328 	.word	0x20000328
     ba0:	0000676d 	.word	0x0000676d
     ba4:	00006dd9 	.word	0x00006dd9

00000ba8 <unplugged>:


bool unplugged() {
    if (sample.voltage.batFloat < 3.4) {
     ba8:	4b07      	ldr	r3, [pc, #28]	; (bc8 <unplugged+0x20>)
bool unplugged() {
     baa:	b570      	push	{r4, r5, r6, lr}
    if (sample.voltage.batFloat < 3.4) {
     bac:	68d8      	ldr	r0, [r3, #12]
     bae:	4b07      	ldr	r3, [pc, #28]	; (bcc <unplugged+0x24>)
     bb0:	4798      	blx	r3
     bb2:	4a07      	ldr	r2, [pc, #28]	; (bd0 <unplugged+0x28>)
     bb4:	4b07      	ldr	r3, [pc, #28]	; (bd4 <unplugged+0x2c>)
     bb6:	4d08      	ldr	r5, [pc, #32]	; (bd8 <unplugged+0x30>)
     bb8:	2401      	movs	r4, #1
     bba:	47a8      	blx	r5
     bbc:	2800      	cmp	r0, #0
     bbe:	d100      	bne.n	bc2 <unplugged+0x1a>
     bc0:	1c04      	adds	r4, r0, #0
     bc2:	b2e0      	uxtb	r0, r4
        return true;
    } else {
        return false;
    }
}
     bc4:	bd70      	pop	{r4, r5, r6, pc}
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	200005f0 	.word	0x200005f0
     bcc:	00006f35 	.word	0x00006f35
     bd0:	33333333 	.word	0x33333333
     bd4:	400b3333 	.word	0x400b3333
     bd8:	00005085 	.word	0x00005085

00000bdc <shutDown>:

void shutDown() {
     bdc:	b510      	push	{r4, lr}


    delay_ms(100);
     bde:	2064      	movs	r0, #100	; 0x64
     be0:	4b1a      	ldr	r3, [pc, #104]	; (c4c <shutDown+0x70>)
     be2:	4798      	blx	r3
    TC4->COUNT8.CTRLA.reg = 0;
     be4:	2200      	movs	r2, #0
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     be6:	2180      	movs	r1, #128	; 0x80
     be8:	4b19      	ldr	r3, [pc, #100]	; (c50 <shutDown+0x74>)
     bea:	0309      	lsls	r1, r1, #12
     bec:	801a      	strh	r2, [r3, #0]
    TC5->COUNT8.CTRLA.reg = 0;
     bee:	4b19      	ldr	r3, [pc, #100]	; (c54 <shutDown+0x78>)
     bf0:	801a      	strh	r2, [r3, #0]
     bf2:	4b19      	ldr	r3, [pc, #100]	; (c58 <shutDown+0x7c>)
     bf4:	67d9      	str	r1, [r3, #124]	; 0x7c
     bf6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     bfa:	f3bf 8f6f 	isb	sy
     bfe:	2080      	movs	r0, #128	; 0x80
     c00:	0340      	lsls	r0, r0, #13
     c02:	67d8      	str	r0, [r3, #124]	; 0x7c
  __ASM volatile ("dsb 0xF":::"memory");
     c04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c08:	f3bf 8f6f 	isb	sy
     c0c:	2108      	movs	r1, #8
     c0e:	67d9      	str	r1, [r3, #124]	; 0x7c
  __ASM volatile ("dsb 0xF":::"memory");
     c10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c14:	f3bf 8f6f 	isb	sy
    NVIC_DisableIRQ(TC4_IRQn);
    NVIC_DisableIRQ(TC5_IRQn);
    NVIC_DisableIRQ(RTC_IRQn);
    RTC->MODE1.CTRL.bit.ENABLE = 0;
     c18:	2302      	movs	r3, #2
     c1a:	4c10      	ldr	r4, [pc, #64]	; (c5c <shutDown+0x80>)
     c1c:	8821      	ldrh	r1, [r4, #0]
     c1e:	4399      	bics	r1, r3
     c20:	8021      	strh	r1, [r4, #0]
    SysTick->CTRL = 0;
     c22:	490f      	ldr	r1, [pc, #60]	; (c60 <shutDown+0x84>)
     c24:	600a      	str	r2, [r1, #0]
    PM->APBAMASK.reg = 0;
     c26:	490f      	ldr	r1, [pc, #60]	; (c64 <shutDown+0x88>)
     c28:	618a      	str	r2, [r1, #24]

    //turn off sercom clocks
    //GCLK->CLKCTRL.reg

    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     c2a:	2180      	movs	r1, #128	; 0x80
     c2c:	4a0e      	ldr	r2, [pc, #56]	; (c68 <shutDown+0x8c>)
     c2e:	0049      	lsls	r1, r1, #1
     c30:	6091      	str	r1, [r2, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_OSC8M) | (GCLK_GENCTRL_GENEN));
     c32:	2183      	movs	r1, #131	; 0x83
     c34:	0249      	lsls	r1, r1, #9
     c36:	6051      	str	r1, [r2, #4]
     c38:	4a0c      	ldr	r2, [pc, #48]	; (c6c <shutDown+0x90>)

    pinHigh(LedPin);

    SYSCTRL->BOD33.reg = SYSCTRL_BOD33_PSEL_DIV8 | SYSCTRL_BOD33_ACTION_RESET | SYSCTRL_BOD33_LEVEL(60);
     c3a:	490d      	ldr	r1, [pc, #52]	; (c70 <shutDown+0x94>)
     c3c:	6190      	str	r0, [r2, #24]
     c3e:	4a0d      	ldr	r2, [pc, #52]	; (c74 <shutDown+0x98>)
     c40:	6351      	str	r1, [r2, #52]	; 0x34

    SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
     c42:	6b51      	ldr	r1, [r2, #52]	; 0x34
     c44:	430b      	orrs	r3, r1
     c46:	6353      	str	r3, [r2, #52]	; 0x34
     c48:	e7fe      	b.n	c48 <shutDown+0x6c>
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	00001185 	.word	0x00001185
     c50:	42003000 	.word	0x42003000
     c54:	42003400 	.word	0x42003400
     c58:	e000e104 	.word	0xe000e104
     c5c:	40001400 	.word	0x40001400
     c60:	e000e010 	.word	0xe000e010
     c64:	40000400 	.word	0x40000400
     c68:	40000c00 	.word	0x40000c00
     c6c:	41004400 	.word	0x41004400
     c70:	003c2008 	.word	0x003c2008
     c74:	40000800 	.word	0x40000800

00000c78 <finishFlight>:
    }
}

void finishFlight() {

    flightState = flightIdle;
     c78:	2201      	movs	r2, #1
     c7a:	4b05      	ldr	r3, [pc, #20]	; (c90 <finishFlight+0x18>)
void finishFlight() {
     c7c:	b510      	push	{r4, lr}
    flightState = flightIdle;
     c7e:	701a      	strb	r2, [r3, #0]
    AT25SFHoldTillReady();
     c80:	4b04      	ldr	r3, [pc, #16]	; (c94 <finishFlight+0x1c>)
     c82:	4798      	blx	r3
    writeFlightEndAddress( );
     c84:	4b04      	ldr	r3, [pc, #16]	; (c98 <finishFlight+0x20>)
     c86:	4798      	blx	r3
    unpluggedJingle();
     c88:	4b04      	ldr	r3, [pc, #16]	; (c9c <finishFlight+0x24>)
     c8a:	4798      	blx	r3
    shutDown();
     c8c:	4b04      	ldr	r3, [pc, #16]	; (ca0 <finishFlight+0x28>)
     c8e:	4798      	blx	r3
     c90:	200001ac 	.word	0x200001ac
     c94:	000001e5 	.word	0x000001e5
     c98:	00003219 	.word	0x00003219
     c9c:	00000f35 	.word	0x00000f35
     ca0:	00000bdd 	.word	0x00000bdd

00000ca4 <finishFromPad>:

}

void finishFromPad() {
    unpluggedJingle();
     ca4:	4b02      	ldr	r3, [pc, #8]	; (cb0 <finishFromPad+0xc>)
void finishFromPad() {
     ca6:	b510      	push	{r4, lr}
    unpluggedJingle();
     ca8:	4798      	blx	r3
    shutDown();
     caa:	4b02      	ldr	r3, [pc, #8]	; (cb4 <finishFromPad+0x10>)
     cac:	4798      	blx	r3
     cae:	46c0      	nop			; (mov r8, r8)
     cb0:	00000f35 	.word	0x00000f35
     cb4:	00000bdd 	.word	0x00000bdd

00000cb8 <POST>:
}


void POST() {
     cb8:	b5f0      	push	{r4, r5, r6, r7, lr}

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     cba:	4b31      	ldr	r3, [pc, #196]	; (d80 <POST+0xc8>)
void POST() {
     cbc:	b085      	sub	sp, #20
    u8_t crc = MS5803_CRC4();
     cbe:	4798      	blx	r3
    if (crc != coefficients_[7]) {
     cc0:	4b30      	ldr	r3, [pc, #192]	; (d84 <POST+0xcc>)
     cc2:	b280      	uxth	r0, r0
     cc4:	89db      	ldrh	r3, [r3, #14]
        postFailed = true;
        failType = 1;
     cc6:	2401      	movs	r4, #1
    if (crc != coefficients_[7]) {
     cc8:	4283      	cmp	r3, r0
     cca:	d100      	bne.n	cce <POST+0x16>
    u8_t failType = 0;
     ccc:	2400      	movs	r4, #0
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cce:	2780      	movs	r7, #128	; 0x80
     cd0:	4d2d      	ldr	r5, [pc, #180]	; (d88 <POST+0xd0>)
     cd2:	02ff      	lsls	r7, r7, #11
    }

    //Memory Post
    pinLow(cs_mem);
    spiDataOut(SPI1,0x9f); // read id and mfg code
     cd4:	219f      	movs	r1, #159	; 0x9f
     cd6:	4b2d      	ldr	r3, [pc, #180]	; (d8c <POST+0xd4>)
    bool postFailed = false;
     cd8:	9401      	str	r4, [sp, #4]
    spiDataOut(SPI1,0x9f); // read id and mfg code
     cda:	2001      	movs	r0, #1
     cdc:	616f      	str	r7, [r5, #20]
     cde:	4798      	blx	r3
    u8_t mfgID = spiDataIn(SPI1);
     ce0:	4e2b      	ldr	r6, [pc, #172]	; (d90 <POST+0xd8>)
     ce2:	2001      	movs	r0, #1
     ce4:	47b0      	blx	r6
     ce6:	9002      	str	r0, [sp, #8]
    u8_t deviceID1 = spiDataIn(SPI1);
     ce8:	2001      	movs	r0, #1
     cea:	47b0      	blx	r6
     cec:	9003      	str	r0, [sp, #12]
    u8_t deviceID2 = spiDataIn(SPI1);
     cee:	2001      	movs	r0, #1
     cf0:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cf2:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    if ( (mfgID != 0x1f) & (deviceID1 != 0x86) & (deviceID2 != 0x01)) {
     cf4:	9902      	ldr	r1, [sp, #8]
     cf6:	9b03      	ldr	r3, [sp, #12]
     cf8:	391f      	subs	r1, #31
     cfa:	3b86      	subs	r3, #134	; 0x86
     cfc:	1e4a      	subs	r2, r1, #1
     cfe:	4191      	sbcs	r1, r2
     d00:	1e5a      	subs	r2, r3, #1
     d02:	4193      	sbcs	r3, r2
     d04:	3801      	subs	r0, #1
     d06:	1e42      	subs	r2, r0, #1
     d08:	4190      	sbcs	r0, r2
     d0a:	400b      	ands	r3, r1
     d0c:	4018      	ands	r0, r3
     d0e:	d001      	beq.n	d14 <POST+0x5c>
        postFailed = true;
        failType = 2;
     d10:	2402      	movs	r4, #2
        postFailed = true;
     d12:	9001      	str	r0, [sp, #4]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d14:	2680      	movs	r6, #128	; 0x80
     d16:	4b1f      	ldr	r3, [pc, #124]	; (d94 <POST+0xdc>)
     d18:	00f6      	lsls	r6, r6, #3
     d1a:	601e      	str	r6, [r3, #0]
    }

    //Accelerometer Post
    pinLow(cs_accel);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     d1c:	2180      	movs	r1, #128	; 0x80
     d1e:	4b1b      	ldr	r3, [pc, #108]	; (d8c <POST+0xd4>)
     d20:	2000      	movs	r0, #0
     d22:	4798      	blx	r3
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
     d24:	21ff      	movs	r1, #255	; 0xff
     d26:	2000      	movs	r0, #0
     d28:	4f1b      	ldr	r7, [pc, #108]	; (d98 <POST+0xe0>)
     d2a:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d2c:	4b1b      	ldr	r3, [pc, #108]	; (d9c <POST+0xe4>)
     d2e:	601e      	str	r6, [r3, #0]
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
     d30:	28fa      	cmp	r0, #250	; 0xfa
     d32:	d002      	beq.n	d3a <POST+0x82>
        postFailed = true;
     d34:	2301      	movs	r3, #1
        failType = 3;
     d36:	2403      	movs	r4, #3
        postFailed = true;
     d38:	9301      	str	r3, [sp, #4]
    }

    //Gyro Post
    pinLow(cs_gyro);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     d3a:	2180      	movs	r1, #128	; 0x80
     d3c:	2000      	movs	r0, #0
     d3e:	4b13      	ldr	r3, [pc, #76]	; (d8c <POST+0xd4>)
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d40:	616e      	str	r6, [r5, #20]
     d42:	4798      	blx	r3
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
     d44:	21ff      	movs	r1, #255	; 0xff
     d46:	2000      	movs	r0, #0
     d48:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d4a:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
     d4c:	280f      	cmp	r0, #15
     d4e:	d104      	bne.n	d5a <POST+0xa2>
    }

    //Analog Accelerometer Post


    if (postFailed) {
     d50:	9b01      	ldr	r3, [sp, #4]
     d52:	2b00      	cmp	r3, #0
     d54:	d102      	bne.n	d5c <POST+0xa4>
                delay_ms(300);
            }
            delay_ms(1500);
        }
    }
}
     d56:	b005      	add	sp, #20
     d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
        failType = 4;
     d5a:	2404      	movs	r4, #4
                beep(300);
     d5c:	2696      	movs	r6, #150	; 0x96
     d5e:	0076      	lsls	r6, r6, #1
            for (beepCount = failType; beepCount > 0; beepCount--) {
     d60:	0025      	movs	r5, r4
     d62:	4f0f      	ldr	r7, [pc, #60]	; (da0 <POST+0xe8>)
     d64:	2d00      	cmp	r5, #0
     d66:	d102      	bne.n	d6e <POST+0xb6>
            delay_ms(1500);
     d68:	480e      	ldr	r0, [pc, #56]	; (da4 <POST+0xec>)
     d6a:	47b8      	blx	r7
        while (1) {
     d6c:	e7f8      	b.n	d60 <POST+0xa8>
                beep(300);
     d6e:	0030      	movs	r0, r6
     d70:	4b0d      	ldr	r3, [pc, #52]	; (da8 <POST+0xf0>)
     d72:	4798      	blx	r3
            for (beepCount = failType; beepCount > 0; beepCount--) {
     d74:	3d01      	subs	r5, #1
                delay_ms(300);
     d76:	0030      	movs	r0, r6
     d78:	47b8      	blx	r7
            for (beepCount = failType; beepCount > 0; beepCount--) {
     d7a:	b2ed      	uxtb	r5, r5
     d7c:	e7f1      	b.n	d62 <POST+0xaa>
     d7e:	46c0      	nop			; (mov r8, r8)
     d80:	00000599 	.word	0x00000599
     d84:	200002ae 	.word	0x200002ae
     d88:	41004400 	.word	0x41004400
     d8c:	000037ad 	.word	0x000037ad
     d90:	000037c5 	.word	0x000037c5
     d94:	41004494 	.word	0x41004494
     d98:	00003795 	.word	0x00003795
     d9c:	41004498 	.word	0x41004498
     da0:	00001185 	.word	0x00001185
     da4:	000005dc 	.word	0x000005dc
     da8:	00000e8d 	.word	0x00000e8d

00000dac <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     dac:	2380      	movs	r3, #128	; 0x80
     dae:	4a10      	ldr	r2, [pc, #64]	; (df0 <adcInit+0x44>)
     db0:	025b      	lsls	r3, r3, #9
     db2:	6a11      	ldr	r1, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     db4:	480f      	ldr	r0, [pc, #60]	; (df4 <adcInit+0x48>)
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     db6:	430b      	orrs	r3, r1
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     db8:	21e0      	movs	r1, #224	; 0xe0
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     dba:	6213      	str	r3, [r2, #32]
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     dbc:	4b0e      	ldr	r3, [pc, #56]	; (df8 <adcInit+0x4c>)
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     dbe:	4a0f      	ldr	r2, [pc, #60]	; (dfc <adcInit+0x50>)
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     dc0:	00c9      	lsls	r1, r1, #3
     dc2:	8099      	strh	r1, [r3, #4]
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     dc4:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     dc6:	4a0e      	ldr	r2, [pc, #56]	; (e00 <adcInit+0x54>)
     dc8:	6810      	ldr	r0, [r2, #0]
     dca:	0142      	lsls	r2, r0, #5
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     dcc:	0010      	movs	r0, r2
        ADC_CALIB_BIAS_CAL(
     dce:	4011      	ands	r1, r2
        ADC_CALIB_LINEARITY_CAL(
     dd0:	4a0c      	ldr	r2, [pc, #48]	; (e04 <adcInit+0x58>)
     dd2:	6812      	ldr	r2, [r2, #0]
     dd4:	0ed2      	lsrs	r2, r2, #27
     dd6:	4302      	orrs	r2, r0
     dd8:	b2d2      	uxtb	r2, r2
        ) |
     dda:	430a      	orrs	r2, r1
    ADC->CALIB.reg =
     ddc:	851a      	strh	r2, [r3, #40]	; 0x28
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC0;
     dde:	2201      	movs	r2, #1
     de0:	705a      	strb	r2, [r3, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     de2:	1892      	adds	r2, r2, r2
     de4:	701a      	strb	r2, [r3, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     de6:	7e5a      	ldrb	r2, [r3, #25]
     de8:	b252      	sxtb	r2, r2
     dea:	2a00      	cmp	r2, #0
     dec:	dbfb      	blt.n	de6 <adcInit+0x3a>
}
     dee:	4770      	bx	lr
     df0:	40000400 	.word	0x40000400
     df4:	0000401e 	.word	0x0000401e
     df8:	42004000 	.word	0x42004000
     dfc:	40000c00 	.word	0x40000c00
     e00:	00806024 	.word	0x00806024
     e04:	00806020 	.word	0x00806020

00000e08 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     e08:	2202      	movs	r2, #2
     e0a:	4b04      	ldr	r3, [pc, #16]	; (e1c <adcSample+0x14>)
     e0c:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     e0e:	3a01      	subs	r2, #1
     e10:	7e19      	ldrb	r1, [r3, #24]
     e12:	4211      	tst	r1, r2
     e14:	d0fc      	beq.n	e10 <adcSample+0x8>
    return ADC->RESULT.reg;
     e16:	8b58      	ldrh	r0, [r3, #26]
     e18:	b280      	uxth	r0, r0
}
     e1a:	4770      	bx	lr
     e1c:	42004000 	.word	0x42004000

00000e20 <adc_read>:


u16_t adc_read(Pin p) {
     e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
     e22:	9101      	str	r1, [sp, #4]
    if (p.pin & 1) {
     e24:	2101      	movs	r1, #1
     e26:	0c02      	lsrs	r2, r0, #16
     e28:	9000      	str	r0, [sp, #0]
     e2a:	b2d2      	uxtb	r2, r2
     e2c:	0e00      	lsrs	r0, r0, #24
     e2e:	0843      	lsrs	r3, r0, #1
     e30:	01d2      	lsls	r2, r2, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     e32:	189b      	adds	r3, r3, r2
    if (p.pin & 1) {
     e34:	4208      	tst	r0, r1
     e36:	d01a      	beq.n	e6e <adc_read+0x4e>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     e38:	240f      	movs	r4, #15
     e3a:	4910      	ldr	r1, [pc, #64]	; (e7c <adc_read+0x5c>)
     e3c:	185b      	adds	r3, r3, r1
     e3e:	7819      	ldrb	r1, [r3, #0]
     e40:	400c      	ands	r4, r1
     e42:	2110      	movs	r1, #16
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     e44:	4321      	orrs	r1, r4
     e46:	7019      	strb	r1, [r3, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     e48:	4b0d      	ldr	r3, [pc, #52]	; (e80 <adc_read+0x60>)
     e4a:	1880      	adds	r0, r0, r2
     e4c:	18c0      	adds	r0, r0, r3
     e4e:	2301      	movs	r3, #1
     e50:	7802      	ldrb	r2, [r0, #0]
     e52:	4313      	orrs	r3, r2
     e54:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     e56:	466b      	mov	r3, sp
     e58:	221f      	movs	r2, #31
     e5a:	791b      	ldrb	r3, [r3, #4]
     e5c:	401a      	ands	r2, r3
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     e5e:	23c0      	movs	r3, #192	; 0xc0
     e60:	015b      	lsls	r3, r3, #5
     e62:	4313      	orrs	r3, r2
    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     e64:	4a07      	ldr	r2, [pc, #28]	; (e84 <adc_read+0x64>)
     e66:	6113      	str	r3, [r2, #16]

    return adcSample();
     e68:	4b07      	ldr	r3, [pc, #28]	; (e88 <adc_read+0x68>)
     e6a:	4798      	blx	r3
     e6c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     e6e:	250f      	movs	r5, #15
     e70:	4c02      	ldr	r4, [pc, #8]	; (e7c <adc_read+0x5c>)
     e72:	191b      	adds	r3, r3, r4
     e74:	781c      	ldrb	r4, [r3, #0]
     e76:	43ac      	bics	r4, r5
     e78:	e7e4      	b.n	e44 <adc_read+0x24>
     e7a:	46c0      	nop			; (mov r8, r8)
     e7c:	41004430 	.word	0x41004430
     e80:	41004440 	.word	0x41004440
     e84:	42004000 	.word	0x42004000
     e88:	00000e09 	.word	0x00000e09

00000e8c <beep>:
#include <util.h>
#include <boardDefines.h>
#include <math.h>


void beep(u16_t duration) {
     e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


    long count = 0;

    long beepStop = duration*1000 / 122;
     e8e:	23fa      	movs	r3, #250	; 0xfa
     e90:	009b      	lsls	r3, r3, #2
     e92:	4358      	muls	r0, r3
     e94:	217a      	movs	r1, #122	; 0x7a
     e96:	4b0b      	ldr	r3, [pc, #44]	; (ec4 <beep+0x38>)
     e98:	4798      	blx	r3
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     e9a:	2380      	movs	r3, #128	; 0x80
     e9c:	2680      	movs	r6, #128	; 0x80
     e9e:	0007      	movs	r7, r0
    long count = 0;
     ea0:	2500      	movs	r5, #0
     ea2:	4c09      	ldr	r4, [pc, #36]	; (ec8 <beep+0x3c>)
     ea4:	035b      	lsls	r3, r3, #13
     ea6:	61e3      	str	r3, [r4, #28]
     ea8:	03b6      	lsls	r6, r6, #14

    pinToggle(LedPin);

    while(count < beepStop) {
     eaa:	42bd      	cmp	r5, r7
     eac:	d104      	bne.n	eb8 <beep+0x2c>
     eae:	2380      	movs	r3, #128	; 0x80
     eb0:	035b      	lsls	r3, r3, #13
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     eb2:	6166      	str	r6, [r4, #20]
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     eb4:	61e3      	str	r3, [r4, #28]
        delay_us(120);
        count++;
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     eb8:	61e6      	str	r6, [r4, #28]
        delay_us(120);
     eba:	2078      	movs	r0, #120	; 0x78
     ebc:	4b03      	ldr	r3, [pc, #12]	; (ecc <beep+0x40>)
     ebe:	4798      	blx	r3
        count++;
     ec0:	3501      	adds	r5, #1
     ec2:	e7f2      	b.n	eaa <beep+0x1e>
     ec4:	00004e81 	.word	0x00004e81
     ec8:	41004400 	.word	0x41004400
     ecc:	00001155 	.word	0x00001155

00000ed0 <beepDigit>:

void beepDigit(u8_t digit) {
     ed0:	b570      	push	{r4, r5, r6, lr}
     ed2:	1e04      	subs	r4, r0, #0
     ed4:	4d08      	ldr	r5, [pc, #32]	; (ef8 <beepDigit+0x28>)
    if (digit == 0) {
     ed6:	d103      	bne.n	ee0 <beepDigit+0x10>
        beep(600);
     ed8:	2096      	movs	r0, #150	; 0x96
     eda:	0080      	lsls	r0, r0, #2
     edc:	47a8      	blx	r5
            beep(200);
            delay_ms(300);
            --digit;
        }
    }
}
     ede:	bd70      	pop	{r4, r5, r6, pc}
            delay_ms(300);
     ee0:	2696      	movs	r6, #150	; 0x96
     ee2:	0076      	lsls	r6, r6, #1
            beep(200);
     ee4:	20c8      	movs	r0, #200	; 0xc8
            --digit;
     ee6:	3c01      	subs	r4, #1
            beep(200);
     ee8:	47a8      	blx	r5
            --digit;
     eea:	b2e4      	uxtb	r4, r4
            delay_ms(300);
     eec:	0030      	movs	r0, r6
     eee:	4b03      	ldr	r3, [pc, #12]	; (efc <beepDigit+0x2c>)
     ef0:	4798      	blx	r3
        while (digit > 0) {
     ef2:	2c00      	cmp	r4, #0
     ef4:	d1f6      	bne.n	ee4 <beepDigit+0x14>
     ef6:	e7f2      	b.n	ede <beepDigit+0xe>
     ef8:	00000e8d 	.word	0x00000e8d
     efc:	00001185 	.word	0x00001185

00000f00 <startupJingle>:
    }
    beepDigit(number);

}

void startupJingle() {
     f00:	b570      	push	{r4, r5, r6, lr}
    beep(150);
     f02:	2096      	movs	r0, #150	; 0x96
     f04:	4d09      	ldr	r5, [pc, #36]	; (f2c <startupJingle+0x2c>)
     f06:	47a8      	blx	r5
    delay_ms(60);
     f08:	4c09      	ldr	r4, [pc, #36]	; (f30 <startupJingle+0x30>)
     f0a:	203c      	movs	r0, #60	; 0x3c
     f0c:	47a0      	blx	r4
    beep(150);
     f0e:	2096      	movs	r0, #150	; 0x96
     f10:	47a8      	blx	r5
    delay_ms(250);
     f12:	20fa      	movs	r0, #250	; 0xfa
     f14:	47a0      	blx	r4
    beep(150);
     f16:	2096      	movs	r0, #150	; 0x96
     f18:	47a8      	blx	r5
    delay_ms(60);
     f1a:	203c      	movs	r0, #60	; 0x3c
     f1c:	47a0      	blx	r4
    beep(150);
     f1e:	2096      	movs	r0, #150	; 0x96
     f20:	47a8      	blx	r5
    delay_ms(500);
     f22:	20fa      	movs	r0, #250	; 0xfa
     f24:	0040      	lsls	r0, r0, #1
     f26:	47a0      	blx	r4
}
     f28:	bd70      	pop	{r4, r5, r6, pc}
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	00000e8d 	.word	0x00000e8d
     f30:	00001185 	.word	0x00001185

00000f34 <unpluggedJingle>:

void unpluggedJingle() {
     f34:	b570      	push	{r4, r5, r6, lr}
    delay_ms(60);
     f36:	203c      	movs	r0, #60	; 0x3c
     f38:	4c0b      	ldr	r4, [pc, #44]	; (f68 <unpluggedJingle+0x34>)
     f3a:	47a0      	blx	r4
    beep(150);
     f3c:	4d0b      	ldr	r5, [pc, #44]	; (f6c <unpluggedJingle+0x38>)
     f3e:	2096      	movs	r0, #150	; 0x96
     f40:	47a8      	blx	r5
    delay_ms(60);
     f42:	203c      	movs	r0, #60	; 0x3c
     f44:	47a0      	blx	r4
    beep(150);
     f46:	2096      	movs	r0, #150	; 0x96
     f48:	47a8      	blx	r5
    delay_ms(60);
     f4a:	203c      	movs	r0, #60	; 0x3c
     f4c:	47a0      	blx	r4
    beep(150);
     f4e:	2096      	movs	r0, #150	; 0x96
     f50:	47a8      	blx	r5
    delay_ms(60);
     f52:	203c      	movs	r0, #60	; 0x3c
     f54:	47a0      	blx	r4
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f56:	2280      	movs	r2, #128	; 0x80
     f58:	4b05      	ldr	r3, [pc, #20]	; (f70 <unpluggedJingle+0x3c>)
     f5a:	0392      	lsls	r2, r2, #14
     f5c:	615a      	str	r2, [r3, #20]
     f5e:	2280      	movs	r2, #128	; 0x80
     f60:	0352      	lsls	r2, r2, #13
     f62:	615a      	str	r2, [r3, #20]
    pinLow(buzzerPin);
    pinLow(LedPin);

}
     f64:	bd70      	pop	{r4, r5, r6, pc}
     f66:	46c0      	nop			; (mov r8, r8)
     f68:	00001185 	.word	0x00001185
     f6c:	00000e8d 	.word	0x00000e8d
     f70:	41004400 	.word	0x41004400

00000f74 <dfll_nvm_val>:
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10

uint32_t dfll_nvm_val() {
    uint32_t coarse = ( *((uint32_t *)(NVMCTRL_OTP4)
     f74:	4b08      	ldr	r3, [pc, #32]	; (f98 <dfll_nvm_val+0x24>)
     f76:	681b      	ldr	r3, [r3, #0]
     f78:	0e9b      	lsrs	r3, r3, #26
                          + (NVM_DFLL_COARSE_POS / 32))
                        >> (NVM_DFLL_COARSE_POS % 32))
                      & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     f7a:	2b3f      	cmp	r3, #63	; 0x3f
     f7c:	d100      	bne.n	f80 <dfll_nvm_val+0xc>
        coarse = 0x1f;
     f7e:	3b20      	subs	r3, #32
    }
    uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
                        + (NVM_DFLL_FINE_POS / 32))
                      >> (NVM_DFLL_FINE_POS % 32))
     f80:	4a06      	ldr	r2, [pc, #24]	; (f9c <dfll_nvm_val+0x28>)
    uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
     f82:	6810      	ldr	r0, [r2, #0]
                    & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     f84:	4a06      	ldr	r2, [pc, #24]	; (fa0 <dfll_nvm_val+0x2c>)
    uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
     f86:	0580      	lsls	r0, r0, #22
     f88:	0d80      	lsrs	r0, r0, #22
    if (fine == 0x3ff) {
     f8a:	4290      	cmp	r0, r2
     f8c:	d100      	bne.n	f90 <dfll_nvm_val+0x1c>
        fine = 0x1ff;
     f8e:	4805      	ldr	r0, [pc, #20]	; (fa4 <dfll_nvm_val+0x30>)
    }

    return SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     f90:	029b      	lsls	r3, r3, #10
     f92:	4318      	orrs	r0, r3
}
     f94:	4770      	bx	lr
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	00806024 	.word	0x00806024
     f9c:	00806028 	.word	0x00806028
     fa0:	000003ff 	.word	0x000003ff
     fa4:	000001ff 	.word	0x000001ff

00000fa8 <dfll_wait_for_sync>:

void dfll_wait_for_sync() {
    while (!SYSCTRL->PCLKSR.bit.DFLLRDY);
     fa8:	4a02      	ldr	r2, [pc, #8]	; (fb4 <dfll_wait_for_sync+0xc>)
     faa:	68d3      	ldr	r3, [r2, #12]
     fac:	06db      	lsls	r3, r3, #27
     fae:	d5fc      	bpl.n	faa <dfll_wait_for_sync+0x2>
}
     fb0:	4770      	bx	lr
     fb2:	46c0      	nop			; (mov r8, r8)
     fb4:	40000800 	.word	0x40000800

00000fb8 <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     fb8:	4b25      	ldr	r3, [pc, #148]	; (1050 <RtcInit+0x98>)
     fba:	4a26      	ldr	r2, [pc, #152]	; (1054 <RtcInit+0x9c>)
void RtcInit() {
     fbc:	b510      	push	{r4, lr}
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     fbe:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     fc0:	4a25      	ldr	r2, [pc, #148]	; (1058 <RtcInit+0xa0>)
    SYSCTRL->OSC32K.bit.CALIB =
     fc2:	6998      	ldr	r0, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     fc4:	6812      	ldr	r2, [r2, #0]
    SYSCTRL->OSC32K.bit.CALIB =
     fc6:	4c25      	ldr	r4, [pc, #148]	; (105c <RtcInit+0xa4>)
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);
     fc8:	04d2      	lsls	r2, r2, #19
    SYSCTRL->OSC32K.bit.CALIB =
     fca:	0e52      	lsrs	r2, r2, #25
     fcc:	0412      	lsls	r2, r2, #16

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     fce:	4924      	ldr	r1, [pc, #144]	; (1060 <RtcInit+0xa8>)
    SYSCTRL->OSC32K.bit.CALIB =
     fd0:	4020      	ands	r0, r4
     fd2:	4310      	orrs	r0, r2
     fd4:	6198      	str	r0, [r3, #24]
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     fd6:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     fd8:	6999      	ldr	r1, [r3, #24]
     fda:	4021      	ands	r1, r4
     fdc:	430a      	orrs	r2, r1
     fde:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     fe0:	2202      	movs	r2, #2
     fe2:	6999      	ldr	r1, [r3, #24]
     fe4:	430a      	orrs	r2, r1
     fe6:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     fe8:	2204      	movs	r2, #4
     fea:	68d9      	ldr	r1, [r3, #12]
     fec:	4211      	tst	r1, r2
     fee:	d0fc      	beq.n	fea <RtcInit+0x32>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     ff0:	2281      	movs	r2, #129	; 0x81
     ff2:	4b1c      	ldr	r3, [pc, #112]	; (1064 <RtcInit+0xac>)
     ff4:	0052      	lsls	r2, r2, #1
     ff6:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     ff8:	4a1b      	ldr	r2, [pc, #108]	; (1068 <RtcInit+0xb0>)
     ffa:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     ffc:	785a      	ldrb	r2, [r3, #1]
     ffe:	b252      	sxtb	r2, r2
    1000:	2a00      	cmp	r2, #0
    1002:	dbfb      	blt.n	ffc <RtcInit+0x44>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
    1004:	4a19      	ldr	r2, [pc, #100]	; (106c <RtcInit+0xb4>)
    1006:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
    1008:	2204      	movs	r2, #4
    100a:	4b19      	ldr	r3, [pc, #100]	; (1070 <RtcInit+0xb8>)
    100c:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    100e:	7a9a      	ldrb	r2, [r3, #10]
    1010:	09d2      	lsrs	r2, r2, #7
    1012:	d1fc      	bne.n	100e <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
    1014:	22a0      	movs	r2, #160	; 0xa0
    1016:	8819      	ldrh	r1, [r3, #0]
    1018:	00d2      	lsls	r2, r2, #3
    101a:	430a      	orrs	r2, r1
    101c:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    101e:	7a9a      	ldrb	r2, [r3, #10]
    1020:	09d2      	lsrs	r2, r2, #7
    1022:	d1fc      	bne.n	101e <RtcInit+0x66>

    RTC->MODE1.PER.reg = 998;
    1024:	4a13      	ldr	r2, [pc, #76]	; (1074 <RtcInit+0xbc>)
    1026:	829a      	strh	r2, [r3, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    1028:	7a9a      	ldrb	r2, [r3, #10]
    102a:	09d2      	lsrs	r2, r2, #7
    102c:	d1fc      	bne.n	1028 <RtcInit+0x70>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
    102e:	8859      	ldrh	r1, [r3, #2]
    1030:	4a11      	ldr	r2, [pc, #68]	; (1078 <RtcInit+0xc0>)
    1032:	430a      	orrs	r2, r1
    1034:	805a      	strh	r2, [r3, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
    1036:	2280      	movs	r2, #128	; 0x80
    1038:	71da      	strb	r2, [r3, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
    103a:	8819      	ldrh	r1, [r3, #0]
    103c:	3a7e      	subs	r2, #126	; 0x7e
    103e:	430a      	orrs	r2, r1
    1040:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    1042:	7a9a      	ldrb	r2, [r3, #10]
    1044:	09d2      	lsrs	r2, r2, #7
    1046:	d1fc      	bne.n	1042 <RtcInit+0x8a>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1048:	4b0c      	ldr	r3, [pc, #48]	; (107c <RtcInit+0xc4>)
    104a:	3208      	adds	r2, #8
    104c:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
    104e:	bd10      	pop	{r4, pc}
    1050:	40000800 	.word	0x40000800
    1054:	00000606 	.word	0x00000606
    1058:	00806024 	.word	0x00806024
    105c:	ff80ffff 	.word	0xff80ffff
    1060:	00000604 	.word	0x00000604
    1064:	40000c00 	.word	0x40000c00
    1068:	00230002 	.word	0x00230002
    106c:	00004204 	.word	0x00004204
    1070:	40001400 	.word	0x40001400
    1074:	000003e6 	.word	0x000003e6
    1078:	00004010 	.word	0x00004010
    107c:	e000e100 	.word	0xe000e100

00001080 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    1080:	230f      	movs	r3, #15
    1082:	4003      	ands	r3, r0
    1084:	4808      	ldr	r0, [pc, #32]	; (10a8 <gclkEnable+0x28>)
    1086:	0212      	lsls	r2, r2, #8
    1088:	4002      	ands	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    108a:	20f8      	movs	r0, #248	; 0xf8
    108c:	0209      	lsls	r1, r1, #8
    108e:	0140      	lsls	r0, r0, #5
    1090:	4001      	ands	r1, r0
    1092:	2080      	movs	r0, #128	; 0x80
void gclkEnable(u32_t id, u32_t src, u32_t div) {
    1094:	b510      	push	{r4, lr}
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    1096:	0240      	lsls	r0, r0, #9
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    1098:	4c04      	ldr	r4, [pc, #16]	; (10ac <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    109a:	4308      	orrs	r0, r1
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    109c:	431a      	orrs	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    109e:	4318      	orrs	r0, r3
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    10a0:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    10a2:	6060      	str	r0, [r4, #4]
}
    10a4:	bd10      	pop	{r4, pc}
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	00ffff00 	.word	0x00ffff00
    10ac:	40000c00 	.word	0x40000c00

000010b0 <GclkInit>:
    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    10b0:	23c2      	movs	r3, #194	; 0xc2
    NVMCTRL->CTRLB.bit.RWS = 2;
    10b2:	221e      	movs	r2, #30
void GclkInit(u8_t clk_system) {
    10b4:	b570      	push	{r4, r5, r6, lr}
    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    10b6:	4c13      	ldr	r4, [pc, #76]	; (1104 <GclkInit+0x54>)
    NVMCTRL->CTRLB.bit.RWS = 2;
    10b8:	4913      	ldr	r1, [pc, #76]	; (1108 <GclkInit+0x58>)
    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    10ba:	00db      	lsls	r3, r3, #3
    10bc:	60a3      	str	r3, [r4, #8]
    NVMCTRL->CTRLB.bit.RWS = 2;
    10be:	684b      	ldr	r3, [r1, #4]
void GclkInit(u8_t clk_system) {
    10c0:	0005      	movs	r5, r0
    NVMCTRL->CTRLB.bit.RWS = 2;
    10c2:	4393      	bics	r3, r2
    10c4:	001a      	movs	r2, r3
    10c6:	2304      	movs	r3, #4
    10c8:	4313      	orrs	r3, r2
    10ca:	604b      	str	r3, [r1, #4]
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
    10cc:	2308      	movs	r3, #8
    10ce:	4a0f      	ldr	r2, [pc, #60]	; (110c <GclkInit+0x5c>)
    10d0:	6991      	ldr	r1, [r2, #24]
    10d2:	430b      	orrs	r3, r1
    10d4:	6193      	str	r3, [r2, #24]
    GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    10d6:	2301      	movs	r3, #1
    10d8:	4a0d      	ldr	r2, [pc, #52]	; (1110 <GclkInit+0x60>)
    10da:	7013      	strb	r3, [r2, #0]
    while (GCLK->CTRL.reg & GCLK_CTRL_SWRST);
    10dc:	7811      	ldrb	r1, [r2, #0]
    10de:	4219      	tst	r1, r3
    10e0:	d1fc      	bne.n	10dc <GclkInit+0x2c>
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    10e2:	4b0c      	ldr	r3, [pc, #48]	; (1114 <GclkInit+0x64>)
    dfll_wait_for_sync();
    10e4:	4e0c      	ldr	r6, [pc, #48]	; (1118 <GclkInit+0x68>)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    10e6:	84a3      	strh	r3, [r4, #36]	; 0x24
    dfll_wait_for_sync();
    10e8:	47b0      	blx	r6
    SYSCTRL->DFLLVAL.reg = dfll_nvm_val();
    10ea:	4b0c      	ldr	r3, [pc, #48]	; (111c <GclkInit+0x6c>)
    10ec:	4798      	blx	r3
    10ee:	62a0      	str	r0, [r4, #40]	; 0x28
    dfll_wait_for_sync();
    10f0:	47b0      	blx	r6
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl;
    10f2:	4b0b      	ldr	r3, [pc, #44]	; (1120 <GclkInit+0x70>)
    gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
    10f4:	0028      	movs	r0, r5
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl;
    10f6:	84a3      	strh	r3, [r4, #36]	; 0x24
    gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
    10f8:	2201      	movs	r2, #1
    10fa:	2107      	movs	r1, #7
    10fc:	4b09      	ldr	r3, [pc, #36]	; (1124 <GclkInit+0x74>)
    10fe:	4798      	blx	r3
}
    1100:	bd70      	pop	{r4, r5, r6, pc}
    1102:	46c0      	nop			; (mov r8, r8)
    1104:	40000800 	.word	0x40000800
    1108:	41004000 	.word	0x41004000
    110c:	40000400 	.word	0x40000400
    1110:	40000c00 	.word	0x40000c00
    1114:	00000502 	.word	0x00000502
    1118:	00000fa9 	.word	0x00000fa9
    111c:	00000f75 	.word	0x00000f75
    1120:	00000582 	.word	0x00000582
    1124:	00001081 	.word	0x00001081

00001128 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
    cycles_per_us = cycles_per_ms / 1000;
    1128:	2230      	movs	r2, #48	; 0x30
    cycles_per_ms /= 1000;
    112a:	4b06      	ldr	r3, [pc, #24]	; (1144 <delayInit+0x1c>)
    cycles_per_us = cycles_per_ms / 1000;
    112c:	4906      	ldr	r1, [pc, #24]	; (1148 <delayInit+0x20>)
    112e:	c306      	stmia	r3!, {r1, r2}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    1130:	4a06      	ldr	r2, [pc, #24]	; (114c <delayInit+0x24>)
    1132:	6a13      	ldr	r3, [r2, #32]
    1134:	021b      	lsls	r3, r3, #8
    1136:	0a1b      	lsrs	r3, r3, #8
    1138:	6213      	str	r3, [r2, #32]

    NVIC_SetPriority(SysTick_IRQn, 0x0);

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    113a:	2205      	movs	r2, #5
    113c:	4b04      	ldr	r3, [pc, #16]	; (1150 <delayInit+0x28>)
    113e:	601a      	str	r2, [r3, #0]
}
    1140:	4770      	bx	lr
    1142:	46c0      	nop			; (mov r8, r8)
    1144:	20000004 	.word	0x20000004
    1148:	0000bb80 	.word	0x0000bb80
    114c:	e000ed00 	.word	0xe000ed00
    1150:	e000e010 	.word	0xe000e010

00001154 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    1154:	b530      	push	{r4, r5, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1156:	2480      	movs	r4, #128	; 0x80
        SysTick->VAL = 0;
    1158:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    115a:	4b07      	ldr	r3, [pc, #28]	; (1178 <delay_us+0x24>)
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    115c:	0264      	lsls	r4, r4, #9
    115e:	685a      	ldr	r2, [r3, #4]
        SysTick->LOAD = n;
    1160:	4b06      	ldr	r3, [pc, #24]	; (117c <delay_us+0x28>)
    while (n--) {
    1162:	3801      	subs	r0, #1
    1164:	d200      	bcs.n	1168 <delay_us+0x14>
    }
}
    1166:	bd30      	pop	{r4, r5, pc}
    if (n > 0) {
    1168:	2a00      	cmp	r2, #0
    116a:	d0fa      	beq.n	1162 <delay_us+0xe>
        SysTick->LOAD = n;
    116c:	605a      	str	r2, [r3, #4]
        SysTick->VAL = 0;
    116e:	6099      	str	r1, [r3, #8]
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1170:	681d      	ldr	r5, [r3, #0]
    1172:	4225      	tst	r5, r4
    1174:	d0fc      	beq.n	1170 <delay_us+0x1c>
    1176:	e7f4      	b.n	1162 <delay_us+0xe>
    1178:	20000004 	.word	0x20000004
    117c:	e000e010 	.word	0xe000e010

00001180 <SysTick_Handler>:


void SysTick_Handler(void) {
    //g_msTicks++;
}
    1180:	4770      	bx	lr
	...

00001184 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    1184:	b530      	push	{r4, r5, lr}
    1186:	2480      	movs	r4, #128	; 0x80
        SysTick->VAL = 0;
    1188:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    118a:	4b07      	ldr	r3, [pc, #28]	; (11a8 <delay_ms+0x24>)
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    118c:	0264      	lsls	r4, r4, #9
    118e:	681a      	ldr	r2, [r3, #0]
        SysTick->LOAD = n;
    1190:	4b06      	ldr	r3, [pc, #24]	; (11ac <delay_ms+0x28>)
    while (n--) {
    1192:	3801      	subs	r0, #1
    1194:	d200      	bcs.n	1198 <delay_ms+0x14>
    }
}
    1196:	bd30      	pop	{r4, r5, pc}
    if (n > 0) {
    1198:	2a00      	cmp	r2, #0
    119a:	d0fa      	beq.n	1192 <delay_ms+0xe>
        SysTick->LOAD = n;
    119c:	605a      	str	r2, [r3, #4]
        SysTick->VAL = 0;
    119e:	6099      	str	r1, [r3, #8]
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    11a0:	681d      	ldr	r5, [r3, #0]
    11a2:	4225      	tst	r5, r4
    11a4:	d0fc      	beq.n	11a0 <delay_ms+0x1c>
    11a6:	e7f4      	b.n	1192 <delay_ms+0xe>
    11a8:	20000004 	.word	0x20000004
    11ac:	e000e010 	.word	0xe000e010

000011b0 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    11b0:	21fa      	movs	r1, #250	; 0xfa
    11b2:	4a04      	ldr	r2, [pc, #16]	; (11c4 <RTC_Handler+0x14>)
    11b4:	0089      	lsls	r1, r1, #2
    11b6:	6813      	ldr	r3, [r2, #0]
    11b8:	185b      	adds	r3, r3, r1
    11ba:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    11bc:	22ff      	movs	r2, #255	; 0xff
    11be:	4b02      	ldr	r3, [pc, #8]	; (11c8 <RTC_Handler+0x18>)
    11c0:	721a      	strb	r2, [r3, #8]
}
    11c2:	4770      	bx	lr
    11c4:	2000013c 	.word	0x2000013c
    11c8:	40001400 	.word	0x40001400

000011cc <millis>:

uint32_t millis(void) {
    11cc:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    11ce:	f3ef 8110 	mrs	r1, PRIMASK
    11d2:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    11d4:	4b09      	ldr	r3, [pc, #36]	; (11fc <millis+0x30>)
    11d6:	4c0a      	ldr	r4, [pc, #40]	; (1200 <millis+0x34>)
    11d8:	8a18      	ldrh	r0, [r3, #16]
    11da:	6825      	ldr	r5, [r4, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    11dc:	7a1a      	ldrb	r2, [r3, #8]
    ms = time_ms + RTC->MODE1.COUNT.reg;
    11de:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    11e0:	09d2      	lsrs	r2, r2, #7
    ms = time_ms + RTC->MODE1.COUNT.reg;
    11e2:	1940      	adds	r0, r0, r5
    if (RTC->MODE1.INTFLAG.bit.OVF)
    11e4:	2a00      	cmp	r2, #0
    11e6:	d005      	beq.n	11f4 <millis+0x28>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    11e8:	22fa      	movs	r2, #250	; 0xfa
    11ea:	8a1b      	ldrh	r3, [r3, #16]
    11ec:	6820      	ldr	r0, [r4, #0]
    11ee:	0092      	lsls	r2, r2, #2
    11f0:	1880      	adds	r0, r0, r2
    11f2:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    11f4:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    11f8:	bd30      	pop	{r4, r5, pc}
    11fa:	46c0      	nop			; (mov r8, r8)
    11fc:	40001400 	.word	0x40001400
    1200:	2000013c 	.word	0x2000013c

00001204 <TC4Init>:

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1204:	4a0d      	ldr	r2, [pc, #52]	; (123c <TC4Init+0x38>)
    1206:	4b0e      	ldr	r3, [pc, #56]	; (1240 <TC4Init+0x3c>)
    1208:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    120a:	2380      	movs	r3, #128	; 0x80
    120c:	4a0d      	ldr	r2, [pc, #52]	; (1244 <TC4Init+0x40>)
    120e:	015b      	lsls	r3, r3, #5
    1210:	6a11      	ldr	r1, [r2, #32]
    1212:	430b      	orrs	r3, r1
    1214:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1216:	4b0c      	ldr	r3, [pc, #48]	; (1248 <TC4Init+0x44>)
    1218:	4a0c      	ldr	r2, [pc, #48]	; (124c <TC4Init+0x48>)
    121a:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x50;
    121c:	2250      	movs	r2, #80	; 0x50
    121e:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1220:	3a4f      	subs	r2, #79	; 0x4f
    1222:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1224:	32ff      	adds	r2, #255	; 0xff
    1226:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1228:	8819      	ldrh	r1, [r3, #0]
    122a:	3afe      	subs	r2, #254	; 0xfe
    122c:	430a      	orrs	r2, r1
    122e:	801a      	strh	r2, [r3, #0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1230:	2280      	movs	r2, #128	; 0x80
    1232:	4b07      	ldr	r3, [pc, #28]	; (1250 <TC4Init+0x4c>)
    1234:	0312      	lsls	r2, r2, #12
    1236:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    1238:	4770      	bx	lr
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	0000421c 	.word	0x0000421c
    1240:	40000c00 	.word	0x40000c00
    1244:	40000400 	.word	0x40000400
    1248:	42003000 	.word	0x42003000
    124c:	00000904 	.word	0x00000904
    1250:	e000e100 	.word	0xe000e100

00001254 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1254:	22ff      	movs	r2, #255	; 0xff
void TC4_Handler( void ) {
    1256:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1258:	4b02      	ldr	r3, [pc, #8]	; (1264 <TC4_Handler+0x10>)
    125a:	739a      	strb	r2, [r3, #14]
    //pinToggle(TxPo);
    pullSample();
    125c:	4b02      	ldr	r3, [pc, #8]	; (1268 <TC4_Handler+0x14>)
    125e:	4798      	blx	r3
}
    1260:	bd10      	pop	{r4, pc}
    1262:	46c0      	nop			; (mov r8, r8)
    1264:	42003000 	.word	0x42003000
    1268:	00003385 	.word	0x00003385

0000126c <TC5Init>:

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    126c:	4a0d      	ldr	r2, [pc, #52]	; (12a4 <TC5Init+0x38>)
    126e:	4b0e      	ldr	r3, [pc, #56]	; (12a8 <TC5Init+0x3c>)
    1270:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1272:	2380      	movs	r3, #128	; 0x80
    1274:	4a0d      	ldr	r2, [pc, #52]	; (12ac <TC5Init+0x40>)
    1276:	019b      	lsls	r3, r3, #6
    1278:	6a11      	ldr	r1, [r2, #32]
    127a:	430b      	orrs	r3, r1
    127c:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    127e:	4b0c      	ldr	r3, [pc, #48]	; (12b0 <TC5Init+0x44>)
    1280:	4a0c      	ldr	r2, [pc, #48]	; (12b4 <TC5Init+0x48>)
    1282:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_PRESCALER_DIV16;

    u16_t logSpeed = 20; //Hz
    u8_t PER_Reg = (long)((32768/16) / logSpeed);

    TC5->COUNT8.PER.reg = PER_Reg;
    1284:	2266      	movs	r2, #102	; 0x66
    1286:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1288:	3a65      	subs	r2, #101	; 0x65
    128a:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    128c:	32ff      	adds	r2, #255	; 0xff
    128e:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1290:	8819      	ldrh	r1, [r3, #0]
    1292:	3afe      	subs	r2, #254	; 0xfe
    1294:	430a      	orrs	r2, r1
    1296:	801a      	strh	r2, [r3, #0]
    1298:	2280      	movs	r2, #128	; 0x80
    129a:	4b07      	ldr	r3, [pc, #28]	; (12b8 <TC5Init+0x4c>)
    129c:	0352      	lsls	r2, r2, #13
    129e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    12a0:	4770      	bx	lr
    12a2:	46c0      	nop			; (mov r8, r8)
    12a4:	0000421c 	.word	0x0000421c
    12a8:	40000c00 	.word	0x40000c00
    12ac:	40000400 	.word	0x40000400
    12b0:	42003400 	.word	0x42003400
    12b4:	00000c04 	.word	0x00000c04
    12b8:	e000e100 	.word	0xe000e100

000012bc <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    12bc:	22ff      	movs	r2, #255	; 0xff
    12be:	4b03      	ldr	r3, [pc, #12]	; (12cc <TC5_Handler+0x10>)
    12c0:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    12c2:	4b03      	ldr	r3, [pc, #12]	; (12d0 <TC5_Handler+0x14>)
    12c4:	3afe      	subs	r2, #254	; 0xfe
    12c6:	701a      	strb	r2, [r3, #0]
}
    12c8:	4770      	bx	lr
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	42003400 	.word	0x42003400
    12d0:	2000019a 	.word	0x2000019a

000012d4 <flight>:

#define TESTFLIGHT 1
#define GROUNDTEST 0


void flight() {
    12d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    switch(flightState) {
    12d6:	4c87      	ldr	r4, [pc, #540]	; (14f4 <flight+0x220>)
    12d8:	7820      	ldrb	r0, [r4, #0]
    12da:	280a      	cmp	r0, #10
    12dc:	d823      	bhi.n	1326 <flight+0x52>
    12de:	f003 fd3b 	bl	4d58 <__gnu_thumb1_case_uhi>
    12e2:	000b      	.short	0x000b
    12e4:	00680041 	.word	0x00680041
    12e8:	00220094 	.word	0x00220094
    12ec:	00be00a8 	.word	0x00be00a8
    12f0:	00f000d1 	.word	0x00f000d1
    12f4:	01010022 	.word	0x01010022
    case flightStatrup:
        updateGround( );
    12f8:	4b7f      	ldr	r3, [pc, #508]	; (14f8 <flight+0x224>)
    12fa:	4798      	blx	r3
        if ((millis() - startupTick) > 10000) {
    12fc:	4b7f      	ldr	r3, [pc, #508]	; (14fc <flight+0x228>)
    12fe:	4798      	blx	r3
    1300:	4b7f      	ldr	r3, [pc, #508]	; (1500 <flight+0x22c>)
    1302:	681b      	ldr	r3, [r3, #0]
    1304:	1ac0      	subs	r0, r0, r3
    1306:	4b7f      	ldr	r3, [pc, #508]	; (1504 <flight+0x230>)
    1308:	4298      	cmp	r0, r3
    130a:	d928      	bls.n	135e <flight+0x8a>
            findNewFlightStart();
    130c:	4b7e      	ldr	r3, [pc, #504]	; (1508 <flight+0x234>)
    130e:	4798      	blx	r3
            startupJingle();
    1310:	4b7e      	ldr	r3, [pc, #504]	; (150c <flight+0x238>)
    1312:	4798      	blx	r3

#if TESTFLIGHT
            flightState = flightTest;
    1314:	230a      	movs	r3, #10
    1316:	7023      	strb	r3, [r4, #0]
            writeFlightStartAddress();
    1318:	4b7d      	ldr	r3, [pc, #500]	; (1510 <flight+0x23c>)
    131a:	4798      	blx	r3
            logFlight( );
    131c:	4b7d      	ldr	r3, [pc, #500]	; (1514 <flight+0x240>)
    131e:	4798      	blx	r3
            logEvent('L');
    1320:	204c      	movs	r0, #76	; 0x4c


        if (altitudeAGL() < deploymentSettings.MAIN_DEPLOY) {
            flightState = flightMain;
            igniteMain();
            logEvent('M');
    1322:	4b7d      	ldr	r3, [pc, #500]	; (1518 <flight+0x244>)
    1324:	4798      	blx	r3
        break;
    }



    if ((flightState > flightPad) & unplugged()) {
    1326:	2602      	movs	r6, #2
    1328:	7823      	ldrb	r3, [r4, #0]
    132a:	429e      	cmp	r6, r3
    132c:	41b6      	sbcs	r6, r6
    132e:	4b7b      	ldr	r3, [pc, #492]	; (151c <flight+0x248>)
    1330:	4276      	negs	r6, r6
    1332:	4798      	blx	r3
    1334:	2e00      	cmp	r6, #0
    1336:	d003      	beq.n	1340 <flight+0x6c>
    1338:	2800      	cmp	r0, #0
    133a:	d001      	beq.n	1340 <flight+0x6c>
        finishFlight();
    133c:	4b78      	ldr	r3, [pc, #480]	; (1520 <flight+0x24c>)
    133e:	4798      	blx	r3
    }

    if ((flightState <= flightPad) & unplugged()) {
    1340:	2300      	movs	r3, #0
    1342:	2102      	movs	r1, #2
    1344:	7822      	ldrb	r2, [r4, #0]
    1346:	4291      	cmp	r1, r2
    1348:	415b      	adcs	r3, r3
    134a:	b2dc      	uxtb	r4, r3
    134c:	4b73      	ldr	r3, [pc, #460]	; (151c <flight+0x248>)
    134e:	4798      	blx	r3
    1350:	2c00      	cmp	r4, #0
    1352:	d003      	beq.n	135c <flight+0x88>
    1354:	2800      	cmp	r0, #0
    1356:	d001      	beq.n	135c <flight+0x88>
        finishFromPad();
    1358:	4b72      	ldr	r3, [pc, #456]	; (1524 <flight+0x250>)
    135a:	4798      	blx	r3
    }

    135c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        attemptConnection();
    135e:	4b72      	ldr	r3, [pc, #456]	; (1528 <flight+0x254>)
           logSensors( );
    1360:	4798      	blx	r3
    1362:	e7e0      	b.n	1326 <flight+0x52>
        if (millis() - offsets.groundBeep > 2000) {
    1364:	4f65      	ldr	r7, [pc, #404]	; (14fc <flight+0x228>)
    1366:	47b8      	blx	r7
    1368:	4e70      	ldr	r6, [pc, #448]	; (152c <flight+0x258>)
    136a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    136c:	1ac0      	subs	r0, r0, r3
    136e:	23fa      	movs	r3, #250	; 0xfa
    1370:	00db      	lsls	r3, r3, #3
    1372:	4298      	cmp	r0, r3
    1374:	d905      	bls.n	1382 <flight+0xae>
            offsets.groundBeep = millis();
    1376:	47b8      	blx	r7
    1378:	62f0      	str	r0, [r6, #44]	; 0x2c
            beep(400);
    137a:	20c8      	movs	r0, #200	; 0xc8
    137c:	4b6c      	ldr	r3, [pc, #432]	; (1530 <flight+0x25c>)
    137e:	0040      	lsls	r0, r0, #1
    1380:	4798      	blx	r3
        if (unplugged()) {
    1382:	4b66      	ldr	r3, [pc, #408]	; (151c <flight+0x248>)
    1384:	4798      	blx	r3
    1386:	2800      	cmp	r0, #0
    1388:	d001      	beq.n	138e <flight+0xba>
            finishFromPad();
    138a:	4b66      	ldr	r3, [pc, #408]	; (1524 <flight+0x250>)
    138c:	4798      	blx	r3
        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    138e:	4b69      	ldr	r3, [pc, #420]	; (1534 <flight+0x260>)
    1390:	7e1b      	ldrb	r3, [r3, #24]
    1392:	075b      	lsls	r3, r3, #29
    1394:	d5c7      	bpl.n	1326 <flight+0x52>
            u8_t possibleReset = usartDataIn(USART3);
    1396:	2003      	movs	r0, #3
    1398:	4b67      	ldr	r3, [pc, #412]	; (1538 <flight+0x264>)
    139a:	4798      	blx	r3
            if (possibleReset == 0x52) {
    139c:	2852      	cmp	r0, #82	; 0x52
    139e:	d1c2      	bne.n	1326 <flight+0x52>
  __ASM volatile ("dsb 0xF":::"memory");
    13a0:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
    13a4:	4a65      	ldr	r2, [pc, #404]	; (153c <flight+0x268>)
    13a6:	4b66      	ldr	r3, [pc, #408]	; (1540 <flight+0x26c>)
    13a8:	60da      	str	r2, [r3, #12]
    13aa:	f3bf 8f4f 	dsb	sy
    __NOP();
    13ae:	46c0      	nop			; (mov r8, r8)
    13b0:	e7fd      	b.n	13ae <flight+0xda>
        updateGround();
    13b2:	4b51      	ldr	r3, [pc, #324]	; (14f8 <flight+0x224>)
    13b4:	4798      	blx	r3
        if (writeLog) {
    13b6:	4b63      	ldr	r3, [pc, #396]	; (1544 <flight+0x270>)
    13b8:	781b      	ldrb	r3, [r3, #0]
    13ba:	2b00      	cmp	r3, #0
    13bc:	d005      	beq.n	13ca <flight+0xf6>
            logSensorsOnPad( );
    13be:	4b62      	ldr	r3, [pc, #392]	; (1548 <flight+0x274>)
    13c0:	4798      	blx	r3
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    13c2:	2280      	movs	r2, #128	; 0x80
    13c4:	4b61      	ldr	r3, [pc, #388]	; (154c <flight+0x278>)
    13c6:	0352      	lsls	r2, r2, #13
    13c8:	61da      	str	r2, [r3, #28]
        if ((( velocity > 10) && (accel > 2)) | (altitudeAGL() > 100)) {
    13ca:	4961      	ldr	r1, [pc, #388]	; (1550 <flight+0x27c>)
    13cc:	4f61      	ldr	r7, [pc, #388]	; (1554 <flight+0x280>)
    13ce:	2200      	movs	r2, #0
    13d0:	6808      	ldr	r0, [r1, #0]
    13d2:	6849      	ldr	r1, [r1, #4]
    13d4:	4b60      	ldr	r3, [pc, #384]	; (1558 <flight+0x284>)
    13d6:	47b8      	blx	r7
    13d8:	1e06      	subs	r6, r0, #0
    13da:	d00b      	beq.n	13f4 <flight+0x120>
    13dc:	2380      	movs	r3, #128	; 0x80
    13de:	495f      	ldr	r1, [pc, #380]	; (155c <flight+0x288>)
    13e0:	2200      	movs	r2, #0
    13e2:	6808      	ldr	r0, [r1, #0]
    13e4:	6849      	ldr	r1, [r1, #4]
    13e6:	05db      	lsls	r3, r3, #23
    13e8:	2601      	movs	r6, #1
    13ea:	47b8      	blx	r7
    13ec:	2800      	cmp	r0, #0
    13ee:	d100      	bne.n	13f2 <flight+0x11e>
    13f0:	1c06      	adds	r6, r0, #0
    13f2:	b2f6      	uxtb	r6, r6
    13f4:	4b5a      	ldr	r3, [pc, #360]	; (1560 <flight+0x28c>)
    13f6:	4798      	blx	r3
    13f8:	2864      	cmp	r0, #100	; 0x64
    13fa:	dc02      	bgt.n	1402 <flight+0x12e>
    13fc:	07f3      	lsls	r3, r6, #31
    13fe:	d400      	bmi.n	1402 <flight+0x12e>
    1400:	e791      	b.n	1326 <flight+0x52>
            flightState = flightBoost;
    1402:	2303      	movs	r3, #3
    1404:	7023      	strb	r3, [r4, #0]
            beginFlightLog();
    1406:	4b57      	ldr	r3, [pc, #348]	; (1564 <flight+0x290>)
    1408:	e7aa      	b.n	1360 <flight+0x8c>
        if (writeLog) {
    140a:	4b4e      	ldr	r3, [pc, #312]	; (1544 <flight+0x270>)
    140c:	781b      	ldrb	r3, [r3, #0]
    140e:	2b00      	cmp	r3, #0
    1410:	d001      	beq.n	1416 <flight+0x142>
            logSensors( );
    1412:	4b55      	ldr	r3, [pc, #340]	; (1568 <flight+0x294>)
    1414:	4798      	blx	r3
        if (accel < 0.25) {
    1416:	4951      	ldr	r1, [pc, #324]	; (155c <flight+0x288>)
    1418:	2200      	movs	r2, #0
    141a:	6808      	ldr	r0, [r1, #0]
    141c:	6849      	ldr	r1, [r1, #4]
    141e:	4b53      	ldr	r3, [pc, #332]	; (156c <flight+0x298>)
    1420:	4e53      	ldr	r6, [pc, #332]	; (1570 <flight+0x29c>)
    1422:	47b0      	blx	r6
    1424:	2800      	cmp	r0, #0
    1426:	d100      	bne.n	142a <flight+0x156>
    1428:	e77d      	b.n	1326 <flight+0x52>
            flightState = flightCoast;
    142a:	2305      	movs	r3, #5
            logEvent('B');
    142c:	2042      	movs	r0, #66	; 0x42
            flightState = flightCoast;
    142e:	7023      	strb	r3, [r4, #0]
    1430:	e777      	b.n	1322 <flight+0x4e>
        if (writeLog) {
    1432:	4b44      	ldr	r3, [pc, #272]	; (1544 <flight+0x270>)
    1434:	781b      	ldrb	r3, [r3, #0]
    1436:	2b00      	cmp	r3, #0
    1438:	d001      	beq.n	143e <flight+0x16a>
            logSensors( );
    143a:	4b4b      	ldr	r3, [pc, #300]	; (1568 <flight+0x294>)
    143c:	4798      	blx	r3
        if (velocity < 0) {
    143e:	4944      	ldr	r1, [pc, #272]	; (1550 <flight+0x27c>)
    1440:	2200      	movs	r2, #0
    1442:	6808      	ldr	r0, [r1, #0]
    1444:	6849      	ldr	r1, [r1, #4]
    1446:	2300      	movs	r3, #0
    1448:	4e49      	ldr	r6, [pc, #292]	; (1570 <flight+0x29c>)
    144a:	47b0      	blx	r6
    144c:	2800      	cmp	r0, #0
    144e:	d100      	bne.n	1452 <flight+0x17e>
    1450:	e769      	b.n	1326 <flight+0x52>
            flightState = flightDrogue;
    1452:	2306      	movs	r3, #6
    1454:	7023      	strb	r3, [r4, #0]
            igniteDrogue();
    1456:	4b47      	ldr	r3, [pc, #284]	; (1574 <flight+0x2a0>)
    1458:	4798      	blx	r3
            logEvent('A');
    145a:	2041      	movs	r0, #65	; 0x41
    145c:	e761      	b.n	1322 <flight+0x4e>
        if (writeLog) {
    145e:	4b39      	ldr	r3, [pc, #228]	; (1544 <flight+0x270>)
    1460:	781b      	ldrb	r3, [r3, #0]
    1462:	2b00      	cmp	r3, #0
    1464:	d001      	beq.n	146a <flight+0x196>
            logSensors( );
    1466:	4b40      	ldr	r3, [pc, #256]	; (1568 <flight+0x294>)
    1468:	4798      	blx	r3
        if (altitudeAGL() < deploymentSettings.MAIN_DEPLOY) {
    146a:	4b3d      	ldr	r3, [pc, #244]	; (1560 <flight+0x28c>)
    146c:	4798      	blx	r3
    146e:	4b42      	ldr	r3, [pc, #264]	; (1578 <flight+0x2a4>)
    1470:	8b1b      	ldrh	r3, [r3, #24]
    1472:	4298      	cmp	r0, r3
    1474:	db00      	blt.n	1478 <flight+0x1a4>
    1476:	e756      	b.n	1326 <flight+0x52>
            flightState = flightMain;
    1478:	2307      	movs	r3, #7
    147a:	7023      	strb	r3, [r4, #0]
            igniteMain();
    147c:	4b3f      	ldr	r3, [pc, #252]	; (157c <flight+0x2a8>)
    147e:	4798      	blx	r3
            logEvent('M');
    1480:	204d      	movs	r0, #77	; 0x4d
    1482:	e74e      	b.n	1322 <flight+0x4e>
        if (writeLog) {
    1484:	4b2f      	ldr	r3, [pc, #188]	; (1544 <flight+0x270>)
    1486:	781b      	ldrb	r3, [r3, #0]
    1488:	2b00      	cmp	r3, #0
    148a:	d001      	beq.n	1490 <flight+0x1bc>
            logSensors( );
    148c:	4b36      	ldr	r3, [pc, #216]	; (1568 <flight+0x294>)
    148e:	4798      	blx	r3
        if ((velocity > -1) && (velocity < 1) ) {
    1490:	4b2f      	ldr	r3, [pc, #188]	; (1550 <flight+0x27c>)
    1492:	2200      	movs	r2, #0
    1494:	681e      	ldr	r6, [r3, #0]
    1496:	685f      	ldr	r7, [r3, #4]
    1498:	4d2e      	ldr	r5, [pc, #184]	; (1554 <flight+0x280>)
    149a:	4b39      	ldr	r3, [pc, #228]	; (1580 <flight+0x2ac>)
    149c:	0030      	movs	r0, r6
    149e:	0039      	movs	r1, r7
    14a0:	47a8      	blx	r5
    14a2:	2800      	cmp	r0, #0
    14a4:	d100      	bne.n	14a8 <flight+0x1d4>
    14a6:	e73e      	b.n	1326 <flight+0x52>
    14a8:	0030      	movs	r0, r6
    14aa:	2200      	movs	r2, #0
    14ac:	4b35      	ldr	r3, [pc, #212]	; (1584 <flight+0x2b0>)
    14ae:	0039      	movs	r1, r7
    14b0:	4e2f      	ldr	r6, [pc, #188]	; (1570 <flight+0x29c>)
    14b2:	47b0      	blx	r6
    14b4:	2800      	cmp	r0, #0
    14b6:	d100      	bne.n	14ba <flight+0x1e6>
    14b8:	e735      	b.n	1326 <flight+0x52>
            flightState = flightLanded;
    14ba:	2308      	movs	r3, #8
    14bc:	7023      	strb	r3, [r4, #0]
            finishFlight();
    14be:	4b18      	ldr	r3, [pc, #96]	; (1520 <flight+0x24c>)
    14c0:	e74e      	b.n	1360 <flight+0x8c>
        if (millis() - offsets.groundBeep > 2000) {
    14c2:	4f0e      	ldr	r7, [pc, #56]	; (14fc <flight+0x228>)
    14c4:	47b8      	blx	r7
    14c6:	4e19      	ldr	r6, [pc, #100]	; (152c <flight+0x258>)
    14c8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    14ca:	1ac0      	subs	r0, r0, r3
    14cc:	23fa      	movs	r3, #250	; 0xfa
    14ce:	00db      	lsls	r3, r3, #3
    14d0:	4298      	cmp	r0, r3
    14d2:	d800      	bhi.n	14d6 <flight+0x202>
    14d4:	e727      	b.n	1326 <flight+0x52>
            offsets.groundBeep = millis();
    14d6:	47b8      	blx	r7
    14d8:	62f0      	str	r0, [r6, #44]	; 0x2c
            beep(400);
    14da:	20c8      	movs	r0, #200	; 0xc8
    14dc:	4b14      	ldr	r3, [pc, #80]	; (1530 <flight+0x25c>)
    14de:	0040      	lsls	r0, r0, #1
    14e0:	4798      	blx	r3
    14e2:	e720      	b.n	1326 <flight+0x52>
        if (writeLog) {
    14e4:	4b17      	ldr	r3, [pc, #92]	; (1544 <flight+0x270>)
    14e6:	781b      	ldrb	r3, [r3, #0]
    14e8:	2b00      	cmp	r3, #0
    14ea:	d100      	bne.n	14ee <flight+0x21a>
    14ec:	e71b      	b.n	1326 <flight+0x52>
           logSensors( );
    14ee:	4b1e      	ldr	r3, [pc, #120]	; (1568 <flight+0x294>)
    14f0:	e736      	b.n	1360 <flight+0x8c>
    14f2:	46c0      	nop			; (mov r8, r8)
    14f4:	200001ac 	.word	0x200001ac
    14f8:	00001589 	.word	0x00001589
    14fc:	000011cd 	.word	0x000011cd
    1500:	2000019c 	.word	0x2000019c
    1504:	00002710 	.word	0x00002710
    1508:	000032d9 	.word	0x000032d9
    150c:	00000f01 	.word	0x00000f01
    1510:	000031fd 	.word	0x000031fd
    1514:	00002d91 	.word	0x00002d91
    1518:	00002df5 	.word	0x00002df5
    151c:	00000ba9 	.word	0x00000ba9
    1520:	00000c79 	.word	0x00000c79
    1524:	00000ca5 	.word	0x00000ca5
    1528:	00003b61 	.word	0x00003b61
    152c:	20000150 	.word	0x20000150
    1530:	00000e8d 	.word	0x00000e8d
    1534:	42001400 	.word	0x42001400
    1538:	000037f9 	.word	0x000037f9
    153c:	05fa0004 	.word	0x05fa0004
    1540:	e000ed00 	.word	0xe000ed00
    1544:	2000019a 	.word	0x2000019a
    1548:	00003009 	.word	0x00003009
    154c:	41004400 	.word	0x41004400
    1550:	20000308 	.word	0x20000308
    1554:	000050ad 	.word	0x000050ad
    1558:	40240000 	.word	0x40240000
    155c:	200002e8 	.word	0x200002e8
    1560:	00000b75 	.word	0x00000b75
    1564:	000032b1 	.word	0x000032b1
    1568:	00002e51 	.word	0x00002e51
    156c:	3fd00000 	.word	0x3fd00000
    1570:	00005085 	.word	0x00005085
    1574:	000018a1 	.word	0x000018a1
    1578:	20000180 	.word	0x20000180
    157c:	00001845 	.word	0x00001845
    1580:	bff00000 	.word	0xbff00000
    1584:	3ff00000 	.word	0x3ff00000

00001588 <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    1588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    158a:	4c2b      	ldr	r4, [pc, #172]	; (1638 <updateGround+0xb0>)
    158c:	4d2b      	ldr	r5, [pc, #172]	; (163c <updateGround+0xb4>)
    158e:	4a2c      	ldr	r2, [pc, #176]	; (1640 <updateGround+0xb8>)
    1590:	6920      	ldr	r0, [r4, #16]
    1592:	6961      	ldr	r1, [r4, #20]
    1594:	4b2b      	ldr	r3, [pc, #172]	; (1644 <updateGround+0xbc>)
    1596:	47a8      	blx	r5
    1598:	4b2b      	ldr	r3, [pc, #172]	; (1648 <updateGround+0xc0>)
    159a:	0006      	movs	r6, r0
    159c:	6a58      	ldr	r0, [r3, #36]	; 0x24
    159e:	4b2b      	ldr	r3, [pc, #172]	; (164c <updateGround+0xc4>)
    15a0:	000f      	movs	r7, r1
    15a2:	4798      	blx	r3
    15a4:	4a26      	ldr	r2, [pc, #152]	; (1640 <updateGround+0xb8>)
    15a6:	4b2a      	ldr	r3, [pc, #168]	; (1650 <updateGround+0xc8>)
    15a8:	47a8      	blx	r5
    15aa:	0002      	movs	r2, r0
    15ac:	000b      	movs	r3, r1
    15ae:	0030      	movs	r0, r6
    15b0:	0039      	movs	r1, r7
    15b2:	4e28      	ldr	r6, [pc, #160]	; (1654 <updateGround+0xcc>)
    15b4:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    15b6:	4e28      	ldr	r6, [pc, #160]	; (1658 <updateGround+0xd0>)
    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    15b8:	6120      	str	r0, [r4, #16]
    15ba:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    15bc:	69e0      	ldr	r0, [r4, #28]
    15be:	47b0      	blx	r6
    15c0:	2200      	movs	r2, #0
    15c2:	4b26      	ldr	r3, [pc, #152]	; (165c <updateGround+0xd4>)
    15c4:	47a8      	blx	r5
    15c6:	9000      	str	r0, [sp, #0]
    15c8:	9101      	str	r1, [sp, #4]
    15ca:	4925      	ldr	r1, [pc, #148]	; (1660 <updateGround+0xd8>)
    15cc:	2200      	movs	r2, #0
    15ce:	6808      	ldr	r0, [r1, #0]
    15d0:	6849      	ldr	r1, [r1, #4]
    15d2:	4b22      	ldr	r3, [pc, #136]	; (165c <updateGround+0xd4>)
    15d4:	47a8      	blx	r5
    15d6:	4f1f      	ldr	r7, [pc, #124]	; (1654 <updateGround+0xcc>)
    15d8:	0002      	movs	r2, r0
    15da:	000b      	movs	r3, r1
    15dc:	9800      	ldr	r0, [sp, #0]
    15de:	9901      	ldr	r1, [sp, #4]
    15e0:	47b8      	blx	r7
    15e2:	4f20      	ldr	r7, [pc, #128]	; (1664 <updateGround+0xdc>)
    15e4:	47b8      	blx	r7
    15e6:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    15e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    15ea:	47b0      	blx	r6
    15ec:	4a14      	ldr	r2, [pc, #80]	; (1640 <updateGround+0xb8>)
    15ee:	4b15      	ldr	r3, [pc, #84]	; (1644 <updateGround+0xbc>)
    15f0:	47a8      	blx	r5
    15f2:	4b15      	ldr	r3, [pc, #84]	; (1648 <updateGround+0xc0>)
    15f4:	9000      	str	r0, [sp, #0]
    15f6:	9101      	str	r1, [sp, #4]
    15f8:	6d58      	ldr	r0, [r3, #84]	; 0x54
    15fa:	47b0      	blx	r6
    15fc:	4a10      	ldr	r2, [pc, #64]	; (1640 <updateGround+0xb8>)
    15fe:	4b14      	ldr	r3, [pc, #80]	; (1650 <updateGround+0xc8>)
    1600:	47a8      	blx	r5
    1602:	4d14      	ldr	r5, [pc, #80]	; (1654 <updateGround+0xcc>)
    1604:	000b      	movs	r3, r1
    1606:	0002      	movs	r2, r0
    1608:	9800      	ldr	r0, [sp, #0]
    160a:	9901      	ldr	r1, [sp, #4]
    160c:	47a8      	blx	r5
    160e:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    1610:	4d15      	ldr	r5, [pc, #84]	; (1668 <updateGround+0xe0>)
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    1612:	6260      	str	r0, [r4, #36]	; 0x24
    if ((millis() - offsets.offsetBufferTime) > 2000) {
    1614:	47a8      	blx	r5
    1616:	6823      	ldr	r3, [r4, #0]
    1618:	1ac0      	subs	r0, r0, r3
    161a:	23fa      	movs	r3, #250	; 0xfa
    161c:	00db      	lsls	r3, r3, #3
    161e:	4298      	cmp	r0, r3
    1620:	d909      	bls.n	1636 <updateGround+0xae>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    1622:	69e3      	ldr	r3, [r4, #28]
    1624:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    1626:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1628:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    162a:	6922      	ldr	r2, [r4, #16]
    162c:	6963      	ldr	r3, [r4, #20]
    162e:	60a2      	str	r2, [r4, #8]
    1630:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    1632:	47a8      	blx	r5
    1634:	6020      	str	r0, [r4, #0]
    }
}
    1636:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1638:	20000150 	.word	0x20000150
    163c:	0000626d 	.word	0x0000626d
    1640:	9999999a 	.word	0x9999999a
    1644:	3fe99999 	.word	0x3fe99999
    1648:	200005f0 	.word	0x200005f0
    164c:	00006f35 	.word	0x00006f35
    1650:	3fc99999 	.word	0x3fc99999
    1654:	000053e5 	.word	0x000053e5
    1658:	00006ec5 	.word	0x00006ec5
    165c:	3fe00000 	.word	0x3fe00000
    1660:	20000328 	.word	0x20000328
    1664:	00005129 	.word	0x00005129
    1668:	000011cd 	.word	0x000011cd

0000166c <checkContinuity>:
    }
}

void checkContinuity() {

    charges.mainFound = false;
    166c:	2200      	movs	r2, #0
    166e:	4b13      	ldr	r3, [pc, #76]	; (16bc <checkContinuity+0x50>)
void checkContinuity() {
    1670:	b510      	push	{r4, lr}
    charges.mainFound = false;
    1672:	1c59      	adds	r1, r3, #1
    1674:	77ca      	strb	r2, [r1, #31]
    charges.drogueFound = false;
    1676:	1c99      	adds	r1, r3, #2
    1678:	77ca      	strb	r2, [r1, #31]
    if (chan.ENABLED & (chan.TYPE == DROGUE_t)) {
    167a:	4a11      	ldr	r2, [pc, #68]	; (16c0 <checkContinuity+0x54>)
    167c:	7850      	ldrb	r0, [r2, #1]
    167e:	2801      	cmp	r0, #1
    1680:	d102      	bne.n	1688 <checkContinuity+0x1c>
    1682:	7810      	ldrb	r0, [r2, #0]
    1684:	2800      	cmp	r0, #0
    1686:	d106      	bne.n	1696 <checkContinuity+0x2a>
    if (chan.ENABLED & (chan.TYPE == MAIN_t)) {
    1688:	79d1      	ldrb	r1, [r2, #7]
    168a:	2900      	cmp	r1, #0
    168c:	d102      	bne.n	1694 <checkContinuity+0x28>
    168e:	7992      	ldrb	r2, [r2, #6]
    1690:	2a00      	cmp	r2, #0
    1692:	d109      	bne.n	16a8 <checkContinuity+0x3c>
            charges.mainFound = true;
        }
    }


}
    1694:	bd10      	pop	{r4, pc}
        if (sample.voltage.senseA > 500) {
    1696:	20fa      	movs	r0, #250	; 0xfa
    1698:	4c0a      	ldr	r4, [pc, #40]	; (16c4 <checkContinuity+0x58>)
    169a:	0040      	lsls	r0, r0, #1
    169c:	8a24      	ldrh	r4, [r4, #16]
    169e:	4284      	cmp	r4, r0
    16a0:	d9f2      	bls.n	1688 <checkContinuity+0x1c>
            charges.drogueFound = true;
    16a2:	2001      	movs	r0, #1
    16a4:	77c8      	strb	r0, [r1, #31]
    16a6:	e7ef      	b.n	1688 <checkContinuity+0x1c>
        if (sample.voltage.senseB > 500) {
    16a8:	22fa      	movs	r2, #250	; 0xfa
    16aa:	4906      	ldr	r1, [pc, #24]	; (16c4 <checkContinuity+0x58>)
    16ac:	0052      	lsls	r2, r2, #1
    16ae:	8a49      	ldrh	r1, [r1, #18]
    16b0:	4291      	cmp	r1, r2
    16b2:	d9ef      	bls.n	1694 <checkContinuity+0x28>
            charges.mainFound = true;
    16b4:	2201      	movs	r2, #1
    16b6:	3301      	adds	r3, #1
    16b8:	77da      	strb	r2, [r3, #31]
}
    16ba:	e7eb      	b.n	1694 <checkContinuity+0x28>
    16bc:	200002c4 	.word	0x200002c4
    16c0:	20000180 	.word	0x20000180
    16c4:	200005f0 	.word	0x200005f0

000016c8 <continuityBeep>:

void continuityBeep() {
    16c8:	b510      	push	{r4, lr}

    checkContinuity();
    16ca:	4b11      	ldr	r3, [pc, #68]	; (1710 <continuityBeep+0x48>)
    16cc:	4798      	blx	r3

    if ((charges.mainFound == false) & (charges.drogueFound == false)) {
    16ce:	4a11      	ldr	r2, [pc, #68]	; (1714 <continuityBeep+0x4c>)
    16d0:	1c53      	adds	r3, r2, #1
    16d2:	7fd9      	ldrb	r1, [r3, #31]
    16d4:	2301      	movs	r3, #1
    16d6:	001c      	movs	r4, r3
    16d8:	1c90      	adds	r0, r2, #2
    16da:	404c      	eors	r4, r1
    16dc:	7fc0      	ldrb	r0, [r0, #31]
    16de:	2900      	cmp	r1, #0
    16e0:	d104      	bne.n	16ec <continuityBeep+0x24>
    16e2:	2800      	cmp	r0, #0
    16e4:	d102      	bne.n	16ec <continuityBeep+0x24>
    } else if ((charges.mainFound == false) & (charges.drogueFound == true)) {
        beepDigit(1);
    } else if ((charges.mainFound == true) & (charges.drogueFound == false)) {
        beepDigit(2);
    } else if ((charges.mainFound == true) & (charges.drogueFound == true)) {
        beepDigit(3);
    16e6:	4b0c      	ldr	r3, [pc, #48]	; (1718 <continuityBeep+0x50>)
    16e8:	4798      	blx	r3
    }


}
    16ea:	bd10      	pop	{r4, pc}
    } else if ((charges.mainFound == false) & (charges.drogueFound == true)) {
    16ec:	2c00      	cmp	r4, #0
    16ee:	d003      	beq.n	16f8 <continuityBeep+0x30>
    16f0:	2800      	cmp	r0, #0
    16f2:	d001      	beq.n	16f8 <continuityBeep+0x30>
        beepDigit(1);
    16f4:	2001      	movs	r0, #1
    16f6:	e7f6      	b.n	16e6 <continuityBeep+0x1e>
    } else if ((charges.mainFound == true) & (charges.drogueFound == false)) {
    16f8:	4283      	cmp	r3, r0
    16fa:	d002      	beq.n	1702 <continuityBeep+0x3a>
        beepDigit(2);
    16fc:	2002      	movs	r0, #2
    } else if ((charges.mainFound == true) & (charges.drogueFound == false)) {
    16fe:	2900      	cmp	r1, #0
    1700:	d1f1      	bne.n	16e6 <continuityBeep+0x1e>
    } else if ((charges.mainFound == true) & (charges.drogueFound == true)) {
    1702:	2302      	movs	r3, #2
    1704:	8c12      	ldrh	r2, [r2, #32]
    1706:	33ff      	adds	r3, #255	; 0xff
    1708:	429a      	cmp	r2, r3
    170a:	d1ee      	bne.n	16ea <continuityBeep+0x22>
        beepDigit(3);
    170c:	2003      	movs	r0, #3
    170e:	e7ea      	b.n	16e6 <continuityBeep+0x1e>
    1710:	0000166d 	.word	0x0000166d
    1714:	200002c4 	.word	0x200002c4
    1718:	00000ed1 	.word	0x00000ed1

0000171c <igniterTick>:

void igniterTick() {

    if (charges.igniterAHot) {
    171c:	4b20      	ldr	r3, [pc, #128]	; (17a0 <igniterTick+0x84>)
    171e:	781a      	ldrb	r2, [r3, #0]
    1720:	2a00      	cmp	r2, #0
    1722:	d00c      	beq.n	173e <igniterTick+0x22>
        if ((charges.igniterATick + 3000) < (int)sample.sampleTick ) {
    1724:	491f      	ldr	r1, [pc, #124]	; (17a4 <igniterTick+0x88>)
    1726:	685a      	ldr	r2, [r3, #4]
    1728:	1852      	adds	r2, r2, r1
    172a:	491f      	ldr	r1, [pc, #124]	; (17a8 <igniterTick+0x8c>)
    172c:	6849      	ldr	r1, [r1, #4]
    172e:	428a      	cmp	r2, r1
    1730:	d205      	bcs.n	173e <igniterTick+0x22>
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1732:	2180      	movs	r1, #128	; 0x80
    1734:	4a1d      	ldr	r2, [pc, #116]	; (17ac <igniterTick+0x90>)
    1736:	0409      	lsls	r1, r1, #16
    1738:	6011      	str	r1, [r2, #0]
            pinLow(fireAPin);
            charges.igniterAHot = false;
    173a:	2200      	movs	r2, #0
    173c:	701a      	strb	r2, [r3, #0]
        }
    }

    if (charges.igniterBHot) {
    173e:	7a1a      	ldrb	r2, [r3, #8]
    1740:	2a00      	cmp	r2, #0
    1742:	d00c      	beq.n	175e <igniterTick+0x42>
        if ((charges.igniterBTick + 3000) < (int)sample.sampleTick ) {
    1744:	4917      	ldr	r1, [pc, #92]	; (17a4 <igniterTick+0x88>)
    1746:	68da      	ldr	r2, [r3, #12]
    1748:	1852      	adds	r2, r2, r1
    174a:	4917      	ldr	r1, [pc, #92]	; (17a8 <igniterTick+0x8c>)
    174c:	6849      	ldr	r1, [r1, #4]
    174e:	428a      	cmp	r2, r1
    1750:	d205      	bcs.n	175e <igniterTick+0x42>
    1752:	2180      	movs	r1, #128	; 0x80
    1754:	4a15      	ldr	r2, [pc, #84]	; (17ac <igniterTick+0x90>)
    1756:	03c9      	lsls	r1, r1, #15
    1758:	6011      	str	r1, [r2, #0]
            pinLow(fireBPin);
            charges.igniterBHot = false;
    175a:	2200      	movs	r2, #0
    175c:	721a      	strb	r2, [r3, #8]
        }
    }

    if (charges.igniterCHot) {
    175e:	7c1a      	ldrb	r2, [r3, #16]
    1760:	2a00      	cmp	r2, #0
    1762:	d00c      	beq.n	177e <igniterTick+0x62>
        if ((charges.igniterCTick + 3000) < (int)sample.sampleTick ) {
    1764:	490f      	ldr	r1, [pc, #60]	; (17a4 <igniterTick+0x88>)
    1766:	695a      	ldr	r2, [r3, #20]
    1768:	1852      	adds	r2, r2, r1
    176a:	490f      	ldr	r1, [pc, #60]	; (17a8 <igniterTick+0x8c>)
    176c:	6849      	ldr	r1, [r1, #4]
    176e:	428a      	cmp	r2, r1
    1770:	d205      	bcs.n	177e <igniterTick+0x62>
    1772:	2180      	movs	r1, #128	; 0x80
    1774:	4a0e      	ldr	r2, [pc, #56]	; (17b0 <igniterTick+0x94>)
    1776:	0489      	lsls	r1, r1, #18
    1778:	6151      	str	r1, [r2, #20]
            pinLow(fireCPin);
            charges.igniterCHot = false;
    177a:	2200      	movs	r2, #0
    177c:	741a      	strb	r2, [r3, #16]
        }
    }

    if (charges.igniterDHot) {
    177e:	7e1a      	ldrb	r2, [r3, #24]
    1780:	2a00      	cmp	r2, #0
    1782:	d00c      	beq.n	179e <igniterTick+0x82>
        if ((charges.igniterDTick + 3000) <  (int)sample.sampleTick ) {
    1784:	4907      	ldr	r1, [pc, #28]	; (17a4 <igniterTick+0x88>)
    1786:	69da      	ldr	r2, [r3, #28]
    1788:	1852      	adds	r2, r2, r1
    178a:	4907      	ldr	r1, [pc, #28]	; (17a8 <igniterTick+0x8c>)
    178c:	6849      	ldr	r1, [r1, #4]
    178e:	428a      	cmp	r2, r1
    1790:	d205      	bcs.n	179e <igniterTick+0x82>
    1792:	2180      	movs	r1, #128	; 0x80
    1794:	4a06      	ldr	r2, [pc, #24]	; (17b0 <igniterTick+0x94>)
    1796:	0449      	lsls	r1, r1, #17
    1798:	6151      	str	r1, [r2, #20]
            pinLow(fireDPin);
            charges.igniterDHot = false;
    179a:	2200      	movs	r2, #0
    179c:	761a      	strb	r2, [r3, #24]
        }
    }
}
    179e:	4770      	bx	lr
    17a0:	200002c4 	.word	0x200002c4
    17a4:	00000bb8 	.word	0x00000bb8
    17a8:	200005f0 	.word	0x200005f0
    17ac:	41004494 	.word	0x41004494
    17b0:	41004400 	.word	0x41004400

000017b4 <lightIgniterA>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    17b4:	2280      	movs	r2, #128	; 0x80
    17b6:	4b05      	ldr	r3, [pc, #20]	; (17cc <lightIgniterA+0x18>)
    17b8:	0412      	lsls	r2, r2, #16
    17ba:	601a      	str	r2, [r3, #0]
    }
}

void lightIgniterA() {
    pinHigh(fireAPin);
    charges.igniterAHot = true;
    17bc:	2201      	movs	r2, #1
    17be:	4b04      	ldr	r3, [pc, #16]	; (17d0 <lightIgniterA+0x1c>)
    17c0:	701a      	strb	r2, [r3, #0]
    charges.igniterATick = sample.sampleTick;
    17c2:	4a04      	ldr	r2, [pc, #16]	; (17d4 <lightIgniterA+0x20>)
    17c4:	6852      	ldr	r2, [r2, #4]
    17c6:	605a      	str	r2, [r3, #4]
}
    17c8:	4770      	bx	lr
    17ca:	46c0      	nop			; (mov r8, r8)
    17cc:	41004498 	.word	0x41004498
    17d0:	200002c4 	.word	0x200002c4
    17d4:	200005f0 	.word	0x200005f0

000017d8 <lightIgniterB>:
    17d8:	2280      	movs	r2, #128	; 0x80
    17da:	4b05      	ldr	r3, [pc, #20]	; (17f0 <lightIgniterB+0x18>)
    17dc:	03d2      	lsls	r2, r2, #15
    17de:	601a      	str	r2, [r3, #0]

void lightIgniterB() {
    pinHigh(fireBPin);
    charges.igniterBHot = true;
    17e0:	2201      	movs	r2, #1
    17e2:	4b04      	ldr	r3, [pc, #16]	; (17f4 <lightIgniterB+0x1c>)
    17e4:	721a      	strb	r2, [r3, #8]
    charges.igniterBTick = sample.sampleTick;
    17e6:	4a04      	ldr	r2, [pc, #16]	; (17f8 <lightIgniterB+0x20>)
    17e8:	6852      	ldr	r2, [r2, #4]
    17ea:	60da      	str	r2, [r3, #12]
}
    17ec:	4770      	bx	lr
    17ee:	46c0      	nop			; (mov r8, r8)
    17f0:	41004498 	.word	0x41004498
    17f4:	200002c4 	.word	0x200002c4
    17f8:	200005f0 	.word	0x200005f0

000017fc <lightIgniterC>:
    17fc:	2280      	movs	r2, #128	; 0x80
    17fe:	4b05      	ldr	r3, [pc, #20]	; (1814 <lightIgniterC+0x18>)
    1800:	0492      	lsls	r2, r2, #18
    1802:	619a      	str	r2, [r3, #24]

void lightIgniterC() {
    pinHigh(fireCPin);
    charges.igniterCHot = true;
    1804:	2201      	movs	r2, #1
    1806:	4b04      	ldr	r3, [pc, #16]	; (1818 <lightIgniterC+0x1c>)
    1808:	741a      	strb	r2, [r3, #16]
    charges.igniterCTick = sample.sampleTick;
    180a:	4a04      	ldr	r2, [pc, #16]	; (181c <lightIgniterC+0x20>)
    180c:	6852      	ldr	r2, [r2, #4]
    180e:	615a      	str	r2, [r3, #20]
}
    1810:	4770      	bx	lr
    1812:	46c0      	nop			; (mov r8, r8)
    1814:	41004400 	.word	0x41004400
    1818:	200002c4 	.word	0x200002c4
    181c:	200005f0 	.word	0x200005f0

00001820 <lightIgniterD>:
    1820:	2280      	movs	r2, #128	; 0x80
    1822:	4b05      	ldr	r3, [pc, #20]	; (1838 <lightIgniterD+0x18>)
    1824:	0452      	lsls	r2, r2, #17
    1826:	619a      	str	r2, [r3, #24]

void lightIgniterD() {
    pinHigh(fireDPin);
    charges.igniterDHot = true;
    1828:	2201      	movs	r2, #1
    182a:	4b04      	ldr	r3, [pc, #16]	; (183c <lightIgniterD+0x1c>)
    182c:	761a      	strb	r2, [r3, #24]
    charges.igniterDTick = sample.sampleTick;
    182e:	4a04      	ldr	r2, [pc, #16]	; (1840 <lightIgniterD+0x20>)
    1830:	6852      	ldr	r2, [r2, #4]
    1832:	61da      	str	r2, [r3, #28]
    1834:	4770      	bx	lr
    1836:	46c0      	nop			; (mov r8, r8)
    1838:	41004400 	.word	0x41004400
    183c:	200002c4 	.word	0x200002c4
    1840:	200005f0 	.word	0x200005f0

00001844 <igniteMain>:
void igniteMain() {
    1844:	b510      	push	{r4, lr}
    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    1846:	4c11      	ldr	r4, [pc, #68]	; (188c <igniteMain+0x48>)
    1848:	7863      	ldrb	r3, [r4, #1]
    184a:	2b00      	cmp	r3, #0
    184c:	d104      	bne.n	1858 <igniteMain+0x14>
    184e:	7823      	ldrb	r3, [r4, #0]
    1850:	2b00      	cmp	r3, #0
    1852:	d001      	beq.n	1858 <igniteMain+0x14>
        lightIgniterA();
    1854:	4b0e      	ldr	r3, [pc, #56]	; (1890 <igniteMain+0x4c>)
    1856:	4798      	blx	r3
    if(deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    1858:	79e3      	ldrb	r3, [r4, #7]
    185a:	2b00      	cmp	r3, #0
    185c:	d104      	bne.n	1868 <igniteMain+0x24>
    185e:	79a3      	ldrb	r3, [r4, #6]
    1860:	2b00      	cmp	r3, #0
    1862:	d001      	beq.n	1868 <igniteMain+0x24>
        lightIgniterB();
    1864:	4b0b      	ldr	r3, [pc, #44]	; (1894 <igniteMain+0x50>)
    1866:	4798      	blx	r3
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    1868:	7b63      	ldrb	r3, [r4, #13]
    186a:	2b00      	cmp	r3, #0
    186c:	d104      	bne.n	1878 <igniteMain+0x34>
    186e:	7b23      	ldrb	r3, [r4, #12]
    1870:	2b00      	cmp	r3, #0
    1872:	d001      	beq.n	1878 <igniteMain+0x34>
        lightIgniterC();
    1874:	4b08      	ldr	r3, [pc, #32]	; (1898 <igniteMain+0x54>)
    1876:	4798      	blx	r3
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    1878:	7ce3      	ldrb	r3, [r4, #19]
    187a:	2b00      	cmp	r3, #0
    187c:	d104      	bne.n	1888 <igniteMain+0x44>
    187e:	7ca3      	ldrb	r3, [r4, #18]
    1880:	2b00      	cmp	r3, #0
    1882:	d001      	beq.n	1888 <igniteMain+0x44>
        lightIgniterD();
    1884:	4b05      	ldr	r3, [pc, #20]	; (189c <igniteMain+0x58>)
    1886:	4798      	blx	r3
}
    1888:	bd10      	pop	{r4, pc}
    188a:	46c0      	nop			; (mov r8, r8)
    188c:	20000180 	.word	0x20000180
    1890:	000017b5 	.word	0x000017b5
    1894:	000017d9 	.word	0x000017d9
    1898:	000017fd 	.word	0x000017fd
    189c:	00001821 	.word	0x00001821

000018a0 <igniteDrogue>:
void igniteDrogue() {
    18a0:	b510      	push	{r4, lr}
    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == DROGUE_t)) {
    18a2:	4c11      	ldr	r4, [pc, #68]	; (18e8 <igniteDrogue+0x48>)
    18a4:	7863      	ldrb	r3, [r4, #1]
    18a6:	2b01      	cmp	r3, #1
    18a8:	d104      	bne.n	18b4 <igniteDrogue+0x14>
    18aa:	7823      	ldrb	r3, [r4, #0]
    18ac:	2b00      	cmp	r3, #0
    18ae:	d001      	beq.n	18b4 <igniteDrogue+0x14>
        lightIgniterA();
    18b0:	4b0e      	ldr	r3, [pc, #56]	; (18ec <igniteDrogue+0x4c>)
    18b2:	4798      	blx	r3
    if (deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == DROGUE_t)) {
    18b4:	79e3      	ldrb	r3, [r4, #7]
    18b6:	2b01      	cmp	r3, #1
    18b8:	d104      	bne.n	18c4 <igniteDrogue+0x24>
    18ba:	79a3      	ldrb	r3, [r4, #6]
    18bc:	2b00      	cmp	r3, #0
    18be:	d001      	beq.n	18c4 <igniteDrogue+0x24>
        lightIgniterB();
    18c0:	4b0b      	ldr	r3, [pc, #44]	; (18f0 <igniteDrogue+0x50>)
    18c2:	4798      	blx	r3
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == DROGUE_t)) {
    18c4:	7b63      	ldrb	r3, [r4, #13]
    18c6:	2b01      	cmp	r3, #1
    18c8:	d104      	bne.n	18d4 <igniteDrogue+0x34>
    18ca:	7b23      	ldrb	r3, [r4, #12]
    18cc:	2b00      	cmp	r3, #0
    18ce:	d001      	beq.n	18d4 <igniteDrogue+0x34>
        lightIgniterC();
    18d0:	4b08      	ldr	r3, [pc, #32]	; (18f4 <igniteDrogue+0x54>)
    18d2:	4798      	blx	r3
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
    18d4:	7ce3      	ldrb	r3, [r4, #19]
    18d6:	2b01      	cmp	r3, #1
    18d8:	d104      	bne.n	18e4 <igniteDrogue+0x44>
    18da:	7ca3      	ldrb	r3, [r4, #18]
    18dc:	2b00      	cmp	r3, #0
    18de:	d001      	beq.n	18e4 <igniteDrogue+0x44>
        lightIgniterD();
    18e0:	4b05      	ldr	r3, [pc, #20]	; (18f8 <igniteDrogue+0x58>)
    18e2:	4798      	blx	r3
}
    18e4:	bd10      	pop	{r4, pc}
    18e6:	46c0      	nop			; (mov r8, r8)
    18e8:	20000180 	.word	0x20000180
    18ec:	000017b5 	.word	0x000017b5
    18f0:	000017d9 	.word	0x000017d9
    18f4:	000017fd 	.word	0x000017fd
    18f8:	00001821 	.word	0x00001821

000018fc <computeKalmanGains>:
    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    phi[1][2]    = dt;
    phi[0][2]    = dt*dt/2.0;
    18fc:	2208      	movs	r2, #8
    phi[0][1]    = dt;
    18fe:	4bdd      	ldr	r3, [pc, #884]	; (1c74 <computeKalmanGains+0x378>)
    1900:	48dd      	ldr	r0, [pc, #884]	; (1c78 <computeKalmanGains+0x37c>)
    1902:	49de      	ldr	r1, [pc, #888]	; (1c7c <computeKalmanGains+0x380>)
void computeKalmanGains() {
    1904:	b5f0      	push	{r4, r5, r6, r7, lr}
    phi[0][1]    = dt;
    1906:	6098      	str	r0, [r3, #8]
    1908:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    190a:	6298      	str	r0, [r3, #40]	; 0x28
    190c:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    190e:	48dc      	ldr	r0, [pc, #880]	; (1c80 <computeKalmanGains+0x384>)
    1910:	49dc      	ldr	r1, [pc, #880]	; (1c84 <computeKalmanGains+0x388>)
void computeKalmanGains() {
    1912:	b0cd      	sub	sp, #308	; 0x134
    phi[0][2]    = dt*dt/2.0;
    1914:	6118      	str	r0, [r3, #16]
    1916:	6159      	str	r1, [r3, #20]
    1918:	a940      	add	r1, sp, #256	; 0x100
    191a:	1857      	adds	r7, r2, r1
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    191c:	003e      	movs	r6, r7
    191e:	48da      	ldr	r0, [pc, #872]	; (1c88 <computeKalmanGains+0x38c>)
    1920:	49da      	ldr	r1, [pc, #872]	; (1c8c <computeKalmanGains+0x390>)
    1922:	3e08      	subs	r6, #8
    1924:	6030      	str	r0, [r6, #0]
    1926:	6071      	str	r1, [r6, #4]
            kgain[i][j] = 1.0;
    1928:	2108      	movs	r1, #8
    192a:	4249      	negs	r1, r1
    192c:	468c      	mov	ip, r1
    192e:	4ed8      	ldr	r6, [pc, #864]	; (1c90 <computeKalmanGains+0x394>)
    1930:	2400      	movs	r4, #0
    1932:	1996      	adds	r6, r2, r6
    1934:	44b4      	add	ip, r6
    1936:	4661      	mov	r1, ip
    1938:	4dd6      	ldr	r5, [pc, #856]	; (1c94 <computeKalmanGains+0x398>)
            lastkgain[i][j] = .001;
    193a:	48d3      	ldr	r0, [pc, #844]	; (1c88 <computeKalmanGains+0x38c>)
            kgain[i][j] = 1.0;
    193c:	600c      	str	r4, [r1, #0]
    193e:	604d      	str	r5, [r1, #4]
            lastkgain[i][j] = .001;
    1940:	49d2      	ldr	r1, [pc, #840]	; (1c8c <computeKalmanGains+0x390>)
    1942:	3210      	adds	r2, #16
    1944:	6038      	str	r0, [r7, #0]
    1946:	6079      	str	r1, [r7, #4]
            kgain[i][j] = 1.0;
    1948:	0020      	movs	r0, r4
    194a:	0029      	movs	r1, r5
    194c:	6030      	str	r0, [r6, #0]
    194e:	6071      	str	r1, [r6, #4]
    for( i = 0; i <= 2; i++)
    1950:	2a38      	cmp	r2, #56	; 0x38
    1952:	d1e1      	bne.n	1918 <computeKalmanGains+0x1c>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1954:	6819      	ldr	r1, [r3, #0]
    1956:	685a      	ldr	r2, [r3, #4]
    1958:	911a      	str	r1, [sp, #104]	; 0x68
    195a:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    195c:	6999      	ldr	r1, [r3, #24]
    195e:	69da      	ldr	r2, [r3, #28]
    1960:	911c      	str	r1, [sp, #112]	; 0x70
    1962:	921d      	str	r2, [sp, #116]	; 0x74
    1964:	6a19      	ldr	r1, [r3, #32]
    1966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1968:	911e      	str	r1, [sp, #120]	; 0x78
    196a:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    196c:	6b19      	ldr	r1, [r3, #48]	; 0x30
    196e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    1970:	9120      	str	r1, [sp, #128]	; 0x80
    1972:	9221      	str	r2, [sp, #132]	; 0x84
    1974:	6b99      	ldr	r1, [r3, #56]	; 0x38
    1976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1978:	9122      	str	r1, [sp, #136]	; 0x88
    197a:	9223      	str	r2, [sp, #140]	; 0x8c
    197c:	6c19      	ldr	r1, [r3, #64]	; 0x40
    197e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1980:	9124      	str	r1, [sp, #144]	; 0x90
    1982:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1984:	6c99      	ldr	r1, [r3, #72]	; 0x48
    1986:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    1988:	913a      	str	r1, [sp, #232]	; 0xe8
    198a:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    198c:	6d19      	ldr	r1, [r3, #80]	; 0x50
    198e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    1990:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    1992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1994:	933e      	str	r3, [sp, #248]	; 0xf8
    1996:	943f      	str	r4, [sp, #252]	; 0xfc
    1998:	2300      	movs	r3, #0
    199a:	4cbf      	ldr	r4, [pc, #764]	; (1c98 <computeKalmanGains+0x39c>)
    199c:	913c      	str	r1, [sp, #240]	; 0xf0
    199e:	923d      	str	r2, [sp, #244]	; 0xf4
    19a0:	9302      	str	r3, [sp, #8]
    19a2:	9403      	str	r4, [sp, #12]
    19a4:	2300      	movs	r3, #0
    19a6:	2400      	movs	r4, #0
    19a8:	9310      	str	r3, [sp, #64]	; 0x40
    19aa:	9411      	str	r4, [sp, #68]	; 0x44
    19ac:	9300      	str	r3, [sp, #0]
    19ae:	9401      	str	r4, [sp, #4]
    19b0:	9304      	str	r3, [sp, #16]
    19b2:	9405      	str	r4, [sp, #20]
    19b4:	2300      	movs	r3, #0
    19b6:	4cb8      	ldr	r4, [pc, #736]	; (1c98 <computeKalmanGains+0x39c>)
    19b8:	930e      	str	r3, [sp, #56]	; 0x38
    19ba:	940f      	str	r4, [sp, #60]	; 0x3c
    19bc:	2300      	movs	r3, #0
    19be:	2400      	movs	r4, #0
    19c0:	9308      	str	r3, [sp, #32]
    19c2:	9409      	str	r4, [sp, #36]	; 0x24
    19c4:	930c      	str	r3, [sp, #48]	; 0x30
    19c6:	940d      	str	r4, [sp, #52]	; 0x34
    19c8:	930a      	str	r3, [sp, #40]	; 0x28
    19ca:	940b      	str	r4, [sp, #44]	; 0x2c
    19cc:	2480      	movs	r4, #128	; 0x80
    19ce:	2300      	movs	r3, #0
    19d0:	05e4      	lsls	r4, r4, #23
    19d2:	9306      	str	r3, [sp, #24]
    19d4:	9407      	str	r4, [sp, #28]
    19d6:	2300      	movs	r3, #0
    19d8:	9338      	str	r3, [sp, #224]	; 0xe0
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    19da:	4db0      	ldr	r5, [pc, #704]	; (1c9c <computeKalmanGains+0x3a0>)
    19dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    19de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    19e0:	9806      	ldr	r0, [sp, #24]
    19e2:	9907      	ldr	r1, [sp, #28]
    19e4:	47a8      	blx	r5
    19e6:	4aa4      	ldr	r2, [pc, #656]	; (1c78 <computeKalmanGains+0x37c>)
    19e8:	0006      	movs	r6, r0
    19ea:	000f      	movs	r7, r1
    19ec:	9808      	ldr	r0, [sp, #32]
    19ee:	9909      	ldr	r1, [sp, #36]	; 0x24
    19f0:	4ba2      	ldr	r3, [pc, #648]	; (1c7c <computeKalmanGains+0x380>)
    19f2:	47a8      	blx	r5
    19f4:	4caa      	ldr	r4, [pc, #680]	; (1ca0 <computeKalmanGains+0x3a4>)
    19f6:	0002      	movs	r2, r0
    19f8:	000b      	movs	r3, r1
    19fa:	0030      	movs	r0, r6
    19fc:	0039      	movs	r1, r7
    19fe:	47a0      	blx	r4
    1a00:	4a9f      	ldr	r2, [pc, #636]	; (1c80 <computeKalmanGains+0x384>)
    1a02:	0006      	movs	r6, r0
    1a04:	000f      	movs	r7, r1
    1a06:	9800      	ldr	r0, [sp, #0]
    1a08:	9901      	ldr	r1, [sp, #4]
    1a0a:	4b9e      	ldr	r3, [pc, #632]	; (1c84 <computeKalmanGains+0x388>)
    1a0c:	47a8      	blx	r5
    1a0e:	0002      	movs	r2, r0
    1a10:	000b      	movs	r3, r1
    1a12:	0030      	movs	r0, r6
    1a14:	0039      	movs	r1, r7
    1a16:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1a18:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    1a1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1a1c:	9016      	str	r0, [sp, #88]	; 0x58
    1a1e:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1a20:	980a      	ldr	r0, [sp, #40]	; 0x28
    1a22:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1a24:	47a8      	blx	r5
    1a26:	4a94      	ldr	r2, [pc, #592]	; (1c78 <computeKalmanGains+0x37c>)
    1a28:	0006      	movs	r6, r0
    1a2a:	000f      	movs	r7, r1
    1a2c:	980e      	ldr	r0, [sp, #56]	; 0x38
    1a2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1a30:	4b92      	ldr	r3, [pc, #584]	; (1c7c <computeKalmanGains+0x380>)
    1a32:	47a8      	blx	r5
    1a34:	0002      	movs	r2, r0
    1a36:	000b      	movs	r3, r1
    1a38:	0030      	movs	r0, r6
    1a3a:	0039      	movs	r1, r7
    1a3c:	47a0      	blx	r4
    1a3e:	4a90      	ldr	r2, [pc, #576]	; (1c80 <computeKalmanGains+0x384>)
    1a40:	0006      	movs	r6, r0
    1a42:	000f      	movs	r7, r1
    1a44:	9810      	ldr	r0, [sp, #64]	; 0x40
    1a46:	9911      	ldr	r1, [sp, #68]	; 0x44
    1a48:	4b8e      	ldr	r3, [pc, #568]	; (1c84 <computeKalmanGains+0x388>)
    1a4a:	47a8      	blx	r5
    1a4c:	0002      	movs	r2, r0
    1a4e:	000b      	movs	r3, r1
    1a50:	0030      	movs	r0, r6
    1a52:	0039      	movs	r1, r7
    1a54:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1a56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    1a58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1a5a:	9012      	str	r0, [sp, #72]	; 0x48
    1a5c:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1a5e:	980c      	ldr	r0, [sp, #48]	; 0x30
    1a60:	990d      	ldr	r1, [sp, #52]	; 0x34
    1a62:	47a8      	blx	r5
    1a64:	4a84      	ldr	r2, [pc, #528]	; (1c78 <computeKalmanGains+0x37c>)
    1a66:	0006      	movs	r6, r0
    1a68:	000f      	movs	r7, r1
    1a6a:	9804      	ldr	r0, [sp, #16]
    1a6c:	9905      	ldr	r1, [sp, #20]
    1a6e:	4b83      	ldr	r3, [pc, #524]	; (1c7c <computeKalmanGains+0x380>)
    1a70:	47a8      	blx	r5
    1a72:	0002      	movs	r2, r0
    1a74:	000b      	movs	r3, r1
    1a76:	0030      	movs	r0, r6
    1a78:	0039      	movs	r1, r7
    1a7a:	47a0      	blx	r4
    1a7c:	4a80      	ldr	r2, [pc, #512]	; (1c80 <computeKalmanGains+0x384>)
    1a7e:	0006      	movs	r6, r0
    1a80:	000f      	movs	r7, r1
    1a82:	9802      	ldr	r0, [sp, #8]
    1a84:	9903      	ldr	r1, [sp, #12]
    1a86:	4b7f      	ldr	r3, [pc, #508]	; (1c84 <computeKalmanGains+0x388>)
    1a88:	47a8      	blx	r5
    1a8a:	0002      	movs	r2, r0
    1a8c:	000b      	movs	r3, r1
    1a8e:	0030      	movs	r0, r6
    1a90:	0039      	movs	r1, r7
    1a92:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1a94:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    1a96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1a98:	9014      	str	r0, [sp, #80]	; 0x50
    1a9a:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1a9c:	9806      	ldr	r0, [sp, #24]
    1a9e:	9907      	ldr	r1, [sp, #28]
    1aa0:	47a8      	blx	r5
    1aa2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    1aa4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1aa6:	0006      	movs	r6, r0
    1aa8:	000f      	movs	r7, r1
    1aaa:	9808      	ldr	r0, [sp, #32]
    1aac:	9909      	ldr	r1, [sp, #36]	; 0x24
    1aae:	47a8      	blx	r5
    1ab0:	0002      	movs	r2, r0
    1ab2:	000b      	movs	r3, r1
    1ab4:	0030      	movs	r0, r6
    1ab6:	0039      	movs	r1, r7
    1ab8:	47a0      	blx	r4
    1aba:	4a6f      	ldr	r2, [pc, #444]	; (1c78 <computeKalmanGains+0x37c>)
    1abc:	0006      	movs	r6, r0
    1abe:	000f      	movs	r7, r1
    1ac0:	9800      	ldr	r0, [sp, #0]
    1ac2:	9901      	ldr	r1, [sp, #4]
    1ac4:	4b6d      	ldr	r3, [pc, #436]	; (1c7c <computeKalmanGains+0x380>)
    1ac6:	47a8      	blx	r5
    1ac8:	0002      	movs	r2, r0
    1aca:	000b      	movs	r3, r1
    1acc:	0030      	movs	r0, r6
    1ace:	0039      	movs	r1, r7
    1ad0:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1ad2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    1ad4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1ad6:	9018      	str	r0, [sp, #96]	; 0x60
    1ad8:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1ada:	980a      	ldr	r0, [sp, #40]	; 0x28
    1adc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1ade:	47a8      	blx	r5
    1ae0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    1ae2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1ae4:	0006      	movs	r6, r0
    1ae6:	000f      	movs	r7, r1
    1ae8:	980e      	ldr	r0, [sp, #56]	; 0x38
    1aea:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1aec:	47a8      	blx	r5
    1aee:	0002      	movs	r2, r0
    1af0:	000b      	movs	r3, r1
    1af2:	0030      	movs	r0, r6
    1af4:	0039      	movs	r1, r7
    1af6:	47a0      	blx	r4
    1af8:	4a5f      	ldr	r2, [pc, #380]	; (1c78 <computeKalmanGains+0x37c>)
    1afa:	0006      	movs	r6, r0
    1afc:	000f      	movs	r7, r1
    1afe:	9810      	ldr	r0, [sp, #64]	; 0x40
    1b00:	9911      	ldr	r1, [sp, #68]	; 0x44
    1b02:	4b5e      	ldr	r3, [pc, #376]	; (1c7c <computeKalmanGains+0x380>)
    1b04:	47a8      	blx	r5
    1b06:	0002      	movs	r2, r0
    1b08:	000b      	movs	r3, r1
    1b0a:	0030      	movs	r0, r6
    1b0c:	0039      	movs	r1, r7
    1b0e:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1b10:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    1b12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1b14:	9026      	str	r0, [sp, #152]	; 0x98
    1b16:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1b18:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b1a:	990d      	ldr	r1, [sp, #52]	; 0x34
    1b1c:	47a8      	blx	r5
    1b1e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    1b20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    1b22:	0006      	movs	r6, r0
    1b24:	000f      	movs	r7, r1
    1b26:	9804      	ldr	r0, [sp, #16]
    1b28:	9905      	ldr	r1, [sp, #20]
    1b2a:	47a8      	blx	r5
    1b2c:	0002      	movs	r2, r0
    1b2e:	000b      	movs	r3, r1
    1b30:	0030      	movs	r0, r6
    1b32:	0039      	movs	r1, r7
    1b34:	47a0      	blx	r4
    1b36:	4a50      	ldr	r2, [pc, #320]	; (1c78 <computeKalmanGains+0x37c>)
    1b38:	0006      	movs	r6, r0
    1b3a:	000f      	movs	r7, r1
    1b3c:	9802      	ldr	r0, [sp, #8]
    1b3e:	9903      	ldr	r1, [sp, #12]
    1b40:	4b4e      	ldr	r3, [pc, #312]	; (1c7c <computeKalmanGains+0x380>)
    1b42:	47a8      	blx	r5
    1b44:	0002      	movs	r2, r0
    1b46:	000b      	movs	r3, r1
    1b48:	0030      	movs	r0, r6
    1b4a:	0039      	movs	r1, r7
    1b4c:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1b4e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    1b50:	9b21      	ldr	r3, [sp, #132]	; 0x84
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1b52:	9028      	str	r0, [sp, #160]	; 0xa0
    1b54:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1b56:	9806      	ldr	r0, [sp, #24]
    1b58:	9907      	ldr	r1, [sp, #28]
    1b5a:	47a8      	blx	r5
    1b5c:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1b5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1b60:	0006      	movs	r6, r0
    1b62:	000f      	movs	r7, r1
    1b64:	9808      	ldr	r0, [sp, #32]
    1b66:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b68:	47a8      	blx	r5
    1b6a:	0002      	movs	r2, r0
    1b6c:	000b      	movs	r3, r1
    1b6e:	0030      	movs	r0, r6
    1b70:	0039      	movs	r1, r7
    1b72:	47a0      	blx	r4
    1b74:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1b76:	9b25      	ldr	r3, [sp, #148]	; 0x94
    1b78:	0006      	movs	r6, r0
    1b7a:	000f      	movs	r7, r1
    1b7c:	9800      	ldr	r0, [sp, #0]
    1b7e:	9901      	ldr	r1, [sp, #4]
    1b80:	47a8      	blx	r5
    1b82:	0002      	movs	r2, r0
    1b84:	000b      	movs	r3, r1
    1b86:	0030      	movs	r0, r6
    1b88:	0039      	movs	r1, r7
    1b8a:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1b8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
    1b8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1b90:	902e      	str	r0, [sp, #184]	; 0xb8
    1b92:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1b94:	980a      	ldr	r0, [sp, #40]	; 0x28
    1b96:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1b98:	47a8      	blx	r5
    1b9a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1b9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1b9e:	0006      	movs	r6, r0
    1ba0:	000f      	movs	r7, r1
    1ba2:	980e      	ldr	r0, [sp, #56]	; 0x38
    1ba4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1ba6:	47a8      	blx	r5
    1ba8:	0002      	movs	r2, r0
    1baa:	000b      	movs	r3, r1
    1bac:	0030      	movs	r0, r6
    1bae:	0039      	movs	r1, r7
    1bb0:	47a0      	blx	r4
    1bb2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1bb4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    1bb6:	0006      	movs	r6, r0
    1bb8:	000f      	movs	r7, r1
    1bba:	9810      	ldr	r0, [sp, #64]	; 0x40
    1bbc:	9911      	ldr	r1, [sp, #68]	; 0x44
    1bbe:	47a8      	blx	r5
    1bc0:	0002      	movs	r2, r0
    1bc2:	000b      	movs	r3, r1
    1bc4:	0030      	movs	r0, r6
    1bc6:	0039      	movs	r1, r7
    1bc8:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1bca:	9a20      	ldr	r2, [sp, #128]	; 0x80
    1bcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1bce:	9006      	str	r0, [sp, #24]
    1bd0:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1bd2:	980c      	ldr	r0, [sp, #48]	; 0x30
    1bd4:	990d      	ldr	r1, [sp, #52]	; 0x34
    1bd6:	47a8      	blx	r5
    1bd8:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1bda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1bdc:	0006      	movs	r6, r0
    1bde:	000f      	movs	r7, r1
    1be0:	9804      	ldr	r0, [sp, #16]
    1be2:	9905      	ldr	r1, [sp, #20]
    1be4:	47a8      	blx	r5
    1be6:	0002      	movs	r2, r0
    1be8:	000b      	movs	r3, r1
    1bea:	0030      	movs	r0, r6
    1bec:	0039      	movs	r1, r7
    1bee:	47a0      	blx	r4
    1bf0:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1bf2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    1bf4:	0006      	movs	r6, r0
    1bf6:	000f      	movs	r7, r1
    1bf8:	9802      	ldr	r0, [sp, #8]
    1bfa:	9903      	ldr	r1, [sp, #12]
    1bfc:	47a8      	blx	r5
    1bfe:	0002      	movs	r2, r0
    1c00:	000b      	movs	r3, r1
    1c02:	0030      	movs	r0, r6
    1c04:	0039      	movs	r1, r7
    1c06:	47a0      	blx	r4
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1c08:	4a1b      	ldr	r2, [pc, #108]	; (1c78 <computeKalmanGains+0x37c>)
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1c0a:	9002      	str	r0, [sp, #8]
    1c0c:	9103      	str	r1, [sp, #12]
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1c0e:	9812      	ldr	r0, [sp, #72]	; 0x48
    1c10:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1c12:	4b1a      	ldr	r3, [pc, #104]	; (1c7c <computeKalmanGains+0x380>)
    1c14:	47a8      	blx	r5
    1c16:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1c18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1c1a:	47a0      	blx	r4
    1c1c:	4a18      	ldr	r2, [pc, #96]	; (1c80 <computeKalmanGains+0x384>)
    1c1e:	0006      	movs	r6, r0
    1c20:	000f      	movs	r7, r1
    1c22:	9814      	ldr	r0, [sp, #80]	; 0x50
    1c24:	9915      	ldr	r1, [sp, #84]	; 0x54
    1c26:	4b17      	ldr	r3, [pc, #92]	; (1c84 <computeKalmanGains+0x388>)
    1c28:	47a8      	blx	r5
    1c2a:	0002      	movs	r2, r0
    1c2c:	000b      	movs	r3, r1
    1c2e:	0030      	movs	r0, r6
    1c30:	0039      	movs	r1, r7
    1c32:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1c34:	2200      	movs	r2, #0
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1c36:	9008      	str	r0, [sp, #32]
    1c38:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1c3a:	9816      	ldr	r0, [sp, #88]	; 0x58
    1c3c:	9917      	ldr	r1, [sp, #92]	; 0x5c
    1c3e:	2300      	movs	r3, #0
    1c40:	47a8      	blx	r5
    1c42:	0006      	movs	r6, r0
    1c44:	000f      	movs	r7, r1
    1c46:	0002      	movs	r2, r0
    1c48:	000b      	movs	r3, r1
    1c4a:	9812      	ldr	r0, [sp, #72]	; 0x48
    1c4c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1c4e:	47a0      	blx	r4
    1c50:	4a09      	ldr	r2, [pc, #36]	; (1c78 <computeKalmanGains+0x37c>)
    1c52:	9000      	str	r0, [sp, #0]
    1c54:	9101      	str	r1, [sp, #4]
    1c56:	9814      	ldr	r0, [sp, #80]	; 0x50
    1c58:	9915      	ldr	r1, [sp, #84]	; 0x54
    1c5a:	4b08      	ldr	r3, [pc, #32]	; (1c7c <computeKalmanGains+0x380>)
    1c5c:	47a8      	blx	r5
    1c5e:	0002      	movs	r2, r0
    1c60:	000b      	movs	r3, r1
    1c62:	9800      	ldr	r0, [sp, #0]
    1c64:	9901      	ldr	r1, [sp, #4]
    1c66:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1c68:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1c6a:	9030      	str	r0, [sp, #192]	; 0xc0
    1c6c:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1c6e:	9812      	ldr	r0, [sp, #72]	; 0x48
    1c70:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1c72:	e017      	b.n	1ca4 <computeKalmanGains+0x3a8>
    1c74:	20000010 	.word	0x20000010
    1c78:	47ae147b 	.word	0x47ae147b
    1c7c:	3f747ae1 	.word	0x3f747ae1
    1c80:	eb1c432d 	.word	0xeb1c432d
    1c84:	3eea36e2 	.word	0x3eea36e2
    1c88:	d2f1a9fc 	.word	0xd2f1a9fc
    1c8c:	3f50624d 	.word	0x3f50624d
    1c90:	20000348 	.word	0x20000348
    1c94:	3ff00000 	.word	0x3ff00000
    1c98:	40220000 	.word	0x40220000
    1c9c:	0000626d 	.word	0x0000626d
    1ca0:	000053e5 	.word	0x000053e5
    1ca4:	2300      	movs	r3, #0
    1ca6:	47a8      	blx	r5
    1ca8:	0032      	movs	r2, r6
    1caa:	003b      	movs	r3, r7
    1cac:	47a0      	blx	r4
    1cae:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1cb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1cb2:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1cb4:	4ad9      	ldr	r2, [pc, #868]	; (201c <STACK_SIZE+0x1c>)
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1cb6:	9112      	str	r1, [sp, #72]	; 0x48
    1cb8:	9004      	str	r0, [sp, #16]
    1cba:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1cbc:	4bd8      	ldr	r3, [pc, #864]	; (2020 <STACK_SIZE+0x20>)
    1cbe:	9826      	ldr	r0, [sp, #152]	; 0x98
    1cc0:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1cc2:	47a8      	blx	r5
    1cc4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1cc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1cc8:	47a0      	blx	r4
    1cca:	4ad6      	ldr	r2, [pc, #856]	; (2024 <STACK_SIZE+0x24>)
    1ccc:	0006      	movs	r6, r0
    1cce:	000f      	movs	r7, r1
    1cd0:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1cd2:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1cd4:	4bd4      	ldr	r3, [pc, #848]	; (2028 <STACK_SIZE+0x28>)
    1cd6:	47a8      	blx	r5
    1cd8:	0002      	movs	r2, r0
    1cda:	000b      	movs	r3, r1
    1cdc:	0030      	movs	r0, r6
    1cde:	0039      	movs	r1, r7
    1ce0:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1ce2:	2200      	movs	r2, #0
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1ce4:	902a      	str	r0, [sp, #168]	; 0xa8
    1ce6:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1ce8:	9818      	ldr	r0, [sp, #96]	; 0x60
    1cea:	9919      	ldr	r1, [sp, #100]	; 0x64
    1cec:	2300      	movs	r3, #0
    1cee:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1cf0:	2200      	movs	r2, #0
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1cf2:	9032      	str	r0, [sp, #200]	; 0xc8
    1cf4:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1cf6:	9826      	ldr	r0, [sp, #152]	; 0x98
    1cf8:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1cfa:	2300      	movs	r3, #0
    1cfc:	47a8      	blx	r5
    1cfe:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1d00:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1d02:	47a0      	blx	r4
    1d04:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1d06:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1d08:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1d0a:	4ac4      	ldr	r2, [pc, #784]	; (201c <STACK_SIZE+0x1c>)
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1d0c:	902c      	str	r0, [sp, #176]	; 0xb0
    1d0e:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1d10:	9806      	ldr	r0, [sp, #24]
    1d12:	9907      	ldr	r1, [sp, #28]
    1d14:	4bc2      	ldr	r3, [pc, #776]	; (2020 <STACK_SIZE+0x20>)
    1d16:	47a8      	blx	r5
    1d18:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    1d1a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1d1c:	47a0      	blx	r4
    1d1e:	4ac1      	ldr	r2, [pc, #772]	; (2024 <STACK_SIZE+0x24>)
    1d20:	0006      	movs	r6, r0
    1d22:	000f      	movs	r7, r1
    1d24:	9802      	ldr	r0, [sp, #8]
    1d26:	9903      	ldr	r1, [sp, #12]
    1d28:	4bbf      	ldr	r3, [pc, #764]	; (2028 <STACK_SIZE+0x28>)
    1d2a:	47a8      	blx	r5
    1d2c:	0002      	movs	r2, r0
    1d2e:	000b      	movs	r3, r1
    1d30:	0030      	movs	r0, r6
    1d32:	0039      	movs	r1, r7
    1d34:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1d36:	2200      	movs	r2, #0
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1d38:	9000      	str	r0, [sp, #0]
    1d3a:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1d3c:	982e      	ldr	r0, [sp, #184]	; 0xb8
    1d3e:	992f      	ldr	r1, [sp, #188]	; 0xbc
    1d40:	2300      	movs	r3, #0
    1d42:	47a8      	blx	r5
    1d44:	0006      	movs	r6, r0
    1d46:	000f      	movs	r7, r1
    1d48:	0002      	movs	r2, r0
    1d4a:	000b      	movs	r3, r1
    1d4c:	9806      	ldr	r0, [sp, #24]
    1d4e:	9907      	ldr	r1, [sp, #28]
    1d50:	47a0      	blx	r4
    1d52:	4ab2      	ldr	r2, [pc, #712]	; (201c <STACK_SIZE+0x1c>)
    1d54:	900a      	str	r0, [sp, #40]	; 0x28
    1d56:	910b      	str	r1, [sp, #44]	; 0x2c
    1d58:	9802      	ldr	r0, [sp, #8]
    1d5a:	9903      	ldr	r1, [sp, #12]
    1d5c:	4bb0      	ldr	r3, [pc, #704]	; (2020 <STACK_SIZE+0x20>)
    1d5e:	47a8      	blx	r5
    1d60:	0002      	movs	r2, r0
    1d62:	000b      	movs	r3, r1
    1d64:	980a      	ldr	r0, [sp, #40]	; 0x28
    1d66:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1d68:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];
    1d6a:	2200      	movs	r2, #0
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1d6c:	9010      	str	r0, [sp, #64]	; 0x40
    1d6e:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];
    1d70:	9806      	ldr	r0, [sp, #24]
    1d72:	9907      	ldr	r1, [sp, #28]
    1d74:	2300      	movs	r3, #0
    1d76:	47a8      	blx	r5
    1d78:	0032      	movs	r2, r6
    1d7a:	003b      	movs	r3, r7
    1d7c:	47a0      	blx	r4
    1d7e:	9a02      	ldr	r2, [sp, #8]
    1d80:	9b03      	ldr	r3, [sp, #12]
    1d82:	47a0      	blx	r4
        pestp[2][2] = pestp[2][2] + model_variance;
    1d84:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    1d86:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    1d88:	47a0      	blx	r4
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1d8a:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    1d8c:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[2][2] = pestp[2][2] + model_variance;
    1d8e:	9002      	str	r0, [sp, #8]
    1d90:	9103      	str	r1, [sp, #12]
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1d92:	9808      	ldr	r0, [sp, #32]
    1d94:	9909      	ldr	r1, [sp, #36]	; 0x24
    1d96:	47a0      	blx	r4
    1d98:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    1d9a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1d9c:	900a      	str	r0, [sp, #40]	; 0x28
    1d9e:	910b      	str	r1, [sp, #44]	; 0x2c
    1da0:	9802      	ldr	r0, [sp, #8]
    1da2:	9903      	ldr	r1, [sp, #12]
    1da4:	47a0      	blx	r4
    1da6:	9a00      	ldr	r2, [sp, #0]
    1da8:	9b01      	ldr	r3, [sp, #4]
    1daa:	900c      	str	r0, [sp, #48]	; 0x30
    1dac:	910d      	str	r1, [sp, #52]	; 0x34
    1dae:	9804      	ldr	r0, [sp, #16]
    1db0:	9916      	ldr	r1, [sp, #88]	; 0x58
    1db2:	47a8      	blx	r5
    1db4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1db8:	900e      	str	r0, [sp, #56]	; 0x38
    1dba:	910f      	str	r1, [sp, #60]	; 0x3c
    1dbc:	980a      	ldr	r0, [sp, #40]	; 0x28
    1dbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1dc0:	47a8      	blx	r5
    1dc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1dc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1dc6:	4e99      	ldr	r6, [pc, #612]	; (202c <STACK_SIZE+0x2c>)
    1dc8:	47b0      	blx	r6

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1dca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1dcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1dce:	9006      	str	r0, [sp, #24]
    1dd0:	9107      	str	r1, [sp, #28]
        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1dd2:	9808      	ldr	r0, [sp, #32]
    1dd4:	9909      	ldr	r1, [sp, #36]	; 0x24
    1dd6:	47a8      	blx	r5
    1dd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1dda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1ddc:	47b0      	blx	r6
    1dde:	9a06      	ldr	r2, [sp, #24]
    1de0:	9b07      	ldr	r3, [sp, #28]
    1de2:	4e93      	ldr	r6, [pc, #588]	; (2030 <STACK_SIZE+0x30>)
    1de4:	47b0      	blx	r6
    1de6:	9034      	str	r0, [sp, #208]	; 0xd0
    1de8:	9135      	str	r1, [sp, #212]	; 0xd4
    1dea:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1dec:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1dee:	4991      	ldr	r1, [pc, #580]	; (2034 <STACK_SIZE+0x34>)
    1df0:	600a      	str	r2, [r1, #0]
    1df2:	604b      	str	r3, [r1, #4]
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1df4:	9808      	ldr	r0, [sp, #32]
    1df6:	9909      	ldr	r1, [sp, #36]	; 0x24
    1df8:	2280      	movs	r2, #128	; 0x80
    1dfa:	0612      	lsls	r2, r2, #24
    1dfc:	4694      	mov	ip, r2
    1dfe:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1e00:	9a04      	ldr	r2, [sp, #16]
    1e02:	4463      	add	r3, ip
    1e04:	932e      	str	r3, [sp, #184]	; 0xb8
    1e06:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1e08:	47a8      	blx	r5
    1e0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1e0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e0e:	0006      	movs	r6, r0
    1e10:	000f      	movs	r7, r1
    1e12:	9804      	ldr	r0, [sp, #16]
    1e14:	9916      	ldr	r1, [sp, #88]	; 0x58
    1e16:	47a8      	blx	r5
    1e18:	0002      	movs	r2, r0
    1e1a:	000b      	movs	r3, r1
    1e1c:	0030      	movs	r0, r6
    1e1e:	0039      	movs	r1, r7
    1e20:	47a0      	blx	r4
    1e22:	9a06      	ldr	r2, [sp, #24]
    1e24:	9b07      	ldr	r3, [sp, #28]
    1e26:	4e82      	ldr	r6, [pc, #520]	; (2030 <STACK_SIZE+0x30>)
    1e28:	47b0      	blx	r6
    1e2a:	900e      	str	r0, [sp, #56]	; 0x38
    1e2c:	910f      	str	r1, [sp, #60]	; 0x3c
    1e2e:	4981      	ldr	r1, [pc, #516]	; (2034 <STACK_SIZE+0x34>)
    1e30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1e32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1e34:	608a      	str	r2, [r1, #8]
    1e36:	60cb      	str	r3, [r1, #12]
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1e38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1e3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1e3c:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1e3e:	992b      	ldr	r1, [sp, #172]	; 0xac
    1e40:	47a8      	blx	r5
    1e42:	9a00      	ldr	r2, [sp, #0]
    1e44:	9b01      	ldr	r3, [sp, #4]
    1e46:	0006      	movs	r6, r0
    1e48:	000f      	movs	r7, r1
    1e4a:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1e4c:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1e4e:	47a8      	blx	r5
    1e50:	0002      	movs	r2, r0
    1e52:	000b      	movs	r3, r1
    1e54:	0030      	movs	r0, r6
    1e56:	0039      	movs	r1, r7
    1e58:	4e74      	ldr	r6, [pc, #464]	; (202c <STACK_SIZE+0x2c>)
    1e5a:	47b0      	blx	r6
    1e5c:	9a06      	ldr	r2, [sp, #24]
    1e5e:	9b07      	ldr	r3, [sp, #28]
    1e60:	4e73      	ldr	r6, [pc, #460]	; (2030 <STACK_SIZE+0x30>)
    1e62:	47b0      	blx	r6
    1e64:	0002      	movs	r2, r0
    1e66:	000b      	movs	r3, r1
    1e68:	9139      	str	r1, [sp, #228]	; 0xe4
    1e6a:	4972      	ldr	r1, [pc, #456]	; (2034 <STACK_SIZE+0x34>)
    1e6c:	9018      	str	r0, [sp, #96]	; 0x60
    1e6e:	610a      	str	r2, [r1, #16]
    1e70:	614b      	str	r3, [r1, #20]
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1e72:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1e74:	992b      	ldr	r1, [sp, #172]	; 0xac
    1e76:	9a04      	ldr	r2, [sp, #16]
    1e78:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1e7a:	47a8      	blx	r5
    1e7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e80:	0006      	movs	r6, r0
    1e82:	000f      	movs	r7, r1
    1e84:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1e86:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1e88:	47a8      	blx	r5
    1e8a:	0002      	movs	r2, r0
    1e8c:	000b      	movs	r3, r1
    1e8e:	0030      	movs	r0, r6
    1e90:	0039      	movs	r1, r7
    1e92:	47a0      	blx	r4
    1e94:	9a06      	ldr	r2, [sp, #24]
    1e96:	9b07      	ldr	r3, [sp, #28]
    1e98:	4e65      	ldr	r6, [pc, #404]	; (2030 <STACK_SIZE+0x30>)
    1e9a:	47b0      	blx	r6
    1e9c:	9012      	str	r0, [sp, #72]	; 0x48
    1e9e:	9113      	str	r1, [sp, #76]	; 0x4c
    1ea0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1ea2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1ea4:	4963      	ldr	r1, [pc, #396]	; (2034 <STACK_SIZE+0x34>)
    1ea6:	618a      	str	r2, [r1, #24]
    1ea8:	61cb      	str	r3, [r1, #28]
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1eaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1eac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1eae:	9800      	ldr	r0, [sp, #0]
    1eb0:	9901      	ldr	r1, [sp, #4]
    1eb2:	47a8      	blx	r5
    1eb4:	9a02      	ldr	r2, [sp, #8]
    1eb6:	9b03      	ldr	r3, [sp, #12]
    1eb8:	0006      	movs	r6, r0
    1eba:	000f      	movs	r7, r1
    1ebc:	9800      	ldr	r0, [sp, #0]
    1ebe:	9901      	ldr	r1, [sp, #4]
    1ec0:	47a8      	blx	r5
    1ec2:	0002      	movs	r2, r0
    1ec4:	000b      	movs	r3, r1
    1ec6:	0030      	movs	r0, r6
    1ec8:	0039      	movs	r1, r7
    1eca:	4e58      	ldr	r6, [pc, #352]	; (202c <STACK_SIZE+0x2c>)
    1ecc:	47b0      	blx	r6
    1ece:	9a06      	ldr	r2, [sp, #24]
    1ed0:	9b07      	ldr	r3, [sp, #28]
    1ed2:	4e57      	ldr	r6, [pc, #348]	; (2030 <STACK_SIZE+0x30>)
    1ed4:	47b0      	blx	r6
    1ed6:	9014      	str	r0, [sp, #80]	; 0x50
    1ed8:	9115      	str	r1, [sp, #84]	; 0x54
    1eda:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1edc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1ede:	4955      	ldr	r1, [pc, #340]	; (2034 <STACK_SIZE+0x34>)
    1ee0:	620a      	str	r2, [r1, #32]
    1ee2:	624b      	str	r3, [r1, #36]	; 0x24
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1ee4:	9800      	ldr	r0, [sp, #0]
    1ee6:	9901      	ldr	r1, [sp, #4]
    1ee8:	9a04      	ldr	r2, [sp, #16]
    1eea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1eec:	47a8      	blx	r5
    1eee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ef2:	0006      	movs	r6, r0
    1ef4:	000f      	movs	r7, r1
    1ef6:	9802      	ldr	r0, [sp, #8]
    1ef8:	9903      	ldr	r1, [sp, #12]
    1efa:	47a8      	blx	r5
    1efc:	0002      	movs	r2, r0
    1efe:	000b      	movs	r3, r1
    1f00:	0030      	movs	r0, r6
    1f02:	0039      	movs	r1, r7
    1f04:	47a0      	blx	r4
    1f06:	9a06      	ldr	r2, [sp, #24]
    1f08:	9b07      	ldr	r3, [sp, #28]
    1f0a:	4e49      	ldr	r6, [pc, #292]	; (2030 <STACK_SIZE+0x30>)
    1f0c:	47b0      	blx	r6
    1f0e:	9036      	str	r0, [sp, #216]	; 0xd8
    1f10:	9137      	str	r1, [sp, #220]	; 0xdc
    1f12:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1f14:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    1f16:	4947      	ldr	r1, [pc, #284]	; (2034 <STACK_SIZE+0x34>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1f18:	4e44      	ldr	r6, [pc, #272]	; (202c <STACK_SIZE+0x2c>)
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1f1a:	628a      	str	r2, [r1, #40]	; 0x28
    1f1c:	62cb      	str	r3, [r1, #44]	; 0x2c
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1f1e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1f20:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1f22:	2000      	movs	r0, #0
    1f24:	4944      	ldr	r1, [pc, #272]	; (2038 <STACK_SIZE+0x38>)
    1f26:	47b0      	blx	r6
    1f28:	0002      	movs	r2, r0
    1f2a:	000b      	movs	r3, r1
    1f2c:	900c      	str	r0, [sp, #48]	; 0x30
    1f2e:	910d      	str	r1, [sp, #52]	; 0x34
    1f30:	9808      	ldr	r0, [sp, #32]
    1f32:	9909      	ldr	r1, [sp, #36]	; 0x24
    1f34:	47a8      	blx	r5
    1f36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1f38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1f3a:	0006      	movs	r6, r0
    1f3c:	000f      	movs	r7, r1
    1f3e:	9800      	ldr	r0, [sp, #0]
    1f40:	9901      	ldr	r1, [sp, #4]
    1f42:	47a8      	blx	r5
    1f44:	0002      	movs	r2, r0
    1f46:	000b      	movs	r3, r1
    1f48:	0030      	movs	r0, r6
    1f4a:	0039      	movs	r1, r7
    1f4c:	4e37      	ldr	r6, [pc, #220]	; (202c <STACK_SIZE+0x2c>)
    1f4e:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1f50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1f54:	9006      	str	r0, [sp, #24]
    1f56:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1f58:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1f5a:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1f5c:	47a8      	blx	r5
    1f5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1f60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1f62:	0006      	movs	r6, r0
    1f64:	000f      	movs	r7, r1
    1f66:	9810      	ldr	r0, [sp, #64]	; 0x40
    1f68:	9911      	ldr	r1, [sp, #68]	; 0x44
    1f6a:	47a8      	blx	r5
    1f6c:	0002      	movs	r2, r0
    1f6e:	000b      	movs	r3, r1
    1f70:	0030      	movs	r0, r6
    1f72:	0039      	movs	r1, r7
    1f74:	4e2d      	ldr	r6, [pc, #180]	; (202c <STACK_SIZE+0x2c>)
    1f76:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1f78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1f7c:	900a      	str	r0, [sp, #40]	; 0x28
    1f7e:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1f80:	9804      	ldr	r0, [sp, #16]
    1f82:	9916      	ldr	r1, [sp, #88]	; 0x58
    1f84:	47a8      	blx	r5
    1f86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1f88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1f8a:	0006      	movs	r6, r0
    1f8c:	000f      	movs	r7, r1
    1f8e:	9802      	ldr	r0, [sp, #8]
    1f90:	9903      	ldr	r1, [sp, #12]
    1f92:	47a8      	blx	r5
    1f94:	0002      	movs	r2, r0
    1f96:	000b      	movs	r3, r1
    1f98:	0030      	movs	r0, r6
    1f9a:	0039      	movs	r1, r7
    1f9c:	4e23      	ldr	r6, [pc, #140]	; (202c <STACK_SIZE+0x2c>)
    1f9e:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1fa0:	2280      	movs	r2, #128	; 0x80
    1fa2:	0612      	lsls	r2, r2, #24
    1fa4:	4694      	mov	ip, r2
    1fa6:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1fa8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1faa:	4463      	add	r3, ip
    1fac:	932e      	str	r3, [sp, #184]	; 0xb8
    1fae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1fb0:	900c      	str	r0, [sp, #48]	; 0x30
    1fb2:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1fb4:	9808      	ldr	r0, [sp, #32]
    1fb6:	9909      	ldr	r1, [sp, #36]	; 0x24
    1fb8:	47a8      	blx	r5
    1fba:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1fbc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1fbe:	47a0      	blx	r4
    1fc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1fc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1fc4:	0006      	movs	r6, r0
    1fc6:	000f      	movs	r7, r1
    1fc8:	9800      	ldr	r0, [sp, #0]
    1fca:	9901      	ldr	r1, [sp, #4]
    1fcc:	47a8      	blx	r5
    1fce:	0002      	movs	r2, r0
    1fd0:	000b      	movs	r3, r1
    1fd2:	0030      	movs	r0, r6
    1fd4:	0039      	movs	r1, r7
    1fd6:	4e15      	ldr	r6, [pc, #84]	; (202c <STACK_SIZE+0x2c>)
    1fd8:	47b0      	blx	r6
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1fda:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1fdc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1fde:	9008      	str	r0, [sp, #32]
    1fe0:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1fe2:	9826      	ldr	r0, [sp, #152]	; 0x98
    1fe4:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1fe6:	47a0      	blx	r4
    1fe8:	4a0c      	ldr	r2, [pc, #48]	; (201c <STACK_SIZE+0x1c>)
    1fea:	0006      	movs	r6, r0
    1fec:	000f      	movs	r7, r1
    1fee:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1ff0:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1ff2:	4b0b      	ldr	r3, [pc, #44]	; (2020 <STACK_SIZE+0x20>)
    1ff4:	47a8      	blx	r5
    1ff6:	0002      	movs	r2, r0
    1ff8:	000b      	movs	r3, r1
    1ffa:	0030      	movs	r0, r6
    1ffc:	0039      	movs	r1, r7
    1ffe:	47a0      	blx	r4
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    2000:	9a18      	ldr	r2, [sp, #96]	; 0x60
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    2002:	0006      	movs	r6, r0
    2004:	000f      	movs	r7, r1
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    2006:	9830      	ldr	r0, [sp, #192]	; 0xc0
    2008:	9931      	ldr	r1, [sp, #196]	; 0xc4
    200a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    200c:	47a8      	blx	r5
    200e:	0002      	movs	r2, r0
    2010:	000b      	movs	r3, r1
    2012:	0030      	movs	r0, r6
    2014:	0039      	movs	r1, r7
    2016:	47a0      	blx	r4
    2018:	e010      	b.n	203c <STACK_SIZE+0x3c>
    201a:	46c0      	nop			; (mov r8, r8)
    201c:	47ae147b 	.word	0x47ae147b
    2020:	3f747ae1 	.word	0x3f747ae1
    2024:	eb1c432d 	.word	0xeb1c432d
    2028:	3eea36e2 	.word	0x3eea36e2
    202c:	0000676d 	.word	0x0000676d
    2030:	00005a05 	.word	0x00005a05
    2034:	20000348 	.word	0x20000348
    2038:	3ff00000 	.word	0x3ff00000
    203c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    203e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2040:	0006      	movs	r6, r0
    2042:	000f      	movs	r7, r1
    2044:	9810      	ldr	r0, [sp, #64]	; 0x40
    2046:	9911      	ldr	r1, [sp, #68]	; 0x44
    2048:	47a8      	blx	r5
    204a:	0002      	movs	r2, r0
    204c:	000b      	movs	r3, r1
    204e:	0030      	movs	r0, r6
    2050:	0039      	movs	r1, r7
    2052:	4e4c      	ldr	r6, [pc, #304]	; (2184 <STACK_SIZE+0x184>)
    2054:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    2056:	9a18      	ldr	r2, [sp, #96]	; 0x60
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    2058:	900e      	str	r0, [sp, #56]	; 0x38
    205a:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    205c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    205e:	9804      	ldr	r0, [sp, #16]
    2060:	9916      	ldr	r1, [sp, #88]	; 0x58
    2062:	47a8      	blx	r5
    2064:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    2066:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    2068:	47a0      	blx	r4
    206a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    206c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    206e:	0006      	movs	r6, r0
    2070:	000f      	movs	r7, r1
    2072:	9802      	ldr	r0, [sp, #8]
    2074:	9903      	ldr	r1, [sp, #12]
    2076:	47a8      	blx	r5
    2078:	4c42      	ldr	r4, [pc, #264]	; (2184 <STACK_SIZE+0x184>)
    207a:	0002      	movs	r2, r0
    207c:	000b      	movs	r3, r1
    207e:	0030      	movs	r0, r6
    2080:	0039      	movs	r1, r7
    2082:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    2084:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    2086:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    2088:	9004      	str	r0, [sp, #16]
    208a:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    208c:	2000      	movs	r0, #0
    208e:	493e      	ldr	r1, [pc, #248]	; (2188 <STACK_SIZE+0x188>)
    2090:	47a0      	blx	r4
    2092:	0002      	movs	r2, r0
    2094:	000b      	movs	r3, r1
    2096:	9012      	str	r0, [sp, #72]	; 0x48
    2098:	9113      	str	r1, [sp, #76]	; 0x4c
    209a:	9800      	ldr	r0, [sp, #0]
    209c:	9901      	ldr	r1, [sp, #4]
    209e:	47a8      	blx	r5
    20a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    20a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    20a4:	0006      	movs	r6, r0
    20a6:	000f      	movs	r7, r1
    20a8:	9800      	ldr	r0, [sp, #0]
    20aa:	9901      	ldr	r1, [sp, #4]
    20ac:	47a8      	blx	r5
    20ae:	0002      	movs	r2, r0
    20b0:	000b      	movs	r3, r1
    20b2:	0030      	movs	r0, r6
    20b4:	0039      	movs	r1, r7
    20b6:	47a0      	blx	r4
    20b8:	9000      	str	r0, [sp, #0]
    20ba:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    20bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    20be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    20c0:	9810      	ldr	r0, [sp, #64]	; 0x40
    20c2:	9911      	ldr	r1, [sp, #68]	; 0x44
    20c4:	47a8      	blx	r5
    20c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    20c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    20ca:	0006      	movs	r6, r0
    20cc:	000f      	movs	r7, r1
    20ce:	9810      	ldr	r0, [sp, #64]	; 0x40
    20d0:	9911      	ldr	r1, [sp, #68]	; 0x44
    20d2:	47a8      	blx	r5
    20d4:	0002      	movs	r2, r0
    20d6:	000b      	movs	r3, r1
    20d8:	0030      	movs	r0, r6
    20da:	0039      	movs	r1, r7
    20dc:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    20de:	9a12      	ldr	r2, [sp, #72]	; 0x48
    20e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    20e2:	9010      	str	r0, [sp, #64]	; 0x40
    20e4:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    20e6:	9802      	ldr	r0, [sp, #8]
    20e8:	9903      	ldr	r1, [sp, #12]
    20ea:	47a8      	blx	r5
    20ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
    20ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
    20f0:	000f      	movs	r7, r1
    20f2:	0006      	movs	r6, r0
    20f4:	9802      	ldr	r0, [sp, #8]
    20f6:	9903      	ldr	r1, [sp, #12]
    20f8:	47a8      	blx	r5
    20fa:	000b      	movs	r3, r1
    20fc:	0002      	movs	r2, r0
    20fe:	0039      	movs	r1, r7
    2100:	0030      	movs	r0, r6
    2102:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    2104:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    2106:	2510      	movs	r5, #16
    2108:	3301      	adds	r3, #1
    210a:	9338      	str	r3, [sp, #224]	; 0xe0
        notdone = 0;
    210c:	2300      	movs	r3, #0
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    210e:	9002      	str	r0, [sp, #8]
    2110:	9103      	str	r1, [sp, #12]
        notdone = 0;
    2112:	001f      	movs	r7, r3
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    2114:	4b1d      	ldr	r3, [pc, #116]	; (218c <STACK_SIZE+0x18c>)
    2116:	9426      	str	r4, [sp, #152]	; 0x98
    2118:	9318      	str	r3, [sp, #96]	; 0x60
    211a:	002c      	movs	r4, r5
    211c:	3c10      	subs	r4, #16
    211e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    2120:	9e26      	ldr	r6, [sp, #152]	; 0x98
    2122:	18e3      	adds	r3, r4, r3
    2124:	681a      	ldr	r2, [r3, #0]
    2126:	685b      	ldr	r3, [r3, #4]
    2128:	9212      	str	r2, [sp, #72]	; 0x48
    212a:	9313      	str	r3, [sp, #76]	; 0x4c
    212c:	9812      	ldr	r0, [sp, #72]	; 0x48
    212e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    2130:	aa40      	add	r2, sp, #256	; 0x100
    2132:	18a3      	adds	r3, r4, r2
    2134:	9316      	str	r3, [sp, #88]	; 0x58
    2136:	681a      	ldr	r2, [r3, #0]
    2138:	685b      	ldr	r3, [r3, #4]
    213a:	9214      	str	r2, [sp, #80]	; 0x50
    213c:	9315      	str	r3, [sp, #84]	; 0x54
    213e:	47b0      	blx	r6
    2140:	9a14      	ldr	r2, [sp, #80]	; 0x50
    2142:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2144:	4e12      	ldr	r6, [pc, #72]	; (2190 <STACK_SIZE+0x190>)
    2146:	47b0      	blx	r6
    2148:	4b12      	ldr	r3, [pc, #72]	; (2194 <STACK_SIZE+0x194>)
    214a:	4a13      	ldr	r2, [pc, #76]	; (2198 <STACK_SIZE+0x198>)
    214c:	4e13      	ldr	r6, [pc, #76]	; (219c <STACK_SIZE+0x19c>)
    214e:	47b0      	blx	r6
                    notdone++;
    2150:	1e43      	subs	r3, r0, #1
    2152:	4198      	sbcs	r0, r3
                lastkgain[i][j] = kgain[i][j];
    2154:	9916      	ldr	r1, [sp, #88]	; 0x58
                    notdone++;
    2156:	183b      	adds	r3, r7, r0
    2158:	3408      	adds	r4, #8
    215a:	001f      	movs	r7, r3
                lastkgain[i][j] = kgain[i][j];
    215c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    215e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2160:	600a      	str	r2, [r1, #0]
    2162:	604b      	str	r3, [r1, #4]
            for( j = 0; j <= 1; j++) {
    2164:	42a5      	cmp	r5, r4
    2166:	d1da      	bne.n	211e <STACK_SIZE+0x11e>
    2168:	3510      	adds	r5, #16
        for( i = 0; i <= 2; i++)
    216a:	2d40      	cmp	r5, #64	; 0x40
    216c:	d1d5      	bne.n	211a <STACK_SIZE+0x11a>
            }
        if( notdone || k < 100)
    216e:	2f00      	cmp	r7, #0
    2170:	d001      	beq.n	2176 <STACK_SIZE+0x176>
    2172:	f7ff fc32 	bl	19da <computeKalmanGains+0xde>
    2176:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    2178:	2b63      	cmp	r3, #99	; 0x63
    217a:	dc01      	bgt.n	2180 <STACK_SIZE+0x180>
    217c:	f7ff fc2d 	bl	19da <computeKalmanGains+0xde>
            continue;
        else
            break;
    }
}
    2180:	b04d      	add	sp, #308	; 0x134
    2182:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2184:	0000676d 	.word	0x0000676d
    2188:	3ff00000 	.word	0x3ff00000
    218c:	20000348 	.word	0x20000348
    2190:	00005a05 	.word	0x00005a05
    2194:	3ee4f8b5 	.word	0x3ee4f8b5
    2198:	88e368f1 	.word	0x88e368f1
    219c:	000050ad 	.word	0x000050ad

000021a0 <computeKalmanBaroOnlyGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    baro_phi[0][1]    = dt;
    21a0:	4bd7      	ldr	r3, [pc, #860]	; (2500 <computeKalmanBaroOnlyGains+0x360>)
    21a2:	48d8      	ldr	r0, [pc, #864]	; (2504 <computeKalmanBaroOnlyGains+0x364>)
    baro_phi[1][2]    = dt;
    21a4:	001a      	movs	r2, r3
    baro_phi[0][1]    = dt;
    21a6:	49d8      	ldr	r1, [pc, #864]	; (2508 <computeKalmanBaroOnlyGains+0x368>)
    baro_phi[1][2]    = dt;
    21a8:	3288      	adds	r2, #136	; 0x88
void computeKalmanBaroOnlyGains() {
    21aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    baro_phi[1][2]    = dt;
    21ac:	6010      	str	r0, [r2, #0]
    21ae:	6051      	str	r1, [r2, #4]
    baro_phi[0][2]    = dt*dt/2.0;
    21b0:	2200      	movs	r2, #0
    baro_phi[0][1]    = dt;
    21b2:	6698      	str	r0, [r3, #104]	; 0x68
    21b4:	66d9      	str	r1, [r3, #108]	; 0x6c
    baro_phi[0][2]    = dt*dt/2.0;
    21b6:	48d5      	ldr	r0, [pc, #852]	; (250c <computeKalmanBaroOnlyGains+0x36c>)
    21b8:	49d5      	ldr	r1, [pc, #852]	; (2510 <computeKalmanBaroOnlyGains+0x370>)
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
        lastkgain[i] = .001;
    21ba:	4cd6      	ldr	r4, [pc, #856]	; (2514 <computeKalmanBaroOnlyGains+0x374>)
    baro_phi[0][2]    = dt*dt/2.0;
    21bc:	6718      	str	r0, [r3, #112]	; 0x70
    21be:	6759      	str	r1, [r3, #116]	; 0x74
        lastkgain[i] = .001;
    21c0:	4dd5      	ldr	r5, [pc, #852]	; (2518 <computeKalmanBaroOnlyGains+0x378>)
        baro_kgain[i] = 1.0;
    21c2:	4fd6      	ldr	r7, [pc, #856]	; (251c <computeKalmanBaroOnlyGains+0x37c>)
void computeKalmanBaroOnlyGains() {
    21c4:	b0c5      	sub	sp, #276	; 0x114
        baro_kgain[i] = 1.0;
    21c6:	2000      	movs	r0, #0
        lastkgain[i] = .001;
    21c8:	a93e      	add	r1, sp, #248	; 0xf8
    21ca:	1856      	adds	r6, r2, r1
        baro_kgain[i] = 1.0;
    21cc:	49d4      	ldr	r1, [pc, #848]	; (2520 <computeKalmanBaroOnlyGains+0x380>)
        lastkgain[i] = .001;
    21ce:	6034      	str	r4, [r6, #0]
    21d0:	6075      	str	r5, [r6, #4]
        baro_kgain[i] = 1.0;
    21d2:	19d6      	adds	r6, r2, r7
    21d4:	3208      	adds	r2, #8
    21d6:	6030      	str	r0, [r6, #0]
    21d8:	6071      	str	r1, [r6, #4]
    for( i = 0; i <= 2; i++) {
    21da:	2a18      	cmp	r2, #24
    21dc:	d1f3      	bne.n	21c6 <computeKalmanBaroOnlyGains+0x26>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    21de:	6819      	ldr	r1, [r3, #0]
    21e0:	685a      	ldr	r2, [r3, #4]
    21e2:	9108      	str	r1, [sp, #32]
    21e4:	9209      	str	r2, [sp, #36]	; 0x24
    21e6:	6899      	ldr	r1, [r3, #8]
    21e8:	68da      	ldr	r2, [r3, #12]
    21ea:	910a      	str	r1, [sp, #40]	; 0x28
    21ec:	920b      	str	r2, [sp, #44]	; 0x2c
    21ee:	6919      	ldr	r1, [r3, #16]
    21f0:	695a      	ldr	r2, [r3, #20]
    21f2:	910c      	str	r1, [sp, #48]	; 0x30
    21f4:	920d      	str	r2, [sp, #52]	; 0x34
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    21f6:	6999      	ldr	r1, [r3, #24]
    21f8:	69da      	ldr	r2, [r3, #28]
    21fa:	910e      	str	r1, [sp, #56]	; 0x38
    21fc:	920f      	str	r2, [sp, #60]	; 0x3c
    21fe:	6a19      	ldr	r1, [r3, #32]
    2200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2202:	9110      	str	r1, [sp, #64]	; 0x40
    2204:	9211      	str	r2, [sp, #68]	; 0x44
    2206:	6a99      	ldr	r1, [r3, #40]	; 0x28
    2208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    220a:	9112      	str	r1, [sp, #72]	; 0x48
    220c:	9213      	str	r2, [sp, #76]	; 0x4c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    220e:	6b19      	ldr	r1, [r3, #48]	; 0x30
    2210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2212:	9114      	str	r1, [sp, #80]	; 0x50
    2214:	9215      	str	r2, [sp, #84]	; 0x54
    2216:	6b99      	ldr	r1, [r3, #56]	; 0x38
    2218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    221a:	9116      	str	r1, [sp, #88]	; 0x58
    221c:	9217      	str	r2, [sp, #92]	; 0x5c
    221e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    2220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    2222:	9118      	str	r1, [sp, #96]	; 0x60
    2224:	9219      	str	r2, [sp, #100]	; 0x64
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[0][0] = pestp[0][0] + model_variance;
    2226:	6c99      	ldr	r1, [r3, #72]	; 0x48
    2228:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);
    222a:	6d5c      	ldr	r4, [r3, #84]	; 0x54
    222c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    222e:	933c      	str	r3, [sp, #240]	; 0xf0
    2230:	943d      	str	r4, [sp, #244]	; 0xf4
    2232:	2300      	movs	r3, #0
    2234:	4cbb      	ldr	r4, [pc, #748]	; (2524 <computeKalmanBaroOnlyGains+0x384>)
        pestp[0][0] = pestp[0][0] + model_variance;
    2236:	913a      	str	r1, [sp, #232]	; 0xe8
    2238:	923b      	str	r2, [sp, #236]	; 0xec
        det = (pestp[0][0]+altitude_variance);
    223a:	9304      	str	r3, [sp, #16]
    223c:	9405      	str	r4, [sp, #20]
    223e:	2300      	movs	r3, #0
    2240:	2400      	movs	r4, #0
    2242:	9302      	str	r3, [sp, #8]
    2244:	9403      	str	r4, [sp, #12]
    2246:	9300      	str	r3, [sp, #0]
    2248:	9401      	str	r4, [sp, #4]
    224a:	9306      	str	r3, [sp, #24]
    224c:	9407      	str	r4, [sp, #28]
    224e:	2300      	movs	r3, #0
    2250:	4cb4      	ldr	r4, [pc, #720]	; (2524 <computeKalmanBaroOnlyGains+0x384>)
    2252:	9322      	str	r3, [sp, #136]	; 0x88
    2254:	9423      	str	r4, [sp, #140]	; 0x8c
    2256:	2300      	movs	r3, #0
    2258:	2400      	movs	r4, #0
    225a:	9320      	str	r3, [sp, #128]	; 0x80
    225c:	9421      	str	r4, [sp, #132]	; 0x84
    225e:	931e      	str	r3, [sp, #120]	; 0x78
    2260:	941f      	str	r4, [sp, #124]	; 0x7c
    2262:	931c      	str	r3, [sp, #112]	; 0x70
    2264:	941d      	str	r4, [sp, #116]	; 0x74
    2266:	2480      	movs	r4, #128	; 0x80
    2268:	2300      	movs	r3, #0
    226a:	05e4      	lsls	r4, r4, #23
    226c:	931a      	str	r3, [sp, #104]	; 0x68
    226e:	941b      	str	r4, [sp, #108]	; 0x6c
    2270:	2300      	movs	r3, #0
    2272:	9327      	str	r3, [sp, #156]	; 0x9c
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    2274:	4cac      	ldr	r4, [pc, #688]	; (2528 <computeKalmanBaroOnlyGains+0x388>)
    2276:	9a08      	ldr	r2, [sp, #32]
    2278:	9b09      	ldr	r3, [sp, #36]	; 0x24
    227a:	981a      	ldr	r0, [sp, #104]	; 0x68
    227c:	991b      	ldr	r1, [sp, #108]	; 0x6c
    227e:	47a0      	blx	r4
    2280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2284:	0006      	movs	r6, r0
    2286:	000f      	movs	r7, r1
    2288:	9820      	ldr	r0, [sp, #128]	; 0x80
    228a:	9921      	ldr	r1, [sp, #132]	; 0x84
    228c:	47a0      	blx	r4
    228e:	4da7      	ldr	r5, [pc, #668]	; (252c <computeKalmanBaroOnlyGains+0x38c>)
    2290:	0002      	movs	r2, r0
    2292:	000b      	movs	r3, r1
    2294:	0030      	movs	r0, r6
    2296:	0039      	movs	r1, r7
    2298:	47a8      	blx	r5
    229a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    229c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    229e:	0006      	movs	r6, r0
    22a0:	000f      	movs	r7, r1
    22a2:	9800      	ldr	r0, [sp, #0]
    22a4:	9901      	ldr	r1, [sp, #4]
    22a6:	47a0      	blx	r4
    22a8:	0002      	movs	r2, r0
    22aa:	000b      	movs	r3, r1
    22ac:	0030      	movs	r0, r6
    22ae:	0039      	movs	r1, r7
    22b0:	47a8      	blx	r5
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    22b2:	9a08      	ldr	r2, [sp, #32]
    22b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    22b6:	9024      	str	r0, [sp, #144]	; 0x90
    22b8:	9125      	str	r1, [sp, #148]	; 0x94
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    22ba:	981c      	ldr	r0, [sp, #112]	; 0x70
    22bc:	991d      	ldr	r1, [sp, #116]	; 0x74
    22be:	47a0      	blx	r4
    22c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    22c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    22c4:	0006      	movs	r6, r0
    22c6:	000f      	movs	r7, r1
    22c8:	9822      	ldr	r0, [sp, #136]	; 0x88
    22ca:	9923      	ldr	r1, [sp, #140]	; 0x8c
    22cc:	47a0      	blx	r4
    22ce:	0002      	movs	r2, r0
    22d0:	000b      	movs	r3, r1
    22d2:	0030      	movs	r0, r6
    22d4:	0039      	movs	r1, r7
    22d6:	47a8      	blx	r5
    22d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    22da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    22dc:	0006      	movs	r6, r0
    22de:	000f      	movs	r7, r1
    22e0:	9802      	ldr	r0, [sp, #8]
    22e2:	9903      	ldr	r1, [sp, #12]
    22e4:	47a0      	blx	r4
    22e6:	0002      	movs	r2, r0
    22e8:	000b      	movs	r3, r1
    22ea:	0030      	movs	r0, r6
    22ec:	0039      	movs	r1, r7
    22ee:	47a8      	blx	r5
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    22f0:	9a08      	ldr	r2, [sp, #32]
    22f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    22f4:	9028      	str	r0, [sp, #160]	; 0xa0
    22f6:	9129      	str	r1, [sp, #164]	; 0xa4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    22f8:	981e      	ldr	r0, [sp, #120]	; 0x78
    22fa:	991f      	ldr	r1, [sp, #124]	; 0x7c
    22fc:	47a0      	blx	r4
    22fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2302:	0006      	movs	r6, r0
    2304:	000f      	movs	r7, r1
    2306:	9806      	ldr	r0, [sp, #24]
    2308:	9907      	ldr	r1, [sp, #28]
    230a:	47a0      	blx	r4
    230c:	0002      	movs	r2, r0
    230e:	000b      	movs	r3, r1
    2310:	0030      	movs	r0, r6
    2312:	0039      	movs	r1, r7
    2314:	47a8      	blx	r5
    2316:	9a04      	ldr	r2, [sp, #16]
    2318:	9b05      	ldr	r3, [sp, #20]
    231a:	0006      	movs	r6, r0
    231c:	000f      	movs	r7, r1
    231e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2320:	990d      	ldr	r1, [sp, #52]	; 0x34
    2322:	47a0      	blx	r4
    2324:	0002      	movs	r2, r0
    2326:	000b      	movs	r3, r1
    2328:	0030      	movs	r0, r6
    232a:	0039      	movs	r1, r7
    232c:	47a8      	blx	r5
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    232e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    2332:	902a      	str	r0, [sp, #168]	; 0xa8
    2334:	912b      	str	r1, [sp, #172]	; 0xac
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    2336:	981a      	ldr	r0, [sp, #104]	; 0x68
    2338:	991b      	ldr	r1, [sp, #108]	; 0x6c
    233a:	47a0      	blx	r4
    233c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    233e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2340:	0006      	movs	r6, r0
    2342:	000f      	movs	r7, r1
    2344:	9820      	ldr	r0, [sp, #128]	; 0x80
    2346:	9921      	ldr	r1, [sp, #132]	; 0x84
    2348:	47a0      	blx	r4
    234a:	0002      	movs	r2, r0
    234c:	000b      	movs	r3, r1
    234e:	0030      	movs	r0, r6
    2350:	0039      	movs	r1, r7
    2352:	47a8      	blx	r5
    2354:	9a12      	ldr	r2, [sp, #72]	; 0x48
    2356:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2358:	0006      	movs	r6, r0
    235a:	000f      	movs	r7, r1
    235c:	9800      	ldr	r0, [sp, #0]
    235e:	9901      	ldr	r1, [sp, #4]
    2360:	47a0      	blx	r4
    2362:	0002      	movs	r2, r0
    2364:	000b      	movs	r3, r1
    2366:	0030      	movs	r0, r6
    2368:	0039      	movs	r1, r7
    236a:	47a8      	blx	r5
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    236c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    236e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    2370:	9034      	str	r0, [sp, #208]	; 0xd0
    2372:	9135      	str	r1, [sp, #212]	; 0xd4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    2374:	981c      	ldr	r0, [sp, #112]	; 0x70
    2376:	991d      	ldr	r1, [sp, #116]	; 0x74
    2378:	47a0      	blx	r4
    237a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    237c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    237e:	0006      	movs	r6, r0
    2380:	000f      	movs	r7, r1
    2382:	9822      	ldr	r0, [sp, #136]	; 0x88
    2384:	9923      	ldr	r1, [sp, #140]	; 0x8c
    2386:	47a0      	blx	r4
    2388:	0002      	movs	r2, r0
    238a:	000b      	movs	r3, r1
    238c:	0030      	movs	r0, r6
    238e:	0039      	movs	r1, r7
    2390:	47a8      	blx	r5
    2392:	9a12      	ldr	r2, [sp, #72]	; 0x48
    2394:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2396:	0006      	movs	r6, r0
    2398:	000f      	movs	r7, r1
    239a:	9802      	ldr	r0, [sp, #8]
    239c:	9903      	ldr	r1, [sp, #12]
    239e:	47a0      	blx	r4
    23a0:	0002      	movs	r2, r0
    23a2:	000b      	movs	r3, r1
    23a4:	0030      	movs	r0, r6
    23a6:	0039      	movs	r1, r7
    23a8:	47a8      	blx	r5
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    23aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    23ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    23ae:	902c      	str	r0, [sp, #176]	; 0xb0
    23b0:	912d      	str	r1, [sp, #180]	; 0xb4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    23b2:	981e      	ldr	r0, [sp, #120]	; 0x78
    23b4:	991f      	ldr	r1, [sp, #124]	; 0x7c
    23b6:	47a0      	blx	r4
    23b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    23ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    23bc:	0006      	movs	r6, r0
    23be:	000f      	movs	r7, r1
    23c0:	9806      	ldr	r0, [sp, #24]
    23c2:	9907      	ldr	r1, [sp, #28]
    23c4:	47a0      	blx	r4
    23c6:	0002      	movs	r2, r0
    23c8:	000b      	movs	r3, r1
    23ca:	0030      	movs	r0, r6
    23cc:	0039      	movs	r1, r7
    23ce:	47a8      	blx	r5
    23d0:	9a04      	ldr	r2, [sp, #16]
    23d2:	9b05      	ldr	r3, [sp, #20]
    23d4:	0006      	movs	r6, r0
    23d6:	000f      	movs	r7, r1
    23d8:	9812      	ldr	r0, [sp, #72]	; 0x48
    23da:	9913      	ldr	r1, [sp, #76]	; 0x4c
    23dc:	47a0      	blx	r4
    23de:	0002      	movs	r2, r0
    23e0:	000b      	movs	r3, r1
    23e2:	0030      	movs	r0, r6
    23e4:	0039      	movs	r1, r7
    23e6:	47a8      	blx	r5
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    23e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    23ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    23ec:	902e      	str	r0, [sp, #184]	; 0xb8
    23ee:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    23f0:	981a      	ldr	r0, [sp, #104]	; 0x68
    23f2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    23f4:	47a0      	blx	r4
    23f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    23f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    23fa:	0006      	movs	r6, r0
    23fc:	000f      	movs	r7, r1
    23fe:	9820      	ldr	r0, [sp, #128]	; 0x80
    2400:	9921      	ldr	r1, [sp, #132]	; 0x84
    2402:	47a0      	blx	r4
    2404:	0002      	movs	r2, r0
    2406:	000b      	movs	r3, r1
    2408:	0030      	movs	r0, r6
    240a:	0039      	movs	r1, r7
    240c:	47a8      	blx	r5
    240e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    2410:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2412:	0006      	movs	r6, r0
    2414:	000f      	movs	r7, r1
    2416:	9800      	ldr	r0, [sp, #0]
    2418:	9901      	ldr	r1, [sp, #4]
    241a:	47a0      	blx	r4
    241c:	0002      	movs	r2, r0
    241e:	000b      	movs	r3, r1
    2420:	0030      	movs	r0, r6
    2422:	0039      	movs	r1, r7
    2424:	47a8      	blx	r5
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    2426:	9a14      	ldr	r2, [sp, #80]	; 0x50
    2428:	9b15      	ldr	r3, [sp, #84]	; 0x54
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    242a:	9000      	str	r0, [sp, #0]
    242c:	9101      	str	r1, [sp, #4]
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    242e:	981c      	ldr	r0, [sp, #112]	; 0x70
    2430:	991d      	ldr	r1, [sp, #116]	; 0x74
    2432:	47a0      	blx	r4
    2434:	9a16      	ldr	r2, [sp, #88]	; 0x58
    2436:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    2438:	0006      	movs	r6, r0
    243a:	000f      	movs	r7, r1
    243c:	9822      	ldr	r0, [sp, #136]	; 0x88
    243e:	9923      	ldr	r1, [sp, #140]	; 0x8c
    2440:	47a0      	blx	r4
    2442:	0002      	movs	r2, r0
    2444:	000b      	movs	r3, r1
    2446:	0030      	movs	r0, r6
    2448:	0039      	movs	r1, r7
    244a:	47a8      	blx	r5
    244c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    244e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    2450:	0006      	movs	r6, r0
    2452:	000f      	movs	r7, r1
    2454:	9802      	ldr	r0, [sp, #8]
    2456:	9903      	ldr	r1, [sp, #12]
    2458:	47a0      	blx	r4
    245a:	0002      	movs	r2, r0
    245c:	000b      	movs	r3, r1
    245e:	0030      	movs	r0, r6
    2460:	0039      	movs	r1, r7
    2462:	47a8      	blx	r5
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    2464:	9a14      	ldr	r2, [sp, #80]	; 0x50
    2466:	9b15      	ldr	r3, [sp, #84]	; 0x54
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    2468:	9030      	str	r0, [sp, #192]	; 0xc0
    246a:	9131      	str	r1, [sp, #196]	; 0xc4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    246c:	981e      	ldr	r0, [sp, #120]	; 0x78
    246e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    2470:	47a0      	blx	r4
    2472:	9a16      	ldr	r2, [sp, #88]	; 0x58
    2474:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    2476:	0006      	movs	r6, r0
    2478:	000f      	movs	r7, r1
    247a:	9806      	ldr	r0, [sp, #24]
    247c:	9907      	ldr	r1, [sp, #28]
    247e:	47a0      	blx	r4
    2480:	0002      	movs	r2, r0
    2482:	000b      	movs	r3, r1
    2484:	0030      	movs	r0, r6
    2486:	0039      	movs	r1, r7
    2488:	47a8      	blx	r5
    248a:	9a04      	ldr	r2, [sp, #16]
    248c:	9b05      	ldr	r3, [sp, #20]
    248e:	0006      	movs	r6, r0
    2490:	000f      	movs	r7, r1
    2492:	9818      	ldr	r0, [sp, #96]	; 0x60
    2494:	9919      	ldr	r1, [sp, #100]	; 0x64
    2496:	47a0      	blx	r4
    2498:	0002      	movs	r2, r0
    249a:	000b      	movs	r3, r1
    249c:	0030      	movs	r0, r6
    249e:	0039      	movs	r1, r7
    24a0:	47a8      	blx	r5
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    24a2:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    24a4:	9032      	str	r0, [sp, #200]	; 0xc8
    24a6:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    24a8:	9824      	ldr	r0, [sp, #144]	; 0x90
    24aa:	9925      	ldr	r1, [sp, #148]	; 0x94
    24ac:	2300      	movs	r3, #0
    24ae:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    24b0:	4a14      	ldr	r2, [pc, #80]	; (2504 <computeKalmanBaroOnlyGains+0x364>)
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    24b2:	9036      	str	r0, [sp, #216]	; 0xd8
    24b4:	9137      	str	r1, [sp, #220]	; 0xdc
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    24b6:	982c      	ldr	r0, [sp, #176]	; 0xb0
    24b8:	992d      	ldr	r1, [sp, #180]	; 0xb4
    24ba:	4b13      	ldr	r3, [pc, #76]	; (2508 <computeKalmanBaroOnlyGains+0x368>)
    24bc:	47a0      	blx	r4
    24be:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    24c0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    24c2:	47a8      	blx	r5
    24c4:	4a11      	ldr	r2, [pc, #68]	; (250c <computeKalmanBaroOnlyGains+0x36c>)
    24c6:	0006      	movs	r6, r0
    24c8:	000f      	movs	r7, r1
    24ca:	982e      	ldr	r0, [sp, #184]	; 0xb8
    24cc:	992f      	ldr	r1, [sp, #188]	; 0xbc
    24ce:	4b10      	ldr	r3, [pc, #64]	; (2510 <computeKalmanBaroOnlyGains+0x370>)
    24d0:	47a0      	blx	r4
    24d2:	0002      	movs	r2, r0
    24d4:	000b      	movs	r3, r1
    24d6:	0030      	movs	r0, r6
    24d8:	0039      	movs	r1, r7
    24da:	47a8      	blx	r5
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    24dc:	2200      	movs	r2, #0
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    24de:	9002      	str	r0, [sp, #8]
    24e0:	9103      	str	r1, [sp, #12]
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    24e2:	9834      	ldr	r0, [sp, #208]	; 0xd0
    24e4:	9935      	ldr	r1, [sp, #212]	; 0xd4
    24e6:	2300      	movs	r3, #0
    24e8:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    24ea:	4a06      	ldr	r2, [pc, #24]	; (2504 <computeKalmanBaroOnlyGains+0x364>)
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    24ec:	9034      	str	r0, [sp, #208]	; 0xd0
    24ee:	9135      	str	r1, [sp, #212]	; 0xd4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    24f0:	9830      	ldr	r0, [sp, #192]	; 0xc0
    24f2:	9931      	ldr	r1, [sp, #196]	; 0xc4
    24f4:	4b04      	ldr	r3, [pc, #16]	; (2508 <computeKalmanBaroOnlyGains+0x368>)
    24f6:	47a0      	blx	r4
    24f8:	9a00      	ldr	r2, [sp, #0]
    24fa:	9b01      	ldr	r3, [sp, #4]
    24fc:	47a8      	blx	r5
    24fe:	e017      	b.n	2530 <computeKalmanBaroOnlyGains+0x390>
    2500:	20000010 	.word	0x20000010
    2504:	47ae147b 	.word	0x47ae147b
    2508:	3f747ae1 	.word	0x3f747ae1
    250c:	eb1c432d 	.word	0xeb1c432d
    2510:	3eea36e2 	.word	0x3eea36e2
    2514:	d2f1a9fc 	.word	0xd2f1a9fc
    2518:	3f50624d 	.word	0x3f50624d
    251c:	20000310 	.word	0x20000310
    2520:	3ff00000 	.word	0x3ff00000
    2524:	40220000 	.word	0x40220000
    2528:	0000626d 	.word	0x0000626d
    252c:	000053e5 	.word	0x000053e5
    2530:	4ad6      	ldr	r2, [pc, #856]	; (288c <computeKalmanBaroOnlyGains+0x6ec>)
    2532:	0006      	movs	r6, r0
    2534:	000f      	movs	r7, r1
    2536:	9832      	ldr	r0, [sp, #200]	; 0xc8
    2538:	9933      	ldr	r1, [sp, #204]	; 0xcc
    253a:	4bd5      	ldr	r3, [pc, #852]	; (2890 <computeKalmanBaroOnlyGains+0x6f0>)
    253c:	47a0      	blx	r4
    253e:	0002      	movs	r2, r0
    2540:	000b      	movs	r3, r1
    2542:	0030      	movs	r0, r6
    2544:	0039      	movs	r1, r7
    2546:	47a8      	blx	r5
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    2548:	2200      	movs	r2, #0
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    254a:	9004      	str	r0, [sp, #16]
    254c:	9105      	str	r1, [sp, #20]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    254e:	9800      	ldr	r0, [sp, #0]
    2550:	9901      	ldr	r1, [sp, #4]
    2552:	2300      	movs	r3, #0
    2554:	47a0      	blx	r4
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    2556:	4acf      	ldr	r2, [pc, #828]	; (2894 <computeKalmanBaroOnlyGains+0x6f4>)
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    2558:	9038      	str	r0, [sp, #224]	; 0xe0
    255a:	9139      	str	r1, [sp, #228]	; 0xe4
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    255c:	9828      	ldr	r0, [sp, #160]	; 0xa0
    255e:	9929      	ldr	r1, [sp, #164]	; 0xa4
    2560:	4bcd      	ldr	r3, [pc, #820]	; (2898 <computeKalmanBaroOnlyGains+0x6f8>)
    2562:	47a0      	blx	r4
    2564:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2566:	9b25      	ldr	r3, [sp, #148]	; 0x94
    2568:	47a8      	blx	r5
    256a:	4ac8      	ldr	r2, [pc, #800]	; (288c <computeKalmanBaroOnlyGains+0x6ec>)
    256c:	0006      	movs	r6, r0
    256e:	000f      	movs	r7, r1
    2570:	982a      	ldr	r0, [sp, #168]	; 0xa8
    2572:	992b      	ldr	r1, [sp, #172]	; 0xac
    2574:	4bc6      	ldr	r3, [pc, #792]	; (2890 <computeKalmanBaroOnlyGains+0x6f0>)
    2576:	47a0      	blx	r4
    2578:	0002      	movs	r2, r0
    257a:	000b      	movs	r3, r1
    257c:	0030      	movs	r0, r6
    257e:	0039      	movs	r1, r7
    2580:	47a8      	blx	r5
        pestp[0][0] = pestp[0][0] + model_variance;
    2582:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    2584:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    2586:	47a8      	blx	r5
        det = (pestp[0][0]+altitude_variance);
    2588:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    258a:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[0][0] = pestp[0][0] + model_variance;
    258c:	9000      	str	r0, [sp, #0]
    258e:	9101      	str	r1, [sp, #4]
        det = (pestp[0][0]+altitude_variance);
    2590:	47a8      	blx	r5

        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
    2592:	9a00      	ldr	r2, [sp, #0]
    2594:	9b01      	ldr	r3, [sp, #4]
        det = (pestp[0][0]+altitude_variance);
    2596:	901a      	str	r0, [sp, #104]	; 0x68
    2598:	911b      	str	r1, [sp, #108]	; 0x6c
        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
    259a:	9808      	ldr	r0, [sp, #32]
    259c:	9909      	ldr	r1, [sp, #36]	; 0x24
    259e:	47a0      	blx	r4
                         phi[0][1] * pestp[1][0] +
    25a0:	9a02      	ldr	r2, [sp, #8]
    25a2:	9b03      	ldr	r3, [sp, #12]
        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
    25a4:	0006      	movs	r6, r0
    25a6:	000f      	movs	r7, r1
                         phi[0][1] * pestp[1][0] +
    25a8:	980a      	ldr	r0, [sp, #40]	; 0x28
    25aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
    25ac:	47a0      	blx	r4
    25ae:	0002      	movs	r2, r0
    25b0:	000b      	movs	r3, r1
        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
    25b2:	0030      	movs	r0, r6
    25b4:	0039      	movs	r1, r7
    25b6:	47a8      	blx	r5
                         phi[0][2] * pestp[2][0] )/ det;
    25b8:	9a04      	ldr	r2, [sp, #16]
    25ba:	9b05      	ldr	r3, [sp, #20]
        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
    25bc:	0006      	movs	r6, r0
    25be:	000f      	movs	r7, r1
                         phi[0][2] * pestp[2][0] )/ det;
    25c0:	980c      	ldr	r0, [sp, #48]	; 0x30
    25c2:	990d      	ldr	r1, [sp, #52]	; 0x34
    25c4:	47a0      	blx	r4
    25c6:	0002      	movs	r2, r0
    25c8:	000b      	movs	r3, r1
                         phi[0][1] * pestp[1][0] +
    25ca:	0030      	movs	r0, r6
    25cc:	0039      	movs	r1, r7
    25ce:	47a8      	blx	r5
                         phi[0][2] * pestp[2][0] )/ det;
    25d0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    25d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    25d4:	4eb1      	ldr	r6, [pc, #708]	; (289c <computeKalmanBaroOnlyGains+0x6fc>)
    25d6:	47b0      	blx	r6
    25d8:	901c      	str	r0, [sp, #112]	; 0x70
    25da:	911d      	str	r1, [sp, #116]	; 0x74
        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
    25dc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    25de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    25e0:	49af      	ldr	r1, [pc, #700]	; (28a0 <computeKalmanBaroOnlyGains+0x700>)
    25e2:	600a      	str	r2, [r1, #0]
    25e4:	604b      	str	r3, [r1, #4]
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
    25e6:	9a00      	ldr	r2, [sp, #0]
    25e8:	9b01      	ldr	r3, [sp, #4]
    25ea:	980e      	ldr	r0, [sp, #56]	; 0x38
    25ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
    25ee:	47a0      	blx	r4
                         phi[1][1] * pestp[1][0] +
    25f0:	9a02      	ldr	r2, [sp, #8]
    25f2:	9b03      	ldr	r3, [sp, #12]
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
    25f4:	0006      	movs	r6, r0
    25f6:	000f      	movs	r7, r1
                         phi[1][1] * pestp[1][0] +
    25f8:	9810      	ldr	r0, [sp, #64]	; 0x40
    25fa:	9911      	ldr	r1, [sp, #68]	; 0x44
    25fc:	47a0      	blx	r4
    25fe:	0002      	movs	r2, r0
    2600:	000b      	movs	r3, r1
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
    2602:	0030      	movs	r0, r6
    2604:	0039      	movs	r1, r7
    2606:	47a8      	blx	r5
                         phi[1][2] * pestp[2][0] )/ det;
    2608:	9a04      	ldr	r2, [sp, #16]
    260a:	9b05      	ldr	r3, [sp, #20]
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
    260c:	0006      	movs	r6, r0
    260e:	000f      	movs	r7, r1
                         phi[1][2] * pestp[2][0] )/ det;
    2610:	9812      	ldr	r0, [sp, #72]	; 0x48
    2612:	9913      	ldr	r1, [sp, #76]	; 0x4c
    2614:	47a0      	blx	r4
    2616:	0002      	movs	r2, r0
    2618:	000b      	movs	r3, r1
                         phi[1][1] * pestp[1][0] +
    261a:	0030      	movs	r0, r6
    261c:	0039      	movs	r1, r7
    261e:	47a8      	blx	r5
                         phi[1][2] * pestp[2][0] )/ det;
    2620:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    2622:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    2624:	4e9d      	ldr	r6, [pc, #628]	; (289c <computeKalmanBaroOnlyGains+0x6fc>)
    2626:	47b0      	blx	r6
    2628:	9006      	str	r0, [sp, #24]
    262a:	9107      	str	r1, [sp, #28]
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
    262c:	9a06      	ldr	r2, [sp, #24]
    262e:	9b07      	ldr	r3, [sp, #28]
    2630:	499b      	ldr	r1, [pc, #620]	; (28a0 <computeKalmanBaroOnlyGains+0x700>)
    2632:	608a      	str	r2, [r1, #8]
    2634:	60cb      	str	r3, [r1, #12]
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
    2636:	9a00      	ldr	r2, [sp, #0]
    2638:	9b01      	ldr	r3, [sp, #4]
    263a:	9814      	ldr	r0, [sp, #80]	; 0x50
    263c:	9915      	ldr	r1, [sp, #84]	; 0x54
    263e:	47a0      	blx	r4
                         phi[2][1] * pestp[1][0] +
    2640:	9a02      	ldr	r2, [sp, #8]
    2642:	9b03      	ldr	r3, [sp, #12]
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
    2644:	0006      	movs	r6, r0
    2646:	000f      	movs	r7, r1
                         phi[2][1] * pestp[1][0] +
    2648:	9816      	ldr	r0, [sp, #88]	; 0x58
    264a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    264c:	47a0      	blx	r4
    264e:	0002      	movs	r2, r0
    2650:	000b      	movs	r3, r1
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
    2652:	0030      	movs	r0, r6
    2654:	0039      	movs	r1, r7
    2656:	47a8      	blx	r5
                         phi[2][2] * pestp[2][0] )/det;
    2658:	9a04      	ldr	r2, [sp, #16]
    265a:	9b05      	ldr	r3, [sp, #20]
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
    265c:	0006      	movs	r6, r0
    265e:	000f      	movs	r7, r1
                         phi[2][2] * pestp[2][0] )/det;
    2660:	9818      	ldr	r0, [sp, #96]	; 0x60
    2662:	9919      	ldr	r1, [sp, #100]	; 0x64
    2664:	47a0      	blx	r4
    2666:	0002      	movs	r2, r0
    2668:	000b      	movs	r3, r1
                         phi[2][1] * pestp[1][0] +
    266a:	0030      	movs	r0, r6
    266c:	0039      	movs	r1, r7
    266e:	47a8      	blx	r5
                         phi[2][2] * pestp[2][0] )/det;
    2670:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    2672:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    2674:	4e89      	ldr	r6, [pc, #548]	; (289c <computeKalmanBaroOnlyGains+0x6fc>)
    2676:	47b0      	blx	r6
    2678:	9024      	str	r0, [sp, #144]	; 0x90
    267a:	9125      	str	r1, [sp, #148]	; 0x94
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
    267c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    267e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    2680:	4987      	ldr	r1, [pc, #540]	; (28a0 <computeKalmanBaroOnlyGains+0x700>)

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
    2682:	4e88      	ldr	r6, [pc, #544]	; (28a4 <computeKalmanBaroOnlyGains+0x704>)
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
    2684:	610a      	str	r2, [r1, #16]
    2686:	614b      	str	r3, [r1, #20]
        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
    2688:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    268a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    268c:	2000      	movs	r0, #0
    268e:	4986      	ldr	r1, [pc, #536]	; (28a8 <computeKalmanBaroOnlyGains+0x708>)
    2690:	47b0      	blx	r6
    2692:	0006      	movs	r6, r0
    2694:	000f      	movs	r7, r1
    2696:	0002      	movs	r2, r0
    2698:	000b      	movs	r3, r1
    269a:	9800      	ldr	r0, [sp, #0]
    269c:	9901      	ldr	r1, [sp, #4]
    269e:	47a0      	blx	r4
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
    26a0:	0032      	movs	r2, r6
    26a2:	003b      	movs	r3, r7
        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
    26a4:	901a      	str	r0, [sp, #104]	; 0x68
    26a6:	911b      	str	r1, [sp, #108]	; 0x6c
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
    26a8:	9802      	ldr	r0, [sp, #8]
    26aa:	9903      	ldr	r1, [sp, #12]
    26ac:	47a0      	blx	r4
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
    26ae:	0032      	movs	r2, r6
    26b0:	003b      	movs	r3, r7
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
    26b2:	901c      	str	r0, [sp, #112]	; 0x70
    26b4:	911d      	str	r1, [sp, #116]	; 0x74
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
    26b6:	9804      	ldr	r0, [sp, #16]
    26b8:	9905      	ldr	r1, [sp, #20]
    26ba:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    26bc:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    26be:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
    26c0:	901e      	str	r0, [sp, #120]	; 0x78
    26c2:	911f      	str	r1, [sp, #124]	; 0x7c
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    26c4:	9828      	ldr	r0, [sp, #160]	; 0xa0
    26c6:	9929      	ldr	r1, [sp, #164]	; 0xa4
    26c8:	47a8      	blx	r5
    26ca:	4a72      	ldr	r2, [pc, #456]	; (2894 <computeKalmanBaroOnlyGains+0x6f4>)
    26cc:	0006      	movs	r6, r0
    26ce:	000f      	movs	r7, r1
    26d0:	982a      	ldr	r0, [sp, #168]	; 0xa8
    26d2:	992b      	ldr	r1, [sp, #172]	; 0xac
    26d4:	4b70      	ldr	r3, [pc, #448]	; (2898 <computeKalmanBaroOnlyGains+0x6f8>)
    26d6:	47a0      	blx	r4
    26d8:	0002      	movs	r2, r0
    26da:	000b      	movs	r3, r1
    26dc:	0030      	movs	r0, r6
    26de:	0039      	movs	r1, r7
    26e0:	47a8      	blx	r5
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
    26e2:	9a06      	ldr	r2, [sp, #24]
    26e4:	9b07      	ldr	r3, [sp, #28]
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    26e6:	0006      	movs	r6, r0
    26e8:	000f      	movs	r7, r1
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
    26ea:	9800      	ldr	r0, [sp, #0]
    26ec:	9901      	ldr	r1, [sp, #4]
    26ee:	47a0      	blx	r4
    26f0:	0002      	movs	r2, r0
    26f2:	000b      	movs	r3, r1
    26f4:	0030      	movs	r0, r6
    26f6:	0039      	movs	r1, r7
    26f8:	4e6a      	ldr	r6, [pc, #424]	; (28a4 <computeKalmanBaroOnlyGains+0x704>)
    26fa:	47b0      	blx	r6
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    26fc:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    26fe:	9b35      	ldr	r3, [sp, #212]	; 0xd4
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
    2700:	9020      	str	r0, [sp, #128]	; 0x80
    2702:	9121      	str	r1, [sp, #132]	; 0x84
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    2704:	982c      	ldr	r0, [sp, #176]	; 0xb0
    2706:	992d      	ldr	r1, [sp, #180]	; 0xb4
    2708:	47a8      	blx	r5
    270a:	4a62      	ldr	r2, [pc, #392]	; (2894 <computeKalmanBaroOnlyGains+0x6f4>)
    270c:	0006      	movs	r6, r0
    270e:	000f      	movs	r7, r1
    2710:	982e      	ldr	r0, [sp, #184]	; 0xb8
    2712:	992f      	ldr	r1, [sp, #188]	; 0xbc
    2714:	4b60      	ldr	r3, [pc, #384]	; (2898 <computeKalmanBaroOnlyGains+0x6f8>)
    2716:	47a0      	blx	r4
    2718:	0002      	movs	r2, r0
    271a:	000b      	movs	r3, r1
    271c:	0030      	movs	r0, r6
    271e:	0039      	movs	r1, r7
    2720:	47a8      	blx	r5
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
    2722:	9a06      	ldr	r2, [sp, #24]
    2724:	9b07      	ldr	r3, [sp, #28]
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    2726:	0006      	movs	r6, r0
    2728:	000f      	movs	r7, r1
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
    272a:	9802      	ldr	r0, [sp, #8]
    272c:	9903      	ldr	r1, [sp, #12]
    272e:	47a0      	blx	r4
    2730:	0002      	movs	r2, r0
    2732:	000b      	movs	r3, r1
    2734:	0030      	movs	r0, r6
    2736:	0039      	movs	r1, r7
    2738:	4e5a      	ldr	r6, [pc, #360]	; (28a4 <computeKalmanBaroOnlyGains+0x704>)
    273a:	47b0      	blx	r6
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    273c:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    273e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
    2740:	9022      	str	r0, [sp, #136]	; 0x88
    2742:	9123      	str	r1, [sp, #140]	; 0x8c
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    2744:	9830      	ldr	r0, [sp, #192]	; 0xc0
    2746:	9931      	ldr	r1, [sp, #196]	; 0xc4
    2748:	47a8      	blx	r5
    274a:	4a52      	ldr	r2, [pc, #328]	; (2894 <computeKalmanBaroOnlyGains+0x6f4>)
    274c:	0006      	movs	r6, r0
    274e:	000f      	movs	r7, r1
    2750:	9832      	ldr	r0, [sp, #200]	; 0xc8
    2752:	9933      	ldr	r1, [sp, #204]	; 0xcc
    2754:	4b50      	ldr	r3, [pc, #320]	; (2898 <computeKalmanBaroOnlyGains+0x6f8>)
    2756:	47a0      	blx	r4
    2758:	0002      	movs	r2, r0
    275a:	000b      	movs	r3, r1
    275c:	0030      	movs	r0, r6
    275e:	0039      	movs	r1, r7
    2760:	47a8      	blx	r5
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
    2762:	9a06      	ldr	r2, [sp, #24]
    2764:	9b07      	ldr	r3, [sp, #28]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    2766:	0006      	movs	r6, r0
    2768:	000f      	movs	r7, r1
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
    276a:	9804      	ldr	r0, [sp, #16]
    276c:	9905      	ldr	r1, [sp, #20]
    276e:	47a0      	blx	r4
    2770:	0002      	movs	r2, r0
    2772:	000b      	movs	r3, r1
    2774:	0030      	movs	r0, r6
    2776:	0039      	movs	r1, r7
    2778:	4e4a      	ldr	r6, [pc, #296]	; (28a4 <computeKalmanBaroOnlyGains+0x704>)
    277a:	47b0      	blx	r6
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    277c:	2200      	movs	r2, #0
    277e:	2300      	movs	r3, #0
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
    2780:	9006      	str	r0, [sp, #24]
    2782:	9107      	str	r1, [sp, #28]
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    2784:	9828      	ldr	r0, [sp, #160]	; 0xa0
    2786:	9929      	ldr	r1, [sp, #164]	; 0xa4
    2788:	47a0      	blx	r4
    278a:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    278c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    278e:	47a8      	blx	r5
    2790:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    2792:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    2794:	47a8      	blx	r5
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
    2796:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2798:	9b25      	ldr	r3, [sp, #148]	; 0x94
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    279a:	0006      	movs	r6, r0
    279c:	000f      	movs	r7, r1
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
    279e:	9800      	ldr	r0, [sp, #0]
    27a0:	9901      	ldr	r1, [sp, #4]
    27a2:	47a0      	blx	r4
    27a4:	0002      	movs	r2, r0
    27a6:	000b      	movs	r3, r1
    27a8:	0030      	movs	r0, r6
    27aa:	0039      	movs	r1, r7
    27ac:	4e3d      	ldr	r6, [pc, #244]	; (28a4 <computeKalmanBaroOnlyGains+0x704>)
    27ae:	47b0      	blx	r6
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    27b0:	2200      	movs	r2, #0
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
    27b2:	9000      	str	r0, [sp, #0]
    27b4:	9101      	str	r1, [sp, #4]
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    27b6:	982c      	ldr	r0, [sp, #176]	; 0xb0
    27b8:	992d      	ldr	r1, [sp, #180]	; 0xb4
    27ba:	2300      	movs	r3, #0
    27bc:	47a0      	blx	r4
    27be:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    27c0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    27c2:	47a8      	blx	r5
    27c4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    27c6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    27c8:	47a8      	blx	r5
        pest[2][1] = pestp[1][2] - baro_kgain[2] * pestp[1][0];
    27ca:	9a24      	ldr	r2, [sp, #144]	; 0x90
    27cc:	9b25      	ldr	r3, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    27ce:	0006      	movs	r6, r0
    27d0:	000f      	movs	r7, r1
        pest[2][1] = pestp[1][2] - baro_kgain[2] * pestp[1][0];
    27d2:	9802      	ldr	r0, [sp, #8]
    27d4:	9903      	ldr	r1, [sp, #12]
    27d6:	47a0      	blx	r4
    27d8:	0002      	movs	r2, r0
    27da:	000b      	movs	r3, r1
    27dc:	0030      	movs	r0, r6
    27de:	0039      	movs	r1, r7
    27e0:	4e30      	ldr	r6, [pc, #192]	; (28a4 <computeKalmanBaroOnlyGains+0x704>)
    27e2:	47b0      	blx	r6
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];
    27e4:	2200      	movs	r2, #0
        pest[2][1] = pestp[1][2] - baro_kgain[2] * pestp[1][0];
    27e6:	9002      	str	r0, [sp, #8]
    27e8:	9103      	str	r1, [sp, #12]
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];
    27ea:	9830      	ldr	r0, [sp, #192]	; 0xc0
    27ec:	9931      	ldr	r1, [sp, #196]	; 0xc4
    27ee:	2300      	movs	r3, #0
    27f0:	47a0      	blx	r4
    27f2:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    27f4:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    27f6:	47a8      	blx	r5
    27f8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    27fa:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    27fc:	47a8      	blx	r5
        pest[2][2] = pestp[2][2] - baro_kgain[2] * pestp[2][0];
    27fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2800:	9b25      	ldr	r3, [sp, #148]	; 0x94
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];
    2802:	0006      	movs	r6, r0
    2804:	000f      	movs	r7, r1
        pest[2][2] = pestp[2][2] - baro_kgain[2] * pestp[2][0];
    2806:	9804      	ldr	r0, [sp, #16]
    2808:	9905      	ldr	r1, [sp, #20]
    280a:	47a0      	blx	r4
    280c:	4c25      	ldr	r4, [pc, #148]	; (28a4 <computeKalmanBaroOnlyGains+0x704>)
    280e:	000b      	movs	r3, r1
    2810:	0002      	movs	r2, r0
    2812:	0039      	movs	r1, r7
    2814:	0030      	movs	r0, r6
    2816:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    2818:	2400      	movs	r4, #0
    281a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
        pest[2][2] = pestp[2][2] - baro_kgain[2] * pestp[2][0];
    281c:	9004      	str	r0, [sp, #16]
    281e:	9105      	str	r1, [sp, #20]
        k++;
    2820:	3301      	adds	r3, #1
    2822:	9327      	str	r3, [sp, #156]	; 0x9c
        for( i = 0; i <= 2; i++) {
            if( (baro_kgain[i] - lastkgain[i])/lastkgain[i] > 0.00001)
    2824:	4b1e      	ldr	r3, [pc, #120]	; (28a0 <computeKalmanBaroOnlyGains+0x700>)
        notdone = 0;
    2826:	9424      	str	r4, [sp, #144]	; 0x90
            if( (baro_kgain[i] - lastkgain[i])/lastkgain[i] > 0.00001)
    2828:	932c      	str	r3, [sp, #176]	; 0xb0
    282a:	4b1e      	ldr	r3, [pc, #120]	; (28a4 <computeKalmanBaroOnlyGains+0x704>)
    282c:	932e      	str	r3, [sp, #184]	; 0xb8
    282e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    2830:	18e3      	adds	r3, r4, r3
    2832:	681a      	ldr	r2, [r3, #0]
    2834:	685b      	ldr	r3, [r3, #4]
    2836:	9228      	str	r2, [sp, #160]	; 0xa0
    2838:	9329      	str	r3, [sp, #164]	; 0xa4
    283a:	9828      	ldr	r0, [sp, #160]	; 0xa0
    283c:	9929      	ldr	r1, [sp, #164]	; 0xa4
    283e:	ab3e      	add	r3, sp, #248	; 0xf8
    2840:	18e5      	adds	r5, r4, r3
    2842:	682e      	ldr	r6, [r5, #0]
    2844:	686f      	ldr	r7, [r5, #4]
    2846:	952a      	str	r5, [sp, #168]	; 0xa8
    2848:	0032      	movs	r2, r6
    284a:	003b      	movs	r3, r7
    284c:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
    284e:	47a8      	blx	r5
    2850:	0032      	movs	r2, r6
    2852:	003b      	movs	r3, r7
    2854:	4e11      	ldr	r6, [pc, #68]	; (289c <computeKalmanBaroOnlyGains+0x6fc>)
    2856:	47b0      	blx	r6
    2858:	4b14      	ldr	r3, [pc, #80]	; (28ac <computeKalmanBaroOnlyGains+0x70c>)
    285a:	4a15      	ldr	r2, [pc, #84]	; (28b0 <computeKalmanBaroOnlyGains+0x710>)
    285c:	4e15      	ldr	r6, [pc, #84]	; (28b4 <computeKalmanBaroOnlyGains+0x714>)
    285e:	47b0      	blx	r6
                notdone++;
    2860:	1e43      	subs	r3, r0, #1
    2862:	4198      	sbcs	r0, r3
    2864:	9b24      	ldr	r3, [sp, #144]	; 0x90
            lastkgain[i] = baro_kgain[i];
    2866:	992a      	ldr	r1, [sp, #168]	; 0xa8
                notdone++;
    2868:	181b      	adds	r3, r3, r0
    286a:	3408      	adds	r4, #8
    286c:	9324      	str	r3, [sp, #144]	; 0x90
            lastkgain[i] = baro_kgain[i];
    286e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    2870:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    2872:	600a      	str	r2, [r1, #0]
    2874:	604b      	str	r3, [r1, #4]
        for( i = 0; i <= 2; i++) {
    2876:	2c18      	cmp	r4, #24
    2878:	d1d9      	bne.n	282e <computeKalmanBaroOnlyGains+0x68e>
        }
        if( notdone || k < 100)
    287a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    287c:	2b00      	cmp	r3, #0
    287e:	d000      	beq.n	2882 <computeKalmanBaroOnlyGains+0x6e2>
    2880:	e4f8      	b.n	2274 <computeKalmanBaroOnlyGains+0xd4>
    2882:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    2884:	2b63      	cmp	r3, #99	; 0x63
    2886:	dc00      	bgt.n	288a <computeKalmanBaroOnlyGains+0x6ea>
    2888:	e4f4      	b.n	2274 <computeKalmanBaroOnlyGains+0xd4>
    288a:	e015      	b.n	28b8 <computeKalmanBaroOnlyGains+0x718>
    288c:	eb1c432d 	.word	0xeb1c432d
    2890:	3eea36e2 	.word	0x3eea36e2
    2894:	47ae147b 	.word	0x47ae147b
    2898:	3f747ae1 	.word	0x3f747ae1
    289c:	00005a05 	.word	0x00005a05
    28a0:	20000310 	.word	0x20000310
    28a4:	0000676d 	.word	0x0000676d
    28a8:	3ff00000 	.word	0x3ff00000
    28ac:	3ee4f8b5 	.word	0x3ee4f8b5
    28b0:	88e368f1 	.word	0x88e368f1
    28b4:	000050ad 	.word	0x000050ad
            continue;
        else
            break;
    }
}
    28b8:	b045      	add	sp, #276	; 0x114
    28ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000028bc <KalmanBaroUpdate>:

void KalmanBaroUpdate(double alt_inovation) {
    28bc:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    28be:	4b55      	ldr	r3, [pc, #340]	; (2a14 <KalmanBaroUpdate+0x158>)
void KalmanBaroUpdate(double alt_inovation) {
    28c0:	b08d      	sub	sp, #52	; 0x34
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    28c2:	685c      	ldr	r4, [r3, #4]
    28c4:	681b      	ldr	r3, [r3, #0]
    28c6:	9300      	str	r3, [sp, #0]
    28c8:	9401      	str	r4, [sp, #4]
    28ca:	4b53      	ldr	r3, [pc, #332]	; (2a18 <KalmanBaroUpdate+0x15c>)
    28cc:	4d53      	ldr	r5, [pc, #332]	; (2a1c <KalmanBaroUpdate+0x160>)
    28ce:	685c      	ldr	r4, [r3, #4]
    28d0:	681b      	ldr	r3, [r3, #0]
    28d2:	9302      	str	r3, [sp, #8]
    28d4:	9403      	str	r4, [sp, #12]
    28d6:	4b52      	ldr	r3, [pc, #328]	; (2a20 <KalmanBaroUpdate+0x164>)
void KalmanBaroUpdate(double alt_inovation) {
    28d8:	9006      	str	r0, [sp, #24]
    28da:	9107      	str	r1, [sp, #28]
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    28dc:	685c      	ldr	r4, [r3, #4]
    28de:	681b      	ldr	r3, [r3, #0]
    28e0:	9800      	ldr	r0, [sp, #0]
    28e2:	9901      	ldr	r1, [sp, #4]
    28e4:	9304      	str	r3, [sp, #16]
    28e6:	9405      	str	r4, [sp, #20]
    28e8:	4c4e      	ldr	r4, [pc, #312]	; (2a24 <KalmanBaroUpdate+0x168>)
    28ea:	6822      	ldr	r2, [r4, #0]
    28ec:	6863      	ldr	r3, [r4, #4]
    28ee:	47a8      	blx	r5
    28f0:	68a2      	ldr	r2, [r4, #8]
    28f2:	68e3      	ldr	r3, [r4, #12]
    28f4:	0006      	movs	r6, r0
    28f6:	000f      	movs	r7, r1
    28f8:	9802      	ldr	r0, [sp, #8]
    28fa:	9903      	ldr	r1, [sp, #12]
    28fc:	47a8      	blx	r5
    28fe:	0002      	movs	r2, r0
    2900:	000b      	movs	r3, r1
    2902:	0030      	movs	r0, r6
    2904:	0039      	movs	r1, r7
    2906:	4e48      	ldr	r6, [pc, #288]	; (2a28 <KalmanBaroUpdate+0x16c>)
    2908:	47b0      	blx	r6
    290a:	6922      	ldr	r2, [r4, #16]
    290c:	6963      	ldr	r3, [r4, #20]
    290e:	0006      	movs	r6, r0
    2910:	000f      	movs	r7, r1
    2912:	9804      	ldr	r0, [sp, #16]
    2914:	9905      	ldr	r1, [sp, #20]
    2916:	47a8      	blx	r5
    2918:	0002      	movs	r2, r0
    291a:	000b      	movs	r3, r1
    291c:	0030      	movs	r0, r6
    291e:	0039      	movs	r1, r7
    2920:	4e41      	ldr	r6, [pc, #260]	; (2a28 <KalmanBaroUpdate+0x16c>)
    2922:	47b0      	blx	r6
    2924:	9008      	str	r0, [sp, #32]
    2926:	9109      	str	r1, [sp, #36]	; 0x24
    2928:	9a08      	ldr	r2, [sp, #32]
    292a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    292c:	493f      	ldr	r1, [pc, #252]	; (2a2c <KalmanBaroUpdate+0x170>)
    292e:	600a      	str	r2, [r1, #0]
    2930:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    2932:	69a2      	ldr	r2, [r4, #24]
    2934:	69e3      	ldr	r3, [r4, #28]
    2936:	9800      	ldr	r0, [sp, #0]
    2938:	9901      	ldr	r1, [sp, #4]
    293a:	47a8      	blx	r5
    293c:	6a22      	ldr	r2, [r4, #32]
    293e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2940:	0006      	movs	r6, r0
    2942:	000f      	movs	r7, r1
    2944:	9802      	ldr	r0, [sp, #8]
    2946:	9903      	ldr	r1, [sp, #12]
    2948:	47a8      	blx	r5
    294a:	0002      	movs	r2, r0
    294c:	000b      	movs	r3, r1
    294e:	0030      	movs	r0, r6
    2950:	0039      	movs	r1, r7
    2952:	4e35      	ldr	r6, [pc, #212]	; (2a28 <KalmanBaroUpdate+0x16c>)
    2954:	47b0      	blx	r6
    2956:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2958:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    295a:	0006      	movs	r6, r0
    295c:	000f      	movs	r7, r1
    295e:	9804      	ldr	r0, [sp, #16]
    2960:	9905      	ldr	r1, [sp, #20]
    2962:	47a8      	blx	r5
    2964:	0002      	movs	r2, r0
    2966:	000b      	movs	r3, r1
    2968:	0030      	movs	r0, r6
    296a:	0039      	movs	r1, r7
    296c:	4e2e      	ldr	r6, [pc, #184]	; (2a28 <KalmanBaroUpdate+0x16c>)
    296e:	47b0      	blx	r6
    2970:	900a      	str	r0, [sp, #40]	; 0x28
    2972:	910b      	str	r1, [sp, #44]	; 0x2c
    2974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2978:	492c      	ldr	r1, [pc, #176]	; (2a2c <KalmanBaroUpdate+0x170>)
    297a:	608a      	str	r2, [r1, #8]
    297c:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    297e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2980:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2982:	9800      	ldr	r0, [sp, #0]
    2984:	9901      	ldr	r1, [sp, #4]
    2986:	47a8      	blx	r5
    2988:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    298a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    298c:	0006      	movs	r6, r0
    298e:	000f      	movs	r7, r1
    2990:	9802      	ldr	r0, [sp, #8]
    2992:	9903      	ldr	r1, [sp, #12]
    2994:	47a8      	blx	r5
    2996:	0002      	movs	r2, r0
    2998:	000b      	movs	r3, r1
    299a:	0030      	movs	r0, r6
    299c:	0039      	movs	r1, r7
    299e:	4e22      	ldr	r6, [pc, #136]	; (2a28 <KalmanBaroUpdate+0x16c>)
    29a0:	47b0      	blx	r6
    29a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    29a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    29a6:	0006      	movs	r6, r0
    29a8:	000f      	movs	r7, r1
    29aa:	9804      	ldr	r0, [sp, #16]
    29ac:	9905      	ldr	r1, [sp, #20]
    29ae:	47a8      	blx	r5
    29b0:	4c1d      	ldr	r4, [pc, #116]	; (2a28 <KalmanBaroUpdate+0x16c>)
    29b2:	0002      	movs	r2, r0
    29b4:	000b      	movs	r3, r1
    29b6:	0030      	movs	r0, r6
    29b8:	0039      	movs	r1, r7
    29ba:	47a0      	blx	r4
    29bc:	0006      	movs	r6, r0
    29be:	000f      	movs	r7, r1

    /* Update state */
    altitude = estp[0] + baro_kgain[0] * alt_inovation;
    29c0:	9806      	ldr	r0, [sp, #24]
    29c2:	9907      	ldr	r1, [sp, #28]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    29c4:	4b19      	ldr	r3, [pc, #100]	; (2a2c <KalmanBaroUpdate+0x170>)
    29c6:	611e      	str	r6, [r3, #16]
    29c8:	615f      	str	r7, [r3, #20]
    altitude = estp[0] + baro_kgain[0] * alt_inovation;
    29ca:	4b19      	ldr	r3, [pc, #100]	; (2a30 <KalmanBaroUpdate+0x174>)
    29cc:	681a      	ldr	r2, [r3, #0]
    29ce:	685b      	ldr	r3, [r3, #4]
    29d0:	47a8      	blx	r5
    29d2:	9a08      	ldr	r2, [sp, #32]
    29d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    29d6:	47a0      	blx	r4
    29d8:	4b0e      	ldr	r3, [pc, #56]	; (2a14 <KalmanBaroUpdate+0x158>)
    29da:	6018      	str	r0, [r3, #0]
    29dc:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + baro_kgain[1] * alt_inovation;
    29de:	9806      	ldr	r0, [sp, #24]
    29e0:	9907      	ldr	r1, [sp, #28]
    29e2:	4b13      	ldr	r3, [pc, #76]	; (2a30 <KalmanBaroUpdate+0x174>)
    29e4:	689a      	ldr	r2, [r3, #8]
    29e6:	68db      	ldr	r3, [r3, #12]
    29e8:	47a8      	blx	r5
    29ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    29ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    29ee:	47a0      	blx	r4
    29f0:	4b09      	ldr	r3, [pc, #36]	; (2a18 <KalmanBaroUpdate+0x15c>)
    29f2:	6018      	str	r0, [r3, #0]
    29f4:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + baro_kgain[2] * alt_inovation;
    29f6:	9806      	ldr	r0, [sp, #24]
    29f8:	9907      	ldr	r1, [sp, #28]
    29fa:	4b0d      	ldr	r3, [pc, #52]	; (2a30 <KalmanBaroUpdate+0x174>)
    29fc:	691a      	ldr	r2, [r3, #16]
    29fe:	695b      	ldr	r3, [r3, #20]
    2a00:	47a8      	blx	r5
    2a02:	003b      	movs	r3, r7
    2a04:	0032      	movs	r2, r6
    2a06:	47a0      	blx	r4
    2a08:	4b05      	ldr	r3, [pc, #20]	; (2a20 <KalmanBaroUpdate+0x164>)
    2a0a:	6018      	str	r0, [r3, #0]
    2a0c:	6059      	str	r1, [r3, #4]

}
    2a0e:	b00d      	add	sp, #52	; 0x34
    2a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a12:	46c0      	nop			; (mov r8, r8)
    2a14:	20000328 	.word	0x20000328
    2a18:	20000308 	.word	0x20000308
    2a1c:	0000626d 	.word	0x0000626d
    2a20:	200002e8 	.word	0x200002e8
    2a24:	20000010 	.word	0x20000010
    2a28:	000053e5 	.word	0x000053e5
    2a2c:	20000330 	.word	0x20000330
    2a30:	20000310 	.word	0x20000310

00002a34 <KalmanBothUpdate>:

void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    2a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a36:	b08f      	sub	sp, #60	; 0x3c
    2a38:	9208      	str	r2, [sp, #32]
    2a3a:	9309      	str	r3, [sp, #36]	; 0x24

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    2a3c:	4b68      	ldr	r3, [pc, #416]	; (2be0 <KalmanBothUpdate+0x1ac>)
    2a3e:	4d69      	ldr	r5, [pc, #420]	; (2be4 <KalmanBothUpdate+0x1b0>)
    2a40:	685c      	ldr	r4, [r3, #4]
    2a42:	681b      	ldr	r3, [r3, #0]
    2a44:	9300      	str	r3, [sp, #0]
    2a46:	9401      	str	r4, [sp, #4]
    2a48:	4b67      	ldr	r3, [pc, #412]	; (2be8 <KalmanBothUpdate+0x1b4>)
void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    2a4a:	9006      	str	r0, [sp, #24]
    2a4c:	9107      	str	r1, [sp, #28]
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    2a4e:	685c      	ldr	r4, [r3, #4]
    2a50:	681b      	ldr	r3, [r3, #0]
    2a52:	9800      	ldr	r0, [sp, #0]
    2a54:	9901      	ldr	r1, [sp, #4]
    2a56:	9302      	str	r3, [sp, #8]
    2a58:	9403      	str	r4, [sp, #12]
    2a5a:	4b64      	ldr	r3, [pc, #400]	; (2bec <KalmanBothUpdate+0x1b8>)
    2a5c:	685c      	ldr	r4, [r3, #4]
    2a5e:	681b      	ldr	r3, [r3, #0]
    2a60:	9304      	str	r3, [sp, #16]
    2a62:	9405      	str	r4, [sp, #20]
    2a64:	4c62      	ldr	r4, [pc, #392]	; (2bf0 <KalmanBothUpdate+0x1bc>)
    2a66:	6822      	ldr	r2, [r4, #0]
    2a68:	6863      	ldr	r3, [r4, #4]
    2a6a:	47a8      	blx	r5
    2a6c:	68a2      	ldr	r2, [r4, #8]
    2a6e:	68e3      	ldr	r3, [r4, #12]
    2a70:	0006      	movs	r6, r0
    2a72:	000f      	movs	r7, r1
    2a74:	9802      	ldr	r0, [sp, #8]
    2a76:	9903      	ldr	r1, [sp, #12]
    2a78:	47a8      	blx	r5
    2a7a:	0002      	movs	r2, r0
    2a7c:	000b      	movs	r3, r1
    2a7e:	0030      	movs	r0, r6
    2a80:	0039      	movs	r1, r7
    2a82:	4e5c      	ldr	r6, [pc, #368]	; (2bf4 <KalmanBothUpdate+0x1c0>)
    2a84:	47b0      	blx	r6
    2a86:	6922      	ldr	r2, [r4, #16]
    2a88:	6963      	ldr	r3, [r4, #20]
    2a8a:	0006      	movs	r6, r0
    2a8c:	000f      	movs	r7, r1
    2a8e:	9804      	ldr	r0, [sp, #16]
    2a90:	9905      	ldr	r1, [sp, #20]
    2a92:	47a8      	blx	r5
    2a94:	0002      	movs	r2, r0
    2a96:	000b      	movs	r3, r1
    2a98:	0030      	movs	r0, r6
    2a9a:	0039      	movs	r1, r7
    2a9c:	4e55      	ldr	r6, [pc, #340]	; (2bf4 <KalmanBothUpdate+0x1c0>)
    2a9e:	47b0      	blx	r6
    2aa0:	900a      	str	r0, [sp, #40]	; 0x28
    2aa2:	910b      	str	r1, [sp, #44]	; 0x2c
    2aa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2aa8:	4953      	ldr	r1, [pc, #332]	; (2bf8 <KalmanBothUpdate+0x1c4>)
    2aaa:	600a      	str	r2, [r1, #0]
    2aac:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    2aae:	69a2      	ldr	r2, [r4, #24]
    2ab0:	69e3      	ldr	r3, [r4, #28]
    2ab2:	9800      	ldr	r0, [sp, #0]
    2ab4:	9901      	ldr	r1, [sp, #4]
    2ab6:	47a8      	blx	r5
    2ab8:	6a22      	ldr	r2, [r4, #32]
    2aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2abc:	0006      	movs	r6, r0
    2abe:	000f      	movs	r7, r1
    2ac0:	9802      	ldr	r0, [sp, #8]
    2ac2:	9903      	ldr	r1, [sp, #12]
    2ac4:	47a8      	blx	r5
    2ac6:	0002      	movs	r2, r0
    2ac8:	000b      	movs	r3, r1
    2aca:	0030      	movs	r0, r6
    2acc:	0039      	movs	r1, r7
    2ace:	4e49      	ldr	r6, [pc, #292]	; (2bf4 <KalmanBothUpdate+0x1c0>)
    2ad0:	47b0      	blx	r6
    2ad2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2ad4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2ad6:	0006      	movs	r6, r0
    2ad8:	000f      	movs	r7, r1
    2ada:	9804      	ldr	r0, [sp, #16]
    2adc:	9905      	ldr	r1, [sp, #20]
    2ade:	47a8      	blx	r5
    2ae0:	0002      	movs	r2, r0
    2ae2:	000b      	movs	r3, r1
    2ae4:	0030      	movs	r0, r6
    2ae6:	0039      	movs	r1, r7
    2ae8:	4e42      	ldr	r6, [pc, #264]	; (2bf4 <KalmanBothUpdate+0x1c0>)
    2aea:	47b0      	blx	r6
    2aec:	900c      	str	r0, [sp, #48]	; 0x30
    2aee:	910d      	str	r1, [sp, #52]	; 0x34
    2af0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2af4:	4940      	ldr	r1, [pc, #256]	; (2bf8 <KalmanBothUpdate+0x1c4>)
    2af6:	608a      	str	r2, [r1, #8]
    2af8:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    2afa:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2afc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2afe:	9800      	ldr	r0, [sp, #0]
    2b00:	9901      	ldr	r1, [sp, #4]
    2b02:	47a8      	blx	r5
    2b04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2b06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2b08:	0006      	movs	r6, r0
    2b0a:	000f      	movs	r7, r1
    2b0c:	9802      	ldr	r0, [sp, #8]
    2b0e:	9903      	ldr	r1, [sp, #12]
    2b10:	47a8      	blx	r5
    2b12:	0002      	movs	r2, r0
    2b14:	000b      	movs	r3, r1
    2b16:	0030      	movs	r0, r6
    2b18:	0039      	movs	r1, r7
    2b1a:	4e36      	ldr	r6, [pc, #216]	; (2bf4 <KalmanBothUpdate+0x1c0>)
    2b1c:	47b0      	blx	r6
    2b1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2b20:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2b22:	0006      	movs	r6, r0
    2b24:	000f      	movs	r7, r1
    2b26:	9804      	ldr	r0, [sp, #16]
    2b28:	9905      	ldr	r1, [sp, #20]
    2b2a:	47a8      	blx	r5
    2b2c:	4c31      	ldr	r4, [pc, #196]	; (2bf4 <KalmanBothUpdate+0x1c0>)
    2b2e:	0002      	movs	r2, r0
    2b30:	000b      	movs	r3, r1
    2b32:	0030      	movs	r0, r6
    2b34:	0039      	movs	r1, r7
    2b36:	47a0      	blx	r4
    2b38:	0003      	movs	r3, r0
    2b3a:	000c      	movs	r4, r1
    2b3c:	4a2e      	ldr	r2, [pc, #184]	; (2bf8 <KalmanBothUpdate+0x1c4>)
    2b3e:	9000      	str	r0, [sp, #0]
    2b40:	9101      	str	r1, [sp, #4]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    2b42:	9806      	ldr	r0, [sp, #24]
    2b44:	9907      	ldr	r1, [sp, #28]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    2b46:	6113      	str	r3, [r2, #16]
    2b48:	6154      	str	r4, [r2, #20]
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    2b4a:	4c2c      	ldr	r4, [pc, #176]	; (2bfc <KalmanBothUpdate+0x1c8>)
    2b4c:	6822      	ldr	r2, [r4, #0]
    2b4e:	6863      	ldr	r3, [r4, #4]
    2b50:	47a8      	blx	r5
    2b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2b54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2b56:	4e27      	ldr	r6, [pc, #156]	; (2bf4 <KalmanBothUpdate+0x1c0>)
    2b58:	47b0      	blx	r6
    2b5a:	68a2      	ldr	r2, [r4, #8]
    2b5c:	68e3      	ldr	r3, [r4, #12]
    2b5e:	0006      	movs	r6, r0
    2b60:	000f      	movs	r7, r1
    2b62:	9808      	ldr	r0, [sp, #32]
    2b64:	9909      	ldr	r1, [sp, #36]	; 0x24
    2b66:	47a8      	blx	r5
    2b68:	0002      	movs	r2, r0
    2b6a:	000b      	movs	r3, r1
    2b6c:	0030      	movs	r0, r6
    2b6e:	0039      	movs	r1, r7
    2b70:	4e20      	ldr	r6, [pc, #128]	; (2bf4 <KalmanBothUpdate+0x1c0>)
    2b72:	47b0      	blx	r6
    2b74:	4b1a      	ldr	r3, [pc, #104]	; (2be0 <KalmanBothUpdate+0x1ac>)
    2b76:	6018      	str	r0, [r3, #0]
    2b78:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    2b7a:	6922      	ldr	r2, [r4, #16]
    2b7c:	6963      	ldr	r3, [r4, #20]
    2b7e:	9806      	ldr	r0, [sp, #24]
    2b80:	9907      	ldr	r1, [sp, #28]
    2b82:	47a8      	blx	r5
    2b84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2b86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2b88:	47b0      	blx	r6
    2b8a:	69a2      	ldr	r2, [r4, #24]
    2b8c:	69e3      	ldr	r3, [r4, #28]
    2b8e:	0006      	movs	r6, r0
    2b90:	000f      	movs	r7, r1
    2b92:	9808      	ldr	r0, [sp, #32]
    2b94:	9909      	ldr	r1, [sp, #36]	; 0x24
    2b96:	47a8      	blx	r5
    2b98:	0002      	movs	r2, r0
    2b9a:	000b      	movs	r3, r1
    2b9c:	0030      	movs	r0, r6
    2b9e:	0039      	movs	r1, r7
    2ba0:	4e14      	ldr	r6, [pc, #80]	; (2bf4 <KalmanBothUpdate+0x1c0>)
    2ba2:	47b0      	blx	r6
    2ba4:	4b10      	ldr	r3, [pc, #64]	; (2be8 <KalmanBothUpdate+0x1b4>)
    2ba6:	6018      	str	r0, [r3, #0]
    2ba8:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    2baa:	6a22      	ldr	r2, [r4, #32]
    2bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2bae:	9806      	ldr	r0, [sp, #24]
    2bb0:	9907      	ldr	r1, [sp, #28]
    2bb2:	47a8      	blx	r5
    2bb4:	9a00      	ldr	r2, [sp, #0]
    2bb6:	9b01      	ldr	r3, [sp, #4]
    2bb8:	47b0      	blx	r6
    2bba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2bbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2bbe:	0006      	movs	r6, r0
    2bc0:	000f      	movs	r7, r1
    2bc2:	9808      	ldr	r0, [sp, #32]
    2bc4:	9909      	ldr	r1, [sp, #36]	; 0x24
    2bc6:	47a8      	blx	r5
    2bc8:	4c0a      	ldr	r4, [pc, #40]	; (2bf4 <KalmanBothUpdate+0x1c0>)
    2bca:	0002      	movs	r2, r0
    2bcc:	000b      	movs	r3, r1
    2bce:	0030      	movs	r0, r6
    2bd0:	0039      	movs	r1, r7
    2bd2:	47a0      	blx	r4
    2bd4:	4b05      	ldr	r3, [pc, #20]	; (2bec <KalmanBothUpdate+0x1b8>)
    2bd6:	6018      	str	r0, [r3, #0]
    2bd8:	6059      	str	r1, [r3, #4]
}
    2bda:	b00f      	add	sp, #60	; 0x3c
    2bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bde:	46c0      	nop			; (mov r8, r8)
    2be0:	20000328 	.word	0x20000328
    2be4:	0000626d 	.word	0x0000626d
    2be8:	20000308 	.word	0x20000308
    2bec:	200002e8 	.word	0x200002e8
    2bf0:	20000010 	.word	0x20000010
    2bf4:	000053e5 	.word	0x000053e5
    2bf8:	20000330 	.word	0x20000330
    2bfc:	20000348 	.word	0x20000348

00002c00 <computeKalmanStates>:

void computeKalmanStates() {
    2c00:	b5f0      	push	{r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2c02:	4b20      	ldr	r3, [pc, #128]	; (2c84 <computeKalmanStates+0x84>)
void computeKalmanStates() {
    2c04:	b085      	sub	sp, #20
    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2c06:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    2c08:	4a1f      	ldr	r2, [pc, #124]	; (2c88 <computeKalmanStates+0x88>)

    pressure = sample.pressureAltitude;
    2c0a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    2c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2c0e:	9300      	str	r3, [sp, #0]
    2c10:	9401      	str	r4, [sp, #4]
    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2c12:	6891      	ldr	r1, [r2, #8]
    2c14:	68d2      	ldr	r2, [r2, #12]

    if (altitude == 0) {
    2c16:	4c1d      	ldr	r4, [pc, #116]	; (2c8c <computeKalmanStates+0x8c>)
    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2c18:	9102      	str	r1, [sp, #8]
    2c1a:	9203      	str	r2, [sp, #12]
    if (altitude == 0) {
    2c1c:	6820      	ldr	r0, [r4, #0]
    2c1e:	6861      	ldr	r1, [r4, #4]
    2c20:	2200      	movs	r2, #0
    2c22:	2300      	movs	r3, #0
    2c24:	4d1a      	ldr	r5, [pc, #104]	; (2c90 <computeKalmanStates+0x90>)
    2c26:	47a8      	blx	r5
    2c28:	2800      	cmp	r0, #0
    2c2a:	d003      	beq.n	2c34 <computeKalmanStates+0x34>
        altitude = pressure;
    2c2c:	9a00      	ldr	r2, [sp, #0]
    2c2e:	9b01      	ldr	r3, [sp, #4]
    2c30:	6022      	str	r2, [r4, #0]
    2c32:	6063      	str	r3, [r4, #4]
    }


    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    2c34:	9800      	ldr	r0, [sp, #0]
    2c36:	9901      	ldr	r1, [sp, #4]
    2c38:	4e16      	ldr	r6, [pc, #88]	; (2c94 <computeKalmanStates+0x94>)
    2c3a:	4c17      	ldr	r4, [pc, #92]	; (2c98 <computeKalmanStates+0x98>)
    2c3c:	6832      	ldr	r2, [r6, #0]
    2c3e:	6873      	ldr	r3, [r6, #4]
    2c40:	47a0      	blx	r4
    accel_inovation = acceleration - estp[2];

    if (flightState > flightCoast) {
    2c42:	4b16      	ldr	r3, [pc, #88]	; (2c9c <computeKalmanStates+0x9c>)
    alt_inovation = pressure - estp[0];
    2c44:	0004      	movs	r4, r0
    if (flightState > flightCoast) {
    2c46:	781b      	ldrb	r3, [r3, #0]
    alt_inovation = pressure - estp[0];
    2c48:	000d      	movs	r5, r1
    if (flightState > flightCoast) {
    2c4a:	2b05      	cmp	r3, #5
    2c4c:	d903      	bls.n	2c56 <computeKalmanStates+0x56>
        KalmanBaroUpdate(alt_inovation);
    2c4e:	4b14      	ldr	r3, [pc, #80]	; (2ca0 <computeKalmanStates+0xa0>)
    2c50:	4798      	blx	r3
    } else {
        KalmanBothUpdate(alt_inovation, accel_inovation);
    }
}
    2c52:	b005      	add	sp, #20
    2c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2c56:	1c38      	adds	r0, r7, #0
    2c58:	4b12      	ldr	r3, [pc, #72]	; (2ca4 <computeKalmanStates+0xa4>)
    2c5a:	4798      	blx	r3
    2c5c:	9a02      	ldr	r2, [sp, #8]
    2c5e:	9b03      	ldr	r3, [sp, #12]
    2c60:	4f0d      	ldr	r7, [pc, #52]	; (2c98 <computeKalmanStates+0x98>)
    2c62:	47b8      	blx	r7
    2c64:	4a10      	ldr	r2, [pc, #64]	; (2ca8 <computeKalmanStates+0xa8>)
    2c66:	4b11      	ldr	r3, [pc, #68]	; (2cac <computeKalmanStates+0xac>)
    2c68:	4f11      	ldr	r7, [pc, #68]	; (2cb0 <computeKalmanStates+0xb0>)
    2c6a:	47b8      	blx	r7
    accel_inovation = acceleration - estp[2];
    2c6c:	6932      	ldr	r2, [r6, #16]
    2c6e:	6973      	ldr	r3, [r6, #20]
    2c70:	4e09      	ldr	r6, [pc, #36]	; (2c98 <computeKalmanStates+0x98>)
    2c72:	47b0      	blx	r6
    2c74:	0002      	movs	r2, r0
    2c76:	000b      	movs	r3, r1
        KalmanBothUpdate(alt_inovation, accel_inovation);
    2c78:	0020      	movs	r0, r4
    2c7a:	0029      	movs	r1, r5
    2c7c:	4c0d      	ldr	r4, [pc, #52]	; (2cb4 <computeKalmanStates+0xb4>)
    2c7e:	47a0      	blx	r4
}
    2c80:	e7e7      	b.n	2c52 <computeKalmanStates+0x52>
    2c82:	46c0      	nop			; (mov r8, r8)
    2c84:	200005f0 	.word	0x200005f0
    2c88:	20000150 	.word	0x20000150
    2c8c:	20000328 	.word	0x20000328
    2c90:	00005079 	.word	0x00005079
    2c94:	20000330 	.word	0x20000330
    2c98:	0000676d 	.word	0x0000676d
    2c9c:	200001ac 	.word	0x200001ac
    2ca0:	000028bd 	.word	0x000028bd
    2ca4:	00006f35 	.word	0x00006f35
    2ca8:	33daf8df 	.word	0x33daf8df
    2cac:	4040164b 	.word	0x4040164b
    2cb0:	0000626d 	.word	0x0000626d
    2cb4:	00002a35 	.word	0x00002a35

00002cb8 <makePage>:
u16_t flightAddressLocationInIndex;

u8_t flightStartAddress[3];


void makePage(u8_t bytesToWrite, u8_t* data) {
    2cb8:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    2cba:	4a1f      	ldr	r2, [pc, #124]	; (2d38 <makePage+0x80>)
    2cbc:	7814      	ldrb	r4, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    2cbe:	1903      	adds	r3, r0, r4
    2cc0:	2bff      	cmp	r3, #255	; 0xff
    2cc2:	dc0c      	bgt.n	2cde <makePage+0x26>
    2cc4:	2300      	movs	r3, #0
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
    2cc6:	4d1d      	ldr	r5, [pc, #116]	; (2d3c <makePage+0x84>)
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2cc8:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    2cca:	1965      	adds	r5, r4, r5
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2ccc:	b29e      	uxth	r6, r3
    2cce:	42b0      	cmp	r0, r6
    2cd0:	d322      	bcc.n	2d18 <makePage+0x60>
            pageBuffer[(dataByte + location)] = data[dataByte];
    2cd2:	5cce      	ldrb	r6, [r1, r3]
    2cd4:	54ee      	strb	r6, [r5, r3]
            bytesWritten++;
            pageLocation = location + dataByte;
    2cd6:	18e6      	adds	r6, r4, r3
    2cd8:	7016      	strb	r6, [r2, #0]
    2cda:	3301      	adds	r3, #1
    2cdc:	e7f6      	b.n	2ccc <makePage+0x14>
    2cde:	2300      	movs	r3, #0
    2ce0:	4d16      	ldr	r5, [pc, #88]	; (2d3c <makePage+0x84>)
    2ce2:	b2de      	uxtb	r6, r3
    2ce4:	46b4      	mov	ip, r6
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2ce6:	191e      	adds	r6, r3, r4
    2ce8:	2eff      	cmp	r6, #255	; 0xff
    2cea:	dd16      	ble.n	2d1a <makePage+0x62>
        pageLocation = 0x00;
    2cec:	2300      	movs	r3, #0
            pageToWrite[i] = pageBuffer[i];
    2cee:	4f14      	ldr	r7, [pc, #80]	; (2d40 <makePage+0x88>)
        pageLocation = 0x00;
    2cf0:	7013      	strb	r3, [r2, #0]
            pageToWrite[i] = pageBuffer[i];
    2cf2:	18ec      	adds	r4, r5, r3
    2cf4:	7826      	ldrb	r6, [r4, #0]
    2cf6:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    2cf8:	2600      	movs	r6, #0
    2cfa:	7026      	strb	r6, [r4, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
    2cfc:	2480      	movs	r4, #128	; 0x80
    2cfe:	3301      	adds	r3, #1
    2d00:	0064      	lsls	r4, r4, #1
    2d02:	42a3      	cmp	r3, r4
    2d04:	d1f5      	bne.n	2cf2 <makePage+0x3a>
    2d06:	4663      	mov	r3, ip
    2d08:	2500      	movs	r5, #0
            pageBuffer[dataByte] = data[bytesWritten];
    2d0a:	4f0c      	ldr	r7, [pc, #48]	; (2d3c <makePage+0x84>)
    2d0c:	1c6c      	adds	r4, r5, #1
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    2d0e:	4283      	cmp	r3, r0
    2d10:	d308      	bcc.n	2d24 <makePage+0x6c>
        pageReady = true;
    2d12:	2201      	movs	r2, #1
    2d14:	4b0b      	ldr	r3, [pc, #44]	; (2d44 <makePage+0x8c>)
    2d16:	701a      	strb	r2, [r3, #0]
        }
    }
}
    2d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
            pageBuffer[(dataByte + location)] = data[dataByte];
    2d1a:	5ccf      	ldrb	r7, [r1, r3]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2d1c:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    2d1e:	55af      	strb	r7, [r5, r6]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2d20:	b29b      	uxth	r3, r3
    2d22:	e7de      	b.n	2ce2 <makePage+0x2a>
            pageBuffer[dataByte] = data[bytesWritten];
    2d24:	4666      	mov	r6, ip
    2d26:	1936      	adds	r6, r6, r4
    2d28:	3e01      	subs	r6, #1
    2d2a:	5d8e      	ldrb	r6, [r1, r6]
            bytesWritten++;
    2d2c:	3301      	adds	r3, #1
            pageBuffer[dataByte] = data[bytesWritten];
    2d2e:	557e      	strb	r6, [r7, r5]
            bytesWritten++;
    2d30:	b2db      	uxtb	r3, r3
            pageLocation = dataByte + 1;
    2d32:	7014      	strb	r4, [r2, #0]
    2d34:	0025      	movs	r5, r4
    2d36:	e7e9      	b.n	2d0c <makePage+0x54>
    2d38:	200005e8 	.word	0x200005e8
    2d3c:	200001ae 	.word	0x200001ae
    2d40:	2000037a 	.word	0x2000037a
    2d44:	2000047a 	.word	0x2000047a

00002d48 <writePadBuffer>:

void writePadBuffer(u8_t bytesToWrite, u8_t* data) {
    2d48:	b570      	push	{r4, r5, r6, lr}
    2d4a:	4a0e      	ldr	r2, [pc, #56]	; (2d84 <writePadBuffer+0x3c>)
    2d4c:	4c0e      	ldr	r4, [pc, #56]	; (2d88 <writePadBuffer+0x40>)
    2d4e:	2300      	movs	r3, #0
    2d50:	e004      	b.n	2d5c <writePadBuffer+0x14>
    u8_t i, j;

    for (i = 1; i < 10; i++) {
        for (j = 0; j < bytesToWrite; j++) {
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
    2d52:	001d      	movs	r5, r3
    2d54:	5cd6      	ldrb	r6, [r2, r3]
    2d56:	3d23      	subs	r5, #35	; 0x23
    2d58:	5556      	strb	r6, [r2, r5]
    2d5a:	3301      	adds	r3, #1
        for (j = 0; j < bytesToWrite; j++) {
    2d5c:	b2dd      	uxtb	r5, r3
    2d5e:	42a8      	cmp	r0, r5
    2d60:	d8f7      	bhi.n	2d52 <writePadBuffer+0xa>
    2d62:	3223      	adds	r2, #35	; 0x23
    for (i = 1; i < 10; i++) {
    2d64:	42a2      	cmp	r2, r4
    2d66:	d1f2      	bne.n	2d4e <writePadBuffer+0x6>
    2d68:	2300      	movs	r3, #0
        }
    }

    for (i = 0; i < bytesToWrite ; i++) {
        padSensorBuffer[9][i] = data[i];
    2d6a:	4c08      	ldr	r4, [pc, #32]	; (2d8c <writePadBuffer+0x44>)
    for (i = 0; i < bytesToWrite ; i++) {
    2d6c:	b2da      	uxtb	r2, r3
    2d6e:	4290      	cmp	r0, r2
    2d70:	d800      	bhi.n	2d74 <writePadBuffer+0x2c>
    }
}
    2d72:	bd70      	pop	{r4, r5, r6, pc}
        padSensorBuffer[9][i] = data[i];
    2d74:	001a      	movs	r2, r3
    2d76:	5ccd      	ldrb	r5, [r1, r3]
    2d78:	323c      	adds	r2, #60	; 0x3c
    2d7a:	32ff      	adds	r2, #255	; 0xff
    2d7c:	54a5      	strb	r5, [r4, r2]
    2d7e:	3301      	adds	r3, #1
    2d80:	e7f4      	b.n	2d6c <writePadBuffer+0x24>
    2d82:	46c0      	nop			; (mov r8, r8)
    2d84:	200004a7 	.word	0x200004a7
    2d88:	200005e2 	.word	0x200005e2
    2d8c:	20000484 	.word	0x20000484

00002d90 <logFlight>:


void logFlight() {
    2d90:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    2d92:	2346      	movs	r3, #70	; 0x46
    2d94:	466a      	mov	r2, sp
    2d96:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    2d98:	2300      	movs	r3, #0

    offsets.TminusZeroTime = sample.sampleTick;

    dataToSend[2] = offsets.TminusZeroTime >> 0;
    2d9a:	4669      	mov	r1, sp
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    2d9c:	4668      	mov	r0, sp
    dataToSend[1] = 0;
    2d9e:	7053      	strb	r3, [r2, #1]
    offsets.TminusZeroTime = sample.sampleTick;
    2da0:	4b11      	ldr	r3, [pc, #68]	; (2de8 <logFlight+0x58>)
    2da2:	4a12      	ldr	r2, [pc, #72]	; (2dec <logFlight+0x5c>)
    2da4:	685b      	ldr	r3, [r3, #4]
    dataToSend[2] = offsets.TminusZeroTime >> 0;
    2da6:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    2da8:	0a19      	lsrs	r1, r3, #8
    offsets.TminusZeroTime = sample.sampleTick;
    2daa:	6053      	str	r3, [r2, #4]
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    2dac:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    2dae:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.TminusZeroTime >> 24;
    2db0:	0e1b      	lsrs	r3, r3, #24
    2db2:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    2db4:	6993      	ldr	r3, [r2, #24]
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    2db6:	7101      	strb	r1, [r0, #4]
    dataToSend[7] = offsets.groundOffset >> 8;
    2db8:	0a19      	lsrs	r1, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    2dba:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    2dbc:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    2dbe:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    2dc0:	0e1b      	lsrs	r3, r3, #24
    2dc2:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    2dc4:	6a13      	ldr	r3, [r2, #32]
    dataToSend[8] = offsets.groundOffset >> 16;
    2dc6:	7201      	strb	r1, [r0, #8]
    dataToSend[11] = offsets.groundTemperature >> 8;
    2dc8:	0a1a      	lsrs	r2, r3, #8
    dataToSend[10] = offsets.groundTemperature >> 0;
    2dca:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    2dcc:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    2dce:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    2dd0:	0e1b      	lsrs	r3, r3, #24
    2dd2:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    2dd4:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[12] = offsets.groundTemperature >> 16;
    2dd6:	7302      	strb	r2, [r0, #12]
    dataToSend[15] = 0xfe;
    2dd8:	73c3      	strb	r3, [r0, #15]
    dataToSend[9] = offsets.groundOffset >> 24;
    2dda:	4669      	mov	r1, sp

    makePage(bytesToSend, dataToSend);
    2ddc:	2010      	movs	r0, #16
    2dde:	4b04      	ldr	r3, [pc, #16]	; (2df0 <logFlight+0x60>)
    2de0:	4798      	blx	r3
}
    2de2:	b005      	add	sp, #20
    2de4:	bd00      	pop	{pc}
    2de6:	46c0      	nop			; (mov r8, r8)
    2de8:	200005f0 	.word	0x200005f0
    2dec:	20000150 	.word	0x20000150
    2df0:	00002cb9 	.word	0x00002cb9

00002df4 <logEvent>:

void logEvent(u8_t eventType) {
    2df4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;
    2df6:	4d12      	ldr	r5, [pc, #72]	; (2e40 <logEvent+0x4c>)
    2df8:	4b12      	ldr	r3, [pc, #72]	; (2e44 <logEvent+0x50>)
    2dfa:	686a      	ldr	r2, [r5, #4]
    2dfc:	685b      	ldr	r3, [r3, #4]

    dataToSend[0] = EVENT_LOG;
    2dfe:	ac01      	add	r4, sp, #4
    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;
    2e00:	1ad3      	subs	r3, r2, r3
    dataToSend[0] = EVENT_LOG;
    2e02:	2245      	movs	r2, #69	; 0x45
    2e04:	7022      	strb	r2, [r4, #0]
    dataToSend[1] = eventType;
    dataToSend[2] = eventTick >> 0;
    dataToSend[3] = eventTick >> 8;
    2e06:	0a1a      	lsrs	r2, r3, #8
    dataToSend[4] = eventTick >> 16;
    dataToSend[5] = eventTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    2e08:	4e0f      	ldr	r6, [pc, #60]	; (2e48 <logEvent+0x54>)
    dataToSend[2] = eventTick >> 0;
    2e0a:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = eventTick >> 8;
    2e0c:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = eventTick >> 16;
    2e0e:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = eventTick >> 24;
    2e10:	0e1b      	lsrs	r3, r3, #24
    dataToSend[4] = eventTick >> 16;
    2e12:	7122      	strb	r2, [r4, #4]
    dataToSend[5] = eventTick >> 24;
    2e14:	7163      	strb	r3, [r4, #5]
    dataToSend[1] = eventType;
    2e16:	7060      	strb	r0, [r4, #1]
    dataToSend[6] = altitudeAGL() >> 0;
    2e18:	47b0      	blx	r6
    2e1a:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 8;
    2e1c:	47b0      	blx	r6
    2e1e:	1200      	asrs	r0, r0, #8
    2e20:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 16;
    2e22:	47b0      	blx	r6
    2e24:	1400      	asrs	r0, r0, #16
    2e26:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = altitudeAGL() >> 24;
    2e28:	47b0      	blx	r6
    2e2a:	1600      	asrs	r0, r0, #24
    2e2c:	7260      	strb	r0, [r4, #9]

    dataToSend[10] = sample.voltage.batV >> 0;
    2e2e:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    2e30:	0021      	movs	r1, r4
    dataToSend[10] = sample.voltage.batV >> 0;
    2e32:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    2e34:	0a1b      	lsrs	r3, r3, #8
    2e36:	72e3      	strb	r3, [r4, #11]
    makePage(bytesToSend, dataToSend);
    2e38:	200c      	movs	r0, #12
    2e3a:	4b04      	ldr	r3, [pc, #16]	; (2e4c <logEvent+0x58>)
    2e3c:	4798      	blx	r3

}
    2e3e:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    2e40:	200005f0 	.word	0x200005f0
    2e44:	20000150 	.word	0x20000150
    2e48:	00000b75 	.word	0x00000b75
    2e4c:	00002cb9 	.word	0x00002cb9

00002e50 <logSensors>:

void logSensors() {

    writeLog = false;
    2e50:	2200      	movs	r2, #0
void logSensors() {
    2e52:	b5f0      	push	{r4, r5, r6, r7, lr}
    writeLog = false;
    2e54:	4b59      	ldr	r3, [pc, #356]	; (2fbc <logSensors+0x16c>)
void logSensors() {
    2e56:	b08f      	sub	sp, #60	; 0x3c
    writeLog = false;
    2e58:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = SENSOR_LOG_LENGTH;
    u8_t dataToSend[SENSOR_LOG_LENGTH];

    float fractionalAccel = accel - (int16_t)(accel);
    2e5a:	4b59      	ldr	r3, [pc, #356]	; (2fc0 <logSensors+0x170>)
    2e5c:	681e      	ldr	r6, [r3, #0]
    2e5e:	685f      	ldr	r7, [r3, #4]
    2e60:	4b58      	ldr	r3, [pc, #352]	; (2fc4 <logSensors+0x174>)
    2e62:	0039      	movs	r1, r7
    2e64:	0030      	movs	r0, r6
    2e66:	4798      	blx	r3
    2e68:	4d57      	ldr	r5, [pc, #348]	; (2fc8 <logSensors+0x178>)
    2e6a:	b200      	sxth	r0, r0
    2e6c:	47a8      	blx	r5
    2e6e:	4c57      	ldr	r4, [pc, #348]	; (2fcc <logSensors+0x17c>)
    2e70:	0002      	movs	r2, r0
    2e72:	000b      	movs	r3, r1
    2e74:	0030      	movs	r0, r6
    2e76:	0039      	movs	r1, r7
    2e78:	47a0      	blx	r4
    2e7a:	4f55      	ldr	r7, [pc, #340]	; (2fd0 <logSensors+0x180>)
    2e7c:	47b8      	blx	r7
    int16_t fractAccelPart = fractionalAccel * 1000;
    2e7e:	4b55      	ldr	r3, [pc, #340]	; (2fd4 <logSensors+0x184>)
    2e80:	4955      	ldr	r1, [pc, #340]	; (2fd8 <logSensors+0x188>)
    2e82:	4798      	blx	r3
    2e84:	4e55      	ldr	r6, [pc, #340]	; (2fdc <logSensors+0x18c>)
    2e86:	47b0      	blx	r6
    2e88:	b203      	sxth	r3, r0
    2e8a:	9301      	str	r3, [sp, #4]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    2e8c:	4b54      	ldr	r3, [pc, #336]	; (2fe0 <logSensors+0x190>)
    2e8e:	681a      	ldr	r2, [r3, #0]
    2e90:	685b      	ldr	r3, [r3, #4]
    2e92:	9202      	str	r2, [sp, #8]
    2e94:	9303      	str	r3, [sp, #12]
    2e96:	0010      	movs	r0, r2
    2e98:	0019      	movs	r1, r3
    2e9a:	4b4a      	ldr	r3, [pc, #296]	; (2fc4 <logSensors+0x174>)
    2e9c:	4798      	blx	r3
    2e9e:	b200      	sxth	r0, r0
    2ea0:	47a8      	blx	r5
    2ea2:	0002      	movs	r2, r0
    2ea4:	000b      	movs	r3, r1
    2ea6:	9802      	ldr	r0, [sp, #8]
    2ea8:	9903      	ldr	r1, [sp, #12]
    2eaa:	47a0      	blx	r4
    2eac:	47b8      	blx	r7
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2eae:	494a      	ldr	r1, [pc, #296]	; (2fd8 <logSensors+0x188>)
    2eb0:	4b48      	ldr	r3, [pc, #288]	; (2fd4 <logSensors+0x184>)
    2eb2:	4798      	blx	r3
    2eb4:	47b0      	blx	r6

    dataToSend[0] = SENSOR_LOG;
    2eb6:	2353      	movs	r3, #83	; 0x53

    dataToSend[1] = sample.sampleTick >> 0;
    2eb8:	4d4a      	ldr	r5, [pc, #296]	; (2fe4 <logSensors+0x194>)
    dataToSend[0] = SENSOR_LOG;
    2eba:	ac05      	add	r4, sp, #20
    2ebc:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = sample.sampleTick >> 0;
    2ebe:	686b      	ldr	r3, [r5, #4]
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2ec0:	b206      	sxth	r6, r0
    dataToSend[2] = sample.sampleTick >> 8;
    2ec2:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = sample.sampleTick >> 0;
    2ec4:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    2ec6:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    2ec8:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    2eca:	0e1b      	lsrs	r3, r3, #24
    dataToSend[3] = sample.sampleTick >> 16;
    2ecc:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    2ece:	7123      	strb	r3, [r4, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    2ed0:	4f45      	ldr	r7, [pc, #276]	; (2fe8 <logSensors+0x198>)
    2ed2:	47b8      	blx	r7
    2ed4:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    2ed6:	47b8      	blx	r7
    2ed8:	1200      	asrs	r0, r0, #8
    2eda:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    2edc:	47b8      	blx	r7
    2ede:	1400      	asrs	r0, r0, #16
    2ee0:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    2ee2:	47b8      	blx	r7

    dataToSend[9] = (int16_t)(accel) >> 0;
    2ee4:	4b36      	ldr	r3, [pc, #216]	; (2fc0 <logSensors+0x170>)
    dataToSend[8] = altitudeAGL() >> 24;
    2ee6:	1600      	asrs	r0, r0, #24
    2ee8:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = (int16_t)(accel) >> 0;
    2eea:	6818      	ldr	r0, [r3, #0]
    2eec:	6859      	ldr	r1, [r3, #4]
    2eee:	4b35      	ldr	r3, [pc, #212]	; (2fc4 <logSensors+0x174>)
    2ef0:	4798      	blx	r3
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2ef2:	466b      	mov	r3, sp
    2ef4:	791b      	ldrb	r3, [r3, #4]
    dataToSend[9] = (int16_t)(accel) >> 0;
    2ef6:	b200      	sxth	r0, r0
    dataToSend[11] = fractAccelPart >> 0;
    2ef8:	72e3      	strb	r3, [r4, #11]
    dataToSend[12] = fractAccelPart >> 8;
    2efa:	9b01      	ldr	r3, [sp, #4]
    dataToSend[9] = (int16_t)(accel) >> 0;
    2efc:	7260      	strb	r0, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    2efe:	1200      	asrs	r0, r0, #8
    2f00:	72a0      	strb	r0, [r4, #10]
    dataToSend[12] = fractAccelPart >> 8;
    2f02:	1218      	asrs	r0, r3, #8

    dataToSend[13] = (int16_t)(velocity) >> 0;
    2f04:	4b36      	ldr	r3, [pc, #216]	; (2fe0 <logSensors+0x190>)
    dataToSend[12] = fractAccelPart >> 8;
    2f06:	7320      	strb	r0, [r4, #12]
    dataToSend[13] = (int16_t)(velocity) >> 0;
    2f08:	6818      	ldr	r0, [r3, #0]
    2f0a:	6859      	ldr	r1, [r3, #4]
    2f0c:	4b2d      	ldr	r3, [pc, #180]	; (2fc4 <logSensors+0x174>)
    2f0e:	4798      	blx	r3
    2f10:	b200      	sxth	r0, r0
    2f12:	7360      	strb	r0, [r4, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    2f14:	73e6      	strb	r6, [r4, #15]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2f16:	1200      	asrs	r0, r0, #8
    dataToSend[16] = fractVelocityPart >> 8;
    2f18:	1236      	asrs	r6, r6, #8

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2f1a:	4b34      	ldr	r3, [pc, #208]	; (2fec <logSensors+0x19c>)
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2f1c:	73a0      	strb	r0, [r4, #14]
    dataToSend[16] = fractVelocityPart >> 8;
    2f1e:	7426      	strb	r6, [r4, #16]
    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2f20:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2f22:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    2f24:	4798      	blx	r3
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    2f26:	0a03      	lsrs	r3, r0, #8
    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2f28:	7460      	strb	r0, [r4, #17]
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    2f2a:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    2f2c:	0c03      	lsrs	r3, r0, #16
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;
    2f2e:	0e00      	lsrs	r0, r0, #24
    2f30:	7520      	strb	r0, [r4, #20]
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    2f32:	74e3      	strb	r3, [r4, #19]

    dataToSend[21] = sample.accelXint >> 0;
    2f34:	2220      	movs	r2, #32
    2f36:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    makePage(bytesToSend, dataToSend);
    2f38:	0021      	movs	r1, r4
    dataToSend[21] = sample.accelXint >> 0;
    2f3a:	7563      	strb	r3, [r4, #21]
    dataToSend[22] = sample.accelXint >> 8;
    2f3c:	121b      	asrs	r3, r3, #8
    2f3e:	75a3      	strb	r3, [r4, #22]
    dataToSend[23] = sample.accelYint >> 0;
    2f40:	2228      	movs	r2, #40	; 0x28
    2f42:	5eab      	ldrsh	r3, [r5, r2]
    makePage(bytesToSend, dataToSend);
    2f44:	2023      	movs	r0, #35	; 0x23
    dataToSend[23] = sample.accelYint >> 0;
    2f46:	75e3      	strb	r3, [r4, #23]
    dataToSend[24] = sample.accelYint >> 8;
    2f48:	121b      	asrs	r3, r3, #8
    2f4a:	7623      	strb	r3, [r4, #24]
    dataToSend[25] = sample.accelZint >> 0;
    2f4c:	2230      	movs	r2, #48	; 0x30
    2f4e:	5eab      	ldrsh	r3, [r5, r2]
    2f50:	7663      	strb	r3, [r4, #25]
    dataToSend[26] = sample.accelZint >> 8;
    2f52:	121b      	asrs	r3, r3, #8
    2f54:	76a3      	strb	r3, [r4, #26]
    dataToSend[27] = sample.gyroXint >> 0;
    2f56:	2238      	movs	r2, #56	; 0x38
    2f58:	5eab      	ldrsh	r3, [r5, r2]
    2f5a:	76e3      	strb	r3, [r4, #27]
    dataToSend[28] = sample.gyroXint >> 8;
    2f5c:	121b      	asrs	r3, r3, #8
    2f5e:	7723      	strb	r3, [r4, #28]
    dataToSend[29] = sample.gyroYint >> 0;
    2f60:	1cab      	adds	r3, r5, #2
    2f62:	223e      	movs	r2, #62	; 0x3e
    2f64:	5e9b      	ldrsh	r3, [r3, r2]
    2f66:	7763      	strb	r3, [r4, #29]
    dataToSend[30] = sample.gyroYint >> 8;
    2f68:	121b      	asrs	r3, r3, #8
    2f6a:	77a3      	strb	r3, [r4, #30]
    dataToSend[31] = sample.gyroZint >> 0;
    2f6c:	002b      	movs	r3, r5
    2f6e:	3348      	adds	r3, #72	; 0x48
    2f70:	2200      	movs	r2, #0
    2f72:	5e9b      	ldrsh	r3, [r3, r2]
    dataToSend[32] = sample.gyroZint >> 8;
    2f74:	aa04      	add	r2, sp, #16
    dataToSend[31] = sample.gyroZint >> 0;
    2f76:	77e3      	strb	r3, [r4, #31]
    dataToSend[32] = sample.gyroZint >> 8;
    2f78:	3205      	adds	r2, #5
    2f7a:	121b      	asrs	r3, r3, #8
    2f7c:	77d3      	strb	r3, [r2, #31]
    dataToSend[33] = sample.analogRaw >> 0;
    2f7e:	8b2b      	ldrh	r3, [r5, #24]
    2f80:	aa04      	add	r2, sp, #16
    2f82:	3206      	adds	r2, #6
    2f84:	77d3      	strb	r3, [r2, #31]
    dataToSend[34] = sample.analogRaw >> 8;
    2f86:	aa04      	add	r2, sp, #16
    2f88:	3207      	adds	r2, #7
    2f8a:	0a1b      	lsrs	r3, r3, #8
    2f8c:	77d3      	strb	r3, [r2, #31]
    makePage(bytesToSend, dataToSend);
    2f8e:	4b18      	ldr	r3, [pc, #96]	; (2ff0 <logSensors+0x1a0>)
    2f90:	4798      	blx	r3

    if (pageReady) {
    2f92:	4b18      	ldr	r3, [pc, #96]	; (2ff4 <logSensors+0x1a4>)
    2f94:	781a      	ldrb	r2, [r3, #0]
    2f96:	2a00      	cmp	r2, #0
    2f98:	d00e      	beq.n	2fb8 <logSensors+0x168>
        pageReady = false;
    2f9a:	2200      	movs	r2, #0
    2f9c:	701a      	strb	r2, [r3, #0]
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    2f9e:	2280      	movs	r2, #128	; 0x80
    2fa0:	4b15      	ldr	r3, [pc, #84]	; (2ff8 <logSensors+0x1a8>)
        pinToggle(LedPin);
        AT25SEWritePage(currentAddress,pageToWrite);
    2fa2:	4c16      	ldr	r4, [pc, #88]	; (2ffc <logSensors+0x1ac>)
    2fa4:	0352      	lsls	r2, r2, #13
    2fa6:	61da      	str	r2, [r3, #28]
    2fa8:	4915      	ldr	r1, [pc, #84]	; (3000 <logSensors+0x1b0>)
    2faa:	4b16      	ldr	r3, [pc, #88]	; (3004 <logSensors+0x1b4>)
    2fac:	6820      	ldr	r0, [r4, #0]
    2fae:	4798      	blx	r3
        currentAddress = (currentAddress + 0x100);
    2fb0:	6823      	ldr	r3, [r4, #0]
    2fb2:	3301      	adds	r3, #1
    2fb4:	33ff      	adds	r3, #255	; 0xff
    2fb6:	6023      	str	r3, [r4, #0]
    }

}
    2fb8:	b00f      	add	sp, #60	; 0x3c
    2fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fbc:	2000019a 	.word	0x2000019a
    2fc0:	200002e8 	.word	0x200002e8
    2fc4:	00006dd9 	.word	0x00006dd9
    2fc8:	00006e41 	.word	0x00006e41
    2fcc:	0000676d 	.word	0x0000676d
    2fd0:	00006fd9 	.word	0x00006fd9
    2fd4:	00005165 	.word	0x00005165
    2fd8:	447a0000 	.word	0x447a0000
    2fdc:	000053a5 	.word	0x000053a5
    2fe0:	20000308 	.word	0x20000308
    2fe4:	200005f0 	.word	0x200005f0
    2fe8:	00000b75 	.word	0x00000b75
    2fec:	00005129 	.word	0x00005129
    2ff0:	00002cb9 	.word	0x00002cb9
    2ff4:	2000047a 	.word	0x2000047a
    2ff8:	41004400 	.word	0x41004400
    2ffc:	20000480 	.word	0x20000480
    3000:	2000037a 	.word	0x2000037a
    3004:	000002a5 	.word	0x000002a5

00003008 <logSensorsOnPad>:

void logSensorsOnPad() {

    writeLog = false;
    3008:	2200      	movs	r2, #0
void logSensorsOnPad() {
    300a:	b5f0      	push	{r4, r5, r6, r7, lr}
    writeLog = false;
    300c:	4b50      	ldr	r3, [pc, #320]	; (3150 <logSensorsOnPad+0x148>)
void logSensorsOnPad() {
    300e:	b08f      	sub	sp, #60	; 0x3c
    writeLog = false;
    3010:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = SENSOR_LOG_LENGTH;
    u8_t dataToSend[SENSOR_LOG_LENGTH];

    float fractionalAccel = accel - (int16_t)(accel);
    3012:	4b50      	ldr	r3, [pc, #320]	; (3154 <logSensorsOnPad+0x14c>)
    3014:	681c      	ldr	r4, [r3, #0]
    3016:	685d      	ldr	r5, [r3, #4]
    3018:	4b4f      	ldr	r3, [pc, #316]	; (3158 <logSensorsOnPad+0x150>)
    301a:	0029      	movs	r1, r5
    301c:	0020      	movs	r0, r4
    301e:	4798      	blx	r3
    3020:	4e4e      	ldr	r6, [pc, #312]	; (315c <logSensorsOnPad+0x154>)
    3022:	b200      	sxth	r0, r0
    3024:	47b0      	blx	r6
    3026:	4f4e      	ldr	r7, [pc, #312]	; (3160 <logSensorsOnPad+0x158>)
    3028:	0002      	movs	r2, r0
    302a:	000b      	movs	r3, r1
    302c:	0020      	movs	r0, r4
    302e:	0029      	movs	r1, r5
    3030:	47b8      	blx	r7
    3032:	4c4c      	ldr	r4, [pc, #304]	; (3164 <logSensorsOnPad+0x15c>)
    3034:	47a0      	blx	r4
    int16_t fractAccelPart = fractionalAccel * 1000;
    3036:	4d4c      	ldr	r5, [pc, #304]	; (3168 <logSensorsOnPad+0x160>)
    3038:	494c      	ldr	r1, [pc, #304]	; (316c <logSensorsOnPad+0x164>)
    303a:	47a8      	blx	r5
    303c:	4b4c      	ldr	r3, [pc, #304]	; (3170 <logSensorsOnPad+0x168>)
    303e:	4798      	blx	r3
    3040:	b203      	sxth	r3, r0
    3042:	9301      	str	r3, [sp, #4]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    3044:	4b4b      	ldr	r3, [pc, #300]	; (3174 <logSensorsOnPad+0x16c>)
    3046:	681a      	ldr	r2, [r3, #0]
    3048:	685b      	ldr	r3, [r3, #4]
    304a:	9202      	str	r2, [sp, #8]
    304c:	9303      	str	r3, [sp, #12]
    304e:	0010      	movs	r0, r2
    3050:	0019      	movs	r1, r3
    3052:	4b41      	ldr	r3, [pc, #260]	; (3158 <logSensorsOnPad+0x150>)
    3054:	4798      	blx	r3
    3056:	b200      	sxth	r0, r0
    3058:	47b0      	blx	r6
    305a:	0002      	movs	r2, r0
    305c:	000b      	movs	r3, r1
    305e:	9802      	ldr	r0, [sp, #8]
    3060:	9903      	ldr	r1, [sp, #12]
    3062:	47b8      	blx	r7
    3064:	47a0      	blx	r4
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    3066:	4941      	ldr	r1, [pc, #260]	; (316c <logSensorsOnPad+0x164>)
    3068:	47a8      	blx	r5
    306a:	4b41      	ldr	r3, [pc, #260]	; (3170 <logSensorsOnPad+0x168>)
    306c:	4798      	blx	r3

    dataToSend[0] = SENSOR_LOG;
    306e:	2353      	movs	r3, #83	; 0x53

    dataToSend[1] = sample.sampleTick >> 0;
    3070:	4d41      	ldr	r5, [pc, #260]	; (3178 <logSensorsOnPad+0x170>)
    dataToSend[0] = SENSOR_LOG;
    3072:	ac05      	add	r4, sp, #20
    3074:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = sample.sampleTick >> 0;
    3076:	686b      	ldr	r3, [r5, #4]
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    3078:	b206      	sxth	r6, r0
    dataToSend[2] = sample.sampleTick >> 8;
    307a:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = sample.sampleTick >> 0;
    307c:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    307e:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    3080:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    3082:	0e1b      	lsrs	r3, r3, #24
    dataToSend[3] = sample.sampleTick >> 16;
    3084:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    3086:	7123      	strb	r3, [r4, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    3088:	4f3c      	ldr	r7, [pc, #240]	; (317c <logSensorsOnPad+0x174>)
    308a:	47b8      	blx	r7
    308c:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    308e:	47b8      	blx	r7
    3090:	1200      	asrs	r0, r0, #8
    3092:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    3094:	47b8      	blx	r7
    3096:	1400      	asrs	r0, r0, #16
    3098:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    309a:	47b8      	blx	r7

    dataToSend[9] = (int16_t)(accel) >> 0;
    309c:	4b2d      	ldr	r3, [pc, #180]	; (3154 <logSensorsOnPad+0x14c>)
    dataToSend[8] = altitudeAGL() >> 24;
    309e:	1600      	asrs	r0, r0, #24
    30a0:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = (int16_t)(accel) >> 0;
    30a2:	6818      	ldr	r0, [r3, #0]
    30a4:	6859      	ldr	r1, [r3, #4]
    30a6:	4b2c      	ldr	r3, [pc, #176]	; (3158 <logSensorsOnPad+0x150>)
    30a8:	4798      	blx	r3
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    30aa:	466b      	mov	r3, sp
    30ac:	791b      	ldrb	r3, [r3, #4]
    dataToSend[9] = (int16_t)(accel) >> 0;
    30ae:	b200      	sxth	r0, r0
    dataToSend[11] = fractAccelPart >> 0;
    30b0:	72e3      	strb	r3, [r4, #11]
    dataToSend[12] = fractAccelPart >> 8;
    30b2:	9b01      	ldr	r3, [sp, #4]
    dataToSend[9] = (int16_t)(accel) >> 0;
    30b4:	7260      	strb	r0, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    30b6:	1200      	asrs	r0, r0, #8
    30b8:	72a0      	strb	r0, [r4, #10]
    dataToSend[12] = fractAccelPart >> 8;
    30ba:	1218      	asrs	r0, r3, #8

    dataToSend[13] = (int16_t)(velocity) >> 0;
    30bc:	4b2d      	ldr	r3, [pc, #180]	; (3174 <logSensorsOnPad+0x16c>)
    dataToSend[12] = fractAccelPart >> 8;
    30be:	7320      	strb	r0, [r4, #12]
    dataToSend[13] = (int16_t)(velocity) >> 0;
    30c0:	6818      	ldr	r0, [r3, #0]
    30c2:	6859      	ldr	r1, [r3, #4]
    30c4:	4b24      	ldr	r3, [pc, #144]	; (3158 <logSensorsOnPad+0x150>)
    30c6:	4798      	blx	r3
    30c8:	b200      	sxth	r0, r0
    30ca:	7360      	strb	r0, [r4, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    30cc:	73e6      	strb	r6, [r4, #15]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    30ce:	1200      	asrs	r0, r0, #8
    dataToSend[16] = fractVelocityPart >> 8;
    30d0:	1236      	asrs	r6, r6, #8
    dataToSend[14] = (int16_t)(velocity) >> 8;
    30d2:	73a0      	strb	r0, [r4, #14]

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    30d4:	4b2a      	ldr	r3, [pc, #168]	; (3180 <logSensorsOnPad+0x178>)
    30d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
    30d8:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    dataToSend[16] = fractVelocityPart >> 8;
    30da:	7426      	strb	r6, [r4, #16]
    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    30dc:	4798      	blx	r3
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    30de:	0a03      	lsrs	r3, r0, #8
    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    30e0:	7460      	strb	r0, [r4, #17]
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    30e2:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    30e4:	0c03      	lsrs	r3, r0, #16
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;
    30e6:	0e00      	lsrs	r0, r0, #24
    30e8:	7520      	strb	r0, [r4, #20]
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    30ea:	74e3      	strb	r3, [r4, #19]

    dataToSend[21] = sample.accelXint >> 0;
    30ec:	2220      	movs	r2, #32
    30ee:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    writePadBuffer(bytesToSend, dataToSend);
    30f0:	0021      	movs	r1, r4
    dataToSend[21] = sample.accelXint >> 0;
    30f2:	7563      	strb	r3, [r4, #21]
    dataToSend[22] = sample.accelXint >> 8;
    30f4:	121b      	asrs	r3, r3, #8
    30f6:	75a3      	strb	r3, [r4, #22]
    dataToSend[23] = sample.accelYint >> 0;
    30f8:	2228      	movs	r2, #40	; 0x28
    30fa:	5eab      	ldrsh	r3, [r5, r2]
    writePadBuffer(bytesToSend, dataToSend);
    30fc:	2023      	movs	r0, #35	; 0x23
    dataToSend[23] = sample.accelYint >> 0;
    30fe:	75e3      	strb	r3, [r4, #23]
    dataToSend[24] = sample.accelYint >> 8;
    3100:	121b      	asrs	r3, r3, #8
    3102:	7623      	strb	r3, [r4, #24]
    dataToSend[25] = sample.accelZint >> 0;
    3104:	2230      	movs	r2, #48	; 0x30
    3106:	5eab      	ldrsh	r3, [r5, r2]
    3108:	7663      	strb	r3, [r4, #25]
    dataToSend[26] = sample.accelZint >> 8;
    310a:	121b      	asrs	r3, r3, #8
    310c:	76a3      	strb	r3, [r4, #26]
    dataToSend[27] = sample.gyroXint >> 0;
    310e:	2238      	movs	r2, #56	; 0x38
    3110:	5eab      	ldrsh	r3, [r5, r2]
    3112:	76e3      	strb	r3, [r4, #27]
    dataToSend[28] = sample.gyroXint >> 8;
    3114:	121b      	asrs	r3, r3, #8
    3116:	7723      	strb	r3, [r4, #28]
    dataToSend[29] = sample.gyroYint >> 0;
    3118:	1cab      	adds	r3, r5, #2
    311a:	223e      	movs	r2, #62	; 0x3e
    311c:	5e9b      	ldrsh	r3, [r3, r2]
    311e:	7763      	strb	r3, [r4, #29]
    dataToSend[30] = sample.gyroYint >> 8;
    3120:	121b      	asrs	r3, r3, #8
    3122:	77a3      	strb	r3, [r4, #30]
    dataToSend[31] = sample.gyroZint >> 0;
    3124:	002b      	movs	r3, r5
    3126:	3348      	adds	r3, #72	; 0x48
    3128:	2200      	movs	r2, #0
    312a:	5e9b      	ldrsh	r3, [r3, r2]
    dataToSend[32] = sample.gyroZint >> 8;
    312c:	aa04      	add	r2, sp, #16
    dataToSend[31] = sample.gyroZint >> 0;
    312e:	77e3      	strb	r3, [r4, #31]
    dataToSend[32] = sample.gyroZint >> 8;
    3130:	3205      	adds	r2, #5
    3132:	121b      	asrs	r3, r3, #8
    3134:	77d3      	strb	r3, [r2, #31]
    dataToSend[33] = sample.analogRaw >> 0;
    3136:	8b2b      	ldrh	r3, [r5, #24]
    3138:	aa04      	add	r2, sp, #16
    313a:	3206      	adds	r2, #6
    313c:	77d3      	strb	r3, [r2, #31]
    dataToSend[34] = sample.analogRaw >> 8;
    313e:	aa04      	add	r2, sp, #16
    3140:	3207      	adds	r2, #7
    3142:	0a1b      	lsrs	r3, r3, #8
    3144:	77d3      	strb	r3, [r2, #31]
    writePadBuffer(bytesToSend, dataToSend);
    3146:	4b0f      	ldr	r3, [pc, #60]	; (3184 <logSensorsOnPad+0x17c>)
    3148:	4798      	blx	r3

}
    314a:	b00f      	add	sp, #60	; 0x3c
    314c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    314e:	46c0      	nop			; (mov r8, r8)
    3150:	2000019a 	.word	0x2000019a
    3154:	200002e8 	.word	0x200002e8
    3158:	00006dd9 	.word	0x00006dd9
    315c:	00006e41 	.word	0x00006e41
    3160:	0000676d 	.word	0x0000676d
    3164:	00006fd9 	.word	0x00006fd9
    3168:	00005165 	.word	0x00005165
    316c:	447a0000 	.word	0x447a0000
    3170:	000053a5 	.word	0x000053a5
    3174:	20000308 	.word	0x20000308
    3178:	200005f0 	.word	0x200005f0
    317c:	00000b75 	.word	0x00000b75
    3180:	00005129 	.word	0x00005129
    3184:	00002d49 	.word	0x00002d49

00003188 <getFlightStartAddress>:



u32_t getFlightStartAddress(u8_t flightToFind) {
    3188:	b513      	push	{r0, r1, r4, lr}
    318a:	0003      	movs	r3, r0

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);
    318c:	2006      	movs	r0, #6
    318e:	4358      	muls	r0, r3

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    3190:	ac01      	add	r4, sp, #4
    3192:	3001      	adds	r0, #1
    3194:	30ff      	adds	r0, #255	; 0xff
    3196:	0022      	movs	r2, r4
    3198:	2103      	movs	r1, #3
    319a:	4b05      	ldr	r3, [pc, #20]	; (31b0 <getFlightStartAddress+0x28>)
    319c:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    319e:	7860      	ldrb	r0, [r4, #1]
    31a0:	78a3      	ldrb	r3, [r4, #2]
    31a2:	0200      	lsls	r0, r0, #8
    31a4:	041b      	lsls	r3, r3, #16
    31a6:	4318      	orrs	r0, r3
    31a8:	7823      	ldrb	r3, [r4, #0]
    31aa:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    31ac:	bd16      	pop	{r1, r2, r4, pc}
    31ae:	46c0      	nop			; (mov r8, r8)
    31b0:	00000301 	.word	0x00000301

000031b4 <FindFlightEndingAddress>:

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    31b4:	b513      	push	{r0, r1, r4, lr}
    31b6:	0003      	movs	r3, r0

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);
    31b8:	2006      	movs	r0, #6
    31ba:	4358      	muls	r0, r3

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    31bc:	ac01      	add	r4, sp, #4
    31be:	3004      	adds	r0, #4
    31c0:	30ff      	adds	r0, #255	; 0xff
    31c2:	0022      	movs	r2, r4
    31c4:	2103      	movs	r1, #3
    31c6:	4b05      	ldr	r3, [pc, #20]	; (31dc <FindFlightEndingAddress+0x28>)
    31c8:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    31ca:	7860      	ldrb	r0, [r4, #1]
    31cc:	78a3      	ldrb	r3, [r4, #2]
    31ce:	0200      	lsls	r0, r0, #8
    31d0:	041b      	lsls	r3, r3, #16
    31d2:	4318      	orrs	r0, r3
    31d4:	7823      	ldrb	r3, [r4, #0]
    31d6:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    31d8:	bd16      	pop	{r1, r2, r4, pc}
    31da:	46c0      	nop			; (mov r8, r8)
    31dc:	00000301 	.word	0x00000301

000031e0 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    31e0:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    31e2:	4b04      	ldr	r3, [pc, #16]	; (31f4 <isFlightLogged+0x14>)
    31e4:	4798      	blx	r3

    if (possibleStart == 0xFFFFFF) {
    31e6:	4b04      	ldr	r3, [pc, #16]	; (31f8 <isFlightLogged+0x18>)
    31e8:	18c0      	adds	r0, r0, r3
    31ea:	1e43      	subs	r3, r0, #1
    31ec:	4198      	sbcs	r0, r3
    31ee:	b2c0      	uxtb	r0, r0
        return false;
    } else {
        return true;
    }
}
    31f0:	bd10      	pop	{r4, pc}
    31f2:	46c0      	nop			; (mov r8, r8)
    31f4:	00003189 	.word	0x00003189
    31f8:	ff000001 	.word	0xff000001

000031fc <writeFlightStartAddress>:

void writeFlightStartAddress() {
    31fc:	b510      	push	{r4, lr}
    AT25SFWriteBytes(flightAddressLocationInIndex,3,flightStartAddress);
    31fe:	4b03      	ldr	r3, [pc, #12]	; (320c <writeFlightStartAddress+0x10>)
    3200:	4a03      	ldr	r2, [pc, #12]	; (3210 <writeFlightStartAddress+0x14>)
    3202:	8818      	ldrh	r0, [r3, #0]
    3204:	2103      	movs	r1, #3
    3206:	4b03      	ldr	r3, [pc, #12]	; (3214 <writeFlightStartAddress+0x18>)
    3208:	4798      	blx	r3
}
    320a:	bd10      	pop	{r4, pc}
    320c:	20000378 	.word	0x20000378
    3210:	2000047b 	.word	0x2000047b
    3214:	00000241 	.word	0x00000241

00003218 <writeFlightEndAddress>:




void writeFlightEndAddress() {
    3218:	b507      	push	{r0, r1, r2, lr}

    u32_t endingAddress = currentAddress;
    321a:	4b0a      	ldr	r3, [pc, #40]	; (3244 <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    321c:	aa01      	add	r2, sp, #4
    u32_t endingAddress = currentAddress;
    321e:	681b      	ldr	r3, [r3, #0]
    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    3220:	7013      	strb	r3, [r2, #0]
    3222:	0a19      	lsrs	r1, r3, #8
    3224:	0c1b      	lsrs	r3, r3, #16
    3226:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    3228:	4b07      	ldr	r3, [pc, #28]	; (3248 <writeFlightEndAddress+0x30>)
    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    322a:	7051      	strb	r1, [r2, #1]
    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    322c:	7818      	ldrb	r0, [r3, #0]
    322e:	2306      	movs	r3, #6
    3230:	4358      	muls	r0, r3
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    3232:	3004      	adds	r0, #4
    3234:	30ff      	adds	r0, #255	; 0xff
    3236:	2103      	movs	r1, #3
    3238:	4b04      	ldr	r3, [pc, #16]	; (324c <writeFlightEndAddress+0x34>)
    323a:	4798      	blx	r3
    delay_ms(10);
    323c:	200a      	movs	r0, #10
    323e:	4b04      	ldr	r3, [pc, #16]	; (3250 <writeFlightEndAddress+0x38>)
    3240:	4798      	blx	r3
}
    3242:	bd07      	pop	{r0, r1, r2, pc}
    3244:	20000480 	.word	0x20000480
    3248:	2000019b 	.word	0x2000019b
    324c:	00000241 	.word	0x00000241
    3250:	00001185 	.word	0x00001185

00003254 <writeGroundLog>:

void writeGroundLog() {
    3254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3256:	2780      	movs	r7, #128	; 0x80
    3258:	4c0d      	ldr	r4, [pc, #52]	; (3290 <writeGroundLog+0x3c>)
    325a:	4e0e      	ldr	r6, [pc, #56]	; (3294 <writeGroundLog+0x40>)
    325c:	037f      	lsls	r7, r7, #13
    u8_t i;

    for (i = 0; i < 10; i++) {
        makePage(SENSOR_LOG_LENGTH, &padSensorBuffer[i][0]);
    325e:	4b0e      	ldr	r3, [pc, #56]	; (3298 <writeGroundLog+0x44>)
    3260:	0021      	movs	r1, r4
    3262:	2023      	movs	r0, #35	; 0x23
    3264:	4798      	blx	r3

        if (pageReady) {
    3266:	4b0d      	ldr	r3, [pc, #52]	; (329c <writeGroundLog+0x48>)
    3268:	781a      	ldrb	r2, [r3, #0]
    326a:	2a00      	cmp	r2, #0
    326c:	d00c      	beq.n	3288 <writeGroundLog+0x34>
            pageReady = false;
    326e:	2200      	movs	r2, #0
    3270:	701a      	strb	r2, [r3, #0]
    3272:	4b0b      	ldr	r3, [pc, #44]	; (32a0 <writeGroundLog+0x4c>)
            pinToggle(LedPin);
            AT25SEWritePage(currentAddress,pageToWrite);
    3274:	4d0b      	ldr	r5, [pc, #44]	; (32a4 <writeGroundLog+0x50>)
    3276:	61df      	str	r7, [r3, #28]
    3278:	490b      	ldr	r1, [pc, #44]	; (32a8 <writeGroundLog+0x54>)
    327a:	4b0c      	ldr	r3, [pc, #48]	; (32ac <writeGroundLog+0x58>)
    327c:	6828      	ldr	r0, [r5, #0]
    327e:	4798      	blx	r3
            currentAddress = (currentAddress + 0x100);
    3280:	682b      	ldr	r3, [r5, #0]
    3282:	3301      	adds	r3, #1
    3284:	33ff      	adds	r3, #255	; 0xff
    3286:	602b      	str	r3, [r5, #0]
    3288:	3423      	adds	r4, #35	; 0x23
    for (i = 0; i < 10; i++) {
    328a:	42b4      	cmp	r4, r6
    328c:	d1e7      	bne.n	325e <writeGroundLog+0xa>
        }

    }

}
    328e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3290:	20000484 	.word	0x20000484
    3294:	200005e2 	.word	0x200005e2
    3298:	00002cb9 	.word	0x00002cb9
    329c:	2000047a 	.word	0x2000047a
    32a0:	41004400 	.word	0x41004400
    32a4:	20000480 	.word	0x20000480
    32a8:	2000037a 	.word	0x2000037a
    32ac:	000002a5 	.word	0x000002a5

000032b0 <beginFlightLog>:

void beginFlightLog() {
    32b0:	b510      	push	{r4, lr}
    writeFlightStartAddress();
    32b2:	4b05      	ldr	r3, [pc, #20]	; (32c8 <beginFlightLog+0x18>)
    32b4:	4798      	blx	r3
    logFlight( );
    32b6:	4b05      	ldr	r3, [pc, #20]	; (32cc <beginFlightLog+0x1c>)
    32b8:	4798      	blx	r3
    writeGroundLog();
    32ba:	4b05      	ldr	r3, [pc, #20]	; (32d0 <beginFlightLog+0x20>)
    32bc:	4798      	blx	r3
    logEvent('L');
    32be:	204c      	movs	r0, #76	; 0x4c
    32c0:	4b04      	ldr	r3, [pc, #16]	; (32d4 <beginFlightLog+0x24>)
    32c2:	4798      	blx	r3

}
    32c4:	bd10      	pop	{r4, pc}
    32c6:	46c0      	nop			; (mov r8, r8)
    32c8:	000031fd 	.word	0x000031fd
    32cc:	00002d91 	.word	0x00002d91
    32d0:	00003255 	.word	0x00003255
    32d4:	00002df5 	.word	0x00002df5

000032d8 <findNewFlightStart>:


void findNewFlightStart() {
    32d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    32da:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    32dc:	0020      	movs	r0, r4
    32de:	4b1d      	ldr	r3, [pc, #116]	; (3354 <findNewFlightStart+0x7c>)
    32e0:	4798      	blx	r3
    32e2:	2800      	cmp	r0, #0
    32e4:	d130      	bne.n	3348 <findNewFlightStart+0x70>
    32e6:	4f1c      	ldr	r7, [pc, #112]	; (3358 <findNewFlightStart+0x80>)
    32e8:	4d1c      	ldr	r5, [pc, #112]	; (335c <findNewFlightStart+0x84>)

            if (flightNumbToCheck > 0) {
    32ea:	2c00      	cmp	r4, #0
    32ec:	d01d      	beq.n	332a <findNewFlightStart+0x52>

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    32ee:	1e60      	subs	r0, r4, #1
    32f0:	4b1b      	ldr	r3, [pc, #108]	; (3360 <findNewFlightStart+0x88>)
    32f2:	b2c0      	uxtb	r0, r0
    32f4:	4798      	blx	r3
    32f6:	0006      	movs	r6, r0
                delay_ms(5);
    32f8:	4b1a      	ldr	r3, [pc, #104]	; (3364 <findNewFlightStart+0x8c>)
    32fa:	2005      	movs	r0, #5
    32fc:	4798      	blx	r3

                currentAddress = startAddress;

                flightStartAddress[0] = startAddress >> 0;
                flightStartAddress[1] = startAddress >> 8;
    32fe:	0a33      	lsrs	r3, r6, #8
    3300:	706b      	strb	r3, [r5, #1]
                flightStartAddress[2] = startAddress >> 16;

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    3302:	2306      	movs	r3, #6
    3304:	4363      	muls	r3, r4
    3306:	4a18      	ldr	r2, [pc, #96]	; (3368 <findNewFlightStart+0x90>)
    3308:	3301      	adds	r3, #1
                currentAddress = startAddress;
    330a:	603e      	str	r6, [r7, #0]
                flightStartAddress[0] = startAddress >> 0;
    330c:	702e      	strb	r6, [r5, #0]
                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    330e:	33ff      	adds	r3, #255	; 0xff
                flightStartAddress[2] = startAddress >> 16;
    3310:	0c36      	lsrs	r6, r6, #16
    3312:	70ae      	strb	r6, [r5, #2]
                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    3314:	8013      	strh	r3, [r2, #0]
                flightAddressLocationInIndex = FLIGHTZEROSTART;

                currentAddress = 0x001000;
                beep(1000);
            }
            flightNumb = flightNumbToCheck;
    3316:	4b15      	ldr	r3, [pc, #84]	; (336c <findNewFlightStart+0x94>)

            beepDigit(flightNumb);
    3318:	0020      	movs	r0, r4
            flightNumb = flightNumbToCheck;
    331a:	701c      	strb	r4, [r3, #0]
            beepDigit(flightNumb);
    331c:	4b14      	ldr	r3, [pc, #80]	; (3370 <findNewFlightStart+0x98>)
    331e:	4798      	blx	r3
            delay_ms(1000);
    3320:	20fa      	movs	r0, #250	; 0xfa
    3322:	4b10      	ldr	r3, [pc, #64]	; (3364 <findNewFlightStart+0x8c>)
    3324:	0080      	lsls	r0, r0, #2
    3326:	4798      	blx	r3
            break;
        }
    }
}
    3328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                flightStartAddress[1] = 0x10;
    332a:	2310      	movs	r3, #16
                flightAddressLocationInIndex = FLIGHTZEROSTART;
    332c:	4a0e      	ldr	r2, [pc, #56]	; (3368 <findNewFlightStart+0x90>)
                flightStartAddress[1] = 0x10;
    332e:	706b      	strb	r3, [r5, #1]
                flightAddressLocationInIndex = FLIGHTZEROSTART;
    3330:	33f0      	adds	r3, #240	; 0xf0
    3332:	8013      	strh	r3, [r2, #0]
                currentAddress = 0x001000;
    3334:	2380      	movs	r3, #128	; 0x80
                beep(1000);
    3336:	20fa      	movs	r0, #250	; 0xfa
                currentAddress = 0x001000;
    3338:	015b      	lsls	r3, r3, #5
    333a:	603b      	str	r3, [r7, #0]
                beep(1000);
    333c:	0080      	lsls	r0, r0, #2
    333e:	4b0d      	ldr	r3, [pc, #52]	; (3374 <findNewFlightStart+0x9c>)
                flightStartAddress[0] = 0x00;
    3340:	702c      	strb	r4, [r5, #0]
                flightStartAddress[2] = 0x00;
    3342:	70ac      	strb	r4, [r5, #2]
                beep(1000);
    3344:	4798      	blx	r3
    3346:	e7e6      	b.n	3316 <findNewFlightStart+0x3e>
    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    3348:	3401      	adds	r4, #1
    334a:	b2e4      	uxtb	r4, r4
    334c:	2c14      	cmp	r4, #20
    334e:	d1c5      	bne.n	32dc <findNewFlightStart+0x4>
    3350:	e7ea      	b.n	3328 <findNewFlightStart+0x50>
    3352:	46c0      	nop			; (mov r8, r8)
    3354:	000031e1 	.word	0x000031e1
    3358:	20000480 	.word	0x20000480
    335c:	2000047b 	.word	0x2000047b
    3360:	000031b5 	.word	0x000031b5
    3364:	00001185 	.word	0x00001185
    3368:	20000378 	.word	0x20000378
    336c:	2000019b 	.word	0x2000019b
    3370:	00000ed1 	.word	0x00000ed1
    3374:	00000e8d 	.word	0x00000e8d

00003378 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    3378:	4b01      	ldr	r3, [pc, #4]	; (3380 <takeSample+0x8>)
    337a:	7818      	ldrb	r0, [r3, #0]
}
    337c:	4770      	bx	lr
    337e:	46c0      	nop			; (mov r8, r8)
    3380:	200001ad 	.word	0x200001ad

00003384 <pullSample>:

void pullSample() {
    SampleBool = true;
    3384:	2201      	movs	r2, #1
    3386:	4b01      	ldr	r3, [pc, #4]	; (338c <pullSample+0x8>)
    3388:	701a      	strb	r2, [r3, #0]
}
    338a:	4770      	bx	lr
    338c:	200001ad 	.word	0x200001ad

00003390 <sampleTick>:
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    3390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    SampleBool = false;
    3392:	2200      	movs	r2, #0
    3394:	4ba2      	ldr	r3, [pc, #648]	; (3620 <sampleTick+0x290>)

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    3396:	4fa3      	ldr	r7, [pc, #652]	; (3624 <sampleTick+0x294>)
    SampleBool = false;
    3398:	701a      	strb	r2, [r3, #0]
    sample.sampleTick = millis();
    339a:	4ba3      	ldr	r3, [pc, #652]	; (3628 <sampleTick+0x298>)
    u32_t lastTick = sample.sampleTick;
    339c:	687c      	ldr	r4, [r7, #4]
    sample.sampleTick = millis();
    339e:	4798      	blx	r3
    33a0:	6078      	str	r0, [r7, #4]
    sample.tickDelta = sample.sampleTick - lastTick;
    33a2:	1b00      	subs	r0, r0, r4

    sample.voltage.batV = adc_read(senseBatPin);
    33a4:	4ca1      	ldr	r4, [pc, #644]	; (362c <sampleTick+0x29c>)
    sample.tickDelta = sample.sampleTick - lastTick;
    33a6:	8038      	strh	r0, [r7, #0]
    sample.voltage.batV = adc_read(senseBatPin);
    33a8:	7863      	ldrb	r3, [r4, #1]
    33aa:	7820      	ldrb	r0, [r4, #0]
    33ac:	021b      	lsls	r3, r3, #8
    33ae:	4303      	orrs	r3, r0
    33b0:	78a0      	ldrb	r0, [r4, #2]
    33b2:	4e9f      	ldr	r6, [pc, #636]	; (3630 <sampleTick+0x2a0>)
    33b4:	0400      	lsls	r0, r0, #16
    33b6:	4303      	orrs	r3, r0
    33b8:	78e0      	ldrb	r0, [r4, #3]
    33ba:	7921      	ldrb	r1, [r4, #4]
    33bc:	0600      	lsls	r0, r0, #24
    33be:	4318      	orrs	r0, r3
    33c0:	47b0      	blx	r6

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    33c2:	4b9c      	ldr	r3, [pc, #624]	; (3634 <sampleTick+0x2a4>)
    sample.voltage.batV = adc_read(senseBatPin);
    33c4:	8138      	strh	r0, [r7, #8]
    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    33c6:	4798      	blx	r3
    33c8:	4a9b      	ldr	r2, [pc, #620]	; (3638 <sampleTick+0x2a8>)
    33ca:	4d9c      	ldr	r5, [pc, #624]	; (363c <sampleTick+0x2ac>)
    33cc:	4b9c      	ldr	r3, [pc, #624]	; (3640 <sampleTick+0x2b0>)
    33ce:	47a8      	blx	r5
    33d0:	4b9c      	ldr	r3, [pc, #624]	; (3644 <sampleTick+0x2b4>)
    33d2:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    33d4:	79a3      	ldrb	r3, [r4, #6]
    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    33d6:	60f8      	str	r0, [r7, #12]
    sample.voltage.senseA = adc_read(senseAPin);
    33d8:	7960      	ldrb	r0, [r4, #5]
    33da:	021b      	lsls	r3, r3, #8
    33dc:	4303      	orrs	r3, r0
    33de:	79e0      	ldrb	r0, [r4, #7]
    33e0:	7a61      	ldrb	r1, [r4, #9]
    33e2:	0400      	lsls	r0, r0, #16
    33e4:	4303      	orrs	r3, r0
    33e6:	7a20      	ldrb	r0, [r4, #8]
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    33e8:	4d97      	ldr	r5, [pc, #604]	; (3648 <sampleTick+0x2b8>)
    sample.voltage.senseA = adc_read(senseAPin);
    33ea:	0600      	lsls	r0, r0, #24
    33ec:	4318      	orrs	r0, r3
    33ee:	47b0      	blx	r6
    sample.voltage.senseB = adc_read(senseBPin);
    33f0:	7ae3      	ldrb	r3, [r4, #11]
    sample.voltage.senseA = adc_read(senseAPin);
    33f2:	8238      	strh	r0, [r7, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    33f4:	7aa0      	ldrb	r0, [r4, #10]
    33f6:	021b      	lsls	r3, r3, #8
    33f8:	4303      	orrs	r3, r0
    33fa:	7b20      	ldrb	r0, [r4, #12]
    33fc:	7ba1      	ldrb	r1, [r4, #14]
    33fe:	0400      	lsls	r0, r0, #16
    3400:	4303      	orrs	r3, r0
    3402:	7b60      	ldrb	r0, [r4, #13]
    3404:	0600      	lsls	r0, r0, #24
    3406:	4318      	orrs	r0, r3
    3408:	47b0      	blx	r6
    sample.voltage.senseC = adc_read(senseCPin);
    340a:	7c23      	ldrb	r3, [r4, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    340c:	8278      	strh	r0, [r7, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    340e:	7be0      	ldrb	r0, [r4, #15]
    3410:	021b      	lsls	r3, r3, #8
    3412:	4303      	orrs	r3, r0
    3414:	7c60      	ldrb	r0, [r4, #17]
    3416:	7ce1      	ldrb	r1, [r4, #19]
    3418:	0400      	lsls	r0, r0, #16
    341a:	4303      	orrs	r3, r0
    341c:	7ca0      	ldrb	r0, [r4, #18]
    341e:	0600      	lsls	r0, r0, #24
    3420:	4318      	orrs	r0, r3
    3422:	47b0      	blx	r6
    sample.voltage.senseD = adc_read(senseDPin);
    3424:	7d63      	ldrb	r3, [r4, #21]
    sample.voltage.senseC = adc_read(senseCPin);
    3426:	82b8      	strh	r0, [r7, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    3428:	7d20      	ldrb	r0, [r4, #20]
    342a:	021b      	lsls	r3, r3, #8
    342c:	4303      	orrs	r3, r0
    342e:	7da0      	ldrb	r0, [r4, #22]
    3430:	7e21      	ldrb	r1, [r4, #24]
    3432:	0400      	lsls	r0, r0, #16
    3434:	4303      	orrs	r3, r0
    3436:	7de0      	ldrb	r0, [r4, #23]
    3438:	0600      	lsls	r0, r0, #24
    343a:	4318      	orrs	r0, r3
    343c:	47b0      	blx	r6
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    343e:	2310      	movs	r3, #16
    sample.voltage.senseD = adc_read(senseDPin);
    3440:	82f8      	strh	r0, [r7, #22]
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    3442:	88aa      	ldrh	r2, [r5, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    3444:	7e60      	ldrb	r0, [r4, #25]
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    3446:	4313      	orrs	r3, r2
    3448:	80ab      	strh	r3, [r5, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;
    344a:	2304      	movs	r3, #4
    344c:	70ab      	strb	r3, [r5, #2]
    sample.analogRaw = adc_read(analogAccelPin);
    344e:	7ea3      	ldrb	r3, [r4, #26]
    3450:	7f61      	ldrb	r1, [r4, #29]
    3452:	021b      	lsls	r3, r3, #8
    3454:	4303      	orrs	r3, r0
    3456:	7ee0      	ldrb	r0, [r4, #27]
    3458:	0400      	lsls	r0, r0, #16
    345a:	4303      	orrs	r3, r0
    345c:	7f20      	ldrb	r0, [r4, #28]
    345e:	0600      	lsls	r0, r0, #24
    3460:	4318      	orrs	r0, r3
    3462:	47b0      	blx	r6
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    3464:	4b79      	ldr	r3, [pc, #484]	; (364c <sampleTick+0x2bc>)
    sample.analogRaw = adc_read(analogAccelPin);
    3466:	8338      	strh	r0, [r7, #24]
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    3468:	18c0      	adds	r0, r0, r3
    346a:	4b72      	ldr	r3, [pc, #456]	; (3634 <sampleTick+0x2a4>)
    346c:	4798      	blx	r3
    346e:	4a78      	ldr	r2, [pc, #480]	; (3650 <sampleTick+0x2c0>)
    3470:	4c72      	ldr	r4, [pc, #456]	; (363c <sampleTick+0x2ac>)
    3472:	4b78      	ldr	r3, [pc, #480]	; (3654 <sampleTick+0x2c4>)
    3474:	47a0      	blx	r4
    3476:	4b73      	ldr	r3, [pc, #460]	; (3644 <sampleTick+0x2b4>)
    3478:	4798      	blx	r3



    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    347a:	2300      	movs	r3, #0
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    347c:	2680      	movs	r6, #128	; 0x80
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    347e:	61f8      	str	r0, [r7, #28]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    3480:	70ab      	strb	r3, [r5, #2]
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_12BIT;
    3482:	88ab      	ldrh	r3, [r5, #4]
    3484:	01f6      	lsls	r6, r6, #7
    3486:	b29b      	uxth	r3, r3
    3488:	80ab      	strh	r3, [r5, #4]
    348a:	4d73      	ldr	r5, [pc, #460]	; (3658 <sampleTick+0x2c8>)

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    348c:	2150      	movs	r1, #80	; 0x50
    348e:	4c73      	ldr	r4, [pc, #460]	; (365c <sampleTick+0x2cc>)
    3490:	616e      	str	r6, [r5, #20]
    3492:	2002      	movs	r0, #2
    3494:	47a0      	blx	r4
    pinHigh(cs_baro);
    delay_us(600);
    3496:	2096      	movs	r0, #150	; 0x96
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    3498:	61ae      	str	r6, [r5, #24]
    349a:	0080      	lsls	r0, r0, #2
    349c:	4b70      	ldr	r3, [pc, #448]	; (3660 <sampleTick+0x2d0>)
    349e:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    34a0:	4b70      	ldr	r3, [pc, #448]	; (3664 <sampleTick+0x2d4>)
    34a2:	4798      	blx	r3

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    34a4:	2140      	movs	r1, #64	; 0x40
    uint32_t tempRaw = readMS5803AdcResults();
    34a6:	9001      	str	r0, [sp, #4]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    34a8:	616e      	str	r6, [r5, #20]
    spiDataOut(BARO_SPI, 0x40);
    34aa:	2002      	movs	r0, #2
    34ac:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    34ae:	61ae      	str	r6, [r5, #24]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    34b0:	2680      	movs	r6, #128	; 0x80
    34b2:	4b6d      	ldr	r3, [pc, #436]	; (3668 <sampleTick+0x2d8>)
    34b4:	00f6      	lsls	r6, r6, #3

    u8_t byteOne;
    u8_t byteTwo;
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    34b6:	2182      	movs	r1, #130	; 0x82
    34b8:	601e      	str	r6, [r3, #0]
    34ba:	2000      	movs	r0, #0
    34bc:	47a0      	blx	r4
    byteOne = spiDataIn(ACCEL_SPI);
    34be:	4c6b      	ldr	r4, [pc, #428]	; (366c <sampleTick+0x2dc>)
    34c0:	2000      	movs	r0, #0
    34c2:	47a0      	blx	r4
    34c4:	9000      	str	r0, [sp, #0]
    byteTwo = spiDataIn(ACCEL_SPI);
    34c6:	2000      	movs	r0, #0
    34c8:	47a0      	blx	r4
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    34ca:	9b00      	ldr	r3, [sp, #0]
    34cc:	0200      	lsls	r0, r0, #8
    34ce:	4303      	orrs	r3, r0
    byteOne = spiDataIn(ACCEL_SPI);
    34d0:	2000      	movs	r0, #0
    sample.accelXint = twosComp(byteOne,byteTwo);
    34d2:	843b      	strh	r3, [r7, #32]
    byteOne = spiDataIn(ACCEL_SPI);
    34d4:	47a0      	blx	r4
    34d6:	9000      	str	r0, [sp, #0]
    byteTwo = spiDataIn(ACCEL_SPI);
    34d8:	2000      	movs	r0, #0
    34da:	47a0      	blx	r4
    u16_t comp = byteOne | (byteTwo << 8);
    34dc:	9b00      	ldr	r3, [sp, #0]
    34de:	0200      	lsls	r0, r0, #8
    34e0:	4303      	orrs	r3, r0
    byteOne = spiDataIn(ACCEL_SPI);
    34e2:	2000      	movs	r0, #0
    sample.accelYint = twosComp(byteOne,byteTwo);
    34e4:	853b      	strh	r3, [r7, #40]	; 0x28
    byteOne = spiDataIn(ACCEL_SPI);
    34e6:	47a0      	blx	r4
    34e8:	9000      	str	r0, [sp, #0]
    byteTwo = spiDataIn(ACCEL_SPI);
    34ea:	2000      	movs	r0, #0
    34ec:	47a0      	blx	r4
    u16_t comp = byteOne | (byteTwo << 8);
    34ee:	9b00      	ldr	r3, [sp, #0]
    34f0:	0204      	lsls	r4, r0, #8
    34f2:	4323      	orrs	r3, r4
    34f4:	b21c      	sxth	r4, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    34f6:	4b5e      	ldr	r3, [pc, #376]	; (3670 <sampleTick+0x2e0>)
    34f8:	601e      	str	r6, [r3, #0]
    if (altimeter.pointingUp) {
    34fa:	4b5e      	ldr	r3, [pc, #376]	; (3674 <sampleTick+0x2e4>)
    34fc:	795a      	ldrb	r2, [r3, #5]
    34fe:	9500      	str	r5, [sp, #0]
    3500:	2120      	movs	r1, #32
    3502:	5e7b      	ldrsh	r3, [r7, r1]
    3504:	2a00      	cmp	r2, #0
    3506:	d000      	beq.n	350a <sampleTick+0x17a>
        sample.accelXint =  -sample.accelXint >> 4;
    3508:	425b      	negs	r3, r3
        sample.accelXint =  sample.accelXint >> 4;
    350a:	111b      	asrs	r3, r3, #4
    350c:	843b      	strh	r3, [r7, #32]
    sample.accelYint =  sample.accelYint >> 4;
    350e:	2328      	movs	r3, #40	; 0x28
    3510:	5efd      	ldrsh	r5, [r7, r3]
    sample.accelZint =  sample.accelZint >> 4;
    3512:	1124      	asrs	r4, r4, #4
    sample.accelYint =  sample.accelYint >> 4;
    3514:	112d      	asrs	r5, r5, #4
    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    3516:	2320      	movs	r3, #32
    3518:	5ef8      	ldrsh	r0, [r7, r3]
    sample.accelYint =  sample.accelYint >> 4;
    351a:	853d      	strh	r5, [r7, #40]	; 0x28
    sample.accelZint =  sample.accelZint >> 4;
    351c:	863c      	strh	r4, [r7, #48]	; 0x30
    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    351e:	4b45      	ldr	r3, [pc, #276]	; (3634 <sampleTick+0x2a4>)
    3520:	4798      	blx	r3
    3522:	23fe      	movs	r3, #254	; 0xfe
    3524:	4e45      	ldr	r6, [pc, #276]	; (363c <sampleTick+0x2ac>)
    3526:	2200      	movs	r2, #0
    3528:	059b      	lsls	r3, r3, #22
    352a:	47b0      	blx	r6
    352c:	4b45      	ldr	r3, [pc, #276]	; (3644 <sampleTick+0x2b4>)
    352e:	4798      	blx	r3
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    3530:	4b40      	ldr	r3, [pc, #256]	; (3634 <sampleTick+0x2a4>)
    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    3532:	6278      	str	r0, [r7, #36]	; 0x24
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    3534:	0028      	movs	r0, r5
    3536:	4798      	blx	r3
    3538:	23fe      	movs	r3, #254	; 0xfe
    353a:	2200      	movs	r2, #0
    353c:	059b      	lsls	r3, r3, #22
    353e:	47b0      	blx	r6
    3540:	4b40      	ldr	r3, [pc, #256]	; (3644 <sampleTick+0x2b4>)
    3542:	4798      	blx	r3
    sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    3544:	4b3b      	ldr	r3, [pc, #236]	; (3634 <sampleTick+0x2a4>)
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    3546:	62f8      	str	r0, [r7, #44]	; 0x2c
    sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    3548:	0020      	movs	r0, r4
    354a:	4798      	blx	r3
    354c:	23fe      	movs	r3, #254	; 0xfe
    354e:	2200      	movs	r2, #0
    3550:	059b      	lsls	r3, r3, #22
    3552:	47b0      	blx	r6
    3554:	4b3b      	ldr	r3, [pc, #236]	; (3644 <sampleTick+0x2b4>)
    3556:	4798      	blx	r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    3558:	2380      	movs	r3, #128	; 0x80
    355a:	9a00      	ldr	r2, [sp, #0]
    355c:	00db      	lsls	r3, r3, #3
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    355e:	2182      	movs	r1, #130	; 0x82
    sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    3560:	6378      	str	r0, [r7, #52]	; 0x34
    3562:	6153      	str	r3, [r2, #20]
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    3564:	2000      	movs	r0, #0
    3566:	4b3d      	ldr	r3, [pc, #244]	; (365c <sampleTick+0x2cc>)
    3568:	4798      	blx	r3
    byteOne = spiDataIn(GYRO_SPI);
    356a:	4c40      	ldr	r4, [pc, #256]	; (366c <sampleTick+0x2dc>)
    356c:	2000      	movs	r0, #0
    356e:	47a0      	blx	r4
    3570:	0005      	movs	r5, r0
    byteTwo = spiDataIn(GYRO_SPI);
    3572:	2000      	movs	r0, #0
    3574:	47a0      	blx	r4
    u16_t comp = byteOne | (byteTwo << 8);
    3576:	0200      	lsls	r0, r0, #8
    3578:	4305      	orrs	r5, r0
    byteOne = spiDataIn(GYRO_SPI);
    357a:	2000      	movs	r0, #0
    sample.gyroXint = twosComp(byteOne,byteTwo);
    357c:	873d      	strh	r5, [r7, #56]	; 0x38
    byteOne = spiDataIn(GYRO_SPI);
    357e:	47a0      	blx	r4
    3580:	0005      	movs	r5, r0
    byteTwo = spiDataIn(GYRO_SPI);
    3582:	2000      	movs	r0, #0
    3584:	47a0      	blx	r4
    u16_t comp = byteOne | (byteTwo << 8);
    3586:	0200      	lsls	r0, r0, #8
    3588:	4328      	orrs	r0, r5
    sample.gyroYint = twosComp(byteOne,byteTwo);
    358a:	1cbd      	adds	r5, r7, #2
    358c:	87e8      	strh	r0, [r5, #62]	; 0x3e
    byteOne = spiDataIn(GYRO_SPI);
    358e:	2000      	movs	r0, #0
    3590:	47a0      	blx	r4
    3592:	0006      	movs	r6, r0
    byteTwo = spiDataIn(GYRO_SPI);
    3594:	2000      	movs	r0, #0
    3596:	47a0      	blx	r4
    3598:	0003      	movs	r3, r0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    359a:	2280      	movs	r2, #128	; 0x80
    u16_t comp = byteOne | (byteTwo << 8);
    359c:	021b      	lsls	r3, r3, #8
    359e:	431e      	orrs	r6, r3
    sample.gyroZint = sample.gyroZint >> 4;
    35a0:	003b      	movs	r3, r7
    35a2:	9900      	ldr	r1, [sp, #0]
    35a4:	00d2      	lsls	r2, r2, #3
    35a6:	618a      	str	r2, [r1, #24]
    sample.gyroXint = sample.gyroXint >> 4;
    35a8:	2238      	movs	r2, #56	; 0x38
    35aa:	5eb8      	ldrsh	r0, [r7, r2]
    sample.gyroZint = sample.gyroZint >> 4;
    35ac:	b236      	sxth	r6, r6
    sample.gyroXint = sample.gyroXint >> 4;
    35ae:	1100      	asrs	r0, r0, #4
    35b0:	8738      	strh	r0, [r7, #56]	; 0x38
    sample.gyroYint = sample.gyroYint >> 4;
    35b2:	223e      	movs	r2, #62	; 0x3e
    35b4:	5eac      	ldrsh	r4, [r5, r2]
    sample.gyroZint = sample.gyroZint >> 4;
    35b6:	1136      	asrs	r6, r6, #4
    sample.gyroYint = sample.gyroYint >> 4;
    35b8:	1124      	asrs	r4, r4, #4
    sample.gyroZint = sample.gyroZint >> 4;
    35ba:	3348      	adds	r3, #72	; 0x48
    35bc:	801e      	strh	r6, [r3, #0]
    sample.gyroYint = sample.gyroYint >> 4;
    35be:	87ec      	strh	r4, [r5, #62]	; 0x3e
    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    35c0:	4b1c      	ldr	r3, [pc, #112]	; (3634 <sampleTick+0x2a4>)
    35c2:	4798      	blx	r3
    35c4:	23fe      	movs	r3, #254	; 0xfe
    35c6:	4d1d      	ldr	r5, [pc, #116]	; (363c <sampleTick+0x2ac>)
    35c8:	2200      	movs	r2, #0
    35ca:	059b      	lsls	r3, r3, #22
    35cc:	47a8      	blx	r5
    35ce:	4b1d      	ldr	r3, [pc, #116]	; (3644 <sampleTick+0x2b4>)
    35d0:	4798      	blx	r3
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    35d2:	4b18      	ldr	r3, [pc, #96]	; (3634 <sampleTick+0x2a4>)
    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    35d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    35d6:	0020      	movs	r0, r4
    35d8:	4798      	blx	r3
    35da:	23fe      	movs	r3, #254	; 0xfe
    35dc:	2200      	movs	r2, #0
    35de:	059b      	lsls	r3, r3, #22
    35e0:	47a8      	blx	r5
    35e2:	4b18      	ldr	r3, [pc, #96]	; (3644 <sampleTick+0x2b4>)
    35e4:	4798      	blx	r3
    sample.gyroZ =  sample.gyroZint * BMI055_GYRO_2000DS_DIV;
    35e6:	4b13      	ldr	r3, [pc, #76]	; (3634 <sampleTick+0x2a4>)
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    35e8:	6478      	str	r0, [r7, #68]	; 0x44
    sample.gyroZ =  sample.gyroZint * BMI055_GYRO_2000DS_DIV;
    35ea:	0030      	movs	r0, r6
    35ec:	4798      	blx	r3
    35ee:	23fe      	movs	r3, #254	; 0xfe
    35f0:	2200      	movs	r2, #0
    35f2:	059b      	lsls	r3, r3, #22
    35f4:	47a8      	blx	r5
    35f6:	4b13      	ldr	r3, [pc, #76]	; (3644 <sampleTick+0x2b4>)
    35f8:	4798      	blx	r3
    35fa:	64f8      	str	r0, [r7, #76]	; 0x4c
    delay_us(400);
    35fc:	20c8      	movs	r0, #200	; 0xc8
    35fe:	4b18      	ldr	r3, [pc, #96]	; (3660 <sampleTick+0x2d0>)
    3600:	0040      	lsls	r0, r0, #1
    3602:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    3604:	4b17      	ldr	r3, [pc, #92]	; (3664 <sampleTick+0x2d4>)
    3606:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    3608:	4a1b      	ldr	r2, [pc, #108]	; (3678 <sampleTick+0x2e8>)
    360a:	9901      	ldr	r1, [sp, #4]
    360c:	4b1b      	ldr	r3, [pc, #108]	; (367c <sampleTick+0x2ec>)
    360e:	4c1c      	ldr	r4, [pc, #112]	; (3680 <sampleTick+0x2f0>)
    3610:	47a0      	blx	r4
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
    3612:	6d38      	ldr	r0, [r7, #80]	; 0x50
    3614:	4b1b      	ldr	r3, [pc, #108]	; (3684 <sampleTick+0x2f4>)
    3616:	4798      	blx	r3
    3618:	65b8      	str	r0, [r7, #88]	; 0x58
    361a:	65f9      	str	r1, [r7, #92]	; 0x5c
}
    361c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    361e:	46c0      	nop			; (mov r8, r8)
    3620:	200001ad 	.word	0x200001ad
    3624:	200005f0 	.word	0x200005f0
    3628:	000011cd 	.word	0x000011cd
    362c:	0000717c 	.word	0x0000717c
    3630:	00000e21 	.word	0x00000e21
    3634:	00006e41 	.word	0x00006e41
    3638:	a97e132b 	.word	0xa97e132b
    363c:	0000626d 	.word	0x0000626d
    3640:	3f65379f 	.word	0x3f65379f
    3644:	00006fd9 	.word	0x00006fd9
    3648:	42004000 	.word	0x42004000
    364c:	ffff41c9 	.word	0xffff41c9
    3650:	abb44e51 	.word	0xabb44e51
    3654:	3f73f290 	.word	0x3f73f290
    3658:	41004400 	.word	0x41004400
    365c:	000037ad 	.word	0x000037ad
    3660:	00001155 	.word	0x00001155
    3664:	000003b5 	.word	0x000003b5
    3668:	41004494 	.word	0x41004494
    366c:	000037c5 	.word	0x000037c5
    3670:	41004498 	.word	0x41004498
    3674:	200001a0 	.word	0x200001a0
    3678:	20000644 	.word	0x20000644
    367c:	20000640 	.word	0x20000640
    3680:	000003f5 	.word	0x000003f5
    3684:	0000049d 	.word	0x0000049d

00003688 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    3688:	b570      	push	{r4, r5, r6, lr}
    368a:	0005      	movs	r5, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    368c:	2301      	movs	r3, #1
    368e:	1cae      	adds	r6, r5, #2
    3690:	40b3      	lsls	r3, r6
void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    3692:	000c      	movs	r4, r1
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    3694:	490b      	ldr	r1, [pc, #44]	; (36c4 <sercomClockEnable+0x3c>)
    3696:	6a08      	ldr	r0, [r1, #32]
    3698:	4303      	orrs	r3, r0
    369a:	620b      	str	r3, [r1, #32]


    if (clock_channel != 0) {
    369c:	2c00      	cmp	r4, #0
    369e:	d003      	beq.n	36a8 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    36a0:	2107      	movs	r1, #7
    36a2:	0020      	movs	r0, r4
    36a4:	4b08      	ldr	r3, [pc, #32]	; (36c8 <sercomClockEnable+0x40>)
    36a6:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(clock_channel) |
    36a8:	23f0      	movs	r3, #240	; 0xf0
    36aa:	0224      	lsls	r4, r4, #8
    36ac:	011b      	lsls	r3, r3, #4
    36ae:	401c      	ands	r4, r3
    36b0:	2380      	movs	r3, #128	; 0x80
    36b2:	01db      	lsls	r3, r3, #7
    36b4:	431c      	orrs	r4, r3
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
    36b6:	233f      	movs	r3, #63	; 0x3f
    36b8:	3514      	adds	r5, #20
    36ba:	401d      	ands	r5, r3
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    36bc:	4b03      	ldr	r3, [pc, #12]	; (36cc <sercomClockEnable+0x44>)
                        GCLK_CLKCTRL_GEN(clock_channel) |
    36be:	4325      	orrs	r5, r4
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    36c0:	805d      	strh	r5, [r3, #2]
}
    36c2:	bd70      	pop	{r4, r5, r6, pc}
    36c4:	40000400 	.word	0x40000400
    36c8:	00001081 	.word	0x00001081
    36cc:	40000c00 	.word	0x40000c00

000036d0 <sercomReset>:
    return (Sercom*) (0x42000800U + id * 1024);
    36d0:	4b04      	ldr	r3, [pc, #16]	; (36e4 <sercomReset+0x14>)
    36d2:	0280      	lsls	r0, r0, #10
    36d4:	18c0      	adds	r0, r0, r3
//                         GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    36d6:	2301      	movs	r3, #1
    36d8:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    36da:	6802      	ldr	r2, [r0, #0]
    36dc:	421a      	tst	r2, r3
    36de:	d1fc      	bne.n	36da <sercomReset+0xa>
}
    36e0:	4770      	bx	lr
    36e2:	46c0      	nop			; (mov r8, r8)
    36e4:	42000800 	.word	0x42000800

000036e8 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    36e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    36ea:	0004      	movs	r4, r0
    36ec:	9300      	str	r3, [sp, #0]
    36ee:	ab08      	add	r3, sp, #32
    36f0:	781b      	ldrb	r3, [r3, #0]
    36f2:	0016      	movs	r6, r2
    36f4:	9301      	str	r3, [sp, #4]
    36f6:	ab09      	add	r3, sp, #36	; 0x24
    36f8:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    36fa:	4b12      	ldr	r3, [pc, #72]	; (3744 <sercomSpiMasterInit+0x5c>)
void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    36fc:	000d      	movs	r5, r1
    sercomReset(id);
    36fe:	4798      	blx	r3
    3700:	4b11      	ldr	r3, [pc, #68]	; (3748 <sercomSpiMasterInit+0x60>)
    3702:	02a4      	lsls	r4, r4, #10
    3704:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    3706:	2380      	movs	r3, #128	; 0x80
    3708:	029b      	lsls	r3, r3, #10
    370a:	6063      	str	r3, [r4, #4]
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    370c:	23c0      	movs	r3, #192	; 0xc0
    370e:	052d      	lsls	r5, r5, #20
    3710:	039b      	lsls	r3, r3, #14
    3712:	401d      	ands	r5, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
    3714:	23c0      	movs	r3, #192	; 0xc0
    3716:	0436      	lsls	r6, r6, #16
    3718:	029b      	lsls	r3, r3, #10
    371a:	401e      	ands	r6, r3
    371c:	230e      	movs	r3, #14
    371e:	431e      	orrs	r6, r3
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    3720:	9b00      	ldr	r3, [sp, #0]
    3722:	4335      	orrs	r5, r6
    3724:	1e5a      	subs	r2, r3, #1
    3726:	4193      	sbcs	r3, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    3728:	9a01      	ldr	r2, [sp, #4]
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    372a:	075b      	lsls	r3, r3, #29
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    372c:	1e51      	subs	r1, r2, #1
    372e:	418a      	sbcs	r2, r1
    3730:	431d      	orrs	r5, r3
    3732:	0712      	lsls	r2, r2, #28
    3734:	4315      	orrs	r5, r2
    sercom(id)->SPI.BAUD.reg = baud;
    3736:	7327      	strb	r7, [r4, #12]
        = SERCOM_SPI_CTRLA_ENABLE
    3738:	6025      	str	r5, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    373a:	69e3      	ldr	r3, [r4, #28]
    373c:	075b      	lsls	r3, r3, #29
    373e:	d4fc      	bmi.n	373a <sercomSpiMasterInit+0x52>

    SPI_sync(id);
}
    3740:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3742:	46c0      	nop			; (mov r8, r8)
    3744:	000036d1 	.word	0x000036d1
    3748:	42000800 	.word	0x42000800

0000374c <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    374c:	b570      	push	{r4, r5, r6, lr}
    374e:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    3750:	4b0c      	ldr	r3, [pc, #48]	; (3784 <sercomUartInit+0x38>)
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    3752:	000d      	movs	r5, r1
    3754:	0014      	movs	r4, r2
    sercomReset(id);
    3756:	4798      	blx	r3
    return (Sercom*) (0x42000800U + id * 1024);
    3758:	4b0b      	ldr	r3, [pc, #44]	; (3788 <sercomUartInit+0x3c>)
    375a:	02b0      	lsls	r0, r6, #10
    375c:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    375e:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    3760:	22c0      	movs	r2, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    3762:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    3764:	4b09      	ldr	r3, [pc, #36]	; (378c <sercomUartInit+0x40>)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    3766:	0392      	lsls	r2, r2, #14
    sercom(id)->USART.BAUD.reg = 45403;
    3768:	8183      	strh	r3, [r0, #12]
        = SERCOM_USART_CTRLB_RXEN
    376a:	23c0      	movs	r3, #192	; 0xc0
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    376c:	052d      	lsls	r5, r5, #20
    376e:	4015      	ands	r5, r2
    3770:	4a07      	ldr	r2, [pc, #28]	; (3790 <sercomUartInit+0x44>)
        = SERCOM_USART_CTRLB_RXEN
    3772:	029b      	lsls	r3, r3, #10
          | SERCOM_USART_CTRLA_TXPO(txpo)
    3774:	0424      	lsls	r4, r4, #16
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    3776:	432a      	orrs	r2, r5
          | SERCOM_USART_CTRLA_TXPO(txpo)
    3778:	401c      	ands	r4, r3
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    377a:	4322      	orrs	r2, r4
        = SERCOM_USART_CTRLB_RXEN
    377c:	6043      	str	r3, [r0, #4]
        = SERCOM_USART_CTRLA_ENABLE
    377e:	6002      	str	r2, [r0, #0]
}
    3780:	bd70      	pop	{r4, r5, r6, pc}
    3782:	46c0      	nop			; (mov r8, r8)
    3784:	000036d1 	.word	0x000036d1
    3788:	42000800 	.word	0x42000800
    378c:	ffffb15b 	.word	0xffffb15b
    3790:	40000006 	.word	0x40000006

00003794 <spiDataTransfer>:
    3794:	4b04      	ldr	r3, [pc, #16]	; (37a8 <spiDataTransfer+0x14>)
    3796:	0280      	lsls	r0, r0, #10
    3798:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    379a:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    379c:	7e03      	ldrb	r3, [r0, #24]
    379e:	075b      	lsls	r3, r3, #29
    37a0:	d5fc      	bpl.n	379c <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    37a2:	6a80      	ldr	r0, [r0, #40]	; 0x28
    37a4:	b2c0      	uxtb	r0, r0
}
    37a6:	4770      	bx	lr
    37a8:	42000800 	.word	0x42000800

000037ac <spiDataOut>:
    37ac:	4b04      	ldr	r3, [pc, #16]	; (37c0 <spiDataOut+0x14>)
    37ae:	0280      	lsls	r0, r0, #10
    37b0:	18c0      	adds	r0, r0, r3

void spiDataOut(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    37b2:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    37b4:	7e03      	ldrb	r3, [r0, #24]
    37b6:	075b      	lsls	r3, r3, #29
    37b8:	d5fc      	bpl.n	37b4 <spiDataOut+0x8>
    u8_t dummy = sercom(id)->SPI.DATA.reg;
    37ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
}
    37bc:	4770      	bx	lr
    37be:	46c0      	nop			; (mov r8, r8)
    37c0:	42000800 	.word	0x42000800

000037c4 <spiDataIn>:
    37c4:	4b05      	ldr	r3, [pc, #20]	; (37dc <spiDataIn+0x18>)
    37c6:	0280      	lsls	r0, r0, #10
    37c8:	18c0      	adds	r0, r0, r3

u8_t spiDataIn(SercomId id) {
    sercom(id)->SPI.DATA.reg = 0xFF;
    37ca:	23ff      	movs	r3, #255	; 0xff
    37cc:	6283      	str	r3, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    37ce:	7e03      	ldrb	r3, [r0, #24]
    37d0:	075b      	lsls	r3, r3, #29
    37d2:	d5fc      	bpl.n	37ce <spiDataIn+0xa>
    return sercom(id)->SPI.DATA.reg;
    37d4:	6a80      	ldr	r0, [r0, #40]	; 0x28
    37d6:	b2c0      	uxtb	r0, r0
}
    37d8:	4770      	bx	lr
    37da:	46c0      	nop			; (mov r8, r8)
    37dc:	42000800 	.word	0x42000800

000037e0 <usartDataOut>:
    37e0:	4b04      	ldr	r3, [pc, #16]	; (37f4 <usartDataOut+0x14>)
    37e2:	0280      	lsls	r0, r0, #10
    37e4:	18c0      	adds	r0, r0, r3

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    37e6:	b289      	uxth	r1, r1
    37e8:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    37ea:	7e03      	ldrb	r3, [r0, #24]
    37ec:	07db      	lsls	r3, r3, #31
    37ee:	d5fc      	bpl.n	37ea <usartDataOut+0xa>
}
    37f0:	4770      	bx	lr
    37f2:	46c0      	nop			; (mov r8, r8)
    37f4:	42000800 	.word	0x42000800

000037f8 <usartDataIn>:
    37f8:	4b02      	ldr	r3, [pc, #8]	; (3804 <usartDataIn+0xc>)
    37fa:	0280      	lsls	r0, r0, #10
    37fc:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    37fe:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    3800:	b2c0      	uxtb	r0, r0
}
    3802:	4770      	bx	lr
    3804:	42000800 	.word	0x42000800

00003808 <findMainAltitude>:
#include <boardDefines.h>


void findMainAltitude() {

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    3808:	4b10      	ldr	r3, [pc, #64]	; (384c <findMainAltitude+0x44>)
    380a:	785a      	ldrb	r2, [r3, #1]
    380c:	2a00      	cmp	r2, #0
    380e:	d105      	bne.n	381c <findMainAltitude+0x14>
    3810:	781a      	ldrb	r2, [r3, #0]
    3812:	2a00      	cmp	r2, #0
    3814:	d002      	beq.n	381c <findMainAltitude+0x14>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelASettings.MAIN_DEPLOY;
    3816:	885a      	ldrh	r2, [r3, #2]
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelCSettings.MAIN_DEPLOY;
        return;
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelDSettings.MAIN_DEPLOY;
    3818:	831a      	strh	r2, [r3, #24]
        return;
    }
}
    381a:	4770      	bx	lr
    if (deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    381c:	79da      	ldrb	r2, [r3, #7]
    381e:	2a00      	cmp	r2, #0
    3820:	d104      	bne.n	382c <findMainAltitude+0x24>
    3822:	799a      	ldrb	r2, [r3, #6]
    3824:	2a00      	cmp	r2, #0
    3826:	d001      	beq.n	382c <findMainAltitude+0x24>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelBSettings.MAIN_DEPLOY;
    3828:	891a      	ldrh	r2, [r3, #8]
    382a:	e7f5      	b.n	3818 <findMainAltitude+0x10>
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    382c:	7b5a      	ldrb	r2, [r3, #13]
    382e:	2a00      	cmp	r2, #0
    3830:	d104      	bne.n	383c <findMainAltitude+0x34>
    3832:	7b1a      	ldrb	r2, [r3, #12]
    3834:	2a00      	cmp	r2, #0
    3836:	d001      	beq.n	383c <findMainAltitude+0x34>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelCSettings.MAIN_DEPLOY;
    3838:	89da      	ldrh	r2, [r3, #14]
    383a:	e7ed      	b.n	3818 <findMainAltitude+0x10>
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    383c:	7cda      	ldrb	r2, [r3, #19]
    383e:	2a00      	cmp	r2, #0
    3840:	d1eb      	bne.n	381a <findMainAltitude+0x12>
    3842:	7c9a      	ldrb	r2, [r3, #18]
    3844:	2a00      	cmp	r2, #0
    3846:	d0e8      	beq.n	381a <findMainAltitude+0x12>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelDSettings.MAIN_DEPLOY;
    3848:	8a9a      	ldrh	r2, [r3, #20]
    384a:	e7e5      	b.n	3818 <findMainAltitude+0x10>
    384c:	20000180 	.word	0x20000180

00003850 <applyDefaultSettings>:
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    3850:	2096      	movs	r0, #150	; 0x96
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    3852:	2200      	movs	r2, #0
    deploymentSettings.channelASettings.ENABLED = true;
    3854:	2101      	movs	r1, #1
    3856:	4b09      	ldr	r3, [pc, #36]	; (387c <applyDefaultSettings+0x2c>)
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    3858:	0040      	lsls	r0, r0, #1
    deploymentSettings.channelASettings.ENABLED = true;
    385a:	7019      	strb	r1, [r3, #0]
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    385c:	7059      	strb	r1, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    385e:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;
    3860:	711a      	strb	r2, [r3, #4]
    deploymentSettings.channelBSettings.ENABLED = true;
    3862:	7199      	strb	r1, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    3864:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    3866:	8118      	strh	r0, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = 0;
    3868:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = false;
    386a:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = DROGUE_t;
    386c:	7359      	strb	r1, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = 0;
    386e:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = 0;
    3870:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = false;
    3872:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = MAIN_t;
    3874:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = 300;
    3876:	8298      	strh	r0, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = 0;
    3878:	759a      	strb	r2, [r3, #22]
}
    387a:	4770      	bx	lr
    387c:	20000180 	.word	0x20000180

00003880 <putSettings>:

void putSettings() {
    3880:	b500      	push	{lr}
    3882:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    3884:	4669      	mov	r1, sp
    settings[1] = deploymentSettings.channelASettings.TYPE;
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    3886:	4668      	mov	r0, sp
    settings[0] = deploymentSettings.channelASettings.ENABLED;
    3888:	4b17      	ldr	r3, [pc, #92]	; (38e8 <putSettings+0x68>)
    388a:	781a      	ldrb	r2, [r3, #0]
    388c:	700a      	strb	r2, [r1, #0]
    settings[1] = deploymentSettings.channelASettings.TYPE;
    388e:	785a      	ldrb	r2, [r3, #1]
    3890:	704a      	strb	r2, [r1, #1]
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    3892:	885a      	ldrh	r2, [r3, #2]
    3894:	0a11      	lsrs	r1, r2, #8
    3896:	7081      	strb	r1, [r0, #2]
    settings[3] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 0;
    3898:	70c2      	strb	r2, [r0, #3]
    settings[4] = deploymentSettings.channelASettings.APPOGE_DELAY;
    389a:	791a      	ldrb	r2, [r3, #4]
    389c:	7102      	strb	r2, [r0, #4]

    settings[5] = deploymentSettings.channelBSettings.ENABLED;
    389e:	799a      	ldrb	r2, [r3, #6]
    38a0:	7142      	strb	r2, [r0, #5]
    settings[6] = deploymentSettings.channelBSettings.TYPE;
    38a2:	79da      	ldrb	r2, [r3, #7]
    38a4:	7182      	strb	r2, [r0, #6]
    settings[7] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 8;
    38a6:	891a      	ldrh	r2, [r3, #8]
    38a8:	0a11      	lsrs	r1, r2, #8
    38aa:	71c1      	strb	r1, [r0, #7]
    settings[8] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 0;
    38ac:	7202      	strb	r2, [r0, #8]
    settings[9] = deploymentSettings.channelBSettings.APPOGE_DELAY;
    38ae:	7a9a      	ldrb	r2, [r3, #10]
    38b0:	7242      	strb	r2, [r0, #9]

    settings[10] = deploymentSettings.channelCSettings.ENABLED;
    38b2:	7b1a      	ldrb	r2, [r3, #12]
    38b4:	7282      	strb	r2, [r0, #10]
    settings[11] = deploymentSettings.channelCSettings.TYPE;
    38b6:	7b5a      	ldrb	r2, [r3, #13]
    38b8:	72c2      	strb	r2, [r0, #11]
    settings[12] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 8;
    38ba:	89da      	ldrh	r2, [r3, #14]
    38bc:	0a11      	lsrs	r1, r2, #8
    38be:	7301      	strb	r1, [r0, #12]
    settings[13] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 0;
    38c0:	7342      	strb	r2, [r0, #13]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;
    38c2:	7c1a      	ldrb	r2, [r3, #16]
    38c4:	7382      	strb	r2, [r0, #14]

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    38c6:	7c9a      	ldrb	r2, [r3, #18]
    38c8:	73c2      	strb	r2, [r0, #15]
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    38ca:	7cda      	ldrb	r2, [r3, #19]
    38cc:	7402      	strb	r2, [r0, #16]
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    38ce:	8a9a      	ldrh	r2, [r3, #20]
    38d0:	0a11      	lsrs	r1, r2, #8
    38d2:	7441      	strb	r1, [r0, #17]
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    38d4:	7482      	strb	r2, [r0, #18]
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    38d6:	7d9b      	ldrb	r3, [r3, #22]
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    38d8:	4669      	mov	r1, sp
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    38da:	74c3      	strb	r3, [r0, #19]

    settings[20] = 0x00;
    38dc:	2000      	movs	r0, #0

    AT25SEWritePage(0x00,settings);
    38de:	4b03      	ldr	r3, [pc, #12]	; (38ec <putSettings+0x6c>)
    settings[20] = 0x00;
    38e0:	7508      	strb	r0, [r1, #20]
    AT25SEWritePage(0x00,settings);
    38e2:	4798      	blx	r3
}
    38e4:	b041      	add	sp, #260	; 0x104
    38e6:	bd00      	pop	{pc}
    38e8:	20000180 	.word	0x20000180
    38ec:	000002a5 	.word	0x000002a5

000038f0 <getSettings>:


void getSettings() {
    38f0:	b500      	push	{lr}
    38f2:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);
    38f4:	4669      	mov	r1, sp
    38f6:	4b2a      	ldr	r3, [pc, #168]	; (39a0 <getSettings+0xb0>)
    38f8:	2000      	movs	r0, #0
    38fa:	4798      	blx	r3

    deploymentSettings.channelASettings.ENABLED = settings[0];
    38fc:	466a      	mov	r2, sp
    38fe:	7812      	ldrb	r2, [r2, #0]
    3900:	4b28      	ldr	r3, [pc, #160]	; (39a4 <getSettings+0xb4>)
    3902:	1e51      	subs	r1, r2, #1
    3904:	418a      	sbcs	r2, r1
    3906:	701a      	strb	r2, [r3, #0]
    deploymentSettings.channelASettings.TYPE = settings[1];
    3908:	466a      	mov	r2, sp
    390a:	7852      	ldrb	r2, [r2, #1]
    390c:	705a      	strb	r2, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    390e:	466a      	mov	r2, sp
    3910:	7891      	ldrb	r1, [r2, #2]
    3912:	78d2      	ldrb	r2, [r2, #3]
    3914:	0209      	lsls	r1, r1, #8
    3916:	430a      	orrs	r2, r1
    3918:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];
    391a:	466a      	mov	r2, sp
    391c:	7912      	ldrb	r2, [r2, #4]
    391e:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    3920:	466a      	mov	r2, sp
    3922:	7952      	ldrb	r2, [r2, #5]
    3924:	1e51      	subs	r1, r2, #1
    3926:	418a      	sbcs	r2, r1
    3928:	719a      	strb	r2, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = settings[6];
    392a:	466a      	mov	r2, sp
    392c:	7992      	ldrb	r2, [r2, #6]
    392e:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    3930:	466a      	mov	r2, sp
    3932:	79d1      	ldrb	r1, [r2, #7]
    3934:	7a12      	ldrb	r2, [r2, #8]
    3936:	0209      	lsls	r1, r1, #8
    3938:	430a      	orrs	r2, r1
    393a:	811a      	strh	r2, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];
    393c:	466a      	mov	r2, sp
    393e:	7a52      	ldrb	r2, [r2, #9]
    3940:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    3942:	466a      	mov	r2, sp
    3944:	7a92      	ldrb	r2, [r2, #10]
    3946:	1e51      	subs	r1, r2, #1
    3948:	418a      	sbcs	r2, r1
    394a:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = settings[11];
    394c:	466a      	mov	r2, sp
    394e:	7ad2      	ldrb	r2, [r2, #11]
    3950:	735a      	strb	r2, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    3952:	466a      	mov	r2, sp
    3954:	7b11      	ldrb	r1, [r2, #12]
    3956:	7b52      	ldrb	r2, [r2, #13]
    3958:	0209      	lsls	r1, r1, #8
    395a:	430a      	orrs	r2, r1
    395c:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];
    395e:	466a      	mov	r2, sp
    3960:	7b92      	ldrb	r2, [r2, #14]
    3962:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    3964:	466a      	mov	r2, sp
    3966:	7bd2      	ldrb	r2, [r2, #15]
    3968:	1e51      	subs	r1, r2, #1
    396a:	418a      	sbcs	r2, r1
    396c:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = settings[16];
    396e:	466a      	mov	r2, sp
    3970:	7c12      	ldrb	r2, [r2, #16]
    3972:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    3974:	466a      	mov	r2, sp
    3976:	7c51      	ldrb	r1, [r2, #17]
    3978:	7c92      	ldrb	r2, [r2, #18]
    397a:	0209      	lsls	r1, r1, #8
    397c:	430a      	orrs	r2, r1
    397e:	829a      	strh	r2, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = settings[19];
    3980:	466a      	mov	r2, sp
    3982:	7cd2      	ldrb	r2, [r2, #19]
    3984:	759a      	strb	r2, [r3, #22]


    if (settings[20] == 0xFF) {
    3986:	466b      	mov	r3, sp
    3988:	7d1b      	ldrb	r3, [r3, #20]
    398a:	2bff      	cmp	r3, #255	; 0xff
    398c:	d103      	bne.n	3996 <getSettings+0xa6>
        applyDefaultSettings();
    398e:	4b06      	ldr	r3, [pc, #24]	; (39a8 <getSettings+0xb8>)
    3990:	4798      	blx	r3
        putSettings();
    3992:	4b06      	ldr	r3, [pc, #24]	; (39ac <getSettings+0xbc>)
    3994:	4798      	blx	r3
    }

    findMainAltitude();
    3996:	4b06      	ldr	r3, [pc, #24]	; (39b0 <getSettings+0xc0>)
    3998:	4798      	blx	r3

}
    399a:	b041      	add	sp, #260	; 0x104
    399c:	bd00      	pop	{pc}
    399e:	46c0      	nop			; (mov r8, r8)
    39a0:	0000035d 	.word	0x0000035d
    39a4:	20000180 	.word	0x20000180
    39a8:	00003851 	.word	0x00003851
    39ac:	00003881 	.word	0x00003881
    39b0:	00003809 	.word	0x00003809

000039b4 <sendFlightLogs>:
#include <util.h>
#include <boardDefines.h>

void sendFlightLogs() {
    39b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    39b6:	2400      	movs	r4, #0

        if (isFlightLogged(flightLog)) {
    39b8:	0020      	movs	r0, r4
    39ba:	4b1e      	ldr	r3, [pc, #120]	; (3a34 <sendFlightLogs+0x80>)
    39bc:	4798      	blx	r3
    39be:	2800      	cmp	r0, #0
    39c0:	d003      	beq.n	39ca <sendFlightLogs+0x16>

            usartDataOut(USART3, flightLog);
    39c2:	0021      	movs	r1, r4
    39c4:	2003      	movs	r0, #3
    39c6:	4b1c      	ldr	r3, [pc, #112]	; (3a38 <sendFlightLogs+0x84>)
    39c8:	4798      	blx	r3
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    39ca:	3401      	adds	r4, #1
    39cc:	b2e4      	uxtb	r4, r4
    39ce:	2c14      	cmp	r4, #20
    39d0:	d1f2      	bne.n	39b8 <sendFlightLogs+0x4>
        }
    }
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);
    39d2:	21ff      	movs	r1, #255	; 0xff
    39d4:	2003      	movs	r0, #3
    39d6:	4d18      	ldr	r5, [pc, #96]	; (3a38 <sendFlightLogs+0x84>)
    39d8:	47a8      	blx	r5

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    39da:	4a18      	ldr	r2, [pc, #96]	; (3a3c <sendFlightLogs+0x88>)
    39dc:	7e13      	ldrb	r3, [r2, #24]
    39de:	075b      	lsls	r3, r3, #29
    39e0:	d5fc      	bpl.n	39dc <sendFlightLogs+0x28>
    volatile u8_t flightToRead = usartDataIn(USART3);
    39e2:	4b17      	ldr	r3, [pc, #92]	; (3a40 <sendFlightLogs+0x8c>)
    39e4:	2003      	movs	r0, #3
    39e6:	4798      	blx	r3
    39e8:	466b      	mov	r3, sp
    39ea:	71d8      	strb	r0, [r3, #7]


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    39ec:	79d8      	ldrb	r0, [r3, #7]
    volatile u8_t flightToRead = usartDataIn(USART3);
    39ee:	1ddc      	adds	r4, r3, #7
    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    39f0:	b2c0      	uxtb	r0, r0
    39f2:	4b14      	ldr	r3, [pc, #80]	; (3a44 <sendFlightLogs+0x90>)
    39f4:	4798      	blx	r3
    39f6:	0007      	movs	r7, r0
    u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
    39f8:	7820      	ldrb	r0, [r4, #0]
    39fa:	4b13      	ldr	r3, [pc, #76]	; (3a48 <sendFlightLogs+0x94>)
    39fc:	b2c0      	uxtb	r0, r0
    39fe:	4798      	blx	r3
    3a00:	0006      	movs	r6, r0

    //inform of page numbers
    u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    3a02:	1bc4      	subs	r4, r0, r7
    3a04:	0a24      	lsrs	r4, r4, #8
    usartDataOut(USART3, pagesToSend >> 0);
    3a06:	b2e1      	uxtb	r1, r4
    3a08:	2003      	movs	r0, #3
    3a0a:	47a8      	blx	r5
    usartDataOut(USART3, pagesToSend >> 8);
    3a0c:	b2a1      	uxth	r1, r4
    3a0e:	0a09      	lsrs	r1, r1, #8
    3a10:	2003      	movs	r0, #3
    3a12:	47a8      	blx	r5

    //send flight end address for % full
    usartDataOut(USART3, flightEndAddress >> 0);
    3a14:	b2f1      	uxtb	r1, r6
    3a16:	2003      	movs	r0, #3
    3a18:	47a8      	blx	r5
    usartDataOut(USART3, flightEndAddress >> 8);
    3a1a:	0a31      	lsrs	r1, r6, #8
    3a1c:	b2c9      	uxtb	r1, r1
    3a1e:	2003      	movs	r0, #3
    3a20:	47a8      	blx	r5
    usartDataOut(USART3, flightEndAddress >> 16);
    3a22:	0c31      	lsrs	r1, r6, #16
    3a24:	b2c9      	uxtb	r1, r1
    3a26:	2003      	movs	r0, #3
    3a28:	47a8      	blx	r5

    //USART out the flights pages
    sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    3a2a:	0031      	movs	r1, r6
    3a2c:	0038      	movs	r0, r7
    3a2e:	4b07      	ldr	r3, [pc, #28]	; (3a4c <sendFlightLogs+0x98>)
    3a30:	4798      	blx	r3

}
    3a32:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3a34:	000031e1 	.word	0x000031e1
    3a38:	000037e1 	.word	0x000037e1
    3a3c:	42001400 	.word	0x42001400
    3a40:	000037f9 	.word	0x000037f9
    3a44:	00003189 	.word	0x00003189
    3a48:	000031b5 	.word	0x000031b5
    3a4c:	00000b2d 	.word	0x00000b2d

00003a50 <streamSensorData>:

void streamSensorData() {
    3a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    usartDataOut(USART3, 'R');
    3a52:	2152      	movs	r1, #82	; 0x52
    3a54:	2003      	movs	r0, #3
    3a56:	4c1a      	ldr	r4, [pc, #104]	; (3ac0 <streamSensorData+0x70>)
    3a58:	47a0      	blx	r4
    while(1) {
        //wait for comp to request datapoint
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    3a5a:	4a1a      	ldr	r2, [pc, #104]	; (3ac4 <streamSensorData+0x74>)
    3a5c:	7e13      	ldrb	r3, [r2, #24]
    3a5e:	075b      	lsls	r3, r3, #29
    3a60:	d5fc      	bpl.n	3a5c <streamSensorData+0xc>
        volatile u8_t compRequest = usartDataIn(USART3);
    3a62:	4b19      	ldr	r3, [pc, #100]	; (3ac8 <streamSensorData+0x78>)
    3a64:	2003      	movs	r0, #3
    3a66:	4798      	blx	r3
    3a68:	466b      	mov	r3, sp
    3a6a:	3307      	adds	r3, #7
    3a6c:	7018      	strb	r0, [r3, #0]
        if (compRequest == 0x44) {
    3a6e:	781a      	ldrb	r2, [r3, #0]
    3a70:	2a44      	cmp	r2, #68	; 0x44
    3a72:	d11f      	bne.n	3ab4 <streamSensorData+0x64>
            sampleTick();
    3a74:	4b15      	ldr	r3, [pc, #84]	; (3acc <streamSensorData+0x7c>)
    3a76:	4798      	blx	r3
            usartDataOut(USART3, 'A');
    3a78:	2141      	movs	r1, #65	; 0x41
    3a7a:	2003      	movs	r0, #3
    3a7c:	47a0      	blx	r4
			u8_t alt0 = (uint32_t)(sample.pressureAltitude) >> 0;
    3a7e:	4b14      	ldr	r3, [pc, #80]	; (3ad0 <streamSensorData+0x80>)
    3a80:	6d98      	ldr	r0, [r3, #88]	; 0x58
    3a82:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    3a84:	4b13      	ldr	r3, [pc, #76]	; (3ad4 <streamSensorData+0x84>)
    3a86:	4798      	blx	r3
    3a88:	0005      	movs	r5, r0
			u8_t alt1 = (uint32_t)(sample.pressureAltitude) >> 8;
			u8_t alt2 = (uint32_t)(sample.pressureAltitude) >> 16;
			u8_t alt3 = (uint32_t)(sample.pressureAltitude) >> 24;
            usartDataOut(USART3, alt0);
    3a8a:	b2c1      	uxtb	r1, r0
    3a8c:	2003      	movs	r0, #3
    3a8e:	47a0      	blx	r4
			u8_t alt1 = (uint32_t)(sample.pressureAltitude) >> 8;
    3a90:	0a29      	lsrs	r1, r5, #8
            usartDataOut(USART3, alt1);
    3a92:	b2c9      	uxtb	r1, r1
    3a94:	2003      	movs	r0, #3
    3a96:	47a0      	blx	r4
			u8_t alt2 = (uint32_t)(sample.pressureAltitude) >> 16;
    3a98:	0c29      	lsrs	r1, r5, #16
            usartDataOut(USART3, alt2);
    3a9a:	b2c9      	uxtb	r1, r1
    3a9c:	2003      	movs	r0, #3
    3a9e:	47a0      	blx	r4
            usartDataOut(USART3, alt3);
    3aa0:	0e29      	lsrs	r1, r5, #24
    3aa2:	2003      	movs	r0, #3
    3aa4:	47a0      	blx	r4
        }
		else if (compRequest == 0x46)
		{
			finishFromPad();
		}
        if (unplugged()) {
    3aa6:	4b0c      	ldr	r3, [pc, #48]	; (3ad8 <streamSensorData+0x88>)
    3aa8:	4798      	blx	r3
    3aaa:	2800      	cmp	r0, #0
    3aac:	d0d5      	beq.n	3a5a <streamSensorData+0xa>
            finishFromPad();
    3aae:	4b0b      	ldr	r3, [pc, #44]	; (3adc <streamSensorData+0x8c>)
    3ab0:	4798      	blx	r3
    3ab2:	e7d2      	b.n	3a5a <streamSensorData+0xa>
		else if (compRequest == 0x46)
    3ab4:	781b      	ldrb	r3, [r3, #0]
    3ab6:	2b46      	cmp	r3, #70	; 0x46
    3ab8:	d1f5      	bne.n	3aa6 <streamSensorData+0x56>
			finishFromPad();
    3aba:	4b08      	ldr	r3, [pc, #32]	; (3adc <streamSensorData+0x8c>)
    3abc:	4798      	blx	r3
    3abe:	e7f2      	b.n	3aa6 <streamSensorData+0x56>
    3ac0:	000037e1 	.word	0x000037e1
    3ac4:	42001400 	.word	0x42001400
    3ac8:	000037f9 	.word	0x000037f9
    3acc:	00003391 	.word	0x00003391
    3ad0:	200005f0 	.word	0x200005f0
    3ad4:	00005129 	.word	0x00005129
    3ad8:	00000ba9 	.word	0x00000ba9
    3adc:	00000ca5 	.word	0x00000ca5

00003ae0 <startupConnetion>:
    }
}

void startupConnetion() {

    flightState = flightIdle;
    3ae0:	2201      	movs	r2, #1
    3ae2:	4b15      	ldr	r3, [pc, #84]	; (3b38 <startupConnetion+0x58>)
void startupConnetion() {
    3ae4:	b570      	push	{r4, r5, r6, lr}
    flightState = flightIdle;
    3ae6:	701a      	strb	r2, [r3, #0]

    //wait for user to tell us what they want
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    3ae8:	4a14      	ldr	r2, [pc, #80]	; (3b3c <startupConnetion+0x5c>)
    3aea:	7e13      	ldrb	r3, [r2, #24]
    3aec:	075b      	lsls	r3, r3, #29
    3aee:	d5fc      	bpl.n	3aea <startupConnetion+0xa>
    u8_t option = usartDataIn(USART3);
    3af0:	2003      	movs	r0, #3
    3af2:	4b13      	ldr	r3, [pc, #76]	; (3b40 <startupConnetion+0x60>)
    3af4:	4798      	blx	r3
    3af6:	0004      	movs	r4, r0

    //user wants to read flight logs
    if (option == 0x4C) {
    3af8:	284c      	cmp	r0, #76	; 0x4c
    3afa:	d102      	bne.n	3b02 <startupConnetion+0x22>

        sendFlightLogs();
    3afc:	4b11      	ldr	r3, [pc, #68]	; (3b44 <startupConnetion+0x64>)
    3afe:	4798      	blx	r3
        delay_ms(1);
        streamSensorData();

    }

}
    3b00:	bd70      	pop	{r4, r5, r6, pc}
    if (option == 0x45) { // 'E'
    3b02:	2845      	cmp	r0, #69	; 0x45
    3b04:	d111      	bne.n	3b2a <startupConnetion+0x4a>
        AT25SFChipErase();
    3b06:	4e10      	ldr	r6, [pc, #64]	; (3b48 <startupConnetion+0x68>)
    3b08:	47b0      	blx	r6
        AT25SFHoldTillReady();
    3b0a:	4d10      	ldr	r5, [pc, #64]	; (3b4c <startupConnetion+0x6c>)
    3b0c:	47a8      	blx	r5
        delay_ms(100);
    3b0e:	2064      	movs	r0, #100	; 0x64
    3b10:	4b0f      	ldr	r3, [pc, #60]	; (3b50 <startupConnetion+0x70>)
    3b12:	4798      	blx	r3
        AT25SFChipErase();
    3b14:	47b0      	blx	r6
        AT25SFHoldTillReady();
    3b16:	47a8      	blx	r5
        usartDataOut(USART3, 'E');
    3b18:	0021      	movs	r1, r4
    3b1a:	2003      	movs	r0, #3
    3b1c:	4b0d      	ldr	r3, [pc, #52]	; (3b54 <startupConnetion+0x74>)
    3b1e:	4798      	blx	r3
        beep(400);
    3b20:	20c8      	movs	r0, #200	; 0xc8
    3b22:	4b0d      	ldr	r3, [pc, #52]	; (3b58 <startupConnetion+0x78>)
    3b24:	0040      	lsls	r0, r0, #1
    3b26:	4798      	blx	r3
    3b28:	e7ea      	b.n	3b00 <startupConnetion+0x20>
    if (option == 0x53 ) { // 'S'
    3b2a:	2853      	cmp	r0, #83	; 0x53
    3b2c:	d1e8      	bne.n	3b00 <startupConnetion+0x20>
        delay_ms(1);
    3b2e:	4b08      	ldr	r3, [pc, #32]	; (3b50 <startupConnetion+0x70>)
    3b30:	2001      	movs	r0, #1
    3b32:	4798      	blx	r3
        streamSensorData();
    3b34:	4b09      	ldr	r3, [pc, #36]	; (3b5c <startupConnetion+0x7c>)
    3b36:	4798      	blx	r3
    3b38:	200001ac 	.word	0x200001ac
    3b3c:	42001400 	.word	0x42001400
    3b40:	000037f9 	.word	0x000037f9
    3b44:	000039b5 	.word	0x000039b5
    3b48:	00000219 	.word	0x00000219
    3b4c:	000001e5 	.word	0x000001e5
    3b50:	00001185 	.word	0x00001185
    3b54:	000037e1 	.word	0x000037e1
    3b58:	00000e8d 	.word	0x00000e8d
    3b5c:	00003a51 	.word	0x00003a51

00003b60 <attemptConnection>:

void attemptConnection() {
    3b60:	b510      	push	{r4, lr}

    if (USARTconnectionAvaliable()) {
    3b62:	4b05      	ldr	r3, [pc, #20]	; (3b78 <attemptConnection+0x18>)
    3b64:	4798      	blx	r3
    3b66:	2800      	cmp	r0, #0
    3b68:	d005      	beq.n	3b76 <attemptConnection+0x16>

        if (flightState == flightStatrup) {
    3b6a:	4b04      	ldr	r3, [pc, #16]	; (3b7c <attemptConnection+0x1c>)
    3b6c:	781b      	ldrb	r3, [r3, #0]
    3b6e:	2b00      	cmp	r3, #0
    3b70:	d101      	bne.n	3b76 <attemptConnection+0x16>
            startupConnetion();
    3b72:	4b03      	ldr	r3, [pc, #12]	; (3b80 <attemptConnection+0x20>)
    3b74:	4798      	blx	r3
        }


    }

}
    3b76:	bd10      	pop	{r4, pc}
    3b78:	00000af9 	.word	0x00000af9
    3b7c:	200001ac 	.word	0x200001ac
    3b80:	00003ae1 	.word	0x00003ae1

00003b84 <pow>:
    3b84:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b86:	4657      	mov	r7, sl
    3b88:	464e      	mov	r6, r9
    3b8a:	46de      	mov	lr, fp
    3b8c:	4645      	mov	r5, r8
    3b8e:	b5e0      	push	{r5, r6, r7, lr}
    3b90:	b08f      	sub	sp, #60	; 0x3c
    3b92:	001d      	movs	r5, r3
    3b94:	0006      	movs	r6, r0
    3b96:	000f      	movs	r7, r1
    3b98:	0014      	movs	r4, r2
    3b9a:	f000 f99f 	bl	3edc <__ieee754_pow>
    3b9e:	4bc7      	ldr	r3, [pc, #796]	; (3ebc <pow+0x338>)
    3ba0:	9000      	str	r0, [sp, #0]
    3ba2:	9101      	str	r1, [sp, #4]
    3ba4:	469a      	mov	sl, r3
    3ba6:	781b      	ldrb	r3, [r3, #0]
    3ba8:	b25b      	sxtb	r3, r3
    3baa:	4699      	mov	r9, r3
    3bac:	3301      	adds	r3, #1
    3bae:	d03e      	beq.n	3c2e <pow+0xaa>
    3bb0:	0022      	movs	r2, r4
    3bb2:	002b      	movs	r3, r5
    3bb4:	0020      	movs	r0, r4
    3bb6:	0029      	movs	r1, r5
    3bb8:	f003 f8ee 	bl	6d98 <__aeabi_dcmpun>
    3bbc:	4683      	mov	fp, r0
    3bbe:	2800      	cmp	r0, #0
    3bc0:	d135      	bne.n	3c2e <pow+0xaa>
    3bc2:	0032      	movs	r2, r6
    3bc4:	003b      	movs	r3, r7
    3bc6:	0030      	movs	r0, r6
    3bc8:	0039      	movs	r1, r7
    3bca:	f003 f8e5 	bl	6d98 <__aeabi_dcmpun>
    3bce:	2200      	movs	r2, #0
    3bd0:	9003      	str	r0, [sp, #12]
    3bd2:	2800      	cmp	r0, #0
    3bd4:	d000      	beq.n	3bd8 <pow+0x54>
    3bd6:	e0b6      	b.n	3d46 <pow+0x1c2>
    3bd8:	2300      	movs	r3, #0
    3bda:	0030      	movs	r0, r6
    3bdc:	0039      	movs	r1, r7
    3bde:	f001 fa4b 	bl	5078 <__aeabi_dcmpeq>
    3be2:	2800      	cmp	r0, #0
    3be4:	d02c      	beq.n	3c40 <pow+0xbc>
    3be6:	2200      	movs	r2, #0
    3be8:	2300      	movs	r3, #0
    3bea:	0020      	movs	r0, r4
    3bec:	0029      	movs	r1, r5
    3bee:	f001 fa43 	bl	5078 <__aeabi_dcmpeq>
    3bf2:	4683      	mov	fp, r0
    3bf4:	2800      	cmp	r0, #0
    3bf6:	d100      	bne.n	3bfa <pow+0x76>
    3bf8:	e077      	b.n	3cea <pow+0x166>
    3bfa:	ab04      	add	r3, sp, #16
    3bfc:	4698      	mov	r8, r3
    3bfe:	2301      	movs	r3, #1
    3c00:	4642      	mov	r2, r8
    3c02:	9304      	str	r3, [sp, #16]
    3c04:	4bae      	ldr	r3, [pc, #696]	; (3ec0 <pow+0x33c>)
    3c06:	6053      	str	r3, [r2, #4]
    3c08:	4643      	mov	r3, r8
    3c0a:	9a03      	ldr	r2, [sp, #12]
    3c0c:	611c      	str	r4, [r3, #16]
    3c0e:	615d      	str	r5, [r3, #20]
    3c10:	621a      	str	r2, [r3, #32]
    3c12:	609e      	str	r6, [r3, #8]
    3c14:	60df      	str	r7, [r3, #12]
    3c16:	4642      	mov	r2, r8
    3c18:	2300      	movs	r3, #0
    3c1a:	2400      	movs	r4, #0
    3c1c:	6193      	str	r3, [r2, #24]
    3c1e:	61d4      	str	r4, [r2, #28]
    3c20:	464b      	mov	r3, r9
    3c22:	2b00      	cmp	r3, #0
    3c24:	d04d      	beq.n	3cc2 <pow+0x13e>
    3c26:	2300      	movs	r3, #0
    3c28:	4ca6      	ldr	r4, [pc, #664]	; (3ec4 <pow+0x340>)
    3c2a:	9300      	str	r3, [sp, #0]
    3c2c:	9401      	str	r4, [sp, #4]
    3c2e:	9800      	ldr	r0, [sp, #0]
    3c30:	9901      	ldr	r1, [sp, #4]
    3c32:	b00f      	add	sp, #60	; 0x3c
    3c34:	bc3c      	pop	{r2, r3, r4, r5}
    3c36:	4690      	mov	r8, r2
    3c38:	4699      	mov	r9, r3
    3c3a:	46a2      	mov	sl, r4
    3c3c:	46ab      	mov	fp, r5
    3c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c40:	9800      	ldr	r0, [sp, #0]
    3c42:	9901      	ldr	r1, [sp, #4]
    3c44:	f000 ff64 	bl	4b10 <finite>
    3c48:	4681      	mov	r9, r0
    3c4a:	2800      	cmp	r0, #0
    3c4c:	d100      	bne.n	3c50 <pow+0xcc>
    3c4e:	e09b      	b.n	3d88 <pow+0x204>
    3c50:	9800      	ldr	r0, [sp, #0]
    3c52:	9901      	ldr	r1, [sp, #4]
    3c54:	2200      	movs	r2, #0
    3c56:	2300      	movs	r3, #0
    3c58:	f001 fa0e 	bl	5078 <__aeabi_dcmpeq>
    3c5c:	2800      	cmp	r0, #0
    3c5e:	d0e6      	beq.n	3c2e <pow+0xaa>
    3c60:	0030      	movs	r0, r6
    3c62:	0039      	movs	r1, r7
    3c64:	f000 ff54 	bl	4b10 <finite>
    3c68:	2800      	cmp	r0, #0
    3c6a:	d0e0      	beq.n	3c2e <pow+0xaa>
    3c6c:	0020      	movs	r0, r4
    3c6e:	0029      	movs	r1, r5
    3c70:	f000 ff4e 	bl	4b10 <finite>
    3c74:	2800      	cmp	r0, #0
    3c76:	d0da      	beq.n	3c2e <pow+0xaa>
    3c78:	ab04      	add	r3, sp, #16
    3c7a:	4698      	mov	r8, r3
    3c7c:	2304      	movs	r3, #4
    3c7e:	4642      	mov	r2, r8
    3c80:	9304      	str	r3, [sp, #16]
    3c82:	4b8f      	ldr	r3, [pc, #572]	; (3ec0 <pow+0x33c>)
    3c84:	6114      	str	r4, [r2, #16]
    3c86:	6155      	str	r5, [r2, #20]
    3c88:	6053      	str	r3, [r2, #4]
    3c8a:	2300      	movs	r3, #0
    3c8c:	2400      	movs	r4, #0
    3c8e:	6213      	str	r3, [r2, #32]
    3c90:	2300      	movs	r3, #0
    3c92:	6193      	str	r3, [r2, #24]
    3c94:	61d4      	str	r4, [r2, #28]
    3c96:	4653      	mov	r3, sl
    3c98:	781b      	ldrb	r3, [r3, #0]
    3c9a:	6096      	str	r6, [r2, #8]
    3c9c:	60d7      	str	r7, [r2, #12]
    3c9e:	b25b      	sxtb	r3, r3
    3ca0:	2b02      	cmp	r3, #2
    3ca2:	d004      	beq.n	3cae <pow+0x12a>
    3ca4:	4640      	mov	r0, r8
    3ca6:	f000 ff3d 	bl	4b24 <matherr>
    3caa:	2800      	cmp	r0, #0
    3cac:	d10e      	bne.n	3ccc <pow+0x148>
    3cae:	f003 fa3b 	bl	7128 <__errno>
    3cb2:	2322      	movs	r3, #34	; 0x22
    3cb4:	6003      	str	r3, [r0, #0]
    3cb6:	e009      	b.n	3ccc <pow+0x148>
    3cb8:	4642      	mov	r2, r8
    3cba:	2300      	movs	r3, #0
    3cbc:	2400      	movs	r4, #0
    3cbe:	6193      	str	r3, [r2, #24]
    3cc0:	61d4      	str	r4, [r2, #28]
    3cc2:	4640      	mov	r0, r8
    3cc4:	f000 ff2e 	bl	4b24 <matherr>
    3cc8:	2800      	cmp	r0, #0
    3cca:	d037      	beq.n	3d3c <pow+0x1b8>
    3ccc:	4643      	mov	r3, r8
    3cce:	6a1b      	ldr	r3, [r3, #32]
    3cd0:	2b00      	cmp	r3, #0
    3cd2:	d004      	beq.n	3cde <pow+0x15a>
    3cd4:	f003 fa28 	bl	7128 <__errno>
    3cd8:	4643      	mov	r3, r8
    3cda:	6a1b      	ldr	r3, [r3, #32]
    3cdc:	6003      	str	r3, [r0, #0]
    3cde:	4643      	mov	r3, r8
    3ce0:	69dc      	ldr	r4, [r3, #28]
    3ce2:	699b      	ldr	r3, [r3, #24]
    3ce4:	9300      	str	r3, [sp, #0]
    3ce6:	9401      	str	r4, [sp, #4]
    3ce8:	e7a1      	b.n	3c2e <pow+0xaa>
    3cea:	0020      	movs	r0, r4
    3cec:	0029      	movs	r1, r5
    3cee:	f000 ff0f 	bl	4b10 <finite>
    3cf2:	2800      	cmp	r0, #0
    3cf4:	d09b      	beq.n	3c2e <pow+0xaa>
    3cf6:	2200      	movs	r2, #0
    3cf8:	2300      	movs	r3, #0
    3cfa:	0020      	movs	r0, r4
    3cfc:	0029      	movs	r1, r5
    3cfe:	f001 f9c1 	bl	5084 <__aeabi_dcmplt>
    3d02:	2800      	cmp	r0, #0
    3d04:	d100      	bne.n	3d08 <pow+0x184>
    3d06:	e792      	b.n	3c2e <pow+0xaa>
    3d08:	ab04      	add	r3, sp, #16
    3d0a:	4698      	mov	r8, r3
    3d0c:	2301      	movs	r3, #1
    3d0e:	4642      	mov	r2, r8
    3d10:	9304      	str	r3, [sp, #16]
    3d12:	4b6b      	ldr	r3, [pc, #428]	; (3ec0 <pow+0x33c>)
    3d14:	6053      	str	r3, [r2, #4]
    3d16:	4643      	mov	r3, r8
    3d18:	465a      	mov	r2, fp
    3d1a:	609e      	str	r6, [r3, #8]
    3d1c:	60df      	str	r7, [r3, #12]
    3d1e:	621a      	str	r2, [r3, #32]
    3d20:	611c      	str	r4, [r3, #16]
    3d22:	615d      	str	r5, [r3, #20]
    3d24:	4653      	mov	r3, sl
    3d26:	781b      	ldrb	r3, [r3, #0]
    3d28:	b25b      	sxtb	r3, r3
    3d2a:	2b00      	cmp	r3, #0
    3d2c:	d0c4      	beq.n	3cb8 <pow+0x134>
    3d2e:	2000      	movs	r0, #0
    3d30:	4642      	mov	r2, r8
    3d32:	4965      	ldr	r1, [pc, #404]	; (3ec8 <pow+0x344>)
    3d34:	6190      	str	r0, [r2, #24]
    3d36:	61d1      	str	r1, [r2, #28]
    3d38:	2b02      	cmp	r3, #2
    3d3a:	d1c2      	bne.n	3cc2 <pow+0x13e>
    3d3c:	f003 f9f4 	bl	7128 <__errno>
    3d40:	2321      	movs	r3, #33	; 0x21
    3d42:	6003      	str	r3, [r0, #0]
    3d44:	e7c2      	b.n	3ccc <pow+0x148>
    3d46:	2300      	movs	r3, #0
    3d48:	0020      	movs	r0, r4
    3d4a:	0029      	movs	r1, r5
    3d4c:	f001 f994 	bl	5078 <__aeabi_dcmpeq>
    3d50:	2800      	cmp	r0, #0
    3d52:	d100      	bne.n	3d56 <pow+0x1d2>
    3d54:	e76b      	b.n	3c2e <pow+0xaa>
    3d56:	ab04      	add	r3, sp, #16
    3d58:	4698      	mov	r8, r3
    3d5a:	2301      	movs	r3, #1
    3d5c:	4642      	mov	r2, r8
    3d5e:	9304      	str	r3, [sp, #16]
    3d60:	4b57      	ldr	r3, [pc, #348]	; (3ec0 <pow+0x33c>)
    3d62:	4641      	mov	r1, r8
    3d64:	6053      	str	r3, [r2, #4]
    3d66:	4643      	mov	r3, r8
    3d68:	465a      	mov	r2, fp
    3d6a:	621a      	str	r2, [r3, #32]
    3d6c:	2200      	movs	r2, #0
    3d6e:	609e      	str	r6, [r3, #8]
    3d70:	60df      	str	r7, [r3, #12]
    3d72:	611c      	str	r4, [r3, #16]
    3d74:	615d      	str	r5, [r3, #20]
    3d76:	4b53      	ldr	r3, [pc, #332]	; (3ec4 <pow+0x340>)
    3d78:	618a      	str	r2, [r1, #24]
    3d7a:	61cb      	str	r3, [r1, #28]
    3d7c:	9200      	str	r2, [sp, #0]
    3d7e:	9301      	str	r3, [sp, #4]
    3d80:	464b      	mov	r3, r9
    3d82:	2b02      	cmp	r3, #2
    3d84:	d19d      	bne.n	3cc2 <pow+0x13e>
    3d86:	e752      	b.n	3c2e <pow+0xaa>
    3d88:	0030      	movs	r0, r6
    3d8a:	0039      	movs	r1, r7
    3d8c:	f000 fec0 	bl	4b10 <finite>
    3d90:	2800      	cmp	r0, #0
    3d92:	d100      	bne.n	3d96 <pow+0x212>
    3d94:	e75c      	b.n	3c50 <pow+0xcc>
    3d96:	0020      	movs	r0, r4
    3d98:	0029      	movs	r1, r5
    3d9a:	f000 feb9 	bl	4b10 <finite>
    3d9e:	2800      	cmp	r0, #0
    3da0:	d100      	bne.n	3da4 <pow+0x220>
    3da2:	e755      	b.n	3c50 <pow+0xcc>
    3da4:	9800      	ldr	r0, [sp, #0]
    3da6:	9901      	ldr	r1, [sp, #4]
    3da8:	000b      	movs	r3, r1
    3daa:	0002      	movs	r2, r0
    3dac:	f002 fff4 	bl	6d98 <__aeabi_dcmpun>
    3db0:	ab04      	add	r3, sp, #16
    3db2:	4698      	mov	r8, r3
    3db4:	2800      	cmp	r0, #0
    3db6:	d161      	bne.n	3e7c <pow+0x2f8>
    3db8:	2303      	movs	r3, #3
    3dba:	4642      	mov	r2, r8
    3dbc:	9304      	str	r3, [sp, #16]
    3dbe:	4b40      	ldr	r3, [pc, #256]	; (3ec0 <pow+0x33c>)
    3dc0:	6210      	str	r0, [r2, #32]
    3dc2:	6053      	str	r3, [r2, #4]
    3dc4:	4653      	mov	r3, sl
    3dc6:	781b      	ldrb	r3, [r3, #0]
    3dc8:	6096      	str	r6, [r2, #8]
    3dca:	60d7      	str	r7, [r2, #12]
    3dcc:	b25b      	sxtb	r3, r3
    3dce:	6114      	str	r4, [r2, #16]
    3dd0:	6155      	str	r5, [r2, #20]
    3dd2:	4699      	mov	r9, r3
    3dd4:	2b00      	cmp	r3, #0
    3dd6:	d12f      	bne.n	3e38 <pow+0x2b4>
    3dd8:	22e0      	movs	r2, #224	; 0xe0
    3dda:	4641      	mov	r1, r8
    3ddc:	4b3b      	ldr	r3, [pc, #236]	; (3ecc <pow+0x348>)
    3dde:	0612      	lsls	r2, r2, #24
    3de0:	618a      	str	r2, [r1, #24]
    3de2:	61cb      	str	r3, [r1, #28]
    3de4:	0030      	movs	r0, r6
    3de6:	2200      	movs	r2, #0
    3de8:	2300      	movs	r3, #0
    3dea:	0039      	movs	r1, r7
    3dec:	f001 f94a 	bl	5084 <__aeabi_dcmplt>
    3df0:	2800      	cmp	r0, #0
    3df2:	d100      	bne.n	3df6 <pow+0x272>
    3df4:	e756      	b.n	3ca4 <pow+0x120>
    3df6:	2200      	movs	r2, #0
    3df8:	4b35      	ldr	r3, [pc, #212]	; (3ed0 <pow+0x34c>)
    3dfa:	0020      	movs	r0, r4
    3dfc:	0029      	movs	r1, r5
    3dfe:	f002 fa35 	bl	626c <__aeabi_dmul>
    3e02:	0004      	movs	r4, r0
    3e04:	000d      	movs	r5, r1
    3e06:	f000 fe95 	bl	4b34 <rint>
    3e0a:	0002      	movs	r2, r0
    3e0c:	000b      	movs	r3, r1
    3e0e:	0020      	movs	r0, r4
    3e10:	0029      	movs	r1, r5
    3e12:	f001 f931 	bl	5078 <__aeabi_dcmpeq>
    3e16:	2800      	cmp	r0, #0
    3e18:	d105      	bne.n	3e26 <pow+0x2a2>
    3e1a:	22e0      	movs	r2, #224	; 0xe0
    3e1c:	4b2d      	ldr	r3, [pc, #180]	; (3ed4 <pow+0x350>)
    3e1e:	0612      	lsls	r2, r2, #24
    3e20:	4641      	mov	r1, r8
    3e22:	618a      	str	r2, [r1, #24]
    3e24:	61cb      	str	r3, [r1, #28]
    3e26:	4653      	mov	r3, sl
    3e28:	781b      	ldrb	r3, [r3, #0]
    3e2a:	b25b      	sxtb	r3, r3
    3e2c:	4699      	mov	r9, r3
    3e2e:	464b      	mov	r3, r9
    3e30:	2b02      	cmp	r3, #2
    3e32:	d000      	beq.n	3e36 <pow+0x2b2>
    3e34:	e736      	b.n	3ca4 <pow+0x120>
    3e36:	e73a      	b.n	3cae <pow+0x12a>
    3e38:	2200      	movs	r2, #0
    3e3a:	4641      	mov	r1, r8
    3e3c:	4b26      	ldr	r3, [pc, #152]	; (3ed8 <pow+0x354>)
    3e3e:	0030      	movs	r0, r6
    3e40:	618a      	str	r2, [r1, #24]
    3e42:	61cb      	str	r3, [r1, #28]
    3e44:	2200      	movs	r2, #0
    3e46:	2300      	movs	r3, #0
    3e48:	0039      	movs	r1, r7
    3e4a:	f001 f91b 	bl	5084 <__aeabi_dcmplt>
    3e4e:	2800      	cmp	r0, #0
    3e50:	d0ed      	beq.n	3e2e <pow+0x2aa>
    3e52:	2200      	movs	r2, #0
    3e54:	4b1e      	ldr	r3, [pc, #120]	; (3ed0 <pow+0x34c>)
    3e56:	0020      	movs	r0, r4
    3e58:	0029      	movs	r1, r5
    3e5a:	f002 fa07 	bl	626c <__aeabi_dmul>
    3e5e:	0004      	movs	r4, r0
    3e60:	000d      	movs	r5, r1
    3e62:	f000 fe67 	bl	4b34 <rint>
    3e66:	0002      	movs	r2, r0
    3e68:	000b      	movs	r3, r1
    3e6a:	0020      	movs	r0, r4
    3e6c:	0029      	movs	r1, r5
    3e6e:	f001 f903 	bl	5078 <__aeabi_dcmpeq>
    3e72:	2800      	cmp	r0, #0
    3e74:	d1d7      	bne.n	3e26 <pow+0x2a2>
    3e76:	2200      	movs	r2, #0
    3e78:	4b13      	ldr	r3, [pc, #76]	; (3ec8 <pow+0x344>)
    3e7a:	e7d1      	b.n	3e20 <pow+0x29c>
    3e7c:	2301      	movs	r3, #1
    3e7e:	4642      	mov	r2, r8
    3e80:	9304      	str	r3, [sp, #16]
    3e82:	4b0f      	ldr	r3, [pc, #60]	; (3ec0 <pow+0x33c>)
    3e84:	6053      	str	r3, [r2, #4]
    3e86:	4643      	mov	r3, r8
    3e88:	464a      	mov	r2, r9
    3e8a:	611c      	str	r4, [r3, #16]
    3e8c:	615d      	str	r5, [r3, #20]
    3e8e:	621a      	str	r2, [r3, #32]
    3e90:	609e      	str	r6, [r3, #8]
    3e92:	60df      	str	r7, [r3, #12]
    3e94:	2400      	movs	r4, #0
    3e96:	4653      	mov	r3, sl
    3e98:	571c      	ldrsb	r4, [r3, r4]
    3e9a:	2c00      	cmp	r4, #0
    3e9c:	d100      	bne.n	3ea0 <pow+0x31c>
    3e9e:	e70b      	b.n	3cb8 <pow+0x134>
    3ea0:	2300      	movs	r3, #0
    3ea2:	2200      	movs	r2, #0
    3ea4:	0019      	movs	r1, r3
    3ea6:	0010      	movs	r0, r2
    3ea8:	f001 fdac 	bl	5a04 <__aeabi_ddiv>
    3eac:	4643      	mov	r3, r8
    3eae:	6198      	str	r0, [r3, #24]
    3eb0:	61d9      	str	r1, [r3, #28]
    3eb2:	2c02      	cmp	r4, #2
    3eb4:	d100      	bne.n	3eb8 <pow+0x334>
    3eb6:	e741      	b.n	3d3c <pow+0x1b8>
    3eb8:	e703      	b.n	3cc2 <pow+0x13e>
    3eba:	46c0      	nop			; (mov r8, r8)
    3ebc:	200000b8 	.word	0x200000b8
    3ec0:	0000719c 	.word	0x0000719c
    3ec4:	3ff00000 	.word	0x3ff00000
    3ec8:	fff00000 	.word	0xfff00000
    3ecc:	47efffff 	.word	0x47efffff
    3ed0:	3fe00000 	.word	0x3fe00000
    3ed4:	c7efffff 	.word	0xc7efffff
    3ed8:	7ff00000 	.word	0x7ff00000

00003edc <__ieee754_pow>:
    3edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ede:	4657      	mov	r7, sl
    3ee0:	464e      	mov	r6, r9
    3ee2:	4645      	mov	r5, r8
    3ee4:	46de      	mov	lr, fp
    3ee6:	001c      	movs	r4, r3
    3ee8:	0013      	movs	r3, r2
    3eea:	b5e0      	push	{r5, r6, r7, lr}
    3eec:	0065      	lsls	r5, r4, #1
    3eee:	b091      	sub	sp, #68	; 0x44
    3ef0:	086d      	lsrs	r5, r5, #1
    3ef2:	9300      	str	r3, [sp, #0]
    3ef4:	9401      	str	r4, [sp, #4]
    3ef6:	0007      	movs	r7, r0
    3ef8:	000e      	movs	r6, r1
    3efa:	4680      	mov	r8, r0
    3efc:	4689      	mov	r9, r1
    3efe:	46a2      	mov	sl, r4
    3f00:	432b      	orrs	r3, r5
    3f02:	d031      	beq.n	3f68 <__ieee754_pow+0x8c>
    3f04:	4b67      	ldr	r3, [pc, #412]	; (40a4 <__ieee754_pow+0x1c8>)
    3f06:	0074      	lsls	r4, r6, #1
    3f08:	0864      	lsrs	r4, r4, #1
    3f0a:	429c      	cmp	r4, r3
    3f0c:	dc27      	bgt.n	3f5e <__ieee754_pow+0x82>
    3f0e:	d024      	beq.n	3f5a <__ieee754_pow+0x7e>
    3f10:	429d      	cmp	r5, r3
    3f12:	dc24      	bgt.n	3f5e <__ieee754_pow+0x82>
    3f14:	4b63      	ldr	r3, [pc, #396]	; (40a4 <__ieee754_pow+0x1c8>)
    3f16:	429d      	cmp	r5, r3
    3f18:	d100      	bne.n	3f1c <__ieee754_pow+0x40>
    3f1a:	e081      	b.n	4020 <__ieee754_pow+0x144>
    3f1c:	2300      	movs	r3, #0
    3f1e:	469b      	mov	fp, r3
    3f20:	464b      	mov	r3, r9
    3f22:	2b00      	cmp	r3, #0
    3f24:	da00      	bge.n	3f28 <__ieee754_pow+0x4c>
    3f26:	e07f      	b.n	4028 <__ieee754_pow+0x14c>
    3f28:	2a00      	cmp	r2, #0
    3f2a:	d12c      	bne.n	3f86 <__ieee754_pow+0xaa>
    3f2c:	4b5d      	ldr	r3, [pc, #372]	; (40a4 <__ieee754_pow+0x1c8>)
    3f2e:	429d      	cmp	r5, r3
    3f30:	d100      	bne.n	3f34 <__ieee754_pow+0x58>
    3f32:	e097      	b.n	4064 <__ieee754_pow+0x188>
    3f34:	4b5c      	ldr	r3, [pc, #368]	; (40a8 <__ieee754_pow+0x1cc>)
    3f36:	429d      	cmp	r5, r3
    3f38:	d066      	beq.n	4008 <__ieee754_pow+0x12c>
    3f3a:	2380      	movs	r3, #128	; 0x80
    3f3c:	05db      	lsls	r3, r3, #23
    3f3e:	459a      	cmp	sl, r3
    3f40:	d100      	bne.n	3f44 <__ieee754_pow+0x68>
    3f42:	e3b9      	b.n	46b8 <__ieee754_pow+0x7dc>
    3f44:	4b59      	ldr	r3, [pc, #356]	; (40ac <__ieee754_pow+0x1d0>)
    3f46:	459a      	cmp	sl, r3
    3f48:	d11d      	bne.n	3f86 <__ieee754_pow+0xaa>
    3f4a:	464b      	mov	r3, r9
    3f4c:	2b00      	cmp	r3, #0
    3f4e:	db1a      	blt.n	3f86 <__ieee754_pow+0xaa>
    3f50:	0038      	movs	r0, r7
    3f52:	0031      	movs	r1, r6
    3f54:	f000 fcf8 	bl	4948 <__ieee754_sqrt>
    3f58:	e008      	b.n	3f6c <__ieee754_pow+0x90>
    3f5a:	2800      	cmp	r0, #0
    3f5c:	d00d      	beq.n	3f7a <__ieee754_pow+0x9e>
    3f5e:	4b54      	ldr	r3, [pc, #336]	; (40b0 <__ieee754_pow+0x1d4>)
    3f60:	469c      	mov	ip, r3
    3f62:	4464      	add	r4, ip
    3f64:	4327      	orrs	r7, r4
    3f66:	d10a      	bne.n	3f7e <__ieee754_pow+0xa2>
    3f68:	2000      	movs	r0, #0
    3f6a:	494f      	ldr	r1, [pc, #316]	; (40a8 <__ieee754_pow+0x1cc>)
    3f6c:	b011      	add	sp, #68	; 0x44
    3f6e:	bc3c      	pop	{r2, r3, r4, r5}
    3f70:	4690      	mov	r8, r2
    3f72:	4699      	mov	r9, r3
    3f74:	46a2      	mov	sl, r4
    3f76:	46ab      	mov	fp, r5
    3f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f7a:	42a5      	cmp	r5, r4
    3f7c:	ddca      	ble.n	3f14 <__ieee754_pow+0x38>
    3f7e:	484d      	ldr	r0, [pc, #308]	; (40b4 <__ieee754_pow+0x1d8>)
    3f80:	f000 fdd2 	bl	4b28 <nan>
    3f84:	e7f2      	b.n	3f6c <__ieee754_pow+0x90>
    3f86:	0038      	movs	r0, r7
    3f88:	0031      	movs	r1, r6
    3f8a:	f000 fdbd 	bl	4b08 <fabs>
    3f8e:	4643      	mov	r3, r8
    3f90:	2b00      	cmp	r3, #0
    3f92:	d11d      	bne.n	3fd0 <__ieee754_pow+0xf4>
    3f94:	2c00      	cmp	r4, #0
    3f96:	d004      	beq.n	3fa2 <__ieee754_pow+0xc6>
    3f98:	4a43      	ldr	r2, [pc, #268]	; (40a8 <__ieee754_pow+0x1cc>)
    3f9a:	00b3      	lsls	r3, r6, #2
    3f9c:	089b      	lsrs	r3, r3, #2
    3f9e:	4293      	cmp	r3, r2
    3fa0:	d116      	bne.n	3fd0 <__ieee754_pow+0xf4>
    3fa2:	4653      	mov	r3, sl
    3fa4:	2b00      	cmp	r3, #0
    3fa6:	da00      	bge.n	3faa <__ieee754_pow+0xce>
    3fa8:	e3c5      	b.n	4736 <__ieee754_pow+0x85a>
    3faa:	464b      	mov	r3, r9
    3fac:	2b00      	cmp	r3, #0
    3fae:	dadd      	bge.n	3f6c <__ieee754_pow+0x90>
    3fb0:	4b3f      	ldr	r3, [pc, #252]	; (40b0 <__ieee754_pow+0x1d4>)
    3fb2:	469c      	mov	ip, r3
    3fb4:	465b      	mov	r3, fp
    3fb6:	4464      	add	r4, ip
    3fb8:	431c      	orrs	r4, r3
    3fba:	d101      	bne.n	3fc0 <__ieee754_pow+0xe4>
    3fbc:	f000 fc53 	bl	4866 <__ieee754_pow+0x98a>
    3fc0:	465b      	mov	r3, fp
    3fc2:	2b01      	cmp	r3, #1
    3fc4:	d1d2      	bne.n	3f6c <__ieee754_pow+0x90>
    3fc6:	2480      	movs	r4, #128	; 0x80
    3fc8:	0624      	lsls	r4, r4, #24
    3fca:	190b      	adds	r3, r1, r4
    3fcc:	0019      	movs	r1, r3
    3fce:	e7cd      	b.n	3f6c <__ieee754_pow+0x90>
    3fd0:	0ff3      	lsrs	r3, r6, #31
    3fd2:	3b01      	subs	r3, #1
    3fd4:	4698      	mov	r8, r3
    3fd6:	465b      	mov	r3, fp
    3fd8:	4642      	mov	r2, r8
    3fda:	4313      	orrs	r3, r2
    3fdc:	d057      	beq.n	408e <__ieee754_pow+0x1b2>
    3fde:	4b36      	ldr	r3, [pc, #216]	; (40b8 <__ieee754_pow+0x1dc>)
    3fe0:	429d      	cmp	r5, r3
    3fe2:	dd77      	ble.n	40d4 <__ieee754_pow+0x1f8>
    3fe4:	4b35      	ldr	r3, [pc, #212]	; (40bc <__ieee754_pow+0x1e0>)
    3fe6:	429d      	cmp	r5, r3
    3fe8:	dc00      	bgt.n	3fec <__ieee754_pow+0x110>
    3fea:	e3b1      	b.n	4750 <__ieee754_pow+0x874>
    3fec:	4b34      	ldr	r3, [pc, #208]	; (40c0 <__ieee754_pow+0x1e4>)
    3fee:	429c      	cmp	r4, r3
    3ff0:	dc00      	bgt.n	3ff4 <__ieee754_pow+0x118>
    3ff2:	e3a8      	b.n	4746 <__ieee754_pow+0x86a>
    3ff4:	4653      	mov	r3, sl
    3ff6:	2b00      	cmp	r3, #0
    3ff8:	dd43      	ble.n	4082 <__ieee754_pow+0x1a6>
    3ffa:	4a32      	ldr	r2, [pc, #200]	; (40c4 <__ieee754_pow+0x1e8>)
    3ffc:	4b32      	ldr	r3, [pc, #200]	; (40c8 <__ieee754_pow+0x1ec>)
    3ffe:	0010      	movs	r0, r2
    4000:	0019      	movs	r1, r3
    4002:	f002 f933 	bl	626c <__aeabi_dmul>
    4006:	e7b1      	b.n	3f6c <__ieee754_pow+0x90>
    4008:	4653      	mov	r3, sl
    400a:	0038      	movs	r0, r7
    400c:	0031      	movs	r1, r6
    400e:	2b00      	cmp	r3, #0
    4010:	daac      	bge.n	3f6c <__ieee754_pow+0x90>
    4012:	003a      	movs	r2, r7
    4014:	0033      	movs	r3, r6
    4016:	2000      	movs	r0, #0
    4018:	4923      	ldr	r1, [pc, #140]	; (40a8 <__ieee754_pow+0x1cc>)
    401a:	f001 fcf3 	bl	5a04 <__aeabi_ddiv>
    401e:	e7a5      	b.n	3f6c <__ieee754_pow+0x90>
    4020:	2a00      	cmp	r2, #0
    4022:	d100      	bne.n	4026 <__ieee754_pow+0x14a>
    4024:	e77a      	b.n	3f1c <__ieee754_pow+0x40>
    4026:	e79a      	b.n	3f5e <__ieee754_pow+0x82>
    4028:	4b28      	ldr	r3, [pc, #160]	; (40cc <__ieee754_pow+0x1f0>)
    402a:	429d      	cmp	r5, r3
    402c:	dc2c      	bgt.n	4088 <__ieee754_pow+0x1ac>
    402e:	4b24      	ldr	r3, [pc, #144]	; (40c0 <__ieee754_pow+0x1e4>)
    4030:	429d      	cmp	r5, r3
    4032:	dc00      	bgt.n	4036 <__ieee754_pow+0x15a>
    4034:	e778      	b.n	3f28 <__ieee754_pow+0x4c>
    4036:	4926      	ldr	r1, [pc, #152]	; (40d0 <__ieee754_pow+0x1f4>)
    4038:	152b      	asrs	r3, r5, #20
    403a:	468c      	mov	ip, r1
    403c:	4463      	add	r3, ip
    403e:	2b14      	cmp	r3, #20
    4040:	dc01      	bgt.n	4046 <__ieee754_pow+0x16a>
    4042:	f000 fbf3 	bl	482c <__ieee754_pow+0x950>
    4046:	2134      	movs	r1, #52	; 0x34
    4048:	1acb      	subs	r3, r1, r3
    404a:	9900      	ldr	r1, [sp, #0]
    404c:	40d9      	lsrs	r1, r3
    404e:	0008      	movs	r0, r1
    4050:	4098      	lsls	r0, r3
    4052:	4282      	cmp	r2, r0
    4054:	d000      	beq.n	4058 <__ieee754_pow+0x17c>
    4056:	e767      	b.n	3f28 <__ieee754_pow+0x4c>
    4058:	2301      	movs	r3, #1
    405a:	4019      	ands	r1, r3
    405c:	3301      	adds	r3, #1
    405e:	1a5b      	subs	r3, r3, r1
    4060:	469b      	mov	fp, r3
    4062:	e761      	b.n	3f28 <__ieee754_pow+0x4c>
    4064:	4b12      	ldr	r3, [pc, #72]	; (40b0 <__ieee754_pow+0x1d4>)
    4066:	18e3      	adds	r3, r4, r3
    4068:	431f      	orrs	r7, r3
    406a:	d100      	bne.n	406e <__ieee754_pow+0x192>
    406c:	e77c      	b.n	3f68 <__ieee754_pow+0x8c>
    406e:	4b14      	ldr	r3, [pc, #80]	; (40c0 <__ieee754_pow+0x1e4>)
    4070:	429c      	cmp	r4, r3
    4072:	dc00      	bgt.n	4076 <__ieee754_pow+0x19a>
    4074:	e327      	b.n	46c6 <__ieee754_pow+0x7ea>
    4076:	9800      	ldr	r0, [sp, #0]
    4078:	9901      	ldr	r1, [sp, #4]
    407a:	4653      	mov	r3, sl
    407c:	2b00      	cmp	r3, #0
    407e:	db00      	blt.n	4082 <__ieee754_pow+0x1a6>
    4080:	e774      	b.n	3f6c <__ieee754_pow+0x90>
    4082:	2000      	movs	r0, #0
    4084:	2100      	movs	r1, #0
    4086:	e771      	b.n	3f6c <__ieee754_pow+0x90>
    4088:	2302      	movs	r3, #2
    408a:	469b      	mov	fp, r3
    408c:	e74c      	b.n	3f28 <__ieee754_pow+0x4c>
    408e:	003a      	movs	r2, r7
    4090:	0033      	movs	r3, r6
    4092:	0038      	movs	r0, r7
    4094:	0031      	movs	r1, r6
    4096:	f002 fb69 	bl	676c <__aeabi_dsub>
    409a:	0002      	movs	r2, r0
    409c:	000b      	movs	r3, r1
    409e:	f001 fcb1 	bl	5a04 <__aeabi_ddiv>
    40a2:	e763      	b.n	3f6c <__ieee754_pow+0x90>
    40a4:	7ff00000 	.word	0x7ff00000
    40a8:	3ff00000 	.word	0x3ff00000
    40ac:	3fe00000 	.word	0x3fe00000
    40b0:	c0100000 	.word	0xc0100000
    40b4:	000071a0 	.word	0x000071a0
    40b8:	41e00000 	.word	0x41e00000
    40bc:	43f00000 	.word	0x43f00000
    40c0:	3fefffff 	.word	0x3fefffff
    40c4:	8800759c 	.word	0x8800759c
    40c8:	7e37e43c 	.word	0x7e37e43c
    40cc:	433fffff 	.word	0x433fffff
    40d0:	fffffc01 	.word	0xfffffc01
    40d4:	4be9      	ldr	r3, [pc, #932]	; (447c <__ieee754_pow+0x5a0>)
    40d6:	2200      	movs	r2, #0
    40d8:	429c      	cmp	r4, r3
    40da:	dc06      	bgt.n	40ea <__ieee754_pow+0x20e>
    40dc:	2200      	movs	r2, #0
    40de:	4be8      	ldr	r3, [pc, #928]	; (4480 <__ieee754_pow+0x5a4>)
    40e0:	f002 f8c4 	bl	626c <__aeabi_dmul>
    40e4:	2235      	movs	r2, #53	; 0x35
    40e6:	000c      	movs	r4, r1
    40e8:	4252      	negs	r2, r2
    40ea:	4de6      	ldr	r5, [pc, #920]	; (4484 <__ieee754_pow+0x5a8>)
    40ec:	1523      	asrs	r3, r4, #20
    40ee:	46ac      	mov	ip, r5
    40f0:	4463      	add	r3, ip
    40f2:	4699      	mov	r9, r3
    40f4:	0324      	lsls	r4, r4, #12
    40f6:	4de4      	ldr	r5, [pc, #912]	; (4488 <__ieee754_pow+0x5ac>)
    40f8:	4be4      	ldr	r3, [pc, #912]	; (448c <__ieee754_pow+0x5b0>)
    40fa:	0b24      	lsrs	r4, r4, #12
    40fc:	4491      	add	r9, r2
    40fe:	4325      	orrs	r5, r4
    4100:	429c      	cmp	r4, r3
    4102:	dd09      	ble.n	4118 <__ieee754_pow+0x23c>
    4104:	4be2      	ldr	r3, [pc, #904]	; (4490 <__ieee754_pow+0x5b4>)
    4106:	429c      	cmp	r4, r3
    4108:	dc00      	bgt.n	410c <__ieee754_pow+0x230>
    410a:	e3b6      	b.n	487a <__ieee754_pow+0x99e>
    410c:	2301      	movs	r3, #1
    410e:	469c      	mov	ip, r3
    4110:	4be0      	ldr	r3, [pc, #896]	; (4494 <__ieee754_pow+0x5b8>)
    4112:	44e1      	add	r9, ip
    4114:	469c      	mov	ip, r3
    4116:	4465      	add	r5, ip
    4118:	2300      	movs	r3, #0
    411a:	2400      	movs	r4, #0
    411c:	2200      	movs	r2, #0
    411e:	9308      	str	r3, [sp, #32]
    4120:	9409      	str	r4, [sp, #36]	; 0x24
    4122:	930c      	str	r3, [sp, #48]	; 0x30
    4124:	940d      	str	r4, [sp, #52]	; 0x34
    4126:	2400      	movs	r4, #0
    4128:	4bd7      	ldr	r3, [pc, #860]	; (4488 <__ieee754_pow+0x5ac>)
    412a:	9206      	str	r2, [sp, #24]
    412c:	9307      	str	r3, [sp, #28]
    412e:	9a06      	ldr	r2, [sp, #24]
    4130:	9b07      	ldr	r3, [sp, #28]
    4132:	0029      	movs	r1, r5
    4134:	900a      	str	r0, [sp, #40]	; 0x28
    4136:	910b      	str	r1, [sp, #44]	; 0x2c
    4138:	f002 fb18 	bl	676c <__aeabi_dsub>
    413c:	9a06      	ldr	r2, [sp, #24]
    413e:	9b07      	ldr	r3, [sp, #28]
    4140:	0006      	movs	r6, r0
    4142:	000f      	movs	r7, r1
    4144:	980a      	ldr	r0, [sp, #40]	; 0x28
    4146:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4148:	f001 f94c 	bl	53e4 <__aeabi_dadd>
    414c:	0002      	movs	r2, r0
    414e:	000b      	movs	r3, r1
    4150:	2000      	movs	r0, #0
    4152:	49cd      	ldr	r1, [pc, #820]	; (4488 <__ieee754_pow+0x5ac>)
    4154:	f001 fc56 	bl	5a04 <__aeabi_ddiv>
    4158:	000a      	movs	r2, r1
    415a:	0001      	movs	r1, r0
    415c:	0013      	movs	r3, r2
    415e:	910e      	str	r1, [sp, #56]	; 0x38
    4160:	920f      	str	r2, [sp, #60]	; 0x3c
    4162:	0002      	movs	r2, r0
    4164:	0039      	movs	r1, r7
    4166:	0030      	movs	r0, r6
    4168:	f002 f880 	bl	626c <__aeabi_dmul>
    416c:	000a      	movs	r2, r1
    416e:	0001      	movs	r1, r0
    4170:	2080      	movs	r0, #128	; 0x80
    4172:	9104      	str	r1, [sp, #16]
    4174:	9205      	str	r2, [sp, #20]
    4176:	0013      	movs	r3, r2
    4178:	2200      	movs	r2, #0
    417a:	1069      	asrs	r1, r5, #1
    417c:	2580      	movs	r5, #128	; 0x80
    417e:	0300      	lsls	r0, r0, #12
    4180:	4684      	mov	ip, r0
    4182:	9202      	str	r2, [sp, #8]
    4184:	9303      	str	r3, [sp, #12]
    4186:	2200      	movs	r2, #0
    4188:	05ad      	lsls	r5, r5, #22
    418a:	430d      	orrs	r5, r1
    418c:	4465      	add	r5, ip
    418e:	192b      	adds	r3, r5, r4
    4190:	9802      	ldr	r0, [sp, #8]
    4192:	9903      	ldr	r1, [sp, #12]
    4194:	0014      	movs	r4, r2
    4196:	001d      	movs	r5, r3
    4198:	f002 f868 	bl	626c <__aeabi_dmul>
    419c:	0002      	movs	r2, r0
    419e:	000b      	movs	r3, r1
    41a0:	0030      	movs	r0, r6
    41a2:	0039      	movs	r1, r7
    41a4:	f002 fae2 	bl	676c <__aeabi_dsub>
    41a8:	9a06      	ldr	r2, [sp, #24]
    41aa:	9b07      	ldr	r3, [sp, #28]
    41ac:	0006      	movs	r6, r0
    41ae:	000f      	movs	r7, r1
    41b0:	0020      	movs	r0, r4
    41b2:	0029      	movs	r1, r5
    41b4:	f002 fada 	bl	676c <__aeabi_dsub>
    41b8:	0002      	movs	r2, r0
    41ba:	000b      	movs	r3, r1
    41bc:	980a      	ldr	r0, [sp, #40]	; 0x28
    41be:	990b      	ldr	r1, [sp, #44]	; 0x2c
    41c0:	f002 fad4 	bl	676c <__aeabi_dsub>
    41c4:	9a02      	ldr	r2, [sp, #8]
    41c6:	9b03      	ldr	r3, [sp, #12]
    41c8:	f002 f850 	bl	626c <__aeabi_dmul>
    41cc:	0002      	movs	r2, r0
    41ce:	000b      	movs	r3, r1
    41d0:	0030      	movs	r0, r6
    41d2:	0039      	movs	r1, r7
    41d4:	f002 faca 	bl	676c <__aeabi_dsub>
    41d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    41da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    41dc:	f002 f846 	bl	626c <__aeabi_dmul>
    41e0:	9d04      	ldr	r5, [sp, #16]
    41e2:	9e05      	ldr	r6, [sp, #20]
    41e4:	9006      	str	r0, [sp, #24]
    41e6:	9107      	str	r1, [sp, #28]
    41e8:	002a      	movs	r2, r5
    41ea:	0033      	movs	r3, r6
    41ec:	0028      	movs	r0, r5
    41ee:	0031      	movs	r1, r6
    41f0:	f002 f83c 	bl	626c <__aeabi_dmul>
    41f4:	0006      	movs	r6, r0
    41f6:	000f      	movs	r7, r1
    41f8:	4aa7      	ldr	r2, [pc, #668]	; (4498 <__ieee754_pow+0x5bc>)
    41fa:	4ba8      	ldr	r3, [pc, #672]	; (449c <__ieee754_pow+0x5c0>)
    41fc:	f002 f836 	bl	626c <__aeabi_dmul>
    4200:	4aa7      	ldr	r2, [pc, #668]	; (44a0 <__ieee754_pow+0x5c4>)
    4202:	4ba8      	ldr	r3, [pc, #672]	; (44a4 <__ieee754_pow+0x5c8>)
    4204:	f001 f8ee 	bl	53e4 <__aeabi_dadd>
    4208:	0032      	movs	r2, r6
    420a:	003b      	movs	r3, r7
    420c:	f002 f82e 	bl	626c <__aeabi_dmul>
    4210:	4aa5      	ldr	r2, [pc, #660]	; (44a8 <__ieee754_pow+0x5cc>)
    4212:	4ba6      	ldr	r3, [pc, #664]	; (44ac <__ieee754_pow+0x5d0>)
    4214:	f001 f8e6 	bl	53e4 <__aeabi_dadd>
    4218:	0032      	movs	r2, r6
    421a:	003b      	movs	r3, r7
    421c:	f002 f826 	bl	626c <__aeabi_dmul>
    4220:	4aa3      	ldr	r2, [pc, #652]	; (44b0 <__ieee754_pow+0x5d4>)
    4222:	4ba4      	ldr	r3, [pc, #656]	; (44b4 <__ieee754_pow+0x5d8>)
    4224:	f001 f8de 	bl	53e4 <__aeabi_dadd>
    4228:	0032      	movs	r2, r6
    422a:	003b      	movs	r3, r7
    422c:	f002 f81e 	bl	626c <__aeabi_dmul>
    4230:	4aa1      	ldr	r2, [pc, #644]	; (44b8 <__ieee754_pow+0x5dc>)
    4232:	4ba2      	ldr	r3, [pc, #648]	; (44bc <__ieee754_pow+0x5e0>)
    4234:	f001 f8d6 	bl	53e4 <__aeabi_dadd>
    4238:	0032      	movs	r2, r6
    423a:	003b      	movs	r3, r7
    423c:	f002 f816 	bl	626c <__aeabi_dmul>
    4240:	4a9f      	ldr	r2, [pc, #636]	; (44c0 <__ieee754_pow+0x5e4>)
    4242:	4ba0      	ldr	r3, [pc, #640]	; (44c4 <__ieee754_pow+0x5e8>)
    4244:	f001 f8ce 	bl	53e4 <__aeabi_dadd>
    4248:	0032      	movs	r2, r6
    424a:	0004      	movs	r4, r0
    424c:	000d      	movs	r5, r1
    424e:	003b      	movs	r3, r7
    4250:	0030      	movs	r0, r6
    4252:	0039      	movs	r1, r7
    4254:	f002 f80a 	bl	626c <__aeabi_dmul>
    4258:	0002      	movs	r2, r0
    425a:	000b      	movs	r3, r1
    425c:	0020      	movs	r0, r4
    425e:	0029      	movs	r1, r5
    4260:	f002 f804 	bl	626c <__aeabi_dmul>
    4264:	9e02      	ldr	r6, [sp, #8]
    4266:	9f03      	ldr	r7, [sp, #12]
    4268:	0004      	movs	r4, r0
    426a:	000d      	movs	r5, r1
    426c:	9804      	ldr	r0, [sp, #16]
    426e:	9905      	ldr	r1, [sp, #20]
    4270:	0032      	movs	r2, r6
    4272:	003b      	movs	r3, r7
    4274:	f001 f8b6 	bl	53e4 <__aeabi_dadd>
    4278:	9a06      	ldr	r2, [sp, #24]
    427a:	9b07      	ldr	r3, [sp, #28]
    427c:	f001 fff6 	bl	626c <__aeabi_dmul>
    4280:	0022      	movs	r2, r4
    4282:	002b      	movs	r3, r5
    4284:	f001 f8ae 	bl	53e4 <__aeabi_dadd>
    4288:	0032      	movs	r2, r6
    428a:	900a      	str	r0, [sp, #40]	; 0x28
    428c:	910b      	str	r1, [sp, #44]	; 0x2c
    428e:	003b      	movs	r3, r7
    4290:	0030      	movs	r0, r6
    4292:	0039      	movs	r1, r7
    4294:	9602      	str	r6, [sp, #8]
    4296:	9703      	str	r7, [sp, #12]
    4298:	f001 ffe8 	bl	626c <__aeabi_dmul>
    429c:	2200      	movs	r2, #0
    429e:	4b8a      	ldr	r3, [pc, #552]	; (44c8 <__ieee754_pow+0x5ec>)
    42a0:	0004      	movs	r4, r0
    42a2:	000d      	movs	r5, r1
    42a4:	f001 f89e 	bl	53e4 <__aeabi_dadd>
    42a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    42aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    42ac:	f001 f89a 	bl	53e4 <__aeabi_dadd>
    42b0:	2600      	movs	r6, #0
    42b2:	000f      	movs	r7, r1
    42b4:	0032      	movs	r2, r6
    42b6:	000b      	movs	r3, r1
    42b8:	9802      	ldr	r0, [sp, #8]
    42ba:	9903      	ldr	r1, [sp, #12]
    42bc:	f001 ffd6 	bl	626c <__aeabi_dmul>
    42c0:	2200      	movs	r2, #0
    42c2:	9002      	str	r0, [sp, #8]
    42c4:	9103      	str	r1, [sp, #12]
    42c6:	4b80      	ldr	r3, [pc, #512]	; (44c8 <__ieee754_pow+0x5ec>)
    42c8:	0030      	movs	r0, r6
    42ca:	0039      	movs	r1, r7
    42cc:	f002 fa4e 	bl	676c <__aeabi_dsub>
    42d0:	0022      	movs	r2, r4
    42d2:	002b      	movs	r3, r5
    42d4:	f002 fa4a 	bl	676c <__aeabi_dsub>
    42d8:	0002      	movs	r2, r0
    42da:	000b      	movs	r3, r1
    42dc:	980a      	ldr	r0, [sp, #40]	; 0x28
    42de:	990b      	ldr	r1, [sp, #44]	; 0x2c
    42e0:	f002 fa44 	bl	676c <__aeabi_dsub>
    42e4:	9a04      	ldr	r2, [sp, #16]
    42e6:	9b05      	ldr	r3, [sp, #20]
    42e8:	f001 ffc0 	bl	626c <__aeabi_dmul>
    42ec:	0032      	movs	r2, r6
    42ee:	0004      	movs	r4, r0
    42f0:	000d      	movs	r5, r1
    42f2:	9806      	ldr	r0, [sp, #24]
    42f4:	9907      	ldr	r1, [sp, #28]
    42f6:	003b      	movs	r3, r7
    42f8:	f001 ffb8 	bl	626c <__aeabi_dmul>
    42fc:	0002      	movs	r2, r0
    42fe:	000b      	movs	r3, r1
    4300:	0020      	movs	r0, r4
    4302:	0029      	movs	r1, r5
    4304:	f001 f86e 	bl	53e4 <__aeabi_dadd>
    4308:	0004      	movs	r4, r0
    430a:	000d      	movs	r5, r1
    430c:	0002      	movs	r2, r0
    430e:	000b      	movs	r3, r1
    4310:	9802      	ldr	r0, [sp, #8]
    4312:	9903      	ldr	r1, [sp, #12]
    4314:	f001 f866 	bl	53e4 <__aeabi_dadd>
    4318:	2600      	movs	r6, #0
    431a:	22e0      	movs	r2, #224	; 0xe0
    431c:	4b6b      	ldr	r3, [pc, #428]	; (44cc <__ieee754_pow+0x5f0>)
    431e:	0612      	lsls	r2, r2, #24
    4320:	0030      	movs	r0, r6
    4322:	000f      	movs	r7, r1
    4324:	f001 ffa2 	bl	626c <__aeabi_dmul>
    4328:	9a02      	ldr	r2, [sp, #8]
    432a:	9b03      	ldr	r3, [sp, #12]
    432c:	9004      	str	r0, [sp, #16]
    432e:	9105      	str	r1, [sp, #20]
    4330:	0030      	movs	r0, r6
    4332:	0039      	movs	r1, r7
    4334:	f002 fa1a 	bl	676c <__aeabi_dsub>
    4338:	0002      	movs	r2, r0
    433a:	000b      	movs	r3, r1
    433c:	0020      	movs	r0, r4
    433e:	0029      	movs	r1, r5
    4340:	f002 fa14 	bl	676c <__aeabi_dsub>
    4344:	4a62      	ldr	r2, [pc, #392]	; (44d0 <__ieee754_pow+0x5f4>)
    4346:	4b61      	ldr	r3, [pc, #388]	; (44cc <__ieee754_pow+0x5f0>)
    4348:	f001 ff90 	bl	626c <__aeabi_dmul>
    434c:	4a61      	ldr	r2, [pc, #388]	; (44d4 <__ieee754_pow+0x5f8>)
    434e:	0004      	movs	r4, r0
    4350:	000d      	movs	r5, r1
    4352:	4b61      	ldr	r3, [pc, #388]	; (44d8 <__ieee754_pow+0x5fc>)
    4354:	0030      	movs	r0, r6
    4356:	0039      	movs	r1, r7
    4358:	f001 ff88 	bl	626c <__aeabi_dmul>
    435c:	0002      	movs	r2, r0
    435e:	000b      	movs	r3, r1
    4360:	0020      	movs	r0, r4
    4362:	0029      	movs	r1, r5
    4364:	f001 f83e 	bl	53e4 <__aeabi_dadd>
    4368:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    436a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    436c:	f001 f83a 	bl	53e4 <__aeabi_dadd>
    4370:	0006      	movs	r6, r0
    4372:	4648      	mov	r0, r9
    4374:	000f      	movs	r7, r1
    4376:	f002 fd63 	bl	6e40 <__aeabi_i2d>
    437a:	0004      	movs	r4, r0
    437c:	000d      	movs	r5, r1
    437e:	9804      	ldr	r0, [sp, #16]
    4380:	9905      	ldr	r1, [sp, #20]
    4382:	0032      	movs	r2, r6
    4384:	003b      	movs	r3, r7
    4386:	f001 f82d 	bl	53e4 <__aeabi_dadd>
    438a:	9a08      	ldr	r2, [sp, #32]
    438c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    438e:	f001 f829 	bl	53e4 <__aeabi_dadd>
    4392:	0022      	movs	r2, r4
    4394:	002b      	movs	r3, r5
    4396:	f001 f825 	bl	53e4 <__aeabi_dadd>
    439a:	2000      	movs	r0, #0
    439c:	0022      	movs	r2, r4
    439e:	002b      	movs	r3, r5
    43a0:	9002      	str	r0, [sp, #8]
    43a2:	9103      	str	r1, [sp, #12]
    43a4:	f002 f9e2 	bl	676c <__aeabi_dsub>
    43a8:	9a08      	ldr	r2, [sp, #32]
    43aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    43ac:	f002 f9de 	bl	676c <__aeabi_dsub>
    43b0:	9a04      	ldr	r2, [sp, #16]
    43b2:	9b05      	ldr	r3, [sp, #20]
    43b4:	f002 f9da 	bl	676c <__aeabi_dsub>
    43b8:	0002      	movs	r2, r0
    43ba:	000b      	movs	r3, r1
    43bc:	0030      	movs	r0, r6
    43be:	0039      	movs	r1, r7
    43c0:	f002 f9d4 	bl	676c <__aeabi_dsub>
    43c4:	9004      	str	r0, [sp, #16]
    43c6:	9105      	str	r1, [sp, #20]
    43c8:	465b      	mov	r3, fp
    43ca:	4642      	mov	r2, r8
    43cc:	3b01      	subs	r3, #1
    43ce:	4313      	orrs	r3, r2
    43d0:	d100      	bne.n	43d4 <__ieee754_pow+0x4f8>
    43d2:	e1ab      	b.n	472c <__ieee754_pow+0x850>
    43d4:	2300      	movs	r3, #0
    43d6:	4c2c      	ldr	r4, [pc, #176]	; (4488 <__ieee754_pow+0x5ac>)
    43d8:	9306      	str	r3, [sp, #24]
    43da:	9407      	str	r4, [sp, #28]
    43dc:	9800      	ldr	r0, [sp, #0]
    43de:	9901      	ldr	r1, [sp, #4]
    43e0:	2600      	movs	r6, #0
    43e2:	000b      	movs	r3, r1
    43e4:	0032      	movs	r2, r6
    43e6:	000f      	movs	r7, r1
    43e8:	f002 f9c0 	bl	676c <__aeabi_dsub>
    43ec:	9a02      	ldr	r2, [sp, #8]
    43ee:	9b03      	ldr	r3, [sp, #12]
    43f0:	f001 ff3c 	bl	626c <__aeabi_dmul>
    43f4:	9a00      	ldr	r2, [sp, #0]
    43f6:	9b01      	ldr	r3, [sp, #4]
    43f8:	0004      	movs	r4, r0
    43fa:	000d      	movs	r5, r1
    43fc:	9804      	ldr	r0, [sp, #16]
    43fe:	9905      	ldr	r1, [sp, #20]
    4400:	f001 ff34 	bl	626c <__aeabi_dmul>
    4404:	0002      	movs	r2, r0
    4406:	000b      	movs	r3, r1
    4408:	0020      	movs	r0, r4
    440a:	0029      	movs	r1, r5
    440c:	f000 ffea 	bl	53e4 <__aeabi_dadd>
    4410:	0004      	movs	r4, r0
    4412:	000d      	movs	r5, r1
    4414:	9802      	ldr	r0, [sp, #8]
    4416:	9903      	ldr	r1, [sp, #12]
    4418:	0032      	movs	r2, r6
    441a:	003b      	movs	r3, r7
    441c:	9400      	str	r4, [sp, #0]
    441e:	9501      	str	r5, [sp, #4]
    4420:	f001 ff24 	bl	626c <__aeabi_dmul>
    4424:	0002      	movs	r2, r0
    4426:	000b      	movs	r3, r1
    4428:	0006      	movs	r6, r0
    442a:	000f      	movs	r7, r1
    442c:	0020      	movs	r0, r4
    442e:	0029      	movs	r1, r5
    4430:	f000 ffd8 	bl	53e4 <__aeabi_dadd>
    4434:	4b29      	ldr	r3, [pc, #164]	; (44dc <__ieee754_pow+0x600>)
    4436:	0004      	movs	r4, r0
    4438:	000d      	movs	r5, r1
    443a:	0002      	movs	r2, r0
    443c:	468b      	mov	fp, r1
    443e:	4299      	cmp	r1, r3
    4440:	dc00      	bgt.n	4444 <__ieee754_pow+0x568>
    4442:	e14f      	b.n	46e4 <__ieee754_pow+0x808>
    4444:	4b26      	ldr	r3, [pc, #152]	; (44e0 <__ieee754_pow+0x604>)
    4446:	18cb      	adds	r3, r1, r3
    4448:	4303      	orrs	r3, r0
    444a:	d000      	beq.n	444e <__ieee754_pow+0x572>
    444c:	e1e2      	b.n	4814 <__ieee754_pow+0x938>
    444e:	9800      	ldr	r0, [sp, #0]
    4450:	9901      	ldr	r1, [sp, #4]
    4452:	4a24      	ldr	r2, [pc, #144]	; (44e4 <__ieee754_pow+0x608>)
    4454:	4b24      	ldr	r3, [pc, #144]	; (44e8 <__ieee754_pow+0x60c>)
    4456:	f000 ffc5 	bl	53e4 <__aeabi_dadd>
    445a:	0032      	movs	r2, r6
    445c:	9002      	str	r0, [sp, #8]
    445e:	9103      	str	r1, [sp, #12]
    4460:	003b      	movs	r3, r7
    4462:	0020      	movs	r0, r4
    4464:	0029      	movs	r1, r5
    4466:	f002 f981 	bl	676c <__aeabi_dsub>
    446a:	0002      	movs	r2, r0
    446c:	000b      	movs	r3, r1
    446e:	9802      	ldr	r0, [sp, #8]
    4470:	9903      	ldr	r1, [sp, #12]
    4472:	f000 fe1b 	bl	50ac <__aeabi_dcmpgt>
    4476:	46aa      	mov	sl, r5
    4478:	e038      	b.n	44ec <__ieee754_pow+0x610>
    447a:	46c0      	nop			; (mov r8, r8)
    447c:	000fffff 	.word	0x000fffff
    4480:	43400000 	.word	0x43400000
    4484:	fffffc01 	.word	0xfffffc01
    4488:	3ff00000 	.word	0x3ff00000
    448c:	0003988e 	.word	0x0003988e
    4490:	000bb679 	.word	0x000bb679
    4494:	fff00000 	.word	0xfff00000
    4498:	4a454eef 	.word	0x4a454eef
    449c:	3fca7e28 	.word	0x3fca7e28
    44a0:	93c9db65 	.word	0x93c9db65
    44a4:	3fcd864a 	.word	0x3fcd864a
    44a8:	a91d4101 	.word	0xa91d4101
    44ac:	3fd17460 	.word	0x3fd17460
    44b0:	518f264d 	.word	0x518f264d
    44b4:	3fd55555 	.word	0x3fd55555
    44b8:	db6fabff 	.word	0xdb6fabff
    44bc:	3fdb6db6 	.word	0x3fdb6db6
    44c0:	33333303 	.word	0x33333303
    44c4:	3fe33333 	.word	0x3fe33333
    44c8:	40080000 	.word	0x40080000
    44cc:	3feec709 	.word	0x3feec709
    44d0:	dc3a03fd 	.word	0xdc3a03fd
    44d4:	145b01f5 	.word	0x145b01f5
    44d8:	be3e2fe0 	.word	0xbe3e2fe0
    44dc:	408fffff 	.word	0x408fffff
    44e0:	bf700000 	.word	0xbf700000
    44e4:	652b82fe 	.word	0x652b82fe
    44e8:	3c971547 	.word	0x3c971547
    44ec:	2800      	cmp	r0, #0
    44ee:	d000      	beq.n	44f2 <__ieee754_pow+0x616>
    44f0:	e190      	b.n	4814 <__ieee754_pow+0x938>
    44f2:	4aec      	ldr	r2, [pc, #944]	; (48a4 <__ieee754_pow+0x9c8>)
    44f4:	4653      	mov	r3, sl
    44f6:	4694      	mov	ip, r2
    44f8:	2280      	movs	r2, #128	; 0x80
    44fa:	0352      	lsls	r2, r2, #13
    44fc:	0011      	movs	r1, r2
    44fe:	151b      	asrs	r3, r3, #20
    4500:	4463      	add	r3, ip
    4502:	4119      	asrs	r1, r3
    4504:	000b      	movs	r3, r1
    4506:	4690      	mov	r8, r2
    4508:	4ae7      	ldr	r2, [pc, #924]	; (48a8 <__ieee754_pow+0x9cc>)
    450a:	445b      	add	r3, fp
    450c:	4694      	mov	ip, r2
    450e:	005c      	lsls	r4, r3, #1
    4510:	0d64      	lsrs	r4, r4, #21
    4512:	4de6      	ldr	r5, [pc, #920]	; (48ac <__ieee754_pow+0x9d0>)
    4514:	4464      	add	r4, ip
    4516:	4125      	asrs	r5, r4
    4518:	001a      	movs	r2, r3
    451a:	43aa      	bics	r2, r5
    451c:	0011      	movs	r1, r2
    451e:	4642      	mov	r2, r8
    4520:	031b      	lsls	r3, r3, #12
    4522:	0b1b      	lsrs	r3, r3, #12
    4524:	4313      	orrs	r3, r2
    4526:	2214      	movs	r2, #20
    4528:	1b14      	subs	r4, r2, r4
    452a:	4123      	asrs	r3, r4
    452c:	4699      	mov	r9, r3
    452e:	465b      	mov	r3, fp
    4530:	2000      	movs	r0, #0
    4532:	2b00      	cmp	r3, #0
    4534:	da00      	bge.n	4538 <__ieee754_pow+0x65c>
    4536:	e1b0      	b.n	489a <__ieee754_pow+0x9be>
    4538:	0002      	movs	r2, r0
    453a:	000b      	movs	r3, r1
    453c:	0030      	movs	r0, r6
    453e:	0039      	movs	r1, r7
    4540:	f002 f914 	bl	676c <__aeabi_dsub>
    4544:	000b      	movs	r3, r1
    4546:	0002      	movs	r2, r0
    4548:	0006      	movs	r6, r0
    454a:	000f      	movs	r7, r1
    454c:	9800      	ldr	r0, [sp, #0]
    454e:	9901      	ldr	r1, [sp, #4]
    4550:	f000 ff48 	bl	53e4 <__aeabi_dadd>
    4554:	464b      	mov	r3, r9
    4556:	051b      	lsls	r3, r3, #20
    4558:	000d      	movs	r5, r1
    455a:	4698      	mov	r8, r3
    455c:	2400      	movs	r4, #0
    455e:	2200      	movs	r2, #0
    4560:	4bd3      	ldr	r3, [pc, #844]	; (48b0 <__ieee754_pow+0x9d4>)
    4562:	0020      	movs	r0, r4
    4564:	0029      	movs	r1, r5
    4566:	f001 fe81 	bl	626c <__aeabi_dmul>
    456a:	0032      	movs	r2, r6
    456c:	9002      	str	r0, [sp, #8]
    456e:	9103      	str	r1, [sp, #12]
    4570:	003b      	movs	r3, r7
    4572:	0020      	movs	r0, r4
    4574:	0029      	movs	r1, r5
    4576:	f002 f8f9 	bl	676c <__aeabi_dsub>
    457a:	0002      	movs	r2, r0
    457c:	000b      	movs	r3, r1
    457e:	9800      	ldr	r0, [sp, #0]
    4580:	9901      	ldr	r1, [sp, #4]
    4582:	f002 f8f3 	bl	676c <__aeabi_dsub>
    4586:	4acb      	ldr	r2, [pc, #812]	; (48b4 <__ieee754_pow+0x9d8>)
    4588:	4bcb      	ldr	r3, [pc, #812]	; (48b8 <__ieee754_pow+0x9dc>)
    458a:	f001 fe6f 	bl	626c <__aeabi_dmul>
    458e:	4acb      	ldr	r2, [pc, #812]	; (48bc <__ieee754_pow+0x9e0>)
    4590:	0006      	movs	r6, r0
    4592:	000f      	movs	r7, r1
    4594:	4bca      	ldr	r3, [pc, #808]	; (48c0 <__ieee754_pow+0x9e4>)
    4596:	0020      	movs	r0, r4
    4598:	0029      	movs	r1, r5
    459a:	f001 fe67 	bl	626c <__aeabi_dmul>
    459e:	0002      	movs	r2, r0
    45a0:	000b      	movs	r3, r1
    45a2:	0030      	movs	r0, r6
    45a4:	0039      	movs	r1, r7
    45a6:	f000 ff1d 	bl	53e4 <__aeabi_dadd>
    45aa:	0004      	movs	r4, r0
    45ac:	000d      	movs	r5, r1
    45ae:	0002      	movs	r2, r0
    45b0:	000b      	movs	r3, r1
    45b2:	9802      	ldr	r0, [sp, #8]
    45b4:	9903      	ldr	r1, [sp, #12]
    45b6:	f000 ff15 	bl	53e4 <__aeabi_dadd>
    45ba:	9a02      	ldr	r2, [sp, #8]
    45bc:	9b03      	ldr	r3, [sp, #12]
    45be:	0006      	movs	r6, r0
    45c0:	000f      	movs	r7, r1
    45c2:	f002 f8d3 	bl	676c <__aeabi_dsub>
    45c6:	0002      	movs	r2, r0
    45c8:	000b      	movs	r3, r1
    45ca:	0020      	movs	r0, r4
    45cc:	0029      	movs	r1, r5
    45ce:	f002 f8cd 	bl	676c <__aeabi_dsub>
    45d2:	0032      	movs	r2, r6
    45d4:	9000      	str	r0, [sp, #0]
    45d6:	9101      	str	r1, [sp, #4]
    45d8:	003b      	movs	r3, r7
    45da:	0030      	movs	r0, r6
    45dc:	0039      	movs	r1, r7
    45de:	f001 fe45 	bl	626c <__aeabi_dmul>
    45e2:	0004      	movs	r4, r0
    45e4:	000d      	movs	r5, r1
    45e6:	4ab7      	ldr	r2, [pc, #732]	; (48c4 <__ieee754_pow+0x9e8>)
    45e8:	4bb7      	ldr	r3, [pc, #732]	; (48c8 <__ieee754_pow+0x9ec>)
    45ea:	f001 fe3f 	bl	626c <__aeabi_dmul>
    45ee:	4ab7      	ldr	r2, [pc, #732]	; (48cc <__ieee754_pow+0x9f0>)
    45f0:	4bb7      	ldr	r3, [pc, #732]	; (48d0 <__ieee754_pow+0x9f4>)
    45f2:	f002 f8bb 	bl	676c <__aeabi_dsub>
    45f6:	0022      	movs	r2, r4
    45f8:	002b      	movs	r3, r5
    45fa:	f001 fe37 	bl	626c <__aeabi_dmul>
    45fe:	4ab5      	ldr	r2, [pc, #724]	; (48d4 <__ieee754_pow+0x9f8>)
    4600:	4bb5      	ldr	r3, [pc, #724]	; (48d8 <__ieee754_pow+0x9fc>)
    4602:	f000 feef 	bl	53e4 <__aeabi_dadd>
    4606:	0022      	movs	r2, r4
    4608:	002b      	movs	r3, r5
    460a:	f001 fe2f 	bl	626c <__aeabi_dmul>
    460e:	4ab3      	ldr	r2, [pc, #716]	; (48dc <__ieee754_pow+0xa00>)
    4610:	4bb3      	ldr	r3, [pc, #716]	; (48e0 <__ieee754_pow+0xa04>)
    4612:	f002 f8ab 	bl	676c <__aeabi_dsub>
    4616:	0022      	movs	r2, r4
    4618:	002b      	movs	r3, r5
    461a:	f001 fe27 	bl	626c <__aeabi_dmul>
    461e:	4ab1      	ldr	r2, [pc, #708]	; (48e4 <__ieee754_pow+0xa08>)
    4620:	4bb1      	ldr	r3, [pc, #708]	; (48e8 <__ieee754_pow+0xa0c>)
    4622:	f000 fedf 	bl	53e4 <__aeabi_dadd>
    4626:	0022      	movs	r2, r4
    4628:	002b      	movs	r3, r5
    462a:	f001 fe1f 	bl	626c <__aeabi_dmul>
    462e:	0002      	movs	r2, r0
    4630:	000b      	movs	r3, r1
    4632:	0030      	movs	r0, r6
    4634:	0039      	movs	r1, r7
    4636:	f002 f899 	bl	676c <__aeabi_dsub>
    463a:	0004      	movs	r4, r0
    463c:	000d      	movs	r5, r1
    463e:	0002      	movs	r2, r0
    4640:	000b      	movs	r3, r1
    4642:	0030      	movs	r0, r6
    4644:	0039      	movs	r1, r7
    4646:	f001 fe11 	bl	626c <__aeabi_dmul>
    464a:	2380      	movs	r3, #128	; 0x80
    464c:	9002      	str	r0, [sp, #8]
    464e:	9103      	str	r1, [sp, #12]
    4650:	2200      	movs	r2, #0
    4652:	05db      	lsls	r3, r3, #23
    4654:	0020      	movs	r0, r4
    4656:	0029      	movs	r1, r5
    4658:	f002 f888 	bl	676c <__aeabi_dsub>
    465c:	0002      	movs	r2, r0
    465e:	000b      	movs	r3, r1
    4660:	9802      	ldr	r0, [sp, #8]
    4662:	9903      	ldr	r1, [sp, #12]
    4664:	f001 f9ce 	bl	5a04 <__aeabi_ddiv>
    4668:	9a00      	ldr	r2, [sp, #0]
    466a:	9b01      	ldr	r3, [sp, #4]
    466c:	0004      	movs	r4, r0
    466e:	000d      	movs	r5, r1
    4670:	0030      	movs	r0, r6
    4672:	0039      	movs	r1, r7
    4674:	f001 fdfa 	bl	626c <__aeabi_dmul>
    4678:	9a00      	ldr	r2, [sp, #0]
    467a:	9b01      	ldr	r3, [sp, #4]
    467c:	f000 feb2 	bl	53e4 <__aeabi_dadd>
    4680:	0002      	movs	r2, r0
    4682:	000b      	movs	r3, r1
    4684:	0020      	movs	r0, r4
    4686:	0029      	movs	r1, r5
    4688:	f002 f870 	bl	676c <__aeabi_dsub>
    468c:	0032      	movs	r2, r6
    468e:	003b      	movs	r3, r7
    4690:	f002 f86c 	bl	676c <__aeabi_dsub>
    4694:	0002      	movs	r2, r0
    4696:	000b      	movs	r3, r1
    4698:	2000      	movs	r0, #0
    469a:	4994      	ldr	r1, [pc, #592]	; (48ec <__ieee754_pow+0xa10>)
    469c:	f002 f866 	bl	676c <__aeabi_dsub>
    46a0:	4643      	mov	r3, r8
    46a2:	185b      	adds	r3, r3, r1
    46a4:	151a      	asrs	r2, r3, #20
    46a6:	2a00      	cmp	r2, #0
    46a8:	dc00      	bgt.n	46ac <__ieee754_pow+0x7d0>
    46aa:	e149      	b.n	4940 <__ieee754_pow+0xa64>
    46ac:	0019      	movs	r1, r3
    46ae:	9a06      	ldr	r2, [sp, #24]
    46b0:	9b07      	ldr	r3, [sp, #28]
    46b2:	f001 fddb 	bl	626c <__aeabi_dmul>
    46b6:	e459      	b.n	3f6c <__ieee754_pow+0x90>
    46b8:	003a      	movs	r2, r7
    46ba:	0033      	movs	r3, r6
    46bc:	0038      	movs	r0, r7
    46be:	0031      	movs	r1, r6
    46c0:	f001 fdd4 	bl	626c <__aeabi_dmul>
    46c4:	e452      	b.n	3f6c <__ieee754_pow+0x90>
    46c6:	4653      	mov	r3, sl
    46c8:	2b00      	cmp	r3, #0
    46ca:	db00      	blt.n	46ce <__ieee754_pow+0x7f2>
    46cc:	e4d9      	b.n	4082 <__ieee754_pow+0x1a6>
    46ce:	9c00      	ldr	r4, [sp, #0]
    46d0:	9d01      	ldr	r5, [sp, #4]
    46d2:	2280      	movs	r2, #128	; 0x80
    46d4:	0612      	lsls	r2, r2, #24
    46d6:	002b      	movs	r3, r5
    46d8:	4694      	mov	ip, r2
    46da:	4463      	add	r3, ip
    46dc:	0020      	movs	r0, r4
    46de:	0019      	movs	r1, r3
    46e0:	f7ff fc44 	bl	3f6c <__ieee754_pow+0x90>
    46e4:	004b      	lsls	r3, r1, #1
    46e6:	085b      	lsrs	r3, r3, #1
    46e8:	469a      	mov	sl, r3
    46ea:	4b81      	ldr	r3, [pc, #516]	; (48f0 <__ieee754_pow+0xa14>)
    46ec:	459a      	cmp	sl, r3
    46ee:	dc00      	bgt.n	46f2 <__ieee754_pow+0x816>
    46f0:	e0b1      	b.n	4856 <__ieee754_pow+0x97a>
    46f2:	4b80      	ldr	r3, [pc, #512]	; (48f4 <__ieee754_pow+0xa18>)
    46f4:	445b      	add	r3, fp
    46f6:	431a      	orrs	r2, r3
    46f8:	d10c      	bne.n	4714 <__ieee754_pow+0x838>
    46fa:	0032      	movs	r2, r6
    46fc:	003b      	movs	r3, r7
    46fe:	f002 f835 	bl	676c <__aeabi_dsub>
    4702:	0002      	movs	r2, r0
    4704:	000b      	movs	r3, r1
    4706:	9800      	ldr	r0, [sp, #0]
    4708:	9901      	ldr	r1, [sp, #4]
    470a:	f000 fcc5 	bl	5098 <__aeabi_dcmple>
    470e:	2800      	cmp	r0, #0
    4710:	d100      	bne.n	4714 <__ieee754_pow+0x838>
    4712:	e6ee      	b.n	44f2 <__ieee754_pow+0x616>
    4714:	9806      	ldr	r0, [sp, #24]
    4716:	9907      	ldr	r1, [sp, #28]
    4718:	4a77      	ldr	r2, [pc, #476]	; (48f8 <__ieee754_pow+0xa1c>)
    471a:	4b78      	ldr	r3, [pc, #480]	; (48fc <__ieee754_pow+0xa20>)
    471c:	f001 fda6 	bl	626c <__aeabi_dmul>
    4720:	4a75      	ldr	r2, [pc, #468]	; (48f8 <__ieee754_pow+0xa1c>)
    4722:	4b76      	ldr	r3, [pc, #472]	; (48fc <__ieee754_pow+0xa20>)
    4724:	f001 fda2 	bl	626c <__aeabi_dmul>
    4728:	f7ff fc20 	bl	3f6c <__ieee754_pow+0x90>
    472c:	2300      	movs	r3, #0
    472e:	4c74      	ldr	r4, [pc, #464]	; (4900 <__ieee754_pow+0xa24>)
    4730:	9306      	str	r3, [sp, #24]
    4732:	9407      	str	r4, [sp, #28]
    4734:	e652      	b.n	43dc <__ieee754_pow+0x500>
    4736:	0002      	movs	r2, r0
    4738:	000b      	movs	r3, r1
    473a:	2000      	movs	r0, #0
    473c:	496b      	ldr	r1, [pc, #428]	; (48ec <__ieee754_pow+0xa10>)
    473e:	f001 f961 	bl	5a04 <__aeabi_ddiv>
    4742:	f7ff fc32 	bl	3faa <__ieee754_pow+0xce>
    4746:	4653      	mov	r3, sl
    4748:	2b00      	cmp	r3, #0
    474a:	db00      	blt.n	474e <__ieee754_pow+0x872>
    474c:	e499      	b.n	4082 <__ieee754_pow+0x1a6>
    474e:	e454      	b.n	3ffa <__ieee754_pow+0x11e>
    4750:	4b6c      	ldr	r3, [pc, #432]	; (4904 <__ieee754_pow+0xa28>)
    4752:	429c      	cmp	r4, r3
    4754:	ddf7      	ble.n	4746 <__ieee754_pow+0x86a>
    4756:	4b65      	ldr	r3, [pc, #404]	; (48ec <__ieee754_pow+0xa10>)
    4758:	429c      	cmp	r4, r3
    475a:	dd00      	ble.n	475e <__ieee754_pow+0x882>
    475c:	e44a      	b.n	3ff4 <__ieee754_pow+0x118>
    475e:	2200      	movs	r2, #0
    4760:	4b62      	ldr	r3, [pc, #392]	; (48ec <__ieee754_pow+0xa10>)
    4762:	f002 f803 	bl	676c <__aeabi_dsub>
    4766:	22c0      	movs	r2, #192	; 0xc0
    4768:	4b67      	ldr	r3, [pc, #412]	; (4908 <__ieee754_pow+0xa2c>)
    476a:	05d2      	lsls	r2, r2, #23
    476c:	0004      	movs	r4, r0
    476e:	000d      	movs	r5, r1
    4770:	f001 fd7c 	bl	626c <__aeabi_dmul>
    4774:	4a65      	ldr	r2, [pc, #404]	; (490c <__ieee754_pow+0xa30>)
    4776:	0006      	movs	r6, r0
    4778:	000f      	movs	r7, r1
    477a:	4b65      	ldr	r3, [pc, #404]	; (4910 <__ieee754_pow+0xa34>)
    477c:	0020      	movs	r0, r4
    477e:	0029      	movs	r1, r5
    4780:	f001 fd74 	bl	626c <__aeabi_dmul>
    4784:	2200      	movs	r2, #0
    4786:	9002      	str	r0, [sp, #8]
    4788:	9103      	str	r1, [sp, #12]
    478a:	4b62      	ldr	r3, [pc, #392]	; (4914 <__ieee754_pow+0xa38>)
    478c:	0020      	movs	r0, r4
    478e:	0029      	movs	r1, r5
    4790:	f001 fd6c 	bl	626c <__aeabi_dmul>
    4794:	0002      	movs	r2, r0
    4796:	000b      	movs	r3, r1
    4798:	485f      	ldr	r0, [pc, #380]	; (4918 <__ieee754_pow+0xa3c>)
    479a:	4960      	ldr	r1, [pc, #384]	; (491c <__ieee754_pow+0xa40>)
    479c:	f001 ffe6 	bl	676c <__aeabi_dsub>
    47a0:	0022      	movs	r2, r4
    47a2:	002b      	movs	r3, r5
    47a4:	f001 fd62 	bl	626c <__aeabi_dmul>
    47a8:	0002      	movs	r2, r0
    47aa:	000b      	movs	r3, r1
    47ac:	2000      	movs	r0, #0
    47ae:	495c      	ldr	r1, [pc, #368]	; (4920 <__ieee754_pow+0xa44>)
    47b0:	f001 ffdc 	bl	676c <__aeabi_dsub>
    47b4:	0022      	movs	r2, r4
    47b6:	9004      	str	r0, [sp, #16]
    47b8:	9105      	str	r1, [sp, #20]
    47ba:	002b      	movs	r3, r5
    47bc:	0020      	movs	r0, r4
    47be:	0029      	movs	r1, r5
    47c0:	f001 fd54 	bl	626c <__aeabi_dmul>
    47c4:	0002      	movs	r2, r0
    47c6:	000b      	movs	r3, r1
    47c8:	9804      	ldr	r0, [sp, #16]
    47ca:	9905      	ldr	r1, [sp, #20]
    47cc:	f001 fd4e 	bl	626c <__aeabi_dmul>
    47d0:	4a54      	ldr	r2, [pc, #336]	; (4924 <__ieee754_pow+0xa48>)
    47d2:	4b4d      	ldr	r3, [pc, #308]	; (4908 <__ieee754_pow+0xa2c>)
    47d4:	f001 fd4a 	bl	626c <__aeabi_dmul>
    47d8:	0002      	movs	r2, r0
    47da:	000b      	movs	r3, r1
    47dc:	9802      	ldr	r0, [sp, #8]
    47de:	9903      	ldr	r1, [sp, #12]
    47e0:	f001 ffc4 	bl	676c <__aeabi_dsub>
    47e4:	0002      	movs	r2, r0
    47e6:	000b      	movs	r3, r1
    47e8:	0004      	movs	r4, r0
    47ea:	000d      	movs	r5, r1
    47ec:	0030      	movs	r0, r6
    47ee:	0039      	movs	r1, r7
    47f0:	f000 fdf8 	bl	53e4 <__aeabi_dadd>
    47f4:	2000      	movs	r0, #0
    47f6:	0032      	movs	r2, r6
    47f8:	003b      	movs	r3, r7
    47fa:	9002      	str	r0, [sp, #8]
    47fc:	9103      	str	r1, [sp, #12]
    47fe:	f001 ffb5 	bl	676c <__aeabi_dsub>
    4802:	0002      	movs	r2, r0
    4804:	000b      	movs	r3, r1
    4806:	0020      	movs	r0, r4
    4808:	0029      	movs	r1, r5
    480a:	f001 ffaf 	bl	676c <__aeabi_dsub>
    480e:	9004      	str	r0, [sp, #16]
    4810:	9105      	str	r1, [sp, #20]
    4812:	e5d9      	b.n	43c8 <__ieee754_pow+0x4ec>
    4814:	4a44      	ldr	r2, [pc, #272]	; (4928 <__ieee754_pow+0xa4c>)
    4816:	4b45      	ldr	r3, [pc, #276]	; (492c <__ieee754_pow+0xa50>)
    4818:	9806      	ldr	r0, [sp, #24]
    481a:	9907      	ldr	r1, [sp, #28]
    481c:	f001 fd26 	bl	626c <__aeabi_dmul>
    4820:	4a41      	ldr	r2, [pc, #260]	; (4928 <__ieee754_pow+0xa4c>)
    4822:	4b42      	ldr	r3, [pc, #264]	; (492c <__ieee754_pow+0xa50>)
    4824:	f001 fd22 	bl	626c <__aeabi_dmul>
    4828:	f7ff fba0 	bl	3f6c <__ieee754_pow+0x90>
    482c:	2a00      	cmp	r2, #0
    482e:	d001      	beq.n	4834 <__ieee754_pow+0x958>
    4830:	f7ff fba9 	bl	3f86 <__ieee754_pow+0xaa>
    4834:	3214      	adds	r2, #20
    4836:	1ad3      	subs	r3, r2, r3
    4838:	002a      	movs	r2, r5
    483a:	411a      	asrs	r2, r3
    483c:	0011      	movs	r1, r2
    483e:	4099      	lsls	r1, r3
    4840:	428d      	cmp	r5, r1
    4842:	d001      	beq.n	4848 <__ieee754_pow+0x96c>
    4844:	f7ff fb76 	bl	3f34 <__ieee754_pow+0x58>
    4848:	2301      	movs	r3, #1
    484a:	401a      	ands	r2, r3
    484c:	18db      	adds	r3, r3, r3
    484e:	1a9b      	subs	r3, r3, r2
    4850:	469b      	mov	fp, r3
    4852:	f7ff fb6f 	bl	3f34 <__ieee754_pow+0x58>
    4856:	2200      	movs	r2, #0
    4858:	4b31      	ldr	r3, [pc, #196]	; (4920 <__ieee754_pow+0xa44>)
    485a:	4690      	mov	r8, r2
    485c:	4691      	mov	r9, r2
    485e:	459a      	cmp	sl, r3
    4860:	dc00      	bgt.n	4864 <__ieee754_pow+0x988>
    4862:	e67b      	b.n	455c <__ieee754_pow+0x680>
    4864:	e645      	b.n	44f2 <__ieee754_pow+0x616>
    4866:	0002      	movs	r2, r0
    4868:	000b      	movs	r3, r1
    486a:	f001 ff7f 	bl	676c <__aeabi_dsub>
    486e:	0002      	movs	r2, r0
    4870:	000b      	movs	r3, r1
    4872:	f001 f8c7 	bl	5a04 <__aeabi_ddiv>
    4876:	f7ff fb79 	bl	3f6c <__ieee754_pow+0x90>
    487a:	2380      	movs	r3, #128	; 0x80
    487c:	4c2c      	ldr	r4, [pc, #176]	; (4930 <__ieee754_pow+0xa54>)
    487e:	05db      	lsls	r3, r3, #23
    4880:	9308      	str	r3, [sp, #32]
    4882:	9409      	str	r4, [sp, #36]	; 0x24
    4884:	4b2b      	ldr	r3, [pc, #172]	; (4934 <__ieee754_pow+0xa58>)
    4886:	4c2c      	ldr	r4, [pc, #176]	; (4938 <__ieee754_pow+0xa5c>)
    4888:	2200      	movs	r2, #0
    488a:	930c      	str	r3, [sp, #48]	; 0x30
    488c:	940d      	str	r4, [sp, #52]	; 0x34
    488e:	2480      	movs	r4, #128	; 0x80
    4890:	4b2a      	ldr	r3, [pc, #168]	; (493c <__ieee754_pow+0xa60>)
    4892:	02e4      	lsls	r4, r4, #11
    4894:	9206      	str	r2, [sp, #24]
    4896:	9307      	str	r3, [sp, #28]
    4898:	e449      	b.n	412e <__ieee754_pow+0x252>
    489a:	464b      	mov	r3, r9
    489c:	425b      	negs	r3, r3
    489e:	4699      	mov	r9, r3
    48a0:	e64a      	b.n	4538 <__ieee754_pow+0x65c>
    48a2:	46c0      	nop			; (mov r8, r8)
    48a4:	fffffc02 	.word	0xfffffc02
    48a8:	fffffc01 	.word	0xfffffc01
    48ac:	000fffff 	.word	0x000fffff
    48b0:	3fe62e43 	.word	0x3fe62e43
    48b4:	fefa39ef 	.word	0xfefa39ef
    48b8:	3fe62e42 	.word	0x3fe62e42
    48bc:	0ca86c39 	.word	0x0ca86c39
    48c0:	be205c61 	.word	0xbe205c61
    48c4:	72bea4d0 	.word	0x72bea4d0
    48c8:	3e663769 	.word	0x3e663769
    48cc:	c5d26bf1 	.word	0xc5d26bf1
    48d0:	3ebbbd41 	.word	0x3ebbbd41
    48d4:	af25de2c 	.word	0xaf25de2c
    48d8:	3f11566a 	.word	0x3f11566a
    48dc:	16bebd93 	.word	0x16bebd93
    48e0:	3f66c16c 	.word	0x3f66c16c
    48e4:	5555553e 	.word	0x5555553e
    48e8:	3fc55555 	.word	0x3fc55555
    48ec:	3ff00000 	.word	0x3ff00000
    48f0:	4090cbff 	.word	0x4090cbff
    48f4:	3f6f3400 	.word	0x3f6f3400
    48f8:	c2f8f359 	.word	0xc2f8f359
    48fc:	01a56e1f 	.word	0x01a56e1f
    4900:	bff00000 	.word	0xbff00000
    4904:	3feffffe 	.word	0x3feffffe
    4908:	3ff71547 	.word	0x3ff71547
    490c:	f85ddf44 	.word	0xf85ddf44
    4910:	3e54ae0b 	.word	0x3e54ae0b
    4914:	3fd00000 	.word	0x3fd00000
    4918:	55555555 	.word	0x55555555
    491c:	3fd55555 	.word	0x3fd55555
    4920:	3fe00000 	.word	0x3fe00000
    4924:	652b82fe 	.word	0x652b82fe
    4928:	8800759c 	.word	0x8800759c
    492c:	7e37e43c 	.word	0x7e37e43c
    4930:	3fe2b803 	.word	0x3fe2b803
    4934:	43cfd006 	.word	0x43cfd006
    4938:	3e4cfdeb 	.word	0x3e4cfdeb
    493c:	3ff80000 	.word	0x3ff80000
    4940:	464a      	mov	r2, r9
    4942:	f000 f999 	bl	4c78 <scalbn>
    4946:	e6b2      	b.n	46ae <__ieee754_pow+0x7d2>

00004948 <__ieee754_sqrt>:
    4948:	4b6c      	ldr	r3, [pc, #432]	; (4afc <__ieee754_sqrt+0x1b4>)
    494a:	b5f0      	push	{r4, r5, r6, r7, lr}
    494c:	000a      	movs	r2, r1
    494e:	4646      	mov	r6, r8
    4950:	000d      	movs	r5, r1
    4952:	46d6      	mov	lr, sl
    4954:	464f      	mov	r7, r9
    4956:	0019      	movs	r1, r3
    4958:	b5c0      	push	{r6, r7, lr}
    495a:	0004      	movs	r4, r0
    495c:	0006      	movs	r6, r0
    495e:	4029      	ands	r1, r5
    4960:	4299      	cmp	r1, r3
    4962:	d100      	bne.n	4966 <__ieee754_sqrt+0x1e>
    4964:	e0a7      	b.n	4ab6 <__ieee754_sqrt+0x16e>
    4966:	2d00      	cmp	r5, #0
    4968:	dc00      	bgt.n	496c <__ieee754_sqrt+0x24>
    496a:	e081      	b.n	4a70 <__ieee754_sqrt+0x128>
    496c:	152f      	asrs	r7, r5, #20
    496e:	d100      	bne.n	4972 <__ieee754_sqrt+0x2a>
    4970:	e08e      	b.n	4a90 <__ieee754_sqrt+0x148>
    4972:	4b63      	ldr	r3, [pc, #396]	; (4b00 <__ieee754_sqrt+0x1b8>)
    4974:	0312      	lsls	r2, r2, #12
    4976:	469c      	mov	ip, r3
    4978:	2380      	movs	r3, #128	; 0x80
    497a:	0b12      	lsrs	r2, r2, #12
    497c:	035b      	lsls	r3, r3, #13
    497e:	4467      	add	r7, ip
    4980:	431a      	orrs	r2, r3
    4982:	07fb      	lsls	r3, r7, #31
    4984:	d468      	bmi.n	4a58 <__ieee754_sqrt+0x110>
    4986:	107b      	asrs	r3, r7, #1
    4988:	469c      	mov	ip, r3
    498a:	0fe3      	lsrs	r3, r4, #31
    498c:	189b      	adds	r3, r3, r2
    498e:	189b      	adds	r3, r3, r2
    4990:	2280      	movs	r2, #128	; 0x80
    4992:	2116      	movs	r1, #22
    4994:	2600      	movs	r6, #0
    4996:	2500      	movs	r5, #0
    4998:	0064      	lsls	r4, r4, #1
    499a:	0392      	lsls	r2, r2, #14
    499c:	18a8      	adds	r0, r5, r2
    499e:	4298      	cmp	r0, r3
    49a0:	dc02      	bgt.n	49a8 <__ieee754_sqrt+0x60>
    49a2:	1885      	adds	r5, r0, r2
    49a4:	1a1b      	subs	r3, r3, r0
    49a6:	18b6      	adds	r6, r6, r2
    49a8:	0fe0      	lsrs	r0, r4, #31
    49aa:	005b      	lsls	r3, r3, #1
    49ac:	3901      	subs	r1, #1
    49ae:	181b      	adds	r3, r3, r0
    49b0:	0064      	lsls	r4, r4, #1
    49b2:	0852      	lsrs	r2, r2, #1
    49b4:	2900      	cmp	r1, #0
    49b6:	d1f1      	bne.n	499c <__ieee754_sqrt+0x54>
    49b8:	2200      	movs	r2, #0
    49ba:	4692      	mov	sl, r2
    49bc:	4690      	mov	r8, r2
    49be:	2280      	movs	r2, #128	; 0x80
    49c0:	2020      	movs	r0, #32
    49c2:	0612      	lsls	r2, r2, #24
    49c4:	e009      	b.n	49da <__ieee754_sqrt+0x92>
    49c6:	42ab      	cmp	r3, r5
    49c8:	d038      	beq.n	4a3c <__ieee754_sqrt+0xf4>
    49ca:	0fe1      	lsrs	r1, r4, #31
    49cc:	18c9      	adds	r1, r1, r3
    49ce:	3801      	subs	r0, #1
    49d0:	18cb      	adds	r3, r1, r3
    49d2:	0064      	lsls	r4, r4, #1
    49d4:	0852      	lsrs	r2, r2, #1
    49d6:	2800      	cmp	r0, #0
    49d8:	d018      	beq.n	4a0c <__ieee754_sqrt+0xc4>
    49da:	4641      	mov	r1, r8
    49dc:	1851      	adds	r1, r2, r1
    49de:	42ab      	cmp	r3, r5
    49e0:	ddf1      	ble.n	49c6 <__ieee754_sqrt+0x7e>
    49e2:	188f      	adds	r7, r1, r2
    49e4:	46b8      	mov	r8, r7
    49e6:	46a9      	mov	r9, r5
    49e8:	2900      	cmp	r1, #0
    49ea:	db30      	blt.n	4a4e <__ieee754_sqrt+0x106>
    49ec:	1b5b      	subs	r3, r3, r5
    49ee:	428c      	cmp	r4, r1
    49f0:	41ad      	sbcs	r5, r5
    49f2:	426d      	negs	r5, r5
    49f4:	1b5b      	subs	r3, r3, r5
    49f6:	1a64      	subs	r4, r4, r1
    49f8:	0fe1      	lsrs	r1, r4, #31
    49fa:	18c9      	adds	r1, r1, r3
    49fc:	3801      	subs	r0, #1
    49fe:	4492      	add	sl, r2
    4a00:	464d      	mov	r5, r9
    4a02:	18cb      	adds	r3, r1, r3
    4a04:	0064      	lsls	r4, r4, #1
    4a06:	0852      	lsrs	r2, r2, #1
    4a08:	2800      	cmp	r0, #0
    4a0a:	d1e6      	bne.n	49da <__ieee754_sqrt+0x92>
    4a0c:	4323      	orrs	r3, r4
    4a0e:	d128      	bne.n	4a62 <__ieee754_sqrt+0x11a>
    4a10:	4653      	mov	r3, sl
    4a12:	085b      	lsrs	r3, r3, #1
    4a14:	493b      	ldr	r1, [pc, #236]	; (4b04 <__ieee754_sqrt+0x1bc>)
    4a16:	1072      	asrs	r2, r6, #1
    4a18:	4688      	mov	r8, r1
    4a1a:	4442      	add	r2, r8
    4a1c:	07f1      	lsls	r1, r6, #31
    4a1e:	d502      	bpl.n	4a26 <__ieee754_sqrt+0xde>
    4a20:	2180      	movs	r1, #128	; 0x80
    4a22:	0609      	lsls	r1, r1, #24
    4a24:	430b      	orrs	r3, r1
    4a26:	4661      	mov	r1, ip
    4a28:	001e      	movs	r6, r3
    4a2a:	050f      	lsls	r7, r1, #20
    4a2c:	18bd      	adds	r5, r7, r2
    4a2e:	0030      	movs	r0, r6
    4a30:	0029      	movs	r1, r5
    4a32:	bc1c      	pop	{r2, r3, r4}
    4a34:	4690      	mov	r8, r2
    4a36:	4699      	mov	r9, r3
    4a38:	46a2      	mov	sl, r4
    4a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a3c:	42a1      	cmp	r1, r4
    4a3e:	d8c4      	bhi.n	49ca <__ieee754_sqrt+0x82>
    4a40:	188f      	adds	r7, r1, r2
    4a42:	46b8      	mov	r8, r7
    4a44:	2900      	cmp	r1, #0
    4a46:	db42      	blt.n	4ace <__ieee754_sqrt+0x186>
    4a48:	4699      	mov	r9, r3
    4a4a:	2300      	movs	r3, #0
    4a4c:	e7d3      	b.n	49f6 <__ieee754_sqrt+0xae>
    4a4e:	2f00      	cmp	r7, #0
    4a50:	db2f      	blt.n	4ab2 <__ieee754_sqrt+0x16a>
    4a52:	1c6f      	adds	r7, r5, #1
    4a54:	46b9      	mov	r9, r7
    4a56:	e7c9      	b.n	49ec <__ieee754_sqrt+0xa4>
    4a58:	0fe1      	lsrs	r1, r4, #31
    4a5a:	0052      	lsls	r2, r2, #1
    4a5c:	188a      	adds	r2, r1, r2
    4a5e:	0064      	lsls	r4, r4, #1
    4a60:	e791      	b.n	4986 <__ieee754_sqrt+0x3e>
    4a62:	4653      	mov	r3, sl
    4a64:	3301      	adds	r3, #1
    4a66:	d035      	beq.n	4ad4 <__ieee754_sqrt+0x18c>
    4a68:	4653      	mov	r3, sl
    4a6a:	3301      	adds	r3, #1
    4a6c:	085b      	lsrs	r3, r3, #1
    4a6e:	e7d1      	b.n	4a14 <__ieee754_sqrt+0xcc>
    4a70:	006b      	lsls	r3, r5, #1
    4a72:	085b      	lsrs	r3, r3, #1
    4a74:	4303      	orrs	r3, r0
    4a76:	d0da      	beq.n	4a2e <__ieee754_sqrt+0xe6>
    4a78:	2700      	movs	r7, #0
    4a7a:	2d00      	cmp	r5, #0
    4a7c:	d132      	bne.n	4ae4 <__ieee754_sqrt+0x19c>
    4a7e:	0ae2      	lsrs	r2, r4, #11
    4a80:	3f15      	subs	r7, #21
    4a82:	0564      	lsls	r4, r4, #21
    4a84:	2a00      	cmp	r2, #0
    4a86:	d0fa      	beq.n	4a7e <__ieee754_sqrt+0x136>
    4a88:	2380      	movs	r3, #128	; 0x80
    4a8a:	035b      	lsls	r3, r3, #13
    4a8c:	421a      	tst	r2, r3
    4a8e:	d124      	bne.n	4ada <__ieee754_sqrt+0x192>
    4a90:	2080      	movs	r0, #128	; 0x80
    4a92:	2300      	movs	r3, #0
    4a94:	0340      	lsls	r0, r0, #13
    4a96:	e000      	b.n	4a9a <__ieee754_sqrt+0x152>
    4a98:	000b      	movs	r3, r1
    4a9a:	0052      	lsls	r2, r2, #1
    4a9c:	1c59      	adds	r1, r3, #1
    4a9e:	4202      	tst	r2, r0
    4aa0:	d0fa      	beq.n	4a98 <__ieee754_sqrt+0x150>
    4aa2:	2020      	movs	r0, #32
    4aa4:	1a40      	subs	r0, r0, r1
    4aa6:	1aff      	subs	r7, r7, r3
    4aa8:	0023      	movs	r3, r4
    4aaa:	40c3      	lsrs	r3, r0
    4aac:	408c      	lsls	r4, r1
    4aae:	431a      	orrs	r2, r3
    4ab0:	e75f      	b.n	4972 <__ieee754_sqrt+0x2a>
    4ab2:	46a9      	mov	r9, r5
    4ab4:	e79a      	b.n	49ec <__ieee754_sqrt+0xa4>
    4ab6:	002b      	movs	r3, r5
    4ab8:	0002      	movs	r2, r0
    4aba:	0029      	movs	r1, r5
    4abc:	f001 fbd6 	bl	626c <__aeabi_dmul>
    4ac0:	0032      	movs	r2, r6
    4ac2:	002b      	movs	r3, r5
    4ac4:	f000 fc8e 	bl	53e4 <__aeabi_dadd>
    4ac8:	0006      	movs	r6, r0
    4aca:	000d      	movs	r5, r1
    4acc:	e7af      	b.n	4a2e <__ieee754_sqrt+0xe6>
    4ace:	2f00      	cmp	r7, #0
    4ad0:	dabf      	bge.n	4a52 <__ieee754_sqrt+0x10a>
    4ad2:	e7b9      	b.n	4a48 <__ieee754_sqrt+0x100>
    4ad4:	3601      	adds	r6, #1
    4ad6:	2300      	movs	r3, #0
    4ad8:	e79c      	b.n	4a14 <__ieee754_sqrt+0xcc>
    4ada:	2301      	movs	r3, #1
    4adc:	2100      	movs	r1, #0
    4ade:	2020      	movs	r0, #32
    4ae0:	425b      	negs	r3, r3
    4ae2:	e7e0      	b.n	4aa6 <__ieee754_sqrt+0x15e>
    4ae4:	002b      	movs	r3, r5
    4ae6:	0002      	movs	r2, r0
    4ae8:	0029      	movs	r1, r5
    4aea:	f001 fe3f 	bl	676c <__aeabi_dsub>
    4aee:	0002      	movs	r2, r0
    4af0:	000b      	movs	r3, r1
    4af2:	f000 ff87 	bl	5a04 <__aeabi_ddiv>
    4af6:	0006      	movs	r6, r0
    4af8:	000d      	movs	r5, r1
    4afa:	e798      	b.n	4a2e <__ieee754_sqrt+0xe6>
    4afc:	7ff00000 	.word	0x7ff00000
    4b00:	fffffc01 	.word	0xfffffc01
    4b04:	3fe00000 	.word	0x3fe00000

00004b08 <fabs>:
    4b08:	0049      	lsls	r1, r1, #1
    4b0a:	084b      	lsrs	r3, r1, #1
    4b0c:	0019      	movs	r1, r3
    4b0e:	4770      	bx	lr

00004b10 <finite>:
    4b10:	4b03      	ldr	r3, [pc, #12]	; (4b20 <finite+0x10>)
    4b12:	0048      	lsls	r0, r1, #1
    4b14:	469c      	mov	ip, r3
    4b16:	0840      	lsrs	r0, r0, #1
    4b18:	4460      	add	r0, ip
    4b1a:	0fc0      	lsrs	r0, r0, #31
    4b1c:	4770      	bx	lr
    4b1e:	46c0      	nop			; (mov r8, r8)
    4b20:	80100000 	.word	0x80100000

00004b24 <matherr>:
    4b24:	2000      	movs	r0, #0
    4b26:	4770      	bx	lr

00004b28 <nan>:
    4b28:	2000      	movs	r0, #0
    4b2a:	4901      	ldr	r1, [pc, #4]	; (4b30 <nan+0x8>)
    4b2c:	4770      	bx	lr
    4b2e:	46c0      	nop			; (mov r8, r8)
    4b30:	7ff80000 	.word	0x7ff80000

00004b34 <rint>:
    4b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b36:	46c6      	mov	lr, r8
    4b38:	b500      	push	{lr}
    4b3a:	0fcb      	lsrs	r3, r1, #31
    4b3c:	4698      	mov	r8, r3
    4b3e:	4c4a      	ldr	r4, [pc, #296]	; (4c68 <rint+0x134>)
    4b40:	004b      	lsls	r3, r1, #1
    4b42:	0d5b      	lsrs	r3, r3, #21
    4b44:	191e      	adds	r6, r3, r4
    4b46:	b082      	sub	sp, #8
    4b48:	0007      	movs	r7, r0
    4b4a:	000a      	movs	r2, r1
    4b4c:	2e13      	cmp	r6, #19
    4b4e:	dc35      	bgt.n	4bbc <rint+0x88>
    4b50:	2e00      	cmp	r6, #0
    4b52:	db57      	blt.n	4c04 <rint+0xd0>
    4b54:	4b45      	ldr	r3, [pc, #276]	; (4c6c <rint+0x138>)
    4b56:	0004      	movs	r4, r0
    4b58:	4133      	asrs	r3, r6
    4b5a:	001f      	movs	r7, r3
    4b5c:	400f      	ands	r7, r1
    4b5e:	4307      	orrs	r7, r0
    4b60:	000d      	movs	r5, r1
    4b62:	2f00      	cmp	r7, #0
    4b64:	d024      	beq.n	4bb0 <rint+0x7c>
    4b66:	085b      	lsrs	r3, r3, #1
    4b68:	001c      	movs	r4, r3
    4b6a:	400c      	ands	r4, r1
    4b6c:	4320      	orrs	r0, r4
    4b6e:	2700      	movs	r7, #0
    4b70:	2800      	cmp	r0, #0
    4b72:	d007      	beq.n	4b84 <rint+0x50>
    4b74:	2e13      	cmp	r6, #19
    4b76:	d100      	bne.n	4b7a <rint+0x46>
    4b78:	e073      	b.n	4c62 <rint+0x12e>
    4b7a:	2280      	movs	r2, #128	; 0x80
    4b7c:	02d2      	lsls	r2, r2, #11
    4b7e:	4132      	asrs	r2, r6
    4b80:	4399      	bics	r1, r3
    4b82:	430a      	orrs	r2, r1
    4b84:	4643      	mov	r3, r8
    4b86:	00de      	lsls	r6, r3, #3
    4b88:	4b39      	ldr	r3, [pc, #228]	; (4c70 <rint+0x13c>)
    4b8a:	0011      	movs	r1, r2
    4b8c:	199e      	adds	r6, r3, r6
    4b8e:	6834      	ldr	r4, [r6, #0]
    4b90:	6875      	ldr	r5, [r6, #4]
    4b92:	0038      	movs	r0, r7
    4b94:	0022      	movs	r2, r4
    4b96:	002b      	movs	r3, r5
    4b98:	f000 fc24 	bl	53e4 <__aeabi_dadd>
    4b9c:	9000      	str	r0, [sp, #0]
    4b9e:	9101      	str	r1, [sp, #4]
    4ba0:	9800      	ldr	r0, [sp, #0]
    4ba2:	9901      	ldr	r1, [sp, #4]
    4ba4:	0022      	movs	r2, r4
    4ba6:	002b      	movs	r3, r5
    4ba8:	f001 fde0 	bl	676c <__aeabi_dsub>
    4bac:	0004      	movs	r4, r0
    4bae:	000d      	movs	r5, r1
    4bb0:	0020      	movs	r0, r4
    4bb2:	0029      	movs	r1, r5
    4bb4:	b002      	add	sp, #8
    4bb6:	bc04      	pop	{r2}
    4bb8:	4690      	mov	r8, r2
    4bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bbc:	2e33      	cmp	r6, #51	; 0x33
    4bbe:	dd0c      	ble.n	4bda <rint+0xa6>
    4bc0:	2380      	movs	r3, #128	; 0x80
    4bc2:	0004      	movs	r4, r0
    4bc4:	00db      	lsls	r3, r3, #3
    4bc6:	000d      	movs	r5, r1
    4bc8:	429e      	cmp	r6, r3
    4bca:	d1f1      	bne.n	4bb0 <rint+0x7c>
    4bcc:	0002      	movs	r2, r0
    4bce:	000b      	movs	r3, r1
    4bd0:	f000 fc08 	bl	53e4 <__aeabi_dadd>
    4bd4:	0004      	movs	r4, r0
    4bd6:	000d      	movs	r5, r1
    4bd8:	e7ea      	b.n	4bb0 <rint+0x7c>
    4bda:	4c26      	ldr	r4, [pc, #152]	; (4c74 <rint+0x140>)
    4bdc:	000d      	movs	r5, r1
    4bde:	46a4      	mov	ip, r4
    4be0:	2401      	movs	r4, #1
    4be2:	4463      	add	r3, ip
    4be4:	4264      	negs	r4, r4
    4be6:	40dc      	lsrs	r4, r3
    4be8:	46a4      	mov	ip, r4
    4bea:	4661      	mov	r1, ip
    4bec:	0004      	movs	r4, r0
    4bee:	4201      	tst	r1, r0
    4bf0:	d0de      	beq.n	4bb0 <rint+0x7c>
    4bf2:	0849      	lsrs	r1, r1, #1
    4bf4:	4201      	tst	r1, r0
    4bf6:	d0c5      	beq.n	4b84 <rint+0x50>
    4bf8:	2780      	movs	r7, #128	; 0x80
    4bfa:	05ff      	lsls	r7, r7, #23
    4bfc:	411f      	asrs	r7, r3
    4bfe:	4388      	bics	r0, r1
    4c00:	4307      	orrs	r7, r0
    4c02:	e7bf      	b.n	4b84 <rint+0x50>
    4c04:	004b      	lsls	r3, r1, #1
    4c06:	085b      	lsrs	r3, r3, #1
    4c08:	4303      	orrs	r3, r0
    4c0a:	0004      	movs	r4, r0
    4c0c:	000d      	movs	r5, r1
    4c0e:	2b00      	cmp	r3, #0
    4c10:	d0ce      	beq.n	4bb0 <rint+0x7c>
    4c12:	030b      	lsls	r3, r1, #12
    4c14:	0b1b      	lsrs	r3, r3, #12
    4c16:	4303      	orrs	r3, r0
    4c18:	001a      	movs	r2, r3
    4c1a:	425b      	negs	r3, r3
    4c1c:	4313      	orrs	r3, r2
    4c1e:	2280      	movs	r2, #128	; 0x80
    4c20:	0b1b      	lsrs	r3, r3, #12
    4c22:	0312      	lsls	r2, r2, #12
    4c24:	4013      	ands	r3, r2
    4c26:	0c4a      	lsrs	r2, r1, #17
    4c28:	0452      	lsls	r2, r2, #17
    4c2a:	4313      	orrs	r3, r2
    4c2c:	0019      	movs	r1, r3
    4c2e:	4643      	mov	r3, r8
    4c30:	00da      	lsls	r2, r3, #3
    4c32:	4b0f      	ldr	r3, [pc, #60]	; (4c70 <rint+0x13c>)
    4c34:	189b      	adds	r3, r3, r2
    4c36:	681c      	ldr	r4, [r3, #0]
    4c38:	685d      	ldr	r5, [r3, #4]
    4c3a:	0022      	movs	r2, r4
    4c3c:	002b      	movs	r3, r5
    4c3e:	f000 fbd1 	bl	53e4 <__aeabi_dadd>
    4c42:	9000      	str	r0, [sp, #0]
    4c44:	9101      	str	r1, [sp, #4]
    4c46:	9800      	ldr	r0, [sp, #0]
    4c48:	9901      	ldr	r1, [sp, #4]
    4c4a:	0022      	movs	r2, r4
    4c4c:	002b      	movs	r3, r5
    4c4e:	f001 fd8d 	bl	676c <__aeabi_dsub>
    4c52:	4642      	mov	r2, r8
    4c54:	004b      	lsls	r3, r1, #1
    4c56:	085b      	lsrs	r3, r3, #1
    4c58:	07d6      	lsls	r6, r2, #31
    4c5a:	4333      	orrs	r3, r6
    4c5c:	0004      	movs	r4, r0
    4c5e:	001d      	movs	r5, r3
    4c60:	e7a6      	b.n	4bb0 <rint+0x7c>
    4c62:	2780      	movs	r7, #128	; 0x80
    4c64:	063f      	lsls	r7, r7, #24
    4c66:	e788      	b.n	4b7a <rint+0x46>
    4c68:	fffffc01 	.word	0xfffffc01
    4c6c:	000fffff 	.word	0x000fffff
    4c70:	000071a8 	.word	0x000071a8
    4c74:	fffffbed 	.word	0xfffffbed

00004c78 <scalbn>:
    4c78:	004b      	lsls	r3, r1, #1
    4c7a:	b570      	push	{r4, r5, r6, lr}
    4c7c:	0d5b      	lsrs	r3, r3, #21
    4c7e:	0014      	movs	r4, r2
    4c80:	000a      	movs	r2, r1
    4c82:	2b00      	cmp	r3, #0
    4c84:	d11a      	bne.n	4cbc <scalbn+0x44>
    4c86:	004b      	lsls	r3, r1, #1
    4c88:	085b      	lsrs	r3, r3, #1
    4c8a:	4303      	orrs	r3, r0
    4c8c:	d015      	beq.n	4cba <scalbn+0x42>
    4c8e:	2200      	movs	r2, #0
    4c90:	4b22      	ldr	r3, [pc, #136]	; (4d1c <scalbn+0xa4>)
    4c92:	f001 faeb 	bl	626c <__aeabi_dmul>
    4c96:	4b22      	ldr	r3, [pc, #136]	; (4d20 <scalbn+0xa8>)
    4c98:	000a      	movs	r2, r1
    4c9a:	429c      	cmp	r4, r3
    4c9c:	db22      	blt.n	4ce4 <scalbn+0x6c>
    4c9e:	004b      	lsls	r3, r1, #1
    4ca0:	0d5b      	lsrs	r3, r3, #21
    4ca2:	3b36      	subs	r3, #54	; 0x36
    4ca4:	4d1f      	ldr	r5, [pc, #124]	; (4d24 <scalbn+0xac>)
    4ca6:	18e3      	adds	r3, r4, r3
    4ca8:	42ab      	cmp	r3, r5
    4caa:	dc20      	bgt.n	4cee <scalbn+0x76>
    4cac:	2b00      	cmp	r3, #0
    4cae:	dd0d      	ble.n	4ccc <scalbn+0x54>
    4cb0:	4c1d      	ldr	r4, [pc, #116]	; (4d28 <scalbn+0xb0>)
    4cb2:	051b      	lsls	r3, r3, #20
    4cb4:	4022      	ands	r2, r4
    4cb6:	431a      	orrs	r2, r3
    4cb8:	0011      	movs	r1, r2
    4cba:	bd70      	pop	{r4, r5, r6, pc}
    4cbc:	4d1b      	ldr	r5, [pc, #108]	; (4d2c <scalbn+0xb4>)
    4cbe:	42ab      	cmp	r3, r5
    4cc0:	d1f0      	bne.n	4ca4 <scalbn+0x2c>
    4cc2:	0002      	movs	r2, r0
    4cc4:	000b      	movs	r3, r1
    4cc6:	f000 fb8d 	bl	53e4 <__aeabi_dadd>
    4cca:	e7f6      	b.n	4cba <scalbn+0x42>
    4ccc:	001d      	movs	r5, r3
    4cce:	3535      	adds	r5, #53	; 0x35
    4cd0:	da18      	bge.n	4d04 <scalbn+0x8c>
    4cd2:	4b17      	ldr	r3, [pc, #92]	; (4d30 <scalbn+0xb8>)
    4cd4:	0002      	movs	r2, r0
    4cd6:	429c      	cmp	r4, r3
    4cd8:	dc0a      	bgt.n	4cf0 <scalbn+0x78>
    4cda:	000b      	movs	r3, r1
    4cdc:	4815      	ldr	r0, [pc, #84]	; (4d34 <scalbn+0xbc>)
    4cde:	4916      	ldr	r1, [pc, #88]	; (4d38 <scalbn+0xc0>)
    4ce0:	f000 f832 	bl	4d48 <copysign>
    4ce4:	4a13      	ldr	r2, [pc, #76]	; (4d34 <scalbn+0xbc>)
    4ce6:	4b14      	ldr	r3, [pc, #80]	; (4d38 <scalbn+0xc0>)
    4ce8:	f001 fac0 	bl	626c <__aeabi_dmul>
    4cec:	e7e5      	b.n	4cba <scalbn+0x42>
    4cee:	0002      	movs	r2, r0
    4cf0:	000b      	movs	r3, r1
    4cf2:	4812      	ldr	r0, [pc, #72]	; (4d3c <scalbn+0xc4>)
    4cf4:	4912      	ldr	r1, [pc, #72]	; (4d40 <scalbn+0xc8>)
    4cf6:	f000 f827 	bl	4d48 <copysign>
    4cfa:	4a10      	ldr	r2, [pc, #64]	; (4d3c <scalbn+0xc4>)
    4cfc:	4b10      	ldr	r3, [pc, #64]	; (4d40 <scalbn+0xc8>)
    4cfe:	f001 fab5 	bl	626c <__aeabi_dmul>
    4d02:	e7da      	b.n	4cba <scalbn+0x42>
    4d04:	4c08      	ldr	r4, [pc, #32]	; (4d28 <scalbn+0xb0>)
    4d06:	3336      	adds	r3, #54	; 0x36
    4d08:	4022      	ands	r2, r4
    4d0a:	051b      	lsls	r3, r3, #20
    4d0c:	4313      	orrs	r3, r2
    4d0e:	0019      	movs	r1, r3
    4d10:	2200      	movs	r2, #0
    4d12:	4b0c      	ldr	r3, [pc, #48]	; (4d44 <scalbn+0xcc>)
    4d14:	f001 faaa 	bl	626c <__aeabi_dmul>
    4d18:	e7cf      	b.n	4cba <scalbn+0x42>
    4d1a:	46c0      	nop			; (mov r8, r8)
    4d1c:	43500000 	.word	0x43500000
    4d20:	ffff3cb0 	.word	0xffff3cb0
    4d24:	000007fe 	.word	0x000007fe
    4d28:	800fffff 	.word	0x800fffff
    4d2c:	000007ff 	.word	0x000007ff
    4d30:	0000c350 	.word	0x0000c350
    4d34:	c2f8f359 	.word	0xc2f8f359
    4d38:	01a56e1f 	.word	0x01a56e1f
    4d3c:	8800759c 	.word	0x8800759c
    4d40:	7e37e43c 	.word	0x7e37e43c
    4d44:	3c900000 	.word	0x3c900000

00004d48 <copysign>:
    4d48:	b530      	push	{r4, r5, lr}
    4d4a:	004a      	lsls	r2, r1, #1
    4d4c:	0fdb      	lsrs	r3, r3, #31
    4d4e:	07db      	lsls	r3, r3, #31
    4d50:	0852      	lsrs	r2, r2, #1
    4d52:	431a      	orrs	r2, r3
    4d54:	0011      	movs	r1, r2
    4d56:	bd30      	pop	{r4, r5, pc}

00004d58 <__gnu_thumb1_case_uhi>:
    4d58:	b403      	push	{r0, r1}
    4d5a:	4671      	mov	r1, lr
    4d5c:	0849      	lsrs	r1, r1, #1
    4d5e:	0040      	lsls	r0, r0, #1
    4d60:	0049      	lsls	r1, r1, #1
    4d62:	5a09      	ldrh	r1, [r1, r0]
    4d64:	0049      	lsls	r1, r1, #1
    4d66:	448e      	add	lr, r1
    4d68:	bc03      	pop	{r0, r1}
    4d6a:	4770      	bx	lr

00004d6c <__udivsi3>:
    4d6c:	2200      	movs	r2, #0
    4d6e:	0843      	lsrs	r3, r0, #1
    4d70:	428b      	cmp	r3, r1
    4d72:	d374      	bcc.n	4e5e <__udivsi3+0xf2>
    4d74:	0903      	lsrs	r3, r0, #4
    4d76:	428b      	cmp	r3, r1
    4d78:	d35f      	bcc.n	4e3a <__udivsi3+0xce>
    4d7a:	0a03      	lsrs	r3, r0, #8
    4d7c:	428b      	cmp	r3, r1
    4d7e:	d344      	bcc.n	4e0a <__udivsi3+0x9e>
    4d80:	0b03      	lsrs	r3, r0, #12
    4d82:	428b      	cmp	r3, r1
    4d84:	d328      	bcc.n	4dd8 <__udivsi3+0x6c>
    4d86:	0c03      	lsrs	r3, r0, #16
    4d88:	428b      	cmp	r3, r1
    4d8a:	d30d      	bcc.n	4da8 <__udivsi3+0x3c>
    4d8c:	22ff      	movs	r2, #255	; 0xff
    4d8e:	0209      	lsls	r1, r1, #8
    4d90:	ba12      	rev	r2, r2
    4d92:	0c03      	lsrs	r3, r0, #16
    4d94:	428b      	cmp	r3, r1
    4d96:	d302      	bcc.n	4d9e <__udivsi3+0x32>
    4d98:	1212      	asrs	r2, r2, #8
    4d9a:	0209      	lsls	r1, r1, #8
    4d9c:	d065      	beq.n	4e6a <__udivsi3+0xfe>
    4d9e:	0b03      	lsrs	r3, r0, #12
    4da0:	428b      	cmp	r3, r1
    4da2:	d319      	bcc.n	4dd8 <__udivsi3+0x6c>
    4da4:	e000      	b.n	4da8 <__udivsi3+0x3c>
    4da6:	0a09      	lsrs	r1, r1, #8
    4da8:	0bc3      	lsrs	r3, r0, #15
    4daa:	428b      	cmp	r3, r1
    4dac:	d301      	bcc.n	4db2 <__udivsi3+0x46>
    4dae:	03cb      	lsls	r3, r1, #15
    4db0:	1ac0      	subs	r0, r0, r3
    4db2:	4152      	adcs	r2, r2
    4db4:	0b83      	lsrs	r3, r0, #14
    4db6:	428b      	cmp	r3, r1
    4db8:	d301      	bcc.n	4dbe <__udivsi3+0x52>
    4dba:	038b      	lsls	r3, r1, #14
    4dbc:	1ac0      	subs	r0, r0, r3
    4dbe:	4152      	adcs	r2, r2
    4dc0:	0b43      	lsrs	r3, r0, #13
    4dc2:	428b      	cmp	r3, r1
    4dc4:	d301      	bcc.n	4dca <__udivsi3+0x5e>
    4dc6:	034b      	lsls	r3, r1, #13
    4dc8:	1ac0      	subs	r0, r0, r3
    4dca:	4152      	adcs	r2, r2
    4dcc:	0b03      	lsrs	r3, r0, #12
    4dce:	428b      	cmp	r3, r1
    4dd0:	d301      	bcc.n	4dd6 <__udivsi3+0x6a>
    4dd2:	030b      	lsls	r3, r1, #12
    4dd4:	1ac0      	subs	r0, r0, r3
    4dd6:	4152      	adcs	r2, r2
    4dd8:	0ac3      	lsrs	r3, r0, #11
    4dda:	428b      	cmp	r3, r1
    4ddc:	d301      	bcc.n	4de2 <__udivsi3+0x76>
    4dde:	02cb      	lsls	r3, r1, #11
    4de0:	1ac0      	subs	r0, r0, r3
    4de2:	4152      	adcs	r2, r2
    4de4:	0a83      	lsrs	r3, r0, #10
    4de6:	428b      	cmp	r3, r1
    4de8:	d301      	bcc.n	4dee <__udivsi3+0x82>
    4dea:	028b      	lsls	r3, r1, #10
    4dec:	1ac0      	subs	r0, r0, r3
    4dee:	4152      	adcs	r2, r2
    4df0:	0a43      	lsrs	r3, r0, #9
    4df2:	428b      	cmp	r3, r1
    4df4:	d301      	bcc.n	4dfa <__udivsi3+0x8e>
    4df6:	024b      	lsls	r3, r1, #9
    4df8:	1ac0      	subs	r0, r0, r3
    4dfa:	4152      	adcs	r2, r2
    4dfc:	0a03      	lsrs	r3, r0, #8
    4dfe:	428b      	cmp	r3, r1
    4e00:	d301      	bcc.n	4e06 <__udivsi3+0x9a>
    4e02:	020b      	lsls	r3, r1, #8
    4e04:	1ac0      	subs	r0, r0, r3
    4e06:	4152      	adcs	r2, r2
    4e08:	d2cd      	bcs.n	4da6 <__udivsi3+0x3a>
    4e0a:	09c3      	lsrs	r3, r0, #7
    4e0c:	428b      	cmp	r3, r1
    4e0e:	d301      	bcc.n	4e14 <__udivsi3+0xa8>
    4e10:	01cb      	lsls	r3, r1, #7
    4e12:	1ac0      	subs	r0, r0, r3
    4e14:	4152      	adcs	r2, r2
    4e16:	0983      	lsrs	r3, r0, #6
    4e18:	428b      	cmp	r3, r1
    4e1a:	d301      	bcc.n	4e20 <__udivsi3+0xb4>
    4e1c:	018b      	lsls	r3, r1, #6
    4e1e:	1ac0      	subs	r0, r0, r3
    4e20:	4152      	adcs	r2, r2
    4e22:	0943      	lsrs	r3, r0, #5
    4e24:	428b      	cmp	r3, r1
    4e26:	d301      	bcc.n	4e2c <__udivsi3+0xc0>
    4e28:	014b      	lsls	r3, r1, #5
    4e2a:	1ac0      	subs	r0, r0, r3
    4e2c:	4152      	adcs	r2, r2
    4e2e:	0903      	lsrs	r3, r0, #4
    4e30:	428b      	cmp	r3, r1
    4e32:	d301      	bcc.n	4e38 <__udivsi3+0xcc>
    4e34:	010b      	lsls	r3, r1, #4
    4e36:	1ac0      	subs	r0, r0, r3
    4e38:	4152      	adcs	r2, r2
    4e3a:	08c3      	lsrs	r3, r0, #3
    4e3c:	428b      	cmp	r3, r1
    4e3e:	d301      	bcc.n	4e44 <__udivsi3+0xd8>
    4e40:	00cb      	lsls	r3, r1, #3
    4e42:	1ac0      	subs	r0, r0, r3
    4e44:	4152      	adcs	r2, r2
    4e46:	0883      	lsrs	r3, r0, #2
    4e48:	428b      	cmp	r3, r1
    4e4a:	d301      	bcc.n	4e50 <__udivsi3+0xe4>
    4e4c:	008b      	lsls	r3, r1, #2
    4e4e:	1ac0      	subs	r0, r0, r3
    4e50:	4152      	adcs	r2, r2
    4e52:	0843      	lsrs	r3, r0, #1
    4e54:	428b      	cmp	r3, r1
    4e56:	d301      	bcc.n	4e5c <__udivsi3+0xf0>
    4e58:	004b      	lsls	r3, r1, #1
    4e5a:	1ac0      	subs	r0, r0, r3
    4e5c:	4152      	adcs	r2, r2
    4e5e:	1a41      	subs	r1, r0, r1
    4e60:	d200      	bcs.n	4e64 <__udivsi3+0xf8>
    4e62:	4601      	mov	r1, r0
    4e64:	4152      	adcs	r2, r2
    4e66:	4610      	mov	r0, r2
    4e68:	4770      	bx	lr
    4e6a:	e7ff      	b.n	4e6c <__udivsi3+0x100>
    4e6c:	b501      	push	{r0, lr}
    4e6e:	2000      	movs	r0, #0
    4e70:	f000 f8f0 	bl	5054 <__aeabi_idiv0>
    4e74:	bd02      	pop	{r1, pc}
    4e76:	46c0      	nop			; (mov r8, r8)

00004e78 <__aeabi_uidivmod>:
    4e78:	2900      	cmp	r1, #0
    4e7a:	d0f7      	beq.n	4e6c <__udivsi3+0x100>
    4e7c:	e776      	b.n	4d6c <__udivsi3>
    4e7e:	4770      	bx	lr

00004e80 <__divsi3>:
    4e80:	4603      	mov	r3, r0
    4e82:	430b      	orrs	r3, r1
    4e84:	d47f      	bmi.n	4f86 <__divsi3+0x106>
    4e86:	2200      	movs	r2, #0
    4e88:	0843      	lsrs	r3, r0, #1
    4e8a:	428b      	cmp	r3, r1
    4e8c:	d374      	bcc.n	4f78 <__divsi3+0xf8>
    4e8e:	0903      	lsrs	r3, r0, #4
    4e90:	428b      	cmp	r3, r1
    4e92:	d35f      	bcc.n	4f54 <__divsi3+0xd4>
    4e94:	0a03      	lsrs	r3, r0, #8
    4e96:	428b      	cmp	r3, r1
    4e98:	d344      	bcc.n	4f24 <__divsi3+0xa4>
    4e9a:	0b03      	lsrs	r3, r0, #12
    4e9c:	428b      	cmp	r3, r1
    4e9e:	d328      	bcc.n	4ef2 <__divsi3+0x72>
    4ea0:	0c03      	lsrs	r3, r0, #16
    4ea2:	428b      	cmp	r3, r1
    4ea4:	d30d      	bcc.n	4ec2 <__divsi3+0x42>
    4ea6:	22ff      	movs	r2, #255	; 0xff
    4ea8:	0209      	lsls	r1, r1, #8
    4eaa:	ba12      	rev	r2, r2
    4eac:	0c03      	lsrs	r3, r0, #16
    4eae:	428b      	cmp	r3, r1
    4eb0:	d302      	bcc.n	4eb8 <__divsi3+0x38>
    4eb2:	1212      	asrs	r2, r2, #8
    4eb4:	0209      	lsls	r1, r1, #8
    4eb6:	d065      	beq.n	4f84 <__divsi3+0x104>
    4eb8:	0b03      	lsrs	r3, r0, #12
    4eba:	428b      	cmp	r3, r1
    4ebc:	d319      	bcc.n	4ef2 <__divsi3+0x72>
    4ebe:	e000      	b.n	4ec2 <__divsi3+0x42>
    4ec0:	0a09      	lsrs	r1, r1, #8
    4ec2:	0bc3      	lsrs	r3, r0, #15
    4ec4:	428b      	cmp	r3, r1
    4ec6:	d301      	bcc.n	4ecc <__divsi3+0x4c>
    4ec8:	03cb      	lsls	r3, r1, #15
    4eca:	1ac0      	subs	r0, r0, r3
    4ecc:	4152      	adcs	r2, r2
    4ece:	0b83      	lsrs	r3, r0, #14
    4ed0:	428b      	cmp	r3, r1
    4ed2:	d301      	bcc.n	4ed8 <__divsi3+0x58>
    4ed4:	038b      	lsls	r3, r1, #14
    4ed6:	1ac0      	subs	r0, r0, r3
    4ed8:	4152      	adcs	r2, r2
    4eda:	0b43      	lsrs	r3, r0, #13
    4edc:	428b      	cmp	r3, r1
    4ede:	d301      	bcc.n	4ee4 <__divsi3+0x64>
    4ee0:	034b      	lsls	r3, r1, #13
    4ee2:	1ac0      	subs	r0, r0, r3
    4ee4:	4152      	adcs	r2, r2
    4ee6:	0b03      	lsrs	r3, r0, #12
    4ee8:	428b      	cmp	r3, r1
    4eea:	d301      	bcc.n	4ef0 <__divsi3+0x70>
    4eec:	030b      	lsls	r3, r1, #12
    4eee:	1ac0      	subs	r0, r0, r3
    4ef0:	4152      	adcs	r2, r2
    4ef2:	0ac3      	lsrs	r3, r0, #11
    4ef4:	428b      	cmp	r3, r1
    4ef6:	d301      	bcc.n	4efc <__divsi3+0x7c>
    4ef8:	02cb      	lsls	r3, r1, #11
    4efa:	1ac0      	subs	r0, r0, r3
    4efc:	4152      	adcs	r2, r2
    4efe:	0a83      	lsrs	r3, r0, #10
    4f00:	428b      	cmp	r3, r1
    4f02:	d301      	bcc.n	4f08 <__divsi3+0x88>
    4f04:	028b      	lsls	r3, r1, #10
    4f06:	1ac0      	subs	r0, r0, r3
    4f08:	4152      	adcs	r2, r2
    4f0a:	0a43      	lsrs	r3, r0, #9
    4f0c:	428b      	cmp	r3, r1
    4f0e:	d301      	bcc.n	4f14 <__divsi3+0x94>
    4f10:	024b      	lsls	r3, r1, #9
    4f12:	1ac0      	subs	r0, r0, r3
    4f14:	4152      	adcs	r2, r2
    4f16:	0a03      	lsrs	r3, r0, #8
    4f18:	428b      	cmp	r3, r1
    4f1a:	d301      	bcc.n	4f20 <__divsi3+0xa0>
    4f1c:	020b      	lsls	r3, r1, #8
    4f1e:	1ac0      	subs	r0, r0, r3
    4f20:	4152      	adcs	r2, r2
    4f22:	d2cd      	bcs.n	4ec0 <__divsi3+0x40>
    4f24:	09c3      	lsrs	r3, r0, #7
    4f26:	428b      	cmp	r3, r1
    4f28:	d301      	bcc.n	4f2e <__divsi3+0xae>
    4f2a:	01cb      	lsls	r3, r1, #7
    4f2c:	1ac0      	subs	r0, r0, r3
    4f2e:	4152      	adcs	r2, r2
    4f30:	0983      	lsrs	r3, r0, #6
    4f32:	428b      	cmp	r3, r1
    4f34:	d301      	bcc.n	4f3a <__divsi3+0xba>
    4f36:	018b      	lsls	r3, r1, #6
    4f38:	1ac0      	subs	r0, r0, r3
    4f3a:	4152      	adcs	r2, r2
    4f3c:	0943      	lsrs	r3, r0, #5
    4f3e:	428b      	cmp	r3, r1
    4f40:	d301      	bcc.n	4f46 <__divsi3+0xc6>
    4f42:	014b      	lsls	r3, r1, #5
    4f44:	1ac0      	subs	r0, r0, r3
    4f46:	4152      	adcs	r2, r2
    4f48:	0903      	lsrs	r3, r0, #4
    4f4a:	428b      	cmp	r3, r1
    4f4c:	d301      	bcc.n	4f52 <__divsi3+0xd2>
    4f4e:	010b      	lsls	r3, r1, #4
    4f50:	1ac0      	subs	r0, r0, r3
    4f52:	4152      	adcs	r2, r2
    4f54:	08c3      	lsrs	r3, r0, #3
    4f56:	428b      	cmp	r3, r1
    4f58:	d301      	bcc.n	4f5e <__divsi3+0xde>
    4f5a:	00cb      	lsls	r3, r1, #3
    4f5c:	1ac0      	subs	r0, r0, r3
    4f5e:	4152      	adcs	r2, r2
    4f60:	0883      	lsrs	r3, r0, #2
    4f62:	428b      	cmp	r3, r1
    4f64:	d301      	bcc.n	4f6a <__divsi3+0xea>
    4f66:	008b      	lsls	r3, r1, #2
    4f68:	1ac0      	subs	r0, r0, r3
    4f6a:	4152      	adcs	r2, r2
    4f6c:	0843      	lsrs	r3, r0, #1
    4f6e:	428b      	cmp	r3, r1
    4f70:	d301      	bcc.n	4f76 <__divsi3+0xf6>
    4f72:	004b      	lsls	r3, r1, #1
    4f74:	1ac0      	subs	r0, r0, r3
    4f76:	4152      	adcs	r2, r2
    4f78:	1a41      	subs	r1, r0, r1
    4f7a:	d200      	bcs.n	4f7e <__divsi3+0xfe>
    4f7c:	4601      	mov	r1, r0
    4f7e:	4152      	adcs	r2, r2
    4f80:	4610      	mov	r0, r2
    4f82:	4770      	bx	lr
    4f84:	e05d      	b.n	5042 <__divsi3+0x1c2>
    4f86:	0fca      	lsrs	r2, r1, #31
    4f88:	d000      	beq.n	4f8c <__divsi3+0x10c>
    4f8a:	4249      	negs	r1, r1
    4f8c:	1003      	asrs	r3, r0, #32
    4f8e:	d300      	bcc.n	4f92 <__divsi3+0x112>
    4f90:	4240      	negs	r0, r0
    4f92:	4053      	eors	r3, r2
    4f94:	2200      	movs	r2, #0
    4f96:	469c      	mov	ip, r3
    4f98:	0903      	lsrs	r3, r0, #4
    4f9a:	428b      	cmp	r3, r1
    4f9c:	d32d      	bcc.n	4ffa <__divsi3+0x17a>
    4f9e:	0a03      	lsrs	r3, r0, #8
    4fa0:	428b      	cmp	r3, r1
    4fa2:	d312      	bcc.n	4fca <__divsi3+0x14a>
    4fa4:	22fc      	movs	r2, #252	; 0xfc
    4fa6:	0189      	lsls	r1, r1, #6
    4fa8:	ba12      	rev	r2, r2
    4faa:	0a03      	lsrs	r3, r0, #8
    4fac:	428b      	cmp	r3, r1
    4fae:	d30c      	bcc.n	4fca <__divsi3+0x14a>
    4fb0:	0189      	lsls	r1, r1, #6
    4fb2:	1192      	asrs	r2, r2, #6
    4fb4:	428b      	cmp	r3, r1
    4fb6:	d308      	bcc.n	4fca <__divsi3+0x14a>
    4fb8:	0189      	lsls	r1, r1, #6
    4fba:	1192      	asrs	r2, r2, #6
    4fbc:	428b      	cmp	r3, r1
    4fbe:	d304      	bcc.n	4fca <__divsi3+0x14a>
    4fc0:	0189      	lsls	r1, r1, #6
    4fc2:	d03a      	beq.n	503a <__divsi3+0x1ba>
    4fc4:	1192      	asrs	r2, r2, #6
    4fc6:	e000      	b.n	4fca <__divsi3+0x14a>
    4fc8:	0989      	lsrs	r1, r1, #6
    4fca:	09c3      	lsrs	r3, r0, #7
    4fcc:	428b      	cmp	r3, r1
    4fce:	d301      	bcc.n	4fd4 <__divsi3+0x154>
    4fd0:	01cb      	lsls	r3, r1, #7
    4fd2:	1ac0      	subs	r0, r0, r3
    4fd4:	4152      	adcs	r2, r2
    4fd6:	0983      	lsrs	r3, r0, #6
    4fd8:	428b      	cmp	r3, r1
    4fda:	d301      	bcc.n	4fe0 <__divsi3+0x160>
    4fdc:	018b      	lsls	r3, r1, #6
    4fde:	1ac0      	subs	r0, r0, r3
    4fe0:	4152      	adcs	r2, r2
    4fe2:	0943      	lsrs	r3, r0, #5
    4fe4:	428b      	cmp	r3, r1
    4fe6:	d301      	bcc.n	4fec <__divsi3+0x16c>
    4fe8:	014b      	lsls	r3, r1, #5
    4fea:	1ac0      	subs	r0, r0, r3
    4fec:	4152      	adcs	r2, r2
    4fee:	0903      	lsrs	r3, r0, #4
    4ff0:	428b      	cmp	r3, r1
    4ff2:	d301      	bcc.n	4ff8 <__divsi3+0x178>
    4ff4:	010b      	lsls	r3, r1, #4
    4ff6:	1ac0      	subs	r0, r0, r3
    4ff8:	4152      	adcs	r2, r2
    4ffa:	08c3      	lsrs	r3, r0, #3
    4ffc:	428b      	cmp	r3, r1
    4ffe:	d301      	bcc.n	5004 <__divsi3+0x184>
    5000:	00cb      	lsls	r3, r1, #3
    5002:	1ac0      	subs	r0, r0, r3
    5004:	4152      	adcs	r2, r2
    5006:	0883      	lsrs	r3, r0, #2
    5008:	428b      	cmp	r3, r1
    500a:	d301      	bcc.n	5010 <__divsi3+0x190>
    500c:	008b      	lsls	r3, r1, #2
    500e:	1ac0      	subs	r0, r0, r3
    5010:	4152      	adcs	r2, r2
    5012:	d2d9      	bcs.n	4fc8 <__divsi3+0x148>
    5014:	0843      	lsrs	r3, r0, #1
    5016:	428b      	cmp	r3, r1
    5018:	d301      	bcc.n	501e <__divsi3+0x19e>
    501a:	004b      	lsls	r3, r1, #1
    501c:	1ac0      	subs	r0, r0, r3
    501e:	4152      	adcs	r2, r2
    5020:	1a41      	subs	r1, r0, r1
    5022:	d200      	bcs.n	5026 <__divsi3+0x1a6>
    5024:	4601      	mov	r1, r0
    5026:	4663      	mov	r3, ip
    5028:	4152      	adcs	r2, r2
    502a:	105b      	asrs	r3, r3, #1
    502c:	4610      	mov	r0, r2
    502e:	d301      	bcc.n	5034 <__divsi3+0x1b4>
    5030:	4240      	negs	r0, r0
    5032:	2b00      	cmp	r3, #0
    5034:	d500      	bpl.n	5038 <__divsi3+0x1b8>
    5036:	4249      	negs	r1, r1
    5038:	4770      	bx	lr
    503a:	4663      	mov	r3, ip
    503c:	105b      	asrs	r3, r3, #1
    503e:	d300      	bcc.n	5042 <__divsi3+0x1c2>
    5040:	4240      	negs	r0, r0
    5042:	b501      	push	{r0, lr}
    5044:	2000      	movs	r0, #0
    5046:	f000 f805 	bl	5054 <__aeabi_idiv0>
    504a:	bd02      	pop	{r1, pc}

0000504c <__aeabi_idivmod>:
    504c:	2900      	cmp	r1, #0
    504e:	d0f8      	beq.n	5042 <__divsi3+0x1c2>
    5050:	e716      	b.n	4e80 <__divsi3>
    5052:	4770      	bx	lr

00005054 <__aeabi_idiv0>:
    5054:	4770      	bx	lr
    5056:	46c0      	nop			; (mov r8, r8)

00005058 <__aeabi_cdrcmple>:
    5058:	4684      	mov	ip, r0
    505a:	1c10      	adds	r0, r2, #0
    505c:	4662      	mov	r2, ip
    505e:	468c      	mov	ip, r1
    5060:	1c19      	adds	r1, r3, #0
    5062:	4663      	mov	r3, ip
    5064:	e000      	b.n	5068 <__aeabi_cdcmpeq>
    5066:	46c0      	nop			; (mov r8, r8)

00005068 <__aeabi_cdcmpeq>:
    5068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    506a:	f001 f89d 	bl	61a8 <__ledf2>
    506e:	2800      	cmp	r0, #0
    5070:	d401      	bmi.n	5076 <__aeabi_cdcmpeq+0xe>
    5072:	2100      	movs	r1, #0
    5074:	42c8      	cmn	r0, r1
    5076:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00005078 <__aeabi_dcmpeq>:
    5078:	b510      	push	{r4, lr}
    507a:	f000 fff7 	bl	606c <__eqdf2>
    507e:	4240      	negs	r0, r0
    5080:	3001      	adds	r0, #1
    5082:	bd10      	pop	{r4, pc}

00005084 <__aeabi_dcmplt>:
    5084:	b510      	push	{r4, lr}
    5086:	f001 f88f 	bl	61a8 <__ledf2>
    508a:	2800      	cmp	r0, #0
    508c:	db01      	blt.n	5092 <__aeabi_dcmplt+0xe>
    508e:	2000      	movs	r0, #0
    5090:	bd10      	pop	{r4, pc}
    5092:	2001      	movs	r0, #1
    5094:	bd10      	pop	{r4, pc}
    5096:	46c0      	nop			; (mov r8, r8)

00005098 <__aeabi_dcmple>:
    5098:	b510      	push	{r4, lr}
    509a:	f001 f885 	bl	61a8 <__ledf2>
    509e:	2800      	cmp	r0, #0
    50a0:	dd01      	ble.n	50a6 <__aeabi_dcmple+0xe>
    50a2:	2000      	movs	r0, #0
    50a4:	bd10      	pop	{r4, pc}
    50a6:	2001      	movs	r0, #1
    50a8:	bd10      	pop	{r4, pc}
    50aa:	46c0      	nop			; (mov r8, r8)

000050ac <__aeabi_dcmpgt>:
    50ac:	b510      	push	{r4, lr}
    50ae:	f001 f817 	bl	60e0 <__gedf2>
    50b2:	2800      	cmp	r0, #0
    50b4:	dc01      	bgt.n	50ba <__aeabi_dcmpgt+0xe>
    50b6:	2000      	movs	r0, #0
    50b8:	bd10      	pop	{r4, pc}
    50ba:	2001      	movs	r0, #1
    50bc:	bd10      	pop	{r4, pc}
    50be:	46c0      	nop			; (mov r8, r8)

000050c0 <__aeabi_dcmpge>:
    50c0:	b510      	push	{r4, lr}
    50c2:	f001 f80d 	bl	60e0 <__gedf2>
    50c6:	2800      	cmp	r0, #0
    50c8:	da01      	bge.n	50ce <__aeabi_dcmpge+0xe>
    50ca:	2000      	movs	r0, #0
    50cc:	bd10      	pop	{r4, pc}
    50ce:	2001      	movs	r0, #1
    50d0:	bd10      	pop	{r4, pc}
    50d2:	46c0      	nop			; (mov r8, r8)

000050d4 <__aeabi_lmul>:
    50d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    50d6:	46ce      	mov	lr, r9
    50d8:	4647      	mov	r7, r8
    50da:	0415      	lsls	r5, r2, #16
    50dc:	0c2d      	lsrs	r5, r5, #16
    50de:	002e      	movs	r6, r5
    50e0:	b580      	push	{r7, lr}
    50e2:	0407      	lsls	r7, r0, #16
    50e4:	0c14      	lsrs	r4, r2, #16
    50e6:	0c3f      	lsrs	r7, r7, #16
    50e8:	4699      	mov	r9, r3
    50ea:	0c03      	lsrs	r3, r0, #16
    50ec:	437e      	muls	r6, r7
    50ee:	435d      	muls	r5, r3
    50f0:	4367      	muls	r7, r4
    50f2:	4363      	muls	r3, r4
    50f4:	197f      	adds	r7, r7, r5
    50f6:	0c34      	lsrs	r4, r6, #16
    50f8:	19e4      	adds	r4, r4, r7
    50fa:	469c      	mov	ip, r3
    50fc:	42a5      	cmp	r5, r4
    50fe:	d903      	bls.n	5108 <__aeabi_lmul+0x34>
    5100:	2380      	movs	r3, #128	; 0x80
    5102:	025b      	lsls	r3, r3, #9
    5104:	4698      	mov	r8, r3
    5106:	44c4      	add	ip, r8
    5108:	464b      	mov	r3, r9
    510a:	4351      	muls	r1, r2
    510c:	4343      	muls	r3, r0
    510e:	0436      	lsls	r6, r6, #16
    5110:	0c36      	lsrs	r6, r6, #16
    5112:	0c25      	lsrs	r5, r4, #16
    5114:	0424      	lsls	r4, r4, #16
    5116:	4465      	add	r5, ip
    5118:	19a4      	adds	r4, r4, r6
    511a:	1859      	adds	r1, r3, r1
    511c:	1949      	adds	r1, r1, r5
    511e:	0020      	movs	r0, r4
    5120:	bc0c      	pop	{r2, r3}
    5122:	4690      	mov	r8, r2
    5124:	4699      	mov	r9, r3
    5126:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005128 <__aeabi_d2uiz>:
    5128:	b570      	push	{r4, r5, r6, lr}
    512a:	2200      	movs	r2, #0
    512c:	4b0c      	ldr	r3, [pc, #48]	; (5160 <__aeabi_d2uiz+0x38>)
    512e:	0004      	movs	r4, r0
    5130:	000d      	movs	r5, r1
    5132:	f7ff ffc5 	bl	50c0 <__aeabi_dcmpge>
    5136:	2800      	cmp	r0, #0
    5138:	d104      	bne.n	5144 <__aeabi_d2uiz+0x1c>
    513a:	0020      	movs	r0, r4
    513c:	0029      	movs	r1, r5
    513e:	f001 fe4b 	bl	6dd8 <__aeabi_d2iz>
    5142:	bd70      	pop	{r4, r5, r6, pc}
    5144:	4b06      	ldr	r3, [pc, #24]	; (5160 <__aeabi_d2uiz+0x38>)
    5146:	2200      	movs	r2, #0
    5148:	0020      	movs	r0, r4
    514a:	0029      	movs	r1, r5
    514c:	f001 fb0e 	bl	676c <__aeabi_dsub>
    5150:	f001 fe42 	bl	6dd8 <__aeabi_d2iz>
    5154:	2380      	movs	r3, #128	; 0x80
    5156:	061b      	lsls	r3, r3, #24
    5158:	469c      	mov	ip, r3
    515a:	4460      	add	r0, ip
    515c:	e7f1      	b.n	5142 <__aeabi_d2uiz+0x1a>
    515e:	46c0      	nop			; (mov r8, r8)
    5160:	41e00000 	.word	0x41e00000

00005164 <__aeabi_fmul>:
    5164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5166:	4657      	mov	r7, sl
    5168:	464e      	mov	r6, r9
    516a:	4645      	mov	r5, r8
    516c:	46de      	mov	lr, fp
    516e:	b5e0      	push	{r5, r6, r7, lr}
    5170:	0247      	lsls	r7, r0, #9
    5172:	0046      	lsls	r6, r0, #1
    5174:	4688      	mov	r8, r1
    5176:	0a7f      	lsrs	r7, r7, #9
    5178:	0e36      	lsrs	r6, r6, #24
    517a:	0fc4      	lsrs	r4, r0, #31
    517c:	2e00      	cmp	r6, #0
    517e:	d047      	beq.n	5210 <__aeabi_fmul+0xac>
    5180:	2eff      	cmp	r6, #255	; 0xff
    5182:	d024      	beq.n	51ce <__aeabi_fmul+0x6a>
    5184:	00fb      	lsls	r3, r7, #3
    5186:	2780      	movs	r7, #128	; 0x80
    5188:	04ff      	lsls	r7, r7, #19
    518a:	431f      	orrs	r7, r3
    518c:	2300      	movs	r3, #0
    518e:	4699      	mov	r9, r3
    5190:	469a      	mov	sl, r3
    5192:	3e7f      	subs	r6, #127	; 0x7f
    5194:	4643      	mov	r3, r8
    5196:	025d      	lsls	r5, r3, #9
    5198:	0058      	lsls	r0, r3, #1
    519a:	0fdb      	lsrs	r3, r3, #31
    519c:	0a6d      	lsrs	r5, r5, #9
    519e:	0e00      	lsrs	r0, r0, #24
    51a0:	4698      	mov	r8, r3
    51a2:	d043      	beq.n	522c <__aeabi_fmul+0xc8>
    51a4:	28ff      	cmp	r0, #255	; 0xff
    51a6:	d03b      	beq.n	5220 <__aeabi_fmul+0xbc>
    51a8:	00eb      	lsls	r3, r5, #3
    51aa:	2580      	movs	r5, #128	; 0x80
    51ac:	2200      	movs	r2, #0
    51ae:	04ed      	lsls	r5, r5, #19
    51b0:	431d      	orrs	r5, r3
    51b2:	387f      	subs	r0, #127	; 0x7f
    51b4:	1836      	adds	r6, r6, r0
    51b6:	1c73      	adds	r3, r6, #1
    51b8:	4641      	mov	r1, r8
    51ba:	469b      	mov	fp, r3
    51bc:	464b      	mov	r3, r9
    51be:	4061      	eors	r1, r4
    51c0:	4313      	orrs	r3, r2
    51c2:	2b0f      	cmp	r3, #15
    51c4:	d864      	bhi.n	5290 <__aeabi_fmul+0x12c>
    51c6:	4875      	ldr	r0, [pc, #468]	; (539c <__aeabi_fmul+0x238>)
    51c8:	009b      	lsls	r3, r3, #2
    51ca:	58c3      	ldr	r3, [r0, r3]
    51cc:	469f      	mov	pc, r3
    51ce:	2f00      	cmp	r7, #0
    51d0:	d142      	bne.n	5258 <__aeabi_fmul+0xf4>
    51d2:	2308      	movs	r3, #8
    51d4:	4699      	mov	r9, r3
    51d6:	3b06      	subs	r3, #6
    51d8:	26ff      	movs	r6, #255	; 0xff
    51da:	469a      	mov	sl, r3
    51dc:	e7da      	b.n	5194 <__aeabi_fmul+0x30>
    51de:	4641      	mov	r1, r8
    51e0:	2a02      	cmp	r2, #2
    51e2:	d028      	beq.n	5236 <__aeabi_fmul+0xd2>
    51e4:	2a03      	cmp	r2, #3
    51e6:	d100      	bne.n	51ea <__aeabi_fmul+0x86>
    51e8:	e0ce      	b.n	5388 <__aeabi_fmul+0x224>
    51ea:	2a01      	cmp	r2, #1
    51ec:	d000      	beq.n	51f0 <__aeabi_fmul+0x8c>
    51ee:	e0ac      	b.n	534a <__aeabi_fmul+0x1e6>
    51f0:	4011      	ands	r1, r2
    51f2:	2000      	movs	r0, #0
    51f4:	2200      	movs	r2, #0
    51f6:	b2cc      	uxtb	r4, r1
    51f8:	0240      	lsls	r0, r0, #9
    51fa:	05d2      	lsls	r2, r2, #23
    51fc:	0a40      	lsrs	r0, r0, #9
    51fe:	07e4      	lsls	r4, r4, #31
    5200:	4310      	orrs	r0, r2
    5202:	4320      	orrs	r0, r4
    5204:	bc3c      	pop	{r2, r3, r4, r5}
    5206:	4690      	mov	r8, r2
    5208:	4699      	mov	r9, r3
    520a:	46a2      	mov	sl, r4
    520c:	46ab      	mov	fp, r5
    520e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5210:	2f00      	cmp	r7, #0
    5212:	d115      	bne.n	5240 <__aeabi_fmul+0xdc>
    5214:	2304      	movs	r3, #4
    5216:	4699      	mov	r9, r3
    5218:	3b03      	subs	r3, #3
    521a:	2600      	movs	r6, #0
    521c:	469a      	mov	sl, r3
    521e:	e7b9      	b.n	5194 <__aeabi_fmul+0x30>
    5220:	20ff      	movs	r0, #255	; 0xff
    5222:	2202      	movs	r2, #2
    5224:	2d00      	cmp	r5, #0
    5226:	d0c5      	beq.n	51b4 <__aeabi_fmul+0x50>
    5228:	2203      	movs	r2, #3
    522a:	e7c3      	b.n	51b4 <__aeabi_fmul+0x50>
    522c:	2d00      	cmp	r5, #0
    522e:	d119      	bne.n	5264 <__aeabi_fmul+0x100>
    5230:	2000      	movs	r0, #0
    5232:	2201      	movs	r2, #1
    5234:	e7be      	b.n	51b4 <__aeabi_fmul+0x50>
    5236:	2401      	movs	r4, #1
    5238:	22ff      	movs	r2, #255	; 0xff
    523a:	400c      	ands	r4, r1
    523c:	2000      	movs	r0, #0
    523e:	e7db      	b.n	51f8 <__aeabi_fmul+0x94>
    5240:	0038      	movs	r0, r7
    5242:	f001 ff53 	bl	70ec <__clzsi2>
    5246:	2676      	movs	r6, #118	; 0x76
    5248:	1f43      	subs	r3, r0, #5
    524a:	409f      	lsls	r7, r3
    524c:	2300      	movs	r3, #0
    524e:	4276      	negs	r6, r6
    5250:	1a36      	subs	r6, r6, r0
    5252:	4699      	mov	r9, r3
    5254:	469a      	mov	sl, r3
    5256:	e79d      	b.n	5194 <__aeabi_fmul+0x30>
    5258:	230c      	movs	r3, #12
    525a:	4699      	mov	r9, r3
    525c:	3b09      	subs	r3, #9
    525e:	26ff      	movs	r6, #255	; 0xff
    5260:	469a      	mov	sl, r3
    5262:	e797      	b.n	5194 <__aeabi_fmul+0x30>
    5264:	0028      	movs	r0, r5
    5266:	f001 ff41 	bl	70ec <__clzsi2>
    526a:	1f43      	subs	r3, r0, #5
    526c:	409d      	lsls	r5, r3
    526e:	2376      	movs	r3, #118	; 0x76
    5270:	425b      	negs	r3, r3
    5272:	1a18      	subs	r0, r3, r0
    5274:	2200      	movs	r2, #0
    5276:	e79d      	b.n	51b4 <__aeabi_fmul+0x50>
    5278:	2080      	movs	r0, #128	; 0x80
    527a:	2400      	movs	r4, #0
    527c:	03c0      	lsls	r0, r0, #15
    527e:	22ff      	movs	r2, #255	; 0xff
    5280:	e7ba      	b.n	51f8 <__aeabi_fmul+0x94>
    5282:	003d      	movs	r5, r7
    5284:	4652      	mov	r2, sl
    5286:	e7ab      	b.n	51e0 <__aeabi_fmul+0x7c>
    5288:	003d      	movs	r5, r7
    528a:	0021      	movs	r1, r4
    528c:	4652      	mov	r2, sl
    528e:	e7a7      	b.n	51e0 <__aeabi_fmul+0x7c>
    5290:	0c3b      	lsrs	r3, r7, #16
    5292:	469c      	mov	ip, r3
    5294:	042a      	lsls	r2, r5, #16
    5296:	0c12      	lsrs	r2, r2, #16
    5298:	0c2b      	lsrs	r3, r5, #16
    529a:	0014      	movs	r4, r2
    529c:	4660      	mov	r0, ip
    529e:	4665      	mov	r5, ip
    52a0:	043f      	lsls	r7, r7, #16
    52a2:	0c3f      	lsrs	r7, r7, #16
    52a4:	437c      	muls	r4, r7
    52a6:	4342      	muls	r2, r0
    52a8:	435d      	muls	r5, r3
    52aa:	437b      	muls	r3, r7
    52ac:	0c27      	lsrs	r7, r4, #16
    52ae:	189b      	adds	r3, r3, r2
    52b0:	18ff      	adds	r7, r7, r3
    52b2:	42ba      	cmp	r2, r7
    52b4:	d903      	bls.n	52be <__aeabi_fmul+0x15a>
    52b6:	2380      	movs	r3, #128	; 0x80
    52b8:	025b      	lsls	r3, r3, #9
    52ba:	469c      	mov	ip, r3
    52bc:	4465      	add	r5, ip
    52be:	0424      	lsls	r4, r4, #16
    52c0:	043a      	lsls	r2, r7, #16
    52c2:	0c24      	lsrs	r4, r4, #16
    52c4:	1912      	adds	r2, r2, r4
    52c6:	0193      	lsls	r3, r2, #6
    52c8:	1e5c      	subs	r4, r3, #1
    52ca:	41a3      	sbcs	r3, r4
    52cc:	0c3f      	lsrs	r7, r7, #16
    52ce:	0e92      	lsrs	r2, r2, #26
    52d0:	197d      	adds	r5, r7, r5
    52d2:	431a      	orrs	r2, r3
    52d4:	01ad      	lsls	r5, r5, #6
    52d6:	4315      	orrs	r5, r2
    52d8:	012b      	lsls	r3, r5, #4
    52da:	d504      	bpl.n	52e6 <__aeabi_fmul+0x182>
    52dc:	2301      	movs	r3, #1
    52de:	465e      	mov	r6, fp
    52e0:	086a      	lsrs	r2, r5, #1
    52e2:	401d      	ands	r5, r3
    52e4:	4315      	orrs	r5, r2
    52e6:	0032      	movs	r2, r6
    52e8:	327f      	adds	r2, #127	; 0x7f
    52ea:	2a00      	cmp	r2, #0
    52ec:	dd25      	ble.n	533a <__aeabi_fmul+0x1d6>
    52ee:	076b      	lsls	r3, r5, #29
    52f0:	d004      	beq.n	52fc <__aeabi_fmul+0x198>
    52f2:	230f      	movs	r3, #15
    52f4:	402b      	ands	r3, r5
    52f6:	2b04      	cmp	r3, #4
    52f8:	d000      	beq.n	52fc <__aeabi_fmul+0x198>
    52fa:	3504      	adds	r5, #4
    52fc:	012b      	lsls	r3, r5, #4
    52fe:	d503      	bpl.n	5308 <__aeabi_fmul+0x1a4>
    5300:	0032      	movs	r2, r6
    5302:	4b27      	ldr	r3, [pc, #156]	; (53a0 <__aeabi_fmul+0x23c>)
    5304:	3280      	adds	r2, #128	; 0x80
    5306:	401d      	ands	r5, r3
    5308:	2afe      	cmp	r2, #254	; 0xfe
    530a:	dc94      	bgt.n	5236 <__aeabi_fmul+0xd2>
    530c:	2401      	movs	r4, #1
    530e:	01a8      	lsls	r0, r5, #6
    5310:	0a40      	lsrs	r0, r0, #9
    5312:	b2d2      	uxtb	r2, r2
    5314:	400c      	ands	r4, r1
    5316:	e76f      	b.n	51f8 <__aeabi_fmul+0x94>
    5318:	2080      	movs	r0, #128	; 0x80
    531a:	03c0      	lsls	r0, r0, #15
    531c:	4207      	tst	r7, r0
    531e:	d007      	beq.n	5330 <__aeabi_fmul+0x1cc>
    5320:	4205      	tst	r5, r0
    5322:	d105      	bne.n	5330 <__aeabi_fmul+0x1cc>
    5324:	4328      	orrs	r0, r5
    5326:	0240      	lsls	r0, r0, #9
    5328:	0a40      	lsrs	r0, r0, #9
    532a:	4644      	mov	r4, r8
    532c:	22ff      	movs	r2, #255	; 0xff
    532e:	e763      	b.n	51f8 <__aeabi_fmul+0x94>
    5330:	4338      	orrs	r0, r7
    5332:	0240      	lsls	r0, r0, #9
    5334:	0a40      	lsrs	r0, r0, #9
    5336:	22ff      	movs	r2, #255	; 0xff
    5338:	e75e      	b.n	51f8 <__aeabi_fmul+0x94>
    533a:	2401      	movs	r4, #1
    533c:	1aa3      	subs	r3, r4, r2
    533e:	2b1b      	cmp	r3, #27
    5340:	dd05      	ble.n	534e <__aeabi_fmul+0x1ea>
    5342:	400c      	ands	r4, r1
    5344:	2200      	movs	r2, #0
    5346:	2000      	movs	r0, #0
    5348:	e756      	b.n	51f8 <__aeabi_fmul+0x94>
    534a:	465e      	mov	r6, fp
    534c:	e7cb      	b.n	52e6 <__aeabi_fmul+0x182>
    534e:	002a      	movs	r2, r5
    5350:	2020      	movs	r0, #32
    5352:	40da      	lsrs	r2, r3
    5354:	1ac3      	subs	r3, r0, r3
    5356:	409d      	lsls	r5, r3
    5358:	002b      	movs	r3, r5
    535a:	1e5d      	subs	r5, r3, #1
    535c:	41ab      	sbcs	r3, r5
    535e:	4313      	orrs	r3, r2
    5360:	075a      	lsls	r2, r3, #29
    5362:	d004      	beq.n	536e <__aeabi_fmul+0x20a>
    5364:	220f      	movs	r2, #15
    5366:	401a      	ands	r2, r3
    5368:	2a04      	cmp	r2, #4
    536a:	d000      	beq.n	536e <__aeabi_fmul+0x20a>
    536c:	3304      	adds	r3, #4
    536e:	015a      	lsls	r2, r3, #5
    5370:	d504      	bpl.n	537c <__aeabi_fmul+0x218>
    5372:	2401      	movs	r4, #1
    5374:	2201      	movs	r2, #1
    5376:	400c      	ands	r4, r1
    5378:	2000      	movs	r0, #0
    537a:	e73d      	b.n	51f8 <__aeabi_fmul+0x94>
    537c:	2401      	movs	r4, #1
    537e:	019b      	lsls	r3, r3, #6
    5380:	0a58      	lsrs	r0, r3, #9
    5382:	400c      	ands	r4, r1
    5384:	2200      	movs	r2, #0
    5386:	e737      	b.n	51f8 <__aeabi_fmul+0x94>
    5388:	2080      	movs	r0, #128	; 0x80
    538a:	2401      	movs	r4, #1
    538c:	03c0      	lsls	r0, r0, #15
    538e:	4328      	orrs	r0, r5
    5390:	0240      	lsls	r0, r0, #9
    5392:	0a40      	lsrs	r0, r0, #9
    5394:	400c      	ands	r4, r1
    5396:	22ff      	movs	r2, #255	; 0xff
    5398:	e72e      	b.n	51f8 <__aeabi_fmul+0x94>
    539a:	46c0      	nop			; (mov r8, r8)
    539c:	000071b8 	.word	0x000071b8
    53a0:	f7ffffff 	.word	0xf7ffffff

000053a4 <__aeabi_f2iz>:
    53a4:	0241      	lsls	r1, r0, #9
    53a6:	0043      	lsls	r3, r0, #1
    53a8:	0fc2      	lsrs	r2, r0, #31
    53aa:	0a49      	lsrs	r1, r1, #9
    53ac:	0e1b      	lsrs	r3, r3, #24
    53ae:	2000      	movs	r0, #0
    53b0:	2b7e      	cmp	r3, #126	; 0x7e
    53b2:	dd0d      	ble.n	53d0 <__aeabi_f2iz+0x2c>
    53b4:	2b9d      	cmp	r3, #157	; 0x9d
    53b6:	dc0c      	bgt.n	53d2 <__aeabi_f2iz+0x2e>
    53b8:	2080      	movs	r0, #128	; 0x80
    53ba:	0400      	lsls	r0, r0, #16
    53bc:	4301      	orrs	r1, r0
    53be:	2b95      	cmp	r3, #149	; 0x95
    53c0:	dc0a      	bgt.n	53d8 <__aeabi_f2iz+0x34>
    53c2:	2096      	movs	r0, #150	; 0x96
    53c4:	1ac3      	subs	r3, r0, r3
    53c6:	40d9      	lsrs	r1, r3
    53c8:	4248      	negs	r0, r1
    53ca:	2a00      	cmp	r2, #0
    53cc:	d100      	bne.n	53d0 <__aeabi_f2iz+0x2c>
    53ce:	0008      	movs	r0, r1
    53d0:	4770      	bx	lr
    53d2:	4b03      	ldr	r3, [pc, #12]	; (53e0 <__aeabi_f2iz+0x3c>)
    53d4:	18d0      	adds	r0, r2, r3
    53d6:	e7fb      	b.n	53d0 <__aeabi_f2iz+0x2c>
    53d8:	3b96      	subs	r3, #150	; 0x96
    53da:	4099      	lsls	r1, r3
    53dc:	e7f4      	b.n	53c8 <__aeabi_f2iz+0x24>
    53de:	46c0      	nop			; (mov r8, r8)
    53e0:	7fffffff 	.word	0x7fffffff

000053e4 <__aeabi_dadd>:
    53e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    53e6:	4645      	mov	r5, r8
    53e8:	46de      	mov	lr, fp
    53ea:	4657      	mov	r7, sl
    53ec:	464e      	mov	r6, r9
    53ee:	030c      	lsls	r4, r1, #12
    53f0:	b5e0      	push	{r5, r6, r7, lr}
    53f2:	004e      	lsls	r6, r1, #1
    53f4:	0fc9      	lsrs	r1, r1, #31
    53f6:	4688      	mov	r8, r1
    53f8:	000d      	movs	r5, r1
    53fa:	0a61      	lsrs	r1, r4, #9
    53fc:	0f44      	lsrs	r4, r0, #29
    53fe:	430c      	orrs	r4, r1
    5400:	00c7      	lsls	r7, r0, #3
    5402:	0319      	lsls	r1, r3, #12
    5404:	0058      	lsls	r0, r3, #1
    5406:	0fdb      	lsrs	r3, r3, #31
    5408:	469b      	mov	fp, r3
    540a:	0a4b      	lsrs	r3, r1, #9
    540c:	0f51      	lsrs	r1, r2, #29
    540e:	430b      	orrs	r3, r1
    5410:	0d76      	lsrs	r6, r6, #21
    5412:	0d40      	lsrs	r0, r0, #21
    5414:	0019      	movs	r1, r3
    5416:	00d2      	lsls	r2, r2, #3
    5418:	45d8      	cmp	r8, fp
    541a:	d100      	bne.n	541e <__aeabi_dadd+0x3a>
    541c:	e0ae      	b.n	557c <__aeabi_dadd+0x198>
    541e:	1a35      	subs	r5, r6, r0
    5420:	2d00      	cmp	r5, #0
    5422:	dc00      	bgt.n	5426 <__aeabi_dadd+0x42>
    5424:	e0f6      	b.n	5614 <__aeabi_dadd+0x230>
    5426:	2800      	cmp	r0, #0
    5428:	d10f      	bne.n	544a <__aeabi_dadd+0x66>
    542a:	4313      	orrs	r3, r2
    542c:	d100      	bne.n	5430 <__aeabi_dadd+0x4c>
    542e:	e0db      	b.n	55e8 <__aeabi_dadd+0x204>
    5430:	1e6b      	subs	r3, r5, #1
    5432:	2b00      	cmp	r3, #0
    5434:	d000      	beq.n	5438 <__aeabi_dadd+0x54>
    5436:	e137      	b.n	56a8 <__aeabi_dadd+0x2c4>
    5438:	1aba      	subs	r2, r7, r2
    543a:	4297      	cmp	r7, r2
    543c:	41bf      	sbcs	r7, r7
    543e:	1a64      	subs	r4, r4, r1
    5440:	427f      	negs	r7, r7
    5442:	1be4      	subs	r4, r4, r7
    5444:	2601      	movs	r6, #1
    5446:	0017      	movs	r7, r2
    5448:	e024      	b.n	5494 <__aeabi_dadd+0xb0>
    544a:	4bc6      	ldr	r3, [pc, #792]	; (5764 <__aeabi_dadd+0x380>)
    544c:	429e      	cmp	r6, r3
    544e:	d04d      	beq.n	54ec <__aeabi_dadd+0x108>
    5450:	2380      	movs	r3, #128	; 0x80
    5452:	041b      	lsls	r3, r3, #16
    5454:	4319      	orrs	r1, r3
    5456:	2d38      	cmp	r5, #56	; 0x38
    5458:	dd00      	ble.n	545c <__aeabi_dadd+0x78>
    545a:	e107      	b.n	566c <__aeabi_dadd+0x288>
    545c:	2d1f      	cmp	r5, #31
    545e:	dd00      	ble.n	5462 <__aeabi_dadd+0x7e>
    5460:	e138      	b.n	56d4 <__aeabi_dadd+0x2f0>
    5462:	2020      	movs	r0, #32
    5464:	1b43      	subs	r3, r0, r5
    5466:	469a      	mov	sl, r3
    5468:	000b      	movs	r3, r1
    546a:	4650      	mov	r0, sl
    546c:	4083      	lsls	r3, r0
    546e:	4699      	mov	r9, r3
    5470:	0013      	movs	r3, r2
    5472:	4648      	mov	r0, r9
    5474:	40eb      	lsrs	r3, r5
    5476:	4318      	orrs	r0, r3
    5478:	0003      	movs	r3, r0
    547a:	4650      	mov	r0, sl
    547c:	4082      	lsls	r2, r0
    547e:	1e50      	subs	r0, r2, #1
    5480:	4182      	sbcs	r2, r0
    5482:	40e9      	lsrs	r1, r5
    5484:	431a      	orrs	r2, r3
    5486:	1aba      	subs	r2, r7, r2
    5488:	1a61      	subs	r1, r4, r1
    548a:	4297      	cmp	r7, r2
    548c:	41a4      	sbcs	r4, r4
    548e:	0017      	movs	r7, r2
    5490:	4264      	negs	r4, r4
    5492:	1b0c      	subs	r4, r1, r4
    5494:	0223      	lsls	r3, r4, #8
    5496:	d562      	bpl.n	555e <__aeabi_dadd+0x17a>
    5498:	0264      	lsls	r4, r4, #9
    549a:	0a65      	lsrs	r5, r4, #9
    549c:	2d00      	cmp	r5, #0
    549e:	d100      	bne.n	54a2 <__aeabi_dadd+0xbe>
    54a0:	e0df      	b.n	5662 <__aeabi_dadd+0x27e>
    54a2:	0028      	movs	r0, r5
    54a4:	f001 fe22 	bl	70ec <__clzsi2>
    54a8:	0003      	movs	r3, r0
    54aa:	3b08      	subs	r3, #8
    54ac:	2b1f      	cmp	r3, #31
    54ae:	dd00      	ble.n	54b2 <__aeabi_dadd+0xce>
    54b0:	e0d2      	b.n	5658 <__aeabi_dadd+0x274>
    54b2:	2220      	movs	r2, #32
    54b4:	003c      	movs	r4, r7
    54b6:	1ad2      	subs	r2, r2, r3
    54b8:	409d      	lsls	r5, r3
    54ba:	40d4      	lsrs	r4, r2
    54bc:	409f      	lsls	r7, r3
    54be:	4325      	orrs	r5, r4
    54c0:	429e      	cmp	r6, r3
    54c2:	dd00      	ble.n	54c6 <__aeabi_dadd+0xe2>
    54c4:	e0c4      	b.n	5650 <__aeabi_dadd+0x26c>
    54c6:	1b9e      	subs	r6, r3, r6
    54c8:	1c73      	adds	r3, r6, #1
    54ca:	2b1f      	cmp	r3, #31
    54cc:	dd00      	ble.n	54d0 <__aeabi_dadd+0xec>
    54ce:	e0f1      	b.n	56b4 <__aeabi_dadd+0x2d0>
    54d0:	2220      	movs	r2, #32
    54d2:	0038      	movs	r0, r7
    54d4:	0029      	movs	r1, r5
    54d6:	1ad2      	subs	r2, r2, r3
    54d8:	40d8      	lsrs	r0, r3
    54da:	4091      	lsls	r1, r2
    54dc:	4097      	lsls	r7, r2
    54de:	002c      	movs	r4, r5
    54e0:	4301      	orrs	r1, r0
    54e2:	1e78      	subs	r0, r7, #1
    54e4:	4187      	sbcs	r7, r0
    54e6:	40dc      	lsrs	r4, r3
    54e8:	2600      	movs	r6, #0
    54ea:	430f      	orrs	r7, r1
    54ec:	077b      	lsls	r3, r7, #29
    54ee:	d009      	beq.n	5504 <__aeabi_dadd+0x120>
    54f0:	230f      	movs	r3, #15
    54f2:	403b      	ands	r3, r7
    54f4:	2b04      	cmp	r3, #4
    54f6:	d005      	beq.n	5504 <__aeabi_dadd+0x120>
    54f8:	1d3b      	adds	r3, r7, #4
    54fa:	42bb      	cmp	r3, r7
    54fc:	41bf      	sbcs	r7, r7
    54fe:	427f      	negs	r7, r7
    5500:	19e4      	adds	r4, r4, r7
    5502:	001f      	movs	r7, r3
    5504:	0223      	lsls	r3, r4, #8
    5506:	d52c      	bpl.n	5562 <__aeabi_dadd+0x17e>
    5508:	4b96      	ldr	r3, [pc, #600]	; (5764 <__aeabi_dadd+0x380>)
    550a:	3601      	adds	r6, #1
    550c:	429e      	cmp	r6, r3
    550e:	d100      	bne.n	5512 <__aeabi_dadd+0x12e>
    5510:	e09a      	b.n	5648 <__aeabi_dadd+0x264>
    5512:	4645      	mov	r5, r8
    5514:	4b94      	ldr	r3, [pc, #592]	; (5768 <__aeabi_dadd+0x384>)
    5516:	08ff      	lsrs	r7, r7, #3
    5518:	401c      	ands	r4, r3
    551a:	0760      	lsls	r0, r4, #29
    551c:	0576      	lsls	r6, r6, #21
    551e:	0264      	lsls	r4, r4, #9
    5520:	4307      	orrs	r7, r0
    5522:	0b24      	lsrs	r4, r4, #12
    5524:	0d76      	lsrs	r6, r6, #21
    5526:	2100      	movs	r1, #0
    5528:	0324      	lsls	r4, r4, #12
    552a:	0b23      	lsrs	r3, r4, #12
    552c:	0d0c      	lsrs	r4, r1, #20
    552e:	4a8f      	ldr	r2, [pc, #572]	; (576c <__aeabi_dadd+0x388>)
    5530:	0524      	lsls	r4, r4, #20
    5532:	431c      	orrs	r4, r3
    5534:	4014      	ands	r4, r2
    5536:	0533      	lsls	r3, r6, #20
    5538:	4323      	orrs	r3, r4
    553a:	005b      	lsls	r3, r3, #1
    553c:	07ed      	lsls	r5, r5, #31
    553e:	085b      	lsrs	r3, r3, #1
    5540:	432b      	orrs	r3, r5
    5542:	0038      	movs	r0, r7
    5544:	0019      	movs	r1, r3
    5546:	bc3c      	pop	{r2, r3, r4, r5}
    5548:	4690      	mov	r8, r2
    554a:	4699      	mov	r9, r3
    554c:	46a2      	mov	sl, r4
    554e:	46ab      	mov	fp, r5
    5550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5552:	4664      	mov	r4, ip
    5554:	4304      	orrs	r4, r0
    5556:	d100      	bne.n	555a <__aeabi_dadd+0x176>
    5558:	e211      	b.n	597e <__aeabi_dadd+0x59a>
    555a:	0004      	movs	r4, r0
    555c:	4667      	mov	r7, ip
    555e:	077b      	lsls	r3, r7, #29
    5560:	d1c6      	bne.n	54f0 <__aeabi_dadd+0x10c>
    5562:	4645      	mov	r5, r8
    5564:	0760      	lsls	r0, r4, #29
    5566:	08ff      	lsrs	r7, r7, #3
    5568:	4307      	orrs	r7, r0
    556a:	08e4      	lsrs	r4, r4, #3
    556c:	4b7d      	ldr	r3, [pc, #500]	; (5764 <__aeabi_dadd+0x380>)
    556e:	429e      	cmp	r6, r3
    5570:	d030      	beq.n	55d4 <__aeabi_dadd+0x1f0>
    5572:	0324      	lsls	r4, r4, #12
    5574:	0576      	lsls	r6, r6, #21
    5576:	0b24      	lsrs	r4, r4, #12
    5578:	0d76      	lsrs	r6, r6, #21
    557a:	e7d4      	b.n	5526 <__aeabi_dadd+0x142>
    557c:	1a33      	subs	r3, r6, r0
    557e:	469a      	mov	sl, r3
    5580:	2b00      	cmp	r3, #0
    5582:	dd78      	ble.n	5676 <__aeabi_dadd+0x292>
    5584:	2800      	cmp	r0, #0
    5586:	d031      	beq.n	55ec <__aeabi_dadd+0x208>
    5588:	4876      	ldr	r0, [pc, #472]	; (5764 <__aeabi_dadd+0x380>)
    558a:	4286      	cmp	r6, r0
    558c:	d0ae      	beq.n	54ec <__aeabi_dadd+0x108>
    558e:	2080      	movs	r0, #128	; 0x80
    5590:	0400      	lsls	r0, r0, #16
    5592:	4301      	orrs	r1, r0
    5594:	4653      	mov	r3, sl
    5596:	2b38      	cmp	r3, #56	; 0x38
    5598:	dc00      	bgt.n	559c <__aeabi_dadd+0x1b8>
    559a:	e0e9      	b.n	5770 <__aeabi_dadd+0x38c>
    559c:	430a      	orrs	r2, r1
    559e:	1e51      	subs	r1, r2, #1
    55a0:	418a      	sbcs	r2, r1
    55a2:	2100      	movs	r1, #0
    55a4:	19d2      	adds	r2, r2, r7
    55a6:	42ba      	cmp	r2, r7
    55a8:	41bf      	sbcs	r7, r7
    55aa:	1909      	adds	r1, r1, r4
    55ac:	427c      	negs	r4, r7
    55ae:	0017      	movs	r7, r2
    55b0:	190c      	adds	r4, r1, r4
    55b2:	0223      	lsls	r3, r4, #8
    55b4:	d5d3      	bpl.n	555e <__aeabi_dadd+0x17a>
    55b6:	4b6b      	ldr	r3, [pc, #428]	; (5764 <__aeabi_dadd+0x380>)
    55b8:	3601      	adds	r6, #1
    55ba:	429e      	cmp	r6, r3
    55bc:	d100      	bne.n	55c0 <__aeabi_dadd+0x1dc>
    55be:	e13a      	b.n	5836 <__aeabi_dadd+0x452>
    55c0:	2001      	movs	r0, #1
    55c2:	4b69      	ldr	r3, [pc, #420]	; (5768 <__aeabi_dadd+0x384>)
    55c4:	401c      	ands	r4, r3
    55c6:	087b      	lsrs	r3, r7, #1
    55c8:	4007      	ands	r7, r0
    55ca:	431f      	orrs	r7, r3
    55cc:	07e0      	lsls	r0, r4, #31
    55ce:	4307      	orrs	r7, r0
    55d0:	0864      	lsrs	r4, r4, #1
    55d2:	e78b      	b.n	54ec <__aeabi_dadd+0x108>
    55d4:	0023      	movs	r3, r4
    55d6:	433b      	orrs	r3, r7
    55d8:	d100      	bne.n	55dc <__aeabi_dadd+0x1f8>
    55da:	e1cb      	b.n	5974 <__aeabi_dadd+0x590>
    55dc:	2280      	movs	r2, #128	; 0x80
    55de:	0312      	lsls	r2, r2, #12
    55e0:	4314      	orrs	r4, r2
    55e2:	0324      	lsls	r4, r4, #12
    55e4:	0b24      	lsrs	r4, r4, #12
    55e6:	e79e      	b.n	5526 <__aeabi_dadd+0x142>
    55e8:	002e      	movs	r6, r5
    55ea:	e77f      	b.n	54ec <__aeabi_dadd+0x108>
    55ec:	0008      	movs	r0, r1
    55ee:	4310      	orrs	r0, r2
    55f0:	d100      	bne.n	55f4 <__aeabi_dadd+0x210>
    55f2:	e0b4      	b.n	575e <__aeabi_dadd+0x37a>
    55f4:	1e58      	subs	r0, r3, #1
    55f6:	2800      	cmp	r0, #0
    55f8:	d000      	beq.n	55fc <__aeabi_dadd+0x218>
    55fa:	e0de      	b.n	57ba <__aeabi_dadd+0x3d6>
    55fc:	18ba      	adds	r2, r7, r2
    55fe:	42ba      	cmp	r2, r7
    5600:	419b      	sbcs	r3, r3
    5602:	1864      	adds	r4, r4, r1
    5604:	425b      	negs	r3, r3
    5606:	18e4      	adds	r4, r4, r3
    5608:	0017      	movs	r7, r2
    560a:	2601      	movs	r6, #1
    560c:	0223      	lsls	r3, r4, #8
    560e:	d5a6      	bpl.n	555e <__aeabi_dadd+0x17a>
    5610:	2602      	movs	r6, #2
    5612:	e7d5      	b.n	55c0 <__aeabi_dadd+0x1dc>
    5614:	2d00      	cmp	r5, #0
    5616:	d16e      	bne.n	56f6 <__aeabi_dadd+0x312>
    5618:	1c70      	adds	r0, r6, #1
    561a:	0540      	lsls	r0, r0, #21
    561c:	0d40      	lsrs	r0, r0, #21
    561e:	2801      	cmp	r0, #1
    5620:	dc00      	bgt.n	5624 <__aeabi_dadd+0x240>
    5622:	e0f9      	b.n	5818 <__aeabi_dadd+0x434>
    5624:	1ab8      	subs	r0, r7, r2
    5626:	4684      	mov	ip, r0
    5628:	4287      	cmp	r7, r0
    562a:	4180      	sbcs	r0, r0
    562c:	1ae5      	subs	r5, r4, r3
    562e:	4240      	negs	r0, r0
    5630:	1a2d      	subs	r5, r5, r0
    5632:	0228      	lsls	r0, r5, #8
    5634:	d400      	bmi.n	5638 <__aeabi_dadd+0x254>
    5636:	e089      	b.n	574c <__aeabi_dadd+0x368>
    5638:	1bd7      	subs	r7, r2, r7
    563a:	42ba      	cmp	r2, r7
    563c:	4192      	sbcs	r2, r2
    563e:	1b1c      	subs	r4, r3, r4
    5640:	4252      	negs	r2, r2
    5642:	1aa5      	subs	r5, r4, r2
    5644:	46d8      	mov	r8, fp
    5646:	e729      	b.n	549c <__aeabi_dadd+0xb8>
    5648:	4645      	mov	r5, r8
    564a:	2400      	movs	r4, #0
    564c:	2700      	movs	r7, #0
    564e:	e76a      	b.n	5526 <__aeabi_dadd+0x142>
    5650:	4c45      	ldr	r4, [pc, #276]	; (5768 <__aeabi_dadd+0x384>)
    5652:	1af6      	subs	r6, r6, r3
    5654:	402c      	ands	r4, r5
    5656:	e749      	b.n	54ec <__aeabi_dadd+0x108>
    5658:	003d      	movs	r5, r7
    565a:	3828      	subs	r0, #40	; 0x28
    565c:	4085      	lsls	r5, r0
    565e:	2700      	movs	r7, #0
    5660:	e72e      	b.n	54c0 <__aeabi_dadd+0xdc>
    5662:	0038      	movs	r0, r7
    5664:	f001 fd42 	bl	70ec <__clzsi2>
    5668:	3020      	adds	r0, #32
    566a:	e71d      	b.n	54a8 <__aeabi_dadd+0xc4>
    566c:	430a      	orrs	r2, r1
    566e:	1e51      	subs	r1, r2, #1
    5670:	418a      	sbcs	r2, r1
    5672:	2100      	movs	r1, #0
    5674:	e707      	b.n	5486 <__aeabi_dadd+0xa2>
    5676:	2b00      	cmp	r3, #0
    5678:	d000      	beq.n	567c <__aeabi_dadd+0x298>
    567a:	e0f3      	b.n	5864 <__aeabi_dadd+0x480>
    567c:	1c70      	adds	r0, r6, #1
    567e:	0543      	lsls	r3, r0, #21
    5680:	0d5b      	lsrs	r3, r3, #21
    5682:	2b01      	cmp	r3, #1
    5684:	dc00      	bgt.n	5688 <__aeabi_dadd+0x2a4>
    5686:	e0ad      	b.n	57e4 <__aeabi_dadd+0x400>
    5688:	4b36      	ldr	r3, [pc, #216]	; (5764 <__aeabi_dadd+0x380>)
    568a:	4298      	cmp	r0, r3
    568c:	d100      	bne.n	5690 <__aeabi_dadd+0x2ac>
    568e:	e0d1      	b.n	5834 <__aeabi_dadd+0x450>
    5690:	18ba      	adds	r2, r7, r2
    5692:	42ba      	cmp	r2, r7
    5694:	41bf      	sbcs	r7, r7
    5696:	1864      	adds	r4, r4, r1
    5698:	427f      	negs	r7, r7
    569a:	19e4      	adds	r4, r4, r7
    569c:	07e7      	lsls	r7, r4, #31
    569e:	0852      	lsrs	r2, r2, #1
    56a0:	4317      	orrs	r7, r2
    56a2:	0864      	lsrs	r4, r4, #1
    56a4:	0006      	movs	r6, r0
    56a6:	e721      	b.n	54ec <__aeabi_dadd+0x108>
    56a8:	482e      	ldr	r0, [pc, #184]	; (5764 <__aeabi_dadd+0x380>)
    56aa:	4285      	cmp	r5, r0
    56ac:	d100      	bne.n	56b0 <__aeabi_dadd+0x2cc>
    56ae:	e093      	b.n	57d8 <__aeabi_dadd+0x3f4>
    56b0:	001d      	movs	r5, r3
    56b2:	e6d0      	b.n	5456 <__aeabi_dadd+0x72>
    56b4:	0029      	movs	r1, r5
    56b6:	3e1f      	subs	r6, #31
    56b8:	40f1      	lsrs	r1, r6
    56ba:	2b20      	cmp	r3, #32
    56bc:	d100      	bne.n	56c0 <__aeabi_dadd+0x2dc>
    56be:	e08d      	b.n	57dc <__aeabi_dadd+0x3f8>
    56c0:	2240      	movs	r2, #64	; 0x40
    56c2:	1ad3      	subs	r3, r2, r3
    56c4:	409d      	lsls	r5, r3
    56c6:	432f      	orrs	r7, r5
    56c8:	1e7d      	subs	r5, r7, #1
    56ca:	41af      	sbcs	r7, r5
    56cc:	2400      	movs	r4, #0
    56ce:	430f      	orrs	r7, r1
    56d0:	2600      	movs	r6, #0
    56d2:	e744      	b.n	555e <__aeabi_dadd+0x17a>
    56d4:	002b      	movs	r3, r5
    56d6:	0008      	movs	r0, r1
    56d8:	3b20      	subs	r3, #32
    56da:	40d8      	lsrs	r0, r3
    56dc:	0003      	movs	r3, r0
    56de:	2d20      	cmp	r5, #32
    56e0:	d100      	bne.n	56e4 <__aeabi_dadd+0x300>
    56e2:	e07d      	b.n	57e0 <__aeabi_dadd+0x3fc>
    56e4:	2040      	movs	r0, #64	; 0x40
    56e6:	1b45      	subs	r5, r0, r5
    56e8:	40a9      	lsls	r1, r5
    56ea:	430a      	orrs	r2, r1
    56ec:	1e51      	subs	r1, r2, #1
    56ee:	418a      	sbcs	r2, r1
    56f0:	2100      	movs	r1, #0
    56f2:	431a      	orrs	r2, r3
    56f4:	e6c7      	b.n	5486 <__aeabi_dadd+0xa2>
    56f6:	2e00      	cmp	r6, #0
    56f8:	d050      	beq.n	579c <__aeabi_dadd+0x3b8>
    56fa:	4e1a      	ldr	r6, [pc, #104]	; (5764 <__aeabi_dadd+0x380>)
    56fc:	42b0      	cmp	r0, r6
    56fe:	d057      	beq.n	57b0 <__aeabi_dadd+0x3cc>
    5700:	2680      	movs	r6, #128	; 0x80
    5702:	426b      	negs	r3, r5
    5704:	4699      	mov	r9, r3
    5706:	0436      	lsls	r6, r6, #16
    5708:	4334      	orrs	r4, r6
    570a:	464b      	mov	r3, r9
    570c:	2b38      	cmp	r3, #56	; 0x38
    570e:	dd00      	ble.n	5712 <__aeabi_dadd+0x32e>
    5710:	e0d6      	b.n	58c0 <__aeabi_dadd+0x4dc>
    5712:	2b1f      	cmp	r3, #31
    5714:	dd00      	ble.n	5718 <__aeabi_dadd+0x334>
    5716:	e135      	b.n	5984 <__aeabi_dadd+0x5a0>
    5718:	2620      	movs	r6, #32
    571a:	1af5      	subs	r5, r6, r3
    571c:	0026      	movs	r6, r4
    571e:	40ae      	lsls	r6, r5
    5720:	46b2      	mov	sl, r6
    5722:	003e      	movs	r6, r7
    5724:	40de      	lsrs	r6, r3
    5726:	46ac      	mov	ip, r5
    5728:	0035      	movs	r5, r6
    572a:	4656      	mov	r6, sl
    572c:	432e      	orrs	r6, r5
    572e:	4665      	mov	r5, ip
    5730:	40af      	lsls	r7, r5
    5732:	1e7d      	subs	r5, r7, #1
    5734:	41af      	sbcs	r7, r5
    5736:	40dc      	lsrs	r4, r3
    5738:	4337      	orrs	r7, r6
    573a:	1bd7      	subs	r7, r2, r7
    573c:	42ba      	cmp	r2, r7
    573e:	4192      	sbcs	r2, r2
    5740:	1b0c      	subs	r4, r1, r4
    5742:	4252      	negs	r2, r2
    5744:	1aa4      	subs	r4, r4, r2
    5746:	0006      	movs	r6, r0
    5748:	46d8      	mov	r8, fp
    574a:	e6a3      	b.n	5494 <__aeabi_dadd+0xb0>
    574c:	4664      	mov	r4, ip
    574e:	4667      	mov	r7, ip
    5750:	432c      	orrs	r4, r5
    5752:	d000      	beq.n	5756 <__aeabi_dadd+0x372>
    5754:	e6a2      	b.n	549c <__aeabi_dadd+0xb8>
    5756:	2500      	movs	r5, #0
    5758:	2600      	movs	r6, #0
    575a:	2700      	movs	r7, #0
    575c:	e706      	b.n	556c <__aeabi_dadd+0x188>
    575e:	001e      	movs	r6, r3
    5760:	e6c4      	b.n	54ec <__aeabi_dadd+0x108>
    5762:	46c0      	nop			; (mov r8, r8)
    5764:	000007ff 	.word	0x000007ff
    5768:	ff7fffff 	.word	0xff7fffff
    576c:	800fffff 	.word	0x800fffff
    5770:	2b1f      	cmp	r3, #31
    5772:	dc63      	bgt.n	583c <__aeabi_dadd+0x458>
    5774:	2020      	movs	r0, #32
    5776:	1ac3      	subs	r3, r0, r3
    5778:	0008      	movs	r0, r1
    577a:	4098      	lsls	r0, r3
    577c:	469c      	mov	ip, r3
    577e:	4683      	mov	fp, r0
    5780:	4653      	mov	r3, sl
    5782:	0010      	movs	r0, r2
    5784:	40d8      	lsrs	r0, r3
    5786:	0003      	movs	r3, r0
    5788:	4658      	mov	r0, fp
    578a:	4318      	orrs	r0, r3
    578c:	4663      	mov	r3, ip
    578e:	409a      	lsls	r2, r3
    5790:	1e53      	subs	r3, r2, #1
    5792:	419a      	sbcs	r2, r3
    5794:	4653      	mov	r3, sl
    5796:	4302      	orrs	r2, r0
    5798:	40d9      	lsrs	r1, r3
    579a:	e703      	b.n	55a4 <__aeabi_dadd+0x1c0>
    579c:	0026      	movs	r6, r4
    579e:	433e      	orrs	r6, r7
    57a0:	d006      	beq.n	57b0 <__aeabi_dadd+0x3cc>
    57a2:	43eb      	mvns	r3, r5
    57a4:	4699      	mov	r9, r3
    57a6:	2b00      	cmp	r3, #0
    57a8:	d0c7      	beq.n	573a <__aeabi_dadd+0x356>
    57aa:	4e94      	ldr	r6, [pc, #592]	; (59fc <__aeabi_dadd+0x618>)
    57ac:	42b0      	cmp	r0, r6
    57ae:	d1ac      	bne.n	570a <__aeabi_dadd+0x326>
    57b0:	000c      	movs	r4, r1
    57b2:	0017      	movs	r7, r2
    57b4:	0006      	movs	r6, r0
    57b6:	46d8      	mov	r8, fp
    57b8:	e698      	b.n	54ec <__aeabi_dadd+0x108>
    57ba:	4b90      	ldr	r3, [pc, #576]	; (59fc <__aeabi_dadd+0x618>)
    57bc:	459a      	cmp	sl, r3
    57be:	d00b      	beq.n	57d8 <__aeabi_dadd+0x3f4>
    57c0:	4682      	mov	sl, r0
    57c2:	e6e7      	b.n	5594 <__aeabi_dadd+0x1b0>
    57c4:	2800      	cmp	r0, #0
    57c6:	d000      	beq.n	57ca <__aeabi_dadd+0x3e6>
    57c8:	e09e      	b.n	5908 <__aeabi_dadd+0x524>
    57ca:	0018      	movs	r0, r3
    57cc:	4310      	orrs	r0, r2
    57ce:	d100      	bne.n	57d2 <__aeabi_dadd+0x3ee>
    57d0:	e0e9      	b.n	59a6 <__aeabi_dadd+0x5c2>
    57d2:	001c      	movs	r4, r3
    57d4:	0017      	movs	r7, r2
    57d6:	46d8      	mov	r8, fp
    57d8:	4e88      	ldr	r6, [pc, #544]	; (59fc <__aeabi_dadd+0x618>)
    57da:	e687      	b.n	54ec <__aeabi_dadd+0x108>
    57dc:	2500      	movs	r5, #0
    57de:	e772      	b.n	56c6 <__aeabi_dadd+0x2e2>
    57e0:	2100      	movs	r1, #0
    57e2:	e782      	b.n	56ea <__aeabi_dadd+0x306>
    57e4:	0023      	movs	r3, r4
    57e6:	433b      	orrs	r3, r7
    57e8:	2e00      	cmp	r6, #0
    57ea:	d000      	beq.n	57ee <__aeabi_dadd+0x40a>
    57ec:	e0ab      	b.n	5946 <__aeabi_dadd+0x562>
    57ee:	2b00      	cmp	r3, #0
    57f0:	d100      	bne.n	57f4 <__aeabi_dadd+0x410>
    57f2:	e0e7      	b.n	59c4 <__aeabi_dadd+0x5e0>
    57f4:	000b      	movs	r3, r1
    57f6:	4313      	orrs	r3, r2
    57f8:	d100      	bne.n	57fc <__aeabi_dadd+0x418>
    57fa:	e677      	b.n	54ec <__aeabi_dadd+0x108>
    57fc:	18ba      	adds	r2, r7, r2
    57fe:	42ba      	cmp	r2, r7
    5800:	41bf      	sbcs	r7, r7
    5802:	1864      	adds	r4, r4, r1
    5804:	427f      	negs	r7, r7
    5806:	19e4      	adds	r4, r4, r7
    5808:	0223      	lsls	r3, r4, #8
    580a:	d400      	bmi.n	580e <__aeabi_dadd+0x42a>
    580c:	e0f2      	b.n	59f4 <__aeabi_dadd+0x610>
    580e:	4b7c      	ldr	r3, [pc, #496]	; (5a00 <__aeabi_dadd+0x61c>)
    5810:	0017      	movs	r7, r2
    5812:	401c      	ands	r4, r3
    5814:	0006      	movs	r6, r0
    5816:	e669      	b.n	54ec <__aeabi_dadd+0x108>
    5818:	0020      	movs	r0, r4
    581a:	4338      	orrs	r0, r7
    581c:	2e00      	cmp	r6, #0
    581e:	d1d1      	bne.n	57c4 <__aeabi_dadd+0x3e0>
    5820:	2800      	cmp	r0, #0
    5822:	d15b      	bne.n	58dc <__aeabi_dadd+0x4f8>
    5824:	001c      	movs	r4, r3
    5826:	4314      	orrs	r4, r2
    5828:	d100      	bne.n	582c <__aeabi_dadd+0x448>
    582a:	e0a8      	b.n	597e <__aeabi_dadd+0x59a>
    582c:	001c      	movs	r4, r3
    582e:	0017      	movs	r7, r2
    5830:	46d8      	mov	r8, fp
    5832:	e65b      	b.n	54ec <__aeabi_dadd+0x108>
    5834:	0006      	movs	r6, r0
    5836:	2400      	movs	r4, #0
    5838:	2700      	movs	r7, #0
    583a:	e697      	b.n	556c <__aeabi_dadd+0x188>
    583c:	4650      	mov	r0, sl
    583e:	000b      	movs	r3, r1
    5840:	3820      	subs	r0, #32
    5842:	40c3      	lsrs	r3, r0
    5844:	4699      	mov	r9, r3
    5846:	4653      	mov	r3, sl
    5848:	2b20      	cmp	r3, #32
    584a:	d100      	bne.n	584e <__aeabi_dadd+0x46a>
    584c:	e095      	b.n	597a <__aeabi_dadd+0x596>
    584e:	2340      	movs	r3, #64	; 0x40
    5850:	4650      	mov	r0, sl
    5852:	1a1b      	subs	r3, r3, r0
    5854:	4099      	lsls	r1, r3
    5856:	430a      	orrs	r2, r1
    5858:	1e51      	subs	r1, r2, #1
    585a:	418a      	sbcs	r2, r1
    585c:	464b      	mov	r3, r9
    585e:	2100      	movs	r1, #0
    5860:	431a      	orrs	r2, r3
    5862:	e69f      	b.n	55a4 <__aeabi_dadd+0x1c0>
    5864:	2e00      	cmp	r6, #0
    5866:	d130      	bne.n	58ca <__aeabi_dadd+0x4e6>
    5868:	0026      	movs	r6, r4
    586a:	433e      	orrs	r6, r7
    586c:	d067      	beq.n	593e <__aeabi_dadd+0x55a>
    586e:	43db      	mvns	r3, r3
    5870:	469a      	mov	sl, r3
    5872:	2b00      	cmp	r3, #0
    5874:	d01c      	beq.n	58b0 <__aeabi_dadd+0x4cc>
    5876:	4e61      	ldr	r6, [pc, #388]	; (59fc <__aeabi_dadd+0x618>)
    5878:	42b0      	cmp	r0, r6
    587a:	d060      	beq.n	593e <__aeabi_dadd+0x55a>
    587c:	4653      	mov	r3, sl
    587e:	2b38      	cmp	r3, #56	; 0x38
    5880:	dd00      	ble.n	5884 <__aeabi_dadd+0x4a0>
    5882:	e096      	b.n	59b2 <__aeabi_dadd+0x5ce>
    5884:	2b1f      	cmp	r3, #31
    5886:	dd00      	ble.n	588a <__aeabi_dadd+0x4a6>
    5888:	e09f      	b.n	59ca <__aeabi_dadd+0x5e6>
    588a:	2620      	movs	r6, #32
    588c:	1af3      	subs	r3, r6, r3
    588e:	0026      	movs	r6, r4
    5890:	409e      	lsls	r6, r3
    5892:	469c      	mov	ip, r3
    5894:	46b3      	mov	fp, r6
    5896:	4653      	mov	r3, sl
    5898:	003e      	movs	r6, r7
    589a:	40de      	lsrs	r6, r3
    589c:	0033      	movs	r3, r6
    589e:	465e      	mov	r6, fp
    58a0:	431e      	orrs	r6, r3
    58a2:	4663      	mov	r3, ip
    58a4:	409f      	lsls	r7, r3
    58a6:	1e7b      	subs	r3, r7, #1
    58a8:	419f      	sbcs	r7, r3
    58aa:	4653      	mov	r3, sl
    58ac:	40dc      	lsrs	r4, r3
    58ae:	4337      	orrs	r7, r6
    58b0:	18bf      	adds	r7, r7, r2
    58b2:	4297      	cmp	r7, r2
    58b4:	4192      	sbcs	r2, r2
    58b6:	1864      	adds	r4, r4, r1
    58b8:	4252      	negs	r2, r2
    58ba:	18a4      	adds	r4, r4, r2
    58bc:	0006      	movs	r6, r0
    58be:	e678      	b.n	55b2 <__aeabi_dadd+0x1ce>
    58c0:	4327      	orrs	r7, r4
    58c2:	1e7c      	subs	r4, r7, #1
    58c4:	41a7      	sbcs	r7, r4
    58c6:	2400      	movs	r4, #0
    58c8:	e737      	b.n	573a <__aeabi_dadd+0x356>
    58ca:	4e4c      	ldr	r6, [pc, #304]	; (59fc <__aeabi_dadd+0x618>)
    58cc:	42b0      	cmp	r0, r6
    58ce:	d036      	beq.n	593e <__aeabi_dadd+0x55a>
    58d0:	2680      	movs	r6, #128	; 0x80
    58d2:	425b      	negs	r3, r3
    58d4:	0436      	lsls	r6, r6, #16
    58d6:	469a      	mov	sl, r3
    58d8:	4334      	orrs	r4, r6
    58da:	e7cf      	b.n	587c <__aeabi_dadd+0x498>
    58dc:	0018      	movs	r0, r3
    58de:	4310      	orrs	r0, r2
    58e0:	d100      	bne.n	58e4 <__aeabi_dadd+0x500>
    58e2:	e603      	b.n	54ec <__aeabi_dadd+0x108>
    58e4:	1ab8      	subs	r0, r7, r2
    58e6:	4684      	mov	ip, r0
    58e8:	4567      	cmp	r7, ip
    58ea:	41ad      	sbcs	r5, r5
    58ec:	1ae0      	subs	r0, r4, r3
    58ee:	426d      	negs	r5, r5
    58f0:	1b40      	subs	r0, r0, r5
    58f2:	0205      	lsls	r5, r0, #8
    58f4:	d400      	bmi.n	58f8 <__aeabi_dadd+0x514>
    58f6:	e62c      	b.n	5552 <__aeabi_dadd+0x16e>
    58f8:	1bd7      	subs	r7, r2, r7
    58fa:	42ba      	cmp	r2, r7
    58fc:	4192      	sbcs	r2, r2
    58fe:	1b1c      	subs	r4, r3, r4
    5900:	4252      	negs	r2, r2
    5902:	1aa4      	subs	r4, r4, r2
    5904:	46d8      	mov	r8, fp
    5906:	e5f1      	b.n	54ec <__aeabi_dadd+0x108>
    5908:	0018      	movs	r0, r3
    590a:	4310      	orrs	r0, r2
    590c:	d100      	bne.n	5910 <__aeabi_dadd+0x52c>
    590e:	e763      	b.n	57d8 <__aeabi_dadd+0x3f4>
    5910:	08f8      	lsrs	r0, r7, #3
    5912:	0767      	lsls	r7, r4, #29
    5914:	4307      	orrs	r7, r0
    5916:	2080      	movs	r0, #128	; 0x80
    5918:	08e4      	lsrs	r4, r4, #3
    591a:	0300      	lsls	r0, r0, #12
    591c:	4204      	tst	r4, r0
    591e:	d008      	beq.n	5932 <__aeabi_dadd+0x54e>
    5920:	08dd      	lsrs	r5, r3, #3
    5922:	4205      	tst	r5, r0
    5924:	d105      	bne.n	5932 <__aeabi_dadd+0x54e>
    5926:	08d2      	lsrs	r2, r2, #3
    5928:	0759      	lsls	r1, r3, #29
    592a:	4311      	orrs	r1, r2
    592c:	000f      	movs	r7, r1
    592e:	002c      	movs	r4, r5
    5930:	46d8      	mov	r8, fp
    5932:	0f7b      	lsrs	r3, r7, #29
    5934:	00e4      	lsls	r4, r4, #3
    5936:	431c      	orrs	r4, r3
    5938:	00ff      	lsls	r7, r7, #3
    593a:	4e30      	ldr	r6, [pc, #192]	; (59fc <__aeabi_dadd+0x618>)
    593c:	e5d6      	b.n	54ec <__aeabi_dadd+0x108>
    593e:	000c      	movs	r4, r1
    5940:	0017      	movs	r7, r2
    5942:	0006      	movs	r6, r0
    5944:	e5d2      	b.n	54ec <__aeabi_dadd+0x108>
    5946:	2b00      	cmp	r3, #0
    5948:	d038      	beq.n	59bc <__aeabi_dadd+0x5d8>
    594a:	000b      	movs	r3, r1
    594c:	4313      	orrs	r3, r2
    594e:	d100      	bne.n	5952 <__aeabi_dadd+0x56e>
    5950:	e742      	b.n	57d8 <__aeabi_dadd+0x3f4>
    5952:	08f8      	lsrs	r0, r7, #3
    5954:	0767      	lsls	r7, r4, #29
    5956:	4307      	orrs	r7, r0
    5958:	2080      	movs	r0, #128	; 0x80
    595a:	08e4      	lsrs	r4, r4, #3
    595c:	0300      	lsls	r0, r0, #12
    595e:	4204      	tst	r4, r0
    5960:	d0e7      	beq.n	5932 <__aeabi_dadd+0x54e>
    5962:	08cb      	lsrs	r3, r1, #3
    5964:	4203      	tst	r3, r0
    5966:	d1e4      	bne.n	5932 <__aeabi_dadd+0x54e>
    5968:	08d2      	lsrs	r2, r2, #3
    596a:	0749      	lsls	r1, r1, #29
    596c:	4311      	orrs	r1, r2
    596e:	000f      	movs	r7, r1
    5970:	001c      	movs	r4, r3
    5972:	e7de      	b.n	5932 <__aeabi_dadd+0x54e>
    5974:	2700      	movs	r7, #0
    5976:	2400      	movs	r4, #0
    5978:	e5d5      	b.n	5526 <__aeabi_dadd+0x142>
    597a:	2100      	movs	r1, #0
    597c:	e76b      	b.n	5856 <__aeabi_dadd+0x472>
    597e:	2500      	movs	r5, #0
    5980:	2700      	movs	r7, #0
    5982:	e5f3      	b.n	556c <__aeabi_dadd+0x188>
    5984:	464e      	mov	r6, r9
    5986:	0025      	movs	r5, r4
    5988:	3e20      	subs	r6, #32
    598a:	40f5      	lsrs	r5, r6
    598c:	464b      	mov	r3, r9
    598e:	002e      	movs	r6, r5
    5990:	2b20      	cmp	r3, #32
    5992:	d02d      	beq.n	59f0 <__aeabi_dadd+0x60c>
    5994:	2540      	movs	r5, #64	; 0x40
    5996:	1aed      	subs	r5, r5, r3
    5998:	40ac      	lsls	r4, r5
    599a:	4327      	orrs	r7, r4
    599c:	1e7c      	subs	r4, r7, #1
    599e:	41a7      	sbcs	r7, r4
    59a0:	2400      	movs	r4, #0
    59a2:	4337      	orrs	r7, r6
    59a4:	e6c9      	b.n	573a <__aeabi_dadd+0x356>
    59a6:	2480      	movs	r4, #128	; 0x80
    59a8:	2500      	movs	r5, #0
    59aa:	0324      	lsls	r4, r4, #12
    59ac:	4e13      	ldr	r6, [pc, #76]	; (59fc <__aeabi_dadd+0x618>)
    59ae:	2700      	movs	r7, #0
    59b0:	e5dc      	b.n	556c <__aeabi_dadd+0x188>
    59b2:	4327      	orrs	r7, r4
    59b4:	1e7c      	subs	r4, r7, #1
    59b6:	41a7      	sbcs	r7, r4
    59b8:	2400      	movs	r4, #0
    59ba:	e779      	b.n	58b0 <__aeabi_dadd+0x4cc>
    59bc:	000c      	movs	r4, r1
    59be:	0017      	movs	r7, r2
    59c0:	4e0e      	ldr	r6, [pc, #56]	; (59fc <__aeabi_dadd+0x618>)
    59c2:	e593      	b.n	54ec <__aeabi_dadd+0x108>
    59c4:	000c      	movs	r4, r1
    59c6:	0017      	movs	r7, r2
    59c8:	e590      	b.n	54ec <__aeabi_dadd+0x108>
    59ca:	4656      	mov	r6, sl
    59cc:	0023      	movs	r3, r4
    59ce:	3e20      	subs	r6, #32
    59d0:	40f3      	lsrs	r3, r6
    59d2:	4699      	mov	r9, r3
    59d4:	4653      	mov	r3, sl
    59d6:	2b20      	cmp	r3, #32
    59d8:	d00e      	beq.n	59f8 <__aeabi_dadd+0x614>
    59da:	2340      	movs	r3, #64	; 0x40
    59dc:	4656      	mov	r6, sl
    59de:	1b9b      	subs	r3, r3, r6
    59e0:	409c      	lsls	r4, r3
    59e2:	4327      	orrs	r7, r4
    59e4:	1e7c      	subs	r4, r7, #1
    59e6:	41a7      	sbcs	r7, r4
    59e8:	464b      	mov	r3, r9
    59ea:	2400      	movs	r4, #0
    59ec:	431f      	orrs	r7, r3
    59ee:	e75f      	b.n	58b0 <__aeabi_dadd+0x4cc>
    59f0:	2400      	movs	r4, #0
    59f2:	e7d2      	b.n	599a <__aeabi_dadd+0x5b6>
    59f4:	0017      	movs	r7, r2
    59f6:	e5b2      	b.n	555e <__aeabi_dadd+0x17a>
    59f8:	2400      	movs	r4, #0
    59fa:	e7f2      	b.n	59e2 <__aeabi_dadd+0x5fe>
    59fc:	000007ff 	.word	0x000007ff
    5a00:	ff7fffff 	.word	0xff7fffff

00005a04 <__aeabi_ddiv>:
    5a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a06:	4657      	mov	r7, sl
    5a08:	4645      	mov	r5, r8
    5a0a:	46de      	mov	lr, fp
    5a0c:	464e      	mov	r6, r9
    5a0e:	b5e0      	push	{r5, r6, r7, lr}
    5a10:	004c      	lsls	r4, r1, #1
    5a12:	030e      	lsls	r6, r1, #12
    5a14:	b087      	sub	sp, #28
    5a16:	4683      	mov	fp, r0
    5a18:	4692      	mov	sl, r2
    5a1a:	001d      	movs	r5, r3
    5a1c:	4680      	mov	r8, r0
    5a1e:	0b36      	lsrs	r6, r6, #12
    5a20:	0d64      	lsrs	r4, r4, #21
    5a22:	0fcf      	lsrs	r7, r1, #31
    5a24:	2c00      	cmp	r4, #0
    5a26:	d04f      	beq.n	5ac8 <__aeabi_ddiv+0xc4>
    5a28:	4b6f      	ldr	r3, [pc, #444]	; (5be8 <__aeabi_ddiv+0x1e4>)
    5a2a:	429c      	cmp	r4, r3
    5a2c:	d035      	beq.n	5a9a <__aeabi_ddiv+0x96>
    5a2e:	2380      	movs	r3, #128	; 0x80
    5a30:	0f42      	lsrs	r2, r0, #29
    5a32:	041b      	lsls	r3, r3, #16
    5a34:	00f6      	lsls	r6, r6, #3
    5a36:	4313      	orrs	r3, r2
    5a38:	4333      	orrs	r3, r6
    5a3a:	4699      	mov	r9, r3
    5a3c:	00c3      	lsls	r3, r0, #3
    5a3e:	4698      	mov	r8, r3
    5a40:	4b6a      	ldr	r3, [pc, #424]	; (5bec <__aeabi_ddiv+0x1e8>)
    5a42:	2600      	movs	r6, #0
    5a44:	469c      	mov	ip, r3
    5a46:	2300      	movs	r3, #0
    5a48:	4464      	add	r4, ip
    5a4a:	9303      	str	r3, [sp, #12]
    5a4c:	032b      	lsls	r3, r5, #12
    5a4e:	0b1b      	lsrs	r3, r3, #12
    5a50:	469b      	mov	fp, r3
    5a52:	006b      	lsls	r3, r5, #1
    5a54:	0fed      	lsrs	r5, r5, #31
    5a56:	4650      	mov	r0, sl
    5a58:	0d5b      	lsrs	r3, r3, #21
    5a5a:	9501      	str	r5, [sp, #4]
    5a5c:	d05e      	beq.n	5b1c <__aeabi_ddiv+0x118>
    5a5e:	4a62      	ldr	r2, [pc, #392]	; (5be8 <__aeabi_ddiv+0x1e4>)
    5a60:	4293      	cmp	r3, r2
    5a62:	d053      	beq.n	5b0c <__aeabi_ddiv+0x108>
    5a64:	465a      	mov	r2, fp
    5a66:	00d1      	lsls	r1, r2, #3
    5a68:	2280      	movs	r2, #128	; 0x80
    5a6a:	0f40      	lsrs	r0, r0, #29
    5a6c:	0412      	lsls	r2, r2, #16
    5a6e:	4302      	orrs	r2, r0
    5a70:	430a      	orrs	r2, r1
    5a72:	4693      	mov	fp, r2
    5a74:	4652      	mov	r2, sl
    5a76:	00d1      	lsls	r1, r2, #3
    5a78:	4a5c      	ldr	r2, [pc, #368]	; (5bec <__aeabi_ddiv+0x1e8>)
    5a7a:	4694      	mov	ip, r2
    5a7c:	2200      	movs	r2, #0
    5a7e:	4463      	add	r3, ip
    5a80:	0038      	movs	r0, r7
    5a82:	4068      	eors	r0, r5
    5a84:	4684      	mov	ip, r0
    5a86:	9002      	str	r0, [sp, #8]
    5a88:	1ae4      	subs	r4, r4, r3
    5a8a:	4316      	orrs	r6, r2
    5a8c:	2e0f      	cmp	r6, #15
    5a8e:	d900      	bls.n	5a92 <__aeabi_ddiv+0x8e>
    5a90:	e0b4      	b.n	5bfc <__aeabi_ddiv+0x1f8>
    5a92:	4b57      	ldr	r3, [pc, #348]	; (5bf0 <__aeabi_ddiv+0x1ec>)
    5a94:	00b6      	lsls	r6, r6, #2
    5a96:	599b      	ldr	r3, [r3, r6]
    5a98:	469f      	mov	pc, r3
    5a9a:	0003      	movs	r3, r0
    5a9c:	4333      	orrs	r3, r6
    5a9e:	4699      	mov	r9, r3
    5aa0:	d16c      	bne.n	5b7c <__aeabi_ddiv+0x178>
    5aa2:	2300      	movs	r3, #0
    5aa4:	4698      	mov	r8, r3
    5aa6:	3302      	adds	r3, #2
    5aa8:	2608      	movs	r6, #8
    5aaa:	9303      	str	r3, [sp, #12]
    5aac:	e7ce      	b.n	5a4c <__aeabi_ddiv+0x48>
    5aae:	46cb      	mov	fp, r9
    5ab0:	4641      	mov	r1, r8
    5ab2:	9a03      	ldr	r2, [sp, #12]
    5ab4:	9701      	str	r7, [sp, #4]
    5ab6:	2a02      	cmp	r2, #2
    5ab8:	d165      	bne.n	5b86 <__aeabi_ddiv+0x182>
    5aba:	9b01      	ldr	r3, [sp, #4]
    5abc:	4c4a      	ldr	r4, [pc, #296]	; (5be8 <__aeabi_ddiv+0x1e4>)
    5abe:	469c      	mov	ip, r3
    5ac0:	2300      	movs	r3, #0
    5ac2:	2200      	movs	r2, #0
    5ac4:	4698      	mov	r8, r3
    5ac6:	e06b      	b.n	5ba0 <__aeabi_ddiv+0x19c>
    5ac8:	0003      	movs	r3, r0
    5aca:	4333      	orrs	r3, r6
    5acc:	4699      	mov	r9, r3
    5ace:	d04e      	beq.n	5b6e <__aeabi_ddiv+0x16a>
    5ad0:	2e00      	cmp	r6, #0
    5ad2:	d100      	bne.n	5ad6 <__aeabi_ddiv+0xd2>
    5ad4:	e1bc      	b.n	5e50 <__aeabi_ddiv+0x44c>
    5ad6:	0030      	movs	r0, r6
    5ad8:	f001 fb08 	bl	70ec <__clzsi2>
    5adc:	0003      	movs	r3, r0
    5ade:	3b0b      	subs	r3, #11
    5ae0:	2b1c      	cmp	r3, #28
    5ae2:	dd00      	ble.n	5ae6 <__aeabi_ddiv+0xe2>
    5ae4:	e1ac      	b.n	5e40 <__aeabi_ddiv+0x43c>
    5ae6:	221d      	movs	r2, #29
    5ae8:	1ad3      	subs	r3, r2, r3
    5aea:	465a      	mov	r2, fp
    5aec:	0001      	movs	r1, r0
    5aee:	40da      	lsrs	r2, r3
    5af0:	3908      	subs	r1, #8
    5af2:	408e      	lsls	r6, r1
    5af4:	0013      	movs	r3, r2
    5af6:	4333      	orrs	r3, r6
    5af8:	4699      	mov	r9, r3
    5afa:	465b      	mov	r3, fp
    5afc:	408b      	lsls	r3, r1
    5afe:	4698      	mov	r8, r3
    5b00:	2300      	movs	r3, #0
    5b02:	4c3c      	ldr	r4, [pc, #240]	; (5bf4 <__aeabi_ddiv+0x1f0>)
    5b04:	2600      	movs	r6, #0
    5b06:	1a24      	subs	r4, r4, r0
    5b08:	9303      	str	r3, [sp, #12]
    5b0a:	e79f      	b.n	5a4c <__aeabi_ddiv+0x48>
    5b0c:	4651      	mov	r1, sl
    5b0e:	465a      	mov	r2, fp
    5b10:	4311      	orrs	r1, r2
    5b12:	d129      	bne.n	5b68 <__aeabi_ddiv+0x164>
    5b14:	2200      	movs	r2, #0
    5b16:	4693      	mov	fp, r2
    5b18:	3202      	adds	r2, #2
    5b1a:	e7b1      	b.n	5a80 <__aeabi_ddiv+0x7c>
    5b1c:	4659      	mov	r1, fp
    5b1e:	4301      	orrs	r1, r0
    5b20:	d01e      	beq.n	5b60 <__aeabi_ddiv+0x15c>
    5b22:	465b      	mov	r3, fp
    5b24:	2b00      	cmp	r3, #0
    5b26:	d100      	bne.n	5b2a <__aeabi_ddiv+0x126>
    5b28:	e19e      	b.n	5e68 <__aeabi_ddiv+0x464>
    5b2a:	4658      	mov	r0, fp
    5b2c:	f001 fade 	bl	70ec <__clzsi2>
    5b30:	0003      	movs	r3, r0
    5b32:	3b0b      	subs	r3, #11
    5b34:	2b1c      	cmp	r3, #28
    5b36:	dd00      	ble.n	5b3a <__aeabi_ddiv+0x136>
    5b38:	e18f      	b.n	5e5a <__aeabi_ddiv+0x456>
    5b3a:	0002      	movs	r2, r0
    5b3c:	4659      	mov	r1, fp
    5b3e:	3a08      	subs	r2, #8
    5b40:	4091      	lsls	r1, r2
    5b42:	468b      	mov	fp, r1
    5b44:	211d      	movs	r1, #29
    5b46:	1acb      	subs	r3, r1, r3
    5b48:	4651      	mov	r1, sl
    5b4a:	40d9      	lsrs	r1, r3
    5b4c:	000b      	movs	r3, r1
    5b4e:	4659      	mov	r1, fp
    5b50:	430b      	orrs	r3, r1
    5b52:	4651      	mov	r1, sl
    5b54:	469b      	mov	fp, r3
    5b56:	4091      	lsls	r1, r2
    5b58:	4b26      	ldr	r3, [pc, #152]	; (5bf4 <__aeabi_ddiv+0x1f0>)
    5b5a:	2200      	movs	r2, #0
    5b5c:	1a1b      	subs	r3, r3, r0
    5b5e:	e78f      	b.n	5a80 <__aeabi_ddiv+0x7c>
    5b60:	2300      	movs	r3, #0
    5b62:	2201      	movs	r2, #1
    5b64:	469b      	mov	fp, r3
    5b66:	e78b      	b.n	5a80 <__aeabi_ddiv+0x7c>
    5b68:	4651      	mov	r1, sl
    5b6a:	2203      	movs	r2, #3
    5b6c:	e788      	b.n	5a80 <__aeabi_ddiv+0x7c>
    5b6e:	2300      	movs	r3, #0
    5b70:	4698      	mov	r8, r3
    5b72:	3301      	adds	r3, #1
    5b74:	2604      	movs	r6, #4
    5b76:	2400      	movs	r4, #0
    5b78:	9303      	str	r3, [sp, #12]
    5b7a:	e767      	b.n	5a4c <__aeabi_ddiv+0x48>
    5b7c:	2303      	movs	r3, #3
    5b7e:	46b1      	mov	r9, r6
    5b80:	9303      	str	r3, [sp, #12]
    5b82:	260c      	movs	r6, #12
    5b84:	e762      	b.n	5a4c <__aeabi_ddiv+0x48>
    5b86:	2a03      	cmp	r2, #3
    5b88:	d100      	bne.n	5b8c <__aeabi_ddiv+0x188>
    5b8a:	e25c      	b.n	6046 <__aeabi_ddiv+0x642>
    5b8c:	9b01      	ldr	r3, [sp, #4]
    5b8e:	2a01      	cmp	r2, #1
    5b90:	d000      	beq.n	5b94 <__aeabi_ddiv+0x190>
    5b92:	e1e4      	b.n	5f5e <__aeabi_ddiv+0x55a>
    5b94:	4013      	ands	r3, r2
    5b96:	469c      	mov	ip, r3
    5b98:	2300      	movs	r3, #0
    5b9a:	2400      	movs	r4, #0
    5b9c:	2200      	movs	r2, #0
    5b9e:	4698      	mov	r8, r3
    5ba0:	2100      	movs	r1, #0
    5ba2:	0312      	lsls	r2, r2, #12
    5ba4:	0b13      	lsrs	r3, r2, #12
    5ba6:	0d0a      	lsrs	r2, r1, #20
    5ba8:	0512      	lsls	r2, r2, #20
    5baa:	431a      	orrs	r2, r3
    5bac:	0523      	lsls	r3, r4, #20
    5bae:	4c12      	ldr	r4, [pc, #72]	; (5bf8 <__aeabi_ddiv+0x1f4>)
    5bb0:	4640      	mov	r0, r8
    5bb2:	4022      	ands	r2, r4
    5bb4:	4313      	orrs	r3, r2
    5bb6:	4662      	mov	r2, ip
    5bb8:	005b      	lsls	r3, r3, #1
    5bba:	07d2      	lsls	r2, r2, #31
    5bbc:	085b      	lsrs	r3, r3, #1
    5bbe:	4313      	orrs	r3, r2
    5bc0:	0019      	movs	r1, r3
    5bc2:	b007      	add	sp, #28
    5bc4:	bc3c      	pop	{r2, r3, r4, r5}
    5bc6:	4690      	mov	r8, r2
    5bc8:	4699      	mov	r9, r3
    5bca:	46a2      	mov	sl, r4
    5bcc:	46ab      	mov	fp, r5
    5bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bd0:	2300      	movs	r3, #0
    5bd2:	2280      	movs	r2, #128	; 0x80
    5bd4:	469c      	mov	ip, r3
    5bd6:	0312      	lsls	r2, r2, #12
    5bd8:	4698      	mov	r8, r3
    5bda:	4c03      	ldr	r4, [pc, #12]	; (5be8 <__aeabi_ddiv+0x1e4>)
    5bdc:	e7e0      	b.n	5ba0 <__aeabi_ddiv+0x19c>
    5bde:	2300      	movs	r3, #0
    5be0:	4c01      	ldr	r4, [pc, #4]	; (5be8 <__aeabi_ddiv+0x1e4>)
    5be2:	2200      	movs	r2, #0
    5be4:	4698      	mov	r8, r3
    5be6:	e7db      	b.n	5ba0 <__aeabi_ddiv+0x19c>
    5be8:	000007ff 	.word	0x000007ff
    5bec:	fffffc01 	.word	0xfffffc01
    5bf0:	000071f8 	.word	0x000071f8
    5bf4:	fffffc0d 	.word	0xfffffc0d
    5bf8:	800fffff 	.word	0x800fffff
    5bfc:	45d9      	cmp	r9, fp
    5bfe:	d900      	bls.n	5c02 <__aeabi_ddiv+0x1fe>
    5c00:	e139      	b.n	5e76 <__aeabi_ddiv+0x472>
    5c02:	d100      	bne.n	5c06 <__aeabi_ddiv+0x202>
    5c04:	e134      	b.n	5e70 <__aeabi_ddiv+0x46c>
    5c06:	2300      	movs	r3, #0
    5c08:	4646      	mov	r6, r8
    5c0a:	464d      	mov	r5, r9
    5c0c:	469a      	mov	sl, r3
    5c0e:	3c01      	subs	r4, #1
    5c10:	465b      	mov	r3, fp
    5c12:	0e0a      	lsrs	r2, r1, #24
    5c14:	021b      	lsls	r3, r3, #8
    5c16:	431a      	orrs	r2, r3
    5c18:	020b      	lsls	r3, r1, #8
    5c1a:	0c17      	lsrs	r7, r2, #16
    5c1c:	9303      	str	r3, [sp, #12]
    5c1e:	0413      	lsls	r3, r2, #16
    5c20:	0c1b      	lsrs	r3, r3, #16
    5c22:	0039      	movs	r1, r7
    5c24:	0028      	movs	r0, r5
    5c26:	4690      	mov	r8, r2
    5c28:	9301      	str	r3, [sp, #4]
    5c2a:	f7ff f89f 	bl	4d6c <__udivsi3>
    5c2e:	0002      	movs	r2, r0
    5c30:	9b01      	ldr	r3, [sp, #4]
    5c32:	4683      	mov	fp, r0
    5c34:	435a      	muls	r2, r3
    5c36:	0028      	movs	r0, r5
    5c38:	0039      	movs	r1, r7
    5c3a:	4691      	mov	r9, r2
    5c3c:	f7ff f91c 	bl	4e78 <__aeabi_uidivmod>
    5c40:	0c35      	lsrs	r5, r6, #16
    5c42:	0409      	lsls	r1, r1, #16
    5c44:	430d      	orrs	r5, r1
    5c46:	45a9      	cmp	r9, r5
    5c48:	d90d      	bls.n	5c66 <__aeabi_ddiv+0x262>
    5c4a:	465b      	mov	r3, fp
    5c4c:	4445      	add	r5, r8
    5c4e:	3b01      	subs	r3, #1
    5c50:	45a8      	cmp	r8, r5
    5c52:	d900      	bls.n	5c56 <__aeabi_ddiv+0x252>
    5c54:	e13a      	b.n	5ecc <__aeabi_ddiv+0x4c8>
    5c56:	45a9      	cmp	r9, r5
    5c58:	d800      	bhi.n	5c5c <__aeabi_ddiv+0x258>
    5c5a:	e137      	b.n	5ecc <__aeabi_ddiv+0x4c8>
    5c5c:	2302      	movs	r3, #2
    5c5e:	425b      	negs	r3, r3
    5c60:	469c      	mov	ip, r3
    5c62:	4445      	add	r5, r8
    5c64:	44e3      	add	fp, ip
    5c66:	464b      	mov	r3, r9
    5c68:	1aeb      	subs	r3, r5, r3
    5c6a:	0039      	movs	r1, r7
    5c6c:	0018      	movs	r0, r3
    5c6e:	9304      	str	r3, [sp, #16]
    5c70:	f7ff f87c 	bl	4d6c <__udivsi3>
    5c74:	9b01      	ldr	r3, [sp, #4]
    5c76:	0005      	movs	r5, r0
    5c78:	4343      	muls	r3, r0
    5c7a:	0039      	movs	r1, r7
    5c7c:	9804      	ldr	r0, [sp, #16]
    5c7e:	4699      	mov	r9, r3
    5c80:	f7ff f8fa 	bl	4e78 <__aeabi_uidivmod>
    5c84:	0433      	lsls	r3, r6, #16
    5c86:	0409      	lsls	r1, r1, #16
    5c88:	0c1b      	lsrs	r3, r3, #16
    5c8a:	430b      	orrs	r3, r1
    5c8c:	4599      	cmp	r9, r3
    5c8e:	d909      	bls.n	5ca4 <__aeabi_ddiv+0x2a0>
    5c90:	4443      	add	r3, r8
    5c92:	1e6a      	subs	r2, r5, #1
    5c94:	4598      	cmp	r8, r3
    5c96:	d900      	bls.n	5c9a <__aeabi_ddiv+0x296>
    5c98:	e11a      	b.n	5ed0 <__aeabi_ddiv+0x4cc>
    5c9a:	4599      	cmp	r9, r3
    5c9c:	d800      	bhi.n	5ca0 <__aeabi_ddiv+0x29c>
    5c9e:	e117      	b.n	5ed0 <__aeabi_ddiv+0x4cc>
    5ca0:	3d02      	subs	r5, #2
    5ca2:	4443      	add	r3, r8
    5ca4:	464a      	mov	r2, r9
    5ca6:	1a9b      	subs	r3, r3, r2
    5ca8:	465a      	mov	r2, fp
    5caa:	0412      	lsls	r2, r2, #16
    5cac:	432a      	orrs	r2, r5
    5cae:	9903      	ldr	r1, [sp, #12]
    5cb0:	4693      	mov	fp, r2
    5cb2:	0c10      	lsrs	r0, r2, #16
    5cb4:	0c0a      	lsrs	r2, r1, #16
    5cb6:	4691      	mov	r9, r2
    5cb8:	0409      	lsls	r1, r1, #16
    5cba:	465a      	mov	r2, fp
    5cbc:	0c09      	lsrs	r1, r1, #16
    5cbe:	464e      	mov	r6, r9
    5cc0:	000d      	movs	r5, r1
    5cc2:	0412      	lsls	r2, r2, #16
    5cc4:	0c12      	lsrs	r2, r2, #16
    5cc6:	4345      	muls	r5, r0
    5cc8:	9105      	str	r1, [sp, #20]
    5cca:	4351      	muls	r1, r2
    5ccc:	4372      	muls	r2, r6
    5cce:	4370      	muls	r0, r6
    5cd0:	1952      	adds	r2, r2, r5
    5cd2:	0c0e      	lsrs	r6, r1, #16
    5cd4:	18b2      	adds	r2, r6, r2
    5cd6:	4295      	cmp	r5, r2
    5cd8:	d903      	bls.n	5ce2 <__aeabi_ddiv+0x2de>
    5cda:	2580      	movs	r5, #128	; 0x80
    5cdc:	026d      	lsls	r5, r5, #9
    5cde:	46ac      	mov	ip, r5
    5ce0:	4460      	add	r0, ip
    5ce2:	0c15      	lsrs	r5, r2, #16
    5ce4:	0409      	lsls	r1, r1, #16
    5ce6:	0412      	lsls	r2, r2, #16
    5ce8:	0c09      	lsrs	r1, r1, #16
    5cea:	1828      	adds	r0, r5, r0
    5cec:	1852      	adds	r2, r2, r1
    5cee:	4283      	cmp	r3, r0
    5cf0:	d200      	bcs.n	5cf4 <__aeabi_ddiv+0x2f0>
    5cf2:	e0ce      	b.n	5e92 <__aeabi_ddiv+0x48e>
    5cf4:	d100      	bne.n	5cf8 <__aeabi_ddiv+0x2f4>
    5cf6:	e0c8      	b.n	5e8a <__aeabi_ddiv+0x486>
    5cf8:	1a1d      	subs	r5, r3, r0
    5cfa:	4653      	mov	r3, sl
    5cfc:	1a9e      	subs	r6, r3, r2
    5cfe:	45b2      	cmp	sl, r6
    5d00:	4192      	sbcs	r2, r2
    5d02:	4252      	negs	r2, r2
    5d04:	1aab      	subs	r3, r5, r2
    5d06:	469a      	mov	sl, r3
    5d08:	4598      	cmp	r8, r3
    5d0a:	d100      	bne.n	5d0e <__aeabi_ddiv+0x30a>
    5d0c:	e117      	b.n	5f3e <__aeabi_ddiv+0x53a>
    5d0e:	0039      	movs	r1, r7
    5d10:	0018      	movs	r0, r3
    5d12:	f7ff f82b 	bl	4d6c <__udivsi3>
    5d16:	9b01      	ldr	r3, [sp, #4]
    5d18:	0005      	movs	r5, r0
    5d1a:	4343      	muls	r3, r0
    5d1c:	0039      	movs	r1, r7
    5d1e:	4650      	mov	r0, sl
    5d20:	9304      	str	r3, [sp, #16]
    5d22:	f7ff f8a9 	bl	4e78 <__aeabi_uidivmod>
    5d26:	9804      	ldr	r0, [sp, #16]
    5d28:	040b      	lsls	r3, r1, #16
    5d2a:	0c31      	lsrs	r1, r6, #16
    5d2c:	4319      	orrs	r1, r3
    5d2e:	4288      	cmp	r0, r1
    5d30:	d909      	bls.n	5d46 <__aeabi_ddiv+0x342>
    5d32:	4441      	add	r1, r8
    5d34:	1e6b      	subs	r3, r5, #1
    5d36:	4588      	cmp	r8, r1
    5d38:	d900      	bls.n	5d3c <__aeabi_ddiv+0x338>
    5d3a:	e107      	b.n	5f4c <__aeabi_ddiv+0x548>
    5d3c:	4288      	cmp	r0, r1
    5d3e:	d800      	bhi.n	5d42 <__aeabi_ddiv+0x33e>
    5d40:	e104      	b.n	5f4c <__aeabi_ddiv+0x548>
    5d42:	3d02      	subs	r5, #2
    5d44:	4441      	add	r1, r8
    5d46:	9b04      	ldr	r3, [sp, #16]
    5d48:	1acb      	subs	r3, r1, r3
    5d4a:	0018      	movs	r0, r3
    5d4c:	0039      	movs	r1, r7
    5d4e:	9304      	str	r3, [sp, #16]
    5d50:	f7ff f80c 	bl	4d6c <__udivsi3>
    5d54:	9b01      	ldr	r3, [sp, #4]
    5d56:	4682      	mov	sl, r0
    5d58:	4343      	muls	r3, r0
    5d5a:	0039      	movs	r1, r7
    5d5c:	9804      	ldr	r0, [sp, #16]
    5d5e:	9301      	str	r3, [sp, #4]
    5d60:	f7ff f88a 	bl	4e78 <__aeabi_uidivmod>
    5d64:	9801      	ldr	r0, [sp, #4]
    5d66:	040b      	lsls	r3, r1, #16
    5d68:	0431      	lsls	r1, r6, #16
    5d6a:	0c09      	lsrs	r1, r1, #16
    5d6c:	4319      	orrs	r1, r3
    5d6e:	4288      	cmp	r0, r1
    5d70:	d90d      	bls.n	5d8e <__aeabi_ddiv+0x38a>
    5d72:	4653      	mov	r3, sl
    5d74:	4441      	add	r1, r8
    5d76:	3b01      	subs	r3, #1
    5d78:	4588      	cmp	r8, r1
    5d7a:	d900      	bls.n	5d7e <__aeabi_ddiv+0x37a>
    5d7c:	e0e8      	b.n	5f50 <__aeabi_ddiv+0x54c>
    5d7e:	4288      	cmp	r0, r1
    5d80:	d800      	bhi.n	5d84 <__aeabi_ddiv+0x380>
    5d82:	e0e5      	b.n	5f50 <__aeabi_ddiv+0x54c>
    5d84:	2302      	movs	r3, #2
    5d86:	425b      	negs	r3, r3
    5d88:	469c      	mov	ip, r3
    5d8a:	4441      	add	r1, r8
    5d8c:	44e2      	add	sl, ip
    5d8e:	9b01      	ldr	r3, [sp, #4]
    5d90:	042d      	lsls	r5, r5, #16
    5d92:	1ace      	subs	r6, r1, r3
    5d94:	4651      	mov	r1, sl
    5d96:	4329      	orrs	r1, r5
    5d98:	9d05      	ldr	r5, [sp, #20]
    5d9a:	464f      	mov	r7, r9
    5d9c:	002a      	movs	r2, r5
    5d9e:	040b      	lsls	r3, r1, #16
    5da0:	0c08      	lsrs	r0, r1, #16
    5da2:	0c1b      	lsrs	r3, r3, #16
    5da4:	435a      	muls	r2, r3
    5da6:	4345      	muls	r5, r0
    5da8:	437b      	muls	r3, r7
    5daa:	4378      	muls	r0, r7
    5dac:	195b      	adds	r3, r3, r5
    5dae:	0c17      	lsrs	r7, r2, #16
    5db0:	18fb      	adds	r3, r7, r3
    5db2:	429d      	cmp	r5, r3
    5db4:	d903      	bls.n	5dbe <__aeabi_ddiv+0x3ba>
    5db6:	2580      	movs	r5, #128	; 0x80
    5db8:	026d      	lsls	r5, r5, #9
    5dba:	46ac      	mov	ip, r5
    5dbc:	4460      	add	r0, ip
    5dbe:	0c1d      	lsrs	r5, r3, #16
    5dc0:	0412      	lsls	r2, r2, #16
    5dc2:	041b      	lsls	r3, r3, #16
    5dc4:	0c12      	lsrs	r2, r2, #16
    5dc6:	1828      	adds	r0, r5, r0
    5dc8:	189b      	adds	r3, r3, r2
    5dca:	4286      	cmp	r6, r0
    5dcc:	d200      	bcs.n	5dd0 <__aeabi_ddiv+0x3cc>
    5dce:	e093      	b.n	5ef8 <__aeabi_ddiv+0x4f4>
    5dd0:	d100      	bne.n	5dd4 <__aeabi_ddiv+0x3d0>
    5dd2:	e08e      	b.n	5ef2 <__aeabi_ddiv+0x4ee>
    5dd4:	2301      	movs	r3, #1
    5dd6:	4319      	orrs	r1, r3
    5dd8:	4ba0      	ldr	r3, [pc, #640]	; (605c <__aeabi_ddiv+0x658>)
    5dda:	18e3      	adds	r3, r4, r3
    5ddc:	2b00      	cmp	r3, #0
    5dde:	dc00      	bgt.n	5de2 <__aeabi_ddiv+0x3de>
    5de0:	e099      	b.n	5f16 <__aeabi_ddiv+0x512>
    5de2:	074a      	lsls	r2, r1, #29
    5de4:	d000      	beq.n	5de8 <__aeabi_ddiv+0x3e4>
    5de6:	e09e      	b.n	5f26 <__aeabi_ddiv+0x522>
    5de8:	465a      	mov	r2, fp
    5dea:	01d2      	lsls	r2, r2, #7
    5dec:	d506      	bpl.n	5dfc <__aeabi_ddiv+0x3f8>
    5dee:	465a      	mov	r2, fp
    5df0:	4b9b      	ldr	r3, [pc, #620]	; (6060 <__aeabi_ddiv+0x65c>)
    5df2:	401a      	ands	r2, r3
    5df4:	2380      	movs	r3, #128	; 0x80
    5df6:	4693      	mov	fp, r2
    5df8:	00db      	lsls	r3, r3, #3
    5dfa:	18e3      	adds	r3, r4, r3
    5dfc:	4a99      	ldr	r2, [pc, #612]	; (6064 <__aeabi_ddiv+0x660>)
    5dfe:	4293      	cmp	r3, r2
    5e00:	dd68      	ble.n	5ed4 <__aeabi_ddiv+0x4d0>
    5e02:	2301      	movs	r3, #1
    5e04:	9a02      	ldr	r2, [sp, #8]
    5e06:	4c98      	ldr	r4, [pc, #608]	; (6068 <__aeabi_ddiv+0x664>)
    5e08:	401a      	ands	r2, r3
    5e0a:	2300      	movs	r3, #0
    5e0c:	4694      	mov	ip, r2
    5e0e:	4698      	mov	r8, r3
    5e10:	2200      	movs	r2, #0
    5e12:	e6c5      	b.n	5ba0 <__aeabi_ddiv+0x19c>
    5e14:	2280      	movs	r2, #128	; 0x80
    5e16:	464b      	mov	r3, r9
    5e18:	0312      	lsls	r2, r2, #12
    5e1a:	4213      	tst	r3, r2
    5e1c:	d00a      	beq.n	5e34 <__aeabi_ddiv+0x430>
    5e1e:	465b      	mov	r3, fp
    5e20:	4213      	tst	r3, r2
    5e22:	d106      	bne.n	5e32 <__aeabi_ddiv+0x42e>
    5e24:	431a      	orrs	r2, r3
    5e26:	0312      	lsls	r2, r2, #12
    5e28:	0b12      	lsrs	r2, r2, #12
    5e2a:	46ac      	mov	ip, r5
    5e2c:	4688      	mov	r8, r1
    5e2e:	4c8e      	ldr	r4, [pc, #568]	; (6068 <__aeabi_ddiv+0x664>)
    5e30:	e6b6      	b.n	5ba0 <__aeabi_ddiv+0x19c>
    5e32:	464b      	mov	r3, r9
    5e34:	431a      	orrs	r2, r3
    5e36:	0312      	lsls	r2, r2, #12
    5e38:	0b12      	lsrs	r2, r2, #12
    5e3a:	46bc      	mov	ip, r7
    5e3c:	4c8a      	ldr	r4, [pc, #552]	; (6068 <__aeabi_ddiv+0x664>)
    5e3e:	e6af      	b.n	5ba0 <__aeabi_ddiv+0x19c>
    5e40:	0003      	movs	r3, r0
    5e42:	465a      	mov	r2, fp
    5e44:	3b28      	subs	r3, #40	; 0x28
    5e46:	409a      	lsls	r2, r3
    5e48:	2300      	movs	r3, #0
    5e4a:	4691      	mov	r9, r2
    5e4c:	4698      	mov	r8, r3
    5e4e:	e657      	b.n	5b00 <__aeabi_ddiv+0xfc>
    5e50:	4658      	mov	r0, fp
    5e52:	f001 f94b 	bl	70ec <__clzsi2>
    5e56:	3020      	adds	r0, #32
    5e58:	e640      	b.n	5adc <__aeabi_ddiv+0xd8>
    5e5a:	0003      	movs	r3, r0
    5e5c:	4652      	mov	r2, sl
    5e5e:	3b28      	subs	r3, #40	; 0x28
    5e60:	409a      	lsls	r2, r3
    5e62:	2100      	movs	r1, #0
    5e64:	4693      	mov	fp, r2
    5e66:	e677      	b.n	5b58 <__aeabi_ddiv+0x154>
    5e68:	f001 f940 	bl	70ec <__clzsi2>
    5e6c:	3020      	adds	r0, #32
    5e6e:	e65f      	b.n	5b30 <__aeabi_ddiv+0x12c>
    5e70:	4588      	cmp	r8, r1
    5e72:	d200      	bcs.n	5e76 <__aeabi_ddiv+0x472>
    5e74:	e6c7      	b.n	5c06 <__aeabi_ddiv+0x202>
    5e76:	464b      	mov	r3, r9
    5e78:	07de      	lsls	r6, r3, #31
    5e7a:	085d      	lsrs	r5, r3, #1
    5e7c:	4643      	mov	r3, r8
    5e7e:	085b      	lsrs	r3, r3, #1
    5e80:	431e      	orrs	r6, r3
    5e82:	4643      	mov	r3, r8
    5e84:	07db      	lsls	r3, r3, #31
    5e86:	469a      	mov	sl, r3
    5e88:	e6c2      	b.n	5c10 <__aeabi_ddiv+0x20c>
    5e8a:	2500      	movs	r5, #0
    5e8c:	4592      	cmp	sl, r2
    5e8e:	d300      	bcc.n	5e92 <__aeabi_ddiv+0x48e>
    5e90:	e733      	b.n	5cfa <__aeabi_ddiv+0x2f6>
    5e92:	9e03      	ldr	r6, [sp, #12]
    5e94:	4659      	mov	r1, fp
    5e96:	46b4      	mov	ip, r6
    5e98:	44e2      	add	sl, ip
    5e9a:	45b2      	cmp	sl, r6
    5e9c:	41ad      	sbcs	r5, r5
    5e9e:	426d      	negs	r5, r5
    5ea0:	4445      	add	r5, r8
    5ea2:	18eb      	adds	r3, r5, r3
    5ea4:	3901      	subs	r1, #1
    5ea6:	4598      	cmp	r8, r3
    5ea8:	d207      	bcs.n	5eba <__aeabi_ddiv+0x4b6>
    5eaa:	4298      	cmp	r0, r3
    5eac:	d900      	bls.n	5eb0 <__aeabi_ddiv+0x4ac>
    5eae:	e07f      	b.n	5fb0 <__aeabi_ddiv+0x5ac>
    5eb0:	d100      	bne.n	5eb4 <__aeabi_ddiv+0x4b0>
    5eb2:	e0bc      	b.n	602e <__aeabi_ddiv+0x62a>
    5eb4:	1a1d      	subs	r5, r3, r0
    5eb6:	468b      	mov	fp, r1
    5eb8:	e71f      	b.n	5cfa <__aeabi_ddiv+0x2f6>
    5eba:	4598      	cmp	r8, r3
    5ebc:	d1fa      	bne.n	5eb4 <__aeabi_ddiv+0x4b0>
    5ebe:	9d03      	ldr	r5, [sp, #12]
    5ec0:	4555      	cmp	r5, sl
    5ec2:	d9f2      	bls.n	5eaa <__aeabi_ddiv+0x4a6>
    5ec4:	4643      	mov	r3, r8
    5ec6:	468b      	mov	fp, r1
    5ec8:	1a1d      	subs	r5, r3, r0
    5eca:	e716      	b.n	5cfa <__aeabi_ddiv+0x2f6>
    5ecc:	469b      	mov	fp, r3
    5ece:	e6ca      	b.n	5c66 <__aeabi_ddiv+0x262>
    5ed0:	0015      	movs	r5, r2
    5ed2:	e6e7      	b.n	5ca4 <__aeabi_ddiv+0x2a0>
    5ed4:	465a      	mov	r2, fp
    5ed6:	08c9      	lsrs	r1, r1, #3
    5ed8:	0752      	lsls	r2, r2, #29
    5eda:	430a      	orrs	r2, r1
    5edc:	055b      	lsls	r3, r3, #21
    5ede:	4690      	mov	r8, r2
    5ee0:	0d5c      	lsrs	r4, r3, #21
    5ee2:	465a      	mov	r2, fp
    5ee4:	2301      	movs	r3, #1
    5ee6:	9902      	ldr	r1, [sp, #8]
    5ee8:	0252      	lsls	r2, r2, #9
    5eea:	4019      	ands	r1, r3
    5eec:	0b12      	lsrs	r2, r2, #12
    5eee:	468c      	mov	ip, r1
    5ef0:	e656      	b.n	5ba0 <__aeabi_ddiv+0x19c>
    5ef2:	2b00      	cmp	r3, #0
    5ef4:	d100      	bne.n	5ef8 <__aeabi_ddiv+0x4f4>
    5ef6:	e76f      	b.n	5dd8 <__aeabi_ddiv+0x3d4>
    5ef8:	4446      	add	r6, r8
    5efa:	1e4a      	subs	r2, r1, #1
    5efc:	45b0      	cmp	r8, r6
    5efe:	d929      	bls.n	5f54 <__aeabi_ddiv+0x550>
    5f00:	0011      	movs	r1, r2
    5f02:	4286      	cmp	r6, r0
    5f04:	d000      	beq.n	5f08 <__aeabi_ddiv+0x504>
    5f06:	e765      	b.n	5dd4 <__aeabi_ddiv+0x3d0>
    5f08:	9a03      	ldr	r2, [sp, #12]
    5f0a:	4293      	cmp	r3, r2
    5f0c:	d000      	beq.n	5f10 <__aeabi_ddiv+0x50c>
    5f0e:	e761      	b.n	5dd4 <__aeabi_ddiv+0x3d0>
    5f10:	e762      	b.n	5dd8 <__aeabi_ddiv+0x3d4>
    5f12:	2101      	movs	r1, #1
    5f14:	4249      	negs	r1, r1
    5f16:	2001      	movs	r0, #1
    5f18:	1ac2      	subs	r2, r0, r3
    5f1a:	2a38      	cmp	r2, #56	; 0x38
    5f1c:	dd21      	ble.n	5f62 <__aeabi_ddiv+0x55e>
    5f1e:	9b02      	ldr	r3, [sp, #8]
    5f20:	4003      	ands	r3, r0
    5f22:	469c      	mov	ip, r3
    5f24:	e638      	b.n	5b98 <__aeabi_ddiv+0x194>
    5f26:	220f      	movs	r2, #15
    5f28:	400a      	ands	r2, r1
    5f2a:	2a04      	cmp	r2, #4
    5f2c:	d100      	bne.n	5f30 <__aeabi_ddiv+0x52c>
    5f2e:	e75b      	b.n	5de8 <__aeabi_ddiv+0x3e4>
    5f30:	000a      	movs	r2, r1
    5f32:	1d11      	adds	r1, r2, #4
    5f34:	4291      	cmp	r1, r2
    5f36:	4192      	sbcs	r2, r2
    5f38:	4252      	negs	r2, r2
    5f3a:	4493      	add	fp, r2
    5f3c:	e754      	b.n	5de8 <__aeabi_ddiv+0x3e4>
    5f3e:	4b47      	ldr	r3, [pc, #284]	; (605c <__aeabi_ddiv+0x658>)
    5f40:	18e3      	adds	r3, r4, r3
    5f42:	2b00      	cmp	r3, #0
    5f44:	dde5      	ble.n	5f12 <__aeabi_ddiv+0x50e>
    5f46:	2201      	movs	r2, #1
    5f48:	4252      	negs	r2, r2
    5f4a:	e7f2      	b.n	5f32 <__aeabi_ddiv+0x52e>
    5f4c:	001d      	movs	r5, r3
    5f4e:	e6fa      	b.n	5d46 <__aeabi_ddiv+0x342>
    5f50:	469a      	mov	sl, r3
    5f52:	e71c      	b.n	5d8e <__aeabi_ddiv+0x38a>
    5f54:	42b0      	cmp	r0, r6
    5f56:	d839      	bhi.n	5fcc <__aeabi_ddiv+0x5c8>
    5f58:	d06e      	beq.n	6038 <__aeabi_ddiv+0x634>
    5f5a:	0011      	movs	r1, r2
    5f5c:	e73a      	b.n	5dd4 <__aeabi_ddiv+0x3d0>
    5f5e:	9302      	str	r3, [sp, #8]
    5f60:	e73a      	b.n	5dd8 <__aeabi_ddiv+0x3d4>
    5f62:	2a1f      	cmp	r2, #31
    5f64:	dc3c      	bgt.n	5fe0 <__aeabi_ddiv+0x5dc>
    5f66:	2320      	movs	r3, #32
    5f68:	1a9b      	subs	r3, r3, r2
    5f6a:	000c      	movs	r4, r1
    5f6c:	4658      	mov	r0, fp
    5f6e:	4099      	lsls	r1, r3
    5f70:	4098      	lsls	r0, r3
    5f72:	1e4b      	subs	r3, r1, #1
    5f74:	4199      	sbcs	r1, r3
    5f76:	465b      	mov	r3, fp
    5f78:	40d4      	lsrs	r4, r2
    5f7a:	40d3      	lsrs	r3, r2
    5f7c:	4320      	orrs	r0, r4
    5f7e:	4308      	orrs	r0, r1
    5f80:	001a      	movs	r2, r3
    5f82:	0743      	lsls	r3, r0, #29
    5f84:	d009      	beq.n	5f9a <__aeabi_ddiv+0x596>
    5f86:	230f      	movs	r3, #15
    5f88:	4003      	ands	r3, r0
    5f8a:	2b04      	cmp	r3, #4
    5f8c:	d005      	beq.n	5f9a <__aeabi_ddiv+0x596>
    5f8e:	0001      	movs	r1, r0
    5f90:	1d08      	adds	r0, r1, #4
    5f92:	4288      	cmp	r0, r1
    5f94:	419b      	sbcs	r3, r3
    5f96:	425b      	negs	r3, r3
    5f98:	18d2      	adds	r2, r2, r3
    5f9a:	0213      	lsls	r3, r2, #8
    5f9c:	d53a      	bpl.n	6014 <__aeabi_ddiv+0x610>
    5f9e:	2301      	movs	r3, #1
    5fa0:	9a02      	ldr	r2, [sp, #8]
    5fa2:	2401      	movs	r4, #1
    5fa4:	401a      	ands	r2, r3
    5fa6:	2300      	movs	r3, #0
    5fa8:	4694      	mov	ip, r2
    5faa:	4698      	mov	r8, r3
    5fac:	2200      	movs	r2, #0
    5fae:	e5f7      	b.n	5ba0 <__aeabi_ddiv+0x19c>
    5fb0:	2102      	movs	r1, #2
    5fb2:	4249      	negs	r1, r1
    5fb4:	468c      	mov	ip, r1
    5fb6:	9d03      	ldr	r5, [sp, #12]
    5fb8:	44e3      	add	fp, ip
    5fba:	46ac      	mov	ip, r5
    5fbc:	44e2      	add	sl, ip
    5fbe:	45aa      	cmp	sl, r5
    5fc0:	41ad      	sbcs	r5, r5
    5fc2:	426d      	negs	r5, r5
    5fc4:	4445      	add	r5, r8
    5fc6:	18ed      	adds	r5, r5, r3
    5fc8:	1a2d      	subs	r5, r5, r0
    5fca:	e696      	b.n	5cfa <__aeabi_ddiv+0x2f6>
    5fcc:	1e8a      	subs	r2, r1, #2
    5fce:	9903      	ldr	r1, [sp, #12]
    5fd0:	004d      	lsls	r5, r1, #1
    5fd2:	428d      	cmp	r5, r1
    5fd4:	4189      	sbcs	r1, r1
    5fd6:	4249      	negs	r1, r1
    5fd8:	4441      	add	r1, r8
    5fda:	1876      	adds	r6, r6, r1
    5fdc:	9503      	str	r5, [sp, #12]
    5fde:	e78f      	b.n	5f00 <__aeabi_ddiv+0x4fc>
    5fe0:	201f      	movs	r0, #31
    5fe2:	4240      	negs	r0, r0
    5fe4:	1ac3      	subs	r3, r0, r3
    5fe6:	4658      	mov	r0, fp
    5fe8:	40d8      	lsrs	r0, r3
    5fea:	0003      	movs	r3, r0
    5fec:	2a20      	cmp	r2, #32
    5fee:	d028      	beq.n	6042 <__aeabi_ddiv+0x63e>
    5ff0:	2040      	movs	r0, #64	; 0x40
    5ff2:	465d      	mov	r5, fp
    5ff4:	1a82      	subs	r2, r0, r2
    5ff6:	4095      	lsls	r5, r2
    5ff8:	4329      	orrs	r1, r5
    5ffa:	1e4a      	subs	r2, r1, #1
    5ffc:	4191      	sbcs	r1, r2
    5ffe:	4319      	orrs	r1, r3
    6000:	2307      	movs	r3, #7
    6002:	2200      	movs	r2, #0
    6004:	400b      	ands	r3, r1
    6006:	d009      	beq.n	601c <__aeabi_ddiv+0x618>
    6008:	230f      	movs	r3, #15
    600a:	2200      	movs	r2, #0
    600c:	400b      	ands	r3, r1
    600e:	0008      	movs	r0, r1
    6010:	2b04      	cmp	r3, #4
    6012:	d1bd      	bne.n	5f90 <__aeabi_ddiv+0x58c>
    6014:	0001      	movs	r1, r0
    6016:	0753      	lsls	r3, r2, #29
    6018:	0252      	lsls	r2, r2, #9
    601a:	0b12      	lsrs	r2, r2, #12
    601c:	08c9      	lsrs	r1, r1, #3
    601e:	4319      	orrs	r1, r3
    6020:	2301      	movs	r3, #1
    6022:	4688      	mov	r8, r1
    6024:	9902      	ldr	r1, [sp, #8]
    6026:	2400      	movs	r4, #0
    6028:	4019      	ands	r1, r3
    602a:	468c      	mov	ip, r1
    602c:	e5b8      	b.n	5ba0 <__aeabi_ddiv+0x19c>
    602e:	4552      	cmp	r2, sl
    6030:	d8be      	bhi.n	5fb0 <__aeabi_ddiv+0x5ac>
    6032:	468b      	mov	fp, r1
    6034:	2500      	movs	r5, #0
    6036:	e660      	b.n	5cfa <__aeabi_ddiv+0x2f6>
    6038:	9d03      	ldr	r5, [sp, #12]
    603a:	429d      	cmp	r5, r3
    603c:	d3c6      	bcc.n	5fcc <__aeabi_ddiv+0x5c8>
    603e:	0011      	movs	r1, r2
    6040:	e762      	b.n	5f08 <__aeabi_ddiv+0x504>
    6042:	2500      	movs	r5, #0
    6044:	e7d8      	b.n	5ff8 <__aeabi_ddiv+0x5f4>
    6046:	2280      	movs	r2, #128	; 0x80
    6048:	465b      	mov	r3, fp
    604a:	0312      	lsls	r2, r2, #12
    604c:	431a      	orrs	r2, r3
    604e:	9b01      	ldr	r3, [sp, #4]
    6050:	0312      	lsls	r2, r2, #12
    6052:	0b12      	lsrs	r2, r2, #12
    6054:	469c      	mov	ip, r3
    6056:	4688      	mov	r8, r1
    6058:	4c03      	ldr	r4, [pc, #12]	; (6068 <__aeabi_ddiv+0x664>)
    605a:	e5a1      	b.n	5ba0 <__aeabi_ddiv+0x19c>
    605c:	000003ff 	.word	0x000003ff
    6060:	feffffff 	.word	0xfeffffff
    6064:	000007fe 	.word	0x000007fe
    6068:	000007ff 	.word	0x000007ff

0000606c <__eqdf2>:
    606c:	b5f0      	push	{r4, r5, r6, r7, lr}
    606e:	464f      	mov	r7, r9
    6070:	4646      	mov	r6, r8
    6072:	46d6      	mov	lr, sl
    6074:	005c      	lsls	r4, r3, #1
    6076:	b5c0      	push	{r6, r7, lr}
    6078:	031f      	lsls	r7, r3, #12
    607a:	0fdb      	lsrs	r3, r3, #31
    607c:	469a      	mov	sl, r3
    607e:	4b17      	ldr	r3, [pc, #92]	; (60dc <__eqdf2+0x70>)
    6080:	030e      	lsls	r6, r1, #12
    6082:	004d      	lsls	r5, r1, #1
    6084:	4684      	mov	ip, r0
    6086:	4680      	mov	r8, r0
    6088:	0b36      	lsrs	r6, r6, #12
    608a:	0d6d      	lsrs	r5, r5, #21
    608c:	0fc9      	lsrs	r1, r1, #31
    608e:	4691      	mov	r9, r2
    6090:	0b3f      	lsrs	r7, r7, #12
    6092:	0d64      	lsrs	r4, r4, #21
    6094:	2001      	movs	r0, #1
    6096:	429d      	cmp	r5, r3
    6098:	d008      	beq.n	60ac <__eqdf2+0x40>
    609a:	429c      	cmp	r4, r3
    609c:	d001      	beq.n	60a2 <__eqdf2+0x36>
    609e:	42a5      	cmp	r5, r4
    60a0:	d00b      	beq.n	60ba <__eqdf2+0x4e>
    60a2:	bc1c      	pop	{r2, r3, r4}
    60a4:	4690      	mov	r8, r2
    60a6:	4699      	mov	r9, r3
    60a8:	46a2      	mov	sl, r4
    60aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60ac:	4663      	mov	r3, ip
    60ae:	4333      	orrs	r3, r6
    60b0:	d1f7      	bne.n	60a2 <__eqdf2+0x36>
    60b2:	42ac      	cmp	r4, r5
    60b4:	d1f5      	bne.n	60a2 <__eqdf2+0x36>
    60b6:	433a      	orrs	r2, r7
    60b8:	d1f3      	bne.n	60a2 <__eqdf2+0x36>
    60ba:	2001      	movs	r0, #1
    60bc:	42be      	cmp	r6, r7
    60be:	d1f0      	bne.n	60a2 <__eqdf2+0x36>
    60c0:	45c8      	cmp	r8, r9
    60c2:	d1ee      	bne.n	60a2 <__eqdf2+0x36>
    60c4:	4551      	cmp	r1, sl
    60c6:	d007      	beq.n	60d8 <__eqdf2+0x6c>
    60c8:	2d00      	cmp	r5, #0
    60ca:	d1ea      	bne.n	60a2 <__eqdf2+0x36>
    60cc:	4663      	mov	r3, ip
    60ce:	431e      	orrs	r6, r3
    60d0:	0030      	movs	r0, r6
    60d2:	1e46      	subs	r6, r0, #1
    60d4:	41b0      	sbcs	r0, r6
    60d6:	e7e4      	b.n	60a2 <__eqdf2+0x36>
    60d8:	2000      	movs	r0, #0
    60da:	e7e2      	b.n	60a2 <__eqdf2+0x36>
    60dc:	000007ff 	.word	0x000007ff

000060e0 <__gedf2>:
    60e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    60e2:	4645      	mov	r5, r8
    60e4:	46de      	mov	lr, fp
    60e6:	4657      	mov	r7, sl
    60e8:	464e      	mov	r6, r9
    60ea:	b5e0      	push	{r5, r6, r7, lr}
    60ec:	031f      	lsls	r7, r3, #12
    60ee:	0b3d      	lsrs	r5, r7, #12
    60f0:	4f2c      	ldr	r7, [pc, #176]	; (61a4 <__gedf2+0xc4>)
    60f2:	030e      	lsls	r6, r1, #12
    60f4:	004c      	lsls	r4, r1, #1
    60f6:	46ab      	mov	fp, r5
    60f8:	005d      	lsls	r5, r3, #1
    60fa:	4684      	mov	ip, r0
    60fc:	0b36      	lsrs	r6, r6, #12
    60fe:	0d64      	lsrs	r4, r4, #21
    6100:	0fc9      	lsrs	r1, r1, #31
    6102:	4690      	mov	r8, r2
    6104:	0d6d      	lsrs	r5, r5, #21
    6106:	0fdb      	lsrs	r3, r3, #31
    6108:	42bc      	cmp	r4, r7
    610a:	d02a      	beq.n	6162 <__gedf2+0x82>
    610c:	4f25      	ldr	r7, [pc, #148]	; (61a4 <__gedf2+0xc4>)
    610e:	42bd      	cmp	r5, r7
    6110:	d02d      	beq.n	616e <__gedf2+0x8e>
    6112:	2c00      	cmp	r4, #0
    6114:	d10f      	bne.n	6136 <__gedf2+0x56>
    6116:	4330      	orrs	r0, r6
    6118:	0007      	movs	r7, r0
    611a:	4681      	mov	r9, r0
    611c:	4278      	negs	r0, r7
    611e:	4178      	adcs	r0, r7
    6120:	b2c0      	uxtb	r0, r0
    6122:	2d00      	cmp	r5, #0
    6124:	d117      	bne.n	6156 <__gedf2+0x76>
    6126:	465f      	mov	r7, fp
    6128:	433a      	orrs	r2, r7
    612a:	d114      	bne.n	6156 <__gedf2+0x76>
    612c:	464b      	mov	r3, r9
    612e:	2000      	movs	r0, #0
    6130:	2b00      	cmp	r3, #0
    6132:	d00a      	beq.n	614a <__gedf2+0x6a>
    6134:	e006      	b.n	6144 <__gedf2+0x64>
    6136:	2d00      	cmp	r5, #0
    6138:	d102      	bne.n	6140 <__gedf2+0x60>
    613a:	4658      	mov	r0, fp
    613c:	4302      	orrs	r2, r0
    613e:	d001      	beq.n	6144 <__gedf2+0x64>
    6140:	4299      	cmp	r1, r3
    6142:	d018      	beq.n	6176 <__gedf2+0x96>
    6144:	4248      	negs	r0, r1
    6146:	2101      	movs	r1, #1
    6148:	4308      	orrs	r0, r1
    614a:	bc3c      	pop	{r2, r3, r4, r5}
    614c:	4690      	mov	r8, r2
    614e:	4699      	mov	r9, r3
    6150:	46a2      	mov	sl, r4
    6152:	46ab      	mov	fp, r5
    6154:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6156:	2800      	cmp	r0, #0
    6158:	d0f2      	beq.n	6140 <__gedf2+0x60>
    615a:	2001      	movs	r0, #1
    615c:	3b01      	subs	r3, #1
    615e:	4318      	orrs	r0, r3
    6160:	e7f3      	b.n	614a <__gedf2+0x6a>
    6162:	0037      	movs	r7, r6
    6164:	4307      	orrs	r7, r0
    6166:	d0d1      	beq.n	610c <__gedf2+0x2c>
    6168:	2002      	movs	r0, #2
    616a:	4240      	negs	r0, r0
    616c:	e7ed      	b.n	614a <__gedf2+0x6a>
    616e:	465f      	mov	r7, fp
    6170:	4317      	orrs	r7, r2
    6172:	d0ce      	beq.n	6112 <__gedf2+0x32>
    6174:	e7f8      	b.n	6168 <__gedf2+0x88>
    6176:	42ac      	cmp	r4, r5
    6178:	dce4      	bgt.n	6144 <__gedf2+0x64>
    617a:	da03      	bge.n	6184 <__gedf2+0xa4>
    617c:	1e48      	subs	r0, r1, #1
    617e:	2101      	movs	r1, #1
    6180:	4308      	orrs	r0, r1
    6182:	e7e2      	b.n	614a <__gedf2+0x6a>
    6184:	455e      	cmp	r6, fp
    6186:	d8dd      	bhi.n	6144 <__gedf2+0x64>
    6188:	d006      	beq.n	6198 <__gedf2+0xb8>
    618a:	2000      	movs	r0, #0
    618c:	455e      	cmp	r6, fp
    618e:	d2dc      	bcs.n	614a <__gedf2+0x6a>
    6190:	2301      	movs	r3, #1
    6192:	1e48      	subs	r0, r1, #1
    6194:	4318      	orrs	r0, r3
    6196:	e7d8      	b.n	614a <__gedf2+0x6a>
    6198:	45c4      	cmp	ip, r8
    619a:	d8d3      	bhi.n	6144 <__gedf2+0x64>
    619c:	2000      	movs	r0, #0
    619e:	45c4      	cmp	ip, r8
    61a0:	d3f6      	bcc.n	6190 <__gedf2+0xb0>
    61a2:	e7d2      	b.n	614a <__gedf2+0x6a>
    61a4:	000007ff 	.word	0x000007ff

000061a8 <__ledf2>:
    61a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    61aa:	464e      	mov	r6, r9
    61ac:	4645      	mov	r5, r8
    61ae:	46de      	mov	lr, fp
    61b0:	4657      	mov	r7, sl
    61b2:	005c      	lsls	r4, r3, #1
    61b4:	b5e0      	push	{r5, r6, r7, lr}
    61b6:	031f      	lsls	r7, r3, #12
    61b8:	0fdb      	lsrs	r3, r3, #31
    61ba:	4699      	mov	r9, r3
    61bc:	4b2a      	ldr	r3, [pc, #168]	; (6268 <__ledf2+0xc0>)
    61be:	030e      	lsls	r6, r1, #12
    61c0:	004d      	lsls	r5, r1, #1
    61c2:	0fc9      	lsrs	r1, r1, #31
    61c4:	4684      	mov	ip, r0
    61c6:	0b36      	lsrs	r6, r6, #12
    61c8:	0d6d      	lsrs	r5, r5, #21
    61ca:	468b      	mov	fp, r1
    61cc:	4690      	mov	r8, r2
    61ce:	0b3f      	lsrs	r7, r7, #12
    61d0:	0d64      	lsrs	r4, r4, #21
    61d2:	429d      	cmp	r5, r3
    61d4:	d020      	beq.n	6218 <__ledf2+0x70>
    61d6:	4b24      	ldr	r3, [pc, #144]	; (6268 <__ledf2+0xc0>)
    61d8:	429c      	cmp	r4, r3
    61da:	d022      	beq.n	6222 <__ledf2+0x7a>
    61dc:	2d00      	cmp	r5, #0
    61de:	d112      	bne.n	6206 <__ledf2+0x5e>
    61e0:	4330      	orrs	r0, r6
    61e2:	4243      	negs	r3, r0
    61e4:	4143      	adcs	r3, r0
    61e6:	b2db      	uxtb	r3, r3
    61e8:	2c00      	cmp	r4, #0
    61ea:	d01f      	beq.n	622c <__ledf2+0x84>
    61ec:	2b00      	cmp	r3, #0
    61ee:	d00c      	beq.n	620a <__ledf2+0x62>
    61f0:	464b      	mov	r3, r9
    61f2:	2001      	movs	r0, #1
    61f4:	3b01      	subs	r3, #1
    61f6:	4303      	orrs	r3, r0
    61f8:	0018      	movs	r0, r3
    61fa:	bc3c      	pop	{r2, r3, r4, r5}
    61fc:	4690      	mov	r8, r2
    61fe:	4699      	mov	r9, r3
    6200:	46a2      	mov	sl, r4
    6202:	46ab      	mov	fp, r5
    6204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6206:	2c00      	cmp	r4, #0
    6208:	d016      	beq.n	6238 <__ledf2+0x90>
    620a:	45cb      	cmp	fp, r9
    620c:	d017      	beq.n	623e <__ledf2+0x96>
    620e:	465b      	mov	r3, fp
    6210:	4259      	negs	r1, r3
    6212:	2301      	movs	r3, #1
    6214:	430b      	orrs	r3, r1
    6216:	e7ef      	b.n	61f8 <__ledf2+0x50>
    6218:	0031      	movs	r1, r6
    621a:	2302      	movs	r3, #2
    621c:	4301      	orrs	r1, r0
    621e:	d1eb      	bne.n	61f8 <__ledf2+0x50>
    6220:	e7d9      	b.n	61d6 <__ledf2+0x2e>
    6222:	0039      	movs	r1, r7
    6224:	2302      	movs	r3, #2
    6226:	4311      	orrs	r1, r2
    6228:	d1e6      	bne.n	61f8 <__ledf2+0x50>
    622a:	e7d7      	b.n	61dc <__ledf2+0x34>
    622c:	433a      	orrs	r2, r7
    622e:	d1dd      	bne.n	61ec <__ledf2+0x44>
    6230:	2300      	movs	r3, #0
    6232:	2800      	cmp	r0, #0
    6234:	d0e0      	beq.n	61f8 <__ledf2+0x50>
    6236:	e7ea      	b.n	620e <__ledf2+0x66>
    6238:	433a      	orrs	r2, r7
    623a:	d1e6      	bne.n	620a <__ledf2+0x62>
    623c:	e7e7      	b.n	620e <__ledf2+0x66>
    623e:	42a5      	cmp	r5, r4
    6240:	dce5      	bgt.n	620e <__ledf2+0x66>
    6242:	db05      	blt.n	6250 <__ledf2+0xa8>
    6244:	42be      	cmp	r6, r7
    6246:	d8e2      	bhi.n	620e <__ledf2+0x66>
    6248:	d007      	beq.n	625a <__ledf2+0xb2>
    624a:	2300      	movs	r3, #0
    624c:	42be      	cmp	r6, r7
    624e:	d2d3      	bcs.n	61f8 <__ledf2+0x50>
    6250:	4659      	mov	r1, fp
    6252:	2301      	movs	r3, #1
    6254:	3901      	subs	r1, #1
    6256:	430b      	orrs	r3, r1
    6258:	e7ce      	b.n	61f8 <__ledf2+0x50>
    625a:	45c4      	cmp	ip, r8
    625c:	d8d7      	bhi.n	620e <__ledf2+0x66>
    625e:	2300      	movs	r3, #0
    6260:	45c4      	cmp	ip, r8
    6262:	d3f5      	bcc.n	6250 <__ledf2+0xa8>
    6264:	e7c8      	b.n	61f8 <__ledf2+0x50>
    6266:	46c0      	nop			; (mov r8, r8)
    6268:	000007ff 	.word	0x000007ff

0000626c <__aeabi_dmul>:
    626c:	b5f0      	push	{r4, r5, r6, r7, lr}
    626e:	4657      	mov	r7, sl
    6270:	4645      	mov	r5, r8
    6272:	46de      	mov	lr, fp
    6274:	464e      	mov	r6, r9
    6276:	b5e0      	push	{r5, r6, r7, lr}
    6278:	030c      	lsls	r4, r1, #12
    627a:	4698      	mov	r8, r3
    627c:	004e      	lsls	r6, r1, #1
    627e:	0b23      	lsrs	r3, r4, #12
    6280:	b087      	sub	sp, #28
    6282:	0007      	movs	r7, r0
    6284:	4692      	mov	sl, r2
    6286:	469b      	mov	fp, r3
    6288:	0d76      	lsrs	r6, r6, #21
    628a:	0fcd      	lsrs	r5, r1, #31
    628c:	2e00      	cmp	r6, #0
    628e:	d06b      	beq.n	6368 <__aeabi_dmul+0xfc>
    6290:	4b6d      	ldr	r3, [pc, #436]	; (6448 <__aeabi_dmul+0x1dc>)
    6292:	429e      	cmp	r6, r3
    6294:	d035      	beq.n	6302 <__aeabi_dmul+0x96>
    6296:	2480      	movs	r4, #128	; 0x80
    6298:	465b      	mov	r3, fp
    629a:	0f42      	lsrs	r2, r0, #29
    629c:	0424      	lsls	r4, r4, #16
    629e:	00db      	lsls	r3, r3, #3
    62a0:	4314      	orrs	r4, r2
    62a2:	431c      	orrs	r4, r3
    62a4:	00c3      	lsls	r3, r0, #3
    62a6:	4699      	mov	r9, r3
    62a8:	4b68      	ldr	r3, [pc, #416]	; (644c <__aeabi_dmul+0x1e0>)
    62aa:	46a3      	mov	fp, r4
    62ac:	469c      	mov	ip, r3
    62ae:	2300      	movs	r3, #0
    62b0:	2700      	movs	r7, #0
    62b2:	4466      	add	r6, ip
    62b4:	9302      	str	r3, [sp, #8]
    62b6:	4643      	mov	r3, r8
    62b8:	031c      	lsls	r4, r3, #12
    62ba:	005a      	lsls	r2, r3, #1
    62bc:	0fdb      	lsrs	r3, r3, #31
    62be:	4650      	mov	r0, sl
    62c0:	0b24      	lsrs	r4, r4, #12
    62c2:	0d52      	lsrs	r2, r2, #21
    62c4:	4698      	mov	r8, r3
    62c6:	d100      	bne.n	62ca <__aeabi_dmul+0x5e>
    62c8:	e076      	b.n	63b8 <__aeabi_dmul+0x14c>
    62ca:	4b5f      	ldr	r3, [pc, #380]	; (6448 <__aeabi_dmul+0x1dc>)
    62cc:	429a      	cmp	r2, r3
    62ce:	d06d      	beq.n	63ac <__aeabi_dmul+0x140>
    62d0:	2380      	movs	r3, #128	; 0x80
    62d2:	0f41      	lsrs	r1, r0, #29
    62d4:	041b      	lsls	r3, r3, #16
    62d6:	430b      	orrs	r3, r1
    62d8:	495c      	ldr	r1, [pc, #368]	; (644c <__aeabi_dmul+0x1e0>)
    62da:	00e4      	lsls	r4, r4, #3
    62dc:	468c      	mov	ip, r1
    62de:	431c      	orrs	r4, r3
    62e0:	00c3      	lsls	r3, r0, #3
    62e2:	2000      	movs	r0, #0
    62e4:	4462      	add	r2, ip
    62e6:	4641      	mov	r1, r8
    62e8:	18b6      	adds	r6, r6, r2
    62ea:	4069      	eors	r1, r5
    62ec:	1c72      	adds	r2, r6, #1
    62ee:	9101      	str	r1, [sp, #4]
    62f0:	4694      	mov	ip, r2
    62f2:	4307      	orrs	r7, r0
    62f4:	2f0f      	cmp	r7, #15
    62f6:	d900      	bls.n	62fa <__aeabi_dmul+0x8e>
    62f8:	e0b0      	b.n	645c <__aeabi_dmul+0x1f0>
    62fa:	4a55      	ldr	r2, [pc, #340]	; (6450 <__aeabi_dmul+0x1e4>)
    62fc:	00bf      	lsls	r7, r7, #2
    62fe:	59d2      	ldr	r2, [r2, r7]
    6300:	4697      	mov	pc, r2
    6302:	465b      	mov	r3, fp
    6304:	4303      	orrs	r3, r0
    6306:	4699      	mov	r9, r3
    6308:	d000      	beq.n	630c <__aeabi_dmul+0xa0>
    630a:	e087      	b.n	641c <__aeabi_dmul+0x1b0>
    630c:	2300      	movs	r3, #0
    630e:	469b      	mov	fp, r3
    6310:	3302      	adds	r3, #2
    6312:	2708      	movs	r7, #8
    6314:	9302      	str	r3, [sp, #8]
    6316:	e7ce      	b.n	62b6 <__aeabi_dmul+0x4a>
    6318:	4642      	mov	r2, r8
    631a:	9201      	str	r2, [sp, #4]
    631c:	2802      	cmp	r0, #2
    631e:	d067      	beq.n	63f0 <__aeabi_dmul+0x184>
    6320:	2803      	cmp	r0, #3
    6322:	d100      	bne.n	6326 <__aeabi_dmul+0xba>
    6324:	e20e      	b.n	6744 <__aeabi_dmul+0x4d8>
    6326:	2801      	cmp	r0, #1
    6328:	d000      	beq.n	632c <__aeabi_dmul+0xc0>
    632a:	e162      	b.n	65f2 <__aeabi_dmul+0x386>
    632c:	2300      	movs	r3, #0
    632e:	2400      	movs	r4, #0
    6330:	2200      	movs	r2, #0
    6332:	4699      	mov	r9, r3
    6334:	9901      	ldr	r1, [sp, #4]
    6336:	4001      	ands	r1, r0
    6338:	b2cd      	uxtb	r5, r1
    633a:	2100      	movs	r1, #0
    633c:	0312      	lsls	r2, r2, #12
    633e:	0d0b      	lsrs	r3, r1, #20
    6340:	0b12      	lsrs	r2, r2, #12
    6342:	051b      	lsls	r3, r3, #20
    6344:	4313      	orrs	r3, r2
    6346:	4a43      	ldr	r2, [pc, #268]	; (6454 <__aeabi_dmul+0x1e8>)
    6348:	0524      	lsls	r4, r4, #20
    634a:	4013      	ands	r3, r2
    634c:	431c      	orrs	r4, r3
    634e:	0064      	lsls	r4, r4, #1
    6350:	07ed      	lsls	r5, r5, #31
    6352:	0864      	lsrs	r4, r4, #1
    6354:	432c      	orrs	r4, r5
    6356:	4648      	mov	r0, r9
    6358:	0021      	movs	r1, r4
    635a:	b007      	add	sp, #28
    635c:	bc3c      	pop	{r2, r3, r4, r5}
    635e:	4690      	mov	r8, r2
    6360:	4699      	mov	r9, r3
    6362:	46a2      	mov	sl, r4
    6364:	46ab      	mov	fp, r5
    6366:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6368:	4303      	orrs	r3, r0
    636a:	4699      	mov	r9, r3
    636c:	d04f      	beq.n	640e <__aeabi_dmul+0x1a2>
    636e:	465b      	mov	r3, fp
    6370:	2b00      	cmp	r3, #0
    6372:	d100      	bne.n	6376 <__aeabi_dmul+0x10a>
    6374:	e189      	b.n	668a <__aeabi_dmul+0x41e>
    6376:	4658      	mov	r0, fp
    6378:	f000 feb8 	bl	70ec <__clzsi2>
    637c:	0003      	movs	r3, r0
    637e:	3b0b      	subs	r3, #11
    6380:	2b1c      	cmp	r3, #28
    6382:	dd00      	ble.n	6386 <__aeabi_dmul+0x11a>
    6384:	e17a      	b.n	667c <__aeabi_dmul+0x410>
    6386:	221d      	movs	r2, #29
    6388:	1ad3      	subs	r3, r2, r3
    638a:	003a      	movs	r2, r7
    638c:	0001      	movs	r1, r0
    638e:	465c      	mov	r4, fp
    6390:	40da      	lsrs	r2, r3
    6392:	3908      	subs	r1, #8
    6394:	408c      	lsls	r4, r1
    6396:	0013      	movs	r3, r2
    6398:	408f      	lsls	r7, r1
    639a:	4323      	orrs	r3, r4
    639c:	469b      	mov	fp, r3
    639e:	46b9      	mov	r9, r7
    63a0:	2300      	movs	r3, #0
    63a2:	4e2d      	ldr	r6, [pc, #180]	; (6458 <__aeabi_dmul+0x1ec>)
    63a4:	2700      	movs	r7, #0
    63a6:	1a36      	subs	r6, r6, r0
    63a8:	9302      	str	r3, [sp, #8]
    63aa:	e784      	b.n	62b6 <__aeabi_dmul+0x4a>
    63ac:	4653      	mov	r3, sl
    63ae:	4323      	orrs	r3, r4
    63b0:	d12a      	bne.n	6408 <__aeabi_dmul+0x19c>
    63b2:	2400      	movs	r4, #0
    63b4:	2002      	movs	r0, #2
    63b6:	e796      	b.n	62e6 <__aeabi_dmul+0x7a>
    63b8:	4653      	mov	r3, sl
    63ba:	4323      	orrs	r3, r4
    63bc:	d020      	beq.n	6400 <__aeabi_dmul+0x194>
    63be:	2c00      	cmp	r4, #0
    63c0:	d100      	bne.n	63c4 <__aeabi_dmul+0x158>
    63c2:	e157      	b.n	6674 <__aeabi_dmul+0x408>
    63c4:	0020      	movs	r0, r4
    63c6:	f000 fe91 	bl	70ec <__clzsi2>
    63ca:	0003      	movs	r3, r0
    63cc:	3b0b      	subs	r3, #11
    63ce:	2b1c      	cmp	r3, #28
    63d0:	dd00      	ble.n	63d4 <__aeabi_dmul+0x168>
    63d2:	e149      	b.n	6668 <__aeabi_dmul+0x3fc>
    63d4:	211d      	movs	r1, #29
    63d6:	1acb      	subs	r3, r1, r3
    63d8:	4651      	mov	r1, sl
    63da:	0002      	movs	r2, r0
    63dc:	40d9      	lsrs	r1, r3
    63de:	4653      	mov	r3, sl
    63e0:	3a08      	subs	r2, #8
    63e2:	4094      	lsls	r4, r2
    63e4:	4093      	lsls	r3, r2
    63e6:	430c      	orrs	r4, r1
    63e8:	4a1b      	ldr	r2, [pc, #108]	; (6458 <__aeabi_dmul+0x1ec>)
    63ea:	1a12      	subs	r2, r2, r0
    63ec:	2000      	movs	r0, #0
    63ee:	e77a      	b.n	62e6 <__aeabi_dmul+0x7a>
    63f0:	2501      	movs	r5, #1
    63f2:	9b01      	ldr	r3, [sp, #4]
    63f4:	4c14      	ldr	r4, [pc, #80]	; (6448 <__aeabi_dmul+0x1dc>)
    63f6:	401d      	ands	r5, r3
    63f8:	2300      	movs	r3, #0
    63fa:	2200      	movs	r2, #0
    63fc:	4699      	mov	r9, r3
    63fe:	e79c      	b.n	633a <__aeabi_dmul+0xce>
    6400:	2400      	movs	r4, #0
    6402:	2200      	movs	r2, #0
    6404:	2001      	movs	r0, #1
    6406:	e76e      	b.n	62e6 <__aeabi_dmul+0x7a>
    6408:	4653      	mov	r3, sl
    640a:	2003      	movs	r0, #3
    640c:	e76b      	b.n	62e6 <__aeabi_dmul+0x7a>
    640e:	2300      	movs	r3, #0
    6410:	469b      	mov	fp, r3
    6412:	3301      	adds	r3, #1
    6414:	2704      	movs	r7, #4
    6416:	2600      	movs	r6, #0
    6418:	9302      	str	r3, [sp, #8]
    641a:	e74c      	b.n	62b6 <__aeabi_dmul+0x4a>
    641c:	2303      	movs	r3, #3
    641e:	4681      	mov	r9, r0
    6420:	270c      	movs	r7, #12
    6422:	9302      	str	r3, [sp, #8]
    6424:	e747      	b.n	62b6 <__aeabi_dmul+0x4a>
    6426:	2280      	movs	r2, #128	; 0x80
    6428:	2300      	movs	r3, #0
    642a:	2500      	movs	r5, #0
    642c:	0312      	lsls	r2, r2, #12
    642e:	4699      	mov	r9, r3
    6430:	4c05      	ldr	r4, [pc, #20]	; (6448 <__aeabi_dmul+0x1dc>)
    6432:	e782      	b.n	633a <__aeabi_dmul+0xce>
    6434:	465c      	mov	r4, fp
    6436:	464b      	mov	r3, r9
    6438:	9802      	ldr	r0, [sp, #8]
    643a:	e76f      	b.n	631c <__aeabi_dmul+0xb0>
    643c:	465c      	mov	r4, fp
    643e:	464b      	mov	r3, r9
    6440:	9501      	str	r5, [sp, #4]
    6442:	9802      	ldr	r0, [sp, #8]
    6444:	e76a      	b.n	631c <__aeabi_dmul+0xb0>
    6446:	46c0      	nop			; (mov r8, r8)
    6448:	000007ff 	.word	0x000007ff
    644c:	fffffc01 	.word	0xfffffc01
    6450:	00007238 	.word	0x00007238
    6454:	800fffff 	.word	0x800fffff
    6458:	fffffc0d 	.word	0xfffffc0d
    645c:	464a      	mov	r2, r9
    645e:	4649      	mov	r1, r9
    6460:	0c17      	lsrs	r7, r2, #16
    6462:	0c1a      	lsrs	r2, r3, #16
    6464:	041b      	lsls	r3, r3, #16
    6466:	0c1b      	lsrs	r3, r3, #16
    6468:	0408      	lsls	r0, r1, #16
    646a:	0019      	movs	r1, r3
    646c:	0c00      	lsrs	r0, r0, #16
    646e:	4341      	muls	r1, r0
    6470:	0015      	movs	r5, r2
    6472:	4688      	mov	r8, r1
    6474:	0019      	movs	r1, r3
    6476:	437d      	muls	r5, r7
    6478:	4379      	muls	r1, r7
    647a:	9503      	str	r5, [sp, #12]
    647c:	4689      	mov	r9, r1
    647e:	0029      	movs	r1, r5
    6480:	0015      	movs	r5, r2
    6482:	4345      	muls	r5, r0
    6484:	444d      	add	r5, r9
    6486:	9502      	str	r5, [sp, #8]
    6488:	4645      	mov	r5, r8
    648a:	0c2d      	lsrs	r5, r5, #16
    648c:	46aa      	mov	sl, r5
    648e:	9d02      	ldr	r5, [sp, #8]
    6490:	4455      	add	r5, sl
    6492:	45a9      	cmp	r9, r5
    6494:	d906      	bls.n	64a4 <__aeabi_dmul+0x238>
    6496:	468a      	mov	sl, r1
    6498:	2180      	movs	r1, #128	; 0x80
    649a:	0249      	lsls	r1, r1, #9
    649c:	4689      	mov	r9, r1
    649e:	44ca      	add	sl, r9
    64a0:	4651      	mov	r1, sl
    64a2:	9103      	str	r1, [sp, #12]
    64a4:	0c29      	lsrs	r1, r5, #16
    64a6:	9104      	str	r1, [sp, #16]
    64a8:	4641      	mov	r1, r8
    64aa:	0409      	lsls	r1, r1, #16
    64ac:	042d      	lsls	r5, r5, #16
    64ae:	0c09      	lsrs	r1, r1, #16
    64b0:	4688      	mov	r8, r1
    64b2:	0029      	movs	r1, r5
    64b4:	0c25      	lsrs	r5, r4, #16
    64b6:	0424      	lsls	r4, r4, #16
    64b8:	4441      	add	r1, r8
    64ba:	0c24      	lsrs	r4, r4, #16
    64bc:	9105      	str	r1, [sp, #20]
    64be:	0021      	movs	r1, r4
    64c0:	4341      	muls	r1, r0
    64c2:	4688      	mov	r8, r1
    64c4:	0021      	movs	r1, r4
    64c6:	4379      	muls	r1, r7
    64c8:	468a      	mov	sl, r1
    64ca:	4368      	muls	r0, r5
    64cc:	4641      	mov	r1, r8
    64ce:	4450      	add	r0, sl
    64d0:	4681      	mov	r9, r0
    64d2:	0c08      	lsrs	r0, r1, #16
    64d4:	4448      	add	r0, r9
    64d6:	436f      	muls	r7, r5
    64d8:	4582      	cmp	sl, r0
    64da:	d903      	bls.n	64e4 <__aeabi_dmul+0x278>
    64dc:	2180      	movs	r1, #128	; 0x80
    64de:	0249      	lsls	r1, r1, #9
    64e0:	4689      	mov	r9, r1
    64e2:	444f      	add	r7, r9
    64e4:	0c01      	lsrs	r1, r0, #16
    64e6:	4689      	mov	r9, r1
    64e8:	0039      	movs	r1, r7
    64ea:	4449      	add	r1, r9
    64ec:	9102      	str	r1, [sp, #8]
    64ee:	4641      	mov	r1, r8
    64f0:	040f      	lsls	r7, r1, #16
    64f2:	9904      	ldr	r1, [sp, #16]
    64f4:	0c3f      	lsrs	r7, r7, #16
    64f6:	4688      	mov	r8, r1
    64f8:	0400      	lsls	r0, r0, #16
    64fa:	19c0      	adds	r0, r0, r7
    64fc:	4480      	add	r8, r0
    64fe:	4641      	mov	r1, r8
    6500:	9104      	str	r1, [sp, #16]
    6502:	4659      	mov	r1, fp
    6504:	0c0f      	lsrs	r7, r1, #16
    6506:	0409      	lsls	r1, r1, #16
    6508:	0c09      	lsrs	r1, r1, #16
    650a:	4688      	mov	r8, r1
    650c:	4359      	muls	r1, r3
    650e:	468a      	mov	sl, r1
    6510:	0039      	movs	r1, r7
    6512:	4351      	muls	r1, r2
    6514:	4689      	mov	r9, r1
    6516:	4641      	mov	r1, r8
    6518:	434a      	muls	r2, r1
    651a:	4651      	mov	r1, sl
    651c:	0c09      	lsrs	r1, r1, #16
    651e:	468b      	mov	fp, r1
    6520:	437b      	muls	r3, r7
    6522:	18d2      	adds	r2, r2, r3
    6524:	445a      	add	r2, fp
    6526:	4293      	cmp	r3, r2
    6528:	d903      	bls.n	6532 <__aeabi_dmul+0x2c6>
    652a:	2380      	movs	r3, #128	; 0x80
    652c:	025b      	lsls	r3, r3, #9
    652e:	469b      	mov	fp, r3
    6530:	44d9      	add	r9, fp
    6532:	4651      	mov	r1, sl
    6534:	0409      	lsls	r1, r1, #16
    6536:	0c09      	lsrs	r1, r1, #16
    6538:	468a      	mov	sl, r1
    653a:	4641      	mov	r1, r8
    653c:	4361      	muls	r1, r4
    653e:	437c      	muls	r4, r7
    6540:	0c13      	lsrs	r3, r2, #16
    6542:	0412      	lsls	r2, r2, #16
    6544:	444b      	add	r3, r9
    6546:	4452      	add	r2, sl
    6548:	46a1      	mov	r9, r4
    654a:	468a      	mov	sl, r1
    654c:	003c      	movs	r4, r7
    654e:	4641      	mov	r1, r8
    6550:	436c      	muls	r4, r5
    6552:	434d      	muls	r5, r1
    6554:	4651      	mov	r1, sl
    6556:	444d      	add	r5, r9
    6558:	0c0f      	lsrs	r7, r1, #16
    655a:	197d      	adds	r5, r7, r5
    655c:	45a9      	cmp	r9, r5
    655e:	d903      	bls.n	6568 <__aeabi_dmul+0x2fc>
    6560:	2180      	movs	r1, #128	; 0x80
    6562:	0249      	lsls	r1, r1, #9
    6564:	4688      	mov	r8, r1
    6566:	4444      	add	r4, r8
    6568:	9f04      	ldr	r7, [sp, #16]
    656a:	9903      	ldr	r1, [sp, #12]
    656c:	46b8      	mov	r8, r7
    656e:	4441      	add	r1, r8
    6570:	468b      	mov	fp, r1
    6572:	4583      	cmp	fp, r0
    6574:	4180      	sbcs	r0, r0
    6576:	4241      	negs	r1, r0
    6578:	4688      	mov	r8, r1
    657a:	4651      	mov	r1, sl
    657c:	0408      	lsls	r0, r1, #16
    657e:	042f      	lsls	r7, r5, #16
    6580:	0c00      	lsrs	r0, r0, #16
    6582:	183f      	adds	r7, r7, r0
    6584:	4658      	mov	r0, fp
    6586:	9902      	ldr	r1, [sp, #8]
    6588:	1810      	adds	r0, r2, r0
    658a:	4689      	mov	r9, r1
    658c:	4290      	cmp	r0, r2
    658e:	4192      	sbcs	r2, r2
    6590:	444f      	add	r7, r9
    6592:	46ba      	mov	sl, r7
    6594:	4252      	negs	r2, r2
    6596:	4699      	mov	r9, r3
    6598:	4693      	mov	fp, r2
    659a:	44c2      	add	sl, r8
    659c:	44d1      	add	r9, sl
    659e:	44cb      	add	fp, r9
    65a0:	428f      	cmp	r7, r1
    65a2:	41bf      	sbcs	r7, r7
    65a4:	45c2      	cmp	sl, r8
    65a6:	4189      	sbcs	r1, r1
    65a8:	4599      	cmp	r9, r3
    65aa:	419b      	sbcs	r3, r3
    65ac:	4593      	cmp	fp, r2
    65ae:	4192      	sbcs	r2, r2
    65b0:	427f      	negs	r7, r7
    65b2:	4249      	negs	r1, r1
    65b4:	0c2d      	lsrs	r5, r5, #16
    65b6:	4252      	negs	r2, r2
    65b8:	430f      	orrs	r7, r1
    65ba:	425b      	negs	r3, r3
    65bc:	4313      	orrs	r3, r2
    65be:	197f      	adds	r7, r7, r5
    65c0:	18ff      	adds	r7, r7, r3
    65c2:	465b      	mov	r3, fp
    65c4:	193c      	adds	r4, r7, r4
    65c6:	0ddb      	lsrs	r3, r3, #23
    65c8:	9a05      	ldr	r2, [sp, #20]
    65ca:	0264      	lsls	r4, r4, #9
    65cc:	431c      	orrs	r4, r3
    65ce:	0243      	lsls	r3, r0, #9
    65d0:	4313      	orrs	r3, r2
    65d2:	1e5d      	subs	r5, r3, #1
    65d4:	41ab      	sbcs	r3, r5
    65d6:	465a      	mov	r2, fp
    65d8:	0dc0      	lsrs	r0, r0, #23
    65da:	4303      	orrs	r3, r0
    65dc:	0252      	lsls	r2, r2, #9
    65de:	4313      	orrs	r3, r2
    65e0:	01e2      	lsls	r2, r4, #7
    65e2:	d556      	bpl.n	6692 <__aeabi_dmul+0x426>
    65e4:	2001      	movs	r0, #1
    65e6:	085a      	lsrs	r2, r3, #1
    65e8:	4003      	ands	r3, r0
    65ea:	4313      	orrs	r3, r2
    65ec:	07e2      	lsls	r2, r4, #31
    65ee:	4313      	orrs	r3, r2
    65f0:	0864      	lsrs	r4, r4, #1
    65f2:	485a      	ldr	r0, [pc, #360]	; (675c <__aeabi_dmul+0x4f0>)
    65f4:	4460      	add	r0, ip
    65f6:	2800      	cmp	r0, #0
    65f8:	dd4d      	ble.n	6696 <__aeabi_dmul+0x42a>
    65fa:	075a      	lsls	r2, r3, #29
    65fc:	d009      	beq.n	6612 <__aeabi_dmul+0x3a6>
    65fe:	220f      	movs	r2, #15
    6600:	401a      	ands	r2, r3
    6602:	2a04      	cmp	r2, #4
    6604:	d005      	beq.n	6612 <__aeabi_dmul+0x3a6>
    6606:	1d1a      	adds	r2, r3, #4
    6608:	429a      	cmp	r2, r3
    660a:	419b      	sbcs	r3, r3
    660c:	425b      	negs	r3, r3
    660e:	18e4      	adds	r4, r4, r3
    6610:	0013      	movs	r3, r2
    6612:	01e2      	lsls	r2, r4, #7
    6614:	d504      	bpl.n	6620 <__aeabi_dmul+0x3b4>
    6616:	2080      	movs	r0, #128	; 0x80
    6618:	4a51      	ldr	r2, [pc, #324]	; (6760 <__aeabi_dmul+0x4f4>)
    661a:	00c0      	lsls	r0, r0, #3
    661c:	4014      	ands	r4, r2
    661e:	4460      	add	r0, ip
    6620:	4a50      	ldr	r2, [pc, #320]	; (6764 <__aeabi_dmul+0x4f8>)
    6622:	4290      	cmp	r0, r2
    6624:	dd00      	ble.n	6628 <__aeabi_dmul+0x3bc>
    6626:	e6e3      	b.n	63f0 <__aeabi_dmul+0x184>
    6628:	2501      	movs	r5, #1
    662a:	08db      	lsrs	r3, r3, #3
    662c:	0762      	lsls	r2, r4, #29
    662e:	431a      	orrs	r2, r3
    6630:	0264      	lsls	r4, r4, #9
    6632:	9b01      	ldr	r3, [sp, #4]
    6634:	4691      	mov	r9, r2
    6636:	0b22      	lsrs	r2, r4, #12
    6638:	0544      	lsls	r4, r0, #21
    663a:	0d64      	lsrs	r4, r4, #21
    663c:	401d      	ands	r5, r3
    663e:	e67c      	b.n	633a <__aeabi_dmul+0xce>
    6640:	2280      	movs	r2, #128	; 0x80
    6642:	4659      	mov	r1, fp
    6644:	0312      	lsls	r2, r2, #12
    6646:	4211      	tst	r1, r2
    6648:	d008      	beq.n	665c <__aeabi_dmul+0x3f0>
    664a:	4214      	tst	r4, r2
    664c:	d106      	bne.n	665c <__aeabi_dmul+0x3f0>
    664e:	4322      	orrs	r2, r4
    6650:	0312      	lsls	r2, r2, #12
    6652:	0b12      	lsrs	r2, r2, #12
    6654:	4645      	mov	r5, r8
    6656:	4699      	mov	r9, r3
    6658:	4c43      	ldr	r4, [pc, #268]	; (6768 <__aeabi_dmul+0x4fc>)
    665a:	e66e      	b.n	633a <__aeabi_dmul+0xce>
    665c:	465b      	mov	r3, fp
    665e:	431a      	orrs	r2, r3
    6660:	0312      	lsls	r2, r2, #12
    6662:	0b12      	lsrs	r2, r2, #12
    6664:	4c40      	ldr	r4, [pc, #256]	; (6768 <__aeabi_dmul+0x4fc>)
    6666:	e668      	b.n	633a <__aeabi_dmul+0xce>
    6668:	0003      	movs	r3, r0
    666a:	4654      	mov	r4, sl
    666c:	3b28      	subs	r3, #40	; 0x28
    666e:	409c      	lsls	r4, r3
    6670:	2300      	movs	r3, #0
    6672:	e6b9      	b.n	63e8 <__aeabi_dmul+0x17c>
    6674:	f000 fd3a 	bl	70ec <__clzsi2>
    6678:	3020      	adds	r0, #32
    667a:	e6a6      	b.n	63ca <__aeabi_dmul+0x15e>
    667c:	0003      	movs	r3, r0
    667e:	3b28      	subs	r3, #40	; 0x28
    6680:	409f      	lsls	r7, r3
    6682:	2300      	movs	r3, #0
    6684:	46bb      	mov	fp, r7
    6686:	4699      	mov	r9, r3
    6688:	e68a      	b.n	63a0 <__aeabi_dmul+0x134>
    668a:	f000 fd2f 	bl	70ec <__clzsi2>
    668e:	3020      	adds	r0, #32
    6690:	e674      	b.n	637c <__aeabi_dmul+0x110>
    6692:	46b4      	mov	ip, r6
    6694:	e7ad      	b.n	65f2 <__aeabi_dmul+0x386>
    6696:	2501      	movs	r5, #1
    6698:	1a2a      	subs	r2, r5, r0
    669a:	2a38      	cmp	r2, #56	; 0x38
    669c:	dd06      	ble.n	66ac <__aeabi_dmul+0x440>
    669e:	9b01      	ldr	r3, [sp, #4]
    66a0:	2400      	movs	r4, #0
    66a2:	401d      	ands	r5, r3
    66a4:	2300      	movs	r3, #0
    66a6:	2200      	movs	r2, #0
    66a8:	4699      	mov	r9, r3
    66aa:	e646      	b.n	633a <__aeabi_dmul+0xce>
    66ac:	2a1f      	cmp	r2, #31
    66ae:	dc21      	bgt.n	66f4 <__aeabi_dmul+0x488>
    66b0:	2520      	movs	r5, #32
    66b2:	0020      	movs	r0, r4
    66b4:	1aad      	subs	r5, r5, r2
    66b6:	001e      	movs	r6, r3
    66b8:	40ab      	lsls	r3, r5
    66ba:	40a8      	lsls	r0, r5
    66bc:	40d6      	lsrs	r6, r2
    66be:	1e5d      	subs	r5, r3, #1
    66c0:	41ab      	sbcs	r3, r5
    66c2:	4330      	orrs	r0, r6
    66c4:	4318      	orrs	r0, r3
    66c6:	40d4      	lsrs	r4, r2
    66c8:	0743      	lsls	r3, r0, #29
    66ca:	d009      	beq.n	66e0 <__aeabi_dmul+0x474>
    66cc:	230f      	movs	r3, #15
    66ce:	4003      	ands	r3, r0
    66d0:	2b04      	cmp	r3, #4
    66d2:	d005      	beq.n	66e0 <__aeabi_dmul+0x474>
    66d4:	0003      	movs	r3, r0
    66d6:	1d18      	adds	r0, r3, #4
    66d8:	4298      	cmp	r0, r3
    66da:	419b      	sbcs	r3, r3
    66dc:	425b      	negs	r3, r3
    66de:	18e4      	adds	r4, r4, r3
    66e0:	0223      	lsls	r3, r4, #8
    66e2:	d521      	bpl.n	6728 <__aeabi_dmul+0x4bc>
    66e4:	2501      	movs	r5, #1
    66e6:	9b01      	ldr	r3, [sp, #4]
    66e8:	2401      	movs	r4, #1
    66ea:	401d      	ands	r5, r3
    66ec:	2300      	movs	r3, #0
    66ee:	2200      	movs	r2, #0
    66f0:	4699      	mov	r9, r3
    66f2:	e622      	b.n	633a <__aeabi_dmul+0xce>
    66f4:	251f      	movs	r5, #31
    66f6:	0021      	movs	r1, r4
    66f8:	426d      	negs	r5, r5
    66fa:	1a28      	subs	r0, r5, r0
    66fc:	40c1      	lsrs	r1, r0
    66fe:	0008      	movs	r0, r1
    6700:	2a20      	cmp	r2, #32
    6702:	d01d      	beq.n	6740 <__aeabi_dmul+0x4d4>
    6704:	355f      	adds	r5, #95	; 0x5f
    6706:	1aaa      	subs	r2, r5, r2
    6708:	4094      	lsls	r4, r2
    670a:	4323      	orrs	r3, r4
    670c:	1e5c      	subs	r4, r3, #1
    670e:	41a3      	sbcs	r3, r4
    6710:	2507      	movs	r5, #7
    6712:	4303      	orrs	r3, r0
    6714:	401d      	ands	r5, r3
    6716:	2200      	movs	r2, #0
    6718:	2d00      	cmp	r5, #0
    671a:	d009      	beq.n	6730 <__aeabi_dmul+0x4c4>
    671c:	220f      	movs	r2, #15
    671e:	2400      	movs	r4, #0
    6720:	401a      	ands	r2, r3
    6722:	0018      	movs	r0, r3
    6724:	2a04      	cmp	r2, #4
    6726:	d1d6      	bne.n	66d6 <__aeabi_dmul+0x46a>
    6728:	0003      	movs	r3, r0
    672a:	0765      	lsls	r5, r4, #29
    672c:	0264      	lsls	r4, r4, #9
    672e:	0b22      	lsrs	r2, r4, #12
    6730:	08db      	lsrs	r3, r3, #3
    6732:	432b      	orrs	r3, r5
    6734:	2501      	movs	r5, #1
    6736:	4699      	mov	r9, r3
    6738:	9b01      	ldr	r3, [sp, #4]
    673a:	2400      	movs	r4, #0
    673c:	401d      	ands	r5, r3
    673e:	e5fc      	b.n	633a <__aeabi_dmul+0xce>
    6740:	2400      	movs	r4, #0
    6742:	e7e2      	b.n	670a <__aeabi_dmul+0x49e>
    6744:	2280      	movs	r2, #128	; 0x80
    6746:	2501      	movs	r5, #1
    6748:	0312      	lsls	r2, r2, #12
    674a:	4322      	orrs	r2, r4
    674c:	9901      	ldr	r1, [sp, #4]
    674e:	0312      	lsls	r2, r2, #12
    6750:	0b12      	lsrs	r2, r2, #12
    6752:	400d      	ands	r5, r1
    6754:	4699      	mov	r9, r3
    6756:	4c04      	ldr	r4, [pc, #16]	; (6768 <__aeabi_dmul+0x4fc>)
    6758:	e5ef      	b.n	633a <__aeabi_dmul+0xce>
    675a:	46c0      	nop			; (mov r8, r8)
    675c:	000003ff 	.word	0x000003ff
    6760:	feffffff 	.word	0xfeffffff
    6764:	000007fe 	.word	0x000007fe
    6768:	000007ff 	.word	0x000007ff

0000676c <__aeabi_dsub>:
    676c:	b5f0      	push	{r4, r5, r6, r7, lr}
    676e:	4646      	mov	r6, r8
    6770:	46d6      	mov	lr, sl
    6772:	464f      	mov	r7, r9
    6774:	030c      	lsls	r4, r1, #12
    6776:	b5c0      	push	{r6, r7, lr}
    6778:	0fcd      	lsrs	r5, r1, #31
    677a:	004e      	lsls	r6, r1, #1
    677c:	0a61      	lsrs	r1, r4, #9
    677e:	0f44      	lsrs	r4, r0, #29
    6780:	430c      	orrs	r4, r1
    6782:	00c1      	lsls	r1, r0, #3
    6784:	0058      	lsls	r0, r3, #1
    6786:	0d40      	lsrs	r0, r0, #21
    6788:	4684      	mov	ip, r0
    678a:	468a      	mov	sl, r1
    678c:	000f      	movs	r7, r1
    678e:	0319      	lsls	r1, r3, #12
    6790:	0f50      	lsrs	r0, r2, #29
    6792:	0a49      	lsrs	r1, r1, #9
    6794:	4301      	orrs	r1, r0
    6796:	48c6      	ldr	r0, [pc, #792]	; (6ab0 <__aeabi_dsub+0x344>)
    6798:	0d76      	lsrs	r6, r6, #21
    679a:	46a8      	mov	r8, r5
    679c:	0fdb      	lsrs	r3, r3, #31
    679e:	00d2      	lsls	r2, r2, #3
    67a0:	4584      	cmp	ip, r0
    67a2:	d100      	bne.n	67a6 <__aeabi_dsub+0x3a>
    67a4:	e0d8      	b.n	6958 <__aeabi_dsub+0x1ec>
    67a6:	2001      	movs	r0, #1
    67a8:	4043      	eors	r3, r0
    67aa:	42ab      	cmp	r3, r5
    67ac:	d100      	bne.n	67b0 <__aeabi_dsub+0x44>
    67ae:	e0a6      	b.n	68fe <__aeabi_dsub+0x192>
    67b0:	4660      	mov	r0, ip
    67b2:	1a35      	subs	r5, r6, r0
    67b4:	2d00      	cmp	r5, #0
    67b6:	dc00      	bgt.n	67ba <__aeabi_dsub+0x4e>
    67b8:	e105      	b.n	69c6 <__aeabi_dsub+0x25a>
    67ba:	2800      	cmp	r0, #0
    67bc:	d110      	bne.n	67e0 <__aeabi_dsub+0x74>
    67be:	000b      	movs	r3, r1
    67c0:	4313      	orrs	r3, r2
    67c2:	d100      	bne.n	67c6 <__aeabi_dsub+0x5a>
    67c4:	e0d7      	b.n	6976 <__aeabi_dsub+0x20a>
    67c6:	1e6b      	subs	r3, r5, #1
    67c8:	2b00      	cmp	r3, #0
    67ca:	d000      	beq.n	67ce <__aeabi_dsub+0x62>
    67cc:	e14b      	b.n	6a66 <__aeabi_dsub+0x2fa>
    67ce:	4653      	mov	r3, sl
    67d0:	1a9f      	subs	r7, r3, r2
    67d2:	45ba      	cmp	sl, r7
    67d4:	4180      	sbcs	r0, r0
    67d6:	1a64      	subs	r4, r4, r1
    67d8:	4240      	negs	r0, r0
    67da:	1a24      	subs	r4, r4, r0
    67dc:	2601      	movs	r6, #1
    67de:	e01e      	b.n	681e <__aeabi_dsub+0xb2>
    67e0:	4bb3      	ldr	r3, [pc, #716]	; (6ab0 <__aeabi_dsub+0x344>)
    67e2:	429e      	cmp	r6, r3
    67e4:	d048      	beq.n	6878 <__aeabi_dsub+0x10c>
    67e6:	2380      	movs	r3, #128	; 0x80
    67e8:	041b      	lsls	r3, r3, #16
    67ea:	4319      	orrs	r1, r3
    67ec:	2d38      	cmp	r5, #56	; 0x38
    67ee:	dd00      	ble.n	67f2 <__aeabi_dsub+0x86>
    67f0:	e119      	b.n	6a26 <__aeabi_dsub+0x2ba>
    67f2:	2d1f      	cmp	r5, #31
    67f4:	dd00      	ble.n	67f8 <__aeabi_dsub+0x8c>
    67f6:	e14c      	b.n	6a92 <__aeabi_dsub+0x326>
    67f8:	2320      	movs	r3, #32
    67fa:	000f      	movs	r7, r1
    67fc:	1b5b      	subs	r3, r3, r5
    67fe:	0010      	movs	r0, r2
    6800:	409a      	lsls	r2, r3
    6802:	409f      	lsls	r7, r3
    6804:	40e8      	lsrs	r0, r5
    6806:	1e53      	subs	r3, r2, #1
    6808:	419a      	sbcs	r2, r3
    680a:	40e9      	lsrs	r1, r5
    680c:	4307      	orrs	r7, r0
    680e:	4317      	orrs	r7, r2
    6810:	4653      	mov	r3, sl
    6812:	1bdf      	subs	r7, r3, r7
    6814:	1a61      	subs	r1, r4, r1
    6816:	45ba      	cmp	sl, r7
    6818:	41a4      	sbcs	r4, r4
    681a:	4264      	negs	r4, r4
    681c:	1b0c      	subs	r4, r1, r4
    681e:	0223      	lsls	r3, r4, #8
    6820:	d400      	bmi.n	6824 <__aeabi_dsub+0xb8>
    6822:	e0c5      	b.n	69b0 <__aeabi_dsub+0x244>
    6824:	0264      	lsls	r4, r4, #9
    6826:	0a65      	lsrs	r5, r4, #9
    6828:	2d00      	cmp	r5, #0
    682a:	d100      	bne.n	682e <__aeabi_dsub+0xc2>
    682c:	e0f6      	b.n	6a1c <__aeabi_dsub+0x2b0>
    682e:	0028      	movs	r0, r5
    6830:	f000 fc5c 	bl	70ec <__clzsi2>
    6834:	0003      	movs	r3, r0
    6836:	3b08      	subs	r3, #8
    6838:	2b1f      	cmp	r3, #31
    683a:	dd00      	ble.n	683e <__aeabi_dsub+0xd2>
    683c:	e0e9      	b.n	6a12 <__aeabi_dsub+0x2a6>
    683e:	2220      	movs	r2, #32
    6840:	003c      	movs	r4, r7
    6842:	1ad2      	subs	r2, r2, r3
    6844:	409d      	lsls	r5, r3
    6846:	40d4      	lsrs	r4, r2
    6848:	409f      	lsls	r7, r3
    684a:	4325      	orrs	r5, r4
    684c:	429e      	cmp	r6, r3
    684e:	dd00      	ble.n	6852 <__aeabi_dsub+0xe6>
    6850:	e0db      	b.n	6a0a <__aeabi_dsub+0x29e>
    6852:	1b9e      	subs	r6, r3, r6
    6854:	1c73      	adds	r3, r6, #1
    6856:	2b1f      	cmp	r3, #31
    6858:	dd00      	ble.n	685c <__aeabi_dsub+0xf0>
    685a:	e10a      	b.n	6a72 <__aeabi_dsub+0x306>
    685c:	2220      	movs	r2, #32
    685e:	0038      	movs	r0, r7
    6860:	1ad2      	subs	r2, r2, r3
    6862:	0029      	movs	r1, r5
    6864:	4097      	lsls	r7, r2
    6866:	002c      	movs	r4, r5
    6868:	4091      	lsls	r1, r2
    686a:	40d8      	lsrs	r0, r3
    686c:	1e7a      	subs	r2, r7, #1
    686e:	4197      	sbcs	r7, r2
    6870:	40dc      	lsrs	r4, r3
    6872:	2600      	movs	r6, #0
    6874:	4301      	orrs	r1, r0
    6876:	430f      	orrs	r7, r1
    6878:	077b      	lsls	r3, r7, #29
    687a:	d009      	beq.n	6890 <__aeabi_dsub+0x124>
    687c:	230f      	movs	r3, #15
    687e:	403b      	ands	r3, r7
    6880:	2b04      	cmp	r3, #4
    6882:	d005      	beq.n	6890 <__aeabi_dsub+0x124>
    6884:	1d3b      	adds	r3, r7, #4
    6886:	42bb      	cmp	r3, r7
    6888:	41bf      	sbcs	r7, r7
    688a:	427f      	negs	r7, r7
    688c:	19e4      	adds	r4, r4, r7
    688e:	001f      	movs	r7, r3
    6890:	0223      	lsls	r3, r4, #8
    6892:	d525      	bpl.n	68e0 <__aeabi_dsub+0x174>
    6894:	4b86      	ldr	r3, [pc, #536]	; (6ab0 <__aeabi_dsub+0x344>)
    6896:	3601      	adds	r6, #1
    6898:	429e      	cmp	r6, r3
    689a:	d100      	bne.n	689e <__aeabi_dsub+0x132>
    689c:	e0af      	b.n	69fe <__aeabi_dsub+0x292>
    689e:	4b85      	ldr	r3, [pc, #532]	; (6ab4 <__aeabi_dsub+0x348>)
    68a0:	2501      	movs	r5, #1
    68a2:	401c      	ands	r4, r3
    68a4:	4643      	mov	r3, r8
    68a6:	0762      	lsls	r2, r4, #29
    68a8:	08ff      	lsrs	r7, r7, #3
    68aa:	0264      	lsls	r4, r4, #9
    68ac:	0576      	lsls	r6, r6, #21
    68ae:	4317      	orrs	r7, r2
    68b0:	0b24      	lsrs	r4, r4, #12
    68b2:	0d76      	lsrs	r6, r6, #21
    68b4:	401d      	ands	r5, r3
    68b6:	2100      	movs	r1, #0
    68b8:	0324      	lsls	r4, r4, #12
    68ba:	0b23      	lsrs	r3, r4, #12
    68bc:	0d0c      	lsrs	r4, r1, #20
    68be:	4a7e      	ldr	r2, [pc, #504]	; (6ab8 <__aeabi_dsub+0x34c>)
    68c0:	0524      	lsls	r4, r4, #20
    68c2:	431c      	orrs	r4, r3
    68c4:	4014      	ands	r4, r2
    68c6:	0533      	lsls	r3, r6, #20
    68c8:	4323      	orrs	r3, r4
    68ca:	005b      	lsls	r3, r3, #1
    68cc:	07ed      	lsls	r5, r5, #31
    68ce:	085b      	lsrs	r3, r3, #1
    68d0:	432b      	orrs	r3, r5
    68d2:	0038      	movs	r0, r7
    68d4:	0019      	movs	r1, r3
    68d6:	bc1c      	pop	{r2, r3, r4}
    68d8:	4690      	mov	r8, r2
    68da:	4699      	mov	r9, r3
    68dc:	46a2      	mov	sl, r4
    68de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68e0:	2501      	movs	r5, #1
    68e2:	4643      	mov	r3, r8
    68e4:	0762      	lsls	r2, r4, #29
    68e6:	08ff      	lsrs	r7, r7, #3
    68e8:	4317      	orrs	r7, r2
    68ea:	08e4      	lsrs	r4, r4, #3
    68ec:	401d      	ands	r5, r3
    68ee:	4b70      	ldr	r3, [pc, #448]	; (6ab0 <__aeabi_dsub+0x344>)
    68f0:	429e      	cmp	r6, r3
    68f2:	d036      	beq.n	6962 <__aeabi_dsub+0x1f6>
    68f4:	0324      	lsls	r4, r4, #12
    68f6:	0576      	lsls	r6, r6, #21
    68f8:	0b24      	lsrs	r4, r4, #12
    68fa:	0d76      	lsrs	r6, r6, #21
    68fc:	e7db      	b.n	68b6 <__aeabi_dsub+0x14a>
    68fe:	4663      	mov	r3, ip
    6900:	1af3      	subs	r3, r6, r3
    6902:	2b00      	cmp	r3, #0
    6904:	dc00      	bgt.n	6908 <__aeabi_dsub+0x19c>
    6906:	e094      	b.n	6a32 <__aeabi_dsub+0x2c6>
    6908:	4660      	mov	r0, ip
    690a:	2800      	cmp	r0, #0
    690c:	d035      	beq.n	697a <__aeabi_dsub+0x20e>
    690e:	4868      	ldr	r0, [pc, #416]	; (6ab0 <__aeabi_dsub+0x344>)
    6910:	4286      	cmp	r6, r0
    6912:	d0b1      	beq.n	6878 <__aeabi_dsub+0x10c>
    6914:	2780      	movs	r7, #128	; 0x80
    6916:	043f      	lsls	r7, r7, #16
    6918:	4339      	orrs	r1, r7
    691a:	2b38      	cmp	r3, #56	; 0x38
    691c:	dc00      	bgt.n	6920 <__aeabi_dsub+0x1b4>
    691e:	e0fd      	b.n	6b1c <__aeabi_dsub+0x3b0>
    6920:	430a      	orrs	r2, r1
    6922:	0017      	movs	r7, r2
    6924:	2100      	movs	r1, #0
    6926:	1e7a      	subs	r2, r7, #1
    6928:	4197      	sbcs	r7, r2
    692a:	4457      	add	r7, sl
    692c:	4557      	cmp	r7, sl
    692e:	4180      	sbcs	r0, r0
    6930:	1909      	adds	r1, r1, r4
    6932:	4244      	negs	r4, r0
    6934:	190c      	adds	r4, r1, r4
    6936:	0223      	lsls	r3, r4, #8
    6938:	d53a      	bpl.n	69b0 <__aeabi_dsub+0x244>
    693a:	4b5d      	ldr	r3, [pc, #372]	; (6ab0 <__aeabi_dsub+0x344>)
    693c:	3601      	adds	r6, #1
    693e:	429e      	cmp	r6, r3
    6940:	d100      	bne.n	6944 <__aeabi_dsub+0x1d8>
    6942:	e14b      	b.n	6bdc <__aeabi_dsub+0x470>
    6944:	2201      	movs	r2, #1
    6946:	4b5b      	ldr	r3, [pc, #364]	; (6ab4 <__aeabi_dsub+0x348>)
    6948:	401c      	ands	r4, r3
    694a:	087b      	lsrs	r3, r7, #1
    694c:	4017      	ands	r7, r2
    694e:	431f      	orrs	r7, r3
    6950:	07e2      	lsls	r2, r4, #31
    6952:	4317      	orrs	r7, r2
    6954:	0864      	lsrs	r4, r4, #1
    6956:	e78f      	b.n	6878 <__aeabi_dsub+0x10c>
    6958:	0008      	movs	r0, r1
    695a:	4310      	orrs	r0, r2
    695c:	d000      	beq.n	6960 <__aeabi_dsub+0x1f4>
    695e:	e724      	b.n	67aa <__aeabi_dsub+0x3e>
    6960:	e721      	b.n	67a6 <__aeabi_dsub+0x3a>
    6962:	0023      	movs	r3, r4
    6964:	433b      	orrs	r3, r7
    6966:	d100      	bne.n	696a <__aeabi_dsub+0x1fe>
    6968:	e1b9      	b.n	6cde <__aeabi_dsub+0x572>
    696a:	2280      	movs	r2, #128	; 0x80
    696c:	0312      	lsls	r2, r2, #12
    696e:	4314      	orrs	r4, r2
    6970:	0324      	lsls	r4, r4, #12
    6972:	0b24      	lsrs	r4, r4, #12
    6974:	e79f      	b.n	68b6 <__aeabi_dsub+0x14a>
    6976:	002e      	movs	r6, r5
    6978:	e77e      	b.n	6878 <__aeabi_dsub+0x10c>
    697a:	0008      	movs	r0, r1
    697c:	4310      	orrs	r0, r2
    697e:	d100      	bne.n	6982 <__aeabi_dsub+0x216>
    6980:	e0ca      	b.n	6b18 <__aeabi_dsub+0x3ac>
    6982:	1e58      	subs	r0, r3, #1
    6984:	4684      	mov	ip, r0
    6986:	2800      	cmp	r0, #0
    6988:	d000      	beq.n	698c <__aeabi_dsub+0x220>
    698a:	e0e7      	b.n	6b5c <__aeabi_dsub+0x3f0>
    698c:	4452      	add	r2, sl
    698e:	4552      	cmp	r2, sl
    6990:	4180      	sbcs	r0, r0
    6992:	1864      	adds	r4, r4, r1
    6994:	4240      	negs	r0, r0
    6996:	1824      	adds	r4, r4, r0
    6998:	0017      	movs	r7, r2
    699a:	2601      	movs	r6, #1
    699c:	0223      	lsls	r3, r4, #8
    699e:	d507      	bpl.n	69b0 <__aeabi_dsub+0x244>
    69a0:	2602      	movs	r6, #2
    69a2:	e7cf      	b.n	6944 <__aeabi_dsub+0x1d8>
    69a4:	4664      	mov	r4, ip
    69a6:	432c      	orrs	r4, r5
    69a8:	d100      	bne.n	69ac <__aeabi_dsub+0x240>
    69aa:	e1b3      	b.n	6d14 <__aeabi_dsub+0x5a8>
    69ac:	002c      	movs	r4, r5
    69ae:	4667      	mov	r7, ip
    69b0:	077b      	lsls	r3, r7, #29
    69b2:	d000      	beq.n	69b6 <__aeabi_dsub+0x24a>
    69b4:	e762      	b.n	687c <__aeabi_dsub+0x110>
    69b6:	0763      	lsls	r3, r4, #29
    69b8:	08ff      	lsrs	r7, r7, #3
    69ba:	431f      	orrs	r7, r3
    69bc:	2501      	movs	r5, #1
    69be:	4643      	mov	r3, r8
    69c0:	08e4      	lsrs	r4, r4, #3
    69c2:	401d      	ands	r5, r3
    69c4:	e793      	b.n	68ee <__aeabi_dsub+0x182>
    69c6:	2d00      	cmp	r5, #0
    69c8:	d178      	bne.n	6abc <__aeabi_dsub+0x350>
    69ca:	1c75      	adds	r5, r6, #1
    69cc:	056d      	lsls	r5, r5, #21
    69ce:	0d6d      	lsrs	r5, r5, #21
    69d0:	2d01      	cmp	r5, #1
    69d2:	dc00      	bgt.n	69d6 <__aeabi_dsub+0x26a>
    69d4:	e0f2      	b.n	6bbc <__aeabi_dsub+0x450>
    69d6:	4650      	mov	r0, sl
    69d8:	1a80      	subs	r0, r0, r2
    69da:	4582      	cmp	sl, r0
    69dc:	41bf      	sbcs	r7, r7
    69de:	1a65      	subs	r5, r4, r1
    69e0:	427f      	negs	r7, r7
    69e2:	1bed      	subs	r5, r5, r7
    69e4:	4684      	mov	ip, r0
    69e6:	0228      	lsls	r0, r5, #8
    69e8:	d400      	bmi.n	69ec <__aeabi_dsub+0x280>
    69ea:	e08c      	b.n	6b06 <__aeabi_dsub+0x39a>
    69ec:	4650      	mov	r0, sl
    69ee:	1a17      	subs	r7, r2, r0
    69f0:	42ba      	cmp	r2, r7
    69f2:	4192      	sbcs	r2, r2
    69f4:	1b0c      	subs	r4, r1, r4
    69f6:	4255      	negs	r5, r2
    69f8:	1b65      	subs	r5, r4, r5
    69fa:	4698      	mov	r8, r3
    69fc:	e714      	b.n	6828 <__aeabi_dsub+0xbc>
    69fe:	2501      	movs	r5, #1
    6a00:	4643      	mov	r3, r8
    6a02:	2400      	movs	r4, #0
    6a04:	401d      	ands	r5, r3
    6a06:	2700      	movs	r7, #0
    6a08:	e755      	b.n	68b6 <__aeabi_dsub+0x14a>
    6a0a:	4c2a      	ldr	r4, [pc, #168]	; (6ab4 <__aeabi_dsub+0x348>)
    6a0c:	1af6      	subs	r6, r6, r3
    6a0e:	402c      	ands	r4, r5
    6a10:	e732      	b.n	6878 <__aeabi_dsub+0x10c>
    6a12:	003d      	movs	r5, r7
    6a14:	3828      	subs	r0, #40	; 0x28
    6a16:	4085      	lsls	r5, r0
    6a18:	2700      	movs	r7, #0
    6a1a:	e717      	b.n	684c <__aeabi_dsub+0xe0>
    6a1c:	0038      	movs	r0, r7
    6a1e:	f000 fb65 	bl	70ec <__clzsi2>
    6a22:	3020      	adds	r0, #32
    6a24:	e706      	b.n	6834 <__aeabi_dsub+0xc8>
    6a26:	430a      	orrs	r2, r1
    6a28:	0017      	movs	r7, r2
    6a2a:	2100      	movs	r1, #0
    6a2c:	1e7a      	subs	r2, r7, #1
    6a2e:	4197      	sbcs	r7, r2
    6a30:	e6ee      	b.n	6810 <__aeabi_dsub+0xa4>
    6a32:	2b00      	cmp	r3, #0
    6a34:	d000      	beq.n	6a38 <__aeabi_dsub+0x2cc>
    6a36:	e0e5      	b.n	6c04 <__aeabi_dsub+0x498>
    6a38:	1c73      	adds	r3, r6, #1
    6a3a:	469c      	mov	ip, r3
    6a3c:	055b      	lsls	r3, r3, #21
    6a3e:	0d5b      	lsrs	r3, r3, #21
    6a40:	2b01      	cmp	r3, #1
    6a42:	dc00      	bgt.n	6a46 <__aeabi_dsub+0x2da>
    6a44:	e09f      	b.n	6b86 <__aeabi_dsub+0x41a>
    6a46:	4b1a      	ldr	r3, [pc, #104]	; (6ab0 <__aeabi_dsub+0x344>)
    6a48:	459c      	cmp	ip, r3
    6a4a:	d100      	bne.n	6a4e <__aeabi_dsub+0x2e2>
    6a4c:	e0c5      	b.n	6bda <__aeabi_dsub+0x46e>
    6a4e:	4452      	add	r2, sl
    6a50:	4552      	cmp	r2, sl
    6a52:	4180      	sbcs	r0, r0
    6a54:	1864      	adds	r4, r4, r1
    6a56:	4240      	negs	r0, r0
    6a58:	1824      	adds	r4, r4, r0
    6a5a:	07e7      	lsls	r7, r4, #31
    6a5c:	0852      	lsrs	r2, r2, #1
    6a5e:	4317      	orrs	r7, r2
    6a60:	0864      	lsrs	r4, r4, #1
    6a62:	4666      	mov	r6, ip
    6a64:	e708      	b.n	6878 <__aeabi_dsub+0x10c>
    6a66:	4812      	ldr	r0, [pc, #72]	; (6ab0 <__aeabi_dsub+0x344>)
    6a68:	4285      	cmp	r5, r0
    6a6a:	d100      	bne.n	6a6e <__aeabi_dsub+0x302>
    6a6c:	e085      	b.n	6b7a <__aeabi_dsub+0x40e>
    6a6e:	001d      	movs	r5, r3
    6a70:	e6bc      	b.n	67ec <__aeabi_dsub+0x80>
    6a72:	0029      	movs	r1, r5
    6a74:	3e1f      	subs	r6, #31
    6a76:	40f1      	lsrs	r1, r6
    6a78:	2b20      	cmp	r3, #32
    6a7a:	d100      	bne.n	6a7e <__aeabi_dsub+0x312>
    6a7c:	e07f      	b.n	6b7e <__aeabi_dsub+0x412>
    6a7e:	2240      	movs	r2, #64	; 0x40
    6a80:	1ad3      	subs	r3, r2, r3
    6a82:	409d      	lsls	r5, r3
    6a84:	432f      	orrs	r7, r5
    6a86:	1e7d      	subs	r5, r7, #1
    6a88:	41af      	sbcs	r7, r5
    6a8a:	2400      	movs	r4, #0
    6a8c:	430f      	orrs	r7, r1
    6a8e:	2600      	movs	r6, #0
    6a90:	e78e      	b.n	69b0 <__aeabi_dsub+0x244>
    6a92:	002b      	movs	r3, r5
    6a94:	000f      	movs	r7, r1
    6a96:	3b20      	subs	r3, #32
    6a98:	40df      	lsrs	r7, r3
    6a9a:	2d20      	cmp	r5, #32
    6a9c:	d071      	beq.n	6b82 <__aeabi_dsub+0x416>
    6a9e:	2340      	movs	r3, #64	; 0x40
    6aa0:	1b5d      	subs	r5, r3, r5
    6aa2:	40a9      	lsls	r1, r5
    6aa4:	430a      	orrs	r2, r1
    6aa6:	1e51      	subs	r1, r2, #1
    6aa8:	418a      	sbcs	r2, r1
    6aaa:	2100      	movs	r1, #0
    6aac:	4317      	orrs	r7, r2
    6aae:	e6af      	b.n	6810 <__aeabi_dsub+0xa4>
    6ab0:	000007ff 	.word	0x000007ff
    6ab4:	ff7fffff 	.word	0xff7fffff
    6ab8:	800fffff 	.word	0x800fffff
    6abc:	2e00      	cmp	r6, #0
    6abe:	d03e      	beq.n	6b3e <__aeabi_dsub+0x3d2>
    6ac0:	4eb3      	ldr	r6, [pc, #716]	; (6d90 <__aeabi_dsub+0x624>)
    6ac2:	45b4      	cmp	ip, r6
    6ac4:	d045      	beq.n	6b52 <__aeabi_dsub+0x3e6>
    6ac6:	2680      	movs	r6, #128	; 0x80
    6ac8:	0436      	lsls	r6, r6, #16
    6aca:	426d      	negs	r5, r5
    6acc:	4334      	orrs	r4, r6
    6ace:	2d38      	cmp	r5, #56	; 0x38
    6ad0:	dd00      	ble.n	6ad4 <__aeabi_dsub+0x368>
    6ad2:	e0a8      	b.n	6c26 <__aeabi_dsub+0x4ba>
    6ad4:	2d1f      	cmp	r5, #31
    6ad6:	dd00      	ble.n	6ada <__aeabi_dsub+0x36e>
    6ad8:	e11f      	b.n	6d1a <__aeabi_dsub+0x5ae>
    6ada:	2620      	movs	r6, #32
    6adc:	0027      	movs	r7, r4
    6ade:	4650      	mov	r0, sl
    6ae0:	1b76      	subs	r6, r6, r5
    6ae2:	40b7      	lsls	r7, r6
    6ae4:	40e8      	lsrs	r0, r5
    6ae6:	4307      	orrs	r7, r0
    6ae8:	4650      	mov	r0, sl
    6aea:	40b0      	lsls	r0, r6
    6aec:	1e46      	subs	r6, r0, #1
    6aee:	41b0      	sbcs	r0, r6
    6af0:	40ec      	lsrs	r4, r5
    6af2:	4338      	orrs	r0, r7
    6af4:	1a17      	subs	r7, r2, r0
    6af6:	42ba      	cmp	r2, r7
    6af8:	4192      	sbcs	r2, r2
    6afa:	1b0c      	subs	r4, r1, r4
    6afc:	4252      	negs	r2, r2
    6afe:	1aa4      	subs	r4, r4, r2
    6b00:	4666      	mov	r6, ip
    6b02:	4698      	mov	r8, r3
    6b04:	e68b      	b.n	681e <__aeabi_dsub+0xb2>
    6b06:	4664      	mov	r4, ip
    6b08:	4667      	mov	r7, ip
    6b0a:	432c      	orrs	r4, r5
    6b0c:	d000      	beq.n	6b10 <__aeabi_dsub+0x3a4>
    6b0e:	e68b      	b.n	6828 <__aeabi_dsub+0xbc>
    6b10:	2500      	movs	r5, #0
    6b12:	2600      	movs	r6, #0
    6b14:	2700      	movs	r7, #0
    6b16:	e6ea      	b.n	68ee <__aeabi_dsub+0x182>
    6b18:	001e      	movs	r6, r3
    6b1a:	e6ad      	b.n	6878 <__aeabi_dsub+0x10c>
    6b1c:	2b1f      	cmp	r3, #31
    6b1e:	dc60      	bgt.n	6be2 <__aeabi_dsub+0x476>
    6b20:	2720      	movs	r7, #32
    6b22:	1af8      	subs	r0, r7, r3
    6b24:	000f      	movs	r7, r1
    6b26:	4684      	mov	ip, r0
    6b28:	4087      	lsls	r7, r0
    6b2a:	0010      	movs	r0, r2
    6b2c:	40d8      	lsrs	r0, r3
    6b2e:	4307      	orrs	r7, r0
    6b30:	4660      	mov	r0, ip
    6b32:	4082      	lsls	r2, r0
    6b34:	1e50      	subs	r0, r2, #1
    6b36:	4182      	sbcs	r2, r0
    6b38:	40d9      	lsrs	r1, r3
    6b3a:	4317      	orrs	r7, r2
    6b3c:	e6f5      	b.n	692a <__aeabi_dsub+0x1be>
    6b3e:	0026      	movs	r6, r4
    6b40:	4650      	mov	r0, sl
    6b42:	4306      	orrs	r6, r0
    6b44:	d005      	beq.n	6b52 <__aeabi_dsub+0x3e6>
    6b46:	43ed      	mvns	r5, r5
    6b48:	2d00      	cmp	r5, #0
    6b4a:	d0d3      	beq.n	6af4 <__aeabi_dsub+0x388>
    6b4c:	4e90      	ldr	r6, [pc, #576]	; (6d90 <__aeabi_dsub+0x624>)
    6b4e:	45b4      	cmp	ip, r6
    6b50:	d1bd      	bne.n	6ace <__aeabi_dsub+0x362>
    6b52:	000c      	movs	r4, r1
    6b54:	0017      	movs	r7, r2
    6b56:	4666      	mov	r6, ip
    6b58:	4698      	mov	r8, r3
    6b5a:	e68d      	b.n	6878 <__aeabi_dsub+0x10c>
    6b5c:	488c      	ldr	r0, [pc, #560]	; (6d90 <__aeabi_dsub+0x624>)
    6b5e:	4283      	cmp	r3, r0
    6b60:	d00b      	beq.n	6b7a <__aeabi_dsub+0x40e>
    6b62:	4663      	mov	r3, ip
    6b64:	e6d9      	b.n	691a <__aeabi_dsub+0x1ae>
    6b66:	2d00      	cmp	r5, #0
    6b68:	d000      	beq.n	6b6c <__aeabi_dsub+0x400>
    6b6a:	e096      	b.n	6c9a <__aeabi_dsub+0x52e>
    6b6c:	0008      	movs	r0, r1
    6b6e:	4310      	orrs	r0, r2
    6b70:	d100      	bne.n	6b74 <__aeabi_dsub+0x408>
    6b72:	e0e2      	b.n	6d3a <__aeabi_dsub+0x5ce>
    6b74:	000c      	movs	r4, r1
    6b76:	0017      	movs	r7, r2
    6b78:	4698      	mov	r8, r3
    6b7a:	4e85      	ldr	r6, [pc, #532]	; (6d90 <__aeabi_dsub+0x624>)
    6b7c:	e67c      	b.n	6878 <__aeabi_dsub+0x10c>
    6b7e:	2500      	movs	r5, #0
    6b80:	e780      	b.n	6a84 <__aeabi_dsub+0x318>
    6b82:	2100      	movs	r1, #0
    6b84:	e78e      	b.n	6aa4 <__aeabi_dsub+0x338>
    6b86:	0023      	movs	r3, r4
    6b88:	4650      	mov	r0, sl
    6b8a:	4303      	orrs	r3, r0
    6b8c:	2e00      	cmp	r6, #0
    6b8e:	d000      	beq.n	6b92 <__aeabi_dsub+0x426>
    6b90:	e0a8      	b.n	6ce4 <__aeabi_dsub+0x578>
    6b92:	2b00      	cmp	r3, #0
    6b94:	d100      	bne.n	6b98 <__aeabi_dsub+0x42c>
    6b96:	e0de      	b.n	6d56 <__aeabi_dsub+0x5ea>
    6b98:	000b      	movs	r3, r1
    6b9a:	4313      	orrs	r3, r2
    6b9c:	d100      	bne.n	6ba0 <__aeabi_dsub+0x434>
    6b9e:	e66b      	b.n	6878 <__aeabi_dsub+0x10c>
    6ba0:	4452      	add	r2, sl
    6ba2:	4552      	cmp	r2, sl
    6ba4:	4180      	sbcs	r0, r0
    6ba6:	1864      	adds	r4, r4, r1
    6ba8:	4240      	negs	r0, r0
    6baa:	1824      	adds	r4, r4, r0
    6bac:	0017      	movs	r7, r2
    6bae:	0223      	lsls	r3, r4, #8
    6bb0:	d400      	bmi.n	6bb4 <__aeabi_dsub+0x448>
    6bb2:	e6fd      	b.n	69b0 <__aeabi_dsub+0x244>
    6bb4:	4b77      	ldr	r3, [pc, #476]	; (6d94 <__aeabi_dsub+0x628>)
    6bb6:	4666      	mov	r6, ip
    6bb8:	401c      	ands	r4, r3
    6bba:	e65d      	b.n	6878 <__aeabi_dsub+0x10c>
    6bbc:	0025      	movs	r5, r4
    6bbe:	4650      	mov	r0, sl
    6bc0:	4305      	orrs	r5, r0
    6bc2:	2e00      	cmp	r6, #0
    6bc4:	d1cf      	bne.n	6b66 <__aeabi_dsub+0x3fa>
    6bc6:	2d00      	cmp	r5, #0
    6bc8:	d14f      	bne.n	6c6a <__aeabi_dsub+0x4fe>
    6bca:	000c      	movs	r4, r1
    6bcc:	4314      	orrs	r4, r2
    6bce:	d100      	bne.n	6bd2 <__aeabi_dsub+0x466>
    6bd0:	e0a0      	b.n	6d14 <__aeabi_dsub+0x5a8>
    6bd2:	000c      	movs	r4, r1
    6bd4:	0017      	movs	r7, r2
    6bd6:	4698      	mov	r8, r3
    6bd8:	e64e      	b.n	6878 <__aeabi_dsub+0x10c>
    6bda:	4666      	mov	r6, ip
    6bdc:	2400      	movs	r4, #0
    6bde:	2700      	movs	r7, #0
    6be0:	e685      	b.n	68ee <__aeabi_dsub+0x182>
    6be2:	001f      	movs	r7, r3
    6be4:	0008      	movs	r0, r1
    6be6:	3f20      	subs	r7, #32
    6be8:	40f8      	lsrs	r0, r7
    6bea:	0007      	movs	r7, r0
    6bec:	2b20      	cmp	r3, #32
    6bee:	d100      	bne.n	6bf2 <__aeabi_dsub+0x486>
    6bf0:	e08e      	b.n	6d10 <__aeabi_dsub+0x5a4>
    6bf2:	2040      	movs	r0, #64	; 0x40
    6bf4:	1ac3      	subs	r3, r0, r3
    6bf6:	4099      	lsls	r1, r3
    6bf8:	430a      	orrs	r2, r1
    6bfa:	1e51      	subs	r1, r2, #1
    6bfc:	418a      	sbcs	r2, r1
    6bfe:	2100      	movs	r1, #0
    6c00:	4317      	orrs	r7, r2
    6c02:	e692      	b.n	692a <__aeabi_dsub+0x1be>
    6c04:	2e00      	cmp	r6, #0
    6c06:	d114      	bne.n	6c32 <__aeabi_dsub+0x4c6>
    6c08:	0026      	movs	r6, r4
    6c0a:	4650      	mov	r0, sl
    6c0c:	4306      	orrs	r6, r0
    6c0e:	d062      	beq.n	6cd6 <__aeabi_dsub+0x56a>
    6c10:	43db      	mvns	r3, r3
    6c12:	2b00      	cmp	r3, #0
    6c14:	d15c      	bne.n	6cd0 <__aeabi_dsub+0x564>
    6c16:	1887      	adds	r7, r0, r2
    6c18:	4297      	cmp	r7, r2
    6c1a:	4192      	sbcs	r2, r2
    6c1c:	1864      	adds	r4, r4, r1
    6c1e:	4252      	negs	r2, r2
    6c20:	18a4      	adds	r4, r4, r2
    6c22:	4666      	mov	r6, ip
    6c24:	e687      	b.n	6936 <__aeabi_dsub+0x1ca>
    6c26:	4650      	mov	r0, sl
    6c28:	4320      	orrs	r0, r4
    6c2a:	1e44      	subs	r4, r0, #1
    6c2c:	41a0      	sbcs	r0, r4
    6c2e:	2400      	movs	r4, #0
    6c30:	e760      	b.n	6af4 <__aeabi_dsub+0x388>
    6c32:	4e57      	ldr	r6, [pc, #348]	; (6d90 <__aeabi_dsub+0x624>)
    6c34:	45b4      	cmp	ip, r6
    6c36:	d04e      	beq.n	6cd6 <__aeabi_dsub+0x56a>
    6c38:	2680      	movs	r6, #128	; 0x80
    6c3a:	0436      	lsls	r6, r6, #16
    6c3c:	425b      	negs	r3, r3
    6c3e:	4334      	orrs	r4, r6
    6c40:	2b38      	cmp	r3, #56	; 0x38
    6c42:	dd00      	ble.n	6c46 <__aeabi_dsub+0x4da>
    6c44:	e07f      	b.n	6d46 <__aeabi_dsub+0x5da>
    6c46:	2b1f      	cmp	r3, #31
    6c48:	dd00      	ble.n	6c4c <__aeabi_dsub+0x4e0>
    6c4a:	e08b      	b.n	6d64 <__aeabi_dsub+0x5f8>
    6c4c:	2620      	movs	r6, #32
    6c4e:	0027      	movs	r7, r4
    6c50:	4650      	mov	r0, sl
    6c52:	1af6      	subs	r6, r6, r3
    6c54:	40b7      	lsls	r7, r6
    6c56:	40d8      	lsrs	r0, r3
    6c58:	4307      	orrs	r7, r0
    6c5a:	4650      	mov	r0, sl
    6c5c:	40b0      	lsls	r0, r6
    6c5e:	1e46      	subs	r6, r0, #1
    6c60:	41b0      	sbcs	r0, r6
    6c62:	4307      	orrs	r7, r0
    6c64:	40dc      	lsrs	r4, r3
    6c66:	18bf      	adds	r7, r7, r2
    6c68:	e7d6      	b.n	6c18 <__aeabi_dsub+0x4ac>
    6c6a:	000d      	movs	r5, r1
    6c6c:	4315      	orrs	r5, r2
    6c6e:	d100      	bne.n	6c72 <__aeabi_dsub+0x506>
    6c70:	e602      	b.n	6878 <__aeabi_dsub+0x10c>
    6c72:	4650      	mov	r0, sl
    6c74:	1a80      	subs	r0, r0, r2
    6c76:	4582      	cmp	sl, r0
    6c78:	41bf      	sbcs	r7, r7
    6c7a:	1a65      	subs	r5, r4, r1
    6c7c:	427f      	negs	r7, r7
    6c7e:	1bed      	subs	r5, r5, r7
    6c80:	4684      	mov	ip, r0
    6c82:	0228      	lsls	r0, r5, #8
    6c84:	d400      	bmi.n	6c88 <__aeabi_dsub+0x51c>
    6c86:	e68d      	b.n	69a4 <__aeabi_dsub+0x238>
    6c88:	4650      	mov	r0, sl
    6c8a:	1a17      	subs	r7, r2, r0
    6c8c:	42ba      	cmp	r2, r7
    6c8e:	4192      	sbcs	r2, r2
    6c90:	1b0c      	subs	r4, r1, r4
    6c92:	4252      	negs	r2, r2
    6c94:	1aa4      	subs	r4, r4, r2
    6c96:	4698      	mov	r8, r3
    6c98:	e5ee      	b.n	6878 <__aeabi_dsub+0x10c>
    6c9a:	000d      	movs	r5, r1
    6c9c:	4315      	orrs	r5, r2
    6c9e:	d100      	bne.n	6ca2 <__aeabi_dsub+0x536>
    6ca0:	e76b      	b.n	6b7a <__aeabi_dsub+0x40e>
    6ca2:	4650      	mov	r0, sl
    6ca4:	0767      	lsls	r7, r4, #29
    6ca6:	08c0      	lsrs	r0, r0, #3
    6ca8:	4307      	orrs	r7, r0
    6caa:	2080      	movs	r0, #128	; 0x80
    6cac:	08e4      	lsrs	r4, r4, #3
    6cae:	0300      	lsls	r0, r0, #12
    6cb0:	4204      	tst	r4, r0
    6cb2:	d007      	beq.n	6cc4 <__aeabi_dsub+0x558>
    6cb4:	08cd      	lsrs	r5, r1, #3
    6cb6:	4205      	tst	r5, r0
    6cb8:	d104      	bne.n	6cc4 <__aeabi_dsub+0x558>
    6cba:	002c      	movs	r4, r5
    6cbc:	4698      	mov	r8, r3
    6cbe:	08d7      	lsrs	r7, r2, #3
    6cc0:	0749      	lsls	r1, r1, #29
    6cc2:	430f      	orrs	r7, r1
    6cc4:	0f7b      	lsrs	r3, r7, #29
    6cc6:	00e4      	lsls	r4, r4, #3
    6cc8:	431c      	orrs	r4, r3
    6cca:	00ff      	lsls	r7, r7, #3
    6ccc:	4e30      	ldr	r6, [pc, #192]	; (6d90 <__aeabi_dsub+0x624>)
    6cce:	e5d3      	b.n	6878 <__aeabi_dsub+0x10c>
    6cd0:	4e2f      	ldr	r6, [pc, #188]	; (6d90 <__aeabi_dsub+0x624>)
    6cd2:	45b4      	cmp	ip, r6
    6cd4:	d1b4      	bne.n	6c40 <__aeabi_dsub+0x4d4>
    6cd6:	000c      	movs	r4, r1
    6cd8:	0017      	movs	r7, r2
    6cda:	4666      	mov	r6, ip
    6cdc:	e5cc      	b.n	6878 <__aeabi_dsub+0x10c>
    6cde:	2700      	movs	r7, #0
    6ce0:	2400      	movs	r4, #0
    6ce2:	e5e8      	b.n	68b6 <__aeabi_dsub+0x14a>
    6ce4:	2b00      	cmp	r3, #0
    6ce6:	d039      	beq.n	6d5c <__aeabi_dsub+0x5f0>
    6ce8:	000b      	movs	r3, r1
    6cea:	4313      	orrs	r3, r2
    6cec:	d100      	bne.n	6cf0 <__aeabi_dsub+0x584>
    6cee:	e744      	b.n	6b7a <__aeabi_dsub+0x40e>
    6cf0:	08c0      	lsrs	r0, r0, #3
    6cf2:	0767      	lsls	r7, r4, #29
    6cf4:	4307      	orrs	r7, r0
    6cf6:	2080      	movs	r0, #128	; 0x80
    6cf8:	08e4      	lsrs	r4, r4, #3
    6cfa:	0300      	lsls	r0, r0, #12
    6cfc:	4204      	tst	r4, r0
    6cfe:	d0e1      	beq.n	6cc4 <__aeabi_dsub+0x558>
    6d00:	08cb      	lsrs	r3, r1, #3
    6d02:	4203      	tst	r3, r0
    6d04:	d1de      	bne.n	6cc4 <__aeabi_dsub+0x558>
    6d06:	08d7      	lsrs	r7, r2, #3
    6d08:	0749      	lsls	r1, r1, #29
    6d0a:	430f      	orrs	r7, r1
    6d0c:	001c      	movs	r4, r3
    6d0e:	e7d9      	b.n	6cc4 <__aeabi_dsub+0x558>
    6d10:	2100      	movs	r1, #0
    6d12:	e771      	b.n	6bf8 <__aeabi_dsub+0x48c>
    6d14:	2500      	movs	r5, #0
    6d16:	2700      	movs	r7, #0
    6d18:	e5e9      	b.n	68ee <__aeabi_dsub+0x182>
    6d1a:	002e      	movs	r6, r5
    6d1c:	0027      	movs	r7, r4
    6d1e:	3e20      	subs	r6, #32
    6d20:	40f7      	lsrs	r7, r6
    6d22:	2d20      	cmp	r5, #32
    6d24:	d02f      	beq.n	6d86 <__aeabi_dsub+0x61a>
    6d26:	2640      	movs	r6, #64	; 0x40
    6d28:	1b75      	subs	r5, r6, r5
    6d2a:	40ac      	lsls	r4, r5
    6d2c:	4650      	mov	r0, sl
    6d2e:	4320      	orrs	r0, r4
    6d30:	1e44      	subs	r4, r0, #1
    6d32:	41a0      	sbcs	r0, r4
    6d34:	2400      	movs	r4, #0
    6d36:	4338      	orrs	r0, r7
    6d38:	e6dc      	b.n	6af4 <__aeabi_dsub+0x388>
    6d3a:	2480      	movs	r4, #128	; 0x80
    6d3c:	2500      	movs	r5, #0
    6d3e:	0324      	lsls	r4, r4, #12
    6d40:	4e13      	ldr	r6, [pc, #76]	; (6d90 <__aeabi_dsub+0x624>)
    6d42:	2700      	movs	r7, #0
    6d44:	e5d3      	b.n	68ee <__aeabi_dsub+0x182>
    6d46:	4650      	mov	r0, sl
    6d48:	4320      	orrs	r0, r4
    6d4a:	0007      	movs	r7, r0
    6d4c:	1e78      	subs	r0, r7, #1
    6d4e:	4187      	sbcs	r7, r0
    6d50:	2400      	movs	r4, #0
    6d52:	18bf      	adds	r7, r7, r2
    6d54:	e760      	b.n	6c18 <__aeabi_dsub+0x4ac>
    6d56:	000c      	movs	r4, r1
    6d58:	0017      	movs	r7, r2
    6d5a:	e58d      	b.n	6878 <__aeabi_dsub+0x10c>
    6d5c:	000c      	movs	r4, r1
    6d5e:	0017      	movs	r7, r2
    6d60:	4e0b      	ldr	r6, [pc, #44]	; (6d90 <__aeabi_dsub+0x624>)
    6d62:	e589      	b.n	6878 <__aeabi_dsub+0x10c>
    6d64:	001e      	movs	r6, r3
    6d66:	0027      	movs	r7, r4
    6d68:	3e20      	subs	r6, #32
    6d6a:	40f7      	lsrs	r7, r6
    6d6c:	2b20      	cmp	r3, #32
    6d6e:	d00c      	beq.n	6d8a <__aeabi_dsub+0x61e>
    6d70:	2640      	movs	r6, #64	; 0x40
    6d72:	1af3      	subs	r3, r6, r3
    6d74:	409c      	lsls	r4, r3
    6d76:	4650      	mov	r0, sl
    6d78:	4320      	orrs	r0, r4
    6d7a:	1e44      	subs	r4, r0, #1
    6d7c:	41a0      	sbcs	r0, r4
    6d7e:	4307      	orrs	r7, r0
    6d80:	2400      	movs	r4, #0
    6d82:	18bf      	adds	r7, r7, r2
    6d84:	e748      	b.n	6c18 <__aeabi_dsub+0x4ac>
    6d86:	2400      	movs	r4, #0
    6d88:	e7d0      	b.n	6d2c <__aeabi_dsub+0x5c0>
    6d8a:	2400      	movs	r4, #0
    6d8c:	e7f3      	b.n	6d76 <__aeabi_dsub+0x60a>
    6d8e:	46c0      	nop			; (mov r8, r8)
    6d90:	000007ff 	.word	0x000007ff
    6d94:	ff7fffff 	.word	0xff7fffff

00006d98 <__aeabi_dcmpun>:
    6d98:	b570      	push	{r4, r5, r6, lr}
    6d9a:	4e0e      	ldr	r6, [pc, #56]	; (6dd4 <__aeabi_dcmpun+0x3c>)
    6d9c:	030d      	lsls	r5, r1, #12
    6d9e:	031c      	lsls	r4, r3, #12
    6da0:	0049      	lsls	r1, r1, #1
    6da2:	005b      	lsls	r3, r3, #1
    6da4:	0b2d      	lsrs	r5, r5, #12
    6da6:	0d49      	lsrs	r1, r1, #21
    6da8:	0b24      	lsrs	r4, r4, #12
    6daa:	0d5b      	lsrs	r3, r3, #21
    6dac:	42b1      	cmp	r1, r6
    6dae:	d004      	beq.n	6dba <__aeabi_dcmpun+0x22>
    6db0:	4908      	ldr	r1, [pc, #32]	; (6dd4 <__aeabi_dcmpun+0x3c>)
    6db2:	2000      	movs	r0, #0
    6db4:	428b      	cmp	r3, r1
    6db6:	d008      	beq.n	6dca <__aeabi_dcmpun+0x32>
    6db8:	bd70      	pop	{r4, r5, r6, pc}
    6dba:	4305      	orrs	r5, r0
    6dbc:	2001      	movs	r0, #1
    6dbe:	2d00      	cmp	r5, #0
    6dc0:	d1fa      	bne.n	6db8 <__aeabi_dcmpun+0x20>
    6dc2:	4904      	ldr	r1, [pc, #16]	; (6dd4 <__aeabi_dcmpun+0x3c>)
    6dc4:	2000      	movs	r0, #0
    6dc6:	428b      	cmp	r3, r1
    6dc8:	d1f6      	bne.n	6db8 <__aeabi_dcmpun+0x20>
    6dca:	4314      	orrs	r4, r2
    6dcc:	0020      	movs	r0, r4
    6dce:	1e44      	subs	r4, r0, #1
    6dd0:	41a0      	sbcs	r0, r4
    6dd2:	e7f1      	b.n	6db8 <__aeabi_dcmpun+0x20>
    6dd4:	000007ff 	.word	0x000007ff

00006dd8 <__aeabi_d2iz>:
    6dd8:	b530      	push	{r4, r5, lr}
    6dda:	4d13      	ldr	r5, [pc, #76]	; (6e28 <__aeabi_d2iz+0x50>)
    6ddc:	030a      	lsls	r2, r1, #12
    6dde:	004b      	lsls	r3, r1, #1
    6de0:	0b12      	lsrs	r2, r2, #12
    6de2:	0d5b      	lsrs	r3, r3, #21
    6de4:	0fc9      	lsrs	r1, r1, #31
    6de6:	2400      	movs	r4, #0
    6de8:	42ab      	cmp	r3, r5
    6dea:	dd10      	ble.n	6e0e <__aeabi_d2iz+0x36>
    6dec:	4c0f      	ldr	r4, [pc, #60]	; (6e2c <__aeabi_d2iz+0x54>)
    6dee:	42a3      	cmp	r3, r4
    6df0:	dc0f      	bgt.n	6e12 <__aeabi_d2iz+0x3a>
    6df2:	2480      	movs	r4, #128	; 0x80
    6df4:	4d0e      	ldr	r5, [pc, #56]	; (6e30 <__aeabi_d2iz+0x58>)
    6df6:	0364      	lsls	r4, r4, #13
    6df8:	4322      	orrs	r2, r4
    6dfa:	1aed      	subs	r5, r5, r3
    6dfc:	2d1f      	cmp	r5, #31
    6dfe:	dd0b      	ble.n	6e18 <__aeabi_d2iz+0x40>
    6e00:	480c      	ldr	r0, [pc, #48]	; (6e34 <__aeabi_d2iz+0x5c>)
    6e02:	1ac3      	subs	r3, r0, r3
    6e04:	40da      	lsrs	r2, r3
    6e06:	4254      	negs	r4, r2
    6e08:	2900      	cmp	r1, #0
    6e0a:	d100      	bne.n	6e0e <__aeabi_d2iz+0x36>
    6e0c:	0014      	movs	r4, r2
    6e0e:	0020      	movs	r0, r4
    6e10:	bd30      	pop	{r4, r5, pc}
    6e12:	4b09      	ldr	r3, [pc, #36]	; (6e38 <__aeabi_d2iz+0x60>)
    6e14:	18cc      	adds	r4, r1, r3
    6e16:	e7fa      	b.n	6e0e <__aeabi_d2iz+0x36>
    6e18:	4c08      	ldr	r4, [pc, #32]	; (6e3c <__aeabi_d2iz+0x64>)
    6e1a:	40e8      	lsrs	r0, r5
    6e1c:	46a4      	mov	ip, r4
    6e1e:	4463      	add	r3, ip
    6e20:	409a      	lsls	r2, r3
    6e22:	4302      	orrs	r2, r0
    6e24:	e7ef      	b.n	6e06 <__aeabi_d2iz+0x2e>
    6e26:	46c0      	nop			; (mov r8, r8)
    6e28:	000003fe 	.word	0x000003fe
    6e2c:	0000041d 	.word	0x0000041d
    6e30:	00000433 	.word	0x00000433
    6e34:	00000413 	.word	0x00000413
    6e38:	7fffffff 	.word	0x7fffffff
    6e3c:	fffffbed 	.word	0xfffffbed

00006e40 <__aeabi_i2d>:
    6e40:	b570      	push	{r4, r5, r6, lr}
    6e42:	2800      	cmp	r0, #0
    6e44:	d030      	beq.n	6ea8 <__aeabi_i2d+0x68>
    6e46:	17c3      	asrs	r3, r0, #31
    6e48:	18c4      	adds	r4, r0, r3
    6e4a:	405c      	eors	r4, r3
    6e4c:	0fc5      	lsrs	r5, r0, #31
    6e4e:	0020      	movs	r0, r4
    6e50:	f000 f94c 	bl	70ec <__clzsi2>
    6e54:	4b17      	ldr	r3, [pc, #92]	; (6eb4 <__aeabi_i2d+0x74>)
    6e56:	4a18      	ldr	r2, [pc, #96]	; (6eb8 <__aeabi_i2d+0x78>)
    6e58:	1a1b      	subs	r3, r3, r0
    6e5a:	1ad2      	subs	r2, r2, r3
    6e5c:	2a1f      	cmp	r2, #31
    6e5e:	dd18      	ble.n	6e92 <__aeabi_i2d+0x52>
    6e60:	4a16      	ldr	r2, [pc, #88]	; (6ebc <__aeabi_i2d+0x7c>)
    6e62:	1ad2      	subs	r2, r2, r3
    6e64:	4094      	lsls	r4, r2
    6e66:	2200      	movs	r2, #0
    6e68:	0324      	lsls	r4, r4, #12
    6e6a:	055b      	lsls	r3, r3, #21
    6e6c:	0b24      	lsrs	r4, r4, #12
    6e6e:	0d5b      	lsrs	r3, r3, #21
    6e70:	2100      	movs	r1, #0
    6e72:	0010      	movs	r0, r2
    6e74:	0324      	lsls	r4, r4, #12
    6e76:	0d0a      	lsrs	r2, r1, #20
    6e78:	0b24      	lsrs	r4, r4, #12
    6e7a:	0512      	lsls	r2, r2, #20
    6e7c:	4322      	orrs	r2, r4
    6e7e:	4c10      	ldr	r4, [pc, #64]	; (6ec0 <__aeabi_i2d+0x80>)
    6e80:	051b      	lsls	r3, r3, #20
    6e82:	4022      	ands	r2, r4
    6e84:	4313      	orrs	r3, r2
    6e86:	005b      	lsls	r3, r3, #1
    6e88:	07ed      	lsls	r5, r5, #31
    6e8a:	085b      	lsrs	r3, r3, #1
    6e8c:	432b      	orrs	r3, r5
    6e8e:	0019      	movs	r1, r3
    6e90:	bd70      	pop	{r4, r5, r6, pc}
    6e92:	0021      	movs	r1, r4
    6e94:	4091      	lsls	r1, r2
    6e96:	000a      	movs	r2, r1
    6e98:	210b      	movs	r1, #11
    6e9a:	1a08      	subs	r0, r1, r0
    6e9c:	40c4      	lsrs	r4, r0
    6e9e:	055b      	lsls	r3, r3, #21
    6ea0:	0324      	lsls	r4, r4, #12
    6ea2:	0b24      	lsrs	r4, r4, #12
    6ea4:	0d5b      	lsrs	r3, r3, #21
    6ea6:	e7e3      	b.n	6e70 <__aeabi_i2d+0x30>
    6ea8:	2500      	movs	r5, #0
    6eaa:	2300      	movs	r3, #0
    6eac:	2400      	movs	r4, #0
    6eae:	2200      	movs	r2, #0
    6eb0:	e7de      	b.n	6e70 <__aeabi_i2d+0x30>
    6eb2:	46c0      	nop			; (mov r8, r8)
    6eb4:	0000041e 	.word	0x0000041e
    6eb8:	00000433 	.word	0x00000433
    6ebc:	00000413 	.word	0x00000413
    6ec0:	800fffff 	.word	0x800fffff

00006ec4 <__aeabi_ui2d>:
    6ec4:	b510      	push	{r4, lr}
    6ec6:	1e04      	subs	r4, r0, #0
    6ec8:	d028      	beq.n	6f1c <__aeabi_ui2d+0x58>
    6eca:	f000 f90f 	bl	70ec <__clzsi2>
    6ece:	4b15      	ldr	r3, [pc, #84]	; (6f24 <__aeabi_ui2d+0x60>)
    6ed0:	4a15      	ldr	r2, [pc, #84]	; (6f28 <__aeabi_ui2d+0x64>)
    6ed2:	1a1b      	subs	r3, r3, r0
    6ed4:	1ad2      	subs	r2, r2, r3
    6ed6:	2a1f      	cmp	r2, #31
    6ed8:	dd15      	ble.n	6f06 <__aeabi_ui2d+0x42>
    6eda:	4a14      	ldr	r2, [pc, #80]	; (6f2c <__aeabi_ui2d+0x68>)
    6edc:	1ad2      	subs	r2, r2, r3
    6ede:	4094      	lsls	r4, r2
    6ee0:	2200      	movs	r2, #0
    6ee2:	0324      	lsls	r4, r4, #12
    6ee4:	055b      	lsls	r3, r3, #21
    6ee6:	0b24      	lsrs	r4, r4, #12
    6ee8:	0d5b      	lsrs	r3, r3, #21
    6eea:	2100      	movs	r1, #0
    6eec:	0010      	movs	r0, r2
    6eee:	0324      	lsls	r4, r4, #12
    6ef0:	0d0a      	lsrs	r2, r1, #20
    6ef2:	0b24      	lsrs	r4, r4, #12
    6ef4:	0512      	lsls	r2, r2, #20
    6ef6:	4322      	orrs	r2, r4
    6ef8:	4c0d      	ldr	r4, [pc, #52]	; (6f30 <__aeabi_ui2d+0x6c>)
    6efa:	051b      	lsls	r3, r3, #20
    6efc:	4022      	ands	r2, r4
    6efe:	4313      	orrs	r3, r2
    6f00:	005b      	lsls	r3, r3, #1
    6f02:	0859      	lsrs	r1, r3, #1
    6f04:	bd10      	pop	{r4, pc}
    6f06:	0021      	movs	r1, r4
    6f08:	4091      	lsls	r1, r2
    6f0a:	000a      	movs	r2, r1
    6f0c:	210b      	movs	r1, #11
    6f0e:	1a08      	subs	r0, r1, r0
    6f10:	40c4      	lsrs	r4, r0
    6f12:	055b      	lsls	r3, r3, #21
    6f14:	0324      	lsls	r4, r4, #12
    6f16:	0b24      	lsrs	r4, r4, #12
    6f18:	0d5b      	lsrs	r3, r3, #21
    6f1a:	e7e6      	b.n	6eea <__aeabi_ui2d+0x26>
    6f1c:	2300      	movs	r3, #0
    6f1e:	2400      	movs	r4, #0
    6f20:	2200      	movs	r2, #0
    6f22:	e7e2      	b.n	6eea <__aeabi_ui2d+0x26>
    6f24:	0000041e 	.word	0x0000041e
    6f28:	00000433 	.word	0x00000433
    6f2c:	00000413 	.word	0x00000413
    6f30:	800fffff 	.word	0x800fffff

00006f34 <__aeabi_f2d>:
    6f34:	0041      	lsls	r1, r0, #1
    6f36:	0e09      	lsrs	r1, r1, #24
    6f38:	1c4b      	adds	r3, r1, #1
    6f3a:	b570      	push	{r4, r5, r6, lr}
    6f3c:	b2db      	uxtb	r3, r3
    6f3e:	0246      	lsls	r6, r0, #9
    6f40:	0a75      	lsrs	r5, r6, #9
    6f42:	0fc4      	lsrs	r4, r0, #31
    6f44:	2b01      	cmp	r3, #1
    6f46:	dd14      	ble.n	6f72 <__aeabi_f2d+0x3e>
    6f48:	23e0      	movs	r3, #224	; 0xe0
    6f4a:	009b      	lsls	r3, r3, #2
    6f4c:	076d      	lsls	r5, r5, #29
    6f4e:	0b36      	lsrs	r6, r6, #12
    6f50:	18cb      	adds	r3, r1, r3
    6f52:	2100      	movs	r1, #0
    6f54:	0d0a      	lsrs	r2, r1, #20
    6f56:	0028      	movs	r0, r5
    6f58:	0512      	lsls	r2, r2, #20
    6f5a:	4d1c      	ldr	r5, [pc, #112]	; (6fcc <__aeabi_f2d+0x98>)
    6f5c:	4332      	orrs	r2, r6
    6f5e:	055b      	lsls	r3, r3, #21
    6f60:	402a      	ands	r2, r5
    6f62:	085b      	lsrs	r3, r3, #1
    6f64:	4313      	orrs	r3, r2
    6f66:	005b      	lsls	r3, r3, #1
    6f68:	07e4      	lsls	r4, r4, #31
    6f6a:	085b      	lsrs	r3, r3, #1
    6f6c:	4323      	orrs	r3, r4
    6f6e:	0019      	movs	r1, r3
    6f70:	bd70      	pop	{r4, r5, r6, pc}
    6f72:	2900      	cmp	r1, #0
    6f74:	d114      	bne.n	6fa0 <__aeabi_f2d+0x6c>
    6f76:	2d00      	cmp	r5, #0
    6f78:	d01e      	beq.n	6fb8 <__aeabi_f2d+0x84>
    6f7a:	0028      	movs	r0, r5
    6f7c:	f000 f8b6 	bl	70ec <__clzsi2>
    6f80:	280a      	cmp	r0, #10
    6f82:	dc1c      	bgt.n	6fbe <__aeabi_f2d+0x8a>
    6f84:	230b      	movs	r3, #11
    6f86:	002a      	movs	r2, r5
    6f88:	1a1b      	subs	r3, r3, r0
    6f8a:	40da      	lsrs	r2, r3
    6f8c:	0003      	movs	r3, r0
    6f8e:	3315      	adds	r3, #21
    6f90:	409d      	lsls	r5, r3
    6f92:	4b0f      	ldr	r3, [pc, #60]	; (6fd0 <__aeabi_f2d+0x9c>)
    6f94:	0312      	lsls	r2, r2, #12
    6f96:	1a1b      	subs	r3, r3, r0
    6f98:	055b      	lsls	r3, r3, #21
    6f9a:	0b16      	lsrs	r6, r2, #12
    6f9c:	0d5b      	lsrs	r3, r3, #21
    6f9e:	e7d8      	b.n	6f52 <__aeabi_f2d+0x1e>
    6fa0:	2d00      	cmp	r5, #0
    6fa2:	d006      	beq.n	6fb2 <__aeabi_f2d+0x7e>
    6fa4:	0b32      	lsrs	r2, r6, #12
    6fa6:	2680      	movs	r6, #128	; 0x80
    6fa8:	0336      	lsls	r6, r6, #12
    6faa:	076d      	lsls	r5, r5, #29
    6fac:	4316      	orrs	r6, r2
    6fae:	4b09      	ldr	r3, [pc, #36]	; (6fd4 <__aeabi_f2d+0xa0>)
    6fb0:	e7cf      	b.n	6f52 <__aeabi_f2d+0x1e>
    6fb2:	4b08      	ldr	r3, [pc, #32]	; (6fd4 <__aeabi_f2d+0xa0>)
    6fb4:	2600      	movs	r6, #0
    6fb6:	e7cc      	b.n	6f52 <__aeabi_f2d+0x1e>
    6fb8:	2300      	movs	r3, #0
    6fba:	2600      	movs	r6, #0
    6fbc:	e7c9      	b.n	6f52 <__aeabi_f2d+0x1e>
    6fbe:	0003      	movs	r3, r0
    6fc0:	002a      	movs	r2, r5
    6fc2:	3b0b      	subs	r3, #11
    6fc4:	409a      	lsls	r2, r3
    6fc6:	2500      	movs	r5, #0
    6fc8:	e7e3      	b.n	6f92 <__aeabi_f2d+0x5e>
    6fca:	46c0      	nop			; (mov r8, r8)
    6fcc:	800fffff 	.word	0x800fffff
    6fd0:	00000389 	.word	0x00000389
    6fd4:	000007ff 	.word	0x000007ff

00006fd8 <__aeabi_d2f>:
    6fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6fda:	004c      	lsls	r4, r1, #1
    6fdc:	0d64      	lsrs	r4, r4, #21
    6fde:	030b      	lsls	r3, r1, #12
    6fe0:	1c62      	adds	r2, r4, #1
    6fe2:	0f45      	lsrs	r5, r0, #29
    6fe4:	0a5b      	lsrs	r3, r3, #9
    6fe6:	0552      	lsls	r2, r2, #21
    6fe8:	432b      	orrs	r3, r5
    6fea:	0fc9      	lsrs	r1, r1, #31
    6fec:	00c5      	lsls	r5, r0, #3
    6fee:	0d52      	lsrs	r2, r2, #21
    6ff0:	2a01      	cmp	r2, #1
    6ff2:	dd28      	ble.n	7046 <__aeabi_d2f+0x6e>
    6ff4:	4a3a      	ldr	r2, [pc, #232]	; (70e0 <__aeabi_d2f+0x108>)
    6ff6:	18a6      	adds	r6, r4, r2
    6ff8:	2efe      	cmp	r6, #254	; 0xfe
    6ffa:	dc1b      	bgt.n	7034 <__aeabi_d2f+0x5c>
    6ffc:	2e00      	cmp	r6, #0
    6ffe:	dd3e      	ble.n	707e <__aeabi_d2f+0xa6>
    7000:	0180      	lsls	r0, r0, #6
    7002:	0002      	movs	r2, r0
    7004:	1e50      	subs	r0, r2, #1
    7006:	4182      	sbcs	r2, r0
    7008:	0f6d      	lsrs	r5, r5, #29
    700a:	432a      	orrs	r2, r5
    700c:	00db      	lsls	r3, r3, #3
    700e:	4313      	orrs	r3, r2
    7010:	075a      	lsls	r2, r3, #29
    7012:	d004      	beq.n	701e <__aeabi_d2f+0x46>
    7014:	220f      	movs	r2, #15
    7016:	401a      	ands	r2, r3
    7018:	2a04      	cmp	r2, #4
    701a:	d000      	beq.n	701e <__aeabi_d2f+0x46>
    701c:	3304      	adds	r3, #4
    701e:	2280      	movs	r2, #128	; 0x80
    7020:	04d2      	lsls	r2, r2, #19
    7022:	401a      	ands	r2, r3
    7024:	d05a      	beq.n	70dc <__aeabi_d2f+0x104>
    7026:	3601      	adds	r6, #1
    7028:	2eff      	cmp	r6, #255	; 0xff
    702a:	d003      	beq.n	7034 <__aeabi_d2f+0x5c>
    702c:	019b      	lsls	r3, r3, #6
    702e:	0a5b      	lsrs	r3, r3, #9
    7030:	b2f4      	uxtb	r4, r6
    7032:	e001      	b.n	7038 <__aeabi_d2f+0x60>
    7034:	24ff      	movs	r4, #255	; 0xff
    7036:	2300      	movs	r3, #0
    7038:	0258      	lsls	r0, r3, #9
    703a:	05e4      	lsls	r4, r4, #23
    703c:	0a40      	lsrs	r0, r0, #9
    703e:	07c9      	lsls	r1, r1, #31
    7040:	4320      	orrs	r0, r4
    7042:	4308      	orrs	r0, r1
    7044:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7046:	2c00      	cmp	r4, #0
    7048:	d007      	beq.n	705a <__aeabi_d2f+0x82>
    704a:	431d      	orrs	r5, r3
    704c:	d0f2      	beq.n	7034 <__aeabi_d2f+0x5c>
    704e:	2080      	movs	r0, #128	; 0x80
    7050:	00db      	lsls	r3, r3, #3
    7052:	0480      	lsls	r0, r0, #18
    7054:	4303      	orrs	r3, r0
    7056:	26ff      	movs	r6, #255	; 0xff
    7058:	e7da      	b.n	7010 <__aeabi_d2f+0x38>
    705a:	432b      	orrs	r3, r5
    705c:	d003      	beq.n	7066 <__aeabi_d2f+0x8e>
    705e:	2305      	movs	r3, #5
    7060:	08db      	lsrs	r3, r3, #3
    7062:	2cff      	cmp	r4, #255	; 0xff
    7064:	d003      	beq.n	706e <__aeabi_d2f+0x96>
    7066:	025b      	lsls	r3, r3, #9
    7068:	0a5b      	lsrs	r3, r3, #9
    706a:	b2e4      	uxtb	r4, r4
    706c:	e7e4      	b.n	7038 <__aeabi_d2f+0x60>
    706e:	2b00      	cmp	r3, #0
    7070:	d032      	beq.n	70d8 <__aeabi_d2f+0x100>
    7072:	2080      	movs	r0, #128	; 0x80
    7074:	03c0      	lsls	r0, r0, #15
    7076:	4303      	orrs	r3, r0
    7078:	025b      	lsls	r3, r3, #9
    707a:	0a5b      	lsrs	r3, r3, #9
    707c:	e7dc      	b.n	7038 <__aeabi_d2f+0x60>
    707e:	0032      	movs	r2, r6
    7080:	3217      	adds	r2, #23
    7082:	db14      	blt.n	70ae <__aeabi_d2f+0xd6>
    7084:	2280      	movs	r2, #128	; 0x80
    7086:	271e      	movs	r7, #30
    7088:	0412      	lsls	r2, r2, #16
    708a:	4313      	orrs	r3, r2
    708c:	1bbf      	subs	r7, r7, r6
    708e:	2f1f      	cmp	r7, #31
    7090:	dc0f      	bgt.n	70b2 <__aeabi_d2f+0xda>
    7092:	4a14      	ldr	r2, [pc, #80]	; (70e4 <__aeabi_d2f+0x10c>)
    7094:	4694      	mov	ip, r2
    7096:	4464      	add	r4, ip
    7098:	002a      	movs	r2, r5
    709a:	40a5      	lsls	r5, r4
    709c:	002e      	movs	r6, r5
    709e:	40a3      	lsls	r3, r4
    70a0:	1e75      	subs	r5, r6, #1
    70a2:	41ae      	sbcs	r6, r5
    70a4:	40fa      	lsrs	r2, r7
    70a6:	4333      	orrs	r3, r6
    70a8:	4313      	orrs	r3, r2
    70aa:	2600      	movs	r6, #0
    70ac:	e7b0      	b.n	7010 <__aeabi_d2f+0x38>
    70ae:	2400      	movs	r4, #0
    70b0:	e7d5      	b.n	705e <__aeabi_d2f+0x86>
    70b2:	2202      	movs	r2, #2
    70b4:	4252      	negs	r2, r2
    70b6:	1b96      	subs	r6, r2, r6
    70b8:	001a      	movs	r2, r3
    70ba:	40f2      	lsrs	r2, r6
    70bc:	2f20      	cmp	r7, #32
    70be:	d009      	beq.n	70d4 <__aeabi_d2f+0xfc>
    70c0:	4809      	ldr	r0, [pc, #36]	; (70e8 <__aeabi_d2f+0x110>)
    70c2:	4684      	mov	ip, r0
    70c4:	4464      	add	r4, ip
    70c6:	40a3      	lsls	r3, r4
    70c8:	432b      	orrs	r3, r5
    70ca:	1e5d      	subs	r5, r3, #1
    70cc:	41ab      	sbcs	r3, r5
    70ce:	2600      	movs	r6, #0
    70d0:	4313      	orrs	r3, r2
    70d2:	e79d      	b.n	7010 <__aeabi_d2f+0x38>
    70d4:	2300      	movs	r3, #0
    70d6:	e7f7      	b.n	70c8 <__aeabi_d2f+0xf0>
    70d8:	2300      	movs	r3, #0
    70da:	e7ad      	b.n	7038 <__aeabi_d2f+0x60>
    70dc:	0034      	movs	r4, r6
    70de:	e7bf      	b.n	7060 <__aeabi_d2f+0x88>
    70e0:	fffffc80 	.word	0xfffffc80
    70e4:	fffffc82 	.word	0xfffffc82
    70e8:	fffffca2 	.word	0xfffffca2

000070ec <__clzsi2>:
    70ec:	211c      	movs	r1, #28
    70ee:	2301      	movs	r3, #1
    70f0:	041b      	lsls	r3, r3, #16
    70f2:	4298      	cmp	r0, r3
    70f4:	d301      	bcc.n	70fa <__clzsi2+0xe>
    70f6:	0c00      	lsrs	r0, r0, #16
    70f8:	3910      	subs	r1, #16
    70fa:	0a1b      	lsrs	r3, r3, #8
    70fc:	4298      	cmp	r0, r3
    70fe:	d301      	bcc.n	7104 <__clzsi2+0x18>
    7100:	0a00      	lsrs	r0, r0, #8
    7102:	3908      	subs	r1, #8
    7104:	091b      	lsrs	r3, r3, #4
    7106:	4298      	cmp	r0, r3
    7108:	d301      	bcc.n	710e <__clzsi2+0x22>
    710a:	0900      	lsrs	r0, r0, #4
    710c:	3904      	subs	r1, #4
    710e:	a202      	add	r2, pc, #8	; (adr r2, 7118 <__clzsi2+0x2c>)
    7110:	5c10      	ldrb	r0, [r2, r0]
    7112:	1840      	adds	r0, r0, r1
    7114:	4770      	bx	lr
    7116:	46c0      	nop			; (mov r8, r8)
    7118:	02020304 	.word	0x02020304
    711c:	01010101 	.word	0x01010101
	...

00007128 <__errno>:
    7128:	4b01      	ldr	r3, [pc, #4]	; (7130 <__errno+0x8>)
    712a:	6818      	ldr	r0, [r3, #0]
    712c:	4770      	bx	lr
    712e:	46c0      	nop			; (mov r8, r8)
    7130:	200000bc 	.word	0x200000bc

00007134 <__libc_init_array>:
    7134:	b570      	push	{r4, r5, r6, lr}
    7136:	2600      	movs	r6, #0
    7138:	4d0c      	ldr	r5, [pc, #48]	; (716c <__libc_init_array+0x38>)
    713a:	4c0d      	ldr	r4, [pc, #52]	; (7170 <__libc_init_array+0x3c>)
    713c:	1b64      	subs	r4, r4, r5
    713e:	10a4      	asrs	r4, r4, #2
    7140:	42a6      	cmp	r6, r4
    7142:	d109      	bne.n	7158 <__libc_init_array+0x24>
    7144:	2600      	movs	r6, #0
    7146:	f000 f897 	bl	7278 <_init>
    714a:	4d0a      	ldr	r5, [pc, #40]	; (7174 <__libc_init_array+0x40>)
    714c:	4c0a      	ldr	r4, [pc, #40]	; (7178 <__libc_init_array+0x44>)
    714e:	1b64      	subs	r4, r4, r5
    7150:	10a4      	asrs	r4, r4, #2
    7152:	42a6      	cmp	r6, r4
    7154:	d105      	bne.n	7162 <__libc_init_array+0x2e>
    7156:	bd70      	pop	{r4, r5, r6, pc}
    7158:	00b3      	lsls	r3, r6, #2
    715a:	58eb      	ldr	r3, [r5, r3]
    715c:	4798      	blx	r3
    715e:	3601      	adds	r6, #1
    7160:	e7ee      	b.n	7140 <__libc_init_array+0xc>
    7162:	00b3      	lsls	r3, r6, #2
    7164:	58eb      	ldr	r3, [r5, r3]
    7166:	4798      	blx	r3
    7168:	3601      	adds	r6, #1
    716a:	e7f2      	b.n	7152 <__libc_init_array+0x1e>
    716c:	00007284 	.word	0x00007284
    7170:	00007284 	.word	0x00007284
    7174:	00007284 	.word	0x00007284
    7178:	00007288 	.word	0x00007288

0000717c <senseBatPin>:
    717c:	06000000 01000106                                .....

00007181 <senseAPin>:
    7181:	03010001 0100010b                                .....

00007186 <senseBPin>:
    7186:	02010001 0000010a                                .....

0000718b <senseCPin>:
    718b:	03000001 00000101                                .....

00007190 <senseDPin>:
    7190:	02000001 00000100                                .....

00007195 <analogAccelPin>:
    7195:	07000001 70000007 0000776f 00000000     .......pow......
    71a5:	00000000                                         ...

000071a8 <TWO52>:
    71a8:	00000000 43300000 00000000 c3300000     ......0C......0.
    71b8:	00005290 000051e0 000051e0 000051de     .R...Q...Q...Q..
    71c8:	00005282 00005282 00005278 000051de     .R...R..xR...Q..
    71d8:	00005282 00005278 00005282 000051de     .R..xR...R...Q..
    71e8:	00005288 00005288 00005288 00005318     .R...R...R...S..
    71f8:	00005bfc 00005bde 00005b98 00005ab6     .[...[...[...Z..
    7208:	00005b98 00005bd0 00005b98 00005ab6     .[...[...[...Z..
    7218:	00005bde 00005bde 00005bd0 00005ab6     .[...[...[...Z..
    7228:	00005aae 00005aae 00005aae 00005e14     .Z...Z...Z...^..
    7238:	0000645c 0000631c 0000631c 00006318     \d...c...c...c..
    7248:	00006434 00006434 00006426 00006318     4d..4d..&d...c..
    7258:	00006434 00006426 00006434 00006318     4d..&d..4d...c..
    7268:	0000643c 0000643c 0000643c 00006640     <d..<d..<d..@f..

00007278 <_init>:
    7278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    727a:	46c0      	nop			; (mov r8, r8)
    727c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    727e:	bc08      	pop	{r3}
    7280:	469e      	mov	lr, r3
    7282:	4770      	bx	lr

00007284 <__init_array_start>:
    7284:	000000dd 	.word	0x000000dd

00007288 <_fini>:
    7288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    728a:	46c0      	nop			; (mov r8, r8)
    728c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    728e:	bc08      	pop	{r3}
    7290:	469e      	mov	lr, r3
    7292:	4770      	bx	lr

00007294 <__fini_array_start>:
    7294:	000000b5 	.word	0x000000b5
