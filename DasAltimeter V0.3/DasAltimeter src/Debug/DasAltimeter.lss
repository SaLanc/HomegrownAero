
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000713c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000120  20000000  0000713c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000530  20000120  00007260  00020120  2**3
                  ALLOC
  3 .stack        00002000  20000650  00007790  00020120  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
  6 .debug_info   00027880  00000000  00000000  000201a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d9f  00000000  00000000  00047a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000321d  00000000  00000000  0004a7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000520  00000000  00000000  0004d9dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d10  00000000  00000000  0004defd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016929  00000000  00000000  0004ec0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000aa36  00000000  00000000  00065536  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072cab  00000000  00000000  0006ff6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000011e8  00000000  00000000  000e2c18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	20002650 	.word	0x20002650
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000a61 	.word	0x00000a61
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00001031 	.word	0x00001031
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00001065 	.word	0x00001065
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00001105 	.word	0x00001105
      90:	0000116d 	.word	0x0000116d
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000120 	.word	0x20000120
      d4:	00000000 	.word	0x00000000
      d8:	0000713c 	.word	0x0000713c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000124 	.word	0x20000124
     108:	0000713c 	.word	0x0000713c
     10c:	0000713c 	.word	0x0000713c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	0000713c 	.word	0x0000713c
     1a4:	20000000 	.word	0x20000000
     1a8:	20000120 	.word	0x20000120
     1ac:	20000120 	.word	0x20000120
     1b0:	20000650 	.word	0x20000650
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00006fd5 	.word	0x00006fd5
     1d0:	000009c5 	.word	0x000009c5

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady() {
     1e6:	b570      	push	{r4, r5, r6, lr}
     1e8:	4c08      	ldr	r4, [pc, #32]	; (20c <AT25SFHoldTillReady+0x28>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	6163      	str	r3, [r4, #20]
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_READSTATUS);
     1ee:	2105      	movs	r1, #5
     1f0:	2001      	movs	r0, #1
     1f2:	4b07      	ldr	r3, [pc, #28]	; (210 <AT25SFHoldTillReady+0x2c>)
     1f4:	4798      	blx	r3
    while (spiDataIn(MEM_SPI) & 0x01);
     1f6:	2501      	movs	r5, #1
     1f8:	2001      	movs	r0, #1
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <AT25SFHoldTillReady+0x30>)
     1fc:	4798      	blx	r3
     1fe:	4228      	tst	r0, r5
     200:	d1fa      	bne.n	1f8 <AT25SFHoldTillReady+0x14>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     202:	2380      	movs	r3, #128	; 0x80
     204:	02db      	lsls	r3, r3, #11
     206:	61a3      	str	r3, [r4, #24]
    pinHigh(cs_mem);
}
     208:	bd70      	pop	{r4, r5, r6, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	41004400 	.word	0x41004400
     210:	00003629 	.word	0x00003629
     214:	00003641 	.word	0x00003641

00000218 <AT25SFChipErase>:
void AT25SFChipErase() {
     218:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     21a:	2580      	movs	r5, #128	; 0x80
     21c:	4c06      	ldr	r4, [pc, #24]	; (238 <AT25SFChipErase+0x20>)
     21e:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     220:	4e06      	ldr	r6, [pc, #24]	; (23c <AT25SFChipErase+0x24>)
     222:	6165      	str	r5, [r4, #20]
     224:	2106      	movs	r1, #6
     226:	2001      	movs	r0, #1
     228:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_CHIP_ERASE);
     22c:	2160      	movs	r1, #96	; 0x60
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     22e:	6165      	str	r5, [r4, #20]
     230:	2001      	movs	r0, #1
     232:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     234:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     236:	bd70      	pop	{r4, r5, r6, pc}
     238:	41004400 	.word	0x41004400
     23c:	00003629 	.word	0x00003629

00000240 <AT25SFWriteBytes>:
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     242:	2780      	movs	r7, #128	; 0x80
     244:	0006      	movs	r6, r0
     246:	4d14      	ldr	r5, [pc, #80]	; (298 <AT25SFWriteBytes+0x58>)

    AT25SFHoldTillReady();
     248:	4b14      	ldr	r3, [pc, #80]	; (29c <AT25SFWriteBytes+0x5c>)
     24a:	02ff      	lsls	r7, r7, #11
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     24c:	9201      	str	r2, [sp, #4]
     24e:	9100      	str	r1, [sp, #0]

    AT25SFHoldTillReady();
     250:	4798      	blx	r3

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     252:	4c13      	ldr	r4, [pc, #76]	; (2a0 <AT25SFWriteBytes+0x60>)
     254:	616f      	str	r7, [r5, #20]
     256:	2106      	movs	r1, #6
     258:	2001      	movs	r0, #1
     25a:	47a0      	blx	r4
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     25c:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     25e:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     260:	616f      	str	r7, [r5, #20]
     262:	2001      	movs	r0, #1
     264:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0xFF0000) >> 16));
     266:	0c31      	lsrs	r1, r6, #16
     268:	b2c9      	uxtb	r1, r1
     26a:	2001      	movs	r0, #1
     26c:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x00FF00) >>  8));
     26e:	0a31      	lsrs	r1, r6, #8
     270:	b2c9      	uxtb	r1, r1
     272:	2001      	movs	r0, #1
     274:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x0000FF) >>  0));
     276:	b2f1      	uxtb	r1, r6
     278:	2001      	movs	r0, #1
     27a:	47a0      	blx	r4
     27c:	9e01      	ldr	r6, [sp, #4]
     27e:	9b00      	ldr	r3, [sp, #0]
     280:	18f7      	adds	r7, r6, r3

    for (u8_t pos = 0; pos < len; ++pos) {
     282:	42be      	cmp	r6, r7
     284:	d004      	beq.n	290 <AT25SFWriteBytes+0x50>
        spiDataOut(MEM_SPI, bytes[pos]);
     286:	7831      	ldrb	r1, [r6, #0]
     288:	2001      	movs	r0, #1
     28a:	47a0      	blx	r4
     28c:	3601      	adds	r6, #1
     28e:	e7f8      	b.n	282 <AT25SFWriteBytes+0x42>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     290:	2380      	movs	r3, #128	; 0x80
     292:	02db      	lsls	r3, r3, #11
     294:	61ab      	str	r3, [r5, #24]
    }

    pinHigh(cs_mem);

}
     296:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     298:	41004400 	.word	0x41004400
     29c:	000001e5 	.word	0x000001e5
     2a0:	00003629 	.word	0x00003629

000002a4 <AT25SEWritePage>:
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2a6:	2780      	movs	r7, #128	; 0x80
     2a8:	0006      	movs	r6, r0
     2aa:	4d13      	ldr	r5, [pc, #76]	; (2f8 <AT25SEWritePage+0x54>)
     2ac:	02ff      	lsls	r7, r7, #11

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2ae:	4c13      	ldr	r4, [pc, #76]	; (2fc <AT25SEWritePage+0x58>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2b0:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2b2:	2001      	movs	r0, #1
     2b4:	616f      	str	r7, [r5, #20]
     2b6:	2106      	movs	r1, #6
     2b8:	47a0      	blx	r4
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ba:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     2bc:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2be:	616f      	str	r7, [r5, #20]
     2c0:	2001      	movs	r0, #1
     2c2:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     2c4:	0c31      	lsrs	r1, r6, #16
     2c6:	b2c9      	uxtb	r1, r1
     2c8:	2001      	movs	r0, #1
     2ca:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     2cc:	0a31      	lsrs	r1, r6, #8
     2ce:	b2c9      	uxtb	r1, r1
     2d0:	2001      	movs	r0, #1
     2d2:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     2d4:	b2f1      	uxtb	r1, r6
     2d6:	2001      	movs	r0, #1
     2d8:	47a0      	blx	r4
     2da:	9e01      	ldr	r6, [sp, #4]
     2dc:	1c77      	adds	r7, r6, #1
     2de:	37ff      	adds	r7, #255	; 0xff


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        spiDataOut(SPI1,data[pos]);
     2e0:	7831      	ldrb	r1, [r6, #0]
     2e2:	2001      	movs	r0, #1
     2e4:	3601      	adds	r6, #1
     2e6:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     2e8:	42be      	cmp	r6, r7
     2ea:	d1f9      	bne.n	2e0 <AT25SEWritePage+0x3c>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ec:	2380      	movs	r3, #128	; 0x80
     2ee:	02db      	lsls	r3, r3, #11
     2f0:	61ab      	str	r3, [r5, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     2f2:	2000      	movs	r0, #0
     2f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	41004400 	.word	0x41004400
     2fc:	00003629 	.word	0x00003629

00000300 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     300:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     304:	0005      	movs	r5, r0
     306:	000f      	movs	r7, r1
     308:	4e11      	ldr	r6, [pc, #68]	; (350 <AT25SEreadSample+0x50>)
     30a:	02db      	lsls	r3, r3, #11
     30c:	9201      	str	r2, [sp, #4]

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     30e:	4c11      	ldr	r4, [pc, #68]	; (354 <AT25SEreadSample+0x54>)
     310:	6173      	str	r3, [r6, #20]
     312:	210b      	movs	r1, #11
     314:	2001      	movs	r0, #1
     316:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     318:	0c29      	lsrs	r1, r5, #16
     31a:	b2c9      	uxtb	r1, r1
     31c:	2001      	movs	r0, #1
     31e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     320:	0a29      	lsrs	r1, r5, #8
     322:	b2c9      	uxtb	r1, r1
     324:	2001      	movs	r0, #1
     326:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     328:	b2e9      	uxtb	r1, r5
     32a:	2001      	movs	r0, #1
     32c:	47a0      	blx	r4
    spiDataOut(MEM_SPI, 0xFF);
     32e:	21ff      	movs	r1, #255	; 0xff
     330:	2001      	movs	r0, #1
     332:	47a0      	blx	r4
     334:	9c01      	ldr	r4, [sp, #4]
     336:	19e7      	adds	r7, r4, r7


    for (u8_t pos = 0; pos < len; ++pos) {
     338:	42bc      	cmp	r4, r7
     33a:	d005      	beq.n	348 <AT25SEreadSample+0x48>
        data[pos] = spiDataIn(MEM_SPI);
     33c:	2001      	movs	r0, #1
     33e:	4b06      	ldr	r3, [pc, #24]	; (358 <AT25SEreadSample+0x58>)
     340:	4798      	blx	r3
     342:	7020      	strb	r0, [r4, #0]
     344:	3401      	adds	r4, #1
     346:	e7f7      	b.n	338 <AT25SEreadSample+0x38>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     348:	2380      	movs	r3, #128	; 0x80
     34a:	02db      	lsls	r3, r3, #11
     34c:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);

}
     34e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     350:	41004400 	.word	0x41004400
     354:	00003629 	.word	0x00003629
     358:	00003641 	.word	0x00003641

0000035c <AT25SEreadPage>:

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     35e:	2380      	movs	r3, #128	; 0x80
     360:	0007      	movs	r7, r0
     362:	000c      	movs	r4, r1
     364:	4e10      	ldr	r6, [pc, #64]	; (3a8 <AT25SEreadPage+0x4c>)
     366:	02db      	lsls	r3, r3, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     368:	4d10      	ldr	r5, [pc, #64]	; (3ac <AT25SEreadPage+0x50>)
     36a:	6173      	str	r3, [r6, #20]
     36c:	210b      	movs	r1, #11
     36e:	2001      	movs	r0, #1
     370:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     372:	0c39      	lsrs	r1, r7, #16
     374:	b2c9      	uxtb	r1, r1
     376:	2001      	movs	r0, #1
     378:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     37a:	0a39      	lsrs	r1, r7, #8
     37c:	b2c9      	uxtb	r1, r1
     37e:	2001      	movs	r0, #1
     380:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     382:	b2f9      	uxtb	r1, r7
     384:	2001      	movs	r0, #1
     386:	47a8      	blx	r5
    spiDataOut(MEM_SPI, 0xFF);
     388:	21ff      	movs	r1, #255	; 0xff
     38a:	2001      	movs	r0, #1
     38c:	47a8      	blx	r5
     38e:	1c65      	adds	r5, r4, #1
     390:	35ff      	adds	r5, #255	; 0xff

    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataIn(MEM_SPI);
     392:	2001      	movs	r0, #1
     394:	4b06      	ldr	r3, [pc, #24]	; (3b0 <AT25SEreadPage+0x54>)
     396:	4798      	blx	r3
     398:	7020      	strb	r0, [r4, #0]
     39a:	3401      	adds	r4, #1
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
    spiDataOut(MEM_SPI, 0xFF);

    for (u16_t pos = 0; pos < 256; ++pos) {
     39c:	42ac      	cmp	r4, r5
     39e:	d1f8      	bne.n	392 <AT25SEreadPage+0x36>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3a0:	2380      	movs	r3, #128	; 0x80
     3a2:	02db      	lsls	r3, r3, #11
     3a4:	61b3      	str	r3, [r6, #24]
        data[pos] = spiDataIn(MEM_SPI);
    }
    pinHigh(cs_mem);

}
     3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3a8:	41004400 	.word	0x41004400
     3ac:	00003629 	.word	0x00003629
     3b0:	00003641 	.word	0x00003641

000003b4 <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>

u32_t readMS5803AdcResults() {
     3b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b6:	2780      	movs	r7, #128	; 0x80
     3b8:	4e0b      	ldr	r6, [pc, #44]	; (3e8 <readMS5803AdcResults+0x34>)
     3ba:	01ff      	lsls	r7, r7, #7

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, cmdAdcRead_);
     3bc:	2100      	movs	r1, #0
     3be:	4b0b      	ldr	r3, [pc, #44]	; (3ec <readMS5803AdcResults+0x38>)
     3c0:	6177      	str	r7, [r6, #20]
     3c2:	2002      	movs	r0, #2
     3c4:	4798      	blx	r3
    u8_t _byte1 = spiDataIn(SPI2);
     3c6:	4d0a      	ldr	r5, [pc, #40]	; (3f0 <readMS5803AdcResults+0x3c>)
     3c8:	2002      	movs	r0, #2
     3ca:	47a8      	blx	r5
     3cc:	0004      	movs	r4, r0
    u8_t _byte2 = spiDataIn(SPI2);
     3ce:	2002      	movs	r0, #2
     3d0:	47a8      	blx	r5
     3d2:	9001      	str	r0, [sp, #4]
    u8_t _byte3 = spiDataIn(SPI2);
     3d4:	2002      	movs	r0, #2
     3d6:	47a8      	blx	r5
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3d8:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     3da:	9b01      	ldr	r3, [sp, #4]
     3dc:	0424      	lsls	r4, r4, #16
     3de:	021b      	lsls	r3, r3, #8
     3e0:	431c      	orrs	r4, r3
     3e2:	4320      	orrs	r0, r4
}
     3e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	41004400 	.word	0x41004400
     3ec:	00003629 	.word	0x00003629
     3f0:	00003641 	.word	0x00003641

000003f4 <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3f6:	b087      	sub	sp, #28
     3f8:	9304      	str	r3, [sp, #16]
    const u16_t C1 = coefficients_[1];
     3fa:	4b24      	ldr	r3, [pc, #144]	; (48c <ConvertPressureTemperature+0x98>)

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3fc:	9003      	str	r0, [sp, #12]
     3fe:	0014      	movs	r4, r2
    const u16_t C1 = coefficients_[1];
     400:	885a      	ldrh	r2, [r3, #2]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     402:	4f23      	ldr	r7, [pc, #140]	; (490 <ConvertPressureTemperature+0x9c>)
    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
     404:	9201      	str	r2, [sp, #4]
    const u16_t C2 = coefficients_[2];
     406:	889a      	ldrh	r2, [r3, #4]
     408:	9200      	str	r2, [sp, #0]
    const u16_t C3 = coefficients_[3];
    const u16_t C4 = coefficients_[4];
     40a:	891a      	ldrh	r2, [r3, #8]
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
    const u16_t C2 = coefficients_[2];
    const u16_t C3 = coefficients_[3];
     40c:	88dd      	ldrh	r5, [r3, #6]
    const u16_t C4 = coefficients_[4];
     40e:	9202      	str	r2, [sp, #8]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     410:	895e      	ldrh	r6, [r3, #10]
     412:	0236      	lsls	r6, r6, #8
     414:	1b8e      	subs	r6, r1, r6
     416:	17f2      	asrs	r2, r6, #31
     418:	9205      	str	r2, [sp, #20]
     41a:	8998      	ldrh	r0, [r3, #12]
     41c:	0032      	movs	r2, r6
     41e:	17f3      	asrs	r3, r6, #31
     420:	2100      	movs	r1, #0
     422:	47b8      	blx	r7
     424:	23fa      	movs	r3, #250	; 0xfa
     426:	0249      	lsls	r1, r1, #9
     428:	0dc0      	lsrs	r0, r0, #23
     42a:	4308      	orrs	r0, r1
     42c:	00db      	lsls	r3, r3, #3
     42e:	18c0      	adds	r0, r0, r3
     430:	6020      	str	r0, [r4, #0]

    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
    const  int64_t SENS  =  ((int64_t)C1 << 16) + ((C3 * (int64_t)dT) >> 7);
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     432:	0032      	movs	r2, r6
     434:	17f3      	asrs	r3, r6, #31
     436:	0028      	movs	r0, r5
     438:	2100      	movs	r1, #0
     43a:	47b8      	blx	r7
     43c:	064c      	lsls	r4, r1, #25
     43e:	11cb      	asrs	r3, r1, #7
     440:	2100      	movs	r1, #0
     442:	09c2      	lsrs	r2, r0, #7
     444:	4322      	orrs	r2, r4
     446:	9c01      	ldr	r4, [sp, #4]
     448:	0420      	lsls	r0, r4, #16
     44a:	1880      	adds	r0, r0, r2
     44c:	4159      	adcs	r1, r3
     44e:	9a03      	ldr	r2, [sp, #12]
     450:	2300      	movs	r3, #0
     452:	47b8      	blx	r7
     454:	02cb      	lsls	r3, r1, #11
     456:	0d44      	lsrs	r4, r0, #21
     458:	0032      	movs	r2, r6
     45a:	431c      	orrs	r4, r3
     45c:	154d      	asrs	r5, r1, #21
     45e:	9b05      	ldr	r3, [sp, #20]
     460:	9802      	ldr	r0, [sp, #8]
     462:	2100      	movs	r1, #0
     464:	47b8      	blx	r7
     466:	068b      	lsls	r3, r1, #26
     468:	118f      	asrs	r7, r1, #6
     46a:	9900      	ldr	r1, [sp, #0]
     46c:	0986      	lsrs	r6, r0, #6
     46e:	431e      	orrs	r6, r3
     470:	044a      	lsls	r2, r1, #17
     472:	0bcb      	lsrs	r3, r1, #15
     474:	1992      	adds	r2, r2, r6
     476:	417b      	adcs	r3, r7
     478:	1aa4      	subs	r4, r4, r2
     47a:	419d      	sbcs	r5, r3
     47c:	046b      	lsls	r3, r5, #17
     47e:	0be4      	lsrs	r4, r4, #15
     480:	431c      	orrs	r4, r3
     482:	9b04      	ldr	r3, [sp, #16]
     484:	601c      	str	r4, [r3, #0]

}
     486:	b007      	add	sp, #28
     488:	bdf0      	pop	{r4, r5, r6, r7, pc}
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	200002ae 	.word	0x200002ae
     490:	00004ef1 	.word	0x00004ef1

00000494 <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     494:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/100)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     496:	4b0c      	ldr	r3, [pc, #48]	; (4c8 <paToFeetNOAA+0x34>)
     498:	4798      	blx	r3
     49a:	4c0c      	ldr	r4, [pc, #48]	; (4cc <paToFeetNOAA+0x38>)
     49c:	2200      	movs	r2, #0
     49e:	4b0c      	ldr	r3, [pc, #48]	; (4d0 <paToFeetNOAA+0x3c>)
     4a0:	47a0      	blx	r4
     4a2:	2200      	movs	r2, #0
     4a4:	4b0b      	ldr	r3, [pc, #44]	; (4d4 <paToFeetNOAA+0x40>)
     4a6:	47a0      	blx	r4
     4a8:	4a0b      	ldr	r2, [pc, #44]	; (4d8 <paToFeetNOAA+0x44>)
     4aa:	4b0c      	ldr	r3, [pc, #48]	; (4dc <paToFeetNOAA+0x48>)
     4ac:	4c0c      	ldr	r4, [pc, #48]	; (4e0 <paToFeetNOAA+0x4c>)
     4ae:	47a0      	blx	r4
    return altFeet;
     4b0:	4c0c      	ldr	r4, [pc, #48]	; (4e4 <paToFeetNOAA+0x50>)
double paToFeetNOAA(int32_t pressureMbar) {

    double lower =(((double)(pressureMbar)/100)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     4b2:	0002      	movs	r2, r0
     4b4:	000b      	movs	r3, r1
    return altFeet;
     4b6:	2000      	movs	r0, #0
     4b8:	490b      	ldr	r1, [pc, #44]	; (4e8 <paToFeetNOAA+0x54>)
     4ba:	47a0      	blx	r4
     4bc:	4a0b      	ldr	r2, [pc, #44]	; (4ec <paToFeetNOAA+0x58>)
     4be:	4b0c      	ldr	r3, [pc, #48]	; (4f0 <paToFeetNOAA+0x5c>)
     4c0:	4c0c      	ldr	r4, [pc, #48]	; (4f4 <paToFeetNOAA+0x60>)
     4c2:	47a0      	blx	r4

}
     4c4:	bd10      	pop	{r4, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	00006cd9 	.word	0x00006cd9
     4cc:	00005849 	.word	0x00005849
     4d0:	40590000 	.word	0x40590000
     4d4:	408faa00 	.word	0x408faa00
     4d8:	e279dd3c 	.word	0xe279dd3c
     4dc:	3fc85b39 	.word	0x3fc85b39
     4e0:	00003955 	.word	0x00003955
     4e4:	00006585 	.word	0x00006585
     4e8:	3ff00000 	.word	0x3ff00000
     4ec:	9999999a 	.word	0x9999999a
     4f0:	4101beb3 	.word	0x4101beb3
     4f4:	00006091 	.word	0x00006091

000004f8 <readMS5803Coefficients>:



void readMS5803Coefficients() {
     4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     4fa:	24a2      	movs	r4, #162	; 0xa2
     4fc:	4d11      	ldr	r5, [pc, #68]	; (544 <readMS5803Coefficients+0x4c>)

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
        delay_us(600);
     4fe:	2096      	movs	r0, #150	; 0x96
     500:	4e11      	ldr	r6, [pc, #68]	; (548 <readMS5803Coefficients+0x50>)
     502:	0080      	lsls	r0, r0, #2
     504:	47b0      	blx	r6
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
        delay_us(600);
     506:	2096      	movs	r0, #150	; 0x96
     508:	0080      	lsls	r0, r0, #2
     50a:	47b0      	blx	r6
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     50c:	2380      	movs	r3, #128	; 0x80
     50e:	4e0f      	ldr	r6, [pc, #60]	; (54c <readMS5803Coefficients+0x54>)
     510:	01db      	lsls	r3, r3, #7
        pinLow(cs_baro);
        spiDataOut(SPI2, _cmd);
     512:	0021      	movs	r1, r4
     514:	6173      	str	r3, [r6, #20]
     516:	2002      	movs	r0, #2
     518:	4b0d      	ldr	r3, [pc, #52]	; (550 <readMS5803Coefficients+0x58>)
     51a:	4798      	blx	r3
        u8_t _byte1 = spiDataIn(SPI2);
     51c:	4f0d      	ldr	r7, [pc, #52]	; (554 <readMS5803Coefficients+0x5c>)
     51e:	2002      	movs	r0, #2
     520:	47b8      	blx	r7
     522:	9001      	str	r0, [sp, #4]
        u8_t _byte2 = spiDataIn(SPI2);
     524:	2002      	movs	r0, #2
     526:	47b8      	blx	r7
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     528:	2380      	movs	r3, #128	; 0x80
     52a:	01db      	lsls	r3, r3, #7
     52c:	61b3      	str	r3, [r6, #24]
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     52e:	9b01      	ldr	r3, [sp, #4]
     530:	3402      	adds	r4, #2
     532:	021b      	lsls	r3, r3, #8
     534:	4318      	orrs	r0, r3
     536:	b2e4      	uxtb	r4, r4
     538:	8028      	strh	r0, [r5, #0]
     53a:	3502      	adds	r5, #2



void readMS5803Coefficients() {

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
     53c:	2cae      	cmp	r4, #174	; 0xae
     53e:	d1de      	bne.n	4fe <readMS5803Coefficients+0x6>
        u8_t _byte2 = spiDataIn(SPI2);
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     540:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     542:	46c0      	nop			; (mov r8, r8)
     544:	200002b0 	.word	0x200002b0
     548:	00001001 	.word	0x00001001
     54c:	41004400 	.word	0x41004400
     550:	00003629 	.word	0x00003629
     554:	00003641 	.word	0x00003641

00000558 <initMS5803Barometer>:

void initMS5803Barometer() {
     558:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     55a:	2580      	movs	r5, #128	; 0x80
     55c:	4c06      	ldr	r4, [pc, #24]	; (578 <initMS5803Barometer+0x20>)
     55e:	01ed      	lsls	r5, r5, #7


    pinLow(cs_baro);
    spiDataOut(BARO_SPI, MS5803_CMD_RES);
     560:	211e      	movs	r1, #30
     562:	6165      	str	r5, [r4, #20]
     564:	2002      	movs	r0, #2
     566:	4b05      	ldr	r3, [pc, #20]	; (57c <initMS5803Barometer+0x24>)
     568:	4798      	blx	r3
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     56a:	61a5      	str	r5, [r4, #24]

    pinHigh(cs_baro);
    delay_ms(200);
     56c:	20c8      	movs	r0, #200	; 0xc8
     56e:	4b04      	ldr	r3, [pc, #16]	; (580 <initMS5803Barometer+0x28>)
     570:	4798      	blx	r3
    readMS5803Coefficients();
     572:	4b04      	ldr	r3, [pc, #16]	; (584 <initMS5803Barometer+0x2c>)
     574:	4798      	blx	r3

}
     576:	bd70      	pop	{r4, r5, r6, pc}
     578:	41004400 	.word	0x41004400
     57c:	00003629 	.word	0x00003629
     580:	00001035 	.word	0x00001035
     584:	000004f9 	.word	0x000004f9

00000588 <init>:
#include "math.h"

void init() {

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     588:	211e      	movs	r1, #30
#include "sam.h"
#include <util.h>
#include <boardDefines.h>
#include "math.h"

void init() {
     58a:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     58c:	4afc      	ldr	r2, [pc, #1008]	; (980 <init+0x3f8>)
#include "sam.h"
#include <util.h>
#include <boardDefines.h>
#include "math.h"

void init() {
     58e:	b085      	sub	sp, #20

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     590:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     592:	2401      	movs	r4, #1
     594:	438b      	bics	r3, r1
     596:	391c      	subs	r1, #28
     598:	430b      	orrs	r3, r1
     59a:	6053      	str	r3, [r2, #4]

    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     59c:	4af9      	ldr	r2, [pc, #996]	; (984 <init+0x3fc>)
     59e:	3106      	adds	r1, #6
     5a0:	6993      	ldr	r3, [r2, #24]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5a2:	260f      	movs	r6, #15
     5a4:	430b      	orrs	r3, r1
     5a6:	6193      	str	r3, [r2, #24]

    SystemInit();
     5a8:	4bf7      	ldr	r3, [pc, #988]	; (988 <init+0x400>)
     5aa:	4798      	blx	r3
    GclkInit(0);
     5ac:	2000      	movs	r0, #0
     5ae:	4bf7      	ldr	r3, [pc, #988]	; (98c <init+0x404>)
     5b0:	4798      	blx	r3
    RtcInit();
     5b2:	4bf7      	ldr	r3, [pc, #988]	; (990 <init+0x408>)
     5b4:	4798      	blx	r3
    delayInit();
     5b6:	4bf7      	ldr	r3, [pc, #988]	; (994 <init+0x40c>)
     5b8:	4798      	blx	r3
    adcInit();
     5ba:	4bf7      	ldr	r3, [pc, #988]	; (998 <init+0x410>)
     5bc:	4798      	blx	r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5be:	4bf7      	ldr	r3, [pc, #988]	; (99c <init+0x414>)
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5c0:	2002      	movs	r0, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5c2:	0019      	movs	r1, r3
     5c4:	3154      	adds	r1, #84	; 0x54
     5c6:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5c8:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5ca:	43a2      	bics	r2, r4
     5cc:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5ce:	2280      	movs	r2, #128	; 0x80
     5d0:	0352      	lsls	r2, r2, #13
     5d2:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5d4:	3533      	adds	r5, #51	; 0x33
     5d6:	782a      	ldrb	r2, [r5, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5d8:	390e      	subs	r1, #14

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5da:	43b2      	bics	r2, r6
     5dc:	4322      	orrs	r2, r4
     5de:	702a      	strb	r2, [r5, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5e0:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5e2:	001f      	movs	r7, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5e4:	4322      	orrs	r2, r4
     5e6:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5e8:	001a      	movs	r2, r3
     5ea:	3247      	adds	r2, #71	; 0x47
     5ec:	7811      	ldrb	r1, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5ee:	3794      	adds	r7, #148	; 0x94
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5f0:	43a1      	bics	r1, r4
     5f2:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5f4:	7811      	ldrb	r1, [r2, #0]
     5f6:	4301      	orrs	r1, r0
     5f8:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     5fa:	2180      	movs	r1, #128	; 0x80
     5fc:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     5fe:	7829      	ldrb	r1, [r5, #0]
     600:	300e      	adds	r0, #14
     602:	4031      	ands	r1, r6
     604:	4301      	orrs	r1, r0
     606:	7029      	strb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     608:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     60a:	7811      	ldrb	r1, [r2, #0]
     60c:	4321      	orrs	r1, r4
     60e:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     610:	327c      	adds	r2, #124	; 0x7c
     612:	7811      	ldrb	r1, [r2, #0]
     614:	43a1      	bics	r1, r4
     616:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     618:	7811      	ldrb	r1, [r2, #0]
     61a:	4329      	orrs	r1, r5
     61c:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     61e:	2108      	movs	r1, #8
     620:	468c      	mov	ip, r1
     622:	449c      	add	ip, r3
     624:	4661      	mov	r1, ip
     626:	3506      	adds	r5, #6
     628:	67cd      	str	r5, [r1, #124]	; 0x7c
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     62a:	31a9      	adds	r1, #169	; 0xa9
     62c:	780d      	ldrb	r5, [r1, #0]
     62e:	4035      	ands	r5, r6
     630:	4305      	orrs	r5, r0
     632:	700d      	strb	r5, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     634:	7815      	ldrb	r5, [r2, #0]
     636:	4325      	orrs	r5, r4
     638:	7015      	strb	r5, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     63a:	001d      	movs	r5, r3
     63c:	35d7      	adds	r5, #215	; 0xd7
     63e:	782a      	ldrb	r2, [r5, #0]
     640:	43a2      	bics	r2, r4
     642:	702a      	strb	r2, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     644:	2580      	movs	r5, #128	; 0x80
     646:	4ad6      	ldr	r2, [pc, #856]	; (9a0 <init+0x418>)
     648:	042d      	lsls	r5, r5, #16
     64a:	6015      	str	r5, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     64c:	002a      	movs	r2, r5
     64e:	9703      	str	r7, [sp, #12]
     650:	603a      	str	r2, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     652:	001a      	movs	r2, r3
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     654:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     656:	32c2      	adds	r2, #194	; 0xc2
     658:	7815      	ldrb	r5, [r2, #0]
     65a:	43a5      	bics	r5, r4
     65c:	7015      	strb	r5, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     65e:	7815      	ldrb	r5, [r2, #0]
     660:	433d      	orrs	r5, r7
     662:	7015      	strb	r5, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     664:	4665      	mov	r5, ip
     666:	19ff      	adds	r7, r7, r7
     668:	67ef      	str	r7, [r5, #124]	; 0x7c

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     66a:	780d      	ldrb	r5, [r1, #0]
     66c:	43b5      	bics	r5, r6
     66e:	4325      	orrs	r5, r4
     670:	700d      	strb	r5, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     672:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     674:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     676:	4321      	orrs	r1, r4
     678:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     67a:	0019      	movs	r1, r3
     67c:	31d6      	adds	r1, #214	; 0xd6
     67e:	780a      	ldrb	r2, [r1, #0]
     680:	43a2      	bics	r2, r4
     682:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     684:	2180      	movs	r1, #128	; 0x80
     686:	4ac6      	ldr	r2, [pc, #792]	; (9a0 <init+0x418>)
     688:	03c9      	lsls	r1, r1, #15
     68a:	6011      	str	r1, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     68c:	000a      	movs	r2, r1
     68e:	9903      	ldr	r1, [sp, #12]
     690:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     692:	001a      	movs	r2, r3
     694:	3243      	adds	r2, #67	; 0x43
     696:	7811      	ldrb	r1, [r2, #0]
     698:	43a1      	bics	r1, r4
     69a:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     69c:	7811      	ldrb	r1, [r2, #0]
     69e:	4329      	orrs	r1, r5
     6a0:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6a2:	001d      	movs	r5, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6a4:	2108      	movs	r1, #8
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6a6:	3531      	adds	r5, #49	; 0x31


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6a8:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6aa:	7829      	ldrb	r1, [r5, #0]
     6ac:	4031      	ands	r1, r6
     6ae:	4308      	orrs	r0, r1
     6b0:	7028      	strb	r0, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6b2:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6b4:	2002      	movs	r0, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6b6:	4321      	orrs	r1, r4
     6b8:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ba:	0019      	movs	r1, r3
     6bc:	3159      	adds	r1, #89	; 0x59
     6be:	780a      	ldrb	r2, [r1, #0]
     6c0:	43a2      	bics	r2, r4
     6c2:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6c4:	2280      	movs	r2, #128	; 0x80
     6c6:	0492      	lsls	r2, r2, #18
     6c8:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6ca:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6cc:	001a      	movs	r2, r3
     6ce:	3242      	adds	r2, #66	; 0x42
     6d0:	7811      	ldrb	r1, [r2, #0]
     6d2:	43a1      	bics	r1, r4
     6d4:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6d6:	7811      	ldrb	r1, [r2, #0]
     6d8:	4301      	orrs	r1, r0
     6da:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6dc:	605f      	str	r7, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6de:	7829      	ldrb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6e0:	0018      	movs	r0, r3

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6e2:	43b1      	bics	r1, r6
     6e4:	4321      	orrs	r1, r4
     6e6:	7029      	strb	r1, [r5, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6e8:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ea:	3048      	adds	r0, #72	; 0x48
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6ec:	4321      	orrs	r1, r4
     6ee:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6f0:	0019      	movs	r1, r3
     6f2:	3158      	adds	r1, #88	; 0x58
     6f4:	780a      	ldrb	r2, [r1, #0]
     6f6:	001f      	movs	r7, r3
     6f8:	43a2      	bics	r2, r4
     6fa:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6fc:	2280      	movs	r2, #128	; 0x80
    pinIn(senseDPin);
    pinMux(senseDPin);
    pinOut(fireDPin);
    pinLow(fireDPin);

    charges.igniterAHot = false;
     6fe:	2100      	movs	r1, #0
     700:	0452      	lsls	r2, r2, #17
     702:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     704:	615a      	str	r2, [r3, #20]
     706:	4aa7      	ldr	r2, [pc, #668]	; (9a4 <init+0x41c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     708:	3749      	adds	r7, #73	; 0x49
     70a:	7011      	strb	r1, [r2, #0]
    charges.igniterBHot = false;
     70c:	2100      	movs	r1, #0
     70e:	7211      	strb	r1, [r2, #8]
    charges.igniterCHot = false;
     710:	2100      	movs	r1, #0
     712:	7411      	strb	r1, [r2, #16]
    charges.igniterDHot = false;
     714:	2100      	movs	r1, #0
     716:	7611      	strb	r1, [r2, #24]
     718:	7802      	ldrb	r2, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     71a:	2502      	movs	r5, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     71c:	43a2      	bics	r2, r4
     71e:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     720:	2280      	movs	r2, #128	; 0x80
     722:	0052      	lsls	r2, r2, #1
     724:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     726:	783a      	ldrb	r2, [r7, #0]
     728:	43a2      	bics	r2, r4
     72a:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     72c:	2280      	movs	r2, #128	; 0x80
     72e:	0092      	lsls	r2, r2, #2
     730:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     732:	001a      	movs	r2, r3
     734:	324b      	adds	r2, #75	; 0x4b
     736:	7811      	ldrb	r1, [r2, #0]
     738:	43a1      	bics	r1, r4
     73a:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     73c:	7811      	ldrb	r1, [r2, #0]
     73e:	4329      	orrs	r1, r5
     740:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     742:	2180      	movs	r1, #128	; 0x80
     744:	0109      	lsls	r1, r1, #4
     746:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     748:	2135      	movs	r1, #53	; 0x35
     74a:	468c      	mov	ip, r1
     74c:	449c      	add	ip, r3
     74e:	4661      	mov	r1, ip
     750:	7809      	ldrb	r1, [r1, #0]
     752:	351e      	adds	r5, #30
     754:	4031      	ands	r1, r6
     756:	4329      	orrs	r1, r5
     758:	4665      	mov	r5, ip
     75a:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     75c:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     75e:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     760:	4321      	orrs	r1, r4
     762:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     764:	0019      	movs	r1, r3
     766:	3134      	adds	r1, #52	; 0x34
     768:	780a      	ldrb	r2, [r1, #0]
     76a:	4032      	ands	r2, r6
     76c:	432a      	orrs	r2, r5
     76e:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     770:	783a      	ldrb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     772:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     774:	4322      	orrs	r2, r4
     776:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     778:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     77a:	3706      	adds	r7, #6

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     77c:	43b2      	bics	r2, r6
     77e:	432a      	orrs	r2, r5
     780:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     782:	7802      	ldrb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     784:	3196      	adds	r1, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     786:	4322      	orrs	r2, r4
     788:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     78a:	780a      	ldrb	r2, [r1, #0]
     78c:	43a2      	bics	r2, r4
     78e:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     790:	2280      	movs	r2, #128	; 0x80
     792:	4983      	ldr	r1, [pc, #524]	; (9a0 <init+0x418>)
     794:	00d2      	lsls	r2, r2, #3
     796:	600a      	str	r2, [r1, #0]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     798:	0019      	movs	r1, r3
     79a:	3198      	adds	r1, #152	; 0x98
     79c:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79e:	7881      	ldrb	r1, [r0, #2]
     7a0:	43a1      	bics	r1, r4
     7a2:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a4:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7a6:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7a8:	7a02      	ldrb	r2, [r0, #8]
     7aa:	43a2      	bics	r2, r4
     7ac:	7202      	strb	r2, [r0, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ae:	2280      	movs	r2, #128	; 0x80
     7b0:	0252      	lsls	r2, r2, #9
     7b2:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b4:	78ba      	ldrb	r2, [r7, #2]
     7b6:	43a2      	bics	r2, r4
     7b8:	70ba      	strb	r2, [r7, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ba:	2280      	movs	r2, #128	; 0x80
     7bc:	0292      	lsls	r2, r2, #10
     7be:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c0:	001a      	movs	r2, r3
     7c2:	3253      	adds	r2, #83	; 0x53
     7c4:	7811      	ldrb	r1, [r2, #0]
     7c6:	43a1      	bics	r1, r4
     7c8:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7ca:	7811      	ldrb	r1, [r2, #0]
     7cc:	4329      	orrs	r1, r5
     7ce:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7d0:	2180      	movs	r1, #128	; 0x80
     7d2:	0309      	lsls	r1, r1, #12
     7d4:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7d6:	2139      	movs	r1, #57	; 0x39
     7d8:	468c      	mov	ip, r1
     7da:	449c      	add	ip, r3
     7dc:	4661      	mov	r1, ip
     7de:	7809      	ldrb	r1, [r1, #0]
     7e0:	351e      	adds	r5, #30
     7e2:	4031      	ands	r1, r6
     7e4:	4329      	orrs	r1, r5
     7e6:	4665      	mov	r5, ip
     7e8:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7ea:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7ec:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7ee:	4321      	orrs	r1, r4
     7f0:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7f2:	0019      	movs	r1, r3
     7f4:	3138      	adds	r1, #56	; 0x38
     7f6:	780a      	ldrb	r2, [r1, #0]
     7f8:	4032      	ands	r2, r6
     7fa:	432a      	orrs	r2, r5
     7fc:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fe:	78ba      	ldrb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     800:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     802:	4322      	orrs	r2, r4
     804:	70ba      	strb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     806:	780a      	ldrb	r2, [r1, #0]
     808:	43b2      	bics	r2, r6
     80a:	432a      	orrs	r2, r5
     80c:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     80e:	7a02      	ldrb	r2, [r0, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     810:	3114      	adds	r1, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     812:	4322      	orrs	r2, r4
     814:	7202      	strb	r2, [r0, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     816:	798a      	ldrb	r2, [r1, #6]
     818:	43a2      	bics	r2, r4
     81a:	718a      	strb	r2, [r1, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     81c:	2280      	movs	r2, #128	; 0x80
     81e:	02d2      	lsls	r2, r2, #11
     820:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     822:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     824:	9103      	str	r1, [sp, #12]
     826:	780a      	ldrb	r2, [r1, #0]
     828:	43a2      	bics	r2, r4
     82a:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     82c:	2280      	movs	r2, #128	; 0x80
     82e:	0152      	lsls	r2, r2, #5
     830:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     832:	783a      	ldrb	r2, [r7, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     834:	2120      	movs	r1, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     836:	43a2      	bics	r2, r4
     838:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     83a:	2280      	movs	r2, #128	; 0x80
     83c:	0212      	lsls	r2, r2, #8
     83e:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     840:	001a      	movs	r2, r3
     842:	324d      	adds	r2, #77	; 0x4d
     844:	7810      	ldrb	r0, [r2, #0]
     846:	43a0      	bics	r0, r4
     848:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     84a:	7810      	ldrb	r0, [r2, #0]
     84c:	4328      	orrs	r0, r5
     84e:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     850:	2080      	movs	r0, #128	; 0x80
     852:	0180      	lsls	r0, r0, #6
     854:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     856:	0018      	movs	r0, r3
     858:	3036      	adds	r0, #54	; 0x36
     85a:	7805      	ldrb	r5, [r0, #0]
     85c:	4035      	ands	r5, r6
     85e:	430d      	orrs	r5, r1
     860:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     862:	7811      	ldrb	r1, [r2, #0]
     864:	000d      	movs	r5, r1
     866:	4325      	orrs	r5, r4
     868:	7015      	strb	r5, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     86a:	2237      	movs	r2, #55	; 0x37
     86c:	4694      	mov	ip, r2
     86e:	449c      	add	ip, r3
     870:	4662      	mov	r2, ip
     872:	2120      	movs	r1, #32
     874:	7812      	ldrb	r2, [r2, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     876:	2502      	movs	r5, #2
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     878:	4032      	ands	r2, r6
     87a:	430a      	orrs	r2, r1
     87c:	4661      	mov	r1, ip
     87e:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     880:	2102      	movs	r1, #2
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     882:	783a      	ldrb	r2, [r7, #0]
     884:	4322      	orrs	r2, r4
     886:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     888:	7802      	ldrb	r2, [r0, #0]
     88a:	43b2      	bics	r2, r6
     88c:	430a      	orrs	r2, r1
     88e:	7002      	strb	r2, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     890:	9a03      	ldr	r2, [sp, #12]
     892:	9903      	ldr	r1, [sp, #12]
     894:	7812      	ldrb	r2, [r2, #0]
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     896:	2040      	movs	r0, #64	; 0x40
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     898:	4322      	orrs	r2, r4
     89a:	700a      	strb	r2, [r1, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     89c:	0019      	movs	r1, r3
     89e:	314e      	adds	r1, #78	; 0x4e
     8a0:	780a      	ldrb	r2, [r1, #0]
     8a2:	43a2      	bics	r2, r4
     8a4:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8a6:	2280      	movs	r2, #128	; 0x80
     8a8:	01d2      	lsls	r2, r2, #7
     8aa:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8ac:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ae:	001a      	movs	r2, r3
     8b0:	3255      	adds	r2, #85	; 0x55
     8b2:	7811      	ldrb	r1, [r2, #0]
     8b4:	43a1      	bics	r1, r4
     8b6:	7011      	strb	r1, [r2, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8b8:	2180      	movs	r1, #128	; 0x80
     8ba:	0389      	lsls	r1, r1, #14
     8bc:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8be:	7811      	ldrb	r1, [r2, #0]
     8c0:	43a1      	bics	r1, r4
     8c2:	7011      	strb	r1, [r2, #0]
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8c4:	7811      	ldrb	r1, [r2, #0]
     8c6:	4301      	orrs	r1, r0
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8c8:	0018      	movs	r0, r3
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8ca:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8cc:	3056      	adds	r0, #86	; 0x56
     8ce:	7802      	ldrb	r2, [r0, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8d0:	0019      	movs	r1, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8d2:	43a2      	bics	r2, r4
     8d4:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8d6:	2280      	movs	r2, #128	; 0x80
     8d8:	03d2      	lsls	r2, r2, #15
     8da:	609a      	str	r2, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8dc:	313b      	adds	r1, #59	; 0x3b
     8de:	780a      	ldrb	r2, [r1, #0]
     8e0:	43b2      	bics	r2, r6
     8e2:	432a      	orrs	r2, r5
     8e4:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8e6:	7802      	ldrb	r2, [r0, #0]
     8e8:	4322      	orrs	r2, r4
     8ea:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ec:	001a      	movs	r2, r3
     8ee:	3257      	adds	r2, #87	; 0x57
     8f0:	7810      	ldrb	r0, [r2, #0]
     8f2:	43a0      	bics	r0, r4
     8f4:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8f6:	7810      	ldrb	r0, [r2, #0]
     8f8:	4328      	orrs	r0, r5
     8fa:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8fc:	2080      	movs	r0, #128	; 0x80
     8fe:	0400      	lsls	r0, r0, #16
     900:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     902:	2020      	movs	r0, #32
     904:	780b      	ldrb	r3, [r1, #0]
     906:	4033      	ands	r3, r6
     908:	4303      	orrs	r3, r0
     90a:	700b      	strb	r3, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     90c:	7813      	ldrb	r3, [r2, #0]
    pinOut(TxPo);
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);

    delay_ms(200);
     90e:	30a8      	adds	r0, #168	; 0xa8
     910:	4323      	orrs	r3, r4
     912:	7013      	strb	r3, [r2, #0]
     914:	4b24      	ldr	r3, [pc, #144]	; (9a8 <init+0x420>)
     916:	4798      	blx	r3

    sercomClockEnable(SPI2, 3, 4);
     918:	4f24      	ldr	r7, [pc, #144]	; (9ac <init+0x424>)
     91a:	0028      	movs	r0, r5
     91c:	2204      	movs	r2, #4
     91e:	2103      	movs	r1, #3
     920:	47b8      	blx	r7
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 0x00);
     922:	2300      	movs	r3, #0
     924:	4e22      	ldr	r6, [pc, #136]	; (9b0 <init+0x428>)
     926:	9301      	str	r3, [sp, #4]
     928:	9300      	str	r3, [sp, #0]
     92a:	0021      	movs	r1, r4
     92c:	0028      	movs	r0, r5
     92e:	2203      	movs	r2, #3
     930:	47b0      	blx	r6

    sercomClockEnable(SPI0, 3, 4);
     932:	2204      	movs	r2, #4
     934:	2103      	movs	r1, #3
     936:	2000      	movs	r0, #0
     938:	47b8      	blx	r7
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     93a:	2300      	movs	r3, #0
     93c:	2103      	movs	r1, #3
     93e:	9301      	str	r3, [sp, #4]
     940:	9300      	str	r3, [sp, #0]
     942:	001a      	movs	r2, r3
     944:	0018      	movs	r0, r3
     946:	47b0      	blx	r6

    sercomClockEnable(SPI1, 3, 4);
     948:	0020      	movs	r0, r4
     94a:	2204      	movs	r2, #4
     94c:	2103      	movs	r1, #3
     94e:	47b8      	blx	r7
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     950:	2300      	movs	r3, #0
     952:	0020      	movs	r0, r4
     954:	9301      	str	r3, [sp, #4]
     956:	9300      	str	r3, [sp, #0]
     958:	001a      	movs	r2, r3
     95a:	2103      	movs	r1, #3
     95c:	47b0      	blx	r6

    sercomClockEnable(USART3, 4, 8);
     95e:	2208      	movs	r2, #8
     960:	2104      	movs	r1, #4
     962:	2003      	movs	r0, #3
     964:	47b8      	blx	r7
    sercomUartInit(USART3,1,0,19200);
     966:	2396      	movs	r3, #150	; 0x96
     968:	0021      	movs	r1, r4
     96a:	2200      	movs	r2, #0
     96c:	2003      	movs	r0, #3
     96e:	01db      	lsls	r3, r3, #7
     970:	4c10      	ldr	r4, [pc, #64]	; (9b4 <init+0x42c>)
     972:	47a0      	blx	r4

    TC4Init();
     974:	4b10      	ldr	r3, [pc, #64]	; (9b8 <init+0x430>)
     976:	4798      	blx	r3
    TC5Init();
     978:	4b10      	ldr	r3, [pc, #64]	; (9bc <init+0x434>)
     97a:	4798      	blx	r3
}
     97c:	b005      	add	sp, #20
     97e:	e01f      	b.n	9c0 <init+0x438>
     980:	41004000 	.word	0x41004000
     984:	40000400 	.word	0x40000400
     988:	000001d5 	.word	0x000001d5
     98c:	00000f61 	.word	0x00000f61
     990:	00000e61 	.word	0x00000e61
     994:	00000fd5 	.word	0x00000fd5
     998:	00000c4d 	.word	0x00000c4d
     99c:	41004400 	.word	0x41004400
     9a0:	41004488 	.word	0x41004488
     9a4:	200002c4 	.word	0x200002c4
     9a8:	00001035 	.word	0x00001035
     9ac:	00003519 	.word	0x00003519
     9b0:	0000357d 	.word	0x0000357d
     9b4:	000035e1 	.word	0x000035e1
     9b8:	000010b5 	.word	0x000010b5
     9bc:	0000111d 	.word	0x0000111d
     9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9c2:	46c0      	nop			; (mov r8, r8)

000009c4 <main>:


int main(void) {
     9c4:	b570      	push	{r4, r5, r6, lr}

    init();
     9c6:	4b15      	ldr	r3, [pc, #84]	; (a1c <main+0x58>)
     9c8:	4798      	blx	r3

    initMS5803Barometer();
     9ca:	4b15      	ldr	r3, [pc, #84]	; (a20 <main+0x5c>)
     9cc:	4798      	blx	r3
    IMUinit();
     9ce:	4b15      	ldr	r3, [pc, #84]	; (a24 <main+0x60>)
     9d0:	4798      	blx	r3

    computeKalmanGains();
     9d2:	4b15      	ldr	r3, [pc, #84]	; (a28 <main+0x64>)
     9d4:	4798      	blx	r3

    computeKalmanBaroOnlyGains();
     9d6:	4b15      	ldr	r3, [pc, #84]	; (a2c <main+0x68>)
     9d8:	4798      	blx	r3

    sampleTick();
     9da:	4c15      	ldr	r4, [pc, #84]	; (a30 <main+0x6c>)
     9dc:	47a0      	blx	r4

    //POST();

    //isItPointingUp();

    getSettings();
     9de:	4b15      	ldr	r3, [pc, #84]	; (a34 <main+0x70>)
     9e0:	4798      	blx	r3

    beep(300);
     9e2:	2096      	movs	r0, #150	; 0x96
     9e4:	4b14      	ldr	r3, [pc, #80]	; (a38 <main+0x74>)
     9e6:	0040      	lsls	r0, r0, #1
     9e8:	4798      	blx	r3
    delay_ms(1500);
     9ea:	4814      	ldr	r0, [pc, #80]	; (a3c <main+0x78>)
     9ec:	4d14      	ldr	r5, [pc, #80]	; (a40 <main+0x7c>)
     9ee:	47a8      	blx	r5

    continuityBeep();
     9f0:	4b14      	ldr	r3, [pc, #80]	; (a44 <main+0x80>)
     9f2:	4798      	blx	r3
    delay_ms(1000);
     9f4:	20fa      	movs	r0, #250	; 0xfa
     9f6:	0080      	lsls	r0, r0, #2
     9f8:	47a8      	blx	r5

    startupTick = millis();
     9fa:	4b13      	ldr	r3, [pc, #76]	; (a48 <main+0x84>)
     9fc:	4798      	blx	r3
     9fe:	4b13      	ldr	r3, [pc, #76]	; (a4c <main+0x88>)
     a00:	6018      	str	r0, [r3, #0]

    while (1) {
        if (takeSample()) {
     a02:	4b13      	ldr	r3, [pc, #76]	; (a50 <main+0x8c>)
     a04:	4798      	blx	r3
     a06:	2800      	cmp	r0, #0
     a08:	d0fb      	beq.n	a02 <main+0x3e>
            sampleTick();
     a0a:	47a0      	blx	r4
            flight();
     a0c:	4b11      	ldr	r3, [pc, #68]	; (a54 <main+0x90>)
     a0e:	4798      	blx	r3
            igniterTick();
     a10:	4b11      	ldr	r3, [pc, #68]	; (a58 <main+0x94>)
     a12:	4798      	blx	r3
            computeKalmanStates();
     a14:	4b11      	ldr	r3, [pc, #68]	; (a5c <main+0x98>)
     a16:	4798      	blx	r3
     a18:	e7f3      	b.n	a02 <main+0x3e>
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	00000589 	.word	0x00000589
     a20:	00000559 	.word	0x00000559
     a24:	00000a79 	.word	0x00000a79
     a28:	00001781 	.word	0x00001781
     a2c:	00002021 	.word	0x00002021
     a30:	00003209 	.word	0x00003209
     a34:	00003771 	.word	0x00003771
     a38:	00000d31 	.word	0x00000d31
     a3c:	000005dc 	.word	0x000005dc
     a40:	00001035 	.word	0x00001035
     a44:	00001559 	.word	0x00001559
     a48:	00001081 	.word	0x00001081
     a4c:	2000019c 	.word	0x2000019c
     a50:	000031f1 	.word	0x000031f1
     a54:	00001185 	.word	0x00001185
     a58:	0000159d 	.word	0x0000159d
     a5c:	00002a81 	.word	0x00002a81

00000a60 <HardFault_Handler>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
     a60:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
     a64:	4a02      	ldr	r2, [pc, #8]	; (a70 <HardFault_Handler+0x10>)
     a66:	4b03      	ldr	r3, [pc, #12]	; (a74 <HardFault_Handler+0x14>)
     a68:	60da      	str	r2, [r3, #12]
     a6a:	f3bf 8f4f 	dsb	sy
     a6e:	e7fe      	b.n	a6e <HardFault_Handler+0xe>
     a70:	05fa0004 	.word	0x05fa0004
     a74:	e000ed00 	.word	0xe000ed00

00000a78 <IMUinit>:
extern uint32_t _ezero;
extern uint32_t _sstack;
extern uint32_t _estack;


void IMUinit() {
     a78:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a7a:	4c08      	ldr	r4, [pc, #32]	; (a9c <IMUinit+0x24>)
     a7c:	2580      	movs	r5, #128	; 0x80
     a7e:	0023      	movs	r3, r4
     a80:	00ed      	lsls	r5, r5, #3
     a82:	3394      	adds	r3, #148	; 0x94
     a84:	601d      	str	r5, [r3, #0]

    pinLow(cs_accel);
    spiDataOut(SPI0, BMI_ACCEL_PMU_RANGE);
     a86:	4e06      	ldr	r6, [pc, #24]	; (aa0 <IMUinit+0x28>)
     a88:	210f      	movs	r1, #15
     a8a:	2000      	movs	r0, #0
     a8c:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a8e:	3498      	adds	r4, #152	; 0x98
    spiDataOut(SPI0, BMI_ACCEL_16G_RANGE);
     a90:	210c      	movs	r1, #12
     a92:	2000      	movs	r0, #0
     a94:	47b0      	blx	r6
     a96:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     a98:	bd70      	pop	{r4, r5, r6, pc}
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	41004400 	.word	0x41004400
     aa0:	00003629 	.word	0x00003629

00000aa4 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     aa4:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     aa6:	4b09      	ldr	r3, [pc, #36]	; (acc <USARTconnectionAvaliable+0x28>)
     aa8:	7e1c      	ldrb	r4, [r3, #24]
     aaa:	0764      	lsls	r4, r4, #29
     aac:	0fe4      	lsrs	r4, r4, #31
     aae:	2c01      	cmp	r4, #1
     ab0:	d001      	beq.n	ab6 <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     ab2:	2000      	movs	r0, #0
     ab4:	e009      	b.n	aca <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     ab6:	2003      	movs	r0, #3
     ab8:	4b05      	ldr	r3, [pc, #20]	; (ad0 <USARTconnectionAvaliable+0x2c>)
     aba:	4798      	blx	r3
     abc:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     abe:	2948      	cmp	r1, #72	; 0x48
     ac0:	d1f7      	bne.n	ab2 <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     ac2:	2003      	movs	r0, #3
     ac4:	4b03      	ldr	r3, [pc, #12]	; (ad4 <USARTconnectionAvaliable+0x30>)
     ac6:	4798      	blx	r3
            return true;
     ac8:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     aca:	bd10      	pop	{r4, pc}
     acc:	42001400 	.word	0x42001400
     ad0:	00003675 	.word	0x00003675
     ad4:	0000365d 	.word	0x0000365d

00000ad8 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ada:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     adc:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ade:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     ae0:	1a09      	subs	r1, r1, r0
     ae2:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ae4:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     ae6:	b28b      	uxth	r3, r1
     ae8:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     aea:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     aec:	a902      	add	r1, sp, #8
     aee:	0028      	movs	r0, r5
     af0:	4b09      	ldr	r3, [pc, #36]	; (b18 <sendTheasePagesToComputer+0x40>)
     af2:	4798      	blx	r3
     af4:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     af6:	ab02      	add	r3, sp, #8
     af8:	5d99      	ldrb	r1, [r3, r6]
     afa:	2003      	movs	r0, #3
     afc:	4b07      	ldr	r3, [pc, #28]	; (b1c <sendTheasePagesToComputer+0x44>)
     afe:	3601      	adds	r6, #1
     b00:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b02:	42be      	cmp	r6, r7
     b04:	d1f7      	bne.n	af6 <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b06:	3401      	adds	r4, #1
     b08:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b0a:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b0c:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b0e:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b10:	42a3      	cmp	r3, r4
     b12:	d2eb      	bcs.n	aec <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     b14:	b043      	add	sp, #268	; 0x10c
     b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b18:	0000035d 	.word	0x0000035d
     b1c:	0000365d 	.word	0x0000365d

00000b20 <altitudeAGL>:

int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
     b20:	4b07      	ldr	r3, [pc, #28]	; (b40 <altitudeAGL+0x20>)

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}

int32_t altitudeAGL() {
     b22:	b510      	push	{r4, lr}
    return altitude - offsets.groundOffset;
     b24:	6998      	ldr	r0, [r3, #24]
     b26:	4b07      	ldr	r3, [pc, #28]	; (b44 <altitudeAGL+0x24>)
     b28:	4798      	blx	r3
     b2a:	000b      	movs	r3, r1
     b2c:	4906      	ldr	r1, [pc, #24]	; (b48 <altitudeAGL+0x28>)
     b2e:	0002      	movs	r2, r0
     b30:	6808      	ldr	r0, [r1, #0]
     b32:	6849      	ldr	r1, [r1, #4]
     b34:	4c05      	ldr	r4, [pc, #20]	; (b4c <altitudeAGL+0x2c>)
     b36:	47a0      	blx	r4
     b38:	4b05      	ldr	r3, [pc, #20]	; (b50 <altitudeAGL+0x30>)
     b3a:	4798      	blx	r3
}
     b3c:	bd10      	pop	{r4, pc}
     b3e:	46c0      	nop			; (mov r8, r8)
     b40:	20000150 	.word	0x20000150
     b44:	00006d5d 	.word	0x00006d5d
     b48:	20000328 	.word	0x20000328
     b4c:	00006585 	.word	0x00006585
     b50:	00006c6d 	.word	0x00006c6d

00000b54 <unplugged>:


bool unplugged() {
    if (sample.voltage.batFloat < 3.4) {
     b54:	4b07      	ldr	r3, [pc, #28]	; (b74 <unplugged+0x20>)
int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
}


bool unplugged() {
     b56:	b570      	push	{r4, r5, r6, lr}
     b58:	68d8      	ldr	r0, [r3, #12]
     b5a:	4b07      	ldr	r3, [pc, #28]	; (b78 <unplugged+0x24>)
     b5c:	4798      	blx	r3
     b5e:	4a07      	ldr	r2, [pc, #28]	; (b7c <unplugged+0x28>)
     b60:	4b07      	ldr	r3, [pc, #28]	; (b80 <unplugged+0x2c>)
     b62:	4d08      	ldr	r5, [pc, #32]	; (b84 <unplugged+0x30>)
     b64:	2401      	movs	r4, #1
     b66:	47a8      	blx	r5
     b68:	2800      	cmp	r0, #0
     b6a:	d100      	bne.n	b6e <unplugged+0x1a>
     b6c:	1c04      	adds	r4, r0, #0
     b6e:	b2e0      	uxtb	r0, r4
    if (sample.voltage.batFloat < 3.4) {
        return true;
    } else {
        return false;
    }
}
     b70:	bd70      	pop	{r4, r5, r6, pc}
     b72:	46c0      	nop			; (mov r8, r8)
     b74:	200005f0 	.word	0x200005f0
     b78:	00006dcd 	.word	0x00006dcd
     b7c:	33333333 	.word	0x33333333
     b80:	400b3333 	.word	0x400b3333
     b84:	00004ea1 	.word	0x00004ea1

00000b88 <shutDown>:

void shutDown() {
     b88:	b510      	push	{r4, lr}


    delay_ms(100);
     b8a:	2064      	movs	r0, #100	; 0x64
     b8c:	4b14      	ldr	r3, [pc, #80]	; (be0 <shutDown+0x58>)
     b8e:	4798      	blx	r3
    TC4->COUNT8.CTRLA.reg = 0;
     b90:	2300      	movs	r3, #0

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     b92:	2180      	movs	r1, #128	; 0x80
     b94:	4a13      	ldr	r2, [pc, #76]	; (be4 <shutDown+0x5c>)
     b96:	0309      	lsls	r1, r1, #12
     b98:	8013      	strh	r3, [r2, #0]
    TC5->COUNT8.CTRLA.reg = 0;
     b9a:	4a13      	ldr	r2, [pc, #76]	; (be8 <shutDown+0x60>)
     b9c:	2480      	movs	r4, #128	; 0x80
     b9e:	8013      	strh	r3, [r2, #0]
     ba0:	4a12      	ldr	r2, [pc, #72]	; (bec <shutDown+0x64>)
    NVIC_DisableIRQ(TC4_IRQn);
    NVIC_DisableIRQ(TC5_IRQn);
    NVIC_DisableIRQ(RTC_IRQn);
    RTC->MODE1.CTRL.bit.ENABLE = 0;
     ba2:	2002      	movs	r0, #2
     ba4:	67d1      	str	r1, [r2, #124]	; 0x7c
     ba6:	2108      	movs	r1, #8
     ba8:	0364      	lsls	r4, r4, #13
     baa:	67d4      	str	r4, [r2, #124]	; 0x7c
     bac:	67d1      	str	r1, [r2, #124]	; 0x7c
     bae:	4a10      	ldr	r2, [pc, #64]	; (bf0 <shutDown+0x68>)
     bb0:	8811      	ldrh	r1, [r2, #0]
     bb2:	4381      	bics	r1, r0
     bb4:	8011      	strh	r1, [r2, #0]
    SysTick->CTRL = 0;
     bb6:	4a0f      	ldr	r2, [pc, #60]	; (bf4 <shutDown+0x6c>)
     bb8:	6013      	str	r3, [r2, #0]
    PM->APBAMASK.reg = 0;
     bba:	4a0f      	ldr	r2, [pc, #60]	; (bf8 <shutDown+0x70>)
     bbc:	6193      	str	r3, [r2, #24]

    //turn off sercom clocks
    //GCLK->CLKCTRL.reg

    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     bbe:	2280      	movs	r2, #128	; 0x80
     bc0:	4b0e      	ldr	r3, [pc, #56]	; (bfc <shutDown+0x74>)
     bc2:	0052      	lsls	r2, r2, #1
     bc4:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_OSC8M) | (GCLK_GENCTRL_GENEN));
     bc6:	2283      	movs	r2, #131	; 0x83
     bc8:	0252      	lsls	r2, r2, #9
     bca:	605a      	str	r2, [r3, #4]
     bcc:	4b0c      	ldr	r3, [pc, #48]	; (c00 <shutDown+0x78>)

    pinHigh(LedPin);

    SYSCTRL->BOD33.reg = SYSCTRL_BOD33_PSEL_DIV8 | SYSCTRL_BOD33_ACTION_RESET | SYSCTRL_BOD33_LEVEL(60);
     bce:	4a0d      	ldr	r2, [pc, #52]	; (c04 <shutDown+0x7c>)
     bd0:	619c      	str	r4, [r3, #24]
     bd2:	4b0d      	ldr	r3, [pc, #52]	; (c08 <shutDown+0x80>)
     bd4:	635a      	str	r2, [r3, #52]	; 0x34

    SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
     bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
     bd8:	4302      	orrs	r2, r0
     bda:	635a      	str	r2, [r3, #52]	; 0x34
     bdc:	e7fe      	b.n	bdc <shutDown+0x54>
     bde:	46c0      	nop			; (mov r8, r8)
     be0:	00001035 	.word	0x00001035
     be4:	42003000 	.word	0x42003000
     be8:	42003400 	.word	0x42003400
     bec:	e000e104 	.word	0xe000e104
     bf0:	40001400 	.word	0x40001400
     bf4:	e000e010 	.word	0xe000e010
     bf8:	40000400 	.word	0x40000400
     bfc:	40000c00 	.word	0x40000c00
     c00:	41004400 	.word	0x41004400
     c04:	003c2008 	.word	0x003c2008
     c08:	40000800 	.word	0x40000800

00000c0c <finishFlight>:
    }
}

void finishFlight() {

    flightState = flightIdle;
     c0c:	2201      	movs	r2, #1
     c0e:	4b05      	ldr	r3, [pc, #20]	; (c24 <finishFlight+0x18>)
    while(1) {

    }
}

void finishFlight() {
     c10:	b510      	push	{r4, lr}

    flightState = flightIdle;
     c12:	701a      	strb	r2, [r3, #0]
    AT25SFHoldTillReady();
     c14:	4b04      	ldr	r3, [pc, #16]	; (c28 <finishFlight+0x1c>)
     c16:	4798      	blx	r3
    writeFlightEndAddress( );
     c18:	4b04      	ldr	r3, [pc, #16]	; (c2c <finishFlight+0x20>)
     c1a:	4798      	blx	r3
    unpluggedJingle();
     c1c:	4b04      	ldr	r3, [pc, #16]	; (c30 <finishFlight+0x24>)
     c1e:	4798      	blx	r3
    shutDown();
     c20:	4b04      	ldr	r3, [pc, #16]	; (c34 <finishFlight+0x28>)
     c22:	4798      	blx	r3
     c24:	200001ac 	.word	0x200001ac
     c28:	000001e5 	.word	0x000001e5
     c2c:	00003091 	.word	0x00003091
     c30:	00000ddd 	.word	0x00000ddd
     c34:	00000b89 	.word	0x00000b89

00000c38 <finishFromPad>:

}

void finishFromPad() {
    unpluggedJingle();
     c38:	4b02      	ldr	r3, [pc, #8]	; (c44 <finishFromPad+0xc>)
    unpluggedJingle();
    shutDown();

}

void finishFromPad() {
     c3a:	b510      	push	{r4, lr}
    unpluggedJingle();
     c3c:	4798      	blx	r3
    shutDown();
     c3e:	4b02      	ldr	r3, [pc, #8]	; (c48 <finishFromPad+0x10>)
     c40:	4798      	blx	r3
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	00000ddd 	.word	0x00000ddd
     c48:	00000b89 	.word	0x00000b89

00000c4c <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c4c:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     c4e:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c50:	4a10      	ldr	r2, [pc, #64]	; (c94 <adcInit+0x48>)
     c52:	0249      	lsls	r1, r1, #9
     c54:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c56:	4810      	ldr	r0, [pc, #64]	; (c98 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c58:	430b      	orrs	r3, r1
     c5a:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     c5c:	23e0      	movs	r3, #224	; 0xe0
     c5e:	490f      	ldr	r1, [pc, #60]	; (c9c <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c60:	4a0f      	ldr	r2, [pc, #60]	; (ca0 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     c62:	00db      	lsls	r3, r3, #3
     c64:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c66:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     c68:	4a0e      	ldr	r2, [pc, #56]	; (ca4 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     c6a:	6812      	ldr	r2, [r2, #0]
     c6c:	0150      	lsls	r0, r2, #5
     c6e:	4018      	ands	r0, r3
     c70:	4b0d      	ldr	r3, [pc, #52]	; (ca8 <adcInit+0x5c>)
     c72:	0154      	lsls	r4, r2, #5
     c74:	681a      	ldr	r2, [r3, #0]
     c76:	0ed3      	lsrs	r3, r2, #27
     c78:	4323      	orrs	r3, r4
     c7a:	b2da      	uxtb	r2, r3
     c7c:	0003      	movs	r3, r0
     c7e:	4313      	orrs	r3, r2
     c80:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC0;
     c82:	2301      	movs	r3, #1
     c84:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     c86:	18db      	adds	r3, r3, r3
     c88:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     c8a:	7e4b      	ldrb	r3, [r1, #25]
     c8c:	b25b      	sxtb	r3, r3
     c8e:	2b00      	cmp	r3, #0
     c90:	dbfb      	blt.n	c8a <adcInit+0x3e>
}
     c92:	bd10      	pop	{r4, pc}
     c94:	40000400 	.word	0x40000400
     c98:	0000401e 	.word	0x0000401e
     c9c:	42004000 	.word	0x42004000
     ca0:	40000c00 	.word	0x40000c00
     ca4:	00806024 	.word	0x00806024
     ca8:	00806020 	.word	0x00806020

00000cac <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     cac:	2202      	movs	r2, #2
     cae:	4b05      	ldr	r3, [pc, #20]	; (cc4 <adcSample+0x18>)
     cb0:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     cb2:	3a01      	subs	r2, #1
     cb4:	7e19      	ldrb	r1, [r3, #24]
     cb6:	4211      	tst	r1, r2
     cb8:	d0fc      	beq.n	cb4 <adcSample+0x8>
    return ADC->RESULT.reg;
     cba:	4b02      	ldr	r3, [pc, #8]	; (cc4 <adcSample+0x18>)
     cbc:	8b58      	ldrh	r0, [r3, #26]
     cbe:	b280      	uxth	r0, r0
}
     cc0:	4770      	bx	lr
     cc2:	46c0      	nop			; (mov r8, r8)
     cc4:	42004000 	.word	0x42004000

00000cc8 <adc_read>:


u16_t adc_read(Pin p) {
     cc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     cca:	2501      	movs	r5, #1
     ccc:	0c02      	lsrs	r2, r0, #16
     cce:	b2d4      	uxtb	r4, r2
     cd0:	9000      	str	r0, [sp, #0]
     cd2:	0e00      	lsrs	r0, r0, #24
     cd4:	9101      	str	r1, [sp, #4]
     cd6:	0842      	lsrs	r2, r0, #1
     cd8:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     cda:	4911      	ldr	r1, [pc, #68]	; (d20 <adc_read+0x58>)
     cdc:	18d2      	adds	r2, r2, r3
     cde:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     ce0:	4228      	tst	r0, r5
     ce2:	d005      	beq.n	cf0 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     ce4:	210f      	movs	r1, #15
     ce6:	7814      	ldrb	r4, [r2, #0]
     ce8:	4021      	ands	r1, r4
     cea:	2410      	movs	r4, #16
     cec:	4321      	orrs	r1, r4
     cee:	e003      	b.n	cf8 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     cf0:	240f      	movs	r4, #15
     cf2:	7811      	ldrb	r1, [r2, #0]
     cf4:	43a1      	bics	r1, r4
     cf6:	4329      	orrs	r1, r5
     cf8:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     cfa:	2101      	movs	r1, #1
     cfc:	4a09      	ldr	r2, [pc, #36]	; (d24 <adc_read+0x5c>)
     cfe:	18c3      	adds	r3, r0, r3
     d00:	189b      	adds	r3, r3, r2
     d02:	781a      	ldrb	r2, [r3, #0]
     d04:	430a      	orrs	r2, r1
     d06:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     d08:	466b      	mov	r3, sp
     d0a:	791a      	ldrb	r2, [r3, #4]
     d0c:	231f      	movs	r3, #31
     d0e:	4013      	ands	r3, r2
     d10:	22c0      	movs	r2, #192	; 0xc0
     d12:	0152      	lsls	r2, r2, #5
     d14:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     d16:	4a04      	ldr	r2, [pc, #16]	; (d28 <adc_read+0x60>)
     d18:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     d1a:	4b04      	ldr	r3, [pc, #16]	; (d2c <adc_read+0x64>)
     d1c:	4798      	blx	r3
     d1e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     d20:	41004430 	.word	0x41004430
     d24:	41004440 	.word	0x41004440
     d28:	42004000 	.word	0x42004000
     d2c:	00000cad 	.word	0x00000cad

00000d30 <beep>:
#include <util.h>
#include <boardDefines.h>
#include <math.h>


void beep(u16_t duration) {
     d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


    long count = 0;

    long beepStop = duration*1000 / 122;
     d32:	23fa      	movs	r3, #250	; 0xfa
     d34:	009b      	lsls	r3, r3, #2
     d36:	4358      	muls	r0, r3
     d38:	217a      	movs	r1, #122	; 0x7a
     d3a:	4b0c      	ldr	r3, [pc, #48]	; (d6c <beep+0x3c>)
     d3c:	4798      	blx	r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d3e:	2380      	movs	r3, #128	; 0x80
     d40:	2780      	movs	r7, #128	; 0x80
     d42:	0006      	movs	r6, r0


void beep(u16_t duration) {


    long count = 0;
     d44:	2500      	movs	r5, #0
     d46:	4c0a      	ldr	r4, [pc, #40]	; (d70 <beep+0x40>)
     d48:	035b      	lsls	r3, r3, #13
     d4a:	61e3      	str	r3, [r4, #28]
     d4c:	03bf      	lsls	r7, r7, #14

    long beepStop = duration*1000 / 122;

    pinToggle(LedPin);

    while(count < beepStop) {
     d4e:	42b5      	cmp	r5, r6
     d50:	d005      	beq.n	d5e <beep+0x2e>
     d52:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(120);
     d54:	2078      	movs	r0, #120	; 0x78
     d56:	4b07      	ldr	r3, [pc, #28]	; (d74 <beep+0x44>)
     d58:	4798      	blx	r3
        count++;
     d5a:	3501      	adds	r5, #1
     d5c:	e7f7      	b.n	d4e <beep+0x1e>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d5e:	2380      	movs	r3, #128	; 0x80
     d60:	039b      	lsls	r3, r3, #14
     d62:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d64:	2380      	movs	r3, #128	; 0x80
     d66:	035b      	lsls	r3, r3, #13
     d68:	61e3      	str	r3, [r4, #28]
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d6c:	00004c9d 	.word	0x00004c9d
     d70:	41004400 	.word	0x41004400
     d74:	00001001 	.word	0x00001001

00000d78 <beepDigit>:

void beepDigit(u8_t digit) {
     d78:	b570      	push	{r4, r5, r6, lr}
     d7a:	1e04      	subs	r4, r0, #0
     d7c:	4d08      	ldr	r5, [pc, #32]	; (da0 <beepDigit+0x28>)
    if (digit == 0) {
     d7e:	d103      	bne.n	d88 <beepDigit+0x10>
        beep(600);
     d80:	2096      	movs	r0, #150	; 0x96
     d82:	0080      	lsls	r0, r0, #2
     d84:	47a8      	blx	r5
     d86:	e009      	b.n	d9c <beepDigit+0x24>
    } else {
        while (digit > 0) {
            beep(200);
     d88:	20c8      	movs	r0, #200	; 0xc8
     d8a:	47a8      	blx	r5
            delay_ms(300);
     d8c:	2096      	movs	r0, #150	; 0x96
            --digit;
     d8e:	3c01      	subs	r4, #1
    if (digit == 0) {
        beep(600);
    } else {
        while (digit > 0) {
            beep(200);
            delay_ms(300);
     d90:	0040      	lsls	r0, r0, #1
     d92:	4b04      	ldr	r3, [pc, #16]	; (da4 <beepDigit+0x2c>)
            --digit;
     d94:	b2e4      	uxtb	r4, r4
    if (digit == 0) {
        beep(600);
    } else {
        while (digit > 0) {
            beep(200);
            delay_ms(300);
     d96:	4798      	blx	r3

void beepDigit(u8_t digit) {
    if (digit == 0) {
        beep(600);
    } else {
        while (digit > 0) {
     d98:	2c00      	cmp	r4, #0
     d9a:	d1f5      	bne.n	d88 <beepDigit+0x10>
            beep(200);
            delay_ms(300);
            --digit;
        }
    }
}
     d9c:	bd70      	pop	{r4, r5, r6, pc}
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	00000d31 	.word	0x00000d31
     da4:	00001035 	.word	0x00001035

00000da8 <startupJingle>:
    }
    beepDigit(number);

}

void startupJingle() {
     da8:	b570      	push	{r4, r5, r6, lr}
    beep(150);
     daa:	2096      	movs	r0, #150	; 0x96
     dac:	4d09      	ldr	r5, [pc, #36]	; (dd4 <startupJingle+0x2c>)
     dae:	47a8      	blx	r5
    delay_ms(60);
     db0:	4c09      	ldr	r4, [pc, #36]	; (dd8 <startupJingle+0x30>)
     db2:	203c      	movs	r0, #60	; 0x3c
     db4:	47a0      	blx	r4
    beep(150);
     db6:	2096      	movs	r0, #150	; 0x96
     db8:	47a8      	blx	r5
    delay_ms(250);
     dba:	20fa      	movs	r0, #250	; 0xfa
     dbc:	47a0      	blx	r4
    beep(150);
     dbe:	2096      	movs	r0, #150	; 0x96
     dc0:	47a8      	blx	r5
    delay_ms(60);
     dc2:	203c      	movs	r0, #60	; 0x3c
     dc4:	47a0      	blx	r4
    beep(150);
     dc6:	2096      	movs	r0, #150	; 0x96
     dc8:	47a8      	blx	r5
    delay_ms(500);
     dca:	20fa      	movs	r0, #250	; 0xfa
     dcc:	0040      	lsls	r0, r0, #1
     dce:	47a0      	blx	r4
}
     dd0:	bd70      	pop	{r4, r5, r6, pc}
     dd2:	46c0      	nop			; (mov r8, r8)
     dd4:	00000d31 	.word	0x00000d31
     dd8:	00001035 	.word	0x00001035

00000ddc <unpluggedJingle>:

void unpluggedJingle() {
     ddc:	b570      	push	{r4, r5, r6, lr}
    delay_ms(60);
     dde:	203c      	movs	r0, #60	; 0x3c
     de0:	4c0b      	ldr	r4, [pc, #44]	; (e10 <unpluggedJingle+0x34>)
     de2:	47a0      	blx	r4
    beep(150);
     de4:	4d0b      	ldr	r5, [pc, #44]	; (e14 <unpluggedJingle+0x38>)
     de6:	2096      	movs	r0, #150	; 0x96
     de8:	47a8      	blx	r5
    delay_ms(60);
     dea:	203c      	movs	r0, #60	; 0x3c
     dec:	47a0      	blx	r4
    beep(150);
     dee:	2096      	movs	r0, #150	; 0x96
     df0:	47a8      	blx	r5
    delay_ms(60);
     df2:	203c      	movs	r0, #60	; 0x3c
     df4:	47a0      	blx	r4
    beep(150);
     df6:	2096      	movs	r0, #150	; 0x96
     df8:	47a8      	blx	r5
    delay_ms(60);
     dfa:	203c      	movs	r0, #60	; 0x3c
     dfc:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     dfe:	2280      	movs	r2, #128	; 0x80
     e00:	4b05      	ldr	r3, [pc, #20]	; (e18 <unpluggedJingle+0x3c>)
     e02:	0392      	lsls	r2, r2, #14
     e04:	615a      	str	r2, [r3, #20]
     e06:	2280      	movs	r2, #128	; 0x80
     e08:	0352      	lsls	r2, r2, #13
     e0a:	615a      	str	r2, [r3, #20]
    pinLow(buzzerPin);
    pinLow(LedPin);

}
     e0c:	bd70      	pop	{r4, r5, r6, pc}
     e0e:	46c0      	nop			; (mov r8, r8)
     e10:	00001035 	.word	0x00001035
     e14:	00000d31 	.word	0x00000d31
     e18:	41004400 	.word	0x41004400

00000e1c <dfll_nvm_val>:
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10

uint32_t dfll_nvm_val() {
    uint32_t coarse = ( *((uint32_t *)(NVMCTRL_OTP4)
     e1c:	4b08      	ldr	r3, [pc, #32]	; (e40 <dfll_nvm_val+0x24>)
     e1e:	6818      	ldr	r0, [r3, #0]
     e20:	0e80      	lsrs	r0, r0, #26
                          + (NVM_DFLL_COARSE_POS / 32))
                        >> (NVM_DFLL_COARSE_POS % 32))
                      & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     e22:	283f      	cmp	r0, #63	; 0x3f
     e24:	d100      	bne.n	e28 <dfll_nvm_val+0xc>
        coarse = 0x1f;
     e26:	3820      	subs	r0, #32
    }
    uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
                        + (NVM_DFLL_FINE_POS / 32))
                      >> (NVM_DFLL_FINE_POS % 32))
     e28:	4b06      	ldr	r3, [pc, #24]	; (e44 <dfll_nvm_val+0x28>)
                    & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e2a:	4a07      	ldr	r2, [pc, #28]	; (e48 <dfll_nvm_val+0x2c>)
                        >> (NVM_DFLL_COARSE_POS % 32))
                      & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
     e2c:	681b      	ldr	r3, [r3, #0]
     e2e:	059b      	lsls	r3, r3, #22
     e30:	0d9b      	lsrs	r3, r3, #22
                        + (NVM_DFLL_FINE_POS / 32))
                      >> (NVM_DFLL_FINE_POS % 32))
                    & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e32:	4293      	cmp	r3, r2
     e34:	d100      	bne.n	e38 <dfll_nvm_val+0x1c>
        fine = 0x1ff;
     e36:	4b05      	ldr	r3, [pc, #20]	; (e4c <dfll_nvm_val+0x30>)
    }

    return SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     e38:	0280      	lsls	r0, r0, #10
     e3a:	4318      	orrs	r0, r3
}
     e3c:	4770      	bx	lr
     e3e:	46c0      	nop			; (mov r8, r8)
     e40:	00806024 	.word	0x00806024
     e44:	00806028 	.word	0x00806028
     e48:	000003ff 	.word	0x000003ff
     e4c:	000001ff 	.word	0x000001ff

00000e50 <dfll_wait_for_sync>:

void dfll_wait_for_sync() {
    while (!SYSCTRL->PCLKSR.bit.DFLLRDY);
     e50:	4a02      	ldr	r2, [pc, #8]	; (e5c <dfll_wait_for_sync+0xc>)
     e52:	68d3      	ldr	r3, [r2, #12]
     e54:	06db      	lsls	r3, r3, #27
     e56:	d5fc      	bpl.n	e52 <dfll_wait_for_sync+0x2>
}
     e58:	4770      	bx	lr
     e5a:	46c0      	nop			; (mov r8, r8)
     e5c:	40000800 	.word	0x40000800

00000e60 <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     e60:	4b27      	ldr	r3, [pc, #156]	; (f00 <RtcInit+0xa0>)
     e62:	4a28      	ldr	r2, [pc, #160]	; (f04 <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     e64:	4828      	ldr	r0, [pc, #160]	; (f08 <RtcInit+0xa8>)
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     e66:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     e68:	4a28      	ldr	r2, [pc, #160]	; (f0c <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     e6a:	6999      	ldr	r1, [r3, #24]
     e6c:	6812      	ldr	r2, [r2, #0]
     e6e:	4001      	ands	r1, r0
     e70:	04d2      	lsls	r2, r2, #19
     e72:	0e52      	lsrs	r2, r2, #25
     e74:	0412      	lsls	r2, r2, #16
     e76:	4311      	orrs	r1, r2
     e78:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     e7a:	4925      	ldr	r1, [pc, #148]	; (f10 <RtcInit+0xb0>)
     e7c:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     e7e:	6999      	ldr	r1, [r3, #24]
     e80:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     e82:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     e84:	4302      	orrs	r2, r0
     e86:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     e88:	699a      	ldr	r2, [r3, #24]
     e8a:	430a      	orrs	r2, r1
     e8c:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     e8e:	2204      	movs	r2, #4
     e90:	68d9      	ldr	r1, [r3, #12]
     e92:	4211      	tst	r1, r2
     e94:	d0fc      	beq.n	e90 <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     e96:	2281      	movs	r2, #129	; 0x81
     e98:	4b1e      	ldr	r3, [pc, #120]	; (f14 <RtcInit+0xb4>)
     e9a:	0052      	lsls	r2, r2, #1
     e9c:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     e9e:	4a1e      	ldr	r2, [pc, #120]	; (f18 <RtcInit+0xb8>)
     ea0:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     ea2:	785a      	ldrb	r2, [r3, #1]
     ea4:	b252      	sxtb	r2, r2
     ea6:	2a00      	cmp	r2, #0
     ea8:	dbfb      	blt.n	ea2 <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     eaa:	4a1c      	ldr	r2, [pc, #112]	; (f1c <RtcInit+0xbc>)
     eac:	4b19      	ldr	r3, [pc, #100]	; (f14 <RtcInit+0xb4>)
     eae:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     eb0:	2204      	movs	r2, #4
     eb2:	4b1b      	ldr	r3, [pc, #108]	; (f20 <RtcInit+0xc0>)
     eb4:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     eb6:	7a9a      	ldrb	r2, [r3, #10]
     eb8:	4919      	ldr	r1, [pc, #100]	; (f20 <RtcInit+0xc0>)
     eba:	09d2      	lsrs	r2, r2, #7
     ebc:	d1fb      	bne.n	eb6 <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     ebe:	20a0      	movs	r0, #160	; 0xa0
     ec0:	880a      	ldrh	r2, [r1, #0]
     ec2:	00c0      	lsls	r0, r0, #3
     ec4:	4302      	orrs	r2, r0
     ec6:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ec8:	7a9a      	ldrb	r2, [r3, #10]
     eca:	09d2      	lsrs	r2, r2, #7
     ecc:	d1fc      	bne.n	ec8 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     ece:	4915      	ldr	r1, [pc, #84]	; (f24 <RtcInit+0xc4>)
     ed0:	4a13      	ldr	r2, [pc, #76]	; (f20 <RtcInit+0xc0>)
     ed2:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ed4:	7a99      	ldrb	r1, [r3, #10]
     ed6:	4a12      	ldr	r2, [pc, #72]	; (f20 <RtcInit+0xc0>)
     ed8:	09c9      	lsrs	r1, r1, #7
     eda:	d1fb      	bne.n	ed4 <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     edc:	8851      	ldrh	r1, [r2, #2]
     ede:	4812      	ldr	r0, [pc, #72]	; (f28 <RtcInit+0xc8>)
     ee0:	4301      	orrs	r1, r0
     ee2:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     ee4:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     ee6:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     ee8:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     eea:	8811      	ldrh	r1, [r2, #0]
     eec:	4301      	orrs	r1, r0
     eee:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ef0:	7a9a      	ldrb	r2, [r3, #10]
     ef2:	09d2      	lsrs	r2, r2, #7
     ef4:	d1fc      	bne.n	ef0 <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     ef6:	4b0d      	ldr	r3, [pc, #52]	; (f2c <RtcInit+0xcc>)
     ef8:	3208      	adds	r2, #8
     efa:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     efc:	4770      	bx	lr
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	40000800 	.word	0x40000800
     f04:	00000606 	.word	0x00000606
     f08:	ff80ffff 	.word	0xff80ffff
     f0c:	00806024 	.word	0x00806024
     f10:	00000604 	.word	0x00000604
     f14:	40000c00 	.word	0x40000c00
     f18:	00230002 	.word	0x00230002
     f1c:	00004204 	.word	0x00004204
     f20:	40001400 	.word	0x40001400
     f24:	000003e6 	.word	0x000003e6
     f28:	00004010 	.word	0x00004010
     f2c:	e000e100 	.word	0xe000e100

00000f30 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f30:	230f      	movs	r3, #15
     f32:	4018      	ands	r0, r3
     f34:	4b08      	ldr	r3, [pc, #32]	; (f58 <gclkEnable+0x28>)
     f36:	0212      	lsls	r2, r2, #8
     f38:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f3a:	23f8      	movs	r3, #248	; 0xf8
     f3c:	0209      	lsls	r1, r1, #8
     f3e:	015b      	lsls	r3, r3, #5
     f40:	4019      	ands	r1, r3
     f42:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     f44:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f46:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f48:	4c04      	ldr	r4, [pc, #16]	; (f5c <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f4a:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f4c:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f4e:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f50:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f52:	6060      	str	r0, [r4, #4]
}
     f54:	bd10      	pop	{r4, pc}
     f56:	46c0      	nop			; (mov r8, r8)
     f58:	00ffff00 	.word	0x00ffff00
     f5c:	40000c00 	.word	0x40000c00

00000f60 <GclkInit>:
}

void GclkInit(u8_t clk_system) {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     f60:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
     f62:	211e      	movs	r1, #30
void gclk_enable(uint32_t id, uint32_t src, uint32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
}

void GclkInit(u8_t clk_system) {
     f64:	b570      	push	{r4, r5, r6, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     f66:	4c12      	ldr	r4, [pc, #72]	; (fb0 <GclkInit+0x50>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
     f68:	4a12      	ldr	r2, [pc, #72]	; (fb4 <GclkInit+0x54>)
}

void GclkInit(u8_t clk_system) {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     f6a:	00db      	lsls	r3, r3, #3
     f6c:	60a3      	str	r3, [r4, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
     f6e:	6853      	ldr	r3, [r2, #4]
void gclk_enable(uint32_t id, uint32_t src, uint32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
}

void GclkInit(u8_t clk_system) {
     f70:	0005      	movs	r5, r0


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
     f72:	438b      	bics	r3, r1
     f74:	391a      	subs	r1, #26
     f76:	430b      	orrs	r3, r1
     f78:	6053      	str	r3, [r2, #4]

    // Initialize GCLK
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     f7a:	4a0f      	ldr	r2, [pc, #60]	; (fb8 <GclkInit+0x58>)
     f7c:	3104      	adds	r1, #4
     f7e:	6993      	ldr	r3, [r2, #24]
     f80:	430b      	orrs	r3, r1
     f82:	6193      	str	r3, [r2, #24]
    GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     f84:	2301      	movs	r3, #1
     f86:	4a0d      	ldr	r2, [pc, #52]	; (fbc <GclkInit+0x5c>)
     f88:	7013      	strb	r3, [r2, #0]
    while (GCLK->CTRL.reg & GCLK_CTRL_SWRST);
     f8a:	7811      	ldrb	r1, [r2, #0]
     f8c:	4219      	tst	r1, r3
     f8e:	d1fc      	bne.n	f8a <GclkInit+0x2a>

    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     f90:	4b0b      	ldr	r3, [pc, #44]	; (fc0 <GclkInit+0x60>)
    dfll_wait_for_sync();
     f92:	4e0c      	ldr	r6, [pc, #48]	; (fc4 <GclkInit+0x64>)
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
    GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    while (GCLK->CTRL.reg & GCLK_CTRL_SWRST);

    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     f94:	84a3      	strh	r3, [r4, #36]	; 0x24
    dfll_wait_for_sync();
     f96:	47b0      	blx	r6
    SYSCTRL->DFLLVAL.reg = dfll_nvm_val();
     f98:	4b0b      	ldr	r3, [pc, #44]	; (fc8 <GclkInit+0x68>)
     f9a:	4798      	blx	r3
     f9c:	62a0      	str	r0, [r4, #40]	; 0x28
    dfll_wait_for_sync();
     f9e:	47b0      	blx	r6
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl;
     fa0:	4b0a      	ldr	r3, [pc, #40]	; (fcc <GclkInit+0x6c>)


    //For generic clock generator 0, select the DFLL48 Clock as input
    gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
     fa2:	0028      	movs	r0, r5
    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    dfll_wait_for_sync();
    SYSCTRL->DFLLVAL.reg = dfll_nvm_val();
    dfll_wait_for_sync();
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl;
     fa4:	84a3      	strh	r3, [r4, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
     fa6:	2201      	movs	r2, #1
     fa8:	2107      	movs	r1, #7
     faa:	4b09      	ldr	r3, [pc, #36]	; (fd0 <GclkInit+0x70>)
     fac:	4798      	blx	r3
}
     fae:	bd70      	pop	{r4, r5, r6, pc}
     fb0:	40000800 	.word	0x40000800
     fb4:	41004000 	.word	0x41004000
     fb8:	40000400 	.word	0x40000400
     fbc:	40000c00 	.word	0x40000c00
     fc0:	00000502 	.word	0x00000502
     fc4:	00000e51 	.word	0x00000e51
     fc8:	00000e1d 	.word	0x00000e1d
     fcc:	00000582 	.word	0x00000582
     fd0:	00000f31 	.word	0x00000f31

00000fd4 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
    cycles_per_us = cycles_per_ms / 1000;
     fd4:	2230      	movs	r2, #48	; 0x30
}


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     fd6:	4b06      	ldr	r3, [pc, #24]	; (ff0 <delayInit+0x1c>)
    cycles_per_us = cycles_per_ms / 1000;
     fd8:	4906      	ldr	r1, [pc, #24]	; (ff4 <delayInit+0x20>)
     fda:	c306      	stmia	r3!, {r1, r2}
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     fdc:	4a06      	ldr	r2, [pc, #24]	; (ff8 <delayInit+0x24>)
     fde:	6a13      	ldr	r3, [r2, #32]
     fe0:	021b      	lsls	r3, r3, #8
     fe2:	0a1b      	lsrs	r3, r3, #8
     fe4:	6213      	str	r3, [r2, #32]

    NVIC_SetPriority(SysTick_IRQn, 0x0);

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     fe6:	2205      	movs	r2, #5
     fe8:	4b04      	ldr	r3, [pc, #16]	; (ffc <delayInit+0x28>)
     fea:	601a      	str	r2, [r3, #0]
}
     fec:	4770      	bx	lr
     fee:	46c0      	nop			; (mov r8, r8)
     ff0:	20000004 	.word	0x20000004
     ff4:	0000bb80 	.word	0x0000bb80
     ff8:	e000ed00 	.word	0xe000ed00
     ffc:	e000e010 	.word	0xe000e010

00001000 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    1000:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1002:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    1004:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    1006:	4b08      	ldr	r3, [pc, #32]	; (1028 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    1008:	4a08      	ldr	r2, [pc, #32]	; (102c <delay_us+0x2c>)
    100a:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    100c:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
    100e:	3801      	subs	r0, #1
    1010:	d308      	bcc.n	1024 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    1012:	2b00      	cmp	r3, #0
    1014:	d0fb      	beq.n	100e <delay_us+0xe>
    1016:	4e05      	ldr	r6, [pc, #20]	; (102c <delay_us+0x2c>)
        SysTick->LOAD = n;
    1018:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    101a:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    101c:	6835      	ldr	r5, [r6, #0]
    101e:	4225      	tst	r5, r4
    1020:	d0fc      	beq.n	101c <delay_us+0x1c>
    1022:	e7f4      	b.n	100e <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
    1024:	bd70      	pop	{r4, r5, r6, pc}
    1026:	46c0      	nop			; (mov r8, r8)
    1028:	20000004 	.word	0x20000004
    102c:	e000e010 	.word	0xe000e010

00001030 <SysTick_Handler>:


void SysTick_Handler(void) {
    //g_msTicks++;
}
    1030:	4770      	bx	lr
	...

00001034 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    1034:	b570      	push	{r4, r5, r6, lr}
    1036:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    1038:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    103a:	4b08      	ldr	r3, [pc, #32]	; (105c <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    103c:	4a08      	ldr	r2, [pc, #32]	; (1060 <delay_ms+0x2c>)
    103e:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1040:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
    1042:	3801      	subs	r0, #1
    1044:	d308      	bcc.n	1058 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    1046:	2b00      	cmp	r3, #0
    1048:	d0fb      	beq.n	1042 <delay_ms+0xe>
    104a:	4e05      	ldr	r6, [pc, #20]	; (1060 <delay_ms+0x2c>)
        SysTick->LOAD = n;
    104c:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    104e:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1050:	6835      	ldr	r5, [r6, #0]
    1052:	4225      	tst	r5, r4
    1054:	d0fc      	beq.n	1050 <delay_ms+0x1c>
    1056:	e7f4      	b.n	1042 <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
    1058:	bd70      	pop	{r4, r5, r6, pc}
    105a:	46c0      	nop			; (mov r8, r8)
    105c:	20000004 	.word	0x20000004
    1060:	e000e010 	.word	0xe000e010

00001064 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    1064:	21fa      	movs	r1, #250	; 0xfa
    1066:	4a04      	ldr	r2, [pc, #16]	; (1078 <RTC_Handler+0x14>)
    1068:	0089      	lsls	r1, r1, #2
    106a:	6813      	ldr	r3, [r2, #0]
    106c:	185b      	adds	r3, r3, r1
    106e:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    1070:	22ff      	movs	r2, #255	; 0xff
    1072:	4b02      	ldr	r3, [pc, #8]	; (107c <RTC_Handler+0x18>)
    1074:	721a      	strb	r2, [r3, #8]
}
    1076:	4770      	bx	lr
    1078:	2000013c 	.word	0x2000013c
    107c:	40001400 	.word	0x40001400

00001080 <millis>:

uint32_t millis(void) {
    1080:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    1082:	f3ef 8110 	mrs	r1, PRIMASK
    1086:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1088:	4a08      	ldr	r2, [pc, #32]	; (10ac <millis+0x2c>)
    108a:	4d09      	ldr	r5, [pc, #36]	; (10b0 <millis+0x30>)
    108c:	8a10      	ldrh	r0, [r2, #16]
    108e:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1090:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1092:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1094:	09e4      	lsrs	r4, r4, #7
    1096:	d004      	beq.n	10a2 <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    1098:	8a13      	ldrh	r3, [r2, #16]
    109a:	22fa      	movs	r2, #250	; 0xfa
    109c:	6828      	ldr	r0, [r5, #0]
    109e:	0092      	lsls	r2, r2, #2
    10a0:	1880      	adds	r0, r0, r2
    10a2:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    10a4:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    10a8:	bd30      	pop	{r4, r5, pc}
    10aa:	46c0      	nop			; (mov r8, r8)
    10ac:	40001400 	.word	0x40001400
    10b0:	2000013c 	.word	0x2000013c

000010b4 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    10b4:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    10b6:	4a0d      	ldr	r2, [pc, #52]	; (10ec <TC4Init+0x38>)
    10b8:	4b0d      	ldr	r3, [pc, #52]	; (10f0 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    10ba:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    10bc:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    10be:	4a0d      	ldr	r2, [pc, #52]	; (10f4 <TC4Init+0x40>)
    10c0:	6a13      	ldr	r3, [r2, #32]
    10c2:	430b      	orrs	r3, r1
    10c4:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10c6:	4b0c      	ldr	r3, [pc, #48]	; (10f8 <TC4Init+0x44>)
    10c8:	4a0c      	ldr	r2, [pc, #48]	; (10fc <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10ca:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10cc:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x50;
    10ce:	2250      	movs	r2, #80	; 0x50
    10d0:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    10d2:	3a4f      	subs	r2, #79	; 0x4f
    10d4:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    10d6:	32ff      	adds	r2, #255	; 0xff
    10d8:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10da:	881a      	ldrh	r2, [r3, #0]
    10dc:	430a      	orrs	r2, r1
    10de:	801a      	strh	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    10e0:	2280      	movs	r2, #128	; 0x80
    10e2:	4b07      	ldr	r3, [pc, #28]	; (1100 <TC4Init+0x4c>)
    10e4:	0312      	lsls	r2, r2, #12
    10e6:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    10e8:	4770      	bx	lr
    10ea:	46c0      	nop			; (mov r8, r8)
    10ec:	0000421c 	.word	0x0000421c
    10f0:	40000c00 	.word	0x40000c00
    10f4:	40000400 	.word	0x40000400
    10f8:	42003000 	.word	0x42003000
    10fc:	00000904 	.word	0x00000904
    1100:	e000e100 	.word	0xe000e100

00001104 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1104:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    1106:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1108:	4b02      	ldr	r3, [pc, #8]	; (1114 <TC4_Handler+0x10>)
    110a:	739a      	strb	r2, [r3, #14]
    //pinToggle(TxPo);
    pullSample();
    110c:	4b02      	ldr	r3, [pc, #8]	; (1118 <TC4_Handler+0x14>)
    110e:	4798      	blx	r3
}
    1110:	bd10      	pop	{r4, pc}
    1112:	46c0      	nop			; (mov r8, r8)
    1114:	42003000 	.word	0x42003000
    1118:	000031fd 	.word	0x000031fd

0000111c <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    111c:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    111e:	4a0d      	ldr	r2, [pc, #52]	; (1154 <TC5Init+0x38>)
    1120:	4b0d      	ldr	r3, [pc, #52]	; (1158 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1122:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    1124:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1126:	4a0d      	ldr	r2, [pc, #52]	; (115c <TC5Init+0x40>)
    1128:	6a13      	ldr	r3, [r2, #32]
    112a:	430b      	orrs	r3, r1
    112c:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    112e:	4b0c      	ldr	r3, [pc, #48]	; (1160 <TC5Init+0x44>)
    1130:	4a0c      	ldr	r2, [pc, #48]	; (1164 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1132:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1134:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_PRESCALER_DIV16;

    u16_t logSpeed = 20; //Hz
    u8_t PER_Reg = (long)((32768/16) / logSpeed);

    TC5->COUNT8.PER.reg = PER_Reg;
    1136:	2266      	movs	r2, #102	; 0x66
    1138:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    113a:	3a65      	subs	r2, #101	; 0x65
    113c:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    113e:	32ff      	adds	r2, #255	; 0xff
    1140:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1142:	881a      	ldrh	r2, [r3, #0]
    1144:	430a      	orrs	r2, r1
    1146:	801a      	strh	r2, [r3, #0]
    1148:	2280      	movs	r2, #128	; 0x80
    114a:	4b07      	ldr	r3, [pc, #28]	; (1168 <TC5Init+0x4c>)
    114c:	0352      	lsls	r2, r2, #13
    114e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    1150:	4770      	bx	lr
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	0000421c 	.word	0x0000421c
    1158:	40000c00 	.word	0x40000c00
    115c:	40000400 	.word	0x40000400
    1160:	42003400 	.word	0x42003400
    1164:	00000c04 	.word	0x00000c04
    1168:	e000e100 	.word	0xe000e100

0000116c <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    116c:	22ff      	movs	r2, #255	; 0xff
    116e:	4b03      	ldr	r3, [pc, #12]	; (117c <TC5_Handler+0x10>)
    1170:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    1172:	4b03      	ldr	r3, [pc, #12]	; (1180 <TC5_Handler+0x14>)
    1174:	3afe      	subs	r2, #254	; 0xfe
    1176:	701a      	strb	r2, [r3, #0]
}
    1178:	4770      	bx	lr
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	42003400 	.word	0x42003400
    1180:	2000019a 	.word	0x2000019a

00001184 <flight>:
#include <boardDefines.h>

#define TESTFLIGHT 0


void flight() {
    1184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    switch(flightState) {
    1186:	4c82      	ldr	r4, [pc, #520]	; (1390 <flight+0x20c>)
    1188:	7820      	ldrb	r0, [r4, #0]
    118a:	280a      	cmp	r0, #10
    118c:	d900      	bls.n	1190 <flight+0xc>
    118e:	e0e2      	b.n	1356 <flight+0x1d2>
    1190:	f003 fcf0 	bl	4b74 <__gnu_thumb1_case_uqi>
    1194:	72451d06 	.word	0x72451d06
    1198:	ae9a85e1 	.word	0xae9a85e1
    119c:	e1cb      	.short	0xe1cb
    119e:	db          	.byte	0xdb
    119f:	00          	.byte	0x00
    case flightStatrup:

        updateGround( );
    11a0:	4b7c      	ldr	r3, [pc, #496]	; (1394 <flight+0x210>)
    11a2:	4798      	blx	r3

        if ((millis() - startupTick) > 10000) {
    11a4:	4b7c      	ldr	r3, [pc, #496]	; (1398 <flight+0x214>)
    11a6:	4798      	blx	r3
    11a8:	4b7c      	ldr	r3, [pc, #496]	; (139c <flight+0x218>)
    11aa:	681b      	ldr	r3, [r3, #0]
    11ac:	1ac0      	subs	r0, r0, r3
    11ae:	4b7c      	ldr	r3, [pc, #496]	; (13a0 <flight+0x21c>)
    11b0:	4298      	cmp	r0, r3
    11b2:	d90a      	bls.n	11ca <flight+0x46>
            findNewFlightStart();
    11b4:	4b7b      	ldr	r3, [pc, #492]	; (13a4 <flight+0x220>)
    11b6:	4798      	blx	r3
            startupJingle();
    11b8:	4b7b      	ldr	r3, [pc, #492]	; (13a8 <flight+0x224>)
    11ba:	4798      	blx	r3

             igniteDrogue();
    11bc:	4b7b      	ldr	r3, [pc, #492]	; (13ac <flight+0x228>)
    11be:	4798      	blx	r3
             igniteMain();
    11c0:	4b7b      	ldr	r3, [pc, #492]	; (13b0 <flight+0x22c>)
    11c2:	4798      	blx	r3
            flightState = flightTest;
            writeFlightStartAddress();
            logFlight( );
            logEvent('L');
#else
            flightState = flightPad;
    11c4:	2302      	movs	r3, #2
    11c6:	7023      	strb	r3, [r4, #0]
#endif

            break;
    11c8:	e0c5      	b.n	1356 <flight+0x1d2>
        }

        attemptConnection();
    11ca:	4b7a      	ldr	r3, [pc, #488]	; (13b4 <flight+0x230>)
    11cc:	e0c2      	b.n	1354 <flight+0x1d0>
        break;

    case flightIdle:

        if (millis() - offsets.groundBeep > 2000) {
    11ce:	4f72      	ldr	r7, [pc, #456]	; (1398 <flight+0x214>)
    11d0:	47b8      	blx	r7
    11d2:	4e79      	ldr	r6, [pc, #484]	; (13b8 <flight+0x234>)
    11d4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    11d6:	1ac0      	subs	r0, r0, r3
    11d8:	23fa      	movs	r3, #250	; 0xfa
    11da:	00db      	lsls	r3, r3, #3
    11dc:	4298      	cmp	r0, r3
    11de:	d905      	bls.n	11ec <flight+0x68>
            offsets.groundBeep = millis();
    11e0:	47b8      	blx	r7
    11e2:	62f0      	str	r0, [r6, #44]	; 0x2c
            beep(400);
    11e4:	20c8      	movs	r0, #200	; 0xc8
    11e6:	4b75      	ldr	r3, [pc, #468]	; (13bc <flight+0x238>)
    11e8:	0040      	lsls	r0, r0, #1
    11ea:	4798      	blx	r3
        }

        if (unplugged()) {
    11ec:	4b74      	ldr	r3, [pc, #464]	; (13c0 <flight+0x23c>)
    11ee:	4798      	blx	r3
    11f0:	2800      	cmp	r0, #0
    11f2:	d001      	beq.n	11f8 <flight+0x74>
            finishFromPad();
    11f4:	4b73      	ldr	r3, [pc, #460]	; (13c4 <flight+0x240>)
    11f6:	4798      	blx	r3
        }

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    11f8:	4b73      	ldr	r3, [pc, #460]	; (13c8 <flight+0x244>)
    11fa:	7e1b      	ldrb	r3, [r3, #24]
    11fc:	075b      	lsls	r3, r3, #29
    11fe:	d400      	bmi.n	1202 <flight+0x7e>
    1200:	e0a9      	b.n	1356 <flight+0x1d2>
            u8_t possibleReset = usartDataIn(USART3);
    1202:	2003      	movs	r0, #3
    1204:	4b71      	ldr	r3, [pc, #452]	; (13cc <flight+0x248>)
    1206:	4798      	blx	r3
            if (possibleReset == 0x52) {
    1208:	2852      	cmp	r0, #82	; 0x52
    120a:	d000      	beq.n	120e <flight+0x8a>
    120c:	e0a3      	b.n	1356 <flight+0x1d2>
    120e:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    1212:	4a6f      	ldr	r2, [pc, #444]	; (13d0 <flight+0x24c>)
    1214:	4b6f      	ldr	r3, [pc, #444]	; (13d4 <flight+0x250>)
    1216:	60da      	str	r2, [r3, #12]
    1218:	f3bf 8f4f 	dsb	sy
    121c:	e7fe      	b.n	121c <flight+0x98>
        *  Accel > 2g & vel > 15ft/s
        *		 or
        *  baro alt > 100ft
        */

        updateGround();
    121e:	4b5d      	ldr	r3, [pc, #372]	; (1394 <flight+0x210>)
    1220:	4798      	blx	r3

        if (writeLog) {
    1222:	4b6d      	ldr	r3, [pc, #436]	; (13d8 <flight+0x254>)
    1224:	781b      	ldrb	r3, [r3, #0]
    1226:	2b00      	cmp	r3, #0
    1228:	d005      	beq.n	1236 <flight+0xb2>
            logSensorsOnPad( );
    122a:	4b6c      	ldr	r3, [pc, #432]	; (13dc <flight+0x258>)
    122c:	4798      	blx	r3
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    122e:	2280      	movs	r2, #128	; 0x80
    1230:	4b6b      	ldr	r3, [pc, #428]	; (13e0 <flight+0x25c>)
    1232:	0352      	lsls	r2, r2, #13
    1234:	61da      	str	r2, [r3, #28]
            pinToggle(LedPin);
        }


        if ((( velocity > 10) && (accel > 2)) | (altitudeAGL() > 100)) {
    1236:	496b      	ldr	r1, [pc, #428]	; (13e4 <flight+0x260>)
    1238:	4e6b      	ldr	r6, [pc, #428]	; (13e8 <flight+0x264>)
    123a:	2200      	movs	r2, #0
    123c:	6808      	ldr	r0, [r1, #0]
    123e:	6849      	ldr	r1, [r1, #4]
    1240:	4b6a      	ldr	r3, [pc, #424]	; (13ec <flight+0x268>)
    1242:	47b0      	blx	r6
    1244:	2800      	cmp	r0, #0
    1246:	d00c      	beq.n	1262 <flight+0xde>
    1248:	2380      	movs	r3, #128	; 0x80
    124a:	4969      	ldr	r1, [pc, #420]	; (13f0 <flight+0x26c>)
    124c:	2200      	movs	r2, #0
    124e:	6808      	ldr	r0, [r1, #0]
    1250:	6849      	ldr	r1, [r1, #4]
    1252:	05db      	lsls	r3, r3, #23
    1254:	47b0      	blx	r6
    1256:	1e46      	subs	r6, r0, #1
    1258:	41b0      	sbcs	r0, r6
    125a:	2601      	movs	r6, #1
    125c:	4240      	negs	r0, r0
    125e:	4006      	ands	r6, r0
    1260:	e000      	b.n	1264 <flight+0xe0>
    1262:	0006      	movs	r6, r0
    1264:	4b63      	ldr	r3, [pc, #396]	; (13f4 <flight+0x270>)
    1266:	4798      	blx	r3
    1268:	2864      	cmp	r0, #100	; 0x64
    126a:	dc01      	bgt.n	1270 <flight+0xec>
    126c:	07f3      	lsls	r3, r6, #31
    126e:	d572      	bpl.n	1356 <flight+0x1d2>

            flightState = flightBoost;
    1270:	2303      	movs	r3, #3
    1272:	7023      	strb	r3, [r4, #0]
            beginFlightLog();
    1274:	4b60      	ldr	r3, [pc, #384]	; (13f8 <flight+0x274>)
    1276:	e06d      	b.n	1354 <flight+0x1d0>
        /*
        *	boost to fast
        *		while
        *	Accel > 1/4G
        */
        if (writeLog) {
    1278:	4b57      	ldr	r3, [pc, #348]	; (13d8 <flight+0x254>)
    127a:	781b      	ldrb	r3, [r3, #0]
    127c:	2b00      	cmp	r3, #0
    127e:	d001      	beq.n	1284 <flight+0x100>
            logSensors( );
    1280:	4b5e      	ldr	r3, [pc, #376]	; (13fc <flight+0x278>)
    1282:	4798      	blx	r3
        }

        if (accel < 0.25) {
    1284:	495a      	ldr	r1, [pc, #360]	; (13f0 <flight+0x26c>)
    1286:	2200      	movs	r2, #0
    1288:	6808      	ldr	r0, [r1, #0]
    128a:	6849      	ldr	r1, [r1, #4]
    128c:	4b5c      	ldr	r3, [pc, #368]	; (1400 <flight+0x27c>)
    128e:	4e5d      	ldr	r6, [pc, #372]	; (1404 <flight+0x280>)
    1290:	47b0      	blx	r6
    1292:	2800      	cmp	r0, #0
    1294:	d05f      	beq.n	1356 <flight+0x1d2>
            flightState = flightCoast;
    1296:	2305      	movs	r3, #5
            logEvent('B');
    1298:	2042      	movs	r0, #66	; 0x42
        if (writeLog) {
            logSensors( );
        }

        if (accel < 0.25) {
            flightState = flightCoast;
    129a:	7023      	strb	r3, [r4, #0]
    129c:	e025      	b.n	12ea <flight+0x166>
        *	   speed > 0
        *	   	 &
        *	altitude > baro_max_alt
        */

        if (writeLog) {
    129e:	4b4e      	ldr	r3, [pc, #312]	; (13d8 <flight+0x254>)
    12a0:	781b      	ldrb	r3, [r3, #0]
    12a2:	2b00      	cmp	r3, #0
    12a4:	d001      	beq.n	12aa <flight+0x126>
            logSensors( );
    12a6:	4b55      	ldr	r3, [pc, #340]	; (13fc <flight+0x278>)
    12a8:	4798      	blx	r3
        }


        if (velocity < 0) {
    12aa:	494e      	ldr	r1, [pc, #312]	; (13e4 <flight+0x260>)
    12ac:	2200      	movs	r2, #0
    12ae:	6808      	ldr	r0, [r1, #0]
    12b0:	6849      	ldr	r1, [r1, #4]
    12b2:	2300      	movs	r3, #0
    12b4:	4e53      	ldr	r6, [pc, #332]	; (1404 <flight+0x280>)
    12b6:	47b0      	blx	r6
    12b8:	2800      	cmp	r0, #0
    12ba:	d04c      	beq.n	1356 <flight+0x1d2>
            flightState = flightDrogue;
    12bc:	2306      	movs	r3, #6
    12be:	7023      	strb	r3, [r4, #0]
            igniteDrogue();
    12c0:	4b3a      	ldr	r3, [pc, #232]	; (13ac <flight+0x228>)
    12c2:	4798      	blx	r3
            logEvent('A');
    12c4:	2041      	movs	r0, #65	; 0x41
    12c6:	e010      	b.n	12ea <flight+0x166>
        }

        break;
    case flightDrogue:

        if (writeLog) {
    12c8:	4b43      	ldr	r3, [pc, #268]	; (13d8 <flight+0x254>)
    12ca:	781b      	ldrb	r3, [r3, #0]
    12cc:	2b00      	cmp	r3, #0
    12ce:	d001      	beq.n	12d4 <flight+0x150>
            logSensors( );
    12d0:	4b4a      	ldr	r3, [pc, #296]	; (13fc <flight+0x278>)
    12d2:	4798      	blx	r3
        }


        if (altitudeAGL() < deploymentSettings.MAIN_DEPLOY) {
    12d4:	4b47      	ldr	r3, [pc, #284]	; (13f4 <flight+0x270>)
    12d6:	4798      	blx	r3
    12d8:	4b4b      	ldr	r3, [pc, #300]	; (1408 <flight+0x284>)
    12da:	8b1b      	ldrh	r3, [r3, #24]
    12dc:	4298      	cmp	r0, r3
    12de:	da3a      	bge.n	1356 <flight+0x1d2>
            flightState = flightMain;
    12e0:	2307      	movs	r3, #7
    12e2:	7023      	strb	r3, [r4, #0]
            igniteMain();
    12e4:	4b32      	ldr	r3, [pc, #200]	; (13b0 <flight+0x22c>)
    12e6:	4798      	blx	r3
            logEvent('M');
    12e8:	204d      	movs	r0, #77	; 0x4d
    12ea:	4b48      	ldr	r3, [pc, #288]	; (140c <flight+0x288>)
    12ec:	4798      	blx	r3
    12ee:	e032      	b.n	1356 <flight+0x1d2>
        }

        break;
    case flightMain:

        if (writeLog) {
    12f0:	4b39      	ldr	r3, [pc, #228]	; (13d8 <flight+0x254>)
    12f2:	781b      	ldrb	r3, [r3, #0]
    12f4:	2b00      	cmp	r3, #0
    12f6:	d001      	beq.n	12fc <flight+0x178>
            logSensors( );
    12f8:	4b40      	ldr	r3, [pc, #256]	; (13fc <flight+0x278>)
    12fa:	4798      	blx	r3
        }

        if ((velocity > -1) && (velocity < 1) ) {
    12fc:	4b39      	ldr	r3, [pc, #228]	; (13e4 <flight+0x260>)
    12fe:	2200      	movs	r2, #0
    1300:	681e      	ldr	r6, [r3, #0]
    1302:	685f      	ldr	r7, [r3, #4]
    1304:	4d38      	ldr	r5, [pc, #224]	; (13e8 <flight+0x264>)
    1306:	4b42      	ldr	r3, [pc, #264]	; (1410 <flight+0x28c>)
    1308:	0030      	movs	r0, r6
    130a:	0039      	movs	r1, r7
    130c:	47a8      	blx	r5
    130e:	2800      	cmp	r0, #0
    1310:	d021      	beq.n	1356 <flight+0x1d2>
    1312:	0030      	movs	r0, r6
    1314:	2200      	movs	r2, #0
    1316:	4b3f      	ldr	r3, [pc, #252]	; (1414 <flight+0x290>)
    1318:	0039      	movs	r1, r7
    131a:	4e3a      	ldr	r6, [pc, #232]	; (1404 <flight+0x280>)
    131c:	47b0      	blx	r6
    131e:	2800      	cmp	r0, #0
    1320:	d019      	beq.n	1356 <flight+0x1d2>
            flightState = flightLanded;
    1322:	2308      	movs	r3, #8
    1324:	7023      	strb	r3, [r4, #0]
            finishFlight();
    1326:	4b3c      	ldr	r3, [pc, #240]	; (1418 <flight+0x294>)
    1328:	e014      	b.n	1354 <flight+0x1d0>
        }

        break;
    case flightLanded:

        if (millis() - offsets.groundBeep > 2000) {
    132a:	4f1b      	ldr	r7, [pc, #108]	; (1398 <flight+0x214>)
    132c:	47b8      	blx	r7
    132e:	4e22      	ldr	r6, [pc, #136]	; (13b8 <flight+0x234>)
    1330:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1332:	1ac0      	subs	r0, r0, r3
    1334:	23fa      	movs	r3, #250	; 0xfa
    1336:	00db      	lsls	r3, r3, #3
    1338:	4298      	cmp	r0, r3
    133a:	d90c      	bls.n	1356 <flight+0x1d2>
            offsets.groundBeep = millis();
    133c:	47b8      	blx	r7
    133e:	62f0      	str	r0, [r6, #44]	; 0x2c
            beep(400);
    1340:	20c8      	movs	r0, #200	; 0xc8
    1342:	4b1e      	ldr	r3, [pc, #120]	; (13bc <flight+0x238>)
    1344:	0040      	lsls	r0, r0, #1
    1346:	4798      	blx	r3
    1348:	e005      	b.n	1356 <flight+0x1d2>
        }

        break;
    case flightTest:

        if (writeLog) {
    134a:	4b23      	ldr	r3, [pc, #140]	; (13d8 <flight+0x254>)
    134c:	781b      	ldrb	r3, [r3, #0]
    134e:	2b00      	cmp	r3, #0
    1350:	d001      	beq.n	1356 <flight+0x1d2>
            logSensors( );
    1352:	4b2a      	ldr	r3, [pc, #168]	; (13fc <flight+0x278>)
    1354:	4798      	blx	r3
        break;
    }



    if ((flightState > flightPad) & unplugged()) {
    1356:	2302      	movs	r3, #2
    1358:	7826      	ldrb	r6, [r4, #0]
    135a:	42b3      	cmp	r3, r6
    135c:	41b6      	sbcs	r6, r6
    135e:	4b18      	ldr	r3, [pc, #96]	; (13c0 <flight+0x23c>)
    1360:	4276      	negs	r6, r6
    1362:	4798      	blx	r3
    1364:	2e00      	cmp	r6, #0
    1366:	d003      	beq.n	1370 <flight+0x1ec>
    1368:	2800      	cmp	r0, #0
    136a:	d001      	beq.n	1370 <flight+0x1ec>
        finishFlight();
    136c:	4b2a      	ldr	r3, [pc, #168]	; (1418 <flight+0x294>)
    136e:	4798      	blx	r3
    }

    if ((flightState <= flightPad) & unplugged()) {
    1370:	2300      	movs	r3, #0
    1372:	2102      	movs	r1, #2
    1374:	7822      	ldrb	r2, [r4, #0]
    1376:	4291      	cmp	r1, r2
    1378:	415b      	adcs	r3, r3
    137a:	b2dc      	uxtb	r4, r3
    137c:	4b10      	ldr	r3, [pc, #64]	; (13c0 <flight+0x23c>)
    137e:	4798      	blx	r3
    1380:	2c00      	cmp	r4, #0
    1382:	d003      	beq.n	138c <flight+0x208>
    1384:	2800      	cmp	r0, #0
    1386:	d001      	beq.n	138c <flight+0x208>
        finishFromPad();
    1388:	4b0e      	ldr	r3, [pc, #56]	; (13c4 <flight+0x240>)
    138a:	4798      	blx	r3
    }

    138c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    138e:	46c0      	nop			; (mov r8, r8)
    1390:	200001ac 	.word	0x200001ac
    1394:	0000141d 	.word	0x0000141d
    1398:	00001081 	.word	0x00001081
    139c:	2000019c 	.word	0x2000019c
    13a0:	00002710 	.word	0x00002710
    13a4:	00003151 	.word	0x00003151
    13a8:	00000da9 	.word	0x00000da9
    13ac:	00001725 	.word	0x00001725
    13b0:	000016c9 	.word	0x000016c9
    13b4:	000038d9 	.word	0x000038d9
    13b8:	20000150 	.word	0x20000150
    13bc:	00000d31 	.word	0x00000d31
    13c0:	00000b55 	.word	0x00000b55
    13c4:	00000c39 	.word	0x00000c39
    13c8:	42001400 	.word	0x42001400
    13cc:	00003675 	.word	0x00003675
    13d0:	05fa0004 	.word	0x05fa0004
    13d4:	e000ed00 	.word	0xe000ed00
    13d8:	2000019a 	.word	0x2000019a
    13dc:	00002e89 	.word	0x00002e89
    13e0:	41004400 	.word	0x41004400
    13e4:	20000308 	.word	0x20000308
    13e8:	00004ec9 	.word	0x00004ec9
    13ec:	40240000 	.word	0x40240000
    13f0:	200002e8 	.word	0x200002e8
    13f4:	00000b21 	.word	0x00000b21
    13f8:	00003129 	.word	0x00003129
    13fc:	00002cd1 	.word	0x00002cd1
    1400:	3fd00000 	.word	0x3fd00000
    1404:	00004ea1 	.word	0x00004ea1
    1408:	20000180 	.word	0x20000180
    140c:	00002c75 	.word	0x00002c75
    1410:	bff00000 	.word	0xbff00000
    1414:	3ff00000 	.word	0x3ff00000
    1418:	00000c0d 	.word	0x00000c0d

0000141c <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    141c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    141e:	4c2b      	ldr	r4, [pc, #172]	; (14cc <updateGround+0xb0>)
    1420:	4d2b      	ldr	r5, [pc, #172]	; (14d0 <updateGround+0xb4>)
    1422:	4a2c      	ldr	r2, [pc, #176]	; (14d4 <updateGround+0xb8>)
    1424:	6920      	ldr	r0, [r4, #16]
    1426:	6961      	ldr	r1, [r4, #20]
    1428:	4b2b      	ldr	r3, [pc, #172]	; (14d8 <updateGround+0xbc>)
    142a:	47a8      	blx	r5
    142c:	4b2b      	ldr	r3, [pc, #172]	; (14dc <updateGround+0xc0>)
    142e:	0006      	movs	r6, r0
    1430:	6a58      	ldr	r0, [r3, #36]	; 0x24
    1432:	4b2b      	ldr	r3, [pc, #172]	; (14e0 <updateGround+0xc4>)
    1434:	000f      	movs	r7, r1
    1436:	4798      	blx	r3
    1438:	4a26      	ldr	r2, [pc, #152]	; (14d4 <updateGround+0xb8>)
    143a:	4b2a      	ldr	r3, [pc, #168]	; (14e4 <updateGround+0xc8>)
    143c:	47a8      	blx	r5
    143e:	0002      	movs	r2, r0
    1440:	000b      	movs	r3, r1
    1442:	0030      	movs	r0, r6
    1444:	0039      	movs	r1, r7
    1446:	4e28      	ldr	r6, [pc, #160]	; (14e8 <updateGround+0xcc>)
    1448:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    144a:	4e28      	ldr	r6, [pc, #160]	; (14ec <updateGround+0xd0>)
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {


    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    144c:	6120      	str	r0, [r4, #16]
    144e:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1450:	69e0      	ldr	r0, [r4, #28]
    1452:	47b0      	blx	r6
    1454:	2200      	movs	r2, #0
    1456:	4b26      	ldr	r3, [pc, #152]	; (14f0 <updateGround+0xd4>)
    1458:	47a8      	blx	r5
    145a:	9000      	str	r0, [sp, #0]
    145c:	9101      	str	r1, [sp, #4]
    145e:	4925      	ldr	r1, [pc, #148]	; (14f4 <updateGround+0xd8>)
    1460:	2200      	movs	r2, #0
    1462:	6808      	ldr	r0, [r1, #0]
    1464:	6849      	ldr	r1, [r1, #4]
    1466:	4b22      	ldr	r3, [pc, #136]	; (14f0 <updateGround+0xd4>)
    1468:	47a8      	blx	r5
    146a:	4f1f      	ldr	r7, [pc, #124]	; (14e8 <updateGround+0xcc>)
    146c:	0002      	movs	r2, r0
    146e:	000b      	movs	r3, r1
    1470:	9800      	ldr	r0, [sp, #0]
    1472:	9901      	ldr	r1, [sp, #4]
    1474:	47b8      	blx	r7
    1476:	4f20      	ldr	r7, [pc, #128]	; (14f8 <updateGround+0xdc>)
    1478:	47b8      	blx	r7
    147a:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    147c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    147e:	47b0      	blx	r6
    1480:	4a14      	ldr	r2, [pc, #80]	; (14d4 <updateGround+0xb8>)
    1482:	4b15      	ldr	r3, [pc, #84]	; (14d8 <updateGround+0xbc>)
    1484:	47a8      	blx	r5
    1486:	4b15      	ldr	r3, [pc, #84]	; (14dc <updateGround+0xc0>)
    1488:	9000      	str	r0, [sp, #0]
    148a:	9101      	str	r1, [sp, #4]
    148c:	6d58      	ldr	r0, [r3, #84]	; 0x54
    148e:	47b0      	blx	r6
    1490:	4a10      	ldr	r2, [pc, #64]	; (14d4 <updateGround+0xb8>)
    1492:	4b14      	ldr	r3, [pc, #80]	; (14e4 <updateGround+0xc8>)
    1494:	47a8      	blx	r5
    1496:	4d14      	ldr	r5, [pc, #80]	; (14e8 <updateGround+0xcc>)
    1498:	000b      	movs	r3, r1
    149a:	0002      	movs	r2, r0
    149c:	9800      	ldr	r0, [sp, #0]
    149e:	9901      	ldr	r1, [sp, #4]
    14a0:	47a8      	blx	r5
    14a2:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    14a4:	4d15      	ldr	r5, [pc, #84]	; (14fc <updateGround+0xe0>)
void updateGround(Altimeter *my_altimeter) {


    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    14a6:	6260      	str	r0, [r4, #36]	; 0x24

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    14a8:	47a8      	blx	r5
    14aa:	6823      	ldr	r3, [r4, #0]
    14ac:	1ac0      	subs	r0, r0, r3
    14ae:	23fa      	movs	r3, #250	; 0xfa
    14b0:	00db      	lsls	r3, r3, #3
    14b2:	4298      	cmp	r0, r3
    14b4:	d909      	bls.n	14ca <updateGround+0xae>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    14b6:	69e3      	ldr	r3, [r4, #28]
    14b8:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    14ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    14bc:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    14be:	6922      	ldr	r2, [r4, #16]
    14c0:	6963      	ldr	r3, [r4, #20]
    14c2:	60a2      	str	r2, [r4, #8]
    14c4:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    14c6:	47a8      	blx	r5
    14c8:	6020      	str	r0, [r4, #0]
    }
}
    14ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    14cc:	20000150 	.word	0x20000150
    14d0:	00006091 	.word	0x00006091
    14d4:	9999999a 	.word	0x9999999a
    14d8:	3fe99999 	.word	0x3fe99999
    14dc:	200005f0 	.word	0x200005f0
    14e0:	00006dcd 	.word	0x00006dcd
    14e4:	3fc99999 	.word	0x3fc99999
    14e8:	000051f1 	.word	0x000051f1
    14ec:	00006d5d 	.word	0x00006d5d
    14f0:	3fe00000 	.word	0x3fe00000
    14f4:	20000328 	.word	0x20000328
    14f8:	00004f49 	.word	0x00004f49
    14fc:	00001081 	.word	0x00001081

00001500 <checkContinuity>:
    }
}

void checkContinuity() {

    charges.mainFound = false;
    1500:	2300      	movs	r3, #0
    1502:	4a12      	ldr	r2, [pc, #72]	; (154c <checkContinuity+0x4c>)
    } else {
        return false;
    }
}

void checkContinuity() {
    1504:	b510      	push	{r4, lr}

    charges.mainFound = false;
    1506:	1c51      	adds	r1, r2, #1
    1508:	77cb      	strb	r3, [r1, #31]
    charges.drogueFound = false;
    150a:	1c91      	adds	r1, r2, #2
    150c:	77cb      	strb	r3, [r1, #31]
    150e:	4b10      	ldr	r3, [pc, #64]	; (1550 <checkContinuity+0x50>)

}

bool checkIfDrogue(deploymentChannel_t chan) {

    if (chan.ENABLED & (chan.TYPE == DROGUE_t)) {
    1510:	7858      	ldrb	r0, [r3, #1]
    1512:	2801      	cmp	r0, #1
    1514:	d10a      	bne.n	152c <checkContinuity+0x2c>
    1516:	7818      	ldrb	r0, [r3, #0]
    1518:	2800      	cmp	r0, #0
    151a:	d007      	beq.n	152c <checkContinuity+0x2c>

    charges.mainFound = false;
    charges.drogueFound = false;

    if (checkIfDrogue(deploymentSettings.channelASettings)) {
        if (sample.voltage.senseA > 500) {
    151c:	480d      	ldr	r0, [pc, #52]	; (1554 <checkContinuity+0x54>)
    151e:	8a04      	ldrh	r4, [r0, #16]
    1520:	20fa      	movs	r0, #250	; 0xfa
    1522:	0040      	lsls	r0, r0, #1
    1524:	4284      	cmp	r4, r0
    1526:	d901      	bls.n	152c <checkContinuity+0x2c>
            charges.drogueFound = true;
    1528:	2001      	movs	r0, #1
    152a:	77c8      	strb	r0, [r1, #31]
#include <boardDefines.h>


bool checkIfMain(deploymentChannel_t chan) {

    if (chan.ENABLED & (chan.TYPE == MAIN_t)) {
    152c:	79d9      	ldrb	r1, [r3, #7]
    152e:	2900      	cmp	r1, #0
    1530:	d10b      	bne.n	154a <checkContinuity+0x4a>
    1532:	799b      	ldrb	r3, [r3, #6]
    1534:	2b00      	cmp	r3, #0
    1536:	d008      	beq.n	154a <checkContinuity+0x4a>
        if (sample.voltage.senseA > 500) {
            charges.drogueFound = true;
        }
    }
    if (checkIfMain(deploymentSettings.channelBSettings)) {
        if (sample.voltage.senseB > 500) {
    1538:	4b06      	ldr	r3, [pc, #24]	; (1554 <checkContinuity+0x54>)
    153a:	8a59      	ldrh	r1, [r3, #18]
    153c:	23fa      	movs	r3, #250	; 0xfa
    153e:	005b      	lsls	r3, r3, #1
    1540:	4299      	cmp	r1, r3
    1542:	d902      	bls.n	154a <checkContinuity+0x4a>
            charges.mainFound = true;
    1544:	2301      	movs	r3, #1
    1546:	3201      	adds	r2, #1
    1548:	77d3      	strb	r3, [r2, #31]
        }
    }


}
    154a:	bd10      	pop	{r4, pc}
    154c:	200002c4 	.word	0x200002c4
    1550:	20000180 	.word	0x20000180
    1554:	200005f0 	.word	0x200005f0

00001558 <continuityBeep>:

void continuityBeep() {

    checkContinuity();
    1558:	4b0d      	ldr	r3, [pc, #52]	; (1590 <continuityBeep+0x38>)
    }


}

void continuityBeep() {
    155a:	b510      	push	{r4, lr}

    checkContinuity();
    155c:	4798      	blx	r3

    if ((charges.mainFound == false) & (charges.drogueFound == false)) {
    155e:	2001      	movs	r0, #1
    1560:	0001      	movs	r1, r0
    1562:	4b0c      	ldr	r3, [pc, #48]	; (1594 <continuityBeep+0x3c>)
    1564:	1c5a      	adds	r2, r3, #1
    1566:	3302      	adds	r3, #2
    1568:	7fdb      	ldrb	r3, [r3, #31]
    156a:	7fd2      	ldrb	r2, [r2, #31]
    156c:	4059      	eors	r1, r3
    156e:	428a      	cmp	r2, r1
    1570:	d201      	bcs.n	1576 <continuityBeep+0x1e>
        beepDigit(0);
    1572:	2000      	movs	r0, #0
    1574:	e009      	b.n	158a <continuityBeep+0x32>
    } else if ((charges.mainFound == false) & (charges.drogueFound == true)) {
    1576:	429a      	cmp	r2, r3
    1578:	d307      	bcc.n	158a <continuityBeep+0x32>
        beepDigit(1);
    } else if ((charges.mainFound == true) & (charges.drogueFound == false)) {
        beepDigit(2);
    157a:	2002      	movs	r0, #2

    if ((charges.mainFound == false) & (charges.drogueFound == false)) {
        beepDigit(0);
    } else if ((charges.mainFound == false) & (charges.drogueFound == true)) {
        beepDigit(1);
    } else if ((charges.mainFound == true) & (charges.drogueFound == false)) {
    157c:	429a      	cmp	r2, r3
    157e:	d804      	bhi.n	158a <continuityBeep+0x32>
        beepDigit(2);
    } else if ((charges.mainFound == true) & (charges.drogueFound == true)) {
    1580:	2a00      	cmp	r2, #0
    1582:	d004      	beq.n	158e <continuityBeep+0x36>
    1584:	2b00      	cmp	r3, #0
    1586:	d002      	beq.n	158e <continuityBeep+0x36>
        beepDigit(3);
    1588:	2003      	movs	r0, #3
    158a:	4b03      	ldr	r3, [pc, #12]	; (1598 <continuityBeep+0x40>)
    158c:	4798      	blx	r3
    }


}
    158e:	bd10      	pop	{r4, pc}
    1590:	00001501 	.word	0x00001501
    1594:	200002c4 	.word	0x200002c4
    1598:	00000d79 	.word	0x00000d79

0000159c <igniterTick>:

void igniterTick() {

    if (charges.igniterAHot) {
    159c:	4b21      	ldr	r3, [pc, #132]	; (1624 <igniterTick+0x88>)
    159e:	781a      	ldrb	r2, [r3, #0]
    15a0:	2a00      	cmp	r2, #0
    15a2:	d00c      	beq.n	15be <igniterTick+0x22>
        if ((charges.igniterATick + 9000) < (int)sample.sampleTick ) {
    15a4:	4920      	ldr	r1, [pc, #128]	; (1628 <igniterTick+0x8c>)
    15a6:	685a      	ldr	r2, [r3, #4]
    15a8:	1852      	adds	r2, r2, r1
    15aa:	4920      	ldr	r1, [pc, #128]	; (162c <igniterTick+0x90>)
    15ac:	6849      	ldr	r1, [r1, #4]
    15ae:	428a      	cmp	r2, r1
    15b0:	d205      	bcs.n	15be <igniterTick+0x22>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    15b2:	2180      	movs	r1, #128	; 0x80
    15b4:	4a1e      	ldr	r2, [pc, #120]	; (1630 <igniterTick+0x94>)
    15b6:	0409      	lsls	r1, r1, #16
    15b8:	6011      	str	r1, [r2, #0]
            pinLow(fireAPin);
            charges.igniterAHot = false;
    15ba:	2200      	movs	r2, #0
    15bc:	701a      	strb	r2, [r3, #0]
        }
    }

    if (charges.igniterBHot) {
    15be:	7a1a      	ldrb	r2, [r3, #8]
    15c0:	2a00      	cmp	r2, #0
    15c2:	d00c      	beq.n	15de <igniterTick+0x42>
        if ((charges.igniterBTick + 9000) < (int)sample.sampleTick ) {
    15c4:	4918      	ldr	r1, [pc, #96]	; (1628 <igniterTick+0x8c>)
    15c6:	68da      	ldr	r2, [r3, #12]
    15c8:	1852      	adds	r2, r2, r1
    15ca:	4918      	ldr	r1, [pc, #96]	; (162c <igniterTick+0x90>)
    15cc:	6849      	ldr	r1, [r1, #4]
    15ce:	428a      	cmp	r2, r1
    15d0:	d205      	bcs.n	15de <igniterTick+0x42>
    15d2:	2180      	movs	r1, #128	; 0x80
    15d4:	4a16      	ldr	r2, [pc, #88]	; (1630 <igniterTick+0x94>)
    15d6:	03c9      	lsls	r1, r1, #15
    15d8:	6011      	str	r1, [r2, #0]
            pinLow(fireBPin);
            charges.igniterBHot = false;
    15da:	2200      	movs	r2, #0
    15dc:	721a      	strb	r2, [r3, #8]
        }
    }

    if (charges.igniterCHot) {
    15de:	7c1a      	ldrb	r2, [r3, #16]
    15e0:	2a00      	cmp	r2, #0
    15e2:	d00d      	beq.n	1600 <igniterTick+0x64>
        if ((charges.igniterCTick + 2000) < (int)sample.sampleTick ) {
    15e4:	21fa      	movs	r1, #250	; 0xfa
    15e6:	695a      	ldr	r2, [r3, #20]
    15e8:	00c9      	lsls	r1, r1, #3
    15ea:	1852      	adds	r2, r2, r1
    15ec:	490f      	ldr	r1, [pc, #60]	; (162c <igniterTick+0x90>)
    15ee:	6849      	ldr	r1, [r1, #4]
    15f0:	428a      	cmp	r2, r1
    15f2:	d205      	bcs.n	1600 <igniterTick+0x64>
    15f4:	2180      	movs	r1, #128	; 0x80
    15f6:	4a0f      	ldr	r2, [pc, #60]	; (1634 <igniterTick+0x98>)
    15f8:	0489      	lsls	r1, r1, #18
    15fa:	6151      	str	r1, [r2, #20]
            pinLow(fireCPin);
            charges.igniterCHot = false;
    15fc:	2200      	movs	r2, #0
    15fe:	741a      	strb	r2, [r3, #16]
        }
    }

    if (charges.igniterDHot) {
    1600:	7e1a      	ldrb	r2, [r3, #24]
    1602:	2a00      	cmp	r2, #0
    1604:	d00d      	beq.n	1622 <igniterTick+0x86>
        if ((charges.igniterDTick + 2000) <  (int)sample.sampleTick ) {
    1606:	21fa      	movs	r1, #250	; 0xfa
    1608:	69da      	ldr	r2, [r3, #28]
    160a:	00c9      	lsls	r1, r1, #3
    160c:	1852      	adds	r2, r2, r1
    160e:	4907      	ldr	r1, [pc, #28]	; (162c <igniterTick+0x90>)
    1610:	6849      	ldr	r1, [r1, #4]
    1612:	428a      	cmp	r2, r1
    1614:	d205      	bcs.n	1622 <igniterTick+0x86>
    1616:	2180      	movs	r1, #128	; 0x80
    1618:	4a06      	ldr	r2, [pc, #24]	; (1634 <igniterTick+0x98>)
    161a:	0449      	lsls	r1, r1, #17
    161c:	6151      	str	r1, [r2, #20]
            pinLow(fireDPin);
            charges.igniterDHot = false;
    161e:	2200      	movs	r2, #0
    1620:	761a      	strb	r2, [r3, #24]
        }
    }
}
    1622:	4770      	bx	lr
    1624:	200002c4 	.word	0x200002c4
    1628:	00002328 	.word	0x00002328
    162c:	200005f0 	.word	0x200005f0
    1630:	41004494 	.word	0x41004494
    1634:	41004400 	.word	0x41004400

00001638 <lightIgniterA>:
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1638:	2280      	movs	r2, #128	; 0x80
    163a:	4b05      	ldr	r3, [pc, #20]	; (1650 <lightIgniterA+0x18>)
    163c:	0412      	lsls	r2, r2, #16
    163e:	601a      	str	r2, [r3, #0]
    }
}

void lightIgniterA() {
    pinHigh(fireAPin);
    charges.igniterAHot = true;
    1640:	2201      	movs	r2, #1
    1642:	4b04      	ldr	r3, [pc, #16]	; (1654 <lightIgniterA+0x1c>)
    1644:	701a      	strb	r2, [r3, #0]
    charges.igniterATick = sample.sampleTick;
    1646:	4a04      	ldr	r2, [pc, #16]	; (1658 <lightIgniterA+0x20>)
    1648:	6852      	ldr	r2, [r2, #4]
    164a:	605a      	str	r2, [r3, #4]
}
    164c:	4770      	bx	lr
    164e:	46c0      	nop			; (mov r8, r8)
    1650:	41004498 	.word	0x41004498
    1654:	200002c4 	.word	0x200002c4
    1658:	200005f0 	.word	0x200005f0

0000165c <lightIgniterB>:
    165c:	2280      	movs	r2, #128	; 0x80
    165e:	4b05      	ldr	r3, [pc, #20]	; (1674 <lightIgniterB+0x18>)
    1660:	03d2      	lsls	r2, r2, #15
    1662:	601a      	str	r2, [r3, #0]

void lightIgniterB() {
    pinHigh(fireBPin);
    charges.igniterBHot = true;
    1664:	2201      	movs	r2, #1
    1666:	4b04      	ldr	r3, [pc, #16]	; (1678 <lightIgniterB+0x1c>)
    1668:	721a      	strb	r2, [r3, #8]
    charges.igniterBTick = sample.sampleTick;
    166a:	4a04      	ldr	r2, [pc, #16]	; (167c <lightIgniterB+0x20>)
    166c:	6852      	ldr	r2, [r2, #4]
    166e:	60da      	str	r2, [r3, #12]
}
    1670:	4770      	bx	lr
    1672:	46c0      	nop			; (mov r8, r8)
    1674:	41004498 	.word	0x41004498
    1678:	200002c4 	.word	0x200002c4
    167c:	200005f0 	.word	0x200005f0

00001680 <lightIgniterC>:
    1680:	2280      	movs	r2, #128	; 0x80
    1682:	4b05      	ldr	r3, [pc, #20]	; (1698 <lightIgniterC+0x18>)
    1684:	0492      	lsls	r2, r2, #18
    1686:	619a      	str	r2, [r3, #24]

void lightIgniterC() {
    pinHigh(fireCPin);
    charges.igniterCHot = true;
    1688:	2201      	movs	r2, #1
    168a:	4b04      	ldr	r3, [pc, #16]	; (169c <lightIgniterC+0x1c>)
    168c:	741a      	strb	r2, [r3, #16]
    charges.igniterCTick = sample.sampleTick;
    168e:	4a04      	ldr	r2, [pc, #16]	; (16a0 <lightIgniterC+0x20>)
    1690:	6852      	ldr	r2, [r2, #4]
    1692:	615a      	str	r2, [r3, #20]
}
    1694:	4770      	bx	lr
    1696:	46c0      	nop			; (mov r8, r8)
    1698:	41004400 	.word	0x41004400
    169c:	200002c4 	.word	0x200002c4
    16a0:	200005f0 	.word	0x200005f0

000016a4 <lightIgniterD>:
    16a4:	2280      	movs	r2, #128	; 0x80
    16a6:	4b05      	ldr	r3, [pc, #20]	; (16bc <lightIgniterD+0x18>)
    16a8:	0452      	lsls	r2, r2, #17
    16aa:	619a      	str	r2, [r3, #24]

void lightIgniterD() {
    pinHigh(fireDPin);
    charges.igniterDHot = true;
    16ac:	2201      	movs	r2, #1
    16ae:	4b04      	ldr	r3, [pc, #16]	; (16c0 <lightIgniterD+0x1c>)
    16b0:	761a      	strb	r2, [r3, #24]
    charges.igniterDTick = sample.sampleTick;
    16b2:	4a04      	ldr	r2, [pc, #16]	; (16c4 <lightIgniterD+0x20>)
    16b4:	6852      	ldr	r2, [r2, #4]
    16b6:	61da      	str	r2, [r3, #28]
    16b8:	4770      	bx	lr
    16ba:	46c0      	nop			; (mov r8, r8)
    16bc:	41004400 	.word	0x41004400
    16c0:	200002c4 	.word	0x200002c4
    16c4:	200005f0 	.word	0x200005f0

000016c8 <igniteMain>:
            charges.igniterDHot = false;
        }
    }
}

void igniteMain() {
    16c8:	b510      	push	{r4, lr}

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    16ca:	4c11      	ldr	r4, [pc, #68]	; (1710 <igniteMain+0x48>)
    16cc:	7863      	ldrb	r3, [r4, #1]
    16ce:	2b00      	cmp	r3, #0
    16d0:	d104      	bne.n	16dc <igniteMain+0x14>
    16d2:	7823      	ldrb	r3, [r4, #0]
    16d4:	2b00      	cmp	r3, #0
    16d6:	d001      	beq.n	16dc <igniteMain+0x14>
        lightIgniterA();
    16d8:	4b0e      	ldr	r3, [pc, #56]	; (1714 <igniteMain+0x4c>)
    16da:	4798      	blx	r3
    }
    if(deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    16dc:	79e3      	ldrb	r3, [r4, #7]
    16de:	2b00      	cmp	r3, #0
    16e0:	d104      	bne.n	16ec <igniteMain+0x24>
    16e2:	79a3      	ldrb	r3, [r4, #6]
    16e4:	2b00      	cmp	r3, #0
    16e6:	d001      	beq.n	16ec <igniteMain+0x24>
        lightIgniterB();
    16e8:	4b0b      	ldr	r3, [pc, #44]	; (1718 <igniteMain+0x50>)
    16ea:	4798      	blx	r3
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    16ec:	7b63      	ldrb	r3, [r4, #13]
    16ee:	2b00      	cmp	r3, #0
    16f0:	d104      	bne.n	16fc <igniteMain+0x34>
    16f2:	7b23      	ldrb	r3, [r4, #12]
    16f4:	2b00      	cmp	r3, #0
    16f6:	d001      	beq.n	16fc <igniteMain+0x34>
        lightIgniterC();
    16f8:	4b08      	ldr	r3, [pc, #32]	; (171c <igniteMain+0x54>)
    16fa:	4798      	blx	r3
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    16fc:	7ce3      	ldrb	r3, [r4, #19]
    16fe:	2b00      	cmp	r3, #0
    1700:	d104      	bne.n	170c <igniteMain+0x44>
    1702:	7ca3      	ldrb	r3, [r4, #18]
    1704:	2b00      	cmp	r3, #0
    1706:	d001      	beq.n	170c <igniteMain+0x44>
        lightIgniterD();
    1708:	4b05      	ldr	r3, [pc, #20]	; (1720 <igniteMain+0x58>)
    170a:	4798      	blx	r3
    }
}
    170c:	bd10      	pop	{r4, pc}
    170e:	46c0      	nop			; (mov r8, r8)
    1710:	20000180 	.word	0x20000180
    1714:	00001639 	.word	0x00001639
    1718:	0000165d 	.word	0x0000165d
    171c:	00001681 	.word	0x00001681
    1720:	000016a5 	.word	0x000016a5

00001724 <igniteDrogue>:

void igniteDrogue() {
    1724:	b510      	push	{r4, lr}

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == DROGUE_t)) {
    1726:	4c11      	ldr	r4, [pc, #68]	; (176c <igniteDrogue+0x48>)
    1728:	7863      	ldrb	r3, [r4, #1]
    172a:	2b01      	cmp	r3, #1
    172c:	d104      	bne.n	1738 <igniteDrogue+0x14>
    172e:	7823      	ldrb	r3, [r4, #0]
    1730:	2b00      	cmp	r3, #0
    1732:	d001      	beq.n	1738 <igniteDrogue+0x14>
        lightIgniterA();
    1734:	4b0e      	ldr	r3, [pc, #56]	; (1770 <igniteDrogue+0x4c>)
    1736:	4798      	blx	r3
    }
    if (deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == DROGUE_t)) {
    1738:	79e3      	ldrb	r3, [r4, #7]
    173a:	2b01      	cmp	r3, #1
    173c:	d104      	bne.n	1748 <igniteDrogue+0x24>
    173e:	79a3      	ldrb	r3, [r4, #6]
    1740:	2b00      	cmp	r3, #0
    1742:	d001      	beq.n	1748 <igniteDrogue+0x24>
        lightIgniterB();
    1744:	4b0b      	ldr	r3, [pc, #44]	; (1774 <igniteDrogue+0x50>)
    1746:	4798      	blx	r3
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == DROGUE_t)) {
    1748:	7b63      	ldrb	r3, [r4, #13]
    174a:	2b01      	cmp	r3, #1
    174c:	d104      	bne.n	1758 <igniteDrogue+0x34>
    174e:	7b23      	ldrb	r3, [r4, #12]
    1750:	2b00      	cmp	r3, #0
    1752:	d001      	beq.n	1758 <igniteDrogue+0x34>
        lightIgniterC();
    1754:	4b08      	ldr	r3, [pc, #32]	; (1778 <igniteDrogue+0x54>)
    1756:	4798      	blx	r3
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
    1758:	7ce3      	ldrb	r3, [r4, #19]
    175a:	2b01      	cmp	r3, #1
    175c:	d104      	bne.n	1768 <igniteDrogue+0x44>
    175e:	7ca3      	ldrb	r3, [r4, #18]
    1760:	2b00      	cmp	r3, #0
    1762:	d001      	beq.n	1768 <igniteDrogue+0x44>
        lightIgniterD();
    1764:	4b05      	ldr	r3, [pc, #20]	; (177c <igniteDrogue+0x58>)
    1766:	4798      	blx	r3
    }
}
    1768:	bd10      	pop	{r4, pc}
    176a:	46c0      	nop			; (mov r8, r8)
    176c:	20000180 	.word	0x20000180
    1770:	00001639 	.word	0x00001639
    1774:	0000165d 	.word	0x0000165d
    1778:	00001681 	.word	0x00001681
    177c:	000016a5 	.word	0x000016a5

00001780 <computeKalmanGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    1780:	4bdc      	ldr	r3, [pc, #880]	; (1af4 <computeKalmanGains+0x374>)
    1782:	48dd      	ldr	r0, [pc, #884]	; (1af8 <computeKalmanGains+0x378>)
    1784:	49dd      	ldr	r1, [pc, #884]	; (1afc <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    1786:	b5f0      	push	{r4, r5, r6, r7, lr}
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    1788:	6098      	str	r0, [r3, #8]
    178a:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    178c:	6298      	str	r0, [r3, #40]	; 0x28
    178e:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    1790:	48db      	ldr	r0, [pc, #876]	; (1b00 <computeKalmanGains+0x380>)
    1792:	49dc      	ldr	r1, [pc, #880]	; (1b04 <computeKalmanGains+0x384>)
    1794:	2200      	movs	r2, #0
    1796:	6118      	str	r0, [r3, #16]
    1798:	6159      	str	r1, [r3, #20]
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
            kgain[i][j] = 1.0;
    179a:	2000      	movs	r0, #0
    179c:	49da      	ldr	r1, [pc, #872]	; (1b08 <computeKalmanGains+0x388>)
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    179e:	4cdb      	ldr	r4, [pc, #876]	; (1b0c <computeKalmanGains+0x38c>)
    17a0:	468c      	mov	ip, r1
    17a2:	4ddb      	ldr	r5, [pc, #876]	; (1b10 <computeKalmanGains+0x390>)
            kgain[i][j] = 1.0;
    17a4:	49db      	ldr	r1, [pc, #876]	; (1b14 <computeKalmanGains+0x394>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    17a6:	b0cd      	sub	sp, #308	; 0x134
    17a8:	ae40      	add	r6, sp, #256	; 0x100
    17aa:	1997      	adds	r7, r2, r6
    17ac:	4666      	mov	r6, ip
    17ae:	1996      	adds	r6, r2, r6
    17b0:	3210      	adds	r2, #16
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    17b2:	603c      	str	r4, [r7, #0]
    17b4:	607d      	str	r5, [r7, #4]
            kgain[i][j] = 1.0;
    17b6:	6030      	str	r0, [r6, #0]
    17b8:	6071      	str	r1, [r6, #4]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    17ba:	60bc      	str	r4, [r7, #8]
    17bc:	60fd      	str	r5, [r7, #12]
            kgain[i][j] = 1.0;
    17be:	60b0      	str	r0, [r6, #8]
    17c0:	60f1      	str	r1, [r6, #12]
    phi[0][2]    = dt*dt/2.0;
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
    17c2:	2a30      	cmp	r2, #48	; 0x30
    17c4:	d1f0      	bne.n	17a8 <computeKalmanGains+0x28>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    17c6:	6819      	ldr	r1, [r3, #0]
    17c8:	685a      	ldr	r2, [r3, #4]
    17ca:	911a      	str	r1, [sp, #104]	; 0x68
    17cc:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    17ce:	6999      	ldr	r1, [r3, #24]
    17d0:	69da      	ldr	r2, [r3, #28]
    17d2:	911c      	str	r1, [sp, #112]	; 0x70
    17d4:	921d      	str	r2, [sp, #116]	; 0x74
    17d6:	6a19      	ldr	r1, [r3, #32]
    17d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    17da:	911e      	str	r1, [sp, #120]	; 0x78
    17dc:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    17de:	6b19      	ldr	r1, [r3, #48]	; 0x30
    17e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    17e2:	9120      	str	r1, [sp, #128]	; 0x80
    17e4:	9221      	str	r2, [sp, #132]	; 0x84
    17e6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    17e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    17ea:	9122      	str	r1, [sp, #136]	; 0x88
    17ec:	9223      	str	r2, [sp, #140]	; 0x8c
    17ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
    17f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    17f2:	9124      	str	r1, [sp, #144]	; 0x90
    17f4:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    17f6:	6c99      	ldr	r1, [r3, #72]	; 0x48
    17f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    17fa:	913a      	str	r1, [sp, #232]	; 0xe8
    17fc:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    17fe:	6d19      	ldr	r1, [r3, #80]	; 0x50
    1800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    1802:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    1804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1806:	933e      	str	r3, [sp, #248]	; 0xf8
    1808:	943f      	str	r4, [sp, #252]	; 0xfc
    180a:	2300      	movs	r3, #0
    180c:	4cc2      	ldr	r4, [pc, #776]	; (1b18 <computeKalmanGains+0x398>)
    180e:	913c      	str	r1, [sp, #240]	; 0xf0
    1810:	923d      	str	r2, [sp, #244]	; 0xf4
    1812:	9302      	str	r3, [sp, #8]
    1814:	9403      	str	r4, [sp, #12]
    1816:	2300      	movs	r3, #0
    1818:	2400      	movs	r4, #0
    181a:	9310      	str	r3, [sp, #64]	; 0x40
    181c:	9411      	str	r4, [sp, #68]	; 0x44
    181e:	9300      	str	r3, [sp, #0]
    1820:	9401      	str	r4, [sp, #4]
    1822:	9304      	str	r3, [sp, #16]
    1824:	9405      	str	r4, [sp, #20]
    1826:	2300      	movs	r3, #0
    1828:	4cbb      	ldr	r4, [pc, #748]	; (1b18 <computeKalmanGains+0x398>)
    182a:	930e      	str	r3, [sp, #56]	; 0x38
    182c:	940f      	str	r4, [sp, #60]	; 0x3c
    182e:	2300      	movs	r3, #0
    1830:	2400      	movs	r4, #0
    1832:	9308      	str	r3, [sp, #32]
    1834:	9409      	str	r4, [sp, #36]	; 0x24
    1836:	930c      	str	r3, [sp, #48]	; 0x30
    1838:	940d      	str	r4, [sp, #52]	; 0x34
    183a:	930a      	str	r3, [sp, #40]	; 0x28
    183c:	940b      	str	r4, [sp, #44]	; 0x2c
    183e:	2480      	movs	r4, #128	; 0x80
    1840:	2300      	movs	r3, #0
    1842:	05e4      	lsls	r4, r4, #23
    1844:	9306      	str	r3, [sp, #24]
    1846:	9407      	str	r4, [sp, #28]
    1848:	2300      	movs	r3, #0
    184a:	9338      	str	r3, [sp, #224]	; 0xe0

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    184c:	4db3      	ldr	r5, [pc, #716]	; (1b1c <computeKalmanGains+0x39c>)
    184e:	9a06      	ldr	r2, [sp, #24]
    1850:	9b07      	ldr	r3, [sp, #28]
    1852:	981a      	ldr	r0, [sp, #104]	; 0x68
    1854:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1856:	47a8      	blx	r5
    1858:	4aa7      	ldr	r2, [pc, #668]	; (1af8 <computeKalmanGains+0x378>)
    185a:	0006      	movs	r6, r0
    185c:	000f      	movs	r7, r1
    185e:	9808      	ldr	r0, [sp, #32]
    1860:	9909      	ldr	r1, [sp, #36]	; 0x24
    1862:	4ba6      	ldr	r3, [pc, #664]	; (1afc <computeKalmanGains+0x37c>)
    1864:	47a8      	blx	r5
    1866:	4cae      	ldr	r4, [pc, #696]	; (1b20 <computeKalmanGains+0x3a0>)
    1868:	0002      	movs	r2, r0
    186a:	000b      	movs	r3, r1
    186c:	0030      	movs	r0, r6
    186e:	0039      	movs	r1, r7
    1870:	47a0      	blx	r4
    1872:	4aa3      	ldr	r2, [pc, #652]	; (1b00 <computeKalmanGains+0x380>)
    1874:	0006      	movs	r6, r0
    1876:	000f      	movs	r7, r1
    1878:	9800      	ldr	r0, [sp, #0]
    187a:	9901      	ldr	r1, [sp, #4]
    187c:	4ba1      	ldr	r3, [pc, #644]	; (1b04 <computeKalmanGains+0x384>)
    187e:	47a8      	blx	r5
    1880:	0002      	movs	r2, r0
    1882:	000b      	movs	r3, r1
    1884:	0030      	movs	r0, r6
    1886:	0039      	movs	r1, r7
    1888:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    188a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    188c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    188e:	9016      	str	r0, [sp, #88]	; 0x58
    1890:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1892:	981a      	ldr	r0, [sp, #104]	; 0x68
    1894:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1896:	47a8      	blx	r5
    1898:	4a97      	ldr	r2, [pc, #604]	; (1af8 <computeKalmanGains+0x378>)
    189a:	0006      	movs	r6, r0
    189c:	000f      	movs	r7, r1
    189e:	980e      	ldr	r0, [sp, #56]	; 0x38
    18a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    18a2:	4b96      	ldr	r3, [pc, #600]	; (1afc <computeKalmanGains+0x37c>)
    18a4:	47a8      	blx	r5
    18a6:	0002      	movs	r2, r0
    18a8:	000b      	movs	r3, r1
    18aa:	0030      	movs	r0, r6
    18ac:	0039      	movs	r1, r7
    18ae:	47a0      	blx	r4
    18b0:	4a93      	ldr	r2, [pc, #588]	; (1b00 <computeKalmanGains+0x380>)
    18b2:	0006      	movs	r6, r0
    18b4:	000f      	movs	r7, r1
    18b6:	9810      	ldr	r0, [sp, #64]	; 0x40
    18b8:	9911      	ldr	r1, [sp, #68]	; 0x44
    18ba:	4b92      	ldr	r3, [pc, #584]	; (1b04 <computeKalmanGains+0x384>)
    18bc:	47a8      	blx	r5
    18be:	0002      	movs	r2, r0
    18c0:	000b      	movs	r3, r1
    18c2:	0030      	movs	r0, r6
    18c4:	0039      	movs	r1, r7
    18c6:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    18c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    18ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    18cc:	9012      	str	r0, [sp, #72]	; 0x48
    18ce:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    18d0:	981a      	ldr	r0, [sp, #104]	; 0x68
    18d2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    18d4:	47a8      	blx	r5
    18d6:	4a88      	ldr	r2, [pc, #544]	; (1af8 <computeKalmanGains+0x378>)
    18d8:	0006      	movs	r6, r0
    18da:	000f      	movs	r7, r1
    18dc:	9804      	ldr	r0, [sp, #16]
    18de:	9905      	ldr	r1, [sp, #20]
    18e0:	4b86      	ldr	r3, [pc, #536]	; (1afc <computeKalmanGains+0x37c>)
    18e2:	47a8      	blx	r5
    18e4:	0002      	movs	r2, r0
    18e6:	000b      	movs	r3, r1
    18e8:	0030      	movs	r0, r6
    18ea:	0039      	movs	r1, r7
    18ec:	47a0      	blx	r4
    18ee:	4a84      	ldr	r2, [pc, #528]	; (1b00 <computeKalmanGains+0x380>)
    18f0:	0006      	movs	r6, r0
    18f2:	000f      	movs	r7, r1
    18f4:	9802      	ldr	r0, [sp, #8]
    18f6:	9903      	ldr	r1, [sp, #12]
    18f8:	4b82      	ldr	r3, [pc, #520]	; (1b04 <computeKalmanGains+0x384>)
    18fa:	47a8      	blx	r5
    18fc:	0002      	movs	r2, r0
    18fe:	000b      	movs	r3, r1
    1900:	0030      	movs	r0, r6
    1902:	0039      	movs	r1, r7
    1904:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1906:	9a06      	ldr	r2, [sp, #24]
    1908:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    190a:	9014      	str	r0, [sp, #80]	; 0x50
    190c:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    190e:	981c      	ldr	r0, [sp, #112]	; 0x70
    1910:	991d      	ldr	r1, [sp, #116]	; 0x74
    1912:	47a8      	blx	r5
    1914:	9a08      	ldr	r2, [sp, #32]
    1916:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1918:	0006      	movs	r6, r0
    191a:	000f      	movs	r7, r1
    191c:	981e      	ldr	r0, [sp, #120]	; 0x78
    191e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1920:	47a8      	blx	r5
    1922:	0002      	movs	r2, r0
    1924:	000b      	movs	r3, r1
    1926:	0030      	movs	r0, r6
    1928:	0039      	movs	r1, r7
    192a:	47a0      	blx	r4
    192c:	4a72      	ldr	r2, [pc, #456]	; (1af8 <computeKalmanGains+0x378>)
    192e:	0006      	movs	r6, r0
    1930:	000f      	movs	r7, r1
    1932:	9800      	ldr	r0, [sp, #0]
    1934:	9901      	ldr	r1, [sp, #4]
    1936:	4b71      	ldr	r3, [pc, #452]	; (1afc <computeKalmanGains+0x37c>)
    1938:	47a8      	blx	r5
    193a:	0002      	movs	r2, r0
    193c:	000b      	movs	r3, r1
    193e:	0030      	movs	r0, r6
    1940:	0039      	movs	r1, r7
    1942:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1948:	9018      	str	r0, [sp, #96]	; 0x60
    194a:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    194c:	981c      	ldr	r0, [sp, #112]	; 0x70
    194e:	991d      	ldr	r1, [sp, #116]	; 0x74
    1950:	47a8      	blx	r5
    1952:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1956:	0006      	movs	r6, r0
    1958:	000f      	movs	r7, r1
    195a:	981e      	ldr	r0, [sp, #120]	; 0x78
    195c:	991f      	ldr	r1, [sp, #124]	; 0x7c
    195e:	47a8      	blx	r5
    1960:	0002      	movs	r2, r0
    1962:	000b      	movs	r3, r1
    1964:	0030      	movs	r0, r6
    1966:	0039      	movs	r1, r7
    1968:	47a0      	blx	r4
    196a:	4a63      	ldr	r2, [pc, #396]	; (1af8 <computeKalmanGains+0x378>)
    196c:	0006      	movs	r6, r0
    196e:	000f      	movs	r7, r1
    1970:	9810      	ldr	r0, [sp, #64]	; 0x40
    1972:	9911      	ldr	r1, [sp, #68]	; 0x44
    1974:	4b61      	ldr	r3, [pc, #388]	; (1afc <computeKalmanGains+0x37c>)
    1976:	47a8      	blx	r5
    1978:	0002      	movs	r2, r0
    197a:	000b      	movs	r3, r1
    197c:	0030      	movs	r0, r6
    197e:	0039      	movs	r1, r7
    1980:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1982:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1984:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1986:	9026      	str	r0, [sp, #152]	; 0x98
    1988:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    198a:	981c      	ldr	r0, [sp, #112]	; 0x70
    198c:	991d      	ldr	r1, [sp, #116]	; 0x74
    198e:	47a8      	blx	r5
    1990:	9a04      	ldr	r2, [sp, #16]
    1992:	9b05      	ldr	r3, [sp, #20]
    1994:	0006      	movs	r6, r0
    1996:	000f      	movs	r7, r1
    1998:	981e      	ldr	r0, [sp, #120]	; 0x78
    199a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    199c:	47a8      	blx	r5
    199e:	0002      	movs	r2, r0
    19a0:	000b      	movs	r3, r1
    19a2:	0030      	movs	r0, r6
    19a4:	0039      	movs	r1, r7
    19a6:	47a0      	blx	r4
    19a8:	4a53      	ldr	r2, [pc, #332]	; (1af8 <computeKalmanGains+0x378>)
    19aa:	0006      	movs	r6, r0
    19ac:	000f      	movs	r7, r1
    19ae:	9802      	ldr	r0, [sp, #8]
    19b0:	9903      	ldr	r1, [sp, #12]
    19b2:	4b52      	ldr	r3, [pc, #328]	; (1afc <computeKalmanGains+0x37c>)
    19b4:	47a8      	blx	r5
    19b6:	0002      	movs	r2, r0
    19b8:	000b      	movs	r3, r1
    19ba:	0030      	movs	r0, r6
    19bc:	0039      	movs	r1, r7
    19be:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    19c0:	9a06      	ldr	r2, [sp, #24]
    19c2:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    19c4:	9028      	str	r0, [sp, #160]	; 0xa0
    19c6:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    19c8:	9820      	ldr	r0, [sp, #128]	; 0x80
    19ca:	9921      	ldr	r1, [sp, #132]	; 0x84
    19cc:	47a8      	blx	r5
    19ce:	9a08      	ldr	r2, [sp, #32]
    19d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19d2:	0006      	movs	r6, r0
    19d4:	000f      	movs	r7, r1
    19d6:	9822      	ldr	r0, [sp, #136]	; 0x88
    19d8:	9923      	ldr	r1, [sp, #140]	; 0x8c
    19da:	47a8      	blx	r5
    19dc:	0002      	movs	r2, r0
    19de:	000b      	movs	r3, r1
    19e0:	0030      	movs	r0, r6
    19e2:	0039      	movs	r1, r7
    19e4:	47a0      	blx	r4
    19e6:	9a00      	ldr	r2, [sp, #0]
    19e8:	9b01      	ldr	r3, [sp, #4]
    19ea:	0006      	movs	r6, r0
    19ec:	000f      	movs	r7, r1
    19ee:	9824      	ldr	r0, [sp, #144]	; 0x90
    19f0:	9925      	ldr	r1, [sp, #148]	; 0x94
    19f2:	47a8      	blx	r5
    19f4:	0002      	movs	r2, r0
    19f6:	000b      	movs	r3, r1
    19f8:	0030      	movs	r0, r6
    19fa:	0039      	movs	r1, r7
    19fc:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    19fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1a02:	902e      	str	r0, [sp, #184]	; 0xb8
    1a04:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1a06:	9820      	ldr	r0, [sp, #128]	; 0x80
    1a08:	9921      	ldr	r1, [sp, #132]	; 0x84
    1a0a:	47a8      	blx	r5
    1a0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a10:	0006      	movs	r6, r0
    1a12:	000f      	movs	r7, r1
    1a14:	9822      	ldr	r0, [sp, #136]	; 0x88
    1a16:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1a18:	47a8      	blx	r5
    1a1a:	0002      	movs	r2, r0
    1a1c:	000b      	movs	r3, r1
    1a1e:	0030      	movs	r0, r6
    1a20:	0039      	movs	r1, r7
    1a22:	47a0      	blx	r4
    1a24:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1a26:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1a28:	0006      	movs	r6, r0
    1a2a:	000f      	movs	r7, r1
    1a2c:	9824      	ldr	r0, [sp, #144]	; 0x90
    1a2e:	9925      	ldr	r1, [sp, #148]	; 0x94
    1a30:	47a8      	blx	r5
    1a32:	0002      	movs	r2, r0
    1a34:	000b      	movs	r3, r1
    1a36:	0030      	movs	r0, r6
    1a38:	0039      	movs	r1, r7
    1a3a:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1a3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1a40:	9006      	str	r0, [sp, #24]
    1a42:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1a44:	9820      	ldr	r0, [sp, #128]	; 0x80
    1a46:	9921      	ldr	r1, [sp, #132]	; 0x84
    1a48:	47a8      	blx	r5
    1a4a:	9a04      	ldr	r2, [sp, #16]
    1a4c:	9b05      	ldr	r3, [sp, #20]
    1a4e:	0006      	movs	r6, r0
    1a50:	000f      	movs	r7, r1
    1a52:	9822      	ldr	r0, [sp, #136]	; 0x88
    1a54:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1a56:	47a8      	blx	r5
    1a58:	0002      	movs	r2, r0
    1a5a:	000b      	movs	r3, r1
    1a5c:	0030      	movs	r0, r6
    1a5e:	0039      	movs	r1, r7
    1a60:	47a0      	blx	r4
    1a62:	9a02      	ldr	r2, [sp, #8]
    1a64:	9b03      	ldr	r3, [sp, #12]
    1a66:	0006      	movs	r6, r0
    1a68:	000f      	movs	r7, r1
    1a6a:	9824      	ldr	r0, [sp, #144]	; 0x90
    1a6c:	9925      	ldr	r1, [sp, #148]	; 0x94
    1a6e:	47a8      	blx	r5
    1a70:	0002      	movs	r2, r0
    1a72:	000b      	movs	r3, r1
    1a74:	0030      	movs	r0, r6
    1a76:	0039      	movs	r1, r7
    1a78:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1a7a:	4a1f      	ldr	r2, [pc, #124]	; (1af8 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1a7c:	9002      	str	r0, [sp, #8]
    1a7e:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1a80:	9812      	ldr	r0, [sp, #72]	; 0x48
    1a82:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1a84:	4b1d      	ldr	r3, [pc, #116]	; (1afc <computeKalmanGains+0x37c>)
    1a86:	47a8      	blx	r5
    1a88:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1a8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1a8c:	47a0      	blx	r4
    1a8e:	4a1c      	ldr	r2, [pc, #112]	; (1b00 <computeKalmanGains+0x380>)
    1a90:	0006      	movs	r6, r0
    1a92:	000f      	movs	r7, r1
    1a94:	9814      	ldr	r0, [sp, #80]	; 0x50
    1a96:	9915      	ldr	r1, [sp, #84]	; 0x54
    1a98:	4b1a      	ldr	r3, [pc, #104]	; (1b04 <computeKalmanGains+0x384>)
    1a9a:	47a8      	blx	r5
    1a9c:	0002      	movs	r2, r0
    1a9e:	000b      	movs	r3, r1
    1aa0:	0030      	movs	r0, r6
    1aa2:	0039      	movs	r1, r7
    1aa4:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1aa6:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1aa8:	9008      	str	r0, [sp, #32]
    1aaa:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1aac:	9816      	ldr	r0, [sp, #88]	; 0x58
    1aae:	9917      	ldr	r1, [sp, #92]	; 0x5c
    1ab0:	2300      	movs	r3, #0
    1ab2:	47a8      	blx	r5
    1ab4:	0006      	movs	r6, r0
    1ab6:	000f      	movs	r7, r1
    1ab8:	0002      	movs	r2, r0
    1aba:	000b      	movs	r3, r1
    1abc:	9812      	ldr	r0, [sp, #72]	; 0x48
    1abe:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1ac0:	47a0      	blx	r4
    1ac2:	4a0d      	ldr	r2, [pc, #52]	; (1af8 <computeKalmanGains+0x378>)
    1ac4:	9000      	str	r0, [sp, #0]
    1ac6:	9101      	str	r1, [sp, #4]
    1ac8:	9814      	ldr	r0, [sp, #80]	; 0x50
    1aca:	9915      	ldr	r1, [sp, #84]	; 0x54
    1acc:	4b0b      	ldr	r3, [pc, #44]	; (1afc <computeKalmanGains+0x37c>)
    1ace:	47a8      	blx	r5
    1ad0:	0002      	movs	r2, r0
    1ad2:	000b      	movs	r3, r1
    1ad4:	9800      	ldr	r0, [sp, #0]
    1ad6:	9901      	ldr	r1, [sp, #4]
    1ad8:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1ada:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1adc:	9030      	str	r0, [sp, #192]	; 0xc0
    1ade:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1ae0:	9812      	ldr	r0, [sp, #72]	; 0x48
    1ae2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1ae4:	2300      	movs	r3, #0
    1ae6:	47a8      	blx	r5
    1ae8:	0032      	movs	r2, r6
    1aea:	003b      	movs	r3, r7
    1aec:	47a0      	blx	r4
    1aee:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1af0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1af2:	e017      	b.n	1b24 <computeKalmanGains+0x3a4>
    1af4:	20000010 	.word	0x20000010
    1af8:	47ae147b 	.word	0x47ae147b
    1afc:	3f747ae1 	.word	0x3f747ae1
    1b00:	eb1c432d 	.word	0xeb1c432d
    1b04:	3eea36e2 	.word	0x3eea36e2
    1b08:	20000348 	.word	0x20000348
    1b0c:	d2f1a9fc 	.word	0xd2f1a9fc
    1b10:	3f50624d 	.word	0x3f50624d
    1b14:	3ff00000 	.word	0x3ff00000
    1b18:	40220000 	.word	0x40220000
    1b1c:	00006091 	.word	0x00006091
    1b20:	000051f1 	.word	0x000051f1
    1b24:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1b26:	4ad9      	ldr	r2, [pc, #868]	; (1e8c <computeKalmanGains+0x70c>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1b28:	9112      	str	r1, [sp, #72]	; 0x48
    1b2a:	9004      	str	r0, [sp, #16]
    1b2c:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1b2e:	4bd8      	ldr	r3, [pc, #864]	; (1e90 <computeKalmanGains+0x710>)
    1b30:	9826      	ldr	r0, [sp, #152]	; 0x98
    1b32:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1b34:	47a8      	blx	r5
    1b36:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1b38:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1b3a:	47a0      	blx	r4
    1b3c:	4ad5      	ldr	r2, [pc, #852]	; (1e94 <computeKalmanGains+0x714>)
    1b3e:	0006      	movs	r6, r0
    1b40:	000f      	movs	r7, r1
    1b42:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1b44:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1b46:	4bd4      	ldr	r3, [pc, #848]	; (1e98 <computeKalmanGains+0x718>)
    1b48:	47a8      	blx	r5
    1b4a:	0002      	movs	r2, r0
    1b4c:	000b      	movs	r3, r1
    1b4e:	0030      	movs	r0, r6
    1b50:	0039      	movs	r1, r7
    1b52:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1b54:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1b56:	902a      	str	r0, [sp, #168]	; 0xa8
    1b58:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1b5a:	9818      	ldr	r0, [sp, #96]	; 0x60
    1b5c:	9919      	ldr	r1, [sp, #100]	; 0x64
    1b5e:	2300      	movs	r3, #0
    1b60:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1b62:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1b64:	9032      	str	r0, [sp, #200]	; 0xc8
    1b66:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1b68:	9826      	ldr	r0, [sp, #152]	; 0x98
    1b6a:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1b6c:	2300      	movs	r3, #0
    1b6e:	47a8      	blx	r5
    1b70:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1b72:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1b74:	47a0      	blx	r4
    1b76:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1b78:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1b7a:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1b7c:	4ac3      	ldr	r2, [pc, #780]	; (1e8c <computeKalmanGains+0x70c>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1b7e:	902c      	str	r0, [sp, #176]	; 0xb0
    1b80:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1b82:	9806      	ldr	r0, [sp, #24]
    1b84:	9907      	ldr	r1, [sp, #28]
    1b86:	4bc2      	ldr	r3, [pc, #776]	; (1e90 <computeKalmanGains+0x710>)
    1b88:	47a8      	blx	r5
    1b8a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    1b8c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1b8e:	47a0      	blx	r4
    1b90:	4ac0      	ldr	r2, [pc, #768]	; (1e94 <computeKalmanGains+0x714>)
    1b92:	0006      	movs	r6, r0
    1b94:	000f      	movs	r7, r1
    1b96:	9802      	ldr	r0, [sp, #8]
    1b98:	9903      	ldr	r1, [sp, #12]
    1b9a:	4bbf      	ldr	r3, [pc, #764]	; (1e98 <computeKalmanGains+0x718>)
    1b9c:	47a8      	blx	r5
    1b9e:	0002      	movs	r2, r0
    1ba0:	000b      	movs	r3, r1
    1ba2:	0030      	movs	r0, r6
    1ba4:	0039      	movs	r1, r7
    1ba6:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1ba8:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1baa:	9000      	str	r0, [sp, #0]
    1bac:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1bae:	982e      	ldr	r0, [sp, #184]	; 0xb8
    1bb0:	992f      	ldr	r1, [sp, #188]	; 0xbc
    1bb2:	2300      	movs	r3, #0
    1bb4:	47a8      	blx	r5
    1bb6:	0006      	movs	r6, r0
    1bb8:	000f      	movs	r7, r1
    1bba:	0002      	movs	r2, r0
    1bbc:	000b      	movs	r3, r1
    1bbe:	9806      	ldr	r0, [sp, #24]
    1bc0:	9907      	ldr	r1, [sp, #28]
    1bc2:	47a0      	blx	r4
    1bc4:	4ab1      	ldr	r2, [pc, #708]	; (1e8c <computeKalmanGains+0x70c>)
    1bc6:	900a      	str	r0, [sp, #40]	; 0x28
    1bc8:	910b      	str	r1, [sp, #44]	; 0x2c
    1bca:	9802      	ldr	r0, [sp, #8]
    1bcc:	9903      	ldr	r1, [sp, #12]
    1bce:	4bb0      	ldr	r3, [pc, #704]	; (1e90 <computeKalmanGains+0x710>)
    1bd0:	47a8      	blx	r5
    1bd2:	0002      	movs	r2, r0
    1bd4:	000b      	movs	r3, r1
    1bd6:	980a      	ldr	r0, [sp, #40]	; 0x28
    1bd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1bda:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1bdc:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1bde:	9010      	str	r0, [sp, #64]	; 0x40
    1be0:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1be2:	9806      	ldr	r0, [sp, #24]
    1be4:	9907      	ldr	r1, [sp, #28]
    1be6:	2300      	movs	r3, #0
    1be8:	47a8      	blx	r5
    1bea:	0032      	movs	r2, r6
    1bec:	003b      	movs	r3, r7
    1bee:	47a0      	blx	r4
    1bf0:	9a02      	ldr	r2, [sp, #8]
    1bf2:	9b03      	ldr	r3, [sp, #12]
    1bf4:	47a0      	blx	r4
    1bf6:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    1bf8:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    1bfa:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1bfc:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    1bfe:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1c00:	9002      	str	r0, [sp, #8]
    1c02:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1c04:	9808      	ldr	r0, [sp, #32]
    1c06:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c08:	47a0      	blx	r4
    1c0a:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    1c0c:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1c0e:	900a      	str	r0, [sp, #40]	; 0x28
    1c10:	910b      	str	r1, [sp, #44]	; 0x2c
    1c12:	9802      	ldr	r0, [sp, #8]
    1c14:	9903      	ldr	r1, [sp, #12]
    1c16:	47a0      	blx	r4
    1c18:	9a00      	ldr	r2, [sp, #0]
    1c1a:	9b01      	ldr	r3, [sp, #4]
    1c1c:	900c      	str	r0, [sp, #48]	; 0x30
    1c1e:	910d      	str	r1, [sp, #52]	; 0x34
    1c20:	9804      	ldr	r0, [sp, #16]
    1c22:	9916      	ldr	r1, [sp, #88]	; 0x58
    1c24:	47a8      	blx	r5
    1c26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1c28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c2a:	900e      	str	r0, [sp, #56]	; 0x38
    1c2c:	910f      	str	r1, [sp, #60]	; 0x3c
    1c2e:	980a      	ldr	r0, [sp, #40]	; 0x28
    1c30:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1c32:	47a8      	blx	r5
    1c34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1c36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1c38:	4e98      	ldr	r6, [pc, #608]	; (1e9c <computeKalmanGains+0x71c>)
    1c3a:	47b0      	blx	r6

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1c3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1c40:	9006      	str	r0, [sp, #24]
    1c42:	9107      	str	r1, [sp, #28]

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1c44:	9808      	ldr	r0, [sp, #32]
    1c46:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c48:	47a8      	blx	r5
    1c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1c4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1c4e:	47b0      	blx	r6
    1c50:	9a06      	ldr	r2, [sp, #24]
    1c52:	9b07      	ldr	r3, [sp, #28]
    1c54:	4e92      	ldr	r6, [pc, #584]	; (1ea0 <computeKalmanGains+0x720>)
    1c56:	47b0      	blx	r6
    1c58:	9034      	str	r0, [sp, #208]	; 0xd0
    1c5a:	9135      	str	r1, [sp, #212]	; 0xd4
    1c5c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1c5e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1c60:	4990      	ldr	r1, [pc, #576]	; (1ea4 <computeKalmanGains+0x724>)
    1c62:	600a      	str	r2, [r1, #0]
    1c64:	604b      	str	r3, [r1, #4]
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1c66:	9808      	ldr	r0, [sp, #32]
    1c68:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c6a:	2280      	movs	r2, #128	; 0x80
    1c6c:	0612      	lsls	r2, r2, #24
    1c6e:	4694      	mov	ip, r2
    1c70:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1c72:	9a04      	ldr	r2, [sp, #16]
    1c74:	4463      	add	r3, ip
    1c76:	932e      	str	r3, [sp, #184]	; 0xb8
    1c78:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1c7a:	47a8      	blx	r5
    1c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1c7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1c80:	0006      	movs	r6, r0
    1c82:	000f      	movs	r7, r1
    1c84:	9804      	ldr	r0, [sp, #16]
    1c86:	9916      	ldr	r1, [sp, #88]	; 0x58
    1c88:	47a8      	blx	r5
    1c8a:	0002      	movs	r2, r0
    1c8c:	000b      	movs	r3, r1
    1c8e:	0030      	movs	r0, r6
    1c90:	0039      	movs	r1, r7
    1c92:	47a0      	blx	r4
    1c94:	9a06      	ldr	r2, [sp, #24]
    1c96:	9b07      	ldr	r3, [sp, #28]
    1c98:	4e81      	ldr	r6, [pc, #516]	; (1ea0 <computeKalmanGains+0x720>)
    1c9a:	47b0      	blx	r6
    1c9c:	900e      	str	r0, [sp, #56]	; 0x38
    1c9e:	910f      	str	r1, [sp, #60]	; 0x3c
    1ca0:	4980      	ldr	r1, [pc, #512]	; (1ea4 <computeKalmanGains+0x724>)
    1ca2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1ca4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1ca6:	608a      	str	r2, [r1, #8]
    1ca8:	60cb      	str	r3, [r1, #12]
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1caa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1cac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1cae:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1cb0:	992b      	ldr	r1, [sp, #172]	; 0xac
    1cb2:	47a8      	blx	r5
    1cb4:	9a00      	ldr	r2, [sp, #0]
    1cb6:	9b01      	ldr	r3, [sp, #4]
    1cb8:	0006      	movs	r6, r0
    1cba:	000f      	movs	r7, r1
    1cbc:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1cbe:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1cc0:	47a8      	blx	r5
    1cc2:	0002      	movs	r2, r0
    1cc4:	000b      	movs	r3, r1
    1cc6:	0030      	movs	r0, r6
    1cc8:	0039      	movs	r1, r7
    1cca:	4e74      	ldr	r6, [pc, #464]	; (1e9c <computeKalmanGains+0x71c>)
    1ccc:	47b0      	blx	r6
    1cce:	9a06      	ldr	r2, [sp, #24]
    1cd0:	9b07      	ldr	r3, [sp, #28]
    1cd2:	4e73      	ldr	r6, [pc, #460]	; (1ea0 <computeKalmanGains+0x720>)
    1cd4:	47b0      	blx	r6
    1cd6:	0002      	movs	r2, r0
    1cd8:	000b      	movs	r3, r1
    1cda:	9139      	str	r1, [sp, #228]	; 0xe4
    1cdc:	4971      	ldr	r1, [pc, #452]	; (1ea4 <computeKalmanGains+0x724>)
    1cde:	9018      	str	r0, [sp, #96]	; 0x60
    1ce0:	610a      	str	r2, [r1, #16]
    1ce2:	614b      	str	r3, [r1, #20]
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1ce4:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1ce6:	992b      	ldr	r1, [sp, #172]	; 0xac
    1ce8:	9a04      	ldr	r2, [sp, #16]
    1cea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1cec:	47a8      	blx	r5
    1cee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1cf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1cf2:	0006      	movs	r6, r0
    1cf4:	000f      	movs	r7, r1
    1cf6:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1cf8:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1cfa:	47a8      	blx	r5
    1cfc:	0002      	movs	r2, r0
    1cfe:	000b      	movs	r3, r1
    1d00:	0030      	movs	r0, r6
    1d02:	0039      	movs	r1, r7
    1d04:	47a0      	blx	r4
    1d06:	9a06      	ldr	r2, [sp, #24]
    1d08:	9b07      	ldr	r3, [sp, #28]
    1d0a:	4e65      	ldr	r6, [pc, #404]	; (1ea0 <computeKalmanGains+0x720>)
    1d0c:	47b0      	blx	r6
    1d0e:	9012      	str	r0, [sp, #72]	; 0x48
    1d10:	9113      	str	r1, [sp, #76]	; 0x4c
    1d12:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1d14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1d16:	4963      	ldr	r1, [pc, #396]	; (1ea4 <computeKalmanGains+0x724>)
    1d18:	618a      	str	r2, [r1, #24]
    1d1a:	61cb      	str	r3, [r1, #28]
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1d1c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1d20:	9800      	ldr	r0, [sp, #0]
    1d22:	9901      	ldr	r1, [sp, #4]
    1d24:	47a8      	blx	r5
    1d26:	9a02      	ldr	r2, [sp, #8]
    1d28:	9b03      	ldr	r3, [sp, #12]
    1d2a:	0006      	movs	r6, r0
    1d2c:	000f      	movs	r7, r1
    1d2e:	9800      	ldr	r0, [sp, #0]
    1d30:	9901      	ldr	r1, [sp, #4]
    1d32:	47a8      	blx	r5
    1d34:	0002      	movs	r2, r0
    1d36:	000b      	movs	r3, r1
    1d38:	0030      	movs	r0, r6
    1d3a:	0039      	movs	r1, r7
    1d3c:	4e57      	ldr	r6, [pc, #348]	; (1e9c <computeKalmanGains+0x71c>)
    1d3e:	47b0      	blx	r6
    1d40:	9a06      	ldr	r2, [sp, #24]
    1d42:	9b07      	ldr	r3, [sp, #28]
    1d44:	4e56      	ldr	r6, [pc, #344]	; (1ea0 <computeKalmanGains+0x720>)
    1d46:	47b0      	blx	r6
    1d48:	9014      	str	r0, [sp, #80]	; 0x50
    1d4a:	9115      	str	r1, [sp, #84]	; 0x54
    1d4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1d4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1d50:	4954      	ldr	r1, [pc, #336]	; (1ea4 <computeKalmanGains+0x724>)
    1d52:	620a      	str	r2, [r1, #32]
    1d54:	624b      	str	r3, [r1, #36]	; 0x24
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1d56:	9800      	ldr	r0, [sp, #0]
    1d58:	9901      	ldr	r1, [sp, #4]
    1d5a:	9a04      	ldr	r2, [sp, #16]
    1d5c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1d5e:	47a8      	blx	r5
    1d60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d64:	0006      	movs	r6, r0
    1d66:	000f      	movs	r7, r1
    1d68:	9802      	ldr	r0, [sp, #8]
    1d6a:	9903      	ldr	r1, [sp, #12]
    1d6c:	47a8      	blx	r5
    1d6e:	0002      	movs	r2, r0
    1d70:	000b      	movs	r3, r1
    1d72:	0030      	movs	r0, r6
    1d74:	0039      	movs	r1, r7
    1d76:	47a0      	blx	r4
    1d78:	9a06      	ldr	r2, [sp, #24]
    1d7a:	9b07      	ldr	r3, [sp, #28]
    1d7c:	4e48      	ldr	r6, [pc, #288]	; (1ea0 <computeKalmanGains+0x720>)
    1d7e:	47b0      	blx	r6
    1d80:	9036      	str	r0, [sp, #216]	; 0xd8
    1d82:	9137      	str	r1, [sp, #220]	; 0xdc
    1d84:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1d86:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    1d88:	4946      	ldr	r1, [pc, #280]	; (1ea4 <computeKalmanGains+0x724>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1d8a:	4e44      	ldr	r6, [pc, #272]	; (1e9c <computeKalmanGains+0x71c>)
        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1d8c:	628a      	str	r2, [r1, #40]	; 0x28
    1d8e:	62cb      	str	r3, [r1, #44]	; 0x2c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1d90:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1d92:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1d94:	2000      	movs	r0, #0
    1d96:	4944      	ldr	r1, [pc, #272]	; (1ea8 <computeKalmanGains+0x728>)
    1d98:	47b0      	blx	r6
    1d9a:	0002      	movs	r2, r0
    1d9c:	000b      	movs	r3, r1
    1d9e:	900c      	str	r0, [sp, #48]	; 0x30
    1da0:	910d      	str	r1, [sp, #52]	; 0x34
    1da2:	9808      	ldr	r0, [sp, #32]
    1da4:	9909      	ldr	r1, [sp, #36]	; 0x24
    1da6:	47a8      	blx	r5
    1da8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1daa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1dac:	0006      	movs	r6, r0
    1dae:	000f      	movs	r7, r1
    1db0:	9800      	ldr	r0, [sp, #0]
    1db2:	9901      	ldr	r1, [sp, #4]
    1db4:	47a8      	blx	r5
    1db6:	0002      	movs	r2, r0
    1db8:	000b      	movs	r3, r1
    1dba:	0030      	movs	r0, r6
    1dbc:	0039      	movs	r1, r7
    1dbe:	4e37      	ldr	r6, [pc, #220]	; (1e9c <computeKalmanGains+0x71c>)
    1dc0:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1dc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1dc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1dc6:	9006      	str	r0, [sp, #24]
    1dc8:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1dca:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1dcc:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1dce:	47a8      	blx	r5
    1dd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1dd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1dd4:	0006      	movs	r6, r0
    1dd6:	000f      	movs	r7, r1
    1dd8:	9810      	ldr	r0, [sp, #64]	; 0x40
    1dda:	9911      	ldr	r1, [sp, #68]	; 0x44
    1ddc:	47a8      	blx	r5
    1dde:	0002      	movs	r2, r0
    1de0:	000b      	movs	r3, r1
    1de2:	0030      	movs	r0, r6
    1de4:	0039      	movs	r1, r7
    1de6:	4e2d      	ldr	r6, [pc, #180]	; (1e9c <computeKalmanGains+0x71c>)
    1de8:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1dea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1dee:	900a      	str	r0, [sp, #40]	; 0x28
    1df0:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1df2:	9804      	ldr	r0, [sp, #16]
    1df4:	9916      	ldr	r1, [sp, #88]	; 0x58
    1df6:	47a8      	blx	r5
    1df8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1dfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1dfc:	0006      	movs	r6, r0
    1dfe:	000f      	movs	r7, r1
    1e00:	9802      	ldr	r0, [sp, #8]
    1e02:	9903      	ldr	r1, [sp, #12]
    1e04:	47a8      	blx	r5
    1e06:	0002      	movs	r2, r0
    1e08:	000b      	movs	r3, r1
    1e0a:	0030      	movs	r0, r6
    1e0c:	0039      	movs	r1, r7
    1e0e:	4e23      	ldr	r6, [pc, #140]	; (1e9c <computeKalmanGains+0x71c>)
    1e10:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1e12:	2280      	movs	r2, #128	; 0x80
    1e14:	0612      	lsls	r2, r2, #24
    1e16:	4694      	mov	ip, r2
    1e18:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1e1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1e1c:	4463      	add	r3, ip
    1e1e:	932e      	str	r3, [sp, #184]	; 0xb8
    1e20:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1e22:	900c      	str	r0, [sp, #48]	; 0x30
    1e24:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1e26:	9808      	ldr	r0, [sp, #32]
    1e28:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e2a:	47a8      	blx	r5
    1e2c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1e2e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1e30:	47a0      	blx	r4
    1e32:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1e36:	0006      	movs	r6, r0
    1e38:	000f      	movs	r7, r1
    1e3a:	9800      	ldr	r0, [sp, #0]
    1e3c:	9901      	ldr	r1, [sp, #4]
    1e3e:	47a8      	blx	r5
    1e40:	0002      	movs	r2, r0
    1e42:	000b      	movs	r3, r1
    1e44:	0030      	movs	r0, r6
    1e46:	0039      	movs	r1, r7
    1e48:	4e14      	ldr	r6, [pc, #80]	; (1e9c <computeKalmanGains+0x71c>)
    1e4a:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1e4c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1e4e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1e50:	9008      	str	r0, [sp, #32]
    1e52:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1e54:	9826      	ldr	r0, [sp, #152]	; 0x98
    1e56:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1e58:	47a0      	blx	r4
    1e5a:	4a0c      	ldr	r2, [pc, #48]	; (1e8c <computeKalmanGains+0x70c>)
    1e5c:	0006      	movs	r6, r0
    1e5e:	000f      	movs	r7, r1
    1e60:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1e62:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1e64:	4b0a      	ldr	r3, [pc, #40]	; (1e90 <computeKalmanGains+0x710>)
    1e66:	47a8      	blx	r5
    1e68:	0002      	movs	r2, r0
    1e6a:	000b      	movs	r3, r1
    1e6c:	0030      	movs	r0, r6
    1e6e:	0039      	movs	r1, r7
    1e70:	47a0      	blx	r4
    1e72:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1e74:	0006      	movs	r6, r0
    1e76:	000f      	movs	r7, r1
    1e78:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1e7a:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1e7c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1e7e:	47a8      	blx	r5
    1e80:	0002      	movs	r2, r0
    1e82:	000b      	movs	r3, r1
    1e84:	0030      	movs	r0, r6
    1e86:	0039      	movs	r1, r7
    1e88:	47a0      	blx	r4
    1e8a:	e00f      	b.n	1eac <computeKalmanGains+0x72c>
    1e8c:	47ae147b 	.word	0x47ae147b
    1e90:	3f747ae1 	.word	0x3f747ae1
    1e94:	eb1c432d 	.word	0xeb1c432d
    1e98:	3eea36e2 	.word	0x3eea36e2
    1e9c:	00006585 	.word	0x00006585
    1ea0:	00005849 	.word	0x00005849
    1ea4:	20000348 	.word	0x20000348
    1ea8:	3ff00000 	.word	0x3ff00000
    1eac:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1eae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1eb0:	0006      	movs	r6, r0
    1eb2:	000f      	movs	r7, r1
    1eb4:	9810      	ldr	r0, [sp, #64]	; 0x40
    1eb6:	9911      	ldr	r1, [sp, #68]	; 0x44
    1eb8:	47a8      	blx	r5
    1eba:	0002      	movs	r2, r0
    1ebc:	000b      	movs	r3, r1
    1ebe:	0030      	movs	r0, r6
    1ec0:	0039      	movs	r1, r7
    1ec2:	4e50      	ldr	r6, [pc, #320]	; (2004 <STACK_SIZE+0x4>)
    1ec4:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1ec6:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1ec8:	900e      	str	r0, [sp, #56]	; 0x38
    1eca:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1ecc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1ece:	9804      	ldr	r0, [sp, #16]
    1ed0:	9916      	ldr	r1, [sp, #88]	; 0x58
    1ed2:	47a8      	blx	r5
    1ed4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1ed6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1ed8:	47a0      	blx	r4
    1eda:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1edc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1ede:	0006      	movs	r6, r0
    1ee0:	000f      	movs	r7, r1
    1ee2:	9802      	ldr	r0, [sp, #8]
    1ee4:	9903      	ldr	r1, [sp, #12]
    1ee6:	47a8      	blx	r5
    1ee8:	4c46      	ldr	r4, [pc, #280]	; (2004 <STACK_SIZE+0x4>)
    1eea:	0002      	movs	r2, r0
    1eec:	000b      	movs	r3, r1
    1eee:	0030      	movs	r0, r6
    1ef0:	0039      	movs	r1, r7
    1ef2:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1ef4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1ef6:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1ef8:	9004      	str	r0, [sp, #16]
    1efa:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1efc:	2000      	movs	r0, #0
    1efe:	4942      	ldr	r1, [pc, #264]	; (2008 <STACK_SIZE+0x8>)
    1f00:	47a0      	blx	r4
    1f02:	0002      	movs	r2, r0
    1f04:	000b      	movs	r3, r1
    1f06:	9012      	str	r0, [sp, #72]	; 0x48
    1f08:	9113      	str	r1, [sp, #76]	; 0x4c
    1f0a:	9800      	ldr	r0, [sp, #0]
    1f0c:	9901      	ldr	r1, [sp, #4]
    1f0e:	47a8      	blx	r5
    1f10:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1f12:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1f14:	0006      	movs	r6, r0
    1f16:	000f      	movs	r7, r1
    1f18:	9800      	ldr	r0, [sp, #0]
    1f1a:	9901      	ldr	r1, [sp, #4]
    1f1c:	47a8      	blx	r5
    1f1e:	0002      	movs	r2, r0
    1f20:	000b      	movs	r3, r1
    1f22:	0030      	movs	r0, r6
    1f24:	0039      	movs	r1, r7
    1f26:	47a0      	blx	r4
    1f28:	9000      	str	r0, [sp, #0]
    1f2a:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1f2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1f2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1f30:	9810      	ldr	r0, [sp, #64]	; 0x40
    1f32:	9911      	ldr	r1, [sp, #68]	; 0x44
    1f34:	47a8      	blx	r5
    1f36:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1f38:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1f3a:	0006      	movs	r6, r0
    1f3c:	000f      	movs	r7, r1
    1f3e:	9810      	ldr	r0, [sp, #64]	; 0x40
    1f40:	9911      	ldr	r1, [sp, #68]	; 0x44
    1f42:	47a8      	blx	r5
    1f44:	0002      	movs	r2, r0
    1f46:	000b      	movs	r3, r1
    1f48:	0030      	movs	r0, r6
    1f4a:	0039      	movs	r1, r7
    1f4c:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1f4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1f50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1f52:	9010      	str	r0, [sp, #64]	; 0x40
    1f54:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1f56:	9802      	ldr	r0, [sp, #8]
    1f58:	9903      	ldr	r1, [sp, #12]
    1f5a:	47a8      	blx	r5
    1f5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1f5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1f60:	0006      	movs	r6, r0
    1f62:	000f      	movs	r7, r1
    1f64:	9802      	ldr	r0, [sp, #8]
    1f66:	9903      	ldr	r1, [sp, #12]
    1f68:	47a8      	blx	r5
    1f6a:	000b      	movs	r3, r1
    1f6c:	0002      	movs	r2, r0
    1f6e:	0039      	movs	r1, r7
    1f70:	0030      	movs	r0, r6
    1f72:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1f74:	2400      	movs	r4, #0
    1f76:	9b38      	ldr	r3, [sp, #224]	; 0xe0
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1f78:	9002      	str	r0, [sp, #8]
    1f7a:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1f7c:	3301      	adds	r3, #1
    1f7e:	9338      	str	r3, [sp, #224]	; 0xe0
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1f80:	4b22      	ldr	r3, [pc, #136]	; (200c <STACK_SIZE+0xc>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1f82:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1f84:	9326      	str	r3, [sp, #152]	; 0x98
    1f86:	4b1f      	ldr	r3, [pc, #124]	; (2004 <STACK_SIZE+0x4>)
    1f88:	9328      	str	r3, [sp, #160]	; 0xa0
    1f8a:	ab40      	add	r3, sp, #256	; 0x100
    1f8c:	18e5      	adds	r5, r4, r3

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1f8e:	2300      	movs	r3, #0
    1f90:	9516      	str	r5, [sp, #88]	; 0x58
    1f92:	9312      	str	r3, [sp, #72]	; 0x48
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1f94:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1f96:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1f98:	18e3      	adds	r3, r4, r3
    1f9a:	189b      	adds	r3, r3, r2
    1f9c:	681a      	ldr	r2, [r3, #0]
    1f9e:	685b      	ldr	r3, [r3, #4]
    1fa0:	9218      	str	r2, [sp, #96]	; 0x60
    1fa2:	9319      	str	r3, [sp, #100]	; 0x64
    1fa4:	9818      	ldr	r0, [sp, #96]	; 0x60
    1fa6:	9919      	ldr	r1, [sp, #100]	; 0x64
    1fa8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1faa:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1fac:	681e      	ldr	r6, [r3, #0]
    1fae:	685f      	ldr	r7, [r3, #4]
    1fb0:	0032      	movs	r2, r6
    1fb2:	003b      	movs	r3, r7
    1fb4:	47a8      	blx	r5
    1fb6:	0032      	movs	r2, r6
    1fb8:	003b      	movs	r3, r7
    1fba:	4d15      	ldr	r5, [pc, #84]	; (2010 <STACK_SIZE+0x10>)
    1fbc:	47a8      	blx	r5
    1fbe:	4b15      	ldr	r3, [pc, #84]	; (2014 <STACK_SIZE+0x14>)
    1fc0:	4a15      	ldr	r2, [pc, #84]	; (2018 <STACK_SIZE+0x18>)
    1fc2:	4e16      	ldr	r6, [pc, #88]	; (201c <STACK_SIZE+0x1c>)
    1fc4:	47b0      	blx	r6
                    notdone++;
    1fc6:	1e43      	subs	r3, r0, #1
    1fc8:	4198      	sbcs	r0, r3
    1fca:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1fcc:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1fce:	181b      	adds	r3, r3, r0
    1fd0:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1fd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1fd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1fd6:	c10c      	stmia	r1!, {r2, r3}
    1fd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1fda:	9116      	str	r1, [sp, #88]	; 0x58
    1fdc:	3308      	adds	r3, #8
    1fde:	9312      	str	r3, [sp, #72]	; 0x48
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1fe0:	2b10      	cmp	r3, #16
    1fe2:	d1d7      	bne.n	1f94 <computeKalmanGains+0x814>
    1fe4:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1fe6:	2c30      	cmp	r4, #48	; 0x30
    1fe8:	d1cf      	bne.n	1f8a <computeKalmanGains+0x80a>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1fea:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1fec:	2b00      	cmp	r3, #0
    1fee:	d001      	beq.n	1ff4 <computeKalmanGains+0x874>
    1ff0:	f7ff fc2c 	bl	184c <computeKalmanGains+0xcc>
    1ff4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    1ff6:	2b63      	cmp	r3, #99	; 0x63
    1ff8:	dc01      	bgt.n	1ffe <computeKalmanGains+0x87e>
    1ffa:	f7ff fc27 	bl	184c <computeKalmanGains+0xcc>
            continue;
        else
            break;
    }
}
    1ffe:	b04d      	add	sp, #308	; 0x134
    2000:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2002:	46c0      	nop			; (mov r8, r8)
    2004:	00006585 	.word	0x00006585
    2008:	3ff00000 	.word	0x3ff00000
    200c:	20000348 	.word	0x20000348
    2010:	00005849 	.word	0x00005849
    2014:	3ee4f8b5 	.word	0x3ee4f8b5
    2018:	88e368f1 	.word	0x88e368f1
    201c:	00004ec9 	.word	0x00004ec9

00002020 <computeKalmanBaroOnlyGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    baro_phi[0][1]    = dt;
    2020:	4bd7      	ldr	r3, [pc, #860]	; (2380 <computeKalmanBaroOnlyGains+0x360>)
    2022:	48d8      	ldr	r0, [pc, #864]	; (2384 <computeKalmanBaroOnlyGains+0x364>)
    baro_phi[1][2]    = dt;
    2024:	001a      	movs	r2, r3
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    baro_phi[0][1]    = dt;
    2026:	49d8      	ldr	r1, [pc, #864]	; (2388 <computeKalmanBaroOnlyGains+0x368>)
    baro_phi[1][2]    = dt;
    2028:	3288      	adds	r2, #136	; 0x88
        else
            break;
    }
}

void computeKalmanBaroOnlyGains() {
    202a:	b5f0      	push	{r4, r5, r6, r7, lr}

    /*
     Fill in state transition matrix and its transpose
    */
    baro_phi[0][1]    = dt;
    baro_phi[1][2]    = dt;
    202c:	6010      	str	r0, [r2, #0]
    202e:	6051      	str	r1, [r2, #4]
    baro_phi[0][2]    = dt*dt/2.0;
    2030:	2200      	movs	r2, #0
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    baro_phi[0][1]    = dt;
    2032:	6698      	str	r0, [r3, #104]	; 0x68
    2034:	66d9      	str	r1, [r3, #108]	; 0x6c
    baro_phi[1][2]    = dt;
    baro_phi[0][2]    = dt*dt/2.0;
    2036:	48d5      	ldr	r0, [pc, #852]	; (238c <computeKalmanBaroOnlyGains+0x36c>)
    2038:	49d5      	ldr	r1, [pc, #852]	; (2390 <computeKalmanBaroOnlyGains+0x370>)
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
        lastkgain[i] = .001;
    203a:	4cd6      	ldr	r4, [pc, #856]	; (2394 <computeKalmanBaroOnlyGains+0x374>)
    /*
     Fill in state transition matrix and its transpose
    */
    baro_phi[0][1]    = dt;
    baro_phi[1][2]    = dt;
    baro_phi[0][2]    = dt*dt/2.0;
    203c:	6718      	str	r0, [r3, #112]	; 0x70
    203e:	6759      	str	r1, [r3, #116]	; 0x74
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
        lastkgain[i] = .001;
    2040:	4dd5      	ldr	r5, [pc, #852]	; (2398 <computeKalmanBaroOnlyGains+0x378>)
        baro_kgain[i] = 1.0;
    2042:	4fd6      	ldr	r7, [pc, #856]	; (239c <computeKalmanBaroOnlyGains+0x37c>)
        else
            break;
    }
}

void computeKalmanBaroOnlyGains() {
    2044:	b0c5      	sub	sp, #276	; 0x114
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
        lastkgain[i] = .001;
        baro_kgain[i] = 1.0;
    2046:	2000      	movs	r0, #0
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
        lastkgain[i] = .001;
    2048:	a93e      	add	r1, sp, #248	; 0xf8
    204a:	1856      	adds	r6, r2, r1
        baro_kgain[i] = 1.0;
    204c:	49d4      	ldr	r1, [pc, #848]	; (23a0 <computeKalmanBaroOnlyGains+0x380>)
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
        lastkgain[i] = .001;
    204e:	6034      	str	r4, [r6, #0]
    2050:	6075      	str	r5, [r6, #4]
        baro_kgain[i] = 1.0;
    2052:	19d6      	adds	r6, r2, r7
    2054:	3208      	adds	r2, #8
    2056:	6030      	str	r0, [r6, #0]
    2058:	6071      	str	r1, [r6, #4]
    baro_phi[0][2]    = dt*dt/2.0;
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
    205a:	2a18      	cmp	r2, #24
    205c:	d1f3      	bne.n	2046 <computeKalmanBaroOnlyGains+0x26>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    205e:	6819      	ldr	r1, [r3, #0]
    2060:	685a      	ldr	r2, [r3, #4]
    2062:	9108      	str	r1, [sp, #32]
    2064:	9209      	str	r2, [sp, #36]	; 0x24
    2066:	6899      	ldr	r1, [r3, #8]
    2068:	68da      	ldr	r2, [r3, #12]
    206a:	910a      	str	r1, [sp, #40]	; 0x28
    206c:	920b      	str	r2, [sp, #44]	; 0x2c
    206e:	6919      	ldr	r1, [r3, #16]
    2070:	695a      	ldr	r2, [r3, #20]
    2072:	910c      	str	r1, [sp, #48]	; 0x30
    2074:	920d      	str	r2, [sp, #52]	; 0x34
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    2076:	6999      	ldr	r1, [r3, #24]
    2078:	69da      	ldr	r2, [r3, #28]
    207a:	910e      	str	r1, [sp, #56]	; 0x38
    207c:	920f      	str	r2, [sp, #60]	; 0x3c
    207e:	6a19      	ldr	r1, [r3, #32]
    2080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2082:	9110      	str	r1, [sp, #64]	; 0x40
    2084:	9211      	str	r2, [sp, #68]	; 0x44
    2086:	6a99      	ldr	r1, [r3, #40]	; 0x28
    2088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    208a:	9112      	str	r1, [sp, #72]	; 0x48
    208c:	9213      	str	r2, [sp, #76]	; 0x4c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    208e:	6b19      	ldr	r1, [r3, #48]	; 0x30
    2090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    2092:	9114      	str	r1, [sp, #80]	; 0x50
    2094:	9215      	str	r2, [sp, #84]	; 0x54
    2096:	6b99      	ldr	r1, [r3, #56]	; 0x38
    2098:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    209a:	9116      	str	r1, [sp, #88]	; 0x58
    209c:	9217      	str	r2, [sp, #92]	; 0x5c
    209e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    20a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    20a2:	9118      	str	r1, [sp, #96]	; 0x60
    20a4:	9219      	str	r2, [sp, #100]	; 0x64
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[0][0] = pestp[0][0] + model_variance;
    20a6:	6c99      	ldr	r1, [r3, #72]	; 0x48
    20a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);
    20aa:	6d5c      	ldr	r4, [r3, #84]	; 0x54
    20ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    20ae:	933c      	str	r3, [sp, #240]	; 0xf0
    20b0:	943d      	str	r4, [sp, #244]	; 0xf4
    20b2:	2300      	movs	r3, #0
    20b4:	4cbb      	ldr	r4, [pc, #748]	; (23a4 <computeKalmanBaroOnlyGains+0x384>)
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[0][0] = pestp[0][0] + model_variance;
    20b6:	913a      	str	r1, [sp, #232]	; 0xe8
    20b8:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);
    20ba:	9304      	str	r3, [sp, #16]
    20bc:	9405      	str	r4, [sp, #20]
    20be:	2300      	movs	r3, #0
    20c0:	2400      	movs	r4, #0
    20c2:	9302      	str	r3, [sp, #8]
    20c4:	9403      	str	r4, [sp, #12]
    20c6:	9300      	str	r3, [sp, #0]
    20c8:	9401      	str	r4, [sp, #4]
    20ca:	9306      	str	r3, [sp, #24]
    20cc:	9407      	str	r4, [sp, #28]
    20ce:	2300      	movs	r3, #0
    20d0:	4cb4      	ldr	r4, [pc, #720]	; (23a4 <computeKalmanBaroOnlyGains+0x384>)
    20d2:	9322      	str	r3, [sp, #136]	; 0x88
    20d4:	9423      	str	r4, [sp, #140]	; 0x8c
    20d6:	2300      	movs	r3, #0
    20d8:	2400      	movs	r4, #0
    20da:	9320      	str	r3, [sp, #128]	; 0x80
    20dc:	9421      	str	r4, [sp, #132]	; 0x84
    20de:	931e      	str	r3, [sp, #120]	; 0x78
    20e0:	941f      	str	r4, [sp, #124]	; 0x7c
    20e2:	931c      	str	r3, [sp, #112]	; 0x70
    20e4:	941d      	str	r4, [sp, #116]	; 0x74
    20e6:	2480      	movs	r4, #128	; 0x80
    20e8:	2300      	movs	r3, #0
    20ea:	05e4      	lsls	r4, r4, #23
    20ec:	931a      	str	r3, [sp, #104]	; 0x68
    20ee:	941b      	str	r4, [sp, #108]	; 0x6c
    20f0:	2300      	movs	r3, #0
    20f2:	9327      	str	r3, [sp, #156]	; 0x9c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    20f4:	4cac      	ldr	r4, [pc, #688]	; (23a8 <computeKalmanBaroOnlyGains+0x388>)
    20f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    20f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    20fa:	9808      	ldr	r0, [sp, #32]
    20fc:	9909      	ldr	r1, [sp, #36]	; 0x24
    20fe:	47a0      	blx	r4
    2100:	9a20      	ldr	r2, [sp, #128]	; 0x80
    2102:	9b21      	ldr	r3, [sp, #132]	; 0x84
    2104:	0006      	movs	r6, r0
    2106:	000f      	movs	r7, r1
    2108:	980a      	ldr	r0, [sp, #40]	; 0x28
    210a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    210c:	47a0      	blx	r4
    210e:	4da7      	ldr	r5, [pc, #668]	; (23ac <computeKalmanBaroOnlyGains+0x38c>)
    2110:	0002      	movs	r2, r0
    2112:	000b      	movs	r3, r1
    2114:	0030      	movs	r0, r6
    2116:	0039      	movs	r1, r7
    2118:	47a8      	blx	r5
    211a:	9a00      	ldr	r2, [sp, #0]
    211c:	9b01      	ldr	r3, [sp, #4]
    211e:	0006      	movs	r6, r0
    2120:	000f      	movs	r7, r1
    2122:	980c      	ldr	r0, [sp, #48]	; 0x30
    2124:	990d      	ldr	r1, [sp, #52]	; 0x34
    2126:	47a0      	blx	r4
    2128:	0002      	movs	r2, r0
    212a:	000b      	movs	r3, r1
    212c:	0030      	movs	r0, r6
    212e:	0039      	movs	r1, r7
    2130:	47a8      	blx	r5
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    2132:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    2134:	9b1d      	ldr	r3, [sp, #116]	; 0x74

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    2136:	9024      	str	r0, [sp, #144]	; 0x90
    2138:	9125      	str	r1, [sp, #148]	; 0x94
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    213a:	9808      	ldr	r0, [sp, #32]
    213c:	9909      	ldr	r1, [sp, #36]	; 0x24
    213e:	47a0      	blx	r4
    2140:	9a22      	ldr	r2, [sp, #136]	; 0x88
    2142:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2144:	0006      	movs	r6, r0
    2146:	000f      	movs	r7, r1
    2148:	980a      	ldr	r0, [sp, #40]	; 0x28
    214a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    214c:	47a0      	blx	r4
    214e:	0002      	movs	r2, r0
    2150:	000b      	movs	r3, r1
    2152:	0030      	movs	r0, r6
    2154:	0039      	movs	r1, r7
    2156:	47a8      	blx	r5
    2158:	9a02      	ldr	r2, [sp, #8]
    215a:	9b03      	ldr	r3, [sp, #12]
    215c:	0006      	movs	r6, r0
    215e:	000f      	movs	r7, r1
    2160:	980c      	ldr	r0, [sp, #48]	; 0x30
    2162:	990d      	ldr	r1, [sp, #52]	; 0x34
    2164:	47a0      	blx	r4
    2166:	0002      	movs	r2, r0
    2168:	000b      	movs	r3, r1
    216a:	0030      	movs	r0, r6
    216c:	0039      	movs	r1, r7
    216e:	47a8      	blx	r5
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    2170:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    2172:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    2174:	9028      	str	r0, [sp, #160]	; 0xa0
    2176:	9129      	str	r1, [sp, #164]	; 0xa4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    2178:	9808      	ldr	r0, [sp, #32]
    217a:	9909      	ldr	r1, [sp, #36]	; 0x24
    217c:	47a0      	blx	r4
    217e:	9a06      	ldr	r2, [sp, #24]
    2180:	9b07      	ldr	r3, [sp, #28]
    2182:	0006      	movs	r6, r0
    2184:	000f      	movs	r7, r1
    2186:	980a      	ldr	r0, [sp, #40]	; 0x28
    2188:	990b      	ldr	r1, [sp, #44]	; 0x2c
    218a:	47a0      	blx	r4
    218c:	0002      	movs	r2, r0
    218e:	000b      	movs	r3, r1
    2190:	0030      	movs	r0, r6
    2192:	0039      	movs	r1, r7
    2194:	47a8      	blx	r5
    2196:	9a04      	ldr	r2, [sp, #16]
    2198:	9b05      	ldr	r3, [sp, #20]
    219a:	0006      	movs	r6, r0
    219c:	000f      	movs	r7, r1
    219e:	980c      	ldr	r0, [sp, #48]	; 0x30
    21a0:	990d      	ldr	r1, [sp, #52]	; 0x34
    21a2:	47a0      	blx	r4
    21a4:	0002      	movs	r2, r0
    21a6:	000b      	movs	r3, r1
    21a8:	0030      	movs	r0, r6
    21aa:	0039      	movs	r1, r7
    21ac:	47a8      	blx	r5
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    21ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    21b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    21b2:	902a      	str	r0, [sp, #168]	; 0xa8
    21b4:	912b      	str	r1, [sp, #172]	; 0xac
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    21b6:	980e      	ldr	r0, [sp, #56]	; 0x38
    21b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    21ba:	47a0      	blx	r4
    21bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
    21be:	9b21      	ldr	r3, [sp, #132]	; 0x84
    21c0:	0006      	movs	r6, r0
    21c2:	000f      	movs	r7, r1
    21c4:	9810      	ldr	r0, [sp, #64]	; 0x40
    21c6:	9911      	ldr	r1, [sp, #68]	; 0x44
    21c8:	47a0      	blx	r4
    21ca:	0002      	movs	r2, r0
    21cc:	000b      	movs	r3, r1
    21ce:	0030      	movs	r0, r6
    21d0:	0039      	movs	r1, r7
    21d2:	47a8      	blx	r5
    21d4:	9a00      	ldr	r2, [sp, #0]
    21d6:	9b01      	ldr	r3, [sp, #4]
    21d8:	0006      	movs	r6, r0
    21da:	000f      	movs	r7, r1
    21dc:	9812      	ldr	r0, [sp, #72]	; 0x48
    21de:	9913      	ldr	r1, [sp, #76]	; 0x4c
    21e0:	47a0      	blx	r4
    21e2:	0002      	movs	r2, r0
    21e4:	000b      	movs	r3, r1
    21e6:	0030      	movs	r0, r6
    21e8:	0039      	movs	r1, r7
    21ea:	47a8      	blx	r5
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    21ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    21ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    21f0:	9034      	str	r0, [sp, #208]	; 0xd0
    21f2:	9135      	str	r1, [sp, #212]	; 0xd4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    21f4:	980e      	ldr	r0, [sp, #56]	; 0x38
    21f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    21f8:	47a0      	blx	r4
    21fa:	9a22      	ldr	r2, [sp, #136]	; 0x88
    21fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    21fe:	0006      	movs	r6, r0
    2200:	000f      	movs	r7, r1
    2202:	9810      	ldr	r0, [sp, #64]	; 0x40
    2204:	9911      	ldr	r1, [sp, #68]	; 0x44
    2206:	47a0      	blx	r4
    2208:	0002      	movs	r2, r0
    220a:	000b      	movs	r3, r1
    220c:	0030      	movs	r0, r6
    220e:	0039      	movs	r1, r7
    2210:	47a8      	blx	r5
    2212:	9a02      	ldr	r2, [sp, #8]
    2214:	9b03      	ldr	r3, [sp, #12]
    2216:	0006      	movs	r6, r0
    2218:	000f      	movs	r7, r1
    221a:	9812      	ldr	r0, [sp, #72]	; 0x48
    221c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    221e:	47a0      	blx	r4
    2220:	0002      	movs	r2, r0
    2222:	000b      	movs	r3, r1
    2224:	0030      	movs	r0, r6
    2226:	0039      	movs	r1, r7
    2228:	47a8      	blx	r5
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    222a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    222c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    222e:	902c      	str	r0, [sp, #176]	; 0xb0
    2230:	912d      	str	r1, [sp, #180]	; 0xb4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    2232:	980e      	ldr	r0, [sp, #56]	; 0x38
    2234:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2236:	47a0      	blx	r4
    2238:	9a06      	ldr	r2, [sp, #24]
    223a:	9b07      	ldr	r3, [sp, #28]
    223c:	0006      	movs	r6, r0
    223e:	000f      	movs	r7, r1
    2240:	9810      	ldr	r0, [sp, #64]	; 0x40
    2242:	9911      	ldr	r1, [sp, #68]	; 0x44
    2244:	47a0      	blx	r4
    2246:	0002      	movs	r2, r0
    2248:	000b      	movs	r3, r1
    224a:	0030      	movs	r0, r6
    224c:	0039      	movs	r1, r7
    224e:	47a8      	blx	r5
    2250:	9a04      	ldr	r2, [sp, #16]
    2252:	9b05      	ldr	r3, [sp, #20]
    2254:	0006      	movs	r6, r0
    2256:	000f      	movs	r7, r1
    2258:	9812      	ldr	r0, [sp, #72]	; 0x48
    225a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    225c:	47a0      	blx	r4
    225e:	0002      	movs	r2, r0
    2260:	000b      	movs	r3, r1
    2262:	0030      	movs	r0, r6
    2264:	0039      	movs	r1, r7
    2266:	47a8      	blx	r5
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    2268:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    226a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    226c:	902e      	str	r0, [sp, #184]	; 0xb8
    226e:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    2270:	9814      	ldr	r0, [sp, #80]	; 0x50
    2272:	9915      	ldr	r1, [sp, #84]	; 0x54
    2274:	47a0      	blx	r4
    2276:	9a20      	ldr	r2, [sp, #128]	; 0x80
    2278:	9b21      	ldr	r3, [sp, #132]	; 0x84
    227a:	0006      	movs	r6, r0
    227c:	000f      	movs	r7, r1
    227e:	9816      	ldr	r0, [sp, #88]	; 0x58
    2280:	9917      	ldr	r1, [sp, #92]	; 0x5c
    2282:	47a0      	blx	r4
    2284:	0002      	movs	r2, r0
    2286:	000b      	movs	r3, r1
    2288:	0030      	movs	r0, r6
    228a:	0039      	movs	r1, r7
    228c:	47a8      	blx	r5
    228e:	9a00      	ldr	r2, [sp, #0]
    2290:	9b01      	ldr	r3, [sp, #4]
    2292:	0006      	movs	r6, r0
    2294:	000f      	movs	r7, r1
    2296:	9818      	ldr	r0, [sp, #96]	; 0x60
    2298:	9919      	ldr	r1, [sp, #100]	; 0x64
    229a:	47a0      	blx	r4
    229c:	0002      	movs	r2, r0
    229e:	000b      	movs	r3, r1
    22a0:	0030      	movs	r0, r6
    22a2:	0039      	movs	r1, r7
    22a4:	47a8      	blx	r5
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    22a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    22a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    22aa:	9000      	str	r0, [sp, #0]
    22ac:	9101      	str	r1, [sp, #4]
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    22ae:	9814      	ldr	r0, [sp, #80]	; 0x50
    22b0:	9915      	ldr	r1, [sp, #84]	; 0x54
    22b2:	47a0      	blx	r4
    22b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
    22b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    22b8:	0006      	movs	r6, r0
    22ba:	000f      	movs	r7, r1
    22bc:	9816      	ldr	r0, [sp, #88]	; 0x58
    22be:	9917      	ldr	r1, [sp, #92]	; 0x5c
    22c0:	47a0      	blx	r4
    22c2:	0002      	movs	r2, r0
    22c4:	000b      	movs	r3, r1
    22c6:	0030      	movs	r0, r6
    22c8:	0039      	movs	r1, r7
    22ca:	47a8      	blx	r5
    22cc:	9a02      	ldr	r2, [sp, #8]
    22ce:	9b03      	ldr	r3, [sp, #12]
    22d0:	0006      	movs	r6, r0
    22d2:	000f      	movs	r7, r1
    22d4:	9818      	ldr	r0, [sp, #96]	; 0x60
    22d6:	9919      	ldr	r1, [sp, #100]	; 0x64
    22d8:	47a0      	blx	r4
    22da:	0002      	movs	r2, r0
    22dc:	000b      	movs	r3, r1
    22de:	0030      	movs	r0, r6
    22e0:	0039      	movs	r1, r7
    22e2:	47a8      	blx	r5
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    22e4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    22e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    22e8:	9030      	str	r0, [sp, #192]	; 0xc0
    22ea:	9131      	str	r1, [sp, #196]	; 0xc4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    22ec:	9814      	ldr	r0, [sp, #80]	; 0x50
    22ee:	9915      	ldr	r1, [sp, #84]	; 0x54
    22f0:	47a0      	blx	r4
    22f2:	9a06      	ldr	r2, [sp, #24]
    22f4:	9b07      	ldr	r3, [sp, #28]
    22f6:	0006      	movs	r6, r0
    22f8:	000f      	movs	r7, r1
    22fa:	9816      	ldr	r0, [sp, #88]	; 0x58
    22fc:	9917      	ldr	r1, [sp, #92]	; 0x5c
    22fe:	47a0      	blx	r4
    2300:	0002      	movs	r2, r0
    2302:	000b      	movs	r3, r1
    2304:	0030      	movs	r0, r6
    2306:	0039      	movs	r1, r7
    2308:	47a8      	blx	r5
    230a:	9a04      	ldr	r2, [sp, #16]
    230c:	9b05      	ldr	r3, [sp, #20]
    230e:	0006      	movs	r6, r0
    2310:	000f      	movs	r7, r1
    2312:	9818      	ldr	r0, [sp, #96]	; 0x60
    2314:	9919      	ldr	r1, [sp, #100]	; 0x64
    2316:	47a0      	blx	r4
    2318:	0002      	movs	r2, r0
    231a:	000b      	movs	r3, r1
    231c:	0030      	movs	r0, r6
    231e:	0039      	movs	r1, r7
    2320:	47a8      	blx	r5

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    2322:	2200      	movs	r2, #0
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    2324:	9032      	str	r0, [sp, #200]	; 0xc8
    2326:	9133      	str	r1, [sp, #204]	; 0xcc

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    2328:	9824      	ldr	r0, [sp, #144]	; 0x90
    232a:	9925      	ldr	r1, [sp, #148]	; 0x94
    232c:	2300      	movs	r3, #0
    232e:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    2330:	4a14      	ldr	r2, [pc, #80]	; (2384 <computeKalmanBaroOnlyGains+0x364>)
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    2332:	9036      	str	r0, [sp, #216]	; 0xd8
    2334:	9137      	str	r1, [sp, #220]	; 0xdc
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    2336:	982c      	ldr	r0, [sp, #176]	; 0xb0
    2338:	992d      	ldr	r1, [sp, #180]	; 0xb4
    233a:	4b13      	ldr	r3, [pc, #76]	; (2388 <computeKalmanBaroOnlyGains+0x368>)
    233c:	47a0      	blx	r4
    233e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    2340:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    2342:	47a8      	blx	r5
    2344:	4a11      	ldr	r2, [pc, #68]	; (238c <computeKalmanBaroOnlyGains+0x36c>)
    2346:	0006      	movs	r6, r0
    2348:	000f      	movs	r7, r1
    234a:	982e      	ldr	r0, [sp, #184]	; 0xb8
    234c:	992f      	ldr	r1, [sp, #188]	; 0xbc
    234e:	4b10      	ldr	r3, [pc, #64]	; (2390 <computeKalmanBaroOnlyGains+0x370>)
    2350:	47a0      	blx	r4
    2352:	0002      	movs	r2, r0
    2354:	000b      	movs	r3, r1
    2356:	0030      	movs	r0, r6
    2358:	0039      	movs	r1, r7
    235a:	47a8      	blx	r5
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    235c:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    235e:	9002      	str	r0, [sp, #8]
    2360:	9103      	str	r1, [sp, #12]
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    2362:	9834      	ldr	r0, [sp, #208]	; 0xd0
    2364:	9935      	ldr	r1, [sp, #212]	; 0xd4
    2366:	2300      	movs	r3, #0
    2368:	47a0      	blx	r4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    236a:	4a06      	ldr	r2, [pc, #24]	; (2384 <computeKalmanBaroOnlyGains+0x364>)

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    236c:	9034      	str	r0, [sp, #208]	; 0xd0
    236e:	9135      	str	r1, [sp, #212]	; 0xd4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    2370:	9830      	ldr	r0, [sp, #192]	; 0xc0
    2372:	9931      	ldr	r1, [sp, #196]	; 0xc4
    2374:	4b04      	ldr	r3, [pc, #16]	; (2388 <computeKalmanBaroOnlyGains+0x368>)
    2376:	47a0      	blx	r4
    2378:	9a00      	ldr	r2, [sp, #0]
    237a:	9b01      	ldr	r3, [sp, #4]
    237c:	47a8      	blx	r5
    237e:	e017      	b.n	23b0 <computeKalmanBaroOnlyGains+0x390>
    2380:	20000010 	.word	0x20000010
    2384:	47ae147b 	.word	0x47ae147b
    2388:	3f747ae1 	.word	0x3f747ae1
    238c:	eb1c432d 	.word	0xeb1c432d
    2390:	3eea36e2 	.word	0x3eea36e2
    2394:	d2f1a9fc 	.word	0xd2f1a9fc
    2398:	3f50624d 	.word	0x3f50624d
    239c:	20000310 	.word	0x20000310
    23a0:	3ff00000 	.word	0x3ff00000
    23a4:	40220000 	.word	0x40220000
    23a8:	00006091 	.word	0x00006091
    23ac:	000051f1 	.word	0x000051f1
    23b0:	4ad6      	ldr	r2, [pc, #856]	; (270c <computeKalmanBaroOnlyGains+0x6ec>)
    23b2:	0006      	movs	r6, r0
    23b4:	000f      	movs	r7, r1
    23b6:	9832      	ldr	r0, [sp, #200]	; 0xc8
    23b8:	9933      	ldr	r1, [sp, #204]	; 0xcc
    23ba:	4bd5      	ldr	r3, [pc, #852]	; (2710 <computeKalmanBaroOnlyGains+0x6f0>)
    23bc:	47a0      	blx	r4
    23be:	0002      	movs	r2, r0
    23c0:	000b      	movs	r3, r1
    23c2:	0030      	movs	r0, r6
    23c4:	0039      	movs	r1, r7
    23c6:	47a8      	blx	r5
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    23c8:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    23ca:	9004      	str	r0, [sp, #16]
    23cc:	9105      	str	r1, [sp, #20]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    23ce:	9800      	ldr	r0, [sp, #0]
    23d0:	9901      	ldr	r1, [sp, #4]
    23d2:	2300      	movs	r3, #0
    23d4:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[0][0] = pestp[0][0] + model_variance;
    23d6:	4acf      	ldr	r2, [pc, #828]	; (2714 <computeKalmanBaroOnlyGains+0x6f4>)
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    23d8:	9038      	str	r0, [sp, #224]	; 0xe0
    23da:	9139      	str	r1, [sp, #228]	; 0xe4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[0][0] = pestp[0][0] + model_variance;
    23dc:	9828      	ldr	r0, [sp, #160]	; 0xa0
    23de:	9929      	ldr	r1, [sp, #164]	; 0xa4
    23e0:	4bcd      	ldr	r3, [pc, #820]	; (2718 <computeKalmanBaroOnlyGains+0x6f8>)
    23e2:	47a0      	blx	r4
    23e4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    23e6:	9b25      	ldr	r3, [sp, #148]	; 0x94
    23e8:	47a8      	blx	r5
    23ea:	4ac8      	ldr	r2, [pc, #800]	; (270c <computeKalmanBaroOnlyGains+0x6ec>)
    23ec:	0006      	movs	r6, r0
    23ee:	000f      	movs	r7, r1
    23f0:	982a      	ldr	r0, [sp, #168]	; 0xa8
    23f2:	992b      	ldr	r1, [sp, #172]	; 0xac
    23f4:	4bc6      	ldr	r3, [pc, #792]	; (2710 <computeKalmanBaroOnlyGains+0x6f0>)
    23f6:	47a0      	blx	r4
    23f8:	0002      	movs	r2, r0
    23fa:	000b      	movs	r3, r1
    23fc:	0030      	movs	r0, r6
    23fe:	0039      	movs	r1, r7
    2400:	47a8      	blx	r5
    2402:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    2404:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    2406:	47a8      	blx	r5
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);
    2408:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    240a:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[0][0] = pestp[0][0] + model_variance;
    240c:	9000      	str	r0, [sp, #0]
    240e:	9101      	str	r1, [sp, #4]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);
    2410:	47a8      	blx	r5

        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
                         phi[0][1] * pestp[1][0] +
                         phi[0][2] * pestp[2][0] )/ det;
    2412:	9a00      	ldr	r2, [sp, #0]
    2414:	9b01      	ldr	r3, [sp, #4]

        pestp[0][0] = pestp[0][0] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);
    2416:	901a      	str	r0, [sp, #104]	; 0x68
    2418:	911b      	str	r1, [sp, #108]	; 0x6c

        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
                         phi[0][1] * pestp[1][0] +
                         phi[0][2] * pestp[2][0] )/ det;
    241a:	9808      	ldr	r0, [sp, #32]
    241c:	9909      	ldr	r1, [sp, #36]	; 0x24
    241e:	47a0      	blx	r4
    2420:	9a02      	ldr	r2, [sp, #8]
    2422:	9b03      	ldr	r3, [sp, #12]
    2424:	0006      	movs	r6, r0
    2426:	000f      	movs	r7, r1
    2428:	980a      	ldr	r0, [sp, #40]	; 0x28
    242a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    242c:	47a0      	blx	r4
    242e:	0002      	movs	r2, r0
    2430:	000b      	movs	r3, r1
    2432:	0030      	movs	r0, r6
    2434:	0039      	movs	r1, r7
    2436:	47a8      	blx	r5
    2438:	9a04      	ldr	r2, [sp, #16]
    243a:	9b05      	ldr	r3, [sp, #20]
    243c:	0006      	movs	r6, r0
    243e:	000f      	movs	r7, r1
    2440:	980c      	ldr	r0, [sp, #48]	; 0x30
    2442:	990d      	ldr	r1, [sp, #52]	; 0x34
    2444:	47a0      	blx	r4
    2446:	0002      	movs	r2, r0
    2448:	000b      	movs	r3, r1
    244a:	0030      	movs	r0, r6
    244c:	0039      	movs	r1, r7
    244e:	47a8      	blx	r5
    2450:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    2452:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    2454:	4eb1      	ldr	r6, [pc, #708]	; (271c <computeKalmanBaroOnlyGains+0x6fc>)
    2456:	47b0      	blx	r6
    2458:	901c      	str	r0, [sp, #112]	; 0x70
    245a:	911d      	str	r1, [sp, #116]	; 0x74
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);

        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
    245c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    245e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2460:	49af      	ldr	r1, [pc, #700]	; (2720 <computeKalmanBaroOnlyGains+0x700>)
    2462:	600a      	str	r2, [r1, #0]
    2464:	604b      	str	r3, [r1, #4]
                         phi[0][1] * pestp[1][0] +
                         phi[0][2] * pestp[2][0] )/ det;
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
                         phi[1][1] * pestp[1][0] +
                         phi[1][2] * pestp[2][0] )/ det;
    2466:	9a00      	ldr	r2, [sp, #0]
    2468:	9b01      	ldr	r3, [sp, #4]
    246a:	980e      	ldr	r0, [sp, #56]	; 0x38
    246c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    246e:	47a0      	blx	r4
    2470:	9a02      	ldr	r2, [sp, #8]
    2472:	9b03      	ldr	r3, [sp, #12]
    2474:	0006      	movs	r6, r0
    2476:	000f      	movs	r7, r1
    2478:	9810      	ldr	r0, [sp, #64]	; 0x40
    247a:	9911      	ldr	r1, [sp, #68]	; 0x44
    247c:	47a0      	blx	r4
    247e:	0002      	movs	r2, r0
    2480:	000b      	movs	r3, r1
    2482:	0030      	movs	r0, r6
    2484:	0039      	movs	r1, r7
    2486:	47a8      	blx	r5
    2488:	9a04      	ldr	r2, [sp, #16]
    248a:	9b05      	ldr	r3, [sp, #20]
    248c:	0006      	movs	r6, r0
    248e:	000f      	movs	r7, r1
    2490:	9812      	ldr	r0, [sp, #72]	; 0x48
    2492:	9913      	ldr	r1, [sp, #76]	; 0x4c
    2494:	47a0      	blx	r4
    2496:	0002      	movs	r2, r0
    2498:	000b      	movs	r3, r1
    249a:	0030      	movs	r0, r6
    249c:	0039      	movs	r1, r7
    249e:	47a8      	blx	r5
    24a0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    24a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    24a4:	4e9d      	ldr	r6, [pc, #628]	; (271c <computeKalmanBaroOnlyGains+0x6fc>)
    24a6:	47b0      	blx	r6
    24a8:	9006      	str	r0, [sp, #24]
    24aa:	9107      	str	r1, [sp, #28]
        det = (pestp[0][0]+altitude_variance);

        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
                         phi[0][1] * pestp[1][0] +
                         phi[0][2] * pestp[2][0] )/ det;
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
    24ac:	9a06      	ldr	r2, [sp, #24]
    24ae:	9b07      	ldr	r3, [sp, #28]
    24b0:	499b      	ldr	r1, [pc, #620]	; (2720 <computeKalmanBaroOnlyGains+0x700>)
    24b2:	608a      	str	r2, [r1, #8]
    24b4:	60cb      	str	r3, [r1, #12]
                         phi[1][1] * pestp[1][0] +
                         phi[1][2] * pestp[2][0] )/ det;
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
                         phi[2][1] * pestp[1][0] +
                         phi[2][2] * pestp[2][0] )/det;
    24b6:	9a00      	ldr	r2, [sp, #0]
    24b8:	9b01      	ldr	r3, [sp, #4]
    24ba:	9814      	ldr	r0, [sp, #80]	; 0x50
    24bc:	9915      	ldr	r1, [sp, #84]	; 0x54
    24be:	47a0      	blx	r4
    24c0:	9a02      	ldr	r2, [sp, #8]
    24c2:	9b03      	ldr	r3, [sp, #12]
    24c4:	0006      	movs	r6, r0
    24c6:	000f      	movs	r7, r1
    24c8:	9816      	ldr	r0, [sp, #88]	; 0x58
    24ca:	9917      	ldr	r1, [sp, #92]	; 0x5c
    24cc:	47a0      	blx	r4
    24ce:	0002      	movs	r2, r0
    24d0:	000b      	movs	r3, r1
    24d2:	0030      	movs	r0, r6
    24d4:	0039      	movs	r1, r7
    24d6:	47a8      	blx	r5
    24d8:	9a04      	ldr	r2, [sp, #16]
    24da:	9b05      	ldr	r3, [sp, #20]
    24dc:	0006      	movs	r6, r0
    24de:	000f      	movs	r7, r1
    24e0:	9818      	ldr	r0, [sp, #96]	; 0x60
    24e2:	9919      	ldr	r1, [sp, #100]	; 0x64
    24e4:	47a0      	blx	r4
    24e6:	0002      	movs	r2, r0
    24e8:	000b      	movs	r3, r1
    24ea:	0030      	movs	r0, r6
    24ec:	0039      	movs	r1, r7
    24ee:	47a8      	blx	r5
    24f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    24f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    24f4:	4e89      	ldr	r6, [pc, #548]	; (271c <computeKalmanBaroOnlyGains+0x6fc>)
    24f6:	47b0      	blx	r6
    24f8:	9024      	str	r0, [sp, #144]	; 0x90
    24fa:	9125      	str	r1, [sp, #148]	; 0x94
                         phi[0][1] * pestp[1][0] +
                         phi[0][2] * pestp[2][0] )/ det;
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
                         phi[1][1] * pestp[1][0] +
                         phi[1][2] * pestp[2][0] )/ det;
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
    24fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
    24fe:	9b25      	ldr	r3, [sp, #148]	; 0x94
    2500:	4987      	ldr	r1, [pc, #540]	; (2720 <computeKalmanBaroOnlyGains+0x700>)
                         phi[2][1] * pestp[1][0] +
                         phi[2][2] * pestp[2][0] )/det;

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
    2502:	4e88      	ldr	r6, [pc, #544]	; (2724 <computeKalmanBaroOnlyGains+0x704>)
                         phi[0][1] * pestp[1][0] +
                         phi[0][2] * pestp[2][0] )/ det;
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
                         phi[1][1] * pestp[1][0] +
                         phi[1][2] * pestp[2][0] )/ det;
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
    2504:	610a      	str	r2, [r1, #16]
    2506:	614b      	str	r3, [r1, #20]
                         phi[2][1] * pestp[1][0] +
                         phi[2][2] * pestp[2][0] )/det;

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
    2508:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    250a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    250c:	2000      	movs	r0, #0
    250e:	4986      	ldr	r1, [pc, #536]	; (2728 <computeKalmanBaroOnlyGains+0x708>)
    2510:	47b0      	blx	r6
    2512:	0006      	movs	r6, r0
    2514:	000f      	movs	r7, r1
    2516:	0002      	movs	r2, r0
    2518:	000b      	movs	r3, r1
    251a:	9800      	ldr	r0, [sp, #0]
    251c:	9901      	ldr	r1, [sp, #4]
    251e:	47a0      	blx	r4
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
    2520:	0032      	movs	r2, r6
    2522:	003b      	movs	r3, r7
                         phi[1][2] * pestp[2][0] )/ det;
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
                         phi[2][1] * pestp[1][0] +
                         phi[2][2] * pestp[2][0] )/det;

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
    2524:	901a      	str	r0, [sp, #104]	; 0x68
    2526:	911b      	str	r1, [sp, #108]	; 0x6c
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
    2528:	9802      	ldr	r0, [sp, #8]
    252a:	9903      	ldr	r1, [sp, #12]
    252c:	47a0      	blx	r4
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
    252e:	0032      	movs	r2, r6
    2530:	003b      	movs	r3, r7
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
                         phi[2][1] * pestp[1][0] +
                         phi[2][2] * pestp[2][0] )/det;

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
    2532:	901c      	str	r0, [sp, #112]	; 0x70
    2534:	911d      	str	r1, [sp, #116]	; 0x74
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
    2536:	9804      	ldr	r0, [sp, #16]
    2538:	9905      	ldr	r1, [sp, #20]
    253a:	47a0      	blx	r4
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
    253c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    253e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
                         phi[2][1] * pestp[1][0] +
                         phi[2][2] * pestp[2][0] )/det;

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
    2540:	901e      	str	r0, [sp, #120]	; 0x78
    2542:	911f      	str	r1, [sp, #124]	; 0x7c
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
    2544:	9828      	ldr	r0, [sp, #160]	; 0xa0
    2546:	9929      	ldr	r1, [sp, #164]	; 0xa4
    2548:	47a8      	blx	r5
    254a:	4a72      	ldr	r2, [pc, #456]	; (2714 <computeKalmanBaroOnlyGains+0x6f4>)
    254c:	0006      	movs	r6, r0
    254e:	000f      	movs	r7, r1
    2550:	982a      	ldr	r0, [sp, #168]	; 0xa8
    2552:	992b      	ldr	r1, [sp, #172]	; 0xac
    2554:	4b70      	ldr	r3, [pc, #448]	; (2718 <computeKalmanBaroOnlyGains+0x6f8>)
    2556:	47a0      	blx	r4
    2558:	0002      	movs	r2, r0
    255a:	000b      	movs	r3, r1
    255c:	0030      	movs	r0, r6
    255e:	0039      	movs	r1, r7
    2560:	47a8      	blx	r5
    2562:	9a06      	ldr	r2, [sp, #24]
    2564:	9b07      	ldr	r3, [sp, #28]
    2566:	0006      	movs	r6, r0
    2568:	000f      	movs	r7, r1
    256a:	9800      	ldr	r0, [sp, #0]
    256c:	9901      	ldr	r1, [sp, #4]
    256e:	47a0      	blx	r4
    2570:	0002      	movs	r2, r0
    2572:	000b      	movs	r3, r1
    2574:	0030      	movs	r0, r6
    2576:	0039      	movs	r1, r7
    2578:	4e6a      	ldr	r6, [pc, #424]	; (2724 <computeKalmanBaroOnlyGains+0x704>)
    257a:	47b0      	blx	r6
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
    257c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    257e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
                         phi[2][2] * pestp[2][0] )/det;

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
    2580:	9020      	str	r0, [sp, #128]	; 0x80
    2582:	9121      	str	r1, [sp, #132]	; 0x84
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
    2584:	982c      	ldr	r0, [sp, #176]	; 0xb0
    2586:	992d      	ldr	r1, [sp, #180]	; 0xb4
    2588:	47a8      	blx	r5
    258a:	4a62      	ldr	r2, [pc, #392]	; (2714 <computeKalmanBaroOnlyGains+0x6f4>)
    258c:	0006      	movs	r6, r0
    258e:	000f      	movs	r7, r1
    2590:	982e      	ldr	r0, [sp, #184]	; 0xb8
    2592:	992f      	ldr	r1, [sp, #188]	; 0xbc
    2594:	4b60      	ldr	r3, [pc, #384]	; (2718 <computeKalmanBaroOnlyGains+0x6f8>)
    2596:	47a0      	blx	r4
    2598:	0002      	movs	r2, r0
    259a:	000b      	movs	r3, r1
    259c:	0030      	movs	r0, r6
    259e:	0039      	movs	r1, r7
    25a0:	47a8      	blx	r5
    25a2:	9a06      	ldr	r2, [sp, #24]
    25a4:	9b07      	ldr	r3, [sp, #28]
    25a6:	0006      	movs	r6, r0
    25a8:	000f      	movs	r7, r1
    25aa:	9802      	ldr	r0, [sp, #8]
    25ac:	9903      	ldr	r1, [sp, #12]
    25ae:	47a0      	blx	r4
    25b0:	0002      	movs	r2, r0
    25b2:	000b      	movs	r3, r1
    25b4:	0030      	movs	r0, r6
    25b6:	0039      	movs	r1, r7
    25b8:	4e5a      	ldr	r6, [pc, #360]	; (2724 <computeKalmanBaroOnlyGains+0x704>)
    25ba:	47b0      	blx	r6
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
    25bc:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    25be:	9b39      	ldr	r3, [sp, #228]	; 0xe4

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
    25c0:	9022      	str	r0, [sp, #136]	; 0x88
    25c2:	9123      	str	r1, [sp, #140]	; 0x8c
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
    25c4:	9830      	ldr	r0, [sp, #192]	; 0xc0
    25c6:	9931      	ldr	r1, [sp, #196]	; 0xc4
    25c8:	47a8      	blx	r5
    25ca:	4a52      	ldr	r2, [pc, #328]	; (2714 <computeKalmanBaroOnlyGains+0x6f4>)
    25cc:	0006      	movs	r6, r0
    25ce:	000f      	movs	r7, r1
    25d0:	9832      	ldr	r0, [sp, #200]	; 0xc8
    25d2:	9933      	ldr	r1, [sp, #204]	; 0xcc
    25d4:	4b50      	ldr	r3, [pc, #320]	; (2718 <computeKalmanBaroOnlyGains+0x6f8>)
    25d6:	47a0      	blx	r4
    25d8:	0002      	movs	r2, r0
    25da:	000b      	movs	r3, r1
    25dc:	0030      	movs	r0, r6
    25de:	0039      	movs	r1, r7
    25e0:	47a8      	blx	r5
    25e2:	9a06      	ldr	r2, [sp, #24]
    25e4:	9b07      	ldr	r3, [sp, #28]
    25e6:	0006      	movs	r6, r0
    25e8:	000f      	movs	r7, r1
    25ea:	9804      	ldr	r0, [sp, #16]
    25ec:	9905      	ldr	r1, [sp, #20]
    25ee:	47a0      	blx	r4
    25f0:	0002      	movs	r2, r0
    25f2:	000b      	movs	r3, r1
    25f4:	0030      	movs	r0, r6
    25f6:	0039      	movs	r1, r7
    25f8:	4e4a      	ldr	r6, [pc, #296]	; (2724 <computeKalmanBaroOnlyGains+0x704>)
    25fa:	47b0      	blx	r6
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
    25fc:	2200      	movs	r2, #0
    25fe:	2300      	movs	r3, #0
        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
    2600:	9006      	str	r0, [sp, #24]
    2602:	9107      	str	r1, [sp, #28]
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
    2604:	9828      	ldr	r0, [sp, #160]	; 0xa0
    2606:	9929      	ldr	r1, [sp, #164]	; 0xa4
    2608:	47a0      	blx	r4
    260a:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    260c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    260e:	47a8      	blx	r5
    2610:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    2612:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    2614:	47a8      	blx	r5
    2616:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2618:	9b25      	ldr	r3, [sp, #148]	; 0x94
    261a:	0006      	movs	r6, r0
    261c:	000f      	movs	r7, r1
    261e:	9800      	ldr	r0, [sp, #0]
    2620:	9901      	ldr	r1, [sp, #4]
    2622:	47a0      	blx	r4
    2624:	0002      	movs	r2, r0
    2626:	000b      	movs	r3, r1
    2628:	0030      	movs	r0, r6
    262a:	0039      	movs	r1, r7
    262c:	4e3d      	ldr	r6, [pc, #244]	; (2724 <computeKalmanBaroOnlyGains+0x704>)
    262e:	47b0      	blx	r6
        pest[2][1] = pestp[1][2] - baro_kgain[2] * pestp[1][0];
    2630:	2200      	movs	r2, #0
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
    2632:	9000      	str	r0, [sp, #0]
    2634:	9101      	str	r1, [sp, #4]
        pest[2][1] = pestp[1][2] - baro_kgain[2] * pestp[1][0];
    2636:	982c      	ldr	r0, [sp, #176]	; 0xb0
    2638:	992d      	ldr	r1, [sp, #180]	; 0xb4
    263a:	2300      	movs	r3, #0
    263c:	47a0      	blx	r4
    263e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    2640:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    2642:	47a8      	blx	r5
    2644:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    2646:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    2648:	47a8      	blx	r5
    264a:	9a24      	ldr	r2, [sp, #144]	; 0x90
    264c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    264e:	0006      	movs	r6, r0
    2650:	000f      	movs	r7, r1
    2652:	9802      	ldr	r0, [sp, #8]
    2654:	9903      	ldr	r1, [sp, #12]
    2656:	47a0      	blx	r4
    2658:	0002      	movs	r2, r0
    265a:	000b      	movs	r3, r1
    265c:	0030      	movs	r0, r6
    265e:	0039      	movs	r1, r7
    2660:	4e30      	ldr	r6, [pc, #192]	; (2724 <computeKalmanBaroOnlyGains+0x704>)
    2662:	47b0      	blx	r6
        pest[2][2] = pestp[2][2] - baro_kgain[2] * pestp[2][0];
    2664:	2200      	movs	r2, #0
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
        pest[2][1] = pestp[1][2] - baro_kgain[2] * pestp[1][0];
    2666:	9002      	str	r0, [sp, #8]
    2668:	9103      	str	r1, [sp, #12]
        pest[2][2] = pestp[2][2] - baro_kgain[2] * pestp[2][0];
    266a:	9830      	ldr	r0, [sp, #192]	; 0xc0
    266c:	9931      	ldr	r1, [sp, #196]	; 0xc4
    266e:	2300      	movs	r3, #0
    2670:	47a0      	blx	r4
    2672:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    2674:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    2676:	47a8      	blx	r5
    2678:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    267a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    267c:	47a8      	blx	r5
    267e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2680:	9b25      	ldr	r3, [sp, #148]	; 0x94
    2682:	0006      	movs	r6, r0
    2684:	000f      	movs	r7, r1
    2686:	9804      	ldr	r0, [sp, #16]
    2688:	9905      	ldr	r1, [sp, #20]
    268a:	47a0      	blx	r4
    268c:	4c25      	ldr	r4, [pc, #148]	; (2724 <computeKalmanBaroOnlyGains+0x704>)
    268e:	000b      	movs	r3, r1
    2690:	0002      	movs	r2, r0
    2692:	0039      	movs	r1, r7
    2694:	0030      	movs	r0, r6
    2696:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    2698:	2400      	movs	r4, #0
    269a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
        pest[2][1] = pestp[1][2] - baro_kgain[2] * pestp[1][0];
        pest[2][2] = pestp[2][2] - baro_kgain[2] * pestp[2][0];
    269c:	9004      	str	r0, [sp, #16]
    269e:	9105      	str	r1, [sp, #20]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    26a0:	3301      	adds	r3, #1
    26a2:	9327      	str	r3, [sp, #156]	; 0x9c
        for( i = 0; i <= 2; i++) {
            if( (baro_kgain[i] - lastkgain[i])/lastkgain[i] > 0.00001)
    26a4:	4b1e      	ldr	r3, [pc, #120]	; (2720 <computeKalmanBaroOnlyGains+0x700>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    26a6:	9424      	str	r4, [sp, #144]	; 0x90
        k++;
        for( i = 0; i <= 2; i++) {
            if( (baro_kgain[i] - lastkgain[i])/lastkgain[i] > 0.00001)
    26a8:	932c      	str	r3, [sp, #176]	; 0xb0
    26aa:	4b1e      	ldr	r3, [pc, #120]	; (2724 <computeKalmanBaroOnlyGains+0x704>)
    26ac:	932e      	str	r3, [sp, #184]	; 0xb8
    26ae:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    26b0:	18e3      	adds	r3, r4, r3
    26b2:	681a      	ldr	r2, [r3, #0]
    26b4:	685b      	ldr	r3, [r3, #4]
    26b6:	9228      	str	r2, [sp, #160]	; 0xa0
    26b8:	9329      	str	r3, [sp, #164]	; 0xa4
    26ba:	9828      	ldr	r0, [sp, #160]	; 0xa0
    26bc:	9929      	ldr	r1, [sp, #164]	; 0xa4
    26be:	ab3e      	add	r3, sp, #248	; 0xf8
    26c0:	18e5      	adds	r5, r4, r3
    26c2:	682e      	ldr	r6, [r5, #0]
    26c4:	686f      	ldr	r7, [r5, #4]
    26c6:	952a      	str	r5, [sp, #168]	; 0xa8
    26c8:	0032      	movs	r2, r6
    26ca:	003b      	movs	r3, r7
    26cc:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
    26ce:	47a8      	blx	r5
    26d0:	0032      	movs	r2, r6
    26d2:	003b      	movs	r3, r7
    26d4:	4e11      	ldr	r6, [pc, #68]	; (271c <computeKalmanBaroOnlyGains+0x6fc>)
    26d6:	47b0      	blx	r6
    26d8:	4b14      	ldr	r3, [pc, #80]	; (272c <computeKalmanBaroOnlyGains+0x70c>)
    26da:	4a15      	ldr	r2, [pc, #84]	; (2730 <computeKalmanBaroOnlyGains+0x710>)
    26dc:	4e15      	ldr	r6, [pc, #84]	; (2734 <computeKalmanBaroOnlyGains+0x714>)
    26de:	47b0      	blx	r6
                notdone++;
    26e0:	1e43      	subs	r3, r0, #1
    26e2:	4198      	sbcs	r0, r3
    26e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
            lastkgain[i] = baro_kgain[i];
    26e6:	992a      	ldr	r1, [sp, #168]	; 0xa8
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++) {
            if( (baro_kgain[i] - lastkgain[i])/lastkgain[i] > 0.00001)
                notdone++;
    26e8:	181b      	adds	r3, r3, r0
    26ea:	3408      	adds	r4, #8
    26ec:	9324      	str	r3, [sp, #144]	; 0x90
            lastkgain[i] = baro_kgain[i];
    26ee:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    26f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    26f2:	600a      	str	r2, [r1, #0]
    26f4:	604b      	str	r3, [r1, #4]
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++) {
    26f6:	2c18      	cmp	r4, #24
    26f8:	d1d9      	bne.n	26ae <computeKalmanBaroOnlyGains+0x68e>
            if( (baro_kgain[i] - lastkgain[i])/lastkgain[i] > 0.00001)
                notdone++;
            lastkgain[i] = baro_kgain[i];
        }
        if( notdone || k < 100)
    26fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
    26fc:	2b00      	cmp	r3, #0
    26fe:	d000      	beq.n	2702 <computeKalmanBaroOnlyGains+0x6e2>
    2700:	e4f8      	b.n	20f4 <computeKalmanBaroOnlyGains+0xd4>
    2702:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    2704:	2b63      	cmp	r3, #99	; 0x63
    2706:	dc00      	bgt.n	270a <computeKalmanBaroOnlyGains+0x6ea>
    2708:	e4f4      	b.n	20f4 <computeKalmanBaroOnlyGains+0xd4>
    270a:	e015      	b.n	2738 <computeKalmanBaroOnlyGains+0x718>
    270c:	eb1c432d 	.word	0xeb1c432d
    2710:	3eea36e2 	.word	0x3eea36e2
    2714:	47ae147b 	.word	0x47ae147b
    2718:	3f747ae1 	.word	0x3f747ae1
    271c:	00005849 	.word	0x00005849
    2720:	20000310 	.word	0x20000310
    2724:	00006585 	.word	0x00006585
    2728:	3ff00000 	.word	0x3ff00000
    272c:	3ee4f8b5 	.word	0x3ee4f8b5
    2730:	88e368f1 	.word	0x88e368f1
    2734:	00004ec9 	.word	0x00004ec9
            continue;
        else
            break;
    }
}
    2738:	b045      	add	sp, #276	; 0x114
    273a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000273c <KalmanBaroUpdate>:

void KalmanBaroUpdate(double alt_inovation) {
    273c:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    273e:	4b55      	ldr	r3, [pc, #340]	; (2894 <KalmanBaroUpdate+0x158>)
        else
            break;
    }
}

void KalmanBaroUpdate(double alt_inovation) {
    2740:	b08d      	sub	sp, #52	; 0x34

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    2742:	685c      	ldr	r4, [r3, #4]
    2744:	681b      	ldr	r3, [r3, #0]
    2746:	9300      	str	r3, [sp, #0]
    2748:	9401      	str	r4, [sp, #4]
    274a:	4b53      	ldr	r3, [pc, #332]	; (2898 <KalmanBaroUpdate+0x15c>)
    274c:	4d53      	ldr	r5, [pc, #332]	; (289c <KalmanBaroUpdate+0x160>)
    274e:	685c      	ldr	r4, [r3, #4]
    2750:	681b      	ldr	r3, [r3, #0]
    2752:	9302      	str	r3, [sp, #8]
    2754:	9403      	str	r4, [sp, #12]
    2756:	4b52      	ldr	r3, [pc, #328]	; (28a0 <KalmanBaroUpdate+0x164>)
        else
            break;
    }
}

void KalmanBaroUpdate(double alt_inovation) {
    2758:	9006      	str	r0, [sp, #24]
    275a:	9107      	str	r1, [sp, #28]

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    275c:	685c      	ldr	r4, [r3, #4]
    275e:	681b      	ldr	r3, [r3, #0]
    2760:	9800      	ldr	r0, [sp, #0]
    2762:	9901      	ldr	r1, [sp, #4]
    2764:	9304      	str	r3, [sp, #16]
    2766:	9405      	str	r4, [sp, #20]
    2768:	4c4e      	ldr	r4, [pc, #312]	; (28a4 <KalmanBaroUpdate+0x168>)
    276a:	6822      	ldr	r2, [r4, #0]
    276c:	6863      	ldr	r3, [r4, #4]
    276e:	47a8      	blx	r5
    2770:	68a2      	ldr	r2, [r4, #8]
    2772:	68e3      	ldr	r3, [r4, #12]
    2774:	0006      	movs	r6, r0
    2776:	000f      	movs	r7, r1
    2778:	9802      	ldr	r0, [sp, #8]
    277a:	9903      	ldr	r1, [sp, #12]
    277c:	47a8      	blx	r5
    277e:	0002      	movs	r2, r0
    2780:	000b      	movs	r3, r1
    2782:	0030      	movs	r0, r6
    2784:	0039      	movs	r1, r7
    2786:	4e48      	ldr	r6, [pc, #288]	; (28a8 <KalmanBaroUpdate+0x16c>)
    2788:	47b0      	blx	r6
    278a:	6922      	ldr	r2, [r4, #16]
    278c:	6963      	ldr	r3, [r4, #20]
    278e:	0006      	movs	r6, r0
    2790:	000f      	movs	r7, r1
    2792:	9804      	ldr	r0, [sp, #16]
    2794:	9905      	ldr	r1, [sp, #20]
    2796:	47a8      	blx	r5
    2798:	0002      	movs	r2, r0
    279a:	000b      	movs	r3, r1
    279c:	0030      	movs	r0, r6
    279e:	0039      	movs	r1, r7
    27a0:	4e41      	ldr	r6, [pc, #260]	; (28a8 <KalmanBaroUpdate+0x16c>)
    27a2:	47b0      	blx	r6
    27a4:	9008      	str	r0, [sp, #32]
    27a6:	9109      	str	r1, [sp, #36]	; 0x24
    27a8:	9a08      	ldr	r2, [sp, #32]
    27aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    27ac:	493f      	ldr	r1, [pc, #252]	; (28ac <KalmanBaroUpdate+0x170>)
    27ae:	600a      	str	r2, [r1, #0]
    27b0:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    27b2:	69a2      	ldr	r2, [r4, #24]
    27b4:	69e3      	ldr	r3, [r4, #28]
    27b6:	9800      	ldr	r0, [sp, #0]
    27b8:	9901      	ldr	r1, [sp, #4]
    27ba:	47a8      	blx	r5
    27bc:	6a22      	ldr	r2, [r4, #32]
    27be:	6a63      	ldr	r3, [r4, #36]	; 0x24
    27c0:	0006      	movs	r6, r0
    27c2:	000f      	movs	r7, r1
    27c4:	9802      	ldr	r0, [sp, #8]
    27c6:	9903      	ldr	r1, [sp, #12]
    27c8:	47a8      	blx	r5
    27ca:	0002      	movs	r2, r0
    27cc:	000b      	movs	r3, r1
    27ce:	0030      	movs	r0, r6
    27d0:	0039      	movs	r1, r7
    27d2:	4e35      	ldr	r6, [pc, #212]	; (28a8 <KalmanBaroUpdate+0x16c>)
    27d4:	47b0      	blx	r6
    27d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    27d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    27da:	0006      	movs	r6, r0
    27dc:	000f      	movs	r7, r1
    27de:	9804      	ldr	r0, [sp, #16]
    27e0:	9905      	ldr	r1, [sp, #20]
    27e2:	47a8      	blx	r5
    27e4:	0002      	movs	r2, r0
    27e6:	000b      	movs	r3, r1
    27e8:	0030      	movs	r0, r6
    27ea:	0039      	movs	r1, r7
    27ec:	4e2e      	ldr	r6, [pc, #184]	; (28a8 <KalmanBaroUpdate+0x16c>)
    27ee:	47b0      	blx	r6
    27f0:	900a      	str	r0, [sp, #40]	; 0x28
    27f2:	910b      	str	r1, [sp, #44]	; 0x2c
    27f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    27f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    27f8:	492c      	ldr	r1, [pc, #176]	; (28ac <KalmanBaroUpdate+0x170>)
    27fa:	608a      	str	r2, [r1, #8]
    27fc:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    27fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2800:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2802:	9800      	ldr	r0, [sp, #0]
    2804:	9901      	ldr	r1, [sp, #4]
    2806:	47a8      	blx	r5
    2808:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    280a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    280c:	0006      	movs	r6, r0
    280e:	000f      	movs	r7, r1
    2810:	9802      	ldr	r0, [sp, #8]
    2812:	9903      	ldr	r1, [sp, #12]
    2814:	47a8      	blx	r5
    2816:	0002      	movs	r2, r0
    2818:	000b      	movs	r3, r1
    281a:	0030      	movs	r0, r6
    281c:	0039      	movs	r1, r7
    281e:	4e22      	ldr	r6, [pc, #136]	; (28a8 <KalmanBaroUpdate+0x16c>)
    2820:	47b0      	blx	r6
    2822:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2824:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2826:	0006      	movs	r6, r0
    2828:	000f      	movs	r7, r1
    282a:	9804      	ldr	r0, [sp, #16]
    282c:	9905      	ldr	r1, [sp, #20]
    282e:	47a8      	blx	r5
    2830:	4c1d      	ldr	r4, [pc, #116]	; (28a8 <KalmanBaroUpdate+0x16c>)
    2832:	0002      	movs	r2, r0
    2834:	000b      	movs	r3, r1
    2836:	0030      	movs	r0, r6
    2838:	0039      	movs	r1, r7
    283a:	47a0      	blx	r4
    283c:	0006      	movs	r6, r0
    283e:	000f      	movs	r7, r1

    /* Update state */
    altitude = estp[0] + baro_kgain[0] * alt_inovation;
    2840:	9806      	ldr	r0, [sp, #24]
    2842:	9907      	ldr	r1, [sp, #28]
void KalmanBaroUpdate(double alt_inovation) {

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    2844:	4b19      	ldr	r3, [pc, #100]	; (28ac <KalmanBaroUpdate+0x170>)
    2846:	611e      	str	r6, [r3, #16]
    2848:	615f      	str	r7, [r3, #20]

    /* Update state */
    altitude = estp[0] + baro_kgain[0] * alt_inovation;
    284a:	4b19      	ldr	r3, [pc, #100]	; (28b0 <KalmanBaroUpdate+0x174>)
    284c:	681a      	ldr	r2, [r3, #0]
    284e:	685b      	ldr	r3, [r3, #4]
    2850:	47a8      	blx	r5
    2852:	9a08      	ldr	r2, [sp, #32]
    2854:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2856:	47a0      	blx	r4
    2858:	4b0e      	ldr	r3, [pc, #56]	; (2894 <KalmanBaroUpdate+0x158>)
    285a:	6018      	str	r0, [r3, #0]
    285c:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + baro_kgain[1] * alt_inovation;
    285e:	9806      	ldr	r0, [sp, #24]
    2860:	9907      	ldr	r1, [sp, #28]
    2862:	4b13      	ldr	r3, [pc, #76]	; (28b0 <KalmanBaroUpdate+0x174>)
    2864:	689a      	ldr	r2, [r3, #8]
    2866:	68db      	ldr	r3, [r3, #12]
    2868:	47a8      	blx	r5
    286a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    286c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    286e:	47a0      	blx	r4
    2870:	4b09      	ldr	r3, [pc, #36]	; (2898 <KalmanBaroUpdate+0x15c>)
    2872:	6018      	str	r0, [r3, #0]
    2874:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + baro_kgain[2] * alt_inovation;
    2876:	9806      	ldr	r0, [sp, #24]
    2878:	9907      	ldr	r1, [sp, #28]
    287a:	4b0d      	ldr	r3, [pc, #52]	; (28b0 <KalmanBaroUpdate+0x174>)
    287c:	691a      	ldr	r2, [r3, #16]
    287e:	695b      	ldr	r3, [r3, #20]
    2880:	47a8      	blx	r5
    2882:	003b      	movs	r3, r7
    2884:	0032      	movs	r2, r6
    2886:	47a0      	blx	r4
    2888:	4b05      	ldr	r3, [pc, #20]	; (28a0 <KalmanBaroUpdate+0x164>)
    288a:	6018      	str	r0, [r3, #0]
    288c:	6059      	str	r1, [r3, #4]

}
    288e:	b00d      	add	sp, #52	; 0x34
    2890:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2892:	46c0      	nop			; (mov r8, r8)
    2894:	20000328 	.word	0x20000328
    2898:	20000308 	.word	0x20000308
    289c:	00006091 	.word	0x00006091
    28a0:	200002e8 	.word	0x200002e8
    28a4:	20000010 	.word	0x20000010
    28a8:	000051f1 	.word	0x000051f1
    28ac:	20000330 	.word	0x20000330
    28b0:	20000310 	.word	0x20000310

000028b4 <KalmanBothUpdate>:

void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    28b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    28b6:	b08f      	sub	sp, #60	; 0x3c
    28b8:	9208      	str	r2, [sp, #32]
    28ba:	9309      	str	r3, [sp, #36]	; 0x24

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    28bc:	4b68      	ldr	r3, [pc, #416]	; (2a60 <KalmanBothUpdate+0x1ac>)
    28be:	4d69      	ldr	r5, [pc, #420]	; (2a64 <KalmanBothUpdate+0x1b0>)
    28c0:	685c      	ldr	r4, [r3, #4]
    28c2:	681b      	ldr	r3, [r3, #0]
    28c4:	9300      	str	r3, [sp, #0]
    28c6:	9401      	str	r4, [sp, #4]
    28c8:	4b67      	ldr	r3, [pc, #412]	; (2a68 <KalmanBothUpdate+0x1b4>)
    velocity = estp[1] + baro_kgain[1] * alt_inovation;
    accel =    estp[2] + baro_kgain[2] * alt_inovation;

}

void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    28ca:	9006      	str	r0, [sp, #24]
    28cc:	9107      	str	r1, [sp, #28]

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    28ce:	685c      	ldr	r4, [r3, #4]
    28d0:	681b      	ldr	r3, [r3, #0]
    28d2:	9800      	ldr	r0, [sp, #0]
    28d4:	9901      	ldr	r1, [sp, #4]
    28d6:	9302      	str	r3, [sp, #8]
    28d8:	9403      	str	r4, [sp, #12]
    28da:	4b64      	ldr	r3, [pc, #400]	; (2a6c <KalmanBothUpdate+0x1b8>)
    28dc:	685c      	ldr	r4, [r3, #4]
    28de:	681b      	ldr	r3, [r3, #0]
    28e0:	9304      	str	r3, [sp, #16]
    28e2:	9405      	str	r4, [sp, #20]
    28e4:	4c62      	ldr	r4, [pc, #392]	; (2a70 <KalmanBothUpdate+0x1bc>)
    28e6:	6822      	ldr	r2, [r4, #0]
    28e8:	6863      	ldr	r3, [r4, #4]
    28ea:	47a8      	blx	r5
    28ec:	68a2      	ldr	r2, [r4, #8]
    28ee:	68e3      	ldr	r3, [r4, #12]
    28f0:	0006      	movs	r6, r0
    28f2:	000f      	movs	r7, r1
    28f4:	9802      	ldr	r0, [sp, #8]
    28f6:	9903      	ldr	r1, [sp, #12]
    28f8:	47a8      	blx	r5
    28fa:	0002      	movs	r2, r0
    28fc:	000b      	movs	r3, r1
    28fe:	0030      	movs	r0, r6
    2900:	0039      	movs	r1, r7
    2902:	4e5c      	ldr	r6, [pc, #368]	; (2a74 <KalmanBothUpdate+0x1c0>)
    2904:	47b0      	blx	r6
    2906:	6922      	ldr	r2, [r4, #16]
    2908:	6963      	ldr	r3, [r4, #20]
    290a:	0006      	movs	r6, r0
    290c:	000f      	movs	r7, r1
    290e:	9804      	ldr	r0, [sp, #16]
    2910:	9905      	ldr	r1, [sp, #20]
    2912:	47a8      	blx	r5
    2914:	0002      	movs	r2, r0
    2916:	000b      	movs	r3, r1
    2918:	0030      	movs	r0, r6
    291a:	0039      	movs	r1, r7
    291c:	4e55      	ldr	r6, [pc, #340]	; (2a74 <KalmanBothUpdate+0x1c0>)
    291e:	47b0      	blx	r6
    2920:	900a      	str	r0, [sp, #40]	; 0x28
    2922:	910b      	str	r1, [sp, #44]	; 0x2c
    2924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2928:	4953      	ldr	r1, [pc, #332]	; (2a78 <KalmanBothUpdate+0x1c4>)
    292a:	600a      	str	r2, [r1, #0]
    292c:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    292e:	69a2      	ldr	r2, [r4, #24]
    2930:	69e3      	ldr	r3, [r4, #28]
    2932:	9800      	ldr	r0, [sp, #0]
    2934:	9901      	ldr	r1, [sp, #4]
    2936:	47a8      	blx	r5
    2938:	6a22      	ldr	r2, [r4, #32]
    293a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    293c:	0006      	movs	r6, r0
    293e:	000f      	movs	r7, r1
    2940:	9802      	ldr	r0, [sp, #8]
    2942:	9903      	ldr	r1, [sp, #12]
    2944:	47a8      	blx	r5
    2946:	0002      	movs	r2, r0
    2948:	000b      	movs	r3, r1
    294a:	0030      	movs	r0, r6
    294c:	0039      	movs	r1, r7
    294e:	4e49      	ldr	r6, [pc, #292]	; (2a74 <KalmanBothUpdate+0x1c0>)
    2950:	47b0      	blx	r6
    2952:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2954:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2956:	0006      	movs	r6, r0
    2958:	000f      	movs	r7, r1
    295a:	9804      	ldr	r0, [sp, #16]
    295c:	9905      	ldr	r1, [sp, #20]
    295e:	47a8      	blx	r5
    2960:	0002      	movs	r2, r0
    2962:	000b      	movs	r3, r1
    2964:	0030      	movs	r0, r6
    2966:	0039      	movs	r1, r7
    2968:	4e42      	ldr	r6, [pc, #264]	; (2a74 <KalmanBothUpdate+0x1c0>)
    296a:	47b0      	blx	r6
    296c:	900c      	str	r0, [sp, #48]	; 0x30
    296e:	910d      	str	r1, [sp, #52]	; 0x34
    2970:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2974:	4940      	ldr	r1, [pc, #256]	; (2a78 <KalmanBothUpdate+0x1c4>)
    2976:	608a      	str	r2, [r1, #8]
    2978:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    297a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    297c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    297e:	9800      	ldr	r0, [sp, #0]
    2980:	9901      	ldr	r1, [sp, #4]
    2982:	47a8      	blx	r5
    2984:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2986:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2988:	0006      	movs	r6, r0
    298a:	000f      	movs	r7, r1
    298c:	9802      	ldr	r0, [sp, #8]
    298e:	9903      	ldr	r1, [sp, #12]
    2990:	47a8      	blx	r5
    2992:	0002      	movs	r2, r0
    2994:	000b      	movs	r3, r1
    2996:	0030      	movs	r0, r6
    2998:	0039      	movs	r1, r7
    299a:	4e36      	ldr	r6, [pc, #216]	; (2a74 <KalmanBothUpdate+0x1c0>)
    299c:	47b0      	blx	r6
    299e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    29a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    29a2:	0006      	movs	r6, r0
    29a4:	000f      	movs	r7, r1
    29a6:	9804      	ldr	r0, [sp, #16]
    29a8:	9905      	ldr	r1, [sp, #20]
    29aa:	47a8      	blx	r5
    29ac:	4c31      	ldr	r4, [pc, #196]	; (2a74 <KalmanBothUpdate+0x1c0>)
    29ae:	0002      	movs	r2, r0
    29b0:	000b      	movs	r3, r1
    29b2:	0030      	movs	r0, r6
    29b4:	0039      	movs	r1, r7
    29b6:	47a0      	blx	r4
    29b8:	0003      	movs	r3, r0
    29ba:	000c      	movs	r4, r1
    29bc:	4a2e      	ldr	r2, [pc, #184]	; (2a78 <KalmanBothUpdate+0x1c4>)
    29be:	9000      	str	r0, [sp, #0]
    29c0:	9101      	str	r1, [sp, #4]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    29c2:	9806      	ldr	r0, [sp, #24]
    29c4:	9907      	ldr	r1, [sp, #28]
void KalmanBothUpdate( double alt_inovation, double accel_inovation) {

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    29c6:	6113      	str	r3, [r2, #16]
    29c8:	6154      	str	r4, [r2, #20]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    29ca:	4c2c      	ldr	r4, [pc, #176]	; (2a7c <KalmanBothUpdate+0x1c8>)
    29cc:	6822      	ldr	r2, [r4, #0]
    29ce:	6863      	ldr	r3, [r4, #4]
    29d0:	47a8      	blx	r5
    29d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    29d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    29d6:	4e27      	ldr	r6, [pc, #156]	; (2a74 <KalmanBothUpdate+0x1c0>)
    29d8:	47b0      	blx	r6
    29da:	68a2      	ldr	r2, [r4, #8]
    29dc:	68e3      	ldr	r3, [r4, #12]
    29de:	0006      	movs	r6, r0
    29e0:	000f      	movs	r7, r1
    29e2:	9808      	ldr	r0, [sp, #32]
    29e4:	9909      	ldr	r1, [sp, #36]	; 0x24
    29e6:	47a8      	blx	r5
    29e8:	0002      	movs	r2, r0
    29ea:	000b      	movs	r3, r1
    29ec:	0030      	movs	r0, r6
    29ee:	0039      	movs	r1, r7
    29f0:	4e20      	ldr	r6, [pc, #128]	; (2a74 <KalmanBothUpdate+0x1c0>)
    29f2:	47b0      	blx	r6
    29f4:	4b1a      	ldr	r3, [pc, #104]	; (2a60 <KalmanBothUpdate+0x1ac>)
    29f6:	6018      	str	r0, [r3, #0]
    29f8:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    29fa:	6922      	ldr	r2, [r4, #16]
    29fc:	6963      	ldr	r3, [r4, #20]
    29fe:	9806      	ldr	r0, [sp, #24]
    2a00:	9907      	ldr	r1, [sp, #28]
    2a02:	47a8      	blx	r5
    2a04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2a08:	47b0      	blx	r6
    2a0a:	69a2      	ldr	r2, [r4, #24]
    2a0c:	69e3      	ldr	r3, [r4, #28]
    2a0e:	0006      	movs	r6, r0
    2a10:	000f      	movs	r7, r1
    2a12:	9808      	ldr	r0, [sp, #32]
    2a14:	9909      	ldr	r1, [sp, #36]	; 0x24
    2a16:	47a8      	blx	r5
    2a18:	0002      	movs	r2, r0
    2a1a:	000b      	movs	r3, r1
    2a1c:	0030      	movs	r0, r6
    2a1e:	0039      	movs	r1, r7
    2a20:	4e14      	ldr	r6, [pc, #80]	; (2a74 <KalmanBothUpdate+0x1c0>)
    2a22:	47b0      	blx	r6
    2a24:	4b10      	ldr	r3, [pc, #64]	; (2a68 <KalmanBothUpdate+0x1b4>)
    2a26:	6018      	str	r0, [r3, #0]
    2a28:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    2a2a:	6a22      	ldr	r2, [r4, #32]
    2a2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2a2e:	9806      	ldr	r0, [sp, #24]
    2a30:	9907      	ldr	r1, [sp, #28]
    2a32:	47a8      	blx	r5
    2a34:	9a00      	ldr	r2, [sp, #0]
    2a36:	9b01      	ldr	r3, [sp, #4]
    2a38:	47b0      	blx	r6
    2a3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2a3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2a3e:	0006      	movs	r6, r0
    2a40:	000f      	movs	r7, r1
    2a42:	9808      	ldr	r0, [sp, #32]
    2a44:	9909      	ldr	r1, [sp, #36]	; 0x24
    2a46:	47a8      	blx	r5
    2a48:	4c0a      	ldr	r4, [pc, #40]	; (2a74 <KalmanBothUpdate+0x1c0>)
    2a4a:	0002      	movs	r2, r0
    2a4c:	000b      	movs	r3, r1
    2a4e:	0030      	movs	r0, r6
    2a50:	0039      	movs	r1, r7
    2a52:	47a0      	blx	r4
    2a54:	4b05      	ldr	r3, [pc, #20]	; (2a6c <KalmanBothUpdate+0x1b8>)
    2a56:	6018      	str	r0, [r3, #0]
    2a58:	6059      	str	r1, [r3, #4]
}
    2a5a:	b00f      	add	sp, #60	; 0x3c
    2a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a5e:	46c0      	nop			; (mov r8, r8)
    2a60:	20000328 	.word	0x20000328
    2a64:	00006091 	.word	0x00006091
    2a68:	20000308 	.word	0x20000308
    2a6c:	200002e8 	.word	0x200002e8
    2a70:	20000010 	.word	0x20000010
    2a74:	000051f1 	.word	0x000051f1
    2a78:	20000330 	.word	0x20000330
    2a7c:	20000348 	.word	0x20000348

00002a80 <computeKalmanStates>:

void computeKalmanStates() {
    2a80:	b5f0      	push	{r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2a82:	4b20      	ldr	r3, [pc, #128]	; (2b04 <computeKalmanStates+0x84>)
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
}

void computeKalmanStates() {
    2a84:	b085      	sub	sp, #20

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2a86:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    2a88:	4a1f      	ldr	r2, [pc, #124]	; (2b08 <computeKalmanStates+0x88>)

    pressure = sample.pressureAltitude;
    2a8a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    2a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2a8e:	9300      	str	r3, [sp, #0]
    2a90:	9401      	str	r4, [sp, #4]

void computeKalmanStates() {

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2a92:	6891      	ldr	r1, [r2, #8]
    2a94:	68d2      	ldr	r2, [r2, #12]

    pressure = sample.pressureAltitude;

    if (altitude == 0) {
    2a96:	4c1d      	ldr	r4, [pc, #116]	; (2b0c <computeKalmanStates+0x8c>)

void computeKalmanStates() {

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2a98:	9102      	str	r1, [sp, #8]
    2a9a:	9203      	str	r2, [sp, #12]

    pressure = sample.pressureAltitude;

    if (altitude == 0) {
    2a9c:	6820      	ldr	r0, [r4, #0]
    2a9e:	6861      	ldr	r1, [r4, #4]
    2aa0:	2200      	movs	r2, #0
    2aa2:	2300      	movs	r3, #0
    2aa4:	4d1a      	ldr	r5, [pc, #104]	; (2b10 <computeKalmanStates+0x90>)
    2aa6:	47a8      	blx	r5
    2aa8:	2800      	cmp	r0, #0
    2aaa:	d003      	beq.n	2ab4 <computeKalmanStates+0x34>
        altitude = pressure;
    2aac:	9a00      	ldr	r2, [sp, #0]
    2aae:	9b01      	ldr	r3, [sp, #4]
    2ab0:	6022      	str	r2, [r4, #0]
    2ab2:	6063      	str	r3, [r4, #4]
    }


    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    2ab4:	9800      	ldr	r0, [sp, #0]
    2ab6:	9901      	ldr	r1, [sp, #4]
    2ab8:	4e16      	ldr	r6, [pc, #88]	; (2b14 <computeKalmanStates+0x94>)
    2aba:	4c17      	ldr	r4, [pc, #92]	; (2b18 <computeKalmanStates+0x98>)
    2abc:	6832      	ldr	r2, [r6, #0]
    2abe:	6873      	ldr	r3, [r6, #4]
    2ac0:	47a0      	blx	r4
    accel_inovation = acceleration - estp[2];

    if (flightState > flightCoast) {
    2ac2:	4b16      	ldr	r3, [pc, #88]	; (2b1c <computeKalmanStates+0x9c>)
        altitude = pressure;
    }


    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    2ac4:	0004      	movs	r4, r0
    accel_inovation = acceleration - estp[2];

    if (flightState > flightCoast) {
    2ac6:	781b      	ldrb	r3, [r3, #0]
        altitude = pressure;
    }


    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    2ac8:	000d      	movs	r5, r1
    accel_inovation = acceleration - estp[2];

    if (flightState > flightCoast) {
    2aca:	2b05      	cmp	r3, #5
    2acc:	d902      	bls.n	2ad4 <computeKalmanStates+0x54>
        KalmanBaroUpdate(alt_inovation);
    2ace:	4b14      	ldr	r3, [pc, #80]	; (2b20 <computeKalmanStates+0xa0>)
    2ad0:	4798      	blx	r3
    2ad2:	e014      	b.n	2afe <computeKalmanStates+0x7e>
    } else {
        KalmanBothUpdate(alt_inovation, accel_inovation);
    2ad4:	1c38      	adds	r0, r7, #0
    2ad6:	4b13      	ldr	r3, [pc, #76]	; (2b24 <computeKalmanStates+0xa4>)
    2ad8:	4798      	blx	r3
    2ada:	9a02      	ldr	r2, [sp, #8]
    2adc:	9b03      	ldr	r3, [sp, #12]
    2ade:	4f0e      	ldr	r7, [pc, #56]	; (2b18 <computeKalmanStates+0x98>)
    2ae0:	47b8      	blx	r7
    2ae2:	4a11      	ldr	r2, [pc, #68]	; (2b28 <computeKalmanStates+0xa8>)
    2ae4:	4b11      	ldr	r3, [pc, #68]	; (2b2c <computeKalmanStates+0xac>)
    2ae6:	4f12      	ldr	r7, [pc, #72]	; (2b30 <computeKalmanStates+0xb0>)
    2ae8:	47b8      	blx	r7
    2aea:	6932      	ldr	r2, [r6, #16]
    2aec:	6973      	ldr	r3, [r6, #20]
    2aee:	4e0a      	ldr	r6, [pc, #40]	; (2b18 <computeKalmanStates+0x98>)
    2af0:	47b0      	blx	r6
    2af2:	0002      	movs	r2, r0
    2af4:	000b      	movs	r3, r1
    2af6:	0020      	movs	r0, r4
    2af8:	0029      	movs	r1, r5
    2afa:	4c0e      	ldr	r4, [pc, #56]	; (2b34 <computeKalmanStates+0xb4>)
    2afc:	47a0      	blx	r4
    }
}
    2afe:	b005      	add	sp, #20
    2b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b02:	46c0      	nop			; (mov r8, r8)
    2b04:	200005f0 	.word	0x200005f0
    2b08:	20000150 	.word	0x20000150
    2b0c:	20000328 	.word	0x20000328
    2b10:	00004e95 	.word	0x00004e95
    2b14:	20000330 	.word	0x20000330
    2b18:	00006585 	.word	0x00006585
    2b1c:	200001ac 	.word	0x200001ac
    2b20:	0000273d 	.word	0x0000273d
    2b24:	00006dcd 	.word	0x00006dcd
    2b28:	33daf8df 	.word	0x33daf8df
    2b2c:	4040164b 	.word	0x4040164b
    2b30:	00006091 	.word	0x00006091
    2b34:	000028b5 	.word	0x000028b5

00002b38 <makePage>:
u16_t flightAddressLocationInIndex;

u8_t flightStartAddress[3];


void makePage(u8_t bytesToWrite, u8_t* data) {
    2b38:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    2b3a:	4a1f      	ldr	r2, [pc, #124]	; (2bb8 <makePage+0x80>)
    2b3c:	7815      	ldrb	r5, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    2b3e:	1943      	adds	r3, r0, r5
    2b40:	2bff      	cmp	r3, #255	; 0xff
    2b42:	dc03      	bgt.n	2b4c <makePage+0x14>
    2b44:	2300      	movs	r3, #0
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2b46:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    2b48:	4c1c      	ldr	r4, [pc, #112]	; (2bbc <makePage+0x84>)
    2b4a:	e029      	b.n	2ba0 <makePage+0x68>
    2b4c:	2300      	movs	r3, #0
    2b4e:	4e1b      	ldr	r6, [pc, #108]	; (2bbc <makePage+0x84>)

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2b50:	195f      	adds	r7, r3, r5
    2b52:	b2dc      	uxtb	r4, r3
    2b54:	46b4      	mov	ip, r6
    2b56:	2fff      	cmp	r7, #255	; 0xff
    2b58:	dc04      	bgt.n	2b64 <makePage+0x2c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    2b5a:	5ccc      	ldrb	r4, [r1, r3]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2b5c:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    2b5e:	55f4      	strb	r4, [r6, r7]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2b60:	b29b      	uxth	r3, r3
    2b62:	e7f5      	b.n	2b50 <makePage+0x18>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    2b64:	2300      	movs	r3, #0
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    2b66:	4f16      	ldr	r7, [pc, #88]	; (2bc0 <makePage+0x88>)
    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    2b68:	7013      	strb	r3, [r2, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    2b6a:	4665      	mov	r5, ip
    2b6c:	18ed      	adds	r5, r5, r3
    2b6e:	782e      	ldrb	r6, [r5, #0]
    2b70:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    2b72:	2600      	movs	r6, #0
    2b74:	702e      	strb	r6, [r5, #0]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    2b76:	2580      	movs	r5, #128	; 0x80
    2b78:	3301      	adds	r3, #1
    2b7a:	006d      	lsls	r5, r5, #1
    2b7c:	42ab      	cmp	r3, r5
    2b7e:	d1f4      	bne.n	2b6a <makePage+0x32>
    2b80:	2300      	movs	r3, #0
    2b82:	1c5d      	adds	r5, r3, #1
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    2b84:	4284      	cmp	r4, r0
    2b86:	d207      	bcs.n	2b98 <makePage+0x60>
            pageBuffer[dataByte] = data[bytesWritten];
    2b88:	4667      	mov	r7, ip
    2b8a:	5d0e      	ldrb	r6, [r1, r4]
            bytesWritten++;
    2b8c:	3401      	adds	r4, #1
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            pageBuffer[dataByte] = data[bytesWritten];
    2b8e:	54fe      	strb	r6, [r7, r3]
            bytesWritten++;
    2b90:	b2e4      	uxtb	r4, r4
            pageLocation = dataByte + 1;
    2b92:	7015      	strb	r5, [r2, #0]
    2b94:	002b      	movs	r3, r5
    2b96:	e7f4      	b.n	2b82 <makePage+0x4a>
        }
        pageReady = true;
    2b98:	2201      	movs	r2, #1
    2b9a:	4b0a      	ldr	r3, [pc, #40]	; (2bc4 <makePage+0x8c>)
    2b9c:	701a      	strb	r2, [r3, #0]
    2b9e:	e009      	b.n	2bb4 <makePage+0x7c>

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2ba0:	4283      	cmp	r3, r0
    2ba2:	d807      	bhi.n	2bb4 <makePage+0x7c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    2ba4:	5ccf      	ldrb	r7, [r1, r3]
    2ba6:	18e6      	adds	r6, r4, r3
    2ba8:	5577      	strb	r7, [r6, r5]
            bytesWritten++;
            pageLocation = location + dataByte;
    2baa:	18ee      	adds	r6, r5, r3
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2bac:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
    2bae:	7016      	strb	r6, [r2, #0]
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2bb0:	b29b      	uxth	r3, r3
    2bb2:	e7f5      	b.n	2ba0 <makePage+0x68>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
        }
    }
}
    2bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bb6:	46c0      	nop			; (mov r8, r8)
    2bb8:	200005e8 	.word	0x200005e8
    2bbc:	200001ae 	.word	0x200001ae
    2bc0:	2000037a 	.word	0x2000037a
    2bc4:	2000047a 	.word	0x2000047a

00002bc8 <writePadBuffer>:

void writePadBuffer(u8_t bytesToWrite, u8_t* data) {
    2bc8:	b570      	push	{r4, r5, r6, lr}
    2bca:	4a0e      	ldr	r2, [pc, #56]	; (2c04 <writePadBuffer+0x3c>)
    2bcc:	4c0e      	ldr	r4, [pc, #56]	; (2c08 <writePadBuffer+0x40>)
    2bce:	2300      	movs	r3, #0
    u8_t i, j;

    for (i = 1; i < 10; i++) {
        for (j = 0; j < bytesToWrite; j++) {
    2bd0:	b2dd      	uxtb	r5, r3
    2bd2:	42a8      	cmp	r0, r5
    2bd4:	d905      	bls.n	2be2 <writePadBuffer+0x1a>
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
    2bd6:	001d      	movs	r5, r3
    2bd8:	5cd6      	ldrb	r6, [r2, r3]
    2bda:	3d23      	subs	r5, #35	; 0x23
    2bdc:	5556      	strb	r6, [r2, r5]
    2bde:	3301      	adds	r3, #1
    2be0:	e7f6      	b.n	2bd0 <writePadBuffer+0x8>
    2be2:	3223      	adds	r2, #35	; 0x23
}

void writePadBuffer(u8_t bytesToWrite, u8_t* data) {
    u8_t i, j;

    for (i = 1; i < 10; i++) {
    2be4:	42a2      	cmp	r2, r4
    2be6:	d1f2      	bne.n	2bce <writePadBuffer+0x6>
    2be8:	2300      	movs	r3, #0
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
        }
    }

    for (i = 0; i < bytesToWrite ; i++) {
        padSensorBuffer[9][i] = data[i];
    2bea:	4c08      	ldr	r4, [pc, #32]	; (2c0c <writePadBuffer+0x44>)
        for (j = 0; j < bytesToWrite; j++) {
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
        }
    }

    for (i = 0; i < bytesToWrite ; i++) {
    2bec:	b2da      	uxtb	r2, r3
    2bee:	4290      	cmp	r0, r2
    2bf0:	d906      	bls.n	2c00 <writePadBuffer+0x38>
        padSensorBuffer[9][i] = data[i];
    2bf2:	001a      	movs	r2, r3
    2bf4:	5ccd      	ldrb	r5, [r1, r3]
    2bf6:	323c      	adds	r2, #60	; 0x3c
    2bf8:	32ff      	adds	r2, #255	; 0xff
    2bfa:	54a5      	strb	r5, [r4, r2]
    2bfc:	3301      	adds	r3, #1
    2bfe:	e7f5      	b.n	2bec <writePadBuffer+0x24>
    }
}
    2c00:	bd70      	pop	{r4, r5, r6, pc}
    2c02:	46c0      	nop			; (mov r8, r8)
    2c04:	200004a7 	.word	0x200004a7
    2c08:	200005e2 	.word	0x200005e2
    2c0c:	20000484 	.word	0x20000484

00002c10 <logFlight>:


void logFlight() {
    2c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    2c12:	2346      	movs	r3, #70	; 0x46
    2c14:	466a      	mov	r2, sp
    2c16:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    2c18:	2300      	movs	r3, #0

    offsets.TminusZeroTime = sample.sampleTick;

    dataToSend[2] = offsets.TminusZeroTime >> 0;
    2c1a:	4669      	mov	r1, sp
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    2c1c:	4668      	mov	r0, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;
    2c1e:	7053      	strb	r3, [r2, #1]

    offsets.TminusZeroTime = sample.sampleTick;
    2c20:	4b11      	ldr	r3, [pc, #68]	; (2c68 <logFlight+0x58>)
    2c22:	4a12      	ldr	r2, [pc, #72]	; (2c6c <logFlight+0x5c>)
    2c24:	685b      	ldr	r3, [r3, #4]

    dataToSend[2] = offsets.TminusZeroTime >> 0;
    2c26:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    2c28:	0a19      	lsrs	r1, r3, #8
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;

    offsets.TminusZeroTime = sample.sampleTick;
    2c2a:	6053      	str	r3, [r2, #4]

    dataToSend[2] = offsets.TminusZeroTime >> 0;
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    2c2c:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    2c2e:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.TminusZeroTime >> 24;
    2c30:	0e1b      	lsrs	r3, r3, #24
    2c32:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    2c34:	6993      	ldr	r3, [r2, #24]

    offsets.TminusZeroTime = sample.sampleTick;

    dataToSend[2] = offsets.TminusZeroTime >> 0;
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    2c36:	7101      	strb	r1, [r0, #4]
    dataToSend[5] = offsets.TminusZeroTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    2c38:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = offsets.TminusZeroTime >> 0;
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    dataToSend[5] = offsets.TminusZeroTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    2c3a:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    2c3c:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    2c3e:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    2c40:	0e1b      	lsrs	r3, r3, #24
    2c42:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    2c44:	6a13      	ldr	r3, [r2, #32]
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    dataToSend[5] = offsets.TminusZeroTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    2c46:	7201      	strb	r1, [r0, #8]
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    2c48:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    2c4a:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    2c4c:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    2c4e:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    2c50:	0e1b      	lsrs	r3, r3, #24
    2c52:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    2c54:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    dataToSend[12] = offsets.groundTemperature >> 16;
    2c56:	7302      	strb	r2, [r0, #12]
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    2c58:	73c3      	strb	r3, [r0, #15]
    dataToSend[5] = offsets.TminusZeroTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;
    2c5a:	4669      	mov	r1, sp
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
    2c5c:	2010      	movs	r0, #16
    2c5e:	4b04      	ldr	r3, [pc, #16]	; (2c70 <logFlight+0x60>)
    2c60:	4798      	blx	r3
}
    2c62:	b005      	add	sp, #20
    2c64:	bd00      	pop	{pc}
    2c66:	46c0      	nop			; (mov r8, r8)
    2c68:	200005f0 	.word	0x200005f0
    2c6c:	20000150 	.word	0x20000150
    2c70:	00002b39 	.word	0x00002b39

00002c74 <logEvent>:

void logEvent(u8_t eventType) {
    2c74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;
    2c76:	4d12      	ldr	r5, [pc, #72]	; (2cc0 <logEvent+0x4c>)
    2c78:	4b12      	ldr	r3, [pc, #72]	; (2cc4 <logEvent+0x50>)
    2c7a:	686a      	ldr	r2, [r5, #4]
    2c7c:	685b      	ldr	r3, [r3, #4]

    dataToSend[0] = EVENT_LOG;
    2c7e:	ac01      	add	r4, sp, #4
void logEvent(u8_t eventType) {

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;
    2c80:	1ad3      	subs	r3, r2, r3

    dataToSend[0] = EVENT_LOG;
    2c82:	2245      	movs	r2, #69	; 0x45
    2c84:	7022      	strb	r2, [r4, #0]
    dataToSend[1] = eventType;
    dataToSend[2] = eventTick >> 0;
    dataToSend[3] = eventTick >> 8;
    2c86:	0a1a      	lsrs	r2, r3, #8
    dataToSend[4] = eventTick >> 16;
    dataToSend[5] = eventTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    2c88:	4e0f      	ldr	r6, [pc, #60]	; (2cc8 <logEvent+0x54>)

    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = eventTick >> 0;
    2c8a:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = eventTick >> 8;
    2c8c:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = eventTick >> 16;
    2c8e:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = eventTick >> 24;
    2c90:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = eventTick >> 0;
    dataToSend[3] = eventTick >> 8;
    dataToSend[4] = eventTick >> 16;
    2c92:	7122      	strb	r2, [r4, #4]
    dataToSend[5] = eventTick >> 24;
    2c94:	7163      	strb	r3, [r4, #5]
    u8_t dataToSend[12];

    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    2c96:	7060      	strb	r0, [r4, #1]
    dataToSend[2] = eventTick >> 0;
    dataToSend[3] = eventTick >> 8;
    dataToSend[4] = eventTick >> 16;
    dataToSend[5] = eventTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    2c98:	47b0      	blx	r6
    2c9a:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 8;
    2c9c:	47b0      	blx	r6
    2c9e:	1200      	asrs	r0, r0, #8
    2ca0:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 16;
    2ca2:	47b0      	blx	r6
    2ca4:	1400      	asrs	r0, r0, #16
    2ca6:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = altitudeAGL() >> 24;
    2ca8:	47b0      	blx	r6
    2caa:	1600      	asrs	r0, r0, #24
    2cac:	7260      	strb	r0, [r4, #9]

    dataToSend[10] = sample.voltage.batV >> 0;
    2cae:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    2cb0:	0021      	movs	r1, r4
    dataToSend[6] = altitudeAGL() >> 0;
    dataToSend[7] = altitudeAGL() >> 8;
    dataToSend[8] = altitudeAGL() >> 16;
    dataToSend[9] = altitudeAGL() >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    2cb2:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    2cb4:	0a1b      	lsrs	r3, r3, #8
    2cb6:	72e3      	strb	r3, [r4, #11]

    makePage(bytesToSend, dataToSend);
    2cb8:	200c      	movs	r0, #12
    2cba:	4b04      	ldr	r3, [pc, #16]	; (2ccc <logEvent+0x58>)
    2cbc:	4798      	blx	r3

}
    2cbe:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    2cc0:	200005f0 	.word	0x200005f0
    2cc4:	20000150 	.word	0x20000150
    2cc8:	00000b21 	.word	0x00000b21
    2ccc:	00002b39 	.word	0x00002b39

00002cd0 <logSensors>:

void logSensors() {

    writeLog = false;
    2cd0:	2200      	movs	r2, #0

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2cd2:	b5f0      	push	{r4, r5, r6, r7, lr}

    writeLog = false;
    2cd4:	4b59      	ldr	r3, [pc, #356]	; (2e3c <logSensors+0x16c>)

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2cd6:	b08f      	sub	sp, #60	; 0x3c

    writeLog = false;
    2cd8:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = SENSOR_LOG_LENGTH;
    u8_t dataToSend[SENSOR_LOG_LENGTH];

    float fractionalAccel = accel - (int16_t)(accel);
    2cda:	4b59      	ldr	r3, [pc, #356]	; (2e40 <logSensors+0x170>)
    2cdc:	681e      	ldr	r6, [r3, #0]
    2cde:	685f      	ldr	r7, [r3, #4]
    int16_t fractAccelPart = fractionalAccel * 1000;
    2ce0:	4b58      	ldr	r3, [pc, #352]	; (2e44 <logSensors+0x174>)
    2ce2:	0039      	movs	r1, r7
    2ce4:	0030      	movs	r0, r6
    2ce6:	4798      	blx	r3
    2ce8:	4d57      	ldr	r5, [pc, #348]	; (2e48 <logSensors+0x178>)
    2cea:	b200      	sxth	r0, r0
    2cec:	47a8      	blx	r5
    2cee:	4c57      	ldr	r4, [pc, #348]	; (2e4c <logSensors+0x17c>)
    2cf0:	0002      	movs	r2, r0
    2cf2:	000b      	movs	r3, r1
    2cf4:	0030      	movs	r0, r6
    2cf6:	0039      	movs	r1, r7
    2cf8:	47a0      	blx	r4
    2cfa:	4f55      	ldr	r7, [pc, #340]	; (2e50 <logSensors+0x180>)
    2cfc:	47b8      	blx	r7
    2cfe:	4b55      	ldr	r3, [pc, #340]	; (2e54 <logSensors+0x184>)
    2d00:	4955      	ldr	r1, [pc, #340]	; (2e58 <logSensors+0x188>)
    2d02:	4798      	blx	r3
    2d04:	4e55      	ldr	r6, [pc, #340]	; (2e5c <logSensors+0x18c>)
    2d06:	47b0      	blx	r6
    2d08:	b203      	sxth	r3, r0
    2d0a:	9301      	str	r3, [sp, #4]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    2d0c:	4b54      	ldr	r3, [pc, #336]	; (2e60 <logSensors+0x190>)
    2d0e:	681a      	ldr	r2, [r3, #0]
    2d10:	685b      	ldr	r3, [r3, #4]
    2d12:	9202      	str	r2, [sp, #8]
    2d14:	9303      	str	r3, [sp, #12]
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2d16:	0010      	movs	r0, r2
    2d18:	0019      	movs	r1, r3
    2d1a:	4b4a      	ldr	r3, [pc, #296]	; (2e44 <logSensors+0x174>)
    2d1c:	4798      	blx	r3
    2d1e:	b200      	sxth	r0, r0
    2d20:	47a8      	blx	r5
    2d22:	0002      	movs	r2, r0
    2d24:	000b      	movs	r3, r1
    2d26:	9802      	ldr	r0, [sp, #8]
    2d28:	9903      	ldr	r1, [sp, #12]
    2d2a:	47a0      	blx	r4
    2d2c:	47b8      	blx	r7
    2d2e:	494a      	ldr	r1, [pc, #296]	; (2e58 <logSensors+0x188>)
    2d30:	4b48      	ldr	r3, [pc, #288]	; (2e54 <logSensors+0x184>)
    2d32:	4798      	blx	r3
    2d34:	47b0      	blx	r6

    dataToSend[0] = SENSOR_LOG;
    2d36:	2353      	movs	r3, #83	; 0x53

    dataToSend[1] = sample.sampleTick >> 0;
    2d38:	4d4a      	ldr	r5, [pc, #296]	; (2e64 <logSensors+0x194>)
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;
    2d3a:	ac05      	add	r4, sp, #20
    2d3c:	7023      	strb	r3, [r4, #0]

    dataToSend[1] = sample.sampleTick >> 0;
    2d3e:	686b      	ldr	r3, [r5, #4]

    float fractionalAccel = accel - (int16_t)(accel);
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2d40:	b206      	sxth	r6, r0

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    2d42:	0a1a      	lsrs	r2, r3, #8
    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    2d44:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    2d46:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    2d48:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    2d4a:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    2d4c:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    2d4e:	7123      	strb	r3, [r4, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    2d50:	4f45      	ldr	r7, [pc, #276]	; (2e68 <logSensors+0x198>)
    2d52:	47b8      	blx	r7
    2d54:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    2d56:	47b8      	blx	r7
    2d58:	1200      	asrs	r0, r0, #8
    2d5a:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    2d5c:	47b8      	blx	r7
    2d5e:	1400      	asrs	r0, r0, #16
    2d60:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    2d62:	47b8      	blx	r7

    dataToSend[9] = (int16_t)(accel) >> 0;
    2d64:	4b36      	ldr	r3, [pc, #216]	; (2e40 <logSensors+0x170>)
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    2d66:	1600      	asrs	r0, r0, #24
    2d68:	7220      	strb	r0, [r4, #8]

    dataToSend[9] = (int16_t)(accel) >> 0;
    2d6a:	6818      	ldr	r0, [r3, #0]
    2d6c:	6859      	ldr	r1, [r3, #4]
    2d6e:	4b35      	ldr	r3, [pc, #212]	; (2e44 <logSensors+0x174>)
    2d70:	4798      	blx	r3
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2d72:	466b      	mov	r3, sp
    2d74:	791b      	ldrb	r3, [r3, #4]
    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    2d76:	b200      	sxth	r0, r0
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2d78:	72e3      	strb	r3, [r4, #11]
    dataToSend[12] = fractAccelPart >> 8;
    2d7a:	9b01      	ldr	r3, [sp, #4]
    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    2d7c:	7260      	strb	r0, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    2d7e:	1200      	asrs	r0, r0, #8
    2d80:	72a0      	strb	r0, [r4, #10]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    2d82:	1218      	asrs	r0, r3, #8

    dataToSend[13] = (int16_t)(velocity) >> 0;
    2d84:	4b36      	ldr	r3, [pc, #216]	; (2e60 <logSensors+0x190>)
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    2d86:	7320      	strb	r0, [r4, #12]

    dataToSend[13] = (int16_t)(velocity) >> 0;
    2d88:	6818      	ldr	r0, [r3, #0]
    2d8a:	6859      	ldr	r1, [r3, #4]
    2d8c:	4b2d      	ldr	r3, [pc, #180]	; (2e44 <logSensors+0x174>)
    2d8e:	4798      	blx	r3
    2d90:	b200      	sxth	r0, r0
    2d92:	7360      	strb	r0, [r4, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    2d94:	73e6      	strb	r6, [r4, #15]
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2d96:	1200      	asrs	r0, r0, #8
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    2d98:	1236      	asrs	r6, r6, #8

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2d9a:	4b34      	ldr	r3, [pc, #208]	; (2e6c <logSensors+0x19c>)
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2d9c:	73a0      	strb	r0, [r4, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    2d9e:	7426      	strb	r6, [r4, #16]

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2da2:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    2da4:	4798      	blx	r3
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    2da6:	0a03      	lsrs	r3, r0, #8
    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2da8:	7460      	strb	r0, [r4, #17]
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    2daa:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    2dac:	0c03      	lsrs	r3, r0, #16
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;
    2dae:	0e00      	lsrs	r0, r0, #24
    2db0:	7520      	strb	r0, [r4, #20]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    2db2:	74e3      	strb	r3, [r4, #19]
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    2db4:	2220      	movs	r2, #32
    2db6:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    makePage(bytesToSend, dataToSend);
    2db8:	0021      	movs	r1, r4
    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    2dba:	7563      	strb	r3, [r4, #21]
    dataToSend[22] = sample.accelXint >> 8;
    2dbc:	121b      	asrs	r3, r3, #8
    2dbe:	75a3      	strb	r3, [r4, #22]

    dataToSend[23] = sample.accelYint >> 0;
    2dc0:	2228      	movs	r2, #40	; 0x28
    2dc2:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    makePage(bytesToSend, dataToSend);
    2dc4:	2023      	movs	r0, #35	; 0x23
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    dataToSend[22] = sample.accelXint >> 8;

    dataToSend[23] = sample.accelYint >> 0;
    2dc6:	75e3      	strb	r3, [r4, #23]
    dataToSend[24] = sample.accelYint >> 8;
    2dc8:	121b      	asrs	r3, r3, #8
    2dca:	7623      	strb	r3, [r4, #24]

    dataToSend[25] = sample.accelZint >> 0;
    2dcc:	2230      	movs	r2, #48	; 0x30
    2dce:	5eab      	ldrsh	r3, [r5, r2]
    2dd0:	7663      	strb	r3, [r4, #25]
    dataToSend[26] = sample.accelZint >> 8;
    2dd2:	121b      	asrs	r3, r3, #8
    2dd4:	76a3      	strb	r3, [r4, #26]

    dataToSend[27] = sample.gyroXint >> 0;
    2dd6:	2238      	movs	r2, #56	; 0x38
    2dd8:	5eab      	ldrsh	r3, [r5, r2]
    2dda:	76e3      	strb	r3, [r4, #27]
    dataToSend[28] = sample.gyroXint >> 8;
    2ddc:	121b      	asrs	r3, r3, #8
    2dde:	7723      	strb	r3, [r4, #28]

    dataToSend[29] = sample.gyroYint >> 0;
    2de0:	1cab      	adds	r3, r5, #2
    2de2:	223e      	movs	r2, #62	; 0x3e
    2de4:	5e9b      	ldrsh	r3, [r3, r2]
    2de6:	7763      	strb	r3, [r4, #29]
    dataToSend[30] = sample.gyroYint >> 8;
    2de8:	121b      	asrs	r3, r3, #8
    2dea:	77a3      	strb	r3, [r4, #30]

    dataToSend[31] = sample.gyroZint >> 0;
    2dec:	002b      	movs	r3, r5
    2dee:	3348      	adds	r3, #72	; 0x48
    2df0:	2200      	movs	r2, #0
    2df2:	5e9b      	ldrsh	r3, [r3, r2]
    dataToSend[32] = sample.gyroZint >> 8;
    2df4:	aa04      	add	r2, sp, #16
    dataToSend[28] = sample.gyroXint >> 8;

    dataToSend[29] = sample.gyroYint >> 0;
    dataToSend[30] = sample.gyroYint >> 8;

    dataToSend[31] = sample.gyroZint >> 0;
    2df6:	77e3      	strb	r3, [r4, #31]
    dataToSend[32] = sample.gyroZint >> 8;
    2df8:	3205      	adds	r2, #5
    2dfa:	121b      	asrs	r3, r3, #8
    2dfc:	77d3      	strb	r3, [r2, #31]

    dataToSend[33] = sample.analogRaw >> 0;
    2dfe:	8b2b      	ldrh	r3, [r5, #24]
    2e00:	aa04      	add	r2, sp, #16
    2e02:	3206      	adds	r2, #6
    2e04:	77d3      	strb	r3, [r2, #31]
    dataToSend[34] = sample.analogRaw >> 8;
    2e06:	aa04      	add	r2, sp, #16
    2e08:	3207      	adds	r2, #7
    2e0a:	0a1b      	lsrs	r3, r3, #8
    2e0c:	77d3      	strb	r3, [r2, #31]

    makePage(bytesToSend, dataToSend);
    2e0e:	4b18      	ldr	r3, [pc, #96]	; (2e70 <logSensors+0x1a0>)
    2e10:	4798      	blx	r3

    if (pageReady) {
    2e12:	4b18      	ldr	r3, [pc, #96]	; (2e74 <logSensors+0x1a4>)
    2e14:	781a      	ldrb	r2, [r3, #0]
    2e16:	2a00      	cmp	r2, #0
    2e18:	d00e      	beq.n	2e38 <logSensors+0x168>
        pageReady = false;
    2e1a:	2200      	movs	r2, #0
    2e1c:	701a      	strb	r2, [r3, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    2e1e:	2280      	movs	r2, #128	; 0x80
    2e20:	4b15      	ldr	r3, [pc, #84]	; (2e78 <logSensors+0x1a8>)
        pinToggle(LedPin);
        AT25SEWritePage(currentAddress,pageToWrite);
    2e22:	4c16      	ldr	r4, [pc, #88]	; (2e7c <logSensors+0x1ac>)
    2e24:	0352      	lsls	r2, r2, #13
    2e26:	61da      	str	r2, [r3, #28]
    2e28:	4915      	ldr	r1, [pc, #84]	; (2e80 <logSensors+0x1b0>)
    2e2a:	4b16      	ldr	r3, [pc, #88]	; (2e84 <logSensors+0x1b4>)
    2e2c:	6820      	ldr	r0, [r4, #0]
    2e2e:	4798      	blx	r3
        currentAddress = (currentAddress + 0x100);
    2e30:	6823      	ldr	r3, [r4, #0]
    2e32:	3301      	adds	r3, #1
    2e34:	33ff      	adds	r3, #255	; 0xff
    2e36:	6023      	str	r3, [r4, #0]
    }

}
    2e38:	b00f      	add	sp, #60	; 0x3c
    2e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e3c:	2000019a 	.word	0x2000019a
    2e40:	200002e8 	.word	0x200002e8
    2e44:	00006c6d 	.word	0x00006c6d
    2e48:	00006cd9 	.word	0x00006cd9
    2e4c:	00006585 	.word	0x00006585
    2e50:	00006e75 	.word	0x00006e75
    2e54:	00004f85 	.word	0x00004f85
    2e58:	447a0000 	.word	0x447a0000
    2e5c:	000051ad 	.word	0x000051ad
    2e60:	20000308 	.word	0x20000308
    2e64:	200005f0 	.word	0x200005f0
    2e68:	00000b21 	.word	0x00000b21
    2e6c:	00004f49 	.word	0x00004f49
    2e70:	00002b39 	.word	0x00002b39
    2e74:	2000047a 	.word	0x2000047a
    2e78:	41004400 	.word	0x41004400
    2e7c:	20000480 	.word	0x20000480
    2e80:	2000037a 	.word	0x2000037a
    2e84:	000002a5 	.word	0x000002a5

00002e88 <logSensorsOnPad>:

void logSensorsOnPad() {

    writeLog = false;
    2e88:	2200      	movs	r2, #0
        currentAddress = (currentAddress + 0x100);
    }

}

void logSensorsOnPad() {
    2e8a:	b5f0      	push	{r4, r5, r6, r7, lr}

    writeLog = false;
    2e8c:	4b50      	ldr	r3, [pc, #320]	; (2fd0 <logSensorsOnPad+0x148>)
        currentAddress = (currentAddress + 0x100);
    }

}

void logSensorsOnPad() {
    2e8e:	b08f      	sub	sp, #60	; 0x3c

    writeLog = false;
    2e90:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = SENSOR_LOG_LENGTH;
    u8_t dataToSend[SENSOR_LOG_LENGTH];

    float fractionalAccel = accel - (int16_t)(accel);
    2e92:	4b50      	ldr	r3, [pc, #320]	; (2fd4 <logSensorsOnPad+0x14c>)
    2e94:	681c      	ldr	r4, [r3, #0]
    2e96:	685d      	ldr	r5, [r3, #4]
    int16_t fractAccelPart = fractionalAccel * 1000;
    2e98:	4b4f      	ldr	r3, [pc, #316]	; (2fd8 <logSensorsOnPad+0x150>)
    2e9a:	0029      	movs	r1, r5
    2e9c:	0020      	movs	r0, r4
    2e9e:	4798      	blx	r3
    2ea0:	4e4e      	ldr	r6, [pc, #312]	; (2fdc <logSensorsOnPad+0x154>)
    2ea2:	b200      	sxth	r0, r0
    2ea4:	47b0      	blx	r6
    2ea6:	4f4e      	ldr	r7, [pc, #312]	; (2fe0 <logSensorsOnPad+0x158>)
    2ea8:	0002      	movs	r2, r0
    2eaa:	000b      	movs	r3, r1
    2eac:	0020      	movs	r0, r4
    2eae:	0029      	movs	r1, r5
    2eb0:	47b8      	blx	r7
    2eb2:	4c4c      	ldr	r4, [pc, #304]	; (2fe4 <logSensorsOnPad+0x15c>)
    2eb4:	47a0      	blx	r4
    2eb6:	4d4c      	ldr	r5, [pc, #304]	; (2fe8 <logSensorsOnPad+0x160>)
    2eb8:	494c      	ldr	r1, [pc, #304]	; (2fec <logSensorsOnPad+0x164>)
    2eba:	47a8      	blx	r5
    2ebc:	4b4c      	ldr	r3, [pc, #304]	; (2ff0 <logSensorsOnPad+0x168>)
    2ebe:	4798      	blx	r3
    2ec0:	b203      	sxth	r3, r0
    2ec2:	9301      	str	r3, [sp, #4]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    2ec4:	4b4b      	ldr	r3, [pc, #300]	; (2ff4 <logSensorsOnPad+0x16c>)
    2ec6:	681a      	ldr	r2, [r3, #0]
    2ec8:	685b      	ldr	r3, [r3, #4]
    2eca:	9202      	str	r2, [sp, #8]
    2ecc:	9303      	str	r3, [sp, #12]
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2ece:	0010      	movs	r0, r2
    2ed0:	0019      	movs	r1, r3
    2ed2:	4b41      	ldr	r3, [pc, #260]	; (2fd8 <logSensorsOnPad+0x150>)
    2ed4:	4798      	blx	r3
    2ed6:	b200      	sxth	r0, r0
    2ed8:	47b0      	blx	r6
    2eda:	0002      	movs	r2, r0
    2edc:	000b      	movs	r3, r1
    2ede:	9802      	ldr	r0, [sp, #8]
    2ee0:	9903      	ldr	r1, [sp, #12]
    2ee2:	47b8      	blx	r7
    2ee4:	47a0      	blx	r4
    2ee6:	4941      	ldr	r1, [pc, #260]	; (2fec <logSensorsOnPad+0x164>)
    2ee8:	47a8      	blx	r5
    2eea:	4b41      	ldr	r3, [pc, #260]	; (2ff0 <logSensorsOnPad+0x168>)
    2eec:	4798      	blx	r3

    dataToSend[0] = SENSOR_LOG;
    2eee:	2353      	movs	r3, #83	; 0x53

    dataToSend[1] = sample.sampleTick >> 0;
    2ef0:	4d41      	ldr	r5, [pc, #260]	; (2ff8 <logSensorsOnPad+0x170>)
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;
    2ef2:	ac05      	add	r4, sp, #20
    2ef4:	7023      	strb	r3, [r4, #0]

    dataToSend[1] = sample.sampleTick >> 0;
    2ef6:	686b      	ldr	r3, [r5, #4]

    float fractionalAccel = accel - (int16_t)(accel);
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2ef8:	b206      	sxth	r6, r0

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    2efa:	0a1a      	lsrs	r2, r3, #8
    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    2efc:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    2efe:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    2f00:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    2f02:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    2f04:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    2f06:	7123      	strb	r3, [r4, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    2f08:	4f3c      	ldr	r7, [pc, #240]	; (2ffc <logSensorsOnPad+0x174>)
    2f0a:	47b8      	blx	r7
    2f0c:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    2f0e:	47b8      	blx	r7
    2f10:	1200      	asrs	r0, r0, #8
    2f12:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    2f14:	47b8      	blx	r7
    2f16:	1400      	asrs	r0, r0, #16
    2f18:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    2f1a:	47b8      	blx	r7

    dataToSend[9] = (int16_t)(accel) >> 0;
    2f1c:	4b2d      	ldr	r3, [pc, #180]	; (2fd4 <logSensorsOnPad+0x14c>)
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    2f1e:	1600      	asrs	r0, r0, #24
    2f20:	7220      	strb	r0, [r4, #8]

    dataToSend[9] = (int16_t)(accel) >> 0;
    2f22:	6818      	ldr	r0, [r3, #0]
    2f24:	6859      	ldr	r1, [r3, #4]
    2f26:	4b2c      	ldr	r3, [pc, #176]	; (2fd8 <logSensorsOnPad+0x150>)
    2f28:	4798      	blx	r3
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2f2a:	466b      	mov	r3, sp
    2f2c:	791b      	ldrb	r3, [r3, #4]
    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    2f2e:	b200      	sxth	r0, r0
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2f30:	72e3      	strb	r3, [r4, #11]
    dataToSend[12] = fractAccelPart >> 8;
    2f32:	9b01      	ldr	r3, [sp, #4]
    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    2f34:	7260      	strb	r0, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    2f36:	1200      	asrs	r0, r0, #8
    2f38:	72a0      	strb	r0, [r4, #10]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    2f3a:	1218      	asrs	r0, r3, #8

    dataToSend[13] = (int16_t)(velocity) >> 0;
    2f3c:	4b2d      	ldr	r3, [pc, #180]	; (2ff4 <logSensorsOnPad+0x16c>)
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    2f3e:	7320      	strb	r0, [r4, #12]

    dataToSend[13] = (int16_t)(velocity) >> 0;
    2f40:	6818      	ldr	r0, [r3, #0]
    2f42:	6859      	ldr	r1, [r3, #4]
    2f44:	4b24      	ldr	r3, [pc, #144]	; (2fd8 <logSensorsOnPad+0x150>)
    2f46:	4798      	blx	r3
    2f48:	b200      	sxth	r0, r0
    2f4a:	7360      	strb	r0, [r4, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    2f4c:	73e6      	strb	r6, [r4, #15]
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2f4e:	1200      	asrs	r0, r0, #8
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    2f50:	1236      	asrs	r6, r6, #8
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2f52:	73a0      	strb	r0, [r4, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2f54:	4b2a      	ldr	r3, [pc, #168]	; (3000 <logSensorsOnPad+0x178>)
    2f56:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2f58:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    2f5a:	7426      	strb	r6, [r4, #16]

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2f5c:	4798      	blx	r3
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    2f5e:	0a03      	lsrs	r3, r0, #8
    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2f60:	7460      	strb	r0, [r4, #17]
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    2f62:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    2f64:	0c03      	lsrs	r3, r0, #16
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;
    2f66:	0e00      	lsrs	r0, r0, #24
    2f68:	7520      	strb	r0, [r4, #20]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    2f6a:	74e3      	strb	r3, [r4, #19]
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    2f6c:	2220      	movs	r2, #32
    2f6e:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    writePadBuffer(bytesToSend, dataToSend);
    2f70:	0021      	movs	r1, r4
    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    2f72:	7563      	strb	r3, [r4, #21]
    dataToSend[22] = sample.accelXint >> 8;
    2f74:	121b      	asrs	r3, r3, #8
    2f76:	75a3      	strb	r3, [r4, #22]

    dataToSend[23] = sample.accelYint >> 0;
    2f78:	2228      	movs	r2, #40	; 0x28
    2f7a:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    writePadBuffer(bytesToSend, dataToSend);
    2f7c:	2023      	movs	r0, #35	; 0x23
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    dataToSend[22] = sample.accelXint >> 8;

    dataToSend[23] = sample.accelYint >> 0;
    2f7e:	75e3      	strb	r3, [r4, #23]
    dataToSend[24] = sample.accelYint >> 8;
    2f80:	121b      	asrs	r3, r3, #8
    2f82:	7623      	strb	r3, [r4, #24]

    dataToSend[25] = sample.accelZint >> 0;
    2f84:	2230      	movs	r2, #48	; 0x30
    2f86:	5eab      	ldrsh	r3, [r5, r2]
    2f88:	7663      	strb	r3, [r4, #25]
    dataToSend[26] = sample.accelZint >> 8;
    2f8a:	121b      	asrs	r3, r3, #8
    2f8c:	76a3      	strb	r3, [r4, #26]

    dataToSend[27] = sample.gyroXint >> 0;
    2f8e:	2238      	movs	r2, #56	; 0x38
    2f90:	5eab      	ldrsh	r3, [r5, r2]
    2f92:	76e3      	strb	r3, [r4, #27]
    dataToSend[28] = sample.gyroXint >> 8;
    2f94:	121b      	asrs	r3, r3, #8
    2f96:	7723      	strb	r3, [r4, #28]

    dataToSend[29] = sample.gyroYint >> 0;
    2f98:	1cab      	adds	r3, r5, #2
    2f9a:	223e      	movs	r2, #62	; 0x3e
    2f9c:	5e9b      	ldrsh	r3, [r3, r2]
    2f9e:	7763      	strb	r3, [r4, #29]
    dataToSend[30] = sample.gyroYint >> 8;
    2fa0:	121b      	asrs	r3, r3, #8
    2fa2:	77a3      	strb	r3, [r4, #30]

    dataToSend[31] = sample.gyroZint >> 0;
    2fa4:	002b      	movs	r3, r5
    2fa6:	3348      	adds	r3, #72	; 0x48
    2fa8:	2200      	movs	r2, #0
    2faa:	5e9b      	ldrsh	r3, [r3, r2]
    dataToSend[32] = sample.gyroZint >> 8;
    2fac:	aa04      	add	r2, sp, #16
    dataToSend[28] = sample.gyroXint >> 8;

    dataToSend[29] = sample.gyroYint >> 0;
    dataToSend[30] = sample.gyroYint >> 8;

    dataToSend[31] = sample.gyroZint >> 0;
    2fae:	77e3      	strb	r3, [r4, #31]
    dataToSend[32] = sample.gyroZint >> 8;
    2fb0:	3205      	adds	r2, #5
    2fb2:	121b      	asrs	r3, r3, #8
    2fb4:	77d3      	strb	r3, [r2, #31]

    dataToSend[33] = sample.analogRaw >> 0;
    2fb6:	8b2b      	ldrh	r3, [r5, #24]
    2fb8:	aa04      	add	r2, sp, #16
    2fba:	3206      	adds	r2, #6
    2fbc:	77d3      	strb	r3, [r2, #31]
    dataToSend[34] = sample.analogRaw >> 8;
    2fbe:	aa04      	add	r2, sp, #16
    2fc0:	3207      	adds	r2, #7
    2fc2:	0a1b      	lsrs	r3, r3, #8
    2fc4:	77d3      	strb	r3, [r2, #31]

    writePadBuffer(bytesToSend, dataToSend);
    2fc6:	4b0f      	ldr	r3, [pc, #60]	; (3004 <logSensorsOnPad+0x17c>)
    2fc8:	4798      	blx	r3

}
    2fca:	b00f      	add	sp, #60	; 0x3c
    2fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2fce:	46c0      	nop			; (mov r8, r8)
    2fd0:	2000019a 	.word	0x2000019a
    2fd4:	200002e8 	.word	0x200002e8
    2fd8:	00006c6d 	.word	0x00006c6d
    2fdc:	00006cd9 	.word	0x00006cd9
    2fe0:	00006585 	.word	0x00006585
    2fe4:	00006e75 	.word	0x00006e75
    2fe8:	00004f85 	.word	0x00004f85
    2fec:	447a0000 	.word	0x447a0000
    2ff0:	000051ad 	.word	0x000051ad
    2ff4:	20000308 	.word	0x20000308
    2ff8:	200005f0 	.word	0x200005f0
    2ffc:	00000b21 	.word	0x00000b21
    3000:	00004f49 	.word	0x00004f49
    3004:	00002bc9 	.word	0x00002bc9

00003008 <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    3008:	2306      	movs	r3, #6

}



u32_t getFlightStartAddress(u8_t flightToFind) {
    300a:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    300c:	4358      	muls	r0, r3
    300e:	ac01      	add	r4, sp, #4
    3010:	3001      	adds	r0, #1
    3012:	30ff      	adds	r0, #255	; 0xff
    3014:	0022      	movs	r2, r4
    3016:	2103      	movs	r1, #3
    3018:	4b04      	ldr	r3, [pc, #16]	; (302c <getFlightStartAddress+0x24>)
    301a:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    301c:	7860      	ldrb	r0, [r4, #1]
    301e:	78a3      	ldrb	r3, [r4, #2]
    3020:	0200      	lsls	r0, r0, #8
    3022:	041b      	lsls	r3, r3, #16
    3024:	4318      	orrs	r0, r3
    3026:	7823      	ldrb	r3, [r4, #0]
    3028:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    302a:	bd16      	pop	{r1, r2, r4, pc}
    302c:	00000301 	.word	0x00000301

00003030 <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    3030:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    3032:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    3034:	4358      	muls	r0, r3
    3036:	ac01      	add	r4, sp, #4
    3038:	3004      	adds	r0, #4
    303a:	30ff      	adds	r0, #255	; 0xff
    303c:	0022      	movs	r2, r4
    303e:	2103      	movs	r1, #3
    3040:	4b04      	ldr	r3, [pc, #16]	; (3054 <FindFlightEndingAddress+0x24>)
    3042:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    3044:	7860      	ldrb	r0, [r4, #1]
    3046:	78a3      	ldrb	r3, [r4, #2]
    3048:	0200      	lsls	r0, r0, #8
    304a:	041b      	lsls	r3, r3, #16
    304c:	4318      	orrs	r0, r3
    304e:	7823      	ldrb	r3, [r4, #0]
    3050:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    3052:	bd16      	pop	{r1, r2, r4, pc}
    3054:	00000301 	.word	0x00000301

00003058 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    3058:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    305a:	4b04      	ldr	r3, [pc, #16]	; (306c <isFlightLogged+0x14>)
    305c:	4798      	blx	r3
    305e:	4b04      	ldr	r3, [pc, #16]	; (3070 <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    3060:	18c0      	adds	r0, r0, r3
    3062:	1e43      	subs	r3, r0, #1
    3064:	4198      	sbcs	r0, r3
    3066:	b2c0      	uxtb	r0, r0
    3068:	bd10      	pop	{r4, pc}
    306a:	46c0      	nop			; (mov r8, r8)
    306c:	00003009 	.word	0x00003009
    3070:	ff000001 	.word	0xff000001

00003074 <writeFlightStartAddress>:

void writeFlightStartAddress() {
    3074:	b510      	push	{r4, lr}
    AT25SFWriteBytes(flightAddressLocationInIndex,3,flightStartAddress);
    3076:	4b03      	ldr	r3, [pc, #12]	; (3084 <writeFlightStartAddress+0x10>)
    3078:	4a03      	ldr	r2, [pc, #12]	; (3088 <writeFlightStartAddress+0x14>)
    307a:	8818      	ldrh	r0, [r3, #0]
    307c:	2103      	movs	r1, #3
    307e:	4b03      	ldr	r3, [pc, #12]	; (308c <writeFlightStartAddress+0x18>)
    3080:	4798      	blx	r3
}
    3082:	bd10      	pop	{r4, pc}
    3084:	20000378 	.word	0x20000378
    3088:	2000047b 	.word	0x2000047b
    308c:	00000241 	.word	0x00000241

00003090 <writeFlightEndAddress>:




void writeFlightEndAddress() {
    3090:	b507      	push	{r0, r1, r2, lr}
    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    3092:	2006      	movs	r0, #6



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    3094:	4b09      	ldr	r3, [pc, #36]	; (30bc <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    3096:	aa01      	add	r2, sp, #4



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    3098:	681b      	ldr	r3, [r3, #0]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    309a:	7013      	strb	r3, [r2, #0]
    309c:	0a19      	lsrs	r1, r3, #8
    309e:	0c1b      	lsrs	r3, r3, #16
    30a0:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    30a2:	4b07      	ldr	r3, [pc, #28]	; (30c0 <writeFlightEndAddress+0x30>)

void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    30a4:	7051      	strb	r1, [r2, #1]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    30a6:	781b      	ldrb	r3, [r3, #0]
    30a8:	2103      	movs	r1, #3
    30aa:	4358      	muls	r0, r3
    30ac:	3004      	adds	r0, #4
    30ae:	30ff      	adds	r0, #255	; 0xff
    30b0:	4b04      	ldr	r3, [pc, #16]	; (30c4 <writeFlightEndAddress+0x34>)
    30b2:	4798      	blx	r3
    delay_ms(10);
    30b4:	200a      	movs	r0, #10
    30b6:	4b04      	ldr	r3, [pc, #16]	; (30c8 <writeFlightEndAddress+0x38>)
    30b8:	4798      	blx	r3
}
    30ba:	bd07      	pop	{r0, r1, r2, pc}
    30bc:	20000480 	.word	0x20000480
    30c0:	2000019b 	.word	0x2000019b
    30c4:	00000241 	.word	0x00000241
    30c8:	00001035 	.word	0x00001035

000030cc <writeGroundLog>:

void writeGroundLog() {
    30cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30ce:	2780      	movs	r7, #128	; 0x80
    u8_t i;

    for (i = 0; i < 10; i++) {
    30d0:	26af      	movs	r6, #175	; 0xaf
    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    delay_ms(10);
}

void writeGroundLog() {
    30d2:	2400      	movs	r4, #0
    30d4:	037f      	lsls	r7, r7, #13
    u8_t i;

    for (i = 0; i < 10; i++) {
    30d6:	0076      	lsls	r6, r6, #1
        makePage(SENSOR_LOG_LENGTH, &padSensorBuffer[i][0]);
    30d8:	490c      	ldr	r1, [pc, #48]	; (310c <writeGroundLog+0x40>)
    30da:	4b0d      	ldr	r3, [pc, #52]	; (3110 <writeGroundLog+0x44>)
    30dc:	1861      	adds	r1, r4, r1
    30de:	2023      	movs	r0, #35	; 0x23
    30e0:	4798      	blx	r3

        if (pageReady) {
    30e2:	4b0c      	ldr	r3, [pc, #48]	; (3114 <writeGroundLog+0x48>)
    30e4:	781a      	ldrb	r2, [r3, #0]
    30e6:	2a00      	cmp	r2, #0
    30e8:	d00c      	beq.n	3104 <writeGroundLog+0x38>
            pageReady = false;
    30ea:	2200      	movs	r2, #0
    30ec:	701a      	strb	r2, [r3, #0]
    30ee:	4b0a      	ldr	r3, [pc, #40]	; (3118 <writeGroundLog+0x4c>)
            pinToggle(LedPin);
            AT25SEWritePage(currentAddress,pageToWrite);
    30f0:	4d0a      	ldr	r5, [pc, #40]	; (311c <writeGroundLog+0x50>)
    30f2:	61df      	str	r7, [r3, #28]
    30f4:	490a      	ldr	r1, [pc, #40]	; (3120 <writeGroundLog+0x54>)
    30f6:	4b0b      	ldr	r3, [pc, #44]	; (3124 <writeGroundLog+0x58>)
    30f8:	6828      	ldr	r0, [r5, #0]
    30fa:	4798      	blx	r3
            currentAddress = (currentAddress + 0x100);
    30fc:	682b      	ldr	r3, [r5, #0]
    30fe:	3301      	adds	r3, #1
    3100:	33ff      	adds	r3, #255	; 0xff
    3102:	602b      	str	r3, [r5, #0]
    3104:	3423      	adds	r4, #35	; 0x23
}

void writeGroundLog() {
    u8_t i;

    for (i = 0; i < 10; i++) {
    3106:	42b4      	cmp	r4, r6
    3108:	d1e6      	bne.n	30d8 <writeGroundLog+0xc>
            currentAddress = (currentAddress + 0x100);
        }

    }

}
    310a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    310c:	20000484 	.word	0x20000484
    3110:	00002b39 	.word	0x00002b39
    3114:	2000047a 	.word	0x2000047a
    3118:	41004400 	.word	0x41004400
    311c:	20000480 	.word	0x20000480
    3120:	2000037a 	.word	0x2000037a
    3124:	000002a5 	.word	0x000002a5

00003128 <beginFlightLog>:

void beginFlightLog() {
    3128:	b510      	push	{r4, lr}
    writeFlightStartAddress();
    312a:	4b05      	ldr	r3, [pc, #20]	; (3140 <beginFlightLog+0x18>)
    312c:	4798      	blx	r3
    logFlight( );
    312e:	4b05      	ldr	r3, [pc, #20]	; (3144 <beginFlightLog+0x1c>)
    3130:	4798      	blx	r3
    writeGroundLog();
    3132:	4b05      	ldr	r3, [pc, #20]	; (3148 <beginFlightLog+0x20>)
    3134:	4798      	blx	r3
    logEvent('L');
    3136:	204c      	movs	r0, #76	; 0x4c
    3138:	4b04      	ldr	r3, [pc, #16]	; (314c <beginFlightLog+0x24>)
    313a:	4798      	blx	r3

}
    313c:	bd10      	pop	{r4, pc}
    313e:	46c0      	nop			; (mov r8, r8)
    3140:	00003075 	.word	0x00003075
    3144:	00002c11 	.word	0x00002c11
    3148:	000030cd 	.word	0x000030cd
    314c:	00002c75 	.word	0x00002c75

00003150 <findNewFlightStart>:


void findNewFlightStart() {
    3150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    3152:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    3154:	0020      	movs	r0, r4
    3156:	4b1d      	ldr	r3, [pc, #116]	; (31cc <findNewFlightStart+0x7c>)
    3158:	4798      	blx	r3
    315a:	2800      	cmp	r0, #0
    315c:	d130      	bne.n	31c0 <findNewFlightStart+0x70>
    315e:	4f1c      	ldr	r7, [pc, #112]	; (31d0 <findNewFlightStart+0x80>)
    3160:	4d1c      	ldr	r5, [pc, #112]	; (31d4 <findNewFlightStart+0x84>)

            if (flightNumbToCheck > 0) {
    3162:	2c00      	cmp	r4, #0
    3164:	d014      	beq.n	3190 <findNewFlightStart+0x40>

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    3166:	1e60      	subs	r0, r4, #1
    3168:	4b1b      	ldr	r3, [pc, #108]	; (31d8 <findNewFlightStart+0x88>)
    316a:	b2c0      	uxtb	r0, r0
    316c:	4798      	blx	r3
    316e:	0006      	movs	r6, r0
                delay_ms(5);
    3170:	4b1a      	ldr	r3, [pc, #104]	; (31dc <findNewFlightStart+0x8c>)
    3172:	2005      	movs	r0, #5
    3174:	4798      	blx	r3

                currentAddress = startAddress;

                flightStartAddress[0] = startAddress >> 0;
                flightStartAddress[1] = startAddress >> 8;
    3176:	0a33      	lsrs	r3, r6, #8
    3178:	706b      	strb	r3, [r5, #1]
                flightStartAddress[2] = startAddress >> 16;

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    317a:	2306      	movs	r3, #6
    317c:	4363      	muls	r3, r4
    317e:	4a18      	ldr	r2, [pc, #96]	; (31e0 <findNewFlightStart+0x90>)
    3180:	3301      	adds	r3, #1
            if (flightNumbToCheck > 0) {

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;
    3182:	603e      	str	r6, [r7, #0]

                flightStartAddress[0] = startAddress >> 0;
    3184:	702e      	strb	r6, [r5, #0]
                flightStartAddress[1] = startAddress >> 8;
                flightStartAddress[2] = startAddress >> 16;

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    3186:	33ff      	adds	r3, #255	; 0xff

                currentAddress = startAddress;

                flightStartAddress[0] = startAddress >> 0;
                flightStartAddress[1] = startAddress >> 8;
                flightStartAddress[2] = startAddress >> 16;
    3188:	0c36      	lsrs	r6, r6, #16
    318a:	70ae      	strb	r6, [r5, #2]

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    318c:	8013      	strh	r3, [r2, #0]
    318e:	e00d      	b.n	31ac <findNewFlightStart+0x5c>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
                flightStartAddress[1] = 0x10;
    3190:	2310      	movs	r3, #16
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;
    3192:	4a13      	ldr	r2, [pc, #76]	; (31e0 <findNewFlightStart+0x90>)
                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
                flightStartAddress[1] = 0x10;
    3194:	706b      	strb	r3, [r5, #1]
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;
    3196:	33f0      	adds	r3, #240	; 0xf0
    3198:	8013      	strh	r3, [r2, #0]

                currentAddress = 0x001000;
    319a:	2380      	movs	r3, #128	; 0x80
                beep(1000);
    319c:	20fa      	movs	r0, #250	; 0xfa
                flightStartAddress[1] = 0x10;
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;

                currentAddress = 0x001000;
    319e:	015b      	lsls	r3, r3, #5
    31a0:	603b      	str	r3, [r7, #0]
                beep(1000);
    31a2:	0080      	lsls	r0, r0, #2
    31a4:	4b0f      	ldr	r3, [pc, #60]	; (31e4 <findNewFlightStart+0x94>)

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
    31a6:	702c      	strb	r4, [r5, #0]
                flightStartAddress[1] = 0x10;
                flightStartAddress[2] = 0x00;
    31a8:	70ac      	strb	r4, [r5, #2]

                flightAddressLocationInIndex = FLIGHTZEROSTART;

                currentAddress = 0x001000;
                beep(1000);
    31aa:	4798      	blx	r3
            }
            flightNumb = flightNumbToCheck;
    31ac:	4b0e      	ldr	r3, [pc, #56]	; (31e8 <findNewFlightStart+0x98>)

            beepDigit(flightNumb);
    31ae:	0020      	movs	r0, r4
                flightAddressLocationInIndex = FLIGHTZEROSTART;

                currentAddress = 0x001000;
                beep(1000);
            }
            flightNumb = flightNumbToCheck;
    31b0:	701c      	strb	r4, [r3, #0]

            beepDigit(flightNumb);
    31b2:	4b0e      	ldr	r3, [pc, #56]	; (31ec <findNewFlightStart+0x9c>)
    31b4:	4798      	blx	r3
            delay_ms(1000);
    31b6:	20fa      	movs	r0, #250	; 0xfa
    31b8:	4b08      	ldr	r3, [pc, #32]	; (31dc <findNewFlightStart+0x8c>)
    31ba:	0080      	lsls	r0, r0, #2
    31bc:	4798      	blx	r3
            break;
    31be:	e003      	b.n	31c8 <findNewFlightStart+0x78>
}


void findNewFlightStart() {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    31c0:	3401      	adds	r4, #1
    31c2:	b2e4      	uxtb	r4, r4
    31c4:	2c14      	cmp	r4, #20
    31c6:	d1c5      	bne.n	3154 <findNewFlightStart+0x4>
            beepDigit(flightNumb);
            delay_ms(1000);
            break;
        }
    }
}
    31c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    31ca:	46c0      	nop			; (mov r8, r8)
    31cc:	00003059 	.word	0x00003059
    31d0:	20000480 	.word	0x20000480
    31d4:	2000047b 	.word	0x2000047b
    31d8:	00003031 	.word	0x00003031
    31dc:	00001035 	.word	0x00001035
    31e0:	20000378 	.word	0x20000378
    31e4:	00000d31 	.word	0x00000d31
    31e8:	2000019b 	.word	0x2000019b
    31ec:	00000d79 	.word	0x00000d79

000031f0 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    31f0:	4b01      	ldr	r3, [pc, #4]	; (31f8 <takeSample+0x8>)
    31f2:	7818      	ldrb	r0, [r3, #0]
}
    31f4:	4770      	bx	lr
    31f6:	46c0      	nop			; (mov r8, r8)
    31f8:	200001ad 	.word	0x200001ad

000031fc <pullSample>:

void pullSample() {
    SampleBool = true;
    31fc:	2201      	movs	r2, #1
    31fe:	4b01      	ldr	r3, [pc, #4]	; (3204 <pullSample+0x8>)
    3200:	701a      	strb	r2, [r3, #0]
}
    3202:	4770      	bx	lr
    3204:	200001ad 	.word	0x200001ad

00003208 <sampleTick>:
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    3208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    SampleBool = false;
    320a:	2200      	movs	r2, #0
    320c:	4ba7      	ldr	r3, [pc, #668]	; (34ac <sampleTick+0x2a4>)

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    320e:	4fa8      	ldr	r7, [pc, #672]	; (34b0 <sampleTick+0x2a8>)
}

sample_t sample;

void sampleTick() {
    SampleBool = false;
    3210:	701a      	strb	r2, [r3, #0]

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis();
    3212:	4ba8      	ldr	r3, [pc, #672]	; (34b4 <sampleTick+0x2ac>)

void sampleTick() {
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    3214:	687c      	ldr	r4, [r7, #4]
    sample.sampleTick = millis();
    3216:	4798      	blx	r3
    3218:	6078      	str	r0, [r7, #4]
    sample.tickDelta = sample.sampleTick - lastTick;
    321a:	1b00      	subs	r0, r0, r4

    sample.voltage.batV = adc_read(senseBatPin);
    321c:	4ca6      	ldr	r4, [pc, #664]	; (34b8 <sampleTick+0x2b0>)
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis();
    sample.tickDelta = sample.sampleTick - lastTick;
    321e:	8038      	strh	r0, [r7, #0]

    sample.voltage.batV = adc_read(senseBatPin);
    3220:	7863      	ldrb	r3, [r4, #1]
    3222:	7821      	ldrb	r1, [r4, #0]
    3224:	78a0      	ldrb	r0, [r4, #2]
    3226:	021b      	lsls	r3, r3, #8
    3228:	430b      	orrs	r3, r1
    322a:	0400      	lsls	r0, r0, #16
    322c:	001a      	movs	r2, r3
    322e:	0003      	movs	r3, r0
    3230:	78e0      	ldrb	r0, [r4, #3]
    3232:	4313      	orrs	r3, r2
    3234:	0600      	lsls	r0, r0, #24
    3236:	4ea1      	ldr	r6, [pc, #644]	; (34bc <sampleTick+0x2b4>)
    3238:	7921      	ldrb	r1, [r4, #4]
    323a:	4318      	orrs	r0, r3
    323c:	47b0      	blx	r6

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    323e:	4ba0      	ldr	r3, [pc, #640]	; (34c0 <sampleTick+0x2b8>)
    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis();
    sample.tickDelta = sample.sampleTick - lastTick;

    sample.voltage.batV = adc_read(senseBatPin);
    3240:	8138      	strh	r0, [r7, #8]

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    3242:	4798      	blx	r3
    3244:	4a9f      	ldr	r2, [pc, #636]	; (34c4 <sampleTick+0x2bc>)
    3246:	4da0      	ldr	r5, [pc, #640]	; (34c8 <sampleTick+0x2c0>)
    3248:	4ba0      	ldr	r3, [pc, #640]	; (34cc <sampleTick+0x2c4>)
    324a:	47a8      	blx	r5
    324c:	4ba0      	ldr	r3, [pc, #640]	; (34d0 <sampleTick+0x2c8>)
    324e:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    3250:	79a3      	ldrb	r3, [r4, #6]
    3252:	7961      	ldrb	r1, [r4, #5]
    sample.sampleTick = millis();
    sample.tickDelta = sample.sampleTick - lastTick;

    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    3254:	60f8      	str	r0, [r7, #12]

    sample.voltage.senseA = adc_read(senseAPin);
    3256:	79e0      	ldrb	r0, [r4, #7]
    3258:	021b      	lsls	r3, r3, #8
    325a:	430b      	orrs	r3, r1
    325c:	0400      	lsls	r0, r0, #16
    325e:	001a      	movs	r2, r3
    3260:	0003      	movs	r3, r0
    3262:	7a20      	ldrb	r0, [r4, #8]
    3264:	4313      	orrs	r3, r2
    3266:	0600      	lsls	r0, r0, #24
    3268:	7a61      	ldrb	r1, [r4, #9]
    326a:	4318      	orrs	r0, r3
    326c:	47b0      	blx	r6
    sample.voltage.senseB = adc_read(senseBPin);
    326e:	7ae3      	ldrb	r3, [r4, #11]
    3270:	7aa1      	ldrb	r1, [r4, #10]

    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    3272:	8238      	strh	r0, [r7, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    3274:	7b20      	ldrb	r0, [r4, #12]
    3276:	021b      	lsls	r3, r3, #8
    3278:	430b      	orrs	r3, r1
    327a:	0400      	lsls	r0, r0, #16
    327c:	001a      	movs	r2, r3
    327e:	0003      	movs	r3, r0
    3280:	7b60      	ldrb	r0, [r4, #13]
    3282:	4313      	orrs	r3, r2
    3284:	0600      	lsls	r0, r0, #24
    3286:	7ba1      	ldrb	r1, [r4, #14]
    3288:	4318      	orrs	r0, r3
    328a:	47b0      	blx	r6
    sample.voltage.senseC = adc_read(senseCPin);
    328c:	7c23      	ldrb	r3, [r4, #16]
    328e:	7be1      	ldrb	r1, [r4, #15]
    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    3290:	8278      	strh	r0, [r7, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    3292:	7c60      	ldrb	r0, [r4, #17]
    3294:	021b      	lsls	r3, r3, #8
    3296:	430b      	orrs	r3, r1
    3298:	0400      	lsls	r0, r0, #16
    329a:	001a      	movs	r2, r3
    329c:	0003      	movs	r3, r0
    329e:	7ca0      	ldrb	r0, [r4, #18]
    32a0:	4313      	orrs	r3, r2
    32a2:	0600      	lsls	r0, r0, #24
    32a4:	7ce1      	ldrb	r1, [r4, #19]
    32a6:	4318      	orrs	r0, r3
    32a8:	47b0      	blx	r6
    sample.voltage.senseD = adc_read(senseDPin);
    32aa:	7d63      	ldrb	r3, [r4, #21]
    32ac:	7d21      	ldrb	r1, [r4, #20]

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    32ae:	82b8      	strh	r0, [r7, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    32b0:	7da0      	ldrb	r0, [r4, #22]
    32b2:	021b      	lsls	r3, r3, #8
    32b4:	430b      	orrs	r3, r1
    32b6:	0400      	lsls	r0, r0, #16
    32b8:	001a      	movs	r2, r3
    32ba:	0003      	movs	r3, r0
    32bc:	7de0      	ldrb	r0, [r4, #23]
    32be:	4313      	orrs	r3, r2
    32c0:	0600      	lsls	r0, r0, #24
    32c2:	7e21      	ldrb	r1, [r4, #24]
    32c4:	4318      	orrs	r0, r3
    32c6:	47b0      	blx	r6


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    32c8:	2210      	movs	r2, #16
    32ca:	4d82      	ldr	r5, [pc, #520]	; (34d4 <sampleTick+0x2cc>)
    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);
    32cc:	82f8      	strh	r0, [r7, #22]


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    32ce:	88ab      	ldrh	r3, [r5, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    32d0:	7e61      	ldrb	r1, [r4, #25]
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    32d2:	4313      	orrs	r3, r2
    32d4:	80ab      	strh	r3, [r5, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;
    32d6:	2304      	movs	r3, #4
    32d8:	70ab      	strb	r3, [r5, #2]

    sample.analogRaw = adc_read(analogAccelPin);
    32da:	7ea3      	ldrb	r3, [r4, #26]
    32dc:	7ee0      	ldrb	r0, [r4, #27]
    32de:	021b      	lsls	r3, r3, #8
    32e0:	430b      	orrs	r3, r1
    32e2:	0400      	lsls	r0, r0, #16
    32e4:	4303      	orrs	r3, r0
    32e6:	7f20      	ldrb	r0, [r4, #28]
    32e8:	7f61      	ldrb	r1, [r4, #29]
    32ea:	0600      	lsls	r0, r0, #24
    32ec:	4318      	orrs	r0, r3
    32ee:	47b0      	blx	r6
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    32f0:	4b79      	ldr	r3, [pc, #484]	; (34d8 <sampleTick+0x2d0>)


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    32f2:	8338      	strh	r0, [r7, #24]
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    32f4:	18c0      	adds	r0, r0, r3
    32f6:	4b72      	ldr	r3, [pc, #456]	; (34c0 <sampleTick+0x2b8>)
    32f8:	4798      	blx	r3
    32fa:	4a78      	ldr	r2, [pc, #480]	; (34dc <sampleTick+0x2d4>)
    32fc:	4c72      	ldr	r4, [pc, #456]	; (34c8 <sampleTick+0x2c0>)
    32fe:	4b78      	ldr	r3, [pc, #480]	; (34e0 <sampleTick+0x2d8>)
    3300:	47a0      	blx	r4
    3302:	4b73      	ldr	r3, [pc, #460]	; (34d0 <sampleTick+0x2c8>)
    3304:	4798      	blx	r3



    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    3306:	2300      	movs	r3, #0

    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    3308:	61f8      	str	r0, [r7, #28]



    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    330a:	70ab      	strb	r3, [r5, #2]
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_12BIT;
    330c:	88ab      	ldrh	r3, [r5, #4]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    330e:	4e75      	ldr	r6, [pc, #468]	; (34e4 <sampleTick+0x2dc>)
    3310:	b29b      	uxth	r3, r3
    3312:	80ab      	strh	r3, [r5, #4]
    3314:	2580      	movs	r5, #128	; 0x80
    3316:	01ed      	lsls	r5, r5, #7

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    3318:	2150      	movs	r1, #80	; 0x50
    331a:	4c73      	ldr	r4, [pc, #460]	; (34e8 <sampleTick+0x2e0>)
    331c:	6175      	str	r5, [r6, #20]
    331e:	2002      	movs	r0, #2
    3320:	47a0      	blx	r4
    pinHigh(cs_baro);
    delay_us(600);
    3322:	2096      	movs	r0, #150	; 0x96
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    3324:	61b5      	str	r5, [r6, #24]
    3326:	0080      	lsls	r0, r0, #2
    3328:	4b70      	ldr	r3, [pc, #448]	; (34ec <sampleTick+0x2e4>)
    332a:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    332c:	4b70      	ldr	r3, [pc, #448]	; (34f0 <sampleTick+0x2e8>)
    332e:	4798      	blx	r3

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    3330:	2140      	movs	r1, #64	; 0x40

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    pinHigh(cs_baro);
    delay_us(600);
    uint32_t tempRaw = readMS5803AdcResults();
    3332:	9001      	str	r0, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    3334:	6175      	str	r5, [r6, #20]

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    3336:	2002      	movs	r0, #2
    3338:	47a0      	blx	r4
    333a:	2280      	movs	r2, #128	; 0x80
    333c:	4b6d      	ldr	r3, [pc, #436]	; (34f4 <sampleTick+0x2ec>)
    333e:	00d2      	lsls	r2, r2, #3

    u8_t byteOne;
    u8_t byteTwo;
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    3340:	2182      	movs	r1, #130	; 0x82
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    3342:	61b5      	str	r5, [r6, #24]
    3344:	2000      	movs	r0, #0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    3346:	601a      	str	r2, [r3, #0]
    3348:	47a0      	blx	r4
    byteOne = spiDataIn(ACCEL_SPI);
    334a:	4d6b      	ldr	r5, [pc, #428]	; (34f8 <sampleTick+0x2f0>)
    334c:	2000      	movs	r0, #0
    334e:	47a8      	blx	r5
    3350:	0004      	movs	r4, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    3352:	2000      	movs	r0, #0
    3354:	47a8      	blx	r5
    sample.accelXint = twosComp(byteOne,byteTwo);
    3356:	0200      	lsls	r0, r0, #8
    3358:	4304      	orrs	r4, r0
    byteOne = spiDataIn(ACCEL_SPI);
    335a:	2000      	movs	r0, #0
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelXint = twosComp(byteOne,byteTwo);
    335c:	843c      	strh	r4, [r7, #32]
    byteOne = spiDataIn(ACCEL_SPI);
    335e:	47a8      	blx	r5
    3360:	0004      	movs	r4, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    3362:	2000      	movs	r0, #0
    3364:	47a8      	blx	r5
    sample.accelYint = twosComp(byteOne,byteTwo);
    3366:	0200      	lsls	r0, r0, #8
    3368:	4304      	orrs	r4, r0
    byteOne = spiDataIn(ACCEL_SPI);
    336a:	2000      	movs	r0, #0
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelYint = twosComp(byteOne,byteTwo);
    336c:	853c      	strh	r4, [r7, #40]	; 0x28
    byteOne = spiDataIn(ACCEL_SPI);
    336e:	47a8      	blx	r5
    3370:	0004      	movs	r4, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    3372:	2000      	movs	r0, #0
    3374:	47a8      	blx	r5
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    3376:	2280      	movs	r2, #128	; 0x80
    3378:	4b60      	ldr	r3, [pc, #384]	; (34fc <sampleTick+0x2f4>)
    337a:	00d2      	lsls	r2, r2, #3
    337c:	601a      	str	r2, [r3, #0]
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    if (altimeter.pointingUp) {
    337e:	4b60      	ldr	r3, [pc, #384]	; (3500 <sampleTick+0x2f8>)
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    3380:	0200      	lsls	r0, r0, #8
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    if (altimeter.pointingUp) {
    3382:	795a      	ldrb	r2, [r3, #5]
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    3384:	4304      	orrs	r4, r0
    3386:	9600      	str	r6, [sp, #0]
    3388:	b224      	sxth	r4, r4
    338a:	003d      	movs	r5, r7
    338c:	2120      	movs	r1, #32
    338e:	5e7b      	ldrsh	r3, [r7, r1]
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    if (altimeter.pointingUp) {
    3390:	2a00      	cmp	r2, #0
    3392:	d000      	beq.n	3396 <sampleTick+0x18e>
        sample.accelXint =  -sample.accelXint >> 4;
    3394:	425b      	negs	r3, r3
    } else {
        sample.accelXint =  sample.accelXint >> 4;
    3396:	111b      	asrs	r3, r3, #4
    3398:	842b      	strh	r3, [r5, #32]
    }
    sample.accelYint =  sample.accelYint >> 4;
    339a:	2328      	movs	r3, #40	; 0x28
    339c:	5eee      	ldrsh	r6, [r5, r3]
    sample.accelZint =  sample.accelZint >> 4;
    339e:	1124      	asrs	r4, r4, #4
    if (altimeter.pointingUp) {
        sample.accelXint =  -sample.accelXint >> 4;
    } else {
        sample.accelXint =  sample.accelXint >> 4;
    }
    sample.accelYint =  sample.accelYint >> 4;
    33a0:	1136      	asrs	r6, r6, #4
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    33a2:	2320      	movs	r3, #32
    33a4:	5ee8      	ldrsh	r0, [r5, r3]
    if (altimeter.pointingUp) {
        sample.accelXint =  -sample.accelXint >> 4;
    } else {
        sample.accelXint =  sample.accelXint >> 4;
    }
    sample.accelYint =  sample.accelYint >> 4;
    33a6:	852e      	strh	r6, [r5, #40]	; 0x28
    sample.accelZint =  sample.accelZint >> 4;
    33a8:	862c      	strh	r4, [r5, #48]	; 0x30

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    33aa:	4b45      	ldr	r3, [pc, #276]	; (34c0 <sampleTick+0x2b8>)
    33ac:	4798      	blx	r3
    33ae:	23fe      	movs	r3, #254	; 0xfe
    33b0:	2200      	movs	r2, #0
    33b2:	059b      	lsls	r3, r3, #22
    33b4:	4f44      	ldr	r7, [pc, #272]	; (34c8 <sampleTick+0x2c0>)
    33b6:	47b8      	blx	r7
    33b8:	4f45      	ldr	r7, [pc, #276]	; (34d0 <sampleTick+0x2c8>)
    33ba:	47b8      	blx	r7
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    33bc:	4b40      	ldr	r3, [pc, #256]	; (34c0 <sampleTick+0x2b8>)
        sample.accelXint =  sample.accelXint >> 4;
    }
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    33be:	6268      	str	r0, [r5, #36]	; 0x24
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    33c0:	0030      	movs	r0, r6
    33c2:	4798      	blx	r3
    33c4:	23fe      	movs	r3, #254	; 0xfe
    33c6:	2200      	movs	r2, #0
    33c8:	4e3f      	ldr	r6, [pc, #252]	; (34c8 <sampleTick+0x2c0>)
    33ca:	059b      	lsls	r3, r3, #22
    33cc:	47b0      	blx	r6
    33ce:	47b8      	blx	r7
    sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    33d0:	4b3b      	ldr	r3, [pc, #236]	; (34c0 <sampleTick+0x2b8>)
    }
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    33d2:	62e8      	str	r0, [r5, #44]	; 0x2c
    sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    33d4:	0020      	movs	r0, r4
    33d6:	4798      	blx	r3
    33d8:	23fe      	movs	r3, #254	; 0xfe
    33da:	2200      	movs	r2, #0
    33dc:	059b      	lsls	r3, r3, #22
    33de:	47b0      	blx	r6
    33e0:	47b8      	blx	r7
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    33e2:	2280      	movs	r2, #128	; 0x80
    33e4:	9b00      	ldr	r3, [sp, #0]
    33e6:	00d2      	lsls	r2, r2, #3

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    33e8:	2182      	movs	r1, #130	; 0x82
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    33ea:	6368      	str	r0, [r5, #52]	; 0x34
    33ec:	615a      	str	r2, [r3, #20]

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    33ee:	2000      	movs	r0, #0
    33f0:	4b3d      	ldr	r3, [pc, #244]	; (34e8 <sampleTick+0x2e0>)
    33f2:	4798      	blx	r3
    byteOne = spiDataIn(GYRO_SPI);
    33f4:	4e40      	ldr	r6, [pc, #256]	; (34f8 <sampleTick+0x2f0>)
    33f6:	2000      	movs	r0, #0
    33f8:	47b0      	blx	r6
    33fa:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    33fc:	2000      	movs	r0, #0
    33fe:	47b0      	blx	r6
    sample.gyroXint = twosComp(byteOne,byteTwo);
    3400:	0200      	lsls	r0, r0, #8
    3402:	4304      	orrs	r4, r0
    byteOne = spiDataIn(GYRO_SPI);
    3404:	2000      	movs	r0, #0
    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroXint = twosComp(byteOne,byteTwo);
    3406:	872c      	strh	r4, [r5, #56]	; 0x38
    byteOne = spiDataIn(GYRO_SPI);
    3408:	47b0      	blx	r6
    340a:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    340c:	2000      	movs	r0, #0
    340e:	47b0      	blx	r6
    sample.gyroYint = twosComp(byteOne,byteTwo);
    3410:	4b3c      	ldr	r3, [pc, #240]	; (3504 <sampleTick+0x2fc>)
    3412:	0200      	lsls	r0, r0, #8
    3414:	4304      	orrs	r4, r0
    byteOne = spiDataIn(GYRO_SPI);
    3416:	2000      	movs	r0, #0
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroYint = twosComp(byteOne,byteTwo);
    3418:	87dc      	strh	r4, [r3, #62]	; 0x3e
    byteOne = spiDataIn(GYRO_SPI);
    341a:	47b0      	blx	r6
    341c:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    341e:	2000      	movs	r0, #0
    3420:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    3422:	2180      	movs	r1, #128	; 0x80
    3424:	0003      	movs	r3, r0
    3426:	9a00      	ldr	r2, [sp, #0]
    3428:	00c9      	lsls	r1, r1, #3
    342a:	6191      	str	r1, [r2, #24]
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    342c:	2238      	movs	r2, #56	; 0x38
    342e:	5ea8      	ldrsh	r0, [r5, r2]
    sample.gyroYint = sample.gyroYint >> 4;
    3430:	4a34      	ldr	r2, [pc, #208]	; (3504 <sampleTick+0x2fc>)
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    3432:	1100      	asrs	r0, r0, #4
    3434:	8728      	strh	r0, [r5, #56]	; 0x38
    sample.gyroYint = sample.gyroYint >> 4;
    3436:	263e      	movs	r6, #62	; 0x3e
    3438:	5f96      	ldrsh	r6, [r2, r6]
    sample.gyroZint = sample.gyroZint >> 4;
    343a:	021b      	lsls	r3, r3, #8
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    343c:	4a31      	ldr	r2, [pc, #196]	; (3504 <sampleTick+0x2fc>)
    sample.gyroZint = sample.gyroZint >> 4;
    343e:	431c      	orrs	r4, r3
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    3440:	1136      	asrs	r6, r6, #4
    sample.gyroZint = sample.gyroZint >> 4;
    3442:	b224      	sxth	r4, r4
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    3444:	87d6      	strh	r6, [r2, #62]	; 0x3e
    sample.gyroZint = sample.gyroZint >> 4;
    3446:	1123      	asrs	r3, r4, #4
    3448:	466a      	mov	r2, sp
    344a:	9300      	str	r3, [sp, #0]
    344c:	002b      	movs	r3, r5
    344e:	8812      	ldrh	r2, [r2, #0]
    3450:	3348      	adds	r3, #72	; 0x48
    3452:	801a      	strh	r2, [r3, #0]

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    3454:	4b1a      	ldr	r3, [pc, #104]	; (34c0 <sampleTick+0x2b8>)
    3456:	4798      	blx	r3
    3458:	23fe      	movs	r3, #254	; 0xfe
    345a:	4c1b      	ldr	r4, [pc, #108]	; (34c8 <sampleTick+0x2c0>)
    345c:	2200      	movs	r2, #0
    345e:	059b      	lsls	r3, r3, #22
    3460:	47a0      	blx	r4
    3462:	47b8      	blx	r7
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    3464:	4b16      	ldr	r3, [pc, #88]	; (34c0 <sampleTick+0x2b8>)

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    sample.gyroZint = sample.gyroZint >> 4;

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    3466:	63e8      	str	r0, [r5, #60]	; 0x3c
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    3468:	0030      	movs	r0, r6
    346a:	4798      	blx	r3
    346c:	23fe      	movs	r3, #254	; 0xfe
    346e:	2200      	movs	r2, #0
    3470:	059b      	lsls	r3, r3, #22
    3472:	47a0      	blx	r4
    3474:	47b8      	blx	r7
    sample.gyroZ =  sample.gyroZint * BMI055_GYRO_2000DS_DIV;
    3476:	4b12      	ldr	r3, [pc, #72]	; (34c0 <sampleTick+0x2b8>)
    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    sample.gyroZint = sample.gyroZint >> 4;

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    3478:	6468      	str	r0, [r5, #68]	; 0x44
    sample.gyroZ =  sample.gyroZint * BMI055_GYRO_2000DS_DIV;
    347a:	9800      	ldr	r0, [sp, #0]
    347c:	4798      	blx	r3
    347e:	23fe      	movs	r3, #254	; 0xfe
    3480:	2200      	movs	r2, #0
    3482:	059b      	lsls	r3, r3, #22
    3484:	47a0      	blx	r4
    3486:	47b8      	blx	r7
    3488:	64e8      	str	r0, [r5, #76]	; 0x4c


    delay_us(400);
    348a:	20c8      	movs	r0, #200	; 0xc8
    348c:	4b17      	ldr	r3, [pc, #92]	; (34ec <sampleTick+0x2e4>)
    348e:	0040      	lsls	r0, r0, #1
    3490:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    3492:	4b17      	ldr	r3, [pc, #92]	; (34f0 <sampleTick+0x2e8>)
    3494:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    3496:	4a1c      	ldr	r2, [pc, #112]	; (3508 <sampleTick+0x300>)
    3498:	9901      	ldr	r1, [sp, #4]
    349a:	4b1c      	ldr	r3, [pc, #112]	; (350c <sampleTick+0x304>)
    349c:	4c1c      	ldr	r4, [pc, #112]	; (3510 <sampleTick+0x308>)
    349e:	47a0      	blx	r4
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
    34a0:	6d28      	ldr	r0, [r5, #80]	; 0x50
    34a2:	4b1c      	ldr	r3, [pc, #112]	; (3514 <sampleTick+0x30c>)
    34a4:	4798      	blx	r3
    34a6:	65a8      	str	r0, [r5, #88]	; 0x58
    34a8:	65e9      	str	r1, [r5, #92]	; 0x5c
}
    34aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    34ac:	200001ad 	.word	0x200001ad
    34b0:	200005f0 	.word	0x200005f0
    34b4:	00001081 	.word	0x00001081
    34b8:	00007020 	.word	0x00007020
    34bc:	00000cc9 	.word	0x00000cc9
    34c0:	00006cd9 	.word	0x00006cd9
    34c4:	a97e132b 	.word	0xa97e132b
    34c8:	00006091 	.word	0x00006091
    34cc:	3f65379f 	.word	0x3f65379f
    34d0:	00006e75 	.word	0x00006e75
    34d4:	42004000 	.word	0x42004000
    34d8:	ffff41c9 	.word	0xffff41c9
    34dc:	abb44e51 	.word	0xabb44e51
    34e0:	3f73f290 	.word	0x3f73f290
    34e4:	41004400 	.word	0x41004400
    34e8:	00003629 	.word	0x00003629
    34ec:	00001001 	.word	0x00001001
    34f0:	000003b5 	.word	0x000003b5
    34f4:	41004494 	.word	0x41004494
    34f8:	00003641 	.word	0x00003641
    34fc:	41004498 	.word	0x41004498
    3500:	200001a0 	.word	0x200001a0
    3504:	200005f2 	.word	0x200005f2
    3508:	20000644 	.word	0x20000644
    350c:	20000640 	.word	0x20000640
    3510:	000003f5 	.word	0x000003f5
    3514:	00000495 	.word	0x00000495

00003518 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    3518:	b570      	push	{r4, r5, r6, lr}
    351a:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    351c:	2301      	movs	r3, #1
    351e:	1ca6      	adds	r6, r4, #2
    3520:	40b3      	lsls	r3, r6
    3522:	480d      	ldr	r0, [pc, #52]	; (3558 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    3524:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    3526:	6a01      	ldr	r1, [r0, #32]
    3528:	430b      	orrs	r3, r1
    352a:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    352c:	2d00      	cmp	r5, #0
    352e:	d003      	beq.n	3538 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    3530:	2107      	movs	r1, #7
    3532:	0028      	movs	r0, r5
    3534:	4b09      	ldr	r3, [pc, #36]	; (355c <sercomClockEnable+0x44>)
    3536:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    3538:	22f0      	movs	r2, #240	; 0xf0
    353a:	2080      	movs	r0, #128	; 0x80
    353c:	0229      	lsls	r1, r5, #8
    353e:	0112      	lsls	r2, r2, #4
    3540:	4011      	ands	r1, r2
    3542:	01c0      	lsls	r0, r0, #7
    3544:	4301      	orrs	r1, r0
    3546:	0020      	movs	r0, r4
    3548:	3014      	adds	r0, #20
    354a:	223f      	movs	r2, #63	; 0x3f
    354c:	0003      	movs	r3, r0
    354e:	4013      	ands	r3, r2
    3550:	4319      	orrs	r1, r3
    3552:	4b03      	ldr	r3, [pc, #12]	; (3560 <sercomClockEnable+0x48>)
    3554:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    3556:	bd70      	pop	{r4, r5, r6, pc}
    3558:	40000400 	.word	0x40000400
    355c:	00000f31 	.word	0x00000f31
    3560:	40000c00 	.word	0x40000c00

00003564 <sercomReset>:
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    3564:	4b04      	ldr	r3, [pc, #16]	; (3578 <sercomReset+0x14>)
    3566:	0280      	lsls	r0, r0, #10
    3568:	18c0      	adds	r0, r0, r3
//                         GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    356a:	2301      	movs	r3, #1
    356c:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    356e:	6802      	ldr	r2, [r0, #0]
    3570:	421a      	tst	r2, r3
    3572:	d1fc      	bne.n	356e <sercomReset+0xa>
}
    3574:	4770      	bx	lr
    3576:	46c0      	nop			; (mov r8, r8)
    3578:	42000800 	.word	0x42000800

0000357c <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    357c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    357e:	0004      	movs	r4, r0
    3580:	9300      	str	r3, [sp, #0]
    3582:	ab08      	add	r3, sp, #32
    3584:	781b      	ldrb	r3, [r3, #0]
    3586:	000e      	movs	r6, r1
    3588:	9301      	str	r3, [sp, #4]
    358a:	ab09      	add	r3, sp, #36	; 0x24
    358c:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    358e:	4b12      	ldr	r3, [pc, #72]	; (35d8 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    3590:	0015      	movs	r5, r2

    sercomReset(id);
    3592:	4798      	blx	r3
    3594:	4b11      	ldr	r3, [pc, #68]	; (35dc <sercomSpiMasterInit+0x60>)
    3596:	02a4      	lsls	r4, r4, #10
    3598:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    359a:	2380      	movs	r3, #128	; 0x80
    359c:	029b      	lsls	r3, r3, #10
    359e:	6063      	str	r3, [r4, #4]
    35a0:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    35a2:	21c0      	movs	r1, #192	; 0xc0
    35a4:	042d      	lsls	r5, r5, #16
    35a6:	029b      	lsls	r3, r3, #10
    35a8:	402b      	ands	r3, r5
    35aa:	250e      	movs	r5, #14
    35ac:	0536      	lsls	r6, r6, #20
    35ae:	0389      	lsls	r1, r1, #14
    35b0:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    35b2:	9e00      	ldr	r6, [sp, #0]
    35b4:	431d      	orrs	r5, r3
    35b6:	1e73      	subs	r3, r6, #1
    35b8:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    35ba:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    35bc:	0772      	lsls	r2, r6, #29
    35be:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    35c0:	432a      	orrs	r2, r5
    35c2:	1e59      	subs	r1, r3, #1
    35c4:	418b      	sbcs	r3, r1
    35c6:	0016      	movs	r6, r2
    35c8:	071b      	lsls	r3, r3, #28
    35ca:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    35cc:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    35ce:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    35d0:	69e3      	ldr	r3, [r4, #28]
    35d2:	075b      	lsls	r3, r3, #29
    35d4:	d4fc      	bmi.n	35d0 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    35d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    35d8:	00003565 	.word	0x00003565
    35dc:	42000800 	.word	0x42000800

000035e0 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    35e0:	b570      	push	{r4, r5, r6, lr}
    35e2:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    35e4:	4b0c      	ldr	r3, [pc, #48]	; (3618 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    35e6:	000d      	movs	r5, r1
    35e8:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    35ea:	4798      	blx	r3
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    35ec:	4b0b      	ldr	r3, [pc, #44]	; (361c <sercomUartInit+0x3c>)
    35ee:	02b0      	lsls	r0, r6, #10
    35f0:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    35f2:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    35f4:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    35f6:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    35f8:	4b09      	ldr	r3, [pc, #36]	; (3620 <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    35fa:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    35fc:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    35fe:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    3600:	0392      	lsls	r2, r2, #14
    3602:	4011      	ands	r1, r2
    3604:	4a07      	ldr	r2, [pc, #28]	; (3624 <sercomUartInit+0x44>)

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    3606:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    3608:	0424      	lsls	r4, r4, #16

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    360a:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    360c:	4311      	orrs	r1, r2
    360e:	4023      	ands	r3, r4
    3610:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    3612:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    3614:	bd70      	pop	{r4, r5, r6, pc}
    3616:	46c0      	nop			; (mov r8, r8)
    3618:	00003565 	.word	0x00003565
    361c:	42000800 	.word	0x42000800
    3620:	ffffb15b 	.word	0xffffb15b
    3624:	40000006 	.word	0x40000006

00003628 <spiDataOut>:
    3628:	4b04      	ldr	r3, [pc, #16]	; (363c <spiDataOut+0x14>)
    362a:	0280      	lsls	r0, r0, #10
    362c:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    return sercom(id)->SPI.DATA.reg;
}

void spiDataOut(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    362e:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    3630:	7e03      	ldrb	r3, [r0, #24]
    3632:	075b      	lsls	r3, r3, #29
    3634:	d5fc      	bpl.n	3630 <spiDataOut+0x8>
    u8_t dummy = sercom(id)->SPI.DATA.reg;
    3636:	6a83      	ldr	r3, [r0, #40]	; 0x28
}
    3638:	4770      	bx	lr
    363a:	46c0      	nop			; (mov r8, r8)
    363c:	42000800 	.word	0x42000800

00003640 <spiDataIn>:
    3640:	4b05      	ldr	r3, [pc, #20]	; (3658 <spiDataIn+0x18>)
    3642:	0280      	lsls	r0, r0, #10
    3644:	18c0      	adds	r0, r0, r3

u8_t spiDataIn(SercomId id) {
    sercom(id)->SPI.DATA.reg = 0xFF;
    3646:	23ff      	movs	r3, #255	; 0xff
    3648:	6283      	str	r3, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    364a:	7e03      	ldrb	r3, [r0, #24]
    364c:	075b      	lsls	r3, r3, #29
    364e:	d5fc      	bpl.n	364a <spiDataIn+0xa>
    return sercom(id)->SPI.DATA.reg;
    3650:	6a80      	ldr	r0, [r0, #40]	; 0x28
    3652:	b2c0      	uxtb	r0, r0
}
    3654:	4770      	bx	lr
    3656:	46c0      	nop			; (mov r8, r8)
    3658:	42000800 	.word	0x42000800

0000365c <usartDataOut>:
    365c:	4b04      	ldr	r3, [pc, #16]	; (3670 <usartDataOut+0x14>)
    365e:	0280      	lsls	r0, r0, #10
    3660:	18c0      	adds	r0, r0, r3

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    3662:	b289      	uxth	r1, r1
    3664:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    3666:	7e03      	ldrb	r3, [r0, #24]
    3668:	07db      	lsls	r3, r3, #31
    366a:	d5fc      	bpl.n	3666 <usartDataOut+0xa>
}
    366c:	4770      	bx	lr
    366e:	46c0      	nop			; (mov r8, r8)
    3670:	42000800 	.word	0x42000800

00003674 <usartDataIn>:
    3674:	4b02      	ldr	r3, [pc, #8]	; (3680 <usartDataIn+0xc>)
    3676:	0280      	lsls	r0, r0, #10
    3678:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    367a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    367c:	b2c0      	uxtb	r0, r0
}
    367e:	4770      	bx	lr
    3680:	42000800 	.word	0x42000800

00003684 <findMainAltitude>:
#include <boardDefines.h>


void findMainAltitude() {

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    3684:	4a11      	ldr	r2, [pc, #68]	; (36cc <findMainAltitude+0x48>)
    3686:	7851      	ldrb	r1, [r2, #1]
    3688:	0013      	movs	r3, r2
    368a:	2900      	cmp	r1, #0
    368c:	d105      	bne.n	369a <findMainAltitude+0x16>
    368e:	7811      	ldrb	r1, [r2, #0]
    3690:	2900      	cmp	r1, #0
    3692:	d002      	beq.n	369a <findMainAltitude+0x16>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelASettings.MAIN_DEPLOY;
    3694:	8853      	ldrh	r3, [r2, #2]
    3696:	8313      	strh	r3, [r2, #24]
        return;
    3698:	e017      	b.n	36ca <findMainAltitude+0x46>
    }
    if (deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    369a:	79da      	ldrb	r2, [r3, #7]
    369c:	2a00      	cmp	r2, #0
    369e:	d104      	bne.n	36aa <findMainAltitude+0x26>
    36a0:	799a      	ldrb	r2, [r3, #6]
    36a2:	2a00      	cmp	r2, #0
    36a4:	d001      	beq.n	36aa <findMainAltitude+0x26>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelBSettings.MAIN_DEPLOY;
    36a6:	891a      	ldrh	r2, [r3, #8]
    36a8:	e00e      	b.n	36c8 <findMainAltitude+0x44>
        return;
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    36aa:	7b5a      	ldrb	r2, [r3, #13]
    36ac:	2a00      	cmp	r2, #0
    36ae:	d104      	bne.n	36ba <findMainAltitude+0x36>
    36b0:	7b1a      	ldrb	r2, [r3, #12]
    36b2:	2a00      	cmp	r2, #0
    36b4:	d001      	beq.n	36ba <findMainAltitude+0x36>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelCSettings.MAIN_DEPLOY;
    36b6:	89da      	ldrh	r2, [r3, #14]
    36b8:	e006      	b.n	36c8 <findMainAltitude+0x44>
        return;
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    36ba:	7cda      	ldrb	r2, [r3, #19]
    36bc:	2a00      	cmp	r2, #0
    36be:	d104      	bne.n	36ca <findMainAltitude+0x46>
    36c0:	7c9a      	ldrb	r2, [r3, #18]
    36c2:	2a00      	cmp	r2, #0
    36c4:	d001      	beq.n	36ca <findMainAltitude+0x46>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelDSettings.MAIN_DEPLOY;
    36c6:	8a9a      	ldrh	r2, [r3, #20]
    36c8:	831a      	strh	r2, [r3, #24]
        return;
    }
}
    36ca:	4770      	bx	lr
    36cc:	20000180 	.word	0x20000180

000036d0 <applyDefaultSettings>:
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    36d0:	2096      	movs	r0, #150	; 0x96

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    36d2:	2200      	movs	r2, #0
    }
}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    36d4:	2101      	movs	r1, #1
    36d6:	4b09      	ldr	r3, [pc, #36]	; (36fc <applyDefaultSettings+0x2c>)
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    36d8:	0040      	lsls	r0, r0, #1
    }
}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    36da:	7019      	strb	r1, [r3, #0]
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    36dc:	7059      	strb	r1, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    36de:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;
    36e0:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = true;
    36e2:	7199      	strb	r1, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    36e4:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    36e6:	8118      	strh	r0, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = 0;
    36e8:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = false;
    36ea:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = DROGUE_t;
    36ec:	7359      	strb	r1, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = 0;
    36ee:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = 0;
    36f0:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = false;
    36f2:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = MAIN_t;
    36f4:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = 300;
    36f6:	8298      	strh	r0, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = 0;
    36f8:	759a      	strb	r2, [r3, #22]
}
    36fa:	4770      	bx	lr
    36fc:	20000180 	.word	0x20000180

00003700 <putSettings>:

void putSettings() {
    3700:	b500      	push	{lr}
    3702:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    3704:	4669      	mov	r1, sp
    settings[1] = deploymentSettings.channelASettings.TYPE;
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    3706:	4668      	mov	r0, sp

void putSettings() {

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    3708:	4b17      	ldr	r3, [pc, #92]	; (3768 <putSettings+0x68>)
    370a:	781a      	ldrb	r2, [r3, #0]
    370c:	700a      	strb	r2, [r1, #0]
    settings[1] = deploymentSettings.channelASettings.TYPE;
    370e:	785a      	ldrb	r2, [r3, #1]
    3710:	704a      	strb	r2, [r1, #1]
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    3712:	885a      	ldrh	r2, [r3, #2]
    3714:	0a11      	lsrs	r1, r2, #8
    3716:	7081      	strb	r1, [r0, #2]
    settings[3] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 0;
    3718:	70c2      	strb	r2, [r0, #3]
    settings[4] = deploymentSettings.channelASettings.APPOGE_DELAY;
    371a:	791a      	ldrb	r2, [r3, #4]
    371c:	7102      	strb	r2, [r0, #4]

    settings[5] = deploymentSettings.channelBSettings.ENABLED;
    371e:	799a      	ldrb	r2, [r3, #6]
    3720:	7142      	strb	r2, [r0, #5]
    settings[6] = deploymentSettings.channelBSettings.TYPE;
    3722:	79da      	ldrb	r2, [r3, #7]
    3724:	7182      	strb	r2, [r0, #6]
    settings[7] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 8;
    3726:	891a      	ldrh	r2, [r3, #8]
    3728:	0a11      	lsrs	r1, r2, #8
    372a:	71c1      	strb	r1, [r0, #7]
    settings[8] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 0;
    372c:	7202      	strb	r2, [r0, #8]
    settings[9] = deploymentSettings.channelBSettings.APPOGE_DELAY;
    372e:	7a9a      	ldrb	r2, [r3, #10]
    3730:	7242      	strb	r2, [r0, #9]

    settings[10] = deploymentSettings.channelCSettings.ENABLED;
    3732:	7b1a      	ldrb	r2, [r3, #12]
    3734:	7282      	strb	r2, [r0, #10]
    settings[11] = deploymentSettings.channelCSettings.TYPE;
    3736:	7b5a      	ldrb	r2, [r3, #13]
    3738:	72c2      	strb	r2, [r0, #11]
    settings[12] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 8;
    373a:	89da      	ldrh	r2, [r3, #14]
    373c:	0a11      	lsrs	r1, r2, #8
    373e:	7301      	strb	r1, [r0, #12]
    settings[13] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 0;
    3740:	7342      	strb	r2, [r0, #13]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;
    3742:	7c1a      	ldrb	r2, [r3, #16]
    3744:	7382      	strb	r2, [r0, #14]

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    3746:	7c9a      	ldrb	r2, [r3, #18]
    3748:	73c2      	strb	r2, [r0, #15]
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    374a:	7cda      	ldrb	r2, [r3, #19]
    374c:	7402      	strb	r2, [r0, #16]
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    374e:	8a9a      	ldrh	r2, [r3, #20]
    3750:	0a11      	lsrs	r1, r2, #8
    3752:	7441      	strb	r1, [r0, #17]
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    3754:	7482      	strb	r2, [r0, #18]
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    3756:	7d9b      	ldrb	r3, [r3, #22]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    3758:	4669      	mov	r1, sp
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    375a:	74c3      	strb	r3, [r0, #19]

    settings[20] = 0x00;
    375c:	2000      	movs	r0, #0

    AT25SEWritePage(0x00,settings);
    375e:	4b03      	ldr	r3, [pc, #12]	; (376c <putSettings+0x6c>)
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;

    settings[20] = 0x00;
    3760:	7508      	strb	r0, [r1, #20]

    AT25SEWritePage(0x00,settings);
    3762:	4798      	blx	r3
}
    3764:	b041      	add	sp, #260	; 0x104
    3766:	bd00      	pop	{pc}
    3768:	20000180 	.word	0x20000180
    376c:	000002a5 	.word	0x000002a5

00003770 <getSettings>:


void getSettings() {
    3770:	b500      	push	{lr}
    3772:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);
    3774:	4669      	mov	r1, sp
    3776:	4b2c      	ldr	r3, [pc, #176]	; (3828 <getSettings+0xb8>)
    3778:	2000      	movs	r0, #0
    377a:	4798      	blx	r3

    deploymentSettings.channelASettings.ENABLED = settings[0];
    377c:	466a      	mov	r2, sp
    377e:	7812      	ldrb	r2, [r2, #0]
    3780:	4b2a      	ldr	r3, [pc, #168]	; (382c <getSettings+0xbc>)
    3782:	1e51      	subs	r1, r2, #1
    3784:	418a      	sbcs	r2, r1
    3786:	701a      	strb	r2, [r3, #0]
    deploymentSettings.channelASettings.TYPE = settings[1];
    3788:	466a      	mov	r2, sp
    378a:	7852      	ldrb	r2, [r2, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    378c:	4669      	mov	r1, sp
    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);

    deploymentSettings.channelASettings.ENABLED = settings[0];
    deploymentSettings.channelASettings.TYPE = settings[1];
    378e:	705a      	strb	r2, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    3790:	466a      	mov	r2, sp
    3792:	7892      	ldrb	r2, [r2, #2]
    3794:	78c9      	ldrb	r1, [r1, #3]
    3796:	0212      	lsls	r2, r2, #8
    3798:	430a      	orrs	r2, r1
    379a:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];
    379c:	466a      	mov	r2, sp
    379e:	7912      	ldrb	r2, [r2, #4]
    37a0:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    37a2:	466a      	mov	r2, sp
    37a4:	7952      	ldrb	r2, [r2, #5]
    37a6:	1e51      	subs	r1, r2, #1
    37a8:	418a      	sbcs	r2, r1
    37aa:	719a      	strb	r2, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = settings[6];
    37ac:	466a      	mov	r2, sp
    37ae:	7992      	ldrb	r2, [r2, #6]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    37b0:	4669      	mov	r1, sp
    deploymentSettings.channelASettings.TYPE = settings[1];
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    deploymentSettings.channelBSettings.TYPE = settings[6];
    37b2:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    37b4:	466a      	mov	r2, sp
    37b6:	79d2      	ldrb	r2, [r2, #7]
    37b8:	7a09      	ldrb	r1, [r1, #8]
    37ba:	0212      	lsls	r2, r2, #8
    37bc:	430a      	orrs	r2, r1
    37be:	811a      	strh	r2, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];
    37c0:	466a      	mov	r2, sp
    37c2:	7a52      	ldrb	r2, [r2, #9]
    37c4:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    37c6:	466a      	mov	r2, sp
    37c8:	7a92      	ldrb	r2, [r2, #10]
    37ca:	1e51      	subs	r1, r2, #1
    37cc:	418a      	sbcs	r2, r1
    37ce:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = settings[11];
    37d0:	466a      	mov	r2, sp
    37d2:	7ad2      	ldrb	r2, [r2, #11]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    37d4:	4669      	mov	r1, sp
    deploymentSettings.channelBSettings.TYPE = settings[6];
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    deploymentSettings.channelCSettings.TYPE = settings[11];
    37d6:	735a      	strb	r2, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    37d8:	466a      	mov	r2, sp
    37da:	7b12      	ldrb	r2, [r2, #12]
    37dc:	7b49      	ldrb	r1, [r1, #13]
    37de:	0212      	lsls	r2, r2, #8
    37e0:	430a      	orrs	r2, r1
    37e2:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];
    37e4:	466a      	mov	r2, sp
    37e6:	7b92      	ldrb	r2, [r2, #14]
    37e8:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    37ea:	466a      	mov	r2, sp
    37ec:	7bd2      	ldrb	r2, [r2, #15]
    37ee:	1e51      	subs	r1, r2, #1
    37f0:	418a      	sbcs	r2, r1
    37f2:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = settings[16];
    37f4:	466a      	mov	r2, sp
    37f6:	7c12      	ldrb	r2, [r2, #16]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    37f8:	4669      	mov	r1, sp
    deploymentSettings.channelCSettings.TYPE = settings[11];
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    deploymentSettings.channelDSettings.TYPE = settings[16];
    37fa:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    37fc:	466a      	mov	r2, sp
    37fe:	7c52      	ldrb	r2, [r2, #17]
    3800:	7c89      	ldrb	r1, [r1, #18]
    3802:	0212      	lsls	r2, r2, #8
    3804:	430a      	orrs	r2, r1
    3806:	829a      	strh	r2, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = settings[19];
    3808:	466a      	mov	r2, sp
    380a:	7cd2      	ldrb	r2, [r2, #19]
    380c:	759a      	strb	r2, [r3, #22]


    if (settings[20] == 0xFF) {
    380e:	466b      	mov	r3, sp
    3810:	7d1b      	ldrb	r3, [r3, #20]
    3812:	2bff      	cmp	r3, #255	; 0xff
    3814:	d103      	bne.n	381e <getSettings+0xae>
        applyDefaultSettings();
    3816:	4b06      	ldr	r3, [pc, #24]	; (3830 <getSettings+0xc0>)
    3818:	4798      	blx	r3
        putSettings();
    381a:	4b06      	ldr	r3, [pc, #24]	; (3834 <getSettings+0xc4>)
    381c:	4798      	blx	r3
    }

    findMainAltitude();
    381e:	4b06      	ldr	r3, [pc, #24]	; (3838 <getSettings+0xc8>)
    3820:	4798      	blx	r3

}
    3822:	b041      	add	sp, #260	; 0x104
    3824:	bd00      	pop	{pc}
    3826:	46c0      	nop			; (mov r8, r8)
    3828:	0000035d 	.word	0x0000035d
    382c:	20000180 	.word	0x20000180
    3830:	000036d1 	.word	0x000036d1
    3834:	00003701 	.word	0x00003701
    3838:	00003685 	.word	0x00003685

0000383c <sendFlightLogs>:
#include <util.h>
#include <boardDefines.h>

void sendFlightLogs() {
    383c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    383e:	2400      	movs	r4, #0

        if (isFlightLogged(flightLog)) {
    3840:	0020      	movs	r0, r4
    3842:	4b1e      	ldr	r3, [pc, #120]	; (38bc <sendFlightLogs+0x80>)
    3844:	4798      	blx	r3
    3846:	2800      	cmp	r0, #0
    3848:	d003      	beq.n	3852 <sendFlightLogs+0x16>

            usartDataOut(USART3, flightLog);
    384a:	0021      	movs	r1, r4
    384c:	2003      	movs	r0, #3
    384e:	4b1c      	ldr	r3, [pc, #112]	; (38c0 <sendFlightLogs+0x84>)
    3850:	4798      	blx	r3
#include <boardDefines.h>

void sendFlightLogs() {

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    3852:	3401      	adds	r4, #1
    3854:	b2e4      	uxtb	r4, r4
    3856:	2c14      	cmp	r4, #20
    3858:	d1f2      	bne.n	3840 <sendFlightLogs+0x4>

            usartDataOut(USART3, flightLog);
        }
    }
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);
    385a:	21ff      	movs	r1, #255	; 0xff
    385c:	2003      	movs	r0, #3
    385e:	4c18      	ldr	r4, [pc, #96]	; (38c0 <sendFlightLogs+0x84>)
    3860:	47a0      	blx	r4

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    3862:	4a18      	ldr	r2, [pc, #96]	; (38c4 <sendFlightLogs+0x88>)
    3864:	7e13      	ldrb	r3, [r2, #24]
    3866:	075b      	lsls	r3, r3, #29
    3868:	d5fc      	bpl.n	3864 <sendFlightLogs+0x28>
    volatile u8_t flightToRead = usartDataIn(USART3);
    386a:	4b17      	ldr	r3, [pc, #92]	; (38c8 <sendFlightLogs+0x8c>)
    386c:	2003      	movs	r0, #3
    386e:	4798      	blx	r3
    3870:	466b      	mov	r3, sp
    3872:	71d8      	strb	r0, [r3, #7]


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    3874:	79d8      	ldrb	r0, [r3, #7]
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    volatile u8_t flightToRead = usartDataIn(USART3);
    3876:	1ddd      	adds	r5, r3, #7


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    3878:	b2c0      	uxtb	r0, r0
    387a:	4b14      	ldr	r3, [pc, #80]	; (38cc <sendFlightLogs+0x90>)
    387c:	4798      	blx	r3
    387e:	0007      	movs	r7, r0
    u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
    3880:	7828      	ldrb	r0, [r5, #0]
    3882:	4b13      	ldr	r3, [pc, #76]	; (38d0 <sendFlightLogs+0x94>)
    3884:	b2c0      	uxtb	r0, r0
    3886:	4798      	blx	r3
    3888:	0006      	movs	r6, r0

    //inform of page numbers
    u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    388a:	1bc5      	subs	r5, r0, r7
    388c:	0a2d      	lsrs	r5, r5, #8
    usartDataOut(USART3, pagesToSend >> 0);
    388e:	b2e9      	uxtb	r1, r5
    3890:	2003      	movs	r0, #3
    3892:	47a0      	blx	r4
    usartDataOut(USART3, pagesToSend >> 8);
    3894:	b2a9      	uxth	r1, r5
    3896:	0a09      	lsrs	r1, r1, #8
    3898:	2003      	movs	r0, #3
    389a:	47a0      	blx	r4

    //send flight end address for % full
    usartDataOut(USART3, flightEndAddress >> 0);
    389c:	b2f1      	uxtb	r1, r6
    389e:	2003      	movs	r0, #3
    38a0:	47a0      	blx	r4
    usartDataOut(USART3, flightEndAddress >> 8);
    38a2:	0a31      	lsrs	r1, r6, #8
    38a4:	b2c9      	uxtb	r1, r1
    38a6:	2003      	movs	r0, #3
    38a8:	47a0      	blx	r4
    usartDataOut(USART3, flightEndAddress >> 16);
    38aa:	0c31      	lsrs	r1, r6, #16
    38ac:	b2c9      	uxtb	r1, r1
    38ae:	2003      	movs	r0, #3
    38b0:	47a0      	blx	r4

    //USART out the flights pages
    sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    38b2:	0031      	movs	r1, r6
    38b4:	0038      	movs	r0, r7
    38b6:	4b07      	ldr	r3, [pc, #28]	; (38d4 <sendFlightLogs+0x98>)
    38b8:	4798      	blx	r3

}
    38ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    38bc:	00003059 	.word	0x00003059
    38c0:	0000365d 	.word	0x0000365d
    38c4:	42001400 	.word	0x42001400
    38c8:	00003675 	.word	0x00003675
    38cc:	00003009 	.word	0x00003009
    38d0:	00003031 	.word	0x00003031
    38d4:	00000ad9 	.word	0x00000ad9

000038d8 <attemptConnection>:

void attemptConnection() {
    38d8:	b570      	push	{r4, r5, r6, lr}

    if (USARTconnectionAvaliable()) {
    38da:	4b14      	ldr	r3, [pc, #80]	; (392c <attemptConnection+0x54>)
    38dc:	4798      	blx	r3
    38de:	2800      	cmp	r0, #0
    38e0:	d022      	beq.n	3928 <attemptConnection+0x50>

        flightState = flightIdle;
    38e2:	2201      	movs	r2, #1
    38e4:	4b12      	ldr	r3, [pc, #72]	; (3930 <attemptConnection+0x58>)
    38e6:	701a      	strb	r2, [r3, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    38e8:	4a12      	ldr	r2, [pc, #72]	; (3934 <attemptConnection+0x5c>)
    38ea:	7e13      	ldrb	r3, [r2, #24]
    38ec:	075b      	lsls	r3, r3, #29
    38ee:	d5fc      	bpl.n	38ea <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    38f0:	2003      	movs	r0, #3
    38f2:	4b11      	ldr	r3, [pc, #68]	; (3938 <attemptConnection+0x60>)
    38f4:	4798      	blx	r3
    38f6:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    38f8:	2c4c      	cmp	r4, #76	; 0x4c
    38fa:	d102      	bne.n	3902 <attemptConnection+0x2a>

            sendFlightLogs();
    38fc:	4b0f      	ldr	r3, [pc, #60]	; (393c <attemptConnection+0x64>)
    38fe:	4798      	blx	r3
    3900:	e012      	b.n	3928 <attemptConnection+0x50>
        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    3902:	2845      	cmp	r0, #69	; 0x45
    3904:	d110      	bne.n	3928 <attemptConnection+0x50>

            //getSettings();

            AT25SFChipErase();
    3906:	4e0e      	ldr	r6, [pc, #56]	; (3940 <attemptConnection+0x68>)
    3908:	47b0      	blx	r6
            AT25SFHoldTillReady();
    390a:	4d0e      	ldr	r5, [pc, #56]	; (3944 <attemptConnection+0x6c>)
    390c:	47a8      	blx	r5
            delay_ms(100);
    390e:	2064      	movs	r0, #100	; 0x64
    3910:	4b0d      	ldr	r3, [pc, #52]	; (3948 <attemptConnection+0x70>)
    3912:	4798      	blx	r3
            AT25SFChipErase();
    3914:	47b0      	blx	r6

            AT25SFHoldTillReady();
    3916:	47a8      	blx	r5

            //getSettings();

            usartDataOut(USART3, 'E');
    3918:	2003      	movs	r0, #3
    391a:	4b0c      	ldr	r3, [pc, #48]	; (394c <attemptConnection+0x74>)
    391c:	0021      	movs	r1, r4
    391e:	4798      	blx	r3
            beep(400);
    3920:	20c8      	movs	r0, #200	; 0xc8
    3922:	4b0b      	ldr	r3, [pc, #44]	; (3950 <attemptConnection+0x78>)
    3924:	0040      	lsls	r0, r0, #1
    3926:	4798      	blx	r3


        }
    }

}
    3928:	bd70      	pop	{r4, r5, r6, pc}
    392a:	46c0      	nop			; (mov r8, r8)
    392c:	00000aa5 	.word	0x00000aa5
    3930:	200001ac 	.word	0x200001ac
    3934:	42001400 	.word	0x42001400
    3938:	00003675 	.word	0x00003675
    393c:	0000383d 	.word	0x0000383d
    3940:	00000219 	.word	0x00000219
    3944:	000001e5 	.word	0x000001e5
    3948:	00001035 	.word	0x00001035
    394c:	0000365d 	.word	0x0000365d
    3950:	00000d31 	.word	0x00000d31

00003954 <pow>:
    3954:	b5f0      	push	{r4, r5, r6, r7, lr}
    3956:	465f      	mov	r7, fp
    3958:	464d      	mov	r5, r9
    395a:	4656      	mov	r6, sl
    395c:	4644      	mov	r4, r8
    395e:	b4f0      	push	{r4, r5, r6, r7}
    3960:	b091      	sub	sp, #68	; 0x44
    3962:	001f      	movs	r7, r3
    3964:	0004      	movs	r4, r0
    3966:	000d      	movs	r5, r1
    3968:	0016      	movs	r6, r2
    396a:	f000 f9af 	bl	3ccc <__ieee754_pow>
    396e:	4bcf      	ldr	r3, [pc, #828]	; (3cac <pow+0x358>)
    3970:	9002      	str	r0, [sp, #8]
    3972:	9103      	str	r1, [sp, #12]
    3974:	469b      	mov	fp, r3
    3976:	781b      	ldrb	r3, [r3, #0]
    3978:	b25b      	sxtb	r3, r3
    397a:	4699      	mov	r9, r3
    397c:	3301      	adds	r3, #1
    397e:	d04f      	beq.n	3a20 <pow+0xcc>
    3980:	0032      	movs	r2, r6
    3982:	003b      	movs	r3, r7
    3984:	0030      	movs	r0, r6
    3986:	0039      	movs	r1, r7
    3988:	f003 f950 	bl	6c2c <__aeabi_dcmpun>
    398c:	9000      	str	r0, [sp, #0]
    398e:	2800      	cmp	r0, #0
    3990:	d146      	bne.n	3a20 <pow+0xcc>
    3992:	0022      	movs	r2, r4
    3994:	002b      	movs	r3, r5
    3996:	0020      	movs	r0, r4
    3998:	0029      	movs	r1, r5
    399a:	f003 f947 	bl	6c2c <__aeabi_dcmpun>
    399e:	2200      	movs	r2, #0
    39a0:	4682      	mov	sl, r0
    39a2:	2800      	cmp	r0, #0
    39a4:	d134      	bne.n	3a10 <pow+0xbc>
    39a6:	2300      	movs	r3, #0
    39a8:	0020      	movs	r0, r4
    39aa:	0029      	movs	r1, r5
    39ac:	f001 fa72 	bl	4e94 <__aeabi_dcmpeq>
    39b0:	2800      	cmp	r0, #0
    39b2:	d03a      	beq.n	3a2a <pow+0xd6>
    39b4:	2200      	movs	r2, #0
    39b6:	2300      	movs	r3, #0
    39b8:	0030      	movs	r0, r6
    39ba:	0039      	movs	r1, r7
    39bc:	f001 fa6a 	bl	4e94 <__aeabi_dcmpeq>
    39c0:	9005      	str	r0, [sp, #20]
    39c2:	2800      	cmp	r0, #0
    39c4:	d100      	bne.n	39c8 <pow+0x74>
    39c6:	e074      	b.n	3ab2 <pow+0x15e>
    39c8:	ab06      	add	r3, sp, #24
    39ca:	4698      	mov	r8, r3
    39cc:	2301      	movs	r3, #1
    39ce:	4642      	mov	r2, r8
    39d0:	9306      	str	r3, [sp, #24]
    39d2:	4bb7      	ldr	r3, [pc, #732]	; (3cb0 <pow+0x35c>)
    39d4:	6053      	str	r3, [r2, #4]
    39d6:	4643      	mov	r3, r8
    39d8:	4652      	mov	r2, sl
    39da:	609c      	str	r4, [r3, #8]
    39dc:	60dd      	str	r5, [r3, #12]
    39de:	621a      	str	r2, [r3, #32]
    39e0:	611e      	str	r6, [r3, #16]
    39e2:	615f      	str	r7, [r3, #20]
    39e4:	4642      	mov	r2, r8
    39e6:	2300      	movs	r3, #0
    39e8:	2400      	movs	r4, #0
    39ea:	6193      	str	r3, [r2, #24]
    39ec:	61d4      	str	r4, [r2, #28]
    39ee:	464b      	mov	r3, r9
    39f0:	2b00      	cmp	r3, #0
    39f2:	d100      	bne.n	39f6 <pow+0xa2>
    39f4:	e094      	b.n	3b20 <pow+0x1cc>
    39f6:	2300      	movs	r3, #0
    39f8:	4cae      	ldr	r4, [pc, #696]	; (3cb4 <pow+0x360>)
    39fa:	9300      	str	r3, [sp, #0]
    39fc:	9401      	str	r4, [sp, #4]
    39fe:	9800      	ldr	r0, [sp, #0]
    3a00:	9901      	ldr	r1, [sp, #4]
    3a02:	b011      	add	sp, #68	; 0x44
    3a04:	bc3c      	pop	{r2, r3, r4, r5}
    3a06:	4690      	mov	r8, r2
    3a08:	4699      	mov	r9, r3
    3a0a:	46a2      	mov	sl, r4
    3a0c:	46ab      	mov	fp, r5
    3a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a10:	2300      	movs	r3, #0
    3a12:	0030      	movs	r0, r6
    3a14:	0039      	movs	r1, r7
    3a16:	f001 fa3d 	bl	4e94 <__aeabi_dcmpeq>
    3a1a:	2800      	cmp	r0, #0
    3a1c:	d000      	beq.n	3a20 <pow+0xcc>
    3a1e:	e0eb      	b.n	3bf8 <pow+0x2a4>
    3a20:	9b02      	ldr	r3, [sp, #8]
    3a22:	9c03      	ldr	r4, [sp, #12]
    3a24:	9300      	str	r3, [sp, #0]
    3a26:	9401      	str	r4, [sp, #4]
    3a28:	e7e9      	b.n	39fe <pow+0xaa>
    3a2a:	9802      	ldr	r0, [sp, #8]
    3a2c:	9903      	ldr	r1, [sp, #12]
    3a2e:	f000 ff7d 	bl	492c <finite>
    3a32:	4681      	mov	r9, r0
    3a34:	2800      	cmp	r0, #0
    3a36:	d100      	bne.n	3a3a <pow+0xe6>
    3a38:	e086      	b.n	3b48 <pow+0x1f4>
    3a3a:	9802      	ldr	r0, [sp, #8]
    3a3c:	9903      	ldr	r1, [sp, #12]
    3a3e:	2200      	movs	r2, #0
    3a40:	2300      	movs	r3, #0
    3a42:	f001 fa27 	bl	4e94 <__aeabi_dcmpeq>
    3a46:	2800      	cmp	r0, #0
    3a48:	d0ea      	beq.n	3a20 <pow+0xcc>
    3a4a:	0020      	movs	r0, r4
    3a4c:	0029      	movs	r1, r5
    3a4e:	f000 ff6d 	bl	492c <finite>
    3a52:	9a02      	ldr	r2, [sp, #8]
    3a54:	9b03      	ldr	r3, [sp, #12]
    3a56:	9200      	str	r2, [sp, #0]
    3a58:	9301      	str	r3, [sp, #4]
    3a5a:	2800      	cmp	r0, #0
    3a5c:	d0cf      	beq.n	39fe <pow+0xaa>
    3a5e:	0030      	movs	r0, r6
    3a60:	0039      	movs	r1, r7
    3a62:	f000 ff63 	bl	492c <finite>
    3a66:	9a02      	ldr	r2, [sp, #8]
    3a68:	9b03      	ldr	r3, [sp, #12]
    3a6a:	9200      	str	r2, [sp, #0]
    3a6c:	9301      	str	r3, [sp, #4]
    3a6e:	2800      	cmp	r0, #0
    3a70:	d0c5      	beq.n	39fe <pow+0xaa>
    3a72:	ab06      	add	r3, sp, #24
    3a74:	4698      	mov	r8, r3
    3a76:	2304      	movs	r3, #4
    3a78:	4642      	mov	r2, r8
    3a7a:	9306      	str	r3, [sp, #24]
    3a7c:	4b8c      	ldr	r3, [pc, #560]	; (3cb0 <pow+0x35c>)
    3a7e:	6094      	str	r4, [r2, #8]
    3a80:	60d5      	str	r5, [r2, #12]
    3a82:	6053      	str	r3, [r2, #4]
    3a84:	2300      	movs	r3, #0
    3a86:	2400      	movs	r4, #0
    3a88:	6213      	str	r3, [r2, #32]
    3a8a:	2300      	movs	r3, #0
    3a8c:	6193      	str	r3, [r2, #24]
    3a8e:	61d4      	str	r4, [r2, #28]
    3a90:	465b      	mov	r3, fp
    3a92:	781b      	ldrb	r3, [r3, #0]
    3a94:	6116      	str	r6, [r2, #16]
    3a96:	6157      	str	r7, [r2, #20]
    3a98:	b25b      	sxtb	r3, r3
    3a9a:	2b02      	cmp	r3, #2
    3a9c:	d004      	beq.n	3aa8 <pow+0x154>
    3a9e:	4640      	mov	r0, r8
    3aa0:	f000 ff4e 	bl	4940 <matherr>
    3aa4:	2800      	cmp	r0, #0
    3aa6:	d140      	bne.n	3b2a <pow+0x1d6>
    3aa8:	f003 fa8e 	bl	6fc8 <__errno>
    3aac:	2322      	movs	r3, #34	; 0x22
    3aae:	6003      	str	r3, [r0, #0]
    3ab0:	e03b      	b.n	3b2a <pow+0x1d6>
    3ab2:	0030      	movs	r0, r6
    3ab4:	0039      	movs	r1, r7
    3ab6:	f000 ff39 	bl	492c <finite>
    3aba:	9a02      	ldr	r2, [sp, #8]
    3abc:	9b03      	ldr	r3, [sp, #12]
    3abe:	9200      	str	r2, [sp, #0]
    3ac0:	9301      	str	r3, [sp, #4]
    3ac2:	2800      	cmp	r0, #0
    3ac4:	d09b      	beq.n	39fe <pow+0xaa>
    3ac6:	2200      	movs	r2, #0
    3ac8:	2300      	movs	r3, #0
    3aca:	0030      	movs	r0, r6
    3acc:	0039      	movs	r1, r7
    3ace:	f001 f9e7 	bl	4ea0 <__aeabi_dcmplt>
    3ad2:	2800      	cmp	r0, #0
    3ad4:	d100      	bne.n	3ad8 <pow+0x184>
    3ad6:	e792      	b.n	39fe <pow+0xaa>
    3ad8:	ab06      	add	r3, sp, #24
    3ada:	4698      	mov	r8, r3
    3adc:	2301      	movs	r3, #1
    3ade:	4642      	mov	r2, r8
    3ae0:	9306      	str	r3, [sp, #24]
    3ae2:	4b73      	ldr	r3, [pc, #460]	; (3cb0 <pow+0x35c>)
    3ae4:	6053      	str	r3, [r2, #4]
    3ae6:	4643      	mov	r3, r8
    3ae8:	9a05      	ldr	r2, [sp, #20]
    3aea:	609c      	str	r4, [r3, #8]
    3aec:	60dd      	str	r5, [r3, #12]
    3aee:	621a      	str	r2, [r3, #32]
    3af0:	611e      	str	r6, [r3, #16]
    3af2:	615f      	str	r7, [r3, #20]
    3af4:	465b      	mov	r3, fp
    3af6:	781b      	ldrb	r3, [r3, #0]
    3af8:	b25b      	sxtb	r3, r3
    3afa:	2b00      	cmp	r3, #0
    3afc:	d00b      	beq.n	3b16 <pow+0x1c2>
    3afe:	2000      	movs	r0, #0
    3b00:	4642      	mov	r2, r8
    3b02:	496d      	ldr	r1, [pc, #436]	; (3cb8 <pow+0x364>)
    3b04:	6190      	str	r0, [r2, #24]
    3b06:	61d1      	str	r1, [r2, #28]
    3b08:	2b02      	cmp	r3, #2
    3b0a:	d109      	bne.n	3b20 <pow+0x1cc>
    3b0c:	f003 fa5c 	bl	6fc8 <__errno>
    3b10:	2321      	movs	r3, #33	; 0x21
    3b12:	6003      	str	r3, [r0, #0]
    3b14:	e009      	b.n	3b2a <pow+0x1d6>
    3b16:	4642      	mov	r2, r8
    3b18:	2300      	movs	r3, #0
    3b1a:	2400      	movs	r4, #0
    3b1c:	6193      	str	r3, [r2, #24]
    3b1e:	61d4      	str	r4, [r2, #28]
    3b20:	4640      	mov	r0, r8
    3b22:	f000 ff0d 	bl	4940 <matherr>
    3b26:	2800      	cmp	r0, #0
    3b28:	d0f0      	beq.n	3b0c <pow+0x1b8>
    3b2a:	4643      	mov	r3, r8
    3b2c:	6a1b      	ldr	r3, [r3, #32]
    3b2e:	2b00      	cmp	r3, #0
    3b30:	d004      	beq.n	3b3c <pow+0x1e8>
    3b32:	f003 fa49 	bl	6fc8 <__errno>
    3b36:	4643      	mov	r3, r8
    3b38:	6a1b      	ldr	r3, [r3, #32]
    3b3a:	6003      	str	r3, [r0, #0]
    3b3c:	4643      	mov	r3, r8
    3b3e:	69dc      	ldr	r4, [r3, #28]
    3b40:	699b      	ldr	r3, [r3, #24]
    3b42:	9300      	str	r3, [sp, #0]
    3b44:	9401      	str	r4, [sp, #4]
    3b46:	e75a      	b.n	39fe <pow+0xaa>
    3b48:	0020      	movs	r0, r4
    3b4a:	0029      	movs	r1, r5
    3b4c:	f000 feee 	bl	492c <finite>
    3b50:	2800      	cmp	r0, #0
    3b52:	d100      	bne.n	3b56 <pow+0x202>
    3b54:	e771      	b.n	3a3a <pow+0xe6>
    3b56:	0030      	movs	r0, r6
    3b58:	0039      	movs	r1, r7
    3b5a:	f000 fee7 	bl	492c <finite>
    3b5e:	2800      	cmp	r0, #0
    3b60:	d100      	bne.n	3b64 <pow+0x210>
    3b62:	e76a      	b.n	3a3a <pow+0xe6>
    3b64:	9802      	ldr	r0, [sp, #8]
    3b66:	9903      	ldr	r1, [sp, #12]
    3b68:	000b      	movs	r3, r1
    3b6a:	0002      	movs	r2, r0
    3b6c:	f003 f85e 	bl	6c2c <__aeabi_dcmpun>
    3b70:	ab06      	add	r3, sp, #24
    3b72:	4698      	mov	r8, r3
    3b74:	2800      	cmp	r0, #0
    3b76:	d17a      	bne.n	3c6e <pow+0x31a>
    3b78:	2303      	movs	r3, #3
    3b7a:	4642      	mov	r2, r8
    3b7c:	9306      	str	r3, [sp, #24]
    3b7e:	4b4c      	ldr	r3, [pc, #304]	; (3cb0 <pow+0x35c>)
    3b80:	6210      	str	r0, [r2, #32]
    3b82:	6053      	str	r3, [r2, #4]
    3b84:	465b      	mov	r3, fp
    3b86:	781b      	ldrb	r3, [r3, #0]
    3b88:	6094      	str	r4, [r2, #8]
    3b8a:	60d5      	str	r5, [r2, #12]
    3b8c:	b25b      	sxtb	r3, r3
    3b8e:	6116      	str	r6, [r2, #16]
    3b90:	6157      	str	r7, [r2, #20]
    3b92:	4699      	mov	r9, r3
    3b94:	2b00      	cmp	r3, #0
    3b96:	d148      	bne.n	3c2a <pow+0x2d6>
    3b98:	22e0      	movs	r2, #224	; 0xe0
    3b9a:	4641      	mov	r1, r8
    3b9c:	4b47      	ldr	r3, [pc, #284]	; (3cbc <pow+0x368>)
    3b9e:	0612      	lsls	r2, r2, #24
    3ba0:	618a      	str	r2, [r1, #24]
    3ba2:	61cb      	str	r3, [r1, #28]
    3ba4:	0020      	movs	r0, r4
    3ba6:	2200      	movs	r2, #0
    3ba8:	2300      	movs	r3, #0
    3baa:	0029      	movs	r1, r5
    3bac:	f001 f978 	bl	4ea0 <__aeabi_dcmplt>
    3bb0:	2800      	cmp	r0, #0
    3bb2:	d100      	bne.n	3bb6 <pow+0x262>
    3bb4:	e773      	b.n	3a9e <pow+0x14a>
    3bb6:	2200      	movs	r2, #0
    3bb8:	4b41      	ldr	r3, [pc, #260]	; (3cc0 <pow+0x36c>)
    3bba:	0030      	movs	r0, r6
    3bbc:	0039      	movs	r1, r7
    3bbe:	f002 fa67 	bl	6090 <__aeabi_dmul>
    3bc2:	0004      	movs	r4, r0
    3bc4:	000d      	movs	r5, r1
    3bc6:	f000 fec3 	bl	4950 <rint>
    3bca:	0002      	movs	r2, r0
    3bcc:	000b      	movs	r3, r1
    3bce:	0020      	movs	r0, r4
    3bd0:	0029      	movs	r1, r5
    3bd2:	f001 f95f 	bl	4e94 <__aeabi_dcmpeq>
    3bd6:	2800      	cmp	r0, #0
    3bd8:	d105      	bne.n	3be6 <pow+0x292>
    3bda:	22e0      	movs	r2, #224	; 0xe0
    3bdc:	4b39      	ldr	r3, [pc, #228]	; (3cc4 <pow+0x370>)
    3bde:	0612      	lsls	r2, r2, #24
    3be0:	4641      	mov	r1, r8
    3be2:	618a      	str	r2, [r1, #24]
    3be4:	61cb      	str	r3, [r1, #28]
    3be6:	465b      	mov	r3, fp
    3be8:	781b      	ldrb	r3, [r3, #0]
    3bea:	b25b      	sxtb	r3, r3
    3bec:	4699      	mov	r9, r3
    3bee:	464b      	mov	r3, r9
    3bf0:	2b02      	cmp	r3, #2
    3bf2:	d000      	beq.n	3bf6 <pow+0x2a2>
    3bf4:	e753      	b.n	3a9e <pow+0x14a>
    3bf6:	e757      	b.n	3aa8 <pow+0x154>
    3bf8:	ab06      	add	r3, sp, #24
    3bfa:	4698      	mov	r8, r3
    3bfc:	2301      	movs	r3, #1
    3bfe:	4642      	mov	r2, r8
    3c00:	9306      	str	r3, [sp, #24]
    3c02:	4b2b      	ldr	r3, [pc, #172]	; (3cb0 <pow+0x35c>)
    3c04:	6053      	str	r3, [r2, #4]
    3c06:	4643      	mov	r3, r8
    3c08:	609c      	str	r4, [r3, #8]
    3c0a:	60dd      	str	r5, [r3, #12]
    3c0c:	2400      	movs	r4, #0
    3c0e:	9a00      	ldr	r2, [sp, #0]
    3c10:	4d28      	ldr	r5, [pc, #160]	; (3cb4 <pow+0x360>)
    3c12:	621a      	str	r2, [r3, #32]
    3c14:	611e      	str	r6, [r3, #16]
    3c16:	615f      	str	r7, [r3, #20]
    3c18:	619c      	str	r4, [r3, #24]
    3c1a:	61dd      	str	r5, [r3, #28]
    3c1c:	464b      	mov	r3, r9
    3c1e:	9400      	str	r4, [sp, #0]
    3c20:	9501      	str	r5, [sp, #4]
    3c22:	2b02      	cmp	r3, #2
    3c24:	d000      	beq.n	3c28 <pow+0x2d4>
    3c26:	e77b      	b.n	3b20 <pow+0x1cc>
    3c28:	e6e9      	b.n	39fe <pow+0xaa>
    3c2a:	2200      	movs	r2, #0
    3c2c:	4641      	mov	r1, r8
    3c2e:	4b26      	ldr	r3, [pc, #152]	; (3cc8 <pow+0x374>)
    3c30:	0020      	movs	r0, r4
    3c32:	618a      	str	r2, [r1, #24]
    3c34:	61cb      	str	r3, [r1, #28]
    3c36:	2200      	movs	r2, #0
    3c38:	2300      	movs	r3, #0
    3c3a:	0029      	movs	r1, r5
    3c3c:	f001 f930 	bl	4ea0 <__aeabi_dcmplt>
    3c40:	2800      	cmp	r0, #0
    3c42:	d0d4      	beq.n	3bee <pow+0x29a>
    3c44:	2200      	movs	r2, #0
    3c46:	4b1e      	ldr	r3, [pc, #120]	; (3cc0 <pow+0x36c>)
    3c48:	0030      	movs	r0, r6
    3c4a:	0039      	movs	r1, r7
    3c4c:	f002 fa20 	bl	6090 <__aeabi_dmul>
    3c50:	0004      	movs	r4, r0
    3c52:	000d      	movs	r5, r1
    3c54:	f000 fe7c 	bl	4950 <rint>
    3c58:	0002      	movs	r2, r0
    3c5a:	000b      	movs	r3, r1
    3c5c:	0020      	movs	r0, r4
    3c5e:	0029      	movs	r1, r5
    3c60:	f001 f918 	bl	4e94 <__aeabi_dcmpeq>
    3c64:	2800      	cmp	r0, #0
    3c66:	d1be      	bne.n	3be6 <pow+0x292>
    3c68:	2200      	movs	r2, #0
    3c6a:	4b13      	ldr	r3, [pc, #76]	; (3cb8 <pow+0x364>)
    3c6c:	e7b8      	b.n	3be0 <pow+0x28c>
    3c6e:	2301      	movs	r3, #1
    3c70:	4642      	mov	r2, r8
    3c72:	9306      	str	r3, [sp, #24]
    3c74:	4b0e      	ldr	r3, [pc, #56]	; (3cb0 <pow+0x35c>)
    3c76:	6053      	str	r3, [r2, #4]
    3c78:	4643      	mov	r3, r8
    3c7a:	464a      	mov	r2, r9
    3c7c:	609c      	str	r4, [r3, #8]
    3c7e:	60dd      	str	r5, [r3, #12]
    3c80:	621a      	str	r2, [r3, #32]
    3c82:	611e      	str	r6, [r3, #16]
    3c84:	615f      	str	r7, [r3, #20]
    3c86:	2400      	movs	r4, #0
    3c88:	465b      	mov	r3, fp
    3c8a:	571c      	ldrsb	r4, [r3, r4]
    3c8c:	2c00      	cmp	r4, #0
    3c8e:	d100      	bne.n	3c92 <pow+0x33e>
    3c90:	e741      	b.n	3b16 <pow+0x1c2>
    3c92:	2300      	movs	r3, #0
    3c94:	2200      	movs	r2, #0
    3c96:	0019      	movs	r1, r3
    3c98:	0010      	movs	r0, r2
    3c9a:	f001 fdd5 	bl	5848 <__aeabi_ddiv>
    3c9e:	4643      	mov	r3, r8
    3ca0:	6198      	str	r0, [r3, #24]
    3ca2:	61d9      	str	r1, [r3, #28]
    3ca4:	2c02      	cmp	r4, #2
    3ca6:	d100      	bne.n	3caa <pow+0x356>
    3ca8:	e730      	b.n	3b0c <pow+0x1b8>
    3caa:	e739      	b.n	3b20 <pow+0x1cc>
    3cac:	200000b8 	.word	0x200000b8
    3cb0:	00007040 	.word	0x00007040
    3cb4:	3ff00000 	.word	0x3ff00000
    3cb8:	fff00000 	.word	0xfff00000
    3cbc:	47efffff 	.word	0x47efffff
    3cc0:	3fe00000 	.word	0x3fe00000
    3cc4:	c7efffff 	.word	0xc7efffff
    3cc8:	7ff00000 	.word	0x7ff00000

00003ccc <__ieee754_pow>:
    3ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cce:	4656      	mov	r6, sl
    3cd0:	464d      	mov	r5, r9
    3cd2:	4644      	mov	r4, r8
    3cd4:	465f      	mov	r7, fp
    3cd6:	b4f0      	push	{r4, r5, r6, r7}
    3cd8:	001c      	movs	r4, r3
    3cda:	0013      	movs	r3, r2
    3cdc:	0067      	lsls	r7, r4, #1
    3cde:	b091      	sub	sp, #68	; 0x44
    3ce0:	087f      	lsrs	r7, r7, #1
    3ce2:	9300      	str	r3, [sp, #0]
    3ce4:	9401      	str	r4, [sp, #4]
    3ce6:	0006      	movs	r6, r0
    3ce8:	000d      	movs	r5, r1
    3cea:	4680      	mov	r8, r0
    3cec:	4689      	mov	r9, r1
    3cee:	46a2      	mov	sl, r4
    3cf0:	433b      	orrs	r3, r7
    3cf2:	d032      	beq.n	3d5a <__ieee754_pow+0x8e>
    3cf4:	4b6e      	ldr	r3, [pc, #440]	; (3eb0 <__ieee754_pow+0x1e4>)
    3cf6:	006c      	lsls	r4, r5, #1
    3cf8:	0864      	lsrs	r4, r4, #1
    3cfa:	429c      	cmp	r4, r3
    3cfc:	dc29      	bgt.n	3d52 <__ieee754_pow+0x86>
    3cfe:	d026      	beq.n	3d4e <__ieee754_pow+0x82>
    3d00:	429f      	cmp	r7, r3
    3d02:	dc26      	bgt.n	3d52 <__ieee754_pow+0x86>
    3d04:	4b6a      	ldr	r3, [pc, #424]	; (3eb0 <__ieee754_pow+0x1e4>)
    3d06:	429f      	cmp	r7, r3
    3d08:	d100      	bne.n	3d0c <__ieee754_pow+0x40>
    3d0a:	e089      	b.n	3e20 <__ieee754_pow+0x154>
    3d0c:	2300      	movs	r3, #0
    3d0e:	469b      	mov	fp, r3
    3d10:	464b      	mov	r3, r9
    3d12:	2b00      	cmp	r3, #0
    3d14:	da00      	bge.n	3d18 <__ieee754_pow+0x4c>
    3d16:	e087      	b.n	3e28 <__ieee754_pow+0x15c>
    3d18:	2a00      	cmp	r2, #0
    3d1a:	d12f      	bne.n	3d7c <__ieee754_pow+0xb0>
    3d1c:	4b64      	ldr	r3, [pc, #400]	; (3eb0 <__ieee754_pow+0x1e4>)
    3d1e:	429f      	cmp	r7, r3
    3d20:	d100      	bne.n	3d24 <__ieee754_pow+0x58>
    3d22:	e09f      	b.n	3e64 <__ieee754_pow+0x198>
    3d24:	4b63      	ldr	r3, [pc, #396]	; (3eb4 <__ieee754_pow+0x1e8>)
    3d26:	429f      	cmp	r7, r3
    3d28:	d05d      	beq.n	3de6 <__ieee754_pow+0x11a>
    3d2a:	2380      	movs	r3, #128	; 0x80
    3d2c:	05db      	lsls	r3, r3, #23
    3d2e:	459a      	cmp	sl, r3
    3d30:	d101      	bne.n	3d36 <__ieee754_pow+0x6a>
    3d32:	f000 fbc1 	bl	44b8 <__ieee754_pow+0x7ec>
    3d36:	4b60      	ldr	r3, [pc, #384]	; (3eb8 <__ieee754_pow+0x1ec>)
    3d38:	459a      	cmp	sl, r3
    3d3a:	d11f      	bne.n	3d7c <__ieee754_pow+0xb0>
    3d3c:	464b      	mov	r3, r9
    3d3e:	2b00      	cmp	r3, #0
    3d40:	db1c      	blt.n	3d7c <__ieee754_pow+0xb0>
    3d42:	0030      	movs	r0, r6
    3d44:	0029      	movs	r1, r5
    3d46:	f000 fcf7 	bl	4738 <__ieee754_sqrt>
    3d4a:	0006      	movs	r6, r0
    3d4c:	e007      	b.n	3d5e <__ieee754_pow+0x92>
    3d4e:	2800      	cmp	r0, #0
    3d50:	d00d      	beq.n	3d6e <__ieee754_pow+0xa2>
    3d52:	4b5a      	ldr	r3, [pc, #360]	; (3ebc <__ieee754_pow+0x1f0>)
    3d54:	18e0      	adds	r0, r4, r3
    3d56:	4330      	orrs	r0, r6
    3d58:	d10b      	bne.n	3d72 <__ieee754_pow+0xa6>
    3d5a:	2600      	movs	r6, #0
    3d5c:	4955      	ldr	r1, [pc, #340]	; (3eb4 <__ieee754_pow+0x1e8>)
    3d5e:	0030      	movs	r0, r6
    3d60:	b011      	add	sp, #68	; 0x44
    3d62:	bc3c      	pop	{r2, r3, r4, r5}
    3d64:	4690      	mov	r8, r2
    3d66:	4699      	mov	r9, r3
    3d68:	46a2      	mov	sl, r4
    3d6a:	46ab      	mov	fp, r5
    3d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d6e:	42a7      	cmp	r7, r4
    3d70:	ddc8      	ble.n	3d04 <__ieee754_pow+0x38>
    3d72:	4853      	ldr	r0, [pc, #332]	; (3ec0 <__ieee754_pow+0x1f4>)
    3d74:	f000 fde6 	bl	4944 <nan>
    3d78:	0006      	movs	r6, r0
    3d7a:	e7f0      	b.n	3d5e <__ieee754_pow+0x92>
    3d7c:	0030      	movs	r0, r6
    3d7e:	0029      	movs	r1, r5
    3d80:	f000 fdd0 	bl	4924 <fabs>
    3d84:	4643      	mov	r3, r8
    3d86:	2b00      	cmp	r3, #0
    3d88:	d01d      	beq.n	3dc6 <__ieee754_pow+0xfa>
    3d8a:	0feb      	lsrs	r3, r5, #31
    3d8c:	3b01      	subs	r3, #1
    3d8e:	4698      	mov	r8, r3
    3d90:	465b      	mov	r3, fp
    3d92:	4642      	mov	r2, r8
    3d94:	4313      	orrs	r3, r2
    3d96:	d079      	beq.n	3e8c <__ieee754_pow+0x1c0>
    3d98:	4b4a      	ldr	r3, [pc, #296]	; (3ec4 <__ieee754_pow+0x1f8>)
    3d9a:	429f      	cmp	r7, r3
    3d9c:	dc00      	bgt.n	3da0 <__ieee754_pow+0xd4>
    3d9e:	e09f      	b.n	3ee0 <__ieee754_pow+0x214>
    3da0:	4b49      	ldr	r3, [pc, #292]	; (3ec8 <__ieee754_pow+0x1fc>)
    3da2:	429f      	cmp	r7, r3
    3da4:	dc01      	bgt.n	3daa <__ieee754_pow+0xde>
    3da6:	f000 fbce 	bl	4546 <__ieee754_pow+0x87a>
    3daa:	4b48      	ldr	r3, [pc, #288]	; (3ecc <__ieee754_pow+0x200>)
    3dac:	429c      	cmp	r4, r3
    3dae:	dd79      	ble.n	3ea4 <__ieee754_pow+0x1d8>
    3db0:	4653      	mov	r3, sl
    3db2:	2b00      	cmp	r3, #0
    3db4:	dd79      	ble.n	3eaa <__ieee754_pow+0x1de>
    3db6:	4a46      	ldr	r2, [pc, #280]	; (3ed0 <__ieee754_pow+0x204>)
    3db8:	4b46      	ldr	r3, [pc, #280]	; (3ed4 <__ieee754_pow+0x208>)
    3dba:	0010      	movs	r0, r2
    3dbc:	0019      	movs	r1, r3
    3dbe:	f002 f967 	bl	6090 <__aeabi_dmul>
    3dc2:	0006      	movs	r6, r0
    3dc4:	e7cb      	b.n	3d5e <__ieee754_pow+0x92>
    3dc6:	2c00      	cmp	r4, #0
    3dc8:	d004      	beq.n	3dd4 <__ieee754_pow+0x108>
    3dca:	4a3a      	ldr	r2, [pc, #232]	; (3eb4 <__ieee754_pow+0x1e8>)
    3dcc:	00ab      	lsls	r3, r5, #2
    3dce:	089b      	lsrs	r3, r3, #2
    3dd0:	4293      	cmp	r3, r2
    3dd2:	d1da      	bne.n	3d8a <__ieee754_pow+0xbe>
    3dd4:	4653      	mov	r3, sl
    3dd6:	2b00      	cmp	r3, #0
    3dd8:	da00      	bge.n	3ddc <__ieee754_pow+0x110>
    3dda:	e3ad      	b.n	4538 <__ieee754_pow+0x86c>
    3ddc:	464b      	mov	r3, r9
    3dde:	2b00      	cmp	r3, #0
    3de0:	db0d      	blt.n	3dfe <__ieee754_pow+0x132>
    3de2:	0006      	movs	r6, r0
    3de4:	e7bb      	b.n	3d5e <__ieee754_pow+0x92>
    3de6:	4653      	mov	r3, sl
    3de8:	0029      	movs	r1, r5
    3dea:	2b00      	cmp	r3, #0
    3dec:	dab7      	bge.n	3d5e <__ieee754_pow+0x92>
    3dee:	0032      	movs	r2, r6
    3df0:	002b      	movs	r3, r5
    3df2:	2000      	movs	r0, #0
    3df4:	492f      	ldr	r1, [pc, #188]	; (3eb4 <__ieee754_pow+0x1e8>)
    3df6:	f001 fd27 	bl	5848 <__aeabi_ddiv>
    3dfa:	0006      	movs	r6, r0
    3dfc:	e7af      	b.n	3d5e <__ieee754_pow+0x92>
    3dfe:	4b2f      	ldr	r3, [pc, #188]	; (3ebc <__ieee754_pow+0x1f0>)
    3e00:	469c      	mov	ip, r3
    3e02:	465b      	mov	r3, fp
    3e04:	4464      	add	r4, ip
    3e06:	431c      	orrs	r4, r3
    3e08:	d101      	bne.n	3e0e <__ieee754_pow+0x142>
    3e0a:	f000 fc2b 	bl	4664 <__ieee754_pow+0x998>
    3e0e:	465b      	mov	r3, fp
    3e10:	0006      	movs	r6, r0
    3e12:	2b01      	cmp	r3, #1
    3e14:	d1a3      	bne.n	3d5e <__ieee754_pow+0x92>
    3e16:	2380      	movs	r3, #128	; 0x80
    3e18:	061b      	lsls	r3, r3, #24
    3e1a:	469c      	mov	ip, r3
    3e1c:	4461      	add	r1, ip
    3e1e:	e79e      	b.n	3d5e <__ieee754_pow+0x92>
    3e20:	2a00      	cmp	r2, #0
    3e22:	d100      	bne.n	3e26 <__ieee754_pow+0x15a>
    3e24:	e772      	b.n	3d0c <__ieee754_pow+0x40>
    3e26:	e794      	b.n	3d52 <__ieee754_pow+0x86>
    3e28:	4b2b      	ldr	r3, [pc, #172]	; (3ed8 <__ieee754_pow+0x20c>)
    3e2a:	429f      	cmp	r7, r3
    3e2c:	dc2b      	bgt.n	3e86 <__ieee754_pow+0x1ba>
    3e2e:	4b27      	ldr	r3, [pc, #156]	; (3ecc <__ieee754_pow+0x200>)
    3e30:	429f      	cmp	r7, r3
    3e32:	dc00      	bgt.n	3e36 <__ieee754_pow+0x16a>
    3e34:	e770      	b.n	3d18 <__ieee754_pow+0x4c>
    3e36:	4929      	ldr	r1, [pc, #164]	; (3edc <__ieee754_pow+0x210>)
    3e38:	153b      	asrs	r3, r7, #20
    3e3a:	468c      	mov	ip, r1
    3e3c:	4463      	add	r3, ip
    3e3e:	2b14      	cmp	r3, #20
    3e40:	dc01      	bgt.n	3e46 <__ieee754_pow+0x17a>
    3e42:	f000 fbf2 	bl	462a <__ieee754_pow+0x95e>
    3e46:	2134      	movs	r1, #52	; 0x34
    3e48:	1acb      	subs	r3, r1, r3
    3e4a:	9900      	ldr	r1, [sp, #0]
    3e4c:	40d9      	lsrs	r1, r3
    3e4e:	0008      	movs	r0, r1
    3e50:	4098      	lsls	r0, r3
    3e52:	4282      	cmp	r2, r0
    3e54:	d000      	beq.n	3e58 <__ieee754_pow+0x18c>
    3e56:	e75f      	b.n	3d18 <__ieee754_pow+0x4c>
    3e58:	2301      	movs	r3, #1
    3e5a:	4019      	ands	r1, r3
    3e5c:	3301      	adds	r3, #1
    3e5e:	1a5b      	subs	r3, r3, r1
    3e60:	469b      	mov	fp, r3
    3e62:	e759      	b.n	3d18 <__ieee754_pow+0x4c>
    3e64:	4b15      	ldr	r3, [pc, #84]	; (3ebc <__ieee754_pow+0x1f0>)
    3e66:	18e0      	adds	r0, r4, r3
    3e68:	4306      	orrs	r6, r0
    3e6a:	d100      	bne.n	3e6e <__ieee754_pow+0x1a2>
    3e6c:	e775      	b.n	3d5a <__ieee754_pow+0x8e>
    3e6e:	4b17      	ldr	r3, [pc, #92]	; (3ecc <__ieee754_pow+0x200>)
    3e70:	429c      	cmp	r4, r3
    3e72:	dc00      	bgt.n	3e76 <__ieee754_pow+0x1aa>
    3e74:	e351      	b.n	451a <__ieee754_pow+0x84e>
    3e76:	4653      	mov	r3, sl
    3e78:	2b00      	cmp	r3, #0
    3e7a:	db16      	blt.n	3eaa <__ieee754_pow+0x1de>
    3e7c:	9b00      	ldr	r3, [sp, #0]
    3e7e:	9c01      	ldr	r4, [sp, #4]
    3e80:	001e      	movs	r6, r3
    3e82:	0021      	movs	r1, r4
    3e84:	e76b      	b.n	3d5e <__ieee754_pow+0x92>
    3e86:	2302      	movs	r3, #2
    3e88:	469b      	mov	fp, r3
    3e8a:	e745      	b.n	3d18 <__ieee754_pow+0x4c>
    3e8c:	0032      	movs	r2, r6
    3e8e:	002b      	movs	r3, r5
    3e90:	0030      	movs	r0, r6
    3e92:	0029      	movs	r1, r5
    3e94:	f002 fb76 	bl	6584 <__aeabi_dsub>
    3e98:	0002      	movs	r2, r0
    3e9a:	000b      	movs	r3, r1
    3e9c:	f001 fcd4 	bl	5848 <__aeabi_ddiv>
    3ea0:	0006      	movs	r6, r0
    3ea2:	e75c      	b.n	3d5e <__ieee754_pow+0x92>
    3ea4:	4653      	mov	r3, sl
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	db85      	blt.n	3db6 <__ieee754_pow+0xea>
    3eaa:	2600      	movs	r6, #0
    3eac:	2100      	movs	r1, #0
    3eae:	e756      	b.n	3d5e <__ieee754_pow+0x92>
    3eb0:	7ff00000 	.word	0x7ff00000
    3eb4:	3ff00000 	.word	0x3ff00000
    3eb8:	3fe00000 	.word	0x3fe00000
    3ebc:	c0100000 	.word	0xc0100000
    3ec0:	00007044 	.word	0x00007044
    3ec4:	41e00000 	.word	0x41e00000
    3ec8:	43f00000 	.word	0x43f00000
    3ecc:	3fefffff 	.word	0x3fefffff
    3ed0:	8800759c 	.word	0x8800759c
    3ed4:	7e37e43c 	.word	0x7e37e43c
    3ed8:	433fffff 	.word	0x433fffff
    3edc:	fffffc01 	.word	0xfffffc01
    3ee0:	4be8      	ldr	r3, [pc, #928]	; (4284 <__ieee754_pow+0x5b8>)
    3ee2:	2200      	movs	r2, #0
    3ee4:	429c      	cmp	r4, r3
    3ee6:	dc06      	bgt.n	3ef6 <__ieee754_pow+0x22a>
    3ee8:	2200      	movs	r2, #0
    3eea:	4be7      	ldr	r3, [pc, #924]	; (4288 <__ieee754_pow+0x5bc>)
    3eec:	f002 f8d0 	bl	6090 <__aeabi_dmul>
    3ef0:	2235      	movs	r2, #53	; 0x35
    3ef2:	000c      	movs	r4, r1
    3ef4:	4252      	negs	r2, r2
    3ef6:	4de5      	ldr	r5, [pc, #916]	; (428c <__ieee754_pow+0x5c0>)
    3ef8:	1523      	asrs	r3, r4, #20
    3efa:	46ac      	mov	ip, r5
    3efc:	4463      	add	r3, ip
    3efe:	4699      	mov	r9, r3
    3f00:	0324      	lsls	r4, r4, #12
    3f02:	4de3      	ldr	r5, [pc, #908]	; (4290 <__ieee754_pow+0x5c4>)
    3f04:	4be3      	ldr	r3, [pc, #908]	; (4294 <__ieee754_pow+0x5c8>)
    3f06:	0b24      	lsrs	r4, r4, #12
    3f08:	4491      	add	r9, r2
    3f0a:	4325      	orrs	r5, r4
    3f0c:	429c      	cmp	r4, r3
    3f0e:	dd09      	ble.n	3f24 <__ieee754_pow+0x258>
    3f10:	4be1      	ldr	r3, [pc, #900]	; (4298 <__ieee754_pow+0x5cc>)
    3f12:	429c      	cmp	r4, r3
    3f14:	dc00      	bgt.n	3f18 <__ieee754_pow+0x24c>
    3f16:	e3a9      	b.n	466c <__ieee754_pow+0x9a0>
    3f18:	2301      	movs	r3, #1
    3f1a:	469c      	mov	ip, r3
    3f1c:	4bdf      	ldr	r3, [pc, #892]	; (429c <__ieee754_pow+0x5d0>)
    3f1e:	44e1      	add	r9, ip
    3f20:	469c      	mov	ip, r3
    3f22:	4465      	add	r5, ip
    3f24:	2300      	movs	r3, #0
    3f26:	2400      	movs	r4, #0
    3f28:	2200      	movs	r2, #0
    3f2a:	9308      	str	r3, [sp, #32]
    3f2c:	9409      	str	r4, [sp, #36]	; 0x24
    3f2e:	930c      	str	r3, [sp, #48]	; 0x30
    3f30:	940d      	str	r4, [sp, #52]	; 0x34
    3f32:	2400      	movs	r4, #0
    3f34:	4bd6      	ldr	r3, [pc, #856]	; (4290 <__ieee754_pow+0x5c4>)
    3f36:	9206      	str	r2, [sp, #24]
    3f38:	9307      	str	r3, [sp, #28]
    3f3a:	9a06      	ldr	r2, [sp, #24]
    3f3c:	9b07      	ldr	r3, [sp, #28]
    3f3e:	0029      	movs	r1, r5
    3f40:	900a      	str	r0, [sp, #40]	; 0x28
    3f42:	910b      	str	r1, [sp, #44]	; 0x2c
    3f44:	f002 fb1e 	bl	6584 <__aeabi_dsub>
    3f48:	9a06      	ldr	r2, [sp, #24]
    3f4a:	9b07      	ldr	r3, [sp, #28]
    3f4c:	0006      	movs	r6, r0
    3f4e:	000f      	movs	r7, r1
    3f50:	980a      	ldr	r0, [sp, #40]	; 0x28
    3f52:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3f54:	f001 f94c 	bl	51f0 <__aeabi_dadd>
    3f58:	0002      	movs	r2, r0
    3f5a:	000b      	movs	r3, r1
    3f5c:	2000      	movs	r0, #0
    3f5e:	49cc      	ldr	r1, [pc, #816]	; (4290 <__ieee754_pow+0x5c4>)
    3f60:	f001 fc72 	bl	5848 <__aeabi_ddiv>
    3f64:	000a      	movs	r2, r1
    3f66:	0001      	movs	r1, r0
    3f68:	0013      	movs	r3, r2
    3f6a:	910e      	str	r1, [sp, #56]	; 0x38
    3f6c:	920f      	str	r2, [sp, #60]	; 0x3c
    3f6e:	0002      	movs	r2, r0
    3f70:	0039      	movs	r1, r7
    3f72:	0030      	movs	r0, r6
    3f74:	f002 f88c 	bl	6090 <__aeabi_dmul>
    3f78:	000a      	movs	r2, r1
    3f7a:	0001      	movs	r1, r0
    3f7c:	2080      	movs	r0, #128	; 0x80
    3f7e:	9104      	str	r1, [sp, #16]
    3f80:	9205      	str	r2, [sp, #20]
    3f82:	0013      	movs	r3, r2
    3f84:	2200      	movs	r2, #0
    3f86:	2180      	movs	r1, #128	; 0x80
    3f88:	0300      	lsls	r0, r0, #12
    3f8a:	4684      	mov	ip, r0
    3f8c:	9202      	str	r2, [sp, #8]
    3f8e:	9303      	str	r3, [sp, #12]
    3f90:	2200      	movs	r2, #0
    3f92:	0589      	lsls	r1, r1, #22
    3f94:	106d      	asrs	r5, r5, #1
    3f96:	430d      	orrs	r5, r1
    3f98:	4465      	add	r5, ip
    3f9a:	192b      	adds	r3, r5, r4
    3f9c:	9802      	ldr	r0, [sp, #8]
    3f9e:	9903      	ldr	r1, [sp, #12]
    3fa0:	0014      	movs	r4, r2
    3fa2:	001d      	movs	r5, r3
    3fa4:	f002 f874 	bl	6090 <__aeabi_dmul>
    3fa8:	0002      	movs	r2, r0
    3faa:	000b      	movs	r3, r1
    3fac:	0030      	movs	r0, r6
    3fae:	0039      	movs	r1, r7
    3fb0:	f002 fae8 	bl	6584 <__aeabi_dsub>
    3fb4:	9a06      	ldr	r2, [sp, #24]
    3fb6:	9b07      	ldr	r3, [sp, #28]
    3fb8:	0006      	movs	r6, r0
    3fba:	000f      	movs	r7, r1
    3fbc:	0020      	movs	r0, r4
    3fbe:	0029      	movs	r1, r5
    3fc0:	f002 fae0 	bl	6584 <__aeabi_dsub>
    3fc4:	0002      	movs	r2, r0
    3fc6:	000b      	movs	r3, r1
    3fc8:	980a      	ldr	r0, [sp, #40]	; 0x28
    3fca:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3fcc:	f002 fada 	bl	6584 <__aeabi_dsub>
    3fd0:	9a02      	ldr	r2, [sp, #8]
    3fd2:	9b03      	ldr	r3, [sp, #12]
    3fd4:	f002 f85c 	bl	6090 <__aeabi_dmul>
    3fd8:	0002      	movs	r2, r0
    3fda:	000b      	movs	r3, r1
    3fdc:	0030      	movs	r0, r6
    3fde:	0039      	movs	r1, r7
    3fe0:	f002 fad0 	bl	6584 <__aeabi_dsub>
    3fe4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3fe6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3fe8:	f002 f852 	bl	6090 <__aeabi_dmul>
    3fec:	9d04      	ldr	r5, [sp, #16]
    3fee:	9e05      	ldr	r6, [sp, #20]
    3ff0:	9006      	str	r0, [sp, #24]
    3ff2:	9107      	str	r1, [sp, #28]
    3ff4:	002a      	movs	r2, r5
    3ff6:	0033      	movs	r3, r6
    3ff8:	0028      	movs	r0, r5
    3ffa:	0031      	movs	r1, r6
    3ffc:	f002 f848 	bl	6090 <__aeabi_dmul>
    4000:	0006      	movs	r6, r0
    4002:	000f      	movs	r7, r1
    4004:	4aa6      	ldr	r2, [pc, #664]	; (42a0 <__ieee754_pow+0x5d4>)
    4006:	4ba7      	ldr	r3, [pc, #668]	; (42a4 <__ieee754_pow+0x5d8>)
    4008:	f002 f842 	bl	6090 <__aeabi_dmul>
    400c:	4aa6      	ldr	r2, [pc, #664]	; (42a8 <__ieee754_pow+0x5dc>)
    400e:	4ba7      	ldr	r3, [pc, #668]	; (42ac <__ieee754_pow+0x5e0>)
    4010:	f001 f8ee 	bl	51f0 <__aeabi_dadd>
    4014:	0032      	movs	r2, r6
    4016:	003b      	movs	r3, r7
    4018:	f002 f83a 	bl	6090 <__aeabi_dmul>
    401c:	4aa4      	ldr	r2, [pc, #656]	; (42b0 <__ieee754_pow+0x5e4>)
    401e:	4ba5      	ldr	r3, [pc, #660]	; (42b4 <__ieee754_pow+0x5e8>)
    4020:	f001 f8e6 	bl	51f0 <__aeabi_dadd>
    4024:	0032      	movs	r2, r6
    4026:	003b      	movs	r3, r7
    4028:	f002 f832 	bl	6090 <__aeabi_dmul>
    402c:	4aa2      	ldr	r2, [pc, #648]	; (42b8 <__ieee754_pow+0x5ec>)
    402e:	4ba3      	ldr	r3, [pc, #652]	; (42bc <__ieee754_pow+0x5f0>)
    4030:	f001 f8de 	bl	51f0 <__aeabi_dadd>
    4034:	0032      	movs	r2, r6
    4036:	003b      	movs	r3, r7
    4038:	f002 f82a 	bl	6090 <__aeabi_dmul>
    403c:	4aa0      	ldr	r2, [pc, #640]	; (42c0 <__ieee754_pow+0x5f4>)
    403e:	4ba1      	ldr	r3, [pc, #644]	; (42c4 <__ieee754_pow+0x5f8>)
    4040:	f001 f8d6 	bl	51f0 <__aeabi_dadd>
    4044:	0032      	movs	r2, r6
    4046:	003b      	movs	r3, r7
    4048:	f002 f822 	bl	6090 <__aeabi_dmul>
    404c:	4a9e      	ldr	r2, [pc, #632]	; (42c8 <__ieee754_pow+0x5fc>)
    404e:	4b9f      	ldr	r3, [pc, #636]	; (42cc <__ieee754_pow+0x600>)
    4050:	f001 f8ce 	bl	51f0 <__aeabi_dadd>
    4054:	0032      	movs	r2, r6
    4056:	0004      	movs	r4, r0
    4058:	000d      	movs	r5, r1
    405a:	003b      	movs	r3, r7
    405c:	0030      	movs	r0, r6
    405e:	0039      	movs	r1, r7
    4060:	f002 f816 	bl	6090 <__aeabi_dmul>
    4064:	0002      	movs	r2, r0
    4066:	000b      	movs	r3, r1
    4068:	0020      	movs	r0, r4
    406a:	0029      	movs	r1, r5
    406c:	f002 f810 	bl	6090 <__aeabi_dmul>
    4070:	9e02      	ldr	r6, [sp, #8]
    4072:	9f03      	ldr	r7, [sp, #12]
    4074:	0004      	movs	r4, r0
    4076:	000d      	movs	r5, r1
    4078:	9804      	ldr	r0, [sp, #16]
    407a:	9905      	ldr	r1, [sp, #20]
    407c:	0032      	movs	r2, r6
    407e:	003b      	movs	r3, r7
    4080:	f001 f8b6 	bl	51f0 <__aeabi_dadd>
    4084:	9a06      	ldr	r2, [sp, #24]
    4086:	9b07      	ldr	r3, [sp, #28]
    4088:	f002 f802 	bl	6090 <__aeabi_dmul>
    408c:	0022      	movs	r2, r4
    408e:	002b      	movs	r3, r5
    4090:	f001 f8ae 	bl	51f0 <__aeabi_dadd>
    4094:	0032      	movs	r2, r6
    4096:	900a      	str	r0, [sp, #40]	; 0x28
    4098:	910b      	str	r1, [sp, #44]	; 0x2c
    409a:	003b      	movs	r3, r7
    409c:	0030      	movs	r0, r6
    409e:	0039      	movs	r1, r7
    40a0:	9602      	str	r6, [sp, #8]
    40a2:	9703      	str	r7, [sp, #12]
    40a4:	f001 fff4 	bl	6090 <__aeabi_dmul>
    40a8:	2200      	movs	r2, #0
    40aa:	4b89      	ldr	r3, [pc, #548]	; (42d0 <__ieee754_pow+0x604>)
    40ac:	0004      	movs	r4, r0
    40ae:	000d      	movs	r5, r1
    40b0:	f001 f89e 	bl	51f0 <__aeabi_dadd>
    40b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    40b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    40b8:	f001 f89a 	bl	51f0 <__aeabi_dadd>
    40bc:	2600      	movs	r6, #0
    40be:	000f      	movs	r7, r1
    40c0:	0032      	movs	r2, r6
    40c2:	000b      	movs	r3, r1
    40c4:	9802      	ldr	r0, [sp, #8]
    40c6:	9903      	ldr	r1, [sp, #12]
    40c8:	f001 ffe2 	bl	6090 <__aeabi_dmul>
    40cc:	2200      	movs	r2, #0
    40ce:	9002      	str	r0, [sp, #8]
    40d0:	9103      	str	r1, [sp, #12]
    40d2:	4b7f      	ldr	r3, [pc, #508]	; (42d0 <__ieee754_pow+0x604>)
    40d4:	0030      	movs	r0, r6
    40d6:	0039      	movs	r1, r7
    40d8:	f002 fa54 	bl	6584 <__aeabi_dsub>
    40dc:	0022      	movs	r2, r4
    40de:	002b      	movs	r3, r5
    40e0:	f002 fa50 	bl	6584 <__aeabi_dsub>
    40e4:	0002      	movs	r2, r0
    40e6:	000b      	movs	r3, r1
    40e8:	980a      	ldr	r0, [sp, #40]	; 0x28
    40ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
    40ec:	f002 fa4a 	bl	6584 <__aeabi_dsub>
    40f0:	9a04      	ldr	r2, [sp, #16]
    40f2:	9b05      	ldr	r3, [sp, #20]
    40f4:	f001 ffcc 	bl	6090 <__aeabi_dmul>
    40f8:	0032      	movs	r2, r6
    40fa:	0004      	movs	r4, r0
    40fc:	000d      	movs	r5, r1
    40fe:	9806      	ldr	r0, [sp, #24]
    4100:	9907      	ldr	r1, [sp, #28]
    4102:	003b      	movs	r3, r7
    4104:	f001 ffc4 	bl	6090 <__aeabi_dmul>
    4108:	0002      	movs	r2, r0
    410a:	000b      	movs	r3, r1
    410c:	0020      	movs	r0, r4
    410e:	0029      	movs	r1, r5
    4110:	f001 f86e 	bl	51f0 <__aeabi_dadd>
    4114:	0004      	movs	r4, r0
    4116:	000d      	movs	r5, r1
    4118:	0002      	movs	r2, r0
    411a:	000b      	movs	r3, r1
    411c:	9802      	ldr	r0, [sp, #8]
    411e:	9903      	ldr	r1, [sp, #12]
    4120:	f001 f866 	bl	51f0 <__aeabi_dadd>
    4124:	2600      	movs	r6, #0
    4126:	22e0      	movs	r2, #224	; 0xe0
    4128:	4b6a      	ldr	r3, [pc, #424]	; (42d4 <__ieee754_pow+0x608>)
    412a:	0612      	lsls	r2, r2, #24
    412c:	0030      	movs	r0, r6
    412e:	000f      	movs	r7, r1
    4130:	f001 ffae 	bl	6090 <__aeabi_dmul>
    4134:	9a02      	ldr	r2, [sp, #8]
    4136:	9b03      	ldr	r3, [sp, #12]
    4138:	9004      	str	r0, [sp, #16]
    413a:	9105      	str	r1, [sp, #20]
    413c:	0030      	movs	r0, r6
    413e:	0039      	movs	r1, r7
    4140:	f002 fa20 	bl	6584 <__aeabi_dsub>
    4144:	0002      	movs	r2, r0
    4146:	000b      	movs	r3, r1
    4148:	0020      	movs	r0, r4
    414a:	0029      	movs	r1, r5
    414c:	f002 fa1a 	bl	6584 <__aeabi_dsub>
    4150:	4a61      	ldr	r2, [pc, #388]	; (42d8 <__ieee754_pow+0x60c>)
    4152:	4b60      	ldr	r3, [pc, #384]	; (42d4 <__ieee754_pow+0x608>)
    4154:	f001 ff9c 	bl	6090 <__aeabi_dmul>
    4158:	4a60      	ldr	r2, [pc, #384]	; (42dc <__ieee754_pow+0x610>)
    415a:	0004      	movs	r4, r0
    415c:	000d      	movs	r5, r1
    415e:	4b60      	ldr	r3, [pc, #384]	; (42e0 <__ieee754_pow+0x614>)
    4160:	0030      	movs	r0, r6
    4162:	0039      	movs	r1, r7
    4164:	f001 ff94 	bl	6090 <__aeabi_dmul>
    4168:	0002      	movs	r2, r0
    416a:	000b      	movs	r3, r1
    416c:	0020      	movs	r0, r4
    416e:	0029      	movs	r1, r5
    4170:	f001 f83e 	bl	51f0 <__aeabi_dadd>
    4174:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4178:	f001 f83a 	bl	51f0 <__aeabi_dadd>
    417c:	0006      	movs	r6, r0
    417e:	4648      	mov	r0, r9
    4180:	000f      	movs	r7, r1
    4182:	f002 fda9 	bl	6cd8 <__aeabi_i2d>
    4186:	0004      	movs	r4, r0
    4188:	000d      	movs	r5, r1
    418a:	9804      	ldr	r0, [sp, #16]
    418c:	9905      	ldr	r1, [sp, #20]
    418e:	0032      	movs	r2, r6
    4190:	003b      	movs	r3, r7
    4192:	f001 f82d 	bl	51f0 <__aeabi_dadd>
    4196:	9a08      	ldr	r2, [sp, #32]
    4198:	9b09      	ldr	r3, [sp, #36]	; 0x24
    419a:	f001 f829 	bl	51f0 <__aeabi_dadd>
    419e:	0022      	movs	r2, r4
    41a0:	002b      	movs	r3, r5
    41a2:	f001 f825 	bl	51f0 <__aeabi_dadd>
    41a6:	2000      	movs	r0, #0
    41a8:	0022      	movs	r2, r4
    41aa:	002b      	movs	r3, r5
    41ac:	9002      	str	r0, [sp, #8]
    41ae:	9103      	str	r1, [sp, #12]
    41b0:	f002 f9e8 	bl	6584 <__aeabi_dsub>
    41b4:	9a08      	ldr	r2, [sp, #32]
    41b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    41b8:	f002 f9e4 	bl	6584 <__aeabi_dsub>
    41bc:	9a04      	ldr	r2, [sp, #16]
    41be:	9b05      	ldr	r3, [sp, #20]
    41c0:	f002 f9e0 	bl	6584 <__aeabi_dsub>
    41c4:	0002      	movs	r2, r0
    41c6:	000b      	movs	r3, r1
    41c8:	0030      	movs	r0, r6
    41ca:	0039      	movs	r1, r7
    41cc:	f002 f9da 	bl	6584 <__aeabi_dsub>
    41d0:	9004      	str	r0, [sp, #16]
    41d2:	9105      	str	r1, [sp, #20]
    41d4:	465b      	mov	r3, fp
    41d6:	4642      	mov	r2, r8
    41d8:	3b01      	subs	r3, #1
    41da:	4313      	orrs	r3, r2
    41dc:	d100      	bne.n	41e0 <__ieee754_pow+0x514>
    41de:	e197      	b.n	4510 <__ieee754_pow+0x844>
    41e0:	2300      	movs	r3, #0
    41e2:	4c2b      	ldr	r4, [pc, #172]	; (4290 <__ieee754_pow+0x5c4>)
    41e4:	9306      	str	r3, [sp, #24]
    41e6:	9407      	str	r4, [sp, #28]
    41e8:	9800      	ldr	r0, [sp, #0]
    41ea:	9901      	ldr	r1, [sp, #4]
    41ec:	2600      	movs	r6, #0
    41ee:	000b      	movs	r3, r1
    41f0:	0032      	movs	r2, r6
    41f2:	000f      	movs	r7, r1
    41f4:	f002 f9c6 	bl	6584 <__aeabi_dsub>
    41f8:	9a02      	ldr	r2, [sp, #8]
    41fa:	9b03      	ldr	r3, [sp, #12]
    41fc:	f001 ff48 	bl	6090 <__aeabi_dmul>
    4200:	9a00      	ldr	r2, [sp, #0]
    4202:	9b01      	ldr	r3, [sp, #4]
    4204:	0004      	movs	r4, r0
    4206:	000d      	movs	r5, r1
    4208:	9804      	ldr	r0, [sp, #16]
    420a:	9905      	ldr	r1, [sp, #20]
    420c:	f001 ff40 	bl	6090 <__aeabi_dmul>
    4210:	0002      	movs	r2, r0
    4212:	000b      	movs	r3, r1
    4214:	0020      	movs	r0, r4
    4216:	0029      	movs	r1, r5
    4218:	f000 ffea 	bl	51f0 <__aeabi_dadd>
    421c:	0004      	movs	r4, r0
    421e:	000d      	movs	r5, r1
    4220:	9802      	ldr	r0, [sp, #8]
    4222:	9903      	ldr	r1, [sp, #12]
    4224:	003b      	movs	r3, r7
    4226:	0032      	movs	r2, r6
    4228:	9404      	str	r4, [sp, #16]
    422a:	9505      	str	r5, [sp, #20]
    422c:	f001 ff30 	bl	6090 <__aeabi_dmul>
    4230:	9000      	str	r0, [sp, #0]
    4232:	9101      	str	r1, [sp, #4]
    4234:	000b      	movs	r3, r1
    4236:	0002      	movs	r2, r0
    4238:	0029      	movs	r1, r5
    423a:	0020      	movs	r0, r4
    423c:	f000 ffd8 	bl	51f0 <__aeabi_dadd>
    4240:	4b28      	ldr	r3, [pc, #160]	; (42e4 <__ieee754_pow+0x618>)
    4242:	4681      	mov	r9, r0
    4244:	1e0f      	subs	r7, r1, #0
    4246:	468a      	mov	sl, r1
    4248:	429f      	cmp	r7, r3
    424a:	dc00      	bgt.n	424e <__ieee754_pow+0x582>
    424c:	e13c      	b.n	44c8 <__ieee754_pow+0x7fc>
    424e:	4b26      	ldr	r3, [pc, #152]	; (42e8 <__ieee754_pow+0x61c>)
    4250:	18cb      	adds	r3, r1, r3
    4252:	4303      	orrs	r3, r0
    4254:	d000      	beq.n	4258 <__ieee754_pow+0x58c>
    4256:	e1db      	b.n	4610 <__ieee754_pow+0x944>
    4258:	9804      	ldr	r0, [sp, #16]
    425a:	9905      	ldr	r1, [sp, #20]
    425c:	4a23      	ldr	r2, [pc, #140]	; (42ec <__ieee754_pow+0x620>)
    425e:	4b24      	ldr	r3, [pc, #144]	; (42f0 <__ieee754_pow+0x624>)
    4260:	f000 ffc6 	bl	51f0 <__aeabi_dadd>
    4264:	9a00      	ldr	r2, [sp, #0]
    4266:	9b01      	ldr	r3, [sp, #4]
    4268:	0004      	movs	r4, r0
    426a:	000d      	movs	r5, r1
    426c:	4648      	mov	r0, r9
    426e:	0039      	movs	r1, r7
    4270:	f002 f988 	bl	6584 <__aeabi_dsub>
    4274:	0002      	movs	r2, r0
    4276:	000b      	movs	r3, r1
    4278:	0020      	movs	r0, r4
    427a:	0029      	movs	r1, r5
    427c:	f000 fe24 	bl	4ec8 <__aeabi_dcmpgt>
    4280:	003e      	movs	r6, r7
    4282:	e037      	b.n	42f4 <__ieee754_pow+0x628>
    4284:	000fffff 	.word	0x000fffff
    4288:	43400000 	.word	0x43400000
    428c:	fffffc01 	.word	0xfffffc01
    4290:	3ff00000 	.word	0x3ff00000
    4294:	0003988e 	.word	0x0003988e
    4298:	000bb679 	.word	0x000bb679
    429c:	fff00000 	.word	0xfff00000
    42a0:	4a454eef 	.word	0x4a454eef
    42a4:	3fca7e28 	.word	0x3fca7e28
    42a8:	93c9db65 	.word	0x93c9db65
    42ac:	3fcd864a 	.word	0x3fcd864a
    42b0:	a91d4101 	.word	0xa91d4101
    42b4:	3fd17460 	.word	0x3fd17460
    42b8:	518f264d 	.word	0x518f264d
    42bc:	3fd55555 	.word	0x3fd55555
    42c0:	db6fabff 	.word	0xdb6fabff
    42c4:	3fdb6db6 	.word	0x3fdb6db6
    42c8:	33333303 	.word	0x33333303
    42cc:	3fe33333 	.word	0x3fe33333
    42d0:	40080000 	.word	0x40080000
    42d4:	3feec709 	.word	0x3feec709
    42d8:	dc3a03fd 	.word	0xdc3a03fd
    42dc:	145b01f5 	.word	0x145b01f5
    42e0:	be3e2fe0 	.word	0xbe3e2fe0
    42e4:	408fffff 	.word	0x408fffff
    42e8:	bf700000 	.word	0xbf700000
    42ec:	652b82fe 	.word	0x652b82fe
    42f0:	3c971547 	.word	0x3c971547
    42f4:	2800      	cmp	r0, #0
    42f6:	d000      	beq.n	42fa <__ieee754_pow+0x62e>
    42f8:	e18a      	b.n	4610 <__ieee754_pow+0x944>
    42fa:	2280      	movs	r2, #128	; 0x80
    42fc:	4be7      	ldr	r3, [pc, #924]	; (469c <__ieee754_pow+0x9d0>)
    42fe:	0352      	lsls	r2, r2, #13
    4300:	469c      	mov	ip, r3
    4302:	0013      	movs	r3, r2
    4304:	1536      	asrs	r6, r6, #20
    4306:	4466      	add	r6, ip
    4308:	4133      	asrs	r3, r6
    430a:	49e5      	ldr	r1, [pc, #916]	; (46a0 <__ieee754_pow+0x9d4>)
    430c:	19db      	adds	r3, r3, r7
    430e:	005e      	lsls	r6, r3, #1
    4310:	001c      	movs	r4, r3
    4312:	031b      	lsls	r3, r3, #12
    4314:	468c      	mov	ip, r1
    4316:	0b1b      	lsrs	r3, r3, #12
    4318:	4313      	orrs	r3, r2
    431a:	2214      	movs	r2, #20
    431c:	0d76      	lsrs	r6, r6, #21
    431e:	4fe1      	ldr	r7, [pc, #900]	; (46a4 <__ieee754_pow+0x9d8>)
    4320:	4466      	add	r6, ip
    4322:	4137      	asrs	r7, r6
    4324:	1b96      	subs	r6, r2, r6
    4326:	4133      	asrs	r3, r6
    4328:	4698      	mov	r8, r3
    432a:	4653      	mov	r3, sl
    432c:	43bc      	bics	r4, r7
    432e:	2000      	movs	r0, #0
    4330:	0021      	movs	r1, r4
    4332:	2b00      	cmp	r3, #0
    4334:	da00      	bge.n	4338 <__ieee754_pow+0x66c>
    4336:	e1a9      	b.n	468c <__ieee754_pow+0x9c0>
    4338:	0002      	movs	r2, r0
    433a:	000b      	movs	r3, r1
    433c:	9800      	ldr	r0, [sp, #0]
    433e:	9901      	ldr	r1, [sp, #4]
    4340:	f002 f920 	bl	6584 <__aeabi_dsub>
    4344:	000b      	movs	r3, r1
    4346:	9000      	str	r0, [sp, #0]
    4348:	9101      	str	r1, [sp, #4]
    434a:	0002      	movs	r2, r0
    434c:	9804      	ldr	r0, [sp, #16]
    434e:	9905      	ldr	r1, [sp, #20]
    4350:	f000 ff4e 	bl	51f0 <__aeabi_dadd>
    4354:	4643      	mov	r3, r8
    4356:	051b      	lsls	r3, r3, #20
    4358:	4699      	mov	r9, r3
    435a:	2000      	movs	r0, #0
    435c:	2200      	movs	r2, #0
    435e:	4bd2      	ldr	r3, [pc, #840]	; (46a8 <__ieee754_pow+0x9dc>)
    4360:	0006      	movs	r6, r0
    4362:	000f      	movs	r7, r1
    4364:	f001 fe94 	bl	6090 <__aeabi_dmul>
    4368:	9a00      	ldr	r2, [sp, #0]
    436a:	9b01      	ldr	r3, [sp, #4]
    436c:	9002      	str	r0, [sp, #8]
    436e:	9103      	str	r1, [sp, #12]
    4370:	0030      	movs	r0, r6
    4372:	0039      	movs	r1, r7
    4374:	f002 f906 	bl	6584 <__aeabi_dsub>
    4378:	0002      	movs	r2, r0
    437a:	000b      	movs	r3, r1
    437c:	9804      	ldr	r0, [sp, #16]
    437e:	9905      	ldr	r1, [sp, #20]
    4380:	f002 f900 	bl	6584 <__aeabi_dsub>
    4384:	4ac9      	ldr	r2, [pc, #804]	; (46ac <__ieee754_pow+0x9e0>)
    4386:	4bca      	ldr	r3, [pc, #808]	; (46b0 <__ieee754_pow+0x9e4>)
    4388:	f001 fe82 	bl	6090 <__aeabi_dmul>
    438c:	4ac9      	ldr	r2, [pc, #804]	; (46b4 <__ieee754_pow+0x9e8>)
    438e:	0004      	movs	r4, r0
    4390:	000d      	movs	r5, r1
    4392:	4bc9      	ldr	r3, [pc, #804]	; (46b8 <__ieee754_pow+0x9ec>)
    4394:	0030      	movs	r0, r6
    4396:	0039      	movs	r1, r7
    4398:	f001 fe7a 	bl	6090 <__aeabi_dmul>
    439c:	0002      	movs	r2, r0
    439e:	000b      	movs	r3, r1
    43a0:	0020      	movs	r0, r4
    43a2:	0029      	movs	r1, r5
    43a4:	f000 ff24 	bl	51f0 <__aeabi_dadd>
    43a8:	0004      	movs	r4, r0
    43aa:	000d      	movs	r5, r1
    43ac:	0002      	movs	r2, r0
    43ae:	000b      	movs	r3, r1
    43b0:	9802      	ldr	r0, [sp, #8]
    43b2:	9903      	ldr	r1, [sp, #12]
    43b4:	f000 ff1c 	bl	51f0 <__aeabi_dadd>
    43b8:	9a02      	ldr	r2, [sp, #8]
    43ba:	9b03      	ldr	r3, [sp, #12]
    43bc:	0006      	movs	r6, r0
    43be:	000f      	movs	r7, r1
    43c0:	f002 f8e0 	bl	6584 <__aeabi_dsub>
    43c4:	0002      	movs	r2, r0
    43c6:	000b      	movs	r3, r1
    43c8:	0020      	movs	r0, r4
    43ca:	0029      	movs	r1, r5
    43cc:	f002 f8da 	bl	6584 <__aeabi_dsub>
    43d0:	0032      	movs	r2, r6
    43d2:	9000      	str	r0, [sp, #0]
    43d4:	9101      	str	r1, [sp, #4]
    43d6:	003b      	movs	r3, r7
    43d8:	0030      	movs	r0, r6
    43da:	0039      	movs	r1, r7
    43dc:	f001 fe58 	bl	6090 <__aeabi_dmul>
    43e0:	0004      	movs	r4, r0
    43e2:	000d      	movs	r5, r1
    43e4:	4ab5      	ldr	r2, [pc, #724]	; (46bc <__ieee754_pow+0x9f0>)
    43e6:	4bb6      	ldr	r3, [pc, #728]	; (46c0 <__ieee754_pow+0x9f4>)
    43e8:	f001 fe52 	bl	6090 <__aeabi_dmul>
    43ec:	4ab5      	ldr	r2, [pc, #724]	; (46c4 <__ieee754_pow+0x9f8>)
    43ee:	4bb6      	ldr	r3, [pc, #728]	; (46c8 <__ieee754_pow+0x9fc>)
    43f0:	f002 f8c8 	bl	6584 <__aeabi_dsub>
    43f4:	0022      	movs	r2, r4
    43f6:	002b      	movs	r3, r5
    43f8:	f001 fe4a 	bl	6090 <__aeabi_dmul>
    43fc:	4ab3      	ldr	r2, [pc, #716]	; (46cc <__ieee754_pow+0xa00>)
    43fe:	4bb4      	ldr	r3, [pc, #720]	; (46d0 <__ieee754_pow+0xa04>)
    4400:	f000 fef6 	bl	51f0 <__aeabi_dadd>
    4404:	0022      	movs	r2, r4
    4406:	002b      	movs	r3, r5
    4408:	f001 fe42 	bl	6090 <__aeabi_dmul>
    440c:	4ab1      	ldr	r2, [pc, #708]	; (46d4 <__ieee754_pow+0xa08>)
    440e:	4bb2      	ldr	r3, [pc, #712]	; (46d8 <__ieee754_pow+0xa0c>)
    4410:	f002 f8b8 	bl	6584 <__aeabi_dsub>
    4414:	0022      	movs	r2, r4
    4416:	002b      	movs	r3, r5
    4418:	f001 fe3a 	bl	6090 <__aeabi_dmul>
    441c:	4aaf      	ldr	r2, [pc, #700]	; (46dc <__ieee754_pow+0xa10>)
    441e:	4bb0      	ldr	r3, [pc, #704]	; (46e0 <__ieee754_pow+0xa14>)
    4420:	f000 fee6 	bl	51f0 <__aeabi_dadd>
    4424:	0022      	movs	r2, r4
    4426:	002b      	movs	r3, r5
    4428:	f001 fe32 	bl	6090 <__aeabi_dmul>
    442c:	0002      	movs	r2, r0
    442e:	000b      	movs	r3, r1
    4430:	0030      	movs	r0, r6
    4432:	0039      	movs	r1, r7
    4434:	f002 f8a6 	bl	6584 <__aeabi_dsub>
    4438:	0004      	movs	r4, r0
    443a:	000d      	movs	r5, r1
    443c:	0002      	movs	r2, r0
    443e:	000b      	movs	r3, r1
    4440:	0030      	movs	r0, r6
    4442:	0039      	movs	r1, r7
    4444:	f001 fe24 	bl	6090 <__aeabi_dmul>
    4448:	2380      	movs	r3, #128	; 0x80
    444a:	9002      	str	r0, [sp, #8]
    444c:	9103      	str	r1, [sp, #12]
    444e:	2200      	movs	r2, #0
    4450:	05db      	lsls	r3, r3, #23
    4452:	0020      	movs	r0, r4
    4454:	0029      	movs	r1, r5
    4456:	f002 f895 	bl	6584 <__aeabi_dsub>
    445a:	0002      	movs	r2, r0
    445c:	000b      	movs	r3, r1
    445e:	9802      	ldr	r0, [sp, #8]
    4460:	9903      	ldr	r1, [sp, #12]
    4462:	f001 f9f1 	bl	5848 <__aeabi_ddiv>
    4466:	9a00      	ldr	r2, [sp, #0]
    4468:	9b01      	ldr	r3, [sp, #4]
    446a:	0004      	movs	r4, r0
    446c:	000d      	movs	r5, r1
    446e:	0030      	movs	r0, r6
    4470:	0039      	movs	r1, r7
    4472:	f001 fe0d 	bl	6090 <__aeabi_dmul>
    4476:	9a00      	ldr	r2, [sp, #0]
    4478:	9b01      	ldr	r3, [sp, #4]
    447a:	f000 feb9 	bl	51f0 <__aeabi_dadd>
    447e:	0002      	movs	r2, r0
    4480:	000b      	movs	r3, r1
    4482:	0020      	movs	r0, r4
    4484:	0029      	movs	r1, r5
    4486:	f002 f87d 	bl	6584 <__aeabi_dsub>
    448a:	0032      	movs	r2, r6
    448c:	003b      	movs	r3, r7
    448e:	f002 f879 	bl	6584 <__aeabi_dsub>
    4492:	0002      	movs	r2, r0
    4494:	000b      	movs	r3, r1
    4496:	2000      	movs	r0, #0
    4498:	4992      	ldr	r1, [pc, #584]	; (46e4 <__ieee754_pow+0xa18>)
    449a:	f002 f873 	bl	6584 <__aeabi_dsub>
    449e:	464b      	mov	r3, r9
    44a0:	185b      	adds	r3, r3, r1
    44a2:	151a      	asrs	r2, r3, #20
    44a4:	2a00      	cmp	r2, #0
    44a6:	dc00      	bgt.n	44aa <__ieee754_pow+0x7de>
    44a8:	e0f4      	b.n	4694 <__ieee754_pow+0x9c8>
    44aa:	0019      	movs	r1, r3
    44ac:	9a06      	ldr	r2, [sp, #24]
    44ae:	9b07      	ldr	r3, [sp, #28]
    44b0:	f001 fdee 	bl	6090 <__aeabi_dmul>
    44b4:	0006      	movs	r6, r0
    44b6:	e452      	b.n	3d5e <__ieee754_pow+0x92>
    44b8:	0032      	movs	r2, r6
    44ba:	0030      	movs	r0, r6
    44bc:	002b      	movs	r3, r5
    44be:	0029      	movs	r1, r5
    44c0:	f001 fde6 	bl	6090 <__aeabi_dmul>
    44c4:	0006      	movs	r6, r0
    44c6:	e44a      	b.n	3d5e <__ieee754_pow+0x92>
    44c8:	4b87      	ldr	r3, [pc, #540]	; (46e8 <__ieee754_pow+0xa1c>)
    44ca:	004e      	lsls	r6, r1, #1
    44cc:	0876      	lsrs	r6, r6, #1
    44ce:	429e      	cmp	r6, r3
    44d0:	dc00      	bgt.n	44d4 <__ieee754_pow+0x808>
    44d2:	e0bf      	b.n	4654 <__ieee754_pow+0x988>
    44d4:	4b85      	ldr	r3, [pc, #532]	; (46ec <__ieee754_pow+0xa20>)
    44d6:	18cb      	adds	r3, r1, r3
    44d8:	4303      	orrs	r3, r0
    44da:	d10c      	bne.n	44f6 <__ieee754_pow+0x82a>
    44dc:	9a00      	ldr	r2, [sp, #0]
    44de:	9b01      	ldr	r3, [sp, #4]
    44e0:	f002 f850 	bl	6584 <__aeabi_dsub>
    44e4:	0002      	movs	r2, r0
    44e6:	000b      	movs	r3, r1
    44e8:	9804      	ldr	r0, [sp, #16]
    44ea:	9905      	ldr	r1, [sp, #20]
    44ec:	f000 fce2 	bl	4eb4 <__aeabi_dcmple>
    44f0:	2800      	cmp	r0, #0
    44f2:	d100      	bne.n	44f6 <__ieee754_pow+0x82a>
    44f4:	e701      	b.n	42fa <__ieee754_pow+0x62e>
    44f6:	9806      	ldr	r0, [sp, #24]
    44f8:	9907      	ldr	r1, [sp, #28]
    44fa:	4a7d      	ldr	r2, [pc, #500]	; (46f0 <__ieee754_pow+0xa24>)
    44fc:	4b7d      	ldr	r3, [pc, #500]	; (46f4 <__ieee754_pow+0xa28>)
    44fe:	f001 fdc7 	bl	6090 <__aeabi_dmul>
    4502:	4a7b      	ldr	r2, [pc, #492]	; (46f0 <__ieee754_pow+0xa24>)
    4504:	4b7b      	ldr	r3, [pc, #492]	; (46f4 <__ieee754_pow+0xa28>)
    4506:	f001 fdc3 	bl	6090 <__aeabi_dmul>
    450a:	0006      	movs	r6, r0
    450c:	f7ff fc27 	bl	3d5e <__ieee754_pow+0x92>
    4510:	2300      	movs	r3, #0
    4512:	4c79      	ldr	r4, [pc, #484]	; (46f8 <__ieee754_pow+0xa2c>)
    4514:	9306      	str	r3, [sp, #24]
    4516:	9407      	str	r4, [sp, #28]
    4518:	e666      	b.n	41e8 <__ieee754_pow+0x51c>
    451a:	4653      	mov	r3, sl
    451c:	2b00      	cmp	r3, #0
    451e:	db00      	blt.n	4522 <__ieee754_pow+0x856>
    4520:	e4c3      	b.n	3eaa <__ieee754_pow+0x1de>
    4522:	9b00      	ldr	r3, [sp, #0]
    4524:	9c01      	ldr	r4, [sp, #4]
    4526:	2280      	movs	r2, #128	; 0x80
    4528:	0612      	lsls	r2, r2, #24
    452a:	001e      	movs	r6, r3
    452c:	4694      	mov	ip, r2
    452e:	0023      	movs	r3, r4
    4530:	4463      	add	r3, ip
    4532:	0019      	movs	r1, r3
    4534:	f7ff fc13 	bl	3d5e <__ieee754_pow+0x92>
    4538:	0002      	movs	r2, r0
    453a:	000b      	movs	r3, r1
    453c:	2000      	movs	r0, #0
    453e:	4969      	ldr	r1, [pc, #420]	; (46e4 <__ieee754_pow+0xa18>)
    4540:	f001 f982 	bl	5848 <__aeabi_ddiv>
    4544:	e44a      	b.n	3ddc <__ieee754_pow+0x110>
    4546:	4b6d      	ldr	r3, [pc, #436]	; (46fc <__ieee754_pow+0xa30>)
    4548:	429c      	cmp	r4, r3
    454a:	dc00      	bgt.n	454e <__ieee754_pow+0x882>
    454c:	e4aa      	b.n	3ea4 <__ieee754_pow+0x1d8>
    454e:	4b65      	ldr	r3, [pc, #404]	; (46e4 <__ieee754_pow+0xa18>)
    4550:	429c      	cmp	r4, r3
    4552:	dd01      	ble.n	4558 <__ieee754_pow+0x88c>
    4554:	f7ff fc2c 	bl	3db0 <__ieee754_pow+0xe4>
    4558:	2200      	movs	r2, #0
    455a:	4b62      	ldr	r3, [pc, #392]	; (46e4 <__ieee754_pow+0xa18>)
    455c:	f002 f812 	bl	6584 <__aeabi_dsub>
    4560:	22c0      	movs	r2, #192	; 0xc0
    4562:	4b67      	ldr	r3, [pc, #412]	; (4700 <__ieee754_pow+0xa34>)
    4564:	05d2      	lsls	r2, r2, #23
    4566:	0004      	movs	r4, r0
    4568:	000d      	movs	r5, r1
    456a:	f001 fd91 	bl	6090 <__aeabi_dmul>
    456e:	4a65      	ldr	r2, [pc, #404]	; (4704 <__ieee754_pow+0xa38>)
    4570:	0006      	movs	r6, r0
    4572:	000f      	movs	r7, r1
    4574:	4b64      	ldr	r3, [pc, #400]	; (4708 <__ieee754_pow+0xa3c>)
    4576:	0020      	movs	r0, r4
    4578:	0029      	movs	r1, r5
    457a:	f001 fd89 	bl	6090 <__aeabi_dmul>
    457e:	2200      	movs	r2, #0
    4580:	9002      	str	r0, [sp, #8]
    4582:	9103      	str	r1, [sp, #12]
    4584:	4b61      	ldr	r3, [pc, #388]	; (470c <__ieee754_pow+0xa40>)
    4586:	0020      	movs	r0, r4
    4588:	0029      	movs	r1, r5
    458a:	f001 fd81 	bl	6090 <__aeabi_dmul>
    458e:	0002      	movs	r2, r0
    4590:	000b      	movs	r3, r1
    4592:	485f      	ldr	r0, [pc, #380]	; (4710 <__ieee754_pow+0xa44>)
    4594:	495f      	ldr	r1, [pc, #380]	; (4714 <__ieee754_pow+0xa48>)
    4596:	f001 fff5 	bl	6584 <__aeabi_dsub>
    459a:	0022      	movs	r2, r4
    459c:	002b      	movs	r3, r5
    459e:	f001 fd77 	bl	6090 <__aeabi_dmul>
    45a2:	0002      	movs	r2, r0
    45a4:	000b      	movs	r3, r1
    45a6:	2000      	movs	r0, #0
    45a8:	495b      	ldr	r1, [pc, #364]	; (4718 <__ieee754_pow+0xa4c>)
    45aa:	f001 ffeb 	bl	6584 <__aeabi_dsub>
    45ae:	0022      	movs	r2, r4
    45b0:	9004      	str	r0, [sp, #16]
    45b2:	9105      	str	r1, [sp, #20]
    45b4:	002b      	movs	r3, r5
    45b6:	0020      	movs	r0, r4
    45b8:	0029      	movs	r1, r5
    45ba:	f001 fd69 	bl	6090 <__aeabi_dmul>
    45be:	0002      	movs	r2, r0
    45c0:	000b      	movs	r3, r1
    45c2:	9804      	ldr	r0, [sp, #16]
    45c4:	9905      	ldr	r1, [sp, #20]
    45c6:	f001 fd63 	bl	6090 <__aeabi_dmul>
    45ca:	4a54      	ldr	r2, [pc, #336]	; (471c <__ieee754_pow+0xa50>)
    45cc:	4b4c      	ldr	r3, [pc, #304]	; (4700 <__ieee754_pow+0xa34>)
    45ce:	f001 fd5f 	bl	6090 <__aeabi_dmul>
    45d2:	0002      	movs	r2, r0
    45d4:	000b      	movs	r3, r1
    45d6:	9802      	ldr	r0, [sp, #8]
    45d8:	9903      	ldr	r1, [sp, #12]
    45da:	f001 ffd3 	bl	6584 <__aeabi_dsub>
    45de:	0002      	movs	r2, r0
    45e0:	000b      	movs	r3, r1
    45e2:	0004      	movs	r4, r0
    45e4:	000d      	movs	r5, r1
    45e6:	0030      	movs	r0, r6
    45e8:	0039      	movs	r1, r7
    45ea:	f000 fe01 	bl	51f0 <__aeabi_dadd>
    45ee:	2200      	movs	r2, #0
    45f0:	0010      	movs	r0, r2
    45f2:	003b      	movs	r3, r7
    45f4:	0032      	movs	r2, r6
    45f6:	9002      	str	r0, [sp, #8]
    45f8:	9103      	str	r1, [sp, #12]
    45fa:	f001 ffc3 	bl	6584 <__aeabi_dsub>
    45fe:	0002      	movs	r2, r0
    4600:	000b      	movs	r3, r1
    4602:	0020      	movs	r0, r4
    4604:	0029      	movs	r1, r5
    4606:	f001 ffbd 	bl	6584 <__aeabi_dsub>
    460a:	9004      	str	r0, [sp, #16]
    460c:	9105      	str	r1, [sp, #20]
    460e:	e5e1      	b.n	41d4 <__ieee754_pow+0x508>
    4610:	4a43      	ldr	r2, [pc, #268]	; (4720 <__ieee754_pow+0xa54>)
    4612:	4b44      	ldr	r3, [pc, #272]	; (4724 <__ieee754_pow+0xa58>)
    4614:	9806      	ldr	r0, [sp, #24]
    4616:	9907      	ldr	r1, [sp, #28]
    4618:	f001 fd3a 	bl	6090 <__aeabi_dmul>
    461c:	4a40      	ldr	r2, [pc, #256]	; (4720 <__ieee754_pow+0xa54>)
    461e:	4b41      	ldr	r3, [pc, #260]	; (4724 <__ieee754_pow+0xa58>)
    4620:	f001 fd36 	bl	6090 <__aeabi_dmul>
    4624:	0006      	movs	r6, r0
    4626:	f7ff fb9a 	bl	3d5e <__ieee754_pow+0x92>
    462a:	2a00      	cmp	r2, #0
    462c:	d001      	beq.n	4632 <__ieee754_pow+0x966>
    462e:	f7ff fba5 	bl	3d7c <__ieee754_pow+0xb0>
    4632:	3214      	adds	r2, #20
    4634:	1ad3      	subs	r3, r2, r3
    4636:	003a      	movs	r2, r7
    4638:	411a      	asrs	r2, r3
    463a:	0011      	movs	r1, r2
    463c:	4099      	lsls	r1, r3
    463e:	428f      	cmp	r7, r1
    4640:	d001      	beq.n	4646 <__ieee754_pow+0x97a>
    4642:	f7ff fb6f 	bl	3d24 <__ieee754_pow+0x58>
    4646:	2301      	movs	r3, #1
    4648:	4013      	ands	r3, r2
    464a:	2202      	movs	r2, #2
    464c:	1ad3      	subs	r3, r2, r3
    464e:	469b      	mov	fp, r3
    4650:	f7ff fb68 	bl	3d24 <__ieee754_pow+0x58>
    4654:	4b30      	ldr	r3, [pc, #192]	; (4718 <__ieee754_pow+0xa4c>)
    4656:	429e      	cmp	r6, r3
    4658:	dd00      	ble.n	465c <__ieee754_pow+0x990>
    465a:	e64e      	b.n	42fa <__ieee754_pow+0x62e>
    465c:	2300      	movs	r3, #0
    465e:	4699      	mov	r9, r3
    4660:	4698      	mov	r8, r3
    4662:	e67a      	b.n	435a <__ieee754_pow+0x68e>
    4664:	0002      	movs	r2, r0
    4666:	000b      	movs	r3, r1
    4668:	f7ff fc14 	bl	3e94 <__ieee754_pow+0x1c8>
    466c:	2380      	movs	r3, #128	; 0x80
    466e:	4c2e      	ldr	r4, [pc, #184]	; (4728 <__ieee754_pow+0xa5c>)
    4670:	05db      	lsls	r3, r3, #23
    4672:	9308      	str	r3, [sp, #32]
    4674:	9409      	str	r4, [sp, #36]	; 0x24
    4676:	4b2d      	ldr	r3, [pc, #180]	; (472c <__ieee754_pow+0xa60>)
    4678:	4c2d      	ldr	r4, [pc, #180]	; (4730 <__ieee754_pow+0xa64>)
    467a:	2200      	movs	r2, #0
    467c:	930c      	str	r3, [sp, #48]	; 0x30
    467e:	940d      	str	r4, [sp, #52]	; 0x34
    4680:	2480      	movs	r4, #128	; 0x80
    4682:	4b2c      	ldr	r3, [pc, #176]	; (4734 <__ieee754_pow+0xa68>)
    4684:	02e4      	lsls	r4, r4, #11
    4686:	9206      	str	r2, [sp, #24]
    4688:	9307      	str	r3, [sp, #28]
    468a:	e456      	b.n	3f3a <__ieee754_pow+0x26e>
    468c:	4643      	mov	r3, r8
    468e:	425b      	negs	r3, r3
    4690:	4698      	mov	r8, r3
    4692:	e651      	b.n	4338 <__ieee754_pow+0x66c>
    4694:	4642      	mov	r2, r8
    4696:	f000 f9fd 	bl	4a94 <scalbn>
    469a:	e707      	b.n	44ac <__ieee754_pow+0x7e0>
    469c:	fffffc02 	.word	0xfffffc02
    46a0:	fffffc01 	.word	0xfffffc01
    46a4:	000fffff 	.word	0x000fffff
    46a8:	3fe62e43 	.word	0x3fe62e43
    46ac:	fefa39ef 	.word	0xfefa39ef
    46b0:	3fe62e42 	.word	0x3fe62e42
    46b4:	0ca86c39 	.word	0x0ca86c39
    46b8:	be205c61 	.word	0xbe205c61
    46bc:	72bea4d0 	.word	0x72bea4d0
    46c0:	3e663769 	.word	0x3e663769
    46c4:	c5d26bf1 	.word	0xc5d26bf1
    46c8:	3ebbbd41 	.word	0x3ebbbd41
    46cc:	af25de2c 	.word	0xaf25de2c
    46d0:	3f11566a 	.word	0x3f11566a
    46d4:	16bebd93 	.word	0x16bebd93
    46d8:	3f66c16c 	.word	0x3f66c16c
    46dc:	5555553e 	.word	0x5555553e
    46e0:	3fc55555 	.word	0x3fc55555
    46e4:	3ff00000 	.word	0x3ff00000
    46e8:	4090cbff 	.word	0x4090cbff
    46ec:	3f6f3400 	.word	0x3f6f3400
    46f0:	c2f8f359 	.word	0xc2f8f359
    46f4:	01a56e1f 	.word	0x01a56e1f
    46f8:	bff00000 	.word	0xbff00000
    46fc:	3feffffe 	.word	0x3feffffe
    4700:	3ff71547 	.word	0x3ff71547
    4704:	f85ddf44 	.word	0xf85ddf44
    4708:	3e54ae0b 	.word	0x3e54ae0b
    470c:	3fd00000 	.word	0x3fd00000
    4710:	55555555 	.word	0x55555555
    4714:	3fd55555 	.word	0x3fd55555
    4718:	3fe00000 	.word	0x3fe00000
    471c:	652b82fe 	.word	0x652b82fe
    4720:	8800759c 	.word	0x8800759c
    4724:	7e37e43c 	.word	0x7e37e43c
    4728:	3fe2b803 	.word	0x3fe2b803
    472c:	43cfd006 	.word	0x43cfd006
    4730:	3e4cfdeb 	.word	0x3e4cfdeb
    4734:	3ff80000 	.word	0x3ff80000

00004738 <__ieee754_sqrt>:
    4738:	b5f0      	push	{r4, r5, r6, r7, lr}
    473a:	4656      	mov	r6, sl
    473c:	464d      	mov	r5, r9
    473e:	4644      	mov	r4, r8
    4740:	465f      	mov	r7, fp
    4742:	4b75      	ldr	r3, [pc, #468]	; (4918 <__ieee754_sqrt+0x1e0>)
    4744:	b4f0      	push	{r4, r5, r6, r7}
    4746:	000a      	movs	r2, r1
    4748:	000d      	movs	r5, r1
    474a:	0019      	movs	r1, r3
    474c:	b083      	sub	sp, #12
    474e:	0006      	movs	r6, r0
    4750:	0004      	movs	r4, r0
    4752:	4029      	ands	r1, r5
    4754:	4299      	cmp	r1, r3
    4756:	d100      	bne.n	475a <__ieee754_sqrt+0x22>
    4758:	e0ba      	b.n	48d0 <__ieee754_sqrt+0x198>
    475a:	2d00      	cmp	r5, #0
    475c:	dc00      	bgt.n	4760 <__ieee754_sqrt+0x28>
    475e:	e094      	b.n	488a <__ieee754_sqrt+0x152>
    4760:	152d      	asrs	r5, r5, #20
    4762:	d100      	bne.n	4766 <__ieee754_sqrt+0x2e>
    4764:	e0a3      	b.n	48ae <__ieee754_sqrt+0x176>
    4766:	4b6d      	ldr	r3, [pc, #436]	; (491c <__ieee754_sqrt+0x1e4>)
    4768:	0312      	lsls	r2, r2, #12
    476a:	469c      	mov	ip, r3
    476c:	2380      	movs	r3, #128	; 0x80
    476e:	0b12      	lsrs	r2, r2, #12
    4770:	035b      	lsls	r3, r3, #13
    4772:	4465      	add	r5, ip
    4774:	431a      	orrs	r2, r3
    4776:	07eb      	lsls	r3, r5, #31
    4778:	d500      	bpl.n	477c <__ieee754_sqrt+0x44>
    477a:	e081      	b.n	4880 <__ieee754_sqrt+0x148>
    477c:	106b      	asrs	r3, r5, #1
    477e:	4698      	mov	r8, r3
    4780:	0fe3      	lsrs	r3, r4, #31
    4782:	189b      	adds	r3, r3, r2
    4784:	189b      	adds	r3, r3, r2
    4786:	2280      	movs	r2, #128	; 0x80
    4788:	2116      	movs	r1, #22
    478a:	2600      	movs	r6, #0
    478c:	2700      	movs	r7, #0
    478e:	0064      	lsls	r4, r4, #1
    4790:	0392      	lsls	r2, r2, #14
    4792:	18b8      	adds	r0, r7, r2
    4794:	4298      	cmp	r0, r3
    4796:	dc02      	bgt.n	479e <__ieee754_sqrt+0x66>
    4798:	1887      	adds	r7, r0, r2
    479a:	1a1b      	subs	r3, r3, r0
    479c:	18b6      	adds	r6, r6, r2
    479e:	0fe0      	lsrs	r0, r4, #31
    47a0:	005b      	lsls	r3, r3, #1
    47a2:	3901      	subs	r1, #1
    47a4:	181b      	adds	r3, r3, r0
    47a6:	0064      	lsls	r4, r4, #1
    47a8:	0852      	lsrs	r2, r2, #1
    47aa:	2900      	cmp	r1, #0
    47ac:	d1f1      	bne.n	4792 <__ieee754_sqrt+0x5a>
    47ae:	2200      	movs	r2, #0
    47b0:	9201      	str	r2, [sp, #4]
    47b2:	4694      	mov	ip, r2
    47b4:	2280      	movs	r2, #128	; 0x80
    47b6:	0612      	lsls	r2, r2, #24
    47b8:	2020      	movs	r0, #32
    47ba:	4691      	mov	r9, r2
    47bc:	e009      	b.n	47d2 <__ieee754_sqrt+0x9a>
    47be:	429f      	cmp	r7, r3
    47c0:	d041      	beq.n	4846 <__ieee754_sqrt+0x10e>
    47c2:	0fe1      	lsrs	r1, r4, #31
    47c4:	18c9      	adds	r1, r1, r3
    47c6:	3801      	subs	r0, #1
    47c8:	18cb      	adds	r3, r1, r3
    47ca:	0064      	lsls	r4, r4, #1
    47cc:	0852      	lsrs	r2, r2, #1
    47ce:	2800      	cmp	r0, #0
    47d0:	d01e      	beq.n	4810 <__ieee754_sqrt+0xd8>
    47d2:	4661      	mov	r1, ip
    47d4:	1851      	adds	r1, r2, r1
    47d6:	429f      	cmp	r7, r3
    47d8:	daf1      	bge.n	47be <__ieee754_sqrt+0x86>
    47da:	188d      	adds	r5, r1, r2
    47dc:	46ac      	mov	ip, r5
    47de:	0fcd      	lsrs	r5, r1, #31
    47e0:	07ed      	lsls	r5, r5, #31
    47e2:	46ba      	mov	sl, r7
    47e4:	454d      	cmp	r5, r9
    47e6:	d039      	beq.n	485c <__ieee754_sqrt+0x124>
    47e8:	1bdb      	subs	r3, r3, r7
    47ea:	428c      	cmp	r4, r1
    47ec:	41bf      	sbcs	r7, r7
    47ee:	427f      	negs	r7, r7
    47f0:	1bdb      	subs	r3, r3, r7
    47f2:	1a64      	subs	r4, r4, r1
    47f4:	9901      	ldr	r1, [sp, #4]
    47f6:	3801      	subs	r0, #1
    47f8:	468b      	mov	fp, r1
    47fa:	4493      	add	fp, r2
    47fc:	4659      	mov	r1, fp
    47fe:	9101      	str	r1, [sp, #4]
    4800:	0fe1      	lsrs	r1, r4, #31
    4802:	18c9      	adds	r1, r1, r3
    4804:	4657      	mov	r7, sl
    4806:	18cb      	adds	r3, r1, r3
    4808:	0064      	lsls	r4, r4, #1
    480a:	0852      	lsrs	r2, r2, #1
    480c:	2800      	cmp	r0, #0
    480e:	d1e0      	bne.n	47d2 <__ieee754_sqrt+0x9a>
    4810:	4323      	orrs	r3, r4
    4812:	d12b      	bne.n	486c <__ieee754_sqrt+0x134>
    4814:	9b01      	ldr	r3, [sp, #4]
    4816:	085b      	lsrs	r3, r3, #1
    4818:	4941      	ldr	r1, [pc, #260]	; (4920 <__ieee754_sqrt+0x1e8>)
    481a:	1072      	asrs	r2, r6, #1
    481c:	468c      	mov	ip, r1
    481e:	4462      	add	r2, ip
    4820:	07f1      	lsls	r1, r6, #31
    4822:	d502      	bpl.n	482a <__ieee754_sqrt+0xf2>
    4824:	2180      	movs	r1, #128	; 0x80
    4826:	0609      	lsls	r1, r1, #24
    4828:	430b      	orrs	r3, r1
    482a:	4641      	mov	r1, r8
    482c:	0509      	lsls	r1, r1, #20
    482e:	188d      	adds	r5, r1, r2
    4830:	001e      	movs	r6, r3
    4832:	002f      	movs	r7, r5
    4834:	0030      	movs	r0, r6
    4836:	0039      	movs	r1, r7
    4838:	b003      	add	sp, #12
    483a:	bc3c      	pop	{r2, r3, r4, r5}
    483c:	4690      	mov	r8, r2
    483e:	4699      	mov	r9, r3
    4840:	46a2      	mov	sl, r4
    4842:	46ab      	mov	fp, r5
    4844:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4846:	42a1      	cmp	r1, r4
    4848:	d80e      	bhi.n	4868 <__ieee754_sqrt+0x130>
    484a:	188d      	adds	r5, r1, r2
    484c:	46ac      	mov	ip, r5
    484e:	0fcd      	lsrs	r5, r1, #31
    4850:	07ed      	lsls	r5, r5, #31
    4852:	454d      	cmp	r5, r9
    4854:	d048      	beq.n	48e8 <__ieee754_sqrt+0x1b0>
    4856:	469a      	mov	sl, r3
    4858:	2300      	movs	r3, #0
    485a:	e7ca      	b.n	47f2 <__ieee754_sqrt+0xba>
    485c:	4665      	mov	r5, ip
    485e:	2d00      	cmp	r5, #0
    4860:	dbc2      	blt.n	47e8 <__ieee754_sqrt+0xb0>
    4862:	1c7d      	adds	r5, r7, #1
    4864:	46aa      	mov	sl, r5
    4866:	e7bf      	b.n	47e8 <__ieee754_sqrt+0xb0>
    4868:	003b      	movs	r3, r7
    486a:	e7aa      	b.n	47c2 <__ieee754_sqrt+0x8a>
    486c:	9b01      	ldr	r3, [sp, #4]
    486e:	3301      	adds	r3, #1
    4870:	d03e      	beq.n	48f0 <__ieee754_sqrt+0x1b8>
    4872:	9a01      	ldr	r2, [sp, #4]
    4874:	2301      	movs	r3, #1
    4876:	4694      	mov	ip, r2
    4878:	4013      	ands	r3, r2
    487a:	4463      	add	r3, ip
    487c:	085b      	lsrs	r3, r3, #1
    487e:	e7cb      	b.n	4818 <__ieee754_sqrt+0xe0>
    4880:	0fe3      	lsrs	r3, r4, #31
    4882:	0052      	lsls	r2, r2, #1
    4884:	189a      	adds	r2, r3, r2
    4886:	0064      	lsls	r4, r4, #1
    4888:	e778      	b.n	477c <__ieee754_sqrt+0x44>
    488a:	006b      	lsls	r3, r5, #1
    488c:	085b      	lsrs	r3, r3, #1
    488e:	4303      	orrs	r3, r0
    4890:	002f      	movs	r7, r5
    4892:	2b00      	cmp	r3, #0
    4894:	d0ce      	beq.n	4834 <__ieee754_sqrt+0xfc>
    4896:	2500      	movs	r5, #0
    4898:	2a00      	cmp	r2, #0
    489a:	d131      	bne.n	4900 <__ieee754_sqrt+0x1c8>
    489c:	0ae2      	lsrs	r2, r4, #11
    489e:	3d15      	subs	r5, #21
    48a0:	0564      	lsls	r4, r4, #21
    48a2:	2a00      	cmp	r2, #0
    48a4:	d0fa      	beq.n	489c <__ieee754_sqrt+0x164>
    48a6:	2380      	movs	r3, #128	; 0x80
    48a8:	035b      	lsls	r3, r3, #13
    48aa:	421a      	tst	r2, r3
    48ac:	d123      	bne.n	48f6 <__ieee754_sqrt+0x1be>
    48ae:	2080      	movs	r0, #128	; 0x80
    48b0:	2300      	movs	r3, #0
    48b2:	0340      	lsls	r0, r0, #13
    48b4:	e000      	b.n	48b8 <__ieee754_sqrt+0x180>
    48b6:	000b      	movs	r3, r1
    48b8:	0052      	lsls	r2, r2, #1
    48ba:	1c59      	adds	r1, r3, #1
    48bc:	4202      	tst	r2, r0
    48be:	d0fa      	beq.n	48b6 <__ieee754_sqrt+0x17e>
    48c0:	2020      	movs	r0, #32
    48c2:	1a40      	subs	r0, r0, r1
    48c4:	1aed      	subs	r5, r5, r3
    48c6:	0023      	movs	r3, r4
    48c8:	40c3      	lsrs	r3, r0
    48ca:	408c      	lsls	r4, r1
    48cc:	431a      	orrs	r2, r3
    48ce:	e74a      	b.n	4766 <__ieee754_sqrt+0x2e>
    48d0:	0002      	movs	r2, r0
    48d2:	002b      	movs	r3, r5
    48d4:	0029      	movs	r1, r5
    48d6:	f001 fbdb 	bl	6090 <__aeabi_dmul>
    48da:	0032      	movs	r2, r6
    48dc:	002b      	movs	r3, r5
    48de:	f000 fc87 	bl	51f0 <__aeabi_dadd>
    48e2:	0006      	movs	r6, r0
    48e4:	000f      	movs	r7, r1
    48e6:	e7a5      	b.n	4834 <__ieee754_sqrt+0xfc>
    48e8:	4665      	mov	r5, ip
    48ea:	2d00      	cmp	r5, #0
    48ec:	dab9      	bge.n	4862 <__ieee754_sqrt+0x12a>
    48ee:	e7b2      	b.n	4856 <__ieee754_sqrt+0x11e>
    48f0:	3601      	adds	r6, #1
    48f2:	2300      	movs	r3, #0
    48f4:	e790      	b.n	4818 <__ieee754_sqrt+0xe0>
    48f6:	2301      	movs	r3, #1
    48f8:	2020      	movs	r0, #32
    48fa:	425b      	negs	r3, r3
    48fc:	2100      	movs	r1, #0
    48fe:	e7e1      	b.n	48c4 <__ieee754_sqrt+0x18c>
    4900:	003b      	movs	r3, r7
    4902:	0002      	movs	r2, r0
    4904:	0039      	movs	r1, r7
    4906:	f001 fe3d 	bl	6584 <__aeabi_dsub>
    490a:	0002      	movs	r2, r0
    490c:	000b      	movs	r3, r1
    490e:	f000 ff9b 	bl	5848 <__aeabi_ddiv>
    4912:	0006      	movs	r6, r0
    4914:	000f      	movs	r7, r1
    4916:	e78d      	b.n	4834 <__ieee754_sqrt+0xfc>
    4918:	7ff00000 	.word	0x7ff00000
    491c:	fffffc01 	.word	0xfffffc01
    4920:	3fe00000 	.word	0x3fe00000

00004924 <fabs>:
    4924:	0049      	lsls	r1, r1, #1
    4926:	084b      	lsrs	r3, r1, #1
    4928:	0019      	movs	r1, r3
    492a:	4770      	bx	lr

0000492c <finite>:
    492c:	4b03      	ldr	r3, [pc, #12]	; (493c <finite+0x10>)
    492e:	0048      	lsls	r0, r1, #1
    4930:	469c      	mov	ip, r3
    4932:	0840      	lsrs	r0, r0, #1
    4934:	4460      	add	r0, ip
    4936:	0fc0      	lsrs	r0, r0, #31
    4938:	4770      	bx	lr
    493a:	46c0      	nop			; (mov r8, r8)
    493c:	80100000 	.word	0x80100000

00004940 <matherr>:
    4940:	2000      	movs	r0, #0
    4942:	4770      	bx	lr

00004944 <nan>:
    4944:	2000      	movs	r0, #0
    4946:	4901      	ldr	r1, [pc, #4]	; (494c <nan+0x8>)
    4948:	4770      	bx	lr
    494a:	46c0      	nop			; (mov r8, r8)
    494c:	7ff80000 	.word	0x7ff80000

00004950 <rint>:
    4950:	b5f0      	push	{r4, r5, r6, r7, lr}
    4952:	4647      	mov	r7, r8
    4954:	b480      	push	{r7}
    4956:	0fcb      	lsrs	r3, r1, #31
    4958:	4698      	mov	r8, r3
    495a:	4c4a      	ldr	r4, [pc, #296]	; (4a84 <rint+0x134>)
    495c:	004b      	lsls	r3, r1, #1
    495e:	0d5b      	lsrs	r3, r3, #21
    4960:	191e      	adds	r6, r3, r4
    4962:	b082      	sub	sp, #8
    4964:	0007      	movs	r7, r0
    4966:	000a      	movs	r2, r1
    4968:	2e13      	cmp	r6, #19
    496a:	dc35      	bgt.n	49d8 <rint+0x88>
    496c:	2e00      	cmp	r6, #0
    496e:	db57      	blt.n	4a20 <rint+0xd0>
    4970:	4b45      	ldr	r3, [pc, #276]	; (4a88 <rint+0x138>)
    4972:	0004      	movs	r4, r0
    4974:	4133      	asrs	r3, r6
    4976:	001f      	movs	r7, r3
    4978:	400f      	ands	r7, r1
    497a:	4307      	orrs	r7, r0
    497c:	000d      	movs	r5, r1
    497e:	2f00      	cmp	r7, #0
    4980:	d024      	beq.n	49cc <rint+0x7c>
    4982:	085b      	lsrs	r3, r3, #1
    4984:	001c      	movs	r4, r3
    4986:	400c      	ands	r4, r1
    4988:	4320      	orrs	r0, r4
    498a:	2700      	movs	r7, #0
    498c:	2800      	cmp	r0, #0
    498e:	d007      	beq.n	49a0 <rint+0x50>
    4990:	2e13      	cmp	r6, #19
    4992:	d100      	bne.n	4996 <rint+0x46>
    4994:	e072      	b.n	4a7c <rint+0x12c>
    4996:	2280      	movs	r2, #128	; 0x80
    4998:	02d2      	lsls	r2, r2, #11
    499a:	4132      	asrs	r2, r6
    499c:	4399      	bics	r1, r3
    499e:	430a      	orrs	r2, r1
    49a0:	4643      	mov	r3, r8
    49a2:	00de      	lsls	r6, r3, #3
    49a4:	4b39      	ldr	r3, [pc, #228]	; (4a8c <rint+0x13c>)
    49a6:	0011      	movs	r1, r2
    49a8:	199e      	adds	r6, r3, r6
    49aa:	6834      	ldr	r4, [r6, #0]
    49ac:	6875      	ldr	r5, [r6, #4]
    49ae:	0038      	movs	r0, r7
    49b0:	0022      	movs	r2, r4
    49b2:	002b      	movs	r3, r5
    49b4:	f000 fc1c 	bl	51f0 <__aeabi_dadd>
    49b8:	9000      	str	r0, [sp, #0]
    49ba:	9101      	str	r1, [sp, #4]
    49bc:	9800      	ldr	r0, [sp, #0]
    49be:	9901      	ldr	r1, [sp, #4]
    49c0:	0022      	movs	r2, r4
    49c2:	002b      	movs	r3, r5
    49c4:	f001 fdde 	bl	6584 <__aeabi_dsub>
    49c8:	0004      	movs	r4, r0
    49ca:	000d      	movs	r5, r1
    49cc:	0020      	movs	r0, r4
    49ce:	0029      	movs	r1, r5
    49d0:	b002      	add	sp, #8
    49d2:	bc04      	pop	{r2}
    49d4:	4690      	mov	r8, r2
    49d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49d8:	2e33      	cmp	r6, #51	; 0x33
    49da:	dd0c      	ble.n	49f6 <rint+0xa6>
    49dc:	2380      	movs	r3, #128	; 0x80
    49de:	0004      	movs	r4, r0
    49e0:	000d      	movs	r5, r1
    49e2:	00db      	lsls	r3, r3, #3
    49e4:	429e      	cmp	r6, r3
    49e6:	d1f1      	bne.n	49cc <rint+0x7c>
    49e8:	0002      	movs	r2, r0
    49ea:	000b      	movs	r3, r1
    49ec:	f000 fc00 	bl	51f0 <__aeabi_dadd>
    49f0:	0004      	movs	r4, r0
    49f2:	000d      	movs	r5, r1
    49f4:	e7ea      	b.n	49cc <rint+0x7c>
    49f6:	4c26      	ldr	r4, [pc, #152]	; (4a90 <rint+0x140>)
    49f8:	000d      	movs	r5, r1
    49fa:	46a4      	mov	ip, r4
    49fc:	2401      	movs	r4, #1
    49fe:	4463      	add	r3, ip
    4a00:	4264      	negs	r4, r4
    4a02:	40dc      	lsrs	r4, r3
    4a04:	46a4      	mov	ip, r4
    4a06:	4661      	mov	r1, ip
    4a08:	0004      	movs	r4, r0
    4a0a:	4201      	tst	r1, r0
    4a0c:	d0de      	beq.n	49cc <rint+0x7c>
    4a0e:	0849      	lsrs	r1, r1, #1
    4a10:	4201      	tst	r1, r0
    4a12:	d0c5      	beq.n	49a0 <rint+0x50>
    4a14:	2780      	movs	r7, #128	; 0x80
    4a16:	05ff      	lsls	r7, r7, #23
    4a18:	411f      	asrs	r7, r3
    4a1a:	4388      	bics	r0, r1
    4a1c:	4307      	orrs	r7, r0
    4a1e:	e7bf      	b.n	49a0 <rint+0x50>
    4a20:	004b      	lsls	r3, r1, #1
    4a22:	085b      	lsrs	r3, r3, #1
    4a24:	4303      	orrs	r3, r0
    4a26:	0004      	movs	r4, r0
    4a28:	000d      	movs	r5, r1
    4a2a:	2b00      	cmp	r3, #0
    4a2c:	d0ce      	beq.n	49cc <rint+0x7c>
    4a2e:	030b      	lsls	r3, r1, #12
    4a30:	0b1b      	lsrs	r3, r3, #12
    4a32:	4303      	orrs	r3, r0
    4a34:	425a      	negs	r2, r3
    4a36:	4313      	orrs	r3, r2
    4a38:	2280      	movs	r2, #128	; 0x80
    4a3a:	0b1b      	lsrs	r3, r3, #12
    4a3c:	0312      	lsls	r2, r2, #12
    4a3e:	4013      	ands	r3, r2
    4a40:	0c4a      	lsrs	r2, r1, #17
    4a42:	0452      	lsls	r2, r2, #17
    4a44:	4313      	orrs	r3, r2
    4a46:	0019      	movs	r1, r3
    4a48:	4643      	mov	r3, r8
    4a4a:	4a10      	ldr	r2, [pc, #64]	; (4a8c <rint+0x13c>)
    4a4c:	00db      	lsls	r3, r3, #3
    4a4e:	18d3      	adds	r3, r2, r3
    4a50:	681c      	ldr	r4, [r3, #0]
    4a52:	685d      	ldr	r5, [r3, #4]
    4a54:	0022      	movs	r2, r4
    4a56:	002b      	movs	r3, r5
    4a58:	f000 fbca 	bl	51f0 <__aeabi_dadd>
    4a5c:	9000      	str	r0, [sp, #0]
    4a5e:	9101      	str	r1, [sp, #4]
    4a60:	9800      	ldr	r0, [sp, #0]
    4a62:	9901      	ldr	r1, [sp, #4]
    4a64:	0022      	movs	r2, r4
    4a66:	002b      	movs	r3, r5
    4a68:	f001 fd8c 	bl	6584 <__aeabi_dsub>
    4a6c:	4642      	mov	r2, r8
    4a6e:	004b      	lsls	r3, r1, #1
    4a70:	085b      	lsrs	r3, r3, #1
    4a72:	07d6      	lsls	r6, r2, #31
    4a74:	4333      	orrs	r3, r6
    4a76:	0004      	movs	r4, r0
    4a78:	001d      	movs	r5, r3
    4a7a:	e7a7      	b.n	49cc <rint+0x7c>
    4a7c:	2780      	movs	r7, #128	; 0x80
    4a7e:	063f      	lsls	r7, r7, #24
    4a80:	e789      	b.n	4996 <rint+0x46>
    4a82:	46c0      	nop			; (mov r8, r8)
    4a84:	fffffc01 	.word	0xfffffc01
    4a88:	000fffff 	.word	0x000fffff
    4a8c:	00007048 	.word	0x00007048
    4a90:	fffffbed 	.word	0xfffffbed

00004a94 <scalbn>:
    4a94:	004b      	lsls	r3, r1, #1
    4a96:	b570      	push	{r4, r5, r6, lr}
    4a98:	0d5b      	lsrs	r3, r3, #21
    4a9a:	0014      	movs	r4, r2
    4a9c:	000a      	movs	r2, r1
    4a9e:	2b00      	cmp	r3, #0
    4aa0:	d11a      	bne.n	4ad8 <scalbn+0x44>
    4aa2:	004b      	lsls	r3, r1, #1
    4aa4:	085b      	lsrs	r3, r3, #1
    4aa6:	4303      	orrs	r3, r0
    4aa8:	d015      	beq.n	4ad6 <scalbn+0x42>
    4aaa:	2200      	movs	r2, #0
    4aac:	4b22      	ldr	r3, [pc, #136]	; (4b38 <scalbn+0xa4>)
    4aae:	f001 faef 	bl	6090 <__aeabi_dmul>
    4ab2:	4b22      	ldr	r3, [pc, #136]	; (4b3c <scalbn+0xa8>)
    4ab4:	000a      	movs	r2, r1
    4ab6:	429c      	cmp	r4, r3
    4ab8:	db22      	blt.n	4b00 <scalbn+0x6c>
    4aba:	004b      	lsls	r3, r1, #1
    4abc:	0d5b      	lsrs	r3, r3, #21
    4abe:	3b36      	subs	r3, #54	; 0x36
    4ac0:	4d1f      	ldr	r5, [pc, #124]	; (4b40 <scalbn+0xac>)
    4ac2:	18e3      	adds	r3, r4, r3
    4ac4:	42ab      	cmp	r3, r5
    4ac6:	dc20      	bgt.n	4b0a <scalbn+0x76>
    4ac8:	2b00      	cmp	r3, #0
    4aca:	dd0d      	ble.n	4ae8 <scalbn+0x54>
    4acc:	4c1d      	ldr	r4, [pc, #116]	; (4b44 <scalbn+0xb0>)
    4ace:	051b      	lsls	r3, r3, #20
    4ad0:	4022      	ands	r2, r4
    4ad2:	431a      	orrs	r2, r3
    4ad4:	0011      	movs	r1, r2
    4ad6:	bd70      	pop	{r4, r5, r6, pc}
    4ad8:	4d1b      	ldr	r5, [pc, #108]	; (4b48 <scalbn+0xb4>)
    4ada:	42ab      	cmp	r3, r5
    4adc:	d1f0      	bne.n	4ac0 <scalbn+0x2c>
    4ade:	0002      	movs	r2, r0
    4ae0:	000b      	movs	r3, r1
    4ae2:	f000 fb85 	bl	51f0 <__aeabi_dadd>
    4ae6:	e7f6      	b.n	4ad6 <scalbn+0x42>
    4ae8:	001d      	movs	r5, r3
    4aea:	3535      	adds	r5, #53	; 0x35
    4aec:	da18      	bge.n	4b20 <scalbn+0x8c>
    4aee:	4b17      	ldr	r3, [pc, #92]	; (4b4c <scalbn+0xb8>)
    4af0:	0002      	movs	r2, r0
    4af2:	429c      	cmp	r4, r3
    4af4:	dc0a      	bgt.n	4b0c <scalbn+0x78>
    4af6:	000b      	movs	r3, r1
    4af8:	4815      	ldr	r0, [pc, #84]	; (4b50 <scalbn+0xbc>)
    4afa:	4916      	ldr	r1, [pc, #88]	; (4b54 <scalbn+0xc0>)
    4afc:	f000 f832 	bl	4b64 <copysign>
    4b00:	4a13      	ldr	r2, [pc, #76]	; (4b50 <scalbn+0xbc>)
    4b02:	4b14      	ldr	r3, [pc, #80]	; (4b54 <scalbn+0xc0>)
    4b04:	f001 fac4 	bl	6090 <__aeabi_dmul>
    4b08:	e7e5      	b.n	4ad6 <scalbn+0x42>
    4b0a:	0002      	movs	r2, r0
    4b0c:	000b      	movs	r3, r1
    4b0e:	4812      	ldr	r0, [pc, #72]	; (4b58 <scalbn+0xc4>)
    4b10:	4912      	ldr	r1, [pc, #72]	; (4b5c <scalbn+0xc8>)
    4b12:	f000 f827 	bl	4b64 <copysign>
    4b16:	4a10      	ldr	r2, [pc, #64]	; (4b58 <scalbn+0xc4>)
    4b18:	4b10      	ldr	r3, [pc, #64]	; (4b5c <scalbn+0xc8>)
    4b1a:	f001 fab9 	bl	6090 <__aeabi_dmul>
    4b1e:	e7da      	b.n	4ad6 <scalbn+0x42>
    4b20:	4c08      	ldr	r4, [pc, #32]	; (4b44 <scalbn+0xb0>)
    4b22:	3336      	adds	r3, #54	; 0x36
    4b24:	4022      	ands	r2, r4
    4b26:	051b      	lsls	r3, r3, #20
    4b28:	4313      	orrs	r3, r2
    4b2a:	0019      	movs	r1, r3
    4b2c:	2200      	movs	r2, #0
    4b2e:	4b0c      	ldr	r3, [pc, #48]	; (4b60 <scalbn+0xcc>)
    4b30:	f001 faae 	bl	6090 <__aeabi_dmul>
    4b34:	e7cf      	b.n	4ad6 <scalbn+0x42>
    4b36:	46c0      	nop			; (mov r8, r8)
    4b38:	43500000 	.word	0x43500000
    4b3c:	ffff3cb0 	.word	0xffff3cb0
    4b40:	000007fe 	.word	0x000007fe
    4b44:	800fffff 	.word	0x800fffff
    4b48:	000007ff 	.word	0x000007ff
    4b4c:	0000c350 	.word	0x0000c350
    4b50:	c2f8f359 	.word	0xc2f8f359
    4b54:	01a56e1f 	.word	0x01a56e1f
    4b58:	8800759c 	.word	0x8800759c
    4b5c:	7e37e43c 	.word	0x7e37e43c
    4b60:	3c900000 	.word	0x3c900000

00004b64 <copysign>:
    4b64:	b530      	push	{r4, r5, lr}
    4b66:	004a      	lsls	r2, r1, #1
    4b68:	0fdb      	lsrs	r3, r3, #31
    4b6a:	07db      	lsls	r3, r3, #31
    4b6c:	0852      	lsrs	r2, r2, #1
    4b6e:	431a      	orrs	r2, r3
    4b70:	0011      	movs	r1, r2
    4b72:	bd30      	pop	{r4, r5, pc}

00004b74 <__gnu_thumb1_case_uqi>:
    4b74:	b402      	push	{r1}
    4b76:	4671      	mov	r1, lr
    4b78:	0849      	lsrs	r1, r1, #1
    4b7a:	0049      	lsls	r1, r1, #1
    4b7c:	5c09      	ldrb	r1, [r1, r0]
    4b7e:	0049      	lsls	r1, r1, #1
    4b80:	448e      	add	lr, r1
    4b82:	bc02      	pop	{r1}
    4b84:	4770      	bx	lr
    4b86:	46c0      	nop			; (mov r8, r8)

00004b88 <__aeabi_uidiv>:
    4b88:	2200      	movs	r2, #0
    4b8a:	0843      	lsrs	r3, r0, #1
    4b8c:	428b      	cmp	r3, r1
    4b8e:	d374      	bcc.n	4c7a <__aeabi_uidiv+0xf2>
    4b90:	0903      	lsrs	r3, r0, #4
    4b92:	428b      	cmp	r3, r1
    4b94:	d35f      	bcc.n	4c56 <__aeabi_uidiv+0xce>
    4b96:	0a03      	lsrs	r3, r0, #8
    4b98:	428b      	cmp	r3, r1
    4b9a:	d344      	bcc.n	4c26 <__aeabi_uidiv+0x9e>
    4b9c:	0b03      	lsrs	r3, r0, #12
    4b9e:	428b      	cmp	r3, r1
    4ba0:	d328      	bcc.n	4bf4 <__aeabi_uidiv+0x6c>
    4ba2:	0c03      	lsrs	r3, r0, #16
    4ba4:	428b      	cmp	r3, r1
    4ba6:	d30d      	bcc.n	4bc4 <__aeabi_uidiv+0x3c>
    4ba8:	22ff      	movs	r2, #255	; 0xff
    4baa:	0209      	lsls	r1, r1, #8
    4bac:	ba12      	rev	r2, r2
    4bae:	0c03      	lsrs	r3, r0, #16
    4bb0:	428b      	cmp	r3, r1
    4bb2:	d302      	bcc.n	4bba <__aeabi_uidiv+0x32>
    4bb4:	1212      	asrs	r2, r2, #8
    4bb6:	0209      	lsls	r1, r1, #8
    4bb8:	d065      	beq.n	4c86 <__aeabi_uidiv+0xfe>
    4bba:	0b03      	lsrs	r3, r0, #12
    4bbc:	428b      	cmp	r3, r1
    4bbe:	d319      	bcc.n	4bf4 <__aeabi_uidiv+0x6c>
    4bc0:	e000      	b.n	4bc4 <__aeabi_uidiv+0x3c>
    4bc2:	0a09      	lsrs	r1, r1, #8
    4bc4:	0bc3      	lsrs	r3, r0, #15
    4bc6:	428b      	cmp	r3, r1
    4bc8:	d301      	bcc.n	4bce <__aeabi_uidiv+0x46>
    4bca:	03cb      	lsls	r3, r1, #15
    4bcc:	1ac0      	subs	r0, r0, r3
    4bce:	4152      	adcs	r2, r2
    4bd0:	0b83      	lsrs	r3, r0, #14
    4bd2:	428b      	cmp	r3, r1
    4bd4:	d301      	bcc.n	4bda <__aeabi_uidiv+0x52>
    4bd6:	038b      	lsls	r3, r1, #14
    4bd8:	1ac0      	subs	r0, r0, r3
    4bda:	4152      	adcs	r2, r2
    4bdc:	0b43      	lsrs	r3, r0, #13
    4bde:	428b      	cmp	r3, r1
    4be0:	d301      	bcc.n	4be6 <__aeabi_uidiv+0x5e>
    4be2:	034b      	lsls	r3, r1, #13
    4be4:	1ac0      	subs	r0, r0, r3
    4be6:	4152      	adcs	r2, r2
    4be8:	0b03      	lsrs	r3, r0, #12
    4bea:	428b      	cmp	r3, r1
    4bec:	d301      	bcc.n	4bf2 <__aeabi_uidiv+0x6a>
    4bee:	030b      	lsls	r3, r1, #12
    4bf0:	1ac0      	subs	r0, r0, r3
    4bf2:	4152      	adcs	r2, r2
    4bf4:	0ac3      	lsrs	r3, r0, #11
    4bf6:	428b      	cmp	r3, r1
    4bf8:	d301      	bcc.n	4bfe <__aeabi_uidiv+0x76>
    4bfa:	02cb      	lsls	r3, r1, #11
    4bfc:	1ac0      	subs	r0, r0, r3
    4bfe:	4152      	adcs	r2, r2
    4c00:	0a83      	lsrs	r3, r0, #10
    4c02:	428b      	cmp	r3, r1
    4c04:	d301      	bcc.n	4c0a <__aeabi_uidiv+0x82>
    4c06:	028b      	lsls	r3, r1, #10
    4c08:	1ac0      	subs	r0, r0, r3
    4c0a:	4152      	adcs	r2, r2
    4c0c:	0a43      	lsrs	r3, r0, #9
    4c0e:	428b      	cmp	r3, r1
    4c10:	d301      	bcc.n	4c16 <__aeabi_uidiv+0x8e>
    4c12:	024b      	lsls	r3, r1, #9
    4c14:	1ac0      	subs	r0, r0, r3
    4c16:	4152      	adcs	r2, r2
    4c18:	0a03      	lsrs	r3, r0, #8
    4c1a:	428b      	cmp	r3, r1
    4c1c:	d301      	bcc.n	4c22 <__aeabi_uidiv+0x9a>
    4c1e:	020b      	lsls	r3, r1, #8
    4c20:	1ac0      	subs	r0, r0, r3
    4c22:	4152      	adcs	r2, r2
    4c24:	d2cd      	bcs.n	4bc2 <__aeabi_uidiv+0x3a>
    4c26:	09c3      	lsrs	r3, r0, #7
    4c28:	428b      	cmp	r3, r1
    4c2a:	d301      	bcc.n	4c30 <__aeabi_uidiv+0xa8>
    4c2c:	01cb      	lsls	r3, r1, #7
    4c2e:	1ac0      	subs	r0, r0, r3
    4c30:	4152      	adcs	r2, r2
    4c32:	0983      	lsrs	r3, r0, #6
    4c34:	428b      	cmp	r3, r1
    4c36:	d301      	bcc.n	4c3c <__aeabi_uidiv+0xb4>
    4c38:	018b      	lsls	r3, r1, #6
    4c3a:	1ac0      	subs	r0, r0, r3
    4c3c:	4152      	adcs	r2, r2
    4c3e:	0943      	lsrs	r3, r0, #5
    4c40:	428b      	cmp	r3, r1
    4c42:	d301      	bcc.n	4c48 <__aeabi_uidiv+0xc0>
    4c44:	014b      	lsls	r3, r1, #5
    4c46:	1ac0      	subs	r0, r0, r3
    4c48:	4152      	adcs	r2, r2
    4c4a:	0903      	lsrs	r3, r0, #4
    4c4c:	428b      	cmp	r3, r1
    4c4e:	d301      	bcc.n	4c54 <__aeabi_uidiv+0xcc>
    4c50:	010b      	lsls	r3, r1, #4
    4c52:	1ac0      	subs	r0, r0, r3
    4c54:	4152      	adcs	r2, r2
    4c56:	08c3      	lsrs	r3, r0, #3
    4c58:	428b      	cmp	r3, r1
    4c5a:	d301      	bcc.n	4c60 <__aeabi_uidiv+0xd8>
    4c5c:	00cb      	lsls	r3, r1, #3
    4c5e:	1ac0      	subs	r0, r0, r3
    4c60:	4152      	adcs	r2, r2
    4c62:	0883      	lsrs	r3, r0, #2
    4c64:	428b      	cmp	r3, r1
    4c66:	d301      	bcc.n	4c6c <__aeabi_uidiv+0xe4>
    4c68:	008b      	lsls	r3, r1, #2
    4c6a:	1ac0      	subs	r0, r0, r3
    4c6c:	4152      	adcs	r2, r2
    4c6e:	0843      	lsrs	r3, r0, #1
    4c70:	428b      	cmp	r3, r1
    4c72:	d301      	bcc.n	4c78 <__aeabi_uidiv+0xf0>
    4c74:	004b      	lsls	r3, r1, #1
    4c76:	1ac0      	subs	r0, r0, r3
    4c78:	4152      	adcs	r2, r2
    4c7a:	1a41      	subs	r1, r0, r1
    4c7c:	d200      	bcs.n	4c80 <__aeabi_uidiv+0xf8>
    4c7e:	4601      	mov	r1, r0
    4c80:	4152      	adcs	r2, r2
    4c82:	4610      	mov	r0, r2
    4c84:	4770      	bx	lr
    4c86:	e7ff      	b.n	4c88 <__aeabi_uidiv+0x100>
    4c88:	b501      	push	{r0, lr}
    4c8a:	2000      	movs	r0, #0
    4c8c:	f000 f8f0 	bl	4e70 <__aeabi_idiv0>
    4c90:	bd02      	pop	{r1, pc}
    4c92:	46c0      	nop			; (mov r8, r8)

00004c94 <__aeabi_uidivmod>:
    4c94:	2900      	cmp	r1, #0
    4c96:	d0f7      	beq.n	4c88 <__aeabi_uidiv+0x100>
    4c98:	e776      	b.n	4b88 <__aeabi_uidiv>
    4c9a:	4770      	bx	lr

00004c9c <__aeabi_idiv>:
    4c9c:	4603      	mov	r3, r0
    4c9e:	430b      	orrs	r3, r1
    4ca0:	d47f      	bmi.n	4da2 <__aeabi_idiv+0x106>
    4ca2:	2200      	movs	r2, #0
    4ca4:	0843      	lsrs	r3, r0, #1
    4ca6:	428b      	cmp	r3, r1
    4ca8:	d374      	bcc.n	4d94 <__aeabi_idiv+0xf8>
    4caa:	0903      	lsrs	r3, r0, #4
    4cac:	428b      	cmp	r3, r1
    4cae:	d35f      	bcc.n	4d70 <__aeabi_idiv+0xd4>
    4cb0:	0a03      	lsrs	r3, r0, #8
    4cb2:	428b      	cmp	r3, r1
    4cb4:	d344      	bcc.n	4d40 <__aeabi_idiv+0xa4>
    4cb6:	0b03      	lsrs	r3, r0, #12
    4cb8:	428b      	cmp	r3, r1
    4cba:	d328      	bcc.n	4d0e <__aeabi_idiv+0x72>
    4cbc:	0c03      	lsrs	r3, r0, #16
    4cbe:	428b      	cmp	r3, r1
    4cc0:	d30d      	bcc.n	4cde <__aeabi_idiv+0x42>
    4cc2:	22ff      	movs	r2, #255	; 0xff
    4cc4:	0209      	lsls	r1, r1, #8
    4cc6:	ba12      	rev	r2, r2
    4cc8:	0c03      	lsrs	r3, r0, #16
    4cca:	428b      	cmp	r3, r1
    4ccc:	d302      	bcc.n	4cd4 <__aeabi_idiv+0x38>
    4cce:	1212      	asrs	r2, r2, #8
    4cd0:	0209      	lsls	r1, r1, #8
    4cd2:	d065      	beq.n	4da0 <__aeabi_idiv+0x104>
    4cd4:	0b03      	lsrs	r3, r0, #12
    4cd6:	428b      	cmp	r3, r1
    4cd8:	d319      	bcc.n	4d0e <__aeabi_idiv+0x72>
    4cda:	e000      	b.n	4cde <__aeabi_idiv+0x42>
    4cdc:	0a09      	lsrs	r1, r1, #8
    4cde:	0bc3      	lsrs	r3, r0, #15
    4ce0:	428b      	cmp	r3, r1
    4ce2:	d301      	bcc.n	4ce8 <__aeabi_idiv+0x4c>
    4ce4:	03cb      	lsls	r3, r1, #15
    4ce6:	1ac0      	subs	r0, r0, r3
    4ce8:	4152      	adcs	r2, r2
    4cea:	0b83      	lsrs	r3, r0, #14
    4cec:	428b      	cmp	r3, r1
    4cee:	d301      	bcc.n	4cf4 <__aeabi_idiv+0x58>
    4cf0:	038b      	lsls	r3, r1, #14
    4cf2:	1ac0      	subs	r0, r0, r3
    4cf4:	4152      	adcs	r2, r2
    4cf6:	0b43      	lsrs	r3, r0, #13
    4cf8:	428b      	cmp	r3, r1
    4cfa:	d301      	bcc.n	4d00 <__aeabi_idiv+0x64>
    4cfc:	034b      	lsls	r3, r1, #13
    4cfe:	1ac0      	subs	r0, r0, r3
    4d00:	4152      	adcs	r2, r2
    4d02:	0b03      	lsrs	r3, r0, #12
    4d04:	428b      	cmp	r3, r1
    4d06:	d301      	bcc.n	4d0c <__aeabi_idiv+0x70>
    4d08:	030b      	lsls	r3, r1, #12
    4d0a:	1ac0      	subs	r0, r0, r3
    4d0c:	4152      	adcs	r2, r2
    4d0e:	0ac3      	lsrs	r3, r0, #11
    4d10:	428b      	cmp	r3, r1
    4d12:	d301      	bcc.n	4d18 <__aeabi_idiv+0x7c>
    4d14:	02cb      	lsls	r3, r1, #11
    4d16:	1ac0      	subs	r0, r0, r3
    4d18:	4152      	adcs	r2, r2
    4d1a:	0a83      	lsrs	r3, r0, #10
    4d1c:	428b      	cmp	r3, r1
    4d1e:	d301      	bcc.n	4d24 <__aeabi_idiv+0x88>
    4d20:	028b      	lsls	r3, r1, #10
    4d22:	1ac0      	subs	r0, r0, r3
    4d24:	4152      	adcs	r2, r2
    4d26:	0a43      	lsrs	r3, r0, #9
    4d28:	428b      	cmp	r3, r1
    4d2a:	d301      	bcc.n	4d30 <__aeabi_idiv+0x94>
    4d2c:	024b      	lsls	r3, r1, #9
    4d2e:	1ac0      	subs	r0, r0, r3
    4d30:	4152      	adcs	r2, r2
    4d32:	0a03      	lsrs	r3, r0, #8
    4d34:	428b      	cmp	r3, r1
    4d36:	d301      	bcc.n	4d3c <__aeabi_idiv+0xa0>
    4d38:	020b      	lsls	r3, r1, #8
    4d3a:	1ac0      	subs	r0, r0, r3
    4d3c:	4152      	adcs	r2, r2
    4d3e:	d2cd      	bcs.n	4cdc <__aeabi_idiv+0x40>
    4d40:	09c3      	lsrs	r3, r0, #7
    4d42:	428b      	cmp	r3, r1
    4d44:	d301      	bcc.n	4d4a <__aeabi_idiv+0xae>
    4d46:	01cb      	lsls	r3, r1, #7
    4d48:	1ac0      	subs	r0, r0, r3
    4d4a:	4152      	adcs	r2, r2
    4d4c:	0983      	lsrs	r3, r0, #6
    4d4e:	428b      	cmp	r3, r1
    4d50:	d301      	bcc.n	4d56 <__aeabi_idiv+0xba>
    4d52:	018b      	lsls	r3, r1, #6
    4d54:	1ac0      	subs	r0, r0, r3
    4d56:	4152      	adcs	r2, r2
    4d58:	0943      	lsrs	r3, r0, #5
    4d5a:	428b      	cmp	r3, r1
    4d5c:	d301      	bcc.n	4d62 <__aeabi_idiv+0xc6>
    4d5e:	014b      	lsls	r3, r1, #5
    4d60:	1ac0      	subs	r0, r0, r3
    4d62:	4152      	adcs	r2, r2
    4d64:	0903      	lsrs	r3, r0, #4
    4d66:	428b      	cmp	r3, r1
    4d68:	d301      	bcc.n	4d6e <__aeabi_idiv+0xd2>
    4d6a:	010b      	lsls	r3, r1, #4
    4d6c:	1ac0      	subs	r0, r0, r3
    4d6e:	4152      	adcs	r2, r2
    4d70:	08c3      	lsrs	r3, r0, #3
    4d72:	428b      	cmp	r3, r1
    4d74:	d301      	bcc.n	4d7a <__aeabi_idiv+0xde>
    4d76:	00cb      	lsls	r3, r1, #3
    4d78:	1ac0      	subs	r0, r0, r3
    4d7a:	4152      	adcs	r2, r2
    4d7c:	0883      	lsrs	r3, r0, #2
    4d7e:	428b      	cmp	r3, r1
    4d80:	d301      	bcc.n	4d86 <__aeabi_idiv+0xea>
    4d82:	008b      	lsls	r3, r1, #2
    4d84:	1ac0      	subs	r0, r0, r3
    4d86:	4152      	adcs	r2, r2
    4d88:	0843      	lsrs	r3, r0, #1
    4d8a:	428b      	cmp	r3, r1
    4d8c:	d301      	bcc.n	4d92 <__aeabi_idiv+0xf6>
    4d8e:	004b      	lsls	r3, r1, #1
    4d90:	1ac0      	subs	r0, r0, r3
    4d92:	4152      	adcs	r2, r2
    4d94:	1a41      	subs	r1, r0, r1
    4d96:	d200      	bcs.n	4d9a <__aeabi_idiv+0xfe>
    4d98:	4601      	mov	r1, r0
    4d9a:	4152      	adcs	r2, r2
    4d9c:	4610      	mov	r0, r2
    4d9e:	4770      	bx	lr
    4da0:	e05d      	b.n	4e5e <__aeabi_idiv+0x1c2>
    4da2:	0fca      	lsrs	r2, r1, #31
    4da4:	d000      	beq.n	4da8 <__aeabi_idiv+0x10c>
    4da6:	4249      	negs	r1, r1
    4da8:	1003      	asrs	r3, r0, #32
    4daa:	d300      	bcc.n	4dae <__aeabi_idiv+0x112>
    4dac:	4240      	negs	r0, r0
    4dae:	4053      	eors	r3, r2
    4db0:	2200      	movs	r2, #0
    4db2:	469c      	mov	ip, r3
    4db4:	0903      	lsrs	r3, r0, #4
    4db6:	428b      	cmp	r3, r1
    4db8:	d32d      	bcc.n	4e16 <__aeabi_idiv+0x17a>
    4dba:	0a03      	lsrs	r3, r0, #8
    4dbc:	428b      	cmp	r3, r1
    4dbe:	d312      	bcc.n	4de6 <__aeabi_idiv+0x14a>
    4dc0:	22fc      	movs	r2, #252	; 0xfc
    4dc2:	0189      	lsls	r1, r1, #6
    4dc4:	ba12      	rev	r2, r2
    4dc6:	0a03      	lsrs	r3, r0, #8
    4dc8:	428b      	cmp	r3, r1
    4dca:	d30c      	bcc.n	4de6 <__aeabi_idiv+0x14a>
    4dcc:	0189      	lsls	r1, r1, #6
    4dce:	1192      	asrs	r2, r2, #6
    4dd0:	428b      	cmp	r3, r1
    4dd2:	d308      	bcc.n	4de6 <__aeabi_idiv+0x14a>
    4dd4:	0189      	lsls	r1, r1, #6
    4dd6:	1192      	asrs	r2, r2, #6
    4dd8:	428b      	cmp	r3, r1
    4dda:	d304      	bcc.n	4de6 <__aeabi_idiv+0x14a>
    4ddc:	0189      	lsls	r1, r1, #6
    4dde:	d03a      	beq.n	4e56 <__aeabi_idiv+0x1ba>
    4de0:	1192      	asrs	r2, r2, #6
    4de2:	e000      	b.n	4de6 <__aeabi_idiv+0x14a>
    4de4:	0989      	lsrs	r1, r1, #6
    4de6:	09c3      	lsrs	r3, r0, #7
    4de8:	428b      	cmp	r3, r1
    4dea:	d301      	bcc.n	4df0 <__aeabi_idiv+0x154>
    4dec:	01cb      	lsls	r3, r1, #7
    4dee:	1ac0      	subs	r0, r0, r3
    4df0:	4152      	adcs	r2, r2
    4df2:	0983      	lsrs	r3, r0, #6
    4df4:	428b      	cmp	r3, r1
    4df6:	d301      	bcc.n	4dfc <__aeabi_idiv+0x160>
    4df8:	018b      	lsls	r3, r1, #6
    4dfa:	1ac0      	subs	r0, r0, r3
    4dfc:	4152      	adcs	r2, r2
    4dfe:	0943      	lsrs	r3, r0, #5
    4e00:	428b      	cmp	r3, r1
    4e02:	d301      	bcc.n	4e08 <__aeabi_idiv+0x16c>
    4e04:	014b      	lsls	r3, r1, #5
    4e06:	1ac0      	subs	r0, r0, r3
    4e08:	4152      	adcs	r2, r2
    4e0a:	0903      	lsrs	r3, r0, #4
    4e0c:	428b      	cmp	r3, r1
    4e0e:	d301      	bcc.n	4e14 <__aeabi_idiv+0x178>
    4e10:	010b      	lsls	r3, r1, #4
    4e12:	1ac0      	subs	r0, r0, r3
    4e14:	4152      	adcs	r2, r2
    4e16:	08c3      	lsrs	r3, r0, #3
    4e18:	428b      	cmp	r3, r1
    4e1a:	d301      	bcc.n	4e20 <__aeabi_idiv+0x184>
    4e1c:	00cb      	lsls	r3, r1, #3
    4e1e:	1ac0      	subs	r0, r0, r3
    4e20:	4152      	adcs	r2, r2
    4e22:	0883      	lsrs	r3, r0, #2
    4e24:	428b      	cmp	r3, r1
    4e26:	d301      	bcc.n	4e2c <__aeabi_idiv+0x190>
    4e28:	008b      	lsls	r3, r1, #2
    4e2a:	1ac0      	subs	r0, r0, r3
    4e2c:	4152      	adcs	r2, r2
    4e2e:	d2d9      	bcs.n	4de4 <__aeabi_idiv+0x148>
    4e30:	0843      	lsrs	r3, r0, #1
    4e32:	428b      	cmp	r3, r1
    4e34:	d301      	bcc.n	4e3a <__aeabi_idiv+0x19e>
    4e36:	004b      	lsls	r3, r1, #1
    4e38:	1ac0      	subs	r0, r0, r3
    4e3a:	4152      	adcs	r2, r2
    4e3c:	1a41      	subs	r1, r0, r1
    4e3e:	d200      	bcs.n	4e42 <__aeabi_idiv+0x1a6>
    4e40:	4601      	mov	r1, r0
    4e42:	4663      	mov	r3, ip
    4e44:	4152      	adcs	r2, r2
    4e46:	105b      	asrs	r3, r3, #1
    4e48:	4610      	mov	r0, r2
    4e4a:	d301      	bcc.n	4e50 <__aeabi_idiv+0x1b4>
    4e4c:	4240      	negs	r0, r0
    4e4e:	2b00      	cmp	r3, #0
    4e50:	d500      	bpl.n	4e54 <__aeabi_idiv+0x1b8>
    4e52:	4249      	negs	r1, r1
    4e54:	4770      	bx	lr
    4e56:	4663      	mov	r3, ip
    4e58:	105b      	asrs	r3, r3, #1
    4e5a:	d300      	bcc.n	4e5e <__aeabi_idiv+0x1c2>
    4e5c:	4240      	negs	r0, r0
    4e5e:	b501      	push	{r0, lr}
    4e60:	2000      	movs	r0, #0
    4e62:	f000 f805 	bl	4e70 <__aeabi_idiv0>
    4e66:	bd02      	pop	{r1, pc}

00004e68 <__aeabi_idivmod>:
    4e68:	2900      	cmp	r1, #0
    4e6a:	d0f8      	beq.n	4e5e <__aeabi_idiv+0x1c2>
    4e6c:	e716      	b.n	4c9c <__aeabi_idiv>
    4e6e:	4770      	bx	lr

00004e70 <__aeabi_idiv0>:
    4e70:	4770      	bx	lr
    4e72:	46c0      	nop			; (mov r8, r8)

00004e74 <__aeabi_cdrcmple>:
    4e74:	4684      	mov	ip, r0
    4e76:	1c10      	adds	r0, r2, #0
    4e78:	4662      	mov	r2, ip
    4e7a:	468c      	mov	ip, r1
    4e7c:	1c19      	adds	r1, r3, #0
    4e7e:	4663      	mov	r3, ip
    4e80:	e000      	b.n	4e84 <__aeabi_cdcmpeq>
    4e82:	46c0      	nop			; (mov r8, r8)

00004e84 <__aeabi_cdcmpeq>:
    4e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4e86:	f001 f899 	bl	5fbc <__ledf2>
    4e8a:	2800      	cmp	r0, #0
    4e8c:	d401      	bmi.n	4e92 <__aeabi_cdcmpeq+0xe>
    4e8e:	2100      	movs	r1, #0
    4e90:	42c8      	cmn	r0, r1
    4e92:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004e94 <__aeabi_dcmpeq>:
    4e94:	b510      	push	{r4, lr}
    4e96:	f000 ffed 	bl	5e74 <__eqdf2>
    4e9a:	4240      	negs	r0, r0
    4e9c:	3001      	adds	r0, #1
    4e9e:	bd10      	pop	{r4, pc}

00004ea0 <__aeabi_dcmplt>:
    4ea0:	b510      	push	{r4, lr}
    4ea2:	f001 f88b 	bl	5fbc <__ledf2>
    4ea6:	2800      	cmp	r0, #0
    4ea8:	db01      	blt.n	4eae <__aeabi_dcmplt+0xe>
    4eaa:	2000      	movs	r0, #0
    4eac:	bd10      	pop	{r4, pc}
    4eae:	2001      	movs	r0, #1
    4eb0:	bd10      	pop	{r4, pc}
    4eb2:	46c0      	nop			; (mov r8, r8)

00004eb4 <__aeabi_dcmple>:
    4eb4:	b510      	push	{r4, lr}
    4eb6:	f001 f881 	bl	5fbc <__ledf2>
    4eba:	2800      	cmp	r0, #0
    4ebc:	dd01      	ble.n	4ec2 <__aeabi_dcmple+0xe>
    4ebe:	2000      	movs	r0, #0
    4ec0:	bd10      	pop	{r4, pc}
    4ec2:	2001      	movs	r0, #1
    4ec4:	bd10      	pop	{r4, pc}
    4ec6:	46c0      	nop			; (mov r8, r8)

00004ec8 <__aeabi_dcmpgt>:
    4ec8:	b510      	push	{r4, lr}
    4eca:	f001 f813 	bl	5ef4 <__gedf2>
    4ece:	2800      	cmp	r0, #0
    4ed0:	dc01      	bgt.n	4ed6 <__aeabi_dcmpgt+0xe>
    4ed2:	2000      	movs	r0, #0
    4ed4:	bd10      	pop	{r4, pc}
    4ed6:	2001      	movs	r0, #1
    4ed8:	bd10      	pop	{r4, pc}
    4eda:	46c0      	nop			; (mov r8, r8)

00004edc <__aeabi_dcmpge>:
    4edc:	b510      	push	{r4, lr}
    4ede:	f001 f809 	bl	5ef4 <__gedf2>
    4ee2:	2800      	cmp	r0, #0
    4ee4:	da01      	bge.n	4eea <__aeabi_dcmpge+0xe>
    4ee6:	2000      	movs	r0, #0
    4ee8:	bd10      	pop	{r4, pc}
    4eea:	2001      	movs	r0, #1
    4eec:	bd10      	pop	{r4, pc}
    4eee:	46c0      	nop			; (mov r8, r8)

00004ef0 <__aeabi_lmul>:
    4ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ef2:	464f      	mov	r7, r9
    4ef4:	4646      	mov	r6, r8
    4ef6:	b4c0      	push	{r6, r7}
    4ef8:	0416      	lsls	r6, r2, #16
    4efa:	0c36      	lsrs	r6, r6, #16
    4efc:	4699      	mov	r9, r3
    4efe:	0033      	movs	r3, r6
    4f00:	0405      	lsls	r5, r0, #16
    4f02:	0c2c      	lsrs	r4, r5, #16
    4f04:	0c07      	lsrs	r7, r0, #16
    4f06:	0c15      	lsrs	r5, r2, #16
    4f08:	4363      	muls	r3, r4
    4f0a:	437e      	muls	r6, r7
    4f0c:	436f      	muls	r7, r5
    4f0e:	4365      	muls	r5, r4
    4f10:	0c1c      	lsrs	r4, r3, #16
    4f12:	19ad      	adds	r5, r5, r6
    4f14:	1964      	adds	r4, r4, r5
    4f16:	469c      	mov	ip, r3
    4f18:	42a6      	cmp	r6, r4
    4f1a:	d903      	bls.n	4f24 <__aeabi_lmul+0x34>
    4f1c:	2380      	movs	r3, #128	; 0x80
    4f1e:	025b      	lsls	r3, r3, #9
    4f20:	4698      	mov	r8, r3
    4f22:	4447      	add	r7, r8
    4f24:	4663      	mov	r3, ip
    4f26:	0c25      	lsrs	r5, r4, #16
    4f28:	19ef      	adds	r7, r5, r7
    4f2a:	041d      	lsls	r5, r3, #16
    4f2c:	464b      	mov	r3, r9
    4f2e:	434a      	muls	r2, r1
    4f30:	4343      	muls	r3, r0
    4f32:	0c2d      	lsrs	r5, r5, #16
    4f34:	0424      	lsls	r4, r4, #16
    4f36:	1964      	adds	r4, r4, r5
    4f38:	1899      	adds	r1, r3, r2
    4f3a:	19c9      	adds	r1, r1, r7
    4f3c:	0020      	movs	r0, r4
    4f3e:	bc0c      	pop	{r2, r3}
    4f40:	4690      	mov	r8, r2
    4f42:	4699      	mov	r9, r3
    4f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f46:	46c0      	nop			; (mov r8, r8)

00004f48 <__aeabi_d2uiz>:
    4f48:	b570      	push	{r4, r5, r6, lr}
    4f4a:	2200      	movs	r2, #0
    4f4c:	4b0c      	ldr	r3, [pc, #48]	; (4f80 <__aeabi_d2uiz+0x38>)
    4f4e:	0004      	movs	r4, r0
    4f50:	000d      	movs	r5, r1
    4f52:	f7ff ffc3 	bl	4edc <__aeabi_dcmpge>
    4f56:	2800      	cmp	r0, #0
    4f58:	d104      	bne.n	4f64 <__aeabi_d2uiz+0x1c>
    4f5a:	0020      	movs	r0, r4
    4f5c:	0029      	movs	r1, r5
    4f5e:	f001 fe85 	bl	6c6c <__aeabi_d2iz>
    4f62:	bd70      	pop	{r4, r5, r6, pc}
    4f64:	4b06      	ldr	r3, [pc, #24]	; (4f80 <__aeabi_d2uiz+0x38>)
    4f66:	2200      	movs	r2, #0
    4f68:	0020      	movs	r0, r4
    4f6a:	0029      	movs	r1, r5
    4f6c:	f001 fb0a 	bl	6584 <__aeabi_dsub>
    4f70:	f001 fe7c 	bl	6c6c <__aeabi_d2iz>
    4f74:	2380      	movs	r3, #128	; 0x80
    4f76:	061b      	lsls	r3, r3, #24
    4f78:	469c      	mov	ip, r3
    4f7a:	4460      	add	r0, ip
    4f7c:	e7f1      	b.n	4f62 <__aeabi_d2uiz+0x1a>
    4f7e:	46c0      	nop			; (mov r8, r8)
    4f80:	41e00000 	.word	0x41e00000

00004f84 <__aeabi_fmul>:
    4f84:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f86:	4657      	mov	r7, sl
    4f88:	464e      	mov	r6, r9
    4f8a:	4645      	mov	r5, r8
    4f8c:	0043      	lsls	r3, r0, #1
    4f8e:	b4e0      	push	{r5, r6, r7}
    4f90:	0246      	lsls	r6, r0, #9
    4f92:	4688      	mov	r8, r1
    4f94:	0a76      	lsrs	r6, r6, #9
    4f96:	0e1f      	lsrs	r7, r3, #24
    4f98:	0fc4      	lsrs	r4, r0, #31
    4f9a:	2f00      	cmp	r7, #0
    4f9c:	d047      	beq.n	502e <__aeabi_fmul+0xaa>
    4f9e:	2fff      	cmp	r7, #255	; 0xff
    4fa0:	d025      	beq.n	4fee <__aeabi_fmul+0x6a>
    4fa2:	2300      	movs	r3, #0
    4fa4:	2580      	movs	r5, #128	; 0x80
    4fa6:	469a      	mov	sl, r3
    4fa8:	4699      	mov	r9, r3
    4faa:	00f6      	lsls	r6, r6, #3
    4fac:	04ed      	lsls	r5, r5, #19
    4fae:	432e      	orrs	r6, r5
    4fb0:	3f7f      	subs	r7, #127	; 0x7f
    4fb2:	4643      	mov	r3, r8
    4fb4:	4642      	mov	r2, r8
    4fb6:	025d      	lsls	r5, r3, #9
    4fb8:	0fd2      	lsrs	r2, r2, #31
    4fba:	005b      	lsls	r3, r3, #1
    4fbc:	0a6d      	lsrs	r5, r5, #9
    4fbe:	0e1b      	lsrs	r3, r3, #24
    4fc0:	4690      	mov	r8, r2
    4fc2:	d040      	beq.n	5046 <__aeabi_fmul+0xc2>
    4fc4:	2bff      	cmp	r3, #255	; 0xff
    4fc6:	d039      	beq.n	503c <__aeabi_fmul+0xb8>
    4fc8:	2280      	movs	r2, #128	; 0x80
    4fca:	2000      	movs	r0, #0
    4fcc:	00ed      	lsls	r5, r5, #3
    4fce:	04d2      	lsls	r2, r2, #19
    4fd0:	4315      	orrs	r5, r2
    4fd2:	3b7f      	subs	r3, #127	; 0x7f
    4fd4:	18fb      	adds	r3, r7, r3
    4fd6:	4642      	mov	r2, r8
    4fd8:	4657      	mov	r7, sl
    4fda:	1c59      	adds	r1, r3, #1
    4fdc:	4062      	eors	r2, r4
    4fde:	468c      	mov	ip, r1
    4fe0:	4307      	orrs	r7, r0
    4fe2:	2f0f      	cmp	r7, #15
    4fe4:	d85c      	bhi.n	50a0 <__aeabi_fmul+0x11c>
    4fe6:	496f      	ldr	r1, [pc, #444]	; (51a4 <__aeabi_fmul+0x220>)
    4fe8:	00bf      	lsls	r7, r7, #2
    4fea:	59c9      	ldr	r1, [r1, r7]
    4fec:	468f      	mov	pc, r1
    4fee:	2e00      	cmp	r6, #0
    4ff0:	d145      	bne.n	507e <__aeabi_fmul+0xfa>
    4ff2:	2308      	movs	r3, #8
    4ff4:	469a      	mov	sl, r3
    4ff6:	3b06      	subs	r3, #6
    4ff8:	4699      	mov	r9, r3
    4ffa:	e7da      	b.n	4fb2 <__aeabi_fmul+0x2e>
    4ffc:	4642      	mov	r2, r8
    4ffe:	2802      	cmp	r0, #2
    5000:	d02d      	beq.n	505e <__aeabi_fmul+0xda>
    5002:	2803      	cmp	r0, #3
    5004:	d100      	bne.n	5008 <__aeabi_fmul+0x84>
    5006:	e0c3      	b.n	5190 <__aeabi_fmul+0x20c>
    5008:	2801      	cmp	r0, #1
    500a:	d000      	beq.n	500e <__aeabi_fmul+0x8a>
    500c:	e0a2      	b.n	5154 <__aeabi_fmul+0x1d0>
    500e:	2500      	movs	r5, #0
    5010:	2600      	movs	r6, #0
    5012:	4002      	ands	r2, r0
    5014:	b2d4      	uxtb	r4, r2
    5016:	0276      	lsls	r6, r6, #9
    5018:	05ed      	lsls	r5, r5, #23
    501a:	0a76      	lsrs	r6, r6, #9
    501c:	432e      	orrs	r6, r5
    501e:	07e4      	lsls	r4, r4, #31
    5020:	4326      	orrs	r6, r4
    5022:	0030      	movs	r0, r6
    5024:	bc1c      	pop	{r2, r3, r4}
    5026:	4690      	mov	r8, r2
    5028:	4699      	mov	r9, r3
    502a:	46a2      	mov	sl, r4
    502c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    502e:	2e00      	cmp	r6, #0
    5030:	d11a      	bne.n	5068 <__aeabi_fmul+0xe4>
    5032:	2304      	movs	r3, #4
    5034:	469a      	mov	sl, r3
    5036:	3b03      	subs	r3, #3
    5038:	4699      	mov	r9, r3
    503a:	e7ba      	b.n	4fb2 <__aeabi_fmul+0x2e>
    503c:	002a      	movs	r2, r5
    503e:	1e51      	subs	r1, r2, #1
    5040:	418a      	sbcs	r2, r1
    5042:	1c90      	adds	r0, r2, #2
    5044:	e7c6      	b.n	4fd4 <__aeabi_fmul+0x50>
    5046:	2001      	movs	r0, #1
    5048:	2d00      	cmp	r5, #0
    504a:	d0c3      	beq.n	4fd4 <__aeabi_fmul+0x50>
    504c:	0028      	movs	r0, r5
    504e:	f001 ff9d 	bl	6f8c <__clzsi2>
    5052:	1f43      	subs	r3, r0, #5
    5054:	3076      	adds	r0, #118	; 0x76
    5056:	409d      	lsls	r5, r3
    5058:	4243      	negs	r3, r0
    505a:	2000      	movs	r0, #0
    505c:	e7ba      	b.n	4fd4 <__aeabi_fmul+0x50>
    505e:	2401      	movs	r4, #1
    5060:	25ff      	movs	r5, #255	; 0xff
    5062:	4014      	ands	r4, r2
    5064:	2600      	movs	r6, #0
    5066:	e7d6      	b.n	5016 <__aeabi_fmul+0x92>
    5068:	0030      	movs	r0, r6
    506a:	f001 ff8f 	bl	6f8c <__clzsi2>
    506e:	1f43      	subs	r3, r0, #5
    5070:	409e      	lsls	r6, r3
    5072:	2300      	movs	r3, #0
    5074:	3076      	adds	r0, #118	; 0x76
    5076:	4247      	negs	r7, r0
    5078:	469a      	mov	sl, r3
    507a:	4699      	mov	r9, r3
    507c:	e799      	b.n	4fb2 <__aeabi_fmul+0x2e>
    507e:	230c      	movs	r3, #12
    5080:	469a      	mov	sl, r3
    5082:	3b09      	subs	r3, #9
    5084:	4699      	mov	r9, r3
    5086:	e794      	b.n	4fb2 <__aeabi_fmul+0x2e>
    5088:	2680      	movs	r6, #128	; 0x80
    508a:	2400      	movs	r4, #0
    508c:	03f6      	lsls	r6, r6, #15
    508e:	25ff      	movs	r5, #255	; 0xff
    5090:	e7c1      	b.n	5016 <__aeabi_fmul+0x92>
    5092:	0035      	movs	r5, r6
    5094:	4648      	mov	r0, r9
    5096:	e7b2      	b.n	4ffe <__aeabi_fmul+0x7a>
    5098:	0035      	movs	r5, r6
    509a:	0022      	movs	r2, r4
    509c:	4648      	mov	r0, r9
    509e:	e7ae      	b.n	4ffe <__aeabi_fmul+0x7a>
    50a0:	0429      	lsls	r1, r5, #16
    50a2:	0c09      	lsrs	r1, r1, #16
    50a4:	0008      	movs	r0, r1
    50a6:	0c37      	lsrs	r7, r6, #16
    50a8:	0436      	lsls	r6, r6, #16
    50aa:	0c36      	lsrs	r6, r6, #16
    50ac:	0c2c      	lsrs	r4, r5, #16
    50ae:	4379      	muls	r1, r7
    50b0:	4370      	muls	r0, r6
    50b2:	4367      	muls	r7, r4
    50b4:	4374      	muls	r4, r6
    50b6:	0c06      	lsrs	r6, r0, #16
    50b8:	1864      	adds	r4, r4, r1
    50ba:	1936      	adds	r6, r6, r4
    50bc:	42b1      	cmp	r1, r6
    50be:	d903      	bls.n	50c8 <__aeabi_fmul+0x144>
    50c0:	2180      	movs	r1, #128	; 0x80
    50c2:	0249      	lsls	r1, r1, #9
    50c4:	4688      	mov	r8, r1
    50c6:	4447      	add	r7, r8
    50c8:	0400      	lsls	r0, r0, #16
    50ca:	0c00      	lsrs	r0, r0, #16
    50cc:	0431      	lsls	r1, r6, #16
    50ce:	1809      	adds	r1, r1, r0
    50d0:	018d      	lsls	r5, r1, #6
    50d2:	1e68      	subs	r0, r5, #1
    50d4:	4185      	sbcs	r5, r0
    50d6:	0e89      	lsrs	r1, r1, #26
    50d8:	4329      	orrs	r1, r5
    50da:	0c35      	lsrs	r5, r6, #16
    50dc:	19ed      	adds	r5, r5, r7
    50de:	01ad      	lsls	r5, r5, #6
    50e0:	430d      	orrs	r5, r1
    50e2:	0129      	lsls	r1, r5, #4
    50e4:	d504      	bpl.n	50f0 <__aeabi_fmul+0x16c>
    50e6:	2301      	movs	r3, #1
    50e8:	0869      	lsrs	r1, r5, #1
    50ea:	401d      	ands	r5, r3
    50ec:	4663      	mov	r3, ip
    50ee:	430d      	orrs	r5, r1
    50f0:	0019      	movs	r1, r3
    50f2:	317f      	adds	r1, #127	; 0x7f
    50f4:	2900      	cmp	r1, #0
    50f6:	dd25      	ble.n	5144 <__aeabi_fmul+0x1c0>
    50f8:	0768      	lsls	r0, r5, #29
    50fa:	d004      	beq.n	5106 <__aeabi_fmul+0x182>
    50fc:	200f      	movs	r0, #15
    50fe:	4028      	ands	r0, r5
    5100:	2804      	cmp	r0, #4
    5102:	d000      	beq.n	5106 <__aeabi_fmul+0x182>
    5104:	3504      	adds	r5, #4
    5106:	0128      	lsls	r0, r5, #4
    5108:	d503      	bpl.n	5112 <__aeabi_fmul+0x18e>
    510a:	4927      	ldr	r1, [pc, #156]	; (51a8 <__aeabi_fmul+0x224>)
    510c:	3380      	adds	r3, #128	; 0x80
    510e:	400d      	ands	r5, r1
    5110:	0019      	movs	r1, r3
    5112:	29fe      	cmp	r1, #254	; 0xfe
    5114:	dca3      	bgt.n	505e <__aeabi_fmul+0xda>
    5116:	2401      	movs	r4, #1
    5118:	01ad      	lsls	r5, r5, #6
    511a:	0a6e      	lsrs	r6, r5, #9
    511c:	4014      	ands	r4, r2
    511e:	b2cd      	uxtb	r5, r1
    5120:	e779      	b.n	5016 <__aeabi_fmul+0x92>
    5122:	2080      	movs	r0, #128	; 0x80
    5124:	03c0      	lsls	r0, r0, #15
    5126:	4206      	tst	r6, r0
    5128:	d007      	beq.n	513a <__aeabi_fmul+0x1b6>
    512a:	4205      	tst	r5, r0
    512c:	d105      	bne.n	513a <__aeabi_fmul+0x1b6>
    512e:	4328      	orrs	r0, r5
    5130:	0246      	lsls	r6, r0, #9
    5132:	0a76      	lsrs	r6, r6, #9
    5134:	4644      	mov	r4, r8
    5136:	25ff      	movs	r5, #255	; 0xff
    5138:	e76d      	b.n	5016 <__aeabi_fmul+0x92>
    513a:	4306      	orrs	r6, r0
    513c:	0276      	lsls	r6, r6, #9
    513e:	0a76      	lsrs	r6, r6, #9
    5140:	25ff      	movs	r5, #255	; 0xff
    5142:	e768      	b.n	5016 <__aeabi_fmul+0x92>
    5144:	2401      	movs	r4, #1
    5146:	1a61      	subs	r1, r4, r1
    5148:	291b      	cmp	r1, #27
    514a:	dd05      	ble.n	5158 <__aeabi_fmul+0x1d4>
    514c:	4014      	ands	r4, r2
    514e:	2500      	movs	r5, #0
    5150:	2600      	movs	r6, #0
    5152:	e760      	b.n	5016 <__aeabi_fmul+0x92>
    5154:	4663      	mov	r3, ip
    5156:	e7cb      	b.n	50f0 <__aeabi_fmul+0x16c>
    5158:	002e      	movs	r6, r5
    515a:	2320      	movs	r3, #32
    515c:	40ce      	lsrs	r6, r1
    515e:	1a59      	subs	r1, r3, r1
    5160:	408d      	lsls	r5, r1
    5162:	1e6b      	subs	r3, r5, #1
    5164:	419d      	sbcs	r5, r3
    5166:	432e      	orrs	r6, r5
    5168:	0773      	lsls	r3, r6, #29
    516a:	d004      	beq.n	5176 <__aeabi_fmul+0x1f2>
    516c:	230f      	movs	r3, #15
    516e:	4033      	ands	r3, r6
    5170:	2b04      	cmp	r3, #4
    5172:	d000      	beq.n	5176 <__aeabi_fmul+0x1f2>
    5174:	3604      	adds	r6, #4
    5176:	0173      	lsls	r3, r6, #5
    5178:	d504      	bpl.n	5184 <__aeabi_fmul+0x200>
    517a:	2401      	movs	r4, #1
    517c:	2501      	movs	r5, #1
    517e:	4014      	ands	r4, r2
    5180:	2600      	movs	r6, #0
    5182:	e748      	b.n	5016 <__aeabi_fmul+0x92>
    5184:	2401      	movs	r4, #1
    5186:	01b6      	lsls	r6, r6, #6
    5188:	0a76      	lsrs	r6, r6, #9
    518a:	4014      	ands	r4, r2
    518c:	2500      	movs	r5, #0
    518e:	e742      	b.n	5016 <__aeabi_fmul+0x92>
    5190:	2680      	movs	r6, #128	; 0x80
    5192:	2401      	movs	r4, #1
    5194:	03f6      	lsls	r6, r6, #15
    5196:	432e      	orrs	r6, r5
    5198:	0276      	lsls	r6, r6, #9
    519a:	0a76      	lsrs	r6, r6, #9
    519c:	4014      	ands	r4, r2
    519e:	25ff      	movs	r5, #255	; 0xff
    51a0:	e739      	b.n	5016 <__aeabi_fmul+0x92>
    51a2:	46c0      	nop			; (mov r8, r8)
    51a4:	00007058 	.word	0x00007058
    51a8:	f7ffffff 	.word	0xf7ffffff

000051ac <__aeabi_f2iz>:
    51ac:	0243      	lsls	r3, r0, #9
    51ae:	0a59      	lsrs	r1, r3, #9
    51b0:	0043      	lsls	r3, r0, #1
    51b2:	0fc2      	lsrs	r2, r0, #31
    51b4:	0e1b      	lsrs	r3, r3, #24
    51b6:	2000      	movs	r0, #0
    51b8:	2b7e      	cmp	r3, #126	; 0x7e
    51ba:	dd0e      	ble.n	51da <__aeabi_f2iz+0x2e>
    51bc:	2b9d      	cmp	r3, #157	; 0x9d
    51be:	dc0d      	bgt.n	51dc <__aeabi_f2iz+0x30>
    51c0:	2080      	movs	r0, #128	; 0x80
    51c2:	0400      	lsls	r0, r0, #16
    51c4:	4301      	orrs	r1, r0
    51c6:	2b95      	cmp	r3, #149	; 0x95
    51c8:	dc0b      	bgt.n	51e2 <__aeabi_f2iz+0x36>
    51ca:	2096      	movs	r0, #150	; 0x96
    51cc:	1ac3      	subs	r3, r0, r3
    51ce:	40d9      	lsrs	r1, r3
    51d0:	000b      	movs	r3, r1
    51d2:	4258      	negs	r0, r3
    51d4:	2a00      	cmp	r2, #0
    51d6:	d100      	bne.n	51da <__aeabi_f2iz+0x2e>
    51d8:	0018      	movs	r0, r3
    51da:	4770      	bx	lr
    51dc:	4b03      	ldr	r3, [pc, #12]	; (51ec <__aeabi_f2iz+0x40>)
    51de:	18d0      	adds	r0, r2, r3
    51e0:	e7fb      	b.n	51da <__aeabi_f2iz+0x2e>
    51e2:	3b96      	subs	r3, #150	; 0x96
    51e4:	4099      	lsls	r1, r3
    51e6:	000b      	movs	r3, r1
    51e8:	e7f3      	b.n	51d2 <__aeabi_f2iz+0x26>
    51ea:	46c0      	nop			; (mov r8, r8)
    51ec:	7fffffff 	.word	0x7fffffff

000051f0 <__aeabi_dadd>:
    51f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    51f2:	4656      	mov	r6, sl
    51f4:	465f      	mov	r7, fp
    51f6:	464d      	mov	r5, r9
    51f8:	4644      	mov	r4, r8
    51fa:	b4f0      	push	{r4, r5, r6, r7}
    51fc:	000f      	movs	r7, r1
    51fe:	0ffd      	lsrs	r5, r7, #31
    5200:	46aa      	mov	sl, r5
    5202:	0309      	lsls	r1, r1, #12
    5204:	007c      	lsls	r4, r7, #1
    5206:	002e      	movs	r6, r5
    5208:	005f      	lsls	r7, r3, #1
    520a:	0f45      	lsrs	r5, r0, #29
    520c:	0a49      	lsrs	r1, r1, #9
    520e:	0d7f      	lsrs	r7, r7, #21
    5210:	4329      	orrs	r1, r5
    5212:	00c5      	lsls	r5, r0, #3
    5214:	0318      	lsls	r0, r3, #12
    5216:	46bc      	mov	ip, r7
    5218:	0a40      	lsrs	r0, r0, #9
    521a:	0f57      	lsrs	r7, r2, #29
    521c:	0d64      	lsrs	r4, r4, #21
    521e:	0fdb      	lsrs	r3, r3, #31
    5220:	4338      	orrs	r0, r7
    5222:	00d2      	lsls	r2, r2, #3
    5224:	459a      	cmp	sl, r3
    5226:	d100      	bne.n	522a <__aeabi_dadd+0x3a>
    5228:	e0aa      	b.n	5380 <__aeabi_dadd+0x190>
    522a:	4666      	mov	r6, ip
    522c:	1ba6      	subs	r6, r4, r6
    522e:	2e00      	cmp	r6, #0
    5230:	dc00      	bgt.n	5234 <__aeabi_dadd+0x44>
    5232:	e0ff      	b.n	5434 <__aeabi_dadd+0x244>
    5234:	4663      	mov	r3, ip
    5236:	2b00      	cmp	r3, #0
    5238:	d139      	bne.n	52ae <__aeabi_dadd+0xbe>
    523a:	0003      	movs	r3, r0
    523c:	4313      	orrs	r3, r2
    523e:	d000      	beq.n	5242 <__aeabi_dadd+0x52>
    5240:	e0d9      	b.n	53f6 <__aeabi_dadd+0x206>
    5242:	076b      	lsls	r3, r5, #29
    5244:	d009      	beq.n	525a <__aeabi_dadd+0x6a>
    5246:	230f      	movs	r3, #15
    5248:	402b      	ands	r3, r5
    524a:	2b04      	cmp	r3, #4
    524c:	d005      	beq.n	525a <__aeabi_dadd+0x6a>
    524e:	1d2b      	adds	r3, r5, #4
    5250:	42ab      	cmp	r3, r5
    5252:	41ad      	sbcs	r5, r5
    5254:	426d      	negs	r5, r5
    5256:	1949      	adds	r1, r1, r5
    5258:	001d      	movs	r5, r3
    525a:	020b      	lsls	r3, r1, #8
    525c:	d400      	bmi.n	5260 <__aeabi_dadd+0x70>
    525e:	e082      	b.n	5366 <__aeabi_dadd+0x176>
    5260:	4bca      	ldr	r3, [pc, #808]	; (558c <__aeabi_dadd+0x39c>)
    5262:	3401      	adds	r4, #1
    5264:	429c      	cmp	r4, r3
    5266:	d100      	bne.n	526a <__aeabi_dadd+0x7a>
    5268:	e0fe      	b.n	5468 <__aeabi_dadd+0x278>
    526a:	000a      	movs	r2, r1
    526c:	4656      	mov	r6, sl
    526e:	4bc8      	ldr	r3, [pc, #800]	; (5590 <__aeabi_dadd+0x3a0>)
    5270:	08ed      	lsrs	r5, r5, #3
    5272:	401a      	ands	r2, r3
    5274:	0750      	lsls	r0, r2, #29
    5276:	0564      	lsls	r4, r4, #21
    5278:	0252      	lsls	r2, r2, #9
    527a:	4305      	orrs	r5, r0
    527c:	0b12      	lsrs	r2, r2, #12
    527e:	0d64      	lsrs	r4, r4, #21
    5280:	2100      	movs	r1, #0
    5282:	0312      	lsls	r2, r2, #12
    5284:	0d0b      	lsrs	r3, r1, #20
    5286:	051b      	lsls	r3, r3, #20
    5288:	0564      	lsls	r4, r4, #21
    528a:	0b12      	lsrs	r2, r2, #12
    528c:	431a      	orrs	r2, r3
    528e:	0863      	lsrs	r3, r4, #1
    5290:	4cc0      	ldr	r4, [pc, #768]	; (5594 <__aeabi_dadd+0x3a4>)
    5292:	07f6      	lsls	r6, r6, #31
    5294:	4014      	ands	r4, r2
    5296:	431c      	orrs	r4, r3
    5298:	0064      	lsls	r4, r4, #1
    529a:	0864      	lsrs	r4, r4, #1
    529c:	4334      	orrs	r4, r6
    529e:	0028      	movs	r0, r5
    52a0:	0021      	movs	r1, r4
    52a2:	bc3c      	pop	{r2, r3, r4, r5}
    52a4:	4690      	mov	r8, r2
    52a6:	4699      	mov	r9, r3
    52a8:	46a2      	mov	sl, r4
    52aa:	46ab      	mov	fp, r5
    52ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    52ae:	4bb7      	ldr	r3, [pc, #732]	; (558c <__aeabi_dadd+0x39c>)
    52b0:	429c      	cmp	r4, r3
    52b2:	d0c6      	beq.n	5242 <__aeabi_dadd+0x52>
    52b4:	2380      	movs	r3, #128	; 0x80
    52b6:	041b      	lsls	r3, r3, #16
    52b8:	4318      	orrs	r0, r3
    52ba:	2e38      	cmp	r6, #56	; 0x38
    52bc:	dd00      	ble.n	52c0 <__aeabi_dadd+0xd0>
    52be:	e0eb      	b.n	5498 <__aeabi_dadd+0x2a8>
    52c0:	2e1f      	cmp	r6, #31
    52c2:	dd00      	ble.n	52c6 <__aeabi_dadd+0xd6>
    52c4:	e11e      	b.n	5504 <__aeabi_dadd+0x314>
    52c6:	2320      	movs	r3, #32
    52c8:	1b9b      	subs	r3, r3, r6
    52ca:	469c      	mov	ip, r3
    52cc:	0003      	movs	r3, r0
    52ce:	4667      	mov	r7, ip
    52d0:	40bb      	lsls	r3, r7
    52d2:	4698      	mov	r8, r3
    52d4:	0013      	movs	r3, r2
    52d6:	4647      	mov	r7, r8
    52d8:	40f3      	lsrs	r3, r6
    52da:	433b      	orrs	r3, r7
    52dc:	4667      	mov	r7, ip
    52de:	40ba      	lsls	r2, r7
    52e0:	1e57      	subs	r7, r2, #1
    52e2:	41ba      	sbcs	r2, r7
    52e4:	4313      	orrs	r3, r2
    52e6:	0002      	movs	r2, r0
    52e8:	40f2      	lsrs	r2, r6
    52ea:	1aeb      	subs	r3, r5, r3
    52ec:	429d      	cmp	r5, r3
    52ee:	41b6      	sbcs	r6, r6
    52f0:	001d      	movs	r5, r3
    52f2:	1a8a      	subs	r2, r1, r2
    52f4:	4276      	negs	r6, r6
    52f6:	1b91      	subs	r1, r2, r6
    52f8:	020b      	lsls	r3, r1, #8
    52fa:	d531      	bpl.n	5360 <__aeabi_dadd+0x170>
    52fc:	024a      	lsls	r2, r1, #9
    52fe:	0a56      	lsrs	r6, r2, #9
    5300:	2e00      	cmp	r6, #0
    5302:	d100      	bne.n	5306 <__aeabi_dadd+0x116>
    5304:	e0b4      	b.n	5470 <__aeabi_dadd+0x280>
    5306:	0030      	movs	r0, r6
    5308:	f001 fe40 	bl	6f8c <__clzsi2>
    530c:	0003      	movs	r3, r0
    530e:	3b08      	subs	r3, #8
    5310:	2b1f      	cmp	r3, #31
    5312:	dd00      	ble.n	5316 <__aeabi_dadd+0x126>
    5314:	e0b5      	b.n	5482 <__aeabi_dadd+0x292>
    5316:	2220      	movs	r2, #32
    5318:	0029      	movs	r1, r5
    531a:	1ad2      	subs	r2, r2, r3
    531c:	40d1      	lsrs	r1, r2
    531e:	409e      	lsls	r6, r3
    5320:	000a      	movs	r2, r1
    5322:	409d      	lsls	r5, r3
    5324:	4332      	orrs	r2, r6
    5326:	429c      	cmp	r4, r3
    5328:	dd00      	ble.n	532c <__aeabi_dadd+0x13c>
    532a:	e0b1      	b.n	5490 <__aeabi_dadd+0x2a0>
    532c:	1b1c      	subs	r4, r3, r4
    532e:	1c63      	adds	r3, r4, #1
    5330:	2b1f      	cmp	r3, #31
    5332:	dd00      	ble.n	5336 <__aeabi_dadd+0x146>
    5334:	e0d5      	b.n	54e2 <__aeabi_dadd+0x2f2>
    5336:	2120      	movs	r1, #32
    5338:	0014      	movs	r4, r2
    533a:	0028      	movs	r0, r5
    533c:	1ac9      	subs	r1, r1, r3
    533e:	408c      	lsls	r4, r1
    5340:	40d8      	lsrs	r0, r3
    5342:	408d      	lsls	r5, r1
    5344:	4304      	orrs	r4, r0
    5346:	40da      	lsrs	r2, r3
    5348:	1e68      	subs	r0, r5, #1
    534a:	4185      	sbcs	r5, r0
    534c:	0011      	movs	r1, r2
    534e:	4325      	orrs	r5, r4
    5350:	2400      	movs	r4, #0
    5352:	e776      	b.n	5242 <__aeabi_dadd+0x52>
    5354:	4641      	mov	r1, r8
    5356:	4331      	orrs	r1, r6
    5358:	d100      	bne.n	535c <__aeabi_dadd+0x16c>
    535a:	e234      	b.n	57c6 <__aeabi_dadd+0x5d6>
    535c:	0031      	movs	r1, r6
    535e:	4645      	mov	r5, r8
    5360:	076b      	lsls	r3, r5, #29
    5362:	d000      	beq.n	5366 <__aeabi_dadd+0x176>
    5364:	e76f      	b.n	5246 <__aeabi_dadd+0x56>
    5366:	4656      	mov	r6, sl
    5368:	0748      	lsls	r0, r1, #29
    536a:	08ed      	lsrs	r5, r5, #3
    536c:	08c9      	lsrs	r1, r1, #3
    536e:	4305      	orrs	r5, r0
    5370:	4b86      	ldr	r3, [pc, #536]	; (558c <__aeabi_dadd+0x39c>)
    5372:	429c      	cmp	r4, r3
    5374:	d035      	beq.n	53e2 <__aeabi_dadd+0x1f2>
    5376:	030a      	lsls	r2, r1, #12
    5378:	0564      	lsls	r4, r4, #21
    537a:	0b12      	lsrs	r2, r2, #12
    537c:	0d64      	lsrs	r4, r4, #21
    537e:	e77f      	b.n	5280 <__aeabi_dadd+0x90>
    5380:	4663      	mov	r3, ip
    5382:	1ae3      	subs	r3, r4, r3
    5384:	469b      	mov	fp, r3
    5386:	2b00      	cmp	r3, #0
    5388:	dc00      	bgt.n	538c <__aeabi_dadd+0x19c>
    538a:	e08b      	b.n	54a4 <__aeabi_dadd+0x2b4>
    538c:	4667      	mov	r7, ip
    538e:	2f00      	cmp	r7, #0
    5390:	d03c      	beq.n	540c <__aeabi_dadd+0x21c>
    5392:	4f7e      	ldr	r7, [pc, #504]	; (558c <__aeabi_dadd+0x39c>)
    5394:	42bc      	cmp	r4, r7
    5396:	d100      	bne.n	539a <__aeabi_dadd+0x1aa>
    5398:	e753      	b.n	5242 <__aeabi_dadd+0x52>
    539a:	2780      	movs	r7, #128	; 0x80
    539c:	043f      	lsls	r7, r7, #16
    539e:	4338      	orrs	r0, r7
    53a0:	465b      	mov	r3, fp
    53a2:	2b38      	cmp	r3, #56	; 0x38
    53a4:	dc00      	bgt.n	53a8 <__aeabi_dadd+0x1b8>
    53a6:	e0f7      	b.n	5598 <__aeabi_dadd+0x3a8>
    53a8:	4302      	orrs	r2, r0
    53aa:	1e50      	subs	r0, r2, #1
    53ac:	4182      	sbcs	r2, r0
    53ae:	2000      	movs	r0, #0
    53b0:	b2d2      	uxtb	r2, r2
    53b2:	1953      	adds	r3, r2, r5
    53b4:	1842      	adds	r2, r0, r1
    53b6:	42ab      	cmp	r3, r5
    53b8:	4189      	sbcs	r1, r1
    53ba:	001d      	movs	r5, r3
    53bc:	4249      	negs	r1, r1
    53be:	1889      	adds	r1, r1, r2
    53c0:	020b      	lsls	r3, r1, #8
    53c2:	d5cd      	bpl.n	5360 <__aeabi_dadd+0x170>
    53c4:	4b71      	ldr	r3, [pc, #452]	; (558c <__aeabi_dadd+0x39c>)
    53c6:	3401      	adds	r4, #1
    53c8:	429c      	cmp	r4, r3
    53ca:	d100      	bne.n	53ce <__aeabi_dadd+0x1de>
    53cc:	e13d      	b.n	564a <__aeabi_dadd+0x45a>
    53ce:	2001      	movs	r0, #1
    53d0:	4a6f      	ldr	r2, [pc, #444]	; (5590 <__aeabi_dadd+0x3a0>)
    53d2:	086b      	lsrs	r3, r5, #1
    53d4:	400a      	ands	r2, r1
    53d6:	4028      	ands	r0, r5
    53d8:	4318      	orrs	r0, r3
    53da:	07d5      	lsls	r5, r2, #31
    53dc:	4305      	orrs	r5, r0
    53de:	0851      	lsrs	r1, r2, #1
    53e0:	e72f      	b.n	5242 <__aeabi_dadd+0x52>
    53e2:	002b      	movs	r3, r5
    53e4:	430b      	orrs	r3, r1
    53e6:	d100      	bne.n	53ea <__aeabi_dadd+0x1fa>
    53e8:	e1cb      	b.n	5782 <__aeabi_dadd+0x592>
    53ea:	2380      	movs	r3, #128	; 0x80
    53ec:	031b      	lsls	r3, r3, #12
    53ee:	430b      	orrs	r3, r1
    53f0:	031a      	lsls	r2, r3, #12
    53f2:	0b12      	lsrs	r2, r2, #12
    53f4:	e744      	b.n	5280 <__aeabi_dadd+0x90>
    53f6:	3e01      	subs	r6, #1
    53f8:	2e00      	cmp	r6, #0
    53fa:	d16d      	bne.n	54d8 <__aeabi_dadd+0x2e8>
    53fc:	1aae      	subs	r6, r5, r2
    53fe:	42b5      	cmp	r5, r6
    5400:	419b      	sbcs	r3, r3
    5402:	1a09      	subs	r1, r1, r0
    5404:	425b      	negs	r3, r3
    5406:	1ac9      	subs	r1, r1, r3
    5408:	0035      	movs	r5, r6
    540a:	e775      	b.n	52f8 <__aeabi_dadd+0x108>
    540c:	0007      	movs	r7, r0
    540e:	4317      	orrs	r7, r2
    5410:	d100      	bne.n	5414 <__aeabi_dadd+0x224>
    5412:	e716      	b.n	5242 <__aeabi_dadd+0x52>
    5414:	2301      	movs	r3, #1
    5416:	425b      	negs	r3, r3
    5418:	469c      	mov	ip, r3
    541a:	44e3      	add	fp, ip
    541c:	465b      	mov	r3, fp
    541e:	2b00      	cmp	r3, #0
    5420:	d000      	beq.n	5424 <__aeabi_dadd+0x234>
    5422:	e0e0      	b.n	55e6 <__aeabi_dadd+0x3f6>
    5424:	18aa      	adds	r2, r5, r2
    5426:	42aa      	cmp	r2, r5
    5428:	419b      	sbcs	r3, r3
    542a:	1809      	adds	r1, r1, r0
    542c:	425b      	negs	r3, r3
    542e:	1859      	adds	r1, r3, r1
    5430:	0015      	movs	r5, r2
    5432:	e7c5      	b.n	53c0 <__aeabi_dadd+0x1d0>
    5434:	2e00      	cmp	r6, #0
    5436:	d175      	bne.n	5524 <__aeabi_dadd+0x334>
    5438:	1c66      	adds	r6, r4, #1
    543a:	0576      	lsls	r6, r6, #21
    543c:	0d76      	lsrs	r6, r6, #21
    543e:	2e01      	cmp	r6, #1
    5440:	dc00      	bgt.n	5444 <__aeabi_dadd+0x254>
    5442:	e0f3      	b.n	562c <__aeabi_dadd+0x43c>
    5444:	1aae      	subs	r6, r5, r2
    5446:	46b0      	mov	r8, r6
    5448:	4545      	cmp	r5, r8
    544a:	41bf      	sbcs	r7, r7
    544c:	1a0e      	subs	r6, r1, r0
    544e:	427f      	negs	r7, r7
    5450:	1bf6      	subs	r6, r6, r7
    5452:	0237      	lsls	r7, r6, #8
    5454:	d400      	bmi.n	5458 <__aeabi_dadd+0x268>
    5456:	e08f      	b.n	5578 <__aeabi_dadd+0x388>
    5458:	1b55      	subs	r5, r2, r5
    545a:	42aa      	cmp	r2, r5
    545c:	41b6      	sbcs	r6, r6
    545e:	1a41      	subs	r1, r0, r1
    5460:	4276      	negs	r6, r6
    5462:	1b8e      	subs	r6, r1, r6
    5464:	469a      	mov	sl, r3
    5466:	e74b      	b.n	5300 <__aeabi_dadd+0x110>
    5468:	4656      	mov	r6, sl
    546a:	2200      	movs	r2, #0
    546c:	2500      	movs	r5, #0
    546e:	e707      	b.n	5280 <__aeabi_dadd+0x90>
    5470:	0028      	movs	r0, r5
    5472:	f001 fd8b 	bl	6f8c <__clzsi2>
    5476:	3020      	adds	r0, #32
    5478:	0003      	movs	r3, r0
    547a:	3b08      	subs	r3, #8
    547c:	2b1f      	cmp	r3, #31
    547e:	dc00      	bgt.n	5482 <__aeabi_dadd+0x292>
    5480:	e749      	b.n	5316 <__aeabi_dadd+0x126>
    5482:	002a      	movs	r2, r5
    5484:	3828      	subs	r0, #40	; 0x28
    5486:	4082      	lsls	r2, r0
    5488:	2500      	movs	r5, #0
    548a:	429c      	cmp	r4, r3
    548c:	dc00      	bgt.n	5490 <__aeabi_dadd+0x2a0>
    548e:	e74d      	b.n	532c <__aeabi_dadd+0x13c>
    5490:	493f      	ldr	r1, [pc, #252]	; (5590 <__aeabi_dadd+0x3a0>)
    5492:	1ae4      	subs	r4, r4, r3
    5494:	4011      	ands	r1, r2
    5496:	e6d4      	b.n	5242 <__aeabi_dadd+0x52>
    5498:	4302      	orrs	r2, r0
    549a:	1e50      	subs	r0, r2, #1
    549c:	4182      	sbcs	r2, r0
    549e:	b2d3      	uxtb	r3, r2
    54a0:	2200      	movs	r2, #0
    54a2:	e722      	b.n	52ea <__aeabi_dadd+0xfa>
    54a4:	2b00      	cmp	r3, #0
    54a6:	d000      	beq.n	54aa <__aeabi_dadd+0x2ba>
    54a8:	e0f3      	b.n	5692 <__aeabi_dadd+0x4a2>
    54aa:	1c63      	adds	r3, r4, #1
    54ac:	469c      	mov	ip, r3
    54ae:	055b      	lsls	r3, r3, #21
    54b0:	0d5b      	lsrs	r3, r3, #21
    54b2:	2b01      	cmp	r3, #1
    54b4:	dc00      	bgt.n	54b8 <__aeabi_dadd+0x2c8>
    54b6:	e09f      	b.n	55f8 <__aeabi_dadd+0x408>
    54b8:	4b34      	ldr	r3, [pc, #208]	; (558c <__aeabi_dadd+0x39c>)
    54ba:	459c      	cmp	ip, r3
    54bc:	d100      	bne.n	54c0 <__aeabi_dadd+0x2d0>
    54be:	e0c3      	b.n	5648 <__aeabi_dadd+0x458>
    54c0:	18aa      	adds	r2, r5, r2
    54c2:	1809      	adds	r1, r1, r0
    54c4:	42aa      	cmp	r2, r5
    54c6:	4180      	sbcs	r0, r0
    54c8:	4240      	negs	r0, r0
    54ca:	1841      	adds	r1, r0, r1
    54cc:	07cd      	lsls	r5, r1, #31
    54ce:	0852      	lsrs	r2, r2, #1
    54d0:	4315      	orrs	r5, r2
    54d2:	0849      	lsrs	r1, r1, #1
    54d4:	4664      	mov	r4, ip
    54d6:	e6b4      	b.n	5242 <__aeabi_dadd+0x52>
    54d8:	4b2c      	ldr	r3, [pc, #176]	; (558c <__aeabi_dadd+0x39c>)
    54da:	429c      	cmp	r4, r3
    54dc:	d000      	beq.n	54e0 <__aeabi_dadd+0x2f0>
    54de:	e6ec      	b.n	52ba <__aeabi_dadd+0xca>
    54e0:	e6af      	b.n	5242 <__aeabi_dadd+0x52>
    54e2:	0011      	movs	r1, r2
    54e4:	3c1f      	subs	r4, #31
    54e6:	40e1      	lsrs	r1, r4
    54e8:	000c      	movs	r4, r1
    54ea:	2b20      	cmp	r3, #32
    54ec:	d100      	bne.n	54f0 <__aeabi_dadd+0x300>
    54ee:	e07f      	b.n	55f0 <__aeabi_dadd+0x400>
    54f0:	2140      	movs	r1, #64	; 0x40
    54f2:	1acb      	subs	r3, r1, r3
    54f4:	409a      	lsls	r2, r3
    54f6:	4315      	orrs	r5, r2
    54f8:	1e6a      	subs	r2, r5, #1
    54fa:	4195      	sbcs	r5, r2
    54fc:	2100      	movs	r1, #0
    54fe:	4325      	orrs	r5, r4
    5500:	2400      	movs	r4, #0
    5502:	e72d      	b.n	5360 <__aeabi_dadd+0x170>
    5504:	0033      	movs	r3, r6
    5506:	0007      	movs	r7, r0
    5508:	3b20      	subs	r3, #32
    550a:	40df      	lsrs	r7, r3
    550c:	003b      	movs	r3, r7
    550e:	2e20      	cmp	r6, #32
    5510:	d070      	beq.n	55f4 <__aeabi_dadd+0x404>
    5512:	2740      	movs	r7, #64	; 0x40
    5514:	1bbe      	subs	r6, r7, r6
    5516:	40b0      	lsls	r0, r6
    5518:	4302      	orrs	r2, r0
    551a:	1e50      	subs	r0, r2, #1
    551c:	4182      	sbcs	r2, r0
    551e:	4313      	orrs	r3, r2
    5520:	2200      	movs	r2, #0
    5522:	e6e2      	b.n	52ea <__aeabi_dadd+0xfa>
    5524:	2c00      	cmp	r4, #0
    5526:	d04f      	beq.n	55c8 <__aeabi_dadd+0x3d8>
    5528:	4c18      	ldr	r4, [pc, #96]	; (558c <__aeabi_dadd+0x39c>)
    552a:	45a4      	cmp	ip, r4
    552c:	d100      	bne.n	5530 <__aeabi_dadd+0x340>
    552e:	e0ab      	b.n	5688 <__aeabi_dadd+0x498>
    5530:	2480      	movs	r4, #128	; 0x80
    5532:	0424      	lsls	r4, r4, #16
    5534:	4276      	negs	r6, r6
    5536:	4321      	orrs	r1, r4
    5538:	2e38      	cmp	r6, #56	; 0x38
    553a:	dd00      	ble.n	553e <__aeabi_dadd+0x34e>
    553c:	e0df      	b.n	56fe <__aeabi_dadd+0x50e>
    553e:	2e1f      	cmp	r6, #31
    5540:	dd00      	ble.n	5544 <__aeabi_dadd+0x354>
    5542:	e143      	b.n	57cc <__aeabi_dadd+0x5dc>
    5544:	2720      	movs	r7, #32
    5546:	1bbc      	subs	r4, r7, r6
    5548:	46a1      	mov	r9, r4
    554a:	000c      	movs	r4, r1
    554c:	464f      	mov	r7, r9
    554e:	40bc      	lsls	r4, r7
    5550:	46a0      	mov	r8, r4
    5552:	002c      	movs	r4, r5
    5554:	4647      	mov	r7, r8
    5556:	40f4      	lsrs	r4, r6
    5558:	433c      	orrs	r4, r7
    555a:	464f      	mov	r7, r9
    555c:	40bd      	lsls	r5, r7
    555e:	1e6f      	subs	r7, r5, #1
    5560:	41bd      	sbcs	r5, r7
    5562:	40f1      	lsrs	r1, r6
    5564:	432c      	orrs	r4, r5
    5566:	1b15      	subs	r5, r2, r4
    5568:	42aa      	cmp	r2, r5
    556a:	4192      	sbcs	r2, r2
    556c:	1a41      	subs	r1, r0, r1
    556e:	4252      	negs	r2, r2
    5570:	1a89      	subs	r1, r1, r2
    5572:	4664      	mov	r4, ip
    5574:	469a      	mov	sl, r3
    5576:	e6bf      	b.n	52f8 <__aeabi_dadd+0x108>
    5578:	4641      	mov	r1, r8
    557a:	4645      	mov	r5, r8
    557c:	4331      	orrs	r1, r6
    557e:	d000      	beq.n	5582 <__aeabi_dadd+0x392>
    5580:	e6be      	b.n	5300 <__aeabi_dadd+0x110>
    5582:	2600      	movs	r6, #0
    5584:	2400      	movs	r4, #0
    5586:	2500      	movs	r5, #0
    5588:	e6f2      	b.n	5370 <__aeabi_dadd+0x180>
    558a:	46c0      	nop			; (mov r8, r8)
    558c:	000007ff 	.word	0x000007ff
    5590:	ff7fffff 	.word	0xff7fffff
    5594:	800fffff 	.word	0x800fffff
    5598:	2b1f      	cmp	r3, #31
    559a:	dc59      	bgt.n	5650 <__aeabi_dadd+0x460>
    559c:	2720      	movs	r7, #32
    559e:	1aff      	subs	r7, r7, r3
    55a0:	46bc      	mov	ip, r7
    55a2:	0007      	movs	r7, r0
    55a4:	4663      	mov	r3, ip
    55a6:	409f      	lsls	r7, r3
    55a8:	465b      	mov	r3, fp
    55aa:	46b9      	mov	r9, r7
    55ac:	0017      	movs	r7, r2
    55ae:	40df      	lsrs	r7, r3
    55b0:	46b8      	mov	r8, r7
    55b2:	464f      	mov	r7, r9
    55b4:	4643      	mov	r3, r8
    55b6:	431f      	orrs	r7, r3
    55b8:	4663      	mov	r3, ip
    55ba:	409a      	lsls	r2, r3
    55bc:	1e53      	subs	r3, r2, #1
    55be:	419a      	sbcs	r2, r3
    55c0:	465b      	mov	r3, fp
    55c2:	433a      	orrs	r2, r7
    55c4:	40d8      	lsrs	r0, r3
    55c6:	e6f4      	b.n	53b2 <__aeabi_dadd+0x1c2>
    55c8:	000c      	movs	r4, r1
    55ca:	432c      	orrs	r4, r5
    55cc:	d05c      	beq.n	5688 <__aeabi_dadd+0x498>
    55ce:	43f6      	mvns	r6, r6
    55d0:	2e00      	cmp	r6, #0
    55d2:	d155      	bne.n	5680 <__aeabi_dadd+0x490>
    55d4:	1b55      	subs	r5, r2, r5
    55d6:	42aa      	cmp	r2, r5
    55d8:	41a4      	sbcs	r4, r4
    55da:	1a41      	subs	r1, r0, r1
    55dc:	4264      	negs	r4, r4
    55de:	1b09      	subs	r1, r1, r4
    55e0:	469a      	mov	sl, r3
    55e2:	4664      	mov	r4, ip
    55e4:	e688      	b.n	52f8 <__aeabi_dadd+0x108>
    55e6:	4f96      	ldr	r7, [pc, #600]	; (5840 <__aeabi_dadd+0x650>)
    55e8:	42bc      	cmp	r4, r7
    55ea:	d000      	beq.n	55ee <__aeabi_dadd+0x3fe>
    55ec:	e6d8      	b.n	53a0 <__aeabi_dadd+0x1b0>
    55ee:	e628      	b.n	5242 <__aeabi_dadd+0x52>
    55f0:	2200      	movs	r2, #0
    55f2:	e780      	b.n	54f6 <__aeabi_dadd+0x306>
    55f4:	2000      	movs	r0, #0
    55f6:	e78f      	b.n	5518 <__aeabi_dadd+0x328>
    55f8:	000b      	movs	r3, r1
    55fa:	432b      	orrs	r3, r5
    55fc:	2c00      	cmp	r4, #0
    55fe:	d000      	beq.n	5602 <__aeabi_dadd+0x412>
    5600:	e0c2      	b.n	5788 <__aeabi_dadd+0x598>
    5602:	2b00      	cmp	r3, #0
    5604:	d100      	bne.n	5608 <__aeabi_dadd+0x418>
    5606:	e101      	b.n	580c <__aeabi_dadd+0x61c>
    5608:	0003      	movs	r3, r0
    560a:	4313      	orrs	r3, r2
    560c:	d100      	bne.n	5610 <__aeabi_dadd+0x420>
    560e:	e618      	b.n	5242 <__aeabi_dadd+0x52>
    5610:	18ab      	adds	r3, r5, r2
    5612:	42ab      	cmp	r3, r5
    5614:	41b6      	sbcs	r6, r6
    5616:	1809      	adds	r1, r1, r0
    5618:	4276      	negs	r6, r6
    561a:	1871      	adds	r1, r6, r1
    561c:	020a      	lsls	r2, r1, #8
    561e:	d400      	bmi.n	5622 <__aeabi_dadd+0x432>
    5620:	e109      	b.n	5836 <__aeabi_dadd+0x646>
    5622:	4a88      	ldr	r2, [pc, #544]	; (5844 <__aeabi_dadd+0x654>)
    5624:	001d      	movs	r5, r3
    5626:	4011      	ands	r1, r2
    5628:	4664      	mov	r4, ip
    562a:	e60a      	b.n	5242 <__aeabi_dadd+0x52>
    562c:	2c00      	cmp	r4, #0
    562e:	d15b      	bne.n	56e8 <__aeabi_dadd+0x4f8>
    5630:	000e      	movs	r6, r1
    5632:	432e      	orrs	r6, r5
    5634:	d000      	beq.n	5638 <__aeabi_dadd+0x448>
    5636:	e08a      	b.n	574e <__aeabi_dadd+0x55e>
    5638:	0001      	movs	r1, r0
    563a:	4311      	orrs	r1, r2
    563c:	d100      	bne.n	5640 <__aeabi_dadd+0x450>
    563e:	e0c2      	b.n	57c6 <__aeabi_dadd+0x5d6>
    5640:	0001      	movs	r1, r0
    5642:	0015      	movs	r5, r2
    5644:	469a      	mov	sl, r3
    5646:	e5fc      	b.n	5242 <__aeabi_dadd+0x52>
    5648:	4664      	mov	r4, ip
    564a:	2100      	movs	r1, #0
    564c:	2500      	movs	r5, #0
    564e:	e68f      	b.n	5370 <__aeabi_dadd+0x180>
    5650:	2320      	movs	r3, #32
    5652:	425b      	negs	r3, r3
    5654:	469c      	mov	ip, r3
    5656:	44dc      	add	ip, fp
    5658:	4663      	mov	r3, ip
    565a:	0007      	movs	r7, r0
    565c:	40df      	lsrs	r7, r3
    565e:	465b      	mov	r3, fp
    5660:	46bc      	mov	ip, r7
    5662:	2b20      	cmp	r3, #32
    5664:	d100      	bne.n	5668 <__aeabi_dadd+0x478>
    5666:	e0ac      	b.n	57c2 <__aeabi_dadd+0x5d2>
    5668:	2340      	movs	r3, #64	; 0x40
    566a:	465f      	mov	r7, fp
    566c:	1bdb      	subs	r3, r3, r7
    566e:	4098      	lsls	r0, r3
    5670:	4302      	orrs	r2, r0
    5672:	1e50      	subs	r0, r2, #1
    5674:	4182      	sbcs	r2, r0
    5676:	4663      	mov	r3, ip
    5678:	4313      	orrs	r3, r2
    567a:	001a      	movs	r2, r3
    567c:	2000      	movs	r0, #0
    567e:	e698      	b.n	53b2 <__aeabi_dadd+0x1c2>
    5680:	4c6f      	ldr	r4, [pc, #444]	; (5840 <__aeabi_dadd+0x650>)
    5682:	45a4      	cmp	ip, r4
    5684:	d000      	beq.n	5688 <__aeabi_dadd+0x498>
    5686:	e757      	b.n	5538 <__aeabi_dadd+0x348>
    5688:	0001      	movs	r1, r0
    568a:	0015      	movs	r5, r2
    568c:	4664      	mov	r4, ip
    568e:	469a      	mov	sl, r3
    5690:	e5d7      	b.n	5242 <__aeabi_dadd+0x52>
    5692:	2c00      	cmp	r4, #0
    5694:	d139      	bne.n	570a <__aeabi_dadd+0x51a>
    5696:	000c      	movs	r4, r1
    5698:	432c      	orrs	r4, r5
    569a:	d06e      	beq.n	577a <__aeabi_dadd+0x58a>
    569c:	43db      	mvns	r3, r3
    569e:	2b00      	cmp	r3, #0
    56a0:	d01a      	beq.n	56d8 <__aeabi_dadd+0x4e8>
    56a2:	4c67      	ldr	r4, [pc, #412]	; (5840 <__aeabi_dadd+0x650>)
    56a4:	45a4      	cmp	ip, r4
    56a6:	d068      	beq.n	577a <__aeabi_dadd+0x58a>
    56a8:	2b38      	cmp	r3, #56	; 0x38
    56aa:	dd00      	ble.n	56ae <__aeabi_dadd+0x4be>
    56ac:	e0a4      	b.n	57f8 <__aeabi_dadd+0x608>
    56ae:	2b1f      	cmp	r3, #31
    56b0:	dd00      	ble.n	56b4 <__aeabi_dadd+0x4c4>
    56b2:	e0ae      	b.n	5812 <__aeabi_dadd+0x622>
    56b4:	2420      	movs	r4, #32
    56b6:	000f      	movs	r7, r1
    56b8:	1ae4      	subs	r4, r4, r3
    56ba:	40a7      	lsls	r7, r4
    56bc:	46b9      	mov	r9, r7
    56be:	002f      	movs	r7, r5
    56c0:	40df      	lsrs	r7, r3
    56c2:	46b8      	mov	r8, r7
    56c4:	46a3      	mov	fp, r4
    56c6:	464f      	mov	r7, r9
    56c8:	4644      	mov	r4, r8
    56ca:	4327      	orrs	r7, r4
    56cc:	465c      	mov	r4, fp
    56ce:	40a5      	lsls	r5, r4
    56d0:	1e6c      	subs	r4, r5, #1
    56d2:	41a5      	sbcs	r5, r4
    56d4:	40d9      	lsrs	r1, r3
    56d6:	433d      	orrs	r5, r7
    56d8:	18ad      	adds	r5, r5, r2
    56da:	4295      	cmp	r5, r2
    56dc:	419b      	sbcs	r3, r3
    56de:	1809      	adds	r1, r1, r0
    56e0:	425b      	negs	r3, r3
    56e2:	1859      	adds	r1, r3, r1
    56e4:	4664      	mov	r4, ip
    56e6:	e66b      	b.n	53c0 <__aeabi_dadd+0x1d0>
    56e8:	000c      	movs	r4, r1
    56ea:	432c      	orrs	r4, r5
    56ec:	d115      	bne.n	571a <__aeabi_dadd+0x52a>
    56ee:	0001      	movs	r1, r0
    56f0:	4311      	orrs	r1, r2
    56f2:	d07b      	beq.n	57ec <__aeabi_dadd+0x5fc>
    56f4:	0001      	movs	r1, r0
    56f6:	0015      	movs	r5, r2
    56f8:	469a      	mov	sl, r3
    56fa:	4c51      	ldr	r4, [pc, #324]	; (5840 <__aeabi_dadd+0x650>)
    56fc:	e5a1      	b.n	5242 <__aeabi_dadd+0x52>
    56fe:	430d      	orrs	r5, r1
    5700:	1e69      	subs	r1, r5, #1
    5702:	418d      	sbcs	r5, r1
    5704:	2100      	movs	r1, #0
    5706:	b2ec      	uxtb	r4, r5
    5708:	e72d      	b.n	5566 <__aeabi_dadd+0x376>
    570a:	4c4d      	ldr	r4, [pc, #308]	; (5840 <__aeabi_dadd+0x650>)
    570c:	45a4      	cmp	ip, r4
    570e:	d034      	beq.n	577a <__aeabi_dadd+0x58a>
    5710:	2480      	movs	r4, #128	; 0x80
    5712:	0424      	lsls	r4, r4, #16
    5714:	425b      	negs	r3, r3
    5716:	4321      	orrs	r1, r4
    5718:	e7c6      	b.n	56a8 <__aeabi_dadd+0x4b8>
    571a:	0004      	movs	r4, r0
    571c:	4314      	orrs	r4, r2
    571e:	d04e      	beq.n	57be <__aeabi_dadd+0x5ce>
    5720:	08ed      	lsrs	r5, r5, #3
    5722:	074c      	lsls	r4, r1, #29
    5724:	432c      	orrs	r4, r5
    5726:	2580      	movs	r5, #128	; 0x80
    5728:	08c9      	lsrs	r1, r1, #3
    572a:	032d      	lsls	r5, r5, #12
    572c:	4229      	tst	r1, r5
    572e:	d008      	beq.n	5742 <__aeabi_dadd+0x552>
    5730:	08c6      	lsrs	r6, r0, #3
    5732:	422e      	tst	r6, r5
    5734:	d105      	bne.n	5742 <__aeabi_dadd+0x552>
    5736:	08d2      	lsrs	r2, r2, #3
    5738:	0741      	lsls	r1, r0, #29
    573a:	4311      	orrs	r1, r2
    573c:	000c      	movs	r4, r1
    573e:	469a      	mov	sl, r3
    5740:	0031      	movs	r1, r6
    5742:	0f62      	lsrs	r2, r4, #29
    5744:	00c9      	lsls	r1, r1, #3
    5746:	00e5      	lsls	r5, r4, #3
    5748:	4311      	orrs	r1, r2
    574a:	4c3d      	ldr	r4, [pc, #244]	; (5840 <__aeabi_dadd+0x650>)
    574c:	e579      	b.n	5242 <__aeabi_dadd+0x52>
    574e:	0006      	movs	r6, r0
    5750:	4316      	orrs	r6, r2
    5752:	d100      	bne.n	5756 <__aeabi_dadd+0x566>
    5754:	e575      	b.n	5242 <__aeabi_dadd+0x52>
    5756:	1aae      	subs	r6, r5, r2
    5758:	46b0      	mov	r8, r6
    575a:	4545      	cmp	r5, r8
    575c:	41bf      	sbcs	r7, r7
    575e:	1a0e      	subs	r6, r1, r0
    5760:	427f      	negs	r7, r7
    5762:	1bf6      	subs	r6, r6, r7
    5764:	0237      	lsls	r7, r6, #8
    5766:	d400      	bmi.n	576a <__aeabi_dadd+0x57a>
    5768:	e5f4      	b.n	5354 <__aeabi_dadd+0x164>
    576a:	1b55      	subs	r5, r2, r5
    576c:	42aa      	cmp	r2, r5
    576e:	41b6      	sbcs	r6, r6
    5770:	1a41      	subs	r1, r0, r1
    5772:	4276      	negs	r6, r6
    5774:	1b89      	subs	r1, r1, r6
    5776:	469a      	mov	sl, r3
    5778:	e563      	b.n	5242 <__aeabi_dadd+0x52>
    577a:	0001      	movs	r1, r0
    577c:	0015      	movs	r5, r2
    577e:	4664      	mov	r4, ip
    5780:	e55f      	b.n	5242 <__aeabi_dadd+0x52>
    5782:	2200      	movs	r2, #0
    5784:	2500      	movs	r5, #0
    5786:	e57b      	b.n	5280 <__aeabi_dadd+0x90>
    5788:	2b00      	cmp	r3, #0
    578a:	d03b      	beq.n	5804 <__aeabi_dadd+0x614>
    578c:	0003      	movs	r3, r0
    578e:	4313      	orrs	r3, r2
    5790:	d015      	beq.n	57be <__aeabi_dadd+0x5ce>
    5792:	08ed      	lsrs	r5, r5, #3
    5794:	074b      	lsls	r3, r1, #29
    5796:	432b      	orrs	r3, r5
    5798:	2580      	movs	r5, #128	; 0x80
    579a:	08c9      	lsrs	r1, r1, #3
    579c:	032d      	lsls	r5, r5, #12
    579e:	4229      	tst	r1, r5
    57a0:	d007      	beq.n	57b2 <__aeabi_dadd+0x5c2>
    57a2:	08c4      	lsrs	r4, r0, #3
    57a4:	422c      	tst	r4, r5
    57a6:	d104      	bne.n	57b2 <__aeabi_dadd+0x5c2>
    57a8:	0741      	lsls	r1, r0, #29
    57aa:	000b      	movs	r3, r1
    57ac:	0021      	movs	r1, r4
    57ae:	08d2      	lsrs	r2, r2, #3
    57b0:	4313      	orrs	r3, r2
    57b2:	00c9      	lsls	r1, r1, #3
    57b4:	0f5a      	lsrs	r2, r3, #29
    57b6:	4311      	orrs	r1, r2
    57b8:	00dd      	lsls	r5, r3, #3
    57ba:	4c21      	ldr	r4, [pc, #132]	; (5840 <__aeabi_dadd+0x650>)
    57bc:	e541      	b.n	5242 <__aeabi_dadd+0x52>
    57be:	4c20      	ldr	r4, [pc, #128]	; (5840 <__aeabi_dadd+0x650>)
    57c0:	e53f      	b.n	5242 <__aeabi_dadd+0x52>
    57c2:	2000      	movs	r0, #0
    57c4:	e754      	b.n	5670 <__aeabi_dadd+0x480>
    57c6:	2600      	movs	r6, #0
    57c8:	2500      	movs	r5, #0
    57ca:	e5d1      	b.n	5370 <__aeabi_dadd+0x180>
    57cc:	0034      	movs	r4, r6
    57ce:	000f      	movs	r7, r1
    57d0:	3c20      	subs	r4, #32
    57d2:	40e7      	lsrs	r7, r4
    57d4:	003c      	movs	r4, r7
    57d6:	2e20      	cmp	r6, #32
    57d8:	d02b      	beq.n	5832 <__aeabi_dadd+0x642>
    57da:	2740      	movs	r7, #64	; 0x40
    57dc:	1bbe      	subs	r6, r7, r6
    57de:	40b1      	lsls	r1, r6
    57e0:	430d      	orrs	r5, r1
    57e2:	1e69      	subs	r1, r5, #1
    57e4:	418d      	sbcs	r5, r1
    57e6:	2100      	movs	r1, #0
    57e8:	432c      	orrs	r4, r5
    57ea:	e6bc      	b.n	5566 <__aeabi_dadd+0x376>
    57ec:	2180      	movs	r1, #128	; 0x80
    57ee:	2600      	movs	r6, #0
    57f0:	0309      	lsls	r1, r1, #12
    57f2:	4c13      	ldr	r4, [pc, #76]	; (5840 <__aeabi_dadd+0x650>)
    57f4:	2500      	movs	r5, #0
    57f6:	e5bb      	b.n	5370 <__aeabi_dadd+0x180>
    57f8:	430d      	orrs	r5, r1
    57fa:	1e69      	subs	r1, r5, #1
    57fc:	418d      	sbcs	r5, r1
    57fe:	2100      	movs	r1, #0
    5800:	b2ed      	uxtb	r5, r5
    5802:	e769      	b.n	56d8 <__aeabi_dadd+0x4e8>
    5804:	0001      	movs	r1, r0
    5806:	0015      	movs	r5, r2
    5808:	4c0d      	ldr	r4, [pc, #52]	; (5840 <__aeabi_dadd+0x650>)
    580a:	e51a      	b.n	5242 <__aeabi_dadd+0x52>
    580c:	0001      	movs	r1, r0
    580e:	0015      	movs	r5, r2
    5810:	e517      	b.n	5242 <__aeabi_dadd+0x52>
    5812:	001c      	movs	r4, r3
    5814:	000f      	movs	r7, r1
    5816:	3c20      	subs	r4, #32
    5818:	40e7      	lsrs	r7, r4
    581a:	003c      	movs	r4, r7
    581c:	2b20      	cmp	r3, #32
    581e:	d00c      	beq.n	583a <__aeabi_dadd+0x64a>
    5820:	2740      	movs	r7, #64	; 0x40
    5822:	1afb      	subs	r3, r7, r3
    5824:	4099      	lsls	r1, r3
    5826:	430d      	orrs	r5, r1
    5828:	1e69      	subs	r1, r5, #1
    582a:	418d      	sbcs	r5, r1
    582c:	2100      	movs	r1, #0
    582e:	4325      	orrs	r5, r4
    5830:	e752      	b.n	56d8 <__aeabi_dadd+0x4e8>
    5832:	2100      	movs	r1, #0
    5834:	e7d4      	b.n	57e0 <__aeabi_dadd+0x5f0>
    5836:	001d      	movs	r5, r3
    5838:	e592      	b.n	5360 <__aeabi_dadd+0x170>
    583a:	2100      	movs	r1, #0
    583c:	e7f3      	b.n	5826 <__aeabi_dadd+0x636>
    583e:	46c0      	nop			; (mov r8, r8)
    5840:	000007ff 	.word	0x000007ff
    5844:	ff7fffff 	.word	0xff7fffff

00005848 <__aeabi_ddiv>:
    5848:	b5f0      	push	{r4, r5, r6, r7, lr}
    584a:	4656      	mov	r6, sl
    584c:	464d      	mov	r5, r9
    584e:	4644      	mov	r4, r8
    5850:	465f      	mov	r7, fp
    5852:	b4f0      	push	{r4, r5, r6, r7}
    5854:	001d      	movs	r5, r3
    5856:	030e      	lsls	r6, r1, #12
    5858:	004c      	lsls	r4, r1, #1
    585a:	0fcb      	lsrs	r3, r1, #31
    585c:	b087      	sub	sp, #28
    585e:	0007      	movs	r7, r0
    5860:	4692      	mov	sl, r2
    5862:	4681      	mov	r9, r0
    5864:	0b36      	lsrs	r6, r6, #12
    5866:	0d64      	lsrs	r4, r4, #21
    5868:	4698      	mov	r8, r3
    586a:	d06a      	beq.n	5942 <__aeabi_ddiv+0xfa>
    586c:	4b6d      	ldr	r3, [pc, #436]	; (5a24 <__aeabi_ddiv+0x1dc>)
    586e:	429c      	cmp	r4, r3
    5870:	d035      	beq.n	58de <__aeabi_ddiv+0x96>
    5872:	2280      	movs	r2, #128	; 0x80
    5874:	0f43      	lsrs	r3, r0, #29
    5876:	0412      	lsls	r2, r2, #16
    5878:	4313      	orrs	r3, r2
    587a:	00f6      	lsls	r6, r6, #3
    587c:	431e      	orrs	r6, r3
    587e:	00c3      	lsls	r3, r0, #3
    5880:	4699      	mov	r9, r3
    5882:	4b69      	ldr	r3, [pc, #420]	; (5a28 <__aeabi_ddiv+0x1e0>)
    5884:	2700      	movs	r7, #0
    5886:	469c      	mov	ip, r3
    5888:	2300      	movs	r3, #0
    588a:	4464      	add	r4, ip
    588c:	9302      	str	r3, [sp, #8]
    588e:	032b      	lsls	r3, r5, #12
    5890:	0068      	lsls	r0, r5, #1
    5892:	0b1b      	lsrs	r3, r3, #12
    5894:	0fed      	lsrs	r5, r5, #31
    5896:	4651      	mov	r1, sl
    5898:	469b      	mov	fp, r3
    589a:	0d40      	lsrs	r0, r0, #21
    589c:	9500      	str	r5, [sp, #0]
    589e:	d100      	bne.n	58a2 <__aeabi_ddiv+0x5a>
    58a0:	e078      	b.n	5994 <__aeabi_ddiv+0x14c>
    58a2:	4b60      	ldr	r3, [pc, #384]	; (5a24 <__aeabi_ddiv+0x1dc>)
    58a4:	4298      	cmp	r0, r3
    58a6:	d06c      	beq.n	5982 <__aeabi_ddiv+0x13a>
    58a8:	465b      	mov	r3, fp
    58aa:	00da      	lsls	r2, r3, #3
    58ac:	0f4b      	lsrs	r3, r1, #29
    58ae:	2180      	movs	r1, #128	; 0x80
    58b0:	0409      	lsls	r1, r1, #16
    58b2:	430b      	orrs	r3, r1
    58b4:	4313      	orrs	r3, r2
    58b6:	469b      	mov	fp, r3
    58b8:	4653      	mov	r3, sl
    58ba:	00d9      	lsls	r1, r3, #3
    58bc:	4b5a      	ldr	r3, [pc, #360]	; (5a28 <__aeabi_ddiv+0x1e0>)
    58be:	469c      	mov	ip, r3
    58c0:	2300      	movs	r3, #0
    58c2:	4460      	add	r0, ip
    58c4:	4642      	mov	r2, r8
    58c6:	1a20      	subs	r0, r4, r0
    58c8:	406a      	eors	r2, r5
    58ca:	4692      	mov	sl, r2
    58cc:	9001      	str	r0, [sp, #4]
    58ce:	431f      	orrs	r7, r3
    58d0:	2f0f      	cmp	r7, #15
    58d2:	d900      	bls.n	58d6 <__aeabi_ddiv+0x8e>
    58d4:	e0b0      	b.n	5a38 <__aeabi_ddiv+0x1f0>
    58d6:	4855      	ldr	r0, [pc, #340]	; (5a2c <__aeabi_ddiv+0x1e4>)
    58d8:	00bf      	lsls	r7, r7, #2
    58da:	59c0      	ldr	r0, [r0, r7]
    58dc:	4687      	mov	pc, r0
    58de:	4337      	orrs	r7, r6
    58e0:	d000      	beq.n	58e4 <__aeabi_ddiv+0x9c>
    58e2:	e088      	b.n	59f6 <__aeabi_ddiv+0x1ae>
    58e4:	2300      	movs	r3, #0
    58e6:	4699      	mov	r9, r3
    58e8:	3302      	adds	r3, #2
    58ea:	2708      	movs	r7, #8
    58ec:	2600      	movs	r6, #0
    58ee:	9302      	str	r3, [sp, #8]
    58f0:	e7cd      	b.n	588e <__aeabi_ddiv+0x46>
    58f2:	4643      	mov	r3, r8
    58f4:	46b3      	mov	fp, r6
    58f6:	4649      	mov	r1, r9
    58f8:	9300      	str	r3, [sp, #0]
    58fa:	9b02      	ldr	r3, [sp, #8]
    58fc:	9a00      	ldr	r2, [sp, #0]
    58fe:	4692      	mov	sl, r2
    5900:	2b02      	cmp	r3, #2
    5902:	d000      	beq.n	5906 <__aeabi_ddiv+0xbe>
    5904:	e1bf      	b.n	5c86 <__aeabi_ddiv+0x43e>
    5906:	2100      	movs	r1, #0
    5908:	4653      	mov	r3, sl
    590a:	2201      	movs	r2, #1
    590c:	2600      	movs	r6, #0
    590e:	4689      	mov	r9, r1
    5910:	401a      	ands	r2, r3
    5912:	4b44      	ldr	r3, [pc, #272]	; (5a24 <__aeabi_ddiv+0x1dc>)
    5914:	2100      	movs	r1, #0
    5916:	0336      	lsls	r6, r6, #12
    5918:	0d0c      	lsrs	r4, r1, #20
    591a:	0524      	lsls	r4, r4, #20
    591c:	0b36      	lsrs	r6, r6, #12
    591e:	4326      	orrs	r6, r4
    5920:	4c43      	ldr	r4, [pc, #268]	; (5a30 <__aeabi_ddiv+0x1e8>)
    5922:	051b      	lsls	r3, r3, #20
    5924:	4026      	ands	r6, r4
    5926:	431e      	orrs	r6, r3
    5928:	0076      	lsls	r6, r6, #1
    592a:	07d2      	lsls	r2, r2, #31
    592c:	0876      	lsrs	r6, r6, #1
    592e:	4316      	orrs	r6, r2
    5930:	4648      	mov	r0, r9
    5932:	0031      	movs	r1, r6
    5934:	b007      	add	sp, #28
    5936:	bc3c      	pop	{r2, r3, r4, r5}
    5938:	4690      	mov	r8, r2
    593a:	4699      	mov	r9, r3
    593c:	46a2      	mov	sl, r4
    593e:	46ab      	mov	fp, r5
    5940:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5942:	0033      	movs	r3, r6
    5944:	4303      	orrs	r3, r0
    5946:	d04f      	beq.n	59e8 <__aeabi_ddiv+0x1a0>
    5948:	2e00      	cmp	r6, #0
    594a:	d100      	bne.n	594e <__aeabi_ddiv+0x106>
    594c:	e1bc      	b.n	5cc8 <__aeabi_ddiv+0x480>
    594e:	0030      	movs	r0, r6
    5950:	f001 fb1c 	bl	6f8c <__clzsi2>
    5954:	0003      	movs	r3, r0
    5956:	3b0b      	subs	r3, #11
    5958:	2b1c      	cmp	r3, #28
    595a:	dd00      	ble.n	595e <__aeabi_ddiv+0x116>
    595c:	e1ad      	b.n	5cba <__aeabi_ddiv+0x472>
    595e:	221d      	movs	r2, #29
    5960:	0001      	movs	r1, r0
    5962:	1ad3      	subs	r3, r2, r3
    5964:	3908      	subs	r1, #8
    5966:	003a      	movs	r2, r7
    5968:	408f      	lsls	r7, r1
    596a:	408e      	lsls	r6, r1
    596c:	40da      	lsrs	r2, r3
    596e:	46b9      	mov	r9, r7
    5970:	4316      	orrs	r6, r2
    5972:	4b30      	ldr	r3, [pc, #192]	; (5a34 <__aeabi_ddiv+0x1ec>)
    5974:	2700      	movs	r7, #0
    5976:	469c      	mov	ip, r3
    5978:	2300      	movs	r3, #0
    597a:	4460      	add	r0, ip
    597c:	4244      	negs	r4, r0
    597e:	9302      	str	r3, [sp, #8]
    5980:	e785      	b.n	588e <__aeabi_ddiv+0x46>
    5982:	4653      	mov	r3, sl
    5984:	465a      	mov	r2, fp
    5986:	4313      	orrs	r3, r2
    5988:	d12c      	bne.n	59e4 <__aeabi_ddiv+0x19c>
    598a:	2300      	movs	r3, #0
    598c:	2100      	movs	r1, #0
    598e:	469b      	mov	fp, r3
    5990:	3302      	adds	r3, #2
    5992:	e797      	b.n	58c4 <__aeabi_ddiv+0x7c>
    5994:	430b      	orrs	r3, r1
    5996:	d020      	beq.n	59da <__aeabi_ddiv+0x192>
    5998:	465b      	mov	r3, fp
    599a:	2b00      	cmp	r3, #0
    599c:	d100      	bne.n	59a0 <__aeabi_ddiv+0x158>
    599e:	e19e      	b.n	5cde <__aeabi_ddiv+0x496>
    59a0:	4658      	mov	r0, fp
    59a2:	f001 faf3 	bl	6f8c <__clzsi2>
    59a6:	0003      	movs	r3, r0
    59a8:	3b0b      	subs	r3, #11
    59aa:	2b1c      	cmp	r3, #28
    59ac:	dd00      	ble.n	59b0 <__aeabi_ddiv+0x168>
    59ae:	e18f      	b.n	5cd0 <__aeabi_ddiv+0x488>
    59b0:	0002      	movs	r2, r0
    59b2:	4659      	mov	r1, fp
    59b4:	3a08      	subs	r2, #8
    59b6:	4091      	lsls	r1, r2
    59b8:	468b      	mov	fp, r1
    59ba:	211d      	movs	r1, #29
    59bc:	1acb      	subs	r3, r1, r3
    59be:	4651      	mov	r1, sl
    59c0:	40d9      	lsrs	r1, r3
    59c2:	000b      	movs	r3, r1
    59c4:	4659      	mov	r1, fp
    59c6:	430b      	orrs	r3, r1
    59c8:	4651      	mov	r1, sl
    59ca:	469b      	mov	fp, r3
    59cc:	4091      	lsls	r1, r2
    59ce:	4b19      	ldr	r3, [pc, #100]	; (5a34 <__aeabi_ddiv+0x1ec>)
    59d0:	469c      	mov	ip, r3
    59d2:	4460      	add	r0, ip
    59d4:	4240      	negs	r0, r0
    59d6:	2300      	movs	r3, #0
    59d8:	e774      	b.n	58c4 <__aeabi_ddiv+0x7c>
    59da:	2300      	movs	r3, #0
    59dc:	2100      	movs	r1, #0
    59de:	469b      	mov	fp, r3
    59e0:	3301      	adds	r3, #1
    59e2:	e76f      	b.n	58c4 <__aeabi_ddiv+0x7c>
    59e4:	2303      	movs	r3, #3
    59e6:	e76d      	b.n	58c4 <__aeabi_ddiv+0x7c>
    59e8:	2300      	movs	r3, #0
    59ea:	4699      	mov	r9, r3
    59ec:	3301      	adds	r3, #1
    59ee:	2704      	movs	r7, #4
    59f0:	2600      	movs	r6, #0
    59f2:	9302      	str	r3, [sp, #8]
    59f4:	e74b      	b.n	588e <__aeabi_ddiv+0x46>
    59f6:	2303      	movs	r3, #3
    59f8:	270c      	movs	r7, #12
    59fa:	9302      	str	r3, [sp, #8]
    59fc:	e747      	b.n	588e <__aeabi_ddiv+0x46>
    59fe:	2201      	movs	r2, #1
    5a00:	1ad5      	subs	r5, r2, r3
    5a02:	2d38      	cmp	r5, #56	; 0x38
    5a04:	dc00      	bgt.n	5a08 <__aeabi_ddiv+0x1c0>
    5a06:	e1b0      	b.n	5d6a <__aeabi_ddiv+0x522>
    5a08:	4653      	mov	r3, sl
    5a0a:	401a      	ands	r2, r3
    5a0c:	2100      	movs	r1, #0
    5a0e:	2300      	movs	r3, #0
    5a10:	2600      	movs	r6, #0
    5a12:	4689      	mov	r9, r1
    5a14:	e77e      	b.n	5914 <__aeabi_ddiv+0xcc>
    5a16:	2300      	movs	r3, #0
    5a18:	2680      	movs	r6, #128	; 0x80
    5a1a:	4699      	mov	r9, r3
    5a1c:	2200      	movs	r2, #0
    5a1e:	0336      	lsls	r6, r6, #12
    5a20:	4b00      	ldr	r3, [pc, #0]	; (5a24 <__aeabi_ddiv+0x1dc>)
    5a22:	e777      	b.n	5914 <__aeabi_ddiv+0xcc>
    5a24:	000007ff 	.word	0x000007ff
    5a28:	fffffc01 	.word	0xfffffc01
    5a2c:	00007098 	.word	0x00007098
    5a30:	800fffff 	.word	0x800fffff
    5a34:	000003f3 	.word	0x000003f3
    5a38:	455e      	cmp	r6, fp
    5a3a:	d900      	bls.n	5a3e <__aeabi_ddiv+0x1f6>
    5a3c:	e172      	b.n	5d24 <__aeabi_ddiv+0x4dc>
    5a3e:	d100      	bne.n	5a42 <__aeabi_ddiv+0x1fa>
    5a40:	e16d      	b.n	5d1e <__aeabi_ddiv+0x4d6>
    5a42:	9b01      	ldr	r3, [sp, #4]
    5a44:	464d      	mov	r5, r9
    5a46:	3b01      	subs	r3, #1
    5a48:	9301      	str	r3, [sp, #4]
    5a4a:	2300      	movs	r3, #0
    5a4c:	0034      	movs	r4, r6
    5a4e:	9302      	str	r3, [sp, #8]
    5a50:	465b      	mov	r3, fp
    5a52:	021e      	lsls	r6, r3, #8
    5a54:	0e0b      	lsrs	r3, r1, #24
    5a56:	431e      	orrs	r6, r3
    5a58:	020b      	lsls	r3, r1, #8
    5a5a:	9303      	str	r3, [sp, #12]
    5a5c:	0c33      	lsrs	r3, r6, #16
    5a5e:	4699      	mov	r9, r3
    5a60:	0433      	lsls	r3, r6, #16
    5a62:	0c1b      	lsrs	r3, r3, #16
    5a64:	4649      	mov	r1, r9
    5a66:	0020      	movs	r0, r4
    5a68:	9300      	str	r3, [sp, #0]
    5a6a:	f7ff f88d 	bl	4b88 <__aeabi_uidiv>
    5a6e:	9b00      	ldr	r3, [sp, #0]
    5a70:	0037      	movs	r7, r6
    5a72:	4343      	muls	r3, r0
    5a74:	0006      	movs	r6, r0
    5a76:	4649      	mov	r1, r9
    5a78:	0020      	movs	r0, r4
    5a7a:	4698      	mov	r8, r3
    5a7c:	f7ff f90a 	bl	4c94 <__aeabi_uidivmod>
    5a80:	0c2c      	lsrs	r4, r5, #16
    5a82:	0409      	lsls	r1, r1, #16
    5a84:	430c      	orrs	r4, r1
    5a86:	45a0      	cmp	r8, r4
    5a88:	d909      	bls.n	5a9e <__aeabi_ddiv+0x256>
    5a8a:	19e4      	adds	r4, r4, r7
    5a8c:	1e73      	subs	r3, r6, #1
    5a8e:	42a7      	cmp	r7, r4
    5a90:	d900      	bls.n	5a94 <__aeabi_ddiv+0x24c>
    5a92:	e15c      	b.n	5d4e <__aeabi_ddiv+0x506>
    5a94:	45a0      	cmp	r8, r4
    5a96:	d800      	bhi.n	5a9a <__aeabi_ddiv+0x252>
    5a98:	e159      	b.n	5d4e <__aeabi_ddiv+0x506>
    5a9a:	3e02      	subs	r6, #2
    5a9c:	19e4      	adds	r4, r4, r7
    5a9e:	4643      	mov	r3, r8
    5aa0:	1ae4      	subs	r4, r4, r3
    5aa2:	4649      	mov	r1, r9
    5aa4:	0020      	movs	r0, r4
    5aa6:	f7ff f86f 	bl	4b88 <__aeabi_uidiv>
    5aaa:	0003      	movs	r3, r0
    5aac:	9a00      	ldr	r2, [sp, #0]
    5aae:	4680      	mov	r8, r0
    5ab0:	4353      	muls	r3, r2
    5ab2:	4649      	mov	r1, r9
    5ab4:	0020      	movs	r0, r4
    5ab6:	469b      	mov	fp, r3
    5ab8:	f7ff f8ec 	bl	4c94 <__aeabi_uidivmod>
    5abc:	042a      	lsls	r2, r5, #16
    5abe:	0409      	lsls	r1, r1, #16
    5ac0:	0c12      	lsrs	r2, r2, #16
    5ac2:	430a      	orrs	r2, r1
    5ac4:	4593      	cmp	fp, r2
    5ac6:	d90d      	bls.n	5ae4 <__aeabi_ddiv+0x29c>
    5ac8:	4643      	mov	r3, r8
    5aca:	19d2      	adds	r2, r2, r7
    5acc:	3b01      	subs	r3, #1
    5ace:	4297      	cmp	r7, r2
    5ad0:	d900      	bls.n	5ad4 <__aeabi_ddiv+0x28c>
    5ad2:	e13a      	b.n	5d4a <__aeabi_ddiv+0x502>
    5ad4:	4593      	cmp	fp, r2
    5ad6:	d800      	bhi.n	5ada <__aeabi_ddiv+0x292>
    5ad8:	e137      	b.n	5d4a <__aeabi_ddiv+0x502>
    5ada:	2302      	movs	r3, #2
    5adc:	425b      	negs	r3, r3
    5ade:	469c      	mov	ip, r3
    5ae0:	19d2      	adds	r2, r2, r7
    5ae2:	44e0      	add	r8, ip
    5ae4:	465b      	mov	r3, fp
    5ae6:	1ad2      	subs	r2, r2, r3
    5ae8:	4643      	mov	r3, r8
    5aea:	0436      	lsls	r6, r6, #16
    5aec:	4333      	orrs	r3, r6
    5aee:	469b      	mov	fp, r3
    5af0:	9903      	ldr	r1, [sp, #12]
    5af2:	0c18      	lsrs	r0, r3, #16
    5af4:	0c0b      	lsrs	r3, r1, #16
    5af6:	001d      	movs	r5, r3
    5af8:	9305      	str	r3, [sp, #20]
    5afa:	0409      	lsls	r1, r1, #16
    5afc:	465b      	mov	r3, fp
    5afe:	0c09      	lsrs	r1, r1, #16
    5b00:	000c      	movs	r4, r1
    5b02:	041b      	lsls	r3, r3, #16
    5b04:	0c1b      	lsrs	r3, r3, #16
    5b06:	4344      	muls	r4, r0
    5b08:	9104      	str	r1, [sp, #16]
    5b0a:	4359      	muls	r1, r3
    5b0c:	436b      	muls	r3, r5
    5b0e:	4368      	muls	r0, r5
    5b10:	191b      	adds	r3, r3, r4
    5b12:	0c0d      	lsrs	r5, r1, #16
    5b14:	18eb      	adds	r3, r5, r3
    5b16:	429c      	cmp	r4, r3
    5b18:	d903      	bls.n	5b22 <__aeabi_ddiv+0x2da>
    5b1a:	2480      	movs	r4, #128	; 0x80
    5b1c:	0264      	lsls	r4, r4, #9
    5b1e:	46a4      	mov	ip, r4
    5b20:	4460      	add	r0, ip
    5b22:	0c1c      	lsrs	r4, r3, #16
    5b24:	0409      	lsls	r1, r1, #16
    5b26:	041b      	lsls	r3, r3, #16
    5b28:	0c09      	lsrs	r1, r1, #16
    5b2a:	1820      	adds	r0, r4, r0
    5b2c:	185d      	adds	r5, r3, r1
    5b2e:	4282      	cmp	r2, r0
    5b30:	d200      	bcs.n	5b34 <__aeabi_ddiv+0x2ec>
    5b32:	e0de      	b.n	5cf2 <__aeabi_ddiv+0x4aa>
    5b34:	d100      	bne.n	5b38 <__aeabi_ddiv+0x2f0>
    5b36:	e0d7      	b.n	5ce8 <__aeabi_ddiv+0x4a0>
    5b38:	1a16      	subs	r6, r2, r0
    5b3a:	9b02      	ldr	r3, [sp, #8]
    5b3c:	469c      	mov	ip, r3
    5b3e:	1b5d      	subs	r5, r3, r5
    5b40:	45ac      	cmp	ip, r5
    5b42:	419b      	sbcs	r3, r3
    5b44:	425b      	negs	r3, r3
    5b46:	1af6      	subs	r6, r6, r3
    5b48:	42b7      	cmp	r7, r6
    5b4a:	d100      	bne.n	5b4e <__aeabi_ddiv+0x306>
    5b4c:	e106      	b.n	5d5c <__aeabi_ddiv+0x514>
    5b4e:	4649      	mov	r1, r9
    5b50:	0030      	movs	r0, r6
    5b52:	f7ff f819 	bl	4b88 <__aeabi_uidiv>
    5b56:	9b00      	ldr	r3, [sp, #0]
    5b58:	0004      	movs	r4, r0
    5b5a:	4343      	muls	r3, r0
    5b5c:	4649      	mov	r1, r9
    5b5e:	0030      	movs	r0, r6
    5b60:	4698      	mov	r8, r3
    5b62:	f7ff f897 	bl	4c94 <__aeabi_uidivmod>
    5b66:	0c2e      	lsrs	r6, r5, #16
    5b68:	0409      	lsls	r1, r1, #16
    5b6a:	430e      	orrs	r6, r1
    5b6c:	45b0      	cmp	r8, r6
    5b6e:	d909      	bls.n	5b84 <__aeabi_ddiv+0x33c>
    5b70:	19f6      	adds	r6, r6, r7
    5b72:	1e63      	subs	r3, r4, #1
    5b74:	42b7      	cmp	r7, r6
    5b76:	d900      	bls.n	5b7a <__aeabi_ddiv+0x332>
    5b78:	e0f3      	b.n	5d62 <__aeabi_ddiv+0x51a>
    5b7a:	45b0      	cmp	r8, r6
    5b7c:	d800      	bhi.n	5b80 <__aeabi_ddiv+0x338>
    5b7e:	e0f0      	b.n	5d62 <__aeabi_ddiv+0x51a>
    5b80:	3c02      	subs	r4, #2
    5b82:	19f6      	adds	r6, r6, r7
    5b84:	4643      	mov	r3, r8
    5b86:	1af3      	subs	r3, r6, r3
    5b88:	4649      	mov	r1, r9
    5b8a:	0018      	movs	r0, r3
    5b8c:	9302      	str	r3, [sp, #8]
    5b8e:	f7fe fffb 	bl	4b88 <__aeabi_uidiv>
    5b92:	9b00      	ldr	r3, [sp, #0]
    5b94:	0006      	movs	r6, r0
    5b96:	4343      	muls	r3, r0
    5b98:	4649      	mov	r1, r9
    5b9a:	9802      	ldr	r0, [sp, #8]
    5b9c:	4698      	mov	r8, r3
    5b9e:	f7ff f879 	bl	4c94 <__aeabi_uidivmod>
    5ba2:	042d      	lsls	r5, r5, #16
    5ba4:	0409      	lsls	r1, r1, #16
    5ba6:	0c2d      	lsrs	r5, r5, #16
    5ba8:	430d      	orrs	r5, r1
    5baa:	45a8      	cmp	r8, r5
    5bac:	d909      	bls.n	5bc2 <__aeabi_ddiv+0x37a>
    5bae:	19ed      	adds	r5, r5, r7
    5bb0:	1e73      	subs	r3, r6, #1
    5bb2:	42af      	cmp	r7, r5
    5bb4:	d900      	bls.n	5bb8 <__aeabi_ddiv+0x370>
    5bb6:	e0d6      	b.n	5d66 <__aeabi_ddiv+0x51e>
    5bb8:	45a8      	cmp	r8, r5
    5bba:	d800      	bhi.n	5bbe <__aeabi_ddiv+0x376>
    5bbc:	e0d3      	b.n	5d66 <__aeabi_ddiv+0x51e>
    5bbe:	3e02      	subs	r6, #2
    5bc0:	19ed      	adds	r5, r5, r7
    5bc2:	0424      	lsls	r4, r4, #16
    5bc4:	0021      	movs	r1, r4
    5bc6:	4643      	mov	r3, r8
    5bc8:	4331      	orrs	r1, r6
    5bca:	9e04      	ldr	r6, [sp, #16]
    5bcc:	9a05      	ldr	r2, [sp, #20]
    5bce:	0030      	movs	r0, r6
    5bd0:	1aed      	subs	r5, r5, r3
    5bd2:	040b      	lsls	r3, r1, #16
    5bd4:	0c0c      	lsrs	r4, r1, #16
    5bd6:	0c1b      	lsrs	r3, r3, #16
    5bd8:	4358      	muls	r0, r3
    5bda:	4366      	muls	r6, r4
    5bdc:	4353      	muls	r3, r2
    5bde:	4354      	muls	r4, r2
    5be0:	199a      	adds	r2, r3, r6
    5be2:	0c03      	lsrs	r3, r0, #16
    5be4:	189b      	adds	r3, r3, r2
    5be6:	429e      	cmp	r6, r3
    5be8:	d903      	bls.n	5bf2 <__aeabi_ddiv+0x3aa>
    5bea:	2280      	movs	r2, #128	; 0x80
    5bec:	0252      	lsls	r2, r2, #9
    5bee:	4694      	mov	ip, r2
    5bf0:	4464      	add	r4, ip
    5bf2:	0c1a      	lsrs	r2, r3, #16
    5bf4:	0400      	lsls	r0, r0, #16
    5bf6:	041b      	lsls	r3, r3, #16
    5bf8:	0c00      	lsrs	r0, r0, #16
    5bfa:	1914      	adds	r4, r2, r4
    5bfc:	181b      	adds	r3, r3, r0
    5bfe:	42a5      	cmp	r5, r4
    5c00:	d350      	bcc.n	5ca4 <__aeabi_ddiv+0x45c>
    5c02:	d04d      	beq.n	5ca0 <__aeabi_ddiv+0x458>
    5c04:	2301      	movs	r3, #1
    5c06:	4319      	orrs	r1, r3
    5c08:	4a96      	ldr	r2, [pc, #600]	; (5e64 <__aeabi_ddiv+0x61c>)
    5c0a:	9b01      	ldr	r3, [sp, #4]
    5c0c:	4694      	mov	ip, r2
    5c0e:	4463      	add	r3, ip
    5c10:	2b00      	cmp	r3, #0
    5c12:	dc00      	bgt.n	5c16 <__aeabi_ddiv+0x3ce>
    5c14:	e6f3      	b.n	59fe <__aeabi_ddiv+0x1b6>
    5c16:	074a      	lsls	r2, r1, #29
    5c18:	d009      	beq.n	5c2e <__aeabi_ddiv+0x3e6>
    5c1a:	220f      	movs	r2, #15
    5c1c:	400a      	ands	r2, r1
    5c1e:	2a04      	cmp	r2, #4
    5c20:	d005      	beq.n	5c2e <__aeabi_ddiv+0x3e6>
    5c22:	1d0a      	adds	r2, r1, #4
    5c24:	428a      	cmp	r2, r1
    5c26:	4189      	sbcs	r1, r1
    5c28:	4249      	negs	r1, r1
    5c2a:	448b      	add	fp, r1
    5c2c:	0011      	movs	r1, r2
    5c2e:	465a      	mov	r2, fp
    5c30:	01d2      	lsls	r2, r2, #7
    5c32:	d508      	bpl.n	5c46 <__aeabi_ddiv+0x3fe>
    5c34:	465a      	mov	r2, fp
    5c36:	4b8c      	ldr	r3, [pc, #560]	; (5e68 <__aeabi_ddiv+0x620>)
    5c38:	401a      	ands	r2, r3
    5c3a:	4693      	mov	fp, r2
    5c3c:	2280      	movs	r2, #128	; 0x80
    5c3e:	00d2      	lsls	r2, r2, #3
    5c40:	4694      	mov	ip, r2
    5c42:	9b01      	ldr	r3, [sp, #4]
    5c44:	4463      	add	r3, ip
    5c46:	4a89      	ldr	r2, [pc, #548]	; (5e6c <__aeabi_ddiv+0x624>)
    5c48:	4293      	cmp	r3, r2
    5c4a:	dd00      	ble.n	5c4e <__aeabi_ddiv+0x406>
    5c4c:	e65b      	b.n	5906 <__aeabi_ddiv+0xbe>
    5c4e:	465a      	mov	r2, fp
    5c50:	08c9      	lsrs	r1, r1, #3
    5c52:	0750      	lsls	r0, r2, #29
    5c54:	4308      	orrs	r0, r1
    5c56:	0256      	lsls	r6, r2, #9
    5c58:	4651      	mov	r1, sl
    5c5a:	2201      	movs	r2, #1
    5c5c:	055b      	lsls	r3, r3, #21
    5c5e:	4681      	mov	r9, r0
    5c60:	0b36      	lsrs	r6, r6, #12
    5c62:	0d5b      	lsrs	r3, r3, #21
    5c64:	400a      	ands	r2, r1
    5c66:	e655      	b.n	5914 <__aeabi_ddiv+0xcc>
    5c68:	2380      	movs	r3, #128	; 0x80
    5c6a:	031b      	lsls	r3, r3, #12
    5c6c:	421e      	tst	r6, r3
    5c6e:	d011      	beq.n	5c94 <__aeabi_ddiv+0x44c>
    5c70:	465a      	mov	r2, fp
    5c72:	421a      	tst	r2, r3
    5c74:	d10e      	bne.n	5c94 <__aeabi_ddiv+0x44c>
    5c76:	465e      	mov	r6, fp
    5c78:	431e      	orrs	r6, r3
    5c7a:	0336      	lsls	r6, r6, #12
    5c7c:	0b36      	lsrs	r6, r6, #12
    5c7e:	002a      	movs	r2, r5
    5c80:	4689      	mov	r9, r1
    5c82:	4b7b      	ldr	r3, [pc, #492]	; (5e70 <__aeabi_ddiv+0x628>)
    5c84:	e646      	b.n	5914 <__aeabi_ddiv+0xcc>
    5c86:	2b03      	cmp	r3, #3
    5c88:	d100      	bne.n	5c8c <__aeabi_ddiv+0x444>
    5c8a:	e0e1      	b.n	5e50 <__aeabi_ddiv+0x608>
    5c8c:	2b01      	cmp	r3, #1
    5c8e:	d1bb      	bne.n	5c08 <__aeabi_ddiv+0x3c0>
    5c90:	401a      	ands	r2, r3
    5c92:	e6bb      	b.n	5a0c <__aeabi_ddiv+0x1c4>
    5c94:	431e      	orrs	r6, r3
    5c96:	0336      	lsls	r6, r6, #12
    5c98:	0b36      	lsrs	r6, r6, #12
    5c9a:	4642      	mov	r2, r8
    5c9c:	4b74      	ldr	r3, [pc, #464]	; (5e70 <__aeabi_ddiv+0x628>)
    5c9e:	e639      	b.n	5914 <__aeabi_ddiv+0xcc>
    5ca0:	2b00      	cmp	r3, #0
    5ca2:	d0b1      	beq.n	5c08 <__aeabi_ddiv+0x3c0>
    5ca4:	197d      	adds	r5, r7, r5
    5ca6:	1e4a      	subs	r2, r1, #1
    5ca8:	42af      	cmp	r7, r5
    5caa:	d952      	bls.n	5d52 <__aeabi_ddiv+0x50a>
    5cac:	0011      	movs	r1, r2
    5cae:	42a5      	cmp	r5, r4
    5cb0:	d1a8      	bne.n	5c04 <__aeabi_ddiv+0x3bc>
    5cb2:	9a03      	ldr	r2, [sp, #12]
    5cb4:	429a      	cmp	r2, r3
    5cb6:	d1a5      	bne.n	5c04 <__aeabi_ddiv+0x3bc>
    5cb8:	e7a6      	b.n	5c08 <__aeabi_ddiv+0x3c0>
    5cba:	0003      	movs	r3, r0
    5cbc:	003e      	movs	r6, r7
    5cbe:	3b28      	subs	r3, #40	; 0x28
    5cc0:	409e      	lsls	r6, r3
    5cc2:	2300      	movs	r3, #0
    5cc4:	4699      	mov	r9, r3
    5cc6:	e654      	b.n	5972 <__aeabi_ddiv+0x12a>
    5cc8:	f001 f960 	bl	6f8c <__clzsi2>
    5ccc:	3020      	adds	r0, #32
    5cce:	e641      	b.n	5954 <__aeabi_ddiv+0x10c>
    5cd0:	0003      	movs	r3, r0
    5cd2:	4652      	mov	r2, sl
    5cd4:	3b28      	subs	r3, #40	; 0x28
    5cd6:	409a      	lsls	r2, r3
    5cd8:	2100      	movs	r1, #0
    5cda:	4693      	mov	fp, r2
    5cdc:	e677      	b.n	59ce <__aeabi_ddiv+0x186>
    5cde:	4650      	mov	r0, sl
    5ce0:	f001 f954 	bl	6f8c <__clzsi2>
    5ce4:	3020      	adds	r0, #32
    5ce6:	e65e      	b.n	59a6 <__aeabi_ddiv+0x15e>
    5ce8:	9b02      	ldr	r3, [sp, #8]
    5cea:	2600      	movs	r6, #0
    5cec:	42ab      	cmp	r3, r5
    5cee:	d300      	bcc.n	5cf2 <__aeabi_ddiv+0x4aa>
    5cf0:	e723      	b.n	5b3a <__aeabi_ddiv+0x2f2>
    5cf2:	9e03      	ldr	r6, [sp, #12]
    5cf4:	9902      	ldr	r1, [sp, #8]
    5cf6:	46b4      	mov	ip, r6
    5cf8:	4461      	add	r1, ip
    5cfa:	4688      	mov	r8, r1
    5cfc:	45b0      	cmp	r8, r6
    5cfe:	41b6      	sbcs	r6, r6
    5d00:	465b      	mov	r3, fp
    5d02:	4276      	negs	r6, r6
    5d04:	19f6      	adds	r6, r6, r7
    5d06:	18b2      	adds	r2, r6, r2
    5d08:	3b01      	subs	r3, #1
    5d0a:	9102      	str	r1, [sp, #8]
    5d0c:	4297      	cmp	r7, r2
    5d0e:	d213      	bcs.n	5d38 <__aeabi_ddiv+0x4f0>
    5d10:	4290      	cmp	r0, r2
    5d12:	d84f      	bhi.n	5db4 <__aeabi_ddiv+0x56c>
    5d14:	d100      	bne.n	5d18 <__aeabi_ddiv+0x4d0>
    5d16:	e08e      	b.n	5e36 <__aeabi_ddiv+0x5ee>
    5d18:	1a16      	subs	r6, r2, r0
    5d1a:	469b      	mov	fp, r3
    5d1c:	e70d      	b.n	5b3a <__aeabi_ddiv+0x2f2>
    5d1e:	4589      	cmp	r9, r1
    5d20:	d200      	bcs.n	5d24 <__aeabi_ddiv+0x4dc>
    5d22:	e68e      	b.n	5a42 <__aeabi_ddiv+0x1fa>
    5d24:	0874      	lsrs	r4, r6, #1
    5d26:	464b      	mov	r3, r9
    5d28:	07f6      	lsls	r6, r6, #31
    5d2a:	0035      	movs	r5, r6
    5d2c:	085b      	lsrs	r3, r3, #1
    5d2e:	431d      	orrs	r5, r3
    5d30:	464b      	mov	r3, r9
    5d32:	07db      	lsls	r3, r3, #31
    5d34:	9302      	str	r3, [sp, #8]
    5d36:	e68b      	b.n	5a50 <__aeabi_ddiv+0x208>
    5d38:	4297      	cmp	r7, r2
    5d3a:	d1ed      	bne.n	5d18 <__aeabi_ddiv+0x4d0>
    5d3c:	9903      	ldr	r1, [sp, #12]
    5d3e:	9c02      	ldr	r4, [sp, #8]
    5d40:	42a1      	cmp	r1, r4
    5d42:	d9e5      	bls.n	5d10 <__aeabi_ddiv+0x4c8>
    5d44:	1a3e      	subs	r6, r7, r0
    5d46:	469b      	mov	fp, r3
    5d48:	e6f7      	b.n	5b3a <__aeabi_ddiv+0x2f2>
    5d4a:	4698      	mov	r8, r3
    5d4c:	e6ca      	b.n	5ae4 <__aeabi_ddiv+0x29c>
    5d4e:	001e      	movs	r6, r3
    5d50:	e6a5      	b.n	5a9e <__aeabi_ddiv+0x256>
    5d52:	42ac      	cmp	r4, r5
    5d54:	d83e      	bhi.n	5dd4 <__aeabi_ddiv+0x58c>
    5d56:	d074      	beq.n	5e42 <__aeabi_ddiv+0x5fa>
    5d58:	0011      	movs	r1, r2
    5d5a:	e753      	b.n	5c04 <__aeabi_ddiv+0x3bc>
    5d5c:	2101      	movs	r1, #1
    5d5e:	4249      	negs	r1, r1
    5d60:	e752      	b.n	5c08 <__aeabi_ddiv+0x3c0>
    5d62:	001c      	movs	r4, r3
    5d64:	e70e      	b.n	5b84 <__aeabi_ddiv+0x33c>
    5d66:	001e      	movs	r6, r3
    5d68:	e72b      	b.n	5bc2 <__aeabi_ddiv+0x37a>
    5d6a:	2d1f      	cmp	r5, #31
    5d6c:	dc3c      	bgt.n	5de8 <__aeabi_ddiv+0x5a0>
    5d6e:	2320      	movs	r3, #32
    5d70:	000a      	movs	r2, r1
    5d72:	4658      	mov	r0, fp
    5d74:	1b5b      	subs	r3, r3, r5
    5d76:	4098      	lsls	r0, r3
    5d78:	40ea      	lsrs	r2, r5
    5d7a:	4099      	lsls	r1, r3
    5d7c:	4302      	orrs	r2, r0
    5d7e:	1e48      	subs	r0, r1, #1
    5d80:	4181      	sbcs	r1, r0
    5d82:	465e      	mov	r6, fp
    5d84:	4311      	orrs	r1, r2
    5d86:	40ee      	lsrs	r6, r5
    5d88:	074b      	lsls	r3, r1, #29
    5d8a:	d009      	beq.n	5da0 <__aeabi_ddiv+0x558>
    5d8c:	230f      	movs	r3, #15
    5d8e:	400b      	ands	r3, r1
    5d90:	2b04      	cmp	r3, #4
    5d92:	d005      	beq.n	5da0 <__aeabi_ddiv+0x558>
    5d94:	000b      	movs	r3, r1
    5d96:	1d19      	adds	r1, r3, #4
    5d98:	4299      	cmp	r1, r3
    5d9a:	419b      	sbcs	r3, r3
    5d9c:	425b      	negs	r3, r3
    5d9e:	18f6      	adds	r6, r6, r3
    5da0:	0233      	lsls	r3, r6, #8
    5da2:	d53c      	bpl.n	5e1e <__aeabi_ddiv+0x5d6>
    5da4:	4653      	mov	r3, sl
    5da6:	2201      	movs	r2, #1
    5da8:	2100      	movs	r1, #0
    5daa:	401a      	ands	r2, r3
    5dac:	2600      	movs	r6, #0
    5dae:	2301      	movs	r3, #1
    5db0:	4689      	mov	r9, r1
    5db2:	e5af      	b.n	5914 <__aeabi_ddiv+0xcc>
    5db4:	2302      	movs	r3, #2
    5db6:	425b      	negs	r3, r3
    5db8:	469c      	mov	ip, r3
    5dba:	9c03      	ldr	r4, [sp, #12]
    5dbc:	44e3      	add	fp, ip
    5dbe:	46a4      	mov	ip, r4
    5dc0:	9b02      	ldr	r3, [sp, #8]
    5dc2:	4463      	add	r3, ip
    5dc4:	4698      	mov	r8, r3
    5dc6:	45a0      	cmp	r8, r4
    5dc8:	41b6      	sbcs	r6, r6
    5dca:	4276      	negs	r6, r6
    5dcc:	19f6      	adds	r6, r6, r7
    5dce:	9302      	str	r3, [sp, #8]
    5dd0:	18b2      	adds	r2, r6, r2
    5dd2:	e6b1      	b.n	5b38 <__aeabi_ddiv+0x2f0>
    5dd4:	9803      	ldr	r0, [sp, #12]
    5dd6:	1e8a      	subs	r2, r1, #2
    5dd8:	0041      	lsls	r1, r0, #1
    5dda:	4281      	cmp	r1, r0
    5ddc:	41b6      	sbcs	r6, r6
    5dde:	4276      	negs	r6, r6
    5de0:	19f6      	adds	r6, r6, r7
    5de2:	19ad      	adds	r5, r5, r6
    5de4:	9103      	str	r1, [sp, #12]
    5de6:	e761      	b.n	5cac <__aeabi_ddiv+0x464>
    5de8:	221f      	movs	r2, #31
    5dea:	4252      	negs	r2, r2
    5dec:	1ad3      	subs	r3, r2, r3
    5dee:	465a      	mov	r2, fp
    5df0:	40da      	lsrs	r2, r3
    5df2:	0013      	movs	r3, r2
    5df4:	2d20      	cmp	r5, #32
    5df6:	d029      	beq.n	5e4c <__aeabi_ddiv+0x604>
    5df8:	2240      	movs	r2, #64	; 0x40
    5dfa:	4658      	mov	r0, fp
    5dfc:	1b55      	subs	r5, r2, r5
    5dfe:	40a8      	lsls	r0, r5
    5e00:	4301      	orrs	r1, r0
    5e02:	1e48      	subs	r0, r1, #1
    5e04:	4181      	sbcs	r1, r0
    5e06:	2007      	movs	r0, #7
    5e08:	430b      	orrs	r3, r1
    5e0a:	4018      	ands	r0, r3
    5e0c:	2600      	movs	r6, #0
    5e0e:	2800      	cmp	r0, #0
    5e10:	d009      	beq.n	5e26 <__aeabi_ddiv+0x5de>
    5e12:	220f      	movs	r2, #15
    5e14:	2600      	movs	r6, #0
    5e16:	401a      	ands	r2, r3
    5e18:	0019      	movs	r1, r3
    5e1a:	2a04      	cmp	r2, #4
    5e1c:	d1bb      	bne.n	5d96 <__aeabi_ddiv+0x54e>
    5e1e:	000b      	movs	r3, r1
    5e20:	0770      	lsls	r0, r6, #29
    5e22:	0276      	lsls	r6, r6, #9
    5e24:	0b36      	lsrs	r6, r6, #12
    5e26:	08db      	lsrs	r3, r3, #3
    5e28:	4303      	orrs	r3, r0
    5e2a:	4699      	mov	r9, r3
    5e2c:	2201      	movs	r2, #1
    5e2e:	4653      	mov	r3, sl
    5e30:	401a      	ands	r2, r3
    5e32:	2300      	movs	r3, #0
    5e34:	e56e      	b.n	5914 <__aeabi_ddiv+0xcc>
    5e36:	9902      	ldr	r1, [sp, #8]
    5e38:	428d      	cmp	r5, r1
    5e3a:	d8bb      	bhi.n	5db4 <__aeabi_ddiv+0x56c>
    5e3c:	469b      	mov	fp, r3
    5e3e:	2600      	movs	r6, #0
    5e40:	e67b      	b.n	5b3a <__aeabi_ddiv+0x2f2>
    5e42:	9803      	ldr	r0, [sp, #12]
    5e44:	4298      	cmp	r0, r3
    5e46:	d3c5      	bcc.n	5dd4 <__aeabi_ddiv+0x58c>
    5e48:	0011      	movs	r1, r2
    5e4a:	e732      	b.n	5cb2 <__aeabi_ddiv+0x46a>
    5e4c:	2000      	movs	r0, #0
    5e4e:	e7d7      	b.n	5e00 <__aeabi_ddiv+0x5b8>
    5e50:	2680      	movs	r6, #128	; 0x80
    5e52:	465b      	mov	r3, fp
    5e54:	0336      	lsls	r6, r6, #12
    5e56:	431e      	orrs	r6, r3
    5e58:	0336      	lsls	r6, r6, #12
    5e5a:	0b36      	lsrs	r6, r6, #12
    5e5c:	9a00      	ldr	r2, [sp, #0]
    5e5e:	4689      	mov	r9, r1
    5e60:	4b03      	ldr	r3, [pc, #12]	; (5e70 <__aeabi_ddiv+0x628>)
    5e62:	e557      	b.n	5914 <__aeabi_ddiv+0xcc>
    5e64:	000003ff 	.word	0x000003ff
    5e68:	feffffff 	.word	0xfeffffff
    5e6c:	000007fe 	.word	0x000007fe
    5e70:	000007ff 	.word	0x000007ff

00005e74 <__eqdf2>:
    5e74:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e76:	465f      	mov	r7, fp
    5e78:	4656      	mov	r6, sl
    5e7a:	464d      	mov	r5, r9
    5e7c:	4644      	mov	r4, r8
    5e7e:	b4f0      	push	{r4, r5, r6, r7}
    5e80:	031f      	lsls	r7, r3, #12
    5e82:	005c      	lsls	r4, r3, #1
    5e84:	0fdb      	lsrs	r3, r3, #31
    5e86:	469a      	mov	sl, r3
    5e88:	4b19      	ldr	r3, [pc, #100]	; (5ef0 <__eqdf2+0x7c>)
    5e8a:	030e      	lsls	r6, r1, #12
    5e8c:	004d      	lsls	r5, r1, #1
    5e8e:	0fc9      	lsrs	r1, r1, #31
    5e90:	4680      	mov	r8, r0
    5e92:	0b36      	lsrs	r6, r6, #12
    5e94:	0d6d      	lsrs	r5, r5, #21
    5e96:	468b      	mov	fp, r1
    5e98:	4691      	mov	r9, r2
    5e9a:	0b3f      	lsrs	r7, r7, #12
    5e9c:	0d64      	lsrs	r4, r4, #21
    5e9e:	429d      	cmp	r5, r3
    5ea0:	d019      	beq.n	5ed6 <__eqdf2+0x62>
    5ea2:	4b13      	ldr	r3, [pc, #76]	; (5ef0 <__eqdf2+0x7c>)
    5ea4:	429c      	cmp	r4, r3
    5ea6:	d01b      	beq.n	5ee0 <__eqdf2+0x6c>
    5ea8:	2301      	movs	r3, #1
    5eaa:	42a5      	cmp	r5, r4
    5eac:	d006      	beq.n	5ebc <__eqdf2+0x48>
    5eae:	0018      	movs	r0, r3
    5eb0:	bc3c      	pop	{r2, r3, r4, r5}
    5eb2:	4690      	mov	r8, r2
    5eb4:	4699      	mov	r9, r3
    5eb6:	46a2      	mov	sl, r4
    5eb8:	46ab      	mov	fp, r5
    5eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5ebc:	42be      	cmp	r6, r7
    5ebe:	d1f6      	bne.n	5eae <__eqdf2+0x3a>
    5ec0:	45c8      	cmp	r8, r9
    5ec2:	d1f4      	bne.n	5eae <__eqdf2+0x3a>
    5ec4:	45d3      	cmp	fp, sl
    5ec6:	d010      	beq.n	5eea <__eqdf2+0x76>
    5ec8:	2d00      	cmp	r5, #0
    5eca:	d1f0      	bne.n	5eae <__eqdf2+0x3a>
    5ecc:	4330      	orrs	r0, r6
    5ece:	0003      	movs	r3, r0
    5ed0:	1e5a      	subs	r2, r3, #1
    5ed2:	4193      	sbcs	r3, r2
    5ed4:	e7eb      	b.n	5eae <__eqdf2+0x3a>
    5ed6:	0031      	movs	r1, r6
    5ed8:	2301      	movs	r3, #1
    5eda:	4301      	orrs	r1, r0
    5edc:	d1e7      	bne.n	5eae <__eqdf2+0x3a>
    5ede:	e7e0      	b.n	5ea2 <__eqdf2+0x2e>
    5ee0:	433a      	orrs	r2, r7
    5ee2:	2301      	movs	r3, #1
    5ee4:	2a00      	cmp	r2, #0
    5ee6:	d1e2      	bne.n	5eae <__eqdf2+0x3a>
    5ee8:	e7de      	b.n	5ea8 <__eqdf2+0x34>
    5eea:	2300      	movs	r3, #0
    5eec:	e7df      	b.n	5eae <__eqdf2+0x3a>
    5eee:	46c0      	nop			; (mov r8, r8)
    5ef0:	000007ff 	.word	0x000007ff

00005ef4 <__gedf2>:
    5ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ef6:	465f      	mov	r7, fp
    5ef8:	4644      	mov	r4, r8
    5efa:	4656      	mov	r6, sl
    5efc:	464d      	mov	r5, r9
    5efe:	b4f0      	push	{r4, r5, r6, r7}
    5f00:	031f      	lsls	r7, r3, #12
    5f02:	0b3c      	lsrs	r4, r7, #12
    5f04:	4f2c      	ldr	r7, [pc, #176]	; (5fb8 <__gedf2+0xc4>)
    5f06:	030e      	lsls	r6, r1, #12
    5f08:	004d      	lsls	r5, r1, #1
    5f0a:	46a3      	mov	fp, r4
    5f0c:	005c      	lsls	r4, r3, #1
    5f0e:	4684      	mov	ip, r0
    5f10:	0b36      	lsrs	r6, r6, #12
    5f12:	0d6d      	lsrs	r5, r5, #21
    5f14:	0fc9      	lsrs	r1, r1, #31
    5f16:	4690      	mov	r8, r2
    5f18:	0d64      	lsrs	r4, r4, #21
    5f1a:	0fdb      	lsrs	r3, r3, #31
    5f1c:	42bd      	cmp	r5, r7
    5f1e:	d02b      	beq.n	5f78 <__gedf2+0x84>
    5f20:	4f25      	ldr	r7, [pc, #148]	; (5fb8 <__gedf2+0xc4>)
    5f22:	42bc      	cmp	r4, r7
    5f24:	d02e      	beq.n	5f84 <__gedf2+0x90>
    5f26:	2d00      	cmp	r5, #0
    5f28:	d10e      	bne.n	5f48 <__gedf2+0x54>
    5f2a:	4330      	orrs	r0, r6
    5f2c:	0007      	movs	r7, r0
    5f2e:	4681      	mov	r9, r0
    5f30:	4278      	negs	r0, r7
    5f32:	4178      	adcs	r0, r7
    5f34:	2c00      	cmp	r4, #0
    5f36:	d117      	bne.n	5f68 <__gedf2+0x74>
    5f38:	465f      	mov	r7, fp
    5f3a:	433a      	orrs	r2, r7
    5f3c:	d114      	bne.n	5f68 <__gedf2+0x74>
    5f3e:	464b      	mov	r3, r9
    5f40:	2000      	movs	r0, #0
    5f42:	2b00      	cmp	r3, #0
    5f44:	d00a      	beq.n	5f5c <__gedf2+0x68>
    5f46:	e006      	b.n	5f56 <__gedf2+0x62>
    5f48:	2c00      	cmp	r4, #0
    5f4a:	d102      	bne.n	5f52 <__gedf2+0x5e>
    5f4c:	4658      	mov	r0, fp
    5f4e:	4302      	orrs	r2, r0
    5f50:	d001      	beq.n	5f56 <__gedf2+0x62>
    5f52:	4299      	cmp	r1, r3
    5f54:	d01a      	beq.n	5f8c <__gedf2+0x98>
    5f56:	2301      	movs	r3, #1
    5f58:	4248      	negs	r0, r1
    5f5a:	4318      	orrs	r0, r3
    5f5c:	bc3c      	pop	{r2, r3, r4, r5}
    5f5e:	4690      	mov	r8, r2
    5f60:	4699      	mov	r9, r3
    5f62:	46a2      	mov	sl, r4
    5f64:	46ab      	mov	fp, r5
    5f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f68:	2800      	cmp	r0, #0
    5f6a:	d0f2      	beq.n	5f52 <__gedf2+0x5e>
    5f6c:	4258      	negs	r0, r3
    5f6e:	4158      	adcs	r0, r3
    5f70:	2201      	movs	r2, #1
    5f72:	4240      	negs	r0, r0
    5f74:	4310      	orrs	r0, r2
    5f76:	e7f1      	b.n	5f5c <__gedf2+0x68>
    5f78:	0037      	movs	r7, r6
    5f7a:	4307      	orrs	r7, r0
    5f7c:	d0d0      	beq.n	5f20 <__gedf2+0x2c>
    5f7e:	2002      	movs	r0, #2
    5f80:	4240      	negs	r0, r0
    5f82:	e7eb      	b.n	5f5c <__gedf2+0x68>
    5f84:	465f      	mov	r7, fp
    5f86:	4317      	orrs	r7, r2
    5f88:	d0cd      	beq.n	5f26 <__gedf2+0x32>
    5f8a:	e7f8      	b.n	5f7e <__gedf2+0x8a>
    5f8c:	42a5      	cmp	r5, r4
    5f8e:	dce2      	bgt.n	5f56 <__gedf2+0x62>
    5f90:	db05      	blt.n	5f9e <__gedf2+0xaa>
    5f92:	455e      	cmp	r6, fp
    5f94:	d8df      	bhi.n	5f56 <__gedf2+0x62>
    5f96:	d008      	beq.n	5faa <__gedf2+0xb6>
    5f98:	2000      	movs	r0, #0
    5f9a:	455e      	cmp	r6, fp
    5f9c:	d2de      	bcs.n	5f5c <__gedf2+0x68>
    5f9e:	4248      	negs	r0, r1
    5fa0:	4148      	adcs	r0, r1
    5fa2:	2301      	movs	r3, #1
    5fa4:	4240      	negs	r0, r0
    5fa6:	4318      	orrs	r0, r3
    5fa8:	e7d8      	b.n	5f5c <__gedf2+0x68>
    5faa:	45c4      	cmp	ip, r8
    5fac:	d8d3      	bhi.n	5f56 <__gedf2+0x62>
    5fae:	2000      	movs	r0, #0
    5fb0:	45c4      	cmp	ip, r8
    5fb2:	d3f4      	bcc.n	5f9e <__gedf2+0xaa>
    5fb4:	e7d2      	b.n	5f5c <__gedf2+0x68>
    5fb6:	46c0      	nop			; (mov r8, r8)
    5fb8:	000007ff 	.word	0x000007ff

00005fbc <__ledf2>:
    5fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fbe:	465f      	mov	r7, fp
    5fc0:	464d      	mov	r5, r9
    5fc2:	4644      	mov	r4, r8
    5fc4:	4656      	mov	r6, sl
    5fc6:	b4f0      	push	{r4, r5, r6, r7}
    5fc8:	031c      	lsls	r4, r3, #12
    5fca:	0b24      	lsrs	r4, r4, #12
    5fcc:	46a4      	mov	ip, r4
    5fce:	4c2f      	ldr	r4, [pc, #188]	; (608c <__ledf2+0xd0>)
    5fd0:	030f      	lsls	r7, r1, #12
    5fd2:	004d      	lsls	r5, r1, #1
    5fd4:	005e      	lsls	r6, r3, #1
    5fd6:	0fc9      	lsrs	r1, r1, #31
    5fd8:	4680      	mov	r8, r0
    5fda:	0b3f      	lsrs	r7, r7, #12
    5fdc:	0d6d      	lsrs	r5, r5, #21
    5fde:	468b      	mov	fp, r1
    5fe0:	4691      	mov	r9, r2
    5fe2:	0d76      	lsrs	r6, r6, #21
    5fe4:	0fdb      	lsrs	r3, r3, #31
    5fe6:	42a5      	cmp	r5, r4
    5fe8:	d020      	beq.n	602c <__ledf2+0x70>
    5fea:	4c28      	ldr	r4, [pc, #160]	; (608c <__ledf2+0xd0>)
    5fec:	42a6      	cmp	r6, r4
    5fee:	d022      	beq.n	6036 <__ledf2+0x7a>
    5ff0:	2d00      	cmp	r5, #0
    5ff2:	d112      	bne.n	601a <__ledf2+0x5e>
    5ff4:	4338      	orrs	r0, r7
    5ff6:	4244      	negs	r4, r0
    5ff8:	4144      	adcs	r4, r0
    5ffa:	2e00      	cmp	r6, #0
    5ffc:	d020      	beq.n	6040 <__ledf2+0x84>
    5ffe:	2c00      	cmp	r4, #0
    6000:	d00d      	beq.n	601e <__ledf2+0x62>
    6002:	425c      	negs	r4, r3
    6004:	4163      	adcs	r3, r4
    6006:	2401      	movs	r4, #1
    6008:	425b      	negs	r3, r3
    600a:	431c      	orrs	r4, r3
    600c:	0020      	movs	r0, r4
    600e:	bc3c      	pop	{r2, r3, r4, r5}
    6010:	4690      	mov	r8, r2
    6012:	4699      	mov	r9, r3
    6014:	46a2      	mov	sl, r4
    6016:	46ab      	mov	fp, r5
    6018:	bdf0      	pop	{r4, r5, r6, r7, pc}
    601a:	2e00      	cmp	r6, #0
    601c:	d017      	beq.n	604e <__ledf2+0x92>
    601e:	455b      	cmp	r3, fp
    6020:	d019      	beq.n	6056 <__ledf2+0x9a>
    6022:	465b      	mov	r3, fp
    6024:	425c      	negs	r4, r3
    6026:	2301      	movs	r3, #1
    6028:	431c      	orrs	r4, r3
    602a:	e7ef      	b.n	600c <__ledf2+0x50>
    602c:	0039      	movs	r1, r7
    602e:	2402      	movs	r4, #2
    6030:	4301      	orrs	r1, r0
    6032:	d1eb      	bne.n	600c <__ledf2+0x50>
    6034:	e7d9      	b.n	5fea <__ledf2+0x2e>
    6036:	4661      	mov	r1, ip
    6038:	2402      	movs	r4, #2
    603a:	4311      	orrs	r1, r2
    603c:	d1e6      	bne.n	600c <__ledf2+0x50>
    603e:	e7d7      	b.n	5ff0 <__ledf2+0x34>
    6040:	4661      	mov	r1, ip
    6042:	430a      	orrs	r2, r1
    6044:	d1db      	bne.n	5ffe <__ledf2+0x42>
    6046:	2400      	movs	r4, #0
    6048:	2800      	cmp	r0, #0
    604a:	d0df      	beq.n	600c <__ledf2+0x50>
    604c:	e7e9      	b.n	6022 <__ledf2+0x66>
    604e:	4661      	mov	r1, ip
    6050:	430a      	orrs	r2, r1
    6052:	d1e4      	bne.n	601e <__ledf2+0x62>
    6054:	e7e5      	b.n	6022 <__ledf2+0x66>
    6056:	42b5      	cmp	r5, r6
    6058:	dd03      	ble.n	6062 <__ledf2+0xa6>
    605a:	2201      	movs	r2, #1
    605c:	425c      	negs	r4, r3
    605e:	4314      	orrs	r4, r2
    6060:	e7d4      	b.n	600c <__ledf2+0x50>
    6062:	42b5      	cmp	r5, r6
    6064:	dbcd      	blt.n	6002 <__ledf2+0x46>
    6066:	4567      	cmp	r7, ip
    6068:	d8db      	bhi.n	6022 <__ledf2+0x66>
    606a:	d009      	beq.n	6080 <__ledf2+0xc4>
    606c:	2400      	movs	r4, #0
    606e:	4567      	cmp	r7, ip
    6070:	d2cc      	bcs.n	600c <__ledf2+0x50>
    6072:	4659      	mov	r1, fp
    6074:	424c      	negs	r4, r1
    6076:	4161      	adcs	r1, r4
    6078:	2401      	movs	r4, #1
    607a:	4249      	negs	r1, r1
    607c:	430c      	orrs	r4, r1
    607e:	e7c5      	b.n	600c <__ledf2+0x50>
    6080:	45c8      	cmp	r8, r9
    6082:	d8ce      	bhi.n	6022 <__ledf2+0x66>
    6084:	2400      	movs	r4, #0
    6086:	45c8      	cmp	r8, r9
    6088:	d3f3      	bcc.n	6072 <__ledf2+0xb6>
    608a:	e7bf      	b.n	600c <__ledf2+0x50>
    608c:	000007ff 	.word	0x000007ff

00006090 <__aeabi_dmul>:
    6090:	b5f0      	push	{r4, r5, r6, r7, lr}
    6092:	465f      	mov	r7, fp
    6094:	4656      	mov	r6, sl
    6096:	464d      	mov	r5, r9
    6098:	4644      	mov	r4, r8
    609a:	b4f0      	push	{r4, r5, r6, r7}
    609c:	030d      	lsls	r5, r1, #12
    609e:	4699      	mov	r9, r3
    60a0:	004e      	lsls	r6, r1, #1
    60a2:	0b2b      	lsrs	r3, r5, #12
    60a4:	b087      	sub	sp, #28
    60a6:	0007      	movs	r7, r0
    60a8:	4692      	mov	sl, r2
    60aa:	4680      	mov	r8, r0
    60ac:	469b      	mov	fp, r3
    60ae:	0d76      	lsrs	r6, r6, #21
    60b0:	0fcc      	lsrs	r4, r1, #31
    60b2:	2e00      	cmp	r6, #0
    60b4:	d069      	beq.n	618a <__aeabi_dmul+0xfa>
    60b6:	4b6d      	ldr	r3, [pc, #436]	; (626c <__aeabi_dmul+0x1dc>)
    60b8:	429e      	cmp	r6, r3
    60ba:	d035      	beq.n	6128 <__aeabi_dmul+0x98>
    60bc:	465b      	mov	r3, fp
    60be:	2280      	movs	r2, #128	; 0x80
    60c0:	00dd      	lsls	r5, r3, #3
    60c2:	0412      	lsls	r2, r2, #16
    60c4:	0f43      	lsrs	r3, r0, #29
    60c6:	4313      	orrs	r3, r2
    60c8:	432b      	orrs	r3, r5
    60ca:	469b      	mov	fp, r3
    60cc:	00c3      	lsls	r3, r0, #3
    60ce:	4698      	mov	r8, r3
    60d0:	4b67      	ldr	r3, [pc, #412]	; (6270 <__aeabi_dmul+0x1e0>)
    60d2:	2700      	movs	r7, #0
    60d4:	469c      	mov	ip, r3
    60d6:	2300      	movs	r3, #0
    60d8:	4466      	add	r6, ip
    60da:	9301      	str	r3, [sp, #4]
    60dc:	464a      	mov	r2, r9
    60de:	0315      	lsls	r5, r2, #12
    60e0:	0050      	lsls	r0, r2, #1
    60e2:	0fd2      	lsrs	r2, r2, #31
    60e4:	4653      	mov	r3, sl
    60e6:	0b2d      	lsrs	r5, r5, #12
    60e8:	0d40      	lsrs	r0, r0, #21
    60ea:	4691      	mov	r9, r2
    60ec:	d100      	bne.n	60f0 <__aeabi_dmul+0x60>
    60ee:	e076      	b.n	61de <__aeabi_dmul+0x14e>
    60f0:	4a5e      	ldr	r2, [pc, #376]	; (626c <__aeabi_dmul+0x1dc>)
    60f2:	4290      	cmp	r0, r2
    60f4:	d06c      	beq.n	61d0 <__aeabi_dmul+0x140>
    60f6:	2280      	movs	r2, #128	; 0x80
    60f8:	0f5b      	lsrs	r3, r3, #29
    60fa:	0412      	lsls	r2, r2, #16
    60fc:	4313      	orrs	r3, r2
    60fe:	4a5c      	ldr	r2, [pc, #368]	; (6270 <__aeabi_dmul+0x1e0>)
    6100:	00ed      	lsls	r5, r5, #3
    6102:	4694      	mov	ip, r2
    6104:	431d      	orrs	r5, r3
    6106:	4653      	mov	r3, sl
    6108:	2200      	movs	r2, #0
    610a:	00db      	lsls	r3, r3, #3
    610c:	4460      	add	r0, ip
    610e:	4649      	mov	r1, r9
    6110:	1836      	adds	r6, r6, r0
    6112:	1c70      	adds	r0, r6, #1
    6114:	4061      	eors	r1, r4
    6116:	9002      	str	r0, [sp, #8]
    6118:	4317      	orrs	r7, r2
    611a:	2f0f      	cmp	r7, #15
    611c:	d900      	bls.n	6120 <__aeabi_dmul+0x90>
    611e:	e0af      	b.n	6280 <__aeabi_dmul+0x1f0>
    6120:	4854      	ldr	r0, [pc, #336]	; (6274 <__aeabi_dmul+0x1e4>)
    6122:	00bf      	lsls	r7, r7, #2
    6124:	59c7      	ldr	r7, [r0, r7]
    6126:	46bf      	mov	pc, r7
    6128:	465b      	mov	r3, fp
    612a:	431f      	orrs	r7, r3
    612c:	d000      	beq.n	6130 <__aeabi_dmul+0xa0>
    612e:	e088      	b.n	6242 <__aeabi_dmul+0x1b2>
    6130:	2300      	movs	r3, #0
    6132:	469b      	mov	fp, r3
    6134:	4698      	mov	r8, r3
    6136:	3302      	adds	r3, #2
    6138:	2708      	movs	r7, #8
    613a:	9301      	str	r3, [sp, #4]
    613c:	e7ce      	b.n	60dc <__aeabi_dmul+0x4c>
    613e:	4649      	mov	r1, r9
    6140:	2a02      	cmp	r2, #2
    6142:	d06a      	beq.n	621a <__aeabi_dmul+0x18a>
    6144:	2a03      	cmp	r2, #3
    6146:	d100      	bne.n	614a <__aeabi_dmul+0xba>
    6148:	e209      	b.n	655e <__aeabi_dmul+0x4ce>
    614a:	2a01      	cmp	r2, #1
    614c:	d000      	beq.n	6150 <__aeabi_dmul+0xc0>
    614e:	e1bb      	b.n	64c8 <__aeabi_dmul+0x438>
    6150:	4011      	ands	r1, r2
    6152:	2200      	movs	r2, #0
    6154:	2300      	movs	r3, #0
    6156:	2500      	movs	r5, #0
    6158:	4690      	mov	r8, r2
    615a:	b2cc      	uxtb	r4, r1
    615c:	2100      	movs	r1, #0
    615e:	032d      	lsls	r5, r5, #12
    6160:	0d0a      	lsrs	r2, r1, #20
    6162:	0512      	lsls	r2, r2, #20
    6164:	0b2d      	lsrs	r5, r5, #12
    6166:	4315      	orrs	r5, r2
    6168:	4a43      	ldr	r2, [pc, #268]	; (6278 <__aeabi_dmul+0x1e8>)
    616a:	051b      	lsls	r3, r3, #20
    616c:	4015      	ands	r5, r2
    616e:	431d      	orrs	r5, r3
    6170:	006d      	lsls	r5, r5, #1
    6172:	07e4      	lsls	r4, r4, #31
    6174:	086d      	lsrs	r5, r5, #1
    6176:	4325      	orrs	r5, r4
    6178:	4640      	mov	r0, r8
    617a:	0029      	movs	r1, r5
    617c:	b007      	add	sp, #28
    617e:	bc3c      	pop	{r2, r3, r4, r5}
    6180:	4690      	mov	r8, r2
    6182:	4699      	mov	r9, r3
    6184:	46a2      	mov	sl, r4
    6186:	46ab      	mov	fp, r5
    6188:	bdf0      	pop	{r4, r5, r6, r7, pc}
    618a:	4303      	orrs	r3, r0
    618c:	d052      	beq.n	6234 <__aeabi_dmul+0x1a4>
    618e:	465b      	mov	r3, fp
    6190:	2b00      	cmp	r3, #0
    6192:	d100      	bne.n	6196 <__aeabi_dmul+0x106>
    6194:	e18a      	b.n	64ac <__aeabi_dmul+0x41c>
    6196:	4658      	mov	r0, fp
    6198:	f000 fef8 	bl	6f8c <__clzsi2>
    619c:	0003      	movs	r3, r0
    619e:	3b0b      	subs	r3, #11
    61a0:	2b1c      	cmp	r3, #28
    61a2:	dd00      	ble.n	61a6 <__aeabi_dmul+0x116>
    61a4:	e17b      	b.n	649e <__aeabi_dmul+0x40e>
    61a6:	221d      	movs	r2, #29
    61a8:	1ad3      	subs	r3, r2, r3
    61aa:	003a      	movs	r2, r7
    61ac:	0001      	movs	r1, r0
    61ae:	465d      	mov	r5, fp
    61b0:	40da      	lsrs	r2, r3
    61b2:	3908      	subs	r1, #8
    61b4:	408d      	lsls	r5, r1
    61b6:	0013      	movs	r3, r2
    61b8:	408f      	lsls	r7, r1
    61ba:	432b      	orrs	r3, r5
    61bc:	469b      	mov	fp, r3
    61be:	46b8      	mov	r8, r7
    61c0:	4b2e      	ldr	r3, [pc, #184]	; (627c <__aeabi_dmul+0x1ec>)
    61c2:	2700      	movs	r7, #0
    61c4:	469c      	mov	ip, r3
    61c6:	2300      	movs	r3, #0
    61c8:	4460      	add	r0, ip
    61ca:	4246      	negs	r6, r0
    61cc:	9301      	str	r3, [sp, #4]
    61ce:	e785      	b.n	60dc <__aeabi_dmul+0x4c>
    61d0:	4652      	mov	r2, sl
    61d2:	432a      	orrs	r2, r5
    61d4:	d12c      	bne.n	6230 <__aeabi_dmul+0x1a0>
    61d6:	2500      	movs	r5, #0
    61d8:	2300      	movs	r3, #0
    61da:	2202      	movs	r2, #2
    61dc:	e797      	b.n	610e <__aeabi_dmul+0x7e>
    61de:	4652      	mov	r2, sl
    61e0:	432a      	orrs	r2, r5
    61e2:	d021      	beq.n	6228 <__aeabi_dmul+0x198>
    61e4:	2d00      	cmp	r5, #0
    61e6:	d100      	bne.n	61ea <__aeabi_dmul+0x15a>
    61e8:	e154      	b.n	6494 <__aeabi_dmul+0x404>
    61ea:	0028      	movs	r0, r5
    61ec:	f000 fece 	bl	6f8c <__clzsi2>
    61f0:	0003      	movs	r3, r0
    61f2:	3b0b      	subs	r3, #11
    61f4:	2b1c      	cmp	r3, #28
    61f6:	dd00      	ble.n	61fa <__aeabi_dmul+0x16a>
    61f8:	e146      	b.n	6488 <__aeabi_dmul+0x3f8>
    61fa:	211d      	movs	r1, #29
    61fc:	1acb      	subs	r3, r1, r3
    61fe:	4651      	mov	r1, sl
    6200:	0002      	movs	r2, r0
    6202:	40d9      	lsrs	r1, r3
    6204:	4653      	mov	r3, sl
    6206:	3a08      	subs	r2, #8
    6208:	4095      	lsls	r5, r2
    620a:	4093      	lsls	r3, r2
    620c:	430d      	orrs	r5, r1
    620e:	4a1b      	ldr	r2, [pc, #108]	; (627c <__aeabi_dmul+0x1ec>)
    6210:	4694      	mov	ip, r2
    6212:	4460      	add	r0, ip
    6214:	4240      	negs	r0, r0
    6216:	2200      	movs	r2, #0
    6218:	e779      	b.n	610e <__aeabi_dmul+0x7e>
    621a:	2401      	movs	r4, #1
    621c:	2200      	movs	r2, #0
    621e:	400c      	ands	r4, r1
    6220:	4b12      	ldr	r3, [pc, #72]	; (626c <__aeabi_dmul+0x1dc>)
    6222:	2500      	movs	r5, #0
    6224:	4690      	mov	r8, r2
    6226:	e799      	b.n	615c <__aeabi_dmul+0xcc>
    6228:	2500      	movs	r5, #0
    622a:	2300      	movs	r3, #0
    622c:	2201      	movs	r2, #1
    622e:	e76e      	b.n	610e <__aeabi_dmul+0x7e>
    6230:	2203      	movs	r2, #3
    6232:	e76c      	b.n	610e <__aeabi_dmul+0x7e>
    6234:	2300      	movs	r3, #0
    6236:	469b      	mov	fp, r3
    6238:	4698      	mov	r8, r3
    623a:	3301      	adds	r3, #1
    623c:	2704      	movs	r7, #4
    623e:	9301      	str	r3, [sp, #4]
    6240:	e74c      	b.n	60dc <__aeabi_dmul+0x4c>
    6242:	2303      	movs	r3, #3
    6244:	270c      	movs	r7, #12
    6246:	9301      	str	r3, [sp, #4]
    6248:	e748      	b.n	60dc <__aeabi_dmul+0x4c>
    624a:	2300      	movs	r3, #0
    624c:	2580      	movs	r5, #128	; 0x80
    624e:	4698      	mov	r8, r3
    6250:	2400      	movs	r4, #0
    6252:	032d      	lsls	r5, r5, #12
    6254:	4b05      	ldr	r3, [pc, #20]	; (626c <__aeabi_dmul+0x1dc>)
    6256:	e781      	b.n	615c <__aeabi_dmul+0xcc>
    6258:	465d      	mov	r5, fp
    625a:	4643      	mov	r3, r8
    625c:	9a01      	ldr	r2, [sp, #4]
    625e:	e76f      	b.n	6140 <__aeabi_dmul+0xb0>
    6260:	465d      	mov	r5, fp
    6262:	4643      	mov	r3, r8
    6264:	0021      	movs	r1, r4
    6266:	9a01      	ldr	r2, [sp, #4]
    6268:	e76a      	b.n	6140 <__aeabi_dmul+0xb0>
    626a:	46c0      	nop			; (mov r8, r8)
    626c:	000007ff 	.word	0x000007ff
    6270:	fffffc01 	.word	0xfffffc01
    6274:	000070d8 	.word	0x000070d8
    6278:	800fffff 	.word	0x800fffff
    627c:	000003f3 	.word	0x000003f3
    6280:	4642      	mov	r2, r8
    6282:	0c12      	lsrs	r2, r2, #16
    6284:	4691      	mov	r9, r2
    6286:	0c1a      	lsrs	r2, r3, #16
    6288:	4694      	mov	ip, r2
    628a:	4642      	mov	r2, r8
    628c:	0417      	lsls	r7, r2, #16
    628e:	464a      	mov	r2, r9
    6290:	041b      	lsls	r3, r3, #16
    6292:	0c1b      	lsrs	r3, r3, #16
    6294:	435a      	muls	r2, r3
    6296:	4660      	mov	r0, ip
    6298:	4690      	mov	r8, r2
    629a:	464a      	mov	r2, r9
    629c:	4342      	muls	r2, r0
    629e:	0010      	movs	r0, r2
    62a0:	9203      	str	r2, [sp, #12]
    62a2:	4662      	mov	r2, ip
    62a4:	001c      	movs	r4, r3
    62a6:	0c3f      	lsrs	r7, r7, #16
    62a8:	437a      	muls	r2, r7
    62aa:	437c      	muls	r4, r7
    62ac:	4442      	add	r2, r8
    62ae:	9201      	str	r2, [sp, #4]
    62b0:	0c22      	lsrs	r2, r4, #16
    62b2:	4692      	mov	sl, r2
    62b4:	9a01      	ldr	r2, [sp, #4]
    62b6:	4452      	add	r2, sl
    62b8:	4590      	cmp	r8, r2
    62ba:	d906      	bls.n	62ca <__aeabi_dmul+0x23a>
    62bc:	4682      	mov	sl, r0
    62be:	2080      	movs	r0, #128	; 0x80
    62c0:	0240      	lsls	r0, r0, #9
    62c2:	4680      	mov	r8, r0
    62c4:	44c2      	add	sl, r8
    62c6:	4650      	mov	r0, sl
    62c8:	9003      	str	r0, [sp, #12]
    62ca:	0c10      	lsrs	r0, r2, #16
    62cc:	9004      	str	r0, [sp, #16]
    62ce:	4648      	mov	r0, r9
    62d0:	0424      	lsls	r4, r4, #16
    62d2:	0c24      	lsrs	r4, r4, #16
    62d4:	0412      	lsls	r2, r2, #16
    62d6:	1912      	adds	r2, r2, r4
    62d8:	9205      	str	r2, [sp, #20]
    62da:	0c2a      	lsrs	r2, r5, #16
    62dc:	042d      	lsls	r5, r5, #16
    62de:	0c2d      	lsrs	r5, r5, #16
    62e0:	4368      	muls	r0, r5
    62e2:	002c      	movs	r4, r5
    62e4:	4682      	mov	sl, r0
    62e6:	4648      	mov	r0, r9
    62e8:	437c      	muls	r4, r7
    62ea:	4350      	muls	r0, r2
    62ec:	4681      	mov	r9, r0
    62ee:	0c20      	lsrs	r0, r4, #16
    62f0:	4680      	mov	r8, r0
    62f2:	4357      	muls	r7, r2
    62f4:	4457      	add	r7, sl
    62f6:	4447      	add	r7, r8
    62f8:	45ba      	cmp	sl, r7
    62fa:	d903      	bls.n	6304 <__aeabi_dmul+0x274>
    62fc:	2080      	movs	r0, #128	; 0x80
    62fe:	0240      	lsls	r0, r0, #9
    6300:	4680      	mov	r8, r0
    6302:	44c1      	add	r9, r8
    6304:	0c38      	lsrs	r0, r7, #16
    6306:	043f      	lsls	r7, r7, #16
    6308:	46b8      	mov	r8, r7
    630a:	4448      	add	r0, r9
    630c:	0424      	lsls	r4, r4, #16
    630e:	0c24      	lsrs	r4, r4, #16
    6310:	9001      	str	r0, [sp, #4]
    6312:	9804      	ldr	r0, [sp, #16]
    6314:	44a0      	add	r8, r4
    6316:	4440      	add	r0, r8
    6318:	9004      	str	r0, [sp, #16]
    631a:	4658      	mov	r0, fp
    631c:	0c00      	lsrs	r0, r0, #16
    631e:	4681      	mov	r9, r0
    6320:	4658      	mov	r0, fp
    6322:	0404      	lsls	r4, r0, #16
    6324:	0c20      	lsrs	r0, r4, #16
    6326:	4682      	mov	sl, r0
    6328:	0007      	movs	r7, r0
    632a:	4648      	mov	r0, r9
    632c:	435f      	muls	r7, r3
    632e:	464c      	mov	r4, r9
    6330:	4343      	muls	r3, r0
    6332:	4660      	mov	r0, ip
    6334:	4360      	muls	r0, r4
    6336:	4664      	mov	r4, ip
    6338:	4683      	mov	fp, r0
    633a:	4650      	mov	r0, sl
    633c:	4344      	muls	r4, r0
    633e:	0c38      	lsrs	r0, r7, #16
    6340:	4684      	mov	ip, r0
    6342:	18e4      	adds	r4, r4, r3
    6344:	4464      	add	r4, ip
    6346:	42a3      	cmp	r3, r4
    6348:	d903      	bls.n	6352 <__aeabi_dmul+0x2c2>
    634a:	2380      	movs	r3, #128	; 0x80
    634c:	025b      	lsls	r3, r3, #9
    634e:	469c      	mov	ip, r3
    6350:	44e3      	add	fp, ip
    6352:	4648      	mov	r0, r9
    6354:	043f      	lsls	r7, r7, #16
    6356:	0c23      	lsrs	r3, r4, #16
    6358:	0c3f      	lsrs	r7, r7, #16
    635a:	0424      	lsls	r4, r4, #16
    635c:	19e4      	adds	r4, r4, r7
    635e:	4657      	mov	r7, sl
    6360:	4368      	muls	r0, r5
    6362:	436f      	muls	r7, r5
    6364:	4684      	mov	ip, r0
    6366:	464d      	mov	r5, r9
    6368:	4650      	mov	r0, sl
    636a:	4355      	muls	r5, r2
    636c:	4342      	muls	r2, r0
    636e:	0c38      	lsrs	r0, r7, #16
    6370:	4681      	mov	r9, r0
    6372:	4462      	add	r2, ip
    6374:	444a      	add	r2, r9
    6376:	445b      	add	r3, fp
    6378:	4594      	cmp	ip, r2
    637a:	d903      	bls.n	6384 <__aeabi_dmul+0x2f4>
    637c:	2080      	movs	r0, #128	; 0x80
    637e:	0240      	lsls	r0, r0, #9
    6380:	4684      	mov	ip, r0
    6382:	4465      	add	r5, ip
    6384:	9803      	ldr	r0, [sp, #12]
    6386:	043f      	lsls	r7, r7, #16
    6388:	4683      	mov	fp, r0
    638a:	9804      	ldr	r0, [sp, #16]
    638c:	0c3f      	lsrs	r7, r7, #16
    638e:	4684      	mov	ip, r0
    6390:	44e3      	add	fp, ip
    6392:	45c3      	cmp	fp, r8
    6394:	4180      	sbcs	r0, r0
    6396:	4240      	negs	r0, r0
    6398:	4682      	mov	sl, r0
    639a:	0410      	lsls	r0, r2, #16
    639c:	4684      	mov	ip, r0
    639e:	9801      	ldr	r0, [sp, #4]
    63a0:	4467      	add	r7, ip
    63a2:	4684      	mov	ip, r0
    63a4:	4467      	add	r7, ip
    63a6:	44a3      	add	fp, r4
    63a8:	46bc      	mov	ip, r7
    63aa:	45a3      	cmp	fp, r4
    63ac:	41a4      	sbcs	r4, r4
    63ae:	4699      	mov	r9, r3
    63b0:	44d4      	add	ip, sl
    63b2:	4264      	negs	r4, r4
    63b4:	4287      	cmp	r7, r0
    63b6:	41bf      	sbcs	r7, r7
    63b8:	45d4      	cmp	ip, sl
    63ba:	4180      	sbcs	r0, r0
    63bc:	44e1      	add	r9, ip
    63be:	46a0      	mov	r8, r4
    63c0:	4599      	cmp	r9, r3
    63c2:	419b      	sbcs	r3, r3
    63c4:	427f      	negs	r7, r7
    63c6:	4240      	negs	r0, r0
    63c8:	44c8      	add	r8, r9
    63ca:	4307      	orrs	r7, r0
    63cc:	0c12      	lsrs	r2, r2, #16
    63ce:	18ba      	adds	r2, r7, r2
    63d0:	45a0      	cmp	r8, r4
    63d2:	41a4      	sbcs	r4, r4
    63d4:	425f      	negs	r7, r3
    63d6:	003b      	movs	r3, r7
    63d8:	4264      	negs	r4, r4
    63da:	4323      	orrs	r3, r4
    63dc:	18d7      	adds	r7, r2, r3
    63de:	4643      	mov	r3, r8
    63e0:	197d      	adds	r5, r7, r5
    63e2:	0ddb      	lsrs	r3, r3, #23
    63e4:	026d      	lsls	r5, r5, #9
    63e6:	431d      	orrs	r5, r3
    63e8:	465b      	mov	r3, fp
    63ea:	025a      	lsls	r2, r3, #9
    63ec:	9b05      	ldr	r3, [sp, #20]
    63ee:	431a      	orrs	r2, r3
    63f0:	1e53      	subs	r3, r2, #1
    63f2:	419a      	sbcs	r2, r3
    63f4:	465b      	mov	r3, fp
    63f6:	0ddb      	lsrs	r3, r3, #23
    63f8:	431a      	orrs	r2, r3
    63fa:	4643      	mov	r3, r8
    63fc:	025b      	lsls	r3, r3, #9
    63fe:	4313      	orrs	r3, r2
    6400:	01ea      	lsls	r2, r5, #7
    6402:	d507      	bpl.n	6414 <__aeabi_dmul+0x384>
    6404:	2201      	movs	r2, #1
    6406:	085c      	lsrs	r4, r3, #1
    6408:	4013      	ands	r3, r2
    640a:	4323      	orrs	r3, r4
    640c:	07ea      	lsls	r2, r5, #31
    640e:	9e02      	ldr	r6, [sp, #8]
    6410:	4313      	orrs	r3, r2
    6412:	086d      	lsrs	r5, r5, #1
    6414:	4a57      	ldr	r2, [pc, #348]	; (6574 <__aeabi_dmul+0x4e4>)
    6416:	18b2      	adds	r2, r6, r2
    6418:	2a00      	cmp	r2, #0
    641a:	dd4b      	ble.n	64b4 <__aeabi_dmul+0x424>
    641c:	0758      	lsls	r0, r3, #29
    641e:	d009      	beq.n	6434 <__aeabi_dmul+0x3a4>
    6420:	200f      	movs	r0, #15
    6422:	4018      	ands	r0, r3
    6424:	2804      	cmp	r0, #4
    6426:	d005      	beq.n	6434 <__aeabi_dmul+0x3a4>
    6428:	1d18      	adds	r0, r3, #4
    642a:	4298      	cmp	r0, r3
    642c:	419b      	sbcs	r3, r3
    642e:	425b      	negs	r3, r3
    6430:	18ed      	adds	r5, r5, r3
    6432:	0003      	movs	r3, r0
    6434:	01e8      	lsls	r0, r5, #7
    6436:	d504      	bpl.n	6442 <__aeabi_dmul+0x3b2>
    6438:	4a4f      	ldr	r2, [pc, #316]	; (6578 <__aeabi_dmul+0x4e8>)
    643a:	4015      	ands	r5, r2
    643c:	2280      	movs	r2, #128	; 0x80
    643e:	00d2      	lsls	r2, r2, #3
    6440:	18b2      	adds	r2, r6, r2
    6442:	484e      	ldr	r0, [pc, #312]	; (657c <__aeabi_dmul+0x4ec>)
    6444:	4282      	cmp	r2, r0
    6446:	dd00      	ble.n	644a <__aeabi_dmul+0x3ba>
    6448:	e6e7      	b.n	621a <__aeabi_dmul+0x18a>
    644a:	2401      	movs	r4, #1
    644c:	08db      	lsrs	r3, r3, #3
    644e:	0768      	lsls	r0, r5, #29
    6450:	4318      	orrs	r0, r3
    6452:	026d      	lsls	r5, r5, #9
    6454:	0553      	lsls	r3, r2, #21
    6456:	4680      	mov	r8, r0
    6458:	0b2d      	lsrs	r5, r5, #12
    645a:	0d5b      	lsrs	r3, r3, #21
    645c:	400c      	ands	r4, r1
    645e:	e67d      	b.n	615c <__aeabi_dmul+0xcc>
    6460:	2280      	movs	r2, #128	; 0x80
    6462:	4659      	mov	r1, fp
    6464:	0312      	lsls	r2, r2, #12
    6466:	4211      	tst	r1, r2
    6468:	d008      	beq.n	647c <__aeabi_dmul+0x3ec>
    646a:	4215      	tst	r5, r2
    646c:	d106      	bne.n	647c <__aeabi_dmul+0x3ec>
    646e:	4315      	orrs	r5, r2
    6470:	032d      	lsls	r5, r5, #12
    6472:	4698      	mov	r8, r3
    6474:	0b2d      	lsrs	r5, r5, #12
    6476:	464c      	mov	r4, r9
    6478:	4b41      	ldr	r3, [pc, #260]	; (6580 <__aeabi_dmul+0x4f0>)
    647a:	e66f      	b.n	615c <__aeabi_dmul+0xcc>
    647c:	465d      	mov	r5, fp
    647e:	4315      	orrs	r5, r2
    6480:	032d      	lsls	r5, r5, #12
    6482:	0b2d      	lsrs	r5, r5, #12
    6484:	4b3e      	ldr	r3, [pc, #248]	; (6580 <__aeabi_dmul+0x4f0>)
    6486:	e669      	b.n	615c <__aeabi_dmul+0xcc>
    6488:	0003      	movs	r3, r0
    648a:	4655      	mov	r5, sl
    648c:	3b28      	subs	r3, #40	; 0x28
    648e:	409d      	lsls	r5, r3
    6490:	2300      	movs	r3, #0
    6492:	e6bc      	b.n	620e <__aeabi_dmul+0x17e>
    6494:	4650      	mov	r0, sl
    6496:	f000 fd79 	bl	6f8c <__clzsi2>
    649a:	3020      	adds	r0, #32
    649c:	e6a8      	b.n	61f0 <__aeabi_dmul+0x160>
    649e:	0003      	movs	r3, r0
    64a0:	3b28      	subs	r3, #40	; 0x28
    64a2:	409f      	lsls	r7, r3
    64a4:	2300      	movs	r3, #0
    64a6:	46bb      	mov	fp, r7
    64a8:	4698      	mov	r8, r3
    64aa:	e689      	b.n	61c0 <__aeabi_dmul+0x130>
    64ac:	f000 fd6e 	bl	6f8c <__clzsi2>
    64b0:	3020      	adds	r0, #32
    64b2:	e673      	b.n	619c <__aeabi_dmul+0x10c>
    64b4:	2401      	movs	r4, #1
    64b6:	1aa6      	subs	r6, r4, r2
    64b8:	2e38      	cmp	r6, #56	; 0x38
    64ba:	dd07      	ble.n	64cc <__aeabi_dmul+0x43c>
    64bc:	2200      	movs	r2, #0
    64be:	400c      	ands	r4, r1
    64c0:	2300      	movs	r3, #0
    64c2:	2500      	movs	r5, #0
    64c4:	4690      	mov	r8, r2
    64c6:	e649      	b.n	615c <__aeabi_dmul+0xcc>
    64c8:	9e02      	ldr	r6, [sp, #8]
    64ca:	e7a3      	b.n	6414 <__aeabi_dmul+0x384>
    64cc:	2e1f      	cmp	r6, #31
    64ce:	dc20      	bgt.n	6512 <__aeabi_dmul+0x482>
    64d0:	2220      	movs	r2, #32
    64d2:	002c      	movs	r4, r5
    64d4:	0018      	movs	r0, r3
    64d6:	1b92      	subs	r2, r2, r6
    64d8:	40f0      	lsrs	r0, r6
    64da:	4094      	lsls	r4, r2
    64dc:	4093      	lsls	r3, r2
    64de:	4304      	orrs	r4, r0
    64e0:	1e58      	subs	r0, r3, #1
    64e2:	4183      	sbcs	r3, r0
    64e4:	431c      	orrs	r4, r3
    64e6:	40f5      	lsrs	r5, r6
    64e8:	0763      	lsls	r3, r4, #29
    64ea:	d009      	beq.n	6500 <__aeabi_dmul+0x470>
    64ec:	230f      	movs	r3, #15
    64ee:	4023      	ands	r3, r4
    64f0:	2b04      	cmp	r3, #4
    64f2:	d005      	beq.n	6500 <__aeabi_dmul+0x470>
    64f4:	0023      	movs	r3, r4
    64f6:	1d1c      	adds	r4, r3, #4
    64f8:	429c      	cmp	r4, r3
    64fa:	4192      	sbcs	r2, r2
    64fc:	4252      	negs	r2, r2
    64fe:	18ad      	adds	r5, r5, r2
    6500:	022b      	lsls	r3, r5, #8
    6502:	d51f      	bpl.n	6544 <__aeabi_dmul+0x4b4>
    6504:	2401      	movs	r4, #1
    6506:	2200      	movs	r2, #0
    6508:	400c      	ands	r4, r1
    650a:	2301      	movs	r3, #1
    650c:	2500      	movs	r5, #0
    650e:	4690      	mov	r8, r2
    6510:	e624      	b.n	615c <__aeabi_dmul+0xcc>
    6512:	201f      	movs	r0, #31
    6514:	002c      	movs	r4, r5
    6516:	4240      	negs	r0, r0
    6518:	1a82      	subs	r2, r0, r2
    651a:	40d4      	lsrs	r4, r2
    651c:	2e20      	cmp	r6, #32
    651e:	d01c      	beq.n	655a <__aeabi_dmul+0x4ca>
    6520:	2240      	movs	r2, #64	; 0x40
    6522:	1b96      	subs	r6, r2, r6
    6524:	40b5      	lsls	r5, r6
    6526:	432b      	orrs	r3, r5
    6528:	1e58      	subs	r0, r3, #1
    652a:	4183      	sbcs	r3, r0
    652c:	2007      	movs	r0, #7
    652e:	4323      	orrs	r3, r4
    6530:	4018      	ands	r0, r3
    6532:	2500      	movs	r5, #0
    6534:	2800      	cmp	r0, #0
    6536:	d009      	beq.n	654c <__aeabi_dmul+0x4bc>
    6538:	220f      	movs	r2, #15
    653a:	2500      	movs	r5, #0
    653c:	401a      	ands	r2, r3
    653e:	001c      	movs	r4, r3
    6540:	2a04      	cmp	r2, #4
    6542:	d1d8      	bne.n	64f6 <__aeabi_dmul+0x466>
    6544:	0023      	movs	r3, r4
    6546:	0768      	lsls	r0, r5, #29
    6548:	026d      	lsls	r5, r5, #9
    654a:	0b2d      	lsrs	r5, r5, #12
    654c:	2401      	movs	r4, #1
    654e:	08db      	lsrs	r3, r3, #3
    6550:	4303      	orrs	r3, r0
    6552:	4698      	mov	r8, r3
    6554:	400c      	ands	r4, r1
    6556:	2300      	movs	r3, #0
    6558:	e600      	b.n	615c <__aeabi_dmul+0xcc>
    655a:	2500      	movs	r5, #0
    655c:	e7e3      	b.n	6526 <__aeabi_dmul+0x496>
    655e:	2280      	movs	r2, #128	; 0x80
    6560:	2401      	movs	r4, #1
    6562:	0312      	lsls	r2, r2, #12
    6564:	4315      	orrs	r5, r2
    6566:	032d      	lsls	r5, r5, #12
    6568:	4698      	mov	r8, r3
    656a:	0b2d      	lsrs	r5, r5, #12
    656c:	400c      	ands	r4, r1
    656e:	4b04      	ldr	r3, [pc, #16]	; (6580 <__aeabi_dmul+0x4f0>)
    6570:	e5f4      	b.n	615c <__aeabi_dmul+0xcc>
    6572:	46c0      	nop			; (mov r8, r8)
    6574:	000003ff 	.word	0x000003ff
    6578:	feffffff 	.word	0xfeffffff
    657c:	000007fe 	.word	0x000007fe
    6580:	000007ff 	.word	0x000007ff

00006584 <__aeabi_dsub>:
    6584:	b5f0      	push	{r4, r5, r6, r7, lr}
    6586:	4657      	mov	r7, sl
    6588:	464e      	mov	r6, r9
    658a:	4645      	mov	r5, r8
    658c:	b4e0      	push	{r5, r6, r7}
    658e:	000e      	movs	r6, r1
    6590:	0011      	movs	r1, r2
    6592:	0ff2      	lsrs	r2, r6, #31
    6594:	4692      	mov	sl, r2
    6596:	00c5      	lsls	r5, r0, #3
    6598:	0f42      	lsrs	r2, r0, #29
    659a:	0318      	lsls	r0, r3, #12
    659c:	0337      	lsls	r7, r6, #12
    659e:	0074      	lsls	r4, r6, #1
    65a0:	0a40      	lsrs	r0, r0, #9
    65a2:	0f4e      	lsrs	r6, r1, #29
    65a4:	0a7f      	lsrs	r7, r7, #9
    65a6:	4330      	orrs	r0, r6
    65a8:	4ecf      	ldr	r6, [pc, #828]	; (68e8 <__aeabi_dsub+0x364>)
    65aa:	4317      	orrs	r7, r2
    65ac:	005a      	lsls	r2, r3, #1
    65ae:	0d64      	lsrs	r4, r4, #21
    65b0:	0d52      	lsrs	r2, r2, #21
    65b2:	0fdb      	lsrs	r3, r3, #31
    65b4:	00c9      	lsls	r1, r1, #3
    65b6:	42b2      	cmp	r2, r6
    65b8:	d100      	bne.n	65bc <__aeabi_dsub+0x38>
    65ba:	e0e5      	b.n	6788 <__aeabi_dsub+0x204>
    65bc:	2601      	movs	r6, #1
    65be:	4073      	eors	r3, r6
    65c0:	1aa6      	subs	r6, r4, r2
    65c2:	46b4      	mov	ip, r6
    65c4:	4553      	cmp	r3, sl
    65c6:	d100      	bne.n	65ca <__aeabi_dsub+0x46>
    65c8:	e0af      	b.n	672a <__aeabi_dsub+0x1a6>
    65ca:	2e00      	cmp	r6, #0
    65cc:	dc00      	bgt.n	65d0 <__aeabi_dsub+0x4c>
    65ce:	e10d      	b.n	67ec <__aeabi_dsub+0x268>
    65d0:	2a00      	cmp	r2, #0
    65d2:	d13a      	bne.n	664a <__aeabi_dsub+0xc6>
    65d4:	0003      	movs	r3, r0
    65d6:	430b      	orrs	r3, r1
    65d8:	d000      	beq.n	65dc <__aeabi_dsub+0x58>
    65da:	e0e4      	b.n	67a6 <__aeabi_dsub+0x222>
    65dc:	076b      	lsls	r3, r5, #29
    65de:	d009      	beq.n	65f4 <__aeabi_dsub+0x70>
    65e0:	230f      	movs	r3, #15
    65e2:	402b      	ands	r3, r5
    65e4:	2b04      	cmp	r3, #4
    65e6:	d005      	beq.n	65f4 <__aeabi_dsub+0x70>
    65e8:	1d2b      	adds	r3, r5, #4
    65ea:	42ab      	cmp	r3, r5
    65ec:	41ad      	sbcs	r5, r5
    65ee:	426d      	negs	r5, r5
    65f0:	197f      	adds	r7, r7, r5
    65f2:	001d      	movs	r5, r3
    65f4:	023b      	lsls	r3, r7, #8
    65f6:	d400      	bmi.n	65fa <__aeabi_dsub+0x76>
    65f8:	e088      	b.n	670c <__aeabi_dsub+0x188>
    65fa:	4bbb      	ldr	r3, [pc, #748]	; (68e8 <__aeabi_dsub+0x364>)
    65fc:	3401      	adds	r4, #1
    65fe:	429c      	cmp	r4, r3
    6600:	d100      	bne.n	6604 <__aeabi_dsub+0x80>
    6602:	e110      	b.n	6826 <__aeabi_dsub+0x2a2>
    6604:	003a      	movs	r2, r7
    6606:	4bb9      	ldr	r3, [pc, #740]	; (68ec <__aeabi_dsub+0x368>)
    6608:	4651      	mov	r1, sl
    660a:	401a      	ands	r2, r3
    660c:	2301      	movs	r3, #1
    660e:	0750      	lsls	r0, r2, #29
    6610:	08ed      	lsrs	r5, r5, #3
    6612:	0252      	lsls	r2, r2, #9
    6614:	0564      	lsls	r4, r4, #21
    6616:	4305      	orrs	r5, r0
    6618:	0b12      	lsrs	r2, r2, #12
    661a:	0d64      	lsrs	r4, r4, #21
    661c:	400b      	ands	r3, r1
    661e:	2100      	movs	r1, #0
    6620:	0028      	movs	r0, r5
    6622:	0312      	lsls	r2, r2, #12
    6624:	0d0d      	lsrs	r5, r1, #20
    6626:	0b12      	lsrs	r2, r2, #12
    6628:	0564      	lsls	r4, r4, #21
    662a:	052d      	lsls	r5, r5, #20
    662c:	4315      	orrs	r5, r2
    662e:	0862      	lsrs	r2, r4, #1
    6630:	4caf      	ldr	r4, [pc, #700]	; (68f0 <__aeabi_dsub+0x36c>)
    6632:	07db      	lsls	r3, r3, #31
    6634:	402c      	ands	r4, r5
    6636:	4314      	orrs	r4, r2
    6638:	0064      	lsls	r4, r4, #1
    663a:	0864      	lsrs	r4, r4, #1
    663c:	431c      	orrs	r4, r3
    663e:	0021      	movs	r1, r4
    6640:	bc1c      	pop	{r2, r3, r4}
    6642:	4690      	mov	r8, r2
    6644:	4699      	mov	r9, r3
    6646:	46a2      	mov	sl, r4
    6648:	bdf0      	pop	{r4, r5, r6, r7, pc}
    664a:	4ba7      	ldr	r3, [pc, #668]	; (68e8 <__aeabi_dsub+0x364>)
    664c:	429c      	cmp	r4, r3
    664e:	d0c5      	beq.n	65dc <__aeabi_dsub+0x58>
    6650:	2380      	movs	r3, #128	; 0x80
    6652:	041b      	lsls	r3, r3, #16
    6654:	4318      	orrs	r0, r3
    6656:	4663      	mov	r3, ip
    6658:	2b38      	cmp	r3, #56	; 0x38
    665a:	dd00      	ble.n	665e <__aeabi_dsub+0xda>
    665c:	e0fd      	b.n	685a <__aeabi_dsub+0x2d6>
    665e:	2b1f      	cmp	r3, #31
    6660:	dd00      	ble.n	6664 <__aeabi_dsub+0xe0>
    6662:	e130      	b.n	68c6 <__aeabi_dsub+0x342>
    6664:	4662      	mov	r2, ip
    6666:	2320      	movs	r3, #32
    6668:	1a9b      	subs	r3, r3, r2
    666a:	0002      	movs	r2, r0
    666c:	409a      	lsls	r2, r3
    666e:	4666      	mov	r6, ip
    6670:	4690      	mov	r8, r2
    6672:	000a      	movs	r2, r1
    6674:	4099      	lsls	r1, r3
    6676:	40f2      	lsrs	r2, r6
    6678:	4646      	mov	r6, r8
    667a:	1e4b      	subs	r3, r1, #1
    667c:	4199      	sbcs	r1, r3
    667e:	4332      	orrs	r2, r6
    6680:	4311      	orrs	r1, r2
    6682:	4663      	mov	r3, ip
    6684:	0002      	movs	r2, r0
    6686:	40da      	lsrs	r2, r3
    6688:	1a69      	subs	r1, r5, r1
    668a:	428d      	cmp	r5, r1
    668c:	419b      	sbcs	r3, r3
    668e:	000d      	movs	r5, r1
    6690:	1aba      	subs	r2, r7, r2
    6692:	425b      	negs	r3, r3
    6694:	1ad7      	subs	r7, r2, r3
    6696:	023b      	lsls	r3, r7, #8
    6698:	d535      	bpl.n	6706 <__aeabi_dsub+0x182>
    669a:	027a      	lsls	r2, r7, #9
    669c:	0a53      	lsrs	r3, r2, #9
    669e:	4698      	mov	r8, r3
    66a0:	4643      	mov	r3, r8
    66a2:	2b00      	cmp	r3, #0
    66a4:	d100      	bne.n	66a8 <__aeabi_dsub+0x124>
    66a6:	e0c4      	b.n	6832 <__aeabi_dsub+0x2ae>
    66a8:	4640      	mov	r0, r8
    66aa:	f000 fc6f 	bl	6f8c <__clzsi2>
    66ae:	0003      	movs	r3, r0
    66b0:	3b08      	subs	r3, #8
    66b2:	2b1f      	cmp	r3, #31
    66b4:	dd00      	ble.n	66b8 <__aeabi_dsub+0x134>
    66b6:	e0c5      	b.n	6844 <__aeabi_dsub+0x2c0>
    66b8:	2220      	movs	r2, #32
    66ba:	0029      	movs	r1, r5
    66bc:	1ad2      	subs	r2, r2, r3
    66be:	4647      	mov	r7, r8
    66c0:	40d1      	lsrs	r1, r2
    66c2:	409f      	lsls	r7, r3
    66c4:	000a      	movs	r2, r1
    66c6:	409d      	lsls	r5, r3
    66c8:	433a      	orrs	r2, r7
    66ca:	429c      	cmp	r4, r3
    66cc:	dd00      	ble.n	66d0 <__aeabi_dsub+0x14c>
    66ce:	e0c0      	b.n	6852 <__aeabi_dsub+0x2ce>
    66d0:	1b1c      	subs	r4, r3, r4
    66d2:	1c63      	adds	r3, r4, #1
    66d4:	2b1f      	cmp	r3, #31
    66d6:	dd00      	ble.n	66da <__aeabi_dsub+0x156>
    66d8:	e0e4      	b.n	68a4 <__aeabi_dsub+0x320>
    66da:	2120      	movs	r1, #32
    66dc:	0014      	movs	r4, r2
    66de:	0028      	movs	r0, r5
    66e0:	1ac9      	subs	r1, r1, r3
    66e2:	40d8      	lsrs	r0, r3
    66e4:	408c      	lsls	r4, r1
    66e6:	408d      	lsls	r5, r1
    66e8:	4304      	orrs	r4, r0
    66ea:	40da      	lsrs	r2, r3
    66ec:	1e68      	subs	r0, r5, #1
    66ee:	4185      	sbcs	r5, r0
    66f0:	0017      	movs	r7, r2
    66f2:	4325      	orrs	r5, r4
    66f4:	2400      	movs	r4, #0
    66f6:	e771      	b.n	65dc <__aeabi_dsub+0x58>
    66f8:	4642      	mov	r2, r8
    66fa:	4663      	mov	r3, ip
    66fc:	431a      	orrs	r2, r3
    66fe:	d100      	bne.n	6702 <__aeabi_dsub+0x17e>
    6700:	e24c      	b.n	6b9c <__aeabi_dsub+0x618>
    6702:	4667      	mov	r7, ip
    6704:	4645      	mov	r5, r8
    6706:	076b      	lsls	r3, r5, #29
    6708:	d000      	beq.n	670c <__aeabi_dsub+0x188>
    670a:	e769      	b.n	65e0 <__aeabi_dsub+0x5c>
    670c:	2301      	movs	r3, #1
    670e:	4651      	mov	r1, sl
    6710:	0778      	lsls	r0, r7, #29
    6712:	08ed      	lsrs	r5, r5, #3
    6714:	08fa      	lsrs	r2, r7, #3
    6716:	400b      	ands	r3, r1
    6718:	4305      	orrs	r5, r0
    671a:	4973      	ldr	r1, [pc, #460]	; (68e8 <__aeabi_dsub+0x364>)
    671c:	428c      	cmp	r4, r1
    671e:	d038      	beq.n	6792 <__aeabi_dsub+0x20e>
    6720:	0312      	lsls	r2, r2, #12
    6722:	0564      	lsls	r4, r4, #21
    6724:	0b12      	lsrs	r2, r2, #12
    6726:	0d64      	lsrs	r4, r4, #21
    6728:	e779      	b.n	661e <__aeabi_dsub+0x9a>
    672a:	2e00      	cmp	r6, #0
    672c:	dc00      	bgt.n	6730 <__aeabi_dsub+0x1ac>
    672e:	e09a      	b.n	6866 <__aeabi_dsub+0x2e2>
    6730:	2a00      	cmp	r2, #0
    6732:	d047      	beq.n	67c4 <__aeabi_dsub+0x240>
    6734:	4a6c      	ldr	r2, [pc, #432]	; (68e8 <__aeabi_dsub+0x364>)
    6736:	4294      	cmp	r4, r2
    6738:	d100      	bne.n	673c <__aeabi_dsub+0x1b8>
    673a:	e74f      	b.n	65dc <__aeabi_dsub+0x58>
    673c:	2280      	movs	r2, #128	; 0x80
    673e:	0412      	lsls	r2, r2, #16
    6740:	4310      	orrs	r0, r2
    6742:	4662      	mov	r2, ip
    6744:	2a38      	cmp	r2, #56	; 0x38
    6746:	dc00      	bgt.n	674a <__aeabi_dsub+0x1c6>
    6748:	e108      	b.n	695c <__aeabi_dsub+0x3d8>
    674a:	4301      	orrs	r1, r0
    674c:	1e48      	subs	r0, r1, #1
    674e:	4181      	sbcs	r1, r0
    6750:	2200      	movs	r2, #0
    6752:	b2c9      	uxtb	r1, r1
    6754:	1949      	adds	r1, r1, r5
    6756:	19d2      	adds	r2, r2, r7
    6758:	42a9      	cmp	r1, r5
    675a:	41bf      	sbcs	r7, r7
    675c:	000d      	movs	r5, r1
    675e:	427f      	negs	r7, r7
    6760:	18bf      	adds	r7, r7, r2
    6762:	023a      	lsls	r2, r7, #8
    6764:	d400      	bmi.n	6768 <__aeabi_dsub+0x1e4>
    6766:	e142      	b.n	69ee <__aeabi_dsub+0x46a>
    6768:	4a5f      	ldr	r2, [pc, #380]	; (68e8 <__aeabi_dsub+0x364>)
    676a:	3401      	adds	r4, #1
    676c:	4294      	cmp	r4, r2
    676e:	d100      	bne.n	6772 <__aeabi_dsub+0x1ee>
    6770:	e14e      	b.n	6a10 <__aeabi_dsub+0x48c>
    6772:	2001      	movs	r0, #1
    6774:	4a5d      	ldr	r2, [pc, #372]	; (68ec <__aeabi_dsub+0x368>)
    6776:	0869      	lsrs	r1, r5, #1
    6778:	403a      	ands	r2, r7
    677a:	4028      	ands	r0, r5
    677c:	4308      	orrs	r0, r1
    677e:	07d5      	lsls	r5, r2, #31
    6780:	4305      	orrs	r5, r0
    6782:	0857      	lsrs	r7, r2, #1
    6784:	469a      	mov	sl, r3
    6786:	e729      	b.n	65dc <__aeabi_dsub+0x58>
    6788:	0006      	movs	r6, r0
    678a:	430e      	orrs	r6, r1
    678c:	d000      	beq.n	6790 <__aeabi_dsub+0x20c>
    678e:	e717      	b.n	65c0 <__aeabi_dsub+0x3c>
    6790:	e714      	b.n	65bc <__aeabi_dsub+0x38>
    6792:	0029      	movs	r1, r5
    6794:	4311      	orrs	r1, r2
    6796:	d100      	bne.n	679a <__aeabi_dsub+0x216>
    6798:	e1f9      	b.n	6b8e <__aeabi_dsub+0x60a>
    679a:	2180      	movs	r1, #128	; 0x80
    679c:	0309      	lsls	r1, r1, #12
    679e:	430a      	orrs	r2, r1
    67a0:	0312      	lsls	r2, r2, #12
    67a2:	0b12      	lsrs	r2, r2, #12
    67a4:	e73b      	b.n	661e <__aeabi_dsub+0x9a>
    67a6:	2301      	movs	r3, #1
    67a8:	425b      	negs	r3, r3
    67aa:	4698      	mov	r8, r3
    67ac:	44c4      	add	ip, r8
    67ae:	4663      	mov	r3, ip
    67b0:	2b00      	cmp	r3, #0
    67b2:	d172      	bne.n	689a <__aeabi_dsub+0x316>
    67b4:	1a69      	subs	r1, r5, r1
    67b6:	428d      	cmp	r5, r1
    67b8:	419b      	sbcs	r3, r3
    67ba:	1a3f      	subs	r7, r7, r0
    67bc:	425b      	negs	r3, r3
    67be:	1aff      	subs	r7, r7, r3
    67c0:	000d      	movs	r5, r1
    67c2:	e768      	b.n	6696 <__aeabi_dsub+0x112>
    67c4:	0002      	movs	r2, r0
    67c6:	430a      	orrs	r2, r1
    67c8:	d100      	bne.n	67cc <__aeabi_dsub+0x248>
    67ca:	e707      	b.n	65dc <__aeabi_dsub+0x58>
    67cc:	2201      	movs	r2, #1
    67ce:	4252      	negs	r2, r2
    67d0:	4690      	mov	r8, r2
    67d2:	44c4      	add	ip, r8
    67d4:	4662      	mov	r2, ip
    67d6:	2a00      	cmp	r2, #0
    67d8:	d000      	beq.n	67dc <__aeabi_dsub+0x258>
    67da:	e0e6      	b.n	69aa <__aeabi_dsub+0x426>
    67dc:	1869      	adds	r1, r5, r1
    67de:	42a9      	cmp	r1, r5
    67e0:	41b6      	sbcs	r6, r6
    67e2:	183f      	adds	r7, r7, r0
    67e4:	4276      	negs	r6, r6
    67e6:	19f7      	adds	r7, r6, r7
    67e8:	000d      	movs	r5, r1
    67ea:	e7ba      	b.n	6762 <__aeabi_dsub+0x1de>
    67ec:	2e00      	cmp	r6, #0
    67ee:	d000      	beq.n	67f2 <__aeabi_dsub+0x26e>
    67f0:	e080      	b.n	68f4 <__aeabi_dsub+0x370>
    67f2:	1c62      	adds	r2, r4, #1
    67f4:	0552      	lsls	r2, r2, #21
    67f6:	0d52      	lsrs	r2, r2, #21
    67f8:	2a01      	cmp	r2, #1
    67fa:	dc00      	bgt.n	67fe <__aeabi_dsub+0x27a>
    67fc:	e0f9      	b.n	69f2 <__aeabi_dsub+0x46e>
    67fe:	1a6a      	subs	r2, r5, r1
    6800:	4691      	mov	r9, r2
    6802:	454d      	cmp	r5, r9
    6804:	41b6      	sbcs	r6, r6
    6806:	1a3a      	subs	r2, r7, r0
    6808:	4276      	negs	r6, r6
    680a:	1b92      	subs	r2, r2, r6
    680c:	4690      	mov	r8, r2
    680e:	0212      	lsls	r2, r2, #8
    6810:	d400      	bmi.n	6814 <__aeabi_dsub+0x290>
    6812:	e099      	b.n	6948 <__aeabi_dsub+0x3c4>
    6814:	1b4d      	subs	r5, r1, r5
    6816:	42a9      	cmp	r1, r5
    6818:	4189      	sbcs	r1, r1
    681a:	1bc7      	subs	r7, r0, r7
    681c:	4249      	negs	r1, r1
    681e:	1a7a      	subs	r2, r7, r1
    6820:	4690      	mov	r8, r2
    6822:	469a      	mov	sl, r3
    6824:	e73c      	b.n	66a0 <__aeabi_dsub+0x11c>
    6826:	4652      	mov	r2, sl
    6828:	2301      	movs	r3, #1
    682a:	2500      	movs	r5, #0
    682c:	4013      	ands	r3, r2
    682e:	2200      	movs	r2, #0
    6830:	e6f5      	b.n	661e <__aeabi_dsub+0x9a>
    6832:	0028      	movs	r0, r5
    6834:	f000 fbaa 	bl	6f8c <__clzsi2>
    6838:	3020      	adds	r0, #32
    683a:	0003      	movs	r3, r0
    683c:	3b08      	subs	r3, #8
    683e:	2b1f      	cmp	r3, #31
    6840:	dc00      	bgt.n	6844 <__aeabi_dsub+0x2c0>
    6842:	e739      	b.n	66b8 <__aeabi_dsub+0x134>
    6844:	002a      	movs	r2, r5
    6846:	3828      	subs	r0, #40	; 0x28
    6848:	4082      	lsls	r2, r0
    684a:	2500      	movs	r5, #0
    684c:	429c      	cmp	r4, r3
    684e:	dc00      	bgt.n	6852 <__aeabi_dsub+0x2ce>
    6850:	e73e      	b.n	66d0 <__aeabi_dsub+0x14c>
    6852:	4f26      	ldr	r7, [pc, #152]	; (68ec <__aeabi_dsub+0x368>)
    6854:	1ae4      	subs	r4, r4, r3
    6856:	4017      	ands	r7, r2
    6858:	e6c0      	b.n	65dc <__aeabi_dsub+0x58>
    685a:	4301      	orrs	r1, r0
    685c:	1e48      	subs	r0, r1, #1
    685e:	4181      	sbcs	r1, r0
    6860:	2200      	movs	r2, #0
    6862:	b2c9      	uxtb	r1, r1
    6864:	e710      	b.n	6688 <__aeabi_dsub+0x104>
    6866:	2e00      	cmp	r6, #0
    6868:	d000      	beq.n	686c <__aeabi_dsub+0x2e8>
    686a:	e0f1      	b.n	6a50 <__aeabi_dsub+0x4cc>
    686c:	1c62      	adds	r2, r4, #1
    686e:	4694      	mov	ip, r2
    6870:	0552      	lsls	r2, r2, #21
    6872:	0d52      	lsrs	r2, r2, #21
    6874:	2a01      	cmp	r2, #1
    6876:	dc00      	bgt.n	687a <__aeabi_dsub+0x2f6>
    6878:	e0a0      	b.n	69bc <__aeabi_dsub+0x438>
    687a:	4a1b      	ldr	r2, [pc, #108]	; (68e8 <__aeabi_dsub+0x364>)
    687c:	4594      	cmp	ip, r2
    687e:	d100      	bne.n	6882 <__aeabi_dsub+0x2fe>
    6880:	e0c5      	b.n	6a0e <__aeabi_dsub+0x48a>
    6882:	1869      	adds	r1, r5, r1
    6884:	42a9      	cmp	r1, r5
    6886:	4192      	sbcs	r2, r2
    6888:	183f      	adds	r7, r7, r0
    688a:	4252      	negs	r2, r2
    688c:	19d2      	adds	r2, r2, r7
    688e:	0849      	lsrs	r1, r1, #1
    6890:	07d5      	lsls	r5, r2, #31
    6892:	430d      	orrs	r5, r1
    6894:	0857      	lsrs	r7, r2, #1
    6896:	4664      	mov	r4, ip
    6898:	e6a0      	b.n	65dc <__aeabi_dsub+0x58>
    689a:	4b13      	ldr	r3, [pc, #76]	; (68e8 <__aeabi_dsub+0x364>)
    689c:	429c      	cmp	r4, r3
    689e:	d000      	beq.n	68a2 <__aeabi_dsub+0x31e>
    68a0:	e6d9      	b.n	6656 <__aeabi_dsub+0xd2>
    68a2:	e69b      	b.n	65dc <__aeabi_dsub+0x58>
    68a4:	0011      	movs	r1, r2
    68a6:	3c1f      	subs	r4, #31
    68a8:	40e1      	lsrs	r1, r4
    68aa:	000c      	movs	r4, r1
    68ac:	2b20      	cmp	r3, #32
    68ae:	d100      	bne.n	68b2 <__aeabi_dsub+0x32e>
    68b0:	e080      	b.n	69b4 <__aeabi_dsub+0x430>
    68b2:	2140      	movs	r1, #64	; 0x40
    68b4:	1acb      	subs	r3, r1, r3
    68b6:	409a      	lsls	r2, r3
    68b8:	4315      	orrs	r5, r2
    68ba:	1e6a      	subs	r2, r5, #1
    68bc:	4195      	sbcs	r5, r2
    68be:	2700      	movs	r7, #0
    68c0:	4325      	orrs	r5, r4
    68c2:	2400      	movs	r4, #0
    68c4:	e71f      	b.n	6706 <__aeabi_dsub+0x182>
    68c6:	4663      	mov	r3, ip
    68c8:	0002      	movs	r2, r0
    68ca:	3b20      	subs	r3, #32
    68cc:	40da      	lsrs	r2, r3
    68ce:	4663      	mov	r3, ip
    68d0:	2b20      	cmp	r3, #32
    68d2:	d071      	beq.n	69b8 <__aeabi_dsub+0x434>
    68d4:	2340      	movs	r3, #64	; 0x40
    68d6:	4666      	mov	r6, ip
    68d8:	1b9b      	subs	r3, r3, r6
    68da:	4098      	lsls	r0, r3
    68dc:	4301      	orrs	r1, r0
    68de:	1e48      	subs	r0, r1, #1
    68e0:	4181      	sbcs	r1, r0
    68e2:	4311      	orrs	r1, r2
    68e4:	2200      	movs	r2, #0
    68e6:	e6cf      	b.n	6688 <__aeabi_dsub+0x104>
    68e8:	000007ff 	.word	0x000007ff
    68ec:	ff7fffff 	.word	0xff7fffff
    68f0:	800fffff 	.word	0x800fffff
    68f4:	2c00      	cmp	r4, #0
    68f6:	d048      	beq.n	698a <__aeabi_dsub+0x406>
    68f8:	4cca      	ldr	r4, [pc, #808]	; (6c24 <__aeabi_dsub+0x6a0>)
    68fa:	42a2      	cmp	r2, r4
    68fc:	d100      	bne.n	6900 <__aeabi_dsub+0x37c>
    68fe:	e0a2      	b.n	6a46 <__aeabi_dsub+0x4c2>
    6900:	4274      	negs	r4, r6
    6902:	46a1      	mov	r9, r4
    6904:	2480      	movs	r4, #128	; 0x80
    6906:	0424      	lsls	r4, r4, #16
    6908:	4327      	orrs	r7, r4
    690a:	464c      	mov	r4, r9
    690c:	2c38      	cmp	r4, #56	; 0x38
    690e:	dd00      	ble.n	6912 <__aeabi_dsub+0x38e>
    6910:	e0db      	b.n	6aca <__aeabi_dsub+0x546>
    6912:	2c1f      	cmp	r4, #31
    6914:	dd00      	ble.n	6918 <__aeabi_dsub+0x394>
    6916:	e144      	b.n	6ba2 <__aeabi_dsub+0x61e>
    6918:	464e      	mov	r6, r9
    691a:	2420      	movs	r4, #32
    691c:	1ba4      	subs	r4, r4, r6
    691e:	003e      	movs	r6, r7
    6920:	40a6      	lsls	r6, r4
    6922:	46a2      	mov	sl, r4
    6924:	46b0      	mov	r8, r6
    6926:	464c      	mov	r4, r9
    6928:	002e      	movs	r6, r5
    692a:	40e6      	lsrs	r6, r4
    692c:	46b4      	mov	ip, r6
    692e:	4646      	mov	r6, r8
    6930:	4664      	mov	r4, ip
    6932:	4326      	orrs	r6, r4
    6934:	4654      	mov	r4, sl
    6936:	40a5      	lsls	r5, r4
    6938:	1e6c      	subs	r4, r5, #1
    693a:	41a5      	sbcs	r5, r4
    693c:	0034      	movs	r4, r6
    693e:	432c      	orrs	r4, r5
    6940:	464d      	mov	r5, r9
    6942:	40ef      	lsrs	r7, r5
    6944:	1b0d      	subs	r5, r1, r4
    6946:	e028      	b.n	699a <__aeabi_dsub+0x416>
    6948:	464a      	mov	r2, r9
    694a:	4643      	mov	r3, r8
    694c:	464d      	mov	r5, r9
    694e:	431a      	orrs	r2, r3
    6950:	d000      	beq.n	6954 <__aeabi_dsub+0x3d0>
    6952:	e6a5      	b.n	66a0 <__aeabi_dsub+0x11c>
    6954:	2300      	movs	r3, #0
    6956:	2400      	movs	r4, #0
    6958:	2500      	movs	r5, #0
    695a:	e6de      	b.n	671a <__aeabi_dsub+0x196>
    695c:	2a1f      	cmp	r2, #31
    695e:	dc5a      	bgt.n	6a16 <__aeabi_dsub+0x492>
    6960:	4666      	mov	r6, ip
    6962:	2220      	movs	r2, #32
    6964:	1b92      	subs	r2, r2, r6
    6966:	0006      	movs	r6, r0
    6968:	4096      	lsls	r6, r2
    696a:	4691      	mov	r9, r2
    696c:	46b0      	mov	r8, r6
    696e:	4662      	mov	r2, ip
    6970:	000e      	movs	r6, r1
    6972:	40d6      	lsrs	r6, r2
    6974:	4642      	mov	r2, r8
    6976:	4316      	orrs	r6, r2
    6978:	464a      	mov	r2, r9
    697a:	4091      	lsls	r1, r2
    697c:	1e4a      	subs	r2, r1, #1
    697e:	4191      	sbcs	r1, r2
    6980:	0002      	movs	r2, r0
    6982:	4660      	mov	r0, ip
    6984:	4331      	orrs	r1, r6
    6986:	40c2      	lsrs	r2, r0
    6988:	e6e4      	b.n	6754 <__aeabi_dsub+0x1d0>
    698a:	003c      	movs	r4, r7
    698c:	432c      	orrs	r4, r5
    698e:	d05a      	beq.n	6a46 <__aeabi_dsub+0x4c2>
    6990:	43f4      	mvns	r4, r6
    6992:	46a1      	mov	r9, r4
    6994:	2c00      	cmp	r4, #0
    6996:	d152      	bne.n	6a3e <__aeabi_dsub+0x4ba>
    6998:	1b4d      	subs	r5, r1, r5
    699a:	42a9      	cmp	r1, r5
    699c:	4189      	sbcs	r1, r1
    699e:	1bc7      	subs	r7, r0, r7
    69a0:	4249      	negs	r1, r1
    69a2:	1a7f      	subs	r7, r7, r1
    69a4:	0014      	movs	r4, r2
    69a6:	469a      	mov	sl, r3
    69a8:	e675      	b.n	6696 <__aeabi_dsub+0x112>
    69aa:	4a9e      	ldr	r2, [pc, #632]	; (6c24 <__aeabi_dsub+0x6a0>)
    69ac:	4294      	cmp	r4, r2
    69ae:	d000      	beq.n	69b2 <__aeabi_dsub+0x42e>
    69b0:	e6c7      	b.n	6742 <__aeabi_dsub+0x1be>
    69b2:	e613      	b.n	65dc <__aeabi_dsub+0x58>
    69b4:	2200      	movs	r2, #0
    69b6:	e77f      	b.n	68b8 <__aeabi_dsub+0x334>
    69b8:	2000      	movs	r0, #0
    69ba:	e78f      	b.n	68dc <__aeabi_dsub+0x358>
    69bc:	2c00      	cmp	r4, #0
    69be:	d000      	beq.n	69c2 <__aeabi_dsub+0x43e>
    69c0:	e0c8      	b.n	6b54 <__aeabi_dsub+0x5d0>
    69c2:	003b      	movs	r3, r7
    69c4:	432b      	orrs	r3, r5
    69c6:	d100      	bne.n	69ca <__aeabi_dsub+0x446>
    69c8:	e10f      	b.n	6bea <__aeabi_dsub+0x666>
    69ca:	0003      	movs	r3, r0
    69cc:	430b      	orrs	r3, r1
    69ce:	d100      	bne.n	69d2 <__aeabi_dsub+0x44e>
    69d0:	e604      	b.n	65dc <__aeabi_dsub+0x58>
    69d2:	1869      	adds	r1, r5, r1
    69d4:	42a9      	cmp	r1, r5
    69d6:	419b      	sbcs	r3, r3
    69d8:	183f      	adds	r7, r7, r0
    69da:	425b      	negs	r3, r3
    69dc:	19df      	adds	r7, r3, r7
    69de:	023b      	lsls	r3, r7, #8
    69e0:	d400      	bmi.n	69e4 <__aeabi_dsub+0x460>
    69e2:	e11a      	b.n	6c1a <__aeabi_dsub+0x696>
    69e4:	4b90      	ldr	r3, [pc, #576]	; (6c28 <__aeabi_dsub+0x6a4>)
    69e6:	000d      	movs	r5, r1
    69e8:	401f      	ands	r7, r3
    69ea:	4664      	mov	r4, ip
    69ec:	e5f6      	b.n	65dc <__aeabi_dsub+0x58>
    69ee:	469a      	mov	sl, r3
    69f0:	e689      	b.n	6706 <__aeabi_dsub+0x182>
    69f2:	003a      	movs	r2, r7
    69f4:	432a      	orrs	r2, r5
    69f6:	2c00      	cmp	r4, #0
    69f8:	d15c      	bne.n	6ab4 <__aeabi_dsub+0x530>
    69fa:	2a00      	cmp	r2, #0
    69fc:	d175      	bne.n	6aea <__aeabi_dsub+0x566>
    69fe:	0002      	movs	r2, r0
    6a00:	430a      	orrs	r2, r1
    6a02:	d100      	bne.n	6a06 <__aeabi_dsub+0x482>
    6a04:	e0ca      	b.n	6b9c <__aeabi_dsub+0x618>
    6a06:	0007      	movs	r7, r0
    6a08:	000d      	movs	r5, r1
    6a0a:	469a      	mov	sl, r3
    6a0c:	e5e6      	b.n	65dc <__aeabi_dsub+0x58>
    6a0e:	4664      	mov	r4, ip
    6a10:	2200      	movs	r2, #0
    6a12:	2500      	movs	r5, #0
    6a14:	e681      	b.n	671a <__aeabi_dsub+0x196>
    6a16:	4662      	mov	r2, ip
    6a18:	0006      	movs	r6, r0
    6a1a:	3a20      	subs	r2, #32
    6a1c:	40d6      	lsrs	r6, r2
    6a1e:	4662      	mov	r2, ip
    6a20:	46b0      	mov	r8, r6
    6a22:	2a20      	cmp	r2, #32
    6a24:	d100      	bne.n	6a28 <__aeabi_dsub+0x4a4>
    6a26:	e0b7      	b.n	6b98 <__aeabi_dsub+0x614>
    6a28:	2240      	movs	r2, #64	; 0x40
    6a2a:	4666      	mov	r6, ip
    6a2c:	1b92      	subs	r2, r2, r6
    6a2e:	4090      	lsls	r0, r2
    6a30:	4301      	orrs	r1, r0
    6a32:	4642      	mov	r2, r8
    6a34:	1e48      	subs	r0, r1, #1
    6a36:	4181      	sbcs	r1, r0
    6a38:	4311      	orrs	r1, r2
    6a3a:	2200      	movs	r2, #0
    6a3c:	e68a      	b.n	6754 <__aeabi_dsub+0x1d0>
    6a3e:	4c79      	ldr	r4, [pc, #484]	; (6c24 <__aeabi_dsub+0x6a0>)
    6a40:	42a2      	cmp	r2, r4
    6a42:	d000      	beq.n	6a46 <__aeabi_dsub+0x4c2>
    6a44:	e761      	b.n	690a <__aeabi_dsub+0x386>
    6a46:	0007      	movs	r7, r0
    6a48:	000d      	movs	r5, r1
    6a4a:	0014      	movs	r4, r2
    6a4c:	469a      	mov	sl, r3
    6a4e:	e5c5      	b.n	65dc <__aeabi_dsub+0x58>
    6a50:	2c00      	cmp	r4, #0
    6a52:	d141      	bne.n	6ad8 <__aeabi_dsub+0x554>
    6a54:	003c      	movs	r4, r7
    6a56:	432c      	orrs	r4, r5
    6a58:	d078      	beq.n	6b4c <__aeabi_dsub+0x5c8>
    6a5a:	43f4      	mvns	r4, r6
    6a5c:	46a1      	mov	r9, r4
    6a5e:	2c00      	cmp	r4, #0
    6a60:	d020      	beq.n	6aa4 <__aeabi_dsub+0x520>
    6a62:	4c70      	ldr	r4, [pc, #448]	; (6c24 <__aeabi_dsub+0x6a0>)
    6a64:	42a2      	cmp	r2, r4
    6a66:	d071      	beq.n	6b4c <__aeabi_dsub+0x5c8>
    6a68:	464c      	mov	r4, r9
    6a6a:	2c38      	cmp	r4, #56	; 0x38
    6a6c:	dd00      	ble.n	6a70 <__aeabi_dsub+0x4ec>
    6a6e:	e0b2      	b.n	6bd6 <__aeabi_dsub+0x652>
    6a70:	2c1f      	cmp	r4, #31
    6a72:	dd00      	ble.n	6a76 <__aeabi_dsub+0x4f2>
    6a74:	e0bc      	b.n	6bf0 <__aeabi_dsub+0x66c>
    6a76:	2620      	movs	r6, #32
    6a78:	1b34      	subs	r4, r6, r4
    6a7a:	46a2      	mov	sl, r4
    6a7c:	003c      	movs	r4, r7
    6a7e:	4656      	mov	r6, sl
    6a80:	40b4      	lsls	r4, r6
    6a82:	464e      	mov	r6, r9
    6a84:	46a0      	mov	r8, r4
    6a86:	002c      	movs	r4, r5
    6a88:	40f4      	lsrs	r4, r6
    6a8a:	46a4      	mov	ip, r4
    6a8c:	4644      	mov	r4, r8
    6a8e:	4666      	mov	r6, ip
    6a90:	4334      	orrs	r4, r6
    6a92:	46a4      	mov	ip, r4
    6a94:	4654      	mov	r4, sl
    6a96:	40a5      	lsls	r5, r4
    6a98:	4664      	mov	r4, ip
    6a9a:	1e6e      	subs	r6, r5, #1
    6a9c:	41b5      	sbcs	r5, r6
    6a9e:	4325      	orrs	r5, r4
    6aa0:	464c      	mov	r4, r9
    6aa2:	40e7      	lsrs	r7, r4
    6aa4:	186d      	adds	r5, r5, r1
    6aa6:	428d      	cmp	r5, r1
    6aa8:	4189      	sbcs	r1, r1
    6aaa:	183f      	adds	r7, r7, r0
    6aac:	4249      	negs	r1, r1
    6aae:	19cf      	adds	r7, r1, r7
    6ab0:	0014      	movs	r4, r2
    6ab2:	e656      	b.n	6762 <__aeabi_dsub+0x1de>
    6ab4:	2a00      	cmp	r2, #0
    6ab6:	d12f      	bne.n	6b18 <__aeabi_dsub+0x594>
    6ab8:	0002      	movs	r2, r0
    6aba:	430a      	orrs	r2, r1
    6abc:	d100      	bne.n	6ac0 <__aeabi_dsub+0x53c>
    6abe:	e084      	b.n	6bca <__aeabi_dsub+0x646>
    6ac0:	0007      	movs	r7, r0
    6ac2:	000d      	movs	r5, r1
    6ac4:	469a      	mov	sl, r3
    6ac6:	4c57      	ldr	r4, [pc, #348]	; (6c24 <__aeabi_dsub+0x6a0>)
    6ac8:	e588      	b.n	65dc <__aeabi_dsub+0x58>
    6aca:	433d      	orrs	r5, r7
    6acc:	1e6f      	subs	r7, r5, #1
    6ace:	41bd      	sbcs	r5, r7
    6ad0:	b2ec      	uxtb	r4, r5
    6ad2:	2700      	movs	r7, #0
    6ad4:	1b0d      	subs	r5, r1, r4
    6ad6:	e760      	b.n	699a <__aeabi_dsub+0x416>
    6ad8:	4c52      	ldr	r4, [pc, #328]	; (6c24 <__aeabi_dsub+0x6a0>)
    6ada:	42a2      	cmp	r2, r4
    6adc:	d036      	beq.n	6b4c <__aeabi_dsub+0x5c8>
    6ade:	4274      	negs	r4, r6
    6ae0:	2680      	movs	r6, #128	; 0x80
    6ae2:	0436      	lsls	r6, r6, #16
    6ae4:	46a1      	mov	r9, r4
    6ae6:	4337      	orrs	r7, r6
    6ae8:	e7be      	b.n	6a68 <__aeabi_dsub+0x4e4>
    6aea:	0002      	movs	r2, r0
    6aec:	430a      	orrs	r2, r1
    6aee:	d100      	bne.n	6af2 <__aeabi_dsub+0x56e>
    6af0:	e574      	b.n	65dc <__aeabi_dsub+0x58>
    6af2:	1a6a      	subs	r2, r5, r1
    6af4:	4690      	mov	r8, r2
    6af6:	4545      	cmp	r5, r8
    6af8:	41b6      	sbcs	r6, r6
    6afa:	1a3a      	subs	r2, r7, r0
    6afc:	4276      	negs	r6, r6
    6afe:	1b92      	subs	r2, r2, r6
    6b00:	4694      	mov	ip, r2
    6b02:	0212      	lsls	r2, r2, #8
    6b04:	d400      	bmi.n	6b08 <__aeabi_dsub+0x584>
    6b06:	e5f7      	b.n	66f8 <__aeabi_dsub+0x174>
    6b08:	1b4d      	subs	r5, r1, r5
    6b0a:	42a9      	cmp	r1, r5
    6b0c:	4189      	sbcs	r1, r1
    6b0e:	1bc7      	subs	r7, r0, r7
    6b10:	4249      	negs	r1, r1
    6b12:	1a7f      	subs	r7, r7, r1
    6b14:	469a      	mov	sl, r3
    6b16:	e561      	b.n	65dc <__aeabi_dsub+0x58>
    6b18:	0002      	movs	r2, r0
    6b1a:	430a      	orrs	r2, r1
    6b1c:	d03a      	beq.n	6b94 <__aeabi_dsub+0x610>
    6b1e:	08ed      	lsrs	r5, r5, #3
    6b20:	077c      	lsls	r4, r7, #29
    6b22:	432c      	orrs	r4, r5
    6b24:	2580      	movs	r5, #128	; 0x80
    6b26:	08fa      	lsrs	r2, r7, #3
    6b28:	032d      	lsls	r5, r5, #12
    6b2a:	422a      	tst	r2, r5
    6b2c:	d008      	beq.n	6b40 <__aeabi_dsub+0x5bc>
    6b2e:	08c7      	lsrs	r7, r0, #3
    6b30:	422f      	tst	r7, r5
    6b32:	d105      	bne.n	6b40 <__aeabi_dsub+0x5bc>
    6b34:	0745      	lsls	r5, r0, #29
    6b36:	002c      	movs	r4, r5
    6b38:	003a      	movs	r2, r7
    6b3a:	469a      	mov	sl, r3
    6b3c:	08c9      	lsrs	r1, r1, #3
    6b3e:	430c      	orrs	r4, r1
    6b40:	0f67      	lsrs	r7, r4, #29
    6b42:	00d2      	lsls	r2, r2, #3
    6b44:	00e5      	lsls	r5, r4, #3
    6b46:	4317      	orrs	r7, r2
    6b48:	4c36      	ldr	r4, [pc, #216]	; (6c24 <__aeabi_dsub+0x6a0>)
    6b4a:	e547      	b.n	65dc <__aeabi_dsub+0x58>
    6b4c:	0007      	movs	r7, r0
    6b4e:	000d      	movs	r5, r1
    6b50:	0014      	movs	r4, r2
    6b52:	e543      	b.n	65dc <__aeabi_dsub+0x58>
    6b54:	003a      	movs	r2, r7
    6b56:	432a      	orrs	r2, r5
    6b58:	d043      	beq.n	6be2 <__aeabi_dsub+0x65e>
    6b5a:	0002      	movs	r2, r0
    6b5c:	430a      	orrs	r2, r1
    6b5e:	d019      	beq.n	6b94 <__aeabi_dsub+0x610>
    6b60:	08ed      	lsrs	r5, r5, #3
    6b62:	077c      	lsls	r4, r7, #29
    6b64:	432c      	orrs	r4, r5
    6b66:	2580      	movs	r5, #128	; 0x80
    6b68:	08fa      	lsrs	r2, r7, #3
    6b6a:	032d      	lsls	r5, r5, #12
    6b6c:	422a      	tst	r2, r5
    6b6e:	d007      	beq.n	6b80 <__aeabi_dsub+0x5fc>
    6b70:	08c6      	lsrs	r6, r0, #3
    6b72:	422e      	tst	r6, r5
    6b74:	d104      	bne.n	6b80 <__aeabi_dsub+0x5fc>
    6b76:	0747      	lsls	r7, r0, #29
    6b78:	003c      	movs	r4, r7
    6b7a:	0032      	movs	r2, r6
    6b7c:	08c9      	lsrs	r1, r1, #3
    6b7e:	430c      	orrs	r4, r1
    6b80:	00d7      	lsls	r7, r2, #3
    6b82:	0f62      	lsrs	r2, r4, #29
    6b84:	00e5      	lsls	r5, r4, #3
    6b86:	4317      	orrs	r7, r2
    6b88:	469a      	mov	sl, r3
    6b8a:	4c26      	ldr	r4, [pc, #152]	; (6c24 <__aeabi_dsub+0x6a0>)
    6b8c:	e526      	b.n	65dc <__aeabi_dsub+0x58>
    6b8e:	2200      	movs	r2, #0
    6b90:	2500      	movs	r5, #0
    6b92:	e544      	b.n	661e <__aeabi_dsub+0x9a>
    6b94:	4c23      	ldr	r4, [pc, #140]	; (6c24 <__aeabi_dsub+0x6a0>)
    6b96:	e521      	b.n	65dc <__aeabi_dsub+0x58>
    6b98:	2000      	movs	r0, #0
    6b9a:	e749      	b.n	6a30 <__aeabi_dsub+0x4ac>
    6b9c:	2300      	movs	r3, #0
    6b9e:	2500      	movs	r5, #0
    6ba0:	e5bb      	b.n	671a <__aeabi_dsub+0x196>
    6ba2:	464c      	mov	r4, r9
    6ba4:	003e      	movs	r6, r7
    6ba6:	3c20      	subs	r4, #32
    6ba8:	40e6      	lsrs	r6, r4
    6baa:	464c      	mov	r4, r9
    6bac:	46b4      	mov	ip, r6
    6bae:	2c20      	cmp	r4, #32
    6bb0:	d031      	beq.n	6c16 <__aeabi_dsub+0x692>
    6bb2:	2440      	movs	r4, #64	; 0x40
    6bb4:	464e      	mov	r6, r9
    6bb6:	1ba6      	subs	r6, r4, r6
    6bb8:	40b7      	lsls	r7, r6
    6bba:	433d      	orrs	r5, r7
    6bbc:	1e6c      	subs	r4, r5, #1
    6bbe:	41a5      	sbcs	r5, r4
    6bc0:	4664      	mov	r4, ip
    6bc2:	432c      	orrs	r4, r5
    6bc4:	2700      	movs	r7, #0
    6bc6:	1b0d      	subs	r5, r1, r4
    6bc8:	e6e7      	b.n	699a <__aeabi_dsub+0x416>
    6bca:	2280      	movs	r2, #128	; 0x80
    6bcc:	2300      	movs	r3, #0
    6bce:	0312      	lsls	r2, r2, #12
    6bd0:	4c14      	ldr	r4, [pc, #80]	; (6c24 <__aeabi_dsub+0x6a0>)
    6bd2:	2500      	movs	r5, #0
    6bd4:	e5a1      	b.n	671a <__aeabi_dsub+0x196>
    6bd6:	433d      	orrs	r5, r7
    6bd8:	1e6f      	subs	r7, r5, #1
    6bda:	41bd      	sbcs	r5, r7
    6bdc:	2700      	movs	r7, #0
    6bde:	b2ed      	uxtb	r5, r5
    6be0:	e760      	b.n	6aa4 <__aeabi_dsub+0x520>
    6be2:	0007      	movs	r7, r0
    6be4:	000d      	movs	r5, r1
    6be6:	4c0f      	ldr	r4, [pc, #60]	; (6c24 <__aeabi_dsub+0x6a0>)
    6be8:	e4f8      	b.n	65dc <__aeabi_dsub+0x58>
    6bea:	0007      	movs	r7, r0
    6bec:	000d      	movs	r5, r1
    6bee:	e4f5      	b.n	65dc <__aeabi_dsub+0x58>
    6bf0:	464e      	mov	r6, r9
    6bf2:	003c      	movs	r4, r7
    6bf4:	3e20      	subs	r6, #32
    6bf6:	40f4      	lsrs	r4, r6
    6bf8:	46a0      	mov	r8, r4
    6bfa:	464c      	mov	r4, r9
    6bfc:	2c20      	cmp	r4, #32
    6bfe:	d00e      	beq.n	6c1e <__aeabi_dsub+0x69a>
    6c00:	2440      	movs	r4, #64	; 0x40
    6c02:	464e      	mov	r6, r9
    6c04:	1ba4      	subs	r4, r4, r6
    6c06:	40a7      	lsls	r7, r4
    6c08:	433d      	orrs	r5, r7
    6c0a:	1e6f      	subs	r7, r5, #1
    6c0c:	41bd      	sbcs	r5, r7
    6c0e:	4644      	mov	r4, r8
    6c10:	2700      	movs	r7, #0
    6c12:	4325      	orrs	r5, r4
    6c14:	e746      	b.n	6aa4 <__aeabi_dsub+0x520>
    6c16:	2700      	movs	r7, #0
    6c18:	e7cf      	b.n	6bba <__aeabi_dsub+0x636>
    6c1a:	000d      	movs	r5, r1
    6c1c:	e573      	b.n	6706 <__aeabi_dsub+0x182>
    6c1e:	2700      	movs	r7, #0
    6c20:	e7f2      	b.n	6c08 <__aeabi_dsub+0x684>
    6c22:	46c0      	nop			; (mov r8, r8)
    6c24:	000007ff 	.word	0x000007ff
    6c28:	ff7fffff 	.word	0xff7fffff

00006c2c <__aeabi_dcmpun>:
    6c2c:	b570      	push	{r4, r5, r6, lr}
    6c2e:	4e0e      	ldr	r6, [pc, #56]	; (6c68 <__aeabi_dcmpun+0x3c>)
    6c30:	030c      	lsls	r4, r1, #12
    6c32:	031d      	lsls	r5, r3, #12
    6c34:	0049      	lsls	r1, r1, #1
    6c36:	005b      	lsls	r3, r3, #1
    6c38:	0b24      	lsrs	r4, r4, #12
    6c3a:	0d49      	lsrs	r1, r1, #21
    6c3c:	0b2d      	lsrs	r5, r5, #12
    6c3e:	0d5b      	lsrs	r3, r3, #21
    6c40:	42b1      	cmp	r1, r6
    6c42:	d004      	beq.n	6c4e <__aeabi_dcmpun+0x22>
    6c44:	4908      	ldr	r1, [pc, #32]	; (6c68 <__aeabi_dcmpun+0x3c>)
    6c46:	2000      	movs	r0, #0
    6c48:	428b      	cmp	r3, r1
    6c4a:	d008      	beq.n	6c5e <__aeabi_dcmpun+0x32>
    6c4c:	bd70      	pop	{r4, r5, r6, pc}
    6c4e:	4304      	orrs	r4, r0
    6c50:	2001      	movs	r0, #1
    6c52:	2c00      	cmp	r4, #0
    6c54:	d1fa      	bne.n	6c4c <__aeabi_dcmpun+0x20>
    6c56:	4904      	ldr	r1, [pc, #16]	; (6c68 <__aeabi_dcmpun+0x3c>)
    6c58:	2000      	movs	r0, #0
    6c5a:	428b      	cmp	r3, r1
    6c5c:	d1f6      	bne.n	6c4c <__aeabi_dcmpun+0x20>
    6c5e:	4315      	orrs	r5, r2
    6c60:	0028      	movs	r0, r5
    6c62:	1e45      	subs	r5, r0, #1
    6c64:	41a8      	sbcs	r0, r5
    6c66:	e7f1      	b.n	6c4c <__aeabi_dcmpun+0x20>
    6c68:	000007ff 	.word	0x000007ff

00006c6c <__aeabi_d2iz>:
    6c6c:	030b      	lsls	r3, r1, #12
    6c6e:	b530      	push	{r4, r5, lr}
    6c70:	4d13      	ldr	r5, [pc, #76]	; (6cc0 <__aeabi_d2iz+0x54>)
    6c72:	0b1a      	lsrs	r2, r3, #12
    6c74:	004b      	lsls	r3, r1, #1
    6c76:	0d5b      	lsrs	r3, r3, #21
    6c78:	0fc9      	lsrs	r1, r1, #31
    6c7a:	2400      	movs	r4, #0
    6c7c:	42ab      	cmp	r3, r5
    6c7e:	dd11      	ble.n	6ca4 <__aeabi_d2iz+0x38>
    6c80:	4c10      	ldr	r4, [pc, #64]	; (6cc4 <__aeabi_d2iz+0x58>)
    6c82:	42a3      	cmp	r3, r4
    6c84:	dc10      	bgt.n	6ca8 <__aeabi_d2iz+0x3c>
    6c86:	2480      	movs	r4, #128	; 0x80
    6c88:	0364      	lsls	r4, r4, #13
    6c8a:	4322      	orrs	r2, r4
    6c8c:	4c0e      	ldr	r4, [pc, #56]	; (6cc8 <__aeabi_d2iz+0x5c>)
    6c8e:	1ae4      	subs	r4, r4, r3
    6c90:	2c1f      	cmp	r4, #31
    6c92:	dd0c      	ble.n	6cae <__aeabi_d2iz+0x42>
    6c94:	480d      	ldr	r0, [pc, #52]	; (6ccc <__aeabi_d2iz+0x60>)
    6c96:	1ac3      	subs	r3, r0, r3
    6c98:	40da      	lsrs	r2, r3
    6c9a:	0013      	movs	r3, r2
    6c9c:	425c      	negs	r4, r3
    6c9e:	2900      	cmp	r1, #0
    6ca0:	d100      	bne.n	6ca4 <__aeabi_d2iz+0x38>
    6ca2:	001c      	movs	r4, r3
    6ca4:	0020      	movs	r0, r4
    6ca6:	bd30      	pop	{r4, r5, pc}
    6ca8:	4b09      	ldr	r3, [pc, #36]	; (6cd0 <__aeabi_d2iz+0x64>)
    6caa:	18cc      	adds	r4, r1, r3
    6cac:	e7fa      	b.n	6ca4 <__aeabi_d2iz+0x38>
    6cae:	40e0      	lsrs	r0, r4
    6cb0:	4c08      	ldr	r4, [pc, #32]	; (6cd4 <__aeabi_d2iz+0x68>)
    6cb2:	46a4      	mov	ip, r4
    6cb4:	4463      	add	r3, ip
    6cb6:	409a      	lsls	r2, r3
    6cb8:	0013      	movs	r3, r2
    6cba:	4303      	orrs	r3, r0
    6cbc:	e7ee      	b.n	6c9c <__aeabi_d2iz+0x30>
    6cbe:	46c0      	nop			; (mov r8, r8)
    6cc0:	000003fe 	.word	0x000003fe
    6cc4:	0000041d 	.word	0x0000041d
    6cc8:	00000433 	.word	0x00000433
    6ccc:	00000413 	.word	0x00000413
    6cd0:	7fffffff 	.word	0x7fffffff
    6cd4:	fffffbed 	.word	0xfffffbed

00006cd8 <__aeabi_i2d>:
    6cd8:	b570      	push	{r4, r5, r6, lr}
    6cda:	2800      	cmp	r0, #0
    6cdc:	d030      	beq.n	6d40 <__aeabi_i2d+0x68>
    6cde:	17c3      	asrs	r3, r0, #31
    6ce0:	18c4      	adds	r4, r0, r3
    6ce2:	405c      	eors	r4, r3
    6ce4:	0fc5      	lsrs	r5, r0, #31
    6ce6:	0020      	movs	r0, r4
    6ce8:	f000 f950 	bl	6f8c <__clzsi2>
    6cec:	4b17      	ldr	r3, [pc, #92]	; (6d4c <__aeabi_i2d+0x74>)
    6cee:	4a18      	ldr	r2, [pc, #96]	; (6d50 <__aeabi_i2d+0x78>)
    6cf0:	1a1b      	subs	r3, r3, r0
    6cf2:	1ad2      	subs	r2, r2, r3
    6cf4:	2a1f      	cmp	r2, #31
    6cf6:	dd18      	ble.n	6d2a <__aeabi_i2d+0x52>
    6cf8:	4a16      	ldr	r2, [pc, #88]	; (6d54 <__aeabi_i2d+0x7c>)
    6cfa:	1ad2      	subs	r2, r2, r3
    6cfc:	4094      	lsls	r4, r2
    6cfe:	2200      	movs	r2, #0
    6d00:	0324      	lsls	r4, r4, #12
    6d02:	055b      	lsls	r3, r3, #21
    6d04:	0b24      	lsrs	r4, r4, #12
    6d06:	0d5b      	lsrs	r3, r3, #21
    6d08:	2100      	movs	r1, #0
    6d0a:	0010      	movs	r0, r2
    6d0c:	0324      	lsls	r4, r4, #12
    6d0e:	0d0a      	lsrs	r2, r1, #20
    6d10:	0512      	lsls	r2, r2, #20
    6d12:	0b24      	lsrs	r4, r4, #12
    6d14:	4314      	orrs	r4, r2
    6d16:	4a10      	ldr	r2, [pc, #64]	; (6d58 <__aeabi_i2d+0x80>)
    6d18:	051b      	lsls	r3, r3, #20
    6d1a:	4014      	ands	r4, r2
    6d1c:	431c      	orrs	r4, r3
    6d1e:	0064      	lsls	r4, r4, #1
    6d20:	07ed      	lsls	r5, r5, #31
    6d22:	0864      	lsrs	r4, r4, #1
    6d24:	432c      	orrs	r4, r5
    6d26:	0021      	movs	r1, r4
    6d28:	bd70      	pop	{r4, r5, r6, pc}
    6d2a:	0021      	movs	r1, r4
    6d2c:	4091      	lsls	r1, r2
    6d2e:	000a      	movs	r2, r1
    6d30:	210b      	movs	r1, #11
    6d32:	1a08      	subs	r0, r1, r0
    6d34:	40c4      	lsrs	r4, r0
    6d36:	055b      	lsls	r3, r3, #21
    6d38:	0324      	lsls	r4, r4, #12
    6d3a:	0b24      	lsrs	r4, r4, #12
    6d3c:	0d5b      	lsrs	r3, r3, #21
    6d3e:	e7e3      	b.n	6d08 <__aeabi_i2d+0x30>
    6d40:	2500      	movs	r5, #0
    6d42:	2300      	movs	r3, #0
    6d44:	2400      	movs	r4, #0
    6d46:	2200      	movs	r2, #0
    6d48:	e7de      	b.n	6d08 <__aeabi_i2d+0x30>
    6d4a:	46c0      	nop			; (mov r8, r8)
    6d4c:	0000041e 	.word	0x0000041e
    6d50:	00000433 	.word	0x00000433
    6d54:	00000413 	.word	0x00000413
    6d58:	800fffff 	.word	0x800fffff

00006d5c <__aeabi_ui2d>:
    6d5c:	b570      	push	{r4, r5, r6, lr}
    6d5e:	1e05      	subs	r5, r0, #0
    6d60:	d028      	beq.n	6db4 <__aeabi_ui2d+0x58>
    6d62:	f000 f913 	bl	6f8c <__clzsi2>
    6d66:	4b15      	ldr	r3, [pc, #84]	; (6dbc <__aeabi_ui2d+0x60>)
    6d68:	4a15      	ldr	r2, [pc, #84]	; (6dc0 <__aeabi_ui2d+0x64>)
    6d6a:	1a1b      	subs	r3, r3, r0
    6d6c:	1ad2      	subs	r2, r2, r3
    6d6e:	2a1f      	cmp	r2, #31
    6d70:	dd16      	ble.n	6da0 <__aeabi_ui2d+0x44>
    6d72:	002c      	movs	r4, r5
    6d74:	4a13      	ldr	r2, [pc, #76]	; (6dc4 <__aeabi_ui2d+0x68>)
    6d76:	2500      	movs	r5, #0
    6d78:	1ad2      	subs	r2, r2, r3
    6d7a:	4094      	lsls	r4, r2
    6d7c:	055a      	lsls	r2, r3, #21
    6d7e:	0324      	lsls	r4, r4, #12
    6d80:	0b24      	lsrs	r4, r4, #12
    6d82:	0d52      	lsrs	r2, r2, #21
    6d84:	2100      	movs	r1, #0
    6d86:	0324      	lsls	r4, r4, #12
    6d88:	0d0b      	lsrs	r3, r1, #20
    6d8a:	0b24      	lsrs	r4, r4, #12
    6d8c:	051b      	lsls	r3, r3, #20
    6d8e:	4323      	orrs	r3, r4
    6d90:	4c0d      	ldr	r4, [pc, #52]	; (6dc8 <__aeabi_ui2d+0x6c>)
    6d92:	0512      	lsls	r2, r2, #20
    6d94:	4023      	ands	r3, r4
    6d96:	4313      	orrs	r3, r2
    6d98:	005b      	lsls	r3, r3, #1
    6d9a:	0028      	movs	r0, r5
    6d9c:	0859      	lsrs	r1, r3, #1
    6d9e:	bd70      	pop	{r4, r5, r6, pc}
    6da0:	210b      	movs	r1, #11
    6da2:	002c      	movs	r4, r5
    6da4:	1a08      	subs	r0, r1, r0
    6da6:	40c4      	lsrs	r4, r0
    6da8:	4095      	lsls	r5, r2
    6daa:	0324      	lsls	r4, r4, #12
    6dac:	055a      	lsls	r2, r3, #21
    6dae:	0b24      	lsrs	r4, r4, #12
    6db0:	0d52      	lsrs	r2, r2, #21
    6db2:	e7e7      	b.n	6d84 <__aeabi_ui2d+0x28>
    6db4:	2200      	movs	r2, #0
    6db6:	2400      	movs	r4, #0
    6db8:	e7e4      	b.n	6d84 <__aeabi_ui2d+0x28>
    6dba:	46c0      	nop			; (mov r8, r8)
    6dbc:	0000041e 	.word	0x0000041e
    6dc0:	00000433 	.word	0x00000433
    6dc4:	00000413 	.word	0x00000413
    6dc8:	800fffff 	.word	0x800fffff

00006dcc <__aeabi_f2d>:
    6dcc:	0042      	lsls	r2, r0, #1
    6dce:	0e12      	lsrs	r2, r2, #24
    6dd0:	1c51      	adds	r1, r2, #1
    6dd2:	0243      	lsls	r3, r0, #9
    6dd4:	b2c9      	uxtb	r1, r1
    6dd6:	b570      	push	{r4, r5, r6, lr}
    6dd8:	0a5d      	lsrs	r5, r3, #9
    6dda:	0fc4      	lsrs	r4, r0, #31
    6ddc:	2901      	cmp	r1, #1
    6dde:	dd15      	ble.n	6e0c <__aeabi_f2d+0x40>
    6de0:	21e0      	movs	r1, #224	; 0xe0
    6de2:	0089      	lsls	r1, r1, #2
    6de4:	468c      	mov	ip, r1
    6de6:	076d      	lsls	r5, r5, #29
    6de8:	0b1b      	lsrs	r3, r3, #12
    6dea:	4462      	add	r2, ip
    6dec:	2100      	movs	r1, #0
    6dee:	0028      	movs	r0, r5
    6df0:	0d0d      	lsrs	r5, r1, #20
    6df2:	052d      	lsls	r5, r5, #20
    6df4:	432b      	orrs	r3, r5
    6df6:	4d1c      	ldr	r5, [pc, #112]	; (6e68 <__aeabi_f2d+0x9c>)
    6df8:	0552      	lsls	r2, r2, #21
    6dfa:	402b      	ands	r3, r5
    6dfc:	0852      	lsrs	r2, r2, #1
    6dfe:	4313      	orrs	r3, r2
    6e00:	005b      	lsls	r3, r3, #1
    6e02:	07e4      	lsls	r4, r4, #31
    6e04:	085b      	lsrs	r3, r3, #1
    6e06:	4323      	orrs	r3, r4
    6e08:	0019      	movs	r1, r3
    6e0a:	bd70      	pop	{r4, r5, r6, pc}
    6e0c:	2a00      	cmp	r2, #0
    6e0e:	d115      	bne.n	6e3c <__aeabi_f2d+0x70>
    6e10:	2d00      	cmp	r5, #0
    6e12:	d01f      	beq.n	6e54 <__aeabi_f2d+0x88>
    6e14:	0028      	movs	r0, r5
    6e16:	f000 f8b9 	bl	6f8c <__clzsi2>
    6e1a:	280a      	cmp	r0, #10
    6e1c:	dc1d      	bgt.n	6e5a <__aeabi_f2d+0x8e>
    6e1e:	230b      	movs	r3, #11
    6e20:	002a      	movs	r2, r5
    6e22:	1a1b      	subs	r3, r3, r0
    6e24:	40da      	lsrs	r2, r3
    6e26:	0013      	movs	r3, r2
    6e28:	0002      	movs	r2, r0
    6e2a:	3215      	adds	r2, #21
    6e2c:	4095      	lsls	r5, r2
    6e2e:	4a0f      	ldr	r2, [pc, #60]	; (6e6c <__aeabi_f2d+0xa0>)
    6e30:	031b      	lsls	r3, r3, #12
    6e32:	1a12      	subs	r2, r2, r0
    6e34:	0552      	lsls	r2, r2, #21
    6e36:	0b1b      	lsrs	r3, r3, #12
    6e38:	0d52      	lsrs	r2, r2, #21
    6e3a:	e7d7      	b.n	6dec <__aeabi_f2d+0x20>
    6e3c:	2d00      	cmp	r5, #0
    6e3e:	d006      	beq.n	6e4e <__aeabi_f2d+0x82>
    6e40:	2280      	movs	r2, #128	; 0x80
    6e42:	0b1b      	lsrs	r3, r3, #12
    6e44:	0312      	lsls	r2, r2, #12
    6e46:	4313      	orrs	r3, r2
    6e48:	076d      	lsls	r5, r5, #29
    6e4a:	4a09      	ldr	r2, [pc, #36]	; (6e70 <__aeabi_f2d+0xa4>)
    6e4c:	e7ce      	b.n	6dec <__aeabi_f2d+0x20>
    6e4e:	4a08      	ldr	r2, [pc, #32]	; (6e70 <__aeabi_f2d+0xa4>)
    6e50:	2300      	movs	r3, #0
    6e52:	e7cb      	b.n	6dec <__aeabi_f2d+0x20>
    6e54:	2200      	movs	r2, #0
    6e56:	2300      	movs	r3, #0
    6e58:	e7c8      	b.n	6dec <__aeabi_f2d+0x20>
    6e5a:	0003      	movs	r3, r0
    6e5c:	3b0b      	subs	r3, #11
    6e5e:	409d      	lsls	r5, r3
    6e60:	002b      	movs	r3, r5
    6e62:	2500      	movs	r5, #0
    6e64:	e7e3      	b.n	6e2e <__aeabi_f2d+0x62>
    6e66:	46c0      	nop			; (mov r8, r8)
    6e68:	800fffff 	.word	0x800fffff
    6e6c:	00000389 	.word	0x00000389
    6e70:	000007ff 	.word	0x000007ff

00006e74 <__aeabi_d2f>:
    6e74:	004b      	lsls	r3, r1, #1
    6e76:	b570      	push	{r4, r5, r6, lr}
    6e78:	0d5e      	lsrs	r6, r3, #21
    6e7a:	030c      	lsls	r4, r1, #12
    6e7c:	1c75      	adds	r5, r6, #1
    6e7e:	0a64      	lsrs	r4, r4, #9
    6e80:	0f42      	lsrs	r2, r0, #29
    6e82:	056d      	lsls	r5, r5, #21
    6e84:	4322      	orrs	r2, r4
    6e86:	0fc9      	lsrs	r1, r1, #31
    6e88:	00c4      	lsls	r4, r0, #3
    6e8a:	0d6d      	lsrs	r5, r5, #21
    6e8c:	2d01      	cmp	r5, #1
    6e8e:	dd2a      	ble.n	6ee6 <__aeabi_d2f+0x72>
    6e90:	4b3b      	ldr	r3, [pc, #236]	; (6f80 <__aeabi_d2f+0x10c>)
    6e92:	18f3      	adds	r3, r6, r3
    6e94:	2bfe      	cmp	r3, #254	; 0xfe
    6e96:	dc1a      	bgt.n	6ece <__aeabi_d2f+0x5a>
    6e98:	2b00      	cmp	r3, #0
    6e9a:	dd42      	ble.n	6f22 <__aeabi_d2f+0xae>
    6e9c:	0180      	lsls	r0, r0, #6
    6e9e:	1e45      	subs	r5, r0, #1
    6ea0:	41a8      	sbcs	r0, r5
    6ea2:	00d2      	lsls	r2, r2, #3
    6ea4:	4310      	orrs	r0, r2
    6ea6:	0f62      	lsrs	r2, r4, #29
    6ea8:	4302      	orrs	r2, r0
    6eaa:	0750      	lsls	r0, r2, #29
    6eac:	d004      	beq.n	6eb8 <__aeabi_d2f+0x44>
    6eae:	200f      	movs	r0, #15
    6eb0:	4010      	ands	r0, r2
    6eb2:	2804      	cmp	r0, #4
    6eb4:	d000      	beq.n	6eb8 <__aeabi_d2f+0x44>
    6eb6:	3204      	adds	r2, #4
    6eb8:	2080      	movs	r0, #128	; 0x80
    6eba:	04c0      	lsls	r0, r0, #19
    6ebc:	4010      	ands	r0, r2
    6ebe:	d021      	beq.n	6f04 <__aeabi_d2f+0x90>
    6ec0:	3301      	adds	r3, #1
    6ec2:	2bff      	cmp	r3, #255	; 0xff
    6ec4:	d003      	beq.n	6ece <__aeabi_d2f+0x5a>
    6ec6:	0192      	lsls	r2, r2, #6
    6ec8:	0a52      	lsrs	r2, r2, #9
    6eca:	b2db      	uxtb	r3, r3
    6ecc:	e001      	b.n	6ed2 <__aeabi_d2f+0x5e>
    6ece:	23ff      	movs	r3, #255	; 0xff
    6ed0:	2200      	movs	r2, #0
    6ed2:	0252      	lsls	r2, r2, #9
    6ed4:	0a52      	lsrs	r2, r2, #9
    6ed6:	05db      	lsls	r3, r3, #23
    6ed8:	4313      	orrs	r3, r2
    6eda:	005b      	lsls	r3, r3, #1
    6edc:	07c9      	lsls	r1, r1, #31
    6ede:	085b      	lsrs	r3, r3, #1
    6ee0:	430b      	orrs	r3, r1
    6ee2:	0018      	movs	r0, r3
    6ee4:	bd70      	pop	{r4, r5, r6, pc}
    6ee6:	2e00      	cmp	r6, #0
    6ee8:	d007      	beq.n	6efa <__aeabi_d2f+0x86>
    6eea:	4314      	orrs	r4, r2
    6eec:	d0ef      	beq.n	6ece <__aeabi_d2f+0x5a>
    6eee:	2080      	movs	r0, #128	; 0x80
    6ef0:	00d2      	lsls	r2, r2, #3
    6ef2:	0480      	lsls	r0, r0, #18
    6ef4:	4302      	orrs	r2, r0
    6ef6:	23ff      	movs	r3, #255	; 0xff
    6ef8:	e7d7      	b.n	6eaa <__aeabi_d2f+0x36>
    6efa:	4322      	orrs	r2, r4
    6efc:	2300      	movs	r3, #0
    6efe:	2a00      	cmp	r2, #0
    6f00:	d003      	beq.n	6f0a <__aeabi_d2f+0x96>
    6f02:	2205      	movs	r2, #5
    6f04:	08d2      	lsrs	r2, r2, #3
    6f06:	2bff      	cmp	r3, #255	; 0xff
    6f08:	d003      	beq.n	6f12 <__aeabi_d2f+0x9e>
    6f0a:	0252      	lsls	r2, r2, #9
    6f0c:	0a52      	lsrs	r2, r2, #9
    6f0e:	b2db      	uxtb	r3, r3
    6f10:	e7df      	b.n	6ed2 <__aeabi_d2f+0x5e>
    6f12:	2a00      	cmp	r2, #0
    6f14:	d032      	beq.n	6f7c <__aeabi_d2f+0x108>
    6f16:	2080      	movs	r0, #128	; 0x80
    6f18:	03c0      	lsls	r0, r0, #15
    6f1a:	4302      	orrs	r2, r0
    6f1c:	0252      	lsls	r2, r2, #9
    6f1e:	0a52      	lsrs	r2, r2, #9
    6f20:	e7d7      	b.n	6ed2 <__aeabi_d2f+0x5e>
    6f22:	0018      	movs	r0, r3
    6f24:	3017      	adds	r0, #23
    6f26:	db14      	blt.n	6f52 <__aeabi_d2f+0xde>
    6f28:	2080      	movs	r0, #128	; 0x80
    6f2a:	0400      	lsls	r0, r0, #16
    6f2c:	4302      	orrs	r2, r0
    6f2e:	201e      	movs	r0, #30
    6f30:	1ac0      	subs	r0, r0, r3
    6f32:	281f      	cmp	r0, #31
    6f34:	dc0f      	bgt.n	6f56 <__aeabi_d2f+0xe2>
    6f36:	0025      	movs	r5, r4
    6f38:	4b12      	ldr	r3, [pc, #72]	; (6f84 <__aeabi_d2f+0x110>)
    6f3a:	18f3      	adds	r3, r6, r3
    6f3c:	409d      	lsls	r5, r3
    6f3e:	1e6e      	subs	r6, r5, #1
    6f40:	41b5      	sbcs	r5, r6
    6f42:	409a      	lsls	r2, r3
    6f44:	002b      	movs	r3, r5
    6f46:	4313      	orrs	r3, r2
    6f48:	0022      	movs	r2, r4
    6f4a:	40c2      	lsrs	r2, r0
    6f4c:	431a      	orrs	r2, r3
    6f4e:	2300      	movs	r3, #0
    6f50:	e7ab      	b.n	6eaa <__aeabi_d2f+0x36>
    6f52:	2300      	movs	r3, #0
    6f54:	e7d5      	b.n	6f02 <__aeabi_d2f+0x8e>
    6f56:	2502      	movs	r5, #2
    6f58:	426d      	negs	r5, r5
    6f5a:	1aeb      	subs	r3, r5, r3
    6f5c:	0015      	movs	r5, r2
    6f5e:	40dd      	lsrs	r5, r3
    6f60:	2820      	cmp	r0, #32
    6f62:	d009      	beq.n	6f78 <__aeabi_d2f+0x104>
    6f64:	4b08      	ldr	r3, [pc, #32]	; (6f88 <__aeabi_d2f+0x114>)
    6f66:	18f3      	adds	r3, r6, r3
    6f68:	409a      	lsls	r2, r3
    6f6a:	4314      	orrs	r4, r2
    6f6c:	1e62      	subs	r2, r4, #1
    6f6e:	4194      	sbcs	r4, r2
    6f70:	0022      	movs	r2, r4
    6f72:	2300      	movs	r3, #0
    6f74:	432a      	orrs	r2, r5
    6f76:	e798      	b.n	6eaa <__aeabi_d2f+0x36>
    6f78:	2200      	movs	r2, #0
    6f7a:	e7f6      	b.n	6f6a <__aeabi_d2f+0xf6>
    6f7c:	2200      	movs	r2, #0
    6f7e:	e7a8      	b.n	6ed2 <__aeabi_d2f+0x5e>
    6f80:	fffffc80 	.word	0xfffffc80
    6f84:	fffffc82 	.word	0xfffffc82
    6f88:	fffffca2 	.word	0xfffffca2

00006f8c <__clzsi2>:
    6f8c:	211c      	movs	r1, #28
    6f8e:	2301      	movs	r3, #1
    6f90:	041b      	lsls	r3, r3, #16
    6f92:	4298      	cmp	r0, r3
    6f94:	d301      	bcc.n	6f9a <__clzsi2+0xe>
    6f96:	0c00      	lsrs	r0, r0, #16
    6f98:	3910      	subs	r1, #16
    6f9a:	0a1b      	lsrs	r3, r3, #8
    6f9c:	4298      	cmp	r0, r3
    6f9e:	d301      	bcc.n	6fa4 <__clzsi2+0x18>
    6fa0:	0a00      	lsrs	r0, r0, #8
    6fa2:	3908      	subs	r1, #8
    6fa4:	091b      	lsrs	r3, r3, #4
    6fa6:	4298      	cmp	r0, r3
    6fa8:	d301      	bcc.n	6fae <__clzsi2+0x22>
    6faa:	0900      	lsrs	r0, r0, #4
    6fac:	3904      	subs	r1, #4
    6fae:	a202      	add	r2, pc, #8	; (adr r2, 6fb8 <__clzsi2+0x2c>)
    6fb0:	5c10      	ldrb	r0, [r2, r0]
    6fb2:	1840      	adds	r0, r0, r1
    6fb4:	4770      	bx	lr
    6fb6:	46c0      	nop			; (mov r8, r8)
    6fb8:	02020304 	.word	0x02020304
    6fbc:	01010101 	.word	0x01010101
	...

00006fc8 <__errno>:
    6fc8:	4b01      	ldr	r3, [pc, #4]	; (6fd0 <__errno+0x8>)
    6fca:	6818      	ldr	r0, [r3, #0]
    6fcc:	4770      	bx	lr
    6fce:	46c0      	nop			; (mov r8, r8)
    6fd0:	2000011c 	.word	0x2000011c

00006fd4 <__libc_init_array>:
    6fd4:	4b0e      	ldr	r3, [pc, #56]	; (7010 <__libc_init_array+0x3c>)
    6fd6:	b570      	push	{r4, r5, r6, lr}
    6fd8:	2500      	movs	r5, #0
    6fda:	001e      	movs	r6, r3
    6fdc:	4c0d      	ldr	r4, [pc, #52]	; (7014 <__libc_init_array+0x40>)
    6fde:	1ae4      	subs	r4, r4, r3
    6fe0:	10a4      	asrs	r4, r4, #2
    6fe2:	42a5      	cmp	r5, r4
    6fe4:	d004      	beq.n	6ff0 <__libc_init_array+0x1c>
    6fe6:	00ab      	lsls	r3, r5, #2
    6fe8:	58f3      	ldr	r3, [r6, r3]
    6fea:	4798      	blx	r3
    6fec:	3501      	adds	r5, #1
    6fee:	e7f8      	b.n	6fe2 <__libc_init_array+0xe>
    6ff0:	f000 f894 	bl	711c <_init>
    6ff4:	4b08      	ldr	r3, [pc, #32]	; (7018 <__libc_init_array+0x44>)
    6ff6:	2500      	movs	r5, #0
    6ff8:	001e      	movs	r6, r3
    6ffa:	4c08      	ldr	r4, [pc, #32]	; (701c <__libc_init_array+0x48>)
    6ffc:	1ae4      	subs	r4, r4, r3
    6ffe:	10a4      	asrs	r4, r4, #2
    7000:	42a5      	cmp	r5, r4
    7002:	d004      	beq.n	700e <__libc_init_array+0x3a>
    7004:	00ab      	lsls	r3, r5, #2
    7006:	58f3      	ldr	r3, [r6, r3]
    7008:	4798      	blx	r3
    700a:	3501      	adds	r5, #1
    700c:	e7f8      	b.n	7000 <__libc_init_array+0x2c>
    700e:	bd70      	pop	{r4, r5, r6, pc}
    7010:	00007128 	.word	0x00007128
    7014:	00007128 	.word	0x00007128
    7018:	00007128 	.word	0x00007128
    701c:	0000712c 	.word	0x0000712c

00007020 <senseBatPin>:
    7020:	06000000 01000106                                .....

00007025 <senseAPin>:
    7025:	03010001 0100010b                                .....

0000702a <senseBPin>:
    702a:	02010001 0000010a                                .....

0000702f <senseCPin>:
    702f:	03000001 00000101                                .....

00007034 <senseDPin>:
    7034:	02000001 00000100                                .....

00007039 <analogAccelPin>:
    7039:	07000001 70000007 0000776f 00000000              .......pow.....

00007048 <TWO52>:
    7048:	00000000 43300000 00000000 c3300000     ......0C......0.
    7058:	000050a0 00004ffe 00004ffe 00004ffc     .P...O...O...O..
    7068:	00005092 00005092 00005088 00004ffc     .P...P...P...O..
    7078:	00005092 00005088 00005092 00004ffc     .P...P...P...O..
    7088:	00005098 00005098 00005098 00005122     .P...P...P.."Q..
    7098:	00005a38 00005906 00005a0c 000058fc     8Z...Y...Z...X..
    70a8:	00005a0c 00005a16 00005a0c 000058fc     .Z...Z...Z...X..
    70b8:	00005906 00005906 00005a16 000058fc     .Y...Y...Z...X..
    70c8:	000058f2 000058f2 000058f2 00005c68     .X...X...X..h\..
    70d8:	00006280 00006140 00006140 0000613e     .b..@a..@a..>a..
    70e8:	00006258 00006258 0000624a 0000613e     Xb..Xb..Jb..>a..
    70f8:	00006258 0000624a 00006258 0000613e     Xb..Jb..Xb..>a..
    7108:	00006260 00006260 00006260 00006460     `b..`b..`b..`d..
    7118:	00000043                                C...

0000711c <_init>:
    711c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    711e:	46c0      	nop			; (mov r8, r8)
    7120:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7122:	bc08      	pop	{r3}
    7124:	469e      	mov	lr, r3
    7126:	4770      	bx	lr

00007128 <__init_array_start>:
    7128:	000000dd 	.word	0x000000dd

0000712c <_fini>:
    712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    712e:	46c0      	nop			; (mov r8, r8)
    7130:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7132:	bc08      	pop	{r3}
    7134:	469e      	mov	lr, r3
    7136:	4770      	bx	lr

00007138 <__fini_array_start>:
    7138:	000000b5 	.word	0x000000b5
