
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000708c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000120  20000000  0000708c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000530  20000120  000071b0  00020120  2**3
                  ALLOC
  3 .stack        00002000  20000650  000076e0  00020120  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
  6 .debug_info   000273e5  00000000  00000000  000201a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d19  00000000  00000000  00047586  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000031e2  00000000  00000000  0004a29f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000500  00000000  00000000  0004d481  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d68  00000000  00000000  0004d981  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016928  00000000  00000000  0004e6e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000aa29  00000000  00000000  00065011  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072c57  00000000  00000000  0006fa3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001194  00000000  00000000  000e2694  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	20002650 	.word	0x20002650
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000a65 	.word	0x00000a65
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	000010f9 	.word	0x000010f9
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	0000112d 	.word	0x0000112d
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	000011cd 	.word	0x000011cd
      90:	00001235 	.word	0x00001235
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000120 	.word	0x20000120
      d4:	00000000 	.word	0x00000000
      d8:	0000708c 	.word	0x0000708c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000124 	.word	0x20000124
     108:	0000708c 	.word	0x0000708c
     10c:	0000708c 	.word	0x0000708c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	0000708c 	.word	0x0000708c
     1a4:	20000000 	.word	0x20000000
     1a8:	20000120 	.word	0x20000120
     1ac:	20000120 	.word	0x20000120
     1b0:	20000650 	.word	0x20000650
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00006f21 	.word	0x00006f21
     1d0:	000009d5 	.word	0x000009d5

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady() {
     1e6:	b570      	push	{r4, r5, r6, lr}
     1e8:	4c08      	ldr	r4, [pc, #32]	; (20c <AT25SFHoldTillReady+0x28>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	6163      	str	r3, [r4, #20]
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_READSTATUS);
     1ee:	2105      	movs	r1, #5
     1f0:	2001      	movs	r0, #1
     1f2:	4b07      	ldr	r3, [pc, #28]	; (210 <AT25SFHoldTillReady+0x2c>)
     1f4:	4798      	blx	r3
    while (spiDataIn(MEM_SPI) & 0x01);
     1f6:	2501      	movs	r5, #1
     1f8:	2001      	movs	r0, #1
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <AT25SFHoldTillReady+0x30>)
     1fc:	4798      	blx	r3
     1fe:	4228      	tst	r0, r5
     200:	d1fa      	bne.n	1f8 <AT25SFHoldTillReady+0x14>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     202:	2380      	movs	r3, #128	; 0x80
     204:	02db      	lsls	r3, r3, #11
     206:	61a3      	str	r3, [r4, #24]
    pinHigh(cs_mem);
}
     208:	bd70      	pop	{r4, r5, r6, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	41004400 	.word	0x41004400
     210:	00003749 	.word	0x00003749
     214:	00003761 	.word	0x00003761

00000218 <AT25SFChipErase>:
void AT25SFChipErase() {
     218:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     21a:	2580      	movs	r5, #128	; 0x80
     21c:	4c06      	ldr	r4, [pc, #24]	; (238 <AT25SFChipErase+0x20>)
     21e:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     220:	4e06      	ldr	r6, [pc, #24]	; (23c <AT25SFChipErase+0x24>)
     222:	6165      	str	r5, [r4, #20]
     224:	2106      	movs	r1, #6
     226:	2001      	movs	r0, #1
     228:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_CHIP_ERASE);
     22c:	2160      	movs	r1, #96	; 0x60
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     22e:	6165      	str	r5, [r4, #20]
     230:	2001      	movs	r0, #1
     232:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     234:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     236:	bd70      	pop	{r4, r5, r6, pc}
     238:	41004400 	.word	0x41004400
     23c:	00003749 	.word	0x00003749

00000240 <AT25SFWriteBytes>:
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     242:	2780      	movs	r7, #128	; 0x80
     244:	0006      	movs	r6, r0
     246:	4d14      	ldr	r5, [pc, #80]	; (298 <AT25SFWriteBytes+0x58>)

    AT25SFHoldTillReady();
     248:	4b14      	ldr	r3, [pc, #80]	; (29c <AT25SFWriteBytes+0x5c>)
     24a:	02ff      	lsls	r7, r7, #11
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     24c:	9201      	str	r2, [sp, #4]
     24e:	9100      	str	r1, [sp, #0]

    AT25SFHoldTillReady();
     250:	4798      	blx	r3

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     252:	4c13      	ldr	r4, [pc, #76]	; (2a0 <AT25SFWriteBytes+0x60>)
     254:	616f      	str	r7, [r5, #20]
     256:	2106      	movs	r1, #6
     258:	2001      	movs	r0, #1
     25a:	47a0      	blx	r4
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     25c:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     25e:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     260:	616f      	str	r7, [r5, #20]
     262:	2001      	movs	r0, #1
     264:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0xFF0000) >> 16));
     266:	0c31      	lsrs	r1, r6, #16
     268:	b2c9      	uxtb	r1, r1
     26a:	2001      	movs	r0, #1
     26c:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x00FF00) >>  8));
     26e:	0a31      	lsrs	r1, r6, #8
     270:	b2c9      	uxtb	r1, r1
     272:	2001      	movs	r0, #1
     274:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x0000FF) >>  0));
     276:	b2f1      	uxtb	r1, r6
     278:	2001      	movs	r0, #1
     27a:	47a0      	blx	r4
     27c:	9e01      	ldr	r6, [sp, #4]
     27e:	9b00      	ldr	r3, [sp, #0]
     280:	18f7      	adds	r7, r6, r3

    for (u8_t pos = 0; pos < len; ++pos) {
     282:	42be      	cmp	r6, r7
     284:	d004      	beq.n	290 <AT25SFWriteBytes+0x50>
        spiDataOut(MEM_SPI, bytes[pos]);
     286:	7831      	ldrb	r1, [r6, #0]
     288:	2001      	movs	r0, #1
     28a:	47a0      	blx	r4
     28c:	3601      	adds	r6, #1
     28e:	e7f8      	b.n	282 <AT25SFWriteBytes+0x42>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     290:	2380      	movs	r3, #128	; 0x80
     292:	02db      	lsls	r3, r3, #11
     294:	61ab      	str	r3, [r5, #24]
    }

    pinHigh(cs_mem);

}
     296:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     298:	41004400 	.word	0x41004400
     29c:	000001e5 	.word	0x000001e5
     2a0:	00003749 	.word	0x00003749

000002a4 <AT25SEWritePage>:
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2a6:	2780      	movs	r7, #128	; 0x80
     2a8:	0006      	movs	r6, r0
     2aa:	4d13      	ldr	r5, [pc, #76]	; (2f8 <AT25SEWritePage+0x54>)
     2ac:	02ff      	lsls	r7, r7, #11

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2ae:	4c13      	ldr	r4, [pc, #76]	; (2fc <AT25SEWritePage+0x58>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2b0:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2b2:	2001      	movs	r0, #1
     2b4:	616f      	str	r7, [r5, #20]
     2b6:	2106      	movs	r1, #6
     2b8:	47a0      	blx	r4
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ba:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     2bc:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2be:	616f      	str	r7, [r5, #20]
     2c0:	2001      	movs	r0, #1
     2c2:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     2c4:	0c31      	lsrs	r1, r6, #16
     2c6:	b2c9      	uxtb	r1, r1
     2c8:	2001      	movs	r0, #1
     2ca:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     2cc:	0a31      	lsrs	r1, r6, #8
     2ce:	b2c9      	uxtb	r1, r1
     2d0:	2001      	movs	r0, #1
     2d2:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     2d4:	b2f1      	uxtb	r1, r6
     2d6:	2001      	movs	r0, #1
     2d8:	47a0      	blx	r4
     2da:	9e01      	ldr	r6, [sp, #4]
     2dc:	1c77      	adds	r7, r6, #1
     2de:	37ff      	adds	r7, #255	; 0xff


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        spiDataOut(SPI1,data[pos]);
     2e0:	7831      	ldrb	r1, [r6, #0]
     2e2:	2001      	movs	r0, #1
     2e4:	3601      	adds	r6, #1
     2e6:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     2e8:	42be      	cmp	r6, r7
     2ea:	d1f9      	bne.n	2e0 <AT25SEWritePage+0x3c>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ec:	2380      	movs	r3, #128	; 0x80
     2ee:	02db      	lsls	r3, r3, #11
     2f0:	61ab      	str	r3, [r5, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     2f2:	2000      	movs	r0, #0
     2f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	41004400 	.word	0x41004400
     2fc:	00003749 	.word	0x00003749

00000300 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     300:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     304:	0005      	movs	r5, r0
     306:	000f      	movs	r7, r1
     308:	4e11      	ldr	r6, [pc, #68]	; (350 <AT25SEreadSample+0x50>)
     30a:	02db      	lsls	r3, r3, #11
     30c:	9201      	str	r2, [sp, #4]

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     30e:	4c11      	ldr	r4, [pc, #68]	; (354 <AT25SEreadSample+0x54>)
     310:	6173      	str	r3, [r6, #20]
     312:	210b      	movs	r1, #11
     314:	2001      	movs	r0, #1
     316:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     318:	0c29      	lsrs	r1, r5, #16
     31a:	b2c9      	uxtb	r1, r1
     31c:	2001      	movs	r0, #1
     31e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     320:	0a29      	lsrs	r1, r5, #8
     322:	b2c9      	uxtb	r1, r1
     324:	2001      	movs	r0, #1
     326:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     328:	b2e9      	uxtb	r1, r5
     32a:	2001      	movs	r0, #1
     32c:	47a0      	blx	r4
    spiDataOut(MEM_SPI, 0xFF);
     32e:	21ff      	movs	r1, #255	; 0xff
     330:	2001      	movs	r0, #1
     332:	47a0      	blx	r4
     334:	9c01      	ldr	r4, [sp, #4]
     336:	19e7      	adds	r7, r4, r7


    for (u8_t pos = 0; pos < len; ++pos) {
     338:	42bc      	cmp	r4, r7
     33a:	d005      	beq.n	348 <AT25SEreadSample+0x48>
        data[pos] = spiDataIn(MEM_SPI);
     33c:	2001      	movs	r0, #1
     33e:	4b06      	ldr	r3, [pc, #24]	; (358 <AT25SEreadSample+0x58>)
     340:	4798      	blx	r3
     342:	7020      	strb	r0, [r4, #0]
     344:	3401      	adds	r4, #1
     346:	e7f7      	b.n	338 <AT25SEreadSample+0x38>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     348:	2380      	movs	r3, #128	; 0x80
     34a:	02db      	lsls	r3, r3, #11
     34c:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);

}
     34e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     350:	41004400 	.word	0x41004400
     354:	00003749 	.word	0x00003749
     358:	00003761 	.word	0x00003761

0000035c <AT25SEreadPage>:

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     35e:	2380      	movs	r3, #128	; 0x80
     360:	0007      	movs	r7, r0
     362:	000c      	movs	r4, r1
     364:	4e10      	ldr	r6, [pc, #64]	; (3a8 <AT25SEreadPage+0x4c>)
     366:	02db      	lsls	r3, r3, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     368:	4d10      	ldr	r5, [pc, #64]	; (3ac <AT25SEreadPage+0x50>)
     36a:	6173      	str	r3, [r6, #20]
     36c:	210b      	movs	r1, #11
     36e:	2001      	movs	r0, #1
     370:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     372:	0c39      	lsrs	r1, r7, #16
     374:	b2c9      	uxtb	r1, r1
     376:	2001      	movs	r0, #1
     378:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     37a:	0a39      	lsrs	r1, r7, #8
     37c:	b2c9      	uxtb	r1, r1
     37e:	2001      	movs	r0, #1
     380:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     382:	b2f9      	uxtb	r1, r7
     384:	2001      	movs	r0, #1
     386:	47a8      	blx	r5
    spiDataOut(MEM_SPI, 0xFF);
     388:	21ff      	movs	r1, #255	; 0xff
     38a:	2001      	movs	r0, #1
     38c:	47a8      	blx	r5
     38e:	1c65      	adds	r5, r4, #1
     390:	35ff      	adds	r5, #255	; 0xff

    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataIn(MEM_SPI);
     392:	2001      	movs	r0, #1
     394:	4b06      	ldr	r3, [pc, #24]	; (3b0 <AT25SEreadPage+0x54>)
     396:	4798      	blx	r3
     398:	7020      	strb	r0, [r4, #0]
     39a:	3401      	adds	r4, #1
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
    spiDataOut(MEM_SPI, 0xFF);

    for (u16_t pos = 0; pos < 256; ++pos) {
     39c:	42ac      	cmp	r4, r5
     39e:	d1f8      	bne.n	392 <AT25SEreadPage+0x36>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3a0:	2380      	movs	r3, #128	; 0x80
     3a2:	02db      	lsls	r3, r3, #11
     3a4:	61b3      	str	r3, [r6, #24]
        data[pos] = spiDataIn(MEM_SPI);
    }
    pinHigh(cs_mem);

}
     3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3a8:	41004400 	.word	0x41004400
     3ac:	00003749 	.word	0x00003749
     3b0:	00003761 	.word	0x00003761

000003b4 <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>

u32_t readMS5803AdcResults() {
     3b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b6:	2780      	movs	r7, #128	; 0x80
     3b8:	4e0b      	ldr	r6, [pc, #44]	; (3e8 <readMS5803AdcResults+0x34>)
     3ba:	01ff      	lsls	r7, r7, #7

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, cmdAdcRead_);
     3bc:	2100      	movs	r1, #0
     3be:	4b0b      	ldr	r3, [pc, #44]	; (3ec <readMS5803AdcResults+0x38>)
     3c0:	6177      	str	r7, [r6, #20]
     3c2:	2002      	movs	r0, #2
     3c4:	4798      	blx	r3
    u8_t _byte1 = spiDataIn(SPI2);
     3c6:	4d0a      	ldr	r5, [pc, #40]	; (3f0 <readMS5803AdcResults+0x3c>)
     3c8:	2002      	movs	r0, #2
     3ca:	47a8      	blx	r5
     3cc:	0004      	movs	r4, r0
    u8_t _byte2 = spiDataIn(SPI2);
     3ce:	2002      	movs	r0, #2
     3d0:	47a8      	blx	r5
     3d2:	9001      	str	r0, [sp, #4]
    u8_t _byte3 = spiDataIn(SPI2);
     3d4:	2002      	movs	r0, #2
     3d6:	47a8      	blx	r5
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3d8:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     3da:	9b01      	ldr	r3, [sp, #4]
     3dc:	0424      	lsls	r4, r4, #16
     3de:	021b      	lsls	r3, r3, #8
     3e0:	431c      	orrs	r4, r3
     3e2:	4320      	orrs	r0, r4
}
     3e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	41004400 	.word	0x41004400
     3ec:	00003749 	.word	0x00003749
     3f0:	00003761 	.word	0x00003761

000003f4 <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3f6:	b087      	sub	sp, #28
     3f8:	9304      	str	r3, [sp, #16]
    const u16_t C1 = coefficients_[1];
     3fa:	4b24      	ldr	r3, [pc, #144]	; (48c <ConvertPressureTemperature+0x98>)

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3fc:	9003      	str	r0, [sp, #12]
     3fe:	0014      	movs	r4, r2
    const u16_t C1 = coefficients_[1];
     400:	885a      	ldrh	r2, [r3, #2]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     402:	4f23      	ldr	r7, [pc, #140]	; (490 <ConvertPressureTemperature+0x9c>)
    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
     404:	9201      	str	r2, [sp, #4]
    const u16_t C2 = coefficients_[2];
     406:	889a      	ldrh	r2, [r3, #4]
     408:	9200      	str	r2, [sp, #0]
    const u16_t C3 = coefficients_[3];
    const u16_t C4 = coefficients_[4];
     40a:	891a      	ldrh	r2, [r3, #8]
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
    const u16_t C2 = coefficients_[2];
    const u16_t C3 = coefficients_[3];
     40c:	88dd      	ldrh	r5, [r3, #6]
    const u16_t C4 = coefficients_[4];
     40e:	9202      	str	r2, [sp, #8]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     410:	895e      	ldrh	r6, [r3, #10]
     412:	0236      	lsls	r6, r6, #8
     414:	1b8e      	subs	r6, r1, r6
     416:	17f2      	asrs	r2, r6, #31
     418:	9205      	str	r2, [sp, #20]
     41a:	8998      	ldrh	r0, [r3, #12]
     41c:	0032      	movs	r2, r6
     41e:	17f3      	asrs	r3, r6, #31
     420:	2100      	movs	r1, #0
     422:	47b8      	blx	r7
     424:	23fa      	movs	r3, #250	; 0xfa
     426:	0249      	lsls	r1, r1, #9
     428:	0dc0      	lsrs	r0, r0, #23
     42a:	4308      	orrs	r0, r1
     42c:	00db      	lsls	r3, r3, #3
     42e:	18c0      	adds	r0, r0, r3
     430:	6020      	str	r0, [r4, #0]

    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
    const  int64_t SENS  =  ((int64_t)C1 << 16) + ((C3 * (int64_t)dT) >> 7);
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     432:	0032      	movs	r2, r6
     434:	17f3      	asrs	r3, r6, #31
     436:	0028      	movs	r0, r5
     438:	2100      	movs	r1, #0
     43a:	47b8      	blx	r7
     43c:	064c      	lsls	r4, r1, #25
     43e:	11cb      	asrs	r3, r1, #7
     440:	2100      	movs	r1, #0
     442:	09c2      	lsrs	r2, r0, #7
     444:	4322      	orrs	r2, r4
     446:	9c01      	ldr	r4, [sp, #4]
     448:	0420      	lsls	r0, r4, #16
     44a:	1880      	adds	r0, r0, r2
     44c:	4159      	adcs	r1, r3
     44e:	9a03      	ldr	r2, [sp, #12]
     450:	2300      	movs	r3, #0
     452:	47b8      	blx	r7
     454:	02cb      	lsls	r3, r1, #11
     456:	0d44      	lsrs	r4, r0, #21
     458:	0032      	movs	r2, r6
     45a:	431c      	orrs	r4, r3
     45c:	154d      	asrs	r5, r1, #21
     45e:	9b05      	ldr	r3, [sp, #20]
     460:	9802      	ldr	r0, [sp, #8]
     462:	2100      	movs	r1, #0
     464:	47b8      	blx	r7
     466:	068b      	lsls	r3, r1, #26
     468:	118f      	asrs	r7, r1, #6
     46a:	9900      	ldr	r1, [sp, #0]
     46c:	0986      	lsrs	r6, r0, #6
     46e:	431e      	orrs	r6, r3
     470:	044a      	lsls	r2, r1, #17
     472:	0bcb      	lsrs	r3, r1, #15
     474:	1992      	adds	r2, r2, r6
     476:	417b      	adcs	r3, r7
     478:	1aa4      	subs	r4, r4, r2
     47a:	419d      	sbcs	r5, r3
     47c:	046b      	lsls	r3, r5, #17
     47e:	0be4      	lsrs	r4, r4, #15
     480:	431c      	orrs	r4, r3
     482:	9b04      	ldr	r3, [sp, #16]
     484:	601c      	str	r4, [r3, #0]

}
     486:	b007      	add	sp, #28
     488:	bdf0      	pop	{r4, r5, r6, r7, pc}
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	200002ae 	.word	0x200002ae
     490:	00004e3d 	.word	0x00004e3d

00000494 <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     494:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/100)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     496:	4b0c      	ldr	r3, [pc, #48]	; (4c8 <paToFeetNOAA+0x34>)
     498:	4798      	blx	r3
     49a:	4c0c      	ldr	r4, [pc, #48]	; (4cc <paToFeetNOAA+0x38>)
     49c:	2200      	movs	r2, #0
     49e:	4b0c      	ldr	r3, [pc, #48]	; (4d0 <paToFeetNOAA+0x3c>)
     4a0:	47a0      	blx	r4
     4a2:	2200      	movs	r2, #0
     4a4:	4b0b      	ldr	r3, [pc, #44]	; (4d4 <paToFeetNOAA+0x40>)
     4a6:	47a0      	blx	r4
     4a8:	4a0b      	ldr	r2, [pc, #44]	; (4d8 <paToFeetNOAA+0x44>)
     4aa:	4b0c      	ldr	r3, [pc, #48]	; (4dc <paToFeetNOAA+0x48>)
     4ac:	4c0c      	ldr	r4, [pc, #48]	; (4e0 <paToFeetNOAA+0x4c>)
     4ae:	47a0      	blx	r4
    return altFeet;
     4b0:	4c0c      	ldr	r4, [pc, #48]	; (4e4 <paToFeetNOAA+0x50>)
double paToFeetNOAA(int32_t pressureMbar) {

    double lower =(((double)(pressureMbar)/100)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     4b2:	0002      	movs	r2, r0
     4b4:	000b      	movs	r3, r1
    return altFeet;
     4b6:	2000      	movs	r0, #0
     4b8:	490b      	ldr	r1, [pc, #44]	; (4e8 <paToFeetNOAA+0x54>)
     4ba:	47a0      	blx	r4
     4bc:	4a0b      	ldr	r2, [pc, #44]	; (4ec <paToFeetNOAA+0x58>)
     4be:	4b0c      	ldr	r3, [pc, #48]	; (4f0 <paToFeetNOAA+0x5c>)
     4c0:	4c0c      	ldr	r4, [pc, #48]	; (4f4 <paToFeetNOAA+0x60>)
     4c2:	47a0      	blx	r4

}
     4c4:	bd10      	pop	{r4, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	00006c25 	.word	0x00006c25
     4cc:	00005795 	.word	0x00005795
     4d0:	40590000 	.word	0x40590000
     4d4:	408faa00 	.word	0x408faa00
     4d8:	e279dd3c 	.word	0xe279dd3c
     4dc:	3fc85b39 	.word	0x3fc85b39
     4e0:	00003a75 	.word	0x00003a75
     4e4:	000064d1 	.word	0x000064d1
     4e8:	3ff00000 	.word	0x3ff00000
     4ec:	9999999a 	.word	0x9999999a
     4f0:	4101beb3 	.word	0x4101beb3
     4f4:	00005fdd 	.word	0x00005fdd

000004f8 <readMS5803Coefficients>:



void readMS5803Coefficients() {
     4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     4fa:	24a2      	movs	r4, #162	; 0xa2
     4fc:	4d11      	ldr	r5, [pc, #68]	; (544 <readMS5803Coefficients+0x4c>)

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
        delay_us(600);
     4fe:	2096      	movs	r0, #150	; 0x96
     500:	4e11      	ldr	r6, [pc, #68]	; (548 <readMS5803Coefficients+0x50>)
     502:	0080      	lsls	r0, r0, #2
     504:	47b0      	blx	r6
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
        delay_us(600);
     506:	2096      	movs	r0, #150	; 0x96
     508:	0080      	lsls	r0, r0, #2
     50a:	47b0      	blx	r6
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     50c:	2380      	movs	r3, #128	; 0x80
     50e:	4e0f      	ldr	r6, [pc, #60]	; (54c <readMS5803Coefficients+0x54>)
     510:	01db      	lsls	r3, r3, #7
        pinLow(cs_baro);
        spiDataOut(SPI2, _cmd);
     512:	0021      	movs	r1, r4
     514:	6173      	str	r3, [r6, #20]
     516:	2002      	movs	r0, #2
     518:	4b0d      	ldr	r3, [pc, #52]	; (550 <readMS5803Coefficients+0x58>)
     51a:	4798      	blx	r3
        u8_t _byte1 = spiDataIn(SPI2);
     51c:	4f0d      	ldr	r7, [pc, #52]	; (554 <readMS5803Coefficients+0x5c>)
     51e:	2002      	movs	r0, #2
     520:	47b8      	blx	r7
     522:	9001      	str	r0, [sp, #4]
        u8_t _byte2 = spiDataIn(SPI2);
     524:	2002      	movs	r0, #2
     526:	47b8      	blx	r7
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     528:	2380      	movs	r3, #128	; 0x80
     52a:	01db      	lsls	r3, r3, #7
     52c:	61b3      	str	r3, [r6, #24]
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     52e:	9b01      	ldr	r3, [sp, #4]
     530:	3402      	adds	r4, #2
     532:	021b      	lsls	r3, r3, #8
     534:	4318      	orrs	r0, r3
     536:	b2e4      	uxtb	r4, r4
     538:	8028      	strh	r0, [r5, #0]
     53a:	3502      	adds	r5, #2



void readMS5803Coefficients() {

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
     53c:	2cae      	cmp	r4, #174	; 0xae
     53e:	d1de      	bne.n	4fe <readMS5803Coefficients+0x6>
        u8_t _byte2 = spiDataIn(SPI2);
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     540:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     542:	46c0      	nop			; (mov r8, r8)
     544:	200002b0 	.word	0x200002b0
     548:	000010c9 	.word	0x000010c9
     54c:	41004400 	.word	0x41004400
     550:	00003749 	.word	0x00003749
     554:	00003761 	.word	0x00003761

00000558 <initMS5803Barometer>:

void initMS5803Barometer() {
     558:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     55a:	2580      	movs	r5, #128	; 0x80
     55c:	4c06      	ldr	r4, [pc, #24]	; (578 <initMS5803Barometer+0x20>)
     55e:	01ed      	lsls	r5, r5, #7


    pinLow(cs_baro);
    spiDataOut(BARO_SPI, MS5803_CMD_RES);
     560:	211e      	movs	r1, #30
     562:	6165      	str	r5, [r4, #20]
     564:	2002      	movs	r0, #2
     566:	4b05      	ldr	r3, [pc, #20]	; (57c <initMS5803Barometer+0x24>)
     568:	4798      	blx	r3
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     56a:	61a5      	str	r5, [r4, #24]

    pinHigh(cs_baro);
    delay_ms(200);
     56c:	20c8      	movs	r0, #200	; 0xc8
     56e:	4b04      	ldr	r3, [pc, #16]	; (580 <initMS5803Barometer+0x28>)
     570:	4798      	blx	r3
    readMS5803Coefficients();
     572:	4b04      	ldr	r3, [pc, #16]	; (584 <initMS5803Barometer+0x2c>)
     574:	4798      	blx	r3

}
     576:	bd70      	pop	{r4, r5, r6, pc}
     578:	41004400 	.word	0x41004400
     57c:	00003749 	.word	0x00003749
     580:	000010fd 	.word	0x000010fd
     584:	000004f9 	.word	0x000004f9

00000588 <MS5803_CRC4>:
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     588:	4b02      	ldr	r3, [pc, #8]	; (594 <MS5803_CRC4+0xc>)
    return (n_rem & 0x00);
}
     58a:	2000      	movs	r0, #0
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     58c:	7b9a      	ldrb	r2, [r3, #14]
     58e:	81da      	strh	r2, [r3, #14]
    return (n_rem & 0x00);
}
     590:	4770      	bx	lr
     592:	46c0      	nop			; (mov r8, r8)
     594:	200002ae 	.word	0x200002ae

00000598 <init>:
#include "math.h"

void init() {

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     598:	211e      	movs	r1, #30
#include "sam.h"
#include <util.h>
#include <boardDefines.h>
#include "math.h"

void init() {
     59a:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     59c:	4afc      	ldr	r2, [pc, #1008]	; (990 <init+0x3f8>)
#include "sam.h"
#include <util.h>
#include <boardDefines.h>
#include "math.h"

void init() {
     59e:	b085      	sub	sp, #20

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     5a0:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5a2:	2401      	movs	r4, #1
     5a4:	438b      	bics	r3, r1
     5a6:	391c      	subs	r1, #28
     5a8:	430b      	orrs	r3, r1
     5aa:	6053      	str	r3, [r2, #4]

    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     5ac:	4af9      	ldr	r2, [pc, #996]	; (994 <init+0x3fc>)
     5ae:	3106      	adds	r1, #6
     5b0:	6993      	ldr	r3, [r2, #24]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5b2:	260f      	movs	r6, #15
     5b4:	430b      	orrs	r3, r1
     5b6:	6193      	str	r3, [r2, #24]

    SystemInit();
     5b8:	4bf7      	ldr	r3, [pc, #988]	; (998 <init+0x400>)
     5ba:	4798      	blx	r3
    GclkInit(0);
     5bc:	2000      	movs	r0, #0
     5be:	4bf7      	ldr	r3, [pc, #988]	; (99c <init+0x404>)
     5c0:	4798      	blx	r3
    RtcInit();
     5c2:	4bf7      	ldr	r3, [pc, #988]	; (9a0 <init+0x408>)
     5c4:	4798      	blx	r3
    delayInit();
     5c6:	4bf7      	ldr	r3, [pc, #988]	; (9a4 <init+0x40c>)
     5c8:	4798      	blx	r3
    adcInit();
     5ca:	4bf7      	ldr	r3, [pc, #988]	; (9a8 <init+0x410>)
     5cc:	4798      	blx	r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5ce:	4bf7      	ldr	r3, [pc, #988]	; (9ac <init+0x414>)
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5d0:	2002      	movs	r0, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5d2:	0019      	movs	r1, r3
     5d4:	3154      	adds	r1, #84	; 0x54
     5d6:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5d8:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5da:	43a2      	bics	r2, r4
     5dc:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5de:	2280      	movs	r2, #128	; 0x80
     5e0:	0352      	lsls	r2, r2, #13
     5e2:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5e4:	3533      	adds	r5, #51	; 0x33
     5e6:	782a      	ldrb	r2, [r5, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5e8:	390e      	subs	r1, #14

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5ea:	43b2      	bics	r2, r6
     5ec:	4322      	orrs	r2, r4
     5ee:	702a      	strb	r2, [r5, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f0:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5f2:	001f      	movs	r7, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f4:	4322      	orrs	r2, r4
     5f6:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5f8:	001a      	movs	r2, r3
     5fa:	3247      	adds	r2, #71	; 0x47
     5fc:	7811      	ldrb	r1, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5fe:	3794      	adds	r7, #148	; 0x94
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     600:	43a1      	bics	r1, r4
     602:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     604:	7811      	ldrb	r1, [r2, #0]
     606:	4301      	orrs	r1, r0
     608:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     60a:	2180      	movs	r1, #128	; 0x80
     60c:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     60e:	7829      	ldrb	r1, [r5, #0]
     610:	300e      	adds	r0, #14
     612:	4031      	ands	r1, r6
     614:	4301      	orrs	r1, r0
     616:	7029      	strb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     618:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     61a:	7811      	ldrb	r1, [r2, #0]
     61c:	4321      	orrs	r1, r4
     61e:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     620:	327c      	adds	r2, #124	; 0x7c
     622:	7811      	ldrb	r1, [r2, #0]
     624:	43a1      	bics	r1, r4
     626:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     628:	7811      	ldrb	r1, [r2, #0]
     62a:	4329      	orrs	r1, r5
     62c:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     62e:	2108      	movs	r1, #8
     630:	468c      	mov	ip, r1
     632:	449c      	add	ip, r3
     634:	4661      	mov	r1, ip
     636:	3506      	adds	r5, #6
     638:	67cd      	str	r5, [r1, #124]	; 0x7c
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     63a:	31a9      	adds	r1, #169	; 0xa9
     63c:	780d      	ldrb	r5, [r1, #0]
     63e:	4035      	ands	r5, r6
     640:	4305      	orrs	r5, r0
     642:	700d      	strb	r5, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     644:	7815      	ldrb	r5, [r2, #0]
     646:	4325      	orrs	r5, r4
     648:	7015      	strb	r5, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     64a:	001d      	movs	r5, r3
     64c:	35d7      	adds	r5, #215	; 0xd7
     64e:	782a      	ldrb	r2, [r5, #0]
     650:	43a2      	bics	r2, r4
     652:	702a      	strb	r2, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     654:	2580      	movs	r5, #128	; 0x80
     656:	4ad6      	ldr	r2, [pc, #856]	; (9b0 <init+0x418>)
     658:	042d      	lsls	r5, r5, #16
     65a:	6015      	str	r5, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     65c:	002a      	movs	r2, r5
     65e:	9703      	str	r7, [sp, #12]
     660:	603a      	str	r2, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     662:	001a      	movs	r2, r3
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     664:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     666:	32c2      	adds	r2, #194	; 0xc2
     668:	7815      	ldrb	r5, [r2, #0]
     66a:	43a5      	bics	r5, r4
     66c:	7015      	strb	r5, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     66e:	7815      	ldrb	r5, [r2, #0]
     670:	433d      	orrs	r5, r7
     672:	7015      	strb	r5, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     674:	4665      	mov	r5, ip
     676:	19ff      	adds	r7, r7, r7
     678:	67ef      	str	r7, [r5, #124]	; 0x7c

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     67a:	780d      	ldrb	r5, [r1, #0]
     67c:	43b5      	bics	r5, r6
     67e:	4325      	orrs	r5, r4
     680:	700d      	strb	r5, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     682:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     684:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     686:	4321      	orrs	r1, r4
     688:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     68a:	0019      	movs	r1, r3
     68c:	31d6      	adds	r1, #214	; 0xd6
     68e:	780a      	ldrb	r2, [r1, #0]
     690:	43a2      	bics	r2, r4
     692:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     694:	2180      	movs	r1, #128	; 0x80
     696:	4ac6      	ldr	r2, [pc, #792]	; (9b0 <init+0x418>)
     698:	03c9      	lsls	r1, r1, #15
     69a:	6011      	str	r1, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     69c:	000a      	movs	r2, r1
     69e:	9903      	ldr	r1, [sp, #12]
     6a0:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6a2:	001a      	movs	r2, r3
     6a4:	3243      	adds	r2, #67	; 0x43
     6a6:	7811      	ldrb	r1, [r2, #0]
     6a8:	43a1      	bics	r1, r4
     6aa:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6ac:	7811      	ldrb	r1, [r2, #0]
     6ae:	4329      	orrs	r1, r5
     6b0:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6b2:	001d      	movs	r5, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6b4:	2108      	movs	r1, #8
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6b6:	3531      	adds	r5, #49	; 0x31


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6b8:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6ba:	7829      	ldrb	r1, [r5, #0]
     6bc:	4031      	ands	r1, r6
     6be:	4308      	orrs	r0, r1
     6c0:	7028      	strb	r0, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c2:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6c4:	2002      	movs	r0, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c6:	4321      	orrs	r1, r4
     6c8:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ca:	0019      	movs	r1, r3
     6cc:	3159      	adds	r1, #89	; 0x59
     6ce:	780a      	ldrb	r2, [r1, #0]
     6d0:	43a2      	bics	r2, r4
     6d2:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6d4:	2280      	movs	r2, #128	; 0x80
     6d6:	0492      	lsls	r2, r2, #18
     6d8:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6da:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6dc:	001a      	movs	r2, r3
     6de:	3242      	adds	r2, #66	; 0x42
     6e0:	7811      	ldrb	r1, [r2, #0]
     6e2:	43a1      	bics	r1, r4
     6e4:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6e6:	7811      	ldrb	r1, [r2, #0]
     6e8:	4301      	orrs	r1, r0
     6ea:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6ec:	605f      	str	r7, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6ee:	7829      	ldrb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6f0:	0018      	movs	r0, r3

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6f2:	43b1      	bics	r1, r6
     6f4:	4321      	orrs	r1, r4
     6f6:	7029      	strb	r1, [r5, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6f8:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6fa:	3048      	adds	r0, #72	; 0x48
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fc:	4321      	orrs	r1, r4
     6fe:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     700:	0019      	movs	r1, r3
     702:	3158      	adds	r1, #88	; 0x58
     704:	780a      	ldrb	r2, [r1, #0]
     706:	001f      	movs	r7, r3
     708:	43a2      	bics	r2, r4
     70a:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     70c:	2280      	movs	r2, #128	; 0x80
    pinIn(senseDPin);
    pinMux(senseDPin);
    pinOut(fireDPin);
    pinLow(fireDPin);

    charges.igniterAHot = false;
     70e:	2100      	movs	r1, #0
     710:	0452      	lsls	r2, r2, #17
     712:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     714:	615a      	str	r2, [r3, #20]
     716:	4aa7      	ldr	r2, [pc, #668]	; (9b4 <init+0x41c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     718:	3749      	adds	r7, #73	; 0x49
     71a:	7011      	strb	r1, [r2, #0]
    charges.igniterBHot = false;
     71c:	2100      	movs	r1, #0
     71e:	7211      	strb	r1, [r2, #8]
    charges.igniterCHot = false;
     720:	2100      	movs	r1, #0
     722:	7411      	strb	r1, [r2, #16]
    charges.igniterDHot = false;
     724:	2100      	movs	r1, #0
     726:	7611      	strb	r1, [r2, #24]
     728:	7802      	ldrb	r2, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     72a:	2502      	movs	r5, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     72c:	43a2      	bics	r2, r4
     72e:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     730:	2280      	movs	r2, #128	; 0x80
     732:	0052      	lsls	r2, r2, #1
     734:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     736:	783a      	ldrb	r2, [r7, #0]
     738:	43a2      	bics	r2, r4
     73a:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     73c:	2280      	movs	r2, #128	; 0x80
     73e:	0092      	lsls	r2, r2, #2
     740:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     742:	001a      	movs	r2, r3
     744:	324b      	adds	r2, #75	; 0x4b
     746:	7811      	ldrb	r1, [r2, #0]
     748:	43a1      	bics	r1, r4
     74a:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     74c:	7811      	ldrb	r1, [r2, #0]
     74e:	4329      	orrs	r1, r5
     750:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     752:	2180      	movs	r1, #128	; 0x80
     754:	0109      	lsls	r1, r1, #4
     756:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     758:	2135      	movs	r1, #53	; 0x35
     75a:	468c      	mov	ip, r1
     75c:	449c      	add	ip, r3
     75e:	4661      	mov	r1, ip
     760:	7809      	ldrb	r1, [r1, #0]
     762:	351e      	adds	r5, #30
     764:	4031      	ands	r1, r6
     766:	4329      	orrs	r1, r5
     768:	4665      	mov	r5, ip
     76a:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76c:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     76e:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     770:	4321      	orrs	r1, r4
     772:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     774:	0019      	movs	r1, r3
     776:	3134      	adds	r1, #52	; 0x34
     778:	780a      	ldrb	r2, [r1, #0]
     77a:	4032      	ands	r2, r6
     77c:	432a      	orrs	r2, r5
     77e:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     780:	783a      	ldrb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     782:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     784:	4322      	orrs	r2, r4
     786:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     788:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     78a:	3706      	adds	r7, #6

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     78c:	43b2      	bics	r2, r6
     78e:	432a      	orrs	r2, r5
     790:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     792:	7802      	ldrb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     794:	3196      	adds	r1, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     796:	4322      	orrs	r2, r4
     798:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79a:	780a      	ldrb	r2, [r1, #0]
     79c:	43a2      	bics	r2, r4
     79e:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a0:	2280      	movs	r2, #128	; 0x80
     7a2:	4983      	ldr	r1, [pc, #524]	; (9b0 <init+0x418>)
     7a4:	00d2      	lsls	r2, r2, #3
     7a6:	600a      	str	r2, [r1, #0]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7a8:	0019      	movs	r1, r3
     7aa:	3198      	adds	r1, #152	; 0x98
     7ac:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ae:	7881      	ldrb	r1, [r0, #2]
     7b0:	43a1      	bics	r1, r4
     7b2:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b4:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7b6:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b8:	7a02      	ldrb	r2, [r0, #8]
     7ba:	43a2      	bics	r2, r4
     7bc:	7202      	strb	r2, [r0, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7be:	2280      	movs	r2, #128	; 0x80
     7c0:	0252      	lsls	r2, r2, #9
     7c2:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c4:	78ba      	ldrb	r2, [r7, #2]
     7c6:	43a2      	bics	r2, r4
     7c8:	70ba      	strb	r2, [r7, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ca:	2280      	movs	r2, #128	; 0x80
     7cc:	0292      	lsls	r2, r2, #10
     7ce:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7d0:	001a      	movs	r2, r3
     7d2:	3253      	adds	r2, #83	; 0x53
     7d4:	7811      	ldrb	r1, [r2, #0]
     7d6:	43a1      	bics	r1, r4
     7d8:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7da:	7811      	ldrb	r1, [r2, #0]
     7dc:	4329      	orrs	r1, r5
     7de:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7e0:	2180      	movs	r1, #128	; 0x80
     7e2:	0309      	lsls	r1, r1, #12
     7e4:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7e6:	2139      	movs	r1, #57	; 0x39
     7e8:	468c      	mov	ip, r1
     7ea:	449c      	add	ip, r3
     7ec:	4661      	mov	r1, ip
     7ee:	7809      	ldrb	r1, [r1, #0]
     7f0:	351e      	adds	r5, #30
     7f2:	4031      	ands	r1, r6
     7f4:	4329      	orrs	r1, r5
     7f6:	4665      	mov	r5, ip
     7f8:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fa:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7fc:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fe:	4321      	orrs	r1, r4
     800:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     802:	0019      	movs	r1, r3
     804:	3138      	adds	r1, #56	; 0x38
     806:	780a      	ldrb	r2, [r1, #0]
     808:	4032      	ands	r2, r6
     80a:	432a      	orrs	r2, r5
     80c:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     80e:	78ba      	ldrb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     810:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     812:	4322      	orrs	r2, r4
     814:	70ba      	strb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     816:	780a      	ldrb	r2, [r1, #0]
     818:	43b2      	bics	r2, r6
     81a:	432a      	orrs	r2, r5
     81c:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     81e:	7a02      	ldrb	r2, [r0, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     820:	3114      	adds	r1, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     822:	4322      	orrs	r2, r4
     824:	7202      	strb	r2, [r0, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     826:	798a      	ldrb	r2, [r1, #6]
     828:	43a2      	bics	r2, r4
     82a:	718a      	strb	r2, [r1, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     82c:	2280      	movs	r2, #128	; 0x80
     82e:	02d2      	lsls	r2, r2, #11
     830:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     832:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     834:	9103      	str	r1, [sp, #12]
     836:	780a      	ldrb	r2, [r1, #0]
     838:	43a2      	bics	r2, r4
     83a:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     83c:	2280      	movs	r2, #128	; 0x80
     83e:	0152      	lsls	r2, r2, #5
     840:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     842:	783a      	ldrb	r2, [r7, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     844:	2120      	movs	r1, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     846:	43a2      	bics	r2, r4
     848:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     84a:	2280      	movs	r2, #128	; 0x80
     84c:	0212      	lsls	r2, r2, #8
     84e:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     850:	001a      	movs	r2, r3
     852:	324d      	adds	r2, #77	; 0x4d
     854:	7810      	ldrb	r0, [r2, #0]
     856:	43a0      	bics	r0, r4
     858:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     85a:	7810      	ldrb	r0, [r2, #0]
     85c:	4328      	orrs	r0, r5
     85e:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     860:	2080      	movs	r0, #128	; 0x80
     862:	0180      	lsls	r0, r0, #6
     864:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     866:	0018      	movs	r0, r3
     868:	3036      	adds	r0, #54	; 0x36
     86a:	7805      	ldrb	r5, [r0, #0]
     86c:	4035      	ands	r5, r6
     86e:	430d      	orrs	r5, r1
     870:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     872:	7811      	ldrb	r1, [r2, #0]
     874:	000d      	movs	r5, r1
     876:	4325      	orrs	r5, r4
     878:	7015      	strb	r5, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     87a:	2237      	movs	r2, #55	; 0x37
     87c:	4694      	mov	ip, r2
     87e:	449c      	add	ip, r3
     880:	4662      	mov	r2, ip
     882:	2120      	movs	r1, #32
     884:	7812      	ldrb	r2, [r2, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     886:	2502      	movs	r5, #2
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     888:	4032      	ands	r2, r6
     88a:	430a      	orrs	r2, r1
     88c:	4661      	mov	r1, ip
     88e:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     890:	2102      	movs	r1, #2
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     892:	783a      	ldrb	r2, [r7, #0]
     894:	4322      	orrs	r2, r4
     896:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     898:	7802      	ldrb	r2, [r0, #0]
     89a:	43b2      	bics	r2, r6
     89c:	430a      	orrs	r2, r1
     89e:	7002      	strb	r2, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8a0:	9a03      	ldr	r2, [sp, #12]
     8a2:	9903      	ldr	r1, [sp, #12]
     8a4:	7812      	ldrb	r2, [r2, #0]
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8a6:	2040      	movs	r0, #64	; 0x40
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8a8:	4322      	orrs	r2, r4
     8aa:	700a      	strb	r2, [r1, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ac:	0019      	movs	r1, r3
     8ae:	314e      	adds	r1, #78	; 0x4e
     8b0:	780a      	ldrb	r2, [r1, #0]
     8b2:	43a2      	bics	r2, r4
     8b4:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8b6:	2280      	movs	r2, #128	; 0x80
     8b8:	01d2      	lsls	r2, r2, #7
     8ba:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8bc:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8be:	001a      	movs	r2, r3
     8c0:	3255      	adds	r2, #85	; 0x55
     8c2:	7811      	ldrb	r1, [r2, #0]
     8c4:	43a1      	bics	r1, r4
     8c6:	7011      	strb	r1, [r2, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8c8:	2180      	movs	r1, #128	; 0x80
     8ca:	0389      	lsls	r1, r1, #14
     8cc:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ce:	7811      	ldrb	r1, [r2, #0]
     8d0:	43a1      	bics	r1, r4
     8d2:	7011      	strb	r1, [r2, #0]
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8d4:	7811      	ldrb	r1, [r2, #0]
     8d6:	4301      	orrs	r1, r0
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8d8:	0018      	movs	r0, r3
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8da:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8dc:	3056      	adds	r0, #86	; 0x56
     8de:	7802      	ldrb	r2, [r0, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8e0:	0019      	movs	r1, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e2:	43a2      	bics	r2, r4
     8e4:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8e6:	2280      	movs	r2, #128	; 0x80
     8e8:	03d2      	lsls	r2, r2, #15
     8ea:	609a      	str	r2, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8ec:	313b      	adds	r1, #59	; 0x3b
     8ee:	780a      	ldrb	r2, [r1, #0]
     8f0:	43b2      	bics	r2, r6
     8f2:	432a      	orrs	r2, r5
     8f4:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8f6:	7802      	ldrb	r2, [r0, #0]
     8f8:	4322      	orrs	r2, r4
     8fa:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8fc:	001a      	movs	r2, r3
     8fe:	3257      	adds	r2, #87	; 0x57
     900:	7810      	ldrb	r0, [r2, #0]
     902:	43a0      	bics	r0, r4
     904:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     906:	7810      	ldrb	r0, [r2, #0]
     908:	4328      	orrs	r0, r5
     90a:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     90c:	2080      	movs	r0, #128	; 0x80
     90e:	0400      	lsls	r0, r0, #16
     910:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     912:	2020      	movs	r0, #32
     914:	780b      	ldrb	r3, [r1, #0]
     916:	4033      	ands	r3, r6
     918:	4303      	orrs	r3, r0
     91a:	700b      	strb	r3, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     91c:	7813      	ldrb	r3, [r2, #0]
    pinOut(TxPo);
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);

    delay_ms(200);
     91e:	30a8      	adds	r0, #168	; 0xa8
     920:	4323      	orrs	r3, r4
     922:	7013      	strb	r3, [r2, #0]
     924:	4b24      	ldr	r3, [pc, #144]	; (9b8 <init+0x420>)
     926:	4798      	blx	r3

    sercomClockEnable(SPI2, 3, 4);
     928:	4f24      	ldr	r7, [pc, #144]	; (9bc <init+0x424>)
     92a:	0028      	movs	r0, r5
     92c:	2204      	movs	r2, #4
     92e:	2103      	movs	r1, #3
     930:	47b8      	blx	r7
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 0x00);
     932:	2300      	movs	r3, #0
     934:	4e22      	ldr	r6, [pc, #136]	; (9c0 <init+0x428>)
     936:	9301      	str	r3, [sp, #4]
     938:	9300      	str	r3, [sp, #0]
     93a:	0021      	movs	r1, r4
     93c:	0028      	movs	r0, r5
     93e:	2203      	movs	r2, #3
     940:	47b0      	blx	r6

    sercomClockEnable(SPI0, 3, 4);
     942:	2204      	movs	r2, #4
     944:	2103      	movs	r1, #3
     946:	2000      	movs	r0, #0
     948:	47b8      	blx	r7
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     94a:	2300      	movs	r3, #0
     94c:	2103      	movs	r1, #3
     94e:	9301      	str	r3, [sp, #4]
     950:	9300      	str	r3, [sp, #0]
     952:	001a      	movs	r2, r3
     954:	0018      	movs	r0, r3
     956:	47b0      	blx	r6

    sercomClockEnable(SPI1, 3, 4);
     958:	0020      	movs	r0, r4
     95a:	2204      	movs	r2, #4
     95c:	2103      	movs	r1, #3
     95e:	47b8      	blx	r7
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     960:	2300      	movs	r3, #0
     962:	0020      	movs	r0, r4
     964:	9301      	str	r3, [sp, #4]
     966:	9300      	str	r3, [sp, #0]
     968:	001a      	movs	r2, r3
     96a:	2103      	movs	r1, #3
     96c:	47b0      	blx	r6

    sercomClockEnable(USART3, 4, 8);
     96e:	2208      	movs	r2, #8
     970:	2104      	movs	r1, #4
     972:	2003      	movs	r0, #3
     974:	47b8      	blx	r7
    sercomUartInit(USART3,1,0,19200);
     976:	2396      	movs	r3, #150	; 0x96
     978:	0021      	movs	r1, r4
     97a:	2200      	movs	r2, #0
     97c:	2003      	movs	r0, #3
     97e:	01db      	lsls	r3, r3, #7
     980:	4c10      	ldr	r4, [pc, #64]	; (9c4 <init+0x42c>)
     982:	47a0      	blx	r4

    TC4Init();
     984:	4b10      	ldr	r3, [pc, #64]	; (9c8 <init+0x430>)
     986:	4798      	blx	r3
    TC5Init();
     988:	4b10      	ldr	r3, [pc, #64]	; (9cc <init+0x434>)
     98a:	4798      	blx	r3
}
     98c:	b005      	add	sp, #20
     98e:	e01f      	b.n	9d0 <init+0x438>
     990:	41004000 	.word	0x41004000
     994:	40000400 	.word	0x40000400
     998:	000001d5 	.word	0x000001d5
     99c:	00001029 	.word	0x00001029
     9a0:	00000f29 	.word	0x00000f29
     9a4:	0000109d 	.word	0x0000109d
     9a8:	00000d49 	.word	0x00000d49
     9ac:	41004400 	.word	0x41004400
     9b0:	41004488 	.word	0x41004488
     9b4:	200002c4 	.word	0x200002c4
     9b8:	000010fd 	.word	0x000010fd
     9bc:	00003621 	.word	0x00003621
     9c0:	00003685 	.word	0x00003685
     9c4:	000036e9 	.word	0x000036e9
     9c8:	0000117d 	.word	0x0000117d
     9cc:	000011e5 	.word	0x000011e5
     9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9d2:	46c0      	nop			; (mov r8, r8)

000009d4 <main>:


int main(void) {
     9d4:	b510      	push	{r4, lr}

    init();
     9d6:	4b13      	ldr	r3, [pc, #76]	; (a24 <main+0x50>)
     9d8:	4798      	blx	r3

    initMS5803Barometer();
     9da:	4b13      	ldr	r3, [pc, #76]	; (a28 <main+0x54>)
     9dc:	4798      	blx	r3
    IMUinit();
     9de:	4b13      	ldr	r3, [pc, #76]	; (a2c <main+0x58>)
     9e0:	4798      	blx	r3

    computeKalmanGains();
     9e2:	4b13      	ldr	r3, [pc, #76]	; (a30 <main+0x5c>)
     9e4:	4798      	blx	r3

    computeKalmanBaroOnlyGains();
     9e6:	4b13      	ldr	r3, [pc, #76]	; (a34 <main+0x60>)
     9e8:	4798      	blx	r3

    sampleTick();
     9ea:	4c13      	ldr	r4, [pc, #76]	; (a38 <main+0x64>)
     9ec:	47a0      	blx	r4

    POST();
     9ee:	4b13      	ldr	r3, [pc, #76]	; (a3c <main+0x68>)
     9f0:	4798      	blx	r3

    isItPointingUp();
     9f2:	4b13      	ldr	r3, [pc, #76]	; (a40 <main+0x6c>)
     9f4:	4798      	blx	r3

    getSettings();
     9f6:	4b13      	ldr	r3, [pc, #76]	; (a44 <main+0x70>)
     9f8:	4798      	blx	r3

    //beepNumber(12345);


    beep(800);
     9fa:	20c8      	movs	r0, #200	; 0xc8
     9fc:	4b12      	ldr	r3, [pc, #72]	; (a48 <main+0x74>)
     9fe:	0080      	lsls	r0, r0, #2
     a00:	4798      	blx	r3

    startupTick = millis();
     a02:	4b12      	ldr	r3, [pc, #72]	; (a4c <main+0x78>)
     a04:	4798      	blx	r3
     a06:	4b12      	ldr	r3, [pc, #72]	; (a50 <main+0x7c>)
     a08:	6018      	str	r0, [r3, #0]

    while (1) {
        if (takeSample()) {
     a0a:	4b12      	ldr	r3, [pc, #72]	; (a54 <main+0x80>)
     a0c:	4798      	blx	r3
     a0e:	2800      	cmp	r0, #0
     a10:	d0fb      	beq.n	a0a <main+0x36>
            sampleTick();
     a12:	47a0      	blx	r4
            flight();
     a14:	4b10      	ldr	r3, [pc, #64]	; (a58 <main+0x84>)
     a16:	4798      	blx	r3
            igniterTick();
     a18:	4b10      	ldr	r3, [pc, #64]	; (a5c <main+0x88>)
     a1a:	4798      	blx	r3
            computeKalmanStates();
     a1c:	4b10      	ldr	r3, [pc, #64]	; (a60 <main+0x8c>)
     a1e:	4798      	blx	r3
     a20:	e7f3      	b.n	a0a <main+0x36>
     a22:	46c0      	nop			; (mov r8, r8)
     a24:	00000599 	.word	0x00000599
     a28:	00000559 	.word	0x00000559
     a2c:	00000a7d 	.word	0x00000a7d
     a30:	0000187d 	.word	0x0000187d
     a34:	0000211d 	.word	0x0000211d
     a38:	00003311 	.word	0x00003311
     a3c:	00000c51 	.word	0x00000c51
     a40:	000015c1 	.word	0x000015c1
     a44:	00003891 	.word	0x00003891
     a48:	00000e2d 	.word	0x00000e2d
     a4c:	00001149 	.word	0x00001149
     a50:	2000019c 	.word	0x2000019c
     a54:	000032f9 	.word	0x000032f9
     a58:	0000124d 	.word	0x0000124d
     a5c:	00001695 	.word	0x00001695
     a60:	00002b7d 	.word	0x00002b7d

00000a64 <HardFault_Handler>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
     a64:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
     a68:	4a02      	ldr	r2, [pc, #8]	; (a74 <HardFault_Handler+0x10>)
     a6a:	4b03      	ldr	r3, [pc, #12]	; (a78 <HardFault_Handler+0x14>)
     a6c:	60da      	str	r2, [r3, #12]
     a6e:	f3bf 8f4f 	dsb	sy
     a72:	e7fe      	b.n	a72 <HardFault_Handler+0xe>
     a74:	05fa0004 	.word	0x05fa0004
     a78:	e000ed00 	.word	0xe000ed00

00000a7c <IMUinit>:
extern uint32_t _ezero;
extern uint32_t _sstack;
extern uint32_t _estack;


void IMUinit() {
     a7c:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a7e:	4c08      	ldr	r4, [pc, #32]	; (aa0 <IMUinit+0x24>)
     a80:	2580      	movs	r5, #128	; 0x80
     a82:	0023      	movs	r3, r4
     a84:	00ed      	lsls	r5, r5, #3
     a86:	3394      	adds	r3, #148	; 0x94
     a88:	601d      	str	r5, [r3, #0]

    pinLow(cs_accel);
    spiDataOut(SPI0, BMI_ACCEL_PMU_RANGE);
     a8a:	4e06      	ldr	r6, [pc, #24]	; (aa4 <IMUinit+0x28>)
     a8c:	210f      	movs	r1, #15
     a8e:	2000      	movs	r0, #0
     a90:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a92:	3498      	adds	r4, #152	; 0x98
    spiDataOut(SPI0, BMI_ACCEL_16G_RANGE);
     a94:	210c      	movs	r1, #12
     a96:	2000      	movs	r0, #0
     a98:	47b0      	blx	r6
     a9a:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     a9c:	bd70      	pop	{r4, r5, r6, pc}
     a9e:	46c0      	nop			; (mov r8, r8)
     aa0:	41004400 	.word	0x41004400
     aa4:	00003749 	.word	0x00003749

00000aa8 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     aa8:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     aaa:	4b09      	ldr	r3, [pc, #36]	; (ad0 <USARTconnectionAvaliable+0x28>)
     aac:	7e1c      	ldrb	r4, [r3, #24]
     aae:	0764      	lsls	r4, r4, #29
     ab0:	0fe4      	lsrs	r4, r4, #31
     ab2:	2c01      	cmp	r4, #1
     ab4:	d001      	beq.n	aba <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     ab6:	2000      	movs	r0, #0
     ab8:	e009      	b.n	ace <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     aba:	2003      	movs	r0, #3
     abc:	4b05      	ldr	r3, [pc, #20]	; (ad4 <USARTconnectionAvaliable+0x2c>)
     abe:	4798      	blx	r3
     ac0:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     ac2:	2948      	cmp	r1, #72	; 0x48
     ac4:	d1f7      	bne.n	ab6 <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     ac6:	2003      	movs	r0, #3
     ac8:	4b03      	ldr	r3, [pc, #12]	; (ad8 <USARTconnectionAvaliable+0x30>)
     aca:	4798      	blx	r3
            return true;
     acc:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     ace:	bd10      	pop	{r4, pc}
     ad0:	42001400 	.word	0x42001400
     ad4:	00003795 	.word	0x00003795
     ad8:	0000377d 	.word	0x0000377d

00000adc <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ade:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ae0:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ae2:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     ae4:	1a09      	subs	r1, r1, r0
     ae6:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ae8:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     aea:	b28b      	uxth	r3, r1
     aec:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     aee:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     af0:	a902      	add	r1, sp, #8
     af2:	0028      	movs	r0, r5
     af4:	4b09      	ldr	r3, [pc, #36]	; (b1c <sendTheasePagesToComputer+0x40>)
     af6:	4798      	blx	r3
     af8:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     afa:	ab02      	add	r3, sp, #8
     afc:	5d99      	ldrb	r1, [r3, r6]
     afe:	2003      	movs	r0, #3
     b00:	4b07      	ldr	r3, [pc, #28]	; (b20 <sendTheasePagesToComputer+0x44>)
     b02:	3601      	adds	r6, #1
     b04:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b06:	42be      	cmp	r6, r7
     b08:	d1f7      	bne.n	afa <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b0a:	3401      	adds	r4, #1
     b0c:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b0e:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b10:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b12:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b14:	42a3      	cmp	r3, r4
     b16:	d2eb      	bcs.n	af0 <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     b18:	b043      	add	sp, #268	; 0x10c
     b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b1c:	0000035d 	.word	0x0000035d
     b20:	0000377d 	.word	0x0000377d

00000b24 <altitudeAGL>:

int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
     b24:	4b07      	ldr	r3, [pc, #28]	; (b44 <altitudeAGL+0x20>)

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}

int32_t altitudeAGL() {
     b26:	b510      	push	{r4, lr}
    return altitude - offsets.groundOffset;
     b28:	6998      	ldr	r0, [r3, #24]
     b2a:	4b07      	ldr	r3, [pc, #28]	; (b48 <altitudeAGL+0x24>)
     b2c:	4798      	blx	r3
     b2e:	000b      	movs	r3, r1
     b30:	4906      	ldr	r1, [pc, #24]	; (b4c <altitudeAGL+0x28>)
     b32:	0002      	movs	r2, r0
     b34:	6808      	ldr	r0, [r1, #0]
     b36:	6849      	ldr	r1, [r1, #4]
     b38:	4c05      	ldr	r4, [pc, #20]	; (b50 <altitudeAGL+0x2c>)
     b3a:	47a0      	blx	r4
     b3c:	4b05      	ldr	r3, [pc, #20]	; (b54 <altitudeAGL+0x30>)
     b3e:	4798      	blx	r3
}
     b40:	bd10      	pop	{r4, pc}
     b42:	46c0      	nop			; (mov r8, r8)
     b44:	20000150 	.word	0x20000150
     b48:	00006ca9 	.word	0x00006ca9
     b4c:	20000328 	.word	0x20000328
     b50:	000064d1 	.word	0x000064d1
     b54:	00006bb9 	.word	0x00006bb9

00000b58 <unplugged>:


bool unplugged() {
    if (sample.voltage.batFloat < 3.4) {
     b58:	4b07      	ldr	r3, [pc, #28]	; (b78 <unplugged+0x20>)
int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
}


bool unplugged() {
     b5a:	b570      	push	{r4, r5, r6, lr}
     b5c:	68d8      	ldr	r0, [r3, #12]
     b5e:	4b07      	ldr	r3, [pc, #28]	; (b7c <unplugged+0x24>)
     b60:	4798      	blx	r3
     b62:	4a07      	ldr	r2, [pc, #28]	; (b80 <unplugged+0x28>)
     b64:	4b07      	ldr	r3, [pc, #28]	; (b84 <unplugged+0x2c>)
     b66:	4d08      	ldr	r5, [pc, #32]	; (b88 <unplugged+0x30>)
     b68:	2401      	movs	r4, #1
     b6a:	47a8      	blx	r5
     b6c:	2800      	cmp	r0, #0
     b6e:	d100      	bne.n	b72 <unplugged+0x1a>
     b70:	1c04      	adds	r4, r0, #0
     b72:	b2e0      	uxtb	r0, r4
    if (sample.voltage.batFloat < 3.4) {
        return true;
    } else {
        return false;
    }
}
     b74:	bd70      	pop	{r4, r5, r6, pc}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	200005f0 	.word	0x200005f0
     b7c:	00006d19 	.word	0x00006d19
     b80:	33333333 	.word	0x33333333
     b84:	400b3333 	.word	0x400b3333
     b88:	00004ded 	.word	0x00004ded

00000b8c <shutDown>:

void shutDown() {
     b8c:	b510      	push	{r4, lr}


    delay_ms(100);
     b8e:	2064      	movs	r0, #100	; 0x64
     b90:	4b14      	ldr	r3, [pc, #80]	; (be4 <shutDown+0x58>)
     b92:	4798      	blx	r3
    TC4->COUNT8.CTRLA.reg = 0;
     b94:	2300      	movs	r3, #0

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     b96:	2180      	movs	r1, #128	; 0x80
     b98:	4a13      	ldr	r2, [pc, #76]	; (be8 <shutDown+0x5c>)
     b9a:	0309      	lsls	r1, r1, #12
     b9c:	8013      	strh	r3, [r2, #0]
    TC5->COUNT8.CTRLA.reg = 0;
     b9e:	4a13      	ldr	r2, [pc, #76]	; (bec <shutDown+0x60>)
     ba0:	2480      	movs	r4, #128	; 0x80
     ba2:	8013      	strh	r3, [r2, #0]
     ba4:	4a12      	ldr	r2, [pc, #72]	; (bf0 <shutDown+0x64>)
    NVIC_DisableIRQ(TC4_IRQn);
    NVIC_DisableIRQ(TC5_IRQn);
    NVIC_DisableIRQ(RTC_IRQn);
    RTC->MODE1.CTRL.bit.ENABLE = 0;
     ba6:	2002      	movs	r0, #2
     ba8:	67d1      	str	r1, [r2, #124]	; 0x7c
     baa:	2108      	movs	r1, #8
     bac:	0364      	lsls	r4, r4, #13
     bae:	67d4      	str	r4, [r2, #124]	; 0x7c
     bb0:	67d1      	str	r1, [r2, #124]	; 0x7c
     bb2:	4a10      	ldr	r2, [pc, #64]	; (bf4 <shutDown+0x68>)
     bb4:	8811      	ldrh	r1, [r2, #0]
     bb6:	4381      	bics	r1, r0
     bb8:	8011      	strh	r1, [r2, #0]
    SysTick->CTRL = 0;
     bba:	4a0f      	ldr	r2, [pc, #60]	; (bf8 <shutDown+0x6c>)
     bbc:	6013      	str	r3, [r2, #0]
    PM->APBAMASK.reg = 0;
     bbe:	4a0f      	ldr	r2, [pc, #60]	; (bfc <shutDown+0x70>)
     bc0:	6193      	str	r3, [r2, #24]

    //turn off sercom clocks
    //GCLK->CLKCTRL.reg

    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     bc2:	2280      	movs	r2, #128	; 0x80
     bc4:	4b0e      	ldr	r3, [pc, #56]	; (c00 <shutDown+0x74>)
     bc6:	0052      	lsls	r2, r2, #1
     bc8:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_OSC8M) | (GCLK_GENCTRL_GENEN));
     bca:	2283      	movs	r2, #131	; 0x83
     bcc:	0252      	lsls	r2, r2, #9
     bce:	605a      	str	r2, [r3, #4]
     bd0:	4b0c      	ldr	r3, [pc, #48]	; (c04 <shutDown+0x78>)

    pinHigh(LedPin);

    SYSCTRL->BOD33.reg = SYSCTRL_BOD33_PSEL_DIV8 | SYSCTRL_BOD33_ACTION_RESET | SYSCTRL_BOD33_LEVEL(60);
     bd2:	4a0d      	ldr	r2, [pc, #52]	; (c08 <shutDown+0x7c>)
     bd4:	619c      	str	r4, [r3, #24]
     bd6:	4b0d      	ldr	r3, [pc, #52]	; (c0c <shutDown+0x80>)
     bd8:	635a      	str	r2, [r3, #52]	; 0x34

    SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
     bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
     bdc:	4302      	orrs	r2, r0
     bde:	635a      	str	r2, [r3, #52]	; 0x34
     be0:	e7fe      	b.n	be0 <shutDown+0x54>
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	000010fd 	.word	0x000010fd
     be8:	42003000 	.word	0x42003000
     bec:	42003400 	.word	0x42003400
     bf0:	e000e104 	.word	0xe000e104
     bf4:	40001400 	.word	0x40001400
     bf8:	e000e010 	.word	0xe000e010
     bfc:	40000400 	.word	0x40000400
     c00:	40000c00 	.word	0x40000c00
     c04:	41004400 	.word	0x41004400
     c08:	003c2008 	.word	0x003c2008
     c0c:	40000800 	.word	0x40000800

00000c10 <finishFlight>:
    }
}

void finishFlight() {

    flightState = flightIdle;
     c10:	2201      	movs	r2, #1
     c12:	4b05      	ldr	r3, [pc, #20]	; (c28 <finishFlight+0x18>)
    while(1) {

    }
}

void finishFlight() {
     c14:	b510      	push	{r4, lr}

    flightState = flightIdle;
     c16:	701a      	strb	r2, [r3, #0]
    AT25SFHoldTillReady();
     c18:	4b04      	ldr	r3, [pc, #16]	; (c2c <finishFlight+0x1c>)
     c1a:	4798      	blx	r3
    writeFlightEndAddress( );
     c1c:	4b04      	ldr	r3, [pc, #16]	; (c30 <finishFlight+0x20>)
     c1e:	4798      	blx	r3
    unpluggedJingle();
     c20:	4b04      	ldr	r3, [pc, #16]	; (c34 <finishFlight+0x24>)
     c22:	4798      	blx	r3
    shutDown();
     c24:	4b04      	ldr	r3, [pc, #16]	; (c38 <finishFlight+0x28>)
     c26:	4798      	blx	r3
     c28:	200001ac 	.word	0x200001ac
     c2c:	000001e5 	.word	0x000001e5
     c30:	0000318d 	.word	0x0000318d
     c34:	00000ea1 	.word	0x00000ea1
     c38:	00000b8d 	.word	0x00000b8d

00000c3c <finishFromPad>:

}

void finishFromPad() {
    unpluggedJingle();
     c3c:	4b02      	ldr	r3, [pc, #8]	; (c48 <finishFromPad+0xc>)
    unpluggedJingle();
    shutDown();

}

void finishFromPad() {
     c3e:	b510      	push	{r4, lr}
    unpluggedJingle();
     c40:	4798      	blx	r3
    shutDown();
     c42:	4b02      	ldr	r3, [pc, #8]	; (c4c <finishFromPad+0x10>)
     c44:	4798      	blx	r3
     c46:	46c0      	nop			; (mov r8, r8)
     c48:	00000ea1 	.word	0x00000ea1
     c4c:	00000b8d 	.word	0x00000b8d

00000c50 <POST>:
}


void POST() {
     c50:	b5f0      	push	{r4, r5, r6, r7, lr}

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     c52:	4b32      	ldr	r3, [pc, #200]	; (d1c <POST+0xcc>)
    unpluggedJingle();
    shutDown();
}


void POST() {
     c54:	b085      	sub	sp, #20

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     c56:	4798      	blx	r3
    if (crc != coefficients_[7]) {
     c58:	4b31      	ldr	r3, [pc, #196]	; (d20 <POST+0xd0>)
     c5a:	b280      	uxth	r0, r0
     c5c:	89db      	ldrh	r3, [r3, #14]
        postFailed = true;
        failType = 1;
     c5e:	2401      	movs	r4, #1
    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
    if (crc != coefficients_[7]) {
     c60:	4283      	cmp	r3, r0
     c62:	d100      	bne.n	c66 <POST+0x16>

void POST() {
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
    u8_t failType = 0;
     c64:	2400      	movs	r4, #0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c66:	2780      	movs	r7, #128	; 0x80
     c68:	4d2e      	ldr	r5, [pc, #184]	; (d24 <POST+0xd4>)
     c6a:	02ff      	lsls	r7, r7, #11
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    spiDataOut(SPI1,0x9f); // read id and mfg code
     c6c:	219f      	movs	r1, #159	; 0x9f
     c6e:	4b2e      	ldr	r3, [pc, #184]	; (d28 <POST+0xd8>)


void POST() {
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
     c70:	9401      	str	r4, [sp, #4]
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    spiDataOut(SPI1,0x9f); // read id and mfg code
     c72:	2001      	movs	r0, #1
     c74:	616f      	str	r7, [r5, #20]
     c76:	4798      	blx	r3
    u8_t mfgID = spiDataIn(SPI1);
     c78:	4e2c      	ldr	r6, [pc, #176]	; (d2c <POST+0xdc>)
     c7a:	2001      	movs	r0, #1
     c7c:	47b0      	blx	r6
     c7e:	9002      	str	r0, [sp, #8]
    u8_t deviceID1 = spiDataIn(SPI1);
     c80:	2001      	movs	r0, #1
     c82:	47b0      	blx	r6
     c84:	9003      	str	r0, [sp, #12]
    u8_t deviceID2 = spiDataIn(SPI1);
     c86:	2001      	movs	r0, #1
     c88:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c8a:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    if ( (mfgID != 0x1f) & (deviceID1 != 0x86) & (deviceID2 != 0x01)) {
     c8c:	9b02      	ldr	r3, [sp, #8]
     c8e:	3b1f      	subs	r3, #31
     c90:	1e5a      	subs	r2, r3, #1
     c92:	4193      	sbcs	r3, r2
     c94:	0019      	movs	r1, r3
     c96:	9b03      	ldr	r3, [sp, #12]
     c98:	3b86      	subs	r3, #134	; 0x86
     c9a:	1e5a      	subs	r2, r3, #1
     c9c:	4193      	sbcs	r3, r2
     c9e:	4a22      	ldr	r2, [pc, #136]	; (d28 <POST+0xd8>)
     ca0:	9202      	str	r2, [sp, #8]
     ca2:	420b      	tst	r3, r1
     ca4:	d004      	beq.n	cb0 <POST+0x60>
     ca6:	2801      	cmp	r0, #1
     ca8:	d002      	beq.n	cb0 <POST+0x60>
        postFailed = true;
     caa:	2301      	movs	r3, #1
        failType = 2;
     cac:	2402      	movs	r4, #2
    u8_t deviceID1 = spiDataIn(SPI1);
    u8_t deviceID2 = spiDataIn(SPI1);
    pinHigh(cs_mem);

    if ( (mfgID != 0x1f) & (deviceID1 != 0x86) & (deviceID2 != 0x01)) {
        postFailed = true;
     cae:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cb0:	2780      	movs	r7, #128	; 0x80
     cb2:	4b1f      	ldr	r3, [pc, #124]	; (d30 <POST+0xe0>)
     cb4:	00ff      	lsls	r7, r7, #3
     cb6:	601f      	str	r7, [r3, #0]
        failType = 2;
    }

    //Accelerometer Post
    pinLow(cs_accel);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     cb8:	9b02      	ldr	r3, [sp, #8]
     cba:	2180      	movs	r1, #128	; 0x80
     cbc:	2000      	movs	r0, #0
     cbe:	4798      	blx	r3
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
     cc0:	21ff      	movs	r1, #255	; 0xff
     cc2:	2000      	movs	r0, #0
     cc4:	4e1b      	ldr	r6, [pc, #108]	; (d34 <POST+0xe4>)
     cc6:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cc8:	4b1b      	ldr	r3, [pc, #108]	; (d38 <POST+0xe8>)
     cca:	601f      	str	r7, [r3, #0]
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
     ccc:	28fa      	cmp	r0, #250	; 0xfa
     cce:	d002      	beq.n	cd6 <POST+0x86>
        postFailed = true;
     cd0:	2301      	movs	r3, #1
        failType = 3;
     cd2:	2403      	movs	r4, #3
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
        postFailed = true;
     cd4:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cd6:	616f      	str	r7, [r5, #20]
        failType = 3;
    }

    //Gyro Post
    pinLow(cs_gyro);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     cd8:	2180      	movs	r1, #128	; 0x80
     cda:	2000      	movs	r0, #0
     cdc:	9b02      	ldr	r3, [sp, #8]
     cde:	4798      	blx	r3
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
     ce0:	21ff      	movs	r1, #255	; 0xff
     ce2:	2000      	movs	r0, #0
     ce4:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ce6:	61af      	str	r7, [r5, #24]
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
     ce8:	280f      	cmp	r0, #15
     cea:	d103      	bne.n	cf4 <POST+0xa4>
    }

    //Analog Accelerometer Post


    if (postFailed) {
     cec:	9b01      	ldr	r3, [sp, #4]
     cee:	2b00      	cmp	r3, #0
     cf0:	d101      	bne.n	cf6 <POST+0xa6>
     cf2:	e011      	b.n	d18 <POST+0xc8>
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
        postFailed = true;
        failType = 4;
     cf4:	2404      	movs	r4, #4

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     cf6:	0025      	movs	r5, r4
     cf8:	4e10      	ldr	r6, [pc, #64]	; (d3c <POST+0xec>)
     cfa:	2d00      	cmp	r5, #0
     cfc:	d009      	beq.n	d12 <POST+0xc2>
                beep(300);
     cfe:	2096      	movs	r0, #150	; 0x96
     d00:	4b0f      	ldr	r3, [pc, #60]	; (d40 <POST+0xf0>)
     d02:	0040      	lsls	r0, r0, #1
     d04:	4798      	blx	r3
                delay_ms(300);
     d06:	2096      	movs	r0, #150	; 0x96

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     d08:	3d01      	subs	r5, #1
                beep(300);
                delay_ms(300);
     d0a:	0040      	lsls	r0, r0, #1
     d0c:	47b0      	blx	r6

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     d0e:	b2ed      	uxtb	r5, r5
     d10:	e7f2      	b.n	cf8 <POST+0xa8>
                beep(300);
                delay_ms(300);
            }
            delay_ms(1500);
     d12:	480c      	ldr	r0, [pc, #48]	; (d44 <POST+0xf4>)
     d14:	47b0      	blx	r6
        }
     d16:	e7ee      	b.n	cf6 <POST+0xa6>
    }
}
     d18:	b005      	add	sp, #20
     d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d1c:	00000589 	.word	0x00000589
     d20:	200002ae 	.word	0x200002ae
     d24:	41004400 	.word	0x41004400
     d28:	00003749 	.word	0x00003749
     d2c:	00003761 	.word	0x00003761
     d30:	41004494 	.word	0x41004494
     d34:	00003731 	.word	0x00003731
     d38:	41004498 	.word	0x41004498
     d3c:	000010fd 	.word	0x000010fd
     d40:	00000e2d 	.word	0x00000e2d
     d44:	000005dc 	.word	0x000005dc

00000d48 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     d48:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     d4a:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     d4c:	4a10      	ldr	r2, [pc, #64]	; (d90 <adcInit+0x48>)
     d4e:	0249      	lsls	r1, r1, #9
     d50:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     d52:	4810      	ldr	r0, [pc, #64]	; (d94 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     d54:	430b      	orrs	r3, r1
     d56:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     d58:	23e0      	movs	r3, #224	; 0xe0
     d5a:	490f      	ldr	r1, [pc, #60]	; (d98 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     d5c:	4a0f      	ldr	r2, [pc, #60]	; (d9c <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     d5e:	00db      	lsls	r3, r3, #3
     d60:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     d62:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     d64:	4a0e      	ldr	r2, [pc, #56]	; (da0 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     d66:	6812      	ldr	r2, [r2, #0]
     d68:	0150      	lsls	r0, r2, #5
     d6a:	4018      	ands	r0, r3
     d6c:	4b0d      	ldr	r3, [pc, #52]	; (da4 <adcInit+0x5c>)
     d6e:	0154      	lsls	r4, r2, #5
     d70:	681a      	ldr	r2, [r3, #0]
     d72:	0ed3      	lsrs	r3, r2, #27
     d74:	4323      	orrs	r3, r4
     d76:	b2da      	uxtb	r2, r3
     d78:	0003      	movs	r3, r0
     d7a:	4313      	orrs	r3, r2
     d7c:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC0;
     d7e:	2301      	movs	r3, #1
     d80:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     d82:	18db      	adds	r3, r3, r3
     d84:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     d86:	7e4b      	ldrb	r3, [r1, #25]
     d88:	b25b      	sxtb	r3, r3
     d8a:	2b00      	cmp	r3, #0
     d8c:	dbfb      	blt.n	d86 <adcInit+0x3e>
}
     d8e:	bd10      	pop	{r4, pc}
     d90:	40000400 	.word	0x40000400
     d94:	0000401e 	.word	0x0000401e
     d98:	42004000 	.word	0x42004000
     d9c:	40000c00 	.word	0x40000c00
     da0:	00806024 	.word	0x00806024
     da4:	00806020 	.word	0x00806020

00000da8 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     da8:	2202      	movs	r2, #2
     daa:	4b05      	ldr	r3, [pc, #20]	; (dc0 <adcSample+0x18>)
     dac:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     dae:	3a01      	subs	r2, #1
     db0:	7e19      	ldrb	r1, [r3, #24]
     db2:	4211      	tst	r1, r2
     db4:	d0fc      	beq.n	db0 <adcSample+0x8>
    return ADC->RESULT.reg;
     db6:	4b02      	ldr	r3, [pc, #8]	; (dc0 <adcSample+0x18>)
     db8:	8b58      	ldrh	r0, [r3, #26]
     dba:	b280      	uxth	r0, r0
}
     dbc:	4770      	bx	lr
     dbe:	46c0      	nop			; (mov r8, r8)
     dc0:	42004000 	.word	0x42004000

00000dc4 <adc_read>:


u16_t adc_read(Pin p) {
     dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     dc6:	2501      	movs	r5, #1
     dc8:	0c02      	lsrs	r2, r0, #16
     dca:	b2d4      	uxtb	r4, r2
     dcc:	9000      	str	r0, [sp, #0]
     dce:	0e00      	lsrs	r0, r0, #24
     dd0:	9101      	str	r1, [sp, #4]
     dd2:	0842      	lsrs	r2, r0, #1
     dd4:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     dd6:	4911      	ldr	r1, [pc, #68]	; (e1c <adc_read+0x58>)
     dd8:	18d2      	adds	r2, r2, r3
     dda:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     ddc:	4228      	tst	r0, r5
     dde:	d005      	beq.n	dec <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     de0:	210f      	movs	r1, #15
     de2:	7814      	ldrb	r4, [r2, #0]
     de4:	4021      	ands	r1, r4
     de6:	2410      	movs	r4, #16
     de8:	4321      	orrs	r1, r4
     dea:	e003      	b.n	df4 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     dec:	240f      	movs	r4, #15
     dee:	7811      	ldrb	r1, [r2, #0]
     df0:	43a1      	bics	r1, r4
     df2:	4329      	orrs	r1, r5
     df4:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     df6:	2101      	movs	r1, #1
     df8:	4a09      	ldr	r2, [pc, #36]	; (e20 <adc_read+0x5c>)
     dfa:	18c3      	adds	r3, r0, r3
     dfc:	189b      	adds	r3, r3, r2
     dfe:	781a      	ldrb	r2, [r3, #0]
     e00:	430a      	orrs	r2, r1
     e02:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     e04:	466b      	mov	r3, sp
     e06:	791a      	ldrb	r2, [r3, #4]
     e08:	231f      	movs	r3, #31
     e0a:	4013      	ands	r3, r2
     e0c:	22c0      	movs	r2, #192	; 0xc0
     e0e:	0152      	lsls	r2, r2, #5
     e10:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     e12:	4a04      	ldr	r2, [pc, #16]	; (e24 <adc_read+0x60>)
     e14:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     e16:	4b04      	ldr	r3, [pc, #16]	; (e28 <adc_read+0x64>)
     e18:	4798      	blx	r3
     e1a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     e1c:	41004430 	.word	0x41004430
     e20:	41004440 	.word	0x41004440
     e24:	42004000 	.word	0x42004000
     e28:	00000da9 	.word	0x00000da9

00000e2c <beep>:
#include <util.h>
#include <boardDefines.h>
#include <math.h>


void beep(u16_t toggles) {
     e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     e2e:	2380      	movs	r3, #128	; 0x80
     e30:	2780      	movs	r7, #128	; 0x80
     e32:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     e34:	2500      	movs	r5, #0
     e36:	4c0a      	ldr	r4, [pc, #40]	; (e60 <beep+0x34>)
     e38:	035b      	lsls	r3, r3, #13
     e3a:	61e3      	str	r3, [r4, #28]
     e3c:	03bf      	lsls	r7, r7, #14
     e3e:	42b5      	cmp	r5, r6
     e40:	d006      	beq.n	e50 <beep+0x24>
     e42:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     e44:	207a      	movs	r0, #122	; 0x7a
     e46:	4b07      	ldr	r3, [pc, #28]	; (e64 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     e48:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     e4a:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     e4c:	b2ad      	uxth	r5, r5
     e4e:	e7f6      	b.n	e3e <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e50:	2380      	movs	r3, #128	; 0x80
     e52:	039b      	lsls	r3, r3, #14
     e54:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     e56:	2380      	movs	r3, #128	; 0x80
     e58:	035b      	lsls	r3, r3, #13
     e5a:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e5e:	46c0      	nop			; (mov r8, r8)
     e60:	41004400 	.word	0x41004400
     e64:	000010c9 	.word	0x000010c9

00000e68 <startupJingle>:
    }
    beepDigit(number);

}

void startupJingle() {
     e68:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     e6a:	2696      	movs	r6, #150	; 0x96
     e6c:	0076      	lsls	r6, r6, #1
     e6e:	4d0a      	ldr	r5, [pc, #40]	; (e98 <startupJingle+0x30>)
     e70:	0030      	movs	r0, r6
     e72:	47a8      	blx	r5
    delay_ms(80);
     e74:	4c09      	ldr	r4, [pc, #36]	; (e9c <startupJingle+0x34>)
     e76:	2050      	movs	r0, #80	; 0x50
     e78:	47a0      	blx	r4
    beep(300);
     e7a:	0030      	movs	r0, r6
     e7c:	47a8      	blx	r5
    delay_ms(250);
     e7e:	20fa      	movs	r0, #250	; 0xfa
     e80:	47a0      	blx	r4
    beep(300);
     e82:	0030      	movs	r0, r6
     e84:	47a8      	blx	r5
    delay_ms(80);
     e86:	2050      	movs	r0, #80	; 0x50
     e88:	47a0      	blx	r4
    beep(300);
     e8a:	0030      	movs	r0, r6
     e8c:	47a8      	blx	r5
    delay_ms(500);
     e8e:	20fa      	movs	r0, #250	; 0xfa
     e90:	0040      	lsls	r0, r0, #1
     e92:	47a0      	blx	r4
}
     e94:	bd70      	pop	{r4, r5, r6, pc}
     e96:	46c0      	nop			; (mov r8, r8)
     e98:	00000e2d 	.word	0x00000e2d
     e9c:	000010fd 	.word	0x000010fd

00000ea0 <unpluggedJingle>:

void unpluggedJingle() {
     ea0:	b570      	push	{r4, r5, r6, lr}
    delay_ms(80);
    beep(300);
     ea2:	2696      	movs	r6, #150	; 0x96
    beep(300);
    delay_ms(500);
}

void unpluggedJingle() {
    delay_ms(80);
     ea4:	4c0c      	ldr	r4, [pc, #48]	; (ed8 <unpluggedJingle+0x38>)
    beep(300);
     ea6:	0076      	lsls	r6, r6, #1
    beep(300);
    delay_ms(500);
}

void unpluggedJingle() {
    delay_ms(80);
     ea8:	2050      	movs	r0, #80	; 0x50
     eaa:	47a0      	blx	r4
    beep(300);
     eac:	4d0b      	ldr	r5, [pc, #44]	; (edc <unpluggedJingle+0x3c>)
     eae:	0030      	movs	r0, r6
     eb0:	47a8      	blx	r5
    delay_ms(80);
     eb2:	2050      	movs	r0, #80	; 0x50
     eb4:	47a0      	blx	r4
    beep(300);
     eb6:	0030      	movs	r0, r6
     eb8:	47a8      	blx	r5
    delay_ms(80);
     eba:	2050      	movs	r0, #80	; 0x50
     ebc:	47a0      	blx	r4
    beep(300);
     ebe:	0030      	movs	r0, r6
     ec0:	47a8      	blx	r5
    delay_ms(80);
     ec2:	2050      	movs	r0, #80	; 0x50
     ec4:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ec6:	2280      	movs	r2, #128	; 0x80
     ec8:	4b05      	ldr	r3, [pc, #20]	; (ee0 <unpluggedJingle+0x40>)
     eca:	0392      	lsls	r2, r2, #14
     ecc:	615a      	str	r2, [r3, #20]
     ece:	2280      	movs	r2, #128	; 0x80
     ed0:	0352      	lsls	r2, r2, #13
     ed2:	615a      	str	r2, [r3, #20]
    pinLow(buzzerPin);
    pinLow(LedPin);

}
     ed4:	bd70      	pop	{r4, r5, r6, pc}
     ed6:	46c0      	nop			; (mov r8, r8)
     ed8:	000010fd 	.word	0x000010fd
     edc:	00000e2d 	.word	0x00000e2d
     ee0:	41004400 	.word	0x41004400

00000ee4 <dfll_nvm_val>:
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10

uint32_t dfll_nvm_val() {
    uint32_t coarse = ( *((uint32_t *)(NVMCTRL_OTP4)
     ee4:	4b08      	ldr	r3, [pc, #32]	; (f08 <dfll_nvm_val+0x24>)
     ee6:	6818      	ldr	r0, [r3, #0]
     ee8:	0e80      	lsrs	r0, r0, #26
                          + (NVM_DFLL_COARSE_POS / 32))
                        >> (NVM_DFLL_COARSE_POS % 32))
                      & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     eea:	283f      	cmp	r0, #63	; 0x3f
     eec:	d100      	bne.n	ef0 <dfll_nvm_val+0xc>
        coarse = 0x1f;
     eee:	3820      	subs	r0, #32
    }
    uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
                        + (NVM_DFLL_FINE_POS / 32))
                      >> (NVM_DFLL_FINE_POS % 32))
     ef0:	4b06      	ldr	r3, [pc, #24]	; (f0c <dfll_nvm_val+0x28>)
                    & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     ef2:	4a07      	ldr	r2, [pc, #28]	; (f10 <dfll_nvm_val+0x2c>)
                        >> (NVM_DFLL_COARSE_POS % 32))
                      & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
     ef4:	681b      	ldr	r3, [r3, #0]
     ef6:	059b      	lsls	r3, r3, #22
     ef8:	0d9b      	lsrs	r3, r3, #22
                        + (NVM_DFLL_FINE_POS / 32))
                      >> (NVM_DFLL_FINE_POS % 32))
                    & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     efa:	4293      	cmp	r3, r2
     efc:	d100      	bne.n	f00 <dfll_nvm_val+0x1c>
        fine = 0x1ff;
     efe:	4b05      	ldr	r3, [pc, #20]	; (f14 <dfll_nvm_val+0x30>)
    }

    return SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     f00:	0280      	lsls	r0, r0, #10
     f02:	4318      	orrs	r0, r3
}
     f04:	4770      	bx	lr
     f06:	46c0      	nop			; (mov r8, r8)
     f08:	00806024 	.word	0x00806024
     f0c:	00806028 	.word	0x00806028
     f10:	000003ff 	.word	0x000003ff
     f14:	000001ff 	.word	0x000001ff

00000f18 <dfll_wait_for_sync>:

void dfll_wait_for_sync() {
    while (!SYSCTRL->PCLKSR.bit.DFLLRDY);
     f18:	4a02      	ldr	r2, [pc, #8]	; (f24 <dfll_wait_for_sync+0xc>)
     f1a:	68d3      	ldr	r3, [r2, #12]
     f1c:	06db      	lsls	r3, r3, #27
     f1e:	d5fc      	bpl.n	f1a <dfll_wait_for_sync+0x2>
}
     f20:	4770      	bx	lr
     f22:	46c0      	nop			; (mov r8, r8)
     f24:	40000800 	.word	0x40000800

00000f28 <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     f28:	4b27      	ldr	r3, [pc, #156]	; (fc8 <RtcInit+0xa0>)
     f2a:	4a28      	ldr	r2, [pc, #160]	; (fcc <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     f2c:	4828      	ldr	r0, [pc, #160]	; (fd0 <RtcInit+0xa8>)
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     f2e:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     f30:	4a28      	ldr	r2, [pc, #160]	; (fd4 <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     f32:	6999      	ldr	r1, [r3, #24]
     f34:	6812      	ldr	r2, [r2, #0]
     f36:	4001      	ands	r1, r0
     f38:	04d2      	lsls	r2, r2, #19
     f3a:	0e52      	lsrs	r2, r2, #25
     f3c:	0412      	lsls	r2, r2, #16
     f3e:	4311      	orrs	r1, r2
     f40:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     f42:	4925      	ldr	r1, [pc, #148]	; (fd8 <RtcInit+0xb0>)
     f44:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     f46:	6999      	ldr	r1, [r3, #24]
     f48:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     f4a:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     f4c:	4302      	orrs	r2, r0
     f4e:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     f50:	699a      	ldr	r2, [r3, #24]
     f52:	430a      	orrs	r2, r1
     f54:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     f56:	2204      	movs	r2, #4
     f58:	68d9      	ldr	r1, [r3, #12]
     f5a:	4211      	tst	r1, r2
     f5c:	d0fc      	beq.n	f58 <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     f5e:	2281      	movs	r2, #129	; 0x81
     f60:	4b1e      	ldr	r3, [pc, #120]	; (fdc <RtcInit+0xb4>)
     f62:	0052      	lsls	r2, r2, #1
     f64:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     f66:	4a1e      	ldr	r2, [pc, #120]	; (fe0 <RtcInit+0xb8>)
     f68:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     f6a:	785a      	ldrb	r2, [r3, #1]
     f6c:	b252      	sxtb	r2, r2
     f6e:	2a00      	cmp	r2, #0
     f70:	dbfb      	blt.n	f6a <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     f72:	4a1c      	ldr	r2, [pc, #112]	; (fe4 <RtcInit+0xbc>)
     f74:	4b19      	ldr	r3, [pc, #100]	; (fdc <RtcInit+0xb4>)
     f76:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     f78:	2204      	movs	r2, #4
     f7a:	4b1b      	ldr	r3, [pc, #108]	; (fe8 <RtcInit+0xc0>)
     f7c:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f7e:	7a9a      	ldrb	r2, [r3, #10]
     f80:	4919      	ldr	r1, [pc, #100]	; (fe8 <RtcInit+0xc0>)
     f82:	09d2      	lsrs	r2, r2, #7
     f84:	d1fb      	bne.n	f7e <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     f86:	20a0      	movs	r0, #160	; 0xa0
     f88:	880a      	ldrh	r2, [r1, #0]
     f8a:	00c0      	lsls	r0, r0, #3
     f8c:	4302      	orrs	r2, r0
     f8e:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f90:	7a9a      	ldrb	r2, [r3, #10]
     f92:	09d2      	lsrs	r2, r2, #7
     f94:	d1fc      	bne.n	f90 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     f96:	4915      	ldr	r1, [pc, #84]	; (fec <RtcInit+0xc4>)
     f98:	4a13      	ldr	r2, [pc, #76]	; (fe8 <RtcInit+0xc0>)
     f9a:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f9c:	7a99      	ldrb	r1, [r3, #10]
     f9e:	4a12      	ldr	r2, [pc, #72]	; (fe8 <RtcInit+0xc0>)
     fa0:	09c9      	lsrs	r1, r1, #7
     fa2:	d1fb      	bne.n	f9c <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     fa4:	8851      	ldrh	r1, [r2, #2]
     fa6:	4812      	ldr	r0, [pc, #72]	; (ff0 <RtcInit+0xc8>)
     fa8:	4301      	orrs	r1, r0
     faa:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     fac:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     fae:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     fb0:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     fb2:	8811      	ldrh	r1, [r2, #0]
     fb4:	4301      	orrs	r1, r0
     fb6:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     fb8:	7a9a      	ldrb	r2, [r3, #10]
     fba:	09d2      	lsrs	r2, r2, #7
     fbc:	d1fc      	bne.n	fb8 <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     fbe:	4b0d      	ldr	r3, [pc, #52]	; (ff4 <RtcInit+0xcc>)
     fc0:	3208      	adds	r2, #8
     fc2:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     fc4:	4770      	bx	lr
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	40000800 	.word	0x40000800
     fcc:	00000606 	.word	0x00000606
     fd0:	ff80ffff 	.word	0xff80ffff
     fd4:	00806024 	.word	0x00806024
     fd8:	00000604 	.word	0x00000604
     fdc:	40000c00 	.word	0x40000c00
     fe0:	00230002 	.word	0x00230002
     fe4:	00004204 	.word	0x00004204
     fe8:	40001400 	.word	0x40001400
     fec:	000003e6 	.word	0x000003e6
     ff0:	00004010 	.word	0x00004010
     ff4:	e000e100 	.word	0xe000e100

00000ff8 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ff8:	230f      	movs	r3, #15
     ffa:	4018      	ands	r0, r3
     ffc:	4b08      	ldr	r3, [pc, #32]	; (1020 <gclkEnable+0x28>)
     ffe:	0212      	lsls	r2, r2, #8
    1000:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    1002:	23f8      	movs	r3, #248	; 0xf8
    1004:	0209      	lsls	r1, r1, #8
    1006:	015b      	lsls	r3, r3, #5
    1008:	4019      	ands	r1, r3
    100a:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    100c:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    100e:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    1010:	4c04      	ldr	r4, [pc, #16]	; (1024 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    1012:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    1014:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    1016:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    1018:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    101a:	6060      	str	r0, [r4, #4]
}
    101c:	bd10      	pop	{r4, pc}
    101e:	46c0      	nop			; (mov r8, r8)
    1020:	00ffff00 	.word	0x00ffff00
    1024:	40000c00 	.word	0x40000c00

00001028 <GclkInit>:
}

void GclkInit(u8_t clk_system) {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1028:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    102a:	211e      	movs	r1, #30
void gclk_enable(uint32_t id, uint32_t src, uint32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
}

void GclkInit(u8_t clk_system) {
    102c:	b570      	push	{r4, r5, r6, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    102e:	4c12      	ldr	r4, [pc, #72]	; (1078 <GclkInit+0x50>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    1030:	4a12      	ldr	r2, [pc, #72]	; (107c <GclkInit+0x54>)
}

void GclkInit(u8_t clk_system) {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1032:	00db      	lsls	r3, r3, #3
    1034:	60a3      	str	r3, [r4, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    1036:	6853      	ldr	r3, [r2, #4]
void gclk_enable(uint32_t id, uint32_t src, uint32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
}

void GclkInit(u8_t clk_system) {
    1038:	0005      	movs	r5, r0


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    103a:	438b      	bics	r3, r1
    103c:	391a      	subs	r1, #26
    103e:	430b      	orrs	r3, r1
    1040:	6053      	str	r3, [r2, #4]

    // Initialize GCLK
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
    1042:	4a0f      	ldr	r2, [pc, #60]	; (1080 <GclkInit+0x58>)
    1044:	3104      	adds	r1, #4
    1046:	6993      	ldr	r3, [r2, #24]
    1048:	430b      	orrs	r3, r1
    104a:	6193      	str	r3, [r2, #24]
    GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    104c:	2301      	movs	r3, #1
    104e:	4a0d      	ldr	r2, [pc, #52]	; (1084 <GclkInit+0x5c>)
    1050:	7013      	strb	r3, [r2, #0]
    while (GCLK->CTRL.reg & GCLK_CTRL_SWRST);
    1052:	7811      	ldrb	r1, [r2, #0]
    1054:	4219      	tst	r1, r3
    1056:	d1fc      	bne.n	1052 <GclkInit+0x2a>

    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1058:	4b0b      	ldr	r3, [pc, #44]	; (1088 <GclkInit+0x60>)
    dfll_wait_for_sync();
    105a:	4e0c      	ldr	r6, [pc, #48]	; (108c <GclkInit+0x64>)
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
    GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    while (GCLK->CTRL.reg & GCLK_CTRL_SWRST);

    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    105c:	84a3      	strh	r3, [r4, #36]	; 0x24
    dfll_wait_for_sync();
    105e:	47b0      	blx	r6
    SYSCTRL->DFLLVAL.reg = dfll_nvm_val();
    1060:	4b0b      	ldr	r3, [pc, #44]	; (1090 <GclkInit+0x68>)
    1062:	4798      	blx	r3
    1064:	62a0      	str	r0, [r4, #40]	; 0x28
    dfll_wait_for_sync();
    1066:	47b0      	blx	r6
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl;
    1068:	4b0a      	ldr	r3, [pc, #40]	; (1094 <GclkInit+0x6c>)


    //For generic clock generator 0, select the DFLL48 Clock as input
    gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
    106a:	0028      	movs	r0, r5
    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    dfll_wait_for_sync();
    SYSCTRL->DFLLVAL.reg = dfll_nvm_val();
    dfll_wait_for_sync();
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl;
    106c:	84a3      	strh	r3, [r4, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
    106e:	2201      	movs	r2, #1
    1070:	2107      	movs	r1, #7
    1072:	4b09      	ldr	r3, [pc, #36]	; (1098 <GclkInit+0x70>)
    1074:	4798      	blx	r3
}
    1076:	bd70      	pop	{r4, r5, r6, pc}
    1078:	40000800 	.word	0x40000800
    107c:	41004000 	.word	0x41004000
    1080:	40000400 	.word	0x40000400
    1084:	40000c00 	.word	0x40000c00
    1088:	00000502 	.word	0x00000502
    108c:	00000f19 	.word	0x00000f19
    1090:	00000ee5 	.word	0x00000ee5
    1094:	00000582 	.word	0x00000582
    1098:	00000ff9 	.word	0x00000ff9

0000109c <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
    cycles_per_us = cycles_per_ms / 1000;
    109c:	2230      	movs	r2, #48	; 0x30
}


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
    109e:	4b06      	ldr	r3, [pc, #24]	; (10b8 <delayInit+0x1c>)
    cycles_per_us = cycles_per_ms / 1000;
    10a0:	4906      	ldr	r1, [pc, #24]	; (10bc <delayInit+0x20>)
    10a2:	c306      	stmia	r3!, {r1, r2}
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    10a4:	4a06      	ldr	r2, [pc, #24]	; (10c0 <delayInit+0x24>)
    10a6:	6a13      	ldr	r3, [r2, #32]
    10a8:	021b      	lsls	r3, r3, #8
    10aa:	0a1b      	lsrs	r3, r3, #8
    10ac:	6213      	str	r3, [r2, #32]

    NVIC_SetPriority(SysTick_IRQn, 0x0);

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    10ae:	2205      	movs	r2, #5
    10b0:	4b04      	ldr	r3, [pc, #16]	; (10c4 <delayInit+0x28>)
    10b2:	601a      	str	r2, [r3, #0]
}
    10b4:	4770      	bx	lr
    10b6:	46c0      	nop			; (mov r8, r8)
    10b8:	20000004 	.word	0x20000004
    10bc:	0000bb80 	.word	0x0000bb80
    10c0:	e000ed00 	.word	0xe000ed00
    10c4:	e000e010 	.word	0xe000e010

000010c8 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    10c8:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10ca:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    10cc:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    10ce:	4b08      	ldr	r3, [pc, #32]	; (10f0 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    10d0:	4a08      	ldr	r2, [pc, #32]	; (10f4 <delay_us+0x2c>)
    10d2:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10d4:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
    10d6:	3801      	subs	r0, #1
    10d8:	d308      	bcc.n	10ec <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    10da:	2b00      	cmp	r3, #0
    10dc:	d0fb      	beq.n	10d6 <delay_us+0xe>
    10de:	4e05      	ldr	r6, [pc, #20]	; (10f4 <delay_us+0x2c>)
        SysTick->LOAD = n;
    10e0:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    10e2:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10e4:	6835      	ldr	r5, [r6, #0]
    10e6:	4225      	tst	r5, r4
    10e8:	d0fc      	beq.n	10e4 <delay_us+0x1c>
    10ea:	e7f4      	b.n	10d6 <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
    10ec:	bd70      	pop	{r4, r5, r6, pc}
    10ee:	46c0      	nop			; (mov r8, r8)
    10f0:	20000004 	.word	0x20000004
    10f4:	e000e010 	.word	0xe000e010

000010f8 <SysTick_Handler>:


void SysTick_Handler(void) {
    //g_msTicks++;
}
    10f8:	4770      	bx	lr
	...

000010fc <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    10fc:	b570      	push	{r4, r5, r6, lr}
    10fe:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    1100:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    1102:	4b08      	ldr	r3, [pc, #32]	; (1124 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    1104:	4a08      	ldr	r2, [pc, #32]	; (1128 <delay_ms+0x2c>)
    1106:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1108:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
    110a:	3801      	subs	r0, #1
    110c:	d308      	bcc.n	1120 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    110e:	2b00      	cmp	r3, #0
    1110:	d0fb      	beq.n	110a <delay_ms+0xe>
    1112:	4e05      	ldr	r6, [pc, #20]	; (1128 <delay_ms+0x2c>)
        SysTick->LOAD = n;
    1114:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    1116:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1118:	6835      	ldr	r5, [r6, #0]
    111a:	4225      	tst	r5, r4
    111c:	d0fc      	beq.n	1118 <delay_ms+0x1c>
    111e:	e7f4      	b.n	110a <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
    1120:	bd70      	pop	{r4, r5, r6, pc}
    1122:	46c0      	nop			; (mov r8, r8)
    1124:	20000004 	.word	0x20000004
    1128:	e000e010 	.word	0xe000e010

0000112c <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    112c:	21fa      	movs	r1, #250	; 0xfa
    112e:	4a04      	ldr	r2, [pc, #16]	; (1140 <RTC_Handler+0x14>)
    1130:	0089      	lsls	r1, r1, #2
    1132:	6813      	ldr	r3, [r2, #0]
    1134:	185b      	adds	r3, r3, r1
    1136:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    1138:	22ff      	movs	r2, #255	; 0xff
    113a:	4b02      	ldr	r3, [pc, #8]	; (1144 <RTC_Handler+0x18>)
    113c:	721a      	strb	r2, [r3, #8]
}
    113e:	4770      	bx	lr
    1140:	2000013c 	.word	0x2000013c
    1144:	40001400 	.word	0x40001400

00001148 <millis>:

uint32_t millis(void) {
    1148:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    114a:	f3ef 8110 	mrs	r1, PRIMASK
    114e:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1150:	4a08      	ldr	r2, [pc, #32]	; (1174 <millis+0x2c>)
    1152:	4d09      	ldr	r5, [pc, #36]	; (1178 <millis+0x30>)
    1154:	8a10      	ldrh	r0, [r2, #16]
    1156:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1158:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    115a:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    115c:	09e4      	lsrs	r4, r4, #7
    115e:	d004      	beq.n	116a <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    1160:	8a13      	ldrh	r3, [r2, #16]
    1162:	22fa      	movs	r2, #250	; 0xfa
    1164:	6828      	ldr	r0, [r5, #0]
    1166:	0092      	lsls	r2, r2, #2
    1168:	1880      	adds	r0, r0, r2
    116a:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    116c:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    1170:	bd30      	pop	{r4, r5, pc}
    1172:	46c0      	nop			; (mov r8, r8)
    1174:	40001400 	.word	0x40001400
    1178:	2000013c 	.word	0x2000013c

0000117c <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    117c:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    117e:	4a0d      	ldr	r2, [pc, #52]	; (11b4 <TC4Init+0x38>)
    1180:	4b0d      	ldr	r3, [pc, #52]	; (11b8 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1182:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1184:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1186:	4a0d      	ldr	r2, [pc, #52]	; (11bc <TC4Init+0x40>)
    1188:	6a13      	ldr	r3, [r2, #32]
    118a:	430b      	orrs	r3, r1
    118c:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    118e:	4b0c      	ldr	r3, [pc, #48]	; (11c0 <TC4Init+0x44>)
    1190:	4a0c      	ldr	r2, [pc, #48]	; (11c4 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1192:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1194:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x50;
    1196:	2250      	movs	r2, #80	; 0x50
    1198:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    119a:	3a4f      	subs	r2, #79	; 0x4f
    119c:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    119e:	32ff      	adds	r2, #255	; 0xff
    11a0:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    11a2:	881a      	ldrh	r2, [r3, #0]
    11a4:	430a      	orrs	r2, r1
    11a6:	801a      	strh	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    11a8:	2280      	movs	r2, #128	; 0x80
    11aa:	4b07      	ldr	r3, [pc, #28]	; (11c8 <TC4Init+0x4c>)
    11ac:	0312      	lsls	r2, r2, #12
    11ae:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    11b0:	4770      	bx	lr
    11b2:	46c0      	nop			; (mov r8, r8)
    11b4:	0000421c 	.word	0x0000421c
    11b8:	40000c00 	.word	0x40000c00
    11bc:	40000400 	.word	0x40000400
    11c0:	42003000 	.word	0x42003000
    11c4:	00000904 	.word	0x00000904
    11c8:	e000e100 	.word	0xe000e100

000011cc <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    11cc:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    11ce:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    11d0:	4b02      	ldr	r3, [pc, #8]	; (11dc <TC4_Handler+0x10>)
    11d2:	739a      	strb	r2, [r3, #14]
    //pinToggle(TxPo);
    pullSample();
    11d4:	4b02      	ldr	r3, [pc, #8]	; (11e0 <TC4_Handler+0x14>)
    11d6:	4798      	blx	r3
}
    11d8:	bd10      	pop	{r4, pc}
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	42003000 	.word	0x42003000
    11e0:	00003305 	.word	0x00003305

000011e4 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    11e4:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    11e6:	4a0d      	ldr	r2, [pc, #52]	; (121c <TC5Init+0x38>)
    11e8:	4b0d      	ldr	r3, [pc, #52]	; (1220 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    11ea:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    11ec:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    11ee:	4a0d      	ldr	r2, [pc, #52]	; (1224 <TC5Init+0x40>)
    11f0:	6a13      	ldr	r3, [r2, #32]
    11f2:	430b      	orrs	r3, r1
    11f4:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    11f6:	4b0c      	ldr	r3, [pc, #48]	; (1228 <TC5Init+0x44>)
    11f8:	4a0c      	ldr	r2, [pc, #48]	; (122c <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    11fa:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    11fc:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_PRESCALER_DIV16;

    u16_t logSpeed = 20; //Hz
    u8_t PER_Reg = (long)((32768/16) / logSpeed);

    TC5->COUNT8.PER.reg = PER_Reg;
    11fe:	2266      	movs	r2, #102	; 0x66
    1200:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1202:	3a65      	subs	r2, #101	; 0x65
    1204:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1206:	32ff      	adds	r2, #255	; 0xff
    1208:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    120a:	881a      	ldrh	r2, [r3, #0]
    120c:	430a      	orrs	r2, r1
    120e:	801a      	strh	r2, [r3, #0]
    1210:	2280      	movs	r2, #128	; 0x80
    1212:	4b07      	ldr	r3, [pc, #28]	; (1230 <TC5Init+0x4c>)
    1214:	0352      	lsls	r2, r2, #13
    1216:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    1218:	4770      	bx	lr
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	0000421c 	.word	0x0000421c
    1220:	40000c00 	.word	0x40000c00
    1224:	40000400 	.word	0x40000400
    1228:	42003400 	.word	0x42003400
    122c:	00000c04 	.word	0x00000c04
    1230:	e000e100 	.word	0xe000e100

00001234 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1234:	22ff      	movs	r2, #255	; 0xff
    1236:	4b03      	ldr	r3, [pc, #12]	; (1244 <TC5_Handler+0x10>)
    1238:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    123a:	4b03      	ldr	r3, [pc, #12]	; (1248 <TC5_Handler+0x14>)
    123c:	3afe      	subs	r2, #254	; 0xfe
    123e:	701a      	strb	r2, [r3, #0]
}
    1240:	4770      	bx	lr
    1242:	46c0      	nop			; (mov r8, r8)
    1244:	42003400 	.word	0x42003400
    1248:	2000019a 	.word	0x2000019a

0000124c <flight>:
#include <boardDefines.h>

#define TESTFLIGHT 0


void flight() {
    124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    switch(flightState) {
    124e:	4c80      	ldr	r4, [pc, #512]	; (1450 <flight+0x204>)
    1250:	7820      	ldrb	r0, [r4, #0]
    1252:	280a      	cmp	r0, #10
    1254:	d900      	bls.n	1258 <flight+0xc>
    1256:	e0de      	b.n	1416 <flight+0x1ca>
    1258:	f003 fd1c 	bl	4c94 <__gnu_thumb1_case_uqi>
    125c:	6e411906 	.word	0x6e411906
    1260:	aa9681dd 	.word	0xaa9681dd
    1264:	ddc7      	.short	0xddc7
    1266:	d7          	.byte	0xd7
    1267:	00          	.byte	0x00
    case flightStatrup:

        updateGround( );
    1268:	4b7a      	ldr	r3, [pc, #488]	; (1454 <flight+0x208>)
    126a:	4798      	blx	r3

        if ((millis() - startupTick) > 10000) {
    126c:	4b7a      	ldr	r3, [pc, #488]	; (1458 <flight+0x20c>)
    126e:	4798      	blx	r3
    1270:	4b7a      	ldr	r3, [pc, #488]	; (145c <flight+0x210>)
    1272:	681b      	ldr	r3, [r3, #0]
    1274:	1ac0      	subs	r0, r0, r3
    1276:	4b7a      	ldr	r3, [pc, #488]	; (1460 <flight+0x214>)
    1278:	4298      	cmp	r0, r3
    127a:	d906      	bls.n	128a <flight+0x3e>
            findNewFlightStart();
    127c:	4b79      	ldr	r3, [pc, #484]	; (1464 <flight+0x218>)
    127e:	4798      	blx	r3
            startupJingle();
    1280:	4b79      	ldr	r3, [pc, #484]	; (1468 <flight+0x21c>)
    1282:	4798      	blx	r3
            flightState = flightTest;
            writeFlightStartAddress();
            logFlight( );
            logEvent('L');
#else
            flightState = flightPad;
    1284:	2302      	movs	r3, #2
    1286:	7023      	strb	r3, [r4, #0]
#endif

            break;
    1288:	e0c5      	b.n	1416 <flight+0x1ca>
        }

        attemptConnection();
    128a:	4b78      	ldr	r3, [pc, #480]	; (146c <flight+0x220>)
    128c:	e0c2      	b.n	1414 <flight+0x1c8>
        break;

    case flightIdle:

        if (millis() - offsets.groundBeep > 2000) {
    128e:	4f72      	ldr	r7, [pc, #456]	; (1458 <flight+0x20c>)
    1290:	47b8      	blx	r7
    1292:	4e77      	ldr	r6, [pc, #476]	; (1470 <flight+0x224>)
    1294:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1296:	1ac0      	subs	r0, r0, r3
    1298:	23fa      	movs	r3, #250	; 0xfa
    129a:	00db      	lsls	r3, r3, #3
    129c:	4298      	cmp	r0, r3
    129e:	d905      	bls.n	12ac <flight+0x60>
            offsets.groundBeep = millis();
    12a0:	47b8      	blx	r7
    12a2:	62f0      	str	r0, [r6, #44]	; 0x2c
            beep(400);
    12a4:	20c8      	movs	r0, #200	; 0xc8
    12a6:	4b73      	ldr	r3, [pc, #460]	; (1474 <flight+0x228>)
    12a8:	0040      	lsls	r0, r0, #1
    12aa:	4798      	blx	r3
        }

        if (unplugged()) {
    12ac:	4b72      	ldr	r3, [pc, #456]	; (1478 <flight+0x22c>)
    12ae:	4798      	blx	r3
    12b0:	2800      	cmp	r0, #0
    12b2:	d001      	beq.n	12b8 <flight+0x6c>
            finishFromPad();
    12b4:	4b71      	ldr	r3, [pc, #452]	; (147c <flight+0x230>)
    12b6:	4798      	blx	r3
        }

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    12b8:	4b71      	ldr	r3, [pc, #452]	; (1480 <flight+0x234>)
    12ba:	7e1b      	ldrb	r3, [r3, #24]
    12bc:	075b      	lsls	r3, r3, #29
    12be:	d400      	bmi.n	12c2 <flight+0x76>
    12c0:	e0a9      	b.n	1416 <flight+0x1ca>
            u8_t possibleReset = usartDataIn(USART3);
    12c2:	2003      	movs	r0, #3
    12c4:	4b6f      	ldr	r3, [pc, #444]	; (1484 <flight+0x238>)
    12c6:	4798      	blx	r3
            if (possibleReset == 0x52) {
    12c8:	2852      	cmp	r0, #82	; 0x52
    12ca:	d000      	beq.n	12ce <flight+0x82>
    12cc:	e0a3      	b.n	1416 <flight+0x1ca>
    12ce:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    12d2:	4a6d      	ldr	r2, [pc, #436]	; (1488 <flight+0x23c>)
    12d4:	4b6d      	ldr	r3, [pc, #436]	; (148c <flight+0x240>)
    12d6:	60da      	str	r2, [r3, #12]
    12d8:	f3bf 8f4f 	dsb	sy
    12dc:	e7fe      	b.n	12dc <flight+0x90>
        *  Accel > 2g & vel > 15ft/s
        *		 or
        *  baro alt > 100ft
        */

        updateGround();
    12de:	4b5d      	ldr	r3, [pc, #372]	; (1454 <flight+0x208>)
    12e0:	4798      	blx	r3

        if (writeLog) {
    12e2:	4b6b      	ldr	r3, [pc, #428]	; (1490 <flight+0x244>)
    12e4:	781b      	ldrb	r3, [r3, #0]
    12e6:	2b00      	cmp	r3, #0
    12e8:	d005      	beq.n	12f6 <flight+0xaa>
            logSensorsOnPad( );
    12ea:	4b6a      	ldr	r3, [pc, #424]	; (1494 <flight+0x248>)
    12ec:	4798      	blx	r3
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    12ee:	2280      	movs	r2, #128	; 0x80
    12f0:	4b69      	ldr	r3, [pc, #420]	; (1498 <flight+0x24c>)
    12f2:	0352      	lsls	r2, r2, #13
    12f4:	61da      	str	r2, [r3, #28]
            pinToggle(LedPin);
        }


        if ((( velocity > 15) && (accel > 2)) | (altitudeAGL() > 100)) {
    12f6:	4969      	ldr	r1, [pc, #420]	; (149c <flight+0x250>)
    12f8:	4e69      	ldr	r6, [pc, #420]	; (14a0 <flight+0x254>)
    12fa:	2200      	movs	r2, #0
    12fc:	6808      	ldr	r0, [r1, #0]
    12fe:	6849      	ldr	r1, [r1, #4]
    1300:	4b68      	ldr	r3, [pc, #416]	; (14a4 <flight+0x258>)
    1302:	47b0      	blx	r6
    1304:	2800      	cmp	r0, #0
    1306:	d00c      	beq.n	1322 <flight+0xd6>
    1308:	2380      	movs	r3, #128	; 0x80
    130a:	4967      	ldr	r1, [pc, #412]	; (14a8 <flight+0x25c>)
    130c:	2200      	movs	r2, #0
    130e:	6808      	ldr	r0, [r1, #0]
    1310:	6849      	ldr	r1, [r1, #4]
    1312:	05db      	lsls	r3, r3, #23
    1314:	47b0      	blx	r6
    1316:	1e46      	subs	r6, r0, #1
    1318:	41b0      	sbcs	r0, r6
    131a:	2601      	movs	r6, #1
    131c:	4240      	negs	r0, r0
    131e:	4006      	ands	r6, r0
    1320:	e000      	b.n	1324 <flight+0xd8>
    1322:	0006      	movs	r6, r0
    1324:	4b61      	ldr	r3, [pc, #388]	; (14ac <flight+0x260>)
    1326:	4798      	blx	r3
    1328:	2864      	cmp	r0, #100	; 0x64
    132a:	dc01      	bgt.n	1330 <flight+0xe4>
    132c:	07f3      	lsls	r3, r6, #31
    132e:	d572      	bpl.n	1416 <flight+0x1ca>

            flightState = flightBoost;
    1330:	2303      	movs	r3, #3
    1332:	7023      	strb	r3, [r4, #0]
            beginFlightLog();
    1334:	4b5e      	ldr	r3, [pc, #376]	; (14b0 <flight+0x264>)
    1336:	e06d      	b.n	1414 <flight+0x1c8>
        /*
        *	boost to fast
        *		while
        *	Accel > 1/4G
        */
        if (writeLog) {
    1338:	4b55      	ldr	r3, [pc, #340]	; (1490 <flight+0x244>)
    133a:	781b      	ldrb	r3, [r3, #0]
    133c:	2b00      	cmp	r3, #0
    133e:	d001      	beq.n	1344 <flight+0xf8>
            logSensors( );
    1340:	4b5c      	ldr	r3, [pc, #368]	; (14b4 <flight+0x268>)
    1342:	4798      	blx	r3
        }

        if (accel < 0.25) {
    1344:	4958      	ldr	r1, [pc, #352]	; (14a8 <flight+0x25c>)
    1346:	2200      	movs	r2, #0
    1348:	6808      	ldr	r0, [r1, #0]
    134a:	6849      	ldr	r1, [r1, #4]
    134c:	4b5a      	ldr	r3, [pc, #360]	; (14b8 <flight+0x26c>)
    134e:	4e5b      	ldr	r6, [pc, #364]	; (14bc <flight+0x270>)
    1350:	47b0      	blx	r6
    1352:	2800      	cmp	r0, #0
    1354:	d05f      	beq.n	1416 <flight+0x1ca>
            flightState = flightCoast;
    1356:	2305      	movs	r3, #5
            logEvent('B');
    1358:	2042      	movs	r0, #66	; 0x42
        if (writeLog) {
            logSensors( );
        }

        if (accel < 0.25) {
            flightState = flightCoast;
    135a:	7023      	strb	r3, [r4, #0]
    135c:	e025      	b.n	13aa <flight+0x15e>
        *	   speed > 0
        *	   	 &
        *	altitude > baro_max_alt
        */

        if (writeLog) {
    135e:	4b4c      	ldr	r3, [pc, #304]	; (1490 <flight+0x244>)
    1360:	781b      	ldrb	r3, [r3, #0]
    1362:	2b00      	cmp	r3, #0
    1364:	d001      	beq.n	136a <flight+0x11e>
            logSensors( );
    1366:	4b53      	ldr	r3, [pc, #332]	; (14b4 <flight+0x268>)
    1368:	4798      	blx	r3
        }


        if (velocity < 0) {
    136a:	494c      	ldr	r1, [pc, #304]	; (149c <flight+0x250>)
    136c:	2200      	movs	r2, #0
    136e:	6808      	ldr	r0, [r1, #0]
    1370:	6849      	ldr	r1, [r1, #4]
    1372:	2300      	movs	r3, #0
    1374:	4e51      	ldr	r6, [pc, #324]	; (14bc <flight+0x270>)
    1376:	47b0      	blx	r6
    1378:	2800      	cmp	r0, #0
    137a:	d04c      	beq.n	1416 <flight+0x1ca>
            flightState = flightDrogue;
    137c:	2306      	movs	r3, #6
    137e:	7023      	strb	r3, [r4, #0]
            igniteDrogue();
    1380:	4b4f      	ldr	r3, [pc, #316]	; (14c0 <flight+0x274>)
    1382:	4798      	blx	r3
            logEvent('A');
    1384:	2041      	movs	r0, #65	; 0x41
    1386:	e010      	b.n	13aa <flight+0x15e>
        }

        break;
    case flightDrogue:

        if (writeLog) {
    1388:	4b41      	ldr	r3, [pc, #260]	; (1490 <flight+0x244>)
    138a:	781b      	ldrb	r3, [r3, #0]
    138c:	2b00      	cmp	r3, #0
    138e:	d001      	beq.n	1394 <flight+0x148>
            logSensors( );
    1390:	4b48      	ldr	r3, [pc, #288]	; (14b4 <flight+0x268>)
    1392:	4798      	blx	r3
        }


        if (altitudeAGL() < deploymentSettings.MAIN_DEPLOY) {
    1394:	4b45      	ldr	r3, [pc, #276]	; (14ac <flight+0x260>)
    1396:	4798      	blx	r3
    1398:	4b4a      	ldr	r3, [pc, #296]	; (14c4 <flight+0x278>)
    139a:	8b1b      	ldrh	r3, [r3, #24]
    139c:	4298      	cmp	r0, r3
    139e:	da3a      	bge.n	1416 <flight+0x1ca>
            flightState = flightMain;
    13a0:	2307      	movs	r3, #7
    13a2:	7023      	strb	r3, [r4, #0]
            igniteMain();
    13a4:	4b48      	ldr	r3, [pc, #288]	; (14c8 <flight+0x27c>)
    13a6:	4798      	blx	r3
            logEvent('M');
    13a8:	204d      	movs	r0, #77	; 0x4d
    13aa:	4b48      	ldr	r3, [pc, #288]	; (14cc <flight+0x280>)
    13ac:	4798      	blx	r3
    13ae:	e032      	b.n	1416 <flight+0x1ca>
        }

        break;
    case flightMain:

        if (writeLog) {
    13b0:	4b37      	ldr	r3, [pc, #220]	; (1490 <flight+0x244>)
    13b2:	781b      	ldrb	r3, [r3, #0]
    13b4:	2b00      	cmp	r3, #0
    13b6:	d001      	beq.n	13bc <flight+0x170>
            logSensors( );
    13b8:	4b3e      	ldr	r3, [pc, #248]	; (14b4 <flight+0x268>)
    13ba:	4798      	blx	r3
        }

        if ((velocity > -1) && (velocity < 1) ) {
    13bc:	4b37      	ldr	r3, [pc, #220]	; (149c <flight+0x250>)
    13be:	2200      	movs	r2, #0
    13c0:	681e      	ldr	r6, [r3, #0]
    13c2:	685f      	ldr	r7, [r3, #4]
    13c4:	4d36      	ldr	r5, [pc, #216]	; (14a0 <flight+0x254>)
    13c6:	4b42      	ldr	r3, [pc, #264]	; (14d0 <flight+0x284>)
    13c8:	0030      	movs	r0, r6
    13ca:	0039      	movs	r1, r7
    13cc:	47a8      	blx	r5
    13ce:	2800      	cmp	r0, #0
    13d0:	d021      	beq.n	1416 <flight+0x1ca>
    13d2:	0030      	movs	r0, r6
    13d4:	2200      	movs	r2, #0
    13d6:	4b3f      	ldr	r3, [pc, #252]	; (14d4 <flight+0x288>)
    13d8:	0039      	movs	r1, r7
    13da:	4e38      	ldr	r6, [pc, #224]	; (14bc <flight+0x270>)
    13dc:	47b0      	blx	r6
    13de:	2800      	cmp	r0, #0
    13e0:	d019      	beq.n	1416 <flight+0x1ca>
            flightState = flightLanded;
    13e2:	2308      	movs	r3, #8
    13e4:	7023      	strb	r3, [r4, #0]
            finishFlight();
    13e6:	4b3c      	ldr	r3, [pc, #240]	; (14d8 <flight+0x28c>)
    13e8:	e014      	b.n	1414 <flight+0x1c8>
        }

        break;
    case flightLanded:

        if (millis() - offsets.groundBeep > 2000) {
    13ea:	4f1b      	ldr	r7, [pc, #108]	; (1458 <flight+0x20c>)
    13ec:	47b8      	blx	r7
    13ee:	4e20      	ldr	r6, [pc, #128]	; (1470 <flight+0x224>)
    13f0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    13f2:	1ac0      	subs	r0, r0, r3
    13f4:	23fa      	movs	r3, #250	; 0xfa
    13f6:	00db      	lsls	r3, r3, #3
    13f8:	4298      	cmp	r0, r3
    13fa:	d90c      	bls.n	1416 <flight+0x1ca>
            offsets.groundBeep = millis();
    13fc:	47b8      	blx	r7
    13fe:	62f0      	str	r0, [r6, #44]	; 0x2c
            beep(400);
    1400:	20c8      	movs	r0, #200	; 0xc8
    1402:	4b1c      	ldr	r3, [pc, #112]	; (1474 <flight+0x228>)
    1404:	0040      	lsls	r0, r0, #1
    1406:	4798      	blx	r3
    1408:	e005      	b.n	1416 <flight+0x1ca>
        }

        break;
    case flightTest:

        if (writeLog) {
    140a:	4b21      	ldr	r3, [pc, #132]	; (1490 <flight+0x244>)
    140c:	781b      	ldrb	r3, [r3, #0]
    140e:	2b00      	cmp	r3, #0
    1410:	d001      	beq.n	1416 <flight+0x1ca>
            logSensors( );
    1412:	4b28      	ldr	r3, [pc, #160]	; (14b4 <flight+0x268>)
    1414:	4798      	blx	r3
        break;
    }



    if ((flightState > flightPad) & unplugged()) {
    1416:	2302      	movs	r3, #2
    1418:	7826      	ldrb	r6, [r4, #0]
    141a:	42b3      	cmp	r3, r6
    141c:	41b6      	sbcs	r6, r6
    141e:	4b16      	ldr	r3, [pc, #88]	; (1478 <flight+0x22c>)
    1420:	4276      	negs	r6, r6
    1422:	4798      	blx	r3
    1424:	2e00      	cmp	r6, #0
    1426:	d003      	beq.n	1430 <flight+0x1e4>
    1428:	2800      	cmp	r0, #0
    142a:	d001      	beq.n	1430 <flight+0x1e4>
        finishFlight();
    142c:	4b2a      	ldr	r3, [pc, #168]	; (14d8 <flight+0x28c>)
    142e:	4798      	blx	r3
    }

    if ((flightState <= flightPad) & unplugged()) {
    1430:	2300      	movs	r3, #0
    1432:	2102      	movs	r1, #2
    1434:	7822      	ldrb	r2, [r4, #0]
    1436:	4291      	cmp	r1, r2
    1438:	415b      	adcs	r3, r3
    143a:	b2dc      	uxtb	r4, r3
    143c:	4b0e      	ldr	r3, [pc, #56]	; (1478 <flight+0x22c>)
    143e:	4798      	blx	r3
    1440:	2c00      	cmp	r4, #0
    1442:	d003      	beq.n	144c <flight+0x200>
    1444:	2800      	cmp	r0, #0
    1446:	d001      	beq.n	144c <flight+0x200>
        finishFromPad();
    1448:	4b0c      	ldr	r3, [pc, #48]	; (147c <flight+0x230>)
    144a:	4798      	blx	r3
    }

    144c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	200001ac 	.word	0x200001ac
    1454:	000014dd 	.word	0x000014dd
    1458:	00001149 	.word	0x00001149
    145c:	2000019c 	.word	0x2000019c
    1460:	00002710 	.word	0x00002710
    1464:	0000324d 	.word	0x0000324d
    1468:	00000e69 	.word	0x00000e69
    146c:	000039f9 	.word	0x000039f9
    1470:	20000150 	.word	0x20000150
    1474:	00000e2d 	.word	0x00000e2d
    1478:	00000b59 	.word	0x00000b59
    147c:	00000c3d 	.word	0x00000c3d
    1480:	42001400 	.word	0x42001400
    1484:	00003795 	.word	0x00003795
    1488:	05fa0004 	.word	0x05fa0004
    148c:	e000ed00 	.word	0xe000ed00
    1490:	2000019a 	.word	0x2000019a
    1494:	00002f85 	.word	0x00002f85
    1498:	41004400 	.word	0x41004400
    149c:	20000308 	.word	0x20000308
    14a0:	00004e15 	.word	0x00004e15
    14a4:	402e0000 	.word	0x402e0000
    14a8:	200002e8 	.word	0x200002e8
    14ac:	00000b25 	.word	0x00000b25
    14b0:	00003225 	.word	0x00003225
    14b4:	00002dcd 	.word	0x00002dcd
    14b8:	3fd00000 	.word	0x3fd00000
    14bc:	00004ded 	.word	0x00004ded
    14c0:	00001821 	.word	0x00001821
    14c4:	20000180 	.word	0x20000180
    14c8:	000017c5 	.word	0x000017c5
    14cc:	00002d71 	.word	0x00002d71
    14d0:	bff00000 	.word	0xbff00000
    14d4:	3ff00000 	.word	0x3ff00000
    14d8:	00000c11 	.word	0x00000c11

000014dc <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    14dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    14de:	4c2b      	ldr	r4, [pc, #172]	; (158c <updateGround+0xb0>)
    14e0:	4d2b      	ldr	r5, [pc, #172]	; (1590 <updateGround+0xb4>)
    14e2:	4a2c      	ldr	r2, [pc, #176]	; (1594 <updateGround+0xb8>)
    14e4:	6920      	ldr	r0, [r4, #16]
    14e6:	6961      	ldr	r1, [r4, #20]
    14e8:	4b2b      	ldr	r3, [pc, #172]	; (1598 <updateGround+0xbc>)
    14ea:	47a8      	blx	r5
    14ec:	4b2b      	ldr	r3, [pc, #172]	; (159c <updateGround+0xc0>)
    14ee:	0006      	movs	r6, r0
    14f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
    14f2:	4b2b      	ldr	r3, [pc, #172]	; (15a0 <updateGround+0xc4>)
    14f4:	000f      	movs	r7, r1
    14f6:	4798      	blx	r3
    14f8:	4a26      	ldr	r2, [pc, #152]	; (1594 <updateGround+0xb8>)
    14fa:	4b2a      	ldr	r3, [pc, #168]	; (15a4 <updateGround+0xc8>)
    14fc:	47a8      	blx	r5
    14fe:	0002      	movs	r2, r0
    1500:	000b      	movs	r3, r1
    1502:	0030      	movs	r0, r6
    1504:	0039      	movs	r1, r7
    1506:	4e28      	ldr	r6, [pc, #160]	; (15a8 <updateGround+0xcc>)
    1508:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    150a:	4e28      	ldr	r6, [pc, #160]	; (15ac <updateGround+0xd0>)
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {


    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    150c:	6120      	str	r0, [r4, #16]
    150e:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1510:	69e0      	ldr	r0, [r4, #28]
    1512:	47b0      	blx	r6
    1514:	2200      	movs	r2, #0
    1516:	4b26      	ldr	r3, [pc, #152]	; (15b0 <updateGround+0xd4>)
    1518:	47a8      	blx	r5
    151a:	9000      	str	r0, [sp, #0]
    151c:	9101      	str	r1, [sp, #4]
    151e:	4925      	ldr	r1, [pc, #148]	; (15b4 <updateGround+0xd8>)
    1520:	2200      	movs	r2, #0
    1522:	6808      	ldr	r0, [r1, #0]
    1524:	6849      	ldr	r1, [r1, #4]
    1526:	4b22      	ldr	r3, [pc, #136]	; (15b0 <updateGround+0xd4>)
    1528:	47a8      	blx	r5
    152a:	4f1f      	ldr	r7, [pc, #124]	; (15a8 <updateGround+0xcc>)
    152c:	0002      	movs	r2, r0
    152e:	000b      	movs	r3, r1
    1530:	9800      	ldr	r0, [sp, #0]
    1532:	9901      	ldr	r1, [sp, #4]
    1534:	47b8      	blx	r7
    1536:	4f20      	ldr	r7, [pc, #128]	; (15b8 <updateGround+0xdc>)
    1538:	47b8      	blx	r7
    153a:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    153c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    153e:	47b0      	blx	r6
    1540:	4a14      	ldr	r2, [pc, #80]	; (1594 <updateGround+0xb8>)
    1542:	4b15      	ldr	r3, [pc, #84]	; (1598 <updateGround+0xbc>)
    1544:	47a8      	blx	r5
    1546:	4b15      	ldr	r3, [pc, #84]	; (159c <updateGround+0xc0>)
    1548:	9000      	str	r0, [sp, #0]
    154a:	9101      	str	r1, [sp, #4]
    154c:	6d58      	ldr	r0, [r3, #84]	; 0x54
    154e:	47b0      	blx	r6
    1550:	4a10      	ldr	r2, [pc, #64]	; (1594 <updateGround+0xb8>)
    1552:	4b14      	ldr	r3, [pc, #80]	; (15a4 <updateGround+0xc8>)
    1554:	47a8      	blx	r5
    1556:	4d14      	ldr	r5, [pc, #80]	; (15a8 <updateGround+0xcc>)
    1558:	000b      	movs	r3, r1
    155a:	0002      	movs	r2, r0
    155c:	9800      	ldr	r0, [sp, #0]
    155e:	9901      	ldr	r1, [sp, #4]
    1560:	47a8      	blx	r5
    1562:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    1564:	4d15      	ldr	r5, [pc, #84]	; (15bc <updateGround+0xe0>)
void updateGround(Altimeter *my_altimeter) {


    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    1566:	6260      	str	r0, [r4, #36]	; 0x24

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    1568:	47a8      	blx	r5
    156a:	6823      	ldr	r3, [r4, #0]
    156c:	1ac0      	subs	r0, r0, r3
    156e:	23fa      	movs	r3, #250	; 0xfa
    1570:	00db      	lsls	r3, r3, #3
    1572:	4298      	cmp	r0, r3
    1574:	d909      	bls.n	158a <updateGround+0xae>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    1576:	69e3      	ldr	r3, [r4, #28]
    1578:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    157a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    157c:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    157e:	6922      	ldr	r2, [r4, #16]
    1580:	6963      	ldr	r3, [r4, #20]
    1582:	60a2      	str	r2, [r4, #8]
    1584:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    1586:	47a8      	blx	r5
    1588:	6020      	str	r0, [r4, #0]
    }
}
    158a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    158c:	20000150 	.word	0x20000150
    1590:	00005fdd 	.word	0x00005fdd
    1594:	9999999a 	.word	0x9999999a
    1598:	3fe99999 	.word	0x3fe99999
    159c:	200005f0 	.word	0x200005f0
    15a0:	00006d19 	.word	0x00006d19
    15a4:	3fc99999 	.word	0x3fc99999
    15a8:	0000513d 	.word	0x0000513d
    15ac:	00006ca9 	.word	0x00006ca9
    15b0:	3fe00000 	.word	0x3fe00000
    15b4:	20000328 	.word	0x20000328
    15b8:	00004e95 	.word	0x00004e95
    15bc:	00001149 	.word	0x00001149

000015c0 <isItPointingUp>:

void isItPointingUp() {
    15c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15c2:	261e      	movs	r6, #30
    u8_t i;

    double pointingUpBuffer;

    pointingUpBuffer = 0;
    15c4:	2400      	movs	r4, #0
    15c6:	2500      	movs	r5, #0

    for ( i = 0; i < 30 ; ++i ) {
        delay_ms(10);
    15c8:	200a      	movs	r0, #10
    15ca:	4b21      	ldr	r3, [pc, #132]	; (1650 <isItPointingUp+0x90>)
    15cc:	4798      	blx	r3
        sampleTick();
    15ce:	4b21      	ldr	r3, [pc, #132]	; (1654 <isItPointingUp+0x94>)
    15d0:	4798      	blx	r3
        pointingUpBuffer = pointingUpBuffer * 0.8 + (-sample.accelX) * 0.2;
    15d2:	4a21      	ldr	r2, [pc, #132]	; (1658 <isItPointingUp+0x98>)
    15d4:	4f21      	ldr	r7, [pc, #132]	; (165c <isItPointingUp+0x9c>)
    15d6:	4b22      	ldr	r3, [pc, #136]	; (1660 <isItPointingUp+0xa0>)
    15d8:	0020      	movs	r0, r4
    15da:	0029      	movs	r1, r5
    15dc:	47b8      	blx	r7
    15de:	4b21      	ldr	r3, [pc, #132]	; (1664 <isItPointingUp+0xa4>)
    15e0:	0004      	movs	r4, r0
    15e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
    15e4:	2380      	movs	r3, #128	; 0x80
    15e6:	000d      	movs	r5, r1
    15e8:	061b      	lsls	r3, r3, #24
    15ea:	18c0      	adds	r0, r0, r3
    15ec:	4b1e      	ldr	r3, [pc, #120]	; (1668 <isItPointingUp+0xa8>)
    15ee:	4798      	blx	r3
    15f0:	4a19      	ldr	r2, [pc, #100]	; (1658 <isItPointingUp+0x98>)
    15f2:	4b1e      	ldr	r3, [pc, #120]	; (166c <isItPointingUp+0xac>)
    15f4:	47b8      	blx	r7
    15f6:	0022      	movs	r2, r4
    15f8:	002b      	movs	r3, r5
    15fa:	4c1d      	ldr	r4, [pc, #116]	; (1670 <isItPointingUp+0xb0>)
    15fc:	47a0      	blx	r4
    15fe:	3e01      	subs	r6, #1
    1600:	b2f6      	uxtb	r6, r6
    1602:	0004      	movs	r4, r0
    1604:	000d      	movs	r5, r1

    double pointingUpBuffer;

    pointingUpBuffer = 0;

    for ( i = 0; i < 30 ; ++i ) {
    1606:	2e00      	cmp	r6, #0
    1608:	d1de      	bne.n	15c8 <isItPointingUp+0x8>
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + (-sample.accelX) * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    160a:	4e1a      	ldr	r6, [pc, #104]	; (1674 <isItPointingUp+0xb4>)
    160c:	4a1a      	ldr	r2, [pc, #104]	; (1678 <isItPointingUp+0xb8>)
    160e:	4b1b      	ldr	r3, [pc, #108]	; (167c <isItPointingUp+0xbc>)
    1610:	47b0      	blx	r6
    1612:	0037      	movs	r7, r6
    1614:	4e1a      	ldr	r6, [pc, #104]	; (1680 <isItPointingUp+0xc0>)
    1616:	2800      	cmp	r0, #0
    1618:	d007      	beq.n	162a <isItPointingUp+0x6a>
    161a:	4a0f      	ldr	r2, [pc, #60]	; (1658 <isItPointingUp+0x98>)
    161c:	4b19      	ldr	r3, [pc, #100]	; (1684 <isItPointingUp+0xc4>)
    161e:	0020      	movs	r0, r4
    1620:	0029      	movs	r1, r5
    1622:	47b0      	blx	r6
        altimeter.pointingUp = true;
    1624:	2201      	movs	r2, #1
    for ( i = 0; i < 30 ; ++i ) {
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + (-sample.accelX) * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    1626:	2800      	cmp	r0, #0
    1628:	d10e      	bne.n	1648 <isItPointingUp+0x88>
        altimeter.pointingUp = true;
    } else if ((pointingUpBuffer < -0.9) & (pointingUpBuffer > -1.1)) {
    162a:	4a13      	ldr	r2, [pc, #76]	; (1678 <isItPointingUp+0xb8>)
    162c:	4b16      	ldr	r3, [pc, #88]	; (1688 <isItPointingUp+0xc8>)
    162e:	0020      	movs	r0, r4
    1630:	0029      	movs	r1, r5
    1632:	47b0      	blx	r6
    1634:	2800      	cmp	r0, #0
    1636:	d00a      	beq.n	164e <isItPointingUp+0x8e>
    1638:	4a07      	ldr	r2, [pc, #28]	; (1658 <isItPointingUp+0x98>)
    163a:	4b14      	ldr	r3, [pc, #80]	; (168c <isItPointingUp+0xcc>)
    163c:	0020      	movs	r0, r4
    163e:	0029      	movs	r1, r5
    1640:	47b8      	blx	r7
    1642:	2800      	cmp	r0, #0
    1644:	d003      	beq.n	164e <isItPointingUp+0x8e>
        altimeter.pointingUp = false;
    1646:	2200      	movs	r2, #0
    1648:	4b11      	ldr	r3, [pc, #68]	; (1690 <isItPointingUp+0xd0>)
    164a:	715a      	strb	r2, [r3, #5]

        }

    }

    164c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    164e:	e7fe      	b.n	164e <isItPointingUp+0x8e>
    1650:	000010fd 	.word	0x000010fd
    1654:	00003311 	.word	0x00003311
    1658:	9999999a 	.word	0x9999999a
    165c:	00005fdd 	.word	0x00005fdd
    1660:	3fe99999 	.word	0x3fe99999
    1664:	200005f0 	.word	0x200005f0
    1668:	00006d19 	.word	0x00006d19
    166c:	3fc99999 	.word	0x3fc99999
    1670:	0000513d 	.word	0x0000513d
    1674:	00004e15 	.word	0x00004e15
    1678:	cccccccd 	.word	0xcccccccd
    167c:	3feccccc 	.word	0x3feccccc
    1680:	00004ded 	.word	0x00004ded
    1684:	3ff19999 	.word	0x3ff19999
    1688:	bfeccccc 	.word	0xbfeccccc
    168c:	bff19999 	.word	0xbff19999
    1690:	200001a0 	.word	0x200001a0

00001694 <igniterTick>:
#include <util.h>
#include <boardDefines.h>


void igniterTick() {
    1694:	b510      	push	{r4, lr}

    if (charges.igniterAHot) {
    1696:	4c23      	ldr	r4, [pc, #140]	; (1724 <igniterTick+0x90>)
    1698:	7823      	ldrb	r3, [r4, #0]
    169a:	2b00      	cmp	r3, #0
    169c:	d00d      	beq.n	16ba <igniterTick+0x26>
        if ((millis() - charges.igniterATick) > 2000) {
    169e:	4b22      	ldr	r3, [pc, #136]	; (1728 <igniterTick+0x94>)
    16a0:	4798      	blx	r3
    16a2:	6863      	ldr	r3, [r4, #4]
    16a4:	1ac0      	subs	r0, r0, r3
    16a6:	23fa      	movs	r3, #250	; 0xfa
    16a8:	00db      	lsls	r3, r3, #3
    16aa:	4298      	cmp	r0, r3
    16ac:	d905      	bls.n	16ba <igniterTick+0x26>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    16ae:	2280      	movs	r2, #128	; 0x80
    16b0:	4b1e      	ldr	r3, [pc, #120]	; (172c <igniterTick+0x98>)
    16b2:	0412      	lsls	r2, r2, #16
    16b4:	601a      	str	r2, [r3, #0]
            pinLow(fireAPin);
            charges.igniterAHot = false;
    16b6:	2300      	movs	r3, #0
    16b8:	7023      	strb	r3, [r4, #0]
        }
    }

    if (charges.igniterBHot) {
    16ba:	7a23      	ldrb	r3, [r4, #8]
    16bc:	2b00      	cmp	r3, #0
    16be:	d00d      	beq.n	16dc <igniterTick+0x48>
        if ((millis() - charges.igniterBTick) > 2000) {
    16c0:	4b19      	ldr	r3, [pc, #100]	; (1728 <igniterTick+0x94>)
    16c2:	4798      	blx	r3
    16c4:	68e3      	ldr	r3, [r4, #12]
    16c6:	1ac0      	subs	r0, r0, r3
    16c8:	23fa      	movs	r3, #250	; 0xfa
    16ca:	00db      	lsls	r3, r3, #3
    16cc:	4298      	cmp	r0, r3
    16ce:	d905      	bls.n	16dc <igniterTick+0x48>
    16d0:	2280      	movs	r2, #128	; 0x80
    16d2:	4b16      	ldr	r3, [pc, #88]	; (172c <igniterTick+0x98>)
    16d4:	03d2      	lsls	r2, r2, #15
    16d6:	601a      	str	r2, [r3, #0]
            pinLow(fireBPin);
            charges.igniterBHot = false;
    16d8:	2300      	movs	r3, #0
    16da:	7223      	strb	r3, [r4, #8]
        }
    }

    if (charges.igniterCHot) {
    16dc:	7c23      	ldrb	r3, [r4, #16]
    16de:	2b00      	cmp	r3, #0
    16e0:	d00d      	beq.n	16fe <igniterTick+0x6a>
        if ((millis() - charges.igniterCTick) > 2000) {
    16e2:	4b11      	ldr	r3, [pc, #68]	; (1728 <igniterTick+0x94>)
    16e4:	4798      	blx	r3
    16e6:	6963      	ldr	r3, [r4, #20]
    16e8:	1ac0      	subs	r0, r0, r3
    16ea:	23fa      	movs	r3, #250	; 0xfa
    16ec:	00db      	lsls	r3, r3, #3
    16ee:	4298      	cmp	r0, r3
    16f0:	d905      	bls.n	16fe <igniterTick+0x6a>
    16f2:	2280      	movs	r2, #128	; 0x80
    16f4:	4b0e      	ldr	r3, [pc, #56]	; (1730 <igniterTick+0x9c>)
    16f6:	0492      	lsls	r2, r2, #18
    16f8:	615a      	str	r2, [r3, #20]
            pinLow(fireCPin);
            charges.igniterCHot = false;
    16fa:	2300      	movs	r3, #0
    16fc:	7423      	strb	r3, [r4, #16]
        }
    }

    if (charges.igniterDHot) {
    16fe:	7e23      	ldrb	r3, [r4, #24]
    1700:	2b00      	cmp	r3, #0
    1702:	d00d      	beq.n	1720 <igniterTick+0x8c>
        if ((millis() - charges.igniterDTick) > 2000) {
    1704:	4b08      	ldr	r3, [pc, #32]	; (1728 <igniterTick+0x94>)
    1706:	4798      	blx	r3
    1708:	69e3      	ldr	r3, [r4, #28]
    170a:	1ac0      	subs	r0, r0, r3
    170c:	23fa      	movs	r3, #250	; 0xfa
    170e:	00db      	lsls	r3, r3, #3
    1710:	4298      	cmp	r0, r3
    1712:	d905      	bls.n	1720 <igniterTick+0x8c>
    1714:	2280      	movs	r2, #128	; 0x80
    1716:	4b06      	ldr	r3, [pc, #24]	; (1730 <igniterTick+0x9c>)
    1718:	0452      	lsls	r2, r2, #17
    171a:	615a      	str	r2, [r3, #20]
            pinLow(fireDPin);
            charges.igniterDHot = false;
    171c:	2300      	movs	r3, #0
    171e:	7623      	strb	r3, [r4, #24]
        }
    }
}
    1720:	bd10      	pop	{r4, pc}
    1722:	46c0      	nop			; (mov r8, r8)
    1724:	200002c4 	.word	0x200002c4
    1728:	00001149 	.word	0x00001149
    172c:	41004494 	.word	0x41004494
    1730:	41004400 	.word	0x41004400

00001734 <lightIgniterA>:
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1734:	2280      	movs	r2, #128	; 0x80
    1736:	4b05      	ldr	r3, [pc, #20]	; (174c <lightIgniterA+0x18>)
    1738:	0412      	lsls	r2, r2, #16
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
        lightIgniterD();
    }
}

void lightIgniterA() {
    173a:	b510      	push	{r4, lr}
    173c:	601a      	str	r2, [r3, #0]
    pinHigh(fireAPin);
    charges.igniterAHot = true;
    173e:	2301      	movs	r3, #1
    1740:	4c03      	ldr	r4, [pc, #12]	; (1750 <lightIgniterA+0x1c>)
    1742:	7023      	strb	r3, [r4, #0]
    charges.igniterATick = millis();
    1744:	4b03      	ldr	r3, [pc, #12]	; (1754 <lightIgniterA+0x20>)
    1746:	4798      	blx	r3
    1748:	6060      	str	r0, [r4, #4]
}
    174a:	bd10      	pop	{r4, pc}
    174c:	41004498 	.word	0x41004498
    1750:	200002c4 	.word	0x200002c4
    1754:	00001149 	.word	0x00001149

00001758 <lightIgniterB>:
    1758:	2280      	movs	r2, #128	; 0x80
    175a:	4b05      	ldr	r3, [pc, #20]	; (1770 <lightIgniterB+0x18>)
    175c:	03d2      	lsls	r2, r2, #15

void lightIgniterB() {
    175e:	b510      	push	{r4, lr}
    1760:	601a      	str	r2, [r3, #0]
    pinHigh(fireBPin);
    charges.igniterBHot = true;
    1762:	2301      	movs	r3, #1
    1764:	4c03      	ldr	r4, [pc, #12]	; (1774 <lightIgniterB+0x1c>)
    1766:	7223      	strb	r3, [r4, #8]
    charges.igniterBTick = millis();
    1768:	4b03      	ldr	r3, [pc, #12]	; (1778 <lightIgniterB+0x20>)
    176a:	4798      	blx	r3
    176c:	60e0      	str	r0, [r4, #12]
}
    176e:	bd10      	pop	{r4, pc}
    1770:	41004498 	.word	0x41004498
    1774:	200002c4 	.word	0x200002c4
    1778:	00001149 	.word	0x00001149

0000177c <lightIgniterC>:
    177c:	2280      	movs	r2, #128	; 0x80
    177e:	4b05      	ldr	r3, [pc, #20]	; (1794 <lightIgniterC+0x18>)
    1780:	0492      	lsls	r2, r2, #18

void lightIgniterC() {
    1782:	b510      	push	{r4, lr}
    1784:	619a      	str	r2, [r3, #24]
    pinHigh(fireCPin);
    charges.igniterCHot = true;
    1786:	2301      	movs	r3, #1
    1788:	4c03      	ldr	r4, [pc, #12]	; (1798 <lightIgniterC+0x1c>)
    178a:	7423      	strb	r3, [r4, #16]
    charges.igniterCTick = millis();
    178c:	4b03      	ldr	r3, [pc, #12]	; (179c <lightIgniterC+0x20>)
    178e:	4798      	blx	r3
    1790:	6160      	str	r0, [r4, #20]
}
    1792:	bd10      	pop	{r4, pc}
    1794:	41004400 	.word	0x41004400
    1798:	200002c4 	.word	0x200002c4
    179c:	00001149 	.word	0x00001149

000017a0 <lightIgniterD>:
    17a0:	2280      	movs	r2, #128	; 0x80
    17a2:	4b05      	ldr	r3, [pc, #20]	; (17b8 <lightIgniterD+0x18>)
    17a4:	0452      	lsls	r2, r2, #17

void lightIgniterD() {
    17a6:	b510      	push	{r4, lr}
    17a8:	619a      	str	r2, [r3, #24]
    pinHigh(fireDPin);
    charges.igniterDHot = true;
    17aa:	2301      	movs	r3, #1
    17ac:	4c03      	ldr	r4, [pc, #12]	; (17bc <lightIgniterD+0x1c>)
    17ae:	7623      	strb	r3, [r4, #24]
    charges.igniterDTick = millis();
    17b0:	4b03      	ldr	r3, [pc, #12]	; (17c0 <lightIgniterD+0x20>)
    17b2:	4798      	blx	r3
    17b4:	61e0      	str	r0, [r4, #28]
    17b6:	bd10      	pop	{r4, pc}
    17b8:	41004400 	.word	0x41004400
    17bc:	200002c4 	.word	0x200002c4
    17c0:	00001149 	.word	0x00001149

000017c4 <igniteMain>:
            charges.igniterDHot = false;
        }
    }
}

void igniteMain() {
    17c4:	b510      	push	{r4, lr}

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    17c6:	4c11      	ldr	r4, [pc, #68]	; (180c <igniteMain+0x48>)
    17c8:	7863      	ldrb	r3, [r4, #1]
    17ca:	2b00      	cmp	r3, #0
    17cc:	d104      	bne.n	17d8 <igniteMain+0x14>
    17ce:	7823      	ldrb	r3, [r4, #0]
    17d0:	2b00      	cmp	r3, #0
    17d2:	d001      	beq.n	17d8 <igniteMain+0x14>
        lightIgniterA();
    17d4:	4b0e      	ldr	r3, [pc, #56]	; (1810 <igniteMain+0x4c>)
    17d6:	4798      	blx	r3
    }
    if(deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    17d8:	79e3      	ldrb	r3, [r4, #7]
    17da:	2b00      	cmp	r3, #0
    17dc:	d104      	bne.n	17e8 <igniteMain+0x24>
    17de:	79a3      	ldrb	r3, [r4, #6]
    17e0:	2b00      	cmp	r3, #0
    17e2:	d001      	beq.n	17e8 <igniteMain+0x24>
        lightIgniterB();
    17e4:	4b0b      	ldr	r3, [pc, #44]	; (1814 <igniteMain+0x50>)
    17e6:	4798      	blx	r3
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    17e8:	7b63      	ldrb	r3, [r4, #13]
    17ea:	2b00      	cmp	r3, #0
    17ec:	d104      	bne.n	17f8 <igniteMain+0x34>
    17ee:	7b23      	ldrb	r3, [r4, #12]
    17f0:	2b00      	cmp	r3, #0
    17f2:	d001      	beq.n	17f8 <igniteMain+0x34>
        lightIgniterC();
    17f4:	4b08      	ldr	r3, [pc, #32]	; (1818 <igniteMain+0x54>)
    17f6:	4798      	blx	r3
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    17f8:	7ce3      	ldrb	r3, [r4, #19]
    17fa:	2b00      	cmp	r3, #0
    17fc:	d104      	bne.n	1808 <igniteMain+0x44>
    17fe:	7ca3      	ldrb	r3, [r4, #18]
    1800:	2b00      	cmp	r3, #0
    1802:	d001      	beq.n	1808 <igniteMain+0x44>
        lightIgniterD();
    1804:	4b05      	ldr	r3, [pc, #20]	; (181c <igniteMain+0x58>)
    1806:	4798      	blx	r3
    }
}
    1808:	bd10      	pop	{r4, pc}
    180a:	46c0      	nop			; (mov r8, r8)
    180c:	20000180 	.word	0x20000180
    1810:	00001735 	.word	0x00001735
    1814:	00001759 	.word	0x00001759
    1818:	0000177d 	.word	0x0000177d
    181c:	000017a1 	.word	0x000017a1

00001820 <igniteDrogue>:

void igniteDrogue() {
    1820:	b510      	push	{r4, lr}

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == DROGUE_t)) {
    1822:	4c11      	ldr	r4, [pc, #68]	; (1868 <igniteDrogue+0x48>)
    1824:	7863      	ldrb	r3, [r4, #1]
    1826:	2b01      	cmp	r3, #1
    1828:	d104      	bne.n	1834 <igniteDrogue+0x14>
    182a:	7823      	ldrb	r3, [r4, #0]
    182c:	2b00      	cmp	r3, #0
    182e:	d001      	beq.n	1834 <igniteDrogue+0x14>
        lightIgniterA();
    1830:	4b0e      	ldr	r3, [pc, #56]	; (186c <igniteDrogue+0x4c>)
    1832:	4798      	blx	r3
    }
    if (deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == DROGUE_t)) {
    1834:	79e3      	ldrb	r3, [r4, #7]
    1836:	2b01      	cmp	r3, #1
    1838:	d104      	bne.n	1844 <igniteDrogue+0x24>
    183a:	79a3      	ldrb	r3, [r4, #6]
    183c:	2b00      	cmp	r3, #0
    183e:	d001      	beq.n	1844 <igniteDrogue+0x24>
        lightIgniterB();
    1840:	4b0b      	ldr	r3, [pc, #44]	; (1870 <igniteDrogue+0x50>)
    1842:	4798      	blx	r3
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == DROGUE_t)) {
    1844:	7b63      	ldrb	r3, [r4, #13]
    1846:	2b01      	cmp	r3, #1
    1848:	d104      	bne.n	1854 <igniteDrogue+0x34>
    184a:	7b23      	ldrb	r3, [r4, #12]
    184c:	2b00      	cmp	r3, #0
    184e:	d001      	beq.n	1854 <igniteDrogue+0x34>
        lightIgniterC();
    1850:	4b08      	ldr	r3, [pc, #32]	; (1874 <igniteDrogue+0x54>)
    1852:	4798      	blx	r3
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
    1854:	7ce3      	ldrb	r3, [r4, #19]
    1856:	2b01      	cmp	r3, #1
    1858:	d104      	bne.n	1864 <igniteDrogue+0x44>
    185a:	7ca3      	ldrb	r3, [r4, #18]
    185c:	2b00      	cmp	r3, #0
    185e:	d001      	beq.n	1864 <igniteDrogue+0x44>
        lightIgniterD();
    1860:	4b05      	ldr	r3, [pc, #20]	; (1878 <igniteDrogue+0x58>)
    1862:	4798      	blx	r3
    }
}
    1864:	bd10      	pop	{r4, pc}
    1866:	46c0      	nop			; (mov r8, r8)
    1868:	20000180 	.word	0x20000180
    186c:	00001735 	.word	0x00001735
    1870:	00001759 	.word	0x00001759
    1874:	0000177d 	.word	0x0000177d
    1878:	000017a1 	.word	0x000017a1

0000187c <computeKalmanGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    187c:	4bdc      	ldr	r3, [pc, #880]	; (1bf0 <computeKalmanGains+0x374>)
    187e:	48dd      	ldr	r0, [pc, #884]	; (1bf4 <computeKalmanGains+0x378>)
    1880:	49dd      	ldr	r1, [pc, #884]	; (1bf8 <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    1882:	b5f0      	push	{r4, r5, r6, r7, lr}
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    1884:	6098      	str	r0, [r3, #8]
    1886:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    1888:	6298      	str	r0, [r3, #40]	; 0x28
    188a:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    188c:	48db      	ldr	r0, [pc, #876]	; (1bfc <computeKalmanGains+0x380>)
    188e:	49dc      	ldr	r1, [pc, #880]	; (1c00 <computeKalmanGains+0x384>)
    1890:	2200      	movs	r2, #0
    1892:	6118      	str	r0, [r3, #16]
    1894:	6159      	str	r1, [r3, #20]
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
            kgain[i][j] = 1.0;
    1896:	2000      	movs	r0, #0
    1898:	49da      	ldr	r1, [pc, #872]	; (1c04 <computeKalmanGains+0x388>)
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    189a:	4cdb      	ldr	r4, [pc, #876]	; (1c08 <computeKalmanGains+0x38c>)
    189c:	468c      	mov	ip, r1
    189e:	4ddb      	ldr	r5, [pc, #876]	; (1c0c <computeKalmanGains+0x390>)
            kgain[i][j] = 1.0;
    18a0:	49db      	ldr	r1, [pc, #876]	; (1c10 <computeKalmanGains+0x394>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    18a2:	b0cd      	sub	sp, #308	; 0x134
    18a4:	ae40      	add	r6, sp, #256	; 0x100
    18a6:	1997      	adds	r7, r2, r6
    18a8:	4666      	mov	r6, ip
    18aa:	1996      	adds	r6, r2, r6
    18ac:	3210      	adds	r2, #16
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    18ae:	603c      	str	r4, [r7, #0]
    18b0:	607d      	str	r5, [r7, #4]
            kgain[i][j] = 1.0;
    18b2:	6030      	str	r0, [r6, #0]
    18b4:	6071      	str	r1, [r6, #4]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    18b6:	60bc      	str	r4, [r7, #8]
    18b8:	60fd      	str	r5, [r7, #12]
            kgain[i][j] = 1.0;
    18ba:	60b0      	str	r0, [r6, #8]
    18bc:	60f1      	str	r1, [r6, #12]
    phi[0][2]    = dt*dt/2.0;
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
    18be:	2a30      	cmp	r2, #48	; 0x30
    18c0:	d1f0      	bne.n	18a4 <computeKalmanGains+0x28>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    18c2:	6819      	ldr	r1, [r3, #0]
    18c4:	685a      	ldr	r2, [r3, #4]
    18c6:	911a      	str	r1, [sp, #104]	; 0x68
    18c8:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    18ca:	6999      	ldr	r1, [r3, #24]
    18cc:	69da      	ldr	r2, [r3, #28]
    18ce:	911c      	str	r1, [sp, #112]	; 0x70
    18d0:	921d      	str	r2, [sp, #116]	; 0x74
    18d2:	6a19      	ldr	r1, [r3, #32]
    18d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    18d6:	911e      	str	r1, [sp, #120]	; 0x78
    18d8:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    18da:	6b19      	ldr	r1, [r3, #48]	; 0x30
    18dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    18de:	9120      	str	r1, [sp, #128]	; 0x80
    18e0:	9221      	str	r2, [sp, #132]	; 0x84
    18e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
    18e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    18e6:	9122      	str	r1, [sp, #136]	; 0x88
    18e8:	9223      	str	r2, [sp, #140]	; 0x8c
    18ea:	6c19      	ldr	r1, [r3, #64]	; 0x40
    18ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    18ee:	9124      	str	r1, [sp, #144]	; 0x90
    18f0:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    18f2:	6c99      	ldr	r1, [r3, #72]	; 0x48
    18f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    18f6:	913a      	str	r1, [sp, #232]	; 0xe8
    18f8:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    18fa:	6d19      	ldr	r1, [r3, #80]	; 0x50
    18fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    18fe:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    1900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1902:	933e      	str	r3, [sp, #248]	; 0xf8
    1904:	943f      	str	r4, [sp, #252]	; 0xfc
    1906:	2300      	movs	r3, #0
    1908:	4cc2      	ldr	r4, [pc, #776]	; (1c14 <computeKalmanGains+0x398>)
    190a:	913c      	str	r1, [sp, #240]	; 0xf0
    190c:	923d      	str	r2, [sp, #244]	; 0xf4
    190e:	9302      	str	r3, [sp, #8]
    1910:	9403      	str	r4, [sp, #12]
    1912:	2300      	movs	r3, #0
    1914:	2400      	movs	r4, #0
    1916:	9310      	str	r3, [sp, #64]	; 0x40
    1918:	9411      	str	r4, [sp, #68]	; 0x44
    191a:	9300      	str	r3, [sp, #0]
    191c:	9401      	str	r4, [sp, #4]
    191e:	9304      	str	r3, [sp, #16]
    1920:	9405      	str	r4, [sp, #20]
    1922:	2300      	movs	r3, #0
    1924:	4cbb      	ldr	r4, [pc, #748]	; (1c14 <computeKalmanGains+0x398>)
    1926:	930e      	str	r3, [sp, #56]	; 0x38
    1928:	940f      	str	r4, [sp, #60]	; 0x3c
    192a:	2300      	movs	r3, #0
    192c:	2400      	movs	r4, #0
    192e:	9308      	str	r3, [sp, #32]
    1930:	9409      	str	r4, [sp, #36]	; 0x24
    1932:	930c      	str	r3, [sp, #48]	; 0x30
    1934:	940d      	str	r4, [sp, #52]	; 0x34
    1936:	930a      	str	r3, [sp, #40]	; 0x28
    1938:	940b      	str	r4, [sp, #44]	; 0x2c
    193a:	2480      	movs	r4, #128	; 0x80
    193c:	2300      	movs	r3, #0
    193e:	05e4      	lsls	r4, r4, #23
    1940:	9306      	str	r3, [sp, #24]
    1942:	9407      	str	r4, [sp, #28]
    1944:	2300      	movs	r3, #0
    1946:	9338      	str	r3, [sp, #224]	; 0xe0

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1948:	4db3      	ldr	r5, [pc, #716]	; (1c18 <computeKalmanGains+0x39c>)
    194a:	9a06      	ldr	r2, [sp, #24]
    194c:	9b07      	ldr	r3, [sp, #28]
    194e:	981a      	ldr	r0, [sp, #104]	; 0x68
    1950:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1952:	47a8      	blx	r5
    1954:	4aa7      	ldr	r2, [pc, #668]	; (1bf4 <computeKalmanGains+0x378>)
    1956:	0006      	movs	r6, r0
    1958:	000f      	movs	r7, r1
    195a:	9808      	ldr	r0, [sp, #32]
    195c:	9909      	ldr	r1, [sp, #36]	; 0x24
    195e:	4ba6      	ldr	r3, [pc, #664]	; (1bf8 <computeKalmanGains+0x37c>)
    1960:	47a8      	blx	r5
    1962:	4cae      	ldr	r4, [pc, #696]	; (1c1c <computeKalmanGains+0x3a0>)
    1964:	0002      	movs	r2, r0
    1966:	000b      	movs	r3, r1
    1968:	0030      	movs	r0, r6
    196a:	0039      	movs	r1, r7
    196c:	47a0      	blx	r4
    196e:	4aa3      	ldr	r2, [pc, #652]	; (1bfc <computeKalmanGains+0x380>)
    1970:	0006      	movs	r6, r0
    1972:	000f      	movs	r7, r1
    1974:	9800      	ldr	r0, [sp, #0]
    1976:	9901      	ldr	r1, [sp, #4]
    1978:	4ba1      	ldr	r3, [pc, #644]	; (1c00 <computeKalmanGains+0x384>)
    197a:	47a8      	blx	r5
    197c:	0002      	movs	r2, r0
    197e:	000b      	movs	r3, r1
    1980:	0030      	movs	r0, r6
    1982:	0039      	movs	r1, r7
    1984:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1986:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    198a:	9016      	str	r0, [sp, #88]	; 0x58
    198c:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    198e:	981a      	ldr	r0, [sp, #104]	; 0x68
    1990:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1992:	47a8      	blx	r5
    1994:	4a97      	ldr	r2, [pc, #604]	; (1bf4 <computeKalmanGains+0x378>)
    1996:	0006      	movs	r6, r0
    1998:	000f      	movs	r7, r1
    199a:	980e      	ldr	r0, [sp, #56]	; 0x38
    199c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    199e:	4b96      	ldr	r3, [pc, #600]	; (1bf8 <computeKalmanGains+0x37c>)
    19a0:	47a8      	blx	r5
    19a2:	0002      	movs	r2, r0
    19a4:	000b      	movs	r3, r1
    19a6:	0030      	movs	r0, r6
    19a8:	0039      	movs	r1, r7
    19aa:	47a0      	blx	r4
    19ac:	4a93      	ldr	r2, [pc, #588]	; (1bfc <computeKalmanGains+0x380>)
    19ae:	0006      	movs	r6, r0
    19b0:	000f      	movs	r7, r1
    19b2:	9810      	ldr	r0, [sp, #64]	; 0x40
    19b4:	9911      	ldr	r1, [sp, #68]	; 0x44
    19b6:	4b92      	ldr	r3, [pc, #584]	; (1c00 <computeKalmanGains+0x384>)
    19b8:	47a8      	blx	r5
    19ba:	0002      	movs	r2, r0
    19bc:	000b      	movs	r3, r1
    19be:	0030      	movs	r0, r6
    19c0:	0039      	movs	r1, r7
    19c2:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    19c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    19c8:	9012      	str	r0, [sp, #72]	; 0x48
    19ca:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    19cc:	981a      	ldr	r0, [sp, #104]	; 0x68
    19ce:	991b      	ldr	r1, [sp, #108]	; 0x6c
    19d0:	47a8      	blx	r5
    19d2:	4a88      	ldr	r2, [pc, #544]	; (1bf4 <computeKalmanGains+0x378>)
    19d4:	0006      	movs	r6, r0
    19d6:	000f      	movs	r7, r1
    19d8:	9804      	ldr	r0, [sp, #16]
    19da:	9905      	ldr	r1, [sp, #20]
    19dc:	4b86      	ldr	r3, [pc, #536]	; (1bf8 <computeKalmanGains+0x37c>)
    19de:	47a8      	blx	r5
    19e0:	0002      	movs	r2, r0
    19e2:	000b      	movs	r3, r1
    19e4:	0030      	movs	r0, r6
    19e6:	0039      	movs	r1, r7
    19e8:	47a0      	blx	r4
    19ea:	4a84      	ldr	r2, [pc, #528]	; (1bfc <computeKalmanGains+0x380>)
    19ec:	0006      	movs	r6, r0
    19ee:	000f      	movs	r7, r1
    19f0:	9802      	ldr	r0, [sp, #8]
    19f2:	9903      	ldr	r1, [sp, #12]
    19f4:	4b82      	ldr	r3, [pc, #520]	; (1c00 <computeKalmanGains+0x384>)
    19f6:	47a8      	blx	r5
    19f8:	0002      	movs	r2, r0
    19fa:	000b      	movs	r3, r1
    19fc:	0030      	movs	r0, r6
    19fe:	0039      	movs	r1, r7
    1a00:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1a02:	9a06      	ldr	r2, [sp, #24]
    1a04:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1a06:	9014      	str	r0, [sp, #80]	; 0x50
    1a08:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1a0a:	981c      	ldr	r0, [sp, #112]	; 0x70
    1a0c:	991d      	ldr	r1, [sp, #116]	; 0x74
    1a0e:	47a8      	blx	r5
    1a10:	9a08      	ldr	r2, [sp, #32]
    1a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1a14:	0006      	movs	r6, r0
    1a16:	000f      	movs	r7, r1
    1a18:	981e      	ldr	r0, [sp, #120]	; 0x78
    1a1a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1a1c:	47a8      	blx	r5
    1a1e:	0002      	movs	r2, r0
    1a20:	000b      	movs	r3, r1
    1a22:	0030      	movs	r0, r6
    1a24:	0039      	movs	r1, r7
    1a26:	47a0      	blx	r4
    1a28:	4a72      	ldr	r2, [pc, #456]	; (1bf4 <computeKalmanGains+0x378>)
    1a2a:	0006      	movs	r6, r0
    1a2c:	000f      	movs	r7, r1
    1a2e:	9800      	ldr	r0, [sp, #0]
    1a30:	9901      	ldr	r1, [sp, #4]
    1a32:	4b71      	ldr	r3, [pc, #452]	; (1bf8 <computeKalmanGains+0x37c>)
    1a34:	47a8      	blx	r5
    1a36:	0002      	movs	r2, r0
    1a38:	000b      	movs	r3, r1
    1a3a:	0030      	movs	r0, r6
    1a3c:	0039      	movs	r1, r7
    1a3e:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1a40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1a44:	9018      	str	r0, [sp, #96]	; 0x60
    1a46:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1a48:	981c      	ldr	r0, [sp, #112]	; 0x70
    1a4a:	991d      	ldr	r1, [sp, #116]	; 0x74
    1a4c:	47a8      	blx	r5
    1a4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a52:	0006      	movs	r6, r0
    1a54:	000f      	movs	r7, r1
    1a56:	981e      	ldr	r0, [sp, #120]	; 0x78
    1a58:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1a5a:	47a8      	blx	r5
    1a5c:	0002      	movs	r2, r0
    1a5e:	000b      	movs	r3, r1
    1a60:	0030      	movs	r0, r6
    1a62:	0039      	movs	r1, r7
    1a64:	47a0      	blx	r4
    1a66:	4a63      	ldr	r2, [pc, #396]	; (1bf4 <computeKalmanGains+0x378>)
    1a68:	0006      	movs	r6, r0
    1a6a:	000f      	movs	r7, r1
    1a6c:	9810      	ldr	r0, [sp, #64]	; 0x40
    1a6e:	9911      	ldr	r1, [sp, #68]	; 0x44
    1a70:	4b61      	ldr	r3, [pc, #388]	; (1bf8 <computeKalmanGains+0x37c>)
    1a72:	47a8      	blx	r5
    1a74:	0002      	movs	r2, r0
    1a76:	000b      	movs	r3, r1
    1a78:	0030      	movs	r0, r6
    1a7a:	0039      	movs	r1, r7
    1a7c:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1a7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a80:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1a82:	9026      	str	r0, [sp, #152]	; 0x98
    1a84:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1a86:	981c      	ldr	r0, [sp, #112]	; 0x70
    1a88:	991d      	ldr	r1, [sp, #116]	; 0x74
    1a8a:	47a8      	blx	r5
    1a8c:	9a04      	ldr	r2, [sp, #16]
    1a8e:	9b05      	ldr	r3, [sp, #20]
    1a90:	0006      	movs	r6, r0
    1a92:	000f      	movs	r7, r1
    1a94:	981e      	ldr	r0, [sp, #120]	; 0x78
    1a96:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1a98:	47a8      	blx	r5
    1a9a:	0002      	movs	r2, r0
    1a9c:	000b      	movs	r3, r1
    1a9e:	0030      	movs	r0, r6
    1aa0:	0039      	movs	r1, r7
    1aa2:	47a0      	blx	r4
    1aa4:	4a53      	ldr	r2, [pc, #332]	; (1bf4 <computeKalmanGains+0x378>)
    1aa6:	0006      	movs	r6, r0
    1aa8:	000f      	movs	r7, r1
    1aaa:	9802      	ldr	r0, [sp, #8]
    1aac:	9903      	ldr	r1, [sp, #12]
    1aae:	4b52      	ldr	r3, [pc, #328]	; (1bf8 <computeKalmanGains+0x37c>)
    1ab0:	47a8      	blx	r5
    1ab2:	0002      	movs	r2, r0
    1ab4:	000b      	movs	r3, r1
    1ab6:	0030      	movs	r0, r6
    1ab8:	0039      	movs	r1, r7
    1aba:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1abc:	9a06      	ldr	r2, [sp, #24]
    1abe:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1ac0:	9028      	str	r0, [sp, #160]	; 0xa0
    1ac2:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1ac4:	9820      	ldr	r0, [sp, #128]	; 0x80
    1ac6:	9921      	ldr	r1, [sp, #132]	; 0x84
    1ac8:	47a8      	blx	r5
    1aca:	9a08      	ldr	r2, [sp, #32]
    1acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ace:	0006      	movs	r6, r0
    1ad0:	000f      	movs	r7, r1
    1ad2:	9822      	ldr	r0, [sp, #136]	; 0x88
    1ad4:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1ad6:	47a8      	blx	r5
    1ad8:	0002      	movs	r2, r0
    1ada:	000b      	movs	r3, r1
    1adc:	0030      	movs	r0, r6
    1ade:	0039      	movs	r1, r7
    1ae0:	47a0      	blx	r4
    1ae2:	9a00      	ldr	r2, [sp, #0]
    1ae4:	9b01      	ldr	r3, [sp, #4]
    1ae6:	0006      	movs	r6, r0
    1ae8:	000f      	movs	r7, r1
    1aea:	9824      	ldr	r0, [sp, #144]	; 0x90
    1aec:	9925      	ldr	r1, [sp, #148]	; 0x94
    1aee:	47a8      	blx	r5
    1af0:	0002      	movs	r2, r0
    1af2:	000b      	movs	r3, r1
    1af4:	0030      	movs	r0, r6
    1af6:	0039      	movs	r1, r7
    1af8:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1afa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1afc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1afe:	902e      	str	r0, [sp, #184]	; 0xb8
    1b00:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1b02:	9820      	ldr	r0, [sp, #128]	; 0x80
    1b04:	9921      	ldr	r1, [sp, #132]	; 0x84
    1b06:	47a8      	blx	r5
    1b08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1b0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b0c:	0006      	movs	r6, r0
    1b0e:	000f      	movs	r7, r1
    1b10:	9822      	ldr	r0, [sp, #136]	; 0x88
    1b12:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1b14:	47a8      	blx	r5
    1b16:	0002      	movs	r2, r0
    1b18:	000b      	movs	r3, r1
    1b1a:	0030      	movs	r0, r6
    1b1c:	0039      	movs	r1, r7
    1b1e:	47a0      	blx	r4
    1b20:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1b22:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1b24:	0006      	movs	r6, r0
    1b26:	000f      	movs	r7, r1
    1b28:	9824      	ldr	r0, [sp, #144]	; 0x90
    1b2a:	9925      	ldr	r1, [sp, #148]	; 0x94
    1b2c:	47a8      	blx	r5
    1b2e:	0002      	movs	r2, r0
    1b30:	000b      	movs	r3, r1
    1b32:	0030      	movs	r0, r6
    1b34:	0039      	movs	r1, r7
    1b36:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1b38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1b3c:	9006      	str	r0, [sp, #24]
    1b3e:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1b40:	9820      	ldr	r0, [sp, #128]	; 0x80
    1b42:	9921      	ldr	r1, [sp, #132]	; 0x84
    1b44:	47a8      	blx	r5
    1b46:	9a04      	ldr	r2, [sp, #16]
    1b48:	9b05      	ldr	r3, [sp, #20]
    1b4a:	0006      	movs	r6, r0
    1b4c:	000f      	movs	r7, r1
    1b4e:	9822      	ldr	r0, [sp, #136]	; 0x88
    1b50:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1b52:	47a8      	blx	r5
    1b54:	0002      	movs	r2, r0
    1b56:	000b      	movs	r3, r1
    1b58:	0030      	movs	r0, r6
    1b5a:	0039      	movs	r1, r7
    1b5c:	47a0      	blx	r4
    1b5e:	9a02      	ldr	r2, [sp, #8]
    1b60:	9b03      	ldr	r3, [sp, #12]
    1b62:	0006      	movs	r6, r0
    1b64:	000f      	movs	r7, r1
    1b66:	9824      	ldr	r0, [sp, #144]	; 0x90
    1b68:	9925      	ldr	r1, [sp, #148]	; 0x94
    1b6a:	47a8      	blx	r5
    1b6c:	0002      	movs	r2, r0
    1b6e:	000b      	movs	r3, r1
    1b70:	0030      	movs	r0, r6
    1b72:	0039      	movs	r1, r7
    1b74:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1b76:	4a1f      	ldr	r2, [pc, #124]	; (1bf4 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1b78:	9002      	str	r0, [sp, #8]
    1b7a:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1b7c:	9812      	ldr	r0, [sp, #72]	; 0x48
    1b7e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1b80:	4b1d      	ldr	r3, [pc, #116]	; (1bf8 <computeKalmanGains+0x37c>)
    1b82:	47a8      	blx	r5
    1b84:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1b86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1b88:	47a0      	blx	r4
    1b8a:	4a1c      	ldr	r2, [pc, #112]	; (1bfc <computeKalmanGains+0x380>)
    1b8c:	0006      	movs	r6, r0
    1b8e:	000f      	movs	r7, r1
    1b90:	9814      	ldr	r0, [sp, #80]	; 0x50
    1b92:	9915      	ldr	r1, [sp, #84]	; 0x54
    1b94:	4b1a      	ldr	r3, [pc, #104]	; (1c00 <computeKalmanGains+0x384>)
    1b96:	47a8      	blx	r5
    1b98:	0002      	movs	r2, r0
    1b9a:	000b      	movs	r3, r1
    1b9c:	0030      	movs	r0, r6
    1b9e:	0039      	movs	r1, r7
    1ba0:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1ba2:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1ba4:	9008      	str	r0, [sp, #32]
    1ba6:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1ba8:	9816      	ldr	r0, [sp, #88]	; 0x58
    1baa:	9917      	ldr	r1, [sp, #92]	; 0x5c
    1bac:	2300      	movs	r3, #0
    1bae:	47a8      	blx	r5
    1bb0:	0006      	movs	r6, r0
    1bb2:	000f      	movs	r7, r1
    1bb4:	0002      	movs	r2, r0
    1bb6:	000b      	movs	r3, r1
    1bb8:	9812      	ldr	r0, [sp, #72]	; 0x48
    1bba:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1bbc:	47a0      	blx	r4
    1bbe:	4a0d      	ldr	r2, [pc, #52]	; (1bf4 <computeKalmanGains+0x378>)
    1bc0:	9000      	str	r0, [sp, #0]
    1bc2:	9101      	str	r1, [sp, #4]
    1bc4:	9814      	ldr	r0, [sp, #80]	; 0x50
    1bc6:	9915      	ldr	r1, [sp, #84]	; 0x54
    1bc8:	4b0b      	ldr	r3, [pc, #44]	; (1bf8 <computeKalmanGains+0x37c>)
    1bca:	47a8      	blx	r5
    1bcc:	0002      	movs	r2, r0
    1bce:	000b      	movs	r3, r1
    1bd0:	9800      	ldr	r0, [sp, #0]
    1bd2:	9901      	ldr	r1, [sp, #4]
    1bd4:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1bd6:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1bd8:	9030      	str	r0, [sp, #192]	; 0xc0
    1bda:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1bdc:	9812      	ldr	r0, [sp, #72]	; 0x48
    1bde:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1be0:	2300      	movs	r3, #0
    1be2:	47a8      	blx	r5
    1be4:	0032      	movs	r2, r6
    1be6:	003b      	movs	r3, r7
    1be8:	47a0      	blx	r4
    1bea:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1bec:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1bee:	e017      	b.n	1c20 <computeKalmanGains+0x3a4>
    1bf0:	20000010 	.word	0x20000010
    1bf4:	47ae147b 	.word	0x47ae147b
    1bf8:	3f747ae1 	.word	0x3f747ae1
    1bfc:	eb1c432d 	.word	0xeb1c432d
    1c00:	3eea36e2 	.word	0x3eea36e2
    1c04:	20000348 	.word	0x20000348
    1c08:	d2f1a9fc 	.word	0xd2f1a9fc
    1c0c:	3f50624d 	.word	0x3f50624d
    1c10:	3ff00000 	.word	0x3ff00000
    1c14:	40220000 	.word	0x40220000
    1c18:	00005fdd 	.word	0x00005fdd
    1c1c:	0000513d 	.word	0x0000513d
    1c20:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1c22:	4ad9      	ldr	r2, [pc, #868]	; (1f88 <computeKalmanGains+0x70c>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1c24:	9112      	str	r1, [sp, #72]	; 0x48
    1c26:	9004      	str	r0, [sp, #16]
    1c28:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1c2a:	4bd8      	ldr	r3, [pc, #864]	; (1f8c <computeKalmanGains+0x710>)
    1c2c:	9826      	ldr	r0, [sp, #152]	; 0x98
    1c2e:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1c30:	47a8      	blx	r5
    1c32:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1c34:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1c36:	47a0      	blx	r4
    1c38:	4ad5      	ldr	r2, [pc, #852]	; (1f90 <computeKalmanGains+0x714>)
    1c3a:	0006      	movs	r6, r0
    1c3c:	000f      	movs	r7, r1
    1c3e:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1c40:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1c42:	4bd4      	ldr	r3, [pc, #848]	; (1f94 <computeKalmanGains+0x718>)
    1c44:	47a8      	blx	r5
    1c46:	0002      	movs	r2, r0
    1c48:	000b      	movs	r3, r1
    1c4a:	0030      	movs	r0, r6
    1c4c:	0039      	movs	r1, r7
    1c4e:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1c50:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1c52:	902a      	str	r0, [sp, #168]	; 0xa8
    1c54:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1c56:	9818      	ldr	r0, [sp, #96]	; 0x60
    1c58:	9919      	ldr	r1, [sp, #100]	; 0x64
    1c5a:	2300      	movs	r3, #0
    1c5c:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1c5e:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1c60:	9032      	str	r0, [sp, #200]	; 0xc8
    1c62:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1c64:	9826      	ldr	r0, [sp, #152]	; 0x98
    1c66:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1c68:	2300      	movs	r3, #0
    1c6a:	47a8      	blx	r5
    1c6c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1c6e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1c70:	47a0      	blx	r4
    1c72:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1c74:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1c76:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1c78:	4ac3      	ldr	r2, [pc, #780]	; (1f88 <computeKalmanGains+0x70c>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1c7a:	902c      	str	r0, [sp, #176]	; 0xb0
    1c7c:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1c7e:	9806      	ldr	r0, [sp, #24]
    1c80:	9907      	ldr	r1, [sp, #28]
    1c82:	4bc2      	ldr	r3, [pc, #776]	; (1f8c <computeKalmanGains+0x710>)
    1c84:	47a8      	blx	r5
    1c86:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    1c88:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1c8a:	47a0      	blx	r4
    1c8c:	4ac0      	ldr	r2, [pc, #768]	; (1f90 <computeKalmanGains+0x714>)
    1c8e:	0006      	movs	r6, r0
    1c90:	000f      	movs	r7, r1
    1c92:	9802      	ldr	r0, [sp, #8]
    1c94:	9903      	ldr	r1, [sp, #12]
    1c96:	4bbf      	ldr	r3, [pc, #764]	; (1f94 <computeKalmanGains+0x718>)
    1c98:	47a8      	blx	r5
    1c9a:	0002      	movs	r2, r0
    1c9c:	000b      	movs	r3, r1
    1c9e:	0030      	movs	r0, r6
    1ca0:	0039      	movs	r1, r7
    1ca2:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1ca4:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1ca6:	9000      	str	r0, [sp, #0]
    1ca8:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1caa:	982e      	ldr	r0, [sp, #184]	; 0xb8
    1cac:	992f      	ldr	r1, [sp, #188]	; 0xbc
    1cae:	2300      	movs	r3, #0
    1cb0:	47a8      	blx	r5
    1cb2:	0006      	movs	r6, r0
    1cb4:	000f      	movs	r7, r1
    1cb6:	0002      	movs	r2, r0
    1cb8:	000b      	movs	r3, r1
    1cba:	9806      	ldr	r0, [sp, #24]
    1cbc:	9907      	ldr	r1, [sp, #28]
    1cbe:	47a0      	blx	r4
    1cc0:	4ab1      	ldr	r2, [pc, #708]	; (1f88 <computeKalmanGains+0x70c>)
    1cc2:	900a      	str	r0, [sp, #40]	; 0x28
    1cc4:	910b      	str	r1, [sp, #44]	; 0x2c
    1cc6:	9802      	ldr	r0, [sp, #8]
    1cc8:	9903      	ldr	r1, [sp, #12]
    1cca:	4bb0      	ldr	r3, [pc, #704]	; (1f8c <computeKalmanGains+0x710>)
    1ccc:	47a8      	blx	r5
    1cce:	0002      	movs	r2, r0
    1cd0:	000b      	movs	r3, r1
    1cd2:	980a      	ldr	r0, [sp, #40]	; 0x28
    1cd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1cd6:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1cd8:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1cda:	9010      	str	r0, [sp, #64]	; 0x40
    1cdc:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1cde:	9806      	ldr	r0, [sp, #24]
    1ce0:	9907      	ldr	r1, [sp, #28]
    1ce2:	2300      	movs	r3, #0
    1ce4:	47a8      	blx	r5
    1ce6:	0032      	movs	r2, r6
    1ce8:	003b      	movs	r3, r7
    1cea:	47a0      	blx	r4
    1cec:	9a02      	ldr	r2, [sp, #8]
    1cee:	9b03      	ldr	r3, [sp, #12]
    1cf0:	47a0      	blx	r4
    1cf2:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    1cf4:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    1cf6:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1cf8:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    1cfa:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1cfc:	9002      	str	r0, [sp, #8]
    1cfe:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1d00:	9808      	ldr	r0, [sp, #32]
    1d02:	9909      	ldr	r1, [sp, #36]	; 0x24
    1d04:	47a0      	blx	r4
    1d06:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    1d08:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1d0a:	900a      	str	r0, [sp, #40]	; 0x28
    1d0c:	910b      	str	r1, [sp, #44]	; 0x2c
    1d0e:	9802      	ldr	r0, [sp, #8]
    1d10:	9903      	ldr	r1, [sp, #12]
    1d12:	47a0      	blx	r4
    1d14:	9a00      	ldr	r2, [sp, #0]
    1d16:	9b01      	ldr	r3, [sp, #4]
    1d18:	900c      	str	r0, [sp, #48]	; 0x30
    1d1a:	910d      	str	r1, [sp, #52]	; 0x34
    1d1c:	9804      	ldr	r0, [sp, #16]
    1d1e:	9916      	ldr	r1, [sp, #88]	; 0x58
    1d20:	47a8      	blx	r5
    1d22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1d26:	900e      	str	r0, [sp, #56]	; 0x38
    1d28:	910f      	str	r1, [sp, #60]	; 0x3c
    1d2a:	980a      	ldr	r0, [sp, #40]	; 0x28
    1d2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1d2e:	47a8      	blx	r5
    1d30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1d32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1d34:	4e98      	ldr	r6, [pc, #608]	; (1f98 <computeKalmanGains+0x71c>)
    1d36:	47b0      	blx	r6

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1d38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1d3c:	9006      	str	r0, [sp, #24]
    1d3e:	9107      	str	r1, [sp, #28]

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1d40:	9808      	ldr	r0, [sp, #32]
    1d42:	9909      	ldr	r1, [sp, #36]	; 0x24
    1d44:	47a8      	blx	r5
    1d46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1d48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1d4a:	47b0      	blx	r6
    1d4c:	9a06      	ldr	r2, [sp, #24]
    1d4e:	9b07      	ldr	r3, [sp, #28]
    1d50:	4e92      	ldr	r6, [pc, #584]	; (1f9c <computeKalmanGains+0x720>)
    1d52:	47b0      	blx	r6
    1d54:	9034      	str	r0, [sp, #208]	; 0xd0
    1d56:	9135      	str	r1, [sp, #212]	; 0xd4
    1d58:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1d5a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1d5c:	4990      	ldr	r1, [pc, #576]	; (1fa0 <computeKalmanGains+0x724>)
    1d5e:	600a      	str	r2, [r1, #0]
    1d60:	604b      	str	r3, [r1, #4]
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1d62:	9808      	ldr	r0, [sp, #32]
    1d64:	9909      	ldr	r1, [sp, #36]	; 0x24
    1d66:	2280      	movs	r2, #128	; 0x80
    1d68:	0612      	lsls	r2, r2, #24
    1d6a:	4694      	mov	ip, r2
    1d6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1d6e:	9a04      	ldr	r2, [sp, #16]
    1d70:	4463      	add	r3, ip
    1d72:	932e      	str	r3, [sp, #184]	; 0xb8
    1d74:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1d76:	47a8      	blx	r5
    1d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d7c:	0006      	movs	r6, r0
    1d7e:	000f      	movs	r7, r1
    1d80:	9804      	ldr	r0, [sp, #16]
    1d82:	9916      	ldr	r1, [sp, #88]	; 0x58
    1d84:	47a8      	blx	r5
    1d86:	0002      	movs	r2, r0
    1d88:	000b      	movs	r3, r1
    1d8a:	0030      	movs	r0, r6
    1d8c:	0039      	movs	r1, r7
    1d8e:	47a0      	blx	r4
    1d90:	9a06      	ldr	r2, [sp, #24]
    1d92:	9b07      	ldr	r3, [sp, #28]
    1d94:	4e81      	ldr	r6, [pc, #516]	; (1f9c <computeKalmanGains+0x720>)
    1d96:	47b0      	blx	r6
    1d98:	900e      	str	r0, [sp, #56]	; 0x38
    1d9a:	910f      	str	r1, [sp, #60]	; 0x3c
    1d9c:	4980      	ldr	r1, [pc, #512]	; (1fa0 <computeKalmanGains+0x724>)
    1d9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1da0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1da2:	608a      	str	r2, [r1, #8]
    1da4:	60cb      	str	r3, [r1, #12]
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1da6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1da8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1daa:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1dac:	992b      	ldr	r1, [sp, #172]	; 0xac
    1dae:	47a8      	blx	r5
    1db0:	9a00      	ldr	r2, [sp, #0]
    1db2:	9b01      	ldr	r3, [sp, #4]
    1db4:	0006      	movs	r6, r0
    1db6:	000f      	movs	r7, r1
    1db8:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1dba:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1dbc:	47a8      	blx	r5
    1dbe:	0002      	movs	r2, r0
    1dc0:	000b      	movs	r3, r1
    1dc2:	0030      	movs	r0, r6
    1dc4:	0039      	movs	r1, r7
    1dc6:	4e74      	ldr	r6, [pc, #464]	; (1f98 <computeKalmanGains+0x71c>)
    1dc8:	47b0      	blx	r6
    1dca:	9a06      	ldr	r2, [sp, #24]
    1dcc:	9b07      	ldr	r3, [sp, #28]
    1dce:	4e73      	ldr	r6, [pc, #460]	; (1f9c <computeKalmanGains+0x720>)
    1dd0:	47b0      	blx	r6
    1dd2:	0002      	movs	r2, r0
    1dd4:	000b      	movs	r3, r1
    1dd6:	9139      	str	r1, [sp, #228]	; 0xe4
    1dd8:	4971      	ldr	r1, [pc, #452]	; (1fa0 <computeKalmanGains+0x724>)
    1dda:	9018      	str	r0, [sp, #96]	; 0x60
    1ddc:	610a      	str	r2, [r1, #16]
    1dde:	614b      	str	r3, [r1, #20]
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1de0:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1de2:	992b      	ldr	r1, [sp, #172]	; 0xac
    1de4:	9a04      	ldr	r2, [sp, #16]
    1de6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1de8:	47a8      	blx	r5
    1dea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1dec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1dee:	0006      	movs	r6, r0
    1df0:	000f      	movs	r7, r1
    1df2:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1df4:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1df6:	47a8      	blx	r5
    1df8:	0002      	movs	r2, r0
    1dfa:	000b      	movs	r3, r1
    1dfc:	0030      	movs	r0, r6
    1dfe:	0039      	movs	r1, r7
    1e00:	47a0      	blx	r4
    1e02:	9a06      	ldr	r2, [sp, #24]
    1e04:	9b07      	ldr	r3, [sp, #28]
    1e06:	4e65      	ldr	r6, [pc, #404]	; (1f9c <computeKalmanGains+0x720>)
    1e08:	47b0      	blx	r6
    1e0a:	9012      	str	r0, [sp, #72]	; 0x48
    1e0c:	9113      	str	r1, [sp, #76]	; 0x4c
    1e0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1e12:	4963      	ldr	r1, [pc, #396]	; (1fa0 <computeKalmanGains+0x724>)
    1e14:	618a      	str	r2, [r1, #24]
    1e16:	61cb      	str	r3, [r1, #28]
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1e18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1e1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1e1c:	9800      	ldr	r0, [sp, #0]
    1e1e:	9901      	ldr	r1, [sp, #4]
    1e20:	47a8      	blx	r5
    1e22:	9a02      	ldr	r2, [sp, #8]
    1e24:	9b03      	ldr	r3, [sp, #12]
    1e26:	0006      	movs	r6, r0
    1e28:	000f      	movs	r7, r1
    1e2a:	9800      	ldr	r0, [sp, #0]
    1e2c:	9901      	ldr	r1, [sp, #4]
    1e2e:	47a8      	blx	r5
    1e30:	0002      	movs	r2, r0
    1e32:	000b      	movs	r3, r1
    1e34:	0030      	movs	r0, r6
    1e36:	0039      	movs	r1, r7
    1e38:	4e57      	ldr	r6, [pc, #348]	; (1f98 <computeKalmanGains+0x71c>)
    1e3a:	47b0      	blx	r6
    1e3c:	9a06      	ldr	r2, [sp, #24]
    1e3e:	9b07      	ldr	r3, [sp, #28]
    1e40:	4e56      	ldr	r6, [pc, #344]	; (1f9c <computeKalmanGains+0x720>)
    1e42:	47b0      	blx	r6
    1e44:	9014      	str	r0, [sp, #80]	; 0x50
    1e46:	9115      	str	r1, [sp, #84]	; 0x54
    1e48:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1e4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1e4c:	4954      	ldr	r1, [pc, #336]	; (1fa0 <computeKalmanGains+0x724>)
    1e4e:	620a      	str	r2, [r1, #32]
    1e50:	624b      	str	r3, [r1, #36]	; 0x24
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1e52:	9800      	ldr	r0, [sp, #0]
    1e54:	9901      	ldr	r1, [sp, #4]
    1e56:	9a04      	ldr	r2, [sp, #16]
    1e58:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1e5a:	47a8      	blx	r5
    1e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1e5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e60:	0006      	movs	r6, r0
    1e62:	000f      	movs	r7, r1
    1e64:	9802      	ldr	r0, [sp, #8]
    1e66:	9903      	ldr	r1, [sp, #12]
    1e68:	47a8      	blx	r5
    1e6a:	0002      	movs	r2, r0
    1e6c:	000b      	movs	r3, r1
    1e6e:	0030      	movs	r0, r6
    1e70:	0039      	movs	r1, r7
    1e72:	47a0      	blx	r4
    1e74:	9a06      	ldr	r2, [sp, #24]
    1e76:	9b07      	ldr	r3, [sp, #28]
    1e78:	4e48      	ldr	r6, [pc, #288]	; (1f9c <computeKalmanGains+0x720>)
    1e7a:	47b0      	blx	r6
    1e7c:	9036      	str	r0, [sp, #216]	; 0xd8
    1e7e:	9137      	str	r1, [sp, #220]	; 0xdc
    1e80:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1e82:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    1e84:	4946      	ldr	r1, [pc, #280]	; (1fa0 <computeKalmanGains+0x724>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1e86:	4e44      	ldr	r6, [pc, #272]	; (1f98 <computeKalmanGains+0x71c>)
        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1e88:	628a      	str	r2, [r1, #40]	; 0x28
    1e8a:	62cb      	str	r3, [r1, #44]	; 0x2c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1e8c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1e8e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1e90:	2000      	movs	r0, #0
    1e92:	4944      	ldr	r1, [pc, #272]	; (1fa4 <computeKalmanGains+0x728>)
    1e94:	47b0      	blx	r6
    1e96:	0002      	movs	r2, r0
    1e98:	000b      	movs	r3, r1
    1e9a:	900c      	str	r0, [sp, #48]	; 0x30
    1e9c:	910d      	str	r1, [sp, #52]	; 0x34
    1e9e:	9808      	ldr	r0, [sp, #32]
    1ea0:	9909      	ldr	r1, [sp, #36]	; 0x24
    1ea2:	47a8      	blx	r5
    1ea4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1ea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1ea8:	0006      	movs	r6, r0
    1eaa:	000f      	movs	r7, r1
    1eac:	9800      	ldr	r0, [sp, #0]
    1eae:	9901      	ldr	r1, [sp, #4]
    1eb0:	47a8      	blx	r5
    1eb2:	0002      	movs	r2, r0
    1eb4:	000b      	movs	r3, r1
    1eb6:	0030      	movs	r0, r6
    1eb8:	0039      	movs	r1, r7
    1eba:	4e37      	ldr	r6, [pc, #220]	; (1f98 <computeKalmanGains+0x71c>)
    1ebc:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1ebe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1ec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1ec2:	9006      	str	r0, [sp, #24]
    1ec4:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1ec6:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1ec8:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1eca:	47a8      	blx	r5
    1ecc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1ece:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1ed0:	0006      	movs	r6, r0
    1ed2:	000f      	movs	r7, r1
    1ed4:	9810      	ldr	r0, [sp, #64]	; 0x40
    1ed6:	9911      	ldr	r1, [sp, #68]	; 0x44
    1ed8:	47a8      	blx	r5
    1eda:	0002      	movs	r2, r0
    1edc:	000b      	movs	r3, r1
    1ede:	0030      	movs	r0, r6
    1ee0:	0039      	movs	r1, r7
    1ee2:	4e2d      	ldr	r6, [pc, #180]	; (1f98 <computeKalmanGains+0x71c>)
    1ee4:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1ee6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1ee8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1eea:	900a      	str	r0, [sp, #40]	; 0x28
    1eec:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1eee:	9804      	ldr	r0, [sp, #16]
    1ef0:	9916      	ldr	r1, [sp, #88]	; 0x58
    1ef2:	47a8      	blx	r5
    1ef4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1ef6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1ef8:	0006      	movs	r6, r0
    1efa:	000f      	movs	r7, r1
    1efc:	9802      	ldr	r0, [sp, #8]
    1efe:	9903      	ldr	r1, [sp, #12]
    1f00:	47a8      	blx	r5
    1f02:	0002      	movs	r2, r0
    1f04:	000b      	movs	r3, r1
    1f06:	0030      	movs	r0, r6
    1f08:	0039      	movs	r1, r7
    1f0a:	4e23      	ldr	r6, [pc, #140]	; (1f98 <computeKalmanGains+0x71c>)
    1f0c:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1f0e:	2280      	movs	r2, #128	; 0x80
    1f10:	0612      	lsls	r2, r2, #24
    1f12:	4694      	mov	ip, r2
    1f14:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1f16:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1f18:	4463      	add	r3, ip
    1f1a:	932e      	str	r3, [sp, #184]	; 0xb8
    1f1c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1f1e:	900c      	str	r0, [sp, #48]	; 0x30
    1f20:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1f22:	9808      	ldr	r0, [sp, #32]
    1f24:	9909      	ldr	r1, [sp, #36]	; 0x24
    1f26:	47a8      	blx	r5
    1f28:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1f2a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1f2c:	47a0      	blx	r4
    1f2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1f30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1f32:	0006      	movs	r6, r0
    1f34:	000f      	movs	r7, r1
    1f36:	9800      	ldr	r0, [sp, #0]
    1f38:	9901      	ldr	r1, [sp, #4]
    1f3a:	47a8      	blx	r5
    1f3c:	0002      	movs	r2, r0
    1f3e:	000b      	movs	r3, r1
    1f40:	0030      	movs	r0, r6
    1f42:	0039      	movs	r1, r7
    1f44:	4e14      	ldr	r6, [pc, #80]	; (1f98 <computeKalmanGains+0x71c>)
    1f46:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1f48:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1f4a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1f4c:	9008      	str	r0, [sp, #32]
    1f4e:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1f50:	9826      	ldr	r0, [sp, #152]	; 0x98
    1f52:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1f54:	47a0      	blx	r4
    1f56:	4a0c      	ldr	r2, [pc, #48]	; (1f88 <computeKalmanGains+0x70c>)
    1f58:	0006      	movs	r6, r0
    1f5a:	000f      	movs	r7, r1
    1f5c:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1f5e:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1f60:	4b0a      	ldr	r3, [pc, #40]	; (1f8c <computeKalmanGains+0x710>)
    1f62:	47a8      	blx	r5
    1f64:	0002      	movs	r2, r0
    1f66:	000b      	movs	r3, r1
    1f68:	0030      	movs	r0, r6
    1f6a:	0039      	movs	r1, r7
    1f6c:	47a0      	blx	r4
    1f6e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1f70:	0006      	movs	r6, r0
    1f72:	000f      	movs	r7, r1
    1f74:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1f76:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1f78:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1f7a:	47a8      	blx	r5
    1f7c:	0002      	movs	r2, r0
    1f7e:	000b      	movs	r3, r1
    1f80:	0030      	movs	r0, r6
    1f82:	0039      	movs	r1, r7
    1f84:	47a0      	blx	r4
    1f86:	e00f      	b.n	1fa8 <computeKalmanGains+0x72c>
    1f88:	47ae147b 	.word	0x47ae147b
    1f8c:	3f747ae1 	.word	0x3f747ae1
    1f90:	eb1c432d 	.word	0xeb1c432d
    1f94:	3eea36e2 	.word	0x3eea36e2
    1f98:	000064d1 	.word	0x000064d1
    1f9c:	00005795 	.word	0x00005795
    1fa0:	20000348 	.word	0x20000348
    1fa4:	3ff00000 	.word	0x3ff00000
    1fa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1faa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1fac:	0006      	movs	r6, r0
    1fae:	000f      	movs	r7, r1
    1fb0:	9810      	ldr	r0, [sp, #64]	; 0x40
    1fb2:	9911      	ldr	r1, [sp, #68]	; 0x44
    1fb4:	47a8      	blx	r5
    1fb6:	0002      	movs	r2, r0
    1fb8:	000b      	movs	r3, r1
    1fba:	0030      	movs	r0, r6
    1fbc:	0039      	movs	r1, r7
    1fbe:	4e50      	ldr	r6, [pc, #320]	; (2100 <STACK_SIZE+0x100>)
    1fc0:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1fc2:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1fc4:	900e      	str	r0, [sp, #56]	; 0x38
    1fc6:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1fc8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1fca:	9804      	ldr	r0, [sp, #16]
    1fcc:	9916      	ldr	r1, [sp, #88]	; 0x58
    1fce:	47a8      	blx	r5
    1fd0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1fd2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1fd4:	47a0      	blx	r4
    1fd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1fd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1fda:	0006      	movs	r6, r0
    1fdc:	000f      	movs	r7, r1
    1fde:	9802      	ldr	r0, [sp, #8]
    1fe0:	9903      	ldr	r1, [sp, #12]
    1fe2:	47a8      	blx	r5
    1fe4:	4c46      	ldr	r4, [pc, #280]	; (2100 <STACK_SIZE+0x100>)
    1fe6:	0002      	movs	r2, r0
    1fe8:	000b      	movs	r3, r1
    1fea:	0030      	movs	r0, r6
    1fec:	0039      	movs	r1, r7
    1fee:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1ff0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1ff2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1ff4:	9004      	str	r0, [sp, #16]
    1ff6:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1ff8:	2000      	movs	r0, #0
    1ffa:	4942      	ldr	r1, [pc, #264]	; (2104 <STACK_SIZE+0x104>)
    1ffc:	47a0      	blx	r4
    1ffe:	0002      	movs	r2, r0
    2000:	000b      	movs	r3, r1
    2002:	9012      	str	r0, [sp, #72]	; 0x48
    2004:	9113      	str	r1, [sp, #76]	; 0x4c
    2006:	9800      	ldr	r0, [sp, #0]
    2008:	9901      	ldr	r1, [sp, #4]
    200a:	47a8      	blx	r5
    200c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    200e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2010:	0006      	movs	r6, r0
    2012:	000f      	movs	r7, r1
    2014:	9800      	ldr	r0, [sp, #0]
    2016:	9901      	ldr	r1, [sp, #4]
    2018:	47a8      	blx	r5
    201a:	0002      	movs	r2, r0
    201c:	000b      	movs	r3, r1
    201e:	0030      	movs	r0, r6
    2020:	0039      	movs	r1, r7
    2022:	47a0      	blx	r4
    2024:	9000      	str	r0, [sp, #0]
    2026:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    2028:	9a12      	ldr	r2, [sp, #72]	; 0x48
    202a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    202c:	9810      	ldr	r0, [sp, #64]	; 0x40
    202e:	9911      	ldr	r1, [sp, #68]	; 0x44
    2030:	47a8      	blx	r5
    2032:	9a14      	ldr	r2, [sp, #80]	; 0x50
    2034:	9b15      	ldr	r3, [sp, #84]	; 0x54
    2036:	0006      	movs	r6, r0
    2038:	000f      	movs	r7, r1
    203a:	9810      	ldr	r0, [sp, #64]	; 0x40
    203c:	9911      	ldr	r1, [sp, #68]	; 0x44
    203e:	47a8      	blx	r5
    2040:	0002      	movs	r2, r0
    2042:	000b      	movs	r3, r1
    2044:	0030      	movs	r0, r6
    2046:	0039      	movs	r1, r7
    2048:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    204a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    204c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    204e:	9010      	str	r0, [sp, #64]	; 0x40
    2050:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    2052:	9802      	ldr	r0, [sp, #8]
    2054:	9903      	ldr	r1, [sp, #12]
    2056:	47a8      	blx	r5
    2058:	9a14      	ldr	r2, [sp, #80]	; 0x50
    205a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    205c:	0006      	movs	r6, r0
    205e:	000f      	movs	r7, r1
    2060:	9802      	ldr	r0, [sp, #8]
    2062:	9903      	ldr	r1, [sp, #12]
    2064:	47a8      	blx	r5
    2066:	000b      	movs	r3, r1
    2068:	0002      	movs	r2, r0
    206a:	0039      	movs	r1, r7
    206c:	0030      	movs	r0, r6
    206e:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    2070:	2400      	movs	r4, #0
    2072:	9b38      	ldr	r3, [sp, #224]	; 0xe0
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    2074:	9002      	str	r0, [sp, #8]
    2076:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    2078:	3301      	adds	r3, #1
    207a:	9338      	str	r3, [sp, #224]	; 0xe0
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    207c:	4b22      	ldr	r3, [pc, #136]	; (2108 <STACK_SIZE+0x108>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    207e:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    2080:	9326      	str	r3, [sp, #152]	; 0x98
    2082:	4b1f      	ldr	r3, [pc, #124]	; (2100 <STACK_SIZE+0x100>)
    2084:	9328      	str	r3, [sp, #160]	; 0xa0
    2086:	ab40      	add	r3, sp, #256	; 0x100
    2088:	18e5      	adds	r5, r4, r3

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    208a:	2300      	movs	r3, #0
    208c:	9516      	str	r5, [sp, #88]	; 0x58
    208e:	9312      	str	r3, [sp, #72]	; 0x48
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    2090:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2092:	9a26      	ldr	r2, [sp, #152]	; 0x98
    2094:	18e3      	adds	r3, r4, r3
    2096:	189b      	adds	r3, r3, r2
    2098:	681a      	ldr	r2, [r3, #0]
    209a:	685b      	ldr	r3, [r3, #4]
    209c:	9218      	str	r2, [sp, #96]	; 0x60
    209e:	9319      	str	r3, [sp, #100]	; 0x64
    20a0:	9818      	ldr	r0, [sp, #96]	; 0x60
    20a2:	9919      	ldr	r1, [sp, #100]	; 0x64
    20a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    20a6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    20a8:	681e      	ldr	r6, [r3, #0]
    20aa:	685f      	ldr	r7, [r3, #4]
    20ac:	0032      	movs	r2, r6
    20ae:	003b      	movs	r3, r7
    20b0:	47a8      	blx	r5
    20b2:	0032      	movs	r2, r6
    20b4:	003b      	movs	r3, r7
    20b6:	4d15      	ldr	r5, [pc, #84]	; (210c <STACK_SIZE+0x10c>)
    20b8:	47a8      	blx	r5
    20ba:	4b15      	ldr	r3, [pc, #84]	; (2110 <STACK_SIZE+0x110>)
    20bc:	4a15      	ldr	r2, [pc, #84]	; (2114 <STACK_SIZE+0x114>)
    20be:	4e16      	ldr	r6, [pc, #88]	; (2118 <STACK_SIZE+0x118>)
    20c0:	47b0      	blx	r6
                    notdone++;
    20c2:	1e43      	subs	r3, r0, #1
    20c4:	4198      	sbcs	r0, r3
    20c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    20c8:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    20ca:	181b      	adds	r3, r3, r0
    20cc:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    20ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
    20d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    20d2:	c10c      	stmia	r1!, {r2, r3}
    20d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    20d6:	9116      	str	r1, [sp, #88]	; 0x58
    20d8:	3308      	adds	r3, #8
    20da:	9312      	str	r3, [sp, #72]	; 0x48
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    20dc:	2b10      	cmp	r3, #16
    20de:	d1d7      	bne.n	2090 <STACK_SIZE+0x90>
    20e0:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    20e2:	2c30      	cmp	r4, #48	; 0x30
    20e4:	d1cf      	bne.n	2086 <STACK_SIZE+0x86>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    20e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    20e8:	2b00      	cmp	r3, #0
    20ea:	d001      	beq.n	20f0 <STACK_SIZE+0xf0>
    20ec:	f7ff fc2c 	bl	1948 <computeKalmanGains+0xcc>
    20f0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    20f2:	2b63      	cmp	r3, #99	; 0x63
    20f4:	dc01      	bgt.n	20fa <STACK_SIZE+0xfa>
    20f6:	f7ff fc27 	bl	1948 <computeKalmanGains+0xcc>
            continue;
        else
            break;
    }
}
    20fa:	b04d      	add	sp, #308	; 0x134
    20fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20fe:	46c0      	nop			; (mov r8, r8)
    2100:	000064d1 	.word	0x000064d1
    2104:	3ff00000 	.word	0x3ff00000
    2108:	20000348 	.word	0x20000348
    210c:	00005795 	.word	0x00005795
    2110:	3ee4f8b5 	.word	0x3ee4f8b5
    2114:	88e368f1 	.word	0x88e368f1
    2118:	00004e15 	.word	0x00004e15

0000211c <computeKalmanBaroOnlyGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    baro_phi[0][1]    = dt;
    211c:	4bd7      	ldr	r3, [pc, #860]	; (247c <computeKalmanBaroOnlyGains+0x360>)
    211e:	48d8      	ldr	r0, [pc, #864]	; (2480 <computeKalmanBaroOnlyGains+0x364>)
    baro_phi[1][2]    = dt;
    2120:	001a      	movs	r2, r3
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    baro_phi[0][1]    = dt;
    2122:	49d8      	ldr	r1, [pc, #864]	; (2484 <computeKalmanBaroOnlyGains+0x368>)
    baro_phi[1][2]    = dt;
    2124:	3288      	adds	r2, #136	; 0x88
        else
            break;
    }
}

void computeKalmanBaroOnlyGains() {
    2126:	b5f0      	push	{r4, r5, r6, r7, lr}

    /*
     Fill in state transition matrix and its transpose
    */
    baro_phi[0][1]    = dt;
    baro_phi[1][2]    = dt;
    2128:	6010      	str	r0, [r2, #0]
    212a:	6051      	str	r1, [r2, #4]
    baro_phi[0][2]    = dt*dt/2.0;
    212c:	2200      	movs	r2, #0
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    baro_phi[0][1]    = dt;
    212e:	6698      	str	r0, [r3, #104]	; 0x68
    2130:	66d9      	str	r1, [r3, #108]	; 0x6c
    baro_phi[1][2]    = dt;
    baro_phi[0][2]    = dt*dt/2.0;
    2132:	48d5      	ldr	r0, [pc, #852]	; (2488 <computeKalmanBaroOnlyGains+0x36c>)
    2134:	49d5      	ldr	r1, [pc, #852]	; (248c <computeKalmanBaroOnlyGains+0x370>)
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
        lastkgain[i] = .001;
    2136:	4cd6      	ldr	r4, [pc, #856]	; (2490 <computeKalmanBaroOnlyGains+0x374>)
    /*
     Fill in state transition matrix and its transpose
    */
    baro_phi[0][1]    = dt;
    baro_phi[1][2]    = dt;
    baro_phi[0][2]    = dt*dt/2.0;
    2138:	6718      	str	r0, [r3, #112]	; 0x70
    213a:	6759      	str	r1, [r3, #116]	; 0x74
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
        lastkgain[i] = .001;
    213c:	4dd5      	ldr	r5, [pc, #852]	; (2494 <computeKalmanBaroOnlyGains+0x378>)
        baro_kgain[i] = 1.0;
    213e:	4fd6      	ldr	r7, [pc, #856]	; (2498 <computeKalmanBaroOnlyGains+0x37c>)
        else
            break;
    }
}

void computeKalmanBaroOnlyGains() {
    2140:	b0c5      	sub	sp, #276	; 0x114
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
        lastkgain[i] = .001;
        baro_kgain[i] = 1.0;
    2142:	2000      	movs	r0, #0
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
        lastkgain[i] = .001;
    2144:	a93e      	add	r1, sp, #248	; 0xf8
    2146:	1856      	adds	r6, r2, r1
        baro_kgain[i] = 1.0;
    2148:	49d4      	ldr	r1, [pc, #848]	; (249c <computeKalmanBaroOnlyGains+0x380>)
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
        lastkgain[i] = .001;
    214a:	6034      	str	r4, [r6, #0]
    214c:	6075      	str	r5, [r6, #4]
        baro_kgain[i] = 1.0;
    214e:	19d6      	adds	r6, r2, r7
    2150:	3208      	adds	r2, #8
    2152:	6030      	str	r0, [r6, #0]
    2154:	6071      	str	r1, [r6, #4]
    baro_phi[0][2]    = dt*dt/2.0;
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++) {
    2156:	2a18      	cmp	r2, #24
    2158:	d1f3      	bne.n	2142 <computeKalmanBaroOnlyGains+0x26>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    215a:	6819      	ldr	r1, [r3, #0]
    215c:	685a      	ldr	r2, [r3, #4]
    215e:	9108      	str	r1, [sp, #32]
    2160:	9209      	str	r2, [sp, #36]	; 0x24
    2162:	6899      	ldr	r1, [r3, #8]
    2164:	68da      	ldr	r2, [r3, #12]
    2166:	910a      	str	r1, [sp, #40]	; 0x28
    2168:	920b      	str	r2, [sp, #44]	; 0x2c
    216a:	6919      	ldr	r1, [r3, #16]
    216c:	695a      	ldr	r2, [r3, #20]
    216e:	910c      	str	r1, [sp, #48]	; 0x30
    2170:	920d      	str	r2, [sp, #52]	; 0x34
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    2172:	6999      	ldr	r1, [r3, #24]
    2174:	69da      	ldr	r2, [r3, #28]
    2176:	910e      	str	r1, [sp, #56]	; 0x38
    2178:	920f      	str	r2, [sp, #60]	; 0x3c
    217a:	6a19      	ldr	r1, [r3, #32]
    217c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    217e:	9110      	str	r1, [sp, #64]	; 0x40
    2180:	9211      	str	r2, [sp, #68]	; 0x44
    2182:	6a99      	ldr	r1, [r3, #40]	; 0x28
    2184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2186:	9112      	str	r1, [sp, #72]	; 0x48
    2188:	9213      	str	r2, [sp, #76]	; 0x4c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    218a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    218c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    218e:	9114      	str	r1, [sp, #80]	; 0x50
    2190:	9215      	str	r2, [sp, #84]	; 0x54
    2192:	6b99      	ldr	r1, [r3, #56]	; 0x38
    2194:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    2196:	9116      	str	r1, [sp, #88]	; 0x58
    2198:	9217      	str	r2, [sp, #92]	; 0x5c
    219a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    219c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    219e:	9118      	str	r1, [sp, #96]	; 0x60
    21a0:	9219      	str	r2, [sp, #100]	; 0x64
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[0][0] = pestp[0][0] + model_variance;
    21a2:	6c99      	ldr	r1, [r3, #72]	; 0x48
    21a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);
    21a6:	6d5c      	ldr	r4, [r3, #84]	; 0x54
    21a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    21aa:	933c      	str	r3, [sp, #240]	; 0xf0
    21ac:	943d      	str	r4, [sp, #244]	; 0xf4
    21ae:	2300      	movs	r3, #0
    21b0:	4cbb      	ldr	r4, [pc, #748]	; (24a0 <computeKalmanBaroOnlyGains+0x384>)
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[0][0] = pestp[0][0] + model_variance;
    21b2:	913a      	str	r1, [sp, #232]	; 0xe8
    21b4:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);
    21b6:	9304      	str	r3, [sp, #16]
    21b8:	9405      	str	r4, [sp, #20]
    21ba:	2300      	movs	r3, #0
    21bc:	2400      	movs	r4, #0
    21be:	9302      	str	r3, [sp, #8]
    21c0:	9403      	str	r4, [sp, #12]
    21c2:	9300      	str	r3, [sp, #0]
    21c4:	9401      	str	r4, [sp, #4]
    21c6:	9306      	str	r3, [sp, #24]
    21c8:	9407      	str	r4, [sp, #28]
    21ca:	2300      	movs	r3, #0
    21cc:	4cb4      	ldr	r4, [pc, #720]	; (24a0 <computeKalmanBaroOnlyGains+0x384>)
    21ce:	9322      	str	r3, [sp, #136]	; 0x88
    21d0:	9423      	str	r4, [sp, #140]	; 0x8c
    21d2:	2300      	movs	r3, #0
    21d4:	2400      	movs	r4, #0
    21d6:	9320      	str	r3, [sp, #128]	; 0x80
    21d8:	9421      	str	r4, [sp, #132]	; 0x84
    21da:	931e      	str	r3, [sp, #120]	; 0x78
    21dc:	941f      	str	r4, [sp, #124]	; 0x7c
    21de:	931c      	str	r3, [sp, #112]	; 0x70
    21e0:	941d      	str	r4, [sp, #116]	; 0x74
    21e2:	2480      	movs	r4, #128	; 0x80
    21e4:	2300      	movs	r3, #0
    21e6:	05e4      	lsls	r4, r4, #23
    21e8:	931a      	str	r3, [sp, #104]	; 0x68
    21ea:	941b      	str	r4, [sp, #108]	; 0x6c
    21ec:	2300      	movs	r3, #0
    21ee:	9327      	str	r3, [sp, #156]	; 0x9c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    21f0:	4cac      	ldr	r4, [pc, #688]	; (24a4 <computeKalmanBaroOnlyGains+0x388>)
    21f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    21f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    21f6:	9808      	ldr	r0, [sp, #32]
    21f8:	9909      	ldr	r1, [sp, #36]	; 0x24
    21fa:	47a0      	blx	r4
    21fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
    21fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
    2200:	0006      	movs	r6, r0
    2202:	000f      	movs	r7, r1
    2204:	980a      	ldr	r0, [sp, #40]	; 0x28
    2206:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2208:	47a0      	blx	r4
    220a:	4da7      	ldr	r5, [pc, #668]	; (24a8 <computeKalmanBaroOnlyGains+0x38c>)
    220c:	0002      	movs	r2, r0
    220e:	000b      	movs	r3, r1
    2210:	0030      	movs	r0, r6
    2212:	0039      	movs	r1, r7
    2214:	47a8      	blx	r5
    2216:	9a00      	ldr	r2, [sp, #0]
    2218:	9b01      	ldr	r3, [sp, #4]
    221a:	0006      	movs	r6, r0
    221c:	000f      	movs	r7, r1
    221e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2220:	990d      	ldr	r1, [sp, #52]	; 0x34
    2222:	47a0      	blx	r4
    2224:	0002      	movs	r2, r0
    2226:	000b      	movs	r3, r1
    2228:	0030      	movs	r0, r6
    222a:	0039      	movs	r1, r7
    222c:	47a8      	blx	r5
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    222e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    2230:	9b1d      	ldr	r3, [sp, #116]	; 0x74

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    2232:	9024      	str	r0, [sp, #144]	; 0x90
    2234:	9125      	str	r1, [sp, #148]	; 0x94
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    2236:	9808      	ldr	r0, [sp, #32]
    2238:	9909      	ldr	r1, [sp, #36]	; 0x24
    223a:	47a0      	blx	r4
    223c:	9a22      	ldr	r2, [sp, #136]	; 0x88
    223e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    2240:	0006      	movs	r6, r0
    2242:	000f      	movs	r7, r1
    2244:	980a      	ldr	r0, [sp, #40]	; 0x28
    2246:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2248:	47a0      	blx	r4
    224a:	0002      	movs	r2, r0
    224c:	000b      	movs	r3, r1
    224e:	0030      	movs	r0, r6
    2250:	0039      	movs	r1, r7
    2252:	47a8      	blx	r5
    2254:	9a02      	ldr	r2, [sp, #8]
    2256:	9b03      	ldr	r3, [sp, #12]
    2258:	0006      	movs	r6, r0
    225a:	000f      	movs	r7, r1
    225c:	980c      	ldr	r0, [sp, #48]	; 0x30
    225e:	990d      	ldr	r1, [sp, #52]	; 0x34
    2260:	47a0      	blx	r4
    2262:	0002      	movs	r2, r0
    2264:	000b      	movs	r3, r1
    2266:	0030      	movs	r0, r6
    2268:	0039      	movs	r1, r7
    226a:	47a8      	blx	r5
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    226c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    226e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    2270:	9028      	str	r0, [sp, #160]	; 0xa0
    2272:	9129      	str	r1, [sp, #164]	; 0xa4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    2274:	9808      	ldr	r0, [sp, #32]
    2276:	9909      	ldr	r1, [sp, #36]	; 0x24
    2278:	47a0      	blx	r4
    227a:	9a06      	ldr	r2, [sp, #24]
    227c:	9b07      	ldr	r3, [sp, #28]
    227e:	0006      	movs	r6, r0
    2280:	000f      	movs	r7, r1
    2282:	980a      	ldr	r0, [sp, #40]	; 0x28
    2284:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2286:	47a0      	blx	r4
    2288:	0002      	movs	r2, r0
    228a:	000b      	movs	r3, r1
    228c:	0030      	movs	r0, r6
    228e:	0039      	movs	r1, r7
    2290:	47a8      	blx	r5
    2292:	9a04      	ldr	r2, [sp, #16]
    2294:	9b05      	ldr	r3, [sp, #20]
    2296:	0006      	movs	r6, r0
    2298:	000f      	movs	r7, r1
    229a:	980c      	ldr	r0, [sp, #48]	; 0x30
    229c:	990d      	ldr	r1, [sp, #52]	; 0x34
    229e:	47a0      	blx	r4
    22a0:	0002      	movs	r2, r0
    22a2:	000b      	movs	r3, r1
    22a4:	0030      	movs	r0, r6
    22a6:	0039      	movs	r1, r7
    22a8:	47a8      	blx	r5
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    22aa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    22ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    22ae:	902a      	str	r0, [sp, #168]	; 0xa8
    22b0:	912b      	str	r1, [sp, #172]	; 0xac
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    22b2:	980e      	ldr	r0, [sp, #56]	; 0x38
    22b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    22b6:	47a0      	blx	r4
    22b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
    22ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
    22bc:	0006      	movs	r6, r0
    22be:	000f      	movs	r7, r1
    22c0:	9810      	ldr	r0, [sp, #64]	; 0x40
    22c2:	9911      	ldr	r1, [sp, #68]	; 0x44
    22c4:	47a0      	blx	r4
    22c6:	0002      	movs	r2, r0
    22c8:	000b      	movs	r3, r1
    22ca:	0030      	movs	r0, r6
    22cc:	0039      	movs	r1, r7
    22ce:	47a8      	blx	r5
    22d0:	9a00      	ldr	r2, [sp, #0]
    22d2:	9b01      	ldr	r3, [sp, #4]
    22d4:	0006      	movs	r6, r0
    22d6:	000f      	movs	r7, r1
    22d8:	9812      	ldr	r0, [sp, #72]	; 0x48
    22da:	9913      	ldr	r1, [sp, #76]	; 0x4c
    22dc:	47a0      	blx	r4
    22de:	0002      	movs	r2, r0
    22e0:	000b      	movs	r3, r1
    22e2:	0030      	movs	r0, r6
    22e4:	0039      	movs	r1, r7
    22e6:	47a8      	blx	r5
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    22e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    22ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    22ec:	9034      	str	r0, [sp, #208]	; 0xd0
    22ee:	9135      	str	r1, [sp, #212]	; 0xd4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    22f0:	980e      	ldr	r0, [sp, #56]	; 0x38
    22f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    22f4:	47a0      	blx	r4
    22f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
    22f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    22fa:	0006      	movs	r6, r0
    22fc:	000f      	movs	r7, r1
    22fe:	9810      	ldr	r0, [sp, #64]	; 0x40
    2300:	9911      	ldr	r1, [sp, #68]	; 0x44
    2302:	47a0      	blx	r4
    2304:	0002      	movs	r2, r0
    2306:	000b      	movs	r3, r1
    2308:	0030      	movs	r0, r6
    230a:	0039      	movs	r1, r7
    230c:	47a8      	blx	r5
    230e:	9a02      	ldr	r2, [sp, #8]
    2310:	9b03      	ldr	r3, [sp, #12]
    2312:	0006      	movs	r6, r0
    2314:	000f      	movs	r7, r1
    2316:	9812      	ldr	r0, [sp, #72]	; 0x48
    2318:	9913      	ldr	r1, [sp, #76]	; 0x4c
    231a:	47a0      	blx	r4
    231c:	0002      	movs	r2, r0
    231e:	000b      	movs	r3, r1
    2320:	0030      	movs	r0, r6
    2322:	0039      	movs	r1, r7
    2324:	47a8      	blx	r5
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    2326:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    2328:	9b1f      	ldr	r3, [sp, #124]	; 0x7c

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    232a:	902c      	str	r0, [sp, #176]	; 0xb0
    232c:	912d      	str	r1, [sp, #180]	; 0xb4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    232e:	980e      	ldr	r0, [sp, #56]	; 0x38
    2330:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2332:	47a0      	blx	r4
    2334:	9a06      	ldr	r2, [sp, #24]
    2336:	9b07      	ldr	r3, [sp, #28]
    2338:	0006      	movs	r6, r0
    233a:	000f      	movs	r7, r1
    233c:	9810      	ldr	r0, [sp, #64]	; 0x40
    233e:	9911      	ldr	r1, [sp, #68]	; 0x44
    2340:	47a0      	blx	r4
    2342:	0002      	movs	r2, r0
    2344:	000b      	movs	r3, r1
    2346:	0030      	movs	r0, r6
    2348:	0039      	movs	r1, r7
    234a:	47a8      	blx	r5
    234c:	9a04      	ldr	r2, [sp, #16]
    234e:	9b05      	ldr	r3, [sp, #20]
    2350:	0006      	movs	r6, r0
    2352:	000f      	movs	r7, r1
    2354:	9812      	ldr	r0, [sp, #72]	; 0x48
    2356:	9913      	ldr	r1, [sp, #76]	; 0x4c
    2358:	47a0      	blx	r4
    235a:	0002      	movs	r2, r0
    235c:	000b      	movs	r3, r1
    235e:	0030      	movs	r0, r6
    2360:	0039      	movs	r1, r7
    2362:	47a8      	blx	r5
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    2364:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    2366:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    2368:	902e      	str	r0, [sp, #184]	; 0xb8
    236a:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    236c:	9814      	ldr	r0, [sp, #80]	; 0x50
    236e:	9915      	ldr	r1, [sp, #84]	; 0x54
    2370:	47a0      	blx	r4
    2372:	9a20      	ldr	r2, [sp, #128]	; 0x80
    2374:	9b21      	ldr	r3, [sp, #132]	; 0x84
    2376:	0006      	movs	r6, r0
    2378:	000f      	movs	r7, r1
    237a:	9816      	ldr	r0, [sp, #88]	; 0x58
    237c:	9917      	ldr	r1, [sp, #92]	; 0x5c
    237e:	47a0      	blx	r4
    2380:	0002      	movs	r2, r0
    2382:	000b      	movs	r3, r1
    2384:	0030      	movs	r0, r6
    2386:	0039      	movs	r1, r7
    2388:	47a8      	blx	r5
    238a:	9a00      	ldr	r2, [sp, #0]
    238c:	9b01      	ldr	r3, [sp, #4]
    238e:	0006      	movs	r6, r0
    2390:	000f      	movs	r7, r1
    2392:	9818      	ldr	r0, [sp, #96]	; 0x60
    2394:	9919      	ldr	r1, [sp, #100]	; 0x64
    2396:	47a0      	blx	r4
    2398:	0002      	movs	r2, r0
    239a:	000b      	movs	r3, r1
    239c:	0030      	movs	r0, r6
    239e:	0039      	movs	r1, r7
    23a0:	47a8      	blx	r5
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    23a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    23a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    23a6:	9000      	str	r0, [sp, #0]
    23a8:	9101      	str	r1, [sp, #4]
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    23aa:	9814      	ldr	r0, [sp, #80]	; 0x50
    23ac:	9915      	ldr	r1, [sp, #84]	; 0x54
    23ae:	47a0      	blx	r4
    23b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
    23b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    23b4:	0006      	movs	r6, r0
    23b6:	000f      	movs	r7, r1
    23b8:	9816      	ldr	r0, [sp, #88]	; 0x58
    23ba:	9917      	ldr	r1, [sp, #92]	; 0x5c
    23bc:	47a0      	blx	r4
    23be:	0002      	movs	r2, r0
    23c0:	000b      	movs	r3, r1
    23c2:	0030      	movs	r0, r6
    23c4:	0039      	movs	r1, r7
    23c6:	47a8      	blx	r5
    23c8:	9a02      	ldr	r2, [sp, #8]
    23ca:	9b03      	ldr	r3, [sp, #12]
    23cc:	0006      	movs	r6, r0
    23ce:	000f      	movs	r7, r1
    23d0:	9818      	ldr	r0, [sp, #96]	; 0x60
    23d2:	9919      	ldr	r1, [sp, #100]	; 0x64
    23d4:	47a0      	blx	r4
    23d6:	0002      	movs	r2, r0
    23d8:	000b      	movs	r3, r1
    23da:	0030      	movs	r0, r6
    23dc:	0039      	movs	r1, r7
    23de:	47a8      	blx	r5
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    23e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    23e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    23e4:	9030      	str	r0, [sp, #192]	; 0xc0
    23e6:	9131      	str	r1, [sp, #196]	; 0xc4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    23e8:	9814      	ldr	r0, [sp, #80]	; 0x50
    23ea:	9915      	ldr	r1, [sp, #84]	; 0x54
    23ec:	47a0      	blx	r4
    23ee:	9a06      	ldr	r2, [sp, #24]
    23f0:	9b07      	ldr	r3, [sp, #28]
    23f2:	0006      	movs	r6, r0
    23f4:	000f      	movs	r7, r1
    23f6:	9816      	ldr	r0, [sp, #88]	; 0x58
    23f8:	9917      	ldr	r1, [sp, #92]	; 0x5c
    23fa:	47a0      	blx	r4
    23fc:	0002      	movs	r2, r0
    23fe:	000b      	movs	r3, r1
    2400:	0030      	movs	r0, r6
    2402:	0039      	movs	r1, r7
    2404:	47a8      	blx	r5
    2406:	9a04      	ldr	r2, [sp, #16]
    2408:	9b05      	ldr	r3, [sp, #20]
    240a:	0006      	movs	r6, r0
    240c:	000f      	movs	r7, r1
    240e:	9818      	ldr	r0, [sp, #96]	; 0x60
    2410:	9919      	ldr	r1, [sp, #100]	; 0x64
    2412:	47a0      	blx	r4
    2414:	0002      	movs	r2, r0
    2416:	000b      	movs	r3, r1
    2418:	0030      	movs	r0, r6
    241a:	0039      	movs	r1, r7
    241c:	47a8      	blx	r5

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    241e:	2200      	movs	r2, #0
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    2420:	9032      	str	r0, [sp, #200]	; 0xc8
    2422:	9133      	str	r1, [sp, #204]	; 0xcc

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    2424:	9824      	ldr	r0, [sp, #144]	; 0x90
    2426:	9925      	ldr	r1, [sp, #148]	; 0x94
    2428:	2300      	movs	r3, #0
    242a:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    242c:	4a14      	ldr	r2, [pc, #80]	; (2480 <computeKalmanBaroOnlyGains+0x364>)
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    242e:	9036      	str	r0, [sp, #216]	; 0xd8
    2430:	9137      	str	r1, [sp, #220]	; 0xdc
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    2432:	982c      	ldr	r0, [sp, #176]	; 0xb0
    2434:	992d      	ldr	r1, [sp, #180]	; 0xb4
    2436:	4b13      	ldr	r3, [pc, #76]	; (2484 <computeKalmanBaroOnlyGains+0x368>)
    2438:	47a0      	blx	r4
    243a:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    243c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    243e:	47a8      	blx	r5
    2440:	4a11      	ldr	r2, [pc, #68]	; (2488 <computeKalmanBaroOnlyGains+0x36c>)
    2442:	0006      	movs	r6, r0
    2444:	000f      	movs	r7, r1
    2446:	982e      	ldr	r0, [sp, #184]	; 0xb8
    2448:	992f      	ldr	r1, [sp, #188]	; 0xbc
    244a:	4b10      	ldr	r3, [pc, #64]	; (248c <computeKalmanBaroOnlyGains+0x370>)
    244c:	47a0      	blx	r4
    244e:	0002      	movs	r2, r0
    2450:	000b      	movs	r3, r1
    2452:	0030      	movs	r0, r6
    2454:	0039      	movs	r1, r7
    2456:	47a8      	blx	r5
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    2458:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    245a:	9002      	str	r0, [sp, #8]
    245c:	9103      	str	r1, [sp, #12]
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    245e:	9834      	ldr	r0, [sp, #208]	; 0xd0
    2460:	9935      	ldr	r1, [sp, #212]	; 0xd4
    2462:	2300      	movs	r3, #0
    2464:	47a0      	blx	r4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    2466:	4a06      	ldr	r2, [pc, #24]	; (2480 <computeKalmanBaroOnlyGains+0x364>)

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    2468:	9034      	str	r0, [sp, #208]	; 0xd0
    246a:	9135      	str	r1, [sp, #212]	; 0xd4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    246c:	9830      	ldr	r0, [sp, #192]	; 0xc0
    246e:	9931      	ldr	r1, [sp, #196]	; 0xc4
    2470:	4b04      	ldr	r3, [pc, #16]	; (2484 <computeKalmanBaroOnlyGains+0x368>)
    2472:	47a0      	blx	r4
    2474:	9a00      	ldr	r2, [sp, #0]
    2476:	9b01      	ldr	r3, [sp, #4]
    2478:	47a8      	blx	r5
    247a:	e017      	b.n	24ac <computeKalmanBaroOnlyGains+0x390>
    247c:	20000010 	.word	0x20000010
    2480:	47ae147b 	.word	0x47ae147b
    2484:	3f747ae1 	.word	0x3f747ae1
    2488:	eb1c432d 	.word	0xeb1c432d
    248c:	3eea36e2 	.word	0x3eea36e2
    2490:	d2f1a9fc 	.word	0xd2f1a9fc
    2494:	3f50624d 	.word	0x3f50624d
    2498:	20000310 	.word	0x20000310
    249c:	3ff00000 	.word	0x3ff00000
    24a0:	40220000 	.word	0x40220000
    24a4:	00005fdd 	.word	0x00005fdd
    24a8:	0000513d 	.word	0x0000513d
    24ac:	4ad6      	ldr	r2, [pc, #856]	; (2808 <computeKalmanBaroOnlyGains+0x6ec>)
    24ae:	0006      	movs	r6, r0
    24b0:	000f      	movs	r7, r1
    24b2:	9832      	ldr	r0, [sp, #200]	; 0xc8
    24b4:	9933      	ldr	r1, [sp, #204]	; 0xcc
    24b6:	4bd5      	ldr	r3, [pc, #852]	; (280c <computeKalmanBaroOnlyGains+0x6f0>)
    24b8:	47a0      	blx	r4
    24ba:	0002      	movs	r2, r0
    24bc:	000b      	movs	r3, r1
    24be:	0030      	movs	r0, r6
    24c0:	0039      	movs	r1, r7
    24c2:	47a8      	blx	r5
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    24c4:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    24c6:	9004      	str	r0, [sp, #16]
    24c8:	9105      	str	r1, [sp, #20]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    24ca:	9800      	ldr	r0, [sp, #0]
    24cc:	9901      	ldr	r1, [sp, #4]
    24ce:	2300      	movs	r3, #0
    24d0:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[0][0] = pestp[0][0] + model_variance;
    24d2:	4acf      	ldr	r2, [pc, #828]	; (2810 <computeKalmanBaroOnlyGains+0x6f4>)
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    24d4:	9038      	str	r0, [sp, #224]	; 0xe0
    24d6:	9139      	str	r1, [sp, #228]	; 0xe4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[0][0] = pestp[0][0] + model_variance;
    24d8:	9828      	ldr	r0, [sp, #160]	; 0xa0
    24da:	9929      	ldr	r1, [sp, #164]	; 0xa4
    24dc:	4bcd      	ldr	r3, [pc, #820]	; (2814 <computeKalmanBaroOnlyGains+0x6f8>)
    24de:	47a0      	blx	r4
    24e0:	9a24      	ldr	r2, [sp, #144]	; 0x90
    24e2:	9b25      	ldr	r3, [sp, #148]	; 0x94
    24e4:	47a8      	blx	r5
    24e6:	4ac8      	ldr	r2, [pc, #800]	; (2808 <computeKalmanBaroOnlyGains+0x6ec>)
    24e8:	0006      	movs	r6, r0
    24ea:	000f      	movs	r7, r1
    24ec:	982a      	ldr	r0, [sp, #168]	; 0xa8
    24ee:	992b      	ldr	r1, [sp, #172]	; 0xac
    24f0:	4bc6      	ldr	r3, [pc, #792]	; (280c <computeKalmanBaroOnlyGains+0x6f0>)
    24f2:	47a0      	blx	r4
    24f4:	0002      	movs	r2, r0
    24f6:	000b      	movs	r3, r1
    24f8:	0030      	movs	r0, r6
    24fa:	0039      	movs	r1, r7
    24fc:	47a8      	blx	r5
    24fe:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    2500:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    2502:	47a8      	blx	r5
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);
    2504:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    2506:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[0][0] = pestp[0][0] + model_variance;
    2508:	9000      	str	r0, [sp, #0]
    250a:	9101      	str	r1, [sp, #4]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);
    250c:	47a8      	blx	r5

        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
                         phi[0][1] * pestp[1][0] +
                         phi[0][2] * pestp[2][0] )/ det;
    250e:	9a00      	ldr	r2, [sp, #0]
    2510:	9b01      	ldr	r3, [sp, #4]

        pestp[0][0] = pestp[0][0] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);
    2512:	901a      	str	r0, [sp, #104]	; 0x68
    2514:	911b      	str	r1, [sp, #108]	; 0x6c

        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
                         phi[0][1] * pestp[1][0] +
                         phi[0][2] * pestp[2][0] )/ det;
    2516:	9808      	ldr	r0, [sp, #32]
    2518:	9909      	ldr	r1, [sp, #36]	; 0x24
    251a:	47a0      	blx	r4
    251c:	9a02      	ldr	r2, [sp, #8]
    251e:	9b03      	ldr	r3, [sp, #12]
    2520:	0006      	movs	r6, r0
    2522:	000f      	movs	r7, r1
    2524:	980a      	ldr	r0, [sp, #40]	; 0x28
    2526:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2528:	47a0      	blx	r4
    252a:	0002      	movs	r2, r0
    252c:	000b      	movs	r3, r1
    252e:	0030      	movs	r0, r6
    2530:	0039      	movs	r1, r7
    2532:	47a8      	blx	r5
    2534:	9a04      	ldr	r2, [sp, #16]
    2536:	9b05      	ldr	r3, [sp, #20]
    2538:	0006      	movs	r6, r0
    253a:	000f      	movs	r7, r1
    253c:	980c      	ldr	r0, [sp, #48]	; 0x30
    253e:	990d      	ldr	r1, [sp, #52]	; 0x34
    2540:	47a0      	blx	r4
    2542:	0002      	movs	r2, r0
    2544:	000b      	movs	r3, r1
    2546:	0030      	movs	r0, r6
    2548:	0039      	movs	r1, r7
    254a:	47a8      	blx	r5
    254c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    254e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    2550:	4eb1      	ldr	r6, [pc, #708]	; (2818 <computeKalmanBaroOnlyGains+0x6fc>)
    2552:	47b0      	blx	r6
    2554:	901c      	str	r0, [sp, #112]	; 0x70
    2556:	911d      	str	r1, [sp, #116]	; 0x74
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance);

        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
    2558:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    255a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    255c:	49af      	ldr	r1, [pc, #700]	; (281c <computeKalmanBaroOnlyGains+0x700>)
    255e:	600a      	str	r2, [r1, #0]
    2560:	604b      	str	r3, [r1, #4]
                         phi[0][1] * pestp[1][0] +
                         phi[0][2] * pestp[2][0] )/ det;
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
                         phi[1][1] * pestp[1][0] +
                         phi[1][2] * pestp[2][0] )/ det;
    2562:	9a00      	ldr	r2, [sp, #0]
    2564:	9b01      	ldr	r3, [sp, #4]
    2566:	980e      	ldr	r0, [sp, #56]	; 0x38
    2568:	990f      	ldr	r1, [sp, #60]	; 0x3c
    256a:	47a0      	blx	r4
    256c:	9a02      	ldr	r2, [sp, #8]
    256e:	9b03      	ldr	r3, [sp, #12]
    2570:	0006      	movs	r6, r0
    2572:	000f      	movs	r7, r1
    2574:	9810      	ldr	r0, [sp, #64]	; 0x40
    2576:	9911      	ldr	r1, [sp, #68]	; 0x44
    2578:	47a0      	blx	r4
    257a:	0002      	movs	r2, r0
    257c:	000b      	movs	r3, r1
    257e:	0030      	movs	r0, r6
    2580:	0039      	movs	r1, r7
    2582:	47a8      	blx	r5
    2584:	9a04      	ldr	r2, [sp, #16]
    2586:	9b05      	ldr	r3, [sp, #20]
    2588:	0006      	movs	r6, r0
    258a:	000f      	movs	r7, r1
    258c:	9812      	ldr	r0, [sp, #72]	; 0x48
    258e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    2590:	47a0      	blx	r4
    2592:	0002      	movs	r2, r0
    2594:	000b      	movs	r3, r1
    2596:	0030      	movs	r0, r6
    2598:	0039      	movs	r1, r7
    259a:	47a8      	blx	r5
    259c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    259e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    25a0:	4e9d      	ldr	r6, [pc, #628]	; (2818 <computeKalmanBaroOnlyGains+0x6fc>)
    25a2:	47b0      	blx	r6
    25a4:	9006      	str	r0, [sp, #24]
    25a6:	9107      	str	r1, [sp, #28]
        det = (pestp[0][0]+altitude_variance);

        baro_kgain[0] = (phi[0][0] * pestp[0][0] +
                         phi[0][1] * pestp[1][0] +
                         phi[0][2] * pestp[2][0] )/ det;
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
    25a8:	9a06      	ldr	r2, [sp, #24]
    25aa:	9b07      	ldr	r3, [sp, #28]
    25ac:	499b      	ldr	r1, [pc, #620]	; (281c <computeKalmanBaroOnlyGains+0x700>)
    25ae:	608a      	str	r2, [r1, #8]
    25b0:	60cb      	str	r3, [r1, #12]
                         phi[1][1] * pestp[1][0] +
                         phi[1][2] * pestp[2][0] )/ det;
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
                         phi[2][1] * pestp[1][0] +
                         phi[2][2] * pestp[2][0] )/det;
    25b2:	9a00      	ldr	r2, [sp, #0]
    25b4:	9b01      	ldr	r3, [sp, #4]
    25b6:	9814      	ldr	r0, [sp, #80]	; 0x50
    25b8:	9915      	ldr	r1, [sp, #84]	; 0x54
    25ba:	47a0      	blx	r4
    25bc:	9a02      	ldr	r2, [sp, #8]
    25be:	9b03      	ldr	r3, [sp, #12]
    25c0:	0006      	movs	r6, r0
    25c2:	000f      	movs	r7, r1
    25c4:	9816      	ldr	r0, [sp, #88]	; 0x58
    25c6:	9917      	ldr	r1, [sp, #92]	; 0x5c
    25c8:	47a0      	blx	r4
    25ca:	0002      	movs	r2, r0
    25cc:	000b      	movs	r3, r1
    25ce:	0030      	movs	r0, r6
    25d0:	0039      	movs	r1, r7
    25d2:	47a8      	blx	r5
    25d4:	9a04      	ldr	r2, [sp, #16]
    25d6:	9b05      	ldr	r3, [sp, #20]
    25d8:	0006      	movs	r6, r0
    25da:	000f      	movs	r7, r1
    25dc:	9818      	ldr	r0, [sp, #96]	; 0x60
    25de:	9919      	ldr	r1, [sp, #100]	; 0x64
    25e0:	47a0      	blx	r4
    25e2:	0002      	movs	r2, r0
    25e4:	000b      	movs	r3, r1
    25e6:	0030      	movs	r0, r6
    25e8:	0039      	movs	r1, r7
    25ea:	47a8      	blx	r5
    25ec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    25ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    25f0:	4e89      	ldr	r6, [pc, #548]	; (2818 <computeKalmanBaroOnlyGains+0x6fc>)
    25f2:	47b0      	blx	r6
    25f4:	9024      	str	r0, [sp, #144]	; 0x90
    25f6:	9125      	str	r1, [sp, #148]	; 0x94
                         phi[0][1] * pestp[1][0] +
                         phi[0][2] * pestp[2][0] )/ det;
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
                         phi[1][1] * pestp[1][0] +
                         phi[1][2] * pestp[2][0] )/ det;
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
    25f8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    25fa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    25fc:	4987      	ldr	r1, [pc, #540]	; (281c <computeKalmanBaroOnlyGains+0x700>)
                         phi[2][1] * pestp[1][0] +
                         phi[2][2] * pestp[2][0] )/det;

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
    25fe:	4e88      	ldr	r6, [pc, #544]	; (2820 <computeKalmanBaroOnlyGains+0x704>)
                         phi[0][1] * pestp[1][0] +
                         phi[0][2] * pestp[2][0] )/ det;
        baro_kgain[1] = (phi[1][0] * pestp[0][0] +
                         phi[1][1] * pestp[1][0] +
                         phi[1][2] * pestp[2][0] )/ det;
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
    2600:	610a      	str	r2, [r1, #16]
    2602:	614b      	str	r3, [r1, #20]
                         phi[2][1] * pestp[1][0] +
                         phi[2][2] * pestp[2][0] )/det;

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
    2604:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    2606:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    2608:	2000      	movs	r0, #0
    260a:	4986      	ldr	r1, [pc, #536]	; (2824 <computeKalmanBaroOnlyGains+0x708>)
    260c:	47b0      	blx	r6
    260e:	0006      	movs	r6, r0
    2610:	000f      	movs	r7, r1
    2612:	0002      	movs	r2, r0
    2614:	000b      	movs	r3, r1
    2616:	9800      	ldr	r0, [sp, #0]
    2618:	9901      	ldr	r1, [sp, #4]
    261a:	47a0      	blx	r4
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
    261c:	0032      	movs	r2, r6
    261e:	003b      	movs	r3, r7
                         phi[1][2] * pestp[2][0] )/ det;
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
                         phi[2][1] * pestp[1][0] +
                         phi[2][2] * pestp[2][0] )/det;

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
    2620:	901a      	str	r0, [sp, #104]	; 0x68
    2622:	911b      	str	r1, [sp, #108]	; 0x6c
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
    2624:	9802      	ldr	r0, [sp, #8]
    2626:	9903      	ldr	r1, [sp, #12]
    2628:	47a0      	blx	r4
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
    262a:	0032      	movs	r2, r6
    262c:	003b      	movs	r3, r7
        baro_kgain[2] = (phi[2][0] * pestp[0][0] +
                         phi[2][1] * pestp[1][0] +
                         phi[2][2] * pestp[2][0] )/det;

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
    262e:	901c      	str	r0, [sp, #112]	; 0x70
    2630:	911d      	str	r1, [sp, #116]	; 0x74
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
    2632:	9804      	ldr	r0, [sp, #16]
    2634:	9905      	ldr	r1, [sp, #20]
    2636:	47a0      	blx	r4
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
    2638:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    263a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
                         phi[2][1] * pestp[1][0] +
                         phi[2][2] * pestp[2][0] )/det;

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
    263c:	901e      	str	r0, [sp, #120]	; 0x78
    263e:	911f      	str	r1, [sp, #124]	; 0x7c
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
    2640:	9828      	ldr	r0, [sp, #160]	; 0xa0
    2642:	9929      	ldr	r1, [sp, #164]	; 0xa4
    2644:	47a8      	blx	r5
    2646:	4a72      	ldr	r2, [pc, #456]	; (2810 <computeKalmanBaroOnlyGains+0x6f4>)
    2648:	0006      	movs	r6, r0
    264a:	000f      	movs	r7, r1
    264c:	982a      	ldr	r0, [sp, #168]	; 0xa8
    264e:	992b      	ldr	r1, [sp, #172]	; 0xac
    2650:	4b70      	ldr	r3, [pc, #448]	; (2814 <computeKalmanBaroOnlyGains+0x6f8>)
    2652:	47a0      	blx	r4
    2654:	0002      	movs	r2, r0
    2656:	000b      	movs	r3, r1
    2658:	0030      	movs	r0, r6
    265a:	0039      	movs	r1, r7
    265c:	47a8      	blx	r5
    265e:	9a06      	ldr	r2, [sp, #24]
    2660:	9b07      	ldr	r3, [sp, #28]
    2662:	0006      	movs	r6, r0
    2664:	000f      	movs	r7, r1
    2666:	9800      	ldr	r0, [sp, #0]
    2668:	9901      	ldr	r1, [sp, #4]
    266a:	47a0      	blx	r4
    266c:	0002      	movs	r2, r0
    266e:	000b      	movs	r3, r1
    2670:	0030      	movs	r0, r6
    2672:	0039      	movs	r1, r7
    2674:	4e6a      	ldr	r6, [pc, #424]	; (2820 <computeKalmanBaroOnlyGains+0x704>)
    2676:	47b0      	blx	r6
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
    2678:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    267a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
                         phi[2][2] * pestp[2][0] )/det;

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
    267c:	9020      	str	r0, [sp, #128]	; 0x80
    267e:	9121      	str	r1, [sp, #132]	; 0x84
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
    2680:	982c      	ldr	r0, [sp, #176]	; 0xb0
    2682:	992d      	ldr	r1, [sp, #180]	; 0xb4
    2684:	47a8      	blx	r5
    2686:	4a62      	ldr	r2, [pc, #392]	; (2810 <computeKalmanBaroOnlyGains+0x6f4>)
    2688:	0006      	movs	r6, r0
    268a:	000f      	movs	r7, r1
    268c:	982e      	ldr	r0, [sp, #184]	; 0xb8
    268e:	992f      	ldr	r1, [sp, #188]	; 0xbc
    2690:	4b60      	ldr	r3, [pc, #384]	; (2814 <computeKalmanBaroOnlyGains+0x6f8>)
    2692:	47a0      	blx	r4
    2694:	0002      	movs	r2, r0
    2696:	000b      	movs	r3, r1
    2698:	0030      	movs	r0, r6
    269a:	0039      	movs	r1, r7
    269c:	47a8      	blx	r5
    269e:	9a06      	ldr	r2, [sp, #24]
    26a0:	9b07      	ldr	r3, [sp, #28]
    26a2:	0006      	movs	r6, r0
    26a4:	000f      	movs	r7, r1
    26a6:	9802      	ldr	r0, [sp, #8]
    26a8:	9903      	ldr	r1, [sp, #12]
    26aa:	47a0      	blx	r4
    26ac:	0002      	movs	r2, r0
    26ae:	000b      	movs	r3, r1
    26b0:	0030      	movs	r0, r6
    26b2:	0039      	movs	r1, r7
    26b4:	4e5a      	ldr	r6, [pc, #360]	; (2820 <computeKalmanBaroOnlyGains+0x704>)
    26b6:	47b0      	blx	r6
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
    26b8:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    26ba:	9b39      	ldr	r3, [sp, #228]	; 0xe4

        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
    26bc:	9022      	str	r0, [sp, #136]	; 0x88
    26be:	9123      	str	r1, [sp, #140]	; 0x8c
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
    26c0:	9830      	ldr	r0, [sp, #192]	; 0xc0
    26c2:	9931      	ldr	r1, [sp, #196]	; 0xc4
    26c4:	47a8      	blx	r5
    26c6:	4a52      	ldr	r2, [pc, #328]	; (2810 <computeKalmanBaroOnlyGains+0x6f4>)
    26c8:	0006      	movs	r6, r0
    26ca:	000f      	movs	r7, r1
    26cc:	9832      	ldr	r0, [sp, #200]	; 0xc8
    26ce:	9933      	ldr	r1, [sp, #204]	; 0xcc
    26d0:	4b50      	ldr	r3, [pc, #320]	; (2814 <computeKalmanBaroOnlyGains+0x6f8>)
    26d2:	47a0      	blx	r4
    26d4:	0002      	movs	r2, r0
    26d6:	000b      	movs	r3, r1
    26d8:	0030      	movs	r0, r6
    26da:	0039      	movs	r1, r7
    26dc:	47a8      	blx	r5
    26de:	9a06      	ldr	r2, [sp, #24]
    26e0:	9b07      	ldr	r3, [sp, #28]
    26e2:	0006      	movs	r6, r0
    26e4:	000f      	movs	r7, r1
    26e6:	9804      	ldr	r0, [sp, #16]
    26e8:	9905      	ldr	r1, [sp, #20]
    26ea:	47a0      	blx	r4
    26ec:	0002      	movs	r2, r0
    26ee:	000b      	movs	r3, r1
    26f0:	0030      	movs	r0, r6
    26f2:	0039      	movs	r1, r7
    26f4:	4e4a      	ldr	r6, [pc, #296]	; (2820 <computeKalmanBaroOnlyGains+0x704>)
    26f6:	47b0      	blx	r6
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
    26f8:	2200      	movs	r2, #0
    26fa:	2300      	movs	r3, #0
        pest[0][0] = pestp[0][0] * (1.0 - baro_kgain[0]);
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
    26fc:	9006      	str	r0, [sp, #24]
    26fe:	9107      	str	r1, [sp, #28]
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
    2700:	9828      	ldr	r0, [sp, #160]	; 0xa0
    2702:	9929      	ldr	r1, [sp, #164]	; 0xa4
    2704:	47a0      	blx	r4
    2706:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    2708:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    270a:	47a8      	blx	r5
    270c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    270e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    2710:	47a8      	blx	r5
    2712:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2714:	9b25      	ldr	r3, [sp, #148]	; 0x94
    2716:	0006      	movs	r6, r0
    2718:	000f      	movs	r7, r1
    271a:	9800      	ldr	r0, [sp, #0]
    271c:	9901      	ldr	r1, [sp, #4]
    271e:	47a0      	blx	r4
    2720:	0002      	movs	r2, r0
    2722:	000b      	movs	r3, r1
    2724:	0030      	movs	r0, r6
    2726:	0039      	movs	r1, r7
    2728:	4e3d      	ldr	r6, [pc, #244]	; (2820 <computeKalmanBaroOnlyGains+0x704>)
    272a:	47b0      	blx	r6
        pest[2][1] = pestp[1][2] - baro_kgain[2] * pestp[1][0];
    272c:	2200      	movs	r2, #0
        pest[0][1] = pestp[1][0] * (1.0 - baro_kgain[0]);
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
    272e:	9000      	str	r0, [sp, #0]
    2730:	9101      	str	r1, [sp, #4]
        pest[2][1] = pestp[1][2] - baro_kgain[2] * pestp[1][0];
    2732:	982c      	ldr	r0, [sp, #176]	; 0xb0
    2734:	992d      	ldr	r1, [sp, #180]	; 0xb4
    2736:	2300      	movs	r3, #0
    2738:	47a0      	blx	r4
    273a:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    273c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    273e:	47a8      	blx	r5
    2740:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    2742:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    2744:	47a8      	blx	r5
    2746:	9a24      	ldr	r2, [sp, #144]	; 0x90
    2748:	9b25      	ldr	r3, [sp, #148]	; 0x94
    274a:	0006      	movs	r6, r0
    274c:	000f      	movs	r7, r1
    274e:	9802      	ldr	r0, [sp, #8]
    2750:	9903      	ldr	r1, [sp, #12]
    2752:	47a0      	blx	r4
    2754:	0002      	movs	r2, r0
    2756:	000b      	movs	r3, r1
    2758:	0030      	movs	r0, r6
    275a:	0039      	movs	r1, r7
    275c:	4e30      	ldr	r6, [pc, #192]	; (2820 <computeKalmanBaroOnlyGains+0x704>)
    275e:	47b0      	blx	r6
        pest[2][2] = pestp[2][2] - baro_kgain[2] * pestp[2][0];
    2760:	2200      	movs	r2, #0
        pest[0][2] = pestp[2][0] * (1.0 - baro_kgain[0]);
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
        pest[2][1] = pestp[1][2] - baro_kgain[2] * pestp[1][0];
    2762:	9002      	str	r0, [sp, #8]
    2764:	9103      	str	r1, [sp, #12]
        pest[2][2] = pestp[2][2] - baro_kgain[2] * pestp[2][0];
    2766:	9830      	ldr	r0, [sp, #192]	; 0xc0
    2768:	9931      	ldr	r1, [sp, #196]	; 0xc4
    276a:	2300      	movs	r3, #0
    276c:	47a0      	blx	r4
    276e:	9a38      	ldr	r2, [sp, #224]	; 0xe0
    2770:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    2772:	47a8      	blx	r5
    2774:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    2776:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    2778:	47a8      	blx	r5
    277a:	9a24      	ldr	r2, [sp, #144]	; 0x90
    277c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    277e:	0006      	movs	r6, r0
    2780:	000f      	movs	r7, r1
    2782:	9804      	ldr	r0, [sp, #16]
    2784:	9905      	ldr	r1, [sp, #20]
    2786:	47a0      	blx	r4
    2788:	4c25      	ldr	r4, [pc, #148]	; (2820 <computeKalmanBaroOnlyGains+0x704>)
    278a:	000b      	movs	r3, r1
    278c:	0002      	movs	r2, r0
    278e:	0039      	movs	r1, r7
    2790:	0030      	movs	r0, r6
    2792:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    2794:	2400      	movs	r4, #0
    2796:	9b27      	ldr	r3, [sp, #156]	; 0x9c
        pest[1][0] = pestp[0][1] - baro_kgain[1] * pestp[0][0];
        pest[1][1] = pestp[1][1] - baro_kgain[1] * pestp[1][0];
        pest[1][2] = pestp[2][1] - baro_kgain[1] * pestp[2][0];
        pest[2][0] = pestp[0][2] - baro_kgain[2] * pestp[0][0];
        pest[2][1] = pestp[1][2] - baro_kgain[2] * pestp[1][0];
        pest[2][2] = pestp[2][2] - baro_kgain[2] * pestp[2][0];
    2798:	9004      	str	r0, [sp, #16]
    279a:	9105      	str	r1, [sp, #20]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    279c:	3301      	adds	r3, #1
    279e:	9327      	str	r3, [sp, #156]	; 0x9c
        for( i = 0; i <= 2; i++) {
            if( (baro_kgain[i] - lastkgain[i])/lastkgain[i] > 0.00001)
    27a0:	4b1e      	ldr	r3, [pc, #120]	; (281c <computeKalmanBaroOnlyGains+0x700>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    27a2:	9424      	str	r4, [sp, #144]	; 0x90
        k++;
        for( i = 0; i <= 2; i++) {
            if( (baro_kgain[i] - lastkgain[i])/lastkgain[i] > 0.00001)
    27a4:	932c      	str	r3, [sp, #176]	; 0xb0
    27a6:	4b1e      	ldr	r3, [pc, #120]	; (2820 <computeKalmanBaroOnlyGains+0x704>)
    27a8:	932e      	str	r3, [sp, #184]	; 0xb8
    27aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    27ac:	18e3      	adds	r3, r4, r3
    27ae:	681a      	ldr	r2, [r3, #0]
    27b0:	685b      	ldr	r3, [r3, #4]
    27b2:	9228      	str	r2, [sp, #160]	; 0xa0
    27b4:	9329      	str	r3, [sp, #164]	; 0xa4
    27b6:	9828      	ldr	r0, [sp, #160]	; 0xa0
    27b8:	9929      	ldr	r1, [sp, #164]	; 0xa4
    27ba:	ab3e      	add	r3, sp, #248	; 0xf8
    27bc:	18e5      	adds	r5, r4, r3
    27be:	682e      	ldr	r6, [r5, #0]
    27c0:	686f      	ldr	r7, [r5, #4]
    27c2:	952a      	str	r5, [sp, #168]	; 0xa8
    27c4:	0032      	movs	r2, r6
    27c6:	003b      	movs	r3, r7
    27c8:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
    27ca:	47a8      	blx	r5
    27cc:	0032      	movs	r2, r6
    27ce:	003b      	movs	r3, r7
    27d0:	4e11      	ldr	r6, [pc, #68]	; (2818 <computeKalmanBaroOnlyGains+0x6fc>)
    27d2:	47b0      	blx	r6
    27d4:	4b14      	ldr	r3, [pc, #80]	; (2828 <computeKalmanBaroOnlyGains+0x70c>)
    27d6:	4a15      	ldr	r2, [pc, #84]	; (282c <computeKalmanBaroOnlyGains+0x710>)
    27d8:	4e15      	ldr	r6, [pc, #84]	; (2830 <computeKalmanBaroOnlyGains+0x714>)
    27da:	47b0      	blx	r6
                notdone++;
    27dc:	1e43      	subs	r3, r0, #1
    27de:	4198      	sbcs	r0, r3
    27e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
            lastkgain[i] = baro_kgain[i];
    27e2:	992a      	ldr	r1, [sp, #168]	; 0xa8
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++) {
            if( (baro_kgain[i] - lastkgain[i])/lastkgain[i] > 0.00001)
                notdone++;
    27e4:	181b      	adds	r3, r3, r0
    27e6:	3408      	adds	r4, #8
    27e8:	9324      	str	r3, [sp, #144]	; 0x90
            lastkgain[i] = baro_kgain[i];
    27ea:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    27ec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    27ee:	600a      	str	r2, [r1, #0]
    27f0:	604b      	str	r3, [r1, #4]
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++) {
    27f2:	2c18      	cmp	r4, #24
    27f4:	d1d9      	bne.n	27aa <computeKalmanBaroOnlyGains+0x68e>
            if( (baro_kgain[i] - lastkgain[i])/lastkgain[i] > 0.00001)
                notdone++;
            lastkgain[i] = baro_kgain[i];
        }
        if( notdone || k < 100)
    27f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    27f8:	2b00      	cmp	r3, #0
    27fa:	d000      	beq.n	27fe <computeKalmanBaroOnlyGains+0x6e2>
    27fc:	e4f8      	b.n	21f0 <computeKalmanBaroOnlyGains+0xd4>
    27fe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    2800:	2b63      	cmp	r3, #99	; 0x63
    2802:	dc00      	bgt.n	2806 <computeKalmanBaroOnlyGains+0x6ea>
    2804:	e4f4      	b.n	21f0 <computeKalmanBaroOnlyGains+0xd4>
    2806:	e015      	b.n	2834 <computeKalmanBaroOnlyGains+0x718>
    2808:	eb1c432d 	.word	0xeb1c432d
    280c:	3eea36e2 	.word	0x3eea36e2
    2810:	47ae147b 	.word	0x47ae147b
    2814:	3f747ae1 	.word	0x3f747ae1
    2818:	00005795 	.word	0x00005795
    281c:	20000310 	.word	0x20000310
    2820:	000064d1 	.word	0x000064d1
    2824:	3ff00000 	.word	0x3ff00000
    2828:	3ee4f8b5 	.word	0x3ee4f8b5
    282c:	88e368f1 	.word	0x88e368f1
    2830:	00004e15 	.word	0x00004e15
            continue;
        else
            break;
    }
}
    2834:	b045      	add	sp, #276	; 0x114
    2836:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002838 <KalmanBaroUpdate>:

void KalmanBaroUpdate(double alt_inovation) {
    2838:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    283a:	4b55      	ldr	r3, [pc, #340]	; (2990 <KalmanBaroUpdate+0x158>)
        else
            break;
    }
}

void KalmanBaroUpdate(double alt_inovation) {
    283c:	b08d      	sub	sp, #52	; 0x34

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    283e:	685c      	ldr	r4, [r3, #4]
    2840:	681b      	ldr	r3, [r3, #0]
    2842:	9300      	str	r3, [sp, #0]
    2844:	9401      	str	r4, [sp, #4]
    2846:	4b53      	ldr	r3, [pc, #332]	; (2994 <KalmanBaroUpdate+0x15c>)
    2848:	4d53      	ldr	r5, [pc, #332]	; (2998 <KalmanBaroUpdate+0x160>)
    284a:	685c      	ldr	r4, [r3, #4]
    284c:	681b      	ldr	r3, [r3, #0]
    284e:	9302      	str	r3, [sp, #8]
    2850:	9403      	str	r4, [sp, #12]
    2852:	4b52      	ldr	r3, [pc, #328]	; (299c <KalmanBaroUpdate+0x164>)
        else
            break;
    }
}

void KalmanBaroUpdate(double alt_inovation) {
    2854:	9006      	str	r0, [sp, #24]
    2856:	9107      	str	r1, [sp, #28]

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    2858:	685c      	ldr	r4, [r3, #4]
    285a:	681b      	ldr	r3, [r3, #0]
    285c:	9800      	ldr	r0, [sp, #0]
    285e:	9901      	ldr	r1, [sp, #4]
    2860:	9304      	str	r3, [sp, #16]
    2862:	9405      	str	r4, [sp, #20]
    2864:	4c4e      	ldr	r4, [pc, #312]	; (29a0 <KalmanBaroUpdate+0x168>)
    2866:	6822      	ldr	r2, [r4, #0]
    2868:	6863      	ldr	r3, [r4, #4]
    286a:	47a8      	blx	r5
    286c:	68a2      	ldr	r2, [r4, #8]
    286e:	68e3      	ldr	r3, [r4, #12]
    2870:	0006      	movs	r6, r0
    2872:	000f      	movs	r7, r1
    2874:	9802      	ldr	r0, [sp, #8]
    2876:	9903      	ldr	r1, [sp, #12]
    2878:	47a8      	blx	r5
    287a:	0002      	movs	r2, r0
    287c:	000b      	movs	r3, r1
    287e:	0030      	movs	r0, r6
    2880:	0039      	movs	r1, r7
    2882:	4e48      	ldr	r6, [pc, #288]	; (29a4 <KalmanBaroUpdate+0x16c>)
    2884:	47b0      	blx	r6
    2886:	6922      	ldr	r2, [r4, #16]
    2888:	6963      	ldr	r3, [r4, #20]
    288a:	0006      	movs	r6, r0
    288c:	000f      	movs	r7, r1
    288e:	9804      	ldr	r0, [sp, #16]
    2890:	9905      	ldr	r1, [sp, #20]
    2892:	47a8      	blx	r5
    2894:	0002      	movs	r2, r0
    2896:	000b      	movs	r3, r1
    2898:	0030      	movs	r0, r6
    289a:	0039      	movs	r1, r7
    289c:	4e41      	ldr	r6, [pc, #260]	; (29a4 <KalmanBaroUpdate+0x16c>)
    289e:	47b0      	blx	r6
    28a0:	9008      	str	r0, [sp, #32]
    28a2:	9109      	str	r1, [sp, #36]	; 0x24
    28a4:	9a08      	ldr	r2, [sp, #32]
    28a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    28a8:	493f      	ldr	r1, [pc, #252]	; (29a8 <KalmanBaroUpdate+0x170>)
    28aa:	600a      	str	r2, [r1, #0]
    28ac:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    28ae:	69a2      	ldr	r2, [r4, #24]
    28b0:	69e3      	ldr	r3, [r4, #28]
    28b2:	9800      	ldr	r0, [sp, #0]
    28b4:	9901      	ldr	r1, [sp, #4]
    28b6:	47a8      	blx	r5
    28b8:	6a22      	ldr	r2, [r4, #32]
    28ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    28bc:	0006      	movs	r6, r0
    28be:	000f      	movs	r7, r1
    28c0:	9802      	ldr	r0, [sp, #8]
    28c2:	9903      	ldr	r1, [sp, #12]
    28c4:	47a8      	blx	r5
    28c6:	0002      	movs	r2, r0
    28c8:	000b      	movs	r3, r1
    28ca:	0030      	movs	r0, r6
    28cc:	0039      	movs	r1, r7
    28ce:	4e35      	ldr	r6, [pc, #212]	; (29a4 <KalmanBaroUpdate+0x16c>)
    28d0:	47b0      	blx	r6
    28d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    28d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    28d6:	0006      	movs	r6, r0
    28d8:	000f      	movs	r7, r1
    28da:	9804      	ldr	r0, [sp, #16]
    28dc:	9905      	ldr	r1, [sp, #20]
    28de:	47a8      	blx	r5
    28e0:	0002      	movs	r2, r0
    28e2:	000b      	movs	r3, r1
    28e4:	0030      	movs	r0, r6
    28e6:	0039      	movs	r1, r7
    28e8:	4e2e      	ldr	r6, [pc, #184]	; (29a4 <KalmanBaroUpdate+0x16c>)
    28ea:	47b0      	blx	r6
    28ec:	900a      	str	r0, [sp, #40]	; 0x28
    28ee:	910b      	str	r1, [sp, #44]	; 0x2c
    28f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    28f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    28f4:	492c      	ldr	r1, [pc, #176]	; (29a8 <KalmanBaroUpdate+0x170>)
    28f6:	608a      	str	r2, [r1, #8]
    28f8:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    28fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
    28fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    28fe:	9800      	ldr	r0, [sp, #0]
    2900:	9901      	ldr	r1, [sp, #4]
    2902:	47a8      	blx	r5
    2904:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2906:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2908:	0006      	movs	r6, r0
    290a:	000f      	movs	r7, r1
    290c:	9802      	ldr	r0, [sp, #8]
    290e:	9903      	ldr	r1, [sp, #12]
    2910:	47a8      	blx	r5
    2912:	0002      	movs	r2, r0
    2914:	000b      	movs	r3, r1
    2916:	0030      	movs	r0, r6
    2918:	0039      	movs	r1, r7
    291a:	4e22      	ldr	r6, [pc, #136]	; (29a4 <KalmanBaroUpdate+0x16c>)
    291c:	47b0      	blx	r6
    291e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2920:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2922:	0006      	movs	r6, r0
    2924:	000f      	movs	r7, r1
    2926:	9804      	ldr	r0, [sp, #16]
    2928:	9905      	ldr	r1, [sp, #20]
    292a:	47a8      	blx	r5
    292c:	4c1d      	ldr	r4, [pc, #116]	; (29a4 <KalmanBaroUpdate+0x16c>)
    292e:	0002      	movs	r2, r0
    2930:	000b      	movs	r3, r1
    2932:	0030      	movs	r0, r6
    2934:	0039      	movs	r1, r7
    2936:	47a0      	blx	r4
    2938:	0006      	movs	r6, r0
    293a:	000f      	movs	r7, r1

    /* Update state */
    altitude = estp[0] + baro_kgain[0] * alt_inovation;
    293c:	9806      	ldr	r0, [sp, #24]
    293e:	9907      	ldr	r1, [sp, #28]
void KalmanBaroUpdate(double alt_inovation) {

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    2940:	4b19      	ldr	r3, [pc, #100]	; (29a8 <KalmanBaroUpdate+0x170>)
    2942:	611e      	str	r6, [r3, #16]
    2944:	615f      	str	r7, [r3, #20]

    /* Update state */
    altitude = estp[0] + baro_kgain[0] * alt_inovation;
    2946:	4b19      	ldr	r3, [pc, #100]	; (29ac <KalmanBaroUpdate+0x174>)
    2948:	681a      	ldr	r2, [r3, #0]
    294a:	685b      	ldr	r3, [r3, #4]
    294c:	47a8      	blx	r5
    294e:	9a08      	ldr	r2, [sp, #32]
    2950:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2952:	47a0      	blx	r4
    2954:	4b0e      	ldr	r3, [pc, #56]	; (2990 <KalmanBaroUpdate+0x158>)
    2956:	6018      	str	r0, [r3, #0]
    2958:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + baro_kgain[1] * alt_inovation;
    295a:	9806      	ldr	r0, [sp, #24]
    295c:	9907      	ldr	r1, [sp, #28]
    295e:	4b13      	ldr	r3, [pc, #76]	; (29ac <KalmanBaroUpdate+0x174>)
    2960:	689a      	ldr	r2, [r3, #8]
    2962:	68db      	ldr	r3, [r3, #12]
    2964:	47a8      	blx	r5
    2966:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    296a:	47a0      	blx	r4
    296c:	4b09      	ldr	r3, [pc, #36]	; (2994 <KalmanBaroUpdate+0x15c>)
    296e:	6018      	str	r0, [r3, #0]
    2970:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + baro_kgain[2] * alt_inovation;
    2972:	9806      	ldr	r0, [sp, #24]
    2974:	9907      	ldr	r1, [sp, #28]
    2976:	4b0d      	ldr	r3, [pc, #52]	; (29ac <KalmanBaroUpdate+0x174>)
    2978:	691a      	ldr	r2, [r3, #16]
    297a:	695b      	ldr	r3, [r3, #20]
    297c:	47a8      	blx	r5
    297e:	003b      	movs	r3, r7
    2980:	0032      	movs	r2, r6
    2982:	47a0      	blx	r4
    2984:	4b05      	ldr	r3, [pc, #20]	; (299c <KalmanBaroUpdate+0x164>)
    2986:	6018      	str	r0, [r3, #0]
    2988:	6059      	str	r1, [r3, #4]

}
    298a:	b00d      	add	sp, #52	; 0x34
    298c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    298e:	46c0      	nop			; (mov r8, r8)
    2990:	20000328 	.word	0x20000328
    2994:	20000308 	.word	0x20000308
    2998:	00005fdd 	.word	0x00005fdd
    299c:	200002e8 	.word	0x200002e8
    29a0:	20000010 	.word	0x20000010
    29a4:	0000513d 	.word	0x0000513d
    29a8:	20000330 	.word	0x20000330
    29ac:	20000310 	.word	0x20000310

000029b0 <KalmanBothUpdate>:

void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    29b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29b2:	b08f      	sub	sp, #60	; 0x3c
    29b4:	9208      	str	r2, [sp, #32]
    29b6:	9309      	str	r3, [sp, #36]	; 0x24

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    29b8:	4b68      	ldr	r3, [pc, #416]	; (2b5c <KalmanBothUpdate+0x1ac>)
    29ba:	4d69      	ldr	r5, [pc, #420]	; (2b60 <KalmanBothUpdate+0x1b0>)
    29bc:	685c      	ldr	r4, [r3, #4]
    29be:	681b      	ldr	r3, [r3, #0]
    29c0:	9300      	str	r3, [sp, #0]
    29c2:	9401      	str	r4, [sp, #4]
    29c4:	4b67      	ldr	r3, [pc, #412]	; (2b64 <KalmanBothUpdate+0x1b4>)
    velocity = estp[1] + baro_kgain[1] * alt_inovation;
    accel =    estp[2] + baro_kgain[2] * alt_inovation;

}

void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    29c6:	9006      	str	r0, [sp, #24]
    29c8:	9107      	str	r1, [sp, #28]

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    29ca:	685c      	ldr	r4, [r3, #4]
    29cc:	681b      	ldr	r3, [r3, #0]
    29ce:	9800      	ldr	r0, [sp, #0]
    29d0:	9901      	ldr	r1, [sp, #4]
    29d2:	9302      	str	r3, [sp, #8]
    29d4:	9403      	str	r4, [sp, #12]
    29d6:	4b64      	ldr	r3, [pc, #400]	; (2b68 <KalmanBothUpdate+0x1b8>)
    29d8:	685c      	ldr	r4, [r3, #4]
    29da:	681b      	ldr	r3, [r3, #0]
    29dc:	9304      	str	r3, [sp, #16]
    29de:	9405      	str	r4, [sp, #20]
    29e0:	4c62      	ldr	r4, [pc, #392]	; (2b6c <KalmanBothUpdate+0x1bc>)
    29e2:	6822      	ldr	r2, [r4, #0]
    29e4:	6863      	ldr	r3, [r4, #4]
    29e6:	47a8      	blx	r5
    29e8:	68a2      	ldr	r2, [r4, #8]
    29ea:	68e3      	ldr	r3, [r4, #12]
    29ec:	0006      	movs	r6, r0
    29ee:	000f      	movs	r7, r1
    29f0:	9802      	ldr	r0, [sp, #8]
    29f2:	9903      	ldr	r1, [sp, #12]
    29f4:	47a8      	blx	r5
    29f6:	0002      	movs	r2, r0
    29f8:	000b      	movs	r3, r1
    29fa:	0030      	movs	r0, r6
    29fc:	0039      	movs	r1, r7
    29fe:	4e5c      	ldr	r6, [pc, #368]	; (2b70 <KalmanBothUpdate+0x1c0>)
    2a00:	47b0      	blx	r6
    2a02:	6922      	ldr	r2, [r4, #16]
    2a04:	6963      	ldr	r3, [r4, #20]
    2a06:	0006      	movs	r6, r0
    2a08:	000f      	movs	r7, r1
    2a0a:	9804      	ldr	r0, [sp, #16]
    2a0c:	9905      	ldr	r1, [sp, #20]
    2a0e:	47a8      	blx	r5
    2a10:	0002      	movs	r2, r0
    2a12:	000b      	movs	r3, r1
    2a14:	0030      	movs	r0, r6
    2a16:	0039      	movs	r1, r7
    2a18:	4e55      	ldr	r6, [pc, #340]	; (2b70 <KalmanBothUpdate+0x1c0>)
    2a1a:	47b0      	blx	r6
    2a1c:	900a      	str	r0, [sp, #40]	; 0x28
    2a1e:	910b      	str	r1, [sp, #44]	; 0x2c
    2a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2a24:	4953      	ldr	r1, [pc, #332]	; (2b74 <KalmanBothUpdate+0x1c4>)
    2a26:	600a      	str	r2, [r1, #0]
    2a28:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    2a2a:	69a2      	ldr	r2, [r4, #24]
    2a2c:	69e3      	ldr	r3, [r4, #28]
    2a2e:	9800      	ldr	r0, [sp, #0]
    2a30:	9901      	ldr	r1, [sp, #4]
    2a32:	47a8      	blx	r5
    2a34:	6a22      	ldr	r2, [r4, #32]
    2a36:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2a38:	0006      	movs	r6, r0
    2a3a:	000f      	movs	r7, r1
    2a3c:	9802      	ldr	r0, [sp, #8]
    2a3e:	9903      	ldr	r1, [sp, #12]
    2a40:	47a8      	blx	r5
    2a42:	0002      	movs	r2, r0
    2a44:	000b      	movs	r3, r1
    2a46:	0030      	movs	r0, r6
    2a48:	0039      	movs	r1, r7
    2a4a:	4e49      	ldr	r6, [pc, #292]	; (2b70 <KalmanBothUpdate+0x1c0>)
    2a4c:	47b0      	blx	r6
    2a4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2a50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2a52:	0006      	movs	r6, r0
    2a54:	000f      	movs	r7, r1
    2a56:	9804      	ldr	r0, [sp, #16]
    2a58:	9905      	ldr	r1, [sp, #20]
    2a5a:	47a8      	blx	r5
    2a5c:	0002      	movs	r2, r0
    2a5e:	000b      	movs	r3, r1
    2a60:	0030      	movs	r0, r6
    2a62:	0039      	movs	r1, r7
    2a64:	4e42      	ldr	r6, [pc, #264]	; (2b70 <KalmanBothUpdate+0x1c0>)
    2a66:	47b0      	blx	r6
    2a68:	900c      	str	r0, [sp, #48]	; 0x30
    2a6a:	910d      	str	r1, [sp, #52]	; 0x34
    2a6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2a70:	4940      	ldr	r1, [pc, #256]	; (2b74 <KalmanBothUpdate+0x1c4>)
    2a72:	608a      	str	r2, [r1, #8]
    2a74:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    2a76:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2a78:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2a7a:	9800      	ldr	r0, [sp, #0]
    2a7c:	9901      	ldr	r1, [sp, #4]
    2a7e:	47a8      	blx	r5
    2a80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2a82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2a84:	0006      	movs	r6, r0
    2a86:	000f      	movs	r7, r1
    2a88:	9802      	ldr	r0, [sp, #8]
    2a8a:	9903      	ldr	r1, [sp, #12]
    2a8c:	47a8      	blx	r5
    2a8e:	0002      	movs	r2, r0
    2a90:	000b      	movs	r3, r1
    2a92:	0030      	movs	r0, r6
    2a94:	0039      	movs	r1, r7
    2a96:	4e36      	ldr	r6, [pc, #216]	; (2b70 <KalmanBothUpdate+0x1c0>)
    2a98:	47b0      	blx	r6
    2a9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2a9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2a9e:	0006      	movs	r6, r0
    2aa0:	000f      	movs	r7, r1
    2aa2:	9804      	ldr	r0, [sp, #16]
    2aa4:	9905      	ldr	r1, [sp, #20]
    2aa6:	47a8      	blx	r5
    2aa8:	4c31      	ldr	r4, [pc, #196]	; (2b70 <KalmanBothUpdate+0x1c0>)
    2aaa:	0002      	movs	r2, r0
    2aac:	000b      	movs	r3, r1
    2aae:	0030      	movs	r0, r6
    2ab0:	0039      	movs	r1, r7
    2ab2:	47a0      	blx	r4
    2ab4:	0003      	movs	r3, r0
    2ab6:	000c      	movs	r4, r1
    2ab8:	4a2e      	ldr	r2, [pc, #184]	; (2b74 <KalmanBothUpdate+0x1c4>)
    2aba:	9000      	str	r0, [sp, #0]
    2abc:	9101      	str	r1, [sp, #4]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    2abe:	9806      	ldr	r0, [sp, #24]
    2ac0:	9907      	ldr	r1, [sp, #28]
void KalmanBothUpdate( double alt_inovation, double accel_inovation) {

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    2ac2:	6113      	str	r3, [r2, #16]
    2ac4:	6154      	str	r4, [r2, #20]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    2ac6:	4c2c      	ldr	r4, [pc, #176]	; (2b78 <KalmanBothUpdate+0x1c8>)
    2ac8:	6822      	ldr	r2, [r4, #0]
    2aca:	6863      	ldr	r3, [r4, #4]
    2acc:	47a8      	blx	r5
    2ace:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2ad2:	4e27      	ldr	r6, [pc, #156]	; (2b70 <KalmanBothUpdate+0x1c0>)
    2ad4:	47b0      	blx	r6
    2ad6:	68a2      	ldr	r2, [r4, #8]
    2ad8:	68e3      	ldr	r3, [r4, #12]
    2ada:	0006      	movs	r6, r0
    2adc:	000f      	movs	r7, r1
    2ade:	9808      	ldr	r0, [sp, #32]
    2ae0:	9909      	ldr	r1, [sp, #36]	; 0x24
    2ae2:	47a8      	blx	r5
    2ae4:	0002      	movs	r2, r0
    2ae6:	000b      	movs	r3, r1
    2ae8:	0030      	movs	r0, r6
    2aea:	0039      	movs	r1, r7
    2aec:	4e20      	ldr	r6, [pc, #128]	; (2b70 <KalmanBothUpdate+0x1c0>)
    2aee:	47b0      	blx	r6
    2af0:	4b1a      	ldr	r3, [pc, #104]	; (2b5c <KalmanBothUpdate+0x1ac>)
    2af2:	6018      	str	r0, [r3, #0]
    2af4:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    2af6:	6922      	ldr	r2, [r4, #16]
    2af8:	6963      	ldr	r3, [r4, #20]
    2afa:	9806      	ldr	r0, [sp, #24]
    2afc:	9907      	ldr	r1, [sp, #28]
    2afe:	47a8      	blx	r5
    2b00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2b04:	47b0      	blx	r6
    2b06:	69a2      	ldr	r2, [r4, #24]
    2b08:	69e3      	ldr	r3, [r4, #28]
    2b0a:	0006      	movs	r6, r0
    2b0c:	000f      	movs	r7, r1
    2b0e:	9808      	ldr	r0, [sp, #32]
    2b10:	9909      	ldr	r1, [sp, #36]	; 0x24
    2b12:	47a8      	blx	r5
    2b14:	0002      	movs	r2, r0
    2b16:	000b      	movs	r3, r1
    2b18:	0030      	movs	r0, r6
    2b1a:	0039      	movs	r1, r7
    2b1c:	4e14      	ldr	r6, [pc, #80]	; (2b70 <KalmanBothUpdate+0x1c0>)
    2b1e:	47b0      	blx	r6
    2b20:	4b10      	ldr	r3, [pc, #64]	; (2b64 <KalmanBothUpdate+0x1b4>)
    2b22:	6018      	str	r0, [r3, #0]
    2b24:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    2b26:	6a22      	ldr	r2, [r4, #32]
    2b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2b2a:	9806      	ldr	r0, [sp, #24]
    2b2c:	9907      	ldr	r1, [sp, #28]
    2b2e:	47a8      	blx	r5
    2b30:	9a00      	ldr	r2, [sp, #0]
    2b32:	9b01      	ldr	r3, [sp, #4]
    2b34:	47b0      	blx	r6
    2b36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2b38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2b3a:	0006      	movs	r6, r0
    2b3c:	000f      	movs	r7, r1
    2b3e:	9808      	ldr	r0, [sp, #32]
    2b40:	9909      	ldr	r1, [sp, #36]	; 0x24
    2b42:	47a8      	blx	r5
    2b44:	4c0a      	ldr	r4, [pc, #40]	; (2b70 <KalmanBothUpdate+0x1c0>)
    2b46:	0002      	movs	r2, r0
    2b48:	000b      	movs	r3, r1
    2b4a:	0030      	movs	r0, r6
    2b4c:	0039      	movs	r1, r7
    2b4e:	47a0      	blx	r4
    2b50:	4b05      	ldr	r3, [pc, #20]	; (2b68 <KalmanBothUpdate+0x1b8>)
    2b52:	6018      	str	r0, [r3, #0]
    2b54:	6059      	str	r1, [r3, #4]
}
    2b56:	b00f      	add	sp, #60	; 0x3c
    2b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b5a:	46c0      	nop			; (mov r8, r8)
    2b5c:	20000328 	.word	0x20000328
    2b60:	00005fdd 	.word	0x00005fdd
    2b64:	20000308 	.word	0x20000308
    2b68:	200002e8 	.word	0x200002e8
    2b6c:	20000010 	.word	0x20000010
    2b70:	0000513d 	.word	0x0000513d
    2b74:	20000330 	.word	0x20000330
    2b78:	20000348 	.word	0x20000348

00002b7c <computeKalmanStates>:

void computeKalmanStates() {
    2b7c:	b5f0      	push	{r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2b7e:	4b20      	ldr	r3, [pc, #128]	; (2c00 <computeKalmanStates+0x84>)
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
}

void computeKalmanStates() {
    2b80:	b085      	sub	sp, #20

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2b82:	6a5f      	ldr	r7, [r3, #36]	; 0x24
    2b84:	4a1f      	ldr	r2, [pc, #124]	; (2c04 <computeKalmanStates+0x88>)

    pressure = sample.pressureAltitude;
    2b86:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    2b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    2b8a:	9300      	str	r3, [sp, #0]
    2b8c:	9401      	str	r4, [sp, #4]

void computeKalmanStates() {

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2b8e:	6891      	ldr	r1, [r2, #8]
    2b90:	68d2      	ldr	r2, [r2, #12]

    pressure = sample.pressureAltitude;

    if (altitude == 0) {
    2b92:	4c1d      	ldr	r4, [pc, #116]	; (2c08 <computeKalmanStates+0x8c>)

void computeKalmanStates() {

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2b94:	9102      	str	r1, [sp, #8]
    2b96:	9203      	str	r2, [sp, #12]

    pressure = sample.pressureAltitude;

    if (altitude == 0) {
    2b98:	6820      	ldr	r0, [r4, #0]
    2b9a:	6861      	ldr	r1, [r4, #4]
    2b9c:	2200      	movs	r2, #0
    2b9e:	2300      	movs	r3, #0
    2ba0:	4d1a      	ldr	r5, [pc, #104]	; (2c0c <computeKalmanStates+0x90>)
    2ba2:	47a8      	blx	r5
    2ba4:	2800      	cmp	r0, #0
    2ba6:	d003      	beq.n	2bb0 <computeKalmanStates+0x34>
        altitude = pressure;
    2ba8:	9a00      	ldr	r2, [sp, #0]
    2baa:	9b01      	ldr	r3, [sp, #4]
    2bac:	6022      	str	r2, [r4, #0]
    2bae:	6063      	str	r3, [r4, #4]
    }


    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    2bb0:	9800      	ldr	r0, [sp, #0]
    2bb2:	9901      	ldr	r1, [sp, #4]
    2bb4:	4e16      	ldr	r6, [pc, #88]	; (2c10 <computeKalmanStates+0x94>)
    2bb6:	4c17      	ldr	r4, [pc, #92]	; (2c14 <computeKalmanStates+0x98>)
    2bb8:	6832      	ldr	r2, [r6, #0]
    2bba:	6873      	ldr	r3, [r6, #4]
    2bbc:	47a0      	blx	r4
    accel_inovation = acceleration - estp[2];

    if (flightState > flightCoast) {
    2bbe:	4b16      	ldr	r3, [pc, #88]	; (2c18 <computeKalmanStates+0x9c>)
        altitude = pressure;
    }


    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    2bc0:	0004      	movs	r4, r0
    accel_inovation = acceleration - estp[2];

    if (flightState > flightCoast) {
    2bc2:	781b      	ldrb	r3, [r3, #0]
        altitude = pressure;
    }


    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    2bc4:	000d      	movs	r5, r1
    accel_inovation = acceleration - estp[2];

    if (flightState > flightCoast) {
    2bc6:	2b05      	cmp	r3, #5
    2bc8:	d902      	bls.n	2bd0 <computeKalmanStates+0x54>
        KalmanBaroUpdate(alt_inovation);
    2bca:	4b14      	ldr	r3, [pc, #80]	; (2c1c <computeKalmanStates+0xa0>)
    2bcc:	4798      	blx	r3
    2bce:	e014      	b.n	2bfa <computeKalmanStates+0x7e>
    } else {
        KalmanBothUpdate(alt_inovation, accel_inovation);
    2bd0:	1c38      	adds	r0, r7, #0
    2bd2:	4b13      	ldr	r3, [pc, #76]	; (2c20 <computeKalmanStates+0xa4>)
    2bd4:	4798      	blx	r3
    2bd6:	9a02      	ldr	r2, [sp, #8]
    2bd8:	9b03      	ldr	r3, [sp, #12]
    2bda:	4f0e      	ldr	r7, [pc, #56]	; (2c14 <computeKalmanStates+0x98>)
    2bdc:	47b8      	blx	r7
    2bde:	4a11      	ldr	r2, [pc, #68]	; (2c24 <computeKalmanStates+0xa8>)
    2be0:	4b11      	ldr	r3, [pc, #68]	; (2c28 <computeKalmanStates+0xac>)
    2be2:	4f12      	ldr	r7, [pc, #72]	; (2c2c <computeKalmanStates+0xb0>)
    2be4:	47b8      	blx	r7
    2be6:	6932      	ldr	r2, [r6, #16]
    2be8:	6973      	ldr	r3, [r6, #20]
    2bea:	4e0a      	ldr	r6, [pc, #40]	; (2c14 <computeKalmanStates+0x98>)
    2bec:	47b0      	blx	r6
    2bee:	0002      	movs	r2, r0
    2bf0:	000b      	movs	r3, r1
    2bf2:	0020      	movs	r0, r4
    2bf4:	0029      	movs	r1, r5
    2bf6:	4c0e      	ldr	r4, [pc, #56]	; (2c30 <computeKalmanStates+0xb4>)
    2bf8:	47a0      	blx	r4
    }
}
    2bfa:	b005      	add	sp, #20
    2bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bfe:	46c0      	nop			; (mov r8, r8)
    2c00:	200005f0 	.word	0x200005f0
    2c04:	20000150 	.word	0x20000150
    2c08:	20000328 	.word	0x20000328
    2c0c:	00004de1 	.word	0x00004de1
    2c10:	20000330 	.word	0x20000330
    2c14:	000064d1 	.word	0x000064d1
    2c18:	200001ac 	.word	0x200001ac
    2c1c:	00002839 	.word	0x00002839
    2c20:	00006d19 	.word	0x00006d19
    2c24:	33daf8df 	.word	0x33daf8df
    2c28:	4040164b 	.word	0x4040164b
    2c2c:	00005fdd 	.word	0x00005fdd
    2c30:	000029b1 	.word	0x000029b1

00002c34 <makePage>:
u16_t flightAddressLocationInIndex;

u8_t flightStartAddress[3];


void makePage(u8_t bytesToWrite, u8_t* data) {
    2c34:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    2c36:	4a1f      	ldr	r2, [pc, #124]	; (2cb4 <makePage+0x80>)
    2c38:	7815      	ldrb	r5, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    2c3a:	1943      	adds	r3, r0, r5
    2c3c:	2bff      	cmp	r3, #255	; 0xff
    2c3e:	dc03      	bgt.n	2c48 <makePage+0x14>
    2c40:	2300      	movs	r3, #0
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2c42:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    2c44:	4c1c      	ldr	r4, [pc, #112]	; (2cb8 <makePage+0x84>)
    2c46:	e029      	b.n	2c9c <makePage+0x68>
    2c48:	2300      	movs	r3, #0
    2c4a:	4e1b      	ldr	r6, [pc, #108]	; (2cb8 <makePage+0x84>)

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2c4c:	195f      	adds	r7, r3, r5
    2c4e:	b2dc      	uxtb	r4, r3
    2c50:	46b4      	mov	ip, r6
    2c52:	2fff      	cmp	r7, #255	; 0xff
    2c54:	dc04      	bgt.n	2c60 <makePage+0x2c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    2c56:	5ccc      	ldrb	r4, [r1, r3]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2c58:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    2c5a:	55f4      	strb	r4, [r6, r7]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2c5c:	b29b      	uxth	r3, r3
    2c5e:	e7f5      	b.n	2c4c <makePage+0x18>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    2c60:	2300      	movs	r3, #0
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    2c62:	4f16      	ldr	r7, [pc, #88]	; (2cbc <makePage+0x88>)
    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    2c64:	7013      	strb	r3, [r2, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    2c66:	4665      	mov	r5, ip
    2c68:	18ed      	adds	r5, r5, r3
    2c6a:	782e      	ldrb	r6, [r5, #0]
    2c6c:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    2c6e:	2600      	movs	r6, #0
    2c70:	702e      	strb	r6, [r5, #0]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    2c72:	2580      	movs	r5, #128	; 0x80
    2c74:	3301      	adds	r3, #1
    2c76:	006d      	lsls	r5, r5, #1
    2c78:	42ab      	cmp	r3, r5
    2c7a:	d1f4      	bne.n	2c66 <makePage+0x32>
    2c7c:	2300      	movs	r3, #0
    2c7e:	1c5d      	adds	r5, r3, #1
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    2c80:	4284      	cmp	r4, r0
    2c82:	d207      	bcs.n	2c94 <makePage+0x60>
            pageBuffer[dataByte] = data[bytesWritten];
    2c84:	4667      	mov	r7, ip
    2c86:	5d0e      	ldrb	r6, [r1, r4]
            bytesWritten++;
    2c88:	3401      	adds	r4, #1
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            pageBuffer[dataByte] = data[bytesWritten];
    2c8a:	54fe      	strb	r6, [r7, r3]
            bytesWritten++;
    2c8c:	b2e4      	uxtb	r4, r4
            pageLocation = dataByte + 1;
    2c8e:	7015      	strb	r5, [r2, #0]
    2c90:	002b      	movs	r3, r5
    2c92:	e7f4      	b.n	2c7e <makePage+0x4a>
        }
        pageReady = true;
    2c94:	2201      	movs	r2, #1
    2c96:	4b0a      	ldr	r3, [pc, #40]	; (2cc0 <makePage+0x8c>)
    2c98:	701a      	strb	r2, [r3, #0]
    2c9a:	e009      	b.n	2cb0 <makePage+0x7c>

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2c9c:	4283      	cmp	r3, r0
    2c9e:	d807      	bhi.n	2cb0 <makePage+0x7c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    2ca0:	5ccf      	ldrb	r7, [r1, r3]
    2ca2:	18e6      	adds	r6, r4, r3
    2ca4:	5577      	strb	r7, [r6, r5]
            bytesWritten++;
            pageLocation = location + dataByte;
    2ca6:	18ee      	adds	r6, r5, r3
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2ca8:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
    2caa:	7016      	strb	r6, [r2, #0]
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2cac:	b29b      	uxth	r3, r3
    2cae:	e7f5      	b.n	2c9c <makePage+0x68>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
        }
    }
}
    2cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cb2:	46c0      	nop			; (mov r8, r8)
    2cb4:	200005e8 	.word	0x200005e8
    2cb8:	200001ae 	.word	0x200001ae
    2cbc:	2000037a 	.word	0x2000037a
    2cc0:	2000047a 	.word	0x2000047a

00002cc4 <writePadBuffer>:

void writePadBuffer(u8_t bytesToWrite, u8_t* data) {
    2cc4:	b570      	push	{r4, r5, r6, lr}
    2cc6:	4a0e      	ldr	r2, [pc, #56]	; (2d00 <writePadBuffer+0x3c>)
    2cc8:	4c0e      	ldr	r4, [pc, #56]	; (2d04 <writePadBuffer+0x40>)
    2cca:	2300      	movs	r3, #0
    u8_t i, j;

    for (i = 1; i < 10; i++) {
        for (j = 0; j < bytesToWrite; j++) {
    2ccc:	b2dd      	uxtb	r5, r3
    2cce:	42a8      	cmp	r0, r5
    2cd0:	d905      	bls.n	2cde <writePadBuffer+0x1a>
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
    2cd2:	001d      	movs	r5, r3
    2cd4:	5cd6      	ldrb	r6, [r2, r3]
    2cd6:	3d23      	subs	r5, #35	; 0x23
    2cd8:	5556      	strb	r6, [r2, r5]
    2cda:	3301      	adds	r3, #1
    2cdc:	e7f6      	b.n	2ccc <writePadBuffer+0x8>
    2cde:	3223      	adds	r2, #35	; 0x23
}

void writePadBuffer(u8_t bytesToWrite, u8_t* data) {
    u8_t i, j;

    for (i = 1; i < 10; i++) {
    2ce0:	42a2      	cmp	r2, r4
    2ce2:	d1f2      	bne.n	2cca <writePadBuffer+0x6>
    2ce4:	2300      	movs	r3, #0
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
        }
    }

    for (i = 0; i < bytesToWrite ; i++) {
        padSensorBuffer[9][i] = data[i];
    2ce6:	4c08      	ldr	r4, [pc, #32]	; (2d08 <writePadBuffer+0x44>)
        for (j = 0; j < bytesToWrite; j++) {
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
        }
    }

    for (i = 0; i < bytesToWrite ; i++) {
    2ce8:	b2da      	uxtb	r2, r3
    2cea:	4290      	cmp	r0, r2
    2cec:	d906      	bls.n	2cfc <writePadBuffer+0x38>
        padSensorBuffer[9][i] = data[i];
    2cee:	001a      	movs	r2, r3
    2cf0:	5ccd      	ldrb	r5, [r1, r3]
    2cf2:	323c      	adds	r2, #60	; 0x3c
    2cf4:	32ff      	adds	r2, #255	; 0xff
    2cf6:	54a5      	strb	r5, [r4, r2]
    2cf8:	3301      	adds	r3, #1
    2cfa:	e7f5      	b.n	2ce8 <writePadBuffer+0x24>
    }
}
    2cfc:	bd70      	pop	{r4, r5, r6, pc}
    2cfe:	46c0      	nop			; (mov r8, r8)
    2d00:	200004a7 	.word	0x200004a7
    2d04:	200005e2 	.word	0x200005e2
    2d08:	20000484 	.word	0x20000484

00002d0c <logFlight>:


void logFlight() {
    2d0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    2d0e:	2346      	movs	r3, #70	; 0x46
    2d10:	466a      	mov	r2, sp
    2d12:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    2d14:	2300      	movs	r3, #0

    offsets.TminusZeroTime = sample.sampleTick;

    dataToSend[2] = offsets.TminusZeroTime >> 0;
    2d16:	4669      	mov	r1, sp
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    2d18:	4668      	mov	r0, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;
    2d1a:	7053      	strb	r3, [r2, #1]

    offsets.TminusZeroTime = sample.sampleTick;
    2d1c:	4b11      	ldr	r3, [pc, #68]	; (2d64 <logFlight+0x58>)
    2d1e:	4a12      	ldr	r2, [pc, #72]	; (2d68 <logFlight+0x5c>)
    2d20:	685b      	ldr	r3, [r3, #4]

    dataToSend[2] = offsets.TminusZeroTime >> 0;
    2d22:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    2d24:	0a19      	lsrs	r1, r3, #8
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;

    offsets.TminusZeroTime = sample.sampleTick;
    2d26:	6053      	str	r3, [r2, #4]

    dataToSend[2] = offsets.TminusZeroTime >> 0;
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    2d28:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    2d2a:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.TminusZeroTime >> 24;
    2d2c:	0e1b      	lsrs	r3, r3, #24
    2d2e:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    2d30:	6993      	ldr	r3, [r2, #24]

    offsets.TminusZeroTime = sample.sampleTick;

    dataToSend[2] = offsets.TminusZeroTime >> 0;
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    2d32:	7101      	strb	r1, [r0, #4]
    dataToSend[5] = offsets.TminusZeroTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    2d34:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = offsets.TminusZeroTime >> 0;
    dataToSend[3] = offsets.TminusZeroTime >> 8;
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    dataToSend[5] = offsets.TminusZeroTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    2d36:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    2d38:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    2d3a:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    2d3c:	0e1b      	lsrs	r3, r3, #24
    2d3e:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    2d40:	6a13      	ldr	r3, [r2, #32]
    dataToSend[4] = offsets.TminusZeroTime >> 16;
    dataToSend[5] = offsets.TminusZeroTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    2d42:	7201      	strb	r1, [r0, #8]
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    2d44:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    2d46:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    2d48:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    2d4a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    2d4c:	0e1b      	lsrs	r3, r3, #24
    2d4e:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    2d50:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    dataToSend[12] = offsets.groundTemperature >> 16;
    2d52:	7302      	strb	r2, [r0, #12]
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    2d54:	73c3      	strb	r3, [r0, #15]
    dataToSend[5] = offsets.TminusZeroTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;
    2d56:	4669      	mov	r1, sp
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
    2d58:	2010      	movs	r0, #16
    2d5a:	4b04      	ldr	r3, [pc, #16]	; (2d6c <logFlight+0x60>)
    2d5c:	4798      	blx	r3
}
    2d5e:	b005      	add	sp, #20
    2d60:	bd00      	pop	{pc}
    2d62:	46c0      	nop			; (mov r8, r8)
    2d64:	200005f0 	.word	0x200005f0
    2d68:	20000150 	.word	0x20000150
    2d6c:	00002c35 	.word	0x00002c35

00002d70 <logEvent>:

void logEvent(u8_t eventType) {
    2d70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;
    2d72:	4d12      	ldr	r5, [pc, #72]	; (2dbc <logEvent+0x4c>)
    2d74:	4b12      	ldr	r3, [pc, #72]	; (2dc0 <logEvent+0x50>)
    2d76:	686a      	ldr	r2, [r5, #4]
    2d78:	685b      	ldr	r3, [r3, #4]

    dataToSend[0] = EVENT_LOG;
    2d7a:	ac01      	add	r4, sp, #4
void logEvent(u8_t eventType) {

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;
    2d7c:	1ad3      	subs	r3, r2, r3

    dataToSend[0] = EVENT_LOG;
    2d7e:	2245      	movs	r2, #69	; 0x45
    2d80:	7022      	strb	r2, [r4, #0]
    dataToSend[1] = eventType;
    dataToSend[2] = eventTick >> 0;
    dataToSend[3] = eventTick >> 8;
    2d82:	0a1a      	lsrs	r2, r3, #8
    dataToSend[4] = eventTick >> 16;
    dataToSend[5] = eventTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    2d84:	4e0f      	ldr	r6, [pc, #60]	; (2dc4 <logEvent+0x54>)

    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = eventTick >> 0;
    2d86:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = eventTick >> 8;
    2d88:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = eventTick >> 16;
    2d8a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = eventTick >> 24;
    2d8c:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = eventTick >> 0;
    dataToSend[3] = eventTick >> 8;
    dataToSend[4] = eventTick >> 16;
    2d8e:	7122      	strb	r2, [r4, #4]
    dataToSend[5] = eventTick >> 24;
    2d90:	7163      	strb	r3, [r4, #5]
    u8_t dataToSend[12];

    u32_t eventTick = sample.sampleTick - offsets.TminusZeroTime;

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    2d92:	7060      	strb	r0, [r4, #1]
    dataToSend[2] = eventTick >> 0;
    dataToSend[3] = eventTick >> 8;
    dataToSend[4] = eventTick >> 16;
    dataToSend[5] = eventTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    2d94:	47b0      	blx	r6
    2d96:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 8;
    2d98:	47b0      	blx	r6
    2d9a:	1200      	asrs	r0, r0, #8
    2d9c:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 16;
    2d9e:	47b0      	blx	r6
    2da0:	1400      	asrs	r0, r0, #16
    2da2:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = altitudeAGL() >> 24;
    2da4:	47b0      	blx	r6
    2da6:	1600      	asrs	r0, r0, #24
    2da8:	7260      	strb	r0, [r4, #9]

    dataToSend[10] = sample.voltage.batV >> 0;
    2daa:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    2dac:	0021      	movs	r1, r4
    dataToSend[6] = altitudeAGL() >> 0;
    dataToSend[7] = altitudeAGL() >> 8;
    dataToSend[8] = altitudeAGL() >> 16;
    dataToSend[9] = altitudeAGL() >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    2dae:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    2db0:	0a1b      	lsrs	r3, r3, #8
    2db2:	72e3      	strb	r3, [r4, #11]

    makePage(bytesToSend, dataToSend);
    2db4:	200c      	movs	r0, #12
    2db6:	4b04      	ldr	r3, [pc, #16]	; (2dc8 <logEvent+0x58>)
    2db8:	4798      	blx	r3

}
    2dba:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    2dbc:	200005f0 	.word	0x200005f0
    2dc0:	20000150 	.word	0x20000150
    2dc4:	00000b25 	.word	0x00000b25
    2dc8:	00002c35 	.word	0x00002c35

00002dcc <logSensors>:

void logSensors() {

    writeLog = false;
    2dcc:	2200      	movs	r2, #0

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2dce:	b5f0      	push	{r4, r5, r6, r7, lr}

    writeLog = false;
    2dd0:	4b59      	ldr	r3, [pc, #356]	; (2f38 <logSensors+0x16c>)

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2dd2:	b08f      	sub	sp, #60	; 0x3c

    writeLog = false;
    2dd4:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = SENSOR_LOG_LENGTH;
    u8_t dataToSend[SENSOR_LOG_LENGTH];

    float fractionalAccel = accel - (int16_t)(accel);
    2dd6:	4b59      	ldr	r3, [pc, #356]	; (2f3c <logSensors+0x170>)
    2dd8:	681e      	ldr	r6, [r3, #0]
    2dda:	685f      	ldr	r7, [r3, #4]
    int16_t fractAccelPart = fractionalAccel * 1000;
    2ddc:	4b58      	ldr	r3, [pc, #352]	; (2f40 <logSensors+0x174>)
    2dde:	0039      	movs	r1, r7
    2de0:	0030      	movs	r0, r6
    2de2:	4798      	blx	r3
    2de4:	4d57      	ldr	r5, [pc, #348]	; (2f44 <logSensors+0x178>)
    2de6:	b200      	sxth	r0, r0
    2de8:	47a8      	blx	r5
    2dea:	4c57      	ldr	r4, [pc, #348]	; (2f48 <logSensors+0x17c>)
    2dec:	0002      	movs	r2, r0
    2dee:	000b      	movs	r3, r1
    2df0:	0030      	movs	r0, r6
    2df2:	0039      	movs	r1, r7
    2df4:	47a0      	blx	r4
    2df6:	4f55      	ldr	r7, [pc, #340]	; (2f4c <logSensors+0x180>)
    2df8:	47b8      	blx	r7
    2dfa:	4b55      	ldr	r3, [pc, #340]	; (2f50 <logSensors+0x184>)
    2dfc:	4955      	ldr	r1, [pc, #340]	; (2f54 <logSensors+0x188>)
    2dfe:	4798      	blx	r3
    2e00:	4e55      	ldr	r6, [pc, #340]	; (2f58 <logSensors+0x18c>)
    2e02:	47b0      	blx	r6
    2e04:	b203      	sxth	r3, r0
    2e06:	9301      	str	r3, [sp, #4]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    2e08:	4b54      	ldr	r3, [pc, #336]	; (2f5c <logSensors+0x190>)
    2e0a:	681a      	ldr	r2, [r3, #0]
    2e0c:	685b      	ldr	r3, [r3, #4]
    2e0e:	9202      	str	r2, [sp, #8]
    2e10:	9303      	str	r3, [sp, #12]
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2e12:	0010      	movs	r0, r2
    2e14:	0019      	movs	r1, r3
    2e16:	4b4a      	ldr	r3, [pc, #296]	; (2f40 <logSensors+0x174>)
    2e18:	4798      	blx	r3
    2e1a:	b200      	sxth	r0, r0
    2e1c:	47a8      	blx	r5
    2e1e:	0002      	movs	r2, r0
    2e20:	000b      	movs	r3, r1
    2e22:	9802      	ldr	r0, [sp, #8]
    2e24:	9903      	ldr	r1, [sp, #12]
    2e26:	47a0      	blx	r4
    2e28:	47b8      	blx	r7
    2e2a:	494a      	ldr	r1, [pc, #296]	; (2f54 <logSensors+0x188>)
    2e2c:	4b48      	ldr	r3, [pc, #288]	; (2f50 <logSensors+0x184>)
    2e2e:	4798      	blx	r3
    2e30:	47b0      	blx	r6

    dataToSend[0] = SENSOR_LOG;
    2e32:	2353      	movs	r3, #83	; 0x53

    dataToSend[1] = sample.sampleTick >> 0;
    2e34:	4d4a      	ldr	r5, [pc, #296]	; (2f60 <logSensors+0x194>)
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;
    2e36:	ac05      	add	r4, sp, #20
    2e38:	7023      	strb	r3, [r4, #0]

    dataToSend[1] = sample.sampleTick >> 0;
    2e3a:	686b      	ldr	r3, [r5, #4]

    float fractionalAccel = accel - (int16_t)(accel);
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2e3c:	b206      	sxth	r6, r0

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    2e3e:	0a1a      	lsrs	r2, r3, #8
    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    2e40:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    2e42:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    2e44:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    2e46:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    2e48:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    2e4a:	7123      	strb	r3, [r4, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    2e4c:	4f45      	ldr	r7, [pc, #276]	; (2f64 <logSensors+0x198>)
    2e4e:	47b8      	blx	r7
    2e50:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    2e52:	47b8      	blx	r7
    2e54:	1200      	asrs	r0, r0, #8
    2e56:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    2e58:	47b8      	blx	r7
    2e5a:	1400      	asrs	r0, r0, #16
    2e5c:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    2e5e:	47b8      	blx	r7

    dataToSend[9] = (int16_t)(accel) >> 0;
    2e60:	4b36      	ldr	r3, [pc, #216]	; (2f3c <logSensors+0x170>)
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    2e62:	1600      	asrs	r0, r0, #24
    2e64:	7220      	strb	r0, [r4, #8]

    dataToSend[9] = (int16_t)(accel) >> 0;
    2e66:	6818      	ldr	r0, [r3, #0]
    2e68:	6859      	ldr	r1, [r3, #4]
    2e6a:	4b35      	ldr	r3, [pc, #212]	; (2f40 <logSensors+0x174>)
    2e6c:	4798      	blx	r3
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2e6e:	466b      	mov	r3, sp
    2e70:	791b      	ldrb	r3, [r3, #4]
    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    2e72:	b200      	sxth	r0, r0
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2e74:	72e3      	strb	r3, [r4, #11]
    dataToSend[12] = fractAccelPart >> 8;
    2e76:	9b01      	ldr	r3, [sp, #4]
    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    2e78:	7260      	strb	r0, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    2e7a:	1200      	asrs	r0, r0, #8
    2e7c:	72a0      	strb	r0, [r4, #10]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    2e7e:	1218      	asrs	r0, r3, #8

    dataToSend[13] = (int16_t)(velocity) >> 0;
    2e80:	4b36      	ldr	r3, [pc, #216]	; (2f5c <logSensors+0x190>)
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    2e82:	7320      	strb	r0, [r4, #12]

    dataToSend[13] = (int16_t)(velocity) >> 0;
    2e84:	6818      	ldr	r0, [r3, #0]
    2e86:	6859      	ldr	r1, [r3, #4]
    2e88:	4b2d      	ldr	r3, [pc, #180]	; (2f40 <logSensors+0x174>)
    2e8a:	4798      	blx	r3
    2e8c:	b200      	sxth	r0, r0
    2e8e:	7360      	strb	r0, [r4, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    2e90:	73e6      	strb	r6, [r4, #15]
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2e92:	1200      	asrs	r0, r0, #8
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    2e94:	1236      	asrs	r6, r6, #8

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2e96:	4b34      	ldr	r3, [pc, #208]	; (2f68 <logSensors+0x19c>)
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2e98:	73a0      	strb	r0, [r4, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    2e9a:	7426      	strb	r6, [r4, #16]

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2e9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
    2e9e:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    2ea0:	4798      	blx	r3
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    2ea2:	0a03      	lsrs	r3, r0, #8
    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    2ea4:	7460      	strb	r0, [r4, #17]
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    2ea6:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    2ea8:	0c03      	lsrs	r3, r0, #16
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;
    2eaa:	0e00      	lsrs	r0, r0, #24
    2eac:	7520      	strb	r0, [r4, #20]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    2eae:	74e3      	strb	r3, [r4, #19]
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    2eb0:	2220      	movs	r2, #32
    2eb2:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    makePage(bytesToSend, dataToSend);
    2eb4:	0021      	movs	r1, r4
    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    2eb6:	7563      	strb	r3, [r4, #21]
    dataToSend[22] = sample.accelXint >> 8;
    2eb8:	121b      	asrs	r3, r3, #8
    2eba:	75a3      	strb	r3, [r4, #22]

    dataToSend[23] = sample.accelYint >> 0;
    2ebc:	2228      	movs	r2, #40	; 0x28
    2ebe:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    makePage(bytesToSend, dataToSend);
    2ec0:	2023      	movs	r0, #35	; 0x23
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    dataToSend[22] = sample.accelXint >> 8;

    dataToSend[23] = sample.accelYint >> 0;
    2ec2:	75e3      	strb	r3, [r4, #23]
    dataToSend[24] = sample.accelYint >> 8;
    2ec4:	121b      	asrs	r3, r3, #8
    2ec6:	7623      	strb	r3, [r4, #24]

    dataToSend[25] = sample.accelZint >> 0;
    2ec8:	2230      	movs	r2, #48	; 0x30
    2eca:	5eab      	ldrsh	r3, [r5, r2]
    2ecc:	7663      	strb	r3, [r4, #25]
    dataToSend[26] = sample.accelZint >> 8;
    2ece:	121b      	asrs	r3, r3, #8
    2ed0:	76a3      	strb	r3, [r4, #26]

    dataToSend[27] = sample.gyroXint >> 0;
    2ed2:	2238      	movs	r2, #56	; 0x38
    2ed4:	5eab      	ldrsh	r3, [r5, r2]
    2ed6:	76e3      	strb	r3, [r4, #27]
    dataToSend[28] = sample.gyroXint >> 8;
    2ed8:	121b      	asrs	r3, r3, #8
    2eda:	7723      	strb	r3, [r4, #28]

    dataToSend[29] = sample.gyroYint >> 0;
    2edc:	1cab      	adds	r3, r5, #2
    2ede:	223e      	movs	r2, #62	; 0x3e
    2ee0:	5e9b      	ldrsh	r3, [r3, r2]
    2ee2:	7763      	strb	r3, [r4, #29]
    dataToSend[30] = sample.gyroYint >> 8;
    2ee4:	121b      	asrs	r3, r3, #8
    2ee6:	77a3      	strb	r3, [r4, #30]

    dataToSend[31] = sample.gyroZint >> 0;
    2ee8:	002b      	movs	r3, r5
    2eea:	3348      	adds	r3, #72	; 0x48
    2eec:	2200      	movs	r2, #0
    2eee:	5e9b      	ldrsh	r3, [r3, r2]
    dataToSend[32] = sample.gyroZint >> 8;
    2ef0:	aa04      	add	r2, sp, #16
    dataToSend[28] = sample.gyroXint >> 8;

    dataToSend[29] = sample.gyroYint >> 0;
    dataToSend[30] = sample.gyroYint >> 8;

    dataToSend[31] = sample.gyroZint >> 0;
    2ef2:	77e3      	strb	r3, [r4, #31]
    dataToSend[32] = sample.gyroZint >> 8;
    2ef4:	3205      	adds	r2, #5
    2ef6:	121b      	asrs	r3, r3, #8
    2ef8:	77d3      	strb	r3, [r2, #31]

    dataToSend[33] = sample.analogRaw >> 0;
    2efa:	8b2b      	ldrh	r3, [r5, #24]
    2efc:	aa04      	add	r2, sp, #16
    2efe:	3206      	adds	r2, #6
    2f00:	77d3      	strb	r3, [r2, #31]
    dataToSend[34] = sample.analogRaw >> 8;
    2f02:	aa04      	add	r2, sp, #16
    2f04:	3207      	adds	r2, #7
    2f06:	0a1b      	lsrs	r3, r3, #8
    2f08:	77d3      	strb	r3, [r2, #31]

    makePage(bytesToSend, dataToSend);
    2f0a:	4b18      	ldr	r3, [pc, #96]	; (2f6c <logSensors+0x1a0>)
    2f0c:	4798      	blx	r3

    if (pageReady) {
    2f0e:	4b18      	ldr	r3, [pc, #96]	; (2f70 <logSensors+0x1a4>)
    2f10:	781a      	ldrb	r2, [r3, #0]
    2f12:	2a00      	cmp	r2, #0
    2f14:	d00e      	beq.n	2f34 <logSensors+0x168>
        pageReady = false;
    2f16:	2200      	movs	r2, #0
    2f18:	701a      	strb	r2, [r3, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    2f1a:	2280      	movs	r2, #128	; 0x80
    2f1c:	4b15      	ldr	r3, [pc, #84]	; (2f74 <logSensors+0x1a8>)
        pinToggle(LedPin);
        AT25SEWritePage(currentAddress,pageToWrite);
    2f1e:	4c16      	ldr	r4, [pc, #88]	; (2f78 <logSensors+0x1ac>)
    2f20:	0352      	lsls	r2, r2, #13
    2f22:	61da      	str	r2, [r3, #28]
    2f24:	4915      	ldr	r1, [pc, #84]	; (2f7c <logSensors+0x1b0>)
    2f26:	4b16      	ldr	r3, [pc, #88]	; (2f80 <logSensors+0x1b4>)
    2f28:	6820      	ldr	r0, [r4, #0]
    2f2a:	4798      	blx	r3
        currentAddress = (currentAddress + 0x100);
    2f2c:	6823      	ldr	r3, [r4, #0]
    2f2e:	3301      	adds	r3, #1
    2f30:	33ff      	adds	r3, #255	; 0xff
    2f32:	6023      	str	r3, [r4, #0]
    }

}
    2f34:	b00f      	add	sp, #60	; 0x3c
    2f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f38:	2000019a 	.word	0x2000019a
    2f3c:	200002e8 	.word	0x200002e8
    2f40:	00006bb9 	.word	0x00006bb9
    2f44:	00006c25 	.word	0x00006c25
    2f48:	000064d1 	.word	0x000064d1
    2f4c:	00006dc1 	.word	0x00006dc1
    2f50:	00004ed1 	.word	0x00004ed1
    2f54:	447a0000 	.word	0x447a0000
    2f58:	000050f9 	.word	0x000050f9
    2f5c:	20000308 	.word	0x20000308
    2f60:	200005f0 	.word	0x200005f0
    2f64:	00000b25 	.word	0x00000b25
    2f68:	00004e95 	.word	0x00004e95
    2f6c:	00002c35 	.word	0x00002c35
    2f70:	2000047a 	.word	0x2000047a
    2f74:	41004400 	.word	0x41004400
    2f78:	20000480 	.word	0x20000480
    2f7c:	2000037a 	.word	0x2000037a
    2f80:	000002a5 	.word	0x000002a5

00002f84 <logSensorsOnPad>:

void logSensorsOnPad() {

    writeLog = false;
    2f84:	2200      	movs	r2, #0
        currentAddress = (currentAddress + 0x100);
    }

}

void logSensorsOnPad() {
    2f86:	b5f0      	push	{r4, r5, r6, r7, lr}

    writeLog = false;
    2f88:	4b50      	ldr	r3, [pc, #320]	; (30cc <logSensorsOnPad+0x148>)
        currentAddress = (currentAddress + 0x100);
    }

}

void logSensorsOnPad() {
    2f8a:	b08f      	sub	sp, #60	; 0x3c

    writeLog = false;
    2f8c:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = SENSOR_LOG_LENGTH;
    u8_t dataToSend[SENSOR_LOG_LENGTH];

    float fractionalAccel = accel - (int16_t)(accel);
    2f8e:	4b50      	ldr	r3, [pc, #320]	; (30d0 <logSensorsOnPad+0x14c>)
    2f90:	681c      	ldr	r4, [r3, #0]
    2f92:	685d      	ldr	r5, [r3, #4]
    int16_t fractAccelPart = fractionalAccel * 1000;
    2f94:	4b4f      	ldr	r3, [pc, #316]	; (30d4 <logSensorsOnPad+0x150>)
    2f96:	0029      	movs	r1, r5
    2f98:	0020      	movs	r0, r4
    2f9a:	4798      	blx	r3
    2f9c:	4e4e      	ldr	r6, [pc, #312]	; (30d8 <logSensorsOnPad+0x154>)
    2f9e:	b200      	sxth	r0, r0
    2fa0:	47b0      	blx	r6
    2fa2:	4f4e      	ldr	r7, [pc, #312]	; (30dc <logSensorsOnPad+0x158>)
    2fa4:	0002      	movs	r2, r0
    2fa6:	000b      	movs	r3, r1
    2fa8:	0020      	movs	r0, r4
    2faa:	0029      	movs	r1, r5
    2fac:	47b8      	blx	r7
    2fae:	4c4c      	ldr	r4, [pc, #304]	; (30e0 <logSensorsOnPad+0x15c>)
    2fb0:	47a0      	blx	r4
    2fb2:	4d4c      	ldr	r5, [pc, #304]	; (30e4 <logSensorsOnPad+0x160>)
    2fb4:	494c      	ldr	r1, [pc, #304]	; (30e8 <logSensorsOnPad+0x164>)
    2fb6:	47a8      	blx	r5
    2fb8:	4b4c      	ldr	r3, [pc, #304]	; (30ec <logSensorsOnPad+0x168>)
    2fba:	4798      	blx	r3
    2fbc:	b203      	sxth	r3, r0
    2fbe:	9301      	str	r3, [sp, #4]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    2fc0:	4b4b      	ldr	r3, [pc, #300]	; (30f0 <logSensorsOnPad+0x16c>)
    2fc2:	681a      	ldr	r2, [r3, #0]
    2fc4:	685b      	ldr	r3, [r3, #4]
    2fc6:	9202      	str	r2, [sp, #8]
    2fc8:	9303      	str	r3, [sp, #12]
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2fca:	0010      	movs	r0, r2
    2fcc:	0019      	movs	r1, r3
    2fce:	4b41      	ldr	r3, [pc, #260]	; (30d4 <logSensorsOnPad+0x150>)
    2fd0:	4798      	blx	r3
    2fd2:	b200      	sxth	r0, r0
    2fd4:	47b0      	blx	r6
    2fd6:	0002      	movs	r2, r0
    2fd8:	000b      	movs	r3, r1
    2fda:	9802      	ldr	r0, [sp, #8]
    2fdc:	9903      	ldr	r1, [sp, #12]
    2fde:	47b8      	blx	r7
    2fe0:	47a0      	blx	r4
    2fe2:	4941      	ldr	r1, [pc, #260]	; (30e8 <logSensorsOnPad+0x164>)
    2fe4:	47a8      	blx	r5
    2fe6:	4b41      	ldr	r3, [pc, #260]	; (30ec <logSensorsOnPad+0x168>)
    2fe8:	4798      	blx	r3

    dataToSend[0] = SENSOR_LOG;
    2fea:	2353      	movs	r3, #83	; 0x53

    dataToSend[1] = sample.sampleTick >> 0;
    2fec:	4d41      	ldr	r5, [pc, #260]	; (30f4 <logSensorsOnPad+0x170>)
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;
    2fee:	ac05      	add	r4, sp, #20
    2ff0:	7023      	strb	r3, [r4, #0]

    dataToSend[1] = sample.sampleTick >> 0;
    2ff2:	686b      	ldr	r3, [r5, #4]

    float fractionalAccel = accel - (int16_t)(accel);
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2ff4:	b206      	sxth	r6, r0

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    2ff6:	0a1a      	lsrs	r2, r3, #8
    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    2ff8:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    2ffa:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    2ffc:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    2ffe:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    3000:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    3002:	7123      	strb	r3, [r4, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    3004:	4f3c      	ldr	r7, [pc, #240]	; (30f8 <logSensorsOnPad+0x174>)
    3006:	47b8      	blx	r7
    3008:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    300a:	47b8      	blx	r7
    300c:	1200      	asrs	r0, r0, #8
    300e:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    3010:	47b8      	blx	r7
    3012:	1400      	asrs	r0, r0, #16
    3014:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    3016:	47b8      	blx	r7

    dataToSend[9] = (int16_t)(accel) >> 0;
    3018:	4b2d      	ldr	r3, [pc, #180]	; (30d0 <logSensorsOnPad+0x14c>)
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    301a:	1600      	asrs	r0, r0, #24
    301c:	7220      	strb	r0, [r4, #8]

    dataToSend[9] = (int16_t)(accel) >> 0;
    301e:	6818      	ldr	r0, [r3, #0]
    3020:	6859      	ldr	r1, [r3, #4]
    3022:	4b2c      	ldr	r3, [pc, #176]	; (30d4 <logSensorsOnPad+0x150>)
    3024:	4798      	blx	r3
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    3026:	466b      	mov	r3, sp
    3028:	791b      	ldrb	r3, [r3, #4]
    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    302a:	b200      	sxth	r0, r0
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    302c:	72e3      	strb	r3, [r4, #11]
    dataToSend[12] = fractAccelPart >> 8;
    302e:	9b01      	ldr	r3, [sp, #4]
    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    3030:	7260      	strb	r0, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    3032:	1200      	asrs	r0, r0, #8
    3034:	72a0      	strb	r0, [r4, #10]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    3036:	1218      	asrs	r0, r3, #8

    dataToSend[13] = (int16_t)(velocity) >> 0;
    3038:	4b2d      	ldr	r3, [pc, #180]	; (30f0 <logSensorsOnPad+0x16c>)
    dataToSend[8] = altitudeAGL() >> 24;

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    303a:	7320      	strb	r0, [r4, #12]

    dataToSend[13] = (int16_t)(velocity) >> 0;
    303c:	6818      	ldr	r0, [r3, #0]
    303e:	6859      	ldr	r1, [r3, #4]
    3040:	4b24      	ldr	r3, [pc, #144]	; (30d4 <logSensorsOnPad+0x150>)
    3042:	4798      	blx	r3
    3044:	b200      	sxth	r0, r0
    3046:	7360      	strb	r0, [r4, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    3048:	73e6      	strb	r6, [r4, #15]
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    304a:	1200      	asrs	r0, r0, #8
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    304c:	1236      	asrs	r6, r6, #8
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    304e:	73a0      	strb	r0, [r4, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    3050:	4b2a      	ldr	r3, [pc, #168]	; (30fc <logSensorsOnPad+0x178>)
    3052:	6da8      	ldr	r0, [r5, #88]	; 0x58
    3054:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    dataToSend[12] = fractAccelPart >> 8;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    3056:	7426      	strb	r6, [r4, #16]

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    3058:	4798      	blx	r3
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    305a:	0a03      	lsrs	r3, r0, #8
    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    305c:	7460      	strb	r0, [r4, #17]
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    305e:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    3060:	0c03      	lsrs	r3, r0, #16
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;
    3062:	0e00      	lsrs	r0, r0, #24
    3064:	7520      	strb	r0, [r4, #20]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    3066:	74e3      	strb	r3, [r4, #19]
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    3068:	2220      	movs	r2, #32
    306a:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    writePadBuffer(bytesToSend, dataToSend);
    306c:	0021      	movs	r1, r4
    dataToSend[17] = (uint32_t)(sample.pressureAltitude) >> 0;
    dataToSend[18] = (uint32_t)(sample.pressureAltitude) >> 8;
    dataToSend[19] = (uint32_t)(sample.pressureAltitude) >> 16;
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    306e:	7563      	strb	r3, [r4, #21]
    dataToSend[22] = sample.accelXint >> 8;
    3070:	121b      	asrs	r3, r3, #8
    3072:	75a3      	strb	r3, [r4, #22]

    dataToSend[23] = sample.accelYint >> 0;
    3074:	2228      	movs	r2, #40	; 0x28
    3076:	5eab      	ldrsh	r3, [r5, r2]
    dataToSend[32] = sample.gyroZint >> 8;

    dataToSend[33] = sample.analogRaw >> 0;
    dataToSend[34] = sample.analogRaw >> 8;

    writePadBuffer(bytesToSend, dataToSend);
    3078:	2023      	movs	r0, #35	; 0x23
    dataToSend[20] = (uint32_t)(sample.pressureAltitude) >> 24;

    dataToSend[21] = sample.accelXint >> 0;
    dataToSend[22] = sample.accelXint >> 8;

    dataToSend[23] = sample.accelYint >> 0;
    307a:	75e3      	strb	r3, [r4, #23]
    dataToSend[24] = sample.accelYint >> 8;
    307c:	121b      	asrs	r3, r3, #8
    307e:	7623      	strb	r3, [r4, #24]

    dataToSend[25] = sample.accelZint >> 0;
    3080:	2230      	movs	r2, #48	; 0x30
    3082:	5eab      	ldrsh	r3, [r5, r2]
    3084:	7663      	strb	r3, [r4, #25]
    dataToSend[26] = sample.accelZint >> 8;
    3086:	121b      	asrs	r3, r3, #8
    3088:	76a3      	strb	r3, [r4, #26]

    dataToSend[27] = sample.gyroXint >> 0;
    308a:	2238      	movs	r2, #56	; 0x38
    308c:	5eab      	ldrsh	r3, [r5, r2]
    308e:	76e3      	strb	r3, [r4, #27]
    dataToSend[28] = sample.gyroXint >> 8;
    3090:	121b      	asrs	r3, r3, #8
    3092:	7723      	strb	r3, [r4, #28]

    dataToSend[29] = sample.gyroYint >> 0;
    3094:	1cab      	adds	r3, r5, #2
    3096:	223e      	movs	r2, #62	; 0x3e
    3098:	5e9b      	ldrsh	r3, [r3, r2]
    309a:	7763      	strb	r3, [r4, #29]
    dataToSend[30] = sample.gyroYint >> 8;
    309c:	121b      	asrs	r3, r3, #8
    309e:	77a3      	strb	r3, [r4, #30]

    dataToSend[31] = sample.gyroZint >> 0;
    30a0:	002b      	movs	r3, r5
    30a2:	3348      	adds	r3, #72	; 0x48
    30a4:	2200      	movs	r2, #0
    30a6:	5e9b      	ldrsh	r3, [r3, r2]
    dataToSend[32] = sample.gyroZint >> 8;
    30a8:	aa04      	add	r2, sp, #16
    dataToSend[28] = sample.gyroXint >> 8;

    dataToSend[29] = sample.gyroYint >> 0;
    dataToSend[30] = sample.gyroYint >> 8;

    dataToSend[31] = sample.gyroZint >> 0;
    30aa:	77e3      	strb	r3, [r4, #31]
    dataToSend[32] = sample.gyroZint >> 8;
    30ac:	3205      	adds	r2, #5
    30ae:	121b      	asrs	r3, r3, #8
    30b0:	77d3      	strb	r3, [r2, #31]

    dataToSend[33] = sample.analogRaw >> 0;
    30b2:	8b2b      	ldrh	r3, [r5, #24]
    30b4:	aa04      	add	r2, sp, #16
    30b6:	3206      	adds	r2, #6
    30b8:	77d3      	strb	r3, [r2, #31]
    dataToSend[34] = sample.analogRaw >> 8;
    30ba:	aa04      	add	r2, sp, #16
    30bc:	3207      	adds	r2, #7
    30be:	0a1b      	lsrs	r3, r3, #8
    30c0:	77d3      	strb	r3, [r2, #31]

    writePadBuffer(bytesToSend, dataToSend);
    30c2:	4b0f      	ldr	r3, [pc, #60]	; (3100 <logSensorsOnPad+0x17c>)
    30c4:	4798      	blx	r3

}
    30c6:	b00f      	add	sp, #60	; 0x3c
    30c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    30ca:	46c0      	nop			; (mov r8, r8)
    30cc:	2000019a 	.word	0x2000019a
    30d0:	200002e8 	.word	0x200002e8
    30d4:	00006bb9 	.word	0x00006bb9
    30d8:	00006c25 	.word	0x00006c25
    30dc:	000064d1 	.word	0x000064d1
    30e0:	00006dc1 	.word	0x00006dc1
    30e4:	00004ed1 	.word	0x00004ed1
    30e8:	447a0000 	.word	0x447a0000
    30ec:	000050f9 	.word	0x000050f9
    30f0:	20000308 	.word	0x20000308
    30f4:	200005f0 	.word	0x200005f0
    30f8:	00000b25 	.word	0x00000b25
    30fc:	00004e95 	.word	0x00004e95
    3100:	00002cc5 	.word	0x00002cc5

00003104 <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    3104:	2306      	movs	r3, #6

}



u32_t getFlightStartAddress(u8_t flightToFind) {
    3106:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    3108:	4358      	muls	r0, r3
    310a:	ac01      	add	r4, sp, #4
    310c:	3001      	adds	r0, #1
    310e:	30ff      	adds	r0, #255	; 0xff
    3110:	0022      	movs	r2, r4
    3112:	2103      	movs	r1, #3
    3114:	4b04      	ldr	r3, [pc, #16]	; (3128 <getFlightStartAddress+0x24>)
    3116:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    3118:	7860      	ldrb	r0, [r4, #1]
    311a:	78a3      	ldrb	r3, [r4, #2]
    311c:	0200      	lsls	r0, r0, #8
    311e:	041b      	lsls	r3, r3, #16
    3120:	4318      	orrs	r0, r3
    3122:	7823      	ldrb	r3, [r4, #0]
    3124:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    3126:	bd16      	pop	{r1, r2, r4, pc}
    3128:	00000301 	.word	0x00000301

0000312c <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    312c:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    312e:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    3130:	4358      	muls	r0, r3
    3132:	ac01      	add	r4, sp, #4
    3134:	3004      	adds	r0, #4
    3136:	30ff      	adds	r0, #255	; 0xff
    3138:	0022      	movs	r2, r4
    313a:	2103      	movs	r1, #3
    313c:	4b04      	ldr	r3, [pc, #16]	; (3150 <FindFlightEndingAddress+0x24>)
    313e:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    3140:	7860      	ldrb	r0, [r4, #1]
    3142:	78a3      	ldrb	r3, [r4, #2]
    3144:	0200      	lsls	r0, r0, #8
    3146:	041b      	lsls	r3, r3, #16
    3148:	4318      	orrs	r0, r3
    314a:	7823      	ldrb	r3, [r4, #0]
    314c:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    314e:	bd16      	pop	{r1, r2, r4, pc}
    3150:	00000301 	.word	0x00000301

00003154 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    3154:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    3156:	4b04      	ldr	r3, [pc, #16]	; (3168 <isFlightLogged+0x14>)
    3158:	4798      	blx	r3
    315a:	4b04      	ldr	r3, [pc, #16]	; (316c <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    315c:	18c0      	adds	r0, r0, r3
    315e:	1e43      	subs	r3, r0, #1
    3160:	4198      	sbcs	r0, r3
    3162:	b2c0      	uxtb	r0, r0
    3164:	bd10      	pop	{r4, pc}
    3166:	46c0      	nop			; (mov r8, r8)
    3168:	00003105 	.word	0x00003105
    316c:	ff000001 	.word	0xff000001

00003170 <writeFlightStartAddress>:

void writeFlightStartAddress() {
    3170:	b510      	push	{r4, lr}
    AT25SFWriteBytes(flightAddressLocationInIndex,3,flightStartAddress);
    3172:	4b03      	ldr	r3, [pc, #12]	; (3180 <writeFlightStartAddress+0x10>)
    3174:	4a03      	ldr	r2, [pc, #12]	; (3184 <writeFlightStartAddress+0x14>)
    3176:	8818      	ldrh	r0, [r3, #0]
    3178:	2103      	movs	r1, #3
    317a:	4b03      	ldr	r3, [pc, #12]	; (3188 <writeFlightStartAddress+0x18>)
    317c:	4798      	blx	r3
}
    317e:	bd10      	pop	{r4, pc}
    3180:	20000378 	.word	0x20000378
    3184:	2000047b 	.word	0x2000047b
    3188:	00000241 	.word	0x00000241

0000318c <writeFlightEndAddress>:




void writeFlightEndAddress() {
    318c:	b507      	push	{r0, r1, r2, lr}
    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    318e:	2006      	movs	r0, #6



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    3190:	4b09      	ldr	r3, [pc, #36]	; (31b8 <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    3192:	aa01      	add	r2, sp, #4



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    3194:	681b      	ldr	r3, [r3, #0]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    3196:	7013      	strb	r3, [r2, #0]
    3198:	0a19      	lsrs	r1, r3, #8
    319a:	0c1b      	lsrs	r3, r3, #16
    319c:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    319e:	4b07      	ldr	r3, [pc, #28]	; (31bc <writeFlightEndAddress+0x30>)

void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    31a0:	7051      	strb	r1, [r2, #1]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    31a2:	781b      	ldrb	r3, [r3, #0]
    31a4:	2103      	movs	r1, #3
    31a6:	4358      	muls	r0, r3
    31a8:	3004      	adds	r0, #4
    31aa:	30ff      	adds	r0, #255	; 0xff
    31ac:	4b04      	ldr	r3, [pc, #16]	; (31c0 <writeFlightEndAddress+0x34>)
    31ae:	4798      	blx	r3
    delay_ms(10);
    31b0:	200a      	movs	r0, #10
    31b2:	4b04      	ldr	r3, [pc, #16]	; (31c4 <writeFlightEndAddress+0x38>)
    31b4:	4798      	blx	r3
}
    31b6:	bd07      	pop	{r0, r1, r2, pc}
    31b8:	20000480 	.word	0x20000480
    31bc:	2000019b 	.word	0x2000019b
    31c0:	00000241 	.word	0x00000241
    31c4:	000010fd 	.word	0x000010fd

000031c8 <writeGroundLog>:

void writeGroundLog() {
    31c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31ca:	2780      	movs	r7, #128	; 0x80
    u8_t i;

    for (i = 0; i < 10; i++) {
    31cc:	26af      	movs	r6, #175	; 0xaf
    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    delay_ms(10);
}

void writeGroundLog() {
    31ce:	2400      	movs	r4, #0
    31d0:	037f      	lsls	r7, r7, #13
    u8_t i;

    for (i = 0; i < 10; i++) {
    31d2:	0076      	lsls	r6, r6, #1
        makePage(SENSOR_LOG_LENGTH, &padSensorBuffer[i][0]);
    31d4:	490c      	ldr	r1, [pc, #48]	; (3208 <writeGroundLog+0x40>)
    31d6:	4b0d      	ldr	r3, [pc, #52]	; (320c <writeGroundLog+0x44>)
    31d8:	1861      	adds	r1, r4, r1
    31da:	2023      	movs	r0, #35	; 0x23
    31dc:	4798      	blx	r3

        if (pageReady) {
    31de:	4b0c      	ldr	r3, [pc, #48]	; (3210 <writeGroundLog+0x48>)
    31e0:	781a      	ldrb	r2, [r3, #0]
    31e2:	2a00      	cmp	r2, #0
    31e4:	d00c      	beq.n	3200 <writeGroundLog+0x38>
            pageReady = false;
    31e6:	2200      	movs	r2, #0
    31e8:	701a      	strb	r2, [r3, #0]
    31ea:	4b0a      	ldr	r3, [pc, #40]	; (3214 <writeGroundLog+0x4c>)
            pinToggle(LedPin);
            AT25SEWritePage(currentAddress,pageToWrite);
    31ec:	4d0a      	ldr	r5, [pc, #40]	; (3218 <writeGroundLog+0x50>)
    31ee:	61df      	str	r7, [r3, #28]
    31f0:	490a      	ldr	r1, [pc, #40]	; (321c <writeGroundLog+0x54>)
    31f2:	4b0b      	ldr	r3, [pc, #44]	; (3220 <writeGroundLog+0x58>)
    31f4:	6828      	ldr	r0, [r5, #0]
    31f6:	4798      	blx	r3
            currentAddress = (currentAddress + 0x100);
    31f8:	682b      	ldr	r3, [r5, #0]
    31fa:	3301      	adds	r3, #1
    31fc:	33ff      	adds	r3, #255	; 0xff
    31fe:	602b      	str	r3, [r5, #0]
    3200:	3423      	adds	r4, #35	; 0x23
}

void writeGroundLog() {
    u8_t i;

    for (i = 0; i < 10; i++) {
    3202:	42b4      	cmp	r4, r6
    3204:	d1e6      	bne.n	31d4 <writeGroundLog+0xc>
            currentAddress = (currentAddress + 0x100);
        }

    }

}
    3206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3208:	20000484 	.word	0x20000484
    320c:	00002c35 	.word	0x00002c35
    3210:	2000047a 	.word	0x2000047a
    3214:	41004400 	.word	0x41004400
    3218:	20000480 	.word	0x20000480
    321c:	2000037a 	.word	0x2000037a
    3220:	000002a5 	.word	0x000002a5

00003224 <beginFlightLog>:

void beginFlightLog() {
    3224:	b510      	push	{r4, lr}
    writeFlightStartAddress();
    3226:	4b05      	ldr	r3, [pc, #20]	; (323c <beginFlightLog+0x18>)
    3228:	4798      	blx	r3
    logFlight( );
    322a:	4b05      	ldr	r3, [pc, #20]	; (3240 <beginFlightLog+0x1c>)
    322c:	4798      	blx	r3
    writeGroundLog();
    322e:	4b05      	ldr	r3, [pc, #20]	; (3244 <beginFlightLog+0x20>)
    3230:	4798      	blx	r3
    logEvent('L');
    3232:	204c      	movs	r0, #76	; 0x4c
    3234:	4b04      	ldr	r3, [pc, #16]	; (3248 <beginFlightLog+0x24>)
    3236:	4798      	blx	r3

}
    3238:	bd10      	pop	{r4, pc}
    323a:	46c0      	nop			; (mov r8, r8)
    323c:	00003171 	.word	0x00003171
    3240:	00002d0d 	.word	0x00002d0d
    3244:	000031c9 	.word	0x000031c9
    3248:	00002d71 	.word	0x00002d71

0000324c <findNewFlightStart>:


void findNewFlightStart() {
    324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    324e:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    3250:	0020      	movs	r0, r4
    3252:	4b21      	ldr	r3, [pc, #132]	; (32d8 <findNewFlightStart+0x8c>)
    3254:	4798      	blx	r3
    3256:	2800      	cmp	r0, #0
    3258:	d138      	bne.n	32cc <findNewFlightStart+0x80>
    325a:	4f20      	ldr	r7, [pc, #128]	; (32dc <findNewFlightStart+0x90>)
    325c:	4d20      	ldr	r5, [pc, #128]	; (32e0 <findNewFlightStart+0x94>)

            if (flightNumbToCheck > 0) {
    325e:	2c00      	cmp	r4, #0
    3260:	d014      	beq.n	328c <findNewFlightStart+0x40>

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    3262:	1e60      	subs	r0, r4, #1
    3264:	4b1f      	ldr	r3, [pc, #124]	; (32e4 <findNewFlightStart+0x98>)
    3266:	b2c0      	uxtb	r0, r0
    3268:	4798      	blx	r3
    326a:	0006      	movs	r6, r0
                delay_ms(5);
    326c:	4b1e      	ldr	r3, [pc, #120]	; (32e8 <findNewFlightStart+0x9c>)
    326e:	2005      	movs	r0, #5
    3270:	4798      	blx	r3

                currentAddress = startAddress;

                flightStartAddress[0] = startAddress >> 0;
                flightStartAddress[1] = startAddress >> 8;
    3272:	0a33      	lsrs	r3, r6, #8
    3274:	706b      	strb	r3, [r5, #1]
                flightStartAddress[2] = startAddress >> 16;

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    3276:	2306      	movs	r3, #6
    3278:	4363      	muls	r3, r4
    327a:	4a1c      	ldr	r2, [pc, #112]	; (32ec <findNewFlightStart+0xa0>)
    327c:	3301      	adds	r3, #1
            if (flightNumbToCheck > 0) {

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;
    327e:	603e      	str	r6, [r7, #0]

                flightStartAddress[0] = startAddress >> 0;
    3280:	702e      	strb	r6, [r5, #0]
                flightStartAddress[1] = startAddress >> 8;
                flightStartAddress[2] = startAddress >> 16;

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    3282:	33ff      	adds	r3, #255	; 0xff

                currentAddress = startAddress;

                flightStartAddress[0] = startAddress >> 0;
                flightStartAddress[1] = startAddress >> 8;
                flightStartAddress[2] = startAddress >> 16;
    3284:	0c36      	lsrs	r6, r6, #16
    3286:	70ae      	strb	r6, [r5, #2]

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    3288:	8013      	strh	r3, [r2, #0]
    328a:	e00d      	b.n	32a8 <findNewFlightStart+0x5c>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
                flightStartAddress[1] = 0x10;
    328c:	2310      	movs	r3, #16
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;
    328e:	4a17      	ldr	r2, [pc, #92]	; (32ec <findNewFlightStart+0xa0>)
                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
                flightStartAddress[1] = 0x10;
    3290:	706b      	strb	r3, [r5, #1]
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;
    3292:	33f0      	adds	r3, #240	; 0xf0
    3294:	8013      	strh	r3, [r2, #0]

                currentAddress = 0x001000;
    3296:	2380      	movs	r3, #128	; 0x80
                beep(1000);
    3298:	20fa      	movs	r0, #250	; 0xfa
                flightStartAddress[1] = 0x10;
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;

                currentAddress = 0x001000;
    329a:	015b      	lsls	r3, r3, #5
    329c:	603b      	str	r3, [r7, #0]
                beep(1000);
    329e:	0080      	lsls	r0, r0, #2
    32a0:	4b13      	ldr	r3, [pc, #76]	; (32f0 <findNewFlightStart+0xa4>)

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
    32a2:	702c      	strb	r4, [r5, #0]
                flightStartAddress[1] = 0x10;
                flightStartAddress[2] = 0x00;
    32a4:	70ac      	strb	r4, [r5, #2]

                flightAddressLocationInIndex = FLIGHTZEROSTART;

                currentAddress = 0x001000;
                beep(1000);
    32a6:	4798      	blx	r3
            }
            flightNumb = flightNumbToCheck;
    32a8:	4b12      	ldr	r3, [pc, #72]	; (32f4 <findNewFlightStart+0xa8>)
    32aa:	701c      	strb	r4, [r3, #0]

            while (flightNumbToCheck > 0) {
                beep(500);
    32ac:	20fa      	movs	r0, #250	; 0xfa
    32ae:	0040      	lsls	r0, r0, #1
                currentAddress = 0x001000;
                beep(1000);
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    32b0:	2c00      	cmp	r4, #0
    32b2:	d008      	beq.n	32c6 <findNewFlightStart+0x7a>
                beep(500);
    32b4:	4b0e      	ldr	r3, [pc, #56]	; (32f0 <findNewFlightStart+0xa4>)
    32b6:	4798      	blx	r3
                delay_ms(500);
    32b8:	20fa      	movs	r0, #250	; 0xfa
    32ba:	4b0b      	ldr	r3, [pc, #44]	; (32e8 <findNewFlightStart+0x9c>)
    32bc:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    32be:	3c01      	subs	r4, #1
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    32c0:	4798      	blx	r3
                --flightNumbToCheck;
    32c2:	b2e4      	uxtb	r4, r4
    32c4:	e7f2      	b.n	32ac <findNewFlightStart+0x60>
            }
            delay_ms(500);
    32c6:	4b08      	ldr	r3, [pc, #32]	; (32e8 <findNewFlightStart+0x9c>)
    32c8:	4798      	blx	r3
            break;
    32ca:	e003      	b.n	32d4 <findNewFlightStart+0x88>
}


void findNewFlightStart() {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    32cc:	3401      	adds	r4, #1
    32ce:	b2e4      	uxtb	r4, r4
    32d0:	2c14      	cmp	r4, #20
    32d2:	d1bd      	bne.n	3250 <findNewFlightStart+0x4>
            }
            delay_ms(500);
            break;
        }
    }
}
    32d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    32d6:	46c0      	nop			; (mov r8, r8)
    32d8:	00003155 	.word	0x00003155
    32dc:	20000480 	.word	0x20000480
    32e0:	2000047b 	.word	0x2000047b
    32e4:	0000312d 	.word	0x0000312d
    32e8:	000010fd 	.word	0x000010fd
    32ec:	20000378 	.word	0x20000378
    32f0:	00000e2d 	.word	0x00000e2d
    32f4:	2000019b 	.word	0x2000019b

000032f8 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    32f8:	4b01      	ldr	r3, [pc, #4]	; (3300 <takeSample+0x8>)
    32fa:	7818      	ldrb	r0, [r3, #0]
}
    32fc:	4770      	bx	lr
    32fe:	46c0      	nop			; (mov r8, r8)
    3300:	200001ad 	.word	0x200001ad

00003304 <pullSample>:

void pullSample() {
    SampleBool = true;
    3304:	2201      	movs	r2, #1
    3306:	4b01      	ldr	r3, [pc, #4]	; (330c <pullSample+0x8>)
    3308:	701a      	strb	r2, [r3, #0]
}
    330a:	4770      	bx	lr
    330c:	200001ad 	.word	0x200001ad

00003310 <sampleTick>:
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    3310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    SampleBool = false;
    3312:	2200      	movs	r2, #0
    3314:	4ba7      	ldr	r3, [pc, #668]	; (35b4 <sampleTick+0x2a4>)

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    3316:	4fa8      	ldr	r7, [pc, #672]	; (35b8 <sampleTick+0x2a8>)
}

sample_t sample;

void sampleTick() {
    SampleBool = false;
    3318:	701a      	strb	r2, [r3, #0]

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis();
    331a:	4ba8      	ldr	r3, [pc, #672]	; (35bc <sampleTick+0x2ac>)

void sampleTick() {
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    331c:	687c      	ldr	r4, [r7, #4]
    sample.sampleTick = millis();
    331e:	4798      	blx	r3
    3320:	6078      	str	r0, [r7, #4]
    sample.tickDelta = sample.sampleTick - lastTick;
    3322:	1b00      	subs	r0, r0, r4

    sample.voltage.batV = adc_read(senseBatPin);
    3324:	4ca6      	ldr	r4, [pc, #664]	; (35c0 <sampleTick+0x2b0>)
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis();
    sample.tickDelta = sample.sampleTick - lastTick;
    3326:	8038      	strh	r0, [r7, #0]

    sample.voltage.batV = adc_read(senseBatPin);
    3328:	7863      	ldrb	r3, [r4, #1]
    332a:	7821      	ldrb	r1, [r4, #0]
    332c:	78a0      	ldrb	r0, [r4, #2]
    332e:	021b      	lsls	r3, r3, #8
    3330:	430b      	orrs	r3, r1
    3332:	0400      	lsls	r0, r0, #16
    3334:	001a      	movs	r2, r3
    3336:	0003      	movs	r3, r0
    3338:	78e0      	ldrb	r0, [r4, #3]
    333a:	4313      	orrs	r3, r2
    333c:	0600      	lsls	r0, r0, #24
    333e:	4ea1      	ldr	r6, [pc, #644]	; (35c4 <sampleTick+0x2b4>)
    3340:	7921      	ldrb	r1, [r4, #4]
    3342:	4318      	orrs	r0, r3
    3344:	47b0      	blx	r6

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    3346:	4ba0      	ldr	r3, [pc, #640]	; (35c8 <sampleTick+0x2b8>)
    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis();
    sample.tickDelta = sample.sampleTick - lastTick;

    sample.voltage.batV = adc_read(senseBatPin);
    3348:	8138      	strh	r0, [r7, #8]

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    334a:	4798      	blx	r3
    334c:	4a9f      	ldr	r2, [pc, #636]	; (35cc <sampleTick+0x2bc>)
    334e:	4da0      	ldr	r5, [pc, #640]	; (35d0 <sampleTick+0x2c0>)
    3350:	4ba0      	ldr	r3, [pc, #640]	; (35d4 <sampleTick+0x2c4>)
    3352:	47a8      	blx	r5
    3354:	4ba0      	ldr	r3, [pc, #640]	; (35d8 <sampleTick+0x2c8>)
    3356:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    3358:	79a3      	ldrb	r3, [r4, #6]
    335a:	7961      	ldrb	r1, [r4, #5]
    sample.sampleTick = millis();
    sample.tickDelta = sample.sampleTick - lastTick;

    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    335c:	60f8      	str	r0, [r7, #12]

    sample.voltage.senseA = adc_read(senseAPin);
    335e:	79e0      	ldrb	r0, [r4, #7]
    3360:	021b      	lsls	r3, r3, #8
    3362:	430b      	orrs	r3, r1
    3364:	0400      	lsls	r0, r0, #16
    3366:	001a      	movs	r2, r3
    3368:	0003      	movs	r3, r0
    336a:	7a20      	ldrb	r0, [r4, #8]
    336c:	4313      	orrs	r3, r2
    336e:	0600      	lsls	r0, r0, #24
    3370:	7a61      	ldrb	r1, [r4, #9]
    3372:	4318      	orrs	r0, r3
    3374:	47b0      	blx	r6
    sample.voltage.senseB = adc_read(senseBPin);
    3376:	7ae3      	ldrb	r3, [r4, #11]
    3378:	7aa1      	ldrb	r1, [r4, #10]

    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    337a:	8238      	strh	r0, [r7, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    337c:	7b20      	ldrb	r0, [r4, #12]
    337e:	021b      	lsls	r3, r3, #8
    3380:	430b      	orrs	r3, r1
    3382:	0400      	lsls	r0, r0, #16
    3384:	001a      	movs	r2, r3
    3386:	0003      	movs	r3, r0
    3388:	7b60      	ldrb	r0, [r4, #13]
    338a:	4313      	orrs	r3, r2
    338c:	0600      	lsls	r0, r0, #24
    338e:	7ba1      	ldrb	r1, [r4, #14]
    3390:	4318      	orrs	r0, r3
    3392:	47b0      	blx	r6
    sample.voltage.senseC = adc_read(senseCPin);
    3394:	7c23      	ldrb	r3, [r4, #16]
    3396:	7be1      	ldrb	r1, [r4, #15]
    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    3398:	8278      	strh	r0, [r7, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    339a:	7c60      	ldrb	r0, [r4, #17]
    339c:	021b      	lsls	r3, r3, #8
    339e:	430b      	orrs	r3, r1
    33a0:	0400      	lsls	r0, r0, #16
    33a2:	001a      	movs	r2, r3
    33a4:	0003      	movs	r3, r0
    33a6:	7ca0      	ldrb	r0, [r4, #18]
    33a8:	4313      	orrs	r3, r2
    33aa:	0600      	lsls	r0, r0, #24
    33ac:	7ce1      	ldrb	r1, [r4, #19]
    33ae:	4318      	orrs	r0, r3
    33b0:	47b0      	blx	r6
    sample.voltage.senseD = adc_read(senseDPin);
    33b2:	7d63      	ldrb	r3, [r4, #21]
    33b4:	7d21      	ldrb	r1, [r4, #20]

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    33b6:	82b8      	strh	r0, [r7, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    33b8:	7da0      	ldrb	r0, [r4, #22]
    33ba:	021b      	lsls	r3, r3, #8
    33bc:	430b      	orrs	r3, r1
    33be:	0400      	lsls	r0, r0, #16
    33c0:	001a      	movs	r2, r3
    33c2:	0003      	movs	r3, r0
    33c4:	7de0      	ldrb	r0, [r4, #23]
    33c6:	4313      	orrs	r3, r2
    33c8:	0600      	lsls	r0, r0, #24
    33ca:	7e21      	ldrb	r1, [r4, #24]
    33cc:	4318      	orrs	r0, r3
    33ce:	47b0      	blx	r6


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    33d0:	2210      	movs	r2, #16
    33d2:	4d82      	ldr	r5, [pc, #520]	; (35dc <sampleTick+0x2cc>)
    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);
    33d4:	82f8      	strh	r0, [r7, #22]


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    33d6:	88ab      	ldrh	r3, [r5, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    33d8:	7e61      	ldrb	r1, [r4, #25]
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    33da:	4313      	orrs	r3, r2
    33dc:	80ab      	strh	r3, [r5, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;
    33de:	2304      	movs	r3, #4
    33e0:	70ab      	strb	r3, [r5, #2]

    sample.analogRaw = adc_read(analogAccelPin);
    33e2:	7ea3      	ldrb	r3, [r4, #26]
    33e4:	7ee0      	ldrb	r0, [r4, #27]
    33e6:	021b      	lsls	r3, r3, #8
    33e8:	430b      	orrs	r3, r1
    33ea:	0400      	lsls	r0, r0, #16
    33ec:	4303      	orrs	r3, r0
    33ee:	7f20      	ldrb	r0, [r4, #28]
    33f0:	7f61      	ldrb	r1, [r4, #29]
    33f2:	0600      	lsls	r0, r0, #24
    33f4:	4318      	orrs	r0, r3
    33f6:	47b0      	blx	r6
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    33f8:	4b79      	ldr	r3, [pc, #484]	; (35e0 <sampleTick+0x2d0>)


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    33fa:	8338      	strh	r0, [r7, #24]
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    33fc:	18c0      	adds	r0, r0, r3
    33fe:	4b72      	ldr	r3, [pc, #456]	; (35c8 <sampleTick+0x2b8>)
    3400:	4798      	blx	r3
    3402:	4a78      	ldr	r2, [pc, #480]	; (35e4 <sampleTick+0x2d4>)
    3404:	4c72      	ldr	r4, [pc, #456]	; (35d0 <sampleTick+0x2c0>)
    3406:	4b78      	ldr	r3, [pc, #480]	; (35e8 <sampleTick+0x2d8>)
    3408:	47a0      	blx	r4
    340a:	4b73      	ldr	r3, [pc, #460]	; (35d8 <sampleTick+0x2c8>)
    340c:	4798      	blx	r3



    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    340e:	2300      	movs	r3, #0

    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    3410:	61f8      	str	r0, [r7, #28]



    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    3412:	70ab      	strb	r3, [r5, #2]
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_12BIT;
    3414:	88ab      	ldrh	r3, [r5, #4]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    3416:	4e75      	ldr	r6, [pc, #468]	; (35ec <sampleTick+0x2dc>)
    3418:	b29b      	uxth	r3, r3
    341a:	80ab      	strh	r3, [r5, #4]
    341c:	2580      	movs	r5, #128	; 0x80
    341e:	01ed      	lsls	r5, r5, #7

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    3420:	2150      	movs	r1, #80	; 0x50
    3422:	4c73      	ldr	r4, [pc, #460]	; (35f0 <sampleTick+0x2e0>)
    3424:	6175      	str	r5, [r6, #20]
    3426:	2002      	movs	r0, #2
    3428:	47a0      	blx	r4
    pinHigh(cs_baro);
    delay_us(600);
    342a:	2096      	movs	r0, #150	; 0x96
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    342c:	61b5      	str	r5, [r6, #24]
    342e:	0080      	lsls	r0, r0, #2
    3430:	4b70      	ldr	r3, [pc, #448]	; (35f4 <sampleTick+0x2e4>)
    3432:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    3434:	4b70      	ldr	r3, [pc, #448]	; (35f8 <sampleTick+0x2e8>)
    3436:	4798      	blx	r3

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    3438:	2140      	movs	r1, #64	; 0x40

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    pinHigh(cs_baro);
    delay_us(600);
    uint32_t tempRaw = readMS5803AdcResults();
    343a:	9001      	str	r0, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    343c:	6175      	str	r5, [r6, #20]

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    343e:	2002      	movs	r0, #2
    3440:	47a0      	blx	r4
    3442:	2280      	movs	r2, #128	; 0x80
    3444:	4b6d      	ldr	r3, [pc, #436]	; (35fc <sampleTick+0x2ec>)
    3446:	00d2      	lsls	r2, r2, #3

    u8_t byteOne;
    u8_t byteTwo;
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    3448:	2182      	movs	r1, #130	; 0x82
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    344a:	61b5      	str	r5, [r6, #24]
    344c:	2000      	movs	r0, #0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    344e:	601a      	str	r2, [r3, #0]
    3450:	47a0      	blx	r4
    byteOne = spiDataIn(ACCEL_SPI);
    3452:	4d6b      	ldr	r5, [pc, #428]	; (3600 <sampleTick+0x2f0>)
    3454:	2000      	movs	r0, #0
    3456:	47a8      	blx	r5
    3458:	0004      	movs	r4, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    345a:	2000      	movs	r0, #0
    345c:	47a8      	blx	r5
    sample.accelXint = twosComp(byteOne,byteTwo);
    345e:	0200      	lsls	r0, r0, #8
    3460:	4304      	orrs	r4, r0
    byteOne = spiDataIn(ACCEL_SPI);
    3462:	2000      	movs	r0, #0
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelXint = twosComp(byteOne,byteTwo);
    3464:	843c      	strh	r4, [r7, #32]
    byteOne = spiDataIn(ACCEL_SPI);
    3466:	47a8      	blx	r5
    3468:	0004      	movs	r4, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    346a:	2000      	movs	r0, #0
    346c:	47a8      	blx	r5
    sample.accelYint = twosComp(byteOne,byteTwo);
    346e:	0200      	lsls	r0, r0, #8
    3470:	4304      	orrs	r4, r0
    byteOne = spiDataIn(ACCEL_SPI);
    3472:	2000      	movs	r0, #0
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelYint = twosComp(byteOne,byteTwo);
    3474:	853c      	strh	r4, [r7, #40]	; 0x28
    byteOne = spiDataIn(ACCEL_SPI);
    3476:	47a8      	blx	r5
    3478:	0004      	movs	r4, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    347a:	2000      	movs	r0, #0
    347c:	47a8      	blx	r5
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    347e:	2280      	movs	r2, #128	; 0x80
    3480:	4b60      	ldr	r3, [pc, #384]	; (3604 <sampleTick+0x2f4>)
    3482:	00d2      	lsls	r2, r2, #3
    3484:	601a      	str	r2, [r3, #0]
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    if (altimeter.pointingUp) {
    3486:	4b60      	ldr	r3, [pc, #384]	; (3608 <sampleTick+0x2f8>)
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    3488:	0200      	lsls	r0, r0, #8
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    if (altimeter.pointingUp) {
    348a:	795a      	ldrb	r2, [r3, #5]
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    348c:	4304      	orrs	r4, r0
    348e:	9600      	str	r6, [sp, #0]
    3490:	b224      	sxth	r4, r4
    3492:	003d      	movs	r5, r7
    3494:	2120      	movs	r1, #32
    3496:	5e7b      	ldrsh	r3, [r7, r1]
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    if (altimeter.pointingUp) {
    3498:	2a00      	cmp	r2, #0
    349a:	d000      	beq.n	349e <sampleTick+0x18e>
        sample.accelXint =  -sample.accelXint >> 4;
    349c:	425b      	negs	r3, r3
    } else {
        sample.accelXint =  sample.accelXint >> 4;
    349e:	111b      	asrs	r3, r3, #4
    34a0:	842b      	strh	r3, [r5, #32]
    }
    sample.accelYint =  sample.accelYint >> 4;
    34a2:	2328      	movs	r3, #40	; 0x28
    34a4:	5eee      	ldrsh	r6, [r5, r3]
    sample.accelZint =  sample.accelZint >> 4;
    34a6:	1124      	asrs	r4, r4, #4
    if (altimeter.pointingUp) {
        sample.accelXint =  -sample.accelXint >> 4;
    } else {
        sample.accelXint =  sample.accelXint >> 4;
    }
    sample.accelYint =  sample.accelYint >> 4;
    34a8:	1136      	asrs	r6, r6, #4
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    34aa:	2320      	movs	r3, #32
    34ac:	5ee8      	ldrsh	r0, [r5, r3]
    if (altimeter.pointingUp) {
        sample.accelXint =  -sample.accelXint >> 4;
    } else {
        sample.accelXint =  sample.accelXint >> 4;
    }
    sample.accelYint =  sample.accelYint >> 4;
    34ae:	852e      	strh	r6, [r5, #40]	; 0x28
    sample.accelZint =  sample.accelZint >> 4;
    34b0:	862c      	strh	r4, [r5, #48]	; 0x30

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    34b2:	4b45      	ldr	r3, [pc, #276]	; (35c8 <sampleTick+0x2b8>)
    34b4:	4798      	blx	r3
    34b6:	23fe      	movs	r3, #254	; 0xfe
    34b8:	2200      	movs	r2, #0
    34ba:	059b      	lsls	r3, r3, #22
    34bc:	4f44      	ldr	r7, [pc, #272]	; (35d0 <sampleTick+0x2c0>)
    34be:	47b8      	blx	r7
    34c0:	4f45      	ldr	r7, [pc, #276]	; (35d8 <sampleTick+0x2c8>)
    34c2:	47b8      	blx	r7
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    34c4:	4b40      	ldr	r3, [pc, #256]	; (35c8 <sampleTick+0x2b8>)
        sample.accelXint =  sample.accelXint >> 4;
    }
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    34c6:	6268      	str	r0, [r5, #36]	; 0x24
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    34c8:	0030      	movs	r0, r6
    34ca:	4798      	blx	r3
    34cc:	23fe      	movs	r3, #254	; 0xfe
    34ce:	2200      	movs	r2, #0
    34d0:	4e3f      	ldr	r6, [pc, #252]	; (35d0 <sampleTick+0x2c0>)
    34d2:	059b      	lsls	r3, r3, #22
    34d4:	47b0      	blx	r6
    34d6:	47b8      	blx	r7
    sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    34d8:	4b3b      	ldr	r3, [pc, #236]	; (35c8 <sampleTick+0x2b8>)
    }
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    34da:	62e8      	str	r0, [r5, #44]	; 0x2c
    sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    34dc:	0020      	movs	r0, r4
    34de:	4798      	blx	r3
    34e0:	23fe      	movs	r3, #254	; 0xfe
    34e2:	2200      	movs	r2, #0
    34e4:	059b      	lsls	r3, r3, #22
    34e6:	47b0      	blx	r6
    34e8:	47b8      	blx	r7
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    34ea:	2280      	movs	r2, #128	; 0x80
    34ec:	9b00      	ldr	r3, [sp, #0]
    34ee:	00d2      	lsls	r2, r2, #3

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    34f0:	2182      	movs	r1, #130	; 0x82
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    34f2:	6368      	str	r0, [r5, #52]	; 0x34
    34f4:	615a      	str	r2, [r3, #20]

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    34f6:	2000      	movs	r0, #0
    34f8:	4b3d      	ldr	r3, [pc, #244]	; (35f0 <sampleTick+0x2e0>)
    34fa:	4798      	blx	r3
    byteOne = spiDataIn(GYRO_SPI);
    34fc:	4e40      	ldr	r6, [pc, #256]	; (3600 <sampleTick+0x2f0>)
    34fe:	2000      	movs	r0, #0
    3500:	47b0      	blx	r6
    3502:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    3504:	2000      	movs	r0, #0
    3506:	47b0      	blx	r6
    sample.gyroXint = twosComp(byteOne,byteTwo);
    3508:	0200      	lsls	r0, r0, #8
    350a:	4304      	orrs	r4, r0
    byteOne = spiDataIn(GYRO_SPI);
    350c:	2000      	movs	r0, #0
    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroXint = twosComp(byteOne,byteTwo);
    350e:	872c      	strh	r4, [r5, #56]	; 0x38
    byteOne = spiDataIn(GYRO_SPI);
    3510:	47b0      	blx	r6
    3512:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    3514:	2000      	movs	r0, #0
    3516:	47b0      	blx	r6
    sample.gyroYint = twosComp(byteOne,byteTwo);
    3518:	4b3c      	ldr	r3, [pc, #240]	; (360c <sampleTick+0x2fc>)
    351a:	0200      	lsls	r0, r0, #8
    351c:	4304      	orrs	r4, r0
    byteOne = spiDataIn(GYRO_SPI);
    351e:	2000      	movs	r0, #0
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroYint = twosComp(byteOne,byteTwo);
    3520:	87dc      	strh	r4, [r3, #62]	; 0x3e
    byteOne = spiDataIn(GYRO_SPI);
    3522:	47b0      	blx	r6
    3524:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    3526:	2000      	movs	r0, #0
    3528:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    352a:	2180      	movs	r1, #128	; 0x80
    352c:	0003      	movs	r3, r0
    352e:	9a00      	ldr	r2, [sp, #0]
    3530:	00c9      	lsls	r1, r1, #3
    3532:	6191      	str	r1, [r2, #24]
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    3534:	2238      	movs	r2, #56	; 0x38
    3536:	5ea8      	ldrsh	r0, [r5, r2]
    sample.gyroYint = sample.gyroYint >> 4;
    3538:	4a34      	ldr	r2, [pc, #208]	; (360c <sampleTick+0x2fc>)
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    353a:	1100      	asrs	r0, r0, #4
    353c:	8728      	strh	r0, [r5, #56]	; 0x38
    sample.gyroYint = sample.gyroYint >> 4;
    353e:	263e      	movs	r6, #62	; 0x3e
    3540:	5f96      	ldrsh	r6, [r2, r6]
    sample.gyroZint = sample.gyroZint >> 4;
    3542:	021b      	lsls	r3, r3, #8
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    3544:	4a31      	ldr	r2, [pc, #196]	; (360c <sampleTick+0x2fc>)
    sample.gyroZint = sample.gyroZint >> 4;
    3546:	431c      	orrs	r4, r3
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    3548:	1136      	asrs	r6, r6, #4
    sample.gyroZint = sample.gyroZint >> 4;
    354a:	b224      	sxth	r4, r4
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    354c:	87d6      	strh	r6, [r2, #62]	; 0x3e
    sample.gyroZint = sample.gyroZint >> 4;
    354e:	1123      	asrs	r3, r4, #4
    3550:	466a      	mov	r2, sp
    3552:	9300      	str	r3, [sp, #0]
    3554:	002b      	movs	r3, r5
    3556:	8812      	ldrh	r2, [r2, #0]
    3558:	3348      	adds	r3, #72	; 0x48
    355a:	801a      	strh	r2, [r3, #0]

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    355c:	4b1a      	ldr	r3, [pc, #104]	; (35c8 <sampleTick+0x2b8>)
    355e:	4798      	blx	r3
    3560:	23fe      	movs	r3, #254	; 0xfe
    3562:	4c1b      	ldr	r4, [pc, #108]	; (35d0 <sampleTick+0x2c0>)
    3564:	2200      	movs	r2, #0
    3566:	059b      	lsls	r3, r3, #22
    3568:	47a0      	blx	r4
    356a:	47b8      	blx	r7
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    356c:	4b16      	ldr	r3, [pc, #88]	; (35c8 <sampleTick+0x2b8>)

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    sample.gyroZint = sample.gyroZint >> 4;

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    356e:	63e8      	str	r0, [r5, #60]	; 0x3c
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    3570:	0030      	movs	r0, r6
    3572:	4798      	blx	r3
    3574:	23fe      	movs	r3, #254	; 0xfe
    3576:	2200      	movs	r2, #0
    3578:	059b      	lsls	r3, r3, #22
    357a:	47a0      	blx	r4
    357c:	47b8      	blx	r7
    sample.gyroZ =  sample.gyroZint * BMI055_GYRO_2000DS_DIV;
    357e:	4b12      	ldr	r3, [pc, #72]	; (35c8 <sampleTick+0x2b8>)
    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    sample.gyroZint = sample.gyroZint >> 4;

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    3580:	6468      	str	r0, [r5, #68]	; 0x44
    sample.gyroZ =  sample.gyroZint * BMI055_GYRO_2000DS_DIV;
    3582:	9800      	ldr	r0, [sp, #0]
    3584:	4798      	blx	r3
    3586:	23fe      	movs	r3, #254	; 0xfe
    3588:	2200      	movs	r2, #0
    358a:	059b      	lsls	r3, r3, #22
    358c:	47a0      	blx	r4
    358e:	47b8      	blx	r7
    3590:	64e8      	str	r0, [r5, #76]	; 0x4c


    delay_us(400);
    3592:	20c8      	movs	r0, #200	; 0xc8
    3594:	4b17      	ldr	r3, [pc, #92]	; (35f4 <sampleTick+0x2e4>)
    3596:	0040      	lsls	r0, r0, #1
    3598:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    359a:	4b17      	ldr	r3, [pc, #92]	; (35f8 <sampleTick+0x2e8>)
    359c:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    359e:	4a1c      	ldr	r2, [pc, #112]	; (3610 <sampleTick+0x300>)
    35a0:	9901      	ldr	r1, [sp, #4]
    35a2:	4b1c      	ldr	r3, [pc, #112]	; (3614 <sampleTick+0x304>)
    35a4:	4c1c      	ldr	r4, [pc, #112]	; (3618 <sampleTick+0x308>)
    35a6:	47a0      	blx	r4
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
    35a8:	6d28      	ldr	r0, [r5, #80]	; 0x50
    35aa:	4b1c      	ldr	r3, [pc, #112]	; (361c <sampleTick+0x30c>)
    35ac:	4798      	blx	r3
    35ae:	65a8      	str	r0, [r5, #88]	; 0x58
    35b0:	65e9      	str	r1, [r5, #92]	; 0x5c
}
    35b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    35b4:	200001ad 	.word	0x200001ad
    35b8:	200005f0 	.word	0x200005f0
    35bc:	00001149 	.word	0x00001149
    35c0:	00006f6c 	.word	0x00006f6c
    35c4:	00000dc5 	.word	0x00000dc5
    35c8:	00006c25 	.word	0x00006c25
    35cc:	a97e132b 	.word	0xa97e132b
    35d0:	00005fdd 	.word	0x00005fdd
    35d4:	3f65379f 	.word	0x3f65379f
    35d8:	00006dc1 	.word	0x00006dc1
    35dc:	42004000 	.word	0x42004000
    35e0:	ffff41c9 	.word	0xffff41c9
    35e4:	abb44e51 	.word	0xabb44e51
    35e8:	3f73f290 	.word	0x3f73f290
    35ec:	41004400 	.word	0x41004400
    35f0:	00003749 	.word	0x00003749
    35f4:	000010c9 	.word	0x000010c9
    35f8:	000003b5 	.word	0x000003b5
    35fc:	41004494 	.word	0x41004494
    3600:	00003761 	.word	0x00003761
    3604:	41004498 	.word	0x41004498
    3608:	200001a0 	.word	0x200001a0
    360c:	200005f2 	.word	0x200005f2
    3610:	20000644 	.word	0x20000644
    3614:	20000640 	.word	0x20000640
    3618:	000003f5 	.word	0x000003f5
    361c:	00000495 	.word	0x00000495

00003620 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    3620:	b570      	push	{r4, r5, r6, lr}
    3622:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    3624:	2301      	movs	r3, #1
    3626:	1ca6      	adds	r6, r4, #2
    3628:	40b3      	lsls	r3, r6
    362a:	480d      	ldr	r0, [pc, #52]	; (3660 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    362c:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    362e:	6a01      	ldr	r1, [r0, #32]
    3630:	430b      	orrs	r3, r1
    3632:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    3634:	2d00      	cmp	r5, #0
    3636:	d003      	beq.n	3640 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    3638:	2107      	movs	r1, #7
    363a:	0028      	movs	r0, r5
    363c:	4b09      	ldr	r3, [pc, #36]	; (3664 <sercomClockEnable+0x44>)
    363e:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    3640:	22f0      	movs	r2, #240	; 0xf0
    3642:	2080      	movs	r0, #128	; 0x80
    3644:	0229      	lsls	r1, r5, #8
    3646:	0112      	lsls	r2, r2, #4
    3648:	4011      	ands	r1, r2
    364a:	01c0      	lsls	r0, r0, #7
    364c:	4301      	orrs	r1, r0
    364e:	0020      	movs	r0, r4
    3650:	3014      	adds	r0, #20
    3652:	223f      	movs	r2, #63	; 0x3f
    3654:	0003      	movs	r3, r0
    3656:	4013      	ands	r3, r2
    3658:	4319      	orrs	r1, r3
    365a:	4b03      	ldr	r3, [pc, #12]	; (3668 <sercomClockEnable+0x48>)
    365c:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    365e:	bd70      	pop	{r4, r5, r6, pc}
    3660:	40000400 	.word	0x40000400
    3664:	00000ff9 	.word	0x00000ff9
    3668:	40000c00 	.word	0x40000c00

0000366c <sercomReset>:
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    366c:	4b04      	ldr	r3, [pc, #16]	; (3680 <sercomReset+0x14>)
    366e:	0280      	lsls	r0, r0, #10
    3670:	18c0      	adds	r0, r0, r3
//                         GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    3672:	2301      	movs	r3, #1
    3674:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    3676:	6802      	ldr	r2, [r0, #0]
    3678:	421a      	tst	r2, r3
    367a:	d1fc      	bne.n	3676 <sercomReset+0xa>
}
    367c:	4770      	bx	lr
    367e:	46c0      	nop			; (mov r8, r8)
    3680:	42000800 	.word	0x42000800

00003684 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    3684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3686:	0004      	movs	r4, r0
    3688:	9300      	str	r3, [sp, #0]
    368a:	ab08      	add	r3, sp, #32
    368c:	781b      	ldrb	r3, [r3, #0]
    368e:	000e      	movs	r6, r1
    3690:	9301      	str	r3, [sp, #4]
    3692:	ab09      	add	r3, sp, #36	; 0x24
    3694:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    3696:	4b12      	ldr	r3, [pc, #72]	; (36e0 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    3698:	0015      	movs	r5, r2

    sercomReset(id);
    369a:	4798      	blx	r3
    369c:	4b11      	ldr	r3, [pc, #68]	; (36e4 <sercomSpiMasterInit+0x60>)
    369e:	02a4      	lsls	r4, r4, #10
    36a0:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    36a2:	2380      	movs	r3, #128	; 0x80
    36a4:	029b      	lsls	r3, r3, #10
    36a6:	6063      	str	r3, [r4, #4]
    36a8:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    36aa:	21c0      	movs	r1, #192	; 0xc0
    36ac:	042d      	lsls	r5, r5, #16
    36ae:	029b      	lsls	r3, r3, #10
    36b0:	402b      	ands	r3, r5
    36b2:	250e      	movs	r5, #14
    36b4:	0536      	lsls	r6, r6, #20
    36b6:	0389      	lsls	r1, r1, #14
    36b8:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    36ba:	9e00      	ldr	r6, [sp, #0]
    36bc:	431d      	orrs	r5, r3
    36be:	1e73      	subs	r3, r6, #1
    36c0:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    36c2:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    36c4:	0772      	lsls	r2, r6, #29
    36c6:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    36c8:	432a      	orrs	r2, r5
    36ca:	1e59      	subs	r1, r3, #1
    36cc:	418b      	sbcs	r3, r1
    36ce:	0016      	movs	r6, r2
    36d0:	071b      	lsls	r3, r3, #28
    36d2:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    36d4:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    36d6:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    36d8:	69e3      	ldr	r3, [r4, #28]
    36da:	075b      	lsls	r3, r3, #29
    36dc:	d4fc      	bmi.n	36d8 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    36de:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    36e0:	0000366d 	.word	0x0000366d
    36e4:	42000800 	.word	0x42000800

000036e8 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    36e8:	b570      	push	{r4, r5, r6, lr}
    36ea:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    36ec:	4b0c      	ldr	r3, [pc, #48]	; (3720 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    36ee:	000d      	movs	r5, r1
    36f0:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    36f2:	4798      	blx	r3
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    36f4:	4b0b      	ldr	r3, [pc, #44]	; (3724 <sercomUartInit+0x3c>)
    36f6:	02b0      	lsls	r0, r6, #10
    36f8:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    36fa:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    36fc:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    36fe:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    3700:	4b09      	ldr	r3, [pc, #36]	; (3728 <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    3702:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    3704:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    3706:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    3708:	0392      	lsls	r2, r2, #14
    370a:	4011      	ands	r1, r2
    370c:	4a07      	ldr	r2, [pc, #28]	; (372c <sercomUartInit+0x44>)

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    370e:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    3710:	0424      	lsls	r4, r4, #16

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    3712:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    3714:	4311      	orrs	r1, r2
    3716:	4023      	ands	r3, r4
    3718:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    371a:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    371c:	bd70      	pop	{r4, r5, r6, pc}
    371e:	46c0      	nop			; (mov r8, r8)
    3720:	0000366d 	.word	0x0000366d
    3724:	42000800 	.word	0x42000800
    3728:	ffffb15b 	.word	0xffffb15b
    372c:	40000006 	.word	0x40000006

00003730 <spiDataTransfer>:
    3730:	4b04      	ldr	r3, [pc, #16]	; (3744 <spiDataTransfer+0x14>)
    3732:	0280      	lsls	r0, r0, #10
    3734:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    3736:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    3738:	7e03      	ldrb	r3, [r0, #24]
    373a:	075b      	lsls	r3, r3, #29
    373c:	d5fc      	bpl.n	3738 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    373e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    3740:	b2c0      	uxtb	r0, r0
}
    3742:	4770      	bx	lr
    3744:	42000800 	.word	0x42000800

00003748 <spiDataOut>:
    3748:	4b04      	ldr	r3, [pc, #16]	; (375c <spiDataOut+0x14>)
    374a:	0280      	lsls	r0, r0, #10
    374c:	18c0      	adds	r0, r0, r3

void spiDataOut(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    374e:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    3750:	7e03      	ldrb	r3, [r0, #24]
    3752:	075b      	lsls	r3, r3, #29
    3754:	d5fc      	bpl.n	3750 <spiDataOut+0x8>
    u8_t dummy = sercom(id)->SPI.DATA.reg;
    3756:	6a83      	ldr	r3, [r0, #40]	; 0x28
}
    3758:	4770      	bx	lr
    375a:	46c0      	nop			; (mov r8, r8)
    375c:	42000800 	.word	0x42000800

00003760 <spiDataIn>:
    3760:	4b05      	ldr	r3, [pc, #20]	; (3778 <spiDataIn+0x18>)
    3762:	0280      	lsls	r0, r0, #10
    3764:	18c0      	adds	r0, r0, r3

u8_t spiDataIn(SercomId id) {
    sercom(id)->SPI.DATA.reg = 0xFF;
    3766:	23ff      	movs	r3, #255	; 0xff
    3768:	6283      	str	r3, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    376a:	7e03      	ldrb	r3, [r0, #24]
    376c:	075b      	lsls	r3, r3, #29
    376e:	d5fc      	bpl.n	376a <spiDataIn+0xa>
    return sercom(id)->SPI.DATA.reg;
    3770:	6a80      	ldr	r0, [r0, #40]	; 0x28
    3772:	b2c0      	uxtb	r0, r0
}
    3774:	4770      	bx	lr
    3776:	46c0      	nop			; (mov r8, r8)
    3778:	42000800 	.word	0x42000800

0000377c <usartDataOut>:
    377c:	4b04      	ldr	r3, [pc, #16]	; (3790 <usartDataOut+0x14>)
    377e:	0280      	lsls	r0, r0, #10
    3780:	18c0      	adds	r0, r0, r3

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    3782:	b289      	uxth	r1, r1
    3784:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    3786:	7e03      	ldrb	r3, [r0, #24]
    3788:	07db      	lsls	r3, r3, #31
    378a:	d5fc      	bpl.n	3786 <usartDataOut+0xa>
}
    378c:	4770      	bx	lr
    378e:	46c0      	nop			; (mov r8, r8)
    3790:	42000800 	.word	0x42000800

00003794 <usartDataIn>:
    3794:	4b02      	ldr	r3, [pc, #8]	; (37a0 <usartDataIn+0xc>)
    3796:	0280      	lsls	r0, r0, #10
    3798:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    379a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    379c:	b2c0      	uxtb	r0, r0
}
    379e:	4770      	bx	lr
    37a0:	42000800 	.word	0x42000800

000037a4 <findMainAltitude>:
#include <boardDefines.h>


void findMainAltitude() {

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    37a4:	4a11      	ldr	r2, [pc, #68]	; (37ec <findMainAltitude+0x48>)
    37a6:	7851      	ldrb	r1, [r2, #1]
    37a8:	0013      	movs	r3, r2
    37aa:	2900      	cmp	r1, #0
    37ac:	d105      	bne.n	37ba <findMainAltitude+0x16>
    37ae:	7811      	ldrb	r1, [r2, #0]
    37b0:	2900      	cmp	r1, #0
    37b2:	d002      	beq.n	37ba <findMainAltitude+0x16>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelASettings.MAIN_DEPLOY;
    37b4:	8853      	ldrh	r3, [r2, #2]
    37b6:	8313      	strh	r3, [r2, #24]
        return;
    37b8:	e017      	b.n	37ea <findMainAltitude+0x46>
    }
    if (deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    37ba:	79da      	ldrb	r2, [r3, #7]
    37bc:	2a00      	cmp	r2, #0
    37be:	d104      	bne.n	37ca <findMainAltitude+0x26>
    37c0:	799a      	ldrb	r2, [r3, #6]
    37c2:	2a00      	cmp	r2, #0
    37c4:	d001      	beq.n	37ca <findMainAltitude+0x26>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelBSettings.MAIN_DEPLOY;
    37c6:	891a      	ldrh	r2, [r3, #8]
    37c8:	e00e      	b.n	37e8 <findMainAltitude+0x44>
        return;
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    37ca:	7b5a      	ldrb	r2, [r3, #13]
    37cc:	2a00      	cmp	r2, #0
    37ce:	d104      	bne.n	37da <findMainAltitude+0x36>
    37d0:	7b1a      	ldrb	r2, [r3, #12]
    37d2:	2a00      	cmp	r2, #0
    37d4:	d001      	beq.n	37da <findMainAltitude+0x36>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelCSettings.MAIN_DEPLOY;
    37d6:	89da      	ldrh	r2, [r3, #14]
    37d8:	e006      	b.n	37e8 <findMainAltitude+0x44>
        return;
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    37da:	7cda      	ldrb	r2, [r3, #19]
    37dc:	2a00      	cmp	r2, #0
    37de:	d104      	bne.n	37ea <findMainAltitude+0x46>
    37e0:	7c9a      	ldrb	r2, [r3, #18]
    37e2:	2a00      	cmp	r2, #0
    37e4:	d001      	beq.n	37ea <findMainAltitude+0x46>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelDSettings.MAIN_DEPLOY;
    37e6:	8a9a      	ldrh	r2, [r3, #20]
    37e8:	831a      	strh	r2, [r3, #24]
        return;
    }


}
    37ea:	4770      	bx	lr
    37ec:	20000180 	.word	0x20000180

000037f0 <applyDefaultSettings>:
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    37f0:	2096      	movs	r0, #150	; 0x96

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    37f2:	2200      	movs	r2, #0

}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    37f4:	2101      	movs	r1, #1
    37f6:	4b09      	ldr	r3, [pc, #36]	; (381c <applyDefaultSettings+0x2c>)
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    37f8:	0040      	lsls	r0, r0, #1

}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    37fa:	7019      	strb	r1, [r3, #0]
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    37fc:	7059      	strb	r1, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    37fe:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;
    3800:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = true;
    3802:	7199      	strb	r1, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    3804:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    3806:	8118      	strh	r0, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = 0;
    3808:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = false;
    380a:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = DROGUE_t;
    380c:	7359      	strb	r1, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = 0;
    380e:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = 0;
    3810:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = false;
    3812:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = MAIN_t;
    3814:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = 300;
    3816:	8298      	strh	r0, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = 0;
    3818:	759a      	strb	r2, [r3, #22]
}
    381a:	4770      	bx	lr
    381c:	20000180 	.word	0x20000180

00003820 <putSettings>:

void putSettings() {
    3820:	b500      	push	{lr}
    3822:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    3824:	4669      	mov	r1, sp
    settings[1] = deploymentSettings.channelASettings.TYPE;
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    3826:	4668      	mov	r0, sp

void putSettings() {

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    3828:	4b17      	ldr	r3, [pc, #92]	; (3888 <putSettings+0x68>)
    382a:	781a      	ldrb	r2, [r3, #0]
    382c:	700a      	strb	r2, [r1, #0]
    settings[1] = deploymentSettings.channelASettings.TYPE;
    382e:	785a      	ldrb	r2, [r3, #1]
    3830:	704a      	strb	r2, [r1, #1]
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    3832:	885a      	ldrh	r2, [r3, #2]
    3834:	0a11      	lsrs	r1, r2, #8
    3836:	7081      	strb	r1, [r0, #2]
    settings[3] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 0;
    3838:	70c2      	strb	r2, [r0, #3]
    settings[4] = deploymentSettings.channelASettings.APPOGE_DELAY;
    383a:	791a      	ldrb	r2, [r3, #4]
    383c:	7102      	strb	r2, [r0, #4]

    settings[5] = deploymentSettings.channelBSettings.ENABLED;
    383e:	799a      	ldrb	r2, [r3, #6]
    3840:	7142      	strb	r2, [r0, #5]
    settings[6] = deploymentSettings.channelBSettings.TYPE;
    3842:	79da      	ldrb	r2, [r3, #7]
    3844:	7182      	strb	r2, [r0, #6]
    settings[7] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 8;
    3846:	891a      	ldrh	r2, [r3, #8]
    3848:	0a11      	lsrs	r1, r2, #8
    384a:	71c1      	strb	r1, [r0, #7]
    settings[8] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 0;
    384c:	7202      	strb	r2, [r0, #8]
    settings[9] = deploymentSettings.channelBSettings.APPOGE_DELAY;
    384e:	7a9a      	ldrb	r2, [r3, #10]
    3850:	7242      	strb	r2, [r0, #9]

    settings[10] = deploymentSettings.channelCSettings.ENABLED;
    3852:	7b1a      	ldrb	r2, [r3, #12]
    3854:	7282      	strb	r2, [r0, #10]
    settings[11] = deploymentSettings.channelCSettings.TYPE;
    3856:	7b5a      	ldrb	r2, [r3, #13]
    3858:	72c2      	strb	r2, [r0, #11]
    settings[12] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 8;
    385a:	89da      	ldrh	r2, [r3, #14]
    385c:	0a11      	lsrs	r1, r2, #8
    385e:	7301      	strb	r1, [r0, #12]
    settings[13] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 0;
    3860:	7342      	strb	r2, [r0, #13]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;
    3862:	7c1a      	ldrb	r2, [r3, #16]
    3864:	7382      	strb	r2, [r0, #14]

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    3866:	7c9a      	ldrb	r2, [r3, #18]
    3868:	73c2      	strb	r2, [r0, #15]
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    386a:	7cda      	ldrb	r2, [r3, #19]
    386c:	7402      	strb	r2, [r0, #16]
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    386e:	8a9a      	ldrh	r2, [r3, #20]
    3870:	0a11      	lsrs	r1, r2, #8
    3872:	7441      	strb	r1, [r0, #17]
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    3874:	7482      	strb	r2, [r0, #18]
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    3876:	7d9b      	ldrb	r3, [r3, #22]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    3878:	4669      	mov	r1, sp
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    387a:	74c3      	strb	r3, [r0, #19]

    settings[20] = 0x00;
    387c:	2000      	movs	r0, #0

    AT25SEWritePage(0x00,settings);
    387e:	4b03      	ldr	r3, [pc, #12]	; (388c <putSettings+0x6c>)
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;

    settings[20] = 0x00;
    3880:	7508      	strb	r0, [r1, #20]

    AT25SEWritePage(0x00,settings);
    3882:	4798      	blx	r3
}
    3884:	b041      	add	sp, #260	; 0x104
    3886:	bd00      	pop	{pc}
    3888:	20000180 	.word	0x20000180
    388c:	000002a5 	.word	0x000002a5

00003890 <getSettings>:




void getSettings() {
    3890:	b500      	push	{lr}
    3892:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);
    3894:	4669      	mov	r1, sp
    3896:	4b2c      	ldr	r3, [pc, #176]	; (3948 <getSettings+0xb8>)
    3898:	2000      	movs	r0, #0
    389a:	4798      	blx	r3

    deploymentSettings.channelASettings.ENABLED = settings[0];
    389c:	466a      	mov	r2, sp
    389e:	7812      	ldrb	r2, [r2, #0]
    38a0:	4b2a      	ldr	r3, [pc, #168]	; (394c <getSettings+0xbc>)
    38a2:	1e51      	subs	r1, r2, #1
    38a4:	418a      	sbcs	r2, r1
    38a6:	701a      	strb	r2, [r3, #0]
    deploymentSettings.channelASettings.TYPE = settings[1];
    38a8:	466a      	mov	r2, sp
    38aa:	7852      	ldrb	r2, [r2, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    38ac:	4669      	mov	r1, sp
    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);

    deploymentSettings.channelASettings.ENABLED = settings[0];
    deploymentSettings.channelASettings.TYPE = settings[1];
    38ae:	705a      	strb	r2, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    38b0:	466a      	mov	r2, sp
    38b2:	7892      	ldrb	r2, [r2, #2]
    38b4:	78c9      	ldrb	r1, [r1, #3]
    38b6:	0212      	lsls	r2, r2, #8
    38b8:	430a      	orrs	r2, r1
    38ba:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];
    38bc:	466a      	mov	r2, sp
    38be:	7912      	ldrb	r2, [r2, #4]
    38c0:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    38c2:	466a      	mov	r2, sp
    38c4:	7952      	ldrb	r2, [r2, #5]
    38c6:	1e51      	subs	r1, r2, #1
    38c8:	418a      	sbcs	r2, r1
    38ca:	719a      	strb	r2, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = settings[6];
    38cc:	466a      	mov	r2, sp
    38ce:	7992      	ldrb	r2, [r2, #6]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    38d0:	4669      	mov	r1, sp
    deploymentSettings.channelASettings.TYPE = settings[1];
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    deploymentSettings.channelBSettings.TYPE = settings[6];
    38d2:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    38d4:	466a      	mov	r2, sp
    38d6:	79d2      	ldrb	r2, [r2, #7]
    38d8:	7a09      	ldrb	r1, [r1, #8]
    38da:	0212      	lsls	r2, r2, #8
    38dc:	430a      	orrs	r2, r1
    38de:	811a      	strh	r2, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];
    38e0:	466a      	mov	r2, sp
    38e2:	7a52      	ldrb	r2, [r2, #9]
    38e4:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    38e6:	466a      	mov	r2, sp
    38e8:	7a92      	ldrb	r2, [r2, #10]
    38ea:	1e51      	subs	r1, r2, #1
    38ec:	418a      	sbcs	r2, r1
    38ee:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = settings[11];
    38f0:	466a      	mov	r2, sp
    38f2:	7ad2      	ldrb	r2, [r2, #11]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    38f4:	4669      	mov	r1, sp
    deploymentSettings.channelBSettings.TYPE = settings[6];
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    deploymentSettings.channelCSettings.TYPE = settings[11];
    38f6:	735a      	strb	r2, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    38f8:	466a      	mov	r2, sp
    38fa:	7b12      	ldrb	r2, [r2, #12]
    38fc:	7b49      	ldrb	r1, [r1, #13]
    38fe:	0212      	lsls	r2, r2, #8
    3900:	430a      	orrs	r2, r1
    3902:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];
    3904:	466a      	mov	r2, sp
    3906:	7b92      	ldrb	r2, [r2, #14]
    3908:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    390a:	466a      	mov	r2, sp
    390c:	7bd2      	ldrb	r2, [r2, #15]
    390e:	1e51      	subs	r1, r2, #1
    3910:	418a      	sbcs	r2, r1
    3912:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = settings[16];
    3914:	466a      	mov	r2, sp
    3916:	7c12      	ldrb	r2, [r2, #16]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    3918:	4669      	mov	r1, sp
    deploymentSettings.channelCSettings.TYPE = settings[11];
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    deploymentSettings.channelDSettings.TYPE = settings[16];
    391a:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    391c:	466a      	mov	r2, sp
    391e:	7c52      	ldrb	r2, [r2, #17]
    3920:	7c89      	ldrb	r1, [r1, #18]
    3922:	0212      	lsls	r2, r2, #8
    3924:	430a      	orrs	r2, r1
    3926:	829a      	strh	r2, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = settings[19];
    3928:	466a      	mov	r2, sp
    392a:	7cd2      	ldrb	r2, [r2, #19]
    392c:	759a      	strb	r2, [r3, #22]


    if (settings[20] == 0xFF) {
    392e:	466b      	mov	r3, sp
    3930:	7d1b      	ldrb	r3, [r3, #20]
    3932:	2bff      	cmp	r3, #255	; 0xff
    3934:	d103      	bne.n	393e <getSettings+0xae>
        applyDefaultSettings();
    3936:	4b06      	ldr	r3, [pc, #24]	; (3950 <getSettings+0xc0>)
    3938:	4798      	blx	r3
        putSettings();
    393a:	4b06      	ldr	r3, [pc, #24]	; (3954 <getSettings+0xc4>)
    393c:	4798      	blx	r3
    }

    findMainAltitude();
    393e:	4b06      	ldr	r3, [pc, #24]	; (3958 <getSettings+0xc8>)
    3940:	4798      	blx	r3

}
    3942:	b041      	add	sp, #260	; 0x104
    3944:	bd00      	pop	{pc}
    3946:	46c0      	nop			; (mov r8, r8)
    3948:	0000035d 	.word	0x0000035d
    394c:	20000180 	.word	0x20000180
    3950:	000037f1 	.word	0x000037f1
    3954:	00003821 	.word	0x00003821
    3958:	000037a5 	.word	0x000037a5

0000395c <sendFlightLogs>:
#include <util.h>
#include <boardDefines.h>

void sendFlightLogs() {
    395c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    395e:	2400      	movs	r4, #0

        if (isFlightLogged(flightLog)) {
    3960:	0020      	movs	r0, r4
    3962:	4b1e      	ldr	r3, [pc, #120]	; (39dc <sendFlightLogs+0x80>)
    3964:	4798      	blx	r3
    3966:	2800      	cmp	r0, #0
    3968:	d003      	beq.n	3972 <sendFlightLogs+0x16>

            usartDataOut(USART3, flightLog);
    396a:	0021      	movs	r1, r4
    396c:	2003      	movs	r0, #3
    396e:	4b1c      	ldr	r3, [pc, #112]	; (39e0 <sendFlightLogs+0x84>)
    3970:	4798      	blx	r3
#include <boardDefines.h>

void sendFlightLogs() {

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    3972:	3401      	adds	r4, #1
    3974:	b2e4      	uxtb	r4, r4
    3976:	2c14      	cmp	r4, #20
    3978:	d1f2      	bne.n	3960 <sendFlightLogs+0x4>

            usartDataOut(USART3, flightLog);
        }
    }
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);
    397a:	21ff      	movs	r1, #255	; 0xff
    397c:	2003      	movs	r0, #3
    397e:	4c18      	ldr	r4, [pc, #96]	; (39e0 <sendFlightLogs+0x84>)
    3980:	47a0      	blx	r4

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    3982:	4a18      	ldr	r2, [pc, #96]	; (39e4 <sendFlightLogs+0x88>)
    3984:	7e13      	ldrb	r3, [r2, #24]
    3986:	075b      	lsls	r3, r3, #29
    3988:	d5fc      	bpl.n	3984 <sendFlightLogs+0x28>
    volatile u8_t flightToRead = usartDataIn(USART3);
    398a:	4b17      	ldr	r3, [pc, #92]	; (39e8 <sendFlightLogs+0x8c>)
    398c:	2003      	movs	r0, #3
    398e:	4798      	blx	r3
    3990:	466b      	mov	r3, sp
    3992:	71d8      	strb	r0, [r3, #7]


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    3994:	79d8      	ldrb	r0, [r3, #7]
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    volatile u8_t flightToRead = usartDataIn(USART3);
    3996:	1ddd      	adds	r5, r3, #7


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    3998:	b2c0      	uxtb	r0, r0
    399a:	4b14      	ldr	r3, [pc, #80]	; (39ec <sendFlightLogs+0x90>)
    399c:	4798      	blx	r3
    399e:	0007      	movs	r7, r0
    u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
    39a0:	7828      	ldrb	r0, [r5, #0]
    39a2:	4b13      	ldr	r3, [pc, #76]	; (39f0 <sendFlightLogs+0x94>)
    39a4:	b2c0      	uxtb	r0, r0
    39a6:	4798      	blx	r3
    39a8:	0006      	movs	r6, r0

    //inform of page numbers
    u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    39aa:	1bc5      	subs	r5, r0, r7
    39ac:	0a2d      	lsrs	r5, r5, #8
    usartDataOut(USART3, pagesToSend >> 0);
    39ae:	b2e9      	uxtb	r1, r5
    39b0:	2003      	movs	r0, #3
    39b2:	47a0      	blx	r4
    usartDataOut(USART3, pagesToSend >> 8);
    39b4:	b2a9      	uxth	r1, r5
    39b6:	0a09      	lsrs	r1, r1, #8
    39b8:	2003      	movs	r0, #3
    39ba:	47a0      	blx	r4

    //send flight end address for % full
    usartDataOut(USART3, flightEndAddress >> 0);
    39bc:	b2f1      	uxtb	r1, r6
    39be:	2003      	movs	r0, #3
    39c0:	47a0      	blx	r4
    usartDataOut(USART3, flightEndAddress >> 8);
    39c2:	0a31      	lsrs	r1, r6, #8
    39c4:	b2c9      	uxtb	r1, r1
    39c6:	2003      	movs	r0, #3
    39c8:	47a0      	blx	r4
    usartDataOut(USART3, flightEndAddress >> 16);
    39ca:	0c31      	lsrs	r1, r6, #16
    39cc:	b2c9      	uxtb	r1, r1
    39ce:	2003      	movs	r0, #3
    39d0:	47a0      	blx	r4

    //USART out the flights pages
    sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    39d2:	0031      	movs	r1, r6
    39d4:	0038      	movs	r0, r7
    39d6:	4b07      	ldr	r3, [pc, #28]	; (39f4 <sendFlightLogs+0x98>)
    39d8:	4798      	blx	r3

}
    39da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    39dc:	00003155 	.word	0x00003155
    39e0:	0000377d 	.word	0x0000377d
    39e4:	42001400 	.word	0x42001400
    39e8:	00003795 	.word	0x00003795
    39ec:	00003105 	.word	0x00003105
    39f0:	0000312d 	.word	0x0000312d
    39f4:	00000add 	.word	0x00000add

000039f8 <attemptConnection>:

void attemptConnection() {
    39f8:	b570      	push	{r4, r5, r6, lr}

    if (USARTconnectionAvaliable()) {
    39fa:	4b14      	ldr	r3, [pc, #80]	; (3a4c <attemptConnection+0x54>)
    39fc:	4798      	blx	r3
    39fe:	2800      	cmp	r0, #0
    3a00:	d022      	beq.n	3a48 <attemptConnection+0x50>

        flightState = flightIdle;
    3a02:	2201      	movs	r2, #1
    3a04:	4b12      	ldr	r3, [pc, #72]	; (3a50 <attemptConnection+0x58>)
    3a06:	701a      	strb	r2, [r3, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    3a08:	4a12      	ldr	r2, [pc, #72]	; (3a54 <attemptConnection+0x5c>)
    3a0a:	7e13      	ldrb	r3, [r2, #24]
    3a0c:	075b      	lsls	r3, r3, #29
    3a0e:	d5fc      	bpl.n	3a0a <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    3a10:	2003      	movs	r0, #3
    3a12:	4b11      	ldr	r3, [pc, #68]	; (3a58 <attemptConnection+0x60>)
    3a14:	4798      	blx	r3
    3a16:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    3a18:	2c4c      	cmp	r4, #76	; 0x4c
    3a1a:	d102      	bne.n	3a22 <attemptConnection+0x2a>

            sendFlightLogs();
    3a1c:	4b0f      	ldr	r3, [pc, #60]	; (3a5c <attemptConnection+0x64>)
    3a1e:	4798      	blx	r3
    3a20:	e012      	b.n	3a48 <attemptConnection+0x50>
        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    3a22:	2845      	cmp	r0, #69	; 0x45
    3a24:	d110      	bne.n	3a48 <attemptConnection+0x50>

            //getSettings();

            AT25SFChipErase();
    3a26:	4e0e      	ldr	r6, [pc, #56]	; (3a60 <attemptConnection+0x68>)
    3a28:	47b0      	blx	r6
            AT25SFHoldTillReady();
    3a2a:	4d0e      	ldr	r5, [pc, #56]	; (3a64 <attemptConnection+0x6c>)
    3a2c:	47a8      	blx	r5
            delay_ms(100);
    3a2e:	2064      	movs	r0, #100	; 0x64
    3a30:	4b0d      	ldr	r3, [pc, #52]	; (3a68 <attemptConnection+0x70>)
    3a32:	4798      	blx	r3
            AT25SFChipErase();
    3a34:	47b0      	blx	r6

            AT25SFHoldTillReady();
    3a36:	47a8      	blx	r5

            //getSettings();

            usartDataOut(USART3, 'E');
    3a38:	2003      	movs	r0, #3
    3a3a:	4b0c      	ldr	r3, [pc, #48]	; (3a6c <attemptConnection+0x74>)
    3a3c:	0021      	movs	r1, r4
    3a3e:	4798      	blx	r3
            beep(400);
    3a40:	20c8      	movs	r0, #200	; 0xc8
    3a42:	4b0b      	ldr	r3, [pc, #44]	; (3a70 <attemptConnection+0x78>)
    3a44:	0040      	lsls	r0, r0, #1
    3a46:	4798      	blx	r3


        }
    }

}
    3a48:	bd70      	pop	{r4, r5, r6, pc}
    3a4a:	46c0      	nop			; (mov r8, r8)
    3a4c:	00000aa9 	.word	0x00000aa9
    3a50:	200001ac 	.word	0x200001ac
    3a54:	42001400 	.word	0x42001400
    3a58:	00003795 	.word	0x00003795
    3a5c:	0000395d 	.word	0x0000395d
    3a60:	00000219 	.word	0x00000219
    3a64:	000001e5 	.word	0x000001e5
    3a68:	000010fd 	.word	0x000010fd
    3a6c:	0000377d 	.word	0x0000377d
    3a70:	00000e2d 	.word	0x00000e2d

00003a74 <pow>:
    3a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a76:	465f      	mov	r7, fp
    3a78:	464d      	mov	r5, r9
    3a7a:	4656      	mov	r6, sl
    3a7c:	4644      	mov	r4, r8
    3a7e:	b4f0      	push	{r4, r5, r6, r7}
    3a80:	b091      	sub	sp, #68	; 0x44
    3a82:	001f      	movs	r7, r3
    3a84:	0004      	movs	r4, r0
    3a86:	000d      	movs	r5, r1
    3a88:	0016      	movs	r6, r2
    3a8a:	f000 f9af 	bl	3dec <__ieee754_pow>
    3a8e:	4bcf      	ldr	r3, [pc, #828]	; (3dcc <pow+0x358>)
    3a90:	9002      	str	r0, [sp, #8]
    3a92:	9103      	str	r1, [sp, #12]
    3a94:	469b      	mov	fp, r3
    3a96:	781b      	ldrb	r3, [r3, #0]
    3a98:	b25b      	sxtb	r3, r3
    3a9a:	4699      	mov	r9, r3
    3a9c:	3301      	adds	r3, #1
    3a9e:	d04f      	beq.n	3b40 <pow+0xcc>
    3aa0:	0032      	movs	r2, r6
    3aa2:	003b      	movs	r3, r7
    3aa4:	0030      	movs	r0, r6
    3aa6:	0039      	movs	r1, r7
    3aa8:	f003 f866 	bl	6b78 <__aeabi_dcmpun>
    3aac:	9000      	str	r0, [sp, #0]
    3aae:	2800      	cmp	r0, #0
    3ab0:	d146      	bne.n	3b40 <pow+0xcc>
    3ab2:	0022      	movs	r2, r4
    3ab4:	002b      	movs	r3, r5
    3ab6:	0020      	movs	r0, r4
    3ab8:	0029      	movs	r1, r5
    3aba:	f003 f85d 	bl	6b78 <__aeabi_dcmpun>
    3abe:	2200      	movs	r2, #0
    3ac0:	4682      	mov	sl, r0
    3ac2:	2800      	cmp	r0, #0
    3ac4:	d134      	bne.n	3b30 <pow+0xbc>
    3ac6:	2300      	movs	r3, #0
    3ac8:	0020      	movs	r0, r4
    3aca:	0029      	movs	r1, r5
    3acc:	f001 f988 	bl	4de0 <__aeabi_dcmpeq>
    3ad0:	2800      	cmp	r0, #0
    3ad2:	d03a      	beq.n	3b4a <pow+0xd6>
    3ad4:	2200      	movs	r2, #0
    3ad6:	2300      	movs	r3, #0
    3ad8:	0030      	movs	r0, r6
    3ada:	0039      	movs	r1, r7
    3adc:	f001 f980 	bl	4de0 <__aeabi_dcmpeq>
    3ae0:	9005      	str	r0, [sp, #20]
    3ae2:	2800      	cmp	r0, #0
    3ae4:	d100      	bne.n	3ae8 <pow+0x74>
    3ae6:	e074      	b.n	3bd2 <pow+0x15e>
    3ae8:	ab06      	add	r3, sp, #24
    3aea:	4698      	mov	r8, r3
    3aec:	2301      	movs	r3, #1
    3aee:	4642      	mov	r2, r8
    3af0:	9306      	str	r3, [sp, #24]
    3af2:	4bb7      	ldr	r3, [pc, #732]	; (3dd0 <pow+0x35c>)
    3af4:	6053      	str	r3, [r2, #4]
    3af6:	4643      	mov	r3, r8
    3af8:	4652      	mov	r2, sl
    3afa:	609c      	str	r4, [r3, #8]
    3afc:	60dd      	str	r5, [r3, #12]
    3afe:	621a      	str	r2, [r3, #32]
    3b00:	611e      	str	r6, [r3, #16]
    3b02:	615f      	str	r7, [r3, #20]
    3b04:	4642      	mov	r2, r8
    3b06:	2300      	movs	r3, #0
    3b08:	2400      	movs	r4, #0
    3b0a:	6193      	str	r3, [r2, #24]
    3b0c:	61d4      	str	r4, [r2, #28]
    3b0e:	464b      	mov	r3, r9
    3b10:	2b00      	cmp	r3, #0
    3b12:	d100      	bne.n	3b16 <pow+0xa2>
    3b14:	e094      	b.n	3c40 <pow+0x1cc>
    3b16:	2300      	movs	r3, #0
    3b18:	4cae      	ldr	r4, [pc, #696]	; (3dd4 <pow+0x360>)
    3b1a:	9300      	str	r3, [sp, #0]
    3b1c:	9401      	str	r4, [sp, #4]
    3b1e:	9800      	ldr	r0, [sp, #0]
    3b20:	9901      	ldr	r1, [sp, #4]
    3b22:	b011      	add	sp, #68	; 0x44
    3b24:	bc3c      	pop	{r2, r3, r4, r5}
    3b26:	4690      	mov	r8, r2
    3b28:	4699      	mov	r9, r3
    3b2a:	46a2      	mov	sl, r4
    3b2c:	46ab      	mov	fp, r5
    3b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b30:	2300      	movs	r3, #0
    3b32:	0030      	movs	r0, r6
    3b34:	0039      	movs	r1, r7
    3b36:	f001 f953 	bl	4de0 <__aeabi_dcmpeq>
    3b3a:	2800      	cmp	r0, #0
    3b3c:	d000      	beq.n	3b40 <pow+0xcc>
    3b3e:	e0eb      	b.n	3d18 <pow+0x2a4>
    3b40:	9b02      	ldr	r3, [sp, #8]
    3b42:	9c03      	ldr	r4, [sp, #12]
    3b44:	9300      	str	r3, [sp, #0]
    3b46:	9401      	str	r4, [sp, #4]
    3b48:	e7e9      	b.n	3b1e <pow+0xaa>
    3b4a:	9802      	ldr	r0, [sp, #8]
    3b4c:	9903      	ldr	r1, [sp, #12]
    3b4e:	f000 ff7d 	bl	4a4c <finite>
    3b52:	4681      	mov	r9, r0
    3b54:	2800      	cmp	r0, #0
    3b56:	d100      	bne.n	3b5a <pow+0xe6>
    3b58:	e086      	b.n	3c68 <pow+0x1f4>
    3b5a:	9802      	ldr	r0, [sp, #8]
    3b5c:	9903      	ldr	r1, [sp, #12]
    3b5e:	2200      	movs	r2, #0
    3b60:	2300      	movs	r3, #0
    3b62:	f001 f93d 	bl	4de0 <__aeabi_dcmpeq>
    3b66:	2800      	cmp	r0, #0
    3b68:	d0ea      	beq.n	3b40 <pow+0xcc>
    3b6a:	0020      	movs	r0, r4
    3b6c:	0029      	movs	r1, r5
    3b6e:	f000 ff6d 	bl	4a4c <finite>
    3b72:	9a02      	ldr	r2, [sp, #8]
    3b74:	9b03      	ldr	r3, [sp, #12]
    3b76:	9200      	str	r2, [sp, #0]
    3b78:	9301      	str	r3, [sp, #4]
    3b7a:	2800      	cmp	r0, #0
    3b7c:	d0cf      	beq.n	3b1e <pow+0xaa>
    3b7e:	0030      	movs	r0, r6
    3b80:	0039      	movs	r1, r7
    3b82:	f000 ff63 	bl	4a4c <finite>
    3b86:	9a02      	ldr	r2, [sp, #8]
    3b88:	9b03      	ldr	r3, [sp, #12]
    3b8a:	9200      	str	r2, [sp, #0]
    3b8c:	9301      	str	r3, [sp, #4]
    3b8e:	2800      	cmp	r0, #0
    3b90:	d0c5      	beq.n	3b1e <pow+0xaa>
    3b92:	ab06      	add	r3, sp, #24
    3b94:	4698      	mov	r8, r3
    3b96:	2304      	movs	r3, #4
    3b98:	4642      	mov	r2, r8
    3b9a:	9306      	str	r3, [sp, #24]
    3b9c:	4b8c      	ldr	r3, [pc, #560]	; (3dd0 <pow+0x35c>)
    3b9e:	6094      	str	r4, [r2, #8]
    3ba0:	60d5      	str	r5, [r2, #12]
    3ba2:	6053      	str	r3, [r2, #4]
    3ba4:	2300      	movs	r3, #0
    3ba6:	2400      	movs	r4, #0
    3ba8:	6213      	str	r3, [r2, #32]
    3baa:	2300      	movs	r3, #0
    3bac:	6193      	str	r3, [r2, #24]
    3bae:	61d4      	str	r4, [r2, #28]
    3bb0:	465b      	mov	r3, fp
    3bb2:	781b      	ldrb	r3, [r3, #0]
    3bb4:	6116      	str	r6, [r2, #16]
    3bb6:	6157      	str	r7, [r2, #20]
    3bb8:	b25b      	sxtb	r3, r3
    3bba:	2b02      	cmp	r3, #2
    3bbc:	d004      	beq.n	3bc8 <pow+0x154>
    3bbe:	4640      	mov	r0, r8
    3bc0:	f000 ff4e 	bl	4a60 <matherr>
    3bc4:	2800      	cmp	r0, #0
    3bc6:	d140      	bne.n	3c4a <pow+0x1d6>
    3bc8:	f003 f9a4 	bl	6f14 <__errno>
    3bcc:	2322      	movs	r3, #34	; 0x22
    3bce:	6003      	str	r3, [r0, #0]
    3bd0:	e03b      	b.n	3c4a <pow+0x1d6>
    3bd2:	0030      	movs	r0, r6
    3bd4:	0039      	movs	r1, r7
    3bd6:	f000 ff39 	bl	4a4c <finite>
    3bda:	9a02      	ldr	r2, [sp, #8]
    3bdc:	9b03      	ldr	r3, [sp, #12]
    3bde:	9200      	str	r2, [sp, #0]
    3be0:	9301      	str	r3, [sp, #4]
    3be2:	2800      	cmp	r0, #0
    3be4:	d09b      	beq.n	3b1e <pow+0xaa>
    3be6:	2200      	movs	r2, #0
    3be8:	2300      	movs	r3, #0
    3bea:	0030      	movs	r0, r6
    3bec:	0039      	movs	r1, r7
    3bee:	f001 f8fd 	bl	4dec <__aeabi_dcmplt>
    3bf2:	2800      	cmp	r0, #0
    3bf4:	d100      	bne.n	3bf8 <pow+0x184>
    3bf6:	e792      	b.n	3b1e <pow+0xaa>
    3bf8:	ab06      	add	r3, sp, #24
    3bfa:	4698      	mov	r8, r3
    3bfc:	2301      	movs	r3, #1
    3bfe:	4642      	mov	r2, r8
    3c00:	9306      	str	r3, [sp, #24]
    3c02:	4b73      	ldr	r3, [pc, #460]	; (3dd0 <pow+0x35c>)
    3c04:	6053      	str	r3, [r2, #4]
    3c06:	4643      	mov	r3, r8
    3c08:	9a05      	ldr	r2, [sp, #20]
    3c0a:	609c      	str	r4, [r3, #8]
    3c0c:	60dd      	str	r5, [r3, #12]
    3c0e:	621a      	str	r2, [r3, #32]
    3c10:	611e      	str	r6, [r3, #16]
    3c12:	615f      	str	r7, [r3, #20]
    3c14:	465b      	mov	r3, fp
    3c16:	781b      	ldrb	r3, [r3, #0]
    3c18:	b25b      	sxtb	r3, r3
    3c1a:	2b00      	cmp	r3, #0
    3c1c:	d00b      	beq.n	3c36 <pow+0x1c2>
    3c1e:	2000      	movs	r0, #0
    3c20:	4642      	mov	r2, r8
    3c22:	496d      	ldr	r1, [pc, #436]	; (3dd8 <pow+0x364>)
    3c24:	6190      	str	r0, [r2, #24]
    3c26:	61d1      	str	r1, [r2, #28]
    3c28:	2b02      	cmp	r3, #2
    3c2a:	d109      	bne.n	3c40 <pow+0x1cc>
    3c2c:	f003 f972 	bl	6f14 <__errno>
    3c30:	2321      	movs	r3, #33	; 0x21
    3c32:	6003      	str	r3, [r0, #0]
    3c34:	e009      	b.n	3c4a <pow+0x1d6>
    3c36:	4642      	mov	r2, r8
    3c38:	2300      	movs	r3, #0
    3c3a:	2400      	movs	r4, #0
    3c3c:	6193      	str	r3, [r2, #24]
    3c3e:	61d4      	str	r4, [r2, #28]
    3c40:	4640      	mov	r0, r8
    3c42:	f000 ff0d 	bl	4a60 <matherr>
    3c46:	2800      	cmp	r0, #0
    3c48:	d0f0      	beq.n	3c2c <pow+0x1b8>
    3c4a:	4643      	mov	r3, r8
    3c4c:	6a1b      	ldr	r3, [r3, #32]
    3c4e:	2b00      	cmp	r3, #0
    3c50:	d004      	beq.n	3c5c <pow+0x1e8>
    3c52:	f003 f95f 	bl	6f14 <__errno>
    3c56:	4643      	mov	r3, r8
    3c58:	6a1b      	ldr	r3, [r3, #32]
    3c5a:	6003      	str	r3, [r0, #0]
    3c5c:	4643      	mov	r3, r8
    3c5e:	69dc      	ldr	r4, [r3, #28]
    3c60:	699b      	ldr	r3, [r3, #24]
    3c62:	9300      	str	r3, [sp, #0]
    3c64:	9401      	str	r4, [sp, #4]
    3c66:	e75a      	b.n	3b1e <pow+0xaa>
    3c68:	0020      	movs	r0, r4
    3c6a:	0029      	movs	r1, r5
    3c6c:	f000 feee 	bl	4a4c <finite>
    3c70:	2800      	cmp	r0, #0
    3c72:	d100      	bne.n	3c76 <pow+0x202>
    3c74:	e771      	b.n	3b5a <pow+0xe6>
    3c76:	0030      	movs	r0, r6
    3c78:	0039      	movs	r1, r7
    3c7a:	f000 fee7 	bl	4a4c <finite>
    3c7e:	2800      	cmp	r0, #0
    3c80:	d100      	bne.n	3c84 <pow+0x210>
    3c82:	e76a      	b.n	3b5a <pow+0xe6>
    3c84:	9802      	ldr	r0, [sp, #8]
    3c86:	9903      	ldr	r1, [sp, #12]
    3c88:	000b      	movs	r3, r1
    3c8a:	0002      	movs	r2, r0
    3c8c:	f002 ff74 	bl	6b78 <__aeabi_dcmpun>
    3c90:	ab06      	add	r3, sp, #24
    3c92:	4698      	mov	r8, r3
    3c94:	2800      	cmp	r0, #0
    3c96:	d17a      	bne.n	3d8e <pow+0x31a>
    3c98:	2303      	movs	r3, #3
    3c9a:	4642      	mov	r2, r8
    3c9c:	9306      	str	r3, [sp, #24]
    3c9e:	4b4c      	ldr	r3, [pc, #304]	; (3dd0 <pow+0x35c>)
    3ca0:	6210      	str	r0, [r2, #32]
    3ca2:	6053      	str	r3, [r2, #4]
    3ca4:	465b      	mov	r3, fp
    3ca6:	781b      	ldrb	r3, [r3, #0]
    3ca8:	6094      	str	r4, [r2, #8]
    3caa:	60d5      	str	r5, [r2, #12]
    3cac:	b25b      	sxtb	r3, r3
    3cae:	6116      	str	r6, [r2, #16]
    3cb0:	6157      	str	r7, [r2, #20]
    3cb2:	4699      	mov	r9, r3
    3cb4:	2b00      	cmp	r3, #0
    3cb6:	d148      	bne.n	3d4a <pow+0x2d6>
    3cb8:	22e0      	movs	r2, #224	; 0xe0
    3cba:	4641      	mov	r1, r8
    3cbc:	4b47      	ldr	r3, [pc, #284]	; (3ddc <pow+0x368>)
    3cbe:	0612      	lsls	r2, r2, #24
    3cc0:	618a      	str	r2, [r1, #24]
    3cc2:	61cb      	str	r3, [r1, #28]
    3cc4:	0020      	movs	r0, r4
    3cc6:	2200      	movs	r2, #0
    3cc8:	2300      	movs	r3, #0
    3cca:	0029      	movs	r1, r5
    3ccc:	f001 f88e 	bl	4dec <__aeabi_dcmplt>
    3cd0:	2800      	cmp	r0, #0
    3cd2:	d100      	bne.n	3cd6 <pow+0x262>
    3cd4:	e773      	b.n	3bbe <pow+0x14a>
    3cd6:	2200      	movs	r2, #0
    3cd8:	4b41      	ldr	r3, [pc, #260]	; (3de0 <pow+0x36c>)
    3cda:	0030      	movs	r0, r6
    3cdc:	0039      	movs	r1, r7
    3cde:	f002 f97d 	bl	5fdc <__aeabi_dmul>
    3ce2:	0004      	movs	r4, r0
    3ce4:	000d      	movs	r5, r1
    3ce6:	f000 fec3 	bl	4a70 <rint>
    3cea:	0002      	movs	r2, r0
    3cec:	000b      	movs	r3, r1
    3cee:	0020      	movs	r0, r4
    3cf0:	0029      	movs	r1, r5
    3cf2:	f001 f875 	bl	4de0 <__aeabi_dcmpeq>
    3cf6:	2800      	cmp	r0, #0
    3cf8:	d105      	bne.n	3d06 <pow+0x292>
    3cfa:	22e0      	movs	r2, #224	; 0xe0
    3cfc:	4b39      	ldr	r3, [pc, #228]	; (3de4 <pow+0x370>)
    3cfe:	0612      	lsls	r2, r2, #24
    3d00:	4641      	mov	r1, r8
    3d02:	618a      	str	r2, [r1, #24]
    3d04:	61cb      	str	r3, [r1, #28]
    3d06:	465b      	mov	r3, fp
    3d08:	781b      	ldrb	r3, [r3, #0]
    3d0a:	b25b      	sxtb	r3, r3
    3d0c:	4699      	mov	r9, r3
    3d0e:	464b      	mov	r3, r9
    3d10:	2b02      	cmp	r3, #2
    3d12:	d000      	beq.n	3d16 <pow+0x2a2>
    3d14:	e753      	b.n	3bbe <pow+0x14a>
    3d16:	e757      	b.n	3bc8 <pow+0x154>
    3d18:	ab06      	add	r3, sp, #24
    3d1a:	4698      	mov	r8, r3
    3d1c:	2301      	movs	r3, #1
    3d1e:	4642      	mov	r2, r8
    3d20:	9306      	str	r3, [sp, #24]
    3d22:	4b2b      	ldr	r3, [pc, #172]	; (3dd0 <pow+0x35c>)
    3d24:	6053      	str	r3, [r2, #4]
    3d26:	4643      	mov	r3, r8
    3d28:	609c      	str	r4, [r3, #8]
    3d2a:	60dd      	str	r5, [r3, #12]
    3d2c:	2400      	movs	r4, #0
    3d2e:	9a00      	ldr	r2, [sp, #0]
    3d30:	4d28      	ldr	r5, [pc, #160]	; (3dd4 <pow+0x360>)
    3d32:	621a      	str	r2, [r3, #32]
    3d34:	611e      	str	r6, [r3, #16]
    3d36:	615f      	str	r7, [r3, #20]
    3d38:	619c      	str	r4, [r3, #24]
    3d3a:	61dd      	str	r5, [r3, #28]
    3d3c:	464b      	mov	r3, r9
    3d3e:	9400      	str	r4, [sp, #0]
    3d40:	9501      	str	r5, [sp, #4]
    3d42:	2b02      	cmp	r3, #2
    3d44:	d000      	beq.n	3d48 <pow+0x2d4>
    3d46:	e77b      	b.n	3c40 <pow+0x1cc>
    3d48:	e6e9      	b.n	3b1e <pow+0xaa>
    3d4a:	2200      	movs	r2, #0
    3d4c:	4641      	mov	r1, r8
    3d4e:	4b26      	ldr	r3, [pc, #152]	; (3de8 <pow+0x374>)
    3d50:	0020      	movs	r0, r4
    3d52:	618a      	str	r2, [r1, #24]
    3d54:	61cb      	str	r3, [r1, #28]
    3d56:	2200      	movs	r2, #0
    3d58:	2300      	movs	r3, #0
    3d5a:	0029      	movs	r1, r5
    3d5c:	f001 f846 	bl	4dec <__aeabi_dcmplt>
    3d60:	2800      	cmp	r0, #0
    3d62:	d0d4      	beq.n	3d0e <pow+0x29a>
    3d64:	2200      	movs	r2, #0
    3d66:	4b1e      	ldr	r3, [pc, #120]	; (3de0 <pow+0x36c>)
    3d68:	0030      	movs	r0, r6
    3d6a:	0039      	movs	r1, r7
    3d6c:	f002 f936 	bl	5fdc <__aeabi_dmul>
    3d70:	0004      	movs	r4, r0
    3d72:	000d      	movs	r5, r1
    3d74:	f000 fe7c 	bl	4a70 <rint>
    3d78:	0002      	movs	r2, r0
    3d7a:	000b      	movs	r3, r1
    3d7c:	0020      	movs	r0, r4
    3d7e:	0029      	movs	r1, r5
    3d80:	f001 f82e 	bl	4de0 <__aeabi_dcmpeq>
    3d84:	2800      	cmp	r0, #0
    3d86:	d1be      	bne.n	3d06 <pow+0x292>
    3d88:	2200      	movs	r2, #0
    3d8a:	4b13      	ldr	r3, [pc, #76]	; (3dd8 <pow+0x364>)
    3d8c:	e7b8      	b.n	3d00 <pow+0x28c>
    3d8e:	2301      	movs	r3, #1
    3d90:	4642      	mov	r2, r8
    3d92:	9306      	str	r3, [sp, #24]
    3d94:	4b0e      	ldr	r3, [pc, #56]	; (3dd0 <pow+0x35c>)
    3d96:	6053      	str	r3, [r2, #4]
    3d98:	4643      	mov	r3, r8
    3d9a:	464a      	mov	r2, r9
    3d9c:	609c      	str	r4, [r3, #8]
    3d9e:	60dd      	str	r5, [r3, #12]
    3da0:	621a      	str	r2, [r3, #32]
    3da2:	611e      	str	r6, [r3, #16]
    3da4:	615f      	str	r7, [r3, #20]
    3da6:	2400      	movs	r4, #0
    3da8:	465b      	mov	r3, fp
    3daa:	571c      	ldrsb	r4, [r3, r4]
    3dac:	2c00      	cmp	r4, #0
    3dae:	d100      	bne.n	3db2 <pow+0x33e>
    3db0:	e741      	b.n	3c36 <pow+0x1c2>
    3db2:	2300      	movs	r3, #0
    3db4:	2200      	movs	r2, #0
    3db6:	0019      	movs	r1, r3
    3db8:	0010      	movs	r0, r2
    3dba:	f001 fceb 	bl	5794 <__aeabi_ddiv>
    3dbe:	4643      	mov	r3, r8
    3dc0:	6198      	str	r0, [r3, #24]
    3dc2:	61d9      	str	r1, [r3, #28]
    3dc4:	2c02      	cmp	r4, #2
    3dc6:	d100      	bne.n	3dca <pow+0x356>
    3dc8:	e730      	b.n	3c2c <pow+0x1b8>
    3dca:	e739      	b.n	3c40 <pow+0x1cc>
    3dcc:	200000b8 	.word	0x200000b8
    3dd0:	00006f8c 	.word	0x00006f8c
    3dd4:	3ff00000 	.word	0x3ff00000
    3dd8:	fff00000 	.word	0xfff00000
    3ddc:	47efffff 	.word	0x47efffff
    3de0:	3fe00000 	.word	0x3fe00000
    3de4:	c7efffff 	.word	0xc7efffff
    3de8:	7ff00000 	.word	0x7ff00000

00003dec <__ieee754_pow>:
    3dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dee:	4656      	mov	r6, sl
    3df0:	464d      	mov	r5, r9
    3df2:	4644      	mov	r4, r8
    3df4:	465f      	mov	r7, fp
    3df6:	b4f0      	push	{r4, r5, r6, r7}
    3df8:	001c      	movs	r4, r3
    3dfa:	0013      	movs	r3, r2
    3dfc:	0067      	lsls	r7, r4, #1
    3dfe:	b091      	sub	sp, #68	; 0x44
    3e00:	087f      	lsrs	r7, r7, #1
    3e02:	9300      	str	r3, [sp, #0]
    3e04:	9401      	str	r4, [sp, #4]
    3e06:	0006      	movs	r6, r0
    3e08:	000d      	movs	r5, r1
    3e0a:	4680      	mov	r8, r0
    3e0c:	4689      	mov	r9, r1
    3e0e:	46a2      	mov	sl, r4
    3e10:	433b      	orrs	r3, r7
    3e12:	d032      	beq.n	3e7a <__ieee754_pow+0x8e>
    3e14:	4b6e      	ldr	r3, [pc, #440]	; (3fd0 <__ieee754_pow+0x1e4>)
    3e16:	006c      	lsls	r4, r5, #1
    3e18:	0864      	lsrs	r4, r4, #1
    3e1a:	429c      	cmp	r4, r3
    3e1c:	dc29      	bgt.n	3e72 <__ieee754_pow+0x86>
    3e1e:	d026      	beq.n	3e6e <__ieee754_pow+0x82>
    3e20:	429f      	cmp	r7, r3
    3e22:	dc26      	bgt.n	3e72 <__ieee754_pow+0x86>
    3e24:	4b6a      	ldr	r3, [pc, #424]	; (3fd0 <__ieee754_pow+0x1e4>)
    3e26:	429f      	cmp	r7, r3
    3e28:	d100      	bne.n	3e2c <__ieee754_pow+0x40>
    3e2a:	e089      	b.n	3f40 <__ieee754_pow+0x154>
    3e2c:	2300      	movs	r3, #0
    3e2e:	469b      	mov	fp, r3
    3e30:	464b      	mov	r3, r9
    3e32:	2b00      	cmp	r3, #0
    3e34:	da00      	bge.n	3e38 <__ieee754_pow+0x4c>
    3e36:	e087      	b.n	3f48 <__ieee754_pow+0x15c>
    3e38:	2a00      	cmp	r2, #0
    3e3a:	d12f      	bne.n	3e9c <__ieee754_pow+0xb0>
    3e3c:	4b64      	ldr	r3, [pc, #400]	; (3fd0 <__ieee754_pow+0x1e4>)
    3e3e:	429f      	cmp	r7, r3
    3e40:	d100      	bne.n	3e44 <__ieee754_pow+0x58>
    3e42:	e09f      	b.n	3f84 <__ieee754_pow+0x198>
    3e44:	4b63      	ldr	r3, [pc, #396]	; (3fd4 <__ieee754_pow+0x1e8>)
    3e46:	429f      	cmp	r7, r3
    3e48:	d05d      	beq.n	3f06 <__ieee754_pow+0x11a>
    3e4a:	2380      	movs	r3, #128	; 0x80
    3e4c:	05db      	lsls	r3, r3, #23
    3e4e:	459a      	cmp	sl, r3
    3e50:	d101      	bne.n	3e56 <__ieee754_pow+0x6a>
    3e52:	f000 fbc1 	bl	45d8 <__ieee754_pow+0x7ec>
    3e56:	4b60      	ldr	r3, [pc, #384]	; (3fd8 <__ieee754_pow+0x1ec>)
    3e58:	459a      	cmp	sl, r3
    3e5a:	d11f      	bne.n	3e9c <__ieee754_pow+0xb0>
    3e5c:	464b      	mov	r3, r9
    3e5e:	2b00      	cmp	r3, #0
    3e60:	db1c      	blt.n	3e9c <__ieee754_pow+0xb0>
    3e62:	0030      	movs	r0, r6
    3e64:	0029      	movs	r1, r5
    3e66:	f000 fcf7 	bl	4858 <__ieee754_sqrt>
    3e6a:	0006      	movs	r6, r0
    3e6c:	e007      	b.n	3e7e <__ieee754_pow+0x92>
    3e6e:	2800      	cmp	r0, #0
    3e70:	d00d      	beq.n	3e8e <__ieee754_pow+0xa2>
    3e72:	4b5a      	ldr	r3, [pc, #360]	; (3fdc <__ieee754_pow+0x1f0>)
    3e74:	18e0      	adds	r0, r4, r3
    3e76:	4330      	orrs	r0, r6
    3e78:	d10b      	bne.n	3e92 <__ieee754_pow+0xa6>
    3e7a:	2600      	movs	r6, #0
    3e7c:	4955      	ldr	r1, [pc, #340]	; (3fd4 <__ieee754_pow+0x1e8>)
    3e7e:	0030      	movs	r0, r6
    3e80:	b011      	add	sp, #68	; 0x44
    3e82:	bc3c      	pop	{r2, r3, r4, r5}
    3e84:	4690      	mov	r8, r2
    3e86:	4699      	mov	r9, r3
    3e88:	46a2      	mov	sl, r4
    3e8a:	46ab      	mov	fp, r5
    3e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e8e:	42a7      	cmp	r7, r4
    3e90:	ddc8      	ble.n	3e24 <__ieee754_pow+0x38>
    3e92:	4853      	ldr	r0, [pc, #332]	; (3fe0 <__ieee754_pow+0x1f4>)
    3e94:	f000 fde6 	bl	4a64 <nan>
    3e98:	0006      	movs	r6, r0
    3e9a:	e7f0      	b.n	3e7e <__ieee754_pow+0x92>
    3e9c:	0030      	movs	r0, r6
    3e9e:	0029      	movs	r1, r5
    3ea0:	f000 fdd0 	bl	4a44 <fabs>
    3ea4:	4643      	mov	r3, r8
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	d01d      	beq.n	3ee6 <__ieee754_pow+0xfa>
    3eaa:	0feb      	lsrs	r3, r5, #31
    3eac:	3b01      	subs	r3, #1
    3eae:	4698      	mov	r8, r3
    3eb0:	465b      	mov	r3, fp
    3eb2:	4642      	mov	r2, r8
    3eb4:	4313      	orrs	r3, r2
    3eb6:	d079      	beq.n	3fac <__ieee754_pow+0x1c0>
    3eb8:	4b4a      	ldr	r3, [pc, #296]	; (3fe4 <__ieee754_pow+0x1f8>)
    3eba:	429f      	cmp	r7, r3
    3ebc:	dc00      	bgt.n	3ec0 <__ieee754_pow+0xd4>
    3ebe:	e09f      	b.n	4000 <__ieee754_pow+0x214>
    3ec0:	4b49      	ldr	r3, [pc, #292]	; (3fe8 <__ieee754_pow+0x1fc>)
    3ec2:	429f      	cmp	r7, r3
    3ec4:	dc01      	bgt.n	3eca <__ieee754_pow+0xde>
    3ec6:	f000 fbce 	bl	4666 <__ieee754_pow+0x87a>
    3eca:	4b48      	ldr	r3, [pc, #288]	; (3fec <__ieee754_pow+0x200>)
    3ecc:	429c      	cmp	r4, r3
    3ece:	dd79      	ble.n	3fc4 <__ieee754_pow+0x1d8>
    3ed0:	4653      	mov	r3, sl
    3ed2:	2b00      	cmp	r3, #0
    3ed4:	dd79      	ble.n	3fca <__ieee754_pow+0x1de>
    3ed6:	4a46      	ldr	r2, [pc, #280]	; (3ff0 <__ieee754_pow+0x204>)
    3ed8:	4b46      	ldr	r3, [pc, #280]	; (3ff4 <__ieee754_pow+0x208>)
    3eda:	0010      	movs	r0, r2
    3edc:	0019      	movs	r1, r3
    3ede:	f002 f87d 	bl	5fdc <__aeabi_dmul>
    3ee2:	0006      	movs	r6, r0
    3ee4:	e7cb      	b.n	3e7e <__ieee754_pow+0x92>
    3ee6:	2c00      	cmp	r4, #0
    3ee8:	d004      	beq.n	3ef4 <__ieee754_pow+0x108>
    3eea:	4a3a      	ldr	r2, [pc, #232]	; (3fd4 <__ieee754_pow+0x1e8>)
    3eec:	00ab      	lsls	r3, r5, #2
    3eee:	089b      	lsrs	r3, r3, #2
    3ef0:	4293      	cmp	r3, r2
    3ef2:	d1da      	bne.n	3eaa <__ieee754_pow+0xbe>
    3ef4:	4653      	mov	r3, sl
    3ef6:	2b00      	cmp	r3, #0
    3ef8:	da00      	bge.n	3efc <__ieee754_pow+0x110>
    3efa:	e3ad      	b.n	4658 <__ieee754_pow+0x86c>
    3efc:	464b      	mov	r3, r9
    3efe:	2b00      	cmp	r3, #0
    3f00:	db0d      	blt.n	3f1e <__ieee754_pow+0x132>
    3f02:	0006      	movs	r6, r0
    3f04:	e7bb      	b.n	3e7e <__ieee754_pow+0x92>
    3f06:	4653      	mov	r3, sl
    3f08:	0029      	movs	r1, r5
    3f0a:	2b00      	cmp	r3, #0
    3f0c:	dab7      	bge.n	3e7e <__ieee754_pow+0x92>
    3f0e:	0032      	movs	r2, r6
    3f10:	002b      	movs	r3, r5
    3f12:	2000      	movs	r0, #0
    3f14:	492f      	ldr	r1, [pc, #188]	; (3fd4 <__ieee754_pow+0x1e8>)
    3f16:	f001 fc3d 	bl	5794 <__aeabi_ddiv>
    3f1a:	0006      	movs	r6, r0
    3f1c:	e7af      	b.n	3e7e <__ieee754_pow+0x92>
    3f1e:	4b2f      	ldr	r3, [pc, #188]	; (3fdc <__ieee754_pow+0x1f0>)
    3f20:	469c      	mov	ip, r3
    3f22:	465b      	mov	r3, fp
    3f24:	4464      	add	r4, ip
    3f26:	431c      	orrs	r4, r3
    3f28:	d101      	bne.n	3f2e <__ieee754_pow+0x142>
    3f2a:	f000 fc2b 	bl	4784 <__ieee754_pow+0x998>
    3f2e:	465b      	mov	r3, fp
    3f30:	0006      	movs	r6, r0
    3f32:	2b01      	cmp	r3, #1
    3f34:	d1a3      	bne.n	3e7e <__ieee754_pow+0x92>
    3f36:	2380      	movs	r3, #128	; 0x80
    3f38:	061b      	lsls	r3, r3, #24
    3f3a:	469c      	mov	ip, r3
    3f3c:	4461      	add	r1, ip
    3f3e:	e79e      	b.n	3e7e <__ieee754_pow+0x92>
    3f40:	2a00      	cmp	r2, #0
    3f42:	d100      	bne.n	3f46 <__ieee754_pow+0x15a>
    3f44:	e772      	b.n	3e2c <__ieee754_pow+0x40>
    3f46:	e794      	b.n	3e72 <__ieee754_pow+0x86>
    3f48:	4b2b      	ldr	r3, [pc, #172]	; (3ff8 <__ieee754_pow+0x20c>)
    3f4a:	429f      	cmp	r7, r3
    3f4c:	dc2b      	bgt.n	3fa6 <__ieee754_pow+0x1ba>
    3f4e:	4b27      	ldr	r3, [pc, #156]	; (3fec <__ieee754_pow+0x200>)
    3f50:	429f      	cmp	r7, r3
    3f52:	dc00      	bgt.n	3f56 <__ieee754_pow+0x16a>
    3f54:	e770      	b.n	3e38 <__ieee754_pow+0x4c>
    3f56:	4929      	ldr	r1, [pc, #164]	; (3ffc <__ieee754_pow+0x210>)
    3f58:	153b      	asrs	r3, r7, #20
    3f5a:	468c      	mov	ip, r1
    3f5c:	4463      	add	r3, ip
    3f5e:	2b14      	cmp	r3, #20
    3f60:	dc01      	bgt.n	3f66 <__ieee754_pow+0x17a>
    3f62:	f000 fbf2 	bl	474a <__ieee754_pow+0x95e>
    3f66:	2134      	movs	r1, #52	; 0x34
    3f68:	1acb      	subs	r3, r1, r3
    3f6a:	9900      	ldr	r1, [sp, #0]
    3f6c:	40d9      	lsrs	r1, r3
    3f6e:	0008      	movs	r0, r1
    3f70:	4098      	lsls	r0, r3
    3f72:	4282      	cmp	r2, r0
    3f74:	d000      	beq.n	3f78 <__ieee754_pow+0x18c>
    3f76:	e75f      	b.n	3e38 <__ieee754_pow+0x4c>
    3f78:	2301      	movs	r3, #1
    3f7a:	4019      	ands	r1, r3
    3f7c:	3301      	adds	r3, #1
    3f7e:	1a5b      	subs	r3, r3, r1
    3f80:	469b      	mov	fp, r3
    3f82:	e759      	b.n	3e38 <__ieee754_pow+0x4c>
    3f84:	4b15      	ldr	r3, [pc, #84]	; (3fdc <__ieee754_pow+0x1f0>)
    3f86:	18e0      	adds	r0, r4, r3
    3f88:	4306      	orrs	r6, r0
    3f8a:	d100      	bne.n	3f8e <__ieee754_pow+0x1a2>
    3f8c:	e775      	b.n	3e7a <__ieee754_pow+0x8e>
    3f8e:	4b17      	ldr	r3, [pc, #92]	; (3fec <__ieee754_pow+0x200>)
    3f90:	429c      	cmp	r4, r3
    3f92:	dc00      	bgt.n	3f96 <__ieee754_pow+0x1aa>
    3f94:	e351      	b.n	463a <__ieee754_pow+0x84e>
    3f96:	4653      	mov	r3, sl
    3f98:	2b00      	cmp	r3, #0
    3f9a:	db16      	blt.n	3fca <__ieee754_pow+0x1de>
    3f9c:	9b00      	ldr	r3, [sp, #0]
    3f9e:	9c01      	ldr	r4, [sp, #4]
    3fa0:	001e      	movs	r6, r3
    3fa2:	0021      	movs	r1, r4
    3fa4:	e76b      	b.n	3e7e <__ieee754_pow+0x92>
    3fa6:	2302      	movs	r3, #2
    3fa8:	469b      	mov	fp, r3
    3faa:	e745      	b.n	3e38 <__ieee754_pow+0x4c>
    3fac:	0032      	movs	r2, r6
    3fae:	002b      	movs	r3, r5
    3fb0:	0030      	movs	r0, r6
    3fb2:	0029      	movs	r1, r5
    3fb4:	f002 fa8c 	bl	64d0 <__aeabi_dsub>
    3fb8:	0002      	movs	r2, r0
    3fba:	000b      	movs	r3, r1
    3fbc:	f001 fbea 	bl	5794 <__aeabi_ddiv>
    3fc0:	0006      	movs	r6, r0
    3fc2:	e75c      	b.n	3e7e <__ieee754_pow+0x92>
    3fc4:	4653      	mov	r3, sl
    3fc6:	2b00      	cmp	r3, #0
    3fc8:	db85      	blt.n	3ed6 <__ieee754_pow+0xea>
    3fca:	2600      	movs	r6, #0
    3fcc:	2100      	movs	r1, #0
    3fce:	e756      	b.n	3e7e <__ieee754_pow+0x92>
    3fd0:	7ff00000 	.word	0x7ff00000
    3fd4:	3ff00000 	.word	0x3ff00000
    3fd8:	3fe00000 	.word	0x3fe00000
    3fdc:	c0100000 	.word	0xc0100000
    3fe0:	00006f90 	.word	0x00006f90
    3fe4:	41e00000 	.word	0x41e00000
    3fe8:	43f00000 	.word	0x43f00000
    3fec:	3fefffff 	.word	0x3fefffff
    3ff0:	8800759c 	.word	0x8800759c
    3ff4:	7e37e43c 	.word	0x7e37e43c
    3ff8:	433fffff 	.word	0x433fffff
    3ffc:	fffffc01 	.word	0xfffffc01
    4000:	4be8      	ldr	r3, [pc, #928]	; (43a4 <__ieee754_pow+0x5b8>)
    4002:	2200      	movs	r2, #0
    4004:	429c      	cmp	r4, r3
    4006:	dc06      	bgt.n	4016 <__ieee754_pow+0x22a>
    4008:	2200      	movs	r2, #0
    400a:	4be7      	ldr	r3, [pc, #924]	; (43a8 <__ieee754_pow+0x5bc>)
    400c:	f001 ffe6 	bl	5fdc <__aeabi_dmul>
    4010:	2235      	movs	r2, #53	; 0x35
    4012:	000c      	movs	r4, r1
    4014:	4252      	negs	r2, r2
    4016:	4de5      	ldr	r5, [pc, #916]	; (43ac <__ieee754_pow+0x5c0>)
    4018:	1523      	asrs	r3, r4, #20
    401a:	46ac      	mov	ip, r5
    401c:	4463      	add	r3, ip
    401e:	4699      	mov	r9, r3
    4020:	0324      	lsls	r4, r4, #12
    4022:	4de3      	ldr	r5, [pc, #908]	; (43b0 <__ieee754_pow+0x5c4>)
    4024:	4be3      	ldr	r3, [pc, #908]	; (43b4 <__ieee754_pow+0x5c8>)
    4026:	0b24      	lsrs	r4, r4, #12
    4028:	4491      	add	r9, r2
    402a:	4325      	orrs	r5, r4
    402c:	429c      	cmp	r4, r3
    402e:	dd09      	ble.n	4044 <__ieee754_pow+0x258>
    4030:	4be1      	ldr	r3, [pc, #900]	; (43b8 <__ieee754_pow+0x5cc>)
    4032:	429c      	cmp	r4, r3
    4034:	dc00      	bgt.n	4038 <__ieee754_pow+0x24c>
    4036:	e3a9      	b.n	478c <__ieee754_pow+0x9a0>
    4038:	2301      	movs	r3, #1
    403a:	469c      	mov	ip, r3
    403c:	4bdf      	ldr	r3, [pc, #892]	; (43bc <__ieee754_pow+0x5d0>)
    403e:	44e1      	add	r9, ip
    4040:	469c      	mov	ip, r3
    4042:	4465      	add	r5, ip
    4044:	2300      	movs	r3, #0
    4046:	2400      	movs	r4, #0
    4048:	2200      	movs	r2, #0
    404a:	9308      	str	r3, [sp, #32]
    404c:	9409      	str	r4, [sp, #36]	; 0x24
    404e:	930c      	str	r3, [sp, #48]	; 0x30
    4050:	940d      	str	r4, [sp, #52]	; 0x34
    4052:	2400      	movs	r4, #0
    4054:	4bd6      	ldr	r3, [pc, #856]	; (43b0 <__ieee754_pow+0x5c4>)
    4056:	9206      	str	r2, [sp, #24]
    4058:	9307      	str	r3, [sp, #28]
    405a:	9a06      	ldr	r2, [sp, #24]
    405c:	9b07      	ldr	r3, [sp, #28]
    405e:	0029      	movs	r1, r5
    4060:	900a      	str	r0, [sp, #40]	; 0x28
    4062:	910b      	str	r1, [sp, #44]	; 0x2c
    4064:	f002 fa34 	bl	64d0 <__aeabi_dsub>
    4068:	9a06      	ldr	r2, [sp, #24]
    406a:	9b07      	ldr	r3, [sp, #28]
    406c:	0006      	movs	r6, r0
    406e:	000f      	movs	r7, r1
    4070:	980a      	ldr	r0, [sp, #40]	; 0x28
    4072:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4074:	f001 f862 	bl	513c <__aeabi_dadd>
    4078:	0002      	movs	r2, r0
    407a:	000b      	movs	r3, r1
    407c:	2000      	movs	r0, #0
    407e:	49cc      	ldr	r1, [pc, #816]	; (43b0 <__ieee754_pow+0x5c4>)
    4080:	f001 fb88 	bl	5794 <__aeabi_ddiv>
    4084:	000a      	movs	r2, r1
    4086:	0001      	movs	r1, r0
    4088:	0013      	movs	r3, r2
    408a:	910e      	str	r1, [sp, #56]	; 0x38
    408c:	920f      	str	r2, [sp, #60]	; 0x3c
    408e:	0002      	movs	r2, r0
    4090:	0039      	movs	r1, r7
    4092:	0030      	movs	r0, r6
    4094:	f001 ffa2 	bl	5fdc <__aeabi_dmul>
    4098:	000a      	movs	r2, r1
    409a:	0001      	movs	r1, r0
    409c:	2080      	movs	r0, #128	; 0x80
    409e:	9104      	str	r1, [sp, #16]
    40a0:	9205      	str	r2, [sp, #20]
    40a2:	0013      	movs	r3, r2
    40a4:	2200      	movs	r2, #0
    40a6:	2180      	movs	r1, #128	; 0x80
    40a8:	0300      	lsls	r0, r0, #12
    40aa:	4684      	mov	ip, r0
    40ac:	9202      	str	r2, [sp, #8]
    40ae:	9303      	str	r3, [sp, #12]
    40b0:	2200      	movs	r2, #0
    40b2:	0589      	lsls	r1, r1, #22
    40b4:	106d      	asrs	r5, r5, #1
    40b6:	430d      	orrs	r5, r1
    40b8:	4465      	add	r5, ip
    40ba:	192b      	adds	r3, r5, r4
    40bc:	9802      	ldr	r0, [sp, #8]
    40be:	9903      	ldr	r1, [sp, #12]
    40c0:	0014      	movs	r4, r2
    40c2:	001d      	movs	r5, r3
    40c4:	f001 ff8a 	bl	5fdc <__aeabi_dmul>
    40c8:	0002      	movs	r2, r0
    40ca:	000b      	movs	r3, r1
    40cc:	0030      	movs	r0, r6
    40ce:	0039      	movs	r1, r7
    40d0:	f002 f9fe 	bl	64d0 <__aeabi_dsub>
    40d4:	9a06      	ldr	r2, [sp, #24]
    40d6:	9b07      	ldr	r3, [sp, #28]
    40d8:	0006      	movs	r6, r0
    40da:	000f      	movs	r7, r1
    40dc:	0020      	movs	r0, r4
    40de:	0029      	movs	r1, r5
    40e0:	f002 f9f6 	bl	64d0 <__aeabi_dsub>
    40e4:	0002      	movs	r2, r0
    40e6:	000b      	movs	r3, r1
    40e8:	980a      	ldr	r0, [sp, #40]	; 0x28
    40ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
    40ec:	f002 f9f0 	bl	64d0 <__aeabi_dsub>
    40f0:	9a02      	ldr	r2, [sp, #8]
    40f2:	9b03      	ldr	r3, [sp, #12]
    40f4:	f001 ff72 	bl	5fdc <__aeabi_dmul>
    40f8:	0002      	movs	r2, r0
    40fa:	000b      	movs	r3, r1
    40fc:	0030      	movs	r0, r6
    40fe:	0039      	movs	r1, r7
    4100:	f002 f9e6 	bl	64d0 <__aeabi_dsub>
    4104:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4106:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4108:	f001 ff68 	bl	5fdc <__aeabi_dmul>
    410c:	9d04      	ldr	r5, [sp, #16]
    410e:	9e05      	ldr	r6, [sp, #20]
    4110:	9006      	str	r0, [sp, #24]
    4112:	9107      	str	r1, [sp, #28]
    4114:	002a      	movs	r2, r5
    4116:	0033      	movs	r3, r6
    4118:	0028      	movs	r0, r5
    411a:	0031      	movs	r1, r6
    411c:	f001 ff5e 	bl	5fdc <__aeabi_dmul>
    4120:	0006      	movs	r6, r0
    4122:	000f      	movs	r7, r1
    4124:	4aa6      	ldr	r2, [pc, #664]	; (43c0 <__ieee754_pow+0x5d4>)
    4126:	4ba7      	ldr	r3, [pc, #668]	; (43c4 <__ieee754_pow+0x5d8>)
    4128:	f001 ff58 	bl	5fdc <__aeabi_dmul>
    412c:	4aa6      	ldr	r2, [pc, #664]	; (43c8 <__ieee754_pow+0x5dc>)
    412e:	4ba7      	ldr	r3, [pc, #668]	; (43cc <__ieee754_pow+0x5e0>)
    4130:	f001 f804 	bl	513c <__aeabi_dadd>
    4134:	0032      	movs	r2, r6
    4136:	003b      	movs	r3, r7
    4138:	f001 ff50 	bl	5fdc <__aeabi_dmul>
    413c:	4aa4      	ldr	r2, [pc, #656]	; (43d0 <__ieee754_pow+0x5e4>)
    413e:	4ba5      	ldr	r3, [pc, #660]	; (43d4 <__ieee754_pow+0x5e8>)
    4140:	f000 fffc 	bl	513c <__aeabi_dadd>
    4144:	0032      	movs	r2, r6
    4146:	003b      	movs	r3, r7
    4148:	f001 ff48 	bl	5fdc <__aeabi_dmul>
    414c:	4aa2      	ldr	r2, [pc, #648]	; (43d8 <__ieee754_pow+0x5ec>)
    414e:	4ba3      	ldr	r3, [pc, #652]	; (43dc <__ieee754_pow+0x5f0>)
    4150:	f000 fff4 	bl	513c <__aeabi_dadd>
    4154:	0032      	movs	r2, r6
    4156:	003b      	movs	r3, r7
    4158:	f001 ff40 	bl	5fdc <__aeabi_dmul>
    415c:	4aa0      	ldr	r2, [pc, #640]	; (43e0 <__ieee754_pow+0x5f4>)
    415e:	4ba1      	ldr	r3, [pc, #644]	; (43e4 <__ieee754_pow+0x5f8>)
    4160:	f000 ffec 	bl	513c <__aeabi_dadd>
    4164:	0032      	movs	r2, r6
    4166:	003b      	movs	r3, r7
    4168:	f001 ff38 	bl	5fdc <__aeabi_dmul>
    416c:	4a9e      	ldr	r2, [pc, #632]	; (43e8 <__ieee754_pow+0x5fc>)
    416e:	4b9f      	ldr	r3, [pc, #636]	; (43ec <__ieee754_pow+0x600>)
    4170:	f000 ffe4 	bl	513c <__aeabi_dadd>
    4174:	0032      	movs	r2, r6
    4176:	0004      	movs	r4, r0
    4178:	000d      	movs	r5, r1
    417a:	003b      	movs	r3, r7
    417c:	0030      	movs	r0, r6
    417e:	0039      	movs	r1, r7
    4180:	f001 ff2c 	bl	5fdc <__aeabi_dmul>
    4184:	0002      	movs	r2, r0
    4186:	000b      	movs	r3, r1
    4188:	0020      	movs	r0, r4
    418a:	0029      	movs	r1, r5
    418c:	f001 ff26 	bl	5fdc <__aeabi_dmul>
    4190:	9e02      	ldr	r6, [sp, #8]
    4192:	9f03      	ldr	r7, [sp, #12]
    4194:	0004      	movs	r4, r0
    4196:	000d      	movs	r5, r1
    4198:	9804      	ldr	r0, [sp, #16]
    419a:	9905      	ldr	r1, [sp, #20]
    419c:	0032      	movs	r2, r6
    419e:	003b      	movs	r3, r7
    41a0:	f000 ffcc 	bl	513c <__aeabi_dadd>
    41a4:	9a06      	ldr	r2, [sp, #24]
    41a6:	9b07      	ldr	r3, [sp, #28]
    41a8:	f001 ff18 	bl	5fdc <__aeabi_dmul>
    41ac:	0022      	movs	r2, r4
    41ae:	002b      	movs	r3, r5
    41b0:	f000 ffc4 	bl	513c <__aeabi_dadd>
    41b4:	0032      	movs	r2, r6
    41b6:	900a      	str	r0, [sp, #40]	; 0x28
    41b8:	910b      	str	r1, [sp, #44]	; 0x2c
    41ba:	003b      	movs	r3, r7
    41bc:	0030      	movs	r0, r6
    41be:	0039      	movs	r1, r7
    41c0:	9602      	str	r6, [sp, #8]
    41c2:	9703      	str	r7, [sp, #12]
    41c4:	f001 ff0a 	bl	5fdc <__aeabi_dmul>
    41c8:	2200      	movs	r2, #0
    41ca:	4b89      	ldr	r3, [pc, #548]	; (43f0 <__ieee754_pow+0x604>)
    41cc:	0004      	movs	r4, r0
    41ce:	000d      	movs	r5, r1
    41d0:	f000 ffb4 	bl	513c <__aeabi_dadd>
    41d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    41d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    41d8:	f000 ffb0 	bl	513c <__aeabi_dadd>
    41dc:	2600      	movs	r6, #0
    41de:	000f      	movs	r7, r1
    41e0:	0032      	movs	r2, r6
    41e2:	000b      	movs	r3, r1
    41e4:	9802      	ldr	r0, [sp, #8]
    41e6:	9903      	ldr	r1, [sp, #12]
    41e8:	f001 fef8 	bl	5fdc <__aeabi_dmul>
    41ec:	2200      	movs	r2, #0
    41ee:	9002      	str	r0, [sp, #8]
    41f0:	9103      	str	r1, [sp, #12]
    41f2:	4b7f      	ldr	r3, [pc, #508]	; (43f0 <__ieee754_pow+0x604>)
    41f4:	0030      	movs	r0, r6
    41f6:	0039      	movs	r1, r7
    41f8:	f002 f96a 	bl	64d0 <__aeabi_dsub>
    41fc:	0022      	movs	r2, r4
    41fe:	002b      	movs	r3, r5
    4200:	f002 f966 	bl	64d0 <__aeabi_dsub>
    4204:	0002      	movs	r2, r0
    4206:	000b      	movs	r3, r1
    4208:	980a      	ldr	r0, [sp, #40]	; 0x28
    420a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    420c:	f002 f960 	bl	64d0 <__aeabi_dsub>
    4210:	9a04      	ldr	r2, [sp, #16]
    4212:	9b05      	ldr	r3, [sp, #20]
    4214:	f001 fee2 	bl	5fdc <__aeabi_dmul>
    4218:	0032      	movs	r2, r6
    421a:	0004      	movs	r4, r0
    421c:	000d      	movs	r5, r1
    421e:	9806      	ldr	r0, [sp, #24]
    4220:	9907      	ldr	r1, [sp, #28]
    4222:	003b      	movs	r3, r7
    4224:	f001 feda 	bl	5fdc <__aeabi_dmul>
    4228:	0002      	movs	r2, r0
    422a:	000b      	movs	r3, r1
    422c:	0020      	movs	r0, r4
    422e:	0029      	movs	r1, r5
    4230:	f000 ff84 	bl	513c <__aeabi_dadd>
    4234:	0004      	movs	r4, r0
    4236:	000d      	movs	r5, r1
    4238:	0002      	movs	r2, r0
    423a:	000b      	movs	r3, r1
    423c:	9802      	ldr	r0, [sp, #8]
    423e:	9903      	ldr	r1, [sp, #12]
    4240:	f000 ff7c 	bl	513c <__aeabi_dadd>
    4244:	2600      	movs	r6, #0
    4246:	22e0      	movs	r2, #224	; 0xe0
    4248:	4b6a      	ldr	r3, [pc, #424]	; (43f4 <__ieee754_pow+0x608>)
    424a:	0612      	lsls	r2, r2, #24
    424c:	0030      	movs	r0, r6
    424e:	000f      	movs	r7, r1
    4250:	f001 fec4 	bl	5fdc <__aeabi_dmul>
    4254:	9a02      	ldr	r2, [sp, #8]
    4256:	9b03      	ldr	r3, [sp, #12]
    4258:	9004      	str	r0, [sp, #16]
    425a:	9105      	str	r1, [sp, #20]
    425c:	0030      	movs	r0, r6
    425e:	0039      	movs	r1, r7
    4260:	f002 f936 	bl	64d0 <__aeabi_dsub>
    4264:	0002      	movs	r2, r0
    4266:	000b      	movs	r3, r1
    4268:	0020      	movs	r0, r4
    426a:	0029      	movs	r1, r5
    426c:	f002 f930 	bl	64d0 <__aeabi_dsub>
    4270:	4a61      	ldr	r2, [pc, #388]	; (43f8 <__ieee754_pow+0x60c>)
    4272:	4b60      	ldr	r3, [pc, #384]	; (43f4 <__ieee754_pow+0x608>)
    4274:	f001 feb2 	bl	5fdc <__aeabi_dmul>
    4278:	4a60      	ldr	r2, [pc, #384]	; (43fc <__ieee754_pow+0x610>)
    427a:	0004      	movs	r4, r0
    427c:	000d      	movs	r5, r1
    427e:	4b60      	ldr	r3, [pc, #384]	; (4400 <__ieee754_pow+0x614>)
    4280:	0030      	movs	r0, r6
    4282:	0039      	movs	r1, r7
    4284:	f001 feaa 	bl	5fdc <__aeabi_dmul>
    4288:	0002      	movs	r2, r0
    428a:	000b      	movs	r3, r1
    428c:	0020      	movs	r0, r4
    428e:	0029      	movs	r1, r5
    4290:	f000 ff54 	bl	513c <__aeabi_dadd>
    4294:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4298:	f000 ff50 	bl	513c <__aeabi_dadd>
    429c:	0006      	movs	r6, r0
    429e:	4648      	mov	r0, r9
    42a0:	000f      	movs	r7, r1
    42a2:	f002 fcbf 	bl	6c24 <__aeabi_i2d>
    42a6:	0004      	movs	r4, r0
    42a8:	000d      	movs	r5, r1
    42aa:	9804      	ldr	r0, [sp, #16]
    42ac:	9905      	ldr	r1, [sp, #20]
    42ae:	0032      	movs	r2, r6
    42b0:	003b      	movs	r3, r7
    42b2:	f000 ff43 	bl	513c <__aeabi_dadd>
    42b6:	9a08      	ldr	r2, [sp, #32]
    42b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    42ba:	f000 ff3f 	bl	513c <__aeabi_dadd>
    42be:	0022      	movs	r2, r4
    42c0:	002b      	movs	r3, r5
    42c2:	f000 ff3b 	bl	513c <__aeabi_dadd>
    42c6:	2000      	movs	r0, #0
    42c8:	0022      	movs	r2, r4
    42ca:	002b      	movs	r3, r5
    42cc:	9002      	str	r0, [sp, #8]
    42ce:	9103      	str	r1, [sp, #12]
    42d0:	f002 f8fe 	bl	64d0 <__aeabi_dsub>
    42d4:	9a08      	ldr	r2, [sp, #32]
    42d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    42d8:	f002 f8fa 	bl	64d0 <__aeabi_dsub>
    42dc:	9a04      	ldr	r2, [sp, #16]
    42de:	9b05      	ldr	r3, [sp, #20]
    42e0:	f002 f8f6 	bl	64d0 <__aeabi_dsub>
    42e4:	0002      	movs	r2, r0
    42e6:	000b      	movs	r3, r1
    42e8:	0030      	movs	r0, r6
    42ea:	0039      	movs	r1, r7
    42ec:	f002 f8f0 	bl	64d0 <__aeabi_dsub>
    42f0:	9004      	str	r0, [sp, #16]
    42f2:	9105      	str	r1, [sp, #20]
    42f4:	465b      	mov	r3, fp
    42f6:	4642      	mov	r2, r8
    42f8:	3b01      	subs	r3, #1
    42fa:	4313      	orrs	r3, r2
    42fc:	d100      	bne.n	4300 <__ieee754_pow+0x514>
    42fe:	e197      	b.n	4630 <__ieee754_pow+0x844>
    4300:	2300      	movs	r3, #0
    4302:	4c2b      	ldr	r4, [pc, #172]	; (43b0 <__ieee754_pow+0x5c4>)
    4304:	9306      	str	r3, [sp, #24]
    4306:	9407      	str	r4, [sp, #28]
    4308:	9800      	ldr	r0, [sp, #0]
    430a:	9901      	ldr	r1, [sp, #4]
    430c:	2600      	movs	r6, #0
    430e:	000b      	movs	r3, r1
    4310:	0032      	movs	r2, r6
    4312:	000f      	movs	r7, r1
    4314:	f002 f8dc 	bl	64d0 <__aeabi_dsub>
    4318:	9a02      	ldr	r2, [sp, #8]
    431a:	9b03      	ldr	r3, [sp, #12]
    431c:	f001 fe5e 	bl	5fdc <__aeabi_dmul>
    4320:	9a00      	ldr	r2, [sp, #0]
    4322:	9b01      	ldr	r3, [sp, #4]
    4324:	0004      	movs	r4, r0
    4326:	000d      	movs	r5, r1
    4328:	9804      	ldr	r0, [sp, #16]
    432a:	9905      	ldr	r1, [sp, #20]
    432c:	f001 fe56 	bl	5fdc <__aeabi_dmul>
    4330:	0002      	movs	r2, r0
    4332:	000b      	movs	r3, r1
    4334:	0020      	movs	r0, r4
    4336:	0029      	movs	r1, r5
    4338:	f000 ff00 	bl	513c <__aeabi_dadd>
    433c:	0004      	movs	r4, r0
    433e:	000d      	movs	r5, r1
    4340:	9802      	ldr	r0, [sp, #8]
    4342:	9903      	ldr	r1, [sp, #12]
    4344:	003b      	movs	r3, r7
    4346:	0032      	movs	r2, r6
    4348:	9404      	str	r4, [sp, #16]
    434a:	9505      	str	r5, [sp, #20]
    434c:	f001 fe46 	bl	5fdc <__aeabi_dmul>
    4350:	9000      	str	r0, [sp, #0]
    4352:	9101      	str	r1, [sp, #4]
    4354:	000b      	movs	r3, r1
    4356:	0002      	movs	r2, r0
    4358:	0029      	movs	r1, r5
    435a:	0020      	movs	r0, r4
    435c:	f000 feee 	bl	513c <__aeabi_dadd>
    4360:	4b28      	ldr	r3, [pc, #160]	; (4404 <__ieee754_pow+0x618>)
    4362:	4681      	mov	r9, r0
    4364:	1e0f      	subs	r7, r1, #0
    4366:	468a      	mov	sl, r1
    4368:	429f      	cmp	r7, r3
    436a:	dc00      	bgt.n	436e <__ieee754_pow+0x582>
    436c:	e13c      	b.n	45e8 <__ieee754_pow+0x7fc>
    436e:	4b26      	ldr	r3, [pc, #152]	; (4408 <__ieee754_pow+0x61c>)
    4370:	18cb      	adds	r3, r1, r3
    4372:	4303      	orrs	r3, r0
    4374:	d000      	beq.n	4378 <__ieee754_pow+0x58c>
    4376:	e1db      	b.n	4730 <__ieee754_pow+0x944>
    4378:	9804      	ldr	r0, [sp, #16]
    437a:	9905      	ldr	r1, [sp, #20]
    437c:	4a23      	ldr	r2, [pc, #140]	; (440c <__ieee754_pow+0x620>)
    437e:	4b24      	ldr	r3, [pc, #144]	; (4410 <__ieee754_pow+0x624>)
    4380:	f000 fedc 	bl	513c <__aeabi_dadd>
    4384:	9a00      	ldr	r2, [sp, #0]
    4386:	9b01      	ldr	r3, [sp, #4]
    4388:	0004      	movs	r4, r0
    438a:	000d      	movs	r5, r1
    438c:	4648      	mov	r0, r9
    438e:	0039      	movs	r1, r7
    4390:	f002 f89e 	bl	64d0 <__aeabi_dsub>
    4394:	0002      	movs	r2, r0
    4396:	000b      	movs	r3, r1
    4398:	0020      	movs	r0, r4
    439a:	0029      	movs	r1, r5
    439c:	f000 fd3a 	bl	4e14 <__aeabi_dcmpgt>
    43a0:	003e      	movs	r6, r7
    43a2:	e037      	b.n	4414 <__ieee754_pow+0x628>
    43a4:	000fffff 	.word	0x000fffff
    43a8:	43400000 	.word	0x43400000
    43ac:	fffffc01 	.word	0xfffffc01
    43b0:	3ff00000 	.word	0x3ff00000
    43b4:	0003988e 	.word	0x0003988e
    43b8:	000bb679 	.word	0x000bb679
    43bc:	fff00000 	.word	0xfff00000
    43c0:	4a454eef 	.word	0x4a454eef
    43c4:	3fca7e28 	.word	0x3fca7e28
    43c8:	93c9db65 	.word	0x93c9db65
    43cc:	3fcd864a 	.word	0x3fcd864a
    43d0:	a91d4101 	.word	0xa91d4101
    43d4:	3fd17460 	.word	0x3fd17460
    43d8:	518f264d 	.word	0x518f264d
    43dc:	3fd55555 	.word	0x3fd55555
    43e0:	db6fabff 	.word	0xdb6fabff
    43e4:	3fdb6db6 	.word	0x3fdb6db6
    43e8:	33333303 	.word	0x33333303
    43ec:	3fe33333 	.word	0x3fe33333
    43f0:	40080000 	.word	0x40080000
    43f4:	3feec709 	.word	0x3feec709
    43f8:	dc3a03fd 	.word	0xdc3a03fd
    43fc:	145b01f5 	.word	0x145b01f5
    4400:	be3e2fe0 	.word	0xbe3e2fe0
    4404:	408fffff 	.word	0x408fffff
    4408:	bf700000 	.word	0xbf700000
    440c:	652b82fe 	.word	0x652b82fe
    4410:	3c971547 	.word	0x3c971547
    4414:	2800      	cmp	r0, #0
    4416:	d000      	beq.n	441a <__ieee754_pow+0x62e>
    4418:	e18a      	b.n	4730 <__ieee754_pow+0x944>
    441a:	2280      	movs	r2, #128	; 0x80
    441c:	4be7      	ldr	r3, [pc, #924]	; (47bc <__ieee754_pow+0x9d0>)
    441e:	0352      	lsls	r2, r2, #13
    4420:	469c      	mov	ip, r3
    4422:	0013      	movs	r3, r2
    4424:	1536      	asrs	r6, r6, #20
    4426:	4466      	add	r6, ip
    4428:	4133      	asrs	r3, r6
    442a:	49e5      	ldr	r1, [pc, #916]	; (47c0 <__ieee754_pow+0x9d4>)
    442c:	19db      	adds	r3, r3, r7
    442e:	005e      	lsls	r6, r3, #1
    4430:	001c      	movs	r4, r3
    4432:	031b      	lsls	r3, r3, #12
    4434:	468c      	mov	ip, r1
    4436:	0b1b      	lsrs	r3, r3, #12
    4438:	4313      	orrs	r3, r2
    443a:	2214      	movs	r2, #20
    443c:	0d76      	lsrs	r6, r6, #21
    443e:	4fe1      	ldr	r7, [pc, #900]	; (47c4 <__ieee754_pow+0x9d8>)
    4440:	4466      	add	r6, ip
    4442:	4137      	asrs	r7, r6
    4444:	1b96      	subs	r6, r2, r6
    4446:	4133      	asrs	r3, r6
    4448:	4698      	mov	r8, r3
    444a:	4653      	mov	r3, sl
    444c:	43bc      	bics	r4, r7
    444e:	2000      	movs	r0, #0
    4450:	0021      	movs	r1, r4
    4452:	2b00      	cmp	r3, #0
    4454:	da00      	bge.n	4458 <__ieee754_pow+0x66c>
    4456:	e1a9      	b.n	47ac <__ieee754_pow+0x9c0>
    4458:	0002      	movs	r2, r0
    445a:	000b      	movs	r3, r1
    445c:	9800      	ldr	r0, [sp, #0]
    445e:	9901      	ldr	r1, [sp, #4]
    4460:	f002 f836 	bl	64d0 <__aeabi_dsub>
    4464:	000b      	movs	r3, r1
    4466:	9000      	str	r0, [sp, #0]
    4468:	9101      	str	r1, [sp, #4]
    446a:	0002      	movs	r2, r0
    446c:	9804      	ldr	r0, [sp, #16]
    446e:	9905      	ldr	r1, [sp, #20]
    4470:	f000 fe64 	bl	513c <__aeabi_dadd>
    4474:	4643      	mov	r3, r8
    4476:	051b      	lsls	r3, r3, #20
    4478:	4699      	mov	r9, r3
    447a:	2000      	movs	r0, #0
    447c:	2200      	movs	r2, #0
    447e:	4bd2      	ldr	r3, [pc, #840]	; (47c8 <__ieee754_pow+0x9dc>)
    4480:	0006      	movs	r6, r0
    4482:	000f      	movs	r7, r1
    4484:	f001 fdaa 	bl	5fdc <__aeabi_dmul>
    4488:	9a00      	ldr	r2, [sp, #0]
    448a:	9b01      	ldr	r3, [sp, #4]
    448c:	9002      	str	r0, [sp, #8]
    448e:	9103      	str	r1, [sp, #12]
    4490:	0030      	movs	r0, r6
    4492:	0039      	movs	r1, r7
    4494:	f002 f81c 	bl	64d0 <__aeabi_dsub>
    4498:	0002      	movs	r2, r0
    449a:	000b      	movs	r3, r1
    449c:	9804      	ldr	r0, [sp, #16]
    449e:	9905      	ldr	r1, [sp, #20]
    44a0:	f002 f816 	bl	64d0 <__aeabi_dsub>
    44a4:	4ac9      	ldr	r2, [pc, #804]	; (47cc <__ieee754_pow+0x9e0>)
    44a6:	4bca      	ldr	r3, [pc, #808]	; (47d0 <__ieee754_pow+0x9e4>)
    44a8:	f001 fd98 	bl	5fdc <__aeabi_dmul>
    44ac:	4ac9      	ldr	r2, [pc, #804]	; (47d4 <__ieee754_pow+0x9e8>)
    44ae:	0004      	movs	r4, r0
    44b0:	000d      	movs	r5, r1
    44b2:	4bc9      	ldr	r3, [pc, #804]	; (47d8 <__ieee754_pow+0x9ec>)
    44b4:	0030      	movs	r0, r6
    44b6:	0039      	movs	r1, r7
    44b8:	f001 fd90 	bl	5fdc <__aeabi_dmul>
    44bc:	0002      	movs	r2, r0
    44be:	000b      	movs	r3, r1
    44c0:	0020      	movs	r0, r4
    44c2:	0029      	movs	r1, r5
    44c4:	f000 fe3a 	bl	513c <__aeabi_dadd>
    44c8:	0004      	movs	r4, r0
    44ca:	000d      	movs	r5, r1
    44cc:	0002      	movs	r2, r0
    44ce:	000b      	movs	r3, r1
    44d0:	9802      	ldr	r0, [sp, #8]
    44d2:	9903      	ldr	r1, [sp, #12]
    44d4:	f000 fe32 	bl	513c <__aeabi_dadd>
    44d8:	9a02      	ldr	r2, [sp, #8]
    44da:	9b03      	ldr	r3, [sp, #12]
    44dc:	0006      	movs	r6, r0
    44de:	000f      	movs	r7, r1
    44e0:	f001 fff6 	bl	64d0 <__aeabi_dsub>
    44e4:	0002      	movs	r2, r0
    44e6:	000b      	movs	r3, r1
    44e8:	0020      	movs	r0, r4
    44ea:	0029      	movs	r1, r5
    44ec:	f001 fff0 	bl	64d0 <__aeabi_dsub>
    44f0:	0032      	movs	r2, r6
    44f2:	9000      	str	r0, [sp, #0]
    44f4:	9101      	str	r1, [sp, #4]
    44f6:	003b      	movs	r3, r7
    44f8:	0030      	movs	r0, r6
    44fa:	0039      	movs	r1, r7
    44fc:	f001 fd6e 	bl	5fdc <__aeabi_dmul>
    4500:	0004      	movs	r4, r0
    4502:	000d      	movs	r5, r1
    4504:	4ab5      	ldr	r2, [pc, #724]	; (47dc <__ieee754_pow+0x9f0>)
    4506:	4bb6      	ldr	r3, [pc, #728]	; (47e0 <__ieee754_pow+0x9f4>)
    4508:	f001 fd68 	bl	5fdc <__aeabi_dmul>
    450c:	4ab5      	ldr	r2, [pc, #724]	; (47e4 <__ieee754_pow+0x9f8>)
    450e:	4bb6      	ldr	r3, [pc, #728]	; (47e8 <__ieee754_pow+0x9fc>)
    4510:	f001 ffde 	bl	64d0 <__aeabi_dsub>
    4514:	0022      	movs	r2, r4
    4516:	002b      	movs	r3, r5
    4518:	f001 fd60 	bl	5fdc <__aeabi_dmul>
    451c:	4ab3      	ldr	r2, [pc, #716]	; (47ec <__ieee754_pow+0xa00>)
    451e:	4bb4      	ldr	r3, [pc, #720]	; (47f0 <__ieee754_pow+0xa04>)
    4520:	f000 fe0c 	bl	513c <__aeabi_dadd>
    4524:	0022      	movs	r2, r4
    4526:	002b      	movs	r3, r5
    4528:	f001 fd58 	bl	5fdc <__aeabi_dmul>
    452c:	4ab1      	ldr	r2, [pc, #708]	; (47f4 <__ieee754_pow+0xa08>)
    452e:	4bb2      	ldr	r3, [pc, #712]	; (47f8 <__ieee754_pow+0xa0c>)
    4530:	f001 ffce 	bl	64d0 <__aeabi_dsub>
    4534:	0022      	movs	r2, r4
    4536:	002b      	movs	r3, r5
    4538:	f001 fd50 	bl	5fdc <__aeabi_dmul>
    453c:	4aaf      	ldr	r2, [pc, #700]	; (47fc <__ieee754_pow+0xa10>)
    453e:	4bb0      	ldr	r3, [pc, #704]	; (4800 <__ieee754_pow+0xa14>)
    4540:	f000 fdfc 	bl	513c <__aeabi_dadd>
    4544:	0022      	movs	r2, r4
    4546:	002b      	movs	r3, r5
    4548:	f001 fd48 	bl	5fdc <__aeabi_dmul>
    454c:	0002      	movs	r2, r0
    454e:	000b      	movs	r3, r1
    4550:	0030      	movs	r0, r6
    4552:	0039      	movs	r1, r7
    4554:	f001 ffbc 	bl	64d0 <__aeabi_dsub>
    4558:	0004      	movs	r4, r0
    455a:	000d      	movs	r5, r1
    455c:	0002      	movs	r2, r0
    455e:	000b      	movs	r3, r1
    4560:	0030      	movs	r0, r6
    4562:	0039      	movs	r1, r7
    4564:	f001 fd3a 	bl	5fdc <__aeabi_dmul>
    4568:	2380      	movs	r3, #128	; 0x80
    456a:	9002      	str	r0, [sp, #8]
    456c:	9103      	str	r1, [sp, #12]
    456e:	2200      	movs	r2, #0
    4570:	05db      	lsls	r3, r3, #23
    4572:	0020      	movs	r0, r4
    4574:	0029      	movs	r1, r5
    4576:	f001 ffab 	bl	64d0 <__aeabi_dsub>
    457a:	0002      	movs	r2, r0
    457c:	000b      	movs	r3, r1
    457e:	9802      	ldr	r0, [sp, #8]
    4580:	9903      	ldr	r1, [sp, #12]
    4582:	f001 f907 	bl	5794 <__aeabi_ddiv>
    4586:	9a00      	ldr	r2, [sp, #0]
    4588:	9b01      	ldr	r3, [sp, #4]
    458a:	0004      	movs	r4, r0
    458c:	000d      	movs	r5, r1
    458e:	0030      	movs	r0, r6
    4590:	0039      	movs	r1, r7
    4592:	f001 fd23 	bl	5fdc <__aeabi_dmul>
    4596:	9a00      	ldr	r2, [sp, #0]
    4598:	9b01      	ldr	r3, [sp, #4]
    459a:	f000 fdcf 	bl	513c <__aeabi_dadd>
    459e:	0002      	movs	r2, r0
    45a0:	000b      	movs	r3, r1
    45a2:	0020      	movs	r0, r4
    45a4:	0029      	movs	r1, r5
    45a6:	f001 ff93 	bl	64d0 <__aeabi_dsub>
    45aa:	0032      	movs	r2, r6
    45ac:	003b      	movs	r3, r7
    45ae:	f001 ff8f 	bl	64d0 <__aeabi_dsub>
    45b2:	0002      	movs	r2, r0
    45b4:	000b      	movs	r3, r1
    45b6:	2000      	movs	r0, #0
    45b8:	4992      	ldr	r1, [pc, #584]	; (4804 <__ieee754_pow+0xa18>)
    45ba:	f001 ff89 	bl	64d0 <__aeabi_dsub>
    45be:	464b      	mov	r3, r9
    45c0:	185b      	adds	r3, r3, r1
    45c2:	151a      	asrs	r2, r3, #20
    45c4:	2a00      	cmp	r2, #0
    45c6:	dc00      	bgt.n	45ca <__ieee754_pow+0x7de>
    45c8:	e0f4      	b.n	47b4 <__ieee754_pow+0x9c8>
    45ca:	0019      	movs	r1, r3
    45cc:	9a06      	ldr	r2, [sp, #24]
    45ce:	9b07      	ldr	r3, [sp, #28]
    45d0:	f001 fd04 	bl	5fdc <__aeabi_dmul>
    45d4:	0006      	movs	r6, r0
    45d6:	e452      	b.n	3e7e <__ieee754_pow+0x92>
    45d8:	0032      	movs	r2, r6
    45da:	0030      	movs	r0, r6
    45dc:	002b      	movs	r3, r5
    45de:	0029      	movs	r1, r5
    45e0:	f001 fcfc 	bl	5fdc <__aeabi_dmul>
    45e4:	0006      	movs	r6, r0
    45e6:	e44a      	b.n	3e7e <__ieee754_pow+0x92>
    45e8:	4b87      	ldr	r3, [pc, #540]	; (4808 <__ieee754_pow+0xa1c>)
    45ea:	004e      	lsls	r6, r1, #1
    45ec:	0876      	lsrs	r6, r6, #1
    45ee:	429e      	cmp	r6, r3
    45f0:	dc00      	bgt.n	45f4 <__ieee754_pow+0x808>
    45f2:	e0bf      	b.n	4774 <__ieee754_pow+0x988>
    45f4:	4b85      	ldr	r3, [pc, #532]	; (480c <__ieee754_pow+0xa20>)
    45f6:	18cb      	adds	r3, r1, r3
    45f8:	4303      	orrs	r3, r0
    45fa:	d10c      	bne.n	4616 <__ieee754_pow+0x82a>
    45fc:	9a00      	ldr	r2, [sp, #0]
    45fe:	9b01      	ldr	r3, [sp, #4]
    4600:	f001 ff66 	bl	64d0 <__aeabi_dsub>
    4604:	0002      	movs	r2, r0
    4606:	000b      	movs	r3, r1
    4608:	9804      	ldr	r0, [sp, #16]
    460a:	9905      	ldr	r1, [sp, #20]
    460c:	f000 fbf8 	bl	4e00 <__aeabi_dcmple>
    4610:	2800      	cmp	r0, #0
    4612:	d100      	bne.n	4616 <__ieee754_pow+0x82a>
    4614:	e701      	b.n	441a <__ieee754_pow+0x62e>
    4616:	9806      	ldr	r0, [sp, #24]
    4618:	9907      	ldr	r1, [sp, #28]
    461a:	4a7d      	ldr	r2, [pc, #500]	; (4810 <__ieee754_pow+0xa24>)
    461c:	4b7d      	ldr	r3, [pc, #500]	; (4814 <__ieee754_pow+0xa28>)
    461e:	f001 fcdd 	bl	5fdc <__aeabi_dmul>
    4622:	4a7b      	ldr	r2, [pc, #492]	; (4810 <__ieee754_pow+0xa24>)
    4624:	4b7b      	ldr	r3, [pc, #492]	; (4814 <__ieee754_pow+0xa28>)
    4626:	f001 fcd9 	bl	5fdc <__aeabi_dmul>
    462a:	0006      	movs	r6, r0
    462c:	f7ff fc27 	bl	3e7e <__ieee754_pow+0x92>
    4630:	2300      	movs	r3, #0
    4632:	4c79      	ldr	r4, [pc, #484]	; (4818 <__ieee754_pow+0xa2c>)
    4634:	9306      	str	r3, [sp, #24]
    4636:	9407      	str	r4, [sp, #28]
    4638:	e666      	b.n	4308 <__ieee754_pow+0x51c>
    463a:	4653      	mov	r3, sl
    463c:	2b00      	cmp	r3, #0
    463e:	db00      	blt.n	4642 <__ieee754_pow+0x856>
    4640:	e4c3      	b.n	3fca <__ieee754_pow+0x1de>
    4642:	9b00      	ldr	r3, [sp, #0]
    4644:	9c01      	ldr	r4, [sp, #4]
    4646:	2280      	movs	r2, #128	; 0x80
    4648:	0612      	lsls	r2, r2, #24
    464a:	001e      	movs	r6, r3
    464c:	4694      	mov	ip, r2
    464e:	0023      	movs	r3, r4
    4650:	4463      	add	r3, ip
    4652:	0019      	movs	r1, r3
    4654:	f7ff fc13 	bl	3e7e <__ieee754_pow+0x92>
    4658:	0002      	movs	r2, r0
    465a:	000b      	movs	r3, r1
    465c:	2000      	movs	r0, #0
    465e:	4969      	ldr	r1, [pc, #420]	; (4804 <__ieee754_pow+0xa18>)
    4660:	f001 f898 	bl	5794 <__aeabi_ddiv>
    4664:	e44a      	b.n	3efc <__ieee754_pow+0x110>
    4666:	4b6d      	ldr	r3, [pc, #436]	; (481c <__ieee754_pow+0xa30>)
    4668:	429c      	cmp	r4, r3
    466a:	dc00      	bgt.n	466e <__ieee754_pow+0x882>
    466c:	e4aa      	b.n	3fc4 <__ieee754_pow+0x1d8>
    466e:	4b65      	ldr	r3, [pc, #404]	; (4804 <__ieee754_pow+0xa18>)
    4670:	429c      	cmp	r4, r3
    4672:	dd01      	ble.n	4678 <__ieee754_pow+0x88c>
    4674:	f7ff fc2c 	bl	3ed0 <__ieee754_pow+0xe4>
    4678:	2200      	movs	r2, #0
    467a:	4b62      	ldr	r3, [pc, #392]	; (4804 <__ieee754_pow+0xa18>)
    467c:	f001 ff28 	bl	64d0 <__aeabi_dsub>
    4680:	22c0      	movs	r2, #192	; 0xc0
    4682:	4b67      	ldr	r3, [pc, #412]	; (4820 <__ieee754_pow+0xa34>)
    4684:	05d2      	lsls	r2, r2, #23
    4686:	0004      	movs	r4, r0
    4688:	000d      	movs	r5, r1
    468a:	f001 fca7 	bl	5fdc <__aeabi_dmul>
    468e:	4a65      	ldr	r2, [pc, #404]	; (4824 <__ieee754_pow+0xa38>)
    4690:	0006      	movs	r6, r0
    4692:	000f      	movs	r7, r1
    4694:	4b64      	ldr	r3, [pc, #400]	; (4828 <__ieee754_pow+0xa3c>)
    4696:	0020      	movs	r0, r4
    4698:	0029      	movs	r1, r5
    469a:	f001 fc9f 	bl	5fdc <__aeabi_dmul>
    469e:	2200      	movs	r2, #0
    46a0:	9002      	str	r0, [sp, #8]
    46a2:	9103      	str	r1, [sp, #12]
    46a4:	4b61      	ldr	r3, [pc, #388]	; (482c <__ieee754_pow+0xa40>)
    46a6:	0020      	movs	r0, r4
    46a8:	0029      	movs	r1, r5
    46aa:	f001 fc97 	bl	5fdc <__aeabi_dmul>
    46ae:	0002      	movs	r2, r0
    46b0:	000b      	movs	r3, r1
    46b2:	485f      	ldr	r0, [pc, #380]	; (4830 <__ieee754_pow+0xa44>)
    46b4:	495f      	ldr	r1, [pc, #380]	; (4834 <__ieee754_pow+0xa48>)
    46b6:	f001 ff0b 	bl	64d0 <__aeabi_dsub>
    46ba:	0022      	movs	r2, r4
    46bc:	002b      	movs	r3, r5
    46be:	f001 fc8d 	bl	5fdc <__aeabi_dmul>
    46c2:	0002      	movs	r2, r0
    46c4:	000b      	movs	r3, r1
    46c6:	2000      	movs	r0, #0
    46c8:	495b      	ldr	r1, [pc, #364]	; (4838 <__ieee754_pow+0xa4c>)
    46ca:	f001 ff01 	bl	64d0 <__aeabi_dsub>
    46ce:	0022      	movs	r2, r4
    46d0:	9004      	str	r0, [sp, #16]
    46d2:	9105      	str	r1, [sp, #20]
    46d4:	002b      	movs	r3, r5
    46d6:	0020      	movs	r0, r4
    46d8:	0029      	movs	r1, r5
    46da:	f001 fc7f 	bl	5fdc <__aeabi_dmul>
    46de:	0002      	movs	r2, r0
    46e0:	000b      	movs	r3, r1
    46e2:	9804      	ldr	r0, [sp, #16]
    46e4:	9905      	ldr	r1, [sp, #20]
    46e6:	f001 fc79 	bl	5fdc <__aeabi_dmul>
    46ea:	4a54      	ldr	r2, [pc, #336]	; (483c <__ieee754_pow+0xa50>)
    46ec:	4b4c      	ldr	r3, [pc, #304]	; (4820 <__ieee754_pow+0xa34>)
    46ee:	f001 fc75 	bl	5fdc <__aeabi_dmul>
    46f2:	0002      	movs	r2, r0
    46f4:	000b      	movs	r3, r1
    46f6:	9802      	ldr	r0, [sp, #8]
    46f8:	9903      	ldr	r1, [sp, #12]
    46fa:	f001 fee9 	bl	64d0 <__aeabi_dsub>
    46fe:	0002      	movs	r2, r0
    4700:	000b      	movs	r3, r1
    4702:	0004      	movs	r4, r0
    4704:	000d      	movs	r5, r1
    4706:	0030      	movs	r0, r6
    4708:	0039      	movs	r1, r7
    470a:	f000 fd17 	bl	513c <__aeabi_dadd>
    470e:	2200      	movs	r2, #0
    4710:	0010      	movs	r0, r2
    4712:	003b      	movs	r3, r7
    4714:	0032      	movs	r2, r6
    4716:	9002      	str	r0, [sp, #8]
    4718:	9103      	str	r1, [sp, #12]
    471a:	f001 fed9 	bl	64d0 <__aeabi_dsub>
    471e:	0002      	movs	r2, r0
    4720:	000b      	movs	r3, r1
    4722:	0020      	movs	r0, r4
    4724:	0029      	movs	r1, r5
    4726:	f001 fed3 	bl	64d0 <__aeabi_dsub>
    472a:	9004      	str	r0, [sp, #16]
    472c:	9105      	str	r1, [sp, #20]
    472e:	e5e1      	b.n	42f4 <__ieee754_pow+0x508>
    4730:	4a43      	ldr	r2, [pc, #268]	; (4840 <__ieee754_pow+0xa54>)
    4732:	4b44      	ldr	r3, [pc, #272]	; (4844 <__ieee754_pow+0xa58>)
    4734:	9806      	ldr	r0, [sp, #24]
    4736:	9907      	ldr	r1, [sp, #28]
    4738:	f001 fc50 	bl	5fdc <__aeabi_dmul>
    473c:	4a40      	ldr	r2, [pc, #256]	; (4840 <__ieee754_pow+0xa54>)
    473e:	4b41      	ldr	r3, [pc, #260]	; (4844 <__ieee754_pow+0xa58>)
    4740:	f001 fc4c 	bl	5fdc <__aeabi_dmul>
    4744:	0006      	movs	r6, r0
    4746:	f7ff fb9a 	bl	3e7e <__ieee754_pow+0x92>
    474a:	2a00      	cmp	r2, #0
    474c:	d001      	beq.n	4752 <__ieee754_pow+0x966>
    474e:	f7ff fba5 	bl	3e9c <__ieee754_pow+0xb0>
    4752:	3214      	adds	r2, #20
    4754:	1ad3      	subs	r3, r2, r3
    4756:	003a      	movs	r2, r7
    4758:	411a      	asrs	r2, r3
    475a:	0011      	movs	r1, r2
    475c:	4099      	lsls	r1, r3
    475e:	428f      	cmp	r7, r1
    4760:	d001      	beq.n	4766 <__ieee754_pow+0x97a>
    4762:	f7ff fb6f 	bl	3e44 <__ieee754_pow+0x58>
    4766:	2301      	movs	r3, #1
    4768:	4013      	ands	r3, r2
    476a:	2202      	movs	r2, #2
    476c:	1ad3      	subs	r3, r2, r3
    476e:	469b      	mov	fp, r3
    4770:	f7ff fb68 	bl	3e44 <__ieee754_pow+0x58>
    4774:	4b30      	ldr	r3, [pc, #192]	; (4838 <__ieee754_pow+0xa4c>)
    4776:	429e      	cmp	r6, r3
    4778:	dd00      	ble.n	477c <__ieee754_pow+0x990>
    477a:	e64e      	b.n	441a <__ieee754_pow+0x62e>
    477c:	2300      	movs	r3, #0
    477e:	4699      	mov	r9, r3
    4780:	4698      	mov	r8, r3
    4782:	e67a      	b.n	447a <__ieee754_pow+0x68e>
    4784:	0002      	movs	r2, r0
    4786:	000b      	movs	r3, r1
    4788:	f7ff fc14 	bl	3fb4 <__ieee754_pow+0x1c8>
    478c:	2380      	movs	r3, #128	; 0x80
    478e:	4c2e      	ldr	r4, [pc, #184]	; (4848 <__ieee754_pow+0xa5c>)
    4790:	05db      	lsls	r3, r3, #23
    4792:	9308      	str	r3, [sp, #32]
    4794:	9409      	str	r4, [sp, #36]	; 0x24
    4796:	4b2d      	ldr	r3, [pc, #180]	; (484c <__ieee754_pow+0xa60>)
    4798:	4c2d      	ldr	r4, [pc, #180]	; (4850 <__ieee754_pow+0xa64>)
    479a:	2200      	movs	r2, #0
    479c:	930c      	str	r3, [sp, #48]	; 0x30
    479e:	940d      	str	r4, [sp, #52]	; 0x34
    47a0:	2480      	movs	r4, #128	; 0x80
    47a2:	4b2c      	ldr	r3, [pc, #176]	; (4854 <__ieee754_pow+0xa68>)
    47a4:	02e4      	lsls	r4, r4, #11
    47a6:	9206      	str	r2, [sp, #24]
    47a8:	9307      	str	r3, [sp, #28]
    47aa:	e456      	b.n	405a <__ieee754_pow+0x26e>
    47ac:	4643      	mov	r3, r8
    47ae:	425b      	negs	r3, r3
    47b0:	4698      	mov	r8, r3
    47b2:	e651      	b.n	4458 <__ieee754_pow+0x66c>
    47b4:	4642      	mov	r2, r8
    47b6:	f000 f9fd 	bl	4bb4 <scalbn>
    47ba:	e707      	b.n	45cc <__ieee754_pow+0x7e0>
    47bc:	fffffc02 	.word	0xfffffc02
    47c0:	fffffc01 	.word	0xfffffc01
    47c4:	000fffff 	.word	0x000fffff
    47c8:	3fe62e43 	.word	0x3fe62e43
    47cc:	fefa39ef 	.word	0xfefa39ef
    47d0:	3fe62e42 	.word	0x3fe62e42
    47d4:	0ca86c39 	.word	0x0ca86c39
    47d8:	be205c61 	.word	0xbe205c61
    47dc:	72bea4d0 	.word	0x72bea4d0
    47e0:	3e663769 	.word	0x3e663769
    47e4:	c5d26bf1 	.word	0xc5d26bf1
    47e8:	3ebbbd41 	.word	0x3ebbbd41
    47ec:	af25de2c 	.word	0xaf25de2c
    47f0:	3f11566a 	.word	0x3f11566a
    47f4:	16bebd93 	.word	0x16bebd93
    47f8:	3f66c16c 	.word	0x3f66c16c
    47fc:	5555553e 	.word	0x5555553e
    4800:	3fc55555 	.word	0x3fc55555
    4804:	3ff00000 	.word	0x3ff00000
    4808:	4090cbff 	.word	0x4090cbff
    480c:	3f6f3400 	.word	0x3f6f3400
    4810:	c2f8f359 	.word	0xc2f8f359
    4814:	01a56e1f 	.word	0x01a56e1f
    4818:	bff00000 	.word	0xbff00000
    481c:	3feffffe 	.word	0x3feffffe
    4820:	3ff71547 	.word	0x3ff71547
    4824:	f85ddf44 	.word	0xf85ddf44
    4828:	3e54ae0b 	.word	0x3e54ae0b
    482c:	3fd00000 	.word	0x3fd00000
    4830:	55555555 	.word	0x55555555
    4834:	3fd55555 	.word	0x3fd55555
    4838:	3fe00000 	.word	0x3fe00000
    483c:	652b82fe 	.word	0x652b82fe
    4840:	8800759c 	.word	0x8800759c
    4844:	7e37e43c 	.word	0x7e37e43c
    4848:	3fe2b803 	.word	0x3fe2b803
    484c:	43cfd006 	.word	0x43cfd006
    4850:	3e4cfdeb 	.word	0x3e4cfdeb
    4854:	3ff80000 	.word	0x3ff80000

00004858 <__ieee754_sqrt>:
    4858:	b5f0      	push	{r4, r5, r6, r7, lr}
    485a:	4656      	mov	r6, sl
    485c:	464d      	mov	r5, r9
    485e:	4644      	mov	r4, r8
    4860:	465f      	mov	r7, fp
    4862:	4b75      	ldr	r3, [pc, #468]	; (4a38 <__ieee754_sqrt+0x1e0>)
    4864:	b4f0      	push	{r4, r5, r6, r7}
    4866:	000a      	movs	r2, r1
    4868:	000d      	movs	r5, r1
    486a:	0019      	movs	r1, r3
    486c:	b083      	sub	sp, #12
    486e:	0006      	movs	r6, r0
    4870:	0004      	movs	r4, r0
    4872:	4029      	ands	r1, r5
    4874:	4299      	cmp	r1, r3
    4876:	d100      	bne.n	487a <__ieee754_sqrt+0x22>
    4878:	e0ba      	b.n	49f0 <__ieee754_sqrt+0x198>
    487a:	2d00      	cmp	r5, #0
    487c:	dc00      	bgt.n	4880 <__ieee754_sqrt+0x28>
    487e:	e094      	b.n	49aa <__ieee754_sqrt+0x152>
    4880:	152d      	asrs	r5, r5, #20
    4882:	d100      	bne.n	4886 <__ieee754_sqrt+0x2e>
    4884:	e0a3      	b.n	49ce <__ieee754_sqrt+0x176>
    4886:	4b6d      	ldr	r3, [pc, #436]	; (4a3c <__ieee754_sqrt+0x1e4>)
    4888:	0312      	lsls	r2, r2, #12
    488a:	469c      	mov	ip, r3
    488c:	2380      	movs	r3, #128	; 0x80
    488e:	0b12      	lsrs	r2, r2, #12
    4890:	035b      	lsls	r3, r3, #13
    4892:	4465      	add	r5, ip
    4894:	431a      	orrs	r2, r3
    4896:	07eb      	lsls	r3, r5, #31
    4898:	d500      	bpl.n	489c <__ieee754_sqrt+0x44>
    489a:	e081      	b.n	49a0 <__ieee754_sqrt+0x148>
    489c:	106b      	asrs	r3, r5, #1
    489e:	4698      	mov	r8, r3
    48a0:	0fe3      	lsrs	r3, r4, #31
    48a2:	189b      	adds	r3, r3, r2
    48a4:	189b      	adds	r3, r3, r2
    48a6:	2280      	movs	r2, #128	; 0x80
    48a8:	2116      	movs	r1, #22
    48aa:	2600      	movs	r6, #0
    48ac:	2700      	movs	r7, #0
    48ae:	0064      	lsls	r4, r4, #1
    48b0:	0392      	lsls	r2, r2, #14
    48b2:	18b8      	adds	r0, r7, r2
    48b4:	4298      	cmp	r0, r3
    48b6:	dc02      	bgt.n	48be <__ieee754_sqrt+0x66>
    48b8:	1887      	adds	r7, r0, r2
    48ba:	1a1b      	subs	r3, r3, r0
    48bc:	18b6      	adds	r6, r6, r2
    48be:	0fe0      	lsrs	r0, r4, #31
    48c0:	005b      	lsls	r3, r3, #1
    48c2:	3901      	subs	r1, #1
    48c4:	181b      	adds	r3, r3, r0
    48c6:	0064      	lsls	r4, r4, #1
    48c8:	0852      	lsrs	r2, r2, #1
    48ca:	2900      	cmp	r1, #0
    48cc:	d1f1      	bne.n	48b2 <__ieee754_sqrt+0x5a>
    48ce:	2200      	movs	r2, #0
    48d0:	9201      	str	r2, [sp, #4]
    48d2:	4694      	mov	ip, r2
    48d4:	2280      	movs	r2, #128	; 0x80
    48d6:	0612      	lsls	r2, r2, #24
    48d8:	2020      	movs	r0, #32
    48da:	4691      	mov	r9, r2
    48dc:	e009      	b.n	48f2 <__ieee754_sqrt+0x9a>
    48de:	429f      	cmp	r7, r3
    48e0:	d041      	beq.n	4966 <__ieee754_sqrt+0x10e>
    48e2:	0fe1      	lsrs	r1, r4, #31
    48e4:	18c9      	adds	r1, r1, r3
    48e6:	3801      	subs	r0, #1
    48e8:	18cb      	adds	r3, r1, r3
    48ea:	0064      	lsls	r4, r4, #1
    48ec:	0852      	lsrs	r2, r2, #1
    48ee:	2800      	cmp	r0, #0
    48f0:	d01e      	beq.n	4930 <__ieee754_sqrt+0xd8>
    48f2:	4661      	mov	r1, ip
    48f4:	1851      	adds	r1, r2, r1
    48f6:	429f      	cmp	r7, r3
    48f8:	daf1      	bge.n	48de <__ieee754_sqrt+0x86>
    48fa:	188d      	adds	r5, r1, r2
    48fc:	46ac      	mov	ip, r5
    48fe:	0fcd      	lsrs	r5, r1, #31
    4900:	07ed      	lsls	r5, r5, #31
    4902:	46ba      	mov	sl, r7
    4904:	454d      	cmp	r5, r9
    4906:	d039      	beq.n	497c <__ieee754_sqrt+0x124>
    4908:	1bdb      	subs	r3, r3, r7
    490a:	428c      	cmp	r4, r1
    490c:	41bf      	sbcs	r7, r7
    490e:	427f      	negs	r7, r7
    4910:	1bdb      	subs	r3, r3, r7
    4912:	1a64      	subs	r4, r4, r1
    4914:	9901      	ldr	r1, [sp, #4]
    4916:	3801      	subs	r0, #1
    4918:	468b      	mov	fp, r1
    491a:	4493      	add	fp, r2
    491c:	4659      	mov	r1, fp
    491e:	9101      	str	r1, [sp, #4]
    4920:	0fe1      	lsrs	r1, r4, #31
    4922:	18c9      	adds	r1, r1, r3
    4924:	4657      	mov	r7, sl
    4926:	18cb      	adds	r3, r1, r3
    4928:	0064      	lsls	r4, r4, #1
    492a:	0852      	lsrs	r2, r2, #1
    492c:	2800      	cmp	r0, #0
    492e:	d1e0      	bne.n	48f2 <__ieee754_sqrt+0x9a>
    4930:	4323      	orrs	r3, r4
    4932:	d12b      	bne.n	498c <__ieee754_sqrt+0x134>
    4934:	9b01      	ldr	r3, [sp, #4]
    4936:	085b      	lsrs	r3, r3, #1
    4938:	4941      	ldr	r1, [pc, #260]	; (4a40 <__ieee754_sqrt+0x1e8>)
    493a:	1072      	asrs	r2, r6, #1
    493c:	468c      	mov	ip, r1
    493e:	4462      	add	r2, ip
    4940:	07f1      	lsls	r1, r6, #31
    4942:	d502      	bpl.n	494a <__ieee754_sqrt+0xf2>
    4944:	2180      	movs	r1, #128	; 0x80
    4946:	0609      	lsls	r1, r1, #24
    4948:	430b      	orrs	r3, r1
    494a:	4641      	mov	r1, r8
    494c:	0509      	lsls	r1, r1, #20
    494e:	188d      	adds	r5, r1, r2
    4950:	001e      	movs	r6, r3
    4952:	002f      	movs	r7, r5
    4954:	0030      	movs	r0, r6
    4956:	0039      	movs	r1, r7
    4958:	b003      	add	sp, #12
    495a:	bc3c      	pop	{r2, r3, r4, r5}
    495c:	4690      	mov	r8, r2
    495e:	4699      	mov	r9, r3
    4960:	46a2      	mov	sl, r4
    4962:	46ab      	mov	fp, r5
    4964:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4966:	42a1      	cmp	r1, r4
    4968:	d80e      	bhi.n	4988 <__ieee754_sqrt+0x130>
    496a:	188d      	adds	r5, r1, r2
    496c:	46ac      	mov	ip, r5
    496e:	0fcd      	lsrs	r5, r1, #31
    4970:	07ed      	lsls	r5, r5, #31
    4972:	454d      	cmp	r5, r9
    4974:	d048      	beq.n	4a08 <__ieee754_sqrt+0x1b0>
    4976:	469a      	mov	sl, r3
    4978:	2300      	movs	r3, #0
    497a:	e7ca      	b.n	4912 <__ieee754_sqrt+0xba>
    497c:	4665      	mov	r5, ip
    497e:	2d00      	cmp	r5, #0
    4980:	dbc2      	blt.n	4908 <__ieee754_sqrt+0xb0>
    4982:	1c7d      	adds	r5, r7, #1
    4984:	46aa      	mov	sl, r5
    4986:	e7bf      	b.n	4908 <__ieee754_sqrt+0xb0>
    4988:	003b      	movs	r3, r7
    498a:	e7aa      	b.n	48e2 <__ieee754_sqrt+0x8a>
    498c:	9b01      	ldr	r3, [sp, #4]
    498e:	3301      	adds	r3, #1
    4990:	d03e      	beq.n	4a10 <__ieee754_sqrt+0x1b8>
    4992:	9a01      	ldr	r2, [sp, #4]
    4994:	2301      	movs	r3, #1
    4996:	4694      	mov	ip, r2
    4998:	4013      	ands	r3, r2
    499a:	4463      	add	r3, ip
    499c:	085b      	lsrs	r3, r3, #1
    499e:	e7cb      	b.n	4938 <__ieee754_sqrt+0xe0>
    49a0:	0fe3      	lsrs	r3, r4, #31
    49a2:	0052      	lsls	r2, r2, #1
    49a4:	189a      	adds	r2, r3, r2
    49a6:	0064      	lsls	r4, r4, #1
    49a8:	e778      	b.n	489c <__ieee754_sqrt+0x44>
    49aa:	006b      	lsls	r3, r5, #1
    49ac:	085b      	lsrs	r3, r3, #1
    49ae:	4303      	orrs	r3, r0
    49b0:	002f      	movs	r7, r5
    49b2:	2b00      	cmp	r3, #0
    49b4:	d0ce      	beq.n	4954 <__ieee754_sqrt+0xfc>
    49b6:	2500      	movs	r5, #0
    49b8:	2a00      	cmp	r2, #0
    49ba:	d131      	bne.n	4a20 <__ieee754_sqrt+0x1c8>
    49bc:	0ae2      	lsrs	r2, r4, #11
    49be:	3d15      	subs	r5, #21
    49c0:	0564      	lsls	r4, r4, #21
    49c2:	2a00      	cmp	r2, #0
    49c4:	d0fa      	beq.n	49bc <__ieee754_sqrt+0x164>
    49c6:	2380      	movs	r3, #128	; 0x80
    49c8:	035b      	lsls	r3, r3, #13
    49ca:	421a      	tst	r2, r3
    49cc:	d123      	bne.n	4a16 <__ieee754_sqrt+0x1be>
    49ce:	2080      	movs	r0, #128	; 0x80
    49d0:	2300      	movs	r3, #0
    49d2:	0340      	lsls	r0, r0, #13
    49d4:	e000      	b.n	49d8 <__ieee754_sqrt+0x180>
    49d6:	000b      	movs	r3, r1
    49d8:	0052      	lsls	r2, r2, #1
    49da:	1c59      	adds	r1, r3, #1
    49dc:	4202      	tst	r2, r0
    49de:	d0fa      	beq.n	49d6 <__ieee754_sqrt+0x17e>
    49e0:	2020      	movs	r0, #32
    49e2:	1a40      	subs	r0, r0, r1
    49e4:	1aed      	subs	r5, r5, r3
    49e6:	0023      	movs	r3, r4
    49e8:	40c3      	lsrs	r3, r0
    49ea:	408c      	lsls	r4, r1
    49ec:	431a      	orrs	r2, r3
    49ee:	e74a      	b.n	4886 <__ieee754_sqrt+0x2e>
    49f0:	0002      	movs	r2, r0
    49f2:	002b      	movs	r3, r5
    49f4:	0029      	movs	r1, r5
    49f6:	f001 faf1 	bl	5fdc <__aeabi_dmul>
    49fa:	0032      	movs	r2, r6
    49fc:	002b      	movs	r3, r5
    49fe:	f000 fb9d 	bl	513c <__aeabi_dadd>
    4a02:	0006      	movs	r6, r0
    4a04:	000f      	movs	r7, r1
    4a06:	e7a5      	b.n	4954 <__ieee754_sqrt+0xfc>
    4a08:	4665      	mov	r5, ip
    4a0a:	2d00      	cmp	r5, #0
    4a0c:	dab9      	bge.n	4982 <__ieee754_sqrt+0x12a>
    4a0e:	e7b2      	b.n	4976 <__ieee754_sqrt+0x11e>
    4a10:	3601      	adds	r6, #1
    4a12:	2300      	movs	r3, #0
    4a14:	e790      	b.n	4938 <__ieee754_sqrt+0xe0>
    4a16:	2301      	movs	r3, #1
    4a18:	2020      	movs	r0, #32
    4a1a:	425b      	negs	r3, r3
    4a1c:	2100      	movs	r1, #0
    4a1e:	e7e1      	b.n	49e4 <__ieee754_sqrt+0x18c>
    4a20:	003b      	movs	r3, r7
    4a22:	0002      	movs	r2, r0
    4a24:	0039      	movs	r1, r7
    4a26:	f001 fd53 	bl	64d0 <__aeabi_dsub>
    4a2a:	0002      	movs	r2, r0
    4a2c:	000b      	movs	r3, r1
    4a2e:	f000 feb1 	bl	5794 <__aeabi_ddiv>
    4a32:	0006      	movs	r6, r0
    4a34:	000f      	movs	r7, r1
    4a36:	e78d      	b.n	4954 <__ieee754_sqrt+0xfc>
    4a38:	7ff00000 	.word	0x7ff00000
    4a3c:	fffffc01 	.word	0xfffffc01
    4a40:	3fe00000 	.word	0x3fe00000

00004a44 <fabs>:
    4a44:	0049      	lsls	r1, r1, #1
    4a46:	084b      	lsrs	r3, r1, #1
    4a48:	0019      	movs	r1, r3
    4a4a:	4770      	bx	lr

00004a4c <finite>:
    4a4c:	4b03      	ldr	r3, [pc, #12]	; (4a5c <finite+0x10>)
    4a4e:	0048      	lsls	r0, r1, #1
    4a50:	469c      	mov	ip, r3
    4a52:	0840      	lsrs	r0, r0, #1
    4a54:	4460      	add	r0, ip
    4a56:	0fc0      	lsrs	r0, r0, #31
    4a58:	4770      	bx	lr
    4a5a:	46c0      	nop			; (mov r8, r8)
    4a5c:	80100000 	.word	0x80100000

00004a60 <matherr>:
    4a60:	2000      	movs	r0, #0
    4a62:	4770      	bx	lr

00004a64 <nan>:
    4a64:	2000      	movs	r0, #0
    4a66:	4901      	ldr	r1, [pc, #4]	; (4a6c <nan+0x8>)
    4a68:	4770      	bx	lr
    4a6a:	46c0      	nop			; (mov r8, r8)
    4a6c:	7ff80000 	.word	0x7ff80000

00004a70 <rint>:
    4a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a72:	4647      	mov	r7, r8
    4a74:	b480      	push	{r7}
    4a76:	0fcb      	lsrs	r3, r1, #31
    4a78:	4698      	mov	r8, r3
    4a7a:	4c4a      	ldr	r4, [pc, #296]	; (4ba4 <rint+0x134>)
    4a7c:	004b      	lsls	r3, r1, #1
    4a7e:	0d5b      	lsrs	r3, r3, #21
    4a80:	191e      	adds	r6, r3, r4
    4a82:	b082      	sub	sp, #8
    4a84:	0007      	movs	r7, r0
    4a86:	000a      	movs	r2, r1
    4a88:	2e13      	cmp	r6, #19
    4a8a:	dc35      	bgt.n	4af8 <rint+0x88>
    4a8c:	2e00      	cmp	r6, #0
    4a8e:	db57      	blt.n	4b40 <rint+0xd0>
    4a90:	4b45      	ldr	r3, [pc, #276]	; (4ba8 <rint+0x138>)
    4a92:	0004      	movs	r4, r0
    4a94:	4133      	asrs	r3, r6
    4a96:	001f      	movs	r7, r3
    4a98:	400f      	ands	r7, r1
    4a9a:	4307      	orrs	r7, r0
    4a9c:	000d      	movs	r5, r1
    4a9e:	2f00      	cmp	r7, #0
    4aa0:	d024      	beq.n	4aec <rint+0x7c>
    4aa2:	085b      	lsrs	r3, r3, #1
    4aa4:	001c      	movs	r4, r3
    4aa6:	400c      	ands	r4, r1
    4aa8:	4320      	orrs	r0, r4
    4aaa:	2700      	movs	r7, #0
    4aac:	2800      	cmp	r0, #0
    4aae:	d007      	beq.n	4ac0 <rint+0x50>
    4ab0:	2e13      	cmp	r6, #19
    4ab2:	d100      	bne.n	4ab6 <rint+0x46>
    4ab4:	e072      	b.n	4b9c <rint+0x12c>
    4ab6:	2280      	movs	r2, #128	; 0x80
    4ab8:	02d2      	lsls	r2, r2, #11
    4aba:	4132      	asrs	r2, r6
    4abc:	4399      	bics	r1, r3
    4abe:	430a      	orrs	r2, r1
    4ac0:	4643      	mov	r3, r8
    4ac2:	00de      	lsls	r6, r3, #3
    4ac4:	4b39      	ldr	r3, [pc, #228]	; (4bac <rint+0x13c>)
    4ac6:	0011      	movs	r1, r2
    4ac8:	199e      	adds	r6, r3, r6
    4aca:	6834      	ldr	r4, [r6, #0]
    4acc:	6875      	ldr	r5, [r6, #4]
    4ace:	0038      	movs	r0, r7
    4ad0:	0022      	movs	r2, r4
    4ad2:	002b      	movs	r3, r5
    4ad4:	f000 fb32 	bl	513c <__aeabi_dadd>
    4ad8:	9000      	str	r0, [sp, #0]
    4ada:	9101      	str	r1, [sp, #4]
    4adc:	9800      	ldr	r0, [sp, #0]
    4ade:	9901      	ldr	r1, [sp, #4]
    4ae0:	0022      	movs	r2, r4
    4ae2:	002b      	movs	r3, r5
    4ae4:	f001 fcf4 	bl	64d0 <__aeabi_dsub>
    4ae8:	0004      	movs	r4, r0
    4aea:	000d      	movs	r5, r1
    4aec:	0020      	movs	r0, r4
    4aee:	0029      	movs	r1, r5
    4af0:	b002      	add	sp, #8
    4af2:	bc04      	pop	{r2}
    4af4:	4690      	mov	r8, r2
    4af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4af8:	2e33      	cmp	r6, #51	; 0x33
    4afa:	dd0c      	ble.n	4b16 <rint+0xa6>
    4afc:	2380      	movs	r3, #128	; 0x80
    4afe:	0004      	movs	r4, r0
    4b00:	000d      	movs	r5, r1
    4b02:	00db      	lsls	r3, r3, #3
    4b04:	429e      	cmp	r6, r3
    4b06:	d1f1      	bne.n	4aec <rint+0x7c>
    4b08:	0002      	movs	r2, r0
    4b0a:	000b      	movs	r3, r1
    4b0c:	f000 fb16 	bl	513c <__aeabi_dadd>
    4b10:	0004      	movs	r4, r0
    4b12:	000d      	movs	r5, r1
    4b14:	e7ea      	b.n	4aec <rint+0x7c>
    4b16:	4c26      	ldr	r4, [pc, #152]	; (4bb0 <rint+0x140>)
    4b18:	000d      	movs	r5, r1
    4b1a:	46a4      	mov	ip, r4
    4b1c:	2401      	movs	r4, #1
    4b1e:	4463      	add	r3, ip
    4b20:	4264      	negs	r4, r4
    4b22:	40dc      	lsrs	r4, r3
    4b24:	46a4      	mov	ip, r4
    4b26:	4661      	mov	r1, ip
    4b28:	0004      	movs	r4, r0
    4b2a:	4201      	tst	r1, r0
    4b2c:	d0de      	beq.n	4aec <rint+0x7c>
    4b2e:	0849      	lsrs	r1, r1, #1
    4b30:	4201      	tst	r1, r0
    4b32:	d0c5      	beq.n	4ac0 <rint+0x50>
    4b34:	2780      	movs	r7, #128	; 0x80
    4b36:	05ff      	lsls	r7, r7, #23
    4b38:	411f      	asrs	r7, r3
    4b3a:	4388      	bics	r0, r1
    4b3c:	4307      	orrs	r7, r0
    4b3e:	e7bf      	b.n	4ac0 <rint+0x50>
    4b40:	004b      	lsls	r3, r1, #1
    4b42:	085b      	lsrs	r3, r3, #1
    4b44:	4303      	orrs	r3, r0
    4b46:	0004      	movs	r4, r0
    4b48:	000d      	movs	r5, r1
    4b4a:	2b00      	cmp	r3, #0
    4b4c:	d0ce      	beq.n	4aec <rint+0x7c>
    4b4e:	030b      	lsls	r3, r1, #12
    4b50:	0b1b      	lsrs	r3, r3, #12
    4b52:	4303      	orrs	r3, r0
    4b54:	425a      	negs	r2, r3
    4b56:	4313      	orrs	r3, r2
    4b58:	2280      	movs	r2, #128	; 0x80
    4b5a:	0b1b      	lsrs	r3, r3, #12
    4b5c:	0312      	lsls	r2, r2, #12
    4b5e:	4013      	ands	r3, r2
    4b60:	0c4a      	lsrs	r2, r1, #17
    4b62:	0452      	lsls	r2, r2, #17
    4b64:	4313      	orrs	r3, r2
    4b66:	0019      	movs	r1, r3
    4b68:	4643      	mov	r3, r8
    4b6a:	4a10      	ldr	r2, [pc, #64]	; (4bac <rint+0x13c>)
    4b6c:	00db      	lsls	r3, r3, #3
    4b6e:	18d3      	adds	r3, r2, r3
    4b70:	681c      	ldr	r4, [r3, #0]
    4b72:	685d      	ldr	r5, [r3, #4]
    4b74:	0022      	movs	r2, r4
    4b76:	002b      	movs	r3, r5
    4b78:	f000 fae0 	bl	513c <__aeabi_dadd>
    4b7c:	9000      	str	r0, [sp, #0]
    4b7e:	9101      	str	r1, [sp, #4]
    4b80:	9800      	ldr	r0, [sp, #0]
    4b82:	9901      	ldr	r1, [sp, #4]
    4b84:	0022      	movs	r2, r4
    4b86:	002b      	movs	r3, r5
    4b88:	f001 fca2 	bl	64d0 <__aeabi_dsub>
    4b8c:	4642      	mov	r2, r8
    4b8e:	004b      	lsls	r3, r1, #1
    4b90:	085b      	lsrs	r3, r3, #1
    4b92:	07d6      	lsls	r6, r2, #31
    4b94:	4333      	orrs	r3, r6
    4b96:	0004      	movs	r4, r0
    4b98:	001d      	movs	r5, r3
    4b9a:	e7a7      	b.n	4aec <rint+0x7c>
    4b9c:	2780      	movs	r7, #128	; 0x80
    4b9e:	063f      	lsls	r7, r7, #24
    4ba0:	e789      	b.n	4ab6 <rint+0x46>
    4ba2:	46c0      	nop			; (mov r8, r8)
    4ba4:	fffffc01 	.word	0xfffffc01
    4ba8:	000fffff 	.word	0x000fffff
    4bac:	00006f98 	.word	0x00006f98
    4bb0:	fffffbed 	.word	0xfffffbed

00004bb4 <scalbn>:
    4bb4:	004b      	lsls	r3, r1, #1
    4bb6:	b570      	push	{r4, r5, r6, lr}
    4bb8:	0d5b      	lsrs	r3, r3, #21
    4bba:	0014      	movs	r4, r2
    4bbc:	000a      	movs	r2, r1
    4bbe:	2b00      	cmp	r3, #0
    4bc0:	d11a      	bne.n	4bf8 <scalbn+0x44>
    4bc2:	004b      	lsls	r3, r1, #1
    4bc4:	085b      	lsrs	r3, r3, #1
    4bc6:	4303      	orrs	r3, r0
    4bc8:	d015      	beq.n	4bf6 <scalbn+0x42>
    4bca:	2200      	movs	r2, #0
    4bcc:	4b22      	ldr	r3, [pc, #136]	; (4c58 <scalbn+0xa4>)
    4bce:	f001 fa05 	bl	5fdc <__aeabi_dmul>
    4bd2:	4b22      	ldr	r3, [pc, #136]	; (4c5c <scalbn+0xa8>)
    4bd4:	000a      	movs	r2, r1
    4bd6:	429c      	cmp	r4, r3
    4bd8:	db22      	blt.n	4c20 <scalbn+0x6c>
    4bda:	004b      	lsls	r3, r1, #1
    4bdc:	0d5b      	lsrs	r3, r3, #21
    4bde:	3b36      	subs	r3, #54	; 0x36
    4be0:	4d1f      	ldr	r5, [pc, #124]	; (4c60 <scalbn+0xac>)
    4be2:	18e3      	adds	r3, r4, r3
    4be4:	42ab      	cmp	r3, r5
    4be6:	dc20      	bgt.n	4c2a <scalbn+0x76>
    4be8:	2b00      	cmp	r3, #0
    4bea:	dd0d      	ble.n	4c08 <scalbn+0x54>
    4bec:	4c1d      	ldr	r4, [pc, #116]	; (4c64 <scalbn+0xb0>)
    4bee:	051b      	lsls	r3, r3, #20
    4bf0:	4022      	ands	r2, r4
    4bf2:	431a      	orrs	r2, r3
    4bf4:	0011      	movs	r1, r2
    4bf6:	bd70      	pop	{r4, r5, r6, pc}
    4bf8:	4d1b      	ldr	r5, [pc, #108]	; (4c68 <scalbn+0xb4>)
    4bfa:	42ab      	cmp	r3, r5
    4bfc:	d1f0      	bne.n	4be0 <scalbn+0x2c>
    4bfe:	0002      	movs	r2, r0
    4c00:	000b      	movs	r3, r1
    4c02:	f000 fa9b 	bl	513c <__aeabi_dadd>
    4c06:	e7f6      	b.n	4bf6 <scalbn+0x42>
    4c08:	001d      	movs	r5, r3
    4c0a:	3535      	adds	r5, #53	; 0x35
    4c0c:	da18      	bge.n	4c40 <scalbn+0x8c>
    4c0e:	4b17      	ldr	r3, [pc, #92]	; (4c6c <scalbn+0xb8>)
    4c10:	0002      	movs	r2, r0
    4c12:	429c      	cmp	r4, r3
    4c14:	dc0a      	bgt.n	4c2c <scalbn+0x78>
    4c16:	000b      	movs	r3, r1
    4c18:	4815      	ldr	r0, [pc, #84]	; (4c70 <scalbn+0xbc>)
    4c1a:	4916      	ldr	r1, [pc, #88]	; (4c74 <scalbn+0xc0>)
    4c1c:	f000 f832 	bl	4c84 <copysign>
    4c20:	4a13      	ldr	r2, [pc, #76]	; (4c70 <scalbn+0xbc>)
    4c22:	4b14      	ldr	r3, [pc, #80]	; (4c74 <scalbn+0xc0>)
    4c24:	f001 f9da 	bl	5fdc <__aeabi_dmul>
    4c28:	e7e5      	b.n	4bf6 <scalbn+0x42>
    4c2a:	0002      	movs	r2, r0
    4c2c:	000b      	movs	r3, r1
    4c2e:	4812      	ldr	r0, [pc, #72]	; (4c78 <scalbn+0xc4>)
    4c30:	4912      	ldr	r1, [pc, #72]	; (4c7c <scalbn+0xc8>)
    4c32:	f000 f827 	bl	4c84 <copysign>
    4c36:	4a10      	ldr	r2, [pc, #64]	; (4c78 <scalbn+0xc4>)
    4c38:	4b10      	ldr	r3, [pc, #64]	; (4c7c <scalbn+0xc8>)
    4c3a:	f001 f9cf 	bl	5fdc <__aeabi_dmul>
    4c3e:	e7da      	b.n	4bf6 <scalbn+0x42>
    4c40:	4c08      	ldr	r4, [pc, #32]	; (4c64 <scalbn+0xb0>)
    4c42:	3336      	adds	r3, #54	; 0x36
    4c44:	4022      	ands	r2, r4
    4c46:	051b      	lsls	r3, r3, #20
    4c48:	4313      	orrs	r3, r2
    4c4a:	0019      	movs	r1, r3
    4c4c:	2200      	movs	r2, #0
    4c4e:	4b0c      	ldr	r3, [pc, #48]	; (4c80 <scalbn+0xcc>)
    4c50:	f001 f9c4 	bl	5fdc <__aeabi_dmul>
    4c54:	e7cf      	b.n	4bf6 <scalbn+0x42>
    4c56:	46c0      	nop			; (mov r8, r8)
    4c58:	43500000 	.word	0x43500000
    4c5c:	ffff3cb0 	.word	0xffff3cb0
    4c60:	000007fe 	.word	0x000007fe
    4c64:	800fffff 	.word	0x800fffff
    4c68:	000007ff 	.word	0x000007ff
    4c6c:	0000c350 	.word	0x0000c350
    4c70:	c2f8f359 	.word	0xc2f8f359
    4c74:	01a56e1f 	.word	0x01a56e1f
    4c78:	8800759c 	.word	0x8800759c
    4c7c:	7e37e43c 	.word	0x7e37e43c
    4c80:	3c900000 	.word	0x3c900000

00004c84 <copysign>:
    4c84:	b530      	push	{r4, r5, lr}
    4c86:	004a      	lsls	r2, r1, #1
    4c88:	0fdb      	lsrs	r3, r3, #31
    4c8a:	07db      	lsls	r3, r3, #31
    4c8c:	0852      	lsrs	r2, r2, #1
    4c8e:	431a      	orrs	r2, r3
    4c90:	0011      	movs	r1, r2
    4c92:	bd30      	pop	{r4, r5, pc}

00004c94 <__gnu_thumb1_case_uqi>:
    4c94:	b402      	push	{r1}
    4c96:	4671      	mov	r1, lr
    4c98:	0849      	lsrs	r1, r1, #1
    4c9a:	0049      	lsls	r1, r1, #1
    4c9c:	5c09      	ldrb	r1, [r1, r0]
    4c9e:	0049      	lsls	r1, r1, #1
    4ca0:	448e      	add	lr, r1
    4ca2:	bc02      	pop	{r1}
    4ca4:	4770      	bx	lr
    4ca6:	46c0      	nop			; (mov r8, r8)

00004ca8 <__aeabi_uidiv>:
    4ca8:	2200      	movs	r2, #0
    4caa:	0843      	lsrs	r3, r0, #1
    4cac:	428b      	cmp	r3, r1
    4cae:	d374      	bcc.n	4d9a <__aeabi_uidiv+0xf2>
    4cb0:	0903      	lsrs	r3, r0, #4
    4cb2:	428b      	cmp	r3, r1
    4cb4:	d35f      	bcc.n	4d76 <__aeabi_uidiv+0xce>
    4cb6:	0a03      	lsrs	r3, r0, #8
    4cb8:	428b      	cmp	r3, r1
    4cba:	d344      	bcc.n	4d46 <__aeabi_uidiv+0x9e>
    4cbc:	0b03      	lsrs	r3, r0, #12
    4cbe:	428b      	cmp	r3, r1
    4cc0:	d328      	bcc.n	4d14 <__aeabi_uidiv+0x6c>
    4cc2:	0c03      	lsrs	r3, r0, #16
    4cc4:	428b      	cmp	r3, r1
    4cc6:	d30d      	bcc.n	4ce4 <__aeabi_uidiv+0x3c>
    4cc8:	22ff      	movs	r2, #255	; 0xff
    4cca:	0209      	lsls	r1, r1, #8
    4ccc:	ba12      	rev	r2, r2
    4cce:	0c03      	lsrs	r3, r0, #16
    4cd0:	428b      	cmp	r3, r1
    4cd2:	d302      	bcc.n	4cda <__aeabi_uidiv+0x32>
    4cd4:	1212      	asrs	r2, r2, #8
    4cd6:	0209      	lsls	r1, r1, #8
    4cd8:	d065      	beq.n	4da6 <__aeabi_uidiv+0xfe>
    4cda:	0b03      	lsrs	r3, r0, #12
    4cdc:	428b      	cmp	r3, r1
    4cde:	d319      	bcc.n	4d14 <__aeabi_uidiv+0x6c>
    4ce0:	e000      	b.n	4ce4 <__aeabi_uidiv+0x3c>
    4ce2:	0a09      	lsrs	r1, r1, #8
    4ce4:	0bc3      	lsrs	r3, r0, #15
    4ce6:	428b      	cmp	r3, r1
    4ce8:	d301      	bcc.n	4cee <__aeabi_uidiv+0x46>
    4cea:	03cb      	lsls	r3, r1, #15
    4cec:	1ac0      	subs	r0, r0, r3
    4cee:	4152      	adcs	r2, r2
    4cf0:	0b83      	lsrs	r3, r0, #14
    4cf2:	428b      	cmp	r3, r1
    4cf4:	d301      	bcc.n	4cfa <__aeabi_uidiv+0x52>
    4cf6:	038b      	lsls	r3, r1, #14
    4cf8:	1ac0      	subs	r0, r0, r3
    4cfa:	4152      	adcs	r2, r2
    4cfc:	0b43      	lsrs	r3, r0, #13
    4cfe:	428b      	cmp	r3, r1
    4d00:	d301      	bcc.n	4d06 <__aeabi_uidiv+0x5e>
    4d02:	034b      	lsls	r3, r1, #13
    4d04:	1ac0      	subs	r0, r0, r3
    4d06:	4152      	adcs	r2, r2
    4d08:	0b03      	lsrs	r3, r0, #12
    4d0a:	428b      	cmp	r3, r1
    4d0c:	d301      	bcc.n	4d12 <__aeabi_uidiv+0x6a>
    4d0e:	030b      	lsls	r3, r1, #12
    4d10:	1ac0      	subs	r0, r0, r3
    4d12:	4152      	adcs	r2, r2
    4d14:	0ac3      	lsrs	r3, r0, #11
    4d16:	428b      	cmp	r3, r1
    4d18:	d301      	bcc.n	4d1e <__aeabi_uidiv+0x76>
    4d1a:	02cb      	lsls	r3, r1, #11
    4d1c:	1ac0      	subs	r0, r0, r3
    4d1e:	4152      	adcs	r2, r2
    4d20:	0a83      	lsrs	r3, r0, #10
    4d22:	428b      	cmp	r3, r1
    4d24:	d301      	bcc.n	4d2a <__aeabi_uidiv+0x82>
    4d26:	028b      	lsls	r3, r1, #10
    4d28:	1ac0      	subs	r0, r0, r3
    4d2a:	4152      	adcs	r2, r2
    4d2c:	0a43      	lsrs	r3, r0, #9
    4d2e:	428b      	cmp	r3, r1
    4d30:	d301      	bcc.n	4d36 <__aeabi_uidiv+0x8e>
    4d32:	024b      	lsls	r3, r1, #9
    4d34:	1ac0      	subs	r0, r0, r3
    4d36:	4152      	adcs	r2, r2
    4d38:	0a03      	lsrs	r3, r0, #8
    4d3a:	428b      	cmp	r3, r1
    4d3c:	d301      	bcc.n	4d42 <__aeabi_uidiv+0x9a>
    4d3e:	020b      	lsls	r3, r1, #8
    4d40:	1ac0      	subs	r0, r0, r3
    4d42:	4152      	adcs	r2, r2
    4d44:	d2cd      	bcs.n	4ce2 <__aeabi_uidiv+0x3a>
    4d46:	09c3      	lsrs	r3, r0, #7
    4d48:	428b      	cmp	r3, r1
    4d4a:	d301      	bcc.n	4d50 <__aeabi_uidiv+0xa8>
    4d4c:	01cb      	lsls	r3, r1, #7
    4d4e:	1ac0      	subs	r0, r0, r3
    4d50:	4152      	adcs	r2, r2
    4d52:	0983      	lsrs	r3, r0, #6
    4d54:	428b      	cmp	r3, r1
    4d56:	d301      	bcc.n	4d5c <__aeabi_uidiv+0xb4>
    4d58:	018b      	lsls	r3, r1, #6
    4d5a:	1ac0      	subs	r0, r0, r3
    4d5c:	4152      	adcs	r2, r2
    4d5e:	0943      	lsrs	r3, r0, #5
    4d60:	428b      	cmp	r3, r1
    4d62:	d301      	bcc.n	4d68 <__aeabi_uidiv+0xc0>
    4d64:	014b      	lsls	r3, r1, #5
    4d66:	1ac0      	subs	r0, r0, r3
    4d68:	4152      	adcs	r2, r2
    4d6a:	0903      	lsrs	r3, r0, #4
    4d6c:	428b      	cmp	r3, r1
    4d6e:	d301      	bcc.n	4d74 <__aeabi_uidiv+0xcc>
    4d70:	010b      	lsls	r3, r1, #4
    4d72:	1ac0      	subs	r0, r0, r3
    4d74:	4152      	adcs	r2, r2
    4d76:	08c3      	lsrs	r3, r0, #3
    4d78:	428b      	cmp	r3, r1
    4d7a:	d301      	bcc.n	4d80 <__aeabi_uidiv+0xd8>
    4d7c:	00cb      	lsls	r3, r1, #3
    4d7e:	1ac0      	subs	r0, r0, r3
    4d80:	4152      	adcs	r2, r2
    4d82:	0883      	lsrs	r3, r0, #2
    4d84:	428b      	cmp	r3, r1
    4d86:	d301      	bcc.n	4d8c <__aeabi_uidiv+0xe4>
    4d88:	008b      	lsls	r3, r1, #2
    4d8a:	1ac0      	subs	r0, r0, r3
    4d8c:	4152      	adcs	r2, r2
    4d8e:	0843      	lsrs	r3, r0, #1
    4d90:	428b      	cmp	r3, r1
    4d92:	d301      	bcc.n	4d98 <__aeabi_uidiv+0xf0>
    4d94:	004b      	lsls	r3, r1, #1
    4d96:	1ac0      	subs	r0, r0, r3
    4d98:	4152      	adcs	r2, r2
    4d9a:	1a41      	subs	r1, r0, r1
    4d9c:	d200      	bcs.n	4da0 <__aeabi_uidiv+0xf8>
    4d9e:	4601      	mov	r1, r0
    4da0:	4152      	adcs	r2, r2
    4da2:	4610      	mov	r0, r2
    4da4:	4770      	bx	lr
    4da6:	e7ff      	b.n	4da8 <__aeabi_uidiv+0x100>
    4da8:	b501      	push	{r0, lr}
    4daa:	2000      	movs	r0, #0
    4dac:	f000 f806 	bl	4dbc <__aeabi_idiv0>
    4db0:	bd02      	pop	{r1, pc}
    4db2:	46c0      	nop			; (mov r8, r8)

00004db4 <__aeabi_uidivmod>:
    4db4:	2900      	cmp	r1, #0
    4db6:	d0f7      	beq.n	4da8 <__aeabi_uidiv+0x100>
    4db8:	e776      	b.n	4ca8 <__aeabi_uidiv>
    4dba:	4770      	bx	lr

00004dbc <__aeabi_idiv0>:
    4dbc:	4770      	bx	lr
    4dbe:	46c0      	nop			; (mov r8, r8)

00004dc0 <__aeabi_cdrcmple>:
    4dc0:	4684      	mov	ip, r0
    4dc2:	1c10      	adds	r0, r2, #0
    4dc4:	4662      	mov	r2, ip
    4dc6:	468c      	mov	ip, r1
    4dc8:	1c19      	adds	r1, r3, #0
    4dca:	4663      	mov	r3, ip
    4dcc:	e000      	b.n	4dd0 <__aeabi_cdcmpeq>
    4dce:	46c0      	nop			; (mov r8, r8)

00004dd0 <__aeabi_cdcmpeq>:
    4dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4dd2:	f001 f899 	bl	5f08 <__ledf2>
    4dd6:	2800      	cmp	r0, #0
    4dd8:	d401      	bmi.n	4dde <__aeabi_cdcmpeq+0xe>
    4dda:	2100      	movs	r1, #0
    4ddc:	42c8      	cmn	r0, r1
    4dde:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004de0 <__aeabi_dcmpeq>:
    4de0:	b510      	push	{r4, lr}
    4de2:	f000 ffed 	bl	5dc0 <__eqdf2>
    4de6:	4240      	negs	r0, r0
    4de8:	3001      	adds	r0, #1
    4dea:	bd10      	pop	{r4, pc}

00004dec <__aeabi_dcmplt>:
    4dec:	b510      	push	{r4, lr}
    4dee:	f001 f88b 	bl	5f08 <__ledf2>
    4df2:	2800      	cmp	r0, #0
    4df4:	db01      	blt.n	4dfa <__aeabi_dcmplt+0xe>
    4df6:	2000      	movs	r0, #0
    4df8:	bd10      	pop	{r4, pc}
    4dfa:	2001      	movs	r0, #1
    4dfc:	bd10      	pop	{r4, pc}
    4dfe:	46c0      	nop			; (mov r8, r8)

00004e00 <__aeabi_dcmple>:
    4e00:	b510      	push	{r4, lr}
    4e02:	f001 f881 	bl	5f08 <__ledf2>
    4e06:	2800      	cmp	r0, #0
    4e08:	dd01      	ble.n	4e0e <__aeabi_dcmple+0xe>
    4e0a:	2000      	movs	r0, #0
    4e0c:	bd10      	pop	{r4, pc}
    4e0e:	2001      	movs	r0, #1
    4e10:	bd10      	pop	{r4, pc}
    4e12:	46c0      	nop			; (mov r8, r8)

00004e14 <__aeabi_dcmpgt>:
    4e14:	b510      	push	{r4, lr}
    4e16:	f001 f813 	bl	5e40 <__gedf2>
    4e1a:	2800      	cmp	r0, #0
    4e1c:	dc01      	bgt.n	4e22 <__aeabi_dcmpgt+0xe>
    4e1e:	2000      	movs	r0, #0
    4e20:	bd10      	pop	{r4, pc}
    4e22:	2001      	movs	r0, #1
    4e24:	bd10      	pop	{r4, pc}
    4e26:	46c0      	nop			; (mov r8, r8)

00004e28 <__aeabi_dcmpge>:
    4e28:	b510      	push	{r4, lr}
    4e2a:	f001 f809 	bl	5e40 <__gedf2>
    4e2e:	2800      	cmp	r0, #0
    4e30:	da01      	bge.n	4e36 <__aeabi_dcmpge+0xe>
    4e32:	2000      	movs	r0, #0
    4e34:	bd10      	pop	{r4, pc}
    4e36:	2001      	movs	r0, #1
    4e38:	bd10      	pop	{r4, pc}
    4e3a:	46c0      	nop			; (mov r8, r8)

00004e3c <__aeabi_lmul>:
    4e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e3e:	464f      	mov	r7, r9
    4e40:	4646      	mov	r6, r8
    4e42:	b4c0      	push	{r6, r7}
    4e44:	0416      	lsls	r6, r2, #16
    4e46:	0c36      	lsrs	r6, r6, #16
    4e48:	4699      	mov	r9, r3
    4e4a:	0033      	movs	r3, r6
    4e4c:	0405      	lsls	r5, r0, #16
    4e4e:	0c2c      	lsrs	r4, r5, #16
    4e50:	0c07      	lsrs	r7, r0, #16
    4e52:	0c15      	lsrs	r5, r2, #16
    4e54:	4363      	muls	r3, r4
    4e56:	437e      	muls	r6, r7
    4e58:	436f      	muls	r7, r5
    4e5a:	4365      	muls	r5, r4
    4e5c:	0c1c      	lsrs	r4, r3, #16
    4e5e:	19ad      	adds	r5, r5, r6
    4e60:	1964      	adds	r4, r4, r5
    4e62:	469c      	mov	ip, r3
    4e64:	42a6      	cmp	r6, r4
    4e66:	d903      	bls.n	4e70 <__aeabi_lmul+0x34>
    4e68:	2380      	movs	r3, #128	; 0x80
    4e6a:	025b      	lsls	r3, r3, #9
    4e6c:	4698      	mov	r8, r3
    4e6e:	4447      	add	r7, r8
    4e70:	4663      	mov	r3, ip
    4e72:	0c25      	lsrs	r5, r4, #16
    4e74:	19ef      	adds	r7, r5, r7
    4e76:	041d      	lsls	r5, r3, #16
    4e78:	464b      	mov	r3, r9
    4e7a:	434a      	muls	r2, r1
    4e7c:	4343      	muls	r3, r0
    4e7e:	0c2d      	lsrs	r5, r5, #16
    4e80:	0424      	lsls	r4, r4, #16
    4e82:	1964      	adds	r4, r4, r5
    4e84:	1899      	adds	r1, r3, r2
    4e86:	19c9      	adds	r1, r1, r7
    4e88:	0020      	movs	r0, r4
    4e8a:	bc0c      	pop	{r2, r3}
    4e8c:	4690      	mov	r8, r2
    4e8e:	4699      	mov	r9, r3
    4e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e92:	46c0      	nop			; (mov r8, r8)

00004e94 <__aeabi_d2uiz>:
    4e94:	b570      	push	{r4, r5, r6, lr}
    4e96:	2200      	movs	r2, #0
    4e98:	4b0c      	ldr	r3, [pc, #48]	; (4ecc <__aeabi_d2uiz+0x38>)
    4e9a:	0004      	movs	r4, r0
    4e9c:	000d      	movs	r5, r1
    4e9e:	f7ff ffc3 	bl	4e28 <__aeabi_dcmpge>
    4ea2:	2800      	cmp	r0, #0
    4ea4:	d104      	bne.n	4eb0 <__aeabi_d2uiz+0x1c>
    4ea6:	0020      	movs	r0, r4
    4ea8:	0029      	movs	r1, r5
    4eaa:	f001 fe85 	bl	6bb8 <__aeabi_d2iz>
    4eae:	bd70      	pop	{r4, r5, r6, pc}
    4eb0:	4b06      	ldr	r3, [pc, #24]	; (4ecc <__aeabi_d2uiz+0x38>)
    4eb2:	2200      	movs	r2, #0
    4eb4:	0020      	movs	r0, r4
    4eb6:	0029      	movs	r1, r5
    4eb8:	f001 fb0a 	bl	64d0 <__aeabi_dsub>
    4ebc:	f001 fe7c 	bl	6bb8 <__aeabi_d2iz>
    4ec0:	2380      	movs	r3, #128	; 0x80
    4ec2:	061b      	lsls	r3, r3, #24
    4ec4:	469c      	mov	ip, r3
    4ec6:	4460      	add	r0, ip
    4ec8:	e7f1      	b.n	4eae <__aeabi_d2uiz+0x1a>
    4eca:	46c0      	nop			; (mov r8, r8)
    4ecc:	41e00000 	.word	0x41e00000

00004ed0 <__aeabi_fmul>:
    4ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ed2:	4657      	mov	r7, sl
    4ed4:	464e      	mov	r6, r9
    4ed6:	4645      	mov	r5, r8
    4ed8:	0043      	lsls	r3, r0, #1
    4eda:	b4e0      	push	{r5, r6, r7}
    4edc:	0246      	lsls	r6, r0, #9
    4ede:	4688      	mov	r8, r1
    4ee0:	0a76      	lsrs	r6, r6, #9
    4ee2:	0e1f      	lsrs	r7, r3, #24
    4ee4:	0fc4      	lsrs	r4, r0, #31
    4ee6:	2f00      	cmp	r7, #0
    4ee8:	d047      	beq.n	4f7a <__aeabi_fmul+0xaa>
    4eea:	2fff      	cmp	r7, #255	; 0xff
    4eec:	d025      	beq.n	4f3a <__aeabi_fmul+0x6a>
    4eee:	2300      	movs	r3, #0
    4ef0:	2580      	movs	r5, #128	; 0x80
    4ef2:	469a      	mov	sl, r3
    4ef4:	4699      	mov	r9, r3
    4ef6:	00f6      	lsls	r6, r6, #3
    4ef8:	04ed      	lsls	r5, r5, #19
    4efa:	432e      	orrs	r6, r5
    4efc:	3f7f      	subs	r7, #127	; 0x7f
    4efe:	4643      	mov	r3, r8
    4f00:	4642      	mov	r2, r8
    4f02:	025d      	lsls	r5, r3, #9
    4f04:	0fd2      	lsrs	r2, r2, #31
    4f06:	005b      	lsls	r3, r3, #1
    4f08:	0a6d      	lsrs	r5, r5, #9
    4f0a:	0e1b      	lsrs	r3, r3, #24
    4f0c:	4690      	mov	r8, r2
    4f0e:	d040      	beq.n	4f92 <__aeabi_fmul+0xc2>
    4f10:	2bff      	cmp	r3, #255	; 0xff
    4f12:	d039      	beq.n	4f88 <__aeabi_fmul+0xb8>
    4f14:	2280      	movs	r2, #128	; 0x80
    4f16:	2000      	movs	r0, #0
    4f18:	00ed      	lsls	r5, r5, #3
    4f1a:	04d2      	lsls	r2, r2, #19
    4f1c:	4315      	orrs	r5, r2
    4f1e:	3b7f      	subs	r3, #127	; 0x7f
    4f20:	18fb      	adds	r3, r7, r3
    4f22:	4642      	mov	r2, r8
    4f24:	4657      	mov	r7, sl
    4f26:	1c59      	adds	r1, r3, #1
    4f28:	4062      	eors	r2, r4
    4f2a:	468c      	mov	ip, r1
    4f2c:	4307      	orrs	r7, r0
    4f2e:	2f0f      	cmp	r7, #15
    4f30:	d85c      	bhi.n	4fec <__aeabi_fmul+0x11c>
    4f32:	496f      	ldr	r1, [pc, #444]	; (50f0 <__aeabi_fmul+0x220>)
    4f34:	00bf      	lsls	r7, r7, #2
    4f36:	59c9      	ldr	r1, [r1, r7]
    4f38:	468f      	mov	pc, r1
    4f3a:	2e00      	cmp	r6, #0
    4f3c:	d145      	bne.n	4fca <__aeabi_fmul+0xfa>
    4f3e:	2308      	movs	r3, #8
    4f40:	469a      	mov	sl, r3
    4f42:	3b06      	subs	r3, #6
    4f44:	4699      	mov	r9, r3
    4f46:	e7da      	b.n	4efe <__aeabi_fmul+0x2e>
    4f48:	4642      	mov	r2, r8
    4f4a:	2802      	cmp	r0, #2
    4f4c:	d02d      	beq.n	4faa <__aeabi_fmul+0xda>
    4f4e:	2803      	cmp	r0, #3
    4f50:	d100      	bne.n	4f54 <__aeabi_fmul+0x84>
    4f52:	e0c3      	b.n	50dc <__aeabi_fmul+0x20c>
    4f54:	2801      	cmp	r0, #1
    4f56:	d000      	beq.n	4f5a <__aeabi_fmul+0x8a>
    4f58:	e0a2      	b.n	50a0 <__aeabi_fmul+0x1d0>
    4f5a:	2500      	movs	r5, #0
    4f5c:	2600      	movs	r6, #0
    4f5e:	4002      	ands	r2, r0
    4f60:	b2d4      	uxtb	r4, r2
    4f62:	0276      	lsls	r6, r6, #9
    4f64:	05ed      	lsls	r5, r5, #23
    4f66:	0a76      	lsrs	r6, r6, #9
    4f68:	432e      	orrs	r6, r5
    4f6a:	07e4      	lsls	r4, r4, #31
    4f6c:	4326      	orrs	r6, r4
    4f6e:	0030      	movs	r0, r6
    4f70:	bc1c      	pop	{r2, r3, r4}
    4f72:	4690      	mov	r8, r2
    4f74:	4699      	mov	r9, r3
    4f76:	46a2      	mov	sl, r4
    4f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f7a:	2e00      	cmp	r6, #0
    4f7c:	d11a      	bne.n	4fb4 <__aeabi_fmul+0xe4>
    4f7e:	2304      	movs	r3, #4
    4f80:	469a      	mov	sl, r3
    4f82:	3b03      	subs	r3, #3
    4f84:	4699      	mov	r9, r3
    4f86:	e7ba      	b.n	4efe <__aeabi_fmul+0x2e>
    4f88:	002a      	movs	r2, r5
    4f8a:	1e51      	subs	r1, r2, #1
    4f8c:	418a      	sbcs	r2, r1
    4f8e:	1c90      	adds	r0, r2, #2
    4f90:	e7c6      	b.n	4f20 <__aeabi_fmul+0x50>
    4f92:	2001      	movs	r0, #1
    4f94:	2d00      	cmp	r5, #0
    4f96:	d0c3      	beq.n	4f20 <__aeabi_fmul+0x50>
    4f98:	0028      	movs	r0, r5
    4f9a:	f001 ff9d 	bl	6ed8 <__clzsi2>
    4f9e:	1f43      	subs	r3, r0, #5
    4fa0:	3076      	adds	r0, #118	; 0x76
    4fa2:	409d      	lsls	r5, r3
    4fa4:	4243      	negs	r3, r0
    4fa6:	2000      	movs	r0, #0
    4fa8:	e7ba      	b.n	4f20 <__aeabi_fmul+0x50>
    4faa:	2401      	movs	r4, #1
    4fac:	25ff      	movs	r5, #255	; 0xff
    4fae:	4014      	ands	r4, r2
    4fb0:	2600      	movs	r6, #0
    4fb2:	e7d6      	b.n	4f62 <__aeabi_fmul+0x92>
    4fb4:	0030      	movs	r0, r6
    4fb6:	f001 ff8f 	bl	6ed8 <__clzsi2>
    4fba:	1f43      	subs	r3, r0, #5
    4fbc:	409e      	lsls	r6, r3
    4fbe:	2300      	movs	r3, #0
    4fc0:	3076      	adds	r0, #118	; 0x76
    4fc2:	4247      	negs	r7, r0
    4fc4:	469a      	mov	sl, r3
    4fc6:	4699      	mov	r9, r3
    4fc8:	e799      	b.n	4efe <__aeabi_fmul+0x2e>
    4fca:	230c      	movs	r3, #12
    4fcc:	469a      	mov	sl, r3
    4fce:	3b09      	subs	r3, #9
    4fd0:	4699      	mov	r9, r3
    4fd2:	e794      	b.n	4efe <__aeabi_fmul+0x2e>
    4fd4:	2680      	movs	r6, #128	; 0x80
    4fd6:	2400      	movs	r4, #0
    4fd8:	03f6      	lsls	r6, r6, #15
    4fda:	25ff      	movs	r5, #255	; 0xff
    4fdc:	e7c1      	b.n	4f62 <__aeabi_fmul+0x92>
    4fde:	0035      	movs	r5, r6
    4fe0:	4648      	mov	r0, r9
    4fe2:	e7b2      	b.n	4f4a <__aeabi_fmul+0x7a>
    4fe4:	0035      	movs	r5, r6
    4fe6:	0022      	movs	r2, r4
    4fe8:	4648      	mov	r0, r9
    4fea:	e7ae      	b.n	4f4a <__aeabi_fmul+0x7a>
    4fec:	0429      	lsls	r1, r5, #16
    4fee:	0c09      	lsrs	r1, r1, #16
    4ff0:	0008      	movs	r0, r1
    4ff2:	0c37      	lsrs	r7, r6, #16
    4ff4:	0436      	lsls	r6, r6, #16
    4ff6:	0c36      	lsrs	r6, r6, #16
    4ff8:	0c2c      	lsrs	r4, r5, #16
    4ffa:	4379      	muls	r1, r7
    4ffc:	4370      	muls	r0, r6
    4ffe:	4367      	muls	r7, r4
    5000:	4374      	muls	r4, r6
    5002:	0c06      	lsrs	r6, r0, #16
    5004:	1864      	adds	r4, r4, r1
    5006:	1936      	adds	r6, r6, r4
    5008:	42b1      	cmp	r1, r6
    500a:	d903      	bls.n	5014 <__aeabi_fmul+0x144>
    500c:	2180      	movs	r1, #128	; 0x80
    500e:	0249      	lsls	r1, r1, #9
    5010:	4688      	mov	r8, r1
    5012:	4447      	add	r7, r8
    5014:	0400      	lsls	r0, r0, #16
    5016:	0c00      	lsrs	r0, r0, #16
    5018:	0431      	lsls	r1, r6, #16
    501a:	1809      	adds	r1, r1, r0
    501c:	018d      	lsls	r5, r1, #6
    501e:	1e68      	subs	r0, r5, #1
    5020:	4185      	sbcs	r5, r0
    5022:	0e89      	lsrs	r1, r1, #26
    5024:	4329      	orrs	r1, r5
    5026:	0c35      	lsrs	r5, r6, #16
    5028:	19ed      	adds	r5, r5, r7
    502a:	01ad      	lsls	r5, r5, #6
    502c:	430d      	orrs	r5, r1
    502e:	0129      	lsls	r1, r5, #4
    5030:	d504      	bpl.n	503c <__aeabi_fmul+0x16c>
    5032:	2301      	movs	r3, #1
    5034:	0869      	lsrs	r1, r5, #1
    5036:	401d      	ands	r5, r3
    5038:	4663      	mov	r3, ip
    503a:	430d      	orrs	r5, r1
    503c:	0019      	movs	r1, r3
    503e:	317f      	adds	r1, #127	; 0x7f
    5040:	2900      	cmp	r1, #0
    5042:	dd25      	ble.n	5090 <__aeabi_fmul+0x1c0>
    5044:	0768      	lsls	r0, r5, #29
    5046:	d004      	beq.n	5052 <__aeabi_fmul+0x182>
    5048:	200f      	movs	r0, #15
    504a:	4028      	ands	r0, r5
    504c:	2804      	cmp	r0, #4
    504e:	d000      	beq.n	5052 <__aeabi_fmul+0x182>
    5050:	3504      	adds	r5, #4
    5052:	0128      	lsls	r0, r5, #4
    5054:	d503      	bpl.n	505e <__aeabi_fmul+0x18e>
    5056:	4927      	ldr	r1, [pc, #156]	; (50f4 <__aeabi_fmul+0x224>)
    5058:	3380      	adds	r3, #128	; 0x80
    505a:	400d      	ands	r5, r1
    505c:	0019      	movs	r1, r3
    505e:	29fe      	cmp	r1, #254	; 0xfe
    5060:	dca3      	bgt.n	4faa <__aeabi_fmul+0xda>
    5062:	2401      	movs	r4, #1
    5064:	01ad      	lsls	r5, r5, #6
    5066:	0a6e      	lsrs	r6, r5, #9
    5068:	4014      	ands	r4, r2
    506a:	b2cd      	uxtb	r5, r1
    506c:	e779      	b.n	4f62 <__aeabi_fmul+0x92>
    506e:	2080      	movs	r0, #128	; 0x80
    5070:	03c0      	lsls	r0, r0, #15
    5072:	4206      	tst	r6, r0
    5074:	d007      	beq.n	5086 <__aeabi_fmul+0x1b6>
    5076:	4205      	tst	r5, r0
    5078:	d105      	bne.n	5086 <__aeabi_fmul+0x1b6>
    507a:	4328      	orrs	r0, r5
    507c:	0246      	lsls	r6, r0, #9
    507e:	0a76      	lsrs	r6, r6, #9
    5080:	4644      	mov	r4, r8
    5082:	25ff      	movs	r5, #255	; 0xff
    5084:	e76d      	b.n	4f62 <__aeabi_fmul+0x92>
    5086:	4306      	orrs	r6, r0
    5088:	0276      	lsls	r6, r6, #9
    508a:	0a76      	lsrs	r6, r6, #9
    508c:	25ff      	movs	r5, #255	; 0xff
    508e:	e768      	b.n	4f62 <__aeabi_fmul+0x92>
    5090:	2401      	movs	r4, #1
    5092:	1a61      	subs	r1, r4, r1
    5094:	291b      	cmp	r1, #27
    5096:	dd05      	ble.n	50a4 <__aeabi_fmul+0x1d4>
    5098:	4014      	ands	r4, r2
    509a:	2500      	movs	r5, #0
    509c:	2600      	movs	r6, #0
    509e:	e760      	b.n	4f62 <__aeabi_fmul+0x92>
    50a0:	4663      	mov	r3, ip
    50a2:	e7cb      	b.n	503c <__aeabi_fmul+0x16c>
    50a4:	002e      	movs	r6, r5
    50a6:	2320      	movs	r3, #32
    50a8:	40ce      	lsrs	r6, r1
    50aa:	1a59      	subs	r1, r3, r1
    50ac:	408d      	lsls	r5, r1
    50ae:	1e6b      	subs	r3, r5, #1
    50b0:	419d      	sbcs	r5, r3
    50b2:	432e      	orrs	r6, r5
    50b4:	0773      	lsls	r3, r6, #29
    50b6:	d004      	beq.n	50c2 <__aeabi_fmul+0x1f2>
    50b8:	230f      	movs	r3, #15
    50ba:	4033      	ands	r3, r6
    50bc:	2b04      	cmp	r3, #4
    50be:	d000      	beq.n	50c2 <__aeabi_fmul+0x1f2>
    50c0:	3604      	adds	r6, #4
    50c2:	0173      	lsls	r3, r6, #5
    50c4:	d504      	bpl.n	50d0 <__aeabi_fmul+0x200>
    50c6:	2401      	movs	r4, #1
    50c8:	2501      	movs	r5, #1
    50ca:	4014      	ands	r4, r2
    50cc:	2600      	movs	r6, #0
    50ce:	e748      	b.n	4f62 <__aeabi_fmul+0x92>
    50d0:	2401      	movs	r4, #1
    50d2:	01b6      	lsls	r6, r6, #6
    50d4:	0a76      	lsrs	r6, r6, #9
    50d6:	4014      	ands	r4, r2
    50d8:	2500      	movs	r5, #0
    50da:	e742      	b.n	4f62 <__aeabi_fmul+0x92>
    50dc:	2680      	movs	r6, #128	; 0x80
    50de:	2401      	movs	r4, #1
    50e0:	03f6      	lsls	r6, r6, #15
    50e2:	432e      	orrs	r6, r5
    50e4:	0276      	lsls	r6, r6, #9
    50e6:	0a76      	lsrs	r6, r6, #9
    50e8:	4014      	ands	r4, r2
    50ea:	25ff      	movs	r5, #255	; 0xff
    50ec:	e739      	b.n	4f62 <__aeabi_fmul+0x92>
    50ee:	46c0      	nop			; (mov r8, r8)
    50f0:	00006fa8 	.word	0x00006fa8
    50f4:	f7ffffff 	.word	0xf7ffffff

000050f8 <__aeabi_f2iz>:
    50f8:	0243      	lsls	r3, r0, #9
    50fa:	0a59      	lsrs	r1, r3, #9
    50fc:	0043      	lsls	r3, r0, #1
    50fe:	0fc2      	lsrs	r2, r0, #31
    5100:	0e1b      	lsrs	r3, r3, #24
    5102:	2000      	movs	r0, #0
    5104:	2b7e      	cmp	r3, #126	; 0x7e
    5106:	dd0e      	ble.n	5126 <__aeabi_f2iz+0x2e>
    5108:	2b9d      	cmp	r3, #157	; 0x9d
    510a:	dc0d      	bgt.n	5128 <__aeabi_f2iz+0x30>
    510c:	2080      	movs	r0, #128	; 0x80
    510e:	0400      	lsls	r0, r0, #16
    5110:	4301      	orrs	r1, r0
    5112:	2b95      	cmp	r3, #149	; 0x95
    5114:	dc0b      	bgt.n	512e <__aeabi_f2iz+0x36>
    5116:	2096      	movs	r0, #150	; 0x96
    5118:	1ac3      	subs	r3, r0, r3
    511a:	40d9      	lsrs	r1, r3
    511c:	000b      	movs	r3, r1
    511e:	4258      	negs	r0, r3
    5120:	2a00      	cmp	r2, #0
    5122:	d100      	bne.n	5126 <__aeabi_f2iz+0x2e>
    5124:	0018      	movs	r0, r3
    5126:	4770      	bx	lr
    5128:	4b03      	ldr	r3, [pc, #12]	; (5138 <__aeabi_f2iz+0x40>)
    512a:	18d0      	adds	r0, r2, r3
    512c:	e7fb      	b.n	5126 <__aeabi_f2iz+0x2e>
    512e:	3b96      	subs	r3, #150	; 0x96
    5130:	4099      	lsls	r1, r3
    5132:	000b      	movs	r3, r1
    5134:	e7f3      	b.n	511e <__aeabi_f2iz+0x26>
    5136:	46c0      	nop			; (mov r8, r8)
    5138:	7fffffff 	.word	0x7fffffff

0000513c <__aeabi_dadd>:
    513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    513e:	4656      	mov	r6, sl
    5140:	465f      	mov	r7, fp
    5142:	464d      	mov	r5, r9
    5144:	4644      	mov	r4, r8
    5146:	b4f0      	push	{r4, r5, r6, r7}
    5148:	000f      	movs	r7, r1
    514a:	0ffd      	lsrs	r5, r7, #31
    514c:	46aa      	mov	sl, r5
    514e:	0309      	lsls	r1, r1, #12
    5150:	007c      	lsls	r4, r7, #1
    5152:	002e      	movs	r6, r5
    5154:	005f      	lsls	r7, r3, #1
    5156:	0f45      	lsrs	r5, r0, #29
    5158:	0a49      	lsrs	r1, r1, #9
    515a:	0d7f      	lsrs	r7, r7, #21
    515c:	4329      	orrs	r1, r5
    515e:	00c5      	lsls	r5, r0, #3
    5160:	0318      	lsls	r0, r3, #12
    5162:	46bc      	mov	ip, r7
    5164:	0a40      	lsrs	r0, r0, #9
    5166:	0f57      	lsrs	r7, r2, #29
    5168:	0d64      	lsrs	r4, r4, #21
    516a:	0fdb      	lsrs	r3, r3, #31
    516c:	4338      	orrs	r0, r7
    516e:	00d2      	lsls	r2, r2, #3
    5170:	459a      	cmp	sl, r3
    5172:	d100      	bne.n	5176 <__aeabi_dadd+0x3a>
    5174:	e0aa      	b.n	52cc <__aeabi_dadd+0x190>
    5176:	4666      	mov	r6, ip
    5178:	1ba6      	subs	r6, r4, r6
    517a:	2e00      	cmp	r6, #0
    517c:	dc00      	bgt.n	5180 <__aeabi_dadd+0x44>
    517e:	e0ff      	b.n	5380 <__aeabi_dadd+0x244>
    5180:	4663      	mov	r3, ip
    5182:	2b00      	cmp	r3, #0
    5184:	d139      	bne.n	51fa <__aeabi_dadd+0xbe>
    5186:	0003      	movs	r3, r0
    5188:	4313      	orrs	r3, r2
    518a:	d000      	beq.n	518e <__aeabi_dadd+0x52>
    518c:	e0d9      	b.n	5342 <__aeabi_dadd+0x206>
    518e:	076b      	lsls	r3, r5, #29
    5190:	d009      	beq.n	51a6 <__aeabi_dadd+0x6a>
    5192:	230f      	movs	r3, #15
    5194:	402b      	ands	r3, r5
    5196:	2b04      	cmp	r3, #4
    5198:	d005      	beq.n	51a6 <__aeabi_dadd+0x6a>
    519a:	1d2b      	adds	r3, r5, #4
    519c:	42ab      	cmp	r3, r5
    519e:	41ad      	sbcs	r5, r5
    51a0:	426d      	negs	r5, r5
    51a2:	1949      	adds	r1, r1, r5
    51a4:	001d      	movs	r5, r3
    51a6:	020b      	lsls	r3, r1, #8
    51a8:	d400      	bmi.n	51ac <__aeabi_dadd+0x70>
    51aa:	e082      	b.n	52b2 <__aeabi_dadd+0x176>
    51ac:	4bca      	ldr	r3, [pc, #808]	; (54d8 <__aeabi_dadd+0x39c>)
    51ae:	3401      	adds	r4, #1
    51b0:	429c      	cmp	r4, r3
    51b2:	d100      	bne.n	51b6 <__aeabi_dadd+0x7a>
    51b4:	e0fe      	b.n	53b4 <__aeabi_dadd+0x278>
    51b6:	000a      	movs	r2, r1
    51b8:	4656      	mov	r6, sl
    51ba:	4bc8      	ldr	r3, [pc, #800]	; (54dc <__aeabi_dadd+0x3a0>)
    51bc:	08ed      	lsrs	r5, r5, #3
    51be:	401a      	ands	r2, r3
    51c0:	0750      	lsls	r0, r2, #29
    51c2:	0564      	lsls	r4, r4, #21
    51c4:	0252      	lsls	r2, r2, #9
    51c6:	4305      	orrs	r5, r0
    51c8:	0b12      	lsrs	r2, r2, #12
    51ca:	0d64      	lsrs	r4, r4, #21
    51cc:	2100      	movs	r1, #0
    51ce:	0312      	lsls	r2, r2, #12
    51d0:	0d0b      	lsrs	r3, r1, #20
    51d2:	051b      	lsls	r3, r3, #20
    51d4:	0564      	lsls	r4, r4, #21
    51d6:	0b12      	lsrs	r2, r2, #12
    51d8:	431a      	orrs	r2, r3
    51da:	0863      	lsrs	r3, r4, #1
    51dc:	4cc0      	ldr	r4, [pc, #768]	; (54e0 <__aeabi_dadd+0x3a4>)
    51de:	07f6      	lsls	r6, r6, #31
    51e0:	4014      	ands	r4, r2
    51e2:	431c      	orrs	r4, r3
    51e4:	0064      	lsls	r4, r4, #1
    51e6:	0864      	lsrs	r4, r4, #1
    51e8:	4334      	orrs	r4, r6
    51ea:	0028      	movs	r0, r5
    51ec:	0021      	movs	r1, r4
    51ee:	bc3c      	pop	{r2, r3, r4, r5}
    51f0:	4690      	mov	r8, r2
    51f2:	4699      	mov	r9, r3
    51f4:	46a2      	mov	sl, r4
    51f6:	46ab      	mov	fp, r5
    51f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    51fa:	4bb7      	ldr	r3, [pc, #732]	; (54d8 <__aeabi_dadd+0x39c>)
    51fc:	429c      	cmp	r4, r3
    51fe:	d0c6      	beq.n	518e <__aeabi_dadd+0x52>
    5200:	2380      	movs	r3, #128	; 0x80
    5202:	041b      	lsls	r3, r3, #16
    5204:	4318      	orrs	r0, r3
    5206:	2e38      	cmp	r6, #56	; 0x38
    5208:	dd00      	ble.n	520c <__aeabi_dadd+0xd0>
    520a:	e0eb      	b.n	53e4 <__aeabi_dadd+0x2a8>
    520c:	2e1f      	cmp	r6, #31
    520e:	dd00      	ble.n	5212 <__aeabi_dadd+0xd6>
    5210:	e11e      	b.n	5450 <__aeabi_dadd+0x314>
    5212:	2320      	movs	r3, #32
    5214:	1b9b      	subs	r3, r3, r6
    5216:	469c      	mov	ip, r3
    5218:	0003      	movs	r3, r0
    521a:	4667      	mov	r7, ip
    521c:	40bb      	lsls	r3, r7
    521e:	4698      	mov	r8, r3
    5220:	0013      	movs	r3, r2
    5222:	4647      	mov	r7, r8
    5224:	40f3      	lsrs	r3, r6
    5226:	433b      	orrs	r3, r7
    5228:	4667      	mov	r7, ip
    522a:	40ba      	lsls	r2, r7
    522c:	1e57      	subs	r7, r2, #1
    522e:	41ba      	sbcs	r2, r7
    5230:	4313      	orrs	r3, r2
    5232:	0002      	movs	r2, r0
    5234:	40f2      	lsrs	r2, r6
    5236:	1aeb      	subs	r3, r5, r3
    5238:	429d      	cmp	r5, r3
    523a:	41b6      	sbcs	r6, r6
    523c:	001d      	movs	r5, r3
    523e:	1a8a      	subs	r2, r1, r2
    5240:	4276      	negs	r6, r6
    5242:	1b91      	subs	r1, r2, r6
    5244:	020b      	lsls	r3, r1, #8
    5246:	d531      	bpl.n	52ac <__aeabi_dadd+0x170>
    5248:	024a      	lsls	r2, r1, #9
    524a:	0a56      	lsrs	r6, r2, #9
    524c:	2e00      	cmp	r6, #0
    524e:	d100      	bne.n	5252 <__aeabi_dadd+0x116>
    5250:	e0b4      	b.n	53bc <__aeabi_dadd+0x280>
    5252:	0030      	movs	r0, r6
    5254:	f001 fe40 	bl	6ed8 <__clzsi2>
    5258:	0003      	movs	r3, r0
    525a:	3b08      	subs	r3, #8
    525c:	2b1f      	cmp	r3, #31
    525e:	dd00      	ble.n	5262 <__aeabi_dadd+0x126>
    5260:	e0b5      	b.n	53ce <__aeabi_dadd+0x292>
    5262:	2220      	movs	r2, #32
    5264:	0029      	movs	r1, r5
    5266:	1ad2      	subs	r2, r2, r3
    5268:	40d1      	lsrs	r1, r2
    526a:	409e      	lsls	r6, r3
    526c:	000a      	movs	r2, r1
    526e:	409d      	lsls	r5, r3
    5270:	4332      	orrs	r2, r6
    5272:	429c      	cmp	r4, r3
    5274:	dd00      	ble.n	5278 <__aeabi_dadd+0x13c>
    5276:	e0b1      	b.n	53dc <__aeabi_dadd+0x2a0>
    5278:	1b1c      	subs	r4, r3, r4
    527a:	1c63      	adds	r3, r4, #1
    527c:	2b1f      	cmp	r3, #31
    527e:	dd00      	ble.n	5282 <__aeabi_dadd+0x146>
    5280:	e0d5      	b.n	542e <__aeabi_dadd+0x2f2>
    5282:	2120      	movs	r1, #32
    5284:	0014      	movs	r4, r2
    5286:	0028      	movs	r0, r5
    5288:	1ac9      	subs	r1, r1, r3
    528a:	408c      	lsls	r4, r1
    528c:	40d8      	lsrs	r0, r3
    528e:	408d      	lsls	r5, r1
    5290:	4304      	orrs	r4, r0
    5292:	40da      	lsrs	r2, r3
    5294:	1e68      	subs	r0, r5, #1
    5296:	4185      	sbcs	r5, r0
    5298:	0011      	movs	r1, r2
    529a:	4325      	orrs	r5, r4
    529c:	2400      	movs	r4, #0
    529e:	e776      	b.n	518e <__aeabi_dadd+0x52>
    52a0:	4641      	mov	r1, r8
    52a2:	4331      	orrs	r1, r6
    52a4:	d100      	bne.n	52a8 <__aeabi_dadd+0x16c>
    52a6:	e234      	b.n	5712 <__aeabi_dadd+0x5d6>
    52a8:	0031      	movs	r1, r6
    52aa:	4645      	mov	r5, r8
    52ac:	076b      	lsls	r3, r5, #29
    52ae:	d000      	beq.n	52b2 <__aeabi_dadd+0x176>
    52b0:	e76f      	b.n	5192 <__aeabi_dadd+0x56>
    52b2:	4656      	mov	r6, sl
    52b4:	0748      	lsls	r0, r1, #29
    52b6:	08ed      	lsrs	r5, r5, #3
    52b8:	08c9      	lsrs	r1, r1, #3
    52ba:	4305      	orrs	r5, r0
    52bc:	4b86      	ldr	r3, [pc, #536]	; (54d8 <__aeabi_dadd+0x39c>)
    52be:	429c      	cmp	r4, r3
    52c0:	d035      	beq.n	532e <__aeabi_dadd+0x1f2>
    52c2:	030a      	lsls	r2, r1, #12
    52c4:	0564      	lsls	r4, r4, #21
    52c6:	0b12      	lsrs	r2, r2, #12
    52c8:	0d64      	lsrs	r4, r4, #21
    52ca:	e77f      	b.n	51cc <__aeabi_dadd+0x90>
    52cc:	4663      	mov	r3, ip
    52ce:	1ae3      	subs	r3, r4, r3
    52d0:	469b      	mov	fp, r3
    52d2:	2b00      	cmp	r3, #0
    52d4:	dc00      	bgt.n	52d8 <__aeabi_dadd+0x19c>
    52d6:	e08b      	b.n	53f0 <__aeabi_dadd+0x2b4>
    52d8:	4667      	mov	r7, ip
    52da:	2f00      	cmp	r7, #0
    52dc:	d03c      	beq.n	5358 <__aeabi_dadd+0x21c>
    52de:	4f7e      	ldr	r7, [pc, #504]	; (54d8 <__aeabi_dadd+0x39c>)
    52e0:	42bc      	cmp	r4, r7
    52e2:	d100      	bne.n	52e6 <__aeabi_dadd+0x1aa>
    52e4:	e753      	b.n	518e <__aeabi_dadd+0x52>
    52e6:	2780      	movs	r7, #128	; 0x80
    52e8:	043f      	lsls	r7, r7, #16
    52ea:	4338      	orrs	r0, r7
    52ec:	465b      	mov	r3, fp
    52ee:	2b38      	cmp	r3, #56	; 0x38
    52f0:	dc00      	bgt.n	52f4 <__aeabi_dadd+0x1b8>
    52f2:	e0f7      	b.n	54e4 <__aeabi_dadd+0x3a8>
    52f4:	4302      	orrs	r2, r0
    52f6:	1e50      	subs	r0, r2, #1
    52f8:	4182      	sbcs	r2, r0
    52fa:	2000      	movs	r0, #0
    52fc:	b2d2      	uxtb	r2, r2
    52fe:	1953      	adds	r3, r2, r5
    5300:	1842      	adds	r2, r0, r1
    5302:	42ab      	cmp	r3, r5
    5304:	4189      	sbcs	r1, r1
    5306:	001d      	movs	r5, r3
    5308:	4249      	negs	r1, r1
    530a:	1889      	adds	r1, r1, r2
    530c:	020b      	lsls	r3, r1, #8
    530e:	d5cd      	bpl.n	52ac <__aeabi_dadd+0x170>
    5310:	4b71      	ldr	r3, [pc, #452]	; (54d8 <__aeabi_dadd+0x39c>)
    5312:	3401      	adds	r4, #1
    5314:	429c      	cmp	r4, r3
    5316:	d100      	bne.n	531a <__aeabi_dadd+0x1de>
    5318:	e13d      	b.n	5596 <__aeabi_dadd+0x45a>
    531a:	2001      	movs	r0, #1
    531c:	4a6f      	ldr	r2, [pc, #444]	; (54dc <__aeabi_dadd+0x3a0>)
    531e:	086b      	lsrs	r3, r5, #1
    5320:	400a      	ands	r2, r1
    5322:	4028      	ands	r0, r5
    5324:	4318      	orrs	r0, r3
    5326:	07d5      	lsls	r5, r2, #31
    5328:	4305      	orrs	r5, r0
    532a:	0851      	lsrs	r1, r2, #1
    532c:	e72f      	b.n	518e <__aeabi_dadd+0x52>
    532e:	002b      	movs	r3, r5
    5330:	430b      	orrs	r3, r1
    5332:	d100      	bne.n	5336 <__aeabi_dadd+0x1fa>
    5334:	e1cb      	b.n	56ce <__aeabi_dadd+0x592>
    5336:	2380      	movs	r3, #128	; 0x80
    5338:	031b      	lsls	r3, r3, #12
    533a:	430b      	orrs	r3, r1
    533c:	031a      	lsls	r2, r3, #12
    533e:	0b12      	lsrs	r2, r2, #12
    5340:	e744      	b.n	51cc <__aeabi_dadd+0x90>
    5342:	3e01      	subs	r6, #1
    5344:	2e00      	cmp	r6, #0
    5346:	d16d      	bne.n	5424 <__aeabi_dadd+0x2e8>
    5348:	1aae      	subs	r6, r5, r2
    534a:	42b5      	cmp	r5, r6
    534c:	419b      	sbcs	r3, r3
    534e:	1a09      	subs	r1, r1, r0
    5350:	425b      	negs	r3, r3
    5352:	1ac9      	subs	r1, r1, r3
    5354:	0035      	movs	r5, r6
    5356:	e775      	b.n	5244 <__aeabi_dadd+0x108>
    5358:	0007      	movs	r7, r0
    535a:	4317      	orrs	r7, r2
    535c:	d100      	bne.n	5360 <__aeabi_dadd+0x224>
    535e:	e716      	b.n	518e <__aeabi_dadd+0x52>
    5360:	2301      	movs	r3, #1
    5362:	425b      	negs	r3, r3
    5364:	469c      	mov	ip, r3
    5366:	44e3      	add	fp, ip
    5368:	465b      	mov	r3, fp
    536a:	2b00      	cmp	r3, #0
    536c:	d000      	beq.n	5370 <__aeabi_dadd+0x234>
    536e:	e0e0      	b.n	5532 <__aeabi_dadd+0x3f6>
    5370:	18aa      	adds	r2, r5, r2
    5372:	42aa      	cmp	r2, r5
    5374:	419b      	sbcs	r3, r3
    5376:	1809      	adds	r1, r1, r0
    5378:	425b      	negs	r3, r3
    537a:	1859      	adds	r1, r3, r1
    537c:	0015      	movs	r5, r2
    537e:	e7c5      	b.n	530c <__aeabi_dadd+0x1d0>
    5380:	2e00      	cmp	r6, #0
    5382:	d175      	bne.n	5470 <__aeabi_dadd+0x334>
    5384:	1c66      	adds	r6, r4, #1
    5386:	0576      	lsls	r6, r6, #21
    5388:	0d76      	lsrs	r6, r6, #21
    538a:	2e01      	cmp	r6, #1
    538c:	dc00      	bgt.n	5390 <__aeabi_dadd+0x254>
    538e:	e0f3      	b.n	5578 <__aeabi_dadd+0x43c>
    5390:	1aae      	subs	r6, r5, r2
    5392:	46b0      	mov	r8, r6
    5394:	4545      	cmp	r5, r8
    5396:	41bf      	sbcs	r7, r7
    5398:	1a0e      	subs	r6, r1, r0
    539a:	427f      	negs	r7, r7
    539c:	1bf6      	subs	r6, r6, r7
    539e:	0237      	lsls	r7, r6, #8
    53a0:	d400      	bmi.n	53a4 <__aeabi_dadd+0x268>
    53a2:	e08f      	b.n	54c4 <__aeabi_dadd+0x388>
    53a4:	1b55      	subs	r5, r2, r5
    53a6:	42aa      	cmp	r2, r5
    53a8:	41b6      	sbcs	r6, r6
    53aa:	1a41      	subs	r1, r0, r1
    53ac:	4276      	negs	r6, r6
    53ae:	1b8e      	subs	r6, r1, r6
    53b0:	469a      	mov	sl, r3
    53b2:	e74b      	b.n	524c <__aeabi_dadd+0x110>
    53b4:	4656      	mov	r6, sl
    53b6:	2200      	movs	r2, #0
    53b8:	2500      	movs	r5, #0
    53ba:	e707      	b.n	51cc <__aeabi_dadd+0x90>
    53bc:	0028      	movs	r0, r5
    53be:	f001 fd8b 	bl	6ed8 <__clzsi2>
    53c2:	3020      	adds	r0, #32
    53c4:	0003      	movs	r3, r0
    53c6:	3b08      	subs	r3, #8
    53c8:	2b1f      	cmp	r3, #31
    53ca:	dc00      	bgt.n	53ce <__aeabi_dadd+0x292>
    53cc:	e749      	b.n	5262 <__aeabi_dadd+0x126>
    53ce:	002a      	movs	r2, r5
    53d0:	3828      	subs	r0, #40	; 0x28
    53d2:	4082      	lsls	r2, r0
    53d4:	2500      	movs	r5, #0
    53d6:	429c      	cmp	r4, r3
    53d8:	dc00      	bgt.n	53dc <__aeabi_dadd+0x2a0>
    53da:	e74d      	b.n	5278 <__aeabi_dadd+0x13c>
    53dc:	493f      	ldr	r1, [pc, #252]	; (54dc <__aeabi_dadd+0x3a0>)
    53de:	1ae4      	subs	r4, r4, r3
    53e0:	4011      	ands	r1, r2
    53e2:	e6d4      	b.n	518e <__aeabi_dadd+0x52>
    53e4:	4302      	orrs	r2, r0
    53e6:	1e50      	subs	r0, r2, #1
    53e8:	4182      	sbcs	r2, r0
    53ea:	b2d3      	uxtb	r3, r2
    53ec:	2200      	movs	r2, #0
    53ee:	e722      	b.n	5236 <__aeabi_dadd+0xfa>
    53f0:	2b00      	cmp	r3, #0
    53f2:	d000      	beq.n	53f6 <__aeabi_dadd+0x2ba>
    53f4:	e0f3      	b.n	55de <__aeabi_dadd+0x4a2>
    53f6:	1c63      	adds	r3, r4, #1
    53f8:	469c      	mov	ip, r3
    53fa:	055b      	lsls	r3, r3, #21
    53fc:	0d5b      	lsrs	r3, r3, #21
    53fe:	2b01      	cmp	r3, #1
    5400:	dc00      	bgt.n	5404 <__aeabi_dadd+0x2c8>
    5402:	e09f      	b.n	5544 <__aeabi_dadd+0x408>
    5404:	4b34      	ldr	r3, [pc, #208]	; (54d8 <__aeabi_dadd+0x39c>)
    5406:	459c      	cmp	ip, r3
    5408:	d100      	bne.n	540c <__aeabi_dadd+0x2d0>
    540a:	e0c3      	b.n	5594 <__aeabi_dadd+0x458>
    540c:	18aa      	adds	r2, r5, r2
    540e:	1809      	adds	r1, r1, r0
    5410:	42aa      	cmp	r2, r5
    5412:	4180      	sbcs	r0, r0
    5414:	4240      	negs	r0, r0
    5416:	1841      	adds	r1, r0, r1
    5418:	07cd      	lsls	r5, r1, #31
    541a:	0852      	lsrs	r2, r2, #1
    541c:	4315      	orrs	r5, r2
    541e:	0849      	lsrs	r1, r1, #1
    5420:	4664      	mov	r4, ip
    5422:	e6b4      	b.n	518e <__aeabi_dadd+0x52>
    5424:	4b2c      	ldr	r3, [pc, #176]	; (54d8 <__aeabi_dadd+0x39c>)
    5426:	429c      	cmp	r4, r3
    5428:	d000      	beq.n	542c <__aeabi_dadd+0x2f0>
    542a:	e6ec      	b.n	5206 <__aeabi_dadd+0xca>
    542c:	e6af      	b.n	518e <__aeabi_dadd+0x52>
    542e:	0011      	movs	r1, r2
    5430:	3c1f      	subs	r4, #31
    5432:	40e1      	lsrs	r1, r4
    5434:	000c      	movs	r4, r1
    5436:	2b20      	cmp	r3, #32
    5438:	d100      	bne.n	543c <__aeabi_dadd+0x300>
    543a:	e07f      	b.n	553c <__aeabi_dadd+0x400>
    543c:	2140      	movs	r1, #64	; 0x40
    543e:	1acb      	subs	r3, r1, r3
    5440:	409a      	lsls	r2, r3
    5442:	4315      	orrs	r5, r2
    5444:	1e6a      	subs	r2, r5, #1
    5446:	4195      	sbcs	r5, r2
    5448:	2100      	movs	r1, #0
    544a:	4325      	orrs	r5, r4
    544c:	2400      	movs	r4, #0
    544e:	e72d      	b.n	52ac <__aeabi_dadd+0x170>
    5450:	0033      	movs	r3, r6
    5452:	0007      	movs	r7, r0
    5454:	3b20      	subs	r3, #32
    5456:	40df      	lsrs	r7, r3
    5458:	003b      	movs	r3, r7
    545a:	2e20      	cmp	r6, #32
    545c:	d070      	beq.n	5540 <__aeabi_dadd+0x404>
    545e:	2740      	movs	r7, #64	; 0x40
    5460:	1bbe      	subs	r6, r7, r6
    5462:	40b0      	lsls	r0, r6
    5464:	4302      	orrs	r2, r0
    5466:	1e50      	subs	r0, r2, #1
    5468:	4182      	sbcs	r2, r0
    546a:	4313      	orrs	r3, r2
    546c:	2200      	movs	r2, #0
    546e:	e6e2      	b.n	5236 <__aeabi_dadd+0xfa>
    5470:	2c00      	cmp	r4, #0
    5472:	d04f      	beq.n	5514 <__aeabi_dadd+0x3d8>
    5474:	4c18      	ldr	r4, [pc, #96]	; (54d8 <__aeabi_dadd+0x39c>)
    5476:	45a4      	cmp	ip, r4
    5478:	d100      	bne.n	547c <__aeabi_dadd+0x340>
    547a:	e0ab      	b.n	55d4 <__aeabi_dadd+0x498>
    547c:	2480      	movs	r4, #128	; 0x80
    547e:	0424      	lsls	r4, r4, #16
    5480:	4276      	negs	r6, r6
    5482:	4321      	orrs	r1, r4
    5484:	2e38      	cmp	r6, #56	; 0x38
    5486:	dd00      	ble.n	548a <__aeabi_dadd+0x34e>
    5488:	e0df      	b.n	564a <__aeabi_dadd+0x50e>
    548a:	2e1f      	cmp	r6, #31
    548c:	dd00      	ble.n	5490 <__aeabi_dadd+0x354>
    548e:	e143      	b.n	5718 <__aeabi_dadd+0x5dc>
    5490:	2720      	movs	r7, #32
    5492:	1bbc      	subs	r4, r7, r6
    5494:	46a1      	mov	r9, r4
    5496:	000c      	movs	r4, r1
    5498:	464f      	mov	r7, r9
    549a:	40bc      	lsls	r4, r7
    549c:	46a0      	mov	r8, r4
    549e:	002c      	movs	r4, r5
    54a0:	4647      	mov	r7, r8
    54a2:	40f4      	lsrs	r4, r6
    54a4:	433c      	orrs	r4, r7
    54a6:	464f      	mov	r7, r9
    54a8:	40bd      	lsls	r5, r7
    54aa:	1e6f      	subs	r7, r5, #1
    54ac:	41bd      	sbcs	r5, r7
    54ae:	40f1      	lsrs	r1, r6
    54b0:	432c      	orrs	r4, r5
    54b2:	1b15      	subs	r5, r2, r4
    54b4:	42aa      	cmp	r2, r5
    54b6:	4192      	sbcs	r2, r2
    54b8:	1a41      	subs	r1, r0, r1
    54ba:	4252      	negs	r2, r2
    54bc:	1a89      	subs	r1, r1, r2
    54be:	4664      	mov	r4, ip
    54c0:	469a      	mov	sl, r3
    54c2:	e6bf      	b.n	5244 <__aeabi_dadd+0x108>
    54c4:	4641      	mov	r1, r8
    54c6:	4645      	mov	r5, r8
    54c8:	4331      	orrs	r1, r6
    54ca:	d000      	beq.n	54ce <__aeabi_dadd+0x392>
    54cc:	e6be      	b.n	524c <__aeabi_dadd+0x110>
    54ce:	2600      	movs	r6, #0
    54d0:	2400      	movs	r4, #0
    54d2:	2500      	movs	r5, #0
    54d4:	e6f2      	b.n	52bc <__aeabi_dadd+0x180>
    54d6:	46c0      	nop			; (mov r8, r8)
    54d8:	000007ff 	.word	0x000007ff
    54dc:	ff7fffff 	.word	0xff7fffff
    54e0:	800fffff 	.word	0x800fffff
    54e4:	2b1f      	cmp	r3, #31
    54e6:	dc59      	bgt.n	559c <__aeabi_dadd+0x460>
    54e8:	2720      	movs	r7, #32
    54ea:	1aff      	subs	r7, r7, r3
    54ec:	46bc      	mov	ip, r7
    54ee:	0007      	movs	r7, r0
    54f0:	4663      	mov	r3, ip
    54f2:	409f      	lsls	r7, r3
    54f4:	465b      	mov	r3, fp
    54f6:	46b9      	mov	r9, r7
    54f8:	0017      	movs	r7, r2
    54fa:	40df      	lsrs	r7, r3
    54fc:	46b8      	mov	r8, r7
    54fe:	464f      	mov	r7, r9
    5500:	4643      	mov	r3, r8
    5502:	431f      	orrs	r7, r3
    5504:	4663      	mov	r3, ip
    5506:	409a      	lsls	r2, r3
    5508:	1e53      	subs	r3, r2, #1
    550a:	419a      	sbcs	r2, r3
    550c:	465b      	mov	r3, fp
    550e:	433a      	orrs	r2, r7
    5510:	40d8      	lsrs	r0, r3
    5512:	e6f4      	b.n	52fe <__aeabi_dadd+0x1c2>
    5514:	000c      	movs	r4, r1
    5516:	432c      	orrs	r4, r5
    5518:	d05c      	beq.n	55d4 <__aeabi_dadd+0x498>
    551a:	43f6      	mvns	r6, r6
    551c:	2e00      	cmp	r6, #0
    551e:	d155      	bne.n	55cc <__aeabi_dadd+0x490>
    5520:	1b55      	subs	r5, r2, r5
    5522:	42aa      	cmp	r2, r5
    5524:	41a4      	sbcs	r4, r4
    5526:	1a41      	subs	r1, r0, r1
    5528:	4264      	negs	r4, r4
    552a:	1b09      	subs	r1, r1, r4
    552c:	469a      	mov	sl, r3
    552e:	4664      	mov	r4, ip
    5530:	e688      	b.n	5244 <__aeabi_dadd+0x108>
    5532:	4f96      	ldr	r7, [pc, #600]	; (578c <__aeabi_dadd+0x650>)
    5534:	42bc      	cmp	r4, r7
    5536:	d000      	beq.n	553a <__aeabi_dadd+0x3fe>
    5538:	e6d8      	b.n	52ec <__aeabi_dadd+0x1b0>
    553a:	e628      	b.n	518e <__aeabi_dadd+0x52>
    553c:	2200      	movs	r2, #0
    553e:	e780      	b.n	5442 <__aeabi_dadd+0x306>
    5540:	2000      	movs	r0, #0
    5542:	e78f      	b.n	5464 <__aeabi_dadd+0x328>
    5544:	000b      	movs	r3, r1
    5546:	432b      	orrs	r3, r5
    5548:	2c00      	cmp	r4, #0
    554a:	d000      	beq.n	554e <__aeabi_dadd+0x412>
    554c:	e0c2      	b.n	56d4 <__aeabi_dadd+0x598>
    554e:	2b00      	cmp	r3, #0
    5550:	d100      	bne.n	5554 <__aeabi_dadd+0x418>
    5552:	e101      	b.n	5758 <__aeabi_dadd+0x61c>
    5554:	0003      	movs	r3, r0
    5556:	4313      	orrs	r3, r2
    5558:	d100      	bne.n	555c <__aeabi_dadd+0x420>
    555a:	e618      	b.n	518e <__aeabi_dadd+0x52>
    555c:	18ab      	adds	r3, r5, r2
    555e:	42ab      	cmp	r3, r5
    5560:	41b6      	sbcs	r6, r6
    5562:	1809      	adds	r1, r1, r0
    5564:	4276      	negs	r6, r6
    5566:	1871      	adds	r1, r6, r1
    5568:	020a      	lsls	r2, r1, #8
    556a:	d400      	bmi.n	556e <__aeabi_dadd+0x432>
    556c:	e109      	b.n	5782 <__aeabi_dadd+0x646>
    556e:	4a88      	ldr	r2, [pc, #544]	; (5790 <__aeabi_dadd+0x654>)
    5570:	001d      	movs	r5, r3
    5572:	4011      	ands	r1, r2
    5574:	4664      	mov	r4, ip
    5576:	e60a      	b.n	518e <__aeabi_dadd+0x52>
    5578:	2c00      	cmp	r4, #0
    557a:	d15b      	bne.n	5634 <__aeabi_dadd+0x4f8>
    557c:	000e      	movs	r6, r1
    557e:	432e      	orrs	r6, r5
    5580:	d000      	beq.n	5584 <__aeabi_dadd+0x448>
    5582:	e08a      	b.n	569a <__aeabi_dadd+0x55e>
    5584:	0001      	movs	r1, r0
    5586:	4311      	orrs	r1, r2
    5588:	d100      	bne.n	558c <__aeabi_dadd+0x450>
    558a:	e0c2      	b.n	5712 <__aeabi_dadd+0x5d6>
    558c:	0001      	movs	r1, r0
    558e:	0015      	movs	r5, r2
    5590:	469a      	mov	sl, r3
    5592:	e5fc      	b.n	518e <__aeabi_dadd+0x52>
    5594:	4664      	mov	r4, ip
    5596:	2100      	movs	r1, #0
    5598:	2500      	movs	r5, #0
    559a:	e68f      	b.n	52bc <__aeabi_dadd+0x180>
    559c:	2320      	movs	r3, #32
    559e:	425b      	negs	r3, r3
    55a0:	469c      	mov	ip, r3
    55a2:	44dc      	add	ip, fp
    55a4:	4663      	mov	r3, ip
    55a6:	0007      	movs	r7, r0
    55a8:	40df      	lsrs	r7, r3
    55aa:	465b      	mov	r3, fp
    55ac:	46bc      	mov	ip, r7
    55ae:	2b20      	cmp	r3, #32
    55b0:	d100      	bne.n	55b4 <__aeabi_dadd+0x478>
    55b2:	e0ac      	b.n	570e <__aeabi_dadd+0x5d2>
    55b4:	2340      	movs	r3, #64	; 0x40
    55b6:	465f      	mov	r7, fp
    55b8:	1bdb      	subs	r3, r3, r7
    55ba:	4098      	lsls	r0, r3
    55bc:	4302      	orrs	r2, r0
    55be:	1e50      	subs	r0, r2, #1
    55c0:	4182      	sbcs	r2, r0
    55c2:	4663      	mov	r3, ip
    55c4:	4313      	orrs	r3, r2
    55c6:	001a      	movs	r2, r3
    55c8:	2000      	movs	r0, #0
    55ca:	e698      	b.n	52fe <__aeabi_dadd+0x1c2>
    55cc:	4c6f      	ldr	r4, [pc, #444]	; (578c <__aeabi_dadd+0x650>)
    55ce:	45a4      	cmp	ip, r4
    55d0:	d000      	beq.n	55d4 <__aeabi_dadd+0x498>
    55d2:	e757      	b.n	5484 <__aeabi_dadd+0x348>
    55d4:	0001      	movs	r1, r0
    55d6:	0015      	movs	r5, r2
    55d8:	4664      	mov	r4, ip
    55da:	469a      	mov	sl, r3
    55dc:	e5d7      	b.n	518e <__aeabi_dadd+0x52>
    55de:	2c00      	cmp	r4, #0
    55e0:	d139      	bne.n	5656 <__aeabi_dadd+0x51a>
    55e2:	000c      	movs	r4, r1
    55e4:	432c      	orrs	r4, r5
    55e6:	d06e      	beq.n	56c6 <__aeabi_dadd+0x58a>
    55e8:	43db      	mvns	r3, r3
    55ea:	2b00      	cmp	r3, #0
    55ec:	d01a      	beq.n	5624 <__aeabi_dadd+0x4e8>
    55ee:	4c67      	ldr	r4, [pc, #412]	; (578c <__aeabi_dadd+0x650>)
    55f0:	45a4      	cmp	ip, r4
    55f2:	d068      	beq.n	56c6 <__aeabi_dadd+0x58a>
    55f4:	2b38      	cmp	r3, #56	; 0x38
    55f6:	dd00      	ble.n	55fa <__aeabi_dadd+0x4be>
    55f8:	e0a4      	b.n	5744 <__aeabi_dadd+0x608>
    55fa:	2b1f      	cmp	r3, #31
    55fc:	dd00      	ble.n	5600 <__aeabi_dadd+0x4c4>
    55fe:	e0ae      	b.n	575e <__aeabi_dadd+0x622>
    5600:	2420      	movs	r4, #32
    5602:	000f      	movs	r7, r1
    5604:	1ae4      	subs	r4, r4, r3
    5606:	40a7      	lsls	r7, r4
    5608:	46b9      	mov	r9, r7
    560a:	002f      	movs	r7, r5
    560c:	40df      	lsrs	r7, r3
    560e:	46b8      	mov	r8, r7
    5610:	46a3      	mov	fp, r4
    5612:	464f      	mov	r7, r9
    5614:	4644      	mov	r4, r8
    5616:	4327      	orrs	r7, r4
    5618:	465c      	mov	r4, fp
    561a:	40a5      	lsls	r5, r4
    561c:	1e6c      	subs	r4, r5, #1
    561e:	41a5      	sbcs	r5, r4
    5620:	40d9      	lsrs	r1, r3
    5622:	433d      	orrs	r5, r7
    5624:	18ad      	adds	r5, r5, r2
    5626:	4295      	cmp	r5, r2
    5628:	419b      	sbcs	r3, r3
    562a:	1809      	adds	r1, r1, r0
    562c:	425b      	negs	r3, r3
    562e:	1859      	adds	r1, r3, r1
    5630:	4664      	mov	r4, ip
    5632:	e66b      	b.n	530c <__aeabi_dadd+0x1d0>
    5634:	000c      	movs	r4, r1
    5636:	432c      	orrs	r4, r5
    5638:	d115      	bne.n	5666 <__aeabi_dadd+0x52a>
    563a:	0001      	movs	r1, r0
    563c:	4311      	orrs	r1, r2
    563e:	d07b      	beq.n	5738 <__aeabi_dadd+0x5fc>
    5640:	0001      	movs	r1, r0
    5642:	0015      	movs	r5, r2
    5644:	469a      	mov	sl, r3
    5646:	4c51      	ldr	r4, [pc, #324]	; (578c <__aeabi_dadd+0x650>)
    5648:	e5a1      	b.n	518e <__aeabi_dadd+0x52>
    564a:	430d      	orrs	r5, r1
    564c:	1e69      	subs	r1, r5, #1
    564e:	418d      	sbcs	r5, r1
    5650:	2100      	movs	r1, #0
    5652:	b2ec      	uxtb	r4, r5
    5654:	e72d      	b.n	54b2 <__aeabi_dadd+0x376>
    5656:	4c4d      	ldr	r4, [pc, #308]	; (578c <__aeabi_dadd+0x650>)
    5658:	45a4      	cmp	ip, r4
    565a:	d034      	beq.n	56c6 <__aeabi_dadd+0x58a>
    565c:	2480      	movs	r4, #128	; 0x80
    565e:	0424      	lsls	r4, r4, #16
    5660:	425b      	negs	r3, r3
    5662:	4321      	orrs	r1, r4
    5664:	e7c6      	b.n	55f4 <__aeabi_dadd+0x4b8>
    5666:	0004      	movs	r4, r0
    5668:	4314      	orrs	r4, r2
    566a:	d04e      	beq.n	570a <__aeabi_dadd+0x5ce>
    566c:	08ed      	lsrs	r5, r5, #3
    566e:	074c      	lsls	r4, r1, #29
    5670:	432c      	orrs	r4, r5
    5672:	2580      	movs	r5, #128	; 0x80
    5674:	08c9      	lsrs	r1, r1, #3
    5676:	032d      	lsls	r5, r5, #12
    5678:	4229      	tst	r1, r5
    567a:	d008      	beq.n	568e <__aeabi_dadd+0x552>
    567c:	08c6      	lsrs	r6, r0, #3
    567e:	422e      	tst	r6, r5
    5680:	d105      	bne.n	568e <__aeabi_dadd+0x552>
    5682:	08d2      	lsrs	r2, r2, #3
    5684:	0741      	lsls	r1, r0, #29
    5686:	4311      	orrs	r1, r2
    5688:	000c      	movs	r4, r1
    568a:	469a      	mov	sl, r3
    568c:	0031      	movs	r1, r6
    568e:	0f62      	lsrs	r2, r4, #29
    5690:	00c9      	lsls	r1, r1, #3
    5692:	00e5      	lsls	r5, r4, #3
    5694:	4311      	orrs	r1, r2
    5696:	4c3d      	ldr	r4, [pc, #244]	; (578c <__aeabi_dadd+0x650>)
    5698:	e579      	b.n	518e <__aeabi_dadd+0x52>
    569a:	0006      	movs	r6, r0
    569c:	4316      	orrs	r6, r2
    569e:	d100      	bne.n	56a2 <__aeabi_dadd+0x566>
    56a0:	e575      	b.n	518e <__aeabi_dadd+0x52>
    56a2:	1aae      	subs	r6, r5, r2
    56a4:	46b0      	mov	r8, r6
    56a6:	4545      	cmp	r5, r8
    56a8:	41bf      	sbcs	r7, r7
    56aa:	1a0e      	subs	r6, r1, r0
    56ac:	427f      	negs	r7, r7
    56ae:	1bf6      	subs	r6, r6, r7
    56b0:	0237      	lsls	r7, r6, #8
    56b2:	d400      	bmi.n	56b6 <__aeabi_dadd+0x57a>
    56b4:	e5f4      	b.n	52a0 <__aeabi_dadd+0x164>
    56b6:	1b55      	subs	r5, r2, r5
    56b8:	42aa      	cmp	r2, r5
    56ba:	41b6      	sbcs	r6, r6
    56bc:	1a41      	subs	r1, r0, r1
    56be:	4276      	negs	r6, r6
    56c0:	1b89      	subs	r1, r1, r6
    56c2:	469a      	mov	sl, r3
    56c4:	e563      	b.n	518e <__aeabi_dadd+0x52>
    56c6:	0001      	movs	r1, r0
    56c8:	0015      	movs	r5, r2
    56ca:	4664      	mov	r4, ip
    56cc:	e55f      	b.n	518e <__aeabi_dadd+0x52>
    56ce:	2200      	movs	r2, #0
    56d0:	2500      	movs	r5, #0
    56d2:	e57b      	b.n	51cc <__aeabi_dadd+0x90>
    56d4:	2b00      	cmp	r3, #0
    56d6:	d03b      	beq.n	5750 <__aeabi_dadd+0x614>
    56d8:	0003      	movs	r3, r0
    56da:	4313      	orrs	r3, r2
    56dc:	d015      	beq.n	570a <__aeabi_dadd+0x5ce>
    56de:	08ed      	lsrs	r5, r5, #3
    56e0:	074b      	lsls	r3, r1, #29
    56e2:	432b      	orrs	r3, r5
    56e4:	2580      	movs	r5, #128	; 0x80
    56e6:	08c9      	lsrs	r1, r1, #3
    56e8:	032d      	lsls	r5, r5, #12
    56ea:	4229      	tst	r1, r5
    56ec:	d007      	beq.n	56fe <__aeabi_dadd+0x5c2>
    56ee:	08c4      	lsrs	r4, r0, #3
    56f0:	422c      	tst	r4, r5
    56f2:	d104      	bne.n	56fe <__aeabi_dadd+0x5c2>
    56f4:	0741      	lsls	r1, r0, #29
    56f6:	000b      	movs	r3, r1
    56f8:	0021      	movs	r1, r4
    56fa:	08d2      	lsrs	r2, r2, #3
    56fc:	4313      	orrs	r3, r2
    56fe:	00c9      	lsls	r1, r1, #3
    5700:	0f5a      	lsrs	r2, r3, #29
    5702:	4311      	orrs	r1, r2
    5704:	00dd      	lsls	r5, r3, #3
    5706:	4c21      	ldr	r4, [pc, #132]	; (578c <__aeabi_dadd+0x650>)
    5708:	e541      	b.n	518e <__aeabi_dadd+0x52>
    570a:	4c20      	ldr	r4, [pc, #128]	; (578c <__aeabi_dadd+0x650>)
    570c:	e53f      	b.n	518e <__aeabi_dadd+0x52>
    570e:	2000      	movs	r0, #0
    5710:	e754      	b.n	55bc <__aeabi_dadd+0x480>
    5712:	2600      	movs	r6, #0
    5714:	2500      	movs	r5, #0
    5716:	e5d1      	b.n	52bc <__aeabi_dadd+0x180>
    5718:	0034      	movs	r4, r6
    571a:	000f      	movs	r7, r1
    571c:	3c20      	subs	r4, #32
    571e:	40e7      	lsrs	r7, r4
    5720:	003c      	movs	r4, r7
    5722:	2e20      	cmp	r6, #32
    5724:	d02b      	beq.n	577e <__aeabi_dadd+0x642>
    5726:	2740      	movs	r7, #64	; 0x40
    5728:	1bbe      	subs	r6, r7, r6
    572a:	40b1      	lsls	r1, r6
    572c:	430d      	orrs	r5, r1
    572e:	1e69      	subs	r1, r5, #1
    5730:	418d      	sbcs	r5, r1
    5732:	2100      	movs	r1, #0
    5734:	432c      	orrs	r4, r5
    5736:	e6bc      	b.n	54b2 <__aeabi_dadd+0x376>
    5738:	2180      	movs	r1, #128	; 0x80
    573a:	2600      	movs	r6, #0
    573c:	0309      	lsls	r1, r1, #12
    573e:	4c13      	ldr	r4, [pc, #76]	; (578c <__aeabi_dadd+0x650>)
    5740:	2500      	movs	r5, #0
    5742:	e5bb      	b.n	52bc <__aeabi_dadd+0x180>
    5744:	430d      	orrs	r5, r1
    5746:	1e69      	subs	r1, r5, #1
    5748:	418d      	sbcs	r5, r1
    574a:	2100      	movs	r1, #0
    574c:	b2ed      	uxtb	r5, r5
    574e:	e769      	b.n	5624 <__aeabi_dadd+0x4e8>
    5750:	0001      	movs	r1, r0
    5752:	0015      	movs	r5, r2
    5754:	4c0d      	ldr	r4, [pc, #52]	; (578c <__aeabi_dadd+0x650>)
    5756:	e51a      	b.n	518e <__aeabi_dadd+0x52>
    5758:	0001      	movs	r1, r0
    575a:	0015      	movs	r5, r2
    575c:	e517      	b.n	518e <__aeabi_dadd+0x52>
    575e:	001c      	movs	r4, r3
    5760:	000f      	movs	r7, r1
    5762:	3c20      	subs	r4, #32
    5764:	40e7      	lsrs	r7, r4
    5766:	003c      	movs	r4, r7
    5768:	2b20      	cmp	r3, #32
    576a:	d00c      	beq.n	5786 <__aeabi_dadd+0x64a>
    576c:	2740      	movs	r7, #64	; 0x40
    576e:	1afb      	subs	r3, r7, r3
    5770:	4099      	lsls	r1, r3
    5772:	430d      	orrs	r5, r1
    5774:	1e69      	subs	r1, r5, #1
    5776:	418d      	sbcs	r5, r1
    5778:	2100      	movs	r1, #0
    577a:	4325      	orrs	r5, r4
    577c:	e752      	b.n	5624 <__aeabi_dadd+0x4e8>
    577e:	2100      	movs	r1, #0
    5780:	e7d4      	b.n	572c <__aeabi_dadd+0x5f0>
    5782:	001d      	movs	r5, r3
    5784:	e592      	b.n	52ac <__aeabi_dadd+0x170>
    5786:	2100      	movs	r1, #0
    5788:	e7f3      	b.n	5772 <__aeabi_dadd+0x636>
    578a:	46c0      	nop			; (mov r8, r8)
    578c:	000007ff 	.word	0x000007ff
    5790:	ff7fffff 	.word	0xff7fffff

00005794 <__aeabi_ddiv>:
    5794:	b5f0      	push	{r4, r5, r6, r7, lr}
    5796:	4656      	mov	r6, sl
    5798:	464d      	mov	r5, r9
    579a:	4644      	mov	r4, r8
    579c:	465f      	mov	r7, fp
    579e:	b4f0      	push	{r4, r5, r6, r7}
    57a0:	001d      	movs	r5, r3
    57a2:	030e      	lsls	r6, r1, #12
    57a4:	004c      	lsls	r4, r1, #1
    57a6:	0fcb      	lsrs	r3, r1, #31
    57a8:	b087      	sub	sp, #28
    57aa:	0007      	movs	r7, r0
    57ac:	4692      	mov	sl, r2
    57ae:	4681      	mov	r9, r0
    57b0:	0b36      	lsrs	r6, r6, #12
    57b2:	0d64      	lsrs	r4, r4, #21
    57b4:	4698      	mov	r8, r3
    57b6:	d06a      	beq.n	588e <__aeabi_ddiv+0xfa>
    57b8:	4b6d      	ldr	r3, [pc, #436]	; (5970 <__aeabi_ddiv+0x1dc>)
    57ba:	429c      	cmp	r4, r3
    57bc:	d035      	beq.n	582a <__aeabi_ddiv+0x96>
    57be:	2280      	movs	r2, #128	; 0x80
    57c0:	0f43      	lsrs	r3, r0, #29
    57c2:	0412      	lsls	r2, r2, #16
    57c4:	4313      	orrs	r3, r2
    57c6:	00f6      	lsls	r6, r6, #3
    57c8:	431e      	orrs	r6, r3
    57ca:	00c3      	lsls	r3, r0, #3
    57cc:	4699      	mov	r9, r3
    57ce:	4b69      	ldr	r3, [pc, #420]	; (5974 <__aeabi_ddiv+0x1e0>)
    57d0:	2700      	movs	r7, #0
    57d2:	469c      	mov	ip, r3
    57d4:	2300      	movs	r3, #0
    57d6:	4464      	add	r4, ip
    57d8:	9302      	str	r3, [sp, #8]
    57da:	032b      	lsls	r3, r5, #12
    57dc:	0068      	lsls	r0, r5, #1
    57de:	0b1b      	lsrs	r3, r3, #12
    57e0:	0fed      	lsrs	r5, r5, #31
    57e2:	4651      	mov	r1, sl
    57e4:	469b      	mov	fp, r3
    57e6:	0d40      	lsrs	r0, r0, #21
    57e8:	9500      	str	r5, [sp, #0]
    57ea:	d100      	bne.n	57ee <__aeabi_ddiv+0x5a>
    57ec:	e078      	b.n	58e0 <__aeabi_ddiv+0x14c>
    57ee:	4b60      	ldr	r3, [pc, #384]	; (5970 <__aeabi_ddiv+0x1dc>)
    57f0:	4298      	cmp	r0, r3
    57f2:	d06c      	beq.n	58ce <__aeabi_ddiv+0x13a>
    57f4:	465b      	mov	r3, fp
    57f6:	00da      	lsls	r2, r3, #3
    57f8:	0f4b      	lsrs	r3, r1, #29
    57fa:	2180      	movs	r1, #128	; 0x80
    57fc:	0409      	lsls	r1, r1, #16
    57fe:	430b      	orrs	r3, r1
    5800:	4313      	orrs	r3, r2
    5802:	469b      	mov	fp, r3
    5804:	4653      	mov	r3, sl
    5806:	00d9      	lsls	r1, r3, #3
    5808:	4b5a      	ldr	r3, [pc, #360]	; (5974 <__aeabi_ddiv+0x1e0>)
    580a:	469c      	mov	ip, r3
    580c:	2300      	movs	r3, #0
    580e:	4460      	add	r0, ip
    5810:	4642      	mov	r2, r8
    5812:	1a20      	subs	r0, r4, r0
    5814:	406a      	eors	r2, r5
    5816:	4692      	mov	sl, r2
    5818:	9001      	str	r0, [sp, #4]
    581a:	431f      	orrs	r7, r3
    581c:	2f0f      	cmp	r7, #15
    581e:	d900      	bls.n	5822 <__aeabi_ddiv+0x8e>
    5820:	e0b0      	b.n	5984 <__aeabi_ddiv+0x1f0>
    5822:	4855      	ldr	r0, [pc, #340]	; (5978 <__aeabi_ddiv+0x1e4>)
    5824:	00bf      	lsls	r7, r7, #2
    5826:	59c0      	ldr	r0, [r0, r7]
    5828:	4687      	mov	pc, r0
    582a:	4337      	orrs	r7, r6
    582c:	d000      	beq.n	5830 <__aeabi_ddiv+0x9c>
    582e:	e088      	b.n	5942 <__aeabi_ddiv+0x1ae>
    5830:	2300      	movs	r3, #0
    5832:	4699      	mov	r9, r3
    5834:	3302      	adds	r3, #2
    5836:	2708      	movs	r7, #8
    5838:	2600      	movs	r6, #0
    583a:	9302      	str	r3, [sp, #8]
    583c:	e7cd      	b.n	57da <__aeabi_ddiv+0x46>
    583e:	4643      	mov	r3, r8
    5840:	46b3      	mov	fp, r6
    5842:	4649      	mov	r1, r9
    5844:	9300      	str	r3, [sp, #0]
    5846:	9b02      	ldr	r3, [sp, #8]
    5848:	9a00      	ldr	r2, [sp, #0]
    584a:	4692      	mov	sl, r2
    584c:	2b02      	cmp	r3, #2
    584e:	d000      	beq.n	5852 <__aeabi_ddiv+0xbe>
    5850:	e1bf      	b.n	5bd2 <__aeabi_ddiv+0x43e>
    5852:	2100      	movs	r1, #0
    5854:	4653      	mov	r3, sl
    5856:	2201      	movs	r2, #1
    5858:	2600      	movs	r6, #0
    585a:	4689      	mov	r9, r1
    585c:	401a      	ands	r2, r3
    585e:	4b44      	ldr	r3, [pc, #272]	; (5970 <__aeabi_ddiv+0x1dc>)
    5860:	2100      	movs	r1, #0
    5862:	0336      	lsls	r6, r6, #12
    5864:	0d0c      	lsrs	r4, r1, #20
    5866:	0524      	lsls	r4, r4, #20
    5868:	0b36      	lsrs	r6, r6, #12
    586a:	4326      	orrs	r6, r4
    586c:	4c43      	ldr	r4, [pc, #268]	; (597c <__aeabi_ddiv+0x1e8>)
    586e:	051b      	lsls	r3, r3, #20
    5870:	4026      	ands	r6, r4
    5872:	431e      	orrs	r6, r3
    5874:	0076      	lsls	r6, r6, #1
    5876:	07d2      	lsls	r2, r2, #31
    5878:	0876      	lsrs	r6, r6, #1
    587a:	4316      	orrs	r6, r2
    587c:	4648      	mov	r0, r9
    587e:	0031      	movs	r1, r6
    5880:	b007      	add	sp, #28
    5882:	bc3c      	pop	{r2, r3, r4, r5}
    5884:	4690      	mov	r8, r2
    5886:	4699      	mov	r9, r3
    5888:	46a2      	mov	sl, r4
    588a:	46ab      	mov	fp, r5
    588c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    588e:	0033      	movs	r3, r6
    5890:	4303      	orrs	r3, r0
    5892:	d04f      	beq.n	5934 <__aeabi_ddiv+0x1a0>
    5894:	2e00      	cmp	r6, #0
    5896:	d100      	bne.n	589a <__aeabi_ddiv+0x106>
    5898:	e1bc      	b.n	5c14 <__aeabi_ddiv+0x480>
    589a:	0030      	movs	r0, r6
    589c:	f001 fb1c 	bl	6ed8 <__clzsi2>
    58a0:	0003      	movs	r3, r0
    58a2:	3b0b      	subs	r3, #11
    58a4:	2b1c      	cmp	r3, #28
    58a6:	dd00      	ble.n	58aa <__aeabi_ddiv+0x116>
    58a8:	e1ad      	b.n	5c06 <__aeabi_ddiv+0x472>
    58aa:	221d      	movs	r2, #29
    58ac:	0001      	movs	r1, r0
    58ae:	1ad3      	subs	r3, r2, r3
    58b0:	3908      	subs	r1, #8
    58b2:	003a      	movs	r2, r7
    58b4:	408f      	lsls	r7, r1
    58b6:	408e      	lsls	r6, r1
    58b8:	40da      	lsrs	r2, r3
    58ba:	46b9      	mov	r9, r7
    58bc:	4316      	orrs	r6, r2
    58be:	4b30      	ldr	r3, [pc, #192]	; (5980 <__aeabi_ddiv+0x1ec>)
    58c0:	2700      	movs	r7, #0
    58c2:	469c      	mov	ip, r3
    58c4:	2300      	movs	r3, #0
    58c6:	4460      	add	r0, ip
    58c8:	4244      	negs	r4, r0
    58ca:	9302      	str	r3, [sp, #8]
    58cc:	e785      	b.n	57da <__aeabi_ddiv+0x46>
    58ce:	4653      	mov	r3, sl
    58d0:	465a      	mov	r2, fp
    58d2:	4313      	orrs	r3, r2
    58d4:	d12c      	bne.n	5930 <__aeabi_ddiv+0x19c>
    58d6:	2300      	movs	r3, #0
    58d8:	2100      	movs	r1, #0
    58da:	469b      	mov	fp, r3
    58dc:	3302      	adds	r3, #2
    58de:	e797      	b.n	5810 <__aeabi_ddiv+0x7c>
    58e0:	430b      	orrs	r3, r1
    58e2:	d020      	beq.n	5926 <__aeabi_ddiv+0x192>
    58e4:	465b      	mov	r3, fp
    58e6:	2b00      	cmp	r3, #0
    58e8:	d100      	bne.n	58ec <__aeabi_ddiv+0x158>
    58ea:	e19e      	b.n	5c2a <__aeabi_ddiv+0x496>
    58ec:	4658      	mov	r0, fp
    58ee:	f001 faf3 	bl	6ed8 <__clzsi2>
    58f2:	0003      	movs	r3, r0
    58f4:	3b0b      	subs	r3, #11
    58f6:	2b1c      	cmp	r3, #28
    58f8:	dd00      	ble.n	58fc <__aeabi_ddiv+0x168>
    58fa:	e18f      	b.n	5c1c <__aeabi_ddiv+0x488>
    58fc:	0002      	movs	r2, r0
    58fe:	4659      	mov	r1, fp
    5900:	3a08      	subs	r2, #8
    5902:	4091      	lsls	r1, r2
    5904:	468b      	mov	fp, r1
    5906:	211d      	movs	r1, #29
    5908:	1acb      	subs	r3, r1, r3
    590a:	4651      	mov	r1, sl
    590c:	40d9      	lsrs	r1, r3
    590e:	000b      	movs	r3, r1
    5910:	4659      	mov	r1, fp
    5912:	430b      	orrs	r3, r1
    5914:	4651      	mov	r1, sl
    5916:	469b      	mov	fp, r3
    5918:	4091      	lsls	r1, r2
    591a:	4b19      	ldr	r3, [pc, #100]	; (5980 <__aeabi_ddiv+0x1ec>)
    591c:	469c      	mov	ip, r3
    591e:	4460      	add	r0, ip
    5920:	4240      	negs	r0, r0
    5922:	2300      	movs	r3, #0
    5924:	e774      	b.n	5810 <__aeabi_ddiv+0x7c>
    5926:	2300      	movs	r3, #0
    5928:	2100      	movs	r1, #0
    592a:	469b      	mov	fp, r3
    592c:	3301      	adds	r3, #1
    592e:	e76f      	b.n	5810 <__aeabi_ddiv+0x7c>
    5930:	2303      	movs	r3, #3
    5932:	e76d      	b.n	5810 <__aeabi_ddiv+0x7c>
    5934:	2300      	movs	r3, #0
    5936:	4699      	mov	r9, r3
    5938:	3301      	adds	r3, #1
    593a:	2704      	movs	r7, #4
    593c:	2600      	movs	r6, #0
    593e:	9302      	str	r3, [sp, #8]
    5940:	e74b      	b.n	57da <__aeabi_ddiv+0x46>
    5942:	2303      	movs	r3, #3
    5944:	270c      	movs	r7, #12
    5946:	9302      	str	r3, [sp, #8]
    5948:	e747      	b.n	57da <__aeabi_ddiv+0x46>
    594a:	2201      	movs	r2, #1
    594c:	1ad5      	subs	r5, r2, r3
    594e:	2d38      	cmp	r5, #56	; 0x38
    5950:	dc00      	bgt.n	5954 <__aeabi_ddiv+0x1c0>
    5952:	e1b0      	b.n	5cb6 <__aeabi_ddiv+0x522>
    5954:	4653      	mov	r3, sl
    5956:	401a      	ands	r2, r3
    5958:	2100      	movs	r1, #0
    595a:	2300      	movs	r3, #0
    595c:	2600      	movs	r6, #0
    595e:	4689      	mov	r9, r1
    5960:	e77e      	b.n	5860 <__aeabi_ddiv+0xcc>
    5962:	2300      	movs	r3, #0
    5964:	2680      	movs	r6, #128	; 0x80
    5966:	4699      	mov	r9, r3
    5968:	2200      	movs	r2, #0
    596a:	0336      	lsls	r6, r6, #12
    596c:	4b00      	ldr	r3, [pc, #0]	; (5970 <__aeabi_ddiv+0x1dc>)
    596e:	e777      	b.n	5860 <__aeabi_ddiv+0xcc>
    5970:	000007ff 	.word	0x000007ff
    5974:	fffffc01 	.word	0xfffffc01
    5978:	00006fe8 	.word	0x00006fe8
    597c:	800fffff 	.word	0x800fffff
    5980:	000003f3 	.word	0x000003f3
    5984:	455e      	cmp	r6, fp
    5986:	d900      	bls.n	598a <__aeabi_ddiv+0x1f6>
    5988:	e172      	b.n	5c70 <__aeabi_ddiv+0x4dc>
    598a:	d100      	bne.n	598e <__aeabi_ddiv+0x1fa>
    598c:	e16d      	b.n	5c6a <__aeabi_ddiv+0x4d6>
    598e:	9b01      	ldr	r3, [sp, #4]
    5990:	464d      	mov	r5, r9
    5992:	3b01      	subs	r3, #1
    5994:	9301      	str	r3, [sp, #4]
    5996:	2300      	movs	r3, #0
    5998:	0034      	movs	r4, r6
    599a:	9302      	str	r3, [sp, #8]
    599c:	465b      	mov	r3, fp
    599e:	021e      	lsls	r6, r3, #8
    59a0:	0e0b      	lsrs	r3, r1, #24
    59a2:	431e      	orrs	r6, r3
    59a4:	020b      	lsls	r3, r1, #8
    59a6:	9303      	str	r3, [sp, #12]
    59a8:	0c33      	lsrs	r3, r6, #16
    59aa:	4699      	mov	r9, r3
    59ac:	0433      	lsls	r3, r6, #16
    59ae:	0c1b      	lsrs	r3, r3, #16
    59b0:	4649      	mov	r1, r9
    59b2:	0020      	movs	r0, r4
    59b4:	9300      	str	r3, [sp, #0]
    59b6:	f7ff f977 	bl	4ca8 <__aeabi_uidiv>
    59ba:	9b00      	ldr	r3, [sp, #0]
    59bc:	0037      	movs	r7, r6
    59be:	4343      	muls	r3, r0
    59c0:	0006      	movs	r6, r0
    59c2:	4649      	mov	r1, r9
    59c4:	0020      	movs	r0, r4
    59c6:	4698      	mov	r8, r3
    59c8:	f7ff f9f4 	bl	4db4 <__aeabi_uidivmod>
    59cc:	0c2c      	lsrs	r4, r5, #16
    59ce:	0409      	lsls	r1, r1, #16
    59d0:	430c      	orrs	r4, r1
    59d2:	45a0      	cmp	r8, r4
    59d4:	d909      	bls.n	59ea <__aeabi_ddiv+0x256>
    59d6:	19e4      	adds	r4, r4, r7
    59d8:	1e73      	subs	r3, r6, #1
    59da:	42a7      	cmp	r7, r4
    59dc:	d900      	bls.n	59e0 <__aeabi_ddiv+0x24c>
    59de:	e15c      	b.n	5c9a <__aeabi_ddiv+0x506>
    59e0:	45a0      	cmp	r8, r4
    59e2:	d800      	bhi.n	59e6 <__aeabi_ddiv+0x252>
    59e4:	e159      	b.n	5c9a <__aeabi_ddiv+0x506>
    59e6:	3e02      	subs	r6, #2
    59e8:	19e4      	adds	r4, r4, r7
    59ea:	4643      	mov	r3, r8
    59ec:	1ae4      	subs	r4, r4, r3
    59ee:	4649      	mov	r1, r9
    59f0:	0020      	movs	r0, r4
    59f2:	f7ff f959 	bl	4ca8 <__aeabi_uidiv>
    59f6:	0003      	movs	r3, r0
    59f8:	9a00      	ldr	r2, [sp, #0]
    59fa:	4680      	mov	r8, r0
    59fc:	4353      	muls	r3, r2
    59fe:	4649      	mov	r1, r9
    5a00:	0020      	movs	r0, r4
    5a02:	469b      	mov	fp, r3
    5a04:	f7ff f9d6 	bl	4db4 <__aeabi_uidivmod>
    5a08:	042a      	lsls	r2, r5, #16
    5a0a:	0409      	lsls	r1, r1, #16
    5a0c:	0c12      	lsrs	r2, r2, #16
    5a0e:	430a      	orrs	r2, r1
    5a10:	4593      	cmp	fp, r2
    5a12:	d90d      	bls.n	5a30 <__aeabi_ddiv+0x29c>
    5a14:	4643      	mov	r3, r8
    5a16:	19d2      	adds	r2, r2, r7
    5a18:	3b01      	subs	r3, #1
    5a1a:	4297      	cmp	r7, r2
    5a1c:	d900      	bls.n	5a20 <__aeabi_ddiv+0x28c>
    5a1e:	e13a      	b.n	5c96 <__aeabi_ddiv+0x502>
    5a20:	4593      	cmp	fp, r2
    5a22:	d800      	bhi.n	5a26 <__aeabi_ddiv+0x292>
    5a24:	e137      	b.n	5c96 <__aeabi_ddiv+0x502>
    5a26:	2302      	movs	r3, #2
    5a28:	425b      	negs	r3, r3
    5a2a:	469c      	mov	ip, r3
    5a2c:	19d2      	adds	r2, r2, r7
    5a2e:	44e0      	add	r8, ip
    5a30:	465b      	mov	r3, fp
    5a32:	1ad2      	subs	r2, r2, r3
    5a34:	4643      	mov	r3, r8
    5a36:	0436      	lsls	r6, r6, #16
    5a38:	4333      	orrs	r3, r6
    5a3a:	469b      	mov	fp, r3
    5a3c:	9903      	ldr	r1, [sp, #12]
    5a3e:	0c18      	lsrs	r0, r3, #16
    5a40:	0c0b      	lsrs	r3, r1, #16
    5a42:	001d      	movs	r5, r3
    5a44:	9305      	str	r3, [sp, #20]
    5a46:	0409      	lsls	r1, r1, #16
    5a48:	465b      	mov	r3, fp
    5a4a:	0c09      	lsrs	r1, r1, #16
    5a4c:	000c      	movs	r4, r1
    5a4e:	041b      	lsls	r3, r3, #16
    5a50:	0c1b      	lsrs	r3, r3, #16
    5a52:	4344      	muls	r4, r0
    5a54:	9104      	str	r1, [sp, #16]
    5a56:	4359      	muls	r1, r3
    5a58:	436b      	muls	r3, r5
    5a5a:	4368      	muls	r0, r5
    5a5c:	191b      	adds	r3, r3, r4
    5a5e:	0c0d      	lsrs	r5, r1, #16
    5a60:	18eb      	adds	r3, r5, r3
    5a62:	429c      	cmp	r4, r3
    5a64:	d903      	bls.n	5a6e <__aeabi_ddiv+0x2da>
    5a66:	2480      	movs	r4, #128	; 0x80
    5a68:	0264      	lsls	r4, r4, #9
    5a6a:	46a4      	mov	ip, r4
    5a6c:	4460      	add	r0, ip
    5a6e:	0c1c      	lsrs	r4, r3, #16
    5a70:	0409      	lsls	r1, r1, #16
    5a72:	041b      	lsls	r3, r3, #16
    5a74:	0c09      	lsrs	r1, r1, #16
    5a76:	1820      	adds	r0, r4, r0
    5a78:	185d      	adds	r5, r3, r1
    5a7a:	4282      	cmp	r2, r0
    5a7c:	d200      	bcs.n	5a80 <__aeabi_ddiv+0x2ec>
    5a7e:	e0de      	b.n	5c3e <__aeabi_ddiv+0x4aa>
    5a80:	d100      	bne.n	5a84 <__aeabi_ddiv+0x2f0>
    5a82:	e0d7      	b.n	5c34 <__aeabi_ddiv+0x4a0>
    5a84:	1a16      	subs	r6, r2, r0
    5a86:	9b02      	ldr	r3, [sp, #8]
    5a88:	469c      	mov	ip, r3
    5a8a:	1b5d      	subs	r5, r3, r5
    5a8c:	45ac      	cmp	ip, r5
    5a8e:	419b      	sbcs	r3, r3
    5a90:	425b      	negs	r3, r3
    5a92:	1af6      	subs	r6, r6, r3
    5a94:	42b7      	cmp	r7, r6
    5a96:	d100      	bne.n	5a9a <__aeabi_ddiv+0x306>
    5a98:	e106      	b.n	5ca8 <__aeabi_ddiv+0x514>
    5a9a:	4649      	mov	r1, r9
    5a9c:	0030      	movs	r0, r6
    5a9e:	f7ff f903 	bl	4ca8 <__aeabi_uidiv>
    5aa2:	9b00      	ldr	r3, [sp, #0]
    5aa4:	0004      	movs	r4, r0
    5aa6:	4343      	muls	r3, r0
    5aa8:	4649      	mov	r1, r9
    5aaa:	0030      	movs	r0, r6
    5aac:	4698      	mov	r8, r3
    5aae:	f7ff f981 	bl	4db4 <__aeabi_uidivmod>
    5ab2:	0c2e      	lsrs	r6, r5, #16
    5ab4:	0409      	lsls	r1, r1, #16
    5ab6:	430e      	orrs	r6, r1
    5ab8:	45b0      	cmp	r8, r6
    5aba:	d909      	bls.n	5ad0 <__aeabi_ddiv+0x33c>
    5abc:	19f6      	adds	r6, r6, r7
    5abe:	1e63      	subs	r3, r4, #1
    5ac0:	42b7      	cmp	r7, r6
    5ac2:	d900      	bls.n	5ac6 <__aeabi_ddiv+0x332>
    5ac4:	e0f3      	b.n	5cae <__aeabi_ddiv+0x51a>
    5ac6:	45b0      	cmp	r8, r6
    5ac8:	d800      	bhi.n	5acc <__aeabi_ddiv+0x338>
    5aca:	e0f0      	b.n	5cae <__aeabi_ddiv+0x51a>
    5acc:	3c02      	subs	r4, #2
    5ace:	19f6      	adds	r6, r6, r7
    5ad0:	4643      	mov	r3, r8
    5ad2:	1af3      	subs	r3, r6, r3
    5ad4:	4649      	mov	r1, r9
    5ad6:	0018      	movs	r0, r3
    5ad8:	9302      	str	r3, [sp, #8]
    5ada:	f7ff f8e5 	bl	4ca8 <__aeabi_uidiv>
    5ade:	9b00      	ldr	r3, [sp, #0]
    5ae0:	0006      	movs	r6, r0
    5ae2:	4343      	muls	r3, r0
    5ae4:	4649      	mov	r1, r9
    5ae6:	9802      	ldr	r0, [sp, #8]
    5ae8:	4698      	mov	r8, r3
    5aea:	f7ff f963 	bl	4db4 <__aeabi_uidivmod>
    5aee:	042d      	lsls	r5, r5, #16
    5af0:	0409      	lsls	r1, r1, #16
    5af2:	0c2d      	lsrs	r5, r5, #16
    5af4:	430d      	orrs	r5, r1
    5af6:	45a8      	cmp	r8, r5
    5af8:	d909      	bls.n	5b0e <__aeabi_ddiv+0x37a>
    5afa:	19ed      	adds	r5, r5, r7
    5afc:	1e73      	subs	r3, r6, #1
    5afe:	42af      	cmp	r7, r5
    5b00:	d900      	bls.n	5b04 <__aeabi_ddiv+0x370>
    5b02:	e0d6      	b.n	5cb2 <__aeabi_ddiv+0x51e>
    5b04:	45a8      	cmp	r8, r5
    5b06:	d800      	bhi.n	5b0a <__aeabi_ddiv+0x376>
    5b08:	e0d3      	b.n	5cb2 <__aeabi_ddiv+0x51e>
    5b0a:	3e02      	subs	r6, #2
    5b0c:	19ed      	adds	r5, r5, r7
    5b0e:	0424      	lsls	r4, r4, #16
    5b10:	0021      	movs	r1, r4
    5b12:	4643      	mov	r3, r8
    5b14:	4331      	orrs	r1, r6
    5b16:	9e04      	ldr	r6, [sp, #16]
    5b18:	9a05      	ldr	r2, [sp, #20]
    5b1a:	0030      	movs	r0, r6
    5b1c:	1aed      	subs	r5, r5, r3
    5b1e:	040b      	lsls	r3, r1, #16
    5b20:	0c0c      	lsrs	r4, r1, #16
    5b22:	0c1b      	lsrs	r3, r3, #16
    5b24:	4358      	muls	r0, r3
    5b26:	4366      	muls	r6, r4
    5b28:	4353      	muls	r3, r2
    5b2a:	4354      	muls	r4, r2
    5b2c:	199a      	adds	r2, r3, r6
    5b2e:	0c03      	lsrs	r3, r0, #16
    5b30:	189b      	adds	r3, r3, r2
    5b32:	429e      	cmp	r6, r3
    5b34:	d903      	bls.n	5b3e <__aeabi_ddiv+0x3aa>
    5b36:	2280      	movs	r2, #128	; 0x80
    5b38:	0252      	lsls	r2, r2, #9
    5b3a:	4694      	mov	ip, r2
    5b3c:	4464      	add	r4, ip
    5b3e:	0c1a      	lsrs	r2, r3, #16
    5b40:	0400      	lsls	r0, r0, #16
    5b42:	041b      	lsls	r3, r3, #16
    5b44:	0c00      	lsrs	r0, r0, #16
    5b46:	1914      	adds	r4, r2, r4
    5b48:	181b      	adds	r3, r3, r0
    5b4a:	42a5      	cmp	r5, r4
    5b4c:	d350      	bcc.n	5bf0 <__aeabi_ddiv+0x45c>
    5b4e:	d04d      	beq.n	5bec <__aeabi_ddiv+0x458>
    5b50:	2301      	movs	r3, #1
    5b52:	4319      	orrs	r1, r3
    5b54:	4a96      	ldr	r2, [pc, #600]	; (5db0 <__aeabi_ddiv+0x61c>)
    5b56:	9b01      	ldr	r3, [sp, #4]
    5b58:	4694      	mov	ip, r2
    5b5a:	4463      	add	r3, ip
    5b5c:	2b00      	cmp	r3, #0
    5b5e:	dc00      	bgt.n	5b62 <__aeabi_ddiv+0x3ce>
    5b60:	e6f3      	b.n	594a <__aeabi_ddiv+0x1b6>
    5b62:	074a      	lsls	r2, r1, #29
    5b64:	d009      	beq.n	5b7a <__aeabi_ddiv+0x3e6>
    5b66:	220f      	movs	r2, #15
    5b68:	400a      	ands	r2, r1
    5b6a:	2a04      	cmp	r2, #4
    5b6c:	d005      	beq.n	5b7a <__aeabi_ddiv+0x3e6>
    5b6e:	1d0a      	adds	r2, r1, #4
    5b70:	428a      	cmp	r2, r1
    5b72:	4189      	sbcs	r1, r1
    5b74:	4249      	negs	r1, r1
    5b76:	448b      	add	fp, r1
    5b78:	0011      	movs	r1, r2
    5b7a:	465a      	mov	r2, fp
    5b7c:	01d2      	lsls	r2, r2, #7
    5b7e:	d508      	bpl.n	5b92 <__aeabi_ddiv+0x3fe>
    5b80:	465a      	mov	r2, fp
    5b82:	4b8c      	ldr	r3, [pc, #560]	; (5db4 <__aeabi_ddiv+0x620>)
    5b84:	401a      	ands	r2, r3
    5b86:	4693      	mov	fp, r2
    5b88:	2280      	movs	r2, #128	; 0x80
    5b8a:	00d2      	lsls	r2, r2, #3
    5b8c:	4694      	mov	ip, r2
    5b8e:	9b01      	ldr	r3, [sp, #4]
    5b90:	4463      	add	r3, ip
    5b92:	4a89      	ldr	r2, [pc, #548]	; (5db8 <__aeabi_ddiv+0x624>)
    5b94:	4293      	cmp	r3, r2
    5b96:	dd00      	ble.n	5b9a <__aeabi_ddiv+0x406>
    5b98:	e65b      	b.n	5852 <__aeabi_ddiv+0xbe>
    5b9a:	465a      	mov	r2, fp
    5b9c:	08c9      	lsrs	r1, r1, #3
    5b9e:	0750      	lsls	r0, r2, #29
    5ba0:	4308      	orrs	r0, r1
    5ba2:	0256      	lsls	r6, r2, #9
    5ba4:	4651      	mov	r1, sl
    5ba6:	2201      	movs	r2, #1
    5ba8:	055b      	lsls	r3, r3, #21
    5baa:	4681      	mov	r9, r0
    5bac:	0b36      	lsrs	r6, r6, #12
    5bae:	0d5b      	lsrs	r3, r3, #21
    5bb0:	400a      	ands	r2, r1
    5bb2:	e655      	b.n	5860 <__aeabi_ddiv+0xcc>
    5bb4:	2380      	movs	r3, #128	; 0x80
    5bb6:	031b      	lsls	r3, r3, #12
    5bb8:	421e      	tst	r6, r3
    5bba:	d011      	beq.n	5be0 <__aeabi_ddiv+0x44c>
    5bbc:	465a      	mov	r2, fp
    5bbe:	421a      	tst	r2, r3
    5bc0:	d10e      	bne.n	5be0 <__aeabi_ddiv+0x44c>
    5bc2:	465e      	mov	r6, fp
    5bc4:	431e      	orrs	r6, r3
    5bc6:	0336      	lsls	r6, r6, #12
    5bc8:	0b36      	lsrs	r6, r6, #12
    5bca:	002a      	movs	r2, r5
    5bcc:	4689      	mov	r9, r1
    5bce:	4b7b      	ldr	r3, [pc, #492]	; (5dbc <__aeabi_ddiv+0x628>)
    5bd0:	e646      	b.n	5860 <__aeabi_ddiv+0xcc>
    5bd2:	2b03      	cmp	r3, #3
    5bd4:	d100      	bne.n	5bd8 <__aeabi_ddiv+0x444>
    5bd6:	e0e1      	b.n	5d9c <__aeabi_ddiv+0x608>
    5bd8:	2b01      	cmp	r3, #1
    5bda:	d1bb      	bne.n	5b54 <__aeabi_ddiv+0x3c0>
    5bdc:	401a      	ands	r2, r3
    5bde:	e6bb      	b.n	5958 <__aeabi_ddiv+0x1c4>
    5be0:	431e      	orrs	r6, r3
    5be2:	0336      	lsls	r6, r6, #12
    5be4:	0b36      	lsrs	r6, r6, #12
    5be6:	4642      	mov	r2, r8
    5be8:	4b74      	ldr	r3, [pc, #464]	; (5dbc <__aeabi_ddiv+0x628>)
    5bea:	e639      	b.n	5860 <__aeabi_ddiv+0xcc>
    5bec:	2b00      	cmp	r3, #0
    5bee:	d0b1      	beq.n	5b54 <__aeabi_ddiv+0x3c0>
    5bf0:	197d      	adds	r5, r7, r5
    5bf2:	1e4a      	subs	r2, r1, #1
    5bf4:	42af      	cmp	r7, r5
    5bf6:	d952      	bls.n	5c9e <__aeabi_ddiv+0x50a>
    5bf8:	0011      	movs	r1, r2
    5bfa:	42a5      	cmp	r5, r4
    5bfc:	d1a8      	bne.n	5b50 <__aeabi_ddiv+0x3bc>
    5bfe:	9a03      	ldr	r2, [sp, #12]
    5c00:	429a      	cmp	r2, r3
    5c02:	d1a5      	bne.n	5b50 <__aeabi_ddiv+0x3bc>
    5c04:	e7a6      	b.n	5b54 <__aeabi_ddiv+0x3c0>
    5c06:	0003      	movs	r3, r0
    5c08:	003e      	movs	r6, r7
    5c0a:	3b28      	subs	r3, #40	; 0x28
    5c0c:	409e      	lsls	r6, r3
    5c0e:	2300      	movs	r3, #0
    5c10:	4699      	mov	r9, r3
    5c12:	e654      	b.n	58be <__aeabi_ddiv+0x12a>
    5c14:	f001 f960 	bl	6ed8 <__clzsi2>
    5c18:	3020      	adds	r0, #32
    5c1a:	e641      	b.n	58a0 <__aeabi_ddiv+0x10c>
    5c1c:	0003      	movs	r3, r0
    5c1e:	4652      	mov	r2, sl
    5c20:	3b28      	subs	r3, #40	; 0x28
    5c22:	409a      	lsls	r2, r3
    5c24:	2100      	movs	r1, #0
    5c26:	4693      	mov	fp, r2
    5c28:	e677      	b.n	591a <__aeabi_ddiv+0x186>
    5c2a:	4650      	mov	r0, sl
    5c2c:	f001 f954 	bl	6ed8 <__clzsi2>
    5c30:	3020      	adds	r0, #32
    5c32:	e65e      	b.n	58f2 <__aeabi_ddiv+0x15e>
    5c34:	9b02      	ldr	r3, [sp, #8]
    5c36:	2600      	movs	r6, #0
    5c38:	42ab      	cmp	r3, r5
    5c3a:	d300      	bcc.n	5c3e <__aeabi_ddiv+0x4aa>
    5c3c:	e723      	b.n	5a86 <__aeabi_ddiv+0x2f2>
    5c3e:	9e03      	ldr	r6, [sp, #12]
    5c40:	9902      	ldr	r1, [sp, #8]
    5c42:	46b4      	mov	ip, r6
    5c44:	4461      	add	r1, ip
    5c46:	4688      	mov	r8, r1
    5c48:	45b0      	cmp	r8, r6
    5c4a:	41b6      	sbcs	r6, r6
    5c4c:	465b      	mov	r3, fp
    5c4e:	4276      	negs	r6, r6
    5c50:	19f6      	adds	r6, r6, r7
    5c52:	18b2      	adds	r2, r6, r2
    5c54:	3b01      	subs	r3, #1
    5c56:	9102      	str	r1, [sp, #8]
    5c58:	4297      	cmp	r7, r2
    5c5a:	d213      	bcs.n	5c84 <__aeabi_ddiv+0x4f0>
    5c5c:	4290      	cmp	r0, r2
    5c5e:	d84f      	bhi.n	5d00 <__aeabi_ddiv+0x56c>
    5c60:	d100      	bne.n	5c64 <__aeabi_ddiv+0x4d0>
    5c62:	e08e      	b.n	5d82 <__aeabi_ddiv+0x5ee>
    5c64:	1a16      	subs	r6, r2, r0
    5c66:	469b      	mov	fp, r3
    5c68:	e70d      	b.n	5a86 <__aeabi_ddiv+0x2f2>
    5c6a:	4589      	cmp	r9, r1
    5c6c:	d200      	bcs.n	5c70 <__aeabi_ddiv+0x4dc>
    5c6e:	e68e      	b.n	598e <__aeabi_ddiv+0x1fa>
    5c70:	0874      	lsrs	r4, r6, #1
    5c72:	464b      	mov	r3, r9
    5c74:	07f6      	lsls	r6, r6, #31
    5c76:	0035      	movs	r5, r6
    5c78:	085b      	lsrs	r3, r3, #1
    5c7a:	431d      	orrs	r5, r3
    5c7c:	464b      	mov	r3, r9
    5c7e:	07db      	lsls	r3, r3, #31
    5c80:	9302      	str	r3, [sp, #8]
    5c82:	e68b      	b.n	599c <__aeabi_ddiv+0x208>
    5c84:	4297      	cmp	r7, r2
    5c86:	d1ed      	bne.n	5c64 <__aeabi_ddiv+0x4d0>
    5c88:	9903      	ldr	r1, [sp, #12]
    5c8a:	9c02      	ldr	r4, [sp, #8]
    5c8c:	42a1      	cmp	r1, r4
    5c8e:	d9e5      	bls.n	5c5c <__aeabi_ddiv+0x4c8>
    5c90:	1a3e      	subs	r6, r7, r0
    5c92:	469b      	mov	fp, r3
    5c94:	e6f7      	b.n	5a86 <__aeabi_ddiv+0x2f2>
    5c96:	4698      	mov	r8, r3
    5c98:	e6ca      	b.n	5a30 <__aeabi_ddiv+0x29c>
    5c9a:	001e      	movs	r6, r3
    5c9c:	e6a5      	b.n	59ea <__aeabi_ddiv+0x256>
    5c9e:	42ac      	cmp	r4, r5
    5ca0:	d83e      	bhi.n	5d20 <__aeabi_ddiv+0x58c>
    5ca2:	d074      	beq.n	5d8e <__aeabi_ddiv+0x5fa>
    5ca4:	0011      	movs	r1, r2
    5ca6:	e753      	b.n	5b50 <__aeabi_ddiv+0x3bc>
    5ca8:	2101      	movs	r1, #1
    5caa:	4249      	negs	r1, r1
    5cac:	e752      	b.n	5b54 <__aeabi_ddiv+0x3c0>
    5cae:	001c      	movs	r4, r3
    5cb0:	e70e      	b.n	5ad0 <__aeabi_ddiv+0x33c>
    5cb2:	001e      	movs	r6, r3
    5cb4:	e72b      	b.n	5b0e <__aeabi_ddiv+0x37a>
    5cb6:	2d1f      	cmp	r5, #31
    5cb8:	dc3c      	bgt.n	5d34 <__aeabi_ddiv+0x5a0>
    5cba:	2320      	movs	r3, #32
    5cbc:	000a      	movs	r2, r1
    5cbe:	4658      	mov	r0, fp
    5cc0:	1b5b      	subs	r3, r3, r5
    5cc2:	4098      	lsls	r0, r3
    5cc4:	40ea      	lsrs	r2, r5
    5cc6:	4099      	lsls	r1, r3
    5cc8:	4302      	orrs	r2, r0
    5cca:	1e48      	subs	r0, r1, #1
    5ccc:	4181      	sbcs	r1, r0
    5cce:	465e      	mov	r6, fp
    5cd0:	4311      	orrs	r1, r2
    5cd2:	40ee      	lsrs	r6, r5
    5cd4:	074b      	lsls	r3, r1, #29
    5cd6:	d009      	beq.n	5cec <__aeabi_ddiv+0x558>
    5cd8:	230f      	movs	r3, #15
    5cda:	400b      	ands	r3, r1
    5cdc:	2b04      	cmp	r3, #4
    5cde:	d005      	beq.n	5cec <__aeabi_ddiv+0x558>
    5ce0:	000b      	movs	r3, r1
    5ce2:	1d19      	adds	r1, r3, #4
    5ce4:	4299      	cmp	r1, r3
    5ce6:	419b      	sbcs	r3, r3
    5ce8:	425b      	negs	r3, r3
    5cea:	18f6      	adds	r6, r6, r3
    5cec:	0233      	lsls	r3, r6, #8
    5cee:	d53c      	bpl.n	5d6a <__aeabi_ddiv+0x5d6>
    5cf0:	4653      	mov	r3, sl
    5cf2:	2201      	movs	r2, #1
    5cf4:	2100      	movs	r1, #0
    5cf6:	401a      	ands	r2, r3
    5cf8:	2600      	movs	r6, #0
    5cfa:	2301      	movs	r3, #1
    5cfc:	4689      	mov	r9, r1
    5cfe:	e5af      	b.n	5860 <__aeabi_ddiv+0xcc>
    5d00:	2302      	movs	r3, #2
    5d02:	425b      	negs	r3, r3
    5d04:	469c      	mov	ip, r3
    5d06:	9c03      	ldr	r4, [sp, #12]
    5d08:	44e3      	add	fp, ip
    5d0a:	46a4      	mov	ip, r4
    5d0c:	9b02      	ldr	r3, [sp, #8]
    5d0e:	4463      	add	r3, ip
    5d10:	4698      	mov	r8, r3
    5d12:	45a0      	cmp	r8, r4
    5d14:	41b6      	sbcs	r6, r6
    5d16:	4276      	negs	r6, r6
    5d18:	19f6      	adds	r6, r6, r7
    5d1a:	9302      	str	r3, [sp, #8]
    5d1c:	18b2      	adds	r2, r6, r2
    5d1e:	e6b1      	b.n	5a84 <__aeabi_ddiv+0x2f0>
    5d20:	9803      	ldr	r0, [sp, #12]
    5d22:	1e8a      	subs	r2, r1, #2
    5d24:	0041      	lsls	r1, r0, #1
    5d26:	4281      	cmp	r1, r0
    5d28:	41b6      	sbcs	r6, r6
    5d2a:	4276      	negs	r6, r6
    5d2c:	19f6      	adds	r6, r6, r7
    5d2e:	19ad      	adds	r5, r5, r6
    5d30:	9103      	str	r1, [sp, #12]
    5d32:	e761      	b.n	5bf8 <__aeabi_ddiv+0x464>
    5d34:	221f      	movs	r2, #31
    5d36:	4252      	negs	r2, r2
    5d38:	1ad3      	subs	r3, r2, r3
    5d3a:	465a      	mov	r2, fp
    5d3c:	40da      	lsrs	r2, r3
    5d3e:	0013      	movs	r3, r2
    5d40:	2d20      	cmp	r5, #32
    5d42:	d029      	beq.n	5d98 <__aeabi_ddiv+0x604>
    5d44:	2240      	movs	r2, #64	; 0x40
    5d46:	4658      	mov	r0, fp
    5d48:	1b55      	subs	r5, r2, r5
    5d4a:	40a8      	lsls	r0, r5
    5d4c:	4301      	orrs	r1, r0
    5d4e:	1e48      	subs	r0, r1, #1
    5d50:	4181      	sbcs	r1, r0
    5d52:	2007      	movs	r0, #7
    5d54:	430b      	orrs	r3, r1
    5d56:	4018      	ands	r0, r3
    5d58:	2600      	movs	r6, #0
    5d5a:	2800      	cmp	r0, #0
    5d5c:	d009      	beq.n	5d72 <__aeabi_ddiv+0x5de>
    5d5e:	220f      	movs	r2, #15
    5d60:	2600      	movs	r6, #0
    5d62:	401a      	ands	r2, r3
    5d64:	0019      	movs	r1, r3
    5d66:	2a04      	cmp	r2, #4
    5d68:	d1bb      	bne.n	5ce2 <__aeabi_ddiv+0x54e>
    5d6a:	000b      	movs	r3, r1
    5d6c:	0770      	lsls	r0, r6, #29
    5d6e:	0276      	lsls	r6, r6, #9
    5d70:	0b36      	lsrs	r6, r6, #12
    5d72:	08db      	lsrs	r3, r3, #3
    5d74:	4303      	orrs	r3, r0
    5d76:	4699      	mov	r9, r3
    5d78:	2201      	movs	r2, #1
    5d7a:	4653      	mov	r3, sl
    5d7c:	401a      	ands	r2, r3
    5d7e:	2300      	movs	r3, #0
    5d80:	e56e      	b.n	5860 <__aeabi_ddiv+0xcc>
    5d82:	9902      	ldr	r1, [sp, #8]
    5d84:	428d      	cmp	r5, r1
    5d86:	d8bb      	bhi.n	5d00 <__aeabi_ddiv+0x56c>
    5d88:	469b      	mov	fp, r3
    5d8a:	2600      	movs	r6, #0
    5d8c:	e67b      	b.n	5a86 <__aeabi_ddiv+0x2f2>
    5d8e:	9803      	ldr	r0, [sp, #12]
    5d90:	4298      	cmp	r0, r3
    5d92:	d3c5      	bcc.n	5d20 <__aeabi_ddiv+0x58c>
    5d94:	0011      	movs	r1, r2
    5d96:	e732      	b.n	5bfe <__aeabi_ddiv+0x46a>
    5d98:	2000      	movs	r0, #0
    5d9a:	e7d7      	b.n	5d4c <__aeabi_ddiv+0x5b8>
    5d9c:	2680      	movs	r6, #128	; 0x80
    5d9e:	465b      	mov	r3, fp
    5da0:	0336      	lsls	r6, r6, #12
    5da2:	431e      	orrs	r6, r3
    5da4:	0336      	lsls	r6, r6, #12
    5da6:	0b36      	lsrs	r6, r6, #12
    5da8:	9a00      	ldr	r2, [sp, #0]
    5daa:	4689      	mov	r9, r1
    5dac:	4b03      	ldr	r3, [pc, #12]	; (5dbc <__aeabi_ddiv+0x628>)
    5dae:	e557      	b.n	5860 <__aeabi_ddiv+0xcc>
    5db0:	000003ff 	.word	0x000003ff
    5db4:	feffffff 	.word	0xfeffffff
    5db8:	000007fe 	.word	0x000007fe
    5dbc:	000007ff 	.word	0x000007ff

00005dc0 <__eqdf2>:
    5dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5dc2:	465f      	mov	r7, fp
    5dc4:	4656      	mov	r6, sl
    5dc6:	464d      	mov	r5, r9
    5dc8:	4644      	mov	r4, r8
    5dca:	b4f0      	push	{r4, r5, r6, r7}
    5dcc:	031f      	lsls	r7, r3, #12
    5dce:	005c      	lsls	r4, r3, #1
    5dd0:	0fdb      	lsrs	r3, r3, #31
    5dd2:	469a      	mov	sl, r3
    5dd4:	4b19      	ldr	r3, [pc, #100]	; (5e3c <__eqdf2+0x7c>)
    5dd6:	030e      	lsls	r6, r1, #12
    5dd8:	004d      	lsls	r5, r1, #1
    5dda:	0fc9      	lsrs	r1, r1, #31
    5ddc:	4680      	mov	r8, r0
    5dde:	0b36      	lsrs	r6, r6, #12
    5de0:	0d6d      	lsrs	r5, r5, #21
    5de2:	468b      	mov	fp, r1
    5de4:	4691      	mov	r9, r2
    5de6:	0b3f      	lsrs	r7, r7, #12
    5de8:	0d64      	lsrs	r4, r4, #21
    5dea:	429d      	cmp	r5, r3
    5dec:	d019      	beq.n	5e22 <__eqdf2+0x62>
    5dee:	4b13      	ldr	r3, [pc, #76]	; (5e3c <__eqdf2+0x7c>)
    5df0:	429c      	cmp	r4, r3
    5df2:	d01b      	beq.n	5e2c <__eqdf2+0x6c>
    5df4:	2301      	movs	r3, #1
    5df6:	42a5      	cmp	r5, r4
    5df8:	d006      	beq.n	5e08 <__eqdf2+0x48>
    5dfa:	0018      	movs	r0, r3
    5dfc:	bc3c      	pop	{r2, r3, r4, r5}
    5dfe:	4690      	mov	r8, r2
    5e00:	4699      	mov	r9, r3
    5e02:	46a2      	mov	sl, r4
    5e04:	46ab      	mov	fp, r5
    5e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5e08:	42be      	cmp	r6, r7
    5e0a:	d1f6      	bne.n	5dfa <__eqdf2+0x3a>
    5e0c:	45c8      	cmp	r8, r9
    5e0e:	d1f4      	bne.n	5dfa <__eqdf2+0x3a>
    5e10:	45d3      	cmp	fp, sl
    5e12:	d010      	beq.n	5e36 <__eqdf2+0x76>
    5e14:	2d00      	cmp	r5, #0
    5e16:	d1f0      	bne.n	5dfa <__eqdf2+0x3a>
    5e18:	4330      	orrs	r0, r6
    5e1a:	0003      	movs	r3, r0
    5e1c:	1e5a      	subs	r2, r3, #1
    5e1e:	4193      	sbcs	r3, r2
    5e20:	e7eb      	b.n	5dfa <__eqdf2+0x3a>
    5e22:	0031      	movs	r1, r6
    5e24:	2301      	movs	r3, #1
    5e26:	4301      	orrs	r1, r0
    5e28:	d1e7      	bne.n	5dfa <__eqdf2+0x3a>
    5e2a:	e7e0      	b.n	5dee <__eqdf2+0x2e>
    5e2c:	433a      	orrs	r2, r7
    5e2e:	2301      	movs	r3, #1
    5e30:	2a00      	cmp	r2, #0
    5e32:	d1e2      	bne.n	5dfa <__eqdf2+0x3a>
    5e34:	e7de      	b.n	5df4 <__eqdf2+0x34>
    5e36:	2300      	movs	r3, #0
    5e38:	e7df      	b.n	5dfa <__eqdf2+0x3a>
    5e3a:	46c0      	nop			; (mov r8, r8)
    5e3c:	000007ff 	.word	0x000007ff

00005e40 <__gedf2>:
    5e40:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e42:	465f      	mov	r7, fp
    5e44:	4644      	mov	r4, r8
    5e46:	4656      	mov	r6, sl
    5e48:	464d      	mov	r5, r9
    5e4a:	b4f0      	push	{r4, r5, r6, r7}
    5e4c:	031f      	lsls	r7, r3, #12
    5e4e:	0b3c      	lsrs	r4, r7, #12
    5e50:	4f2c      	ldr	r7, [pc, #176]	; (5f04 <__gedf2+0xc4>)
    5e52:	030e      	lsls	r6, r1, #12
    5e54:	004d      	lsls	r5, r1, #1
    5e56:	46a3      	mov	fp, r4
    5e58:	005c      	lsls	r4, r3, #1
    5e5a:	4684      	mov	ip, r0
    5e5c:	0b36      	lsrs	r6, r6, #12
    5e5e:	0d6d      	lsrs	r5, r5, #21
    5e60:	0fc9      	lsrs	r1, r1, #31
    5e62:	4690      	mov	r8, r2
    5e64:	0d64      	lsrs	r4, r4, #21
    5e66:	0fdb      	lsrs	r3, r3, #31
    5e68:	42bd      	cmp	r5, r7
    5e6a:	d02b      	beq.n	5ec4 <__gedf2+0x84>
    5e6c:	4f25      	ldr	r7, [pc, #148]	; (5f04 <__gedf2+0xc4>)
    5e6e:	42bc      	cmp	r4, r7
    5e70:	d02e      	beq.n	5ed0 <__gedf2+0x90>
    5e72:	2d00      	cmp	r5, #0
    5e74:	d10e      	bne.n	5e94 <__gedf2+0x54>
    5e76:	4330      	orrs	r0, r6
    5e78:	0007      	movs	r7, r0
    5e7a:	4681      	mov	r9, r0
    5e7c:	4278      	negs	r0, r7
    5e7e:	4178      	adcs	r0, r7
    5e80:	2c00      	cmp	r4, #0
    5e82:	d117      	bne.n	5eb4 <__gedf2+0x74>
    5e84:	465f      	mov	r7, fp
    5e86:	433a      	orrs	r2, r7
    5e88:	d114      	bne.n	5eb4 <__gedf2+0x74>
    5e8a:	464b      	mov	r3, r9
    5e8c:	2000      	movs	r0, #0
    5e8e:	2b00      	cmp	r3, #0
    5e90:	d00a      	beq.n	5ea8 <__gedf2+0x68>
    5e92:	e006      	b.n	5ea2 <__gedf2+0x62>
    5e94:	2c00      	cmp	r4, #0
    5e96:	d102      	bne.n	5e9e <__gedf2+0x5e>
    5e98:	4658      	mov	r0, fp
    5e9a:	4302      	orrs	r2, r0
    5e9c:	d001      	beq.n	5ea2 <__gedf2+0x62>
    5e9e:	4299      	cmp	r1, r3
    5ea0:	d01a      	beq.n	5ed8 <__gedf2+0x98>
    5ea2:	2301      	movs	r3, #1
    5ea4:	4248      	negs	r0, r1
    5ea6:	4318      	orrs	r0, r3
    5ea8:	bc3c      	pop	{r2, r3, r4, r5}
    5eaa:	4690      	mov	r8, r2
    5eac:	4699      	mov	r9, r3
    5eae:	46a2      	mov	sl, r4
    5eb0:	46ab      	mov	fp, r5
    5eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5eb4:	2800      	cmp	r0, #0
    5eb6:	d0f2      	beq.n	5e9e <__gedf2+0x5e>
    5eb8:	4258      	negs	r0, r3
    5eba:	4158      	adcs	r0, r3
    5ebc:	2201      	movs	r2, #1
    5ebe:	4240      	negs	r0, r0
    5ec0:	4310      	orrs	r0, r2
    5ec2:	e7f1      	b.n	5ea8 <__gedf2+0x68>
    5ec4:	0037      	movs	r7, r6
    5ec6:	4307      	orrs	r7, r0
    5ec8:	d0d0      	beq.n	5e6c <__gedf2+0x2c>
    5eca:	2002      	movs	r0, #2
    5ecc:	4240      	negs	r0, r0
    5ece:	e7eb      	b.n	5ea8 <__gedf2+0x68>
    5ed0:	465f      	mov	r7, fp
    5ed2:	4317      	orrs	r7, r2
    5ed4:	d0cd      	beq.n	5e72 <__gedf2+0x32>
    5ed6:	e7f8      	b.n	5eca <__gedf2+0x8a>
    5ed8:	42a5      	cmp	r5, r4
    5eda:	dce2      	bgt.n	5ea2 <__gedf2+0x62>
    5edc:	db05      	blt.n	5eea <__gedf2+0xaa>
    5ede:	455e      	cmp	r6, fp
    5ee0:	d8df      	bhi.n	5ea2 <__gedf2+0x62>
    5ee2:	d008      	beq.n	5ef6 <__gedf2+0xb6>
    5ee4:	2000      	movs	r0, #0
    5ee6:	455e      	cmp	r6, fp
    5ee8:	d2de      	bcs.n	5ea8 <__gedf2+0x68>
    5eea:	4248      	negs	r0, r1
    5eec:	4148      	adcs	r0, r1
    5eee:	2301      	movs	r3, #1
    5ef0:	4240      	negs	r0, r0
    5ef2:	4318      	orrs	r0, r3
    5ef4:	e7d8      	b.n	5ea8 <__gedf2+0x68>
    5ef6:	45c4      	cmp	ip, r8
    5ef8:	d8d3      	bhi.n	5ea2 <__gedf2+0x62>
    5efa:	2000      	movs	r0, #0
    5efc:	45c4      	cmp	ip, r8
    5efe:	d3f4      	bcc.n	5eea <__gedf2+0xaa>
    5f00:	e7d2      	b.n	5ea8 <__gedf2+0x68>
    5f02:	46c0      	nop			; (mov r8, r8)
    5f04:	000007ff 	.word	0x000007ff

00005f08 <__ledf2>:
    5f08:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f0a:	465f      	mov	r7, fp
    5f0c:	464d      	mov	r5, r9
    5f0e:	4644      	mov	r4, r8
    5f10:	4656      	mov	r6, sl
    5f12:	b4f0      	push	{r4, r5, r6, r7}
    5f14:	031c      	lsls	r4, r3, #12
    5f16:	0b24      	lsrs	r4, r4, #12
    5f18:	46a4      	mov	ip, r4
    5f1a:	4c2f      	ldr	r4, [pc, #188]	; (5fd8 <__ledf2+0xd0>)
    5f1c:	030f      	lsls	r7, r1, #12
    5f1e:	004d      	lsls	r5, r1, #1
    5f20:	005e      	lsls	r6, r3, #1
    5f22:	0fc9      	lsrs	r1, r1, #31
    5f24:	4680      	mov	r8, r0
    5f26:	0b3f      	lsrs	r7, r7, #12
    5f28:	0d6d      	lsrs	r5, r5, #21
    5f2a:	468b      	mov	fp, r1
    5f2c:	4691      	mov	r9, r2
    5f2e:	0d76      	lsrs	r6, r6, #21
    5f30:	0fdb      	lsrs	r3, r3, #31
    5f32:	42a5      	cmp	r5, r4
    5f34:	d020      	beq.n	5f78 <__ledf2+0x70>
    5f36:	4c28      	ldr	r4, [pc, #160]	; (5fd8 <__ledf2+0xd0>)
    5f38:	42a6      	cmp	r6, r4
    5f3a:	d022      	beq.n	5f82 <__ledf2+0x7a>
    5f3c:	2d00      	cmp	r5, #0
    5f3e:	d112      	bne.n	5f66 <__ledf2+0x5e>
    5f40:	4338      	orrs	r0, r7
    5f42:	4244      	negs	r4, r0
    5f44:	4144      	adcs	r4, r0
    5f46:	2e00      	cmp	r6, #0
    5f48:	d020      	beq.n	5f8c <__ledf2+0x84>
    5f4a:	2c00      	cmp	r4, #0
    5f4c:	d00d      	beq.n	5f6a <__ledf2+0x62>
    5f4e:	425c      	negs	r4, r3
    5f50:	4163      	adcs	r3, r4
    5f52:	2401      	movs	r4, #1
    5f54:	425b      	negs	r3, r3
    5f56:	431c      	orrs	r4, r3
    5f58:	0020      	movs	r0, r4
    5f5a:	bc3c      	pop	{r2, r3, r4, r5}
    5f5c:	4690      	mov	r8, r2
    5f5e:	4699      	mov	r9, r3
    5f60:	46a2      	mov	sl, r4
    5f62:	46ab      	mov	fp, r5
    5f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5f66:	2e00      	cmp	r6, #0
    5f68:	d017      	beq.n	5f9a <__ledf2+0x92>
    5f6a:	455b      	cmp	r3, fp
    5f6c:	d019      	beq.n	5fa2 <__ledf2+0x9a>
    5f6e:	465b      	mov	r3, fp
    5f70:	425c      	negs	r4, r3
    5f72:	2301      	movs	r3, #1
    5f74:	431c      	orrs	r4, r3
    5f76:	e7ef      	b.n	5f58 <__ledf2+0x50>
    5f78:	0039      	movs	r1, r7
    5f7a:	2402      	movs	r4, #2
    5f7c:	4301      	orrs	r1, r0
    5f7e:	d1eb      	bne.n	5f58 <__ledf2+0x50>
    5f80:	e7d9      	b.n	5f36 <__ledf2+0x2e>
    5f82:	4661      	mov	r1, ip
    5f84:	2402      	movs	r4, #2
    5f86:	4311      	orrs	r1, r2
    5f88:	d1e6      	bne.n	5f58 <__ledf2+0x50>
    5f8a:	e7d7      	b.n	5f3c <__ledf2+0x34>
    5f8c:	4661      	mov	r1, ip
    5f8e:	430a      	orrs	r2, r1
    5f90:	d1db      	bne.n	5f4a <__ledf2+0x42>
    5f92:	2400      	movs	r4, #0
    5f94:	2800      	cmp	r0, #0
    5f96:	d0df      	beq.n	5f58 <__ledf2+0x50>
    5f98:	e7e9      	b.n	5f6e <__ledf2+0x66>
    5f9a:	4661      	mov	r1, ip
    5f9c:	430a      	orrs	r2, r1
    5f9e:	d1e4      	bne.n	5f6a <__ledf2+0x62>
    5fa0:	e7e5      	b.n	5f6e <__ledf2+0x66>
    5fa2:	42b5      	cmp	r5, r6
    5fa4:	dd03      	ble.n	5fae <__ledf2+0xa6>
    5fa6:	2201      	movs	r2, #1
    5fa8:	425c      	negs	r4, r3
    5faa:	4314      	orrs	r4, r2
    5fac:	e7d4      	b.n	5f58 <__ledf2+0x50>
    5fae:	42b5      	cmp	r5, r6
    5fb0:	dbcd      	blt.n	5f4e <__ledf2+0x46>
    5fb2:	4567      	cmp	r7, ip
    5fb4:	d8db      	bhi.n	5f6e <__ledf2+0x66>
    5fb6:	d009      	beq.n	5fcc <__ledf2+0xc4>
    5fb8:	2400      	movs	r4, #0
    5fba:	4567      	cmp	r7, ip
    5fbc:	d2cc      	bcs.n	5f58 <__ledf2+0x50>
    5fbe:	4659      	mov	r1, fp
    5fc0:	424c      	negs	r4, r1
    5fc2:	4161      	adcs	r1, r4
    5fc4:	2401      	movs	r4, #1
    5fc6:	4249      	negs	r1, r1
    5fc8:	430c      	orrs	r4, r1
    5fca:	e7c5      	b.n	5f58 <__ledf2+0x50>
    5fcc:	45c8      	cmp	r8, r9
    5fce:	d8ce      	bhi.n	5f6e <__ledf2+0x66>
    5fd0:	2400      	movs	r4, #0
    5fd2:	45c8      	cmp	r8, r9
    5fd4:	d3f3      	bcc.n	5fbe <__ledf2+0xb6>
    5fd6:	e7bf      	b.n	5f58 <__ledf2+0x50>
    5fd8:	000007ff 	.word	0x000007ff

00005fdc <__aeabi_dmul>:
    5fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fde:	465f      	mov	r7, fp
    5fe0:	4656      	mov	r6, sl
    5fe2:	464d      	mov	r5, r9
    5fe4:	4644      	mov	r4, r8
    5fe6:	b4f0      	push	{r4, r5, r6, r7}
    5fe8:	030d      	lsls	r5, r1, #12
    5fea:	4699      	mov	r9, r3
    5fec:	004e      	lsls	r6, r1, #1
    5fee:	0b2b      	lsrs	r3, r5, #12
    5ff0:	b087      	sub	sp, #28
    5ff2:	0007      	movs	r7, r0
    5ff4:	4692      	mov	sl, r2
    5ff6:	4680      	mov	r8, r0
    5ff8:	469b      	mov	fp, r3
    5ffa:	0d76      	lsrs	r6, r6, #21
    5ffc:	0fcc      	lsrs	r4, r1, #31
    5ffe:	2e00      	cmp	r6, #0
    6000:	d069      	beq.n	60d6 <__aeabi_dmul+0xfa>
    6002:	4b6d      	ldr	r3, [pc, #436]	; (61b8 <__aeabi_dmul+0x1dc>)
    6004:	429e      	cmp	r6, r3
    6006:	d035      	beq.n	6074 <__aeabi_dmul+0x98>
    6008:	465b      	mov	r3, fp
    600a:	2280      	movs	r2, #128	; 0x80
    600c:	00dd      	lsls	r5, r3, #3
    600e:	0412      	lsls	r2, r2, #16
    6010:	0f43      	lsrs	r3, r0, #29
    6012:	4313      	orrs	r3, r2
    6014:	432b      	orrs	r3, r5
    6016:	469b      	mov	fp, r3
    6018:	00c3      	lsls	r3, r0, #3
    601a:	4698      	mov	r8, r3
    601c:	4b67      	ldr	r3, [pc, #412]	; (61bc <__aeabi_dmul+0x1e0>)
    601e:	2700      	movs	r7, #0
    6020:	469c      	mov	ip, r3
    6022:	2300      	movs	r3, #0
    6024:	4466      	add	r6, ip
    6026:	9301      	str	r3, [sp, #4]
    6028:	464a      	mov	r2, r9
    602a:	0315      	lsls	r5, r2, #12
    602c:	0050      	lsls	r0, r2, #1
    602e:	0fd2      	lsrs	r2, r2, #31
    6030:	4653      	mov	r3, sl
    6032:	0b2d      	lsrs	r5, r5, #12
    6034:	0d40      	lsrs	r0, r0, #21
    6036:	4691      	mov	r9, r2
    6038:	d100      	bne.n	603c <__aeabi_dmul+0x60>
    603a:	e076      	b.n	612a <__aeabi_dmul+0x14e>
    603c:	4a5e      	ldr	r2, [pc, #376]	; (61b8 <__aeabi_dmul+0x1dc>)
    603e:	4290      	cmp	r0, r2
    6040:	d06c      	beq.n	611c <__aeabi_dmul+0x140>
    6042:	2280      	movs	r2, #128	; 0x80
    6044:	0f5b      	lsrs	r3, r3, #29
    6046:	0412      	lsls	r2, r2, #16
    6048:	4313      	orrs	r3, r2
    604a:	4a5c      	ldr	r2, [pc, #368]	; (61bc <__aeabi_dmul+0x1e0>)
    604c:	00ed      	lsls	r5, r5, #3
    604e:	4694      	mov	ip, r2
    6050:	431d      	orrs	r5, r3
    6052:	4653      	mov	r3, sl
    6054:	2200      	movs	r2, #0
    6056:	00db      	lsls	r3, r3, #3
    6058:	4460      	add	r0, ip
    605a:	4649      	mov	r1, r9
    605c:	1836      	adds	r6, r6, r0
    605e:	1c70      	adds	r0, r6, #1
    6060:	4061      	eors	r1, r4
    6062:	9002      	str	r0, [sp, #8]
    6064:	4317      	orrs	r7, r2
    6066:	2f0f      	cmp	r7, #15
    6068:	d900      	bls.n	606c <__aeabi_dmul+0x90>
    606a:	e0af      	b.n	61cc <__aeabi_dmul+0x1f0>
    606c:	4854      	ldr	r0, [pc, #336]	; (61c0 <__aeabi_dmul+0x1e4>)
    606e:	00bf      	lsls	r7, r7, #2
    6070:	59c7      	ldr	r7, [r0, r7]
    6072:	46bf      	mov	pc, r7
    6074:	465b      	mov	r3, fp
    6076:	431f      	orrs	r7, r3
    6078:	d000      	beq.n	607c <__aeabi_dmul+0xa0>
    607a:	e088      	b.n	618e <__aeabi_dmul+0x1b2>
    607c:	2300      	movs	r3, #0
    607e:	469b      	mov	fp, r3
    6080:	4698      	mov	r8, r3
    6082:	3302      	adds	r3, #2
    6084:	2708      	movs	r7, #8
    6086:	9301      	str	r3, [sp, #4]
    6088:	e7ce      	b.n	6028 <__aeabi_dmul+0x4c>
    608a:	4649      	mov	r1, r9
    608c:	2a02      	cmp	r2, #2
    608e:	d06a      	beq.n	6166 <__aeabi_dmul+0x18a>
    6090:	2a03      	cmp	r2, #3
    6092:	d100      	bne.n	6096 <__aeabi_dmul+0xba>
    6094:	e209      	b.n	64aa <__aeabi_dmul+0x4ce>
    6096:	2a01      	cmp	r2, #1
    6098:	d000      	beq.n	609c <__aeabi_dmul+0xc0>
    609a:	e1bb      	b.n	6414 <__aeabi_dmul+0x438>
    609c:	4011      	ands	r1, r2
    609e:	2200      	movs	r2, #0
    60a0:	2300      	movs	r3, #0
    60a2:	2500      	movs	r5, #0
    60a4:	4690      	mov	r8, r2
    60a6:	b2cc      	uxtb	r4, r1
    60a8:	2100      	movs	r1, #0
    60aa:	032d      	lsls	r5, r5, #12
    60ac:	0d0a      	lsrs	r2, r1, #20
    60ae:	0512      	lsls	r2, r2, #20
    60b0:	0b2d      	lsrs	r5, r5, #12
    60b2:	4315      	orrs	r5, r2
    60b4:	4a43      	ldr	r2, [pc, #268]	; (61c4 <__aeabi_dmul+0x1e8>)
    60b6:	051b      	lsls	r3, r3, #20
    60b8:	4015      	ands	r5, r2
    60ba:	431d      	orrs	r5, r3
    60bc:	006d      	lsls	r5, r5, #1
    60be:	07e4      	lsls	r4, r4, #31
    60c0:	086d      	lsrs	r5, r5, #1
    60c2:	4325      	orrs	r5, r4
    60c4:	4640      	mov	r0, r8
    60c6:	0029      	movs	r1, r5
    60c8:	b007      	add	sp, #28
    60ca:	bc3c      	pop	{r2, r3, r4, r5}
    60cc:	4690      	mov	r8, r2
    60ce:	4699      	mov	r9, r3
    60d0:	46a2      	mov	sl, r4
    60d2:	46ab      	mov	fp, r5
    60d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60d6:	4303      	orrs	r3, r0
    60d8:	d052      	beq.n	6180 <__aeabi_dmul+0x1a4>
    60da:	465b      	mov	r3, fp
    60dc:	2b00      	cmp	r3, #0
    60de:	d100      	bne.n	60e2 <__aeabi_dmul+0x106>
    60e0:	e18a      	b.n	63f8 <__aeabi_dmul+0x41c>
    60e2:	4658      	mov	r0, fp
    60e4:	f000 fef8 	bl	6ed8 <__clzsi2>
    60e8:	0003      	movs	r3, r0
    60ea:	3b0b      	subs	r3, #11
    60ec:	2b1c      	cmp	r3, #28
    60ee:	dd00      	ble.n	60f2 <__aeabi_dmul+0x116>
    60f0:	e17b      	b.n	63ea <__aeabi_dmul+0x40e>
    60f2:	221d      	movs	r2, #29
    60f4:	1ad3      	subs	r3, r2, r3
    60f6:	003a      	movs	r2, r7
    60f8:	0001      	movs	r1, r0
    60fa:	465d      	mov	r5, fp
    60fc:	40da      	lsrs	r2, r3
    60fe:	3908      	subs	r1, #8
    6100:	408d      	lsls	r5, r1
    6102:	0013      	movs	r3, r2
    6104:	408f      	lsls	r7, r1
    6106:	432b      	orrs	r3, r5
    6108:	469b      	mov	fp, r3
    610a:	46b8      	mov	r8, r7
    610c:	4b2e      	ldr	r3, [pc, #184]	; (61c8 <__aeabi_dmul+0x1ec>)
    610e:	2700      	movs	r7, #0
    6110:	469c      	mov	ip, r3
    6112:	2300      	movs	r3, #0
    6114:	4460      	add	r0, ip
    6116:	4246      	negs	r6, r0
    6118:	9301      	str	r3, [sp, #4]
    611a:	e785      	b.n	6028 <__aeabi_dmul+0x4c>
    611c:	4652      	mov	r2, sl
    611e:	432a      	orrs	r2, r5
    6120:	d12c      	bne.n	617c <__aeabi_dmul+0x1a0>
    6122:	2500      	movs	r5, #0
    6124:	2300      	movs	r3, #0
    6126:	2202      	movs	r2, #2
    6128:	e797      	b.n	605a <__aeabi_dmul+0x7e>
    612a:	4652      	mov	r2, sl
    612c:	432a      	orrs	r2, r5
    612e:	d021      	beq.n	6174 <__aeabi_dmul+0x198>
    6130:	2d00      	cmp	r5, #0
    6132:	d100      	bne.n	6136 <__aeabi_dmul+0x15a>
    6134:	e154      	b.n	63e0 <__aeabi_dmul+0x404>
    6136:	0028      	movs	r0, r5
    6138:	f000 fece 	bl	6ed8 <__clzsi2>
    613c:	0003      	movs	r3, r0
    613e:	3b0b      	subs	r3, #11
    6140:	2b1c      	cmp	r3, #28
    6142:	dd00      	ble.n	6146 <__aeabi_dmul+0x16a>
    6144:	e146      	b.n	63d4 <__aeabi_dmul+0x3f8>
    6146:	211d      	movs	r1, #29
    6148:	1acb      	subs	r3, r1, r3
    614a:	4651      	mov	r1, sl
    614c:	0002      	movs	r2, r0
    614e:	40d9      	lsrs	r1, r3
    6150:	4653      	mov	r3, sl
    6152:	3a08      	subs	r2, #8
    6154:	4095      	lsls	r5, r2
    6156:	4093      	lsls	r3, r2
    6158:	430d      	orrs	r5, r1
    615a:	4a1b      	ldr	r2, [pc, #108]	; (61c8 <__aeabi_dmul+0x1ec>)
    615c:	4694      	mov	ip, r2
    615e:	4460      	add	r0, ip
    6160:	4240      	negs	r0, r0
    6162:	2200      	movs	r2, #0
    6164:	e779      	b.n	605a <__aeabi_dmul+0x7e>
    6166:	2401      	movs	r4, #1
    6168:	2200      	movs	r2, #0
    616a:	400c      	ands	r4, r1
    616c:	4b12      	ldr	r3, [pc, #72]	; (61b8 <__aeabi_dmul+0x1dc>)
    616e:	2500      	movs	r5, #0
    6170:	4690      	mov	r8, r2
    6172:	e799      	b.n	60a8 <__aeabi_dmul+0xcc>
    6174:	2500      	movs	r5, #0
    6176:	2300      	movs	r3, #0
    6178:	2201      	movs	r2, #1
    617a:	e76e      	b.n	605a <__aeabi_dmul+0x7e>
    617c:	2203      	movs	r2, #3
    617e:	e76c      	b.n	605a <__aeabi_dmul+0x7e>
    6180:	2300      	movs	r3, #0
    6182:	469b      	mov	fp, r3
    6184:	4698      	mov	r8, r3
    6186:	3301      	adds	r3, #1
    6188:	2704      	movs	r7, #4
    618a:	9301      	str	r3, [sp, #4]
    618c:	e74c      	b.n	6028 <__aeabi_dmul+0x4c>
    618e:	2303      	movs	r3, #3
    6190:	270c      	movs	r7, #12
    6192:	9301      	str	r3, [sp, #4]
    6194:	e748      	b.n	6028 <__aeabi_dmul+0x4c>
    6196:	2300      	movs	r3, #0
    6198:	2580      	movs	r5, #128	; 0x80
    619a:	4698      	mov	r8, r3
    619c:	2400      	movs	r4, #0
    619e:	032d      	lsls	r5, r5, #12
    61a0:	4b05      	ldr	r3, [pc, #20]	; (61b8 <__aeabi_dmul+0x1dc>)
    61a2:	e781      	b.n	60a8 <__aeabi_dmul+0xcc>
    61a4:	465d      	mov	r5, fp
    61a6:	4643      	mov	r3, r8
    61a8:	9a01      	ldr	r2, [sp, #4]
    61aa:	e76f      	b.n	608c <__aeabi_dmul+0xb0>
    61ac:	465d      	mov	r5, fp
    61ae:	4643      	mov	r3, r8
    61b0:	0021      	movs	r1, r4
    61b2:	9a01      	ldr	r2, [sp, #4]
    61b4:	e76a      	b.n	608c <__aeabi_dmul+0xb0>
    61b6:	46c0      	nop			; (mov r8, r8)
    61b8:	000007ff 	.word	0x000007ff
    61bc:	fffffc01 	.word	0xfffffc01
    61c0:	00007028 	.word	0x00007028
    61c4:	800fffff 	.word	0x800fffff
    61c8:	000003f3 	.word	0x000003f3
    61cc:	4642      	mov	r2, r8
    61ce:	0c12      	lsrs	r2, r2, #16
    61d0:	4691      	mov	r9, r2
    61d2:	0c1a      	lsrs	r2, r3, #16
    61d4:	4694      	mov	ip, r2
    61d6:	4642      	mov	r2, r8
    61d8:	0417      	lsls	r7, r2, #16
    61da:	464a      	mov	r2, r9
    61dc:	041b      	lsls	r3, r3, #16
    61de:	0c1b      	lsrs	r3, r3, #16
    61e0:	435a      	muls	r2, r3
    61e2:	4660      	mov	r0, ip
    61e4:	4690      	mov	r8, r2
    61e6:	464a      	mov	r2, r9
    61e8:	4342      	muls	r2, r0
    61ea:	0010      	movs	r0, r2
    61ec:	9203      	str	r2, [sp, #12]
    61ee:	4662      	mov	r2, ip
    61f0:	001c      	movs	r4, r3
    61f2:	0c3f      	lsrs	r7, r7, #16
    61f4:	437a      	muls	r2, r7
    61f6:	437c      	muls	r4, r7
    61f8:	4442      	add	r2, r8
    61fa:	9201      	str	r2, [sp, #4]
    61fc:	0c22      	lsrs	r2, r4, #16
    61fe:	4692      	mov	sl, r2
    6200:	9a01      	ldr	r2, [sp, #4]
    6202:	4452      	add	r2, sl
    6204:	4590      	cmp	r8, r2
    6206:	d906      	bls.n	6216 <__aeabi_dmul+0x23a>
    6208:	4682      	mov	sl, r0
    620a:	2080      	movs	r0, #128	; 0x80
    620c:	0240      	lsls	r0, r0, #9
    620e:	4680      	mov	r8, r0
    6210:	44c2      	add	sl, r8
    6212:	4650      	mov	r0, sl
    6214:	9003      	str	r0, [sp, #12]
    6216:	0c10      	lsrs	r0, r2, #16
    6218:	9004      	str	r0, [sp, #16]
    621a:	4648      	mov	r0, r9
    621c:	0424      	lsls	r4, r4, #16
    621e:	0c24      	lsrs	r4, r4, #16
    6220:	0412      	lsls	r2, r2, #16
    6222:	1912      	adds	r2, r2, r4
    6224:	9205      	str	r2, [sp, #20]
    6226:	0c2a      	lsrs	r2, r5, #16
    6228:	042d      	lsls	r5, r5, #16
    622a:	0c2d      	lsrs	r5, r5, #16
    622c:	4368      	muls	r0, r5
    622e:	002c      	movs	r4, r5
    6230:	4682      	mov	sl, r0
    6232:	4648      	mov	r0, r9
    6234:	437c      	muls	r4, r7
    6236:	4350      	muls	r0, r2
    6238:	4681      	mov	r9, r0
    623a:	0c20      	lsrs	r0, r4, #16
    623c:	4680      	mov	r8, r0
    623e:	4357      	muls	r7, r2
    6240:	4457      	add	r7, sl
    6242:	4447      	add	r7, r8
    6244:	45ba      	cmp	sl, r7
    6246:	d903      	bls.n	6250 <__aeabi_dmul+0x274>
    6248:	2080      	movs	r0, #128	; 0x80
    624a:	0240      	lsls	r0, r0, #9
    624c:	4680      	mov	r8, r0
    624e:	44c1      	add	r9, r8
    6250:	0c38      	lsrs	r0, r7, #16
    6252:	043f      	lsls	r7, r7, #16
    6254:	46b8      	mov	r8, r7
    6256:	4448      	add	r0, r9
    6258:	0424      	lsls	r4, r4, #16
    625a:	0c24      	lsrs	r4, r4, #16
    625c:	9001      	str	r0, [sp, #4]
    625e:	9804      	ldr	r0, [sp, #16]
    6260:	44a0      	add	r8, r4
    6262:	4440      	add	r0, r8
    6264:	9004      	str	r0, [sp, #16]
    6266:	4658      	mov	r0, fp
    6268:	0c00      	lsrs	r0, r0, #16
    626a:	4681      	mov	r9, r0
    626c:	4658      	mov	r0, fp
    626e:	0404      	lsls	r4, r0, #16
    6270:	0c20      	lsrs	r0, r4, #16
    6272:	4682      	mov	sl, r0
    6274:	0007      	movs	r7, r0
    6276:	4648      	mov	r0, r9
    6278:	435f      	muls	r7, r3
    627a:	464c      	mov	r4, r9
    627c:	4343      	muls	r3, r0
    627e:	4660      	mov	r0, ip
    6280:	4360      	muls	r0, r4
    6282:	4664      	mov	r4, ip
    6284:	4683      	mov	fp, r0
    6286:	4650      	mov	r0, sl
    6288:	4344      	muls	r4, r0
    628a:	0c38      	lsrs	r0, r7, #16
    628c:	4684      	mov	ip, r0
    628e:	18e4      	adds	r4, r4, r3
    6290:	4464      	add	r4, ip
    6292:	42a3      	cmp	r3, r4
    6294:	d903      	bls.n	629e <__aeabi_dmul+0x2c2>
    6296:	2380      	movs	r3, #128	; 0x80
    6298:	025b      	lsls	r3, r3, #9
    629a:	469c      	mov	ip, r3
    629c:	44e3      	add	fp, ip
    629e:	4648      	mov	r0, r9
    62a0:	043f      	lsls	r7, r7, #16
    62a2:	0c23      	lsrs	r3, r4, #16
    62a4:	0c3f      	lsrs	r7, r7, #16
    62a6:	0424      	lsls	r4, r4, #16
    62a8:	19e4      	adds	r4, r4, r7
    62aa:	4657      	mov	r7, sl
    62ac:	4368      	muls	r0, r5
    62ae:	436f      	muls	r7, r5
    62b0:	4684      	mov	ip, r0
    62b2:	464d      	mov	r5, r9
    62b4:	4650      	mov	r0, sl
    62b6:	4355      	muls	r5, r2
    62b8:	4342      	muls	r2, r0
    62ba:	0c38      	lsrs	r0, r7, #16
    62bc:	4681      	mov	r9, r0
    62be:	4462      	add	r2, ip
    62c0:	444a      	add	r2, r9
    62c2:	445b      	add	r3, fp
    62c4:	4594      	cmp	ip, r2
    62c6:	d903      	bls.n	62d0 <__aeabi_dmul+0x2f4>
    62c8:	2080      	movs	r0, #128	; 0x80
    62ca:	0240      	lsls	r0, r0, #9
    62cc:	4684      	mov	ip, r0
    62ce:	4465      	add	r5, ip
    62d0:	9803      	ldr	r0, [sp, #12]
    62d2:	043f      	lsls	r7, r7, #16
    62d4:	4683      	mov	fp, r0
    62d6:	9804      	ldr	r0, [sp, #16]
    62d8:	0c3f      	lsrs	r7, r7, #16
    62da:	4684      	mov	ip, r0
    62dc:	44e3      	add	fp, ip
    62de:	45c3      	cmp	fp, r8
    62e0:	4180      	sbcs	r0, r0
    62e2:	4240      	negs	r0, r0
    62e4:	4682      	mov	sl, r0
    62e6:	0410      	lsls	r0, r2, #16
    62e8:	4684      	mov	ip, r0
    62ea:	9801      	ldr	r0, [sp, #4]
    62ec:	4467      	add	r7, ip
    62ee:	4684      	mov	ip, r0
    62f0:	4467      	add	r7, ip
    62f2:	44a3      	add	fp, r4
    62f4:	46bc      	mov	ip, r7
    62f6:	45a3      	cmp	fp, r4
    62f8:	41a4      	sbcs	r4, r4
    62fa:	4699      	mov	r9, r3
    62fc:	44d4      	add	ip, sl
    62fe:	4264      	negs	r4, r4
    6300:	4287      	cmp	r7, r0
    6302:	41bf      	sbcs	r7, r7
    6304:	45d4      	cmp	ip, sl
    6306:	4180      	sbcs	r0, r0
    6308:	44e1      	add	r9, ip
    630a:	46a0      	mov	r8, r4
    630c:	4599      	cmp	r9, r3
    630e:	419b      	sbcs	r3, r3
    6310:	427f      	negs	r7, r7
    6312:	4240      	negs	r0, r0
    6314:	44c8      	add	r8, r9
    6316:	4307      	orrs	r7, r0
    6318:	0c12      	lsrs	r2, r2, #16
    631a:	18ba      	adds	r2, r7, r2
    631c:	45a0      	cmp	r8, r4
    631e:	41a4      	sbcs	r4, r4
    6320:	425f      	negs	r7, r3
    6322:	003b      	movs	r3, r7
    6324:	4264      	negs	r4, r4
    6326:	4323      	orrs	r3, r4
    6328:	18d7      	adds	r7, r2, r3
    632a:	4643      	mov	r3, r8
    632c:	197d      	adds	r5, r7, r5
    632e:	0ddb      	lsrs	r3, r3, #23
    6330:	026d      	lsls	r5, r5, #9
    6332:	431d      	orrs	r5, r3
    6334:	465b      	mov	r3, fp
    6336:	025a      	lsls	r2, r3, #9
    6338:	9b05      	ldr	r3, [sp, #20]
    633a:	431a      	orrs	r2, r3
    633c:	1e53      	subs	r3, r2, #1
    633e:	419a      	sbcs	r2, r3
    6340:	465b      	mov	r3, fp
    6342:	0ddb      	lsrs	r3, r3, #23
    6344:	431a      	orrs	r2, r3
    6346:	4643      	mov	r3, r8
    6348:	025b      	lsls	r3, r3, #9
    634a:	4313      	orrs	r3, r2
    634c:	01ea      	lsls	r2, r5, #7
    634e:	d507      	bpl.n	6360 <__aeabi_dmul+0x384>
    6350:	2201      	movs	r2, #1
    6352:	085c      	lsrs	r4, r3, #1
    6354:	4013      	ands	r3, r2
    6356:	4323      	orrs	r3, r4
    6358:	07ea      	lsls	r2, r5, #31
    635a:	9e02      	ldr	r6, [sp, #8]
    635c:	4313      	orrs	r3, r2
    635e:	086d      	lsrs	r5, r5, #1
    6360:	4a57      	ldr	r2, [pc, #348]	; (64c0 <__aeabi_dmul+0x4e4>)
    6362:	18b2      	adds	r2, r6, r2
    6364:	2a00      	cmp	r2, #0
    6366:	dd4b      	ble.n	6400 <__aeabi_dmul+0x424>
    6368:	0758      	lsls	r0, r3, #29
    636a:	d009      	beq.n	6380 <__aeabi_dmul+0x3a4>
    636c:	200f      	movs	r0, #15
    636e:	4018      	ands	r0, r3
    6370:	2804      	cmp	r0, #4
    6372:	d005      	beq.n	6380 <__aeabi_dmul+0x3a4>
    6374:	1d18      	adds	r0, r3, #4
    6376:	4298      	cmp	r0, r3
    6378:	419b      	sbcs	r3, r3
    637a:	425b      	negs	r3, r3
    637c:	18ed      	adds	r5, r5, r3
    637e:	0003      	movs	r3, r0
    6380:	01e8      	lsls	r0, r5, #7
    6382:	d504      	bpl.n	638e <__aeabi_dmul+0x3b2>
    6384:	4a4f      	ldr	r2, [pc, #316]	; (64c4 <__aeabi_dmul+0x4e8>)
    6386:	4015      	ands	r5, r2
    6388:	2280      	movs	r2, #128	; 0x80
    638a:	00d2      	lsls	r2, r2, #3
    638c:	18b2      	adds	r2, r6, r2
    638e:	484e      	ldr	r0, [pc, #312]	; (64c8 <__aeabi_dmul+0x4ec>)
    6390:	4282      	cmp	r2, r0
    6392:	dd00      	ble.n	6396 <__aeabi_dmul+0x3ba>
    6394:	e6e7      	b.n	6166 <__aeabi_dmul+0x18a>
    6396:	2401      	movs	r4, #1
    6398:	08db      	lsrs	r3, r3, #3
    639a:	0768      	lsls	r0, r5, #29
    639c:	4318      	orrs	r0, r3
    639e:	026d      	lsls	r5, r5, #9
    63a0:	0553      	lsls	r3, r2, #21
    63a2:	4680      	mov	r8, r0
    63a4:	0b2d      	lsrs	r5, r5, #12
    63a6:	0d5b      	lsrs	r3, r3, #21
    63a8:	400c      	ands	r4, r1
    63aa:	e67d      	b.n	60a8 <__aeabi_dmul+0xcc>
    63ac:	2280      	movs	r2, #128	; 0x80
    63ae:	4659      	mov	r1, fp
    63b0:	0312      	lsls	r2, r2, #12
    63b2:	4211      	tst	r1, r2
    63b4:	d008      	beq.n	63c8 <__aeabi_dmul+0x3ec>
    63b6:	4215      	tst	r5, r2
    63b8:	d106      	bne.n	63c8 <__aeabi_dmul+0x3ec>
    63ba:	4315      	orrs	r5, r2
    63bc:	032d      	lsls	r5, r5, #12
    63be:	4698      	mov	r8, r3
    63c0:	0b2d      	lsrs	r5, r5, #12
    63c2:	464c      	mov	r4, r9
    63c4:	4b41      	ldr	r3, [pc, #260]	; (64cc <__aeabi_dmul+0x4f0>)
    63c6:	e66f      	b.n	60a8 <__aeabi_dmul+0xcc>
    63c8:	465d      	mov	r5, fp
    63ca:	4315      	orrs	r5, r2
    63cc:	032d      	lsls	r5, r5, #12
    63ce:	0b2d      	lsrs	r5, r5, #12
    63d0:	4b3e      	ldr	r3, [pc, #248]	; (64cc <__aeabi_dmul+0x4f0>)
    63d2:	e669      	b.n	60a8 <__aeabi_dmul+0xcc>
    63d4:	0003      	movs	r3, r0
    63d6:	4655      	mov	r5, sl
    63d8:	3b28      	subs	r3, #40	; 0x28
    63da:	409d      	lsls	r5, r3
    63dc:	2300      	movs	r3, #0
    63de:	e6bc      	b.n	615a <__aeabi_dmul+0x17e>
    63e0:	4650      	mov	r0, sl
    63e2:	f000 fd79 	bl	6ed8 <__clzsi2>
    63e6:	3020      	adds	r0, #32
    63e8:	e6a8      	b.n	613c <__aeabi_dmul+0x160>
    63ea:	0003      	movs	r3, r0
    63ec:	3b28      	subs	r3, #40	; 0x28
    63ee:	409f      	lsls	r7, r3
    63f0:	2300      	movs	r3, #0
    63f2:	46bb      	mov	fp, r7
    63f4:	4698      	mov	r8, r3
    63f6:	e689      	b.n	610c <__aeabi_dmul+0x130>
    63f8:	f000 fd6e 	bl	6ed8 <__clzsi2>
    63fc:	3020      	adds	r0, #32
    63fe:	e673      	b.n	60e8 <__aeabi_dmul+0x10c>
    6400:	2401      	movs	r4, #1
    6402:	1aa6      	subs	r6, r4, r2
    6404:	2e38      	cmp	r6, #56	; 0x38
    6406:	dd07      	ble.n	6418 <__aeabi_dmul+0x43c>
    6408:	2200      	movs	r2, #0
    640a:	400c      	ands	r4, r1
    640c:	2300      	movs	r3, #0
    640e:	2500      	movs	r5, #0
    6410:	4690      	mov	r8, r2
    6412:	e649      	b.n	60a8 <__aeabi_dmul+0xcc>
    6414:	9e02      	ldr	r6, [sp, #8]
    6416:	e7a3      	b.n	6360 <__aeabi_dmul+0x384>
    6418:	2e1f      	cmp	r6, #31
    641a:	dc20      	bgt.n	645e <__aeabi_dmul+0x482>
    641c:	2220      	movs	r2, #32
    641e:	002c      	movs	r4, r5
    6420:	0018      	movs	r0, r3
    6422:	1b92      	subs	r2, r2, r6
    6424:	40f0      	lsrs	r0, r6
    6426:	4094      	lsls	r4, r2
    6428:	4093      	lsls	r3, r2
    642a:	4304      	orrs	r4, r0
    642c:	1e58      	subs	r0, r3, #1
    642e:	4183      	sbcs	r3, r0
    6430:	431c      	orrs	r4, r3
    6432:	40f5      	lsrs	r5, r6
    6434:	0763      	lsls	r3, r4, #29
    6436:	d009      	beq.n	644c <__aeabi_dmul+0x470>
    6438:	230f      	movs	r3, #15
    643a:	4023      	ands	r3, r4
    643c:	2b04      	cmp	r3, #4
    643e:	d005      	beq.n	644c <__aeabi_dmul+0x470>
    6440:	0023      	movs	r3, r4
    6442:	1d1c      	adds	r4, r3, #4
    6444:	429c      	cmp	r4, r3
    6446:	4192      	sbcs	r2, r2
    6448:	4252      	negs	r2, r2
    644a:	18ad      	adds	r5, r5, r2
    644c:	022b      	lsls	r3, r5, #8
    644e:	d51f      	bpl.n	6490 <__aeabi_dmul+0x4b4>
    6450:	2401      	movs	r4, #1
    6452:	2200      	movs	r2, #0
    6454:	400c      	ands	r4, r1
    6456:	2301      	movs	r3, #1
    6458:	2500      	movs	r5, #0
    645a:	4690      	mov	r8, r2
    645c:	e624      	b.n	60a8 <__aeabi_dmul+0xcc>
    645e:	201f      	movs	r0, #31
    6460:	002c      	movs	r4, r5
    6462:	4240      	negs	r0, r0
    6464:	1a82      	subs	r2, r0, r2
    6466:	40d4      	lsrs	r4, r2
    6468:	2e20      	cmp	r6, #32
    646a:	d01c      	beq.n	64a6 <__aeabi_dmul+0x4ca>
    646c:	2240      	movs	r2, #64	; 0x40
    646e:	1b96      	subs	r6, r2, r6
    6470:	40b5      	lsls	r5, r6
    6472:	432b      	orrs	r3, r5
    6474:	1e58      	subs	r0, r3, #1
    6476:	4183      	sbcs	r3, r0
    6478:	2007      	movs	r0, #7
    647a:	4323      	orrs	r3, r4
    647c:	4018      	ands	r0, r3
    647e:	2500      	movs	r5, #0
    6480:	2800      	cmp	r0, #0
    6482:	d009      	beq.n	6498 <__aeabi_dmul+0x4bc>
    6484:	220f      	movs	r2, #15
    6486:	2500      	movs	r5, #0
    6488:	401a      	ands	r2, r3
    648a:	001c      	movs	r4, r3
    648c:	2a04      	cmp	r2, #4
    648e:	d1d8      	bne.n	6442 <__aeabi_dmul+0x466>
    6490:	0023      	movs	r3, r4
    6492:	0768      	lsls	r0, r5, #29
    6494:	026d      	lsls	r5, r5, #9
    6496:	0b2d      	lsrs	r5, r5, #12
    6498:	2401      	movs	r4, #1
    649a:	08db      	lsrs	r3, r3, #3
    649c:	4303      	orrs	r3, r0
    649e:	4698      	mov	r8, r3
    64a0:	400c      	ands	r4, r1
    64a2:	2300      	movs	r3, #0
    64a4:	e600      	b.n	60a8 <__aeabi_dmul+0xcc>
    64a6:	2500      	movs	r5, #0
    64a8:	e7e3      	b.n	6472 <__aeabi_dmul+0x496>
    64aa:	2280      	movs	r2, #128	; 0x80
    64ac:	2401      	movs	r4, #1
    64ae:	0312      	lsls	r2, r2, #12
    64b0:	4315      	orrs	r5, r2
    64b2:	032d      	lsls	r5, r5, #12
    64b4:	4698      	mov	r8, r3
    64b6:	0b2d      	lsrs	r5, r5, #12
    64b8:	400c      	ands	r4, r1
    64ba:	4b04      	ldr	r3, [pc, #16]	; (64cc <__aeabi_dmul+0x4f0>)
    64bc:	e5f4      	b.n	60a8 <__aeabi_dmul+0xcc>
    64be:	46c0      	nop			; (mov r8, r8)
    64c0:	000003ff 	.word	0x000003ff
    64c4:	feffffff 	.word	0xfeffffff
    64c8:	000007fe 	.word	0x000007fe
    64cc:	000007ff 	.word	0x000007ff

000064d0 <__aeabi_dsub>:
    64d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    64d2:	4657      	mov	r7, sl
    64d4:	464e      	mov	r6, r9
    64d6:	4645      	mov	r5, r8
    64d8:	b4e0      	push	{r5, r6, r7}
    64da:	000e      	movs	r6, r1
    64dc:	0011      	movs	r1, r2
    64de:	0ff2      	lsrs	r2, r6, #31
    64e0:	4692      	mov	sl, r2
    64e2:	00c5      	lsls	r5, r0, #3
    64e4:	0f42      	lsrs	r2, r0, #29
    64e6:	0318      	lsls	r0, r3, #12
    64e8:	0337      	lsls	r7, r6, #12
    64ea:	0074      	lsls	r4, r6, #1
    64ec:	0a40      	lsrs	r0, r0, #9
    64ee:	0f4e      	lsrs	r6, r1, #29
    64f0:	0a7f      	lsrs	r7, r7, #9
    64f2:	4330      	orrs	r0, r6
    64f4:	4ecf      	ldr	r6, [pc, #828]	; (6834 <__aeabi_dsub+0x364>)
    64f6:	4317      	orrs	r7, r2
    64f8:	005a      	lsls	r2, r3, #1
    64fa:	0d64      	lsrs	r4, r4, #21
    64fc:	0d52      	lsrs	r2, r2, #21
    64fe:	0fdb      	lsrs	r3, r3, #31
    6500:	00c9      	lsls	r1, r1, #3
    6502:	42b2      	cmp	r2, r6
    6504:	d100      	bne.n	6508 <__aeabi_dsub+0x38>
    6506:	e0e5      	b.n	66d4 <__aeabi_dsub+0x204>
    6508:	2601      	movs	r6, #1
    650a:	4073      	eors	r3, r6
    650c:	1aa6      	subs	r6, r4, r2
    650e:	46b4      	mov	ip, r6
    6510:	4553      	cmp	r3, sl
    6512:	d100      	bne.n	6516 <__aeabi_dsub+0x46>
    6514:	e0af      	b.n	6676 <__aeabi_dsub+0x1a6>
    6516:	2e00      	cmp	r6, #0
    6518:	dc00      	bgt.n	651c <__aeabi_dsub+0x4c>
    651a:	e10d      	b.n	6738 <__aeabi_dsub+0x268>
    651c:	2a00      	cmp	r2, #0
    651e:	d13a      	bne.n	6596 <__aeabi_dsub+0xc6>
    6520:	0003      	movs	r3, r0
    6522:	430b      	orrs	r3, r1
    6524:	d000      	beq.n	6528 <__aeabi_dsub+0x58>
    6526:	e0e4      	b.n	66f2 <__aeabi_dsub+0x222>
    6528:	076b      	lsls	r3, r5, #29
    652a:	d009      	beq.n	6540 <__aeabi_dsub+0x70>
    652c:	230f      	movs	r3, #15
    652e:	402b      	ands	r3, r5
    6530:	2b04      	cmp	r3, #4
    6532:	d005      	beq.n	6540 <__aeabi_dsub+0x70>
    6534:	1d2b      	adds	r3, r5, #4
    6536:	42ab      	cmp	r3, r5
    6538:	41ad      	sbcs	r5, r5
    653a:	426d      	negs	r5, r5
    653c:	197f      	adds	r7, r7, r5
    653e:	001d      	movs	r5, r3
    6540:	023b      	lsls	r3, r7, #8
    6542:	d400      	bmi.n	6546 <__aeabi_dsub+0x76>
    6544:	e088      	b.n	6658 <__aeabi_dsub+0x188>
    6546:	4bbb      	ldr	r3, [pc, #748]	; (6834 <__aeabi_dsub+0x364>)
    6548:	3401      	adds	r4, #1
    654a:	429c      	cmp	r4, r3
    654c:	d100      	bne.n	6550 <__aeabi_dsub+0x80>
    654e:	e110      	b.n	6772 <__aeabi_dsub+0x2a2>
    6550:	003a      	movs	r2, r7
    6552:	4bb9      	ldr	r3, [pc, #740]	; (6838 <__aeabi_dsub+0x368>)
    6554:	4651      	mov	r1, sl
    6556:	401a      	ands	r2, r3
    6558:	2301      	movs	r3, #1
    655a:	0750      	lsls	r0, r2, #29
    655c:	08ed      	lsrs	r5, r5, #3
    655e:	0252      	lsls	r2, r2, #9
    6560:	0564      	lsls	r4, r4, #21
    6562:	4305      	orrs	r5, r0
    6564:	0b12      	lsrs	r2, r2, #12
    6566:	0d64      	lsrs	r4, r4, #21
    6568:	400b      	ands	r3, r1
    656a:	2100      	movs	r1, #0
    656c:	0028      	movs	r0, r5
    656e:	0312      	lsls	r2, r2, #12
    6570:	0d0d      	lsrs	r5, r1, #20
    6572:	0b12      	lsrs	r2, r2, #12
    6574:	0564      	lsls	r4, r4, #21
    6576:	052d      	lsls	r5, r5, #20
    6578:	4315      	orrs	r5, r2
    657a:	0862      	lsrs	r2, r4, #1
    657c:	4caf      	ldr	r4, [pc, #700]	; (683c <__aeabi_dsub+0x36c>)
    657e:	07db      	lsls	r3, r3, #31
    6580:	402c      	ands	r4, r5
    6582:	4314      	orrs	r4, r2
    6584:	0064      	lsls	r4, r4, #1
    6586:	0864      	lsrs	r4, r4, #1
    6588:	431c      	orrs	r4, r3
    658a:	0021      	movs	r1, r4
    658c:	bc1c      	pop	{r2, r3, r4}
    658e:	4690      	mov	r8, r2
    6590:	4699      	mov	r9, r3
    6592:	46a2      	mov	sl, r4
    6594:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6596:	4ba7      	ldr	r3, [pc, #668]	; (6834 <__aeabi_dsub+0x364>)
    6598:	429c      	cmp	r4, r3
    659a:	d0c5      	beq.n	6528 <__aeabi_dsub+0x58>
    659c:	2380      	movs	r3, #128	; 0x80
    659e:	041b      	lsls	r3, r3, #16
    65a0:	4318      	orrs	r0, r3
    65a2:	4663      	mov	r3, ip
    65a4:	2b38      	cmp	r3, #56	; 0x38
    65a6:	dd00      	ble.n	65aa <__aeabi_dsub+0xda>
    65a8:	e0fd      	b.n	67a6 <__aeabi_dsub+0x2d6>
    65aa:	2b1f      	cmp	r3, #31
    65ac:	dd00      	ble.n	65b0 <__aeabi_dsub+0xe0>
    65ae:	e130      	b.n	6812 <__aeabi_dsub+0x342>
    65b0:	4662      	mov	r2, ip
    65b2:	2320      	movs	r3, #32
    65b4:	1a9b      	subs	r3, r3, r2
    65b6:	0002      	movs	r2, r0
    65b8:	409a      	lsls	r2, r3
    65ba:	4666      	mov	r6, ip
    65bc:	4690      	mov	r8, r2
    65be:	000a      	movs	r2, r1
    65c0:	4099      	lsls	r1, r3
    65c2:	40f2      	lsrs	r2, r6
    65c4:	4646      	mov	r6, r8
    65c6:	1e4b      	subs	r3, r1, #1
    65c8:	4199      	sbcs	r1, r3
    65ca:	4332      	orrs	r2, r6
    65cc:	4311      	orrs	r1, r2
    65ce:	4663      	mov	r3, ip
    65d0:	0002      	movs	r2, r0
    65d2:	40da      	lsrs	r2, r3
    65d4:	1a69      	subs	r1, r5, r1
    65d6:	428d      	cmp	r5, r1
    65d8:	419b      	sbcs	r3, r3
    65da:	000d      	movs	r5, r1
    65dc:	1aba      	subs	r2, r7, r2
    65de:	425b      	negs	r3, r3
    65e0:	1ad7      	subs	r7, r2, r3
    65e2:	023b      	lsls	r3, r7, #8
    65e4:	d535      	bpl.n	6652 <__aeabi_dsub+0x182>
    65e6:	027a      	lsls	r2, r7, #9
    65e8:	0a53      	lsrs	r3, r2, #9
    65ea:	4698      	mov	r8, r3
    65ec:	4643      	mov	r3, r8
    65ee:	2b00      	cmp	r3, #0
    65f0:	d100      	bne.n	65f4 <__aeabi_dsub+0x124>
    65f2:	e0c4      	b.n	677e <__aeabi_dsub+0x2ae>
    65f4:	4640      	mov	r0, r8
    65f6:	f000 fc6f 	bl	6ed8 <__clzsi2>
    65fa:	0003      	movs	r3, r0
    65fc:	3b08      	subs	r3, #8
    65fe:	2b1f      	cmp	r3, #31
    6600:	dd00      	ble.n	6604 <__aeabi_dsub+0x134>
    6602:	e0c5      	b.n	6790 <__aeabi_dsub+0x2c0>
    6604:	2220      	movs	r2, #32
    6606:	0029      	movs	r1, r5
    6608:	1ad2      	subs	r2, r2, r3
    660a:	4647      	mov	r7, r8
    660c:	40d1      	lsrs	r1, r2
    660e:	409f      	lsls	r7, r3
    6610:	000a      	movs	r2, r1
    6612:	409d      	lsls	r5, r3
    6614:	433a      	orrs	r2, r7
    6616:	429c      	cmp	r4, r3
    6618:	dd00      	ble.n	661c <__aeabi_dsub+0x14c>
    661a:	e0c0      	b.n	679e <__aeabi_dsub+0x2ce>
    661c:	1b1c      	subs	r4, r3, r4
    661e:	1c63      	adds	r3, r4, #1
    6620:	2b1f      	cmp	r3, #31
    6622:	dd00      	ble.n	6626 <__aeabi_dsub+0x156>
    6624:	e0e4      	b.n	67f0 <__aeabi_dsub+0x320>
    6626:	2120      	movs	r1, #32
    6628:	0014      	movs	r4, r2
    662a:	0028      	movs	r0, r5
    662c:	1ac9      	subs	r1, r1, r3
    662e:	40d8      	lsrs	r0, r3
    6630:	408c      	lsls	r4, r1
    6632:	408d      	lsls	r5, r1
    6634:	4304      	orrs	r4, r0
    6636:	40da      	lsrs	r2, r3
    6638:	1e68      	subs	r0, r5, #1
    663a:	4185      	sbcs	r5, r0
    663c:	0017      	movs	r7, r2
    663e:	4325      	orrs	r5, r4
    6640:	2400      	movs	r4, #0
    6642:	e771      	b.n	6528 <__aeabi_dsub+0x58>
    6644:	4642      	mov	r2, r8
    6646:	4663      	mov	r3, ip
    6648:	431a      	orrs	r2, r3
    664a:	d100      	bne.n	664e <__aeabi_dsub+0x17e>
    664c:	e24c      	b.n	6ae8 <__aeabi_dsub+0x618>
    664e:	4667      	mov	r7, ip
    6650:	4645      	mov	r5, r8
    6652:	076b      	lsls	r3, r5, #29
    6654:	d000      	beq.n	6658 <__aeabi_dsub+0x188>
    6656:	e769      	b.n	652c <__aeabi_dsub+0x5c>
    6658:	2301      	movs	r3, #1
    665a:	4651      	mov	r1, sl
    665c:	0778      	lsls	r0, r7, #29
    665e:	08ed      	lsrs	r5, r5, #3
    6660:	08fa      	lsrs	r2, r7, #3
    6662:	400b      	ands	r3, r1
    6664:	4305      	orrs	r5, r0
    6666:	4973      	ldr	r1, [pc, #460]	; (6834 <__aeabi_dsub+0x364>)
    6668:	428c      	cmp	r4, r1
    666a:	d038      	beq.n	66de <__aeabi_dsub+0x20e>
    666c:	0312      	lsls	r2, r2, #12
    666e:	0564      	lsls	r4, r4, #21
    6670:	0b12      	lsrs	r2, r2, #12
    6672:	0d64      	lsrs	r4, r4, #21
    6674:	e779      	b.n	656a <__aeabi_dsub+0x9a>
    6676:	2e00      	cmp	r6, #0
    6678:	dc00      	bgt.n	667c <__aeabi_dsub+0x1ac>
    667a:	e09a      	b.n	67b2 <__aeabi_dsub+0x2e2>
    667c:	2a00      	cmp	r2, #0
    667e:	d047      	beq.n	6710 <__aeabi_dsub+0x240>
    6680:	4a6c      	ldr	r2, [pc, #432]	; (6834 <__aeabi_dsub+0x364>)
    6682:	4294      	cmp	r4, r2
    6684:	d100      	bne.n	6688 <__aeabi_dsub+0x1b8>
    6686:	e74f      	b.n	6528 <__aeabi_dsub+0x58>
    6688:	2280      	movs	r2, #128	; 0x80
    668a:	0412      	lsls	r2, r2, #16
    668c:	4310      	orrs	r0, r2
    668e:	4662      	mov	r2, ip
    6690:	2a38      	cmp	r2, #56	; 0x38
    6692:	dc00      	bgt.n	6696 <__aeabi_dsub+0x1c6>
    6694:	e108      	b.n	68a8 <__aeabi_dsub+0x3d8>
    6696:	4301      	orrs	r1, r0
    6698:	1e48      	subs	r0, r1, #1
    669a:	4181      	sbcs	r1, r0
    669c:	2200      	movs	r2, #0
    669e:	b2c9      	uxtb	r1, r1
    66a0:	1949      	adds	r1, r1, r5
    66a2:	19d2      	adds	r2, r2, r7
    66a4:	42a9      	cmp	r1, r5
    66a6:	41bf      	sbcs	r7, r7
    66a8:	000d      	movs	r5, r1
    66aa:	427f      	negs	r7, r7
    66ac:	18bf      	adds	r7, r7, r2
    66ae:	023a      	lsls	r2, r7, #8
    66b0:	d400      	bmi.n	66b4 <__aeabi_dsub+0x1e4>
    66b2:	e142      	b.n	693a <__aeabi_dsub+0x46a>
    66b4:	4a5f      	ldr	r2, [pc, #380]	; (6834 <__aeabi_dsub+0x364>)
    66b6:	3401      	adds	r4, #1
    66b8:	4294      	cmp	r4, r2
    66ba:	d100      	bne.n	66be <__aeabi_dsub+0x1ee>
    66bc:	e14e      	b.n	695c <__aeabi_dsub+0x48c>
    66be:	2001      	movs	r0, #1
    66c0:	4a5d      	ldr	r2, [pc, #372]	; (6838 <__aeabi_dsub+0x368>)
    66c2:	0869      	lsrs	r1, r5, #1
    66c4:	403a      	ands	r2, r7
    66c6:	4028      	ands	r0, r5
    66c8:	4308      	orrs	r0, r1
    66ca:	07d5      	lsls	r5, r2, #31
    66cc:	4305      	orrs	r5, r0
    66ce:	0857      	lsrs	r7, r2, #1
    66d0:	469a      	mov	sl, r3
    66d2:	e729      	b.n	6528 <__aeabi_dsub+0x58>
    66d4:	0006      	movs	r6, r0
    66d6:	430e      	orrs	r6, r1
    66d8:	d000      	beq.n	66dc <__aeabi_dsub+0x20c>
    66da:	e717      	b.n	650c <__aeabi_dsub+0x3c>
    66dc:	e714      	b.n	6508 <__aeabi_dsub+0x38>
    66de:	0029      	movs	r1, r5
    66e0:	4311      	orrs	r1, r2
    66e2:	d100      	bne.n	66e6 <__aeabi_dsub+0x216>
    66e4:	e1f9      	b.n	6ada <__aeabi_dsub+0x60a>
    66e6:	2180      	movs	r1, #128	; 0x80
    66e8:	0309      	lsls	r1, r1, #12
    66ea:	430a      	orrs	r2, r1
    66ec:	0312      	lsls	r2, r2, #12
    66ee:	0b12      	lsrs	r2, r2, #12
    66f0:	e73b      	b.n	656a <__aeabi_dsub+0x9a>
    66f2:	2301      	movs	r3, #1
    66f4:	425b      	negs	r3, r3
    66f6:	4698      	mov	r8, r3
    66f8:	44c4      	add	ip, r8
    66fa:	4663      	mov	r3, ip
    66fc:	2b00      	cmp	r3, #0
    66fe:	d172      	bne.n	67e6 <__aeabi_dsub+0x316>
    6700:	1a69      	subs	r1, r5, r1
    6702:	428d      	cmp	r5, r1
    6704:	419b      	sbcs	r3, r3
    6706:	1a3f      	subs	r7, r7, r0
    6708:	425b      	negs	r3, r3
    670a:	1aff      	subs	r7, r7, r3
    670c:	000d      	movs	r5, r1
    670e:	e768      	b.n	65e2 <__aeabi_dsub+0x112>
    6710:	0002      	movs	r2, r0
    6712:	430a      	orrs	r2, r1
    6714:	d100      	bne.n	6718 <__aeabi_dsub+0x248>
    6716:	e707      	b.n	6528 <__aeabi_dsub+0x58>
    6718:	2201      	movs	r2, #1
    671a:	4252      	negs	r2, r2
    671c:	4690      	mov	r8, r2
    671e:	44c4      	add	ip, r8
    6720:	4662      	mov	r2, ip
    6722:	2a00      	cmp	r2, #0
    6724:	d000      	beq.n	6728 <__aeabi_dsub+0x258>
    6726:	e0e6      	b.n	68f6 <__aeabi_dsub+0x426>
    6728:	1869      	adds	r1, r5, r1
    672a:	42a9      	cmp	r1, r5
    672c:	41b6      	sbcs	r6, r6
    672e:	183f      	adds	r7, r7, r0
    6730:	4276      	negs	r6, r6
    6732:	19f7      	adds	r7, r6, r7
    6734:	000d      	movs	r5, r1
    6736:	e7ba      	b.n	66ae <__aeabi_dsub+0x1de>
    6738:	2e00      	cmp	r6, #0
    673a:	d000      	beq.n	673e <__aeabi_dsub+0x26e>
    673c:	e080      	b.n	6840 <__aeabi_dsub+0x370>
    673e:	1c62      	adds	r2, r4, #1
    6740:	0552      	lsls	r2, r2, #21
    6742:	0d52      	lsrs	r2, r2, #21
    6744:	2a01      	cmp	r2, #1
    6746:	dc00      	bgt.n	674a <__aeabi_dsub+0x27a>
    6748:	e0f9      	b.n	693e <__aeabi_dsub+0x46e>
    674a:	1a6a      	subs	r2, r5, r1
    674c:	4691      	mov	r9, r2
    674e:	454d      	cmp	r5, r9
    6750:	41b6      	sbcs	r6, r6
    6752:	1a3a      	subs	r2, r7, r0
    6754:	4276      	negs	r6, r6
    6756:	1b92      	subs	r2, r2, r6
    6758:	4690      	mov	r8, r2
    675a:	0212      	lsls	r2, r2, #8
    675c:	d400      	bmi.n	6760 <__aeabi_dsub+0x290>
    675e:	e099      	b.n	6894 <__aeabi_dsub+0x3c4>
    6760:	1b4d      	subs	r5, r1, r5
    6762:	42a9      	cmp	r1, r5
    6764:	4189      	sbcs	r1, r1
    6766:	1bc7      	subs	r7, r0, r7
    6768:	4249      	negs	r1, r1
    676a:	1a7a      	subs	r2, r7, r1
    676c:	4690      	mov	r8, r2
    676e:	469a      	mov	sl, r3
    6770:	e73c      	b.n	65ec <__aeabi_dsub+0x11c>
    6772:	4652      	mov	r2, sl
    6774:	2301      	movs	r3, #1
    6776:	2500      	movs	r5, #0
    6778:	4013      	ands	r3, r2
    677a:	2200      	movs	r2, #0
    677c:	e6f5      	b.n	656a <__aeabi_dsub+0x9a>
    677e:	0028      	movs	r0, r5
    6780:	f000 fbaa 	bl	6ed8 <__clzsi2>
    6784:	3020      	adds	r0, #32
    6786:	0003      	movs	r3, r0
    6788:	3b08      	subs	r3, #8
    678a:	2b1f      	cmp	r3, #31
    678c:	dc00      	bgt.n	6790 <__aeabi_dsub+0x2c0>
    678e:	e739      	b.n	6604 <__aeabi_dsub+0x134>
    6790:	002a      	movs	r2, r5
    6792:	3828      	subs	r0, #40	; 0x28
    6794:	4082      	lsls	r2, r0
    6796:	2500      	movs	r5, #0
    6798:	429c      	cmp	r4, r3
    679a:	dc00      	bgt.n	679e <__aeabi_dsub+0x2ce>
    679c:	e73e      	b.n	661c <__aeabi_dsub+0x14c>
    679e:	4f26      	ldr	r7, [pc, #152]	; (6838 <__aeabi_dsub+0x368>)
    67a0:	1ae4      	subs	r4, r4, r3
    67a2:	4017      	ands	r7, r2
    67a4:	e6c0      	b.n	6528 <__aeabi_dsub+0x58>
    67a6:	4301      	orrs	r1, r0
    67a8:	1e48      	subs	r0, r1, #1
    67aa:	4181      	sbcs	r1, r0
    67ac:	2200      	movs	r2, #0
    67ae:	b2c9      	uxtb	r1, r1
    67b0:	e710      	b.n	65d4 <__aeabi_dsub+0x104>
    67b2:	2e00      	cmp	r6, #0
    67b4:	d000      	beq.n	67b8 <__aeabi_dsub+0x2e8>
    67b6:	e0f1      	b.n	699c <__aeabi_dsub+0x4cc>
    67b8:	1c62      	adds	r2, r4, #1
    67ba:	4694      	mov	ip, r2
    67bc:	0552      	lsls	r2, r2, #21
    67be:	0d52      	lsrs	r2, r2, #21
    67c0:	2a01      	cmp	r2, #1
    67c2:	dc00      	bgt.n	67c6 <__aeabi_dsub+0x2f6>
    67c4:	e0a0      	b.n	6908 <__aeabi_dsub+0x438>
    67c6:	4a1b      	ldr	r2, [pc, #108]	; (6834 <__aeabi_dsub+0x364>)
    67c8:	4594      	cmp	ip, r2
    67ca:	d100      	bne.n	67ce <__aeabi_dsub+0x2fe>
    67cc:	e0c5      	b.n	695a <__aeabi_dsub+0x48a>
    67ce:	1869      	adds	r1, r5, r1
    67d0:	42a9      	cmp	r1, r5
    67d2:	4192      	sbcs	r2, r2
    67d4:	183f      	adds	r7, r7, r0
    67d6:	4252      	negs	r2, r2
    67d8:	19d2      	adds	r2, r2, r7
    67da:	0849      	lsrs	r1, r1, #1
    67dc:	07d5      	lsls	r5, r2, #31
    67de:	430d      	orrs	r5, r1
    67e0:	0857      	lsrs	r7, r2, #1
    67e2:	4664      	mov	r4, ip
    67e4:	e6a0      	b.n	6528 <__aeabi_dsub+0x58>
    67e6:	4b13      	ldr	r3, [pc, #76]	; (6834 <__aeabi_dsub+0x364>)
    67e8:	429c      	cmp	r4, r3
    67ea:	d000      	beq.n	67ee <__aeabi_dsub+0x31e>
    67ec:	e6d9      	b.n	65a2 <__aeabi_dsub+0xd2>
    67ee:	e69b      	b.n	6528 <__aeabi_dsub+0x58>
    67f0:	0011      	movs	r1, r2
    67f2:	3c1f      	subs	r4, #31
    67f4:	40e1      	lsrs	r1, r4
    67f6:	000c      	movs	r4, r1
    67f8:	2b20      	cmp	r3, #32
    67fa:	d100      	bne.n	67fe <__aeabi_dsub+0x32e>
    67fc:	e080      	b.n	6900 <__aeabi_dsub+0x430>
    67fe:	2140      	movs	r1, #64	; 0x40
    6800:	1acb      	subs	r3, r1, r3
    6802:	409a      	lsls	r2, r3
    6804:	4315      	orrs	r5, r2
    6806:	1e6a      	subs	r2, r5, #1
    6808:	4195      	sbcs	r5, r2
    680a:	2700      	movs	r7, #0
    680c:	4325      	orrs	r5, r4
    680e:	2400      	movs	r4, #0
    6810:	e71f      	b.n	6652 <__aeabi_dsub+0x182>
    6812:	4663      	mov	r3, ip
    6814:	0002      	movs	r2, r0
    6816:	3b20      	subs	r3, #32
    6818:	40da      	lsrs	r2, r3
    681a:	4663      	mov	r3, ip
    681c:	2b20      	cmp	r3, #32
    681e:	d071      	beq.n	6904 <__aeabi_dsub+0x434>
    6820:	2340      	movs	r3, #64	; 0x40
    6822:	4666      	mov	r6, ip
    6824:	1b9b      	subs	r3, r3, r6
    6826:	4098      	lsls	r0, r3
    6828:	4301      	orrs	r1, r0
    682a:	1e48      	subs	r0, r1, #1
    682c:	4181      	sbcs	r1, r0
    682e:	4311      	orrs	r1, r2
    6830:	2200      	movs	r2, #0
    6832:	e6cf      	b.n	65d4 <__aeabi_dsub+0x104>
    6834:	000007ff 	.word	0x000007ff
    6838:	ff7fffff 	.word	0xff7fffff
    683c:	800fffff 	.word	0x800fffff
    6840:	2c00      	cmp	r4, #0
    6842:	d048      	beq.n	68d6 <__aeabi_dsub+0x406>
    6844:	4cca      	ldr	r4, [pc, #808]	; (6b70 <__aeabi_dsub+0x6a0>)
    6846:	42a2      	cmp	r2, r4
    6848:	d100      	bne.n	684c <__aeabi_dsub+0x37c>
    684a:	e0a2      	b.n	6992 <__aeabi_dsub+0x4c2>
    684c:	4274      	negs	r4, r6
    684e:	46a1      	mov	r9, r4
    6850:	2480      	movs	r4, #128	; 0x80
    6852:	0424      	lsls	r4, r4, #16
    6854:	4327      	orrs	r7, r4
    6856:	464c      	mov	r4, r9
    6858:	2c38      	cmp	r4, #56	; 0x38
    685a:	dd00      	ble.n	685e <__aeabi_dsub+0x38e>
    685c:	e0db      	b.n	6a16 <__aeabi_dsub+0x546>
    685e:	2c1f      	cmp	r4, #31
    6860:	dd00      	ble.n	6864 <__aeabi_dsub+0x394>
    6862:	e144      	b.n	6aee <__aeabi_dsub+0x61e>
    6864:	464e      	mov	r6, r9
    6866:	2420      	movs	r4, #32
    6868:	1ba4      	subs	r4, r4, r6
    686a:	003e      	movs	r6, r7
    686c:	40a6      	lsls	r6, r4
    686e:	46a2      	mov	sl, r4
    6870:	46b0      	mov	r8, r6
    6872:	464c      	mov	r4, r9
    6874:	002e      	movs	r6, r5
    6876:	40e6      	lsrs	r6, r4
    6878:	46b4      	mov	ip, r6
    687a:	4646      	mov	r6, r8
    687c:	4664      	mov	r4, ip
    687e:	4326      	orrs	r6, r4
    6880:	4654      	mov	r4, sl
    6882:	40a5      	lsls	r5, r4
    6884:	1e6c      	subs	r4, r5, #1
    6886:	41a5      	sbcs	r5, r4
    6888:	0034      	movs	r4, r6
    688a:	432c      	orrs	r4, r5
    688c:	464d      	mov	r5, r9
    688e:	40ef      	lsrs	r7, r5
    6890:	1b0d      	subs	r5, r1, r4
    6892:	e028      	b.n	68e6 <__aeabi_dsub+0x416>
    6894:	464a      	mov	r2, r9
    6896:	4643      	mov	r3, r8
    6898:	464d      	mov	r5, r9
    689a:	431a      	orrs	r2, r3
    689c:	d000      	beq.n	68a0 <__aeabi_dsub+0x3d0>
    689e:	e6a5      	b.n	65ec <__aeabi_dsub+0x11c>
    68a0:	2300      	movs	r3, #0
    68a2:	2400      	movs	r4, #0
    68a4:	2500      	movs	r5, #0
    68a6:	e6de      	b.n	6666 <__aeabi_dsub+0x196>
    68a8:	2a1f      	cmp	r2, #31
    68aa:	dc5a      	bgt.n	6962 <__aeabi_dsub+0x492>
    68ac:	4666      	mov	r6, ip
    68ae:	2220      	movs	r2, #32
    68b0:	1b92      	subs	r2, r2, r6
    68b2:	0006      	movs	r6, r0
    68b4:	4096      	lsls	r6, r2
    68b6:	4691      	mov	r9, r2
    68b8:	46b0      	mov	r8, r6
    68ba:	4662      	mov	r2, ip
    68bc:	000e      	movs	r6, r1
    68be:	40d6      	lsrs	r6, r2
    68c0:	4642      	mov	r2, r8
    68c2:	4316      	orrs	r6, r2
    68c4:	464a      	mov	r2, r9
    68c6:	4091      	lsls	r1, r2
    68c8:	1e4a      	subs	r2, r1, #1
    68ca:	4191      	sbcs	r1, r2
    68cc:	0002      	movs	r2, r0
    68ce:	4660      	mov	r0, ip
    68d0:	4331      	orrs	r1, r6
    68d2:	40c2      	lsrs	r2, r0
    68d4:	e6e4      	b.n	66a0 <__aeabi_dsub+0x1d0>
    68d6:	003c      	movs	r4, r7
    68d8:	432c      	orrs	r4, r5
    68da:	d05a      	beq.n	6992 <__aeabi_dsub+0x4c2>
    68dc:	43f4      	mvns	r4, r6
    68de:	46a1      	mov	r9, r4
    68e0:	2c00      	cmp	r4, #0
    68e2:	d152      	bne.n	698a <__aeabi_dsub+0x4ba>
    68e4:	1b4d      	subs	r5, r1, r5
    68e6:	42a9      	cmp	r1, r5
    68e8:	4189      	sbcs	r1, r1
    68ea:	1bc7      	subs	r7, r0, r7
    68ec:	4249      	negs	r1, r1
    68ee:	1a7f      	subs	r7, r7, r1
    68f0:	0014      	movs	r4, r2
    68f2:	469a      	mov	sl, r3
    68f4:	e675      	b.n	65e2 <__aeabi_dsub+0x112>
    68f6:	4a9e      	ldr	r2, [pc, #632]	; (6b70 <__aeabi_dsub+0x6a0>)
    68f8:	4294      	cmp	r4, r2
    68fa:	d000      	beq.n	68fe <__aeabi_dsub+0x42e>
    68fc:	e6c7      	b.n	668e <__aeabi_dsub+0x1be>
    68fe:	e613      	b.n	6528 <__aeabi_dsub+0x58>
    6900:	2200      	movs	r2, #0
    6902:	e77f      	b.n	6804 <__aeabi_dsub+0x334>
    6904:	2000      	movs	r0, #0
    6906:	e78f      	b.n	6828 <__aeabi_dsub+0x358>
    6908:	2c00      	cmp	r4, #0
    690a:	d000      	beq.n	690e <__aeabi_dsub+0x43e>
    690c:	e0c8      	b.n	6aa0 <__aeabi_dsub+0x5d0>
    690e:	003b      	movs	r3, r7
    6910:	432b      	orrs	r3, r5
    6912:	d100      	bne.n	6916 <__aeabi_dsub+0x446>
    6914:	e10f      	b.n	6b36 <__aeabi_dsub+0x666>
    6916:	0003      	movs	r3, r0
    6918:	430b      	orrs	r3, r1
    691a:	d100      	bne.n	691e <__aeabi_dsub+0x44e>
    691c:	e604      	b.n	6528 <__aeabi_dsub+0x58>
    691e:	1869      	adds	r1, r5, r1
    6920:	42a9      	cmp	r1, r5
    6922:	419b      	sbcs	r3, r3
    6924:	183f      	adds	r7, r7, r0
    6926:	425b      	negs	r3, r3
    6928:	19df      	adds	r7, r3, r7
    692a:	023b      	lsls	r3, r7, #8
    692c:	d400      	bmi.n	6930 <__aeabi_dsub+0x460>
    692e:	e11a      	b.n	6b66 <__aeabi_dsub+0x696>
    6930:	4b90      	ldr	r3, [pc, #576]	; (6b74 <__aeabi_dsub+0x6a4>)
    6932:	000d      	movs	r5, r1
    6934:	401f      	ands	r7, r3
    6936:	4664      	mov	r4, ip
    6938:	e5f6      	b.n	6528 <__aeabi_dsub+0x58>
    693a:	469a      	mov	sl, r3
    693c:	e689      	b.n	6652 <__aeabi_dsub+0x182>
    693e:	003a      	movs	r2, r7
    6940:	432a      	orrs	r2, r5
    6942:	2c00      	cmp	r4, #0
    6944:	d15c      	bne.n	6a00 <__aeabi_dsub+0x530>
    6946:	2a00      	cmp	r2, #0
    6948:	d175      	bne.n	6a36 <__aeabi_dsub+0x566>
    694a:	0002      	movs	r2, r0
    694c:	430a      	orrs	r2, r1
    694e:	d100      	bne.n	6952 <__aeabi_dsub+0x482>
    6950:	e0ca      	b.n	6ae8 <__aeabi_dsub+0x618>
    6952:	0007      	movs	r7, r0
    6954:	000d      	movs	r5, r1
    6956:	469a      	mov	sl, r3
    6958:	e5e6      	b.n	6528 <__aeabi_dsub+0x58>
    695a:	4664      	mov	r4, ip
    695c:	2200      	movs	r2, #0
    695e:	2500      	movs	r5, #0
    6960:	e681      	b.n	6666 <__aeabi_dsub+0x196>
    6962:	4662      	mov	r2, ip
    6964:	0006      	movs	r6, r0
    6966:	3a20      	subs	r2, #32
    6968:	40d6      	lsrs	r6, r2
    696a:	4662      	mov	r2, ip
    696c:	46b0      	mov	r8, r6
    696e:	2a20      	cmp	r2, #32
    6970:	d100      	bne.n	6974 <__aeabi_dsub+0x4a4>
    6972:	e0b7      	b.n	6ae4 <__aeabi_dsub+0x614>
    6974:	2240      	movs	r2, #64	; 0x40
    6976:	4666      	mov	r6, ip
    6978:	1b92      	subs	r2, r2, r6
    697a:	4090      	lsls	r0, r2
    697c:	4301      	orrs	r1, r0
    697e:	4642      	mov	r2, r8
    6980:	1e48      	subs	r0, r1, #1
    6982:	4181      	sbcs	r1, r0
    6984:	4311      	orrs	r1, r2
    6986:	2200      	movs	r2, #0
    6988:	e68a      	b.n	66a0 <__aeabi_dsub+0x1d0>
    698a:	4c79      	ldr	r4, [pc, #484]	; (6b70 <__aeabi_dsub+0x6a0>)
    698c:	42a2      	cmp	r2, r4
    698e:	d000      	beq.n	6992 <__aeabi_dsub+0x4c2>
    6990:	e761      	b.n	6856 <__aeabi_dsub+0x386>
    6992:	0007      	movs	r7, r0
    6994:	000d      	movs	r5, r1
    6996:	0014      	movs	r4, r2
    6998:	469a      	mov	sl, r3
    699a:	e5c5      	b.n	6528 <__aeabi_dsub+0x58>
    699c:	2c00      	cmp	r4, #0
    699e:	d141      	bne.n	6a24 <__aeabi_dsub+0x554>
    69a0:	003c      	movs	r4, r7
    69a2:	432c      	orrs	r4, r5
    69a4:	d078      	beq.n	6a98 <__aeabi_dsub+0x5c8>
    69a6:	43f4      	mvns	r4, r6
    69a8:	46a1      	mov	r9, r4
    69aa:	2c00      	cmp	r4, #0
    69ac:	d020      	beq.n	69f0 <__aeabi_dsub+0x520>
    69ae:	4c70      	ldr	r4, [pc, #448]	; (6b70 <__aeabi_dsub+0x6a0>)
    69b0:	42a2      	cmp	r2, r4
    69b2:	d071      	beq.n	6a98 <__aeabi_dsub+0x5c8>
    69b4:	464c      	mov	r4, r9
    69b6:	2c38      	cmp	r4, #56	; 0x38
    69b8:	dd00      	ble.n	69bc <__aeabi_dsub+0x4ec>
    69ba:	e0b2      	b.n	6b22 <__aeabi_dsub+0x652>
    69bc:	2c1f      	cmp	r4, #31
    69be:	dd00      	ble.n	69c2 <__aeabi_dsub+0x4f2>
    69c0:	e0bc      	b.n	6b3c <__aeabi_dsub+0x66c>
    69c2:	2620      	movs	r6, #32
    69c4:	1b34      	subs	r4, r6, r4
    69c6:	46a2      	mov	sl, r4
    69c8:	003c      	movs	r4, r7
    69ca:	4656      	mov	r6, sl
    69cc:	40b4      	lsls	r4, r6
    69ce:	464e      	mov	r6, r9
    69d0:	46a0      	mov	r8, r4
    69d2:	002c      	movs	r4, r5
    69d4:	40f4      	lsrs	r4, r6
    69d6:	46a4      	mov	ip, r4
    69d8:	4644      	mov	r4, r8
    69da:	4666      	mov	r6, ip
    69dc:	4334      	orrs	r4, r6
    69de:	46a4      	mov	ip, r4
    69e0:	4654      	mov	r4, sl
    69e2:	40a5      	lsls	r5, r4
    69e4:	4664      	mov	r4, ip
    69e6:	1e6e      	subs	r6, r5, #1
    69e8:	41b5      	sbcs	r5, r6
    69ea:	4325      	orrs	r5, r4
    69ec:	464c      	mov	r4, r9
    69ee:	40e7      	lsrs	r7, r4
    69f0:	186d      	adds	r5, r5, r1
    69f2:	428d      	cmp	r5, r1
    69f4:	4189      	sbcs	r1, r1
    69f6:	183f      	adds	r7, r7, r0
    69f8:	4249      	negs	r1, r1
    69fa:	19cf      	adds	r7, r1, r7
    69fc:	0014      	movs	r4, r2
    69fe:	e656      	b.n	66ae <__aeabi_dsub+0x1de>
    6a00:	2a00      	cmp	r2, #0
    6a02:	d12f      	bne.n	6a64 <__aeabi_dsub+0x594>
    6a04:	0002      	movs	r2, r0
    6a06:	430a      	orrs	r2, r1
    6a08:	d100      	bne.n	6a0c <__aeabi_dsub+0x53c>
    6a0a:	e084      	b.n	6b16 <__aeabi_dsub+0x646>
    6a0c:	0007      	movs	r7, r0
    6a0e:	000d      	movs	r5, r1
    6a10:	469a      	mov	sl, r3
    6a12:	4c57      	ldr	r4, [pc, #348]	; (6b70 <__aeabi_dsub+0x6a0>)
    6a14:	e588      	b.n	6528 <__aeabi_dsub+0x58>
    6a16:	433d      	orrs	r5, r7
    6a18:	1e6f      	subs	r7, r5, #1
    6a1a:	41bd      	sbcs	r5, r7
    6a1c:	b2ec      	uxtb	r4, r5
    6a1e:	2700      	movs	r7, #0
    6a20:	1b0d      	subs	r5, r1, r4
    6a22:	e760      	b.n	68e6 <__aeabi_dsub+0x416>
    6a24:	4c52      	ldr	r4, [pc, #328]	; (6b70 <__aeabi_dsub+0x6a0>)
    6a26:	42a2      	cmp	r2, r4
    6a28:	d036      	beq.n	6a98 <__aeabi_dsub+0x5c8>
    6a2a:	4274      	negs	r4, r6
    6a2c:	2680      	movs	r6, #128	; 0x80
    6a2e:	0436      	lsls	r6, r6, #16
    6a30:	46a1      	mov	r9, r4
    6a32:	4337      	orrs	r7, r6
    6a34:	e7be      	b.n	69b4 <__aeabi_dsub+0x4e4>
    6a36:	0002      	movs	r2, r0
    6a38:	430a      	orrs	r2, r1
    6a3a:	d100      	bne.n	6a3e <__aeabi_dsub+0x56e>
    6a3c:	e574      	b.n	6528 <__aeabi_dsub+0x58>
    6a3e:	1a6a      	subs	r2, r5, r1
    6a40:	4690      	mov	r8, r2
    6a42:	4545      	cmp	r5, r8
    6a44:	41b6      	sbcs	r6, r6
    6a46:	1a3a      	subs	r2, r7, r0
    6a48:	4276      	negs	r6, r6
    6a4a:	1b92      	subs	r2, r2, r6
    6a4c:	4694      	mov	ip, r2
    6a4e:	0212      	lsls	r2, r2, #8
    6a50:	d400      	bmi.n	6a54 <__aeabi_dsub+0x584>
    6a52:	e5f7      	b.n	6644 <__aeabi_dsub+0x174>
    6a54:	1b4d      	subs	r5, r1, r5
    6a56:	42a9      	cmp	r1, r5
    6a58:	4189      	sbcs	r1, r1
    6a5a:	1bc7      	subs	r7, r0, r7
    6a5c:	4249      	negs	r1, r1
    6a5e:	1a7f      	subs	r7, r7, r1
    6a60:	469a      	mov	sl, r3
    6a62:	e561      	b.n	6528 <__aeabi_dsub+0x58>
    6a64:	0002      	movs	r2, r0
    6a66:	430a      	orrs	r2, r1
    6a68:	d03a      	beq.n	6ae0 <__aeabi_dsub+0x610>
    6a6a:	08ed      	lsrs	r5, r5, #3
    6a6c:	077c      	lsls	r4, r7, #29
    6a6e:	432c      	orrs	r4, r5
    6a70:	2580      	movs	r5, #128	; 0x80
    6a72:	08fa      	lsrs	r2, r7, #3
    6a74:	032d      	lsls	r5, r5, #12
    6a76:	422a      	tst	r2, r5
    6a78:	d008      	beq.n	6a8c <__aeabi_dsub+0x5bc>
    6a7a:	08c7      	lsrs	r7, r0, #3
    6a7c:	422f      	tst	r7, r5
    6a7e:	d105      	bne.n	6a8c <__aeabi_dsub+0x5bc>
    6a80:	0745      	lsls	r5, r0, #29
    6a82:	002c      	movs	r4, r5
    6a84:	003a      	movs	r2, r7
    6a86:	469a      	mov	sl, r3
    6a88:	08c9      	lsrs	r1, r1, #3
    6a8a:	430c      	orrs	r4, r1
    6a8c:	0f67      	lsrs	r7, r4, #29
    6a8e:	00d2      	lsls	r2, r2, #3
    6a90:	00e5      	lsls	r5, r4, #3
    6a92:	4317      	orrs	r7, r2
    6a94:	4c36      	ldr	r4, [pc, #216]	; (6b70 <__aeabi_dsub+0x6a0>)
    6a96:	e547      	b.n	6528 <__aeabi_dsub+0x58>
    6a98:	0007      	movs	r7, r0
    6a9a:	000d      	movs	r5, r1
    6a9c:	0014      	movs	r4, r2
    6a9e:	e543      	b.n	6528 <__aeabi_dsub+0x58>
    6aa0:	003a      	movs	r2, r7
    6aa2:	432a      	orrs	r2, r5
    6aa4:	d043      	beq.n	6b2e <__aeabi_dsub+0x65e>
    6aa6:	0002      	movs	r2, r0
    6aa8:	430a      	orrs	r2, r1
    6aaa:	d019      	beq.n	6ae0 <__aeabi_dsub+0x610>
    6aac:	08ed      	lsrs	r5, r5, #3
    6aae:	077c      	lsls	r4, r7, #29
    6ab0:	432c      	orrs	r4, r5
    6ab2:	2580      	movs	r5, #128	; 0x80
    6ab4:	08fa      	lsrs	r2, r7, #3
    6ab6:	032d      	lsls	r5, r5, #12
    6ab8:	422a      	tst	r2, r5
    6aba:	d007      	beq.n	6acc <__aeabi_dsub+0x5fc>
    6abc:	08c6      	lsrs	r6, r0, #3
    6abe:	422e      	tst	r6, r5
    6ac0:	d104      	bne.n	6acc <__aeabi_dsub+0x5fc>
    6ac2:	0747      	lsls	r7, r0, #29
    6ac4:	003c      	movs	r4, r7
    6ac6:	0032      	movs	r2, r6
    6ac8:	08c9      	lsrs	r1, r1, #3
    6aca:	430c      	orrs	r4, r1
    6acc:	00d7      	lsls	r7, r2, #3
    6ace:	0f62      	lsrs	r2, r4, #29
    6ad0:	00e5      	lsls	r5, r4, #3
    6ad2:	4317      	orrs	r7, r2
    6ad4:	469a      	mov	sl, r3
    6ad6:	4c26      	ldr	r4, [pc, #152]	; (6b70 <__aeabi_dsub+0x6a0>)
    6ad8:	e526      	b.n	6528 <__aeabi_dsub+0x58>
    6ada:	2200      	movs	r2, #0
    6adc:	2500      	movs	r5, #0
    6ade:	e544      	b.n	656a <__aeabi_dsub+0x9a>
    6ae0:	4c23      	ldr	r4, [pc, #140]	; (6b70 <__aeabi_dsub+0x6a0>)
    6ae2:	e521      	b.n	6528 <__aeabi_dsub+0x58>
    6ae4:	2000      	movs	r0, #0
    6ae6:	e749      	b.n	697c <__aeabi_dsub+0x4ac>
    6ae8:	2300      	movs	r3, #0
    6aea:	2500      	movs	r5, #0
    6aec:	e5bb      	b.n	6666 <__aeabi_dsub+0x196>
    6aee:	464c      	mov	r4, r9
    6af0:	003e      	movs	r6, r7
    6af2:	3c20      	subs	r4, #32
    6af4:	40e6      	lsrs	r6, r4
    6af6:	464c      	mov	r4, r9
    6af8:	46b4      	mov	ip, r6
    6afa:	2c20      	cmp	r4, #32
    6afc:	d031      	beq.n	6b62 <__aeabi_dsub+0x692>
    6afe:	2440      	movs	r4, #64	; 0x40
    6b00:	464e      	mov	r6, r9
    6b02:	1ba6      	subs	r6, r4, r6
    6b04:	40b7      	lsls	r7, r6
    6b06:	433d      	orrs	r5, r7
    6b08:	1e6c      	subs	r4, r5, #1
    6b0a:	41a5      	sbcs	r5, r4
    6b0c:	4664      	mov	r4, ip
    6b0e:	432c      	orrs	r4, r5
    6b10:	2700      	movs	r7, #0
    6b12:	1b0d      	subs	r5, r1, r4
    6b14:	e6e7      	b.n	68e6 <__aeabi_dsub+0x416>
    6b16:	2280      	movs	r2, #128	; 0x80
    6b18:	2300      	movs	r3, #0
    6b1a:	0312      	lsls	r2, r2, #12
    6b1c:	4c14      	ldr	r4, [pc, #80]	; (6b70 <__aeabi_dsub+0x6a0>)
    6b1e:	2500      	movs	r5, #0
    6b20:	e5a1      	b.n	6666 <__aeabi_dsub+0x196>
    6b22:	433d      	orrs	r5, r7
    6b24:	1e6f      	subs	r7, r5, #1
    6b26:	41bd      	sbcs	r5, r7
    6b28:	2700      	movs	r7, #0
    6b2a:	b2ed      	uxtb	r5, r5
    6b2c:	e760      	b.n	69f0 <__aeabi_dsub+0x520>
    6b2e:	0007      	movs	r7, r0
    6b30:	000d      	movs	r5, r1
    6b32:	4c0f      	ldr	r4, [pc, #60]	; (6b70 <__aeabi_dsub+0x6a0>)
    6b34:	e4f8      	b.n	6528 <__aeabi_dsub+0x58>
    6b36:	0007      	movs	r7, r0
    6b38:	000d      	movs	r5, r1
    6b3a:	e4f5      	b.n	6528 <__aeabi_dsub+0x58>
    6b3c:	464e      	mov	r6, r9
    6b3e:	003c      	movs	r4, r7
    6b40:	3e20      	subs	r6, #32
    6b42:	40f4      	lsrs	r4, r6
    6b44:	46a0      	mov	r8, r4
    6b46:	464c      	mov	r4, r9
    6b48:	2c20      	cmp	r4, #32
    6b4a:	d00e      	beq.n	6b6a <__aeabi_dsub+0x69a>
    6b4c:	2440      	movs	r4, #64	; 0x40
    6b4e:	464e      	mov	r6, r9
    6b50:	1ba4      	subs	r4, r4, r6
    6b52:	40a7      	lsls	r7, r4
    6b54:	433d      	orrs	r5, r7
    6b56:	1e6f      	subs	r7, r5, #1
    6b58:	41bd      	sbcs	r5, r7
    6b5a:	4644      	mov	r4, r8
    6b5c:	2700      	movs	r7, #0
    6b5e:	4325      	orrs	r5, r4
    6b60:	e746      	b.n	69f0 <__aeabi_dsub+0x520>
    6b62:	2700      	movs	r7, #0
    6b64:	e7cf      	b.n	6b06 <__aeabi_dsub+0x636>
    6b66:	000d      	movs	r5, r1
    6b68:	e573      	b.n	6652 <__aeabi_dsub+0x182>
    6b6a:	2700      	movs	r7, #0
    6b6c:	e7f2      	b.n	6b54 <__aeabi_dsub+0x684>
    6b6e:	46c0      	nop			; (mov r8, r8)
    6b70:	000007ff 	.word	0x000007ff
    6b74:	ff7fffff 	.word	0xff7fffff

00006b78 <__aeabi_dcmpun>:
    6b78:	b570      	push	{r4, r5, r6, lr}
    6b7a:	4e0e      	ldr	r6, [pc, #56]	; (6bb4 <__aeabi_dcmpun+0x3c>)
    6b7c:	030c      	lsls	r4, r1, #12
    6b7e:	031d      	lsls	r5, r3, #12
    6b80:	0049      	lsls	r1, r1, #1
    6b82:	005b      	lsls	r3, r3, #1
    6b84:	0b24      	lsrs	r4, r4, #12
    6b86:	0d49      	lsrs	r1, r1, #21
    6b88:	0b2d      	lsrs	r5, r5, #12
    6b8a:	0d5b      	lsrs	r3, r3, #21
    6b8c:	42b1      	cmp	r1, r6
    6b8e:	d004      	beq.n	6b9a <__aeabi_dcmpun+0x22>
    6b90:	4908      	ldr	r1, [pc, #32]	; (6bb4 <__aeabi_dcmpun+0x3c>)
    6b92:	2000      	movs	r0, #0
    6b94:	428b      	cmp	r3, r1
    6b96:	d008      	beq.n	6baa <__aeabi_dcmpun+0x32>
    6b98:	bd70      	pop	{r4, r5, r6, pc}
    6b9a:	4304      	orrs	r4, r0
    6b9c:	2001      	movs	r0, #1
    6b9e:	2c00      	cmp	r4, #0
    6ba0:	d1fa      	bne.n	6b98 <__aeabi_dcmpun+0x20>
    6ba2:	4904      	ldr	r1, [pc, #16]	; (6bb4 <__aeabi_dcmpun+0x3c>)
    6ba4:	2000      	movs	r0, #0
    6ba6:	428b      	cmp	r3, r1
    6ba8:	d1f6      	bne.n	6b98 <__aeabi_dcmpun+0x20>
    6baa:	4315      	orrs	r5, r2
    6bac:	0028      	movs	r0, r5
    6bae:	1e45      	subs	r5, r0, #1
    6bb0:	41a8      	sbcs	r0, r5
    6bb2:	e7f1      	b.n	6b98 <__aeabi_dcmpun+0x20>
    6bb4:	000007ff 	.word	0x000007ff

00006bb8 <__aeabi_d2iz>:
    6bb8:	030b      	lsls	r3, r1, #12
    6bba:	b530      	push	{r4, r5, lr}
    6bbc:	4d13      	ldr	r5, [pc, #76]	; (6c0c <__aeabi_d2iz+0x54>)
    6bbe:	0b1a      	lsrs	r2, r3, #12
    6bc0:	004b      	lsls	r3, r1, #1
    6bc2:	0d5b      	lsrs	r3, r3, #21
    6bc4:	0fc9      	lsrs	r1, r1, #31
    6bc6:	2400      	movs	r4, #0
    6bc8:	42ab      	cmp	r3, r5
    6bca:	dd11      	ble.n	6bf0 <__aeabi_d2iz+0x38>
    6bcc:	4c10      	ldr	r4, [pc, #64]	; (6c10 <__aeabi_d2iz+0x58>)
    6bce:	42a3      	cmp	r3, r4
    6bd0:	dc10      	bgt.n	6bf4 <__aeabi_d2iz+0x3c>
    6bd2:	2480      	movs	r4, #128	; 0x80
    6bd4:	0364      	lsls	r4, r4, #13
    6bd6:	4322      	orrs	r2, r4
    6bd8:	4c0e      	ldr	r4, [pc, #56]	; (6c14 <__aeabi_d2iz+0x5c>)
    6bda:	1ae4      	subs	r4, r4, r3
    6bdc:	2c1f      	cmp	r4, #31
    6bde:	dd0c      	ble.n	6bfa <__aeabi_d2iz+0x42>
    6be0:	480d      	ldr	r0, [pc, #52]	; (6c18 <__aeabi_d2iz+0x60>)
    6be2:	1ac3      	subs	r3, r0, r3
    6be4:	40da      	lsrs	r2, r3
    6be6:	0013      	movs	r3, r2
    6be8:	425c      	negs	r4, r3
    6bea:	2900      	cmp	r1, #0
    6bec:	d100      	bne.n	6bf0 <__aeabi_d2iz+0x38>
    6bee:	001c      	movs	r4, r3
    6bf0:	0020      	movs	r0, r4
    6bf2:	bd30      	pop	{r4, r5, pc}
    6bf4:	4b09      	ldr	r3, [pc, #36]	; (6c1c <__aeabi_d2iz+0x64>)
    6bf6:	18cc      	adds	r4, r1, r3
    6bf8:	e7fa      	b.n	6bf0 <__aeabi_d2iz+0x38>
    6bfa:	40e0      	lsrs	r0, r4
    6bfc:	4c08      	ldr	r4, [pc, #32]	; (6c20 <__aeabi_d2iz+0x68>)
    6bfe:	46a4      	mov	ip, r4
    6c00:	4463      	add	r3, ip
    6c02:	409a      	lsls	r2, r3
    6c04:	0013      	movs	r3, r2
    6c06:	4303      	orrs	r3, r0
    6c08:	e7ee      	b.n	6be8 <__aeabi_d2iz+0x30>
    6c0a:	46c0      	nop			; (mov r8, r8)
    6c0c:	000003fe 	.word	0x000003fe
    6c10:	0000041d 	.word	0x0000041d
    6c14:	00000433 	.word	0x00000433
    6c18:	00000413 	.word	0x00000413
    6c1c:	7fffffff 	.word	0x7fffffff
    6c20:	fffffbed 	.word	0xfffffbed

00006c24 <__aeabi_i2d>:
    6c24:	b570      	push	{r4, r5, r6, lr}
    6c26:	2800      	cmp	r0, #0
    6c28:	d030      	beq.n	6c8c <__aeabi_i2d+0x68>
    6c2a:	17c3      	asrs	r3, r0, #31
    6c2c:	18c4      	adds	r4, r0, r3
    6c2e:	405c      	eors	r4, r3
    6c30:	0fc5      	lsrs	r5, r0, #31
    6c32:	0020      	movs	r0, r4
    6c34:	f000 f950 	bl	6ed8 <__clzsi2>
    6c38:	4b17      	ldr	r3, [pc, #92]	; (6c98 <__aeabi_i2d+0x74>)
    6c3a:	4a18      	ldr	r2, [pc, #96]	; (6c9c <__aeabi_i2d+0x78>)
    6c3c:	1a1b      	subs	r3, r3, r0
    6c3e:	1ad2      	subs	r2, r2, r3
    6c40:	2a1f      	cmp	r2, #31
    6c42:	dd18      	ble.n	6c76 <__aeabi_i2d+0x52>
    6c44:	4a16      	ldr	r2, [pc, #88]	; (6ca0 <__aeabi_i2d+0x7c>)
    6c46:	1ad2      	subs	r2, r2, r3
    6c48:	4094      	lsls	r4, r2
    6c4a:	2200      	movs	r2, #0
    6c4c:	0324      	lsls	r4, r4, #12
    6c4e:	055b      	lsls	r3, r3, #21
    6c50:	0b24      	lsrs	r4, r4, #12
    6c52:	0d5b      	lsrs	r3, r3, #21
    6c54:	2100      	movs	r1, #0
    6c56:	0010      	movs	r0, r2
    6c58:	0324      	lsls	r4, r4, #12
    6c5a:	0d0a      	lsrs	r2, r1, #20
    6c5c:	0512      	lsls	r2, r2, #20
    6c5e:	0b24      	lsrs	r4, r4, #12
    6c60:	4314      	orrs	r4, r2
    6c62:	4a10      	ldr	r2, [pc, #64]	; (6ca4 <__aeabi_i2d+0x80>)
    6c64:	051b      	lsls	r3, r3, #20
    6c66:	4014      	ands	r4, r2
    6c68:	431c      	orrs	r4, r3
    6c6a:	0064      	lsls	r4, r4, #1
    6c6c:	07ed      	lsls	r5, r5, #31
    6c6e:	0864      	lsrs	r4, r4, #1
    6c70:	432c      	orrs	r4, r5
    6c72:	0021      	movs	r1, r4
    6c74:	bd70      	pop	{r4, r5, r6, pc}
    6c76:	0021      	movs	r1, r4
    6c78:	4091      	lsls	r1, r2
    6c7a:	000a      	movs	r2, r1
    6c7c:	210b      	movs	r1, #11
    6c7e:	1a08      	subs	r0, r1, r0
    6c80:	40c4      	lsrs	r4, r0
    6c82:	055b      	lsls	r3, r3, #21
    6c84:	0324      	lsls	r4, r4, #12
    6c86:	0b24      	lsrs	r4, r4, #12
    6c88:	0d5b      	lsrs	r3, r3, #21
    6c8a:	e7e3      	b.n	6c54 <__aeabi_i2d+0x30>
    6c8c:	2500      	movs	r5, #0
    6c8e:	2300      	movs	r3, #0
    6c90:	2400      	movs	r4, #0
    6c92:	2200      	movs	r2, #0
    6c94:	e7de      	b.n	6c54 <__aeabi_i2d+0x30>
    6c96:	46c0      	nop			; (mov r8, r8)
    6c98:	0000041e 	.word	0x0000041e
    6c9c:	00000433 	.word	0x00000433
    6ca0:	00000413 	.word	0x00000413
    6ca4:	800fffff 	.word	0x800fffff

00006ca8 <__aeabi_ui2d>:
    6ca8:	b570      	push	{r4, r5, r6, lr}
    6caa:	1e05      	subs	r5, r0, #0
    6cac:	d028      	beq.n	6d00 <__aeabi_ui2d+0x58>
    6cae:	f000 f913 	bl	6ed8 <__clzsi2>
    6cb2:	4b15      	ldr	r3, [pc, #84]	; (6d08 <__aeabi_ui2d+0x60>)
    6cb4:	4a15      	ldr	r2, [pc, #84]	; (6d0c <__aeabi_ui2d+0x64>)
    6cb6:	1a1b      	subs	r3, r3, r0
    6cb8:	1ad2      	subs	r2, r2, r3
    6cba:	2a1f      	cmp	r2, #31
    6cbc:	dd16      	ble.n	6cec <__aeabi_ui2d+0x44>
    6cbe:	002c      	movs	r4, r5
    6cc0:	4a13      	ldr	r2, [pc, #76]	; (6d10 <__aeabi_ui2d+0x68>)
    6cc2:	2500      	movs	r5, #0
    6cc4:	1ad2      	subs	r2, r2, r3
    6cc6:	4094      	lsls	r4, r2
    6cc8:	055a      	lsls	r2, r3, #21
    6cca:	0324      	lsls	r4, r4, #12
    6ccc:	0b24      	lsrs	r4, r4, #12
    6cce:	0d52      	lsrs	r2, r2, #21
    6cd0:	2100      	movs	r1, #0
    6cd2:	0324      	lsls	r4, r4, #12
    6cd4:	0d0b      	lsrs	r3, r1, #20
    6cd6:	0b24      	lsrs	r4, r4, #12
    6cd8:	051b      	lsls	r3, r3, #20
    6cda:	4323      	orrs	r3, r4
    6cdc:	4c0d      	ldr	r4, [pc, #52]	; (6d14 <__aeabi_ui2d+0x6c>)
    6cde:	0512      	lsls	r2, r2, #20
    6ce0:	4023      	ands	r3, r4
    6ce2:	4313      	orrs	r3, r2
    6ce4:	005b      	lsls	r3, r3, #1
    6ce6:	0028      	movs	r0, r5
    6ce8:	0859      	lsrs	r1, r3, #1
    6cea:	bd70      	pop	{r4, r5, r6, pc}
    6cec:	210b      	movs	r1, #11
    6cee:	002c      	movs	r4, r5
    6cf0:	1a08      	subs	r0, r1, r0
    6cf2:	40c4      	lsrs	r4, r0
    6cf4:	4095      	lsls	r5, r2
    6cf6:	0324      	lsls	r4, r4, #12
    6cf8:	055a      	lsls	r2, r3, #21
    6cfa:	0b24      	lsrs	r4, r4, #12
    6cfc:	0d52      	lsrs	r2, r2, #21
    6cfe:	e7e7      	b.n	6cd0 <__aeabi_ui2d+0x28>
    6d00:	2200      	movs	r2, #0
    6d02:	2400      	movs	r4, #0
    6d04:	e7e4      	b.n	6cd0 <__aeabi_ui2d+0x28>
    6d06:	46c0      	nop			; (mov r8, r8)
    6d08:	0000041e 	.word	0x0000041e
    6d0c:	00000433 	.word	0x00000433
    6d10:	00000413 	.word	0x00000413
    6d14:	800fffff 	.word	0x800fffff

00006d18 <__aeabi_f2d>:
    6d18:	0042      	lsls	r2, r0, #1
    6d1a:	0e12      	lsrs	r2, r2, #24
    6d1c:	1c51      	adds	r1, r2, #1
    6d1e:	0243      	lsls	r3, r0, #9
    6d20:	b2c9      	uxtb	r1, r1
    6d22:	b570      	push	{r4, r5, r6, lr}
    6d24:	0a5d      	lsrs	r5, r3, #9
    6d26:	0fc4      	lsrs	r4, r0, #31
    6d28:	2901      	cmp	r1, #1
    6d2a:	dd15      	ble.n	6d58 <__aeabi_f2d+0x40>
    6d2c:	21e0      	movs	r1, #224	; 0xe0
    6d2e:	0089      	lsls	r1, r1, #2
    6d30:	468c      	mov	ip, r1
    6d32:	076d      	lsls	r5, r5, #29
    6d34:	0b1b      	lsrs	r3, r3, #12
    6d36:	4462      	add	r2, ip
    6d38:	2100      	movs	r1, #0
    6d3a:	0028      	movs	r0, r5
    6d3c:	0d0d      	lsrs	r5, r1, #20
    6d3e:	052d      	lsls	r5, r5, #20
    6d40:	432b      	orrs	r3, r5
    6d42:	4d1c      	ldr	r5, [pc, #112]	; (6db4 <__aeabi_f2d+0x9c>)
    6d44:	0552      	lsls	r2, r2, #21
    6d46:	402b      	ands	r3, r5
    6d48:	0852      	lsrs	r2, r2, #1
    6d4a:	4313      	orrs	r3, r2
    6d4c:	005b      	lsls	r3, r3, #1
    6d4e:	07e4      	lsls	r4, r4, #31
    6d50:	085b      	lsrs	r3, r3, #1
    6d52:	4323      	orrs	r3, r4
    6d54:	0019      	movs	r1, r3
    6d56:	bd70      	pop	{r4, r5, r6, pc}
    6d58:	2a00      	cmp	r2, #0
    6d5a:	d115      	bne.n	6d88 <__aeabi_f2d+0x70>
    6d5c:	2d00      	cmp	r5, #0
    6d5e:	d01f      	beq.n	6da0 <__aeabi_f2d+0x88>
    6d60:	0028      	movs	r0, r5
    6d62:	f000 f8b9 	bl	6ed8 <__clzsi2>
    6d66:	280a      	cmp	r0, #10
    6d68:	dc1d      	bgt.n	6da6 <__aeabi_f2d+0x8e>
    6d6a:	230b      	movs	r3, #11
    6d6c:	002a      	movs	r2, r5
    6d6e:	1a1b      	subs	r3, r3, r0
    6d70:	40da      	lsrs	r2, r3
    6d72:	0013      	movs	r3, r2
    6d74:	0002      	movs	r2, r0
    6d76:	3215      	adds	r2, #21
    6d78:	4095      	lsls	r5, r2
    6d7a:	4a0f      	ldr	r2, [pc, #60]	; (6db8 <__aeabi_f2d+0xa0>)
    6d7c:	031b      	lsls	r3, r3, #12
    6d7e:	1a12      	subs	r2, r2, r0
    6d80:	0552      	lsls	r2, r2, #21
    6d82:	0b1b      	lsrs	r3, r3, #12
    6d84:	0d52      	lsrs	r2, r2, #21
    6d86:	e7d7      	b.n	6d38 <__aeabi_f2d+0x20>
    6d88:	2d00      	cmp	r5, #0
    6d8a:	d006      	beq.n	6d9a <__aeabi_f2d+0x82>
    6d8c:	2280      	movs	r2, #128	; 0x80
    6d8e:	0b1b      	lsrs	r3, r3, #12
    6d90:	0312      	lsls	r2, r2, #12
    6d92:	4313      	orrs	r3, r2
    6d94:	076d      	lsls	r5, r5, #29
    6d96:	4a09      	ldr	r2, [pc, #36]	; (6dbc <__aeabi_f2d+0xa4>)
    6d98:	e7ce      	b.n	6d38 <__aeabi_f2d+0x20>
    6d9a:	4a08      	ldr	r2, [pc, #32]	; (6dbc <__aeabi_f2d+0xa4>)
    6d9c:	2300      	movs	r3, #0
    6d9e:	e7cb      	b.n	6d38 <__aeabi_f2d+0x20>
    6da0:	2200      	movs	r2, #0
    6da2:	2300      	movs	r3, #0
    6da4:	e7c8      	b.n	6d38 <__aeabi_f2d+0x20>
    6da6:	0003      	movs	r3, r0
    6da8:	3b0b      	subs	r3, #11
    6daa:	409d      	lsls	r5, r3
    6dac:	002b      	movs	r3, r5
    6dae:	2500      	movs	r5, #0
    6db0:	e7e3      	b.n	6d7a <__aeabi_f2d+0x62>
    6db2:	46c0      	nop			; (mov r8, r8)
    6db4:	800fffff 	.word	0x800fffff
    6db8:	00000389 	.word	0x00000389
    6dbc:	000007ff 	.word	0x000007ff

00006dc0 <__aeabi_d2f>:
    6dc0:	004b      	lsls	r3, r1, #1
    6dc2:	b570      	push	{r4, r5, r6, lr}
    6dc4:	0d5e      	lsrs	r6, r3, #21
    6dc6:	030c      	lsls	r4, r1, #12
    6dc8:	1c75      	adds	r5, r6, #1
    6dca:	0a64      	lsrs	r4, r4, #9
    6dcc:	0f42      	lsrs	r2, r0, #29
    6dce:	056d      	lsls	r5, r5, #21
    6dd0:	4322      	orrs	r2, r4
    6dd2:	0fc9      	lsrs	r1, r1, #31
    6dd4:	00c4      	lsls	r4, r0, #3
    6dd6:	0d6d      	lsrs	r5, r5, #21
    6dd8:	2d01      	cmp	r5, #1
    6dda:	dd2a      	ble.n	6e32 <__aeabi_d2f+0x72>
    6ddc:	4b3b      	ldr	r3, [pc, #236]	; (6ecc <__aeabi_d2f+0x10c>)
    6dde:	18f3      	adds	r3, r6, r3
    6de0:	2bfe      	cmp	r3, #254	; 0xfe
    6de2:	dc1a      	bgt.n	6e1a <__aeabi_d2f+0x5a>
    6de4:	2b00      	cmp	r3, #0
    6de6:	dd42      	ble.n	6e6e <__aeabi_d2f+0xae>
    6de8:	0180      	lsls	r0, r0, #6
    6dea:	1e45      	subs	r5, r0, #1
    6dec:	41a8      	sbcs	r0, r5
    6dee:	00d2      	lsls	r2, r2, #3
    6df0:	4310      	orrs	r0, r2
    6df2:	0f62      	lsrs	r2, r4, #29
    6df4:	4302      	orrs	r2, r0
    6df6:	0750      	lsls	r0, r2, #29
    6df8:	d004      	beq.n	6e04 <__aeabi_d2f+0x44>
    6dfa:	200f      	movs	r0, #15
    6dfc:	4010      	ands	r0, r2
    6dfe:	2804      	cmp	r0, #4
    6e00:	d000      	beq.n	6e04 <__aeabi_d2f+0x44>
    6e02:	3204      	adds	r2, #4
    6e04:	2080      	movs	r0, #128	; 0x80
    6e06:	04c0      	lsls	r0, r0, #19
    6e08:	4010      	ands	r0, r2
    6e0a:	d021      	beq.n	6e50 <__aeabi_d2f+0x90>
    6e0c:	3301      	adds	r3, #1
    6e0e:	2bff      	cmp	r3, #255	; 0xff
    6e10:	d003      	beq.n	6e1a <__aeabi_d2f+0x5a>
    6e12:	0192      	lsls	r2, r2, #6
    6e14:	0a52      	lsrs	r2, r2, #9
    6e16:	b2db      	uxtb	r3, r3
    6e18:	e001      	b.n	6e1e <__aeabi_d2f+0x5e>
    6e1a:	23ff      	movs	r3, #255	; 0xff
    6e1c:	2200      	movs	r2, #0
    6e1e:	0252      	lsls	r2, r2, #9
    6e20:	0a52      	lsrs	r2, r2, #9
    6e22:	05db      	lsls	r3, r3, #23
    6e24:	4313      	orrs	r3, r2
    6e26:	005b      	lsls	r3, r3, #1
    6e28:	07c9      	lsls	r1, r1, #31
    6e2a:	085b      	lsrs	r3, r3, #1
    6e2c:	430b      	orrs	r3, r1
    6e2e:	0018      	movs	r0, r3
    6e30:	bd70      	pop	{r4, r5, r6, pc}
    6e32:	2e00      	cmp	r6, #0
    6e34:	d007      	beq.n	6e46 <__aeabi_d2f+0x86>
    6e36:	4314      	orrs	r4, r2
    6e38:	d0ef      	beq.n	6e1a <__aeabi_d2f+0x5a>
    6e3a:	2080      	movs	r0, #128	; 0x80
    6e3c:	00d2      	lsls	r2, r2, #3
    6e3e:	0480      	lsls	r0, r0, #18
    6e40:	4302      	orrs	r2, r0
    6e42:	23ff      	movs	r3, #255	; 0xff
    6e44:	e7d7      	b.n	6df6 <__aeabi_d2f+0x36>
    6e46:	4322      	orrs	r2, r4
    6e48:	2300      	movs	r3, #0
    6e4a:	2a00      	cmp	r2, #0
    6e4c:	d003      	beq.n	6e56 <__aeabi_d2f+0x96>
    6e4e:	2205      	movs	r2, #5
    6e50:	08d2      	lsrs	r2, r2, #3
    6e52:	2bff      	cmp	r3, #255	; 0xff
    6e54:	d003      	beq.n	6e5e <__aeabi_d2f+0x9e>
    6e56:	0252      	lsls	r2, r2, #9
    6e58:	0a52      	lsrs	r2, r2, #9
    6e5a:	b2db      	uxtb	r3, r3
    6e5c:	e7df      	b.n	6e1e <__aeabi_d2f+0x5e>
    6e5e:	2a00      	cmp	r2, #0
    6e60:	d032      	beq.n	6ec8 <__aeabi_d2f+0x108>
    6e62:	2080      	movs	r0, #128	; 0x80
    6e64:	03c0      	lsls	r0, r0, #15
    6e66:	4302      	orrs	r2, r0
    6e68:	0252      	lsls	r2, r2, #9
    6e6a:	0a52      	lsrs	r2, r2, #9
    6e6c:	e7d7      	b.n	6e1e <__aeabi_d2f+0x5e>
    6e6e:	0018      	movs	r0, r3
    6e70:	3017      	adds	r0, #23
    6e72:	db14      	blt.n	6e9e <__aeabi_d2f+0xde>
    6e74:	2080      	movs	r0, #128	; 0x80
    6e76:	0400      	lsls	r0, r0, #16
    6e78:	4302      	orrs	r2, r0
    6e7a:	201e      	movs	r0, #30
    6e7c:	1ac0      	subs	r0, r0, r3
    6e7e:	281f      	cmp	r0, #31
    6e80:	dc0f      	bgt.n	6ea2 <__aeabi_d2f+0xe2>
    6e82:	0025      	movs	r5, r4
    6e84:	4b12      	ldr	r3, [pc, #72]	; (6ed0 <__aeabi_d2f+0x110>)
    6e86:	18f3      	adds	r3, r6, r3
    6e88:	409d      	lsls	r5, r3
    6e8a:	1e6e      	subs	r6, r5, #1
    6e8c:	41b5      	sbcs	r5, r6
    6e8e:	409a      	lsls	r2, r3
    6e90:	002b      	movs	r3, r5
    6e92:	4313      	orrs	r3, r2
    6e94:	0022      	movs	r2, r4
    6e96:	40c2      	lsrs	r2, r0
    6e98:	431a      	orrs	r2, r3
    6e9a:	2300      	movs	r3, #0
    6e9c:	e7ab      	b.n	6df6 <__aeabi_d2f+0x36>
    6e9e:	2300      	movs	r3, #0
    6ea0:	e7d5      	b.n	6e4e <__aeabi_d2f+0x8e>
    6ea2:	2502      	movs	r5, #2
    6ea4:	426d      	negs	r5, r5
    6ea6:	1aeb      	subs	r3, r5, r3
    6ea8:	0015      	movs	r5, r2
    6eaa:	40dd      	lsrs	r5, r3
    6eac:	2820      	cmp	r0, #32
    6eae:	d009      	beq.n	6ec4 <__aeabi_d2f+0x104>
    6eb0:	4b08      	ldr	r3, [pc, #32]	; (6ed4 <__aeabi_d2f+0x114>)
    6eb2:	18f3      	adds	r3, r6, r3
    6eb4:	409a      	lsls	r2, r3
    6eb6:	4314      	orrs	r4, r2
    6eb8:	1e62      	subs	r2, r4, #1
    6eba:	4194      	sbcs	r4, r2
    6ebc:	0022      	movs	r2, r4
    6ebe:	2300      	movs	r3, #0
    6ec0:	432a      	orrs	r2, r5
    6ec2:	e798      	b.n	6df6 <__aeabi_d2f+0x36>
    6ec4:	2200      	movs	r2, #0
    6ec6:	e7f6      	b.n	6eb6 <__aeabi_d2f+0xf6>
    6ec8:	2200      	movs	r2, #0
    6eca:	e7a8      	b.n	6e1e <__aeabi_d2f+0x5e>
    6ecc:	fffffc80 	.word	0xfffffc80
    6ed0:	fffffc82 	.word	0xfffffc82
    6ed4:	fffffca2 	.word	0xfffffca2

00006ed8 <__clzsi2>:
    6ed8:	211c      	movs	r1, #28
    6eda:	2301      	movs	r3, #1
    6edc:	041b      	lsls	r3, r3, #16
    6ede:	4298      	cmp	r0, r3
    6ee0:	d301      	bcc.n	6ee6 <__clzsi2+0xe>
    6ee2:	0c00      	lsrs	r0, r0, #16
    6ee4:	3910      	subs	r1, #16
    6ee6:	0a1b      	lsrs	r3, r3, #8
    6ee8:	4298      	cmp	r0, r3
    6eea:	d301      	bcc.n	6ef0 <__clzsi2+0x18>
    6eec:	0a00      	lsrs	r0, r0, #8
    6eee:	3908      	subs	r1, #8
    6ef0:	091b      	lsrs	r3, r3, #4
    6ef2:	4298      	cmp	r0, r3
    6ef4:	d301      	bcc.n	6efa <__clzsi2+0x22>
    6ef6:	0900      	lsrs	r0, r0, #4
    6ef8:	3904      	subs	r1, #4
    6efa:	a202      	add	r2, pc, #8	; (adr r2, 6f04 <__clzsi2+0x2c>)
    6efc:	5c10      	ldrb	r0, [r2, r0]
    6efe:	1840      	adds	r0, r0, r1
    6f00:	4770      	bx	lr
    6f02:	46c0      	nop			; (mov r8, r8)
    6f04:	02020304 	.word	0x02020304
    6f08:	01010101 	.word	0x01010101
	...

00006f14 <__errno>:
    6f14:	4b01      	ldr	r3, [pc, #4]	; (6f1c <__errno+0x8>)
    6f16:	6818      	ldr	r0, [r3, #0]
    6f18:	4770      	bx	lr
    6f1a:	46c0      	nop			; (mov r8, r8)
    6f1c:	2000011c 	.word	0x2000011c

00006f20 <__libc_init_array>:
    6f20:	4b0e      	ldr	r3, [pc, #56]	; (6f5c <__libc_init_array+0x3c>)
    6f22:	b570      	push	{r4, r5, r6, lr}
    6f24:	2500      	movs	r5, #0
    6f26:	001e      	movs	r6, r3
    6f28:	4c0d      	ldr	r4, [pc, #52]	; (6f60 <__libc_init_array+0x40>)
    6f2a:	1ae4      	subs	r4, r4, r3
    6f2c:	10a4      	asrs	r4, r4, #2
    6f2e:	42a5      	cmp	r5, r4
    6f30:	d004      	beq.n	6f3c <__libc_init_array+0x1c>
    6f32:	00ab      	lsls	r3, r5, #2
    6f34:	58f3      	ldr	r3, [r6, r3]
    6f36:	4798      	blx	r3
    6f38:	3501      	adds	r5, #1
    6f3a:	e7f8      	b.n	6f2e <__libc_init_array+0xe>
    6f3c:	f000 f896 	bl	706c <_init>
    6f40:	4b08      	ldr	r3, [pc, #32]	; (6f64 <__libc_init_array+0x44>)
    6f42:	2500      	movs	r5, #0
    6f44:	001e      	movs	r6, r3
    6f46:	4c08      	ldr	r4, [pc, #32]	; (6f68 <__libc_init_array+0x48>)
    6f48:	1ae4      	subs	r4, r4, r3
    6f4a:	10a4      	asrs	r4, r4, #2
    6f4c:	42a5      	cmp	r5, r4
    6f4e:	d004      	beq.n	6f5a <__libc_init_array+0x3a>
    6f50:	00ab      	lsls	r3, r5, #2
    6f52:	58f3      	ldr	r3, [r6, r3]
    6f54:	4798      	blx	r3
    6f56:	3501      	adds	r5, #1
    6f58:	e7f8      	b.n	6f4c <__libc_init_array+0x2c>
    6f5a:	bd70      	pop	{r4, r5, r6, pc}
    6f5c:	00007078 	.word	0x00007078
    6f60:	00007078 	.word	0x00007078
    6f64:	00007078 	.word	0x00007078
    6f68:	0000707c 	.word	0x0000707c

00006f6c <senseBatPin>:
    6f6c:	06000000 01000106                                .....

00006f71 <senseAPin>:
    6f71:	03010001 0100010b                                .....

00006f76 <senseBPin>:
    6f76:	02010001 0000010a                                .....

00006f7b <senseCPin>:
    6f7b:	03000001 00000101                                .....

00006f80 <senseDPin>:
    6f80:	02000001 00000100                                .....

00006f85 <analogAccelPin>:
    6f85:	07000001 70000007 0000776f 00000000     .......pow......
    6f95:	00000000                                         ...

00006f98 <TWO52>:
    6f98:	00000000 43300000 00000000 c3300000     ......0C......0.
    6fa8:	00004fec 00004f4a 00004f4a 00004f48     .O..JO..JO..HO..
    6fb8:	00004fde 00004fde 00004fd4 00004f48     .O...O...O..HO..
    6fc8:	00004fde 00004fd4 00004fde 00004f48     .O...O...O..HO..
    6fd8:	00004fe4 00004fe4 00004fe4 0000506e     .O...O...O..nP..
    6fe8:	00005984 00005852 00005958 00005848     .Y..RX..XY..HX..
    6ff8:	00005958 00005962 00005958 00005848     XY..bY..XY..HX..
    7008:	00005852 00005852 00005962 00005848     RX..RX..bY..HX..
    7018:	0000583e 0000583e 0000583e 00005bb4     >X..>X..>X...[..
    7028:	000061cc 0000608c 0000608c 0000608a     .a...`...`...`..
    7038:	000061a4 000061a4 00006196 0000608a     .a...a...a...`..
    7048:	000061a4 00006196 000061a4 0000608a     .a...a...a...`..
    7058:	000061ac 000061ac 000061ac 000063ac     .a...a...a...c..
    7068:	00000043                                C...

0000706c <_init>:
    706c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    706e:	46c0      	nop			; (mov r8, r8)
    7070:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7072:	bc08      	pop	{r3}
    7074:	469e      	mov	lr, r3
    7076:	4770      	bx	lr

00007078 <__init_array_start>:
    7078:	000000dd 	.word	0x000000dd

0000707c <_fini>:
    707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    707e:	46c0      	nop			; (mov r8, r8)
    7080:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7082:	bc08      	pop	{r3}
    7084:	469e      	mov	lr, r3
    7086:	4770      	bx	lr

00007088 <__fini_array_start>:
    7088:	000000b5 	.word	0x000000b5
