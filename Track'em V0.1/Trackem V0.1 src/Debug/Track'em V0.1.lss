
Track'em V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011c0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  000011c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000074  2000000c  000011cc  0002000c  2**2
                  ALLOC
  3 .stack        00000400  20000080  00001240  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00010fb2  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001349  00000000  00000000  0003103f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000017e2  00000000  00000000  00032388  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000210  00000000  00000000  00033b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000450  00000000  00000000  00033d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000199e  00000000  00000000  000341ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002838  00000000  00000000  00035b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000560  00000000  00000000  000383a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20000480 	.word	0x20000480
       4:	000000f1 	.word	0x000000f1
       8:	000000ed 	.word	0x000000ed
       c:	000000ed 	.word	0x000000ed
	...
      2c:	000000ed 	.word	0x000000ed
	...
      38:	000000ed 	.word	0x000000ed
      3c:	000000ed 	.word	0x000000ed
      40:	000000ed 	.word	0x000000ed
      44:	000000ed 	.word	0x000000ed
      48:	000000ed 	.word	0x000000ed
      4c:	00000c3d 	.word	0x00000c3d
      50:	000000ed 	.word	0x000000ed
      54:	000000ed 	.word	0x000000ed
      58:	000000ed 	.word	0x000000ed
      5c:	000000ed 	.word	0x000000ed
      60:	000000ed 	.word	0x000000ed
      64:	000000ed 	.word	0x000000ed
      68:	000000ed 	.word	0x000000ed
      6c:	00000000 	.word	0x00000000
      70:	000000ed 	.word	0x000000ed
      74:	00000ca9 	.word	0x00000ca9
      78:	000000ed 	.word	0x000000ed
      7c:	000000ed 	.word	0x000000ed
      80:	000000ed 	.word	0x000000ed
      84:	000000ed 	.word	0x000000ed
      88:	000000ed 	.word	0x000000ed

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	2000000c 	.word	0x2000000c
      ac:	00000000 	.word	0x00000000
      b0:	000011c0 	.word	0x000011c0

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000010 	.word	0x20000010
      e0:	000011c0 	.word	0x000011c0
      e4:	000011c0 	.word	0x000011c0
      e8:	00000000 	.word	0x00000000

000000ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
      ec:	e7fe      	b.n	ec <Dummy_Handler>
      ee:	46c0      	nop			; (mov r8, r8)

000000f0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
      f0:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
      f2:	4b2e      	ldr	r3, [pc, #184]	; (1ac <Reset_Handler+0xbc>)
      f4:	4a2e      	ldr	r2, [pc, #184]	; (1b0 <Reset_Handler+0xc0>)
      f6:	429a      	cmp	r2, r3
      f8:	d003      	beq.n	102 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
      fa:	4b2e      	ldr	r3, [pc, #184]	; (1b4 <Reset_Handler+0xc4>)
      fc:	4a2b      	ldr	r2, [pc, #172]	; (1ac <Reset_Handler+0xbc>)
      fe:	429a      	cmp	r2, r3
     100:	d304      	bcc.n	10c <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     102:	4b2d      	ldr	r3, [pc, #180]	; (1b8 <Reset_Handler+0xc8>)
     104:	4a2d      	ldr	r2, [pc, #180]	; (1bc <Reset_Handler+0xcc>)
     106:	429a      	cmp	r2, r3
     108:	d310      	bcc.n	12c <Reset_Handler+0x3c>
     10a:	e01e      	b.n	14a <Reset_Handler+0x5a>
     10c:	4a2c      	ldr	r2, [pc, #176]	; (1c0 <Reset_Handler+0xd0>)
     10e:	4b29      	ldr	r3, [pc, #164]	; (1b4 <Reset_Handler+0xc4>)
     110:	3303      	adds	r3, #3
     112:	1a9b      	subs	r3, r3, r2
     114:	089b      	lsrs	r3, r3, #2
     116:	3301      	adds	r3, #1
     118:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     11a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     11c:	4823      	ldr	r0, [pc, #140]	; (1ac <Reset_Handler+0xbc>)
     11e:	4924      	ldr	r1, [pc, #144]	; (1b0 <Reset_Handler+0xc0>)
     120:	588c      	ldr	r4, [r1, r2]
     122:	5084      	str	r4, [r0, r2]
     124:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     126:	429a      	cmp	r2, r3
     128:	d1fa      	bne.n	120 <Reset_Handler+0x30>
     12a:	e7ea      	b.n	102 <Reset_Handler+0x12>
     12c:	4a25      	ldr	r2, [pc, #148]	; (1c4 <Reset_Handler+0xd4>)
     12e:	4b22      	ldr	r3, [pc, #136]	; (1b8 <Reset_Handler+0xc8>)
     130:	3303      	adds	r3, #3
     132:	1a9b      	subs	r3, r3, r2
     134:	089b      	lsrs	r3, r3, #2
     136:	3301      	adds	r3, #1
     138:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13a:	2200      	movs	r2, #0
                *pDest++ = 0;
     13c:	481f      	ldr	r0, [pc, #124]	; (1bc <Reset_Handler+0xcc>)
     13e:	2100      	movs	r1, #0
     140:	1814      	adds	r4, r2, r0
     142:	6021      	str	r1, [r4, #0]
     144:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	429a      	cmp	r2, r3
     148:	d1fa      	bne.n	140 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14a:	4a1f      	ldr	r2, [pc, #124]	; (1c8 <Reset_Handler+0xd8>)
     14c:	21ff      	movs	r1, #255	; 0xff
     14e:	4b1f      	ldr	r3, [pc, #124]	; (1cc <Reset_Handler+0xdc>)
     150:	438b      	bics	r3, r1
     152:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     154:	39fd      	subs	r1, #253	; 0xfd
     156:	2390      	movs	r3, #144	; 0x90
     158:	005b      	lsls	r3, r3, #1
     15a:	4a1d      	ldr	r2, [pc, #116]	; (1d0 <Reset_Handler+0xe0>)
     15c:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	481d      	ldr	r0, [pc, #116]	; (1d4 <Reset_Handler+0xe4>)
     160:	78c3      	ldrb	r3, [r0, #3]
     162:	2403      	movs	r4, #3
     164:	43a3      	bics	r3, r4
     166:	2202      	movs	r2, #2
     168:	4313      	orrs	r3, r2
     16a:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     16c:	78c3      	ldrb	r3, [r0, #3]
     16e:	260c      	movs	r6, #12
     170:	43b3      	bics	r3, r6
     172:	2108      	movs	r1, #8
     174:	430b      	orrs	r3, r1
     176:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     178:	4b17      	ldr	r3, [pc, #92]	; (1d8 <Reset_Handler+0xe8>)
     17a:	7b98      	ldrb	r0, [r3, #14]
     17c:	2530      	movs	r5, #48	; 0x30
     17e:	43a8      	bics	r0, r5
     180:	0005      	movs	r5, r0
     182:	2020      	movs	r0, #32
     184:	4328      	orrs	r0, r5
     186:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     188:	7b98      	ldrb	r0, [r3, #14]
     18a:	43b0      	bics	r0, r6
     18c:	4301      	orrs	r1, r0
     18e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     190:	7b99      	ldrb	r1, [r3, #14]
     192:	43a1      	bics	r1, r4
     194:	430a      	orrs	r2, r1
     196:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     198:	4a10      	ldr	r2, [pc, #64]	; (1dc <Reset_Handler+0xec>)
     19a:	6851      	ldr	r1, [r2, #4]
     19c:	2380      	movs	r3, #128	; 0x80
     19e:	430b      	orrs	r3, r1
     1a0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1a2:	4b0f      	ldr	r3, [pc, #60]	; (1e0 <Reset_Handler+0xf0>)
     1a4:	4798      	blx	r3

        /* Branch to main function */
        main();
     1a6:	4b0f      	ldr	r3, [pc, #60]	; (1e4 <Reset_Handler+0xf4>)
     1a8:	4798      	blx	r3
     1aa:	e7fe      	b.n	1aa <Reset_Handler+0xba>
     1ac:	20000000 	.word	0x20000000
     1b0:	000011c0 	.word	0x000011c0
     1b4:	2000000c 	.word	0x2000000c
     1b8:	20000080 	.word	0x20000080
     1bc:	2000000c 	.word	0x2000000c
     1c0:	20000004 	.word	0x20000004
     1c4:	20000010 	.word	0x20000010
     1c8:	e000ed00 	.word	0xe000ed00
     1cc:	00000000 	.word	0x00000000
     1d0:	41007000 	.word	0x41007000
     1d4:	41005000 	.word	0x41005000
     1d8:	41004800 	.word	0x41004800
     1dc:	41004000 	.word	0x41004000
     1e0:	0000109d 	.word	0x0000109d
     1e4:	000003c5 	.word	0x000003c5

000001e8 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     1e8:	4a01      	ldr	r2, [pc, #4]	; (1f0 <SystemInit+0x8>)
     1ea:	4b02      	ldr	r3, [pc, #8]	; (1f4 <SystemInit+0xc>)
     1ec:	601a      	str	r2, [r3, #0]
	return;
}
     1ee:	4770      	bx	lr
     1f0:	000f4240 	.word	0x000f4240
     1f4:	20000000 	.word	0x20000000

000001f8 <init>:

#include "sam.h"
#include <util.h>
#include <boardDefines.h>

void init() {
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	4657      	mov	r7, sl
     1fc:	464e      	mov	r6, r9
     1fe:	4645      	mov	r5, r8
     200:	b4e0      	push	{r5, r6, r7}

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     202:	495a      	ldr	r1, [pc, #360]	; (36c <init+0x174>)
     204:	684b      	ldr	r3, [r1, #4]
     206:	221e      	movs	r2, #30
     208:	4393      	bics	r3, r2
     20a:	3a1c      	subs	r2, #28
     20c:	4313      	orrs	r3, r2
     20e:	604b      	str	r3, [r1, #4]


    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     210:	4a57      	ldr	r2, [pc, #348]	; (370 <init+0x178>)
     212:	6991      	ldr	r1, [r2, #24]
     214:	2308      	movs	r3, #8
     216:	430b      	orrs	r3, r1
     218:	6193      	str	r3, [r2, #24]

    SystemInit();
     21a:	4b56      	ldr	r3, [pc, #344]	; (374 <init+0x17c>)
     21c:	4798      	blx	r3
    GclkInit();
     21e:	4b56      	ldr	r3, [pc, #344]	; (378 <init+0x180>)
     220:	4798      	blx	r3
    RtcInit();
     222:	4b56      	ldr	r3, [pc, #344]	; (37c <init+0x184>)
     224:	4798      	blx	r3
    delayInit();
     226:	4b56      	ldr	r3, [pc, #344]	; (380 <init+0x188>)
     228:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     22a:	4b56      	ldr	r3, [pc, #344]	; (384 <init+0x18c>)
     22c:	2240      	movs	r2, #64	; 0x40
     22e:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     230:	21c1      	movs	r1, #193	; 0xc1
     232:	0089      	lsls	r1, r1, #2
     234:	5858      	ldr	r0, [r3, r1]
     236:	4a54      	ldr	r2, [pc, #336]	; (388 <init+0x190>)
     238:	4002      	ands	r2, r0
     23a:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     23c:	4b53      	ldr	r3, [pc, #332]	; (38c <init+0x194>)
     23e:	254e      	movs	r5, #78	; 0x4e
     240:	5d59      	ldrb	r1, [r3, r5]
     242:	2201      	movs	r2, #1
     244:	4391      	bics	r1, r2
     246:	5559      	strb	r1, [r3, r5]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     248:	2180      	movs	r1, #128	; 0x80
     24a:	01c9      	lsls	r1, r1, #7
     24c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     24e:	204f      	movs	r0, #79	; 0x4f
     250:	5c19      	ldrb	r1, [r3, r0]
     252:	4391      	bics	r1, r2
     254:	5419      	strb	r1, [r3, r0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     256:	5c1c      	ldrb	r4, [r3, r0]
     258:	2102      	movs	r1, #2
     25a:	430c      	orrs	r4, r1
     25c:	541c      	strb	r4, [r3, r0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     25e:	2480      	movs	r4, #128	; 0x80
     260:	0224      	lsls	r4, r4, #8
     262:	605c      	str	r4, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     264:	2437      	movs	r4, #55	; 0x37
     266:	46a0      	mov	r8, r4
     268:	5d1c      	ldrb	r4, [r3, r4]
     26a:	260f      	movs	r6, #15
     26c:	46b4      	mov	ip, r6
     26e:	43b4      	bics	r4, r6
     270:	430c      	orrs	r4, r1
     272:	4646      	mov	r6, r8
     274:	559c      	strb	r4, [r3, r6]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     276:	5d5e      	ldrb	r6, [r3, r5]
     278:	2401      	movs	r4, #1
     27a:	4326      	orrs	r6, r4
     27c:	555e      	strb	r6, [r3, r5]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     27e:	4645      	mov	r5, r8
     280:	5d5d      	ldrb	r5, [r3, r5]
     282:	260f      	movs	r6, #15
     284:	46b2      	mov	sl, r6
     286:	4035      	ands	r5, r6
     288:	2720      	movs	r7, #32
     28a:	433d      	orrs	r5, r7
     28c:	4646      	mov	r6, r8
     28e:	559d      	strb	r5, [r3, r6]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     290:	5c1d      	ldrb	r5, [r3, r0]
     292:	4325      	orrs	r5, r4
     294:	541d      	strb	r5, [r3, r0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     296:	3009      	adds	r0, #9
     298:	4681      	mov	r9, r0
     29a:	5c18      	ldrb	r0, [r3, r0]
     29c:	4390      	bics	r0, r2
     29e:	464d      	mov	r5, r9
     2a0:	5558      	strb	r0, [r3, r5]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2a2:	2080      	movs	r0, #128	; 0x80
     2a4:	0440      	lsls	r0, r0, #17
     2a6:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2a8:	2059      	movs	r0, #89	; 0x59
     2aa:	5c1d      	ldrb	r5, [r3, r0]
     2ac:	4395      	bics	r5, r2
     2ae:	541d      	strb	r5, [r3, r0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     2b0:	5c1d      	ldrb	r5, [r3, r0]
     2b2:	430d      	orrs	r5, r1
     2b4:	541d      	strb	r5, [r3, r0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     2b6:	2580      	movs	r5, #128	; 0x80
     2b8:	04ad      	lsls	r5, r5, #18
     2ba:	605d      	str	r5, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     2bc:	253c      	movs	r5, #60	; 0x3c
     2be:	46a8      	mov	r8, r5
     2c0:	5d5d      	ldrb	r5, [r3, r5]
     2c2:	4666      	mov	r6, ip
     2c4:	43b5      	bics	r5, r6
     2c6:	430d      	orrs	r5, r1
     2c8:	4646      	mov	r6, r8
     2ca:	559d      	strb	r5, [r3, r6]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2cc:	464d      	mov	r5, r9
     2ce:	5d5d      	ldrb	r5, [r3, r5]
     2d0:	4325      	orrs	r5, r4
     2d2:	464e      	mov	r6, r9
     2d4:	559d      	strb	r5, [r3, r6]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2d6:	4645      	mov	r5, r8
     2d8:	5d5d      	ldrb	r5, [r3, r5]
     2da:	4656      	mov	r6, sl
     2dc:	402e      	ands	r6, r5
     2de:	4337      	orrs	r7, r6
     2e0:	4645      	mov	r5, r8
     2e2:	555f      	strb	r7, [r3, r5]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2e4:	5c1d      	ldrb	r5, [r3, r0]
     2e6:	432c      	orrs	r4, r5
     2e8:	541c      	strb	r4, [r3, r0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2ea:	2448      	movs	r4, #72	; 0x48
     2ec:	5d18      	ldrb	r0, [r3, r4]
     2ee:	4390      	bics	r0, r2
     2f0:	5518      	strb	r0, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2f2:	2080      	movs	r0, #128	; 0x80
     2f4:	0040      	lsls	r0, r0, #1
     2f6:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2f8:	3401      	adds	r4, #1
     2fa:	5d18      	ldrb	r0, [r3, r4]
     2fc:	4390      	bics	r0, r2
     2fe:	5518      	strb	r0, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     300:	2080      	movs	r0, #128	; 0x80
     302:	0080      	lsls	r0, r0, #2
     304:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     306:	38bc      	subs	r0, #188	; 0xbc
     308:	38ff      	subs	r0, #255	; 0xff
     30a:	5c1c      	ldrb	r4, [r3, r0]
     30c:	4394      	bics	r4, r2
     30e:	541c      	strb	r4, [r3, r0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     310:	5c1c      	ldrb	r4, [r3, r0]
     312:	4321      	orrs	r1, r4
     314:	5419      	strb	r1, [r3, r0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     316:	2120      	movs	r1, #32
     318:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     31a:	3803      	subs	r0, #3
     31c:	5c19      	ldrb	r1, [r3, r0]
     31e:	4391      	bics	r1, r2
     320:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     322:	2104      	movs	r1, #4
     324:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     326:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     328:	3002      	adds	r0, #2
     32a:	5c19      	ldrb	r1, [r3, r0]
     32c:	4391      	bics	r1, r2
     32e:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     330:	2210      	movs	r2, #16
     332:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     334:	619a      	str	r2, [r3, #24]
    pinOut(cs_mem);
    pinHigh(cs_mem);
    pinOut(cs_tx);
    pinHigh(cs_tx);

    sercomClockEnable(USART0, 4, 8);
     336:	3a08      	subs	r2, #8
     338:	2104      	movs	r1, #4
     33a:	2000      	movs	r0, #0
     33c:	4d14      	ldr	r5, [pc, #80]	; (390 <init+0x198>)
     33e:	47a8      	blx	r5
    sercomUartInit(USART0,1,0,63860);
     340:	4b14      	ldr	r3, [pc, #80]	; (394 <init+0x19c>)
     342:	2200      	movs	r2, #0
     344:	2101      	movs	r1, #1
     346:	2000      	movs	r0, #0
     348:	4c13      	ldr	r4, [pc, #76]	; (398 <init+0x1a0>)
     34a:	47a0      	blx	r4

    sercomClockEnable(USART1, 4, 8);
     34c:	2208      	movs	r2, #8
     34e:	2104      	movs	r1, #4
     350:	2001      	movs	r0, #1
     352:	47a8      	blx	r5
    sercomUartInit(USART1,3,1,45403);
     354:	4b11      	ldr	r3, [pc, #68]	; (39c <init+0x1a4>)
     356:	2201      	movs	r2, #1
     358:	2103      	movs	r1, #3
     35a:	2001      	movs	r0, #1
     35c:	47a0      	blx	r4

    TC1Init();
     35e:	4b10      	ldr	r3, [pc, #64]	; (3a0 <init+0x1a8>)
     360:	4798      	blx	r3

}
     362:	bc1c      	pop	{r2, r3, r4}
     364:	4690      	mov	r8, r2
     366:	4699      	mov	r9, r3
     368:	46a2      	mov	sl, r4
     36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     36c:	41004000 	.word	0x41004000
     370:	40000400 	.word	0x40000400
     374:	000001e9 	.word	0x000001e9
     378:	00000a39 	.word	0x00000a39
     37c:	00000abd 	.word	0x00000abd
     380:	00000bc5 	.word	0x00000bc5
     384:	e000e100 	.word	0xe000e100
     388:	ff00ffff 	.word	0xff00ffff
     38c:	41004400 	.word	0x41004400
     390:	00000fc1 	.word	0x00000fc1
     394:	0000f974 	.word	0x0000f974
     398:	00001029 	.word	0x00001029
     39c:	0000b15b 	.word	0x0000b15b
     3a0:	00000c5d 	.word	0x00000c5d

000003a4 <SendUSART>:


void SendUSART(char message[], int length) {
     3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3a6:	0006      	movs	r6, r0
     3a8:	1e0d      	subs	r5, r1, #0

    for (u8_t i = 0; i < length; i++) {
     3aa:	dd08      	ble.n	3be <SendUSART+0x1a>
     3ac:	2400      	movs	r4, #0
        usartDataOut(USART1,message[i]);
     3ae:	4f04      	ldr	r7, [pc, #16]	; (3c0 <SendUSART+0x1c>)
     3b0:	5d31      	ldrb	r1, [r6, r4]
     3b2:	2001      	movs	r0, #1
     3b4:	47b8      	blx	r7
}


void SendUSART(char message[], int length) {

    for (u8_t i = 0; i < length; i++) {
     3b6:	3401      	adds	r4, #1
     3b8:	b2e4      	uxtb	r4, r4
     3ba:	42ac      	cmp	r4, r5
     3bc:	dbf8      	blt.n	3b0 <SendUSART+0xc>
        usartDataOut(USART1,message[i]);
    }

}
     3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3c0:	00001071 	.word	0x00001071

000003c4 <main>:


int main(void) {
     3c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3c6:	4657      	mov	r7, sl
     3c8:	b480      	push	{r7}
     3ca:	b09c      	sub	sp, #112	; 0x70
    /* Initialize the SAM system */
    init();
     3cc:	4b35      	ldr	r3, [pc, #212]	; (4a4 <STACK_SIZE+0xa4>)
     3ce:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3d0:	4e35      	ldr	r6, [pc, #212]	; (4a8 <STACK_SIZE+0xa8>)
     3d2:	2704      	movs	r7, #4
     3d4:	6177      	str	r7, [r6, #20]
//     pinHigh(cs_tx);

    // delay_ms(100);

    pinLow(cs_mem);
    byteOut(spiSCK,spiMOSI,0x9f);
     3d6:	4c35      	ldr	r4, [pc, #212]	; (4ac <STACK_SIZE+0xac>)
     3d8:	239f      	movs	r3, #159	; 0x9f
     3da:	9300      	str	r3, [sp, #0]
     3dc:	6822      	ldr	r2, [r4, #0]
     3de:	6863      	ldr	r3, [r4, #4]
     3e0:	68a0      	ldr	r0, [r4, #8]
     3e2:	68e1      	ldr	r1, [r4, #12]
     3e4:	4d32      	ldr	r5, [pc, #200]	; (4b0 <STACK_SIZE+0xb0>)
     3e6:	47a8      	blx	r5
    u8_t ID = byteIn(spiSCK, spiMISO);
     3e8:	6922      	ldr	r2, [r4, #16]
     3ea:	6963      	ldr	r3, [r4, #20]
     3ec:	68a0      	ldr	r0, [r4, #8]
     3ee:	68e1      	ldr	r1, [r4, #12]
     3f0:	4d30      	ldr	r5, [pc, #192]	; (4b4 <STACK_SIZE+0xb4>)
     3f2:	47a8      	blx	r5
    u8_t ID2 = byteIn(spiSCK, spiMISO);
     3f4:	6922      	ldr	r2, [r4, #16]
     3f6:	6963      	ldr	r3, [r4, #20]
     3f8:	68a0      	ldr	r0, [r4, #8]
     3fa:	68e1      	ldr	r1, [r4, #12]
     3fc:	47a8      	blx	r5
    u8_t ID3 = byteIn(spiSCK, spiMISO);
     3fe:	6922      	ldr	r2, [r4, #16]
     400:	6963      	ldr	r3, [r4, #20]
     402:	68a0      	ldr	r0, [r4, #8]
     404:	68e1      	ldr	r1, [r4, #12]
     406:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     408:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_mem);


    write_cc1101_status_regersters();
     40a:	4b2b      	ldr	r3, [pc, #172]	; (4b8 <STACK_SIZE+0xb8>)
     40c:	4798      	blx	r3
    delay_ms(100);
     40e:	2064      	movs	r0, #100	; 0x64
     410:	4c2a      	ldr	r4, [pc, #168]	; (4bc <STACK_SIZE+0xbc>)
     412:	47a0      	blx	r4

    //sendreg();

    delay_ms(100);
     414:	2064      	movs	r0, #100	; 0x64
     416:	47a0      	blx	r4


    CC1101_cmd_strobe(CC1101_SFSTXON);
     418:	2031      	movs	r0, #49	; 0x31
     41a:	4b29      	ldr	r3, [pc, #164]	; (4c0 <STACK_SIZE+0xc0>)
     41c:	4798      	blx	r3
//         volatile bool sent = CC1101_tx_data(packet, 0x18);
//
//         u8_t status2 = CC1101_read_status_reg(CC1101_MARCSTATE);


        parseGPSMessage();
     41e:	4e29      	ldr	r6, [pc, #164]	; (4c4 <STACK_SIZE+0xc4>)

        if (myMessage.messageReady == true && myMessage.transmitMessage == true) {
     420:	4d29      	ldr	r5, [pc, #164]	; (4c8 <STACK_SIZE+0xc8>)
            myMessage.messageReady = false;
     422:	002c      	movs	r4, r5
            myMessage.transmitMessage = false;

            u8_t packet[18] = {0xAA, 0x0A, 0xAA, 0xFA, 0xAA, 0xAA, 0xA2, 0xAA, 0xAA, 0xAA, 0x0A, 0xAA, 0xAA, 0xAA, 0xAA, 0xA7, 0xAA, 0xAA};
     424:	4b21      	ldr	r3, [pc, #132]	; (4ac <STACK_SIZE+0xac>)
     426:	3318      	adds	r3, #24
     428:	9314      	str	r3, [sp, #80]	; 0x50

            volatile bool sent = CC1101_tx_data(packet, 0x18);

            u8_t status2 = CC1101_read_status_reg(CC1101_MARCSTATE);

            sendUSARTMessage(myMessage);
     42a:	2310      	movs	r3, #16
     42c:	469c      	mov	ip, r3
     42e:	44ac      	add	ip, r5
     430:	4663      	mov	r3, ip
     432:	9315      	str	r3, [sp, #84]	; 0x54
//         volatile bool sent = CC1101_tx_data(packet, 0x18);
//
//         u8_t status2 = CC1101_read_status_reg(CC1101_MARCSTATE);


        parseGPSMessage();
     434:	47b0      	blx	r6

        if (myMessage.messageReady == true && myMessage.transmitMessage == true) {
     436:	786b      	ldrb	r3, [r5, #1]
     438:	2b00      	cmp	r3, #0
     43a:	d0fb      	beq.n	434 <STACK_SIZE+0x34>
     43c:	4b22      	ldr	r3, [pc, #136]	; (4c8 <STACK_SIZE+0xc8>)
     43e:	781b      	ldrb	r3, [r3, #0]
     440:	2b00      	cmp	r3, #0
     442:	d0f7      	beq.n	434 <STACK_SIZE+0x34>
            myMessage.messageReady = false;
     444:	2300      	movs	r3, #0
     446:	7063      	strb	r3, [r4, #1]
            myMessage.transmitMessage = false;
     448:	7023      	strb	r3, [r4, #0]

            u8_t packet[18] = {0xAA, 0x0A, 0xAA, 0xFA, 0xAA, 0xAA, 0xA2, 0xAA, 0xAA, 0xAA, 0x0A, 0xAA, 0xAA, 0xAA, 0xAA, 0xA7, 0xAA, 0xAA};
     44a:	2212      	movs	r2, #18
     44c:	9914      	ldr	r1, [sp, #80]	; 0x50
     44e:	a817      	add	r0, sp, #92	; 0x5c
     450:	4b1e      	ldr	r3, [pc, #120]	; (4cc <STACK_SIZE+0xcc>)
     452:	469a      	mov	sl, r3
     454:	4798      	blx	r3

            volatile bool sent = CC1101_tx_data(packet, 0x18);
     456:	2118      	movs	r1, #24
     458:	a817      	add	r0, sp, #92	; 0x5c
     45a:	4b1d      	ldr	r3, [pc, #116]	; (4d0 <STACK_SIZE+0xd0>)
     45c:	4798      	blx	r3
     45e:	274b      	movs	r7, #75	; 0x4b
     460:	ab04      	add	r3, sp, #16
     462:	469c      	mov	ip, r3
     464:	4467      	add	r7, ip
     466:	9713      	str	r7, [sp, #76]	; 0x4c
     468:	7038      	strb	r0, [r7, #0]

            u8_t status2 = CC1101_read_status_reg(CC1101_MARCSTATE);
     46a:	20f5      	movs	r0, #245	; 0xf5
     46c:	4b19      	ldr	r3, [pc, #100]	; (4d4 <STACK_SIZE+0xd4>)
     46e:	4798      	blx	r3

            sendUSARTMessage(myMessage);
     470:	2244      	movs	r2, #68	; 0x44
     472:	9915      	ldr	r1, [sp, #84]	; 0x54
     474:	4668      	mov	r0, sp
     476:	47d0      	blx	sl
     478:	6820      	ldr	r0, [r4, #0]
     47a:	6861      	ldr	r1, [r4, #4]
     47c:	68a2      	ldr	r2, [r4, #8]
     47e:	68e3      	ldr	r3, [r4, #12]
     480:	4f15      	ldr	r7, [pc, #84]	; (4d8 <STACK_SIZE+0xd8>)
     482:	47b8      	blx	r7

            char * sencC = sent ? "true" : "false";
     484:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     486:	781b      	ldrb	r3, [r3, #0]
     488:	2b00      	cmp	r3, #0
     48a:	d101      	bne.n	490 <STACK_SIZE+0x90>
     48c:	4f13      	ldr	r7, [pc, #76]	; (4dc <STACK_SIZE+0xdc>)
     48e:	e000      	b.n	492 <STACK_SIZE+0x92>
     490:	4f13      	ldr	r7, [pc, #76]	; (4e0 <STACK_SIZE+0xe0>)


            SendUSART(sencC, strlen(sencC));
     492:	0038      	movs	r0, r7
     494:	4b13      	ldr	r3, [pc, #76]	; (4e4 <STACK_SIZE+0xe4>)
     496:	4798      	blx	r3
     498:	0001      	movs	r1, r0
     49a:	0038      	movs	r0, r7
     49c:	4b12      	ldr	r3, [pc, #72]	; (4e8 <STACK_SIZE+0xe8>)
     49e:	4798      	blx	r3
     4a0:	e7c8      	b.n	434 <STACK_SIZE+0x34>
     4a2:	46c0      	nop			; (mov r8, r8)
     4a4:	000001f9 	.word	0x000001f9
     4a8:	41004400 	.word	0x41004400
     4ac:	0000114c 	.word	0x0000114c
     4b0:	000004ed 	.word	0x000004ed
     4b4:	0000053d 	.word	0x0000053d
     4b8:	000008c1 	.word	0x000008c1
     4bc:	00000c11 	.word	0x00000c11
     4c0:	00000595 	.word	0x00000595
     4c4:	00000e0d 	.word	0x00000e0d
     4c8:	2000002c 	.word	0x2000002c
     4cc:	000010e9 	.word	0x000010e9
     4d0:	00000759 	.word	0x00000759
     4d4:	00000649 	.word	0x00000649
     4d8:	00000cdd 	.word	0x00000cdd
     4dc:	00001180 	.word	0x00001180
     4e0:	00001178 	.word	0x00001178
     4e4:	00001117 	.word	0x00001117
     4e8:	000003a5 	.word	0x000003a5

000004ec <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     4ee:	b085      	sub	sp, #20
     4f0:	0c03      	lsrs	r3, r0, #16
     4f2:	0c14      	lsrs	r4, r2, #16
     4f4:	a90a      	add	r1, sp, #40	; 0x28
     4f6:	7809      	ldrb	r1, [r1, #0]
     4f8:	b2e6      	uxtb	r6, r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     4fa:	b2dc      	uxtb	r4, r3
     4fc:	0e00      	lsrs	r0, r0, #24
     4fe:	2701      	movs	r7, #1
     500:	003d      	movs	r5, r7
     502:	4085      	lsls	r5, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     504:	0e12      	lsrs	r2, r2, #24
     506:	4097      	lsls	r7, r2
     508:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     50a:	01e0      	lsls	r0, r4, #7
     50c:	4a0a      	ldr	r2, [pc, #40]	; (538 <byteOut+0x4c>)
     50e:	4694      	mov	ip, r2
     510:	4460      	add	r0, ip
     512:	01f4      	lsls	r4, r6, #7
     514:	4464      	add	r4, ip
     516:	6145      	str	r5, [r0, #20]

    for (uint8_t i = 0; i<8; ++i) {
        pinLow(SCK_PIN);
        if (byte & 0x80) {
     518:	b24a      	sxtb	r2, r1
     51a:	2a00      	cmp	r2, #0
     51c:	da01      	bge.n	522 <byteOut+0x36>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     51e:	61a7      	str	r7, [r4, #24]
     520:	e000      	b.n	524 <byteOut+0x38>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     522:	6167      	str	r7, [r4, #20]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     524:	6185      	str	r5, [r0, #24]
            pinHigh(MOSI_PIN);
        } else {
            pinLow(MOSI_PIN);
        }
        pinHigh(SCK_PIN);
        byte <<= 1;
     526:	0049      	lsls	r1, r1, #1
     528:	b2c9      	uxtb	r1, r1
     52a:	3b01      	subs	r3, #1
     52c:	b2db      	uxtb	r3, r3



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

    for (uint8_t i = 0; i<8; ++i) {
     52e:	2b00      	cmp	r3, #0
     530:	d1f1      	bne.n	516 <byteOut+0x2a>
            pinLow(MOSI_PIN);
        }
        pinHigh(SCK_PIN);
        byte <<= 1;
    }
}
     532:	b005      	add	sp, #20
     534:	bdf0      	pop	{r4, r5, r6, r7, pc}
     536:	46c0      	nop			; (mov r8, r8)
     538:	41004400 	.word	0x41004400

0000053c <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     53c:	b5f0      	push	{r4, r5, r6, r7, lr}
     53e:	b085      	sub	sp, #20
     540:	0c04      	lsrs	r4, r0, #16
     542:	9002      	str	r0, [sp, #8]
     544:	9103      	str	r1, [sp, #12]
     546:	0c11      	lsrs	r1, r2, #16
     548:	0017      	movs	r7, r2
     54a:	9200      	str	r2, [sp, #0]
     54c:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     54e:	b2e4      	uxtb	r4, r4
     550:	0e05      	lsrs	r5, r0, #24
     552:	2601      	movs	r6, #1
     554:	0033      	movs	r3, r6
     556:	40ab      	lsls	r3, r5
     558:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     55a:	b2ca      	uxtb	r2, r1
     55c:	0e3f      	lsrs	r7, r7, #24
     55e:	40be      	lsls	r6, r7
     560:	2108      	movs	r1, #8
    uint8_t byte = 0x00;
     562:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     564:	01e4      	lsls	r4, r4, #7
     566:	4b0a      	ldr	r3, [pc, #40]	; (590 <byteIn+0x54>)
     568:	469c      	mov	ip, r3
     56a:	4464      	add	r4, ip
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     56c:	01d2      	lsls	r2, r2, #7
     56e:	4462      	add	r2, ip
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     570:	6165      	str	r5, [r4, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     572:	6a13      	ldr	r3, [r2, #32]

    for (uint8_t i = 0; i<8; ++i) {
        pinLow(SCK_PIN);
        byte = (byte << 1 ) | pinRead(MISO_PIN);
     574:	4033      	ands	r3, r6
     576:	1e5f      	subs	r7, r3, #1
     578:	41bb      	sbcs	r3, r7
     57a:	0040      	lsls	r0, r0, #1
     57c:	4303      	orrs	r3, r0
     57e:	b2d8      	uxtb	r0, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     580:	61a5      	str	r5, [r4, #24]
     582:	3901      	subs	r1, #1
     584:	b2c9      	uxtb	r1, r1
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
    uint8_t byte = 0x00;

    for (uint8_t i = 0; i<8; ++i) {
     586:	2900      	cmp	r1, #0
     588:	d1f2      	bne.n	570 <byteIn+0x34>
        pinLow(SCK_PIN);
        byte = (byte << 1 ) | pinRead(MISO_PIN);
        pinHigh(SCK_PIN);
    }
    return byte;
}
     58a:	b005      	add	sp, #20
     58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     58e:	46c0      	nop			; (mov r8, r8)
     590:	41004400 	.word	0x41004400

00000594 <CC1101_cmd_strobe>:
};

u8_t cc1101_num_reg = (sizeof(cc1101_reg) / sizeof(cc1101_reg[0]));


void CC1101_cmd_strobe(u8_t reg) {
     594:	b510      	push	{r4, lr}
     596:	b082      	sub	sp, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     598:	2210      	movs	r2, #16
     59a:	4b0a      	ldr	r3, [pc, #40]	; (5c4 <CC1101_cmd_strobe+0x30>)
     59c:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     59e:	0019      	movs	r1, r3

    cc1101_select();
    while(pinRead(spiMISO) == true);
     5a0:	3210      	adds	r2, #16
     5a2:	6a0b      	ldr	r3, [r1, #32]
     5a4:	421a      	tst	r2, r3
     5a6:	d1fc      	bne.n	5a2 <CC1101_cmd_strobe+0xe>
    byteOut(spiSCK, spiMOSI, reg);
     5a8:	4907      	ldr	r1, [pc, #28]	; (5c8 <CC1101_cmd_strobe+0x34>)
     5aa:	9000      	str	r0, [sp, #0]
     5ac:	680a      	ldr	r2, [r1, #0]
     5ae:	684b      	ldr	r3, [r1, #4]
     5b0:	6888      	ldr	r0, [r1, #8]
     5b2:	68c9      	ldr	r1, [r1, #12]
     5b4:	4c05      	ldr	r4, [pc, #20]	; (5cc <CC1101_cmd_strobe+0x38>)
     5b6:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     5b8:	2210      	movs	r2, #16
     5ba:	4b02      	ldr	r3, [pc, #8]	; (5c4 <CC1101_cmd_strobe+0x30>)
     5bc:	619a      	str	r2, [r3, #24]
    cc1101_deselect();

}
     5be:	b002      	add	sp, #8
     5c0:	bd10      	pop	{r4, pc}
     5c2:	46c0      	nop			; (mov r8, r8)
     5c4:	41004400 	.word	0x41004400
     5c8:	00001188 	.word	0x00001188
     5cc:	000004ed 	.word	0x000004ed

000005d0 <CC1101_set_RX_state>:

void CC1101_set_RX_state() {
     5d0:	b510      	push	{r4, lr}
     5d2:	b082      	sub	sp, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5d4:	2210      	movs	r2, #16
     5d6:	4b0a      	ldr	r3, [pc, #40]	; (600 <CC1101_set_RX_state+0x30>)
     5d8:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     5da:	0019      	movs	r1, r3

    cc1101_select();
    while(pinRead(spiMISO) == true);
     5dc:	3210      	adds	r2, #16
     5de:	6a0b      	ldr	r3, [r1, #32]
     5e0:	421a      	tst	r2, r3
     5e2:	d1fc      	bne.n	5de <CC1101_set_RX_state+0xe>
    byteOut(spiSCK, spiMOSI, CC1101_SRX);
     5e4:	4907      	ldr	r1, [pc, #28]	; (604 <CC1101_set_RX_state+0x34>)
     5e6:	2334      	movs	r3, #52	; 0x34
     5e8:	9300      	str	r3, [sp, #0]
     5ea:	680a      	ldr	r2, [r1, #0]
     5ec:	684b      	ldr	r3, [r1, #4]
     5ee:	6888      	ldr	r0, [r1, #8]
     5f0:	68c9      	ldr	r1, [r1, #12]
     5f2:	4c05      	ldr	r4, [pc, #20]	; (608 <CC1101_set_RX_state+0x38>)
     5f4:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     5f6:	2210      	movs	r2, #16
     5f8:	4b01      	ldr	r3, [pc, #4]	; (600 <CC1101_set_RX_state+0x30>)
     5fa:	619a      	str	r2, [r3, #24]
    cc1101_deselect();
}
     5fc:	b002      	add	sp, #8
     5fe:	bd10      	pop	{r4, pc}
     600:	41004400 	.word	0x41004400
     604:	00001188 	.word	0x00001188
     608:	000004ed 	.word	0x000004ed

0000060c <CC1101_set_TX_state>:

void CC1101_set_TX_state() {
     60c:	b510      	push	{r4, lr}
     60e:	b082      	sub	sp, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     610:	2210      	movs	r2, #16
     612:	4b0a      	ldr	r3, [pc, #40]	; (63c <CC1101_set_TX_state+0x30>)
     614:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     616:	0019      	movs	r1, r3

    cc1101_select();
    while(pinRead(spiMISO) == true);
     618:	3210      	adds	r2, #16
     61a:	6a0b      	ldr	r3, [r1, #32]
     61c:	421a      	tst	r2, r3
     61e:	d1fc      	bne.n	61a <CC1101_set_TX_state+0xe>
    byteOut(spiSCK, spiMOSI, CC1101_STX);
     620:	4907      	ldr	r1, [pc, #28]	; (640 <CC1101_set_TX_state+0x34>)
     622:	2335      	movs	r3, #53	; 0x35
     624:	9300      	str	r3, [sp, #0]
     626:	680a      	ldr	r2, [r1, #0]
     628:	684b      	ldr	r3, [r1, #4]
     62a:	6888      	ldr	r0, [r1, #8]
     62c:	68c9      	ldr	r1, [r1, #12]
     62e:	4c05      	ldr	r4, [pc, #20]	; (644 <CC1101_set_TX_state+0x38>)
     630:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     632:	2210      	movs	r2, #16
     634:	4b01      	ldr	r3, [pc, #4]	; (63c <CC1101_set_TX_state+0x30>)
     636:	619a      	str	r2, [r3, #24]

    cc1101_deselect();
}
     638:	b002      	add	sp, #8
     63a:	bd10      	pop	{r4, pc}
     63c:	41004400 	.word	0x41004400
     640:	00001188 	.word	0x00001188
     644:	000004ed 	.word	0x000004ed

00000648 <cc1101_read_reg>:

u8_t cc1101_read_reg(u8_t regester) {
     648:	b530      	push	{r4, r5, lr}
     64a:	b083      	sub	sp, #12
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     64c:	2210      	movs	r2, #16
     64e:	4b0d      	ldr	r3, [pc, #52]	; (684 <cc1101_read_reg+0x3c>)
     650:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     652:	0019      	movs	r1, r3
    u8_t reg = 0;

    cc1101_select();
    while(pinRead(spiMISO) == true);
     654:	3210      	adds	r2, #16
     656:	6a0b      	ldr	r3, [r1, #32]
     658:	421a      	tst	r2, r3
     65a:	d1fc      	bne.n	656 <cc1101_read_reg+0xe>
    byteOut(spiSCK, spiMOSI, regester);
     65c:	4c0a      	ldr	r4, [pc, #40]	; (688 <cc1101_read_reg+0x40>)
     65e:	9000      	str	r0, [sp, #0]
     660:	6822      	ldr	r2, [r4, #0]
     662:	6863      	ldr	r3, [r4, #4]
     664:	68a0      	ldr	r0, [r4, #8]
     666:	68e1      	ldr	r1, [r4, #12]
     668:	4d08      	ldr	r5, [pc, #32]	; (68c <cc1101_read_reg+0x44>)
     66a:	47a8      	blx	r5
    reg = byteIn(spiSCK, spiMISO);
     66c:	6922      	ldr	r2, [r4, #16]
     66e:	6963      	ldr	r3, [r4, #20]
     670:	68a0      	ldr	r0, [r4, #8]
     672:	68e1      	ldr	r1, [r4, #12]
     674:	4c06      	ldr	r4, [pc, #24]	; (690 <cc1101_read_reg+0x48>)
     676:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     678:	2210      	movs	r2, #16
     67a:	4b02      	ldr	r3, [pc, #8]	; (684 <cc1101_read_reg+0x3c>)
     67c:	619a      	str	r2, [r3, #24]
    cc1101_deselect();

    return reg;
}
     67e:	b003      	add	sp, #12
     680:	bd30      	pop	{r4, r5, pc}
     682:	46c0      	nop			; (mov r8, r8)
     684:	41004400 	.word	0x41004400
     688:	00001188 	.word	0x00001188
     68c:	000004ed 	.word	0x000004ed
     690:	0000053d 	.word	0x0000053d

00000694 <CC1101_write_burst_reg>:



void CC1101_write_burst_reg(u8_t reg, u8_t* buffer, u8_t length) {
     694:	b5f0      	push	{r4, r5, r6, r7, lr}
     696:	b087      	sub	sp, #28
     698:	000c      	movs	r4, r1
     69a:	0015      	movs	r5, r2

    u8_t i = 0;
    u8_t add = reg | WRITE_BURST;
     69c:	2340      	movs	r3, #64	; 0x40
     69e:	4318      	orrs	r0, r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6a0:	2210      	movs	r2, #16
     6a2:	4b17      	ldr	r3, [pc, #92]	; (700 <CC1101_write_burst_reg+0x6c>)
     6a4:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     6a6:	0019      	movs	r1, r3

    cc1101_select();
    while(pinRead(spiMISO) == true);
     6a8:	3210      	adds	r2, #16
     6aa:	6a0b      	ldr	r3, [r1, #32]
     6ac:	421a      	tst	r2, r3
     6ae:	d1fc      	bne.n	6aa <CC1101_write_burst_reg+0x16>
    byteOut(spiSCK, spiMOSI, add);
     6b0:	4914      	ldr	r1, [pc, #80]	; (704 <CC1101_write_burst_reg+0x70>)
     6b2:	9000      	str	r0, [sp, #0]
     6b4:	680a      	ldr	r2, [r1, #0]
     6b6:	684b      	ldr	r3, [r1, #4]
     6b8:	6888      	ldr	r0, [r1, #8]
     6ba:	68c9      	ldr	r1, [r1, #12]
     6bc:	4e12      	ldr	r6, [pc, #72]	; (708 <CC1101_write_burst_reg+0x74>)
     6be:	47b0      	blx	r6
    for(i = 0; i < length; i++) {
     6c0:	2d00      	cmp	r5, #0
     6c2:	d017      	beq.n	6f4 <CC1101_write_burst_reg+0x60>
     6c4:	0026      	movs	r6, r4
     6c6:	3d01      	subs	r5, #1
     6c8:	b2ed      	uxtb	r5, r5
     6ca:	3501      	adds	r5, #1
     6cc:	1965      	adds	r5, r4, r5
        byteOut(spiSCK, spiMOSI, buffer[i]);
     6ce:	4b0d      	ldr	r3, [pc, #52]	; (704 <CC1101_write_burst_reg+0x70>)
     6d0:	681f      	ldr	r7, [r3, #0]
     6d2:	685a      	ldr	r2, [r3, #4]
     6d4:	9203      	str	r2, [sp, #12]
     6d6:	689a      	ldr	r2, [r3, #8]
     6d8:	9204      	str	r2, [sp, #16]
     6da:	68db      	ldr	r3, [r3, #12]
     6dc:	9305      	str	r3, [sp, #20]
     6de:	4c0a      	ldr	r4, [pc, #40]	; (708 <CC1101_write_burst_reg+0x74>)
     6e0:	7833      	ldrb	r3, [r6, #0]
     6e2:	9300      	str	r3, [sp, #0]
     6e4:	003a      	movs	r2, r7
     6e6:	9b03      	ldr	r3, [sp, #12]
     6e8:	9804      	ldr	r0, [sp, #16]
     6ea:	9905      	ldr	r1, [sp, #20]
     6ec:	47a0      	blx	r4
     6ee:	3601      	adds	r6, #1
    u8_t add = reg | WRITE_BURST;

    cc1101_select();
    while(pinRead(spiMISO) == true);
    byteOut(spiSCK, spiMOSI, add);
    for(i = 0; i < length; i++) {
     6f0:	42ae      	cmp	r6, r5
     6f2:	d1f5      	bne.n	6e0 <CC1101_write_burst_reg+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6f4:	2210      	movs	r2, #16
     6f6:	4b02      	ldr	r3, [pc, #8]	; (700 <CC1101_write_burst_reg+0x6c>)
     6f8:	619a      	str	r2, [r3, #24]
        byteOut(spiSCK, spiMOSI, buffer[i]);
    }
    cc1101_deselect();

}
     6fa:	b007      	add	sp, #28
     6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	41004400 	.word	0x41004400
     704:	00001188 	.word	0x00001188
     708:	000004ed 	.word	0x000004ed

0000070c <cc1101_write_reg>:

void cc1101_write_reg(u8_t reg, u8_t value) {
     70c:	b570      	push	{r4, r5, r6, lr}
     70e:	b082      	sub	sp, #8
     710:	000e      	movs	r6, r1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     712:	2210      	movs	r2, #16
     714:	4b0d      	ldr	r3, [pc, #52]	; (74c <cc1101_write_reg+0x40>)
     716:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     718:	0019      	movs	r1, r3

    cc1101_select();
    CC1101_wait_miso();
     71a:	3210      	adds	r2, #16
     71c:	6a0b      	ldr	r3, [r1, #32]
     71e:	421a      	tst	r2, r3
     720:	d1fc      	bne.n	71c <cc1101_write_reg+0x10>
    byteOut(spiSCK, spiMOSI, reg | WRITE_BURST);
     722:	4c0b      	ldr	r4, [pc, #44]	; (750 <cc1101_write_reg+0x44>)
     724:	2340      	movs	r3, #64	; 0x40
     726:	4318      	orrs	r0, r3
     728:	9000      	str	r0, [sp, #0]
     72a:	6822      	ldr	r2, [r4, #0]
     72c:	6863      	ldr	r3, [r4, #4]
     72e:	68a0      	ldr	r0, [r4, #8]
     730:	68e1      	ldr	r1, [r4, #12]
     732:	4d08      	ldr	r5, [pc, #32]	; (754 <cc1101_write_reg+0x48>)
     734:	47a8      	blx	r5
    byteOut(spiSCK, spiMOSI, value);
     736:	9600      	str	r6, [sp, #0]
     738:	6822      	ldr	r2, [r4, #0]
     73a:	6863      	ldr	r3, [r4, #4]
     73c:	68a0      	ldr	r0, [r4, #8]
     73e:	68e1      	ldr	r1, [r4, #12]
     740:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     742:	2210      	movs	r2, #16
     744:	4b01      	ldr	r3, [pc, #4]	; (74c <cc1101_write_reg+0x40>)
     746:	619a      	str	r2, [r3, #24]
    cc1101_deselect();

}
     748:	b002      	add	sp, #8
     74a:	bd70      	pop	{r4, r5, r6, pc}
     74c:	41004400 	.word	0x41004400
     750:	00001188 	.word	0x00001188
     754:	000004ed 	.word	0x000004ed

00000758 <CC1101_tx_data>:
        regirsterssss[i] = reg_data;
    }
    cc1101_deselect();
}

bool CC1101_tx_data(u8_t *packet, u8_t packenlen) {
     758:	b5f0      	push	{r4, r5, r6, r7, lr}
     75a:	b087      	sub	sp, #28
     75c:	9003      	str	r0, [sp, #12]
     75e:	000c      	movs	r4, r1

    u8_t marcstate;
    bool res = false;

    //Enter RX state
    CC1101_set_RX_state();
     760:	4b4d      	ldr	r3, [pc, #308]	; (898 <CC1101_tx_data+0x140>)
     762:	4798      	blx	r3

    u16_t tries = 0;

    // Check that the RX state has been entered
    while (((marcstate = CC1101_read_status_reg(CC1101_MARCSTATE)) & 0x1F) != 0x0D) {
     764:	4f4d      	ldr	r7, [pc, #308]	; (89c <CC1101_tx_data+0x144>)
        if (marcstate == 0x11) {     // RX_OVERFLOW
            cc1101_select();
            while(pinRead(spiMISO) == true);
            byteOut(spiSCK, spiMOSI, CC1101_SFRX);	// Flush RXFIFO
     766:	4d4e      	ldr	r5, [pc, #312]	; (8a0 <CC1101_tx_data+0x148>)
    CC1101_set_RX_state();

    u16_t tries = 0;

    // Check that the RX state has been entered
    while (((marcstate = CC1101_read_status_reg(CC1101_MARCSTATE)) & 0x1F) != 0x0D) {
     768:	e014      	b.n	794 <CC1101_tx_data+0x3c>
        if (marcstate == 0x11) {     // RX_OVERFLOW
     76a:	2b11      	cmp	r3, #17
     76c:	d113      	bne.n	796 <CC1101_tx_data+0x3e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     76e:	2210      	movs	r2, #16
     770:	4b4c      	ldr	r3, [pc, #304]	; (8a4 <CC1101_tx_data+0x14c>)
     772:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     774:	0019      	movs	r1, r3
            cc1101_select();
            while(pinRead(spiMISO) == true);
     776:	3210      	adds	r2, #16
     778:	6a0b      	ldr	r3, [r1, #32]
     77a:	421a      	tst	r2, r3
     77c:	d1fc      	bne.n	778 <CC1101_tx_data+0x20>
            byteOut(spiSCK, spiMOSI, CC1101_SFRX);	// Flush RXFIFO
     77e:	233a      	movs	r3, #58	; 0x3a
     780:	9300      	str	r3, [sp, #0]
     782:	682a      	ldr	r2, [r5, #0]
     784:	686b      	ldr	r3, [r5, #4]
     786:	68a8      	ldr	r0, [r5, #8]
     788:	68e9      	ldr	r1, [r5, #12]
     78a:	4e47      	ldr	r6, [pc, #284]	; (8a8 <CC1101_tx_data+0x150>)
     78c:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     78e:	2210      	movs	r2, #16
     790:	4b44      	ldr	r3, [pc, #272]	; (8a4 <CC1101_tx_data+0x14c>)
     792:	619a      	str	r2, [r3, #24]
    CC1101_set_RX_state();

    u16_t tries = 0;

    // Check that the RX state has been entered
    while (((marcstate = CC1101_read_status_reg(CC1101_MARCSTATE)) & 0x1F) != 0x0D) {
     794:	261f      	movs	r6, #31
     796:	20f5      	movs	r0, #245	; 0xf5
     798:	47b8      	blx	r7
     79a:	0003      	movs	r3, r0
     79c:	4030      	ands	r0, r6
     79e:	280d      	cmp	r0, #13
     7a0:	d1e3      	bne.n	76a <CC1101_tx_data+0x12>
        }
    }



    delay_us(500);
     7a2:	27fa      	movs	r7, #250	; 0xfa
     7a4:	007f      	lsls	r7, r7, #1
     7a6:	0038      	movs	r0, r7
     7a8:	4e40      	ldr	r6, [pc, #256]	; (8ac <CC1101_tx_data+0x154>)
     7aa:	47b0      	blx	r6

    cc1101_write_reg(CC1101_TXFIFO, packenlen);
     7ac:	0021      	movs	r1, r4
     7ae:	203f      	movs	r0, #63	; 0x3f
     7b0:	4b3f      	ldr	r3, [pc, #252]	; (8b0 <CC1101_tx_data+0x158>)
     7b2:	4798      	blx	r3
    CC1101_write_burst_reg(CC1101_TXFIFO, packet, packenlen);
     7b4:	0022      	movs	r2, r4
     7b6:	9903      	ldr	r1, [sp, #12]
     7b8:	203f      	movs	r0, #63	; 0x3f
     7ba:	4b3e      	ldr	r3, [pc, #248]	; (8b4 <CC1101_tx_data+0x15c>)
     7bc:	4798      	blx	r3

    delay_us(500);
     7be:	0038      	movs	r0, r7
     7c0:	47b0      	blx	r6

    //

    CC1101_set_TX_state();
     7c2:	4b3d      	ldr	r3, [pc, #244]	; (8b8 <CC1101_tx_data+0x160>)
     7c4:	4798      	blx	r3




    // Check that TX state is being entered (state = RXTX_SETTLING)
    marcstate =  CC1101_read_status_reg(CC1101_MARCSTATE);
     7c6:	20f5      	movs	r0, #245	; 0xf5
     7c8:	4b34      	ldr	r3, [pc, #208]	; (89c <CC1101_tx_data+0x144>)
     7ca:	4798      	blx	r3
    if ((marcstate != 0x13) && (marcstate != 0x14) && (marcstate != 0x15)) {
     7cc:	3813      	subs	r0, #19
     7ce:	b2c0      	uxtb	r0, r0
     7d0:	2802      	cmp	r0, #2
     7d2:	d939      	bls.n	848 <CC1101_tx_data+0xf0>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7d4:	2210      	movs	r2, #16
     7d6:	4b33      	ldr	r3, [pc, #204]	; (8a4 <CC1101_tx_data+0x14c>)
     7d8:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     7da:	0019      	movs	r1, r3

        cc1101_select();
        while(pinRead(spiMISO) == true);
     7dc:	3210      	adds	r2, #16
     7de:	6a0b      	ldr	r3, [r1, #32]
     7e0:	421a      	tst	r2, r3
     7e2:	d1fc      	bne.n	7de <CC1101_tx_data+0x86>
        byteOut(spiSCK, spiMOSI, CC1101_SIDLE);	// Enter IDLE state
     7e4:	492e      	ldr	r1, [pc, #184]	; (8a0 <CC1101_tx_data+0x148>)
     7e6:	2336      	movs	r3, #54	; 0x36
     7e8:	9300      	str	r3, [sp, #0]
     7ea:	680a      	ldr	r2, [r1, #0]
     7ec:	684b      	ldr	r3, [r1, #4]
     7ee:	6888      	ldr	r0, [r1, #8]
     7f0:	68c9      	ldr	r1, [r1, #12]
     7f2:	4c2d      	ldr	r4, [pc, #180]	; (8a8 <CC1101_tx_data+0x150>)
     7f4:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7f6:	4b2b      	ldr	r3, [pc, #172]	; (8a4 <CC1101_tx_data+0x14c>)
     7f8:	2210      	movs	r2, #16
     7fa:	619a      	str	r2, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7fc:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     7fe:	0019      	movs	r1, r3
        cc1101_deselect();

        cc1101_select();
        while(pinRead(spiMISO) == true);
     800:	3210      	adds	r2, #16
     802:	6a0b      	ldr	r3, [r1, #32]
     804:	421a      	tst	r2, r3
     806:	d1fc      	bne.n	802 <CC1101_tx_data+0xaa>
        byteOut(spiSCK, spiMOSI, CC1101_SFTX);	// Flush Tx FIFO
     808:	4925      	ldr	r1, [pc, #148]	; (8a0 <CC1101_tx_data+0x148>)
     80a:	233b      	movs	r3, #59	; 0x3b
     80c:	9300      	str	r3, [sp, #0]
     80e:	680a      	ldr	r2, [r1, #0]
     810:	684b      	ldr	r3, [r1, #4]
     812:	6888      	ldr	r0, [r1, #8]
     814:	68c9      	ldr	r1, [r1, #12]
     816:	4c24      	ldr	r4, [pc, #144]	; (8a8 <CC1101_tx_data+0x150>)
     818:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     81a:	4b22      	ldr	r3, [pc, #136]	; (8a4 <CC1101_tx_data+0x14c>)
     81c:	2210      	movs	r2, #16
     81e:	619a      	str	r2, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     820:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     822:	0019      	movs	r1, r3
        cc1101_deselect();

        cc1101_select();
        while(pinRead(spiMISO) == true);
     824:	3210      	adds	r2, #16
     826:	6a0b      	ldr	r3, [r1, #32]
     828:	421a      	tst	r2, r3
     82a:	d1fc      	bne.n	826 <CC1101_tx_data+0xce>
        byteOut(spiSCK, spiMOSI, CC1101_SFRX);	// Back to RX state
     82c:	491c      	ldr	r1, [pc, #112]	; (8a0 <CC1101_tx_data+0x148>)
     82e:	233a      	movs	r3, #58	; 0x3a
     830:	9300      	str	r3, [sp, #0]
     832:	680a      	ldr	r2, [r1, #0]
     834:	684b      	ldr	r3, [r1, #4]
     836:	6888      	ldr	r0, [r1, #8]
     838:	68c9      	ldr	r1, [r1, #12]
     83a:	4c1b      	ldr	r4, [pc, #108]	; (8a8 <CC1101_tx_data+0x150>)
     83c:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     83e:	2210      	movs	r2, #16
     840:	4b18      	ldr	r3, [pc, #96]	; (8a4 <CC1101_tx_data+0x14c>)
     842:	619a      	str	r2, [r3, #24]
        cc1101_deselect();
        //flushTxFifo();
        //setRxState();

        return false;
     844:	2000      	movs	r0, #0
     846:	e025      	b.n	894 <CC1101_tx_data+0x13c>
    }

    delay_ms(100);
     848:	2064      	movs	r0, #100	; 0x64
     84a:	4b1c      	ldr	r3, [pc, #112]	; (8bc <CC1101_tx_data+0x164>)
     84c:	4798      	blx	r3

    volatile u8_t txbuffsize = CC1101_read_status_reg(CC1101_TXBYTES);
     84e:	20fa      	movs	r0, #250	; 0xfa
     850:	4c12      	ldr	r4, [pc, #72]	; (89c <CC1101_tx_data+0x144>)
     852:	47a0      	blx	r4
     854:	230f      	movs	r3, #15
     856:	aa02      	add	r2, sp, #8
     858:	4694      	mov	ip, r2
     85a:	4463      	add	r3, ip
     85c:	7018      	strb	r0, [r3, #0]

    if ((CC1101_read_status_reg(CC1101_TXBYTES)) == 0) {
     85e:	20fa      	movs	r0, #250	; 0xfa
     860:	47a0      	blx	r4
     862:	0003      	movs	r3, r0
}

bool CC1101_tx_data(u8_t *packet, u8_t packenlen) {

    u8_t marcstate;
    bool res = false;
     864:	2000      	movs	r0, #0

    delay_ms(100);

    volatile u8_t txbuffsize = CC1101_read_status_reg(CC1101_TXBYTES);

    if ((CC1101_read_status_reg(CC1101_TXBYTES)) == 0) {
     866:	2b00      	cmp	r3, #0
     868:	d114      	bne.n	894 <CC1101_tx_data+0x13c>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     86a:	2210      	movs	r2, #16
     86c:	4b0d      	ldr	r3, [pc, #52]	; (8a4 <CC1101_tx_data+0x14c>)
     86e:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     870:	0019      	movs	r1, r3
        cc1101_select();
        while(pinRead(spiMISO) == true);
     872:	3210      	adds	r2, #16
     874:	6a0b      	ldr	r3, [r1, #32]
     876:	421a      	tst	r2, r3
     878:	d1fc      	bne.n	874 <CC1101_tx_data+0x11c>
        byteOut(spiSCK, spiMOSI, CC1101_SIDLE);	// Enter IDLE state
     87a:	4909      	ldr	r1, [pc, #36]	; (8a0 <CC1101_tx_data+0x148>)
     87c:	2336      	movs	r3, #54	; 0x36
     87e:	9300      	str	r3, [sp, #0]
     880:	680a      	ldr	r2, [r1, #0]
     882:	684b      	ldr	r3, [r1, #4]
     884:	6888      	ldr	r0, [r1, #8]
     886:	68c9      	ldr	r1, [r1, #12]
     888:	4c07      	ldr	r4, [pc, #28]	; (8a8 <CC1101_tx_data+0x150>)
     88a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     88c:	2210      	movs	r2, #16
     88e:	4b05      	ldr	r3, [pc, #20]	; (8a4 <CC1101_tx_data+0x14c>)
     890:	619a      	str	r2, [r3, #24]
        cc1101_deselect();

        res = true;
     892:	2001      	movs	r0, #1


    }

    return res;
}
     894:	b007      	add	sp, #28
     896:	bdf0      	pop	{r4, r5, r6, r7, pc}
     898:	000005d1 	.word	0x000005d1
     89c:	00000649 	.word	0x00000649
     8a0:	00001188 	.word	0x00001188
     8a4:	41004400 	.word	0x41004400
     8a8:	000004ed 	.word	0x000004ed
     8ac:	00000be5 	.word	0x00000be5
     8b0:	0000070d 	.word	0x0000070d
     8b4:	00000695 	.word	0x00000695
     8b8:	0000060d 	.word	0x0000060d
     8bc:	00000c11 	.word	0x00000c11

000008c0 <write_cc1101_status_regersters>:

void write_cc1101_status_regersters() {
     8c0:	b510      	push	{r4, lr}

    cc1101_write_reg(CC1101_IOCFG2,RF_IOCFG2);
     8c2:	2129      	movs	r1, #41	; 0x29
     8c4:	2000      	movs	r0, #0
     8c6:	4c5b      	ldr	r4, [pc, #364]	; (a34 <write_cc1101_status_regersters+0x174>)
     8c8:	47a0      	blx	r4
    cc1101_write_reg(CC1101_IOCFG1,RF_IOCFG1);
     8ca:	212e      	movs	r1, #46	; 0x2e
     8cc:	2001      	movs	r0, #1
     8ce:	47a0      	blx	r4
    cc1101_write_reg(CC1101_IOCFG0,RF_IOCFG0);
     8d0:	2106      	movs	r1, #6
     8d2:	2002      	movs	r0, #2
     8d4:	47a0      	blx	r4
    cc1101_write_reg(CC1101_FIFOTHR,RF_FIFOTHR);
     8d6:	2147      	movs	r1, #71	; 0x47
     8d8:	2003      	movs	r0, #3
     8da:	47a0      	blx	r4
    cc1101_write_reg(CC1101_SYNC1,RF_SYNC1);
     8dc:	21d3      	movs	r1, #211	; 0xd3
     8de:	2004      	movs	r0, #4
     8e0:	47a0      	blx	r4
    cc1101_write_reg(CC1101_SYNC0,RF_SYNC0);
     8e2:	2191      	movs	r1, #145	; 0x91
     8e4:	2005      	movs	r0, #5
     8e6:	47a0      	blx	r4
    cc1101_write_reg(CC1101_PKTLEN,RF_PKTLEN);
     8e8:	21ff      	movs	r1, #255	; 0xff
     8ea:	2006      	movs	r0, #6
     8ec:	47a0      	blx	r4
    cc1101_write_reg(CC1101_PKTCTRL1,RF_PKTCTRL1);
     8ee:	2104      	movs	r1, #4
     8f0:	2007      	movs	r0, #7
     8f2:	47a0      	blx	r4
    cc1101_write_reg(CC1101_PKTCTRL0,RF_PKTCTRL0);
     8f4:	2105      	movs	r1, #5
     8f6:	2008      	movs	r0, #8
     8f8:	47a0      	blx	r4
    cc1101_write_reg(CC1101_ADDR,RF_ADDR);
     8fa:	2100      	movs	r1, #0
     8fc:	2009      	movs	r0, #9
     8fe:	47a0      	blx	r4
    cc1101_write_reg(CC1101_CHANNR,RF_CHANNR);
     900:	2100      	movs	r1, #0
     902:	200a      	movs	r0, #10
     904:	47a0      	blx	r4
    cc1101_write_reg(CC1101_FSCTRL1,RF_FSCTRL1);
     906:	2106      	movs	r1, #6
     908:	200b      	movs	r0, #11
     90a:	47a0      	blx	r4
    cc1101_write_reg(CC1101_FSCTRL0,RF_FSCTRL0);
     90c:	2100      	movs	r1, #0
     90e:	200c      	movs	r0, #12
     910:	47a0      	blx	r4
    cc1101_write_reg(CC1101_FREQ2,RF_FREQ2);
     912:	2111      	movs	r1, #17
     914:	2010      	movs	r0, #16
     916:	47a0      	blx	r4
    cc1101_write_reg(CC1101_FREQ1,RF_FREQ1);
     918:	2113      	movs	r1, #19
     91a:	20b5      	movs	r0, #181	; 0xb5
     91c:	47a0      	blx	r4
    cc1101_write_reg(CC1101_FREQ0,RF_FREQ0);
     91e:	21b1      	movs	r1, #177	; 0xb1
     920:	202b      	movs	r0, #43	; 0x2b
     922:	47a0      	blx	r4
    cc1101_write_reg(CC1101_MDMCFG4,RF_MDMCFG4);
     924:	21f5      	movs	r1, #245	; 0xf5
     926:	2010      	movs	r0, #16
     928:	47a0      	blx	r4
    cc1101_write_reg(CC1101_MDMCFG3,RF_MDMCFG3);
     92a:	2183      	movs	r1, #131	; 0x83
     92c:	2011      	movs	r0, #17
     92e:	47a0      	blx	r4
    cc1101_write_reg(CC1101_MDMCFG2,RF_MDMCFG2);
     930:	2103      	movs	r1, #3
     932:	2012      	movs	r0, #18
     934:	47a0      	blx	r4
    cc1101_write_reg(CC1101_MDMCFG1,RF_MDMCFG1);
     936:	2122      	movs	r1, #34	; 0x22
     938:	2013      	movs	r0, #19
     93a:	47a0      	blx	r4
    cc1101_write_reg(CC1101_MDMCFG0,RF_MDMCFG0);
     93c:	21f8      	movs	r1, #248	; 0xf8
     93e:	2014      	movs	r0, #20
     940:	47a0      	blx	r4
    cc1101_write_reg(CC1101_DEVIATN,RF_DEVIATN);
     942:	2115      	movs	r1, #21
     944:	2015      	movs	r0, #21
     946:	47a0      	blx	r4
    cc1101_write_reg(CC1101_MCSM2,RF_MCSM2);
     948:	2107      	movs	r1, #7
     94a:	2016      	movs	r0, #22
     94c:	47a0      	blx	r4
    cc1101_write_reg(CC1101_MCSM1,RF_MCSM1);
     94e:	2130      	movs	r1, #48	; 0x30
     950:	2017      	movs	r0, #23
     952:	47a0      	blx	r4
    cc1101_write_reg(CC1101_MCSM0,RF_MCSM0);
     954:	2118      	movs	r1, #24
     956:	2018      	movs	r0, #24
     958:	47a0      	blx	r4
    cc1101_write_reg(CC1101_FOCCFG,RF_FOCCFG);
     95a:	2116      	movs	r1, #22
     95c:	2019      	movs	r0, #25
     95e:	47a0      	blx	r4
    cc1101_write_reg(CC1101_BSCFG,RF_BSCFG);
     960:	216c      	movs	r1, #108	; 0x6c
     962:	201a      	movs	r0, #26
     964:	47a0      	blx	r4
    cc1101_write_reg(CC1101_AGCCTRL2,RF_AGCCTRL2);
     966:	2103      	movs	r1, #3
     968:	201b      	movs	r0, #27
     96a:	47a0      	blx	r4
    cc1101_write_reg(CC1101_AGCCTRL1,RF_AGCCTRL1);
     96c:	2140      	movs	r1, #64	; 0x40
     96e:	201c      	movs	r0, #28
     970:	47a0      	blx	r4
    cc1101_write_reg(CC1101_AGCCTRL0,RF_AGCCTRL0);
     972:	2191      	movs	r1, #145	; 0x91
     974:	201d      	movs	r0, #29
     976:	47a0      	blx	r4
    cc1101_write_reg(CC1101_WOREVT1,RF_WOREVT1);
     978:	2187      	movs	r1, #135	; 0x87
     97a:	201e      	movs	r0, #30
     97c:	47a0      	blx	r4
    cc1101_write_reg(CC1101_WOREVT0,RF_WOREVT0);
     97e:	216b      	movs	r1, #107	; 0x6b
     980:	201f      	movs	r0, #31
     982:	47a0      	blx	r4
    cc1101_write_reg(CC1101_WORCTRL,RF_WORCTRL);
     984:	21fb      	movs	r1, #251	; 0xfb
     986:	2020      	movs	r0, #32
     988:	47a0      	blx	r4
    cc1101_write_reg(CC1101_FREND1,RF_FREND1);
     98a:	2156      	movs	r1, #86	; 0x56
     98c:	2021      	movs	r0, #33	; 0x21
     98e:	47a0      	blx	r4
    cc1101_write_reg(CC1101_FREND0,RF_FREND0);
     990:	2110      	movs	r1, #16
     992:	2022      	movs	r0, #34	; 0x22
     994:	47a0      	blx	r4
    cc1101_write_reg(CC1101_FSCAL3,RF_FSCAL3);
     996:	21e9      	movs	r1, #233	; 0xe9
     998:	2023      	movs	r0, #35	; 0x23
     99a:	47a0      	blx	r4
    cc1101_write_reg(CC1101_FSCAL2,RF_FSCAL2);
     99c:	212a      	movs	r1, #42	; 0x2a
     99e:	2024      	movs	r0, #36	; 0x24
     9a0:	47a0      	blx	r4
    cc1101_write_reg(CC1101_FSCAL1,RF_FSCAL1);
     9a2:	2100      	movs	r1, #0
     9a4:	2025      	movs	r0, #37	; 0x25
     9a6:	47a0      	blx	r4
    cc1101_write_reg(CC1101_FSCAL0,RF_FSCAL0);
     9a8:	211f      	movs	r1, #31
     9aa:	2026      	movs	r0, #38	; 0x26
     9ac:	47a0      	blx	r4
    cc1101_write_reg(CC1101_RCCTRL1,RF_RCCTRL1);
     9ae:	2141      	movs	r1, #65	; 0x41
     9b0:	2027      	movs	r0, #39	; 0x27
     9b2:	47a0      	blx	r4
    cc1101_write_reg(CC1101_RCCTRL0,RF_RCCTRL0);
     9b4:	2100      	movs	r1, #0
     9b6:	2028      	movs	r0, #40	; 0x28
     9b8:	47a0      	blx	r4
    cc1101_write_reg(CC1101_FSTEST,RF_FSTEST);
     9ba:	2159      	movs	r1, #89	; 0x59
     9bc:	2029      	movs	r0, #41	; 0x29
     9be:	47a0      	blx	r4
    cc1101_write_reg(CC1101_PTEST,RF_PTEST);
     9c0:	217f      	movs	r1, #127	; 0x7f
     9c2:	202a      	movs	r0, #42	; 0x2a
     9c4:	47a0      	blx	r4
    cc1101_write_reg(CC1101_AGCTEST,RF_AGCTEST);
     9c6:	213f      	movs	r1, #63	; 0x3f
     9c8:	202b      	movs	r0, #43	; 0x2b
     9ca:	47a0      	blx	r4
    cc1101_write_reg(CC1101_TEST2,RF_TEST2);
     9cc:	2181      	movs	r1, #129	; 0x81
     9ce:	202c      	movs	r0, #44	; 0x2c
     9d0:	47a0      	blx	r4
    cc1101_write_reg(CC1101_TEST1,RF_TEST1);
     9d2:	2135      	movs	r1, #53	; 0x35
     9d4:	202d      	movs	r0, #45	; 0x2d
     9d6:	47a0      	blx	r4
    cc1101_write_reg(CC1101_TEST0,RF_TEST0);
     9d8:	2109      	movs	r1, #9
     9da:	202e      	movs	r0, #46	; 0x2e
     9dc:	47a0      	blx	r4
    cc1101_write_reg(CC1101_PARTNUM,RF_PARTNUM);
     9de:	2100      	movs	r1, #0
     9e0:	2030      	movs	r0, #48	; 0x30
     9e2:	47a0      	blx	r4
    cc1101_write_reg(CC1101_VERSION,RF_VERSION);
     9e4:	2104      	movs	r1, #4
     9e6:	2031      	movs	r0, #49	; 0x31
     9e8:	47a0      	blx	r4
    cc1101_write_reg(CC1101_FREQEST,RF_FREQEST);
     9ea:	2100      	movs	r1, #0
     9ec:	2032      	movs	r0, #50	; 0x32
     9ee:	47a0      	blx	r4
    cc1101_write_reg(CC1101_LQI,RF_LQI);
     9f0:	2100      	movs	r1, #0
     9f2:	2033      	movs	r0, #51	; 0x33
     9f4:	47a0      	blx	r4
    cc1101_write_reg(CC1101_RSSI,RF_RSSI);
     9f6:	2100      	movs	r1, #0
     9f8:	2034      	movs	r0, #52	; 0x34
     9fa:	47a0      	blx	r4
    cc1101_write_reg(CC1101_MARCSTATE,RF_MARCSTATE);
     9fc:	2100      	movs	r1, #0
     9fe:	2035      	movs	r0, #53	; 0x35
     a00:	47a0      	blx	r4
    cc1101_write_reg(CC1101_WORTIME1,RF_WORTIME1);
     a02:	2100      	movs	r1, #0
     a04:	2036      	movs	r0, #54	; 0x36
     a06:	47a0      	blx	r4
    cc1101_write_reg(CC1101_WORTIME0,RF_WORTIME0);
     a08:	2100      	movs	r1, #0
     a0a:	2037      	movs	r0, #55	; 0x37
     a0c:	47a0      	blx	r4
    cc1101_write_reg(CC1101_PKTSTATUS,RF_PKTSTATUS);
     a0e:	2100      	movs	r1, #0
     a10:	2038      	movs	r0, #56	; 0x38
     a12:	47a0      	blx	r4
    cc1101_write_reg(CC1101_VCO_VC_DAC,RF_VCO_VC_DAC);
     a14:	2100      	movs	r1, #0
     a16:	2039      	movs	r0, #57	; 0x39
     a18:	47a0      	blx	r4
    cc1101_write_reg(CC1101_TXBYTES,RF_TXBYTES);
     a1a:	2100      	movs	r1, #0
     a1c:	203a      	movs	r0, #58	; 0x3a
     a1e:	47a0      	blx	r4
    cc1101_write_reg(CC1101_RXBYTES,RF_RXBYTES);
     a20:	2100      	movs	r1, #0
     a22:	203b      	movs	r0, #59	; 0x3b
     a24:	47a0      	blx	r4
    cc1101_write_reg(CC1101_RCCTRL1_STATUS,RF_RCCTRL1_STATUS);
     a26:	2100      	movs	r1, #0
     a28:	203c      	movs	r0, #60	; 0x3c
     a2a:	47a0      	blx	r4
    cc1101_write_reg(CC1101_RCCTRL0_STATUS,RF_RCCTRL0_STATUS);
     a2c:	2100      	movs	r1, #0
     a2e:	203d      	movs	r0, #61	; 0x3d
     a30:	47a0      	blx	r4





}
     a32:	bd10      	pop	{r4, pc}
     a34:	0000070d 	.word	0x0000070d

00000a38 <GclkInit>:


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     a38:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     a3a:	22c2      	movs	r2, #194	; 0xc2
     a3c:	00d2      	lsls	r2, r2, #3
     a3e:	4b16      	ldr	r3, [pc, #88]	; (a98 <GclkInit+0x60>)
     a40:	609a      	str	r2, [r3, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     a42:	4a16      	ldr	r2, [pc, #88]	; (a9c <GclkInit+0x64>)
     a44:	6851      	ldr	r1, [r2, #4]
     a46:	2302      	movs	r3, #2
     a48:	430b      	orrs	r3, r1
     a4a:	6053      	str	r3, [r2, #4]
#define NVM_DFLL_FINE_POS     64
#define NVM_DFLL_FINE_SIZE    10



    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     a4c:	4b14      	ldr	r3, [pc, #80]	; (aa0 <GclkInit+0x68>)
     a4e:	681c      	ldr	r4, [r3, #0]
     a50:	0ea4      	lsrs	r4, r4, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);

    /* In some revision chip, the coarse calibration value is not correct. */
    if (coarse == 0x3f) {
     a52:	2c3f      	cmp	r4, #63	; 0x3f
     a54:	d100      	bne.n	a58 <GclkInit+0x20>
        coarse = 0x1f;
     a56:	3c20      	subs	r4, #32
    }

    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     a58:	4b12      	ldr	r3, [pc, #72]	; (aa4 <GclkInit+0x6c>)
    /* In some revision chip, the coarse calibration value is not correct. */
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }

    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     a5a:	6818      	ldr	r0, [r3, #0]
     a5c:	0580      	lsls	r0, r0, #22
     a5e:	0d80      	lsrs	r0, r0, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     a60:	4b11      	ldr	r3, [pc, #68]	; (aa8 <GclkInit+0x70>)
     a62:	4298      	cmp	r0, r3
     a64:	d100      	bne.n	a68 <GclkInit+0x30>
        fine = 0x1ff;
     a66:	4811      	ldr	r0, [pc, #68]	; (aac <GclkInit+0x74>)
    }



    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     a68:	4a11      	ldr	r2, [pc, #68]	; (ab0 <GclkInit+0x78>)
     a6a:	4b0b      	ldr	r3, [pc, #44]	; (a98 <GclkInit+0x60>)
     a6c:	849a      	strh	r2, [r3, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     a6e:	0019      	movs	r1, r3
     a70:	2210      	movs	r2, #16
     a72:	68cb      	ldr	r3, [r1, #12]
     a74:	421a      	tst	r2, r3
     a76:	d0fc      	beq.n	a72 <GclkInit+0x3a>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     a78:	02a4      	lsls	r4, r4, #10
     a7a:	4320      	orrs	r0, r4
     a7c:	4b06      	ldr	r3, [pc, #24]	; (a98 <GclkInit+0x60>)
     a7e:	6298      	str	r0, [r3, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     a80:	0019      	movs	r1, r3
     a82:	2210      	movs	r2, #16
     a84:	68cb      	ldr	r3, [r1, #12]
     a86:	421a      	tst	r2, r3
     a88:	d0fc      	beq.n	a84 <GclkInit+0x4c>

    //SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     a8a:	4b0a      	ldr	r3, [pc, #40]	; (ab4 <GclkInit+0x7c>)
     a8c:	2280      	movs	r2, #128	; 0x80
     a8e:	0052      	lsls	r2, r2, #1
     a90:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     a92:	4a09      	ldr	r2, [pc, #36]	; (ab8 <GclkInit+0x80>)
     a94:	605a      	str	r2, [r3, #4]
}
     a96:	bd10      	pop	{r4, pc}
     a98:	40000800 	.word	0x40000800
     a9c:	41004000 	.word	0x41004000
     aa0:	00806024 	.word	0x00806024
     aa4:	00806028 	.word	0x00806028
     aa8:	000003ff 	.word	0x000003ff
     aac:	000001ff 	.word	0x000001ff
     ab0:	00000522 	.word	0x00000522
     ab4:	40000c00 	.word	0x40000c00
     ab8:	00010700 	.word	0x00010700

00000abc <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
    */


    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     abc:	4a29      	ldr	r2, [pc, #164]	; (b64 <RtcInit+0xa8>)
     abe:	4b2a      	ldr	r3, [pc, #168]	; (b68 <RtcInit+0xac>)
     ac0:	6193      	str	r3, [r2, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_ADDR >>
     ac2:	4b2a      	ldr	r3, [pc, #168]	; (b6c <RtcInit+0xb0>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     ac4:	681b      	ldr	r3, [r3, #0]
     ac6:	04db      	lsls	r3, r3, #19
     ac8:	6991      	ldr	r1, [r2, #24]
     aca:	0e5b      	lsrs	r3, r3, #25
     acc:	041b      	lsls	r3, r3, #16
     ace:	4828      	ldr	r0, [pc, #160]	; (b70 <RtcInit+0xb4>)
     ad0:	4001      	ands	r1, r0
     ad2:	4319      	orrs	r1, r3
     ad4:	6191      	str	r1, [r2, #24]
        ((*(uint32_t *)FUSES_OSC32K_ADDR >>
          FUSES_OSC32K_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     ad6:	4927      	ldr	r1, [pc, #156]	; (b74 <RtcInit+0xb8>)
     ad8:	6191      	str	r1, [r2, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     ada:	6991      	ldr	r1, [r2, #24]
     adc:	4008      	ands	r0, r1
     ade:	4303      	orrs	r3, r0
     ae0:	6193      	str	r3, [r2, #24]
        ((*(uint32_t *)FUSES_OSC32K_ADDR >>
          FUSES_OSC32K_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     ae2:	6991      	ldr	r1, [r2, #24]
     ae4:	2302      	movs	r3, #2
     ae6:	430b      	orrs	r3, r1
     ae8:	6193      	str	r3, [r2, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     aea:	0011      	movs	r1, r2
     aec:	2204      	movs	r2, #4
     aee:	68cb      	ldr	r3, [r1, #12]
     af0:	421a      	tst	r2, r3
     af2:	d0fc      	beq.n	aee <RtcInit+0x32>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     af4:	4b20      	ldr	r3, [pc, #128]	; (b78 <RtcInit+0xbc>)
     af6:	2281      	movs	r2, #129	; 0x81
     af8:	0052      	lsls	r2, r2, #1
     afa:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     afc:	4a1f      	ldr	r2, [pc, #124]	; (b7c <RtcInit+0xc0>)
     afe:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     b00:	001a      	movs	r2, r3
     b02:	7853      	ldrb	r3, [r2, #1]
     b04:	b25b      	sxtb	r3, r3
     b06:	2b00      	cmp	r3, #0
     b08:	dbfb      	blt.n	b02 <RtcInit+0x46>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     b0a:	4a1d      	ldr	r2, [pc, #116]	; (b80 <RtcInit+0xc4>)
     b0c:	4b1a      	ldr	r3, [pc, #104]	; (b78 <RtcInit+0xbc>)
     b0e:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     b10:	2204      	movs	r2, #4
     b12:	4b1c      	ldr	r3, [pc, #112]	; (b84 <RtcInit+0xc8>)
     b14:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     b16:	001a      	movs	r2, r3
     b18:	7a93      	ldrb	r3, [r2, #10]
     b1a:	09db      	lsrs	r3, r3, #7
     b1c:	d1fc      	bne.n	b18 <RtcInit+0x5c>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     b1e:	4a19      	ldr	r2, [pc, #100]	; (b84 <RtcInit+0xc8>)
     b20:	8811      	ldrh	r1, [r2, #0]
     b22:	23a0      	movs	r3, #160	; 0xa0
     b24:	00db      	lsls	r3, r3, #3
     b26:	430b      	orrs	r3, r1
     b28:	8013      	strh	r3, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     b2a:	7a93      	ldrb	r3, [r2, #10]
     b2c:	09db      	lsrs	r3, r3, #7
     b2e:	d1fc      	bne.n	b2a <RtcInit+0x6e>

    RTC->MODE1.PER.reg = 998;
     b30:	4a15      	ldr	r2, [pc, #84]	; (b88 <RtcInit+0xcc>)
     b32:	4b14      	ldr	r3, [pc, #80]	; (b84 <RtcInit+0xc8>)
     b34:	829a      	strh	r2, [r3, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     b36:	001a      	movs	r2, r3
     b38:	7a93      	ldrb	r3, [r2, #10]
     b3a:	09db      	lsrs	r3, r3, #7
     b3c:	d1fc      	bne.n	b38 <RtcInit+0x7c>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     b3e:	4b11      	ldr	r3, [pc, #68]	; (b84 <RtcInit+0xc8>)
     b40:	8859      	ldrh	r1, [r3, #2]
     b42:	4a12      	ldr	r2, [pc, #72]	; (b8c <RtcInit+0xd0>)
     b44:	430a      	orrs	r2, r1
     b46:	805a      	strh	r2, [r3, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     b48:	2280      	movs	r2, #128	; 0x80
     b4a:	71da      	strb	r2, [r3, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     b4c:	8819      	ldrh	r1, [r3, #0]
     b4e:	2202      	movs	r2, #2
     b50:	430a      	orrs	r2, r1
     b52:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     b54:	001a      	movs	r2, r3
     b56:	7a93      	ldrb	r3, [r2, #10]
     b58:	09db      	lsrs	r3, r3, #7
     b5a:	d1fc      	bne.n	b56 <RtcInit+0x9a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     b5c:	2208      	movs	r2, #8
     b5e:	4b0c      	ldr	r3, [pc, #48]	; (b90 <RtcInit+0xd4>)
     b60:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     b62:	4770      	bx	lr
     b64:	40000800 	.word	0x40000800
     b68:	00000606 	.word	0x00000606
     b6c:	00806024 	.word	0x00806024
     b70:	ff80ffff 	.word	0xff80ffff
     b74:	00000604 	.word	0x00000604
     b78:	40000c00 	.word	0x40000c00
     b7c:	00230002 	.word	0x00230002
     b80:	00004204 	.word	0x00004204
     b84:	40001400 	.word	0x40001400
     b88:	000003e6 	.word	0x000003e6
     b8c:	00004010 	.word	0x00004010
     b90:	e000e100 	.word	0xe000e100

00000b94 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     b94:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     b96:	230f      	movs	r3, #15
     b98:	4018      	ands	r0, r3
     b9a:	0212      	lsls	r2, r2, #8
     b9c:	4b07      	ldr	r3, [pc, #28]	; (bbc <gclkEnable+0x28>)
     b9e:	401a      	ands	r2, r3
     ba0:	4302      	orrs	r2, r0
     ba2:	4c07      	ldr	r4, [pc, #28]	; (bc0 <gclkEnable+0x2c>)
     ba4:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ba6:	0209      	lsls	r1, r1, #8
     ba8:	23f8      	movs	r3, #248	; 0xf8
     baa:	015b      	lsls	r3, r3, #5
     bac:	4019      	ands	r1, r3
     bae:	2380      	movs	r3, #128	; 0x80
     bb0:	025b      	lsls	r3, r3, #9
     bb2:	4319      	orrs	r1, r3
     bb4:	4308      	orrs	r0, r1
     bb6:	6060      	str	r0, [r4, #4]
}
     bb8:	bd10      	pop	{r4, pc}
     bba:	46c0      	nop			; (mov r8, r8)
     bbc:	00ffff00 	.word	0x00ffff00
     bc0:	40000c00 	.word	0x40000c00

00000bc4 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     bc4:	4b04      	ldr	r3, [pc, #16]	; (bd8 <delayInit+0x14>)
     bc6:	4a05      	ldr	r2, [pc, #20]	; (bdc <delayInit+0x18>)
     bc8:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     bca:	2230      	movs	r2, #48	; 0x30
     bcc:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     bce:	3a2b      	subs	r2, #43	; 0x2b
     bd0:	4b03      	ldr	r3, [pc, #12]	; (be0 <delayInit+0x1c>)
     bd2:	601a      	str	r2, [r3, #0]
}
     bd4:	4770      	bx	lr
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	20000004 	.word	0x20000004
     bdc:	0000bb80 	.word	0x0000bb80
     be0:	e000e010 	.word	0xe000e010

00000be4 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     be4:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     be6:	4b08      	ldr	r3, [pc, #32]	; (c08 <delay_us+0x24>)
     be8:	685c      	ldr	r4, [r3, #4]


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     bea:	4a08      	ldr	r2, [pc, #32]	; (c0c <delay_us+0x28>)
        SysTick->VAL = 0;
     bec:	2500      	movs	r5, #0

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     bee:	2180      	movs	r1, #128	; 0x80
     bf0:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     bf2:	e006      	b.n	c02 <delay_us+0x1e>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     bf4:	2c00      	cmp	r4, #0
     bf6:	d004      	beq.n	c02 <delay_us+0x1e>
        SysTick->LOAD = n;
     bf8:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     bfa:	6095      	str	r5, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     bfc:	6813      	ldr	r3, [r2, #0]
     bfe:	420b      	tst	r3, r1
     c00:	d0fc      	beq.n	bfc <delay_us+0x18>
     c02:	3801      	subs	r0, #1
     c04:	d2f6      	bcs.n	bf4 <delay_us+0x10>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     c06:	bd30      	pop	{r4, r5, pc}
     c08:	20000004 	.word	0x20000004
     c0c:	e000e010 	.word	0xe000e010

00000c10 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     c10:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     c12:	4b08      	ldr	r3, [pc, #32]	; (c34 <delay_ms+0x24>)
     c14:	681c      	ldr	r4, [r3, #0]


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     c16:	4a08      	ldr	r2, [pc, #32]	; (c38 <delay_ms+0x28>)
        SysTick->VAL = 0;
     c18:	2500      	movs	r5, #0

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     c1a:	2180      	movs	r1, #128	; 0x80
     c1c:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     c1e:	e006      	b.n	c2e <delay_ms+0x1e>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     c20:	2c00      	cmp	r4, #0
     c22:	d004      	beq.n	c2e <delay_ms+0x1e>
        SysTick->LOAD = n;
     c24:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     c26:	6095      	str	r5, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     c28:	6813      	ldr	r3, [r2, #0]
     c2a:	420b      	tst	r3, r1
     c2c:	d0fc      	beq.n	c28 <delay_ms+0x18>
     c2e:	3801      	subs	r0, #1
     c30:	d2f6      	bcs.n	c20 <delay_ms+0x10>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     c32:	bd30      	pop	{r4, r5, pc}
     c34:	20000004 	.word	0x20000004
     c38:	e000e010 	.word	0xe000e010

00000c3c <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     c3c:	4a05      	ldr	r2, [pc, #20]	; (c54 <RTC_Handler+0x18>)
     c3e:	6813      	ldr	r3, [r2, #0]
     c40:	21fa      	movs	r1, #250	; 0xfa
     c42:	0089      	lsls	r1, r1, #2
     c44:	468c      	mov	ip, r1
     c46:	4463      	add	r3, ip
     c48:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     c4a:	22ff      	movs	r2, #255	; 0xff
     c4c:	4b02      	ldr	r3, [pc, #8]	; (c58 <RTC_Handler+0x1c>)
     c4e:	721a      	strb	r2, [r3, #8]
}
     c50:	4770      	bx	lr
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	20000028 	.word	0x20000028
     c58:	40001400 	.word	0x40001400

00000c5c <TC1Init>:



void TC1Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC1_GCLK_ID) |
     c5c:	4a0c      	ldr	r2, [pc, #48]	; (c90 <TC1Init+0x34>)
     c5e:	4b0d      	ldr	r3, [pc, #52]	; (c94 <TC1Init+0x38>)
     c60:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC1;
     c62:	490d      	ldr	r1, [pc, #52]	; (c98 <TC1Init+0x3c>)
     c64:	6a0b      	ldr	r3, [r1, #32]
     c66:	2240      	movs	r2, #64	; 0x40
     c68:	4313      	orrs	r3, r2
     c6a:	620b      	str	r3, [r1, #32]

    TC1->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     c6c:	4b0b      	ldr	r3, [pc, #44]	; (c9c <TC1Init+0x40>)
     c6e:	490c      	ldr	r1, [pc, #48]	; (ca0 <TC1Init+0x44>)
     c70:	8019      	strh	r1, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV1024;
    //TC1->COUNT8.PER.reg = 0x20; // 32.768kHz / 1024 / 32 = 1.0hz = every 1 sec
    TC1->COUNT8.PER.reg = 0x40; // 32.768kHz / 1024 / 64 = 0.5hz = every 2 sec
     c72:	751a      	strb	r2, [r3, #20]
    //TC1->COUNT8.PER.reg = 0x80; // 32.768kHz / 1024 / 128 = 0.25hz = every 4 sec
    //TC1->COUNT8.PER.reg = 0xFF; // 32.768kHz / 1024 / 255 = 0.125hz = every 8 sec

    TC1->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     c74:	3a3f      	subs	r2, #63	; 0x3f
     c76:	735a      	strb	r2, [r3, #13]

    TC1->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     c78:	32ff      	adds	r2, #255	; 0xff
     c7a:	815a      	strh	r2, [r3, #10]

    TC1->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     c7c:	8819      	ldrh	r1, [r3, #0]
     c7e:	3afe      	subs	r2, #254	; 0xfe
     c80:	430a      	orrs	r2, r1
     c82:	801a      	strh	r2, [r3, #0]
     c84:	2280      	movs	r2, #128	; 0x80
     c86:	0192      	lsls	r2, r2, #6
     c88:	4b06      	ldr	r3, [pc, #24]	; (ca4 <TC1Init+0x48>)
     c8a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC1_IRQn);
}
     c8c:	4770      	bx	lr
     c8e:	46c0      	nop			; (mov r8, r8)
     c90:	00004212 	.word	0x00004212
     c94:	40000c00 	.word	0x40000c00
     c98:	40000400 	.word	0x40000400
     c9c:	42001800 	.word	0x42001800
     ca0:	00000f04 	.word	0x00000f04
     ca4:	e000e100 	.word	0xe000e100

00000ca8 <TC1_Handler>:

void TC1_Handler( void ) {
    TC1->COUNT8.INTFLAG.reg = 0xFF;
     ca8:	22ff      	movs	r2, #255	; 0xff
     caa:	4b03      	ldr	r3, [pc, #12]	; (cb8 <TC1_Handler+0x10>)
     cac:	739a      	strb	r2, [r3, #14]
    myMessage.transmitMessage = true;
     cae:	3afe      	subs	r2, #254	; 0xfe
     cb0:	4b02      	ldr	r3, [pc, #8]	; (cbc <TC1_Handler+0x14>)
     cb2:	701a      	strb	r2, [r3, #0]
}
     cb4:	4770      	bx	lr
     cb6:	46c0      	nop			; (mov r8, r8)
     cb8:	42001800 	.word	0x42001800
     cbc:	2000002c 	.word	0x2000002c

00000cc0 <findNextComma>:
 */

#include <util.h>
#include <boardDefines.h>

u8_t findNextComma(char *message) {
     cc0:	0002      	movs	r2, r0

    u8_t nextComma = 0;

    for (u8_t i = 0;; i++) {
        nextComma = i;
        if (message[i] == 0x2C) {
     cc2:	7803      	ldrb	r3, [r0, #0]
     cc4:	2b2c      	cmp	r3, #44	; 0x2c
     cc6:	d006      	beq.n	cd6 <findNextComma+0x16>
     cc8:	2000      	movs	r0, #0

u8_t findNextComma(char *message) {

    u8_t nextComma = 0;

    for (u8_t i = 0;; i++) {
     cca:	3001      	adds	r0, #1
     ccc:	b2c0      	uxtb	r0, r0
        nextComma = i;
        if (message[i] == 0x2C) {
     cce:	5c13      	ldrb	r3, [r2, r0]
     cd0:	2b2c      	cmp	r3, #44	; 0x2c
     cd2:	d1fa      	bne.n	cca <findNextComma+0xa>
     cd4:	e000      	b.n	cd8 <findNextComma+0x18>

u8_t findNextComma(char *message) {

    u8_t nextComma = 0;

    for (u8_t i = 0;; i++) {
     cd6:	2000      	movs	r0, #0
        if (message[i] == 0x2C) {
            break;
        }
    }
    return nextComma;
}
     cd8:	4770      	bx	lr
     cda:	46c0      	nop			; (mov r8, r8)

00000cdc <sendUSARTMessage>:


void sendUSARTMessage(messageToSend myMessage) {
     cdc:	b084      	sub	sp, #16
     cde:	b570      	push	{r4, r5, r6, lr}
     ce0:	9004      	str	r0, [sp, #16]
     ce2:	9105      	str	r1, [sp, #20]
     ce4:	9206      	str	r2, [sp, #24]
     ce6:	9307      	str	r3, [sp, #28]

    usartDataOut(USART1,0xA);
     ce8:	210a      	movs	r1, #10
     cea:	2001      	movs	r0, #1
     cec:	4b46      	ldr	r3, [pc, #280]	; (e08 <sendUSARTMessage+0x12c>)
     cee:	4798      	blx	r3
     cf0:	ad07      	add	r5, sp, #28
     cf2:	2425      	movs	r4, #37	; 0x25
     cf4:	446c      	add	r4, sp
    for (u8_t i = 0; i < 9; i++) {
        usartDataOut(USART1,myMessage.time[i]);
     cf6:	4e44      	ldr	r6, [pc, #272]	; (e08 <sendUSARTMessage+0x12c>)
     cf8:	7829      	ldrb	r1, [r5, #0]
     cfa:	2001      	movs	r0, #1
     cfc:	47b0      	blx	r6
     cfe:	3501      	adds	r5, #1


void sendUSARTMessage(messageToSend myMessage) {

    usartDataOut(USART1,0xA);
    for (u8_t i = 0; i < 9; i++) {
     d00:	42ac      	cmp	r4, r5
     d02:	d1f9      	bne.n	cf8 <sendUSARTMessage+0x1c>
        usartDataOut(USART1,myMessage.time[i]);
    }
    usartDataOut(USART1,0x2C);
     d04:	212c      	movs	r1, #44	; 0x2c
     d06:	2001      	movs	r0, #1
     d08:	4b3f      	ldr	r3, [pc, #252]	; (e08 <sendUSARTMessage+0x12c>)
     d0a:	4798      	blx	r3
     d0c:	262f      	movs	r6, #47	; 0x2f
     d0e:	446e      	add	r6, sp


    for (u8_t i = 0; i < 10; i++) {
        usartDataOut(USART1,myMessage.lat[i]);
     d10:	4d3d      	ldr	r5, [pc, #244]	; (e08 <sendUSARTMessage+0x12c>)
     d12:	7821      	ldrb	r1, [r4, #0]
     d14:	2001      	movs	r0, #1
     d16:	47a8      	blx	r5
     d18:	3401      	adds	r4, #1
        usartDataOut(USART1,myMessage.time[i]);
    }
    usartDataOut(USART1,0x2C);


    for (u8_t i = 0; i < 10; i++) {
     d1a:	42a6      	cmp	r6, r4
     d1c:	d1f9      	bne.n	d12 <sendUSARTMessage+0x36>
        usartDataOut(USART1,myMessage.lat[i]);
    }
    usartDataOut(USART1,0x2C);
     d1e:	212c      	movs	r1, #44	; 0x2c
     d20:	2001      	movs	r0, #1
     d22:	4c39      	ldr	r4, [pc, #228]	; (e08 <sendUSARTMessage+0x12c>)
     d24:	47a0      	blx	r4

    usartDataOut(USART1,myMessage.northSouth[0]);
     d26:	ab04      	add	r3, sp, #16
     d28:	7fd9      	ldrb	r1, [r3, #31]
     d2a:	2001      	movs	r0, #1
     d2c:	47a0      	blx	r4
    usartDataOut(USART1,0x2C);
     d2e:	212c      	movs	r1, #44	; 0x2c
     d30:	2001      	movs	r0, #1
     d32:	47a0      	blx	r4
     d34:	ac0c      	add	r4, sp, #48	; 0x30
     d36:	263b      	movs	r6, #59	; 0x3b
     d38:	446e      	add	r6, sp

    for (u8_t i = 0; i < 11; i++) {
        usartDataOut(USART1,myMessage.longitude[i]);
     d3a:	4d33      	ldr	r5, [pc, #204]	; (e08 <sendUSARTMessage+0x12c>)
     d3c:	7821      	ldrb	r1, [r4, #0]
     d3e:	2001      	movs	r0, #1
     d40:	47a8      	blx	r5
     d42:	3401      	adds	r4, #1
    usartDataOut(USART1,0x2C);

    usartDataOut(USART1,myMessage.northSouth[0]);
    usartDataOut(USART1,0x2C);

    for (u8_t i = 0; i < 11; i++) {
     d44:	42b4      	cmp	r4, r6
     d46:	d1f9      	bne.n	d3c <sendUSARTMessage+0x60>
        usartDataOut(USART1,myMessage.longitude[i]);
    }
    usartDataOut(USART1,0x2C);
     d48:	212c      	movs	r1, #44	; 0x2c
     d4a:	2001      	movs	r0, #1
     d4c:	4c2e      	ldr	r4, [pc, #184]	; (e08 <sendUSARTMessage+0x12c>)
     d4e:	47a0      	blx	r4

    usartDataOut(USART1,myMessage.eastWest[0]);
     d50:	232b      	movs	r3, #43	; 0x2b
     d52:	aa04      	add	r2, sp, #16
     d54:	5cd1      	ldrb	r1, [r2, r3]
     d56:	2001      	movs	r0, #1
     d58:	47a0      	blx	r4
    usartDataOut(USART1,0x2C);
     d5a:	212c      	movs	r1, #44	; 0x2c
     d5c:	2001      	movs	r0, #1
     d5e:	47a0      	blx	r4

    for (u8_t i = 0; i < 10; i++) {
        if (myMessage.altitude[i] == 0) {
     d60:	2333      	movs	r3, #51	; 0x33
     d62:	aa04      	add	r2, sp, #16
     d64:	5cd1      	ldrb	r1, [r2, r3]
     d66:	2900      	cmp	r1, #0
     d68:	d142      	bne.n	df0 <sendUSARTMessage+0x114>
     d6a:	e007      	b.n	d7c <sendUSARTMessage+0xa0>
     d6c:	7821      	ldrb	r1, [r4, #0]
     d6e:	2900      	cmp	r1, #0
     d70:	d004      	beq.n	d7c <sendUSARTMessage+0xa0>
            break;
        }
        usartDataOut(USART1,myMessage.altitude[i]);
     d72:	2001      	movs	r0, #1
     d74:	47a8      	blx	r5
     d76:	3401      	adds	r4, #1
    usartDataOut(USART1,0x2C);

    usartDataOut(USART1,myMessage.eastWest[0]);
    usartDataOut(USART1,0x2C);

    for (u8_t i = 0; i < 10; i++) {
     d78:	42a6      	cmp	r6, r4
     d7a:	d1f7      	bne.n	d6c <sendUSARTMessage+0x90>
        if (myMessage.altitude[i] == 0) {
            break;
        }
        usartDataOut(USART1,myMessage.altitude[i]);
    }
    usartDataOut(USART1,0x2C);
     d7c:	212c      	movs	r1, #44	; 0x2c
     d7e:	2001      	movs	r0, #1
     d80:	4b21      	ldr	r3, [pc, #132]	; (e08 <sendUSARTMessage+0x12c>)
     d82:	4798      	blx	r3

    for (u8_t i = 0; i < 10; i++) {
        if (myMessage.speedOverGround[i] == 0) {
     d84:	233d      	movs	r3, #61	; 0x3d
     d86:	aa04      	add	r2, sp, #16
     d88:	5cd1      	ldrb	r1, [r2, r3]
     d8a:	2900      	cmp	r1, #0
     d8c:	d127      	bne.n	dde <sendUSARTMessage+0x102>
     d8e:	e007      	b.n	da0 <sendUSARTMessage+0xc4>
     d90:	7821      	ldrb	r1, [r4, #0]
     d92:	2900      	cmp	r1, #0
     d94:	d004      	beq.n	da0 <sendUSARTMessage+0xc4>
            break;
        }
        usartDataOut(USART1,myMessage.speedOverGround[i]);
     d96:	2001      	movs	r0, #1
     d98:	47a8      	blx	r5
     d9a:	3401      	adds	r4, #1
        }
        usartDataOut(USART1,myMessage.altitude[i]);
    }
    usartDataOut(USART1,0x2C);

    for (u8_t i = 0; i < 10; i++) {
     d9c:	42b4      	cmp	r4, r6
     d9e:	d1f7      	bne.n	d90 <sendUSARTMessage+0xb4>
        if (myMessage.speedOverGround[i] == 0) {
            break;
        }
        usartDataOut(USART1,myMessage.speedOverGround[i]);
    }
    usartDataOut(USART1,0x2C);
     da0:	212c      	movs	r1, #44	; 0x2c
     da2:	2001      	movs	r0, #1
     da4:	4b18      	ldr	r3, [pc, #96]	; (e08 <sendUSARTMessage+0x12c>)
     da6:	4798      	blx	r3

    for (u8_t i = 0; i < 10; i++) {
        if (myMessage.courseOverGround[i] == 0) {
     da8:	2347      	movs	r3, #71	; 0x47
     daa:	aa04      	add	r2, sp, #16
     dac:	5cd1      	ldrb	r1, [r2, r3]
     dae:	2900      	cmp	r1, #0
     db0:	d10d      	bne.n	dce <sendUSARTMessage+0xf2>
     db2:	e007      	b.n	dc4 <sendUSARTMessage+0xe8>
     db4:	7821      	ldrb	r1, [r4, #0]
     db6:	2900      	cmp	r1, #0
     db8:	d004      	beq.n	dc4 <sendUSARTMessage+0xe8>
            break;
        }
        usartDataOut(USART1,myMessage.courseOverGround[i]);
     dba:	2001      	movs	r0, #1
     dbc:	47a8      	blx	r5
     dbe:	3401      	adds	r4, #1
        }
        usartDataOut(USART1,myMessage.speedOverGround[i]);
    }
    usartDataOut(USART1,0x2C);

    for (u8_t i = 0; i < 10; i++) {
     dc0:	42a6      	cmp	r6, r4
     dc2:	d1f7      	bne.n	db4 <sendUSARTMessage+0xd8>
        if (myMessage.courseOverGround[i] == 0) {
            break;
        }
        usartDataOut(USART1,myMessage.courseOverGround[i]);
    }
    usartDataOut(USART1,0x2C);
     dc4:	212c      	movs	r1, #44	; 0x2c
     dc6:	2001      	movs	r0, #1
     dc8:	4b0f      	ldr	r3, [pc, #60]	; (e08 <sendUSARTMessage+0x12c>)
     dca:	4798      	blx	r3


}
     dcc:	e018      	b.n	e00 <sendUSARTMessage+0x124>

    for (u8_t i = 0; i < 10; i++) {
        if (myMessage.courseOverGround[i] == 0) {
            break;
        }
        usartDataOut(USART1,myMessage.courseOverGround[i]);
     dce:	2001      	movs	r0, #1
     dd0:	4b0d      	ldr	r3, [pc, #52]	; (e08 <sendUSARTMessage+0x12c>)
     dd2:	4798      	blx	r3
     dd4:	ac16      	add	r4, sp, #88	; 0x58
     dd6:	2661      	movs	r6, #97	; 0x61
     dd8:	446e      	add	r6, sp
     dda:	4d0b      	ldr	r5, [pc, #44]	; (e08 <sendUSARTMessage+0x12c>)
     ddc:	e7ea      	b.n	db4 <sendUSARTMessage+0xd8>

    for (u8_t i = 0; i < 10; i++) {
        if (myMessage.speedOverGround[i] == 0) {
            break;
        }
        usartDataOut(USART1,myMessage.speedOverGround[i]);
     dde:	2001      	movs	r0, #1
     de0:	4b09      	ldr	r3, [pc, #36]	; (e08 <sendUSARTMessage+0x12c>)
     de2:	4798      	blx	r3
     de4:	244e      	movs	r4, #78	; 0x4e
     de6:	446c      	add	r4, sp
     de8:	2657      	movs	r6, #87	; 0x57
     dea:	446e      	add	r6, sp
     dec:	4d06      	ldr	r5, [pc, #24]	; (e08 <sendUSARTMessage+0x12c>)
     dee:	e7cf      	b.n	d90 <sendUSARTMessage+0xb4>

    for (u8_t i = 0; i < 10; i++) {
        if (myMessage.altitude[i] == 0) {
            break;
        }
        usartDataOut(USART1,myMessage.altitude[i]);
     df0:	2001      	movs	r0, #1
     df2:	4b05      	ldr	r3, [pc, #20]	; (e08 <sendUSARTMessage+0x12c>)
     df4:	4798      	blx	r3
     df6:	ac11      	add	r4, sp, #68	; 0x44
     df8:	264d      	movs	r6, #77	; 0x4d
     dfa:	446e      	add	r6, sp
     dfc:	4d02      	ldr	r5, [pc, #8]	; (e08 <sendUSARTMessage+0x12c>)
     dfe:	e7b5      	b.n	d6c <sendUSARTMessage+0x90>
        usartDataOut(USART1,myMessage.courseOverGround[i]);
    }
    usartDataOut(USART1,0x2C);


}
     e00:	bc70      	pop	{r4, r5, r6}
     e02:	bc08      	pop	{r3}
     e04:	b004      	add	sp, #16
     e06:	4718      	bx	r3
     e08:	00001071 	.word	0x00001071

00000e0c <parseGPSMessage>:

void parseGPSMessage() {
     e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e0e:	4647      	mov	r7, r8
     e10:	b480      	push	{r7}
     e12:	b0c2      	sub	sp, #264	; 0x108

    if(sercom(USART0)->SPI.INTFLAG.bit.RXC == 1) {
     e14:	4b63      	ldr	r3, [pc, #396]	; (fa4 <parseGPSMessage+0x198>)
     e16:	7e1b      	ldrb	r3, [r3, #24]
     e18:	075b      	lsls	r3, r3, #29
     e1a:	d400      	bmi.n	e1e <parseGPSMessage+0x12>
     e1c:	e0be      	b.n	f9c <parseGPSMessage+0x190>
     e1e:	ad02      	add	r5, sp, #8
     e20:	27ff      	movs	r7, #255	; 0xff
     e22:	46ac      	mov	ip, r5
     e24:	4467      	add	r7, ip

        u8_t message[255];
        u8_t messageLength = 0;

        for (u8_t i = 0; i < 255; i++) {
            while(sercom(USART0)->SPI.INTFLAG.bit.RXC == 0);
     e26:	4c5f      	ldr	r4, [pc, #380]	; (fa4 <parseGPSMessage+0x198>)
            u8_t digit = usartDataIn(USART0);
     e28:	4e5f      	ldr	r6, [pc, #380]	; (fa8 <parseGPSMessage+0x19c>)

        u8_t message[255];
        u8_t messageLength = 0;

        for (u8_t i = 0; i < 255; i++) {
            while(sercom(USART0)->SPI.INTFLAG.bit.RXC == 0);
     e2a:	7e23      	ldrb	r3, [r4, #24]
     e2c:	075b      	lsls	r3, r3, #29
     e2e:	d5fc      	bpl.n	e2a <parseGPSMessage+0x1e>
            u8_t digit = usartDataIn(USART0);
     e30:	2000      	movs	r0, #0
     e32:	47b0      	blx	r6
            if (digit == 0x0D ) {
     e34:	280d      	cmp	r0, #13
     e36:	d003      	beq.n	e40 <parseGPSMessage+0x34>
                break;
            }
            message[i] = digit;
     e38:	7028      	strb	r0, [r5, #0]
     e3a:	3501      	adds	r5, #1
    if(sercom(USART0)->SPI.INTFLAG.bit.RXC == 1) {

        u8_t message[255];
        u8_t messageLength = 0;

        for (u8_t i = 0; i < 255; i++) {
     e3c:	42bd      	cmp	r5, r7
     e3e:	d1f4      	bne.n	e2a <parseGPSMessage+0x1e>
        usartDataOut(USART1,0x2C);
        */

        char *msgToParse = message;

        if (message[4] == 0x47 && message[5] == 0x47) {
     e40:	ab02      	add	r3, sp, #8
     e42:	791b      	ldrb	r3, [r3, #4]
     e44:	2b47      	cmp	r3, #71	; 0x47
     e46:	d171      	bne.n	f2c <parseGPSMessage+0x120>
     e48:	ab02      	add	r3, sp, #8
     e4a:	795b      	ldrb	r3, [r3, #5]
     e4c:	2b47      	cmp	r3, #71	; 0x47
     e4e:	d000      	beq.n	e52 <parseGPSMessage+0x46>
     e50:	e0a4      	b.n	f9c <parseGPSMessage+0x190>

            u8_t nextComma = findNextComma(message);
     e52:	a802      	add	r0, sp, #8
     e54:	4d55      	ldr	r5, [pc, #340]	; (fac <parseGPSMessage+0x1a0>)
     e56:	47a8      	blx	r5

            msgToParse = strchr(msgToParse,',') + 1;
     e58:	212c      	movs	r1, #44	; 0x2c
     e5a:	a802      	add	r0, sp, #8
     e5c:	4b54      	ldr	r3, [pc, #336]	; (fb0 <parseGPSMessage+0x1a4>)
     e5e:	4698      	mov	r8, r3
     e60:	4798      	blx	r3
     e62:	1c47      	adds	r7, r0, #1
            nextComma = findNextComma(msgToParse);
     e64:	0038      	movs	r0, r7
     e66:	47a8      	blx	r5
     e68:	0002      	movs	r2, r0
            strncpy(myMessage.time,msgToParse,nextComma);
     e6a:	4c52      	ldr	r4, [pc, #328]	; (fb4 <parseGPSMessage+0x1a8>)
     e6c:	0039      	movs	r1, r7
     e6e:	0020      	movs	r0, r4
     e70:	4e51      	ldr	r6, [pc, #324]	; (fb8 <parseGPSMessage+0x1ac>)
     e72:	47b0      	blx	r6


            msgToParse = strchr(msgToParse,',') + 1;
     e74:	212c      	movs	r1, #44	; 0x2c
     e76:	0038      	movs	r0, r7
     e78:	47c0      	blx	r8
     e7a:	1c47      	adds	r7, r0, #1
            nextComma = findNextComma(msgToParse);
     e7c:	0038      	movs	r0, r7
     e7e:	47a8      	blx	r5
     e80:	0002      	movs	r2, r0
            strncpy(myMessage.lat,msgToParse,nextComma);
     e82:	0020      	movs	r0, r4
     e84:	3009      	adds	r0, #9
     e86:	0039      	movs	r1, r7
     e88:	47b0      	blx	r6

            msgToParse = strchr(msgToParse,',') + 1;
     e8a:	212c      	movs	r1, #44	; 0x2c
     e8c:	0038      	movs	r0, r7
     e8e:	47c0      	blx	r8
     e90:	1c47      	adds	r7, r0, #1
            nextComma = findNextComma(msgToParse);
     e92:	0038      	movs	r0, r7
     e94:	47a8      	blx	r5
     e96:	0002      	movs	r2, r0
            strncpy(myMessage.northSouth,msgToParse,nextComma);
     e98:	0020      	movs	r0, r4
     e9a:	3013      	adds	r0, #19
     e9c:	0039      	movs	r1, r7
     e9e:	47b0      	blx	r6

            msgToParse = strchr(msgToParse,',') + 1;
     ea0:	212c      	movs	r1, #44	; 0x2c
     ea2:	0038      	movs	r0, r7
     ea4:	47c0      	blx	r8
     ea6:	1c47      	adds	r7, r0, #1
            nextComma = findNextComma(msgToParse);
     ea8:	0038      	movs	r0, r7
     eaa:	47a8      	blx	r5
     eac:	0002      	movs	r2, r0
            strncpy(myMessage.longitude,msgToParse,nextComma);
     eae:	0020      	movs	r0, r4
     eb0:	3014      	adds	r0, #20
     eb2:	0039      	movs	r1, r7
     eb4:	47b0      	blx	r6

            msgToParse = strchr(msgToParse,',') + 1;
     eb6:	212c      	movs	r1, #44	; 0x2c
     eb8:	0038      	movs	r0, r7
     eba:	47c0      	blx	r8
     ebc:	1c47      	adds	r7, r0, #1
            nextComma = findNextComma(msgToParse);
     ebe:	0038      	movs	r0, r7
     ec0:	47a8      	blx	r5
     ec2:	0002      	movs	r2, r0
            strncpy(myMessage.eastWest,msgToParse,nextComma);
     ec4:	0020      	movs	r0, r4
     ec6:	301f      	adds	r0, #31
     ec8:	0039      	movs	r1, r7
     eca:	47b0      	blx	r6

            msgToParse = strchr(msgToParse,',') + 1;
     ecc:	212c      	movs	r1, #44	; 0x2c
     ece:	0038      	movs	r0, r7
     ed0:	47c0      	blx	r8
     ed2:	1c47      	adds	r7, r0, #1
            nextComma = findNextComma(msgToParse);
     ed4:	0038      	movs	r0, r7
     ed6:	47a8      	blx	r5
     ed8:	0002      	movs	r2, r0
            strncpy(myMessage.quality,msgToParse,nextComma);
     eda:	0020      	movs	r0, r4
     edc:	3020      	adds	r0, #32
     ede:	0039      	movs	r1, r7
     ee0:	47b0      	blx	r6

            msgToParse = strchr(msgToParse,',') + 1;
     ee2:	212c      	movs	r1, #44	; 0x2c
     ee4:	0038      	movs	r0, r7
     ee6:	47c0      	blx	r8
     ee8:	1c47      	adds	r7, r0, #1
            nextComma = findNextComma(msgToParse);
     eea:	0038      	movs	r0, r7
     eec:	47a8      	blx	r5
     eee:	0002      	movs	r2, r0
            strncpy(myMessage.numSV,msgToParse,nextComma);
     ef0:	0020      	movs	r0, r4
     ef2:	3021      	adds	r0, #33	; 0x21
     ef4:	0039      	movs	r1, r7
     ef6:	47b0      	blx	r6

            msgToParse = strchr(msgToParse,',') + 1;
     ef8:	212c      	movs	r1, #44	; 0x2c
     efa:	0038      	movs	r0, r7
     efc:	47c0      	blx	r8
     efe:	1c47      	adds	r7, r0, #1
            nextComma = findNextComma(msgToParse);
     f00:	0038      	movs	r0, r7
     f02:	47a8      	blx	r5
     f04:	0002      	movs	r2, r0
            strncpy(myMessage.HDOP,msgToParse,nextComma);
     f06:	0020      	movs	r0, r4
     f08:	3023      	adds	r0, #35	; 0x23
     f0a:	0039      	movs	r1, r7
     f0c:	47b0      	blx	r6

            msgToParse = strchr(msgToParse,',') + 1;
     f0e:	212c      	movs	r1, #44	; 0x2c
     f10:	0038      	movs	r0, r7
     f12:	47c0      	blx	r8
     f14:	1c47      	adds	r7, r0, #1
            nextComma = findNextComma(msgToParse);
     f16:	0038      	movs	r0, r7
     f18:	47a8      	blx	r5
     f1a:	0002      	movs	r2, r0
            strncpy(myMessage.altitude,msgToParse,nextComma);
     f1c:	0020      	movs	r0, r4
     f1e:	3027      	adds	r0, #39	; 0x27
     f20:	0039      	movs	r1, r7
     f22:	47b0      	blx	r6

            myMessage.messageReady = true;
     f24:	3c0c      	subs	r4, #12
     f26:	2301      	movs	r3, #1
     f28:	7063      	strb	r3, [r4, #1]
        usartDataOut(USART1,0x2C);
        */

        char *msgToParse = message;

        if (message[4] == 0x47 && message[5] == 0x47) {
     f2a:	e037      	b.n	f9c <parseGPSMessage+0x190>
            strncpy(myMessage.altitude,msgToParse,nextComma);

            myMessage.messageReady = true;


        } else if (message[4] == 0x52 && message[5] == 0x4d) {
     f2c:	2b52      	cmp	r3, #82	; 0x52
     f2e:	d135      	bne.n	f9c <parseGPSMessage+0x190>
     f30:	ab02      	add	r3, sp, #8
     f32:	795b      	ldrb	r3, [r3, #5]
     f34:	2b4d      	cmp	r3, #77	; 0x4d
     f36:	d131      	bne.n	f9c <parseGPSMessage+0x190>

            myMessage.messageReady = false;
     f38:	4d20      	ldr	r5, [pc, #128]	; (fbc <parseGPSMessage+0x1b0>)
     f3a:	2300      	movs	r3, #0
     f3c:	706b      	strb	r3, [r5, #1]

            u8_t nextComma = findNextComma(message);
     f3e:	a802      	add	r0, sp, #8
     f40:	4f1a      	ldr	r7, [pc, #104]	; (fac <parseGPSMessage+0x1a0>)
     f42:	47b8      	blx	r7

            msgToParse = strchr(msgToParse,',') + 1;
     f44:	212c      	movs	r1, #44	; 0x2c
     f46:	a802      	add	r0, sp, #8
     f48:	4c19      	ldr	r4, [pc, #100]	; (fb0 <parseGPSMessage+0x1a4>)
     f4a:	47a0      	blx	r4
            msgToParse = strchr(msgToParse,',') + 1;
     f4c:	3001      	adds	r0, #1
     f4e:	212c      	movs	r1, #44	; 0x2c
     f50:	47a0      	blx	r4
            msgToParse = strchr(msgToParse,',') + 1;
     f52:	3001      	adds	r0, #1
     f54:	212c      	movs	r1, #44	; 0x2c
     f56:	47a0      	blx	r4
            msgToParse = strchr(msgToParse,',') + 1;
     f58:	3001      	adds	r0, #1
     f5a:	212c      	movs	r1, #44	; 0x2c
     f5c:	47a0      	blx	r4
            msgToParse = strchr(msgToParse,',') + 1;
     f5e:	3001      	adds	r0, #1
     f60:	212c      	movs	r1, #44	; 0x2c
     f62:	47a0      	blx	r4
            msgToParse = strchr(msgToParse,',') + 1;
     f64:	3001      	adds	r0, #1
     f66:	212c      	movs	r1, #44	; 0x2c
     f68:	47a0      	blx	r4
            msgToParse = strchr(msgToParse,',') + 1;
     f6a:	3001      	adds	r0, #1
     f6c:	212c      	movs	r1, #44	; 0x2c
     f6e:	47a0      	blx	r4
     f70:	1c43      	adds	r3, r0, #1
     f72:	001e      	movs	r6, r3
            nextComma = findNextComma(msgToParse);
     f74:	0018      	movs	r0, r3
     f76:	47b8      	blx	r7
     f78:	0002      	movs	r2, r0
            strncpy(myMessage.speedOverGround,msgToParse,nextComma);
     f7a:	0028      	movs	r0, r5
     f7c:	303d      	adds	r0, #61	; 0x3d
     f7e:	9601      	str	r6, [sp, #4]
     f80:	0031      	movs	r1, r6
     f82:	4e0d      	ldr	r6, [pc, #52]	; (fb8 <parseGPSMessage+0x1ac>)
     f84:	47b0      	blx	r6

            msgToParse = strchr(msgToParse,',') + 1;
     f86:	212c      	movs	r1, #44	; 0x2c
     f88:	9801      	ldr	r0, [sp, #4]
     f8a:	47a0      	blx	r4
     f8c:	1c44      	adds	r4, r0, #1
            nextComma = findNextComma(msgToParse);
     f8e:	0020      	movs	r0, r4
     f90:	47b8      	blx	r7
     f92:	0002      	movs	r2, r0
            strncpy(myMessage.courseOverGround,msgToParse,nextComma);
     f94:	0028      	movs	r0, r5
     f96:	3047      	adds	r0, #71	; 0x47
     f98:	0021      	movs	r1, r4
     f9a:	47b0      	blx	r6

        }
    }
     f9c:	b042      	add	sp, #264	; 0x108
     f9e:	bc04      	pop	{r2}
     fa0:	4690      	mov	r8, r2
     fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fa4:	42000800 	.word	0x42000800
     fa8:	00001089 	.word	0x00001089
     fac:	00000cc1 	.word	0x00000cc1
     fb0:	000010fb 	.word	0x000010fb
     fb4:	20000038 	.word	0x20000038
     fb8:	00001125 	.word	0x00001125
     fbc:	2000002c 	.word	0x2000002c

00000fc0 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
     fc0:	b570      	push	{r4, r5, r6, lr}
     fc2:	0004      	movs	r4, r0
     fc4:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
     fc6:	480e      	ldr	r0, [pc, #56]	; (1000 <sercomClockEnable+0x40>)
     fc8:	6a01      	ldr	r1, [r0, #32]
     fca:	1ca6      	adds	r6, r4, #2
     fcc:	2301      	movs	r3, #1
     fce:	40b3      	lsls	r3, r6
     fd0:	430b      	orrs	r3, r1
     fd2:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
     fd4:	2d00      	cmp	r5, #0
     fd6:	d003      	beq.n	fe0 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
     fd8:	2107      	movs	r1, #7
     fda:	0028      	movs	r0, r5
     fdc:	4b09      	ldr	r3, [pc, #36]	; (1004 <sercomClockEnable+0x44>)
     fde:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     fe0:	0229      	lsls	r1, r5, #8
     fe2:	23f0      	movs	r3, #240	; 0xf0
     fe4:	011b      	lsls	r3, r3, #4
     fe6:	4019      	ands	r1, r3
     fe8:	2380      	movs	r3, #128	; 0x80
     fea:	01db      	lsls	r3, r3, #7
     fec:	4319      	orrs	r1, r3
     fee:	0023      	movs	r3, r4
     ff0:	330e      	adds	r3, #14
     ff2:	243f      	movs	r4, #63	; 0x3f
     ff4:	401c      	ands	r4, r3
     ff6:	430c      	orrs	r4, r1
     ff8:	4b03      	ldr	r3, [pc, #12]	; (1008 <sercomClockEnable+0x48>)
     ffa:	805c      	strh	r4, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
     ffc:	bd70      	pop	{r4, r5, r6, pc}
     ffe:	46c0      	nop			; (mov r8, r8)
    1000:	40000400 	.word	0x40000400
    1004:	00000b95 	.word	0x00000b95
    1008:	40000c00 	.word	0x40000c00

0000100c <sercomReset>:




inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    100c:	0280      	lsls	r0, r0, #10
    100e:	4b05      	ldr	r3, [pc, #20]	; (1024 <sercomReset+0x18>)
    1010:	469c      	mov	ip, r3
    1012:	4460      	add	r0, ip


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    1014:	2301      	movs	r3, #1
    1016:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    1018:	2201      	movs	r2, #1
    101a:	6803      	ldr	r3, [r0, #0]
    101c:	421a      	tst	r2, r3
    101e:	d1fc      	bne.n	101a <sercomReset+0xe>
}
    1020:	4770      	bx	lr
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	42000800 	.word	0x42000800

00001028 <sercomUartInit>:
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t BAUD) {
    1028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    102a:	0004      	movs	r4, r0
    102c:	000f      	movs	r7, r1
    102e:	0015      	movs	r5, r2
    1030:	001e      	movs	r6, r3

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    1032:	4b0c      	ldr	r3, [pc, #48]	; (1064 <sercomUartInit+0x3c>)
    1034:	4798      	blx	r3
    1036:	02a0      	lsls	r0, r4, #10
    1038:	4b0b      	ldr	r3, [pc, #44]	; (1068 <sercomUartInit+0x40>)
    103a:	469c      	mov	ip, r3
    103c:	4460      	add	r0, ip
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    103e:	2304      	movs	r3, #4
    1040:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = BAUD;
    1042:	b2b6      	uxth	r6, r6
    1044:	8186      	strh	r6, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    1046:	23c0      	movs	r3, #192	; 0xc0
    1048:	029b      	lsls	r3, r3, #10
    104a:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    104c:	0539      	lsls	r1, r7, #20
    104e:	22c0      	movs	r2, #192	; 0xc0
    1050:	0392      	lsls	r2, r2, #14
    1052:	4011      	ands	r1, r2
    1054:	4a05      	ldr	r2, [pc, #20]	; (106c <sercomUartInit+0x44>)
    1056:	4311      	orrs	r1, r2
    1058:	042d      	lsls	r5, r5, #16
    105a:	402b      	ands	r3, r5
    105c:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = BAUD;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    105e:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    1060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1062:	46c0      	nop			; (mov r8, r8)
    1064:	0000100d 	.word	0x0000100d
    1068:	42000800 	.word	0x42000800
    106c:	40000006 	.word	0x40000006

00001070 <usartDataOut>:
    1070:	0280      	lsls	r0, r0, #10
    1072:	4b04      	ldr	r3, [pc, #16]	; (1084 <usartDataOut+0x14>)
    1074:	469c      	mov	ip, r3
    1076:	4460      	add	r0, ip
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    1078:	b289      	uxth	r1, r1
    107a:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    107c:	7e03      	ldrb	r3, [r0, #24]
    107e:	07db      	lsls	r3, r3, #31
    1080:	d5fc      	bpl.n	107c <usartDataOut+0xc>
}
    1082:	4770      	bx	lr
    1084:	42000800 	.word	0x42000800

00001088 <usartDataIn>:
    1088:	0280      	lsls	r0, r0, #10
    108a:	4b03      	ldr	r3, [pc, #12]	; (1098 <usartDataIn+0x10>)
    108c:	469c      	mov	ip, r3
    108e:	4460      	add	r0, ip

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    1090:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    1092:	b2c0      	uxtb	r0, r0
}
    1094:	4770      	bx	lr
    1096:	46c0      	nop			; (mov r8, r8)
    1098:	42000800 	.word	0x42000800

0000109c <__libc_init_array>:
    109c:	4b0e      	ldr	r3, [pc, #56]	; (10d8 <__libc_init_array+0x3c>)
    109e:	b570      	push	{r4, r5, r6, lr}
    10a0:	2500      	movs	r5, #0
    10a2:	001e      	movs	r6, r3
    10a4:	4c0d      	ldr	r4, [pc, #52]	; (10dc <__libc_init_array+0x40>)
    10a6:	1ae4      	subs	r4, r4, r3
    10a8:	10a4      	asrs	r4, r4, #2
    10aa:	42a5      	cmp	r5, r4
    10ac:	d004      	beq.n	10b8 <__libc_init_array+0x1c>
    10ae:	00ab      	lsls	r3, r5, #2
    10b0:	58f3      	ldr	r3, [r6, r3]
    10b2:	4798      	blx	r3
    10b4:	3501      	adds	r5, #1
    10b6:	e7f8      	b.n	10aa <__libc_init_array+0xe>
    10b8:	f000 f872 	bl	11a0 <_init>
    10bc:	4b08      	ldr	r3, [pc, #32]	; (10e0 <__libc_init_array+0x44>)
    10be:	2500      	movs	r5, #0
    10c0:	001e      	movs	r6, r3
    10c2:	4c08      	ldr	r4, [pc, #32]	; (10e4 <__libc_init_array+0x48>)
    10c4:	1ae4      	subs	r4, r4, r3
    10c6:	10a4      	asrs	r4, r4, #2
    10c8:	42a5      	cmp	r5, r4
    10ca:	d004      	beq.n	10d6 <__libc_init_array+0x3a>
    10cc:	00ab      	lsls	r3, r5, #2
    10ce:	58f3      	ldr	r3, [r6, r3]
    10d0:	4798      	blx	r3
    10d2:	3501      	adds	r5, #1
    10d4:	e7f8      	b.n	10c8 <__libc_init_array+0x2c>
    10d6:	bd70      	pop	{r4, r5, r6, pc}
    10d8:	000011ac 	.word	0x000011ac
    10dc:	000011ac 	.word	0x000011ac
    10e0:	000011ac 	.word	0x000011ac
    10e4:	000011b0 	.word	0x000011b0

000010e8 <memcpy>:
    10e8:	2300      	movs	r3, #0
    10ea:	b510      	push	{r4, lr}
    10ec:	429a      	cmp	r2, r3
    10ee:	d003      	beq.n	10f8 <memcpy+0x10>
    10f0:	5ccc      	ldrb	r4, [r1, r3]
    10f2:	54c4      	strb	r4, [r0, r3]
    10f4:	3301      	adds	r3, #1
    10f6:	e7f9      	b.n	10ec <memcpy+0x4>
    10f8:	bd10      	pop	{r4, pc}

000010fa <strchr>:
    10fa:	0002      	movs	r2, r0
    10fc:	b2c9      	uxtb	r1, r1
    10fe:	7813      	ldrb	r3, [r2, #0]
    1100:	2b00      	cmp	r3, #0
    1102:	d003      	beq.n	110c <strchr+0x12>
    1104:	4299      	cmp	r1, r3
    1106:	d004      	beq.n	1112 <strchr+0x18>
    1108:	3201      	adds	r2, #1
    110a:	e7f8      	b.n	10fe <strchr+0x4>
    110c:	0018      	movs	r0, r3
    110e:	2900      	cmp	r1, #0
    1110:	d100      	bne.n	1114 <strchr+0x1a>
    1112:	0010      	movs	r0, r2
    1114:	4770      	bx	lr

00001116 <strlen>:
    1116:	2300      	movs	r3, #0
    1118:	5cc2      	ldrb	r2, [r0, r3]
    111a:	3301      	adds	r3, #1
    111c:	2a00      	cmp	r2, #0
    111e:	d1fb      	bne.n	1118 <strlen+0x2>
    1120:	1e58      	subs	r0, r3, #1
    1122:	4770      	bx	lr

00001124 <strncpy>:
    1124:	0003      	movs	r3, r0
    1126:	b530      	push	{r4, r5, lr}
    1128:	2a00      	cmp	r2, #0
    112a:	d00d      	beq.n	1148 <strncpy+0x24>
    112c:	780c      	ldrb	r4, [r1, #0]
    112e:	3301      	adds	r3, #1
    1130:	1e5d      	subs	r5, r3, #1
    1132:	3a01      	subs	r2, #1
    1134:	702c      	strb	r4, [r5, #0]
    1136:	3101      	adds	r1, #1
    1138:	2c00      	cmp	r4, #0
    113a:	d1f5      	bne.n	1128 <strncpy+0x4>
    113c:	189a      	adds	r2, r3, r2
    113e:	429a      	cmp	r2, r3
    1140:	d002      	beq.n	1148 <strncpy+0x24>
    1142:	701c      	strb	r4, [r3, #0]
    1144:	3301      	adds	r3, #1
    1146:	e7fa      	b.n	113e <strncpy+0x1a>
    1148:	bd30      	pop	{r4, r5, pc}
	...

0000114c <spiMOSI>:
    114c:	0000 0800 0000 0000                         ........

00001154 <spiSCK>:
    1154:	0000 0900 0000 0000                         ........

0000115c <spiMISO>:
    115c:	0000 0500 0000 0000 0aaa faaa aaaa aaa2     ................
    116c:	aaaa aa0a aaaa a7aa aaaa 0000 7274 6575     ............true
    117c:	0000 0000 6166 736c 0065 0000               ....false...

00001188 <spiMOSI>:
    1188:	0000 0800 0000 0000                         ........

00001190 <spiSCK>:
    1190:	0000 0900 0000 0000                         ........

00001198 <spiMISO>:
    1198:	0000 0500 0000 0000                         ........

000011a0 <_init>:
    11a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    11a6:	bc08      	pop	{r3}
    11a8:	469e      	mov	lr, r3
    11aa:	4770      	bx	lr

000011ac <__init_array_start>:
    11ac:	000000b5 	.word	0x000000b5

000011b0 <_fini>:
    11b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11b2:	46c0      	nop			; (mov r8, r8)
    11b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    11b6:	bc08      	pop	{r3}
    11b8:	469e      	mov	lr, r3
    11ba:	4770      	bx	lr

000011bc <__fini_array_start>:
    11bc:	0000008d 	.word	0x0000008d
