
Track'em V0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a2c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000010  20000000  00001a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000074  20000010  00001a3c  00020010  2**2
                  ALLOC
  3 .stack        00000404  20000084  00001ab0  00020010  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000fd63  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b9  00000000  00000000  0002fdf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001026  00000000  00000000  000310ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000001d8  00000000  00000000  000320d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000850  00000000  00000000  000322ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000fe94  00000000  00000000  00032afb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004550  00000000  00000000  0004298f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005cf32  00000000  00000000  00046edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000049c  00000000  00000000  000a3e14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	20000488 	.word	0x20000488
       4:	000000f1 	.word	0x000000f1
	return;
}
       8:	000000ed 	.word	0x000000ed
       c:	000000ed 	.word	0x000000ed
	...
      2c:	000000ed 	.word	0x000000ed
	...
      38:	000000ed 	.word	0x000000ed
      3c:	000000ed 	.word	0x000000ed
      40:	000000ed 	.word	0x000000ed
      44:	000000ed 	.word	0x000000ed
      48:	000000ed 	.word	0x000000ed
      4c:	00001559 	.word	0x00001559
      50:	000000ed 	.word	0x000000ed
      54:	000000ed 	.word	0x000000ed
      58:	000000ed 	.word	0x000000ed
      5c:	000000ed 	.word	0x000000ed
      60:	000000ed 	.word	0x000000ed
      64:	000000ed 	.word	0x000000ed
      68:	000000ed 	.word	0x000000ed
      6c:	00000000 	.word	0x00000000
      70:	000000ed 	.word	0x000000ed
      74:	000015c1 	.word	0x000015c1
      78:	000000ed 	.word	0x000000ed
      7c:	000000ed 	.word	0x000000ed
      80:	000000ed 	.word	0x000000ed
      84:	000000ed 	.word	0x000000ed
      88:	000000ed 	.word	0x000000ed

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000010 	.word	0x20000010
      ac:	00000000 	.word	0x00000000
      b0:	00001a2c 	.word	0x00001a2c

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000014 	.word	0x20000014
      e0:	00001a2c 	.word	0x00001a2c
      e4:	00001a2c 	.word	0x00001a2c
      e8:	00000000 	.word	0x00000000

000000ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
      ec:	e7fe      	b.n	ec <Dummy_Handler>
	...

000000f0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
      f0:	4821      	ldr	r0, [pc, #132]	; (178 <Reset_Handler+0x88>)
      f2:	4922      	ldr	r1, [pc, #136]	; (17c <Reset_Handler+0x8c>)
      f4:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
      f6:	4288      	cmp	r0, r1
      f8:	d002      	beq.n	100 <Reset_Handler+0x10>
      fa:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
      fc:	4c20      	ldr	r4, [pc, #128]	; (180 <Reset_Handler+0x90>)
      fe:	e003      	b.n	108 <Reset_Handler+0x18>
     100:	4b20      	ldr	r3, [pc, #128]	; (184 <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     102:	4a21      	ldr	r2, [pc, #132]	; (188 <Reset_Handler+0x98>)
                *pDest++ = 0;
     104:	2100      	movs	r1, #0
     106:	e006      	b.n	116 <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     108:	18ca      	adds	r2, r1, r3
     10a:	42a2      	cmp	r2, r4
     10c:	d2f8      	bcs.n	100 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     10e:	58c5      	ldr	r5, [r0, r3]
     110:	3304      	adds	r3, #4
     112:	6015      	str	r5, [r2, #0]
     114:	e7f8      	b.n	108 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     116:	4293      	cmp	r3, r2
     118:	d201      	bcs.n	11e <Reset_Handler+0x2e>
                *pDest++ = 0;
     11a:	c302      	stmia	r3!, {r1}
     11c:	e7fb      	b.n	116 <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     11e:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     120:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     122:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     124:	4b19      	ldr	r3, [pc, #100]	; (18c <Reset_Handler+0x9c>)
     126:	4a1a      	ldr	r2, [pc, #104]	; (190 <Reset_Handler+0xa0>)
     128:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     12a:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     12c:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     12e:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     130:	4b18      	ldr	r3, [pc, #96]	; (194 <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     132:	4919      	ldr	r1, [pc, #100]	; (198 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     134:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     136:	78cb      	ldrb	r3, [r1, #3]
     138:	43ab      	bics	r3, r5
     13a:	4323      	orrs	r3, r4
     13c:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     13e:	78cb      	ldrb	r3, [r1, #3]
     140:	43b3      	bics	r3, r6
     142:	4313      	orrs	r3, r2
     144:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     146:	2130      	movs	r1, #48	; 0x30
     148:	4b14      	ldr	r3, [pc, #80]	; (19c <Reset_Handler+0xac>)
     14a:	7b98      	ldrb	r0, [r3, #14]
     14c:	4388      	bics	r0, r1
     14e:	3910      	subs	r1, #16
     150:	4308      	orrs	r0, r1
     152:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     154:	7b99      	ldrb	r1, [r3, #14]
     156:	43b1      	bics	r1, r6
     158:	4311      	orrs	r1, r2
     15a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     15c:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     15e:	7b9a      	ldrb	r2, [r3, #14]
     160:	43aa      	bics	r2, r5
     162:	4322      	orrs	r2, r4
     164:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     166:	4a0e      	ldr	r2, [pc, #56]	; (1a0 <Reset_Handler+0xb0>)
     168:	6853      	ldr	r3, [r2, #4]
     16a:	430b      	orrs	r3, r1
     16c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     16e:	4b0d      	ldr	r3, [pc, #52]	; (1a4 <Reset_Handler+0xb4>)
     170:	4798      	blx	r3

        /* Branch to main function */
        main();
     172:	4b0d      	ldr	r3, [pc, #52]	; (1a8 <Reset_Handler+0xb8>)
     174:	4798      	blx	r3
     176:	e7fe      	b.n	176 <Reset_Handler+0x86>
     178:	00001a2c 	.word	0x00001a2c
     17c:	20000000 	.word	0x20000000
     180:	20000010 	.word	0x20000010
     184:	20000010 	.word	0x20000010
     188:	20000084 	.word	0x20000084
     18c:	00000000 	.word	0x00000000
     190:	e000ed00 	.word	0xe000ed00
     194:	410070fc 	.word	0x410070fc
     198:	41005000 	.word	0x41005000
     19c:	41004800 	.word	0x41004800
     1a0:	41004000 	.word	0x41004000
     1a4:	0000194d 	.word	0x0000194d
     1a8:	00000329 	.word	0x00000329

000001ac <SystemInit>:
     1ac:	4a01      	ldr	r2, [pc, #4]	; (1b4 <SystemInit+0x8>)
     1ae:	4b02      	ldr	r3, [pc, #8]	; (1b8 <SystemInit+0xc>)
     1b0:	601a      	str	r2, [r3, #0]
     1b2:	4770      	bx	lr
     1b4:	000f4240 	.word	0x000f4240
     1b8:	20000000 	.word	0x20000000

000001bc <init>:

#include "sam.h"
#include <util.h>
#include <boardDefines.h>

void init() {
     1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    SystemInit();
     1be:	4b4e      	ldr	r3, [pc, #312]	; (2f8 <init+0x13c>)
     1c0:	4798      	blx	r3
    GclkInit();
     1c2:	4b4e      	ldr	r3, [pc, #312]	; (2fc <init+0x140>)
     1c4:	4798      	blx	r3
    RtcInit();
     1c6:	4b4e      	ldr	r3, [pc, #312]	; (300 <init+0x144>)
     1c8:	4798      	blx	r3
    delayInit();
     1ca:	4b4e      	ldr	r3, [pc, #312]	; (304 <init+0x148>)
     1cc:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     1ce:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     1d0:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     1d2:	4b4d      	ldr	r3, [pc, #308]	; (308 <init+0x14c>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     1d4:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     1d6:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     1d8:	5858      	ldr	r0, [r3, r1]
     1da:	4a4c      	ldr	r2, [pc, #304]	; (30c <init+0x150>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     1dc:	2401      	movs	r4, #1
     1de:	4002      	ands	r2, r0
     1e0:	505a      	str	r2, [r3, r1]
     1e2:	4b4b      	ldr	r3, [pc, #300]	; (310 <init+0x154>)
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     1e4:	2002      	movs	r0, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     1e6:	001e      	movs	r6, r3
     1e8:	364e      	adds	r6, #78	; 0x4e
     1ea:	7832      	ldrb	r2, [r6, #0]
     1ec:	0019      	movs	r1, r3
     1ee:	43a2      	bics	r2, r4
     1f0:	7032      	strb	r2, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     1f2:	2280      	movs	r2, #128	; 0x80
     1f4:	01d2      	lsls	r2, r2, #7
     1f6:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     1f8:	314f      	adds	r1, #79	; 0x4f
     1fa:	780a      	ldrb	r2, [r1, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     1fc:	001f      	movs	r7, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     1fe:	43a2      	bics	r2, r4
     200:	700a      	strb	r2, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     202:	780a      	ldrb	r2, [r1, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     204:	3737      	adds	r7, #55	; 0x37
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     206:	4302      	orrs	r2, r0
     208:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     20a:	2280      	movs	r2, #128	; 0x80
     20c:	0212      	lsls	r2, r2, #8
     20e:	605a      	str	r2, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     210:	220f      	movs	r2, #15
     212:	783d      	ldrb	r5, [r7, #0]
     214:	4395      	bics	r5, r2
     216:	4305      	orrs	r5, r0
     218:	703d      	strb	r5, [r7, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     21a:	7835      	ldrb	r5, [r6, #0]
     21c:	4325      	orrs	r5, r4
     21e:	7035      	strb	r5, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     220:	2520      	movs	r5, #32
     222:	783e      	ldrb	r6, [r7, #0]
     224:	4016      	ands	r6, r2
     226:	432e      	orrs	r6, r5
     228:	703e      	strb	r6, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     22a:	780e      	ldrb	r6, [r1, #0]
     22c:	4326      	orrs	r6, r4
     22e:	700e      	strb	r6, [r1, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     230:	2158      	movs	r1, #88	; 0x58
     232:	468c      	mov	ip, r1
     234:	449c      	add	ip, r3
     236:	4661      	mov	r1, ip
     238:	4666      	mov	r6, ip
     23a:	7809      	ldrb	r1, [r1, #0]
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     23c:	4665      	mov	r5, ip
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     23e:	43a1      	bics	r1, r4
     240:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     242:	2180      	movs	r1, #128	; 0x80
     244:	0449      	lsls	r1, r1, #17
     246:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     248:	0019      	movs	r1, r3
     24a:	3159      	adds	r1, #89	; 0x59
     24c:	780e      	ldrb	r6, [r1, #0]
     24e:	3911      	subs	r1, #17
     250:	43a6      	bics	r6, r4
     252:	744e      	strb	r6, [r1, #17]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     254:	7c4e      	ldrb	r6, [r1, #17]
     256:	4306      	orrs	r6, r0
     258:	744e      	strb	r6, [r1, #17]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     25a:	2680      	movs	r6, #128	; 0x80
     25c:	04b6      	lsls	r6, r6, #18
     25e:	605e      	str	r6, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     260:	001e      	movs	r6, r3
     262:	363c      	adds	r6, #60	; 0x3c
     264:	7837      	ldrb	r7, [r6, #0]
     266:	4397      	bics	r7, r2
     268:	4307      	orrs	r7, r0
     26a:	7037      	strb	r7, [r6, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     26c:	4667      	mov	r7, ip
     26e:	783f      	ldrb	r7, [r7, #0]
     270:	4327      	orrs	r7, r4
     272:	702f      	strb	r7, [r5, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     274:	2520      	movs	r5, #32
     276:	7837      	ldrb	r7, [r6, #0]
     278:	403a      	ands	r2, r7
     27a:	432a      	orrs	r2, r5
     27c:	7032      	strb	r2, [r6, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     27e:	7c4a      	ldrb	r2, [r1, #17]
    pinOut(cs_mem);
    pinHigh(cs_mem);
    pinOut(cs_tx);
    pinHigh(cs_tx);

    sercomClockEnable(USART0, 4, 8);
     280:	4f24      	ldr	r7, [pc, #144]	; (314 <init+0x158>)
     282:	4322      	orrs	r2, r4
     284:	744a      	strb	r2, [r1, #17]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     286:	780a      	ldrb	r2, [r1, #0]
     288:	43a2      	bics	r2, r4
     28a:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     28c:	2280      	movs	r2, #128	; 0x80
     28e:	0052      	lsls	r2, r2, #1
     290:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     292:	784a      	ldrb	r2, [r1, #1]
     294:	43a2      	bics	r2, r4
     296:	704a      	strb	r2, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     298:	2280      	movs	r2, #128	; 0x80
     29a:	0092      	lsls	r2, r2, #2
     29c:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     29e:	001a      	movs	r2, r3
     2a0:	3245      	adds	r2, #69	; 0x45
     2a2:	7811      	ldrb	r1, [r2, #0]
     2a4:	43a1      	bics	r1, r4
     2a6:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     2a8:	7811      	ldrb	r1, [r2, #0]
     2aa:	4308      	orrs	r0, r1
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2ac:	0019      	movs	r1, r3
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     2ae:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2b0:	3142      	adds	r1, #66	; 0x42


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     2b2:	605d      	str	r5, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2b4:	780a      	ldrb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2b6:	3d1c      	subs	r5, #28
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2b8:	43a2      	bics	r2, r4
     2ba:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2bc:	609d      	str	r5, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2be:	619d      	str	r5, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2c0:	788a      	ldrb	r2, [r1, #2]
     2c2:	2000      	movs	r0, #0
     2c4:	43a2      	bics	r2, r4
     2c6:	708a      	strb	r2, [r1, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2c8:	2210      	movs	r2, #16
     2ca:	0029      	movs	r1, r5
     2cc:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ce:	619a      	str	r2, [r3, #24]
     2d0:	3a08      	subs	r2, #8
     2d2:	47b8      	blx	r7
    sercomUartInit(USART0,1,0,63860);
     2d4:	2200      	movs	r2, #0
     2d6:	4e10      	ldr	r6, [pc, #64]	; (318 <init+0x15c>)
     2d8:	4b10      	ldr	r3, [pc, #64]	; (31c <init+0x160>)
     2da:	0021      	movs	r1, r4
     2dc:	0010      	movs	r0, r2
     2de:	47b0      	blx	r6

    sercomClockEnable(USART1, 4, 8);
     2e0:	0029      	movs	r1, r5
     2e2:	0020      	movs	r0, r4
     2e4:	2208      	movs	r2, #8
     2e6:	47b8      	blx	r7
    sercomUartInit(USART1,3,1,45403);
     2e8:	0022      	movs	r2, r4
     2ea:	2103      	movs	r1, #3
     2ec:	0020      	movs	r0, r4
     2ee:	4b0c      	ldr	r3, [pc, #48]	; (320 <init+0x164>)
     2f0:	47b0      	blx	r6

    TC1Init();
     2f2:	4b0c      	ldr	r3, [pc, #48]	; (324 <init+0x168>)
     2f4:	4798      	blx	r3

}
     2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     2f8:	000001ad 	.word	0x000001ad
     2fc:	00001381 	.word	0x00001381
     300:	00001409 	.word	0x00001409
     304:	00001509 	.word	0x00001509
     308:	e000e100 	.word	0xe000e100
     30c:	ff00ffff 	.word	0xff00ffff
     310:	41004400 	.word	0x41004400
     314:	0000187d 	.word	0x0000187d
     318:	000018e1 	.word	0x000018e1
     31c:	0000f974 	.word	0x0000f974
     320:	0000b15b 	.word	0x0000b15b
     324:	00001575 	.word	0x00001575

00000328 <main>:
    }

}


int main(void) {
     328:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Initialize the SAM system */
    init();
     32a:	4beb      	ldr	r3, [pc, #940]	; (6d8 <STACK_SIZE+0x2d8>)
    }

}


int main(void) {
     32c:	b09d      	sub	sp, #116	; 0x74
    /* Initialize the SAM system */
    init();
     32e:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     330:	2210      	movs	r2, #16
     332:	4bea      	ldr	r3, [pc, #936]	; (6dc <STACK_SIZE+0x2dc>)
     334:	615a      	str	r2, [r3, #20]
     336:	9313      	str	r3, [sp, #76]	; 0x4c


    /* Replace with your application code */

    pinLow(cs_tx);
    while(pinRead(spiMISO) == true);
     338:	2320      	movs	r3, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     33a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     33c:	4fe7      	ldr	r7, [pc, #924]	; (6dc <STACK_SIZE+0x2dc>)
     33e:	6a12      	ldr	r2, [r2, #32]
     340:	421a      	tst	r2, r3
     342:	d1fa      	bne.n	33a <main+0x12>
    byteOut(spiSCK, spiMOSI, CC1101_SRES);
     344:	2330      	movs	r3, #48	; 0x30
     346:	4ce6      	ldr	r4, [pc, #920]	; (6e0 <STACK_SIZE+0x2e0>)
     348:	9300      	str	r3, [sp, #0]
     34a:	7863      	ldrb	r3, [r4, #1]
     34c:	7821      	ldrb	r1, [r4, #0]
     34e:	78a5      	ldrb	r5, [r4, #2]
     350:	021b      	lsls	r3, r3, #8
     352:	430b      	orrs	r3, r1
     354:	042d      	lsls	r5, r5, #16
     356:	001a      	movs	r2, r3
     358:	002b      	movs	r3, r5
     35a:	78e5      	ldrb	r5, [r4, #3]
     35c:	4313      	orrs	r3, r2
     35e:	062d      	lsls	r5, r5, #24
     360:	431d      	orrs	r5, r3
     362:	79a3      	ldrb	r3, [r4, #6]
     364:	7961      	ldrb	r1, [r4, #5]
     366:	021b      	lsls	r3, r3, #8
     368:	430b      	orrs	r3, r1
     36a:	001a      	movs	r2, r3
     36c:	79e3      	ldrb	r3, [r4, #7]
     36e:	7926      	ldrb	r6, [r4, #4]
     370:	041b      	lsls	r3, r3, #16
     372:	4313      	orrs	r3, r2
     374:	7a22      	ldrb	r2, [r4, #8]
     376:	9515      	str	r5, [sp, #84]	; 0x54
     378:	0612      	lsls	r2, r2, #24
     37a:	431a      	orrs	r2, r3
     37c:	7a63      	ldrb	r3, [r4, #9]
     37e:	9212      	str	r2, [sp, #72]	; 0x48
     380:	9314      	str	r3, [sp, #80]	; 0x50
     382:	002a      	movs	r2, r5
     384:	0033      	movs	r3, r6
     386:	9914      	ldr	r1, [sp, #80]	; 0x50
     388:	9812      	ldr	r0, [sp, #72]	; 0x48
     38a:	4dd6      	ldr	r5, [pc, #856]	; (6e4 <STACK_SIZE+0x2e4>)
     38c:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     38e:	2310      	movs	r3, #16
    pinHigh(cs_tx);

    delay_ms(100);
     390:	2064      	movs	r0, #100	; 0x64
     392:	61bb      	str	r3, [r7, #24]
     394:	4bd4      	ldr	r3, [pc, #848]	; (6e8 <STACK_SIZE+0x2e8>)
     396:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     398:	2304      	movs	r3, #4
     39a:	617b      	str	r3, [r7, #20]

    pinLow(cs_mem);
    byteOut(spiSCK,spiMOSI,0x9f);
     39c:	339b      	adds	r3, #155	; 0x9b
     39e:	9300      	str	r3, [sp, #0]
     3a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
     3a2:	0033      	movs	r3, r6
     3a4:	9812      	ldr	r0, [sp, #72]	; 0x48
     3a6:	9914      	ldr	r1, [sp, #80]	; 0x50
     3a8:	4dce      	ldr	r5, [pc, #824]	; (6e4 <STACK_SIZE+0x2e4>)
     3aa:	47a8      	blx	r5
    volatile u8_t ID = byteIn(spiSCK, spiMISO);
     3ac:	7ae3      	ldrb	r3, [r4, #11]
     3ae:	7aa1      	ldrb	r1, [r4, #10]
     3b0:	7b25      	ldrb	r5, [r4, #12]
     3b2:	021b      	lsls	r3, r3, #8
     3b4:	430b      	orrs	r3, r1
     3b6:	042d      	lsls	r5, r5, #16
     3b8:	001a      	movs	r2, r3
     3ba:	002b      	movs	r3, r5
     3bc:	7b65      	ldrb	r5, [r4, #13]
     3be:	4313      	orrs	r3, r2
     3c0:	062d      	lsls	r5, r5, #24
     3c2:	431d      	orrs	r5, r3
     3c4:	7ba3      	ldrb	r3, [r4, #14]
     3c6:	4ec9      	ldr	r6, [pc, #804]	; (6ec <STACK_SIZE+0x2ec>)
     3c8:	002a      	movs	r2, r5
     3ca:	9914      	ldr	r1, [sp, #80]	; 0x50
     3cc:	9812      	ldr	r0, [sp, #72]	; 0x48
     3ce:	9315      	str	r3, [sp, #84]	; 0x54
     3d0:	47b0      	blx	r6
     3d2:	ab1a      	add	r3, sp, #104	; 0x68
     3d4:	7018      	strb	r0, [r3, #0]
    volatile u8_t ID2 = byteIn(spiSCK, spiMISO);
     3d6:	002a      	movs	r2, r5
     3d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
     3da:	9914      	ldr	r1, [sp, #80]	; 0x50
     3dc:	9812      	ldr	r0, [sp, #72]	; 0x48
     3de:	47b0      	blx	r6
     3e0:	2349      	movs	r3, #73	; 0x49
     3e2:	aa08      	add	r2, sp, #32
     3e4:	189b      	adds	r3, r3, r2
    volatile u8_t ID3 = byteIn(spiSCK, spiMISO);
     3e6:	9914      	ldr	r1, [sp, #80]	; 0x50
    delay_ms(100);

    pinLow(cs_mem);
    byteOut(spiSCK,spiMOSI,0x9f);
    volatile u8_t ID = byteIn(spiSCK, spiMISO);
    volatile u8_t ID2 = byteIn(spiSCK, spiMISO);
     3e8:	7018      	strb	r0, [r3, #0]
    volatile u8_t ID3 = byteIn(spiSCK, spiMISO);
     3ea:	002a      	movs	r2, r5
     3ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
     3ee:	9812      	ldr	r0, [sp, #72]	; 0x48
     3f0:	47b0      	blx	r6
     3f2:	234a      	movs	r3, #74	; 0x4a
     3f4:	aa08      	add	r2, sp, #32
     3f6:	189b      	adds	r3, r3, r2
     3f8:	7018      	strb	r0, [r3, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3fa:	2304      	movs	r3, #4
     3fc:	61bb      	str	r3, [r7, #24]
    pinHigh(cs_mem);

    volatile u8_t status1 = cc1101_get_status();
     3fe:	4bbc      	ldr	r3, [pc, #752]	; (6f0 <STACK_SIZE+0x2f0>)
     400:	4798      	blx	r3
     402:	234b      	movs	r3, #75	; 0x4b
     404:	aa08      	add	r2, sp, #32
     406:	189b      	adds	r3, r3, r2
     408:	7018      	strb	r0, [r3, #0]
    delay_ms(100);
     40a:	2064      	movs	r0, #100	; 0x64
     40c:	4bb6      	ldr	r3, [pc, #728]	; (6e8 <STACK_SIZE+0x2e8>)
     40e:	4798      	blx	r3

    write_cc1101_status_regersters();
     410:	4bb8      	ldr	r3, [pc, #736]	; (6f4 <STACK_SIZE+0x2f4>)
     412:	4798      	blx	r3
    delay_ms(100);
     414:	2064      	movs	r0, #100	; 0x64
     416:	4bb4      	ldr	r3, [pc, #720]	; (6e8 <STACK_SIZE+0x2e8>)
     418:	4798      	blx	r3

    sendreg();
     41a:	4bb7      	ldr	r3, [pc, #732]	; (6f8 <STACK_SIZE+0x2f8>)
     41c:	4798      	blx	r3

    delay_ms(100);
     41e:	4bb2      	ldr	r3, [pc, #712]	; (6e8 <STACK_SIZE+0x2e8>)
     420:	2064      	movs	r0, #100	; 0x64
     422:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     424:	2310      	movs	r3, #16
     426:	4eaf      	ldr	r6, [pc, #700]	; (6e4 <STACK_SIZE+0x2e4>)
     428:	617b      	str	r3, [r7, #20]


    pinLow(cs_tx);
    while(pinRead(spiMISO) == true);
     42a:	18db      	adds	r3, r3, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     42c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     42e:	4dab      	ldr	r5, [pc, #684]	; (6dc <STACK_SIZE+0x2dc>)
     430:	6a12      	ldr	r2, [r2, #32]
     432:	421a      	tst	r2, r3
     434:	d1fa      	bne.n	42c <STACK_SIZE+0x2c>
    byteOut(spiSCK, spiMOSI, CC1101_STX);
     436:	2335      	movs	r3, #53	; 0x35
     438:	7861      	ldrb	r1, [r4, #1]
     43a:	78a2      	ldrb	r2, [r4, #2]
     43c:	9300      	str	r3, [sp, #0]
     43e:	7823      	ldrb	r3, [r4, #0]
     440:	0412      	lsls	r2, r2, #16
     442:	0209      	lsls	r1, r1, #8
     444:	4319      	orrs	r1, r3
     446:	0013      	movs	r3, r2
     448:	430b      	orrs	r3, r1
     44a:	79a1      	ldrb	r1, [r4, #6]
     44c:	7960      	ldrb	r0, [r4, #5]
     44e:	0209      	lsls	r1, r1, #8
     450:	4301      	orrs	r1, r0
     452:	79e0      	ldrb	r0, [r4, #7]
     454:	78e2      	ldrb	r2, [r4, #3]
     456:	0400      	lsls	r0, r0, #16
     458:	4301      	orrs	r1, r0
     45a:	7a20      	ldrb	r0, [r4, #8]
     45c:	0612      	lsls	r2, r2, #24
     45e:	0600      	lsls	r0, r0, #24
     460:	431a      	orrs	r2, r3
     462:	4308      	orrs	r0, r1
     464:	7923      	ldrb	r3, [r4, #4]
     466:	7a61      	ldrb	r1, [r4, #9]
     468:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     46a:	2610      	movs	r6, #16
    pinHigh(cs_tx);


    volatile u8_t status2 = cc1101_get_status();
     46c:	4ba0      	ldr	r3, [pc, #640]	; (6f0 <STACK_SIZE+0x2f0>)
     46e:	61ae      	str	r6, [r5, #24]
     470:	4798      	blx	r3
     472:	ab1b      	add	r3, sp, #108	; 0x6c
     474:	7018      	strb	r0, [r3, #0]

    delay_ms(10);
     476:	4b9c      	ldr	r3, [pc, #624]	; (6e8 <STACK_SIZE+0x2e8>)
     478:	200a      	movs	r0, #10
     47a:	4798      	blx	r3


    pinLow(cs_tx);
    while(pinRead(spiMISO) == true);
     47c:	2320      	movs	r3, #32
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     47e:	616e      	str	r6, [r5, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     480:	9a13      	ldr	r2, [sp, #76]	; 0x4c
     482:	6a12      	ldr	r2, [r2, #32]
     484:	421a      	tst	r2, r3
     486:	d1fb      	bne.n	480 <STACK_SIZE+0x80>
    byteOut(spiSCK, spiMOSI, 0x7F);
     488:	237f      	movs	r3, #127	; 0x7f
     48a:	9300      	str	r3, [sp, #0]
     48c:	7863      	ldrb	r3, [r4, #1]
     48e:	7821      	ldrb	r1, [r4, #0]
     490:	021b      	lsls	r3, r3, #8
     492:	430b      	orrs	r3, r1
     494:	001a      	movs	r2, r3
     496:	78a3      	ldrb	r3, [r4, #2]
     498:	7926      	ldrb	r6, [r4, #4]
     49a:	041b      	lsls	r3, r3, #16
     49c:	4313      	orrs	r3, r2
     49e:	78e2      	ldrb	r2, [r4, #3]
     4a0:	7964      	ldrb	r4, [r4, #5]
     4a2:	0612      	lsls	r2, r2, #24
     4a4:	431a      	orrs	r2, r3
     4a6:	4b95      	ldr	r3, [pc, #596]	; (6fc <STACK_SIZE+0x2fc>)
     4a8:	0017      	movs	r7, r2
     4aa:	785b      	ldrb	r3, [r3, #1]
     4ac:	021b      	lsls	r3, r3, #8
     4ae:	9315      	str	r3, [sp, #84]	; 0x54
     4b0:	431c      	orrs	r4, r3
     4b2:	4b92      	ldr	r3, [pc, #584]	; (6fc <STACK_SIZE+0x2fc>)
     4b4:	789b      	ldrb	r3, [r3, #2]
     4b6:	041b      	lsls	r3, r3, #16
     4b8:	9316      	str	r3, [sp, #88]	; 0x58
     4ba:	431c      	orrs	r4, r3
     4bc:	4b8f      	ldr	r3, [pc, #572]	; (6fc <STACK_SIZE+0x2fc>)
     4be:	78db      	ldrb	r3, [r3, #3]
     4c0:	061b      	lsls	r3, r3, #24
     4c2:	431c      	orrs	r4, r3
     4c4:	9317      	str	r3, [sp, #92]	; 0x5c
     4c6:	4b8d      	ldr	r3, [pc, #564]	; (6fc <STACK_SIZE+0x2fc>)
     4c8:	0020      	movs	r0, r4
     4ca:	791d      	ldrb	r5, [r3, #4]
     4cc:	9412      	str	r4, [sp, #72]	; 0x48
     4ce:	0033      	movs	r3, r6
     4d0:	0029      	movs	r1, r5
     4d2:	4c84      	ldr	r4, [pc, #528]	; (6e4 <STACK_SIZE+0x2e4>)
     4d4:	47a0      	blx	r4
    byteOut(spiSCK, spiMOSI, 0x03);
     4d6:	2303      	movs	r3, #3
     4d8:	003a      	movs	r2, r7
     4da:	9300      	str	r3, [sp, #0]
     4dc:	9812      	ldr	r0, [sp, #72]	; 0x48
     4de:	0033      	movs	r3, r6
     4e0:	0029      	movs	r1, r5
     4e2:	4c80      	ldr	r4, [pc, #512]	; (6e4 <STACK_SIZE+0x2e4>)
     4e4:	47a0      	blx	r4
    byteOut(spiSCK, spiMOSI, 0xAA);
     4e6:	23aa      	movs	r3, #170	; 0xaa
     4e8:	003a      	movs	r2, r7
     4ea:	9300      	str	r3, [sp, #0]
     4ec:	9812      	ldr	r0, [sp, #72]	; 0x48
     4ee:	0033      	movs	r3, r6
     4f0:	0029      	movs	r1, r5
     4f2:	4c7c      	ldr	r4, [pc, #496]	; (6e4 <STACK_SIZE+0x2e4>)
     4f4:	47a0      	blx	r4
    byteOut(spiSCK, spiMOSI, 0xAA);
     4f6:	23aa      	movs	r3, #170	; 0xaa
     4f8:	003a      	movs	r2, r7
     4fa:	9300      	str	r3, [sp, #0]
     4fc:	9812      	ldr	r0, [sp, #72]	; 0x48
     4fe:	0033      	movs	r3, r6
     500:	0029      	movs	r1, r5
     502:	4c78      	ldr	r4, [pc, #480]	; (6e4 <STACK_SIZE+0x2e4>)
     504:	47a0      	blx	r4
    byteOut(spiSCK, spiMOSI, 0x11);
     506:	2311      	movs	r3, #17
     508:	003a      	movs	r2, r7
     50a:	9300      	str	r3, [sp, #0]
     50c:	9812      	ldr	r0, [sp, #72]	; 0x48
     50e:	0033      	movs	r3, r6
     510:	0029      	movs	r1, r5
     512:	4c74      	ldr	r4, [pc, #464]	; (6e4 <STACK_SIZE+0x2e4>)
     514:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     516:	2410      	movs	r4, #16
     518:	4b70      	ldr	r3, [pc, #448]	; (6dc <STACK_SIZE+0x2dc>)
     51a:	619c      	str	r4, [r3, #24]

    pinHigh(cs_tx);

    volatile u8_t status3 = cc1101_get_status();
     51c:	4b74      	ldr	r3, [pc, #464]	; (6f0 <STACK_SIZE+0x2f0>)
     51e:	4798      	blx	r3
     520:	234d      	movs	r3, #77	; 0x4d
     522:	aa08      	add	r2, sp, #32
     524:	189b      	adds	r3, r3, r2
     526:	7018      	strb	r0, [r3, #0]

    while (1) {

        pinLow(cs_tx);
        while(pinRead(spiMISO) == true);
        byteOut(spiSCK, spiMOSI, CC1101_STX);
     528:	4b74      	ldr	r3, [pc, #464]	; (6fc <STACK_SIZE+0x2fc>)
     52a:	9a15      	ldr	r2, [sp, #84]	; 0x54
     52c:	9318      	str	r3, [sp, #96]	; 0x60
     52e:	781b      	ldrb	r3, [r3, #0]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     530:	9414      	str	r4, [sp, #80]	; 0x50
     532:	4313      	orrs	r3, r2
     534:	9a16      	ldr	r2, [sp, #88]	; 0x58
     536:	9719      	str	r7, [sp, #100]	; 0x64
     538:	4313      	orrs	r3, r2
     53a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
     53c:	431a      	orrs	r2, r3
     53e:	9216      	str	r2, [sp, #88]	; 0x58
     540:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     542:	9a14      	ldr	r2, [sp, #80]	; 0x50
     544:	615a      	str	r2, [r3, #20]


    while (1) {

        pinLow(cs_tx);
        while(pinRead(spiMISO) == true);
     546:	2220      	movs	r2, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     548:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     54a:	4c64      	ldr	r4, [pc, #400]	; (6dc <STACK_SIZE+0x2dc>)
     54c:	6a1b      	ldr	r3, [r3, #32]
     54e:	4213      	tst	r3, r2
     550:	d1f9      	bne.n	546 <STACK_SIZE+0x146>
        byteOut(spiSCK, spiMOSI, CC1101_STX);
     552:	2335      	movs	r3, #53	; 0x35
     554:	9300      	str	r3, [sp, #0]
     556:	4b62      	ldr	r3, [pc, #392]	; (6e0 <STACK_SIZE+0x2e0>)
     558:	32df      	adds	r2, #223	; 0xdf
     55a:	791b      	ldrb	r3, [r3, #4]
     55c:	9816      	ldr	r0, [sp, #88]	; 0x58
     55e:	4013      	ands	r3, r2
     560:	9a18      	ldr	r2, [sp, #96]	; 0x60
     562:	4d60      	ldr	r5, [pc, #384]	; (6e4 <STACK_SIZE+0x2e4>)
     564:	7911      	ldrb	r1, [r2, #4]
     566:	22ff      	movs	r2, #255	; 0xff
     568:	4011      	ands	r1, r2
     56a:	9a19      	ldr	r2, [sp, #100]	; 0x64
     56c:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     56e:	9b14      	ldr	r3, [sp, #80]	; 0x50
     570:	495b      	ldr	r1, [pc, #364]	; (6e0 <STACK_SIZE+0x2e0>)
     572:	61a3      	str	r3, [r4, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     574:	9b14      	ldr	r3, [sp, #80]	; 0x50
     576:	6163      	str	r3, [r4, #20]
        //volatile u8_t status6 = cc1101_get_status();



        pinLow(cs_tx);
        while(pinRead(spiMISO) == true);
     578:	2220      	movs	r2, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     57a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     57c:	6a1b      	ldr	r3, [r3, #32]
     57e:	401a      	ands	r2, r3
     580:	9215      	str	r2, [sp, #84]	; 0x54
     582:	1e13      	subs	r3, r2, #0
     584:	d1f8      	bne.n	578 <STACK_SIZE+0x178>
        byteOut(spiSCK, spiMOSI, 0x7F);
     586:	337f      	adds	r3, #127	; 0x7f
     588:	4a55      	ldr	r2, [pc, #340]	; (6e0 <STACK_SIZE+0x2e0>)
     58a:	9300      	str	r3, [sp, #0]
     58c:	4b54      	ldr	r3, [pc, #336]	; (6e0 <STACK_SIZE+0x2e0>)
     58e:	7852      	ldrb	r2, [r2, #1]
     590:	781b      	ldrb	r3, [r3, #0]
     592:	0212      	lsls	r2, r2, #8
     594:	431a      	orrs	r2, r3
     596:	4b52      	ldr	r3, [pc, #328]	; (6e0 <STACK_SIZE+0x2e0>)
     598:	79cc      	ldrb	r4, [r1, #7]
     59a:	789d      	ldrb	r5, [r3, #2]
     59c:	0424      	lsls	r4, r4, #16
     59e:	042d      	lsls	r5, r5, #16
     5a0:	002b      	movs	r3, r5
     5a2:	4313      	orrs	r3, r2
     5a4:	4a4e      	ldr	r2, [pc, #312]	; (6e0 <STACK_SIZE+0x2e0>)
     5a6:	7a4e      	ldrb	r6, [r1, #9]
     5a8:	78d5      	ldrb	r5, [r2, #3]
     5aa:	7917      	ldrb	r7, [r2, #4]
     5ac:	062d      	lsls	r5, r5, #24
     5ae:	431d      	orrs	r5, r3
     5b0:	23ff      	movs	r3, #255	; 0xff
     5b2:	401f      	ands	r7, r3
     5b4:	7953      	ldrb	r3, [r2, #5]
     5b6:	798a      	ldrb	r2, [r1, #6]
     5b8:	0212      	lsls	r2, r2, #8
     5ba:	431a      	orrs	r2, r3
     5bc:	0023      	movs	r3, r4
     5be:	7a0c      	ldrb	r4, [r1, #8]
     5c0:	4313      	orrs	r3, r2
     5c2:	0624      	lsls	r4, r4, #24
     5c4:	431c      	orrs	r4, r3
     5c6:	23ff      	movs	r3, #255	; 0xff
     5c8:	401e      	ands	r6, r3
     5ca:	0020      	movs	r0, r4
     5cc:	9412      	str	r4, [sp, #72]	; 0x48
     5ce:	002a      	movs	r2, r5
     5d0:	003b      	movs	r3, r7
     5d2:	0031      	movs	r1, r6
     5d4:	4c43      	ldr	r4, [pc, #268]	; (6e4 <STACK_SIZE+0x2e4>)
     5d6:	47a0      	blx	r4
        byteOut(spiSCK, spiMOSI, 0x09);
     5d8:	2309      	movs	r3, #9
     5da:	002a      	movs	r2, r5
     5dc:	9300      	str	r3, [sp, #0]
     5de:	9812      	ldr	r0, [sp, #72]	; 0x48
     5e0:	003b      	movs	r3, r7
     5e2:	0031      	movs	r1, r6
     5e4:	4c3f      	ldr	r4, [pc, #252]	; (6e4 <STACK_SIZE+0x2e4>)
     5e6:	47a0      	blx	r4
        byteOut(spiSCK, spiMOSI, 0xAA);
     5e8:	23aa      	movs	r3, #170	; 0xaa
     5ea:	002a      	movs	r2, r5
     5ec:	9300      	str	r3, [sp, #0]
     5ee:	9812      	ldr	r0, [sp, #72]	; 0x48
     5f0:	003b      	movs	r3, r7
     5f2:	0031      	movs	r1, r6
     5f4:	4c3b      	ldr	r4, [pc, #236]	; (6e4 <STACK_SIZE+0x2e4>)
     5f6:	47a0      	blx	r4
        byteOut(spiSCK, spiMOSI, 0xAA);
     5f8:	23aa      	movs	r3, #170	; 0xaa
     5fa:	002a      	movs	r2, r5
     5fc:	9300      	str	r3, [sp, #0]
     5fe:	9812      	ldr	r0, [sp, #72]	; 0x48
     600:	003b      	movs	r3, r7
     602:	0031      	movs	r1, r6
     604:	4c37      	ldr	r4, [pc, #220]	; (6e4 <STACK_SIZE+0x2e4>)
     606:	47a0      	blx	r4
        byteOut(spiSCK, spiMOSI, 0xAA);
     608:	23aa      	movs	r3, #170	; 0xaa
     60a:	002a      	movs	r2, r5
     60c:	9300      	str	r3, [sp, #0]
     60e:	9812      	ldr	r0, [sp, #72]	; 0x48
     610:	003b      	movs	r3, r7
     612:	0031      	movs	r1, r6
     614:	4c33      	ldr	r4, [pc, #204]	; (6e4 <STACK_SIZE+0x2e4>)
     616:	47a0      	blx	r4
        byteOut(spiSCK, spiMOSI, 0xAA);
     618:	23aa      	movs	r3, #170	; 0xaa
     61a:	002a      	movs	r2, r5
     61c:	9300      	str	r3, [sp, #0]
     61e:	9812      	ldr	r0, [sp, #72]	; 0x48
     620:	003b      	movs	r3, r7
     622:	0031      	movs	r1, r6
     624:	4c2f      	ldr	r4, [pc, #188]	; (6e4 <STACK_SIZE+0x2e4>)
     626:	47a0      	blx	r4
        byteOut(spiSCK, spiMOSI, 0xAA);
     628:	23aa      	movs	r3, #170	; 0xaa
     62a:	002a      	movs	r2, r5
     62c:	9300      	str	r3, [sp, #0]
     62e:	9812      	ldr	r0, [sp, #72]	; 0x48
     630:	003b      	movs	r3, r7
     632:	0031      	movs	r1, r6
     634:	4c2b      	ldr	r4, [pc, #172]	; (6e4 <STACK_SIZE+0x2e4>)
     636:	47a0      	blx	r4
        byteOut(spiSCK, spiMOSI, 0xAA);
     638:	23aa      	movs	r3, #170	; 0xaa
     63a:	002a      	movs	r2, r5
     63c:	9300      	str	r3, [sp, #0]
     63e:	9812      	ldr	r0, [sp, #72]	; 0x48
     640:	003b      	movs	r3, r7
     642:	0031      	movs	r1, r6
     644:	4c27      	ldr	r4, [pc, #156]	; (6e4 <STACK_SIZE+0x2e4>)
     646:	47a0      	blx	r4
        byteOut(spiSCK, spiMOSI, 0xAA);
     648:	23aa      	movs	r3, #170	; 0xaa
     64a:	002a      	movs	r2, r5
     64c:	9300      	str	r3, [sp, #0]
     64e:	9812      	ldr	r0, [sp, #72]	; 0x48
     650:	003b      	movs	r3, r7
     652:	0031      	movs	r1, r6
     654:	4c23      	ldr	r4, [pc, #140]	; (6e4 <STACK_SIZE+0x2e4>)
     656:	47a0      	blx	r4
        byteOut(spiSCK, spiMOSI, 0xAA);
     658:	23aa      	movs	r3, #170	; 0xaa
     65a:	002a      	movs	r2, r5
     65c:	9300      	str	r3, [sp, #0]
     65e:	9812      	ldr	r0, [sp, #72]	; 0x48
     660:	003b      	movs	r3, r7
     662:	0031      	movs	r1, r6
     664:	4c1f      	ldr	r4, [pc, #124]	; (6e4 <STACK_SIZE+0x2e4>)
     666:	47a0      	blx	r4
        byteOut(spiSCK, spiMOSI, 0xAA);
     668:	23aa      	movs	r3, #170	; 0xaa
     66a:	0031      	movs	r1, r6
     66c:	9300      	str	r3, [sp, #0]
     66e:	002a      	movs	r2, r5
     670:	003b      	movs	r3, r7
     672:	9812      	ldr	r0, [sp, #72]	; 0x48
     674:	4c1b      	ldr	r4, [pc, #108]	; (6e4 <STACK_SIZE+0x2e4>)
     676:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     678:	4b18      	ldr	r3, [pc, #96]	; (6dc <STACK_SIZE+0x2dc>)
     67a:	9a14      	ldr	r2, [sp, #80]	; 0x50

        pinHigh(cs_tx);

        volatile u8_t status4 = cc1101_get_status();
     67c:	4c1c      	ldr	r4, [pc, #112]	; (6f0 <STACK_SIZE+0x2f0>)
     67e:	619a      	str	r2, [r3, #24]
     680:	47a0      	blx	r4
     682:	234e      	movs	r3, #78	; 0x4e
     684:	aa08      	add	r2, sp, #32
     686:	189b      	adds	r3, r3, r2
     688:	7018      	strb	r0, [r3, #0]

        delay_ms(1);
     68a:	4b17      	ldr	r3, [pc, #92]	; (6e8 <STACK_SIZE+0x2e8>)
     68c:	2001      	movs	r0, #1
     68e:	4798      	blx	r3

        volatile u8_t status5 = cc1101_get_status();
     690:	47a0      	blx	r4
     692:	234f      	movs	r3, #79	; 0x4f
     694:	aa08      	add	r2, sp, #32
     696:	189b      	adds	r3, r3, r2
     698:	7018      	strb	r0, [r3, #0]

        parseGPSMessage();
     69a:	4b19      	ldr	r3, [pc, #100]	; (700 <STACK_SIZE+0x300>)
     69c:	4798      	blx	r3

        if (myMessage.messageReady == true && myMessage.transmitMessage == true) {
     69e:	4c19      	ldr	r4, [pc, #100]	; (704 <STACK_SIZE+0x304>)
     6a0:	7863      	ldrb	r3, [r4, #1]
     6a2:	2b00      	cmp	r3, #0
     6a4:	d100      	bne.n	6a8 <STACK_SIZE+0x2a8>
     6a6:	e74b      	b.n	540 <STACK_SIZE+0x140>
     6a8:	7823      	ldrb	r3, [r4, #0]
     6aa:	2b00      	cmp	r3, #0
     6ac:	d100      	bne.n	6b0 <STACK_SIZE+0x2b0>
     6ae:	e747      	b.n	540 <STACK_SIZE+0x140>
            myMessage.messageReady = false;
     6b0:	2254      	movs	r2, #84	; 0x54
     6b2:	466b      	mov	r3, sp
     6b4:	189b      	adds	r3, r3, r2
     6b6:	781b      	ldrb	r3, [r3, #0]
            myMessage.transmitMessage = false;

            sendUSARTMessage(myMessage);
     6b8:	0021      	movs	r1, r4
        volatile u8_t status5 = cc1101_get_status();

        parseGPSMessage();

        if (myMessage.messageReady == true && myMessage.transmitMessage == true) {
            myMessage.messageReady = false;
     6ba:	7063      	strb	r3, [r4, #1]
            myMessage.transmitMessage = false;
     6bc:	466b      	mov	r3, sp
     6be:	189b      	adds	r3, r3, r2
     6c0:	781b      	ldrb	r3, [r3, #0]

            sendUSARTMessage(myMessage);
     6c2:	3110      	adds	r1, #16

        parseGPSMessage();

        if (myMessage.messageReady == true && myMessage.transmitMessage == true) {
            myMessage.messageReady = false;
            myMessage.transmitMessage = false;
     6c4:	7023      	strb	r3, [r4, #0]

            sendUSARTMessage(myMessage);
     6c6:	3a10      	subs	r2, #16
     6c8:	4668      	mov	r0, sp
     6ca:	4b0f      	ldr	r3, [pc, #60]	; (708 <STACK_SIZE+0x308>)
     6cc:	4798      	blx	r3
     6ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     6d0:	4c0e      	ldr	r4, [pc, #56]	; (70c <STACK_SIZE+0x30c>)
     6d2:	47a0      	blx	r4
     6d4:	e734      	b.n	540 <STACK_SIZE+0x140>
     6d6:	46c0      	nop			; (mov r8, r8)
     6d8:	000001bd 	.word	0x000001bd
     6dc:	41004400 	.word	0x41004400
     6e0:	000019ec 	.word	0x000019ec
     6e4:	00000711 	.word	0x00000711
     6e8:	00001529 	.word	0x00001529
     6ec:	0000077d 	.word	0x0000077d
     6f0:	00000951 	.word	0x00000951
     6f4:	000009f1 	.word	0x000009f1
     6f8:	0000087d 	.word	0x0000087d
     6fc:	000019f1 	.word	0x000019f1
     700:	000016c5 	.word	0x000016c5
     704:	20000030 	.word	0x20000030
     708:	00001999 	.word	0x00001999
     70c:	000015ed 	.word	0x000015ed

00000710 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     710:	0c01      	lsrs	r1, r0, #16
     712:	0c13      	lsrs	r3, r2, #16
     714:	b5f0      	push	{r4, r5, r6, r7, lr}
     716:	b2cd      	uxtb	r5, r1
     718:	b2d9      	uxtb	r1, r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     71a:	2301      	movs	r3, #1
     71c:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     71e:	0e12      	lsrs	r2, r2, #24
     720:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     722:	0e00      	lsrs	r0, r0, #24
     724:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     726:	001a      	movs	r2, r3
     728:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     72a:	0030      	movs	r0, r6
     72c:	4e11      	ldr	r6, [pc, #68]	; (774 <byteOut+0x64>)
     72e:	01c9      	lsls	r1, r1, #7
     730:	b087      	sub	sp, #28
     732:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     734:	4e10      	ldr	r6, [pc, #64]	; (778 <byteOut+0x68>)
     736:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     738:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     73a:	19ae      	adds	r6, r5, r6
     73c:	7824      	ldrb	r4, [r4, #0]
     73e:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     740:	4e0c      	ldr	r6, [pc, #48]	; (774 <byteOut+0x64>)
     742:	46b4      	mov	ip, r6
     744:	44ac      	add	ip, r5
     746:	4666      	mov	r6, ip
     748:	6030      	str	r0, [r6, #0]

    for (uint8_t i = 0; i<8; ++i) {
        pinLow(SCK_PIN);
        if (byte & 0x80) {
     74a:	b266      	sxtb	r6, r4
     74c:	2e00      	cmp	r6, #0
     74e:	da05      	bge.n	75c <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     750:	4e09      	ldr	r6, [pc, #36]	; (778 <byteOut+0x68>)
     752:	46b4      	mov	ip, r6
     754:	448c      	add	ip, r1
     756:	4666      	mov	r6, ip
     758:	6032      	str	r2, [r6, #0]
     75a:	e000      	b.n	75e <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     75c:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     75e:	9e01      	ldr	r6, [sp, #4]
     760:	3b01      	subs	r3, #1
            pinHigh(MOSI_PIN);
        } else {
            pinLow(MOSI_PIN);
        }
        pinHigh(SCK_PIN);
        byte <<= 1;
     762:	0064      	lsls	r4, r4, #1
     764:	b2db      	uxtb	r3, r3
     766:	6030      	str	r0, [r6, #0]
     768:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

    for (uint8_t i = 0; i<8; ++i) {
     76a:	2b00      	cmp	r3, #0
     76c:	d1e8      	bne.n	740 <byteOut+0x30>
            pinLow(MOSI_PIN);
        }
        pinHigh(SCK_PIN);
        byte <<= 1;
    }
}
     76e:	b007      	add	sp, #28
     770:	bdf0      	pop	{r4, r5, r6, r7, pc}
     772:	46c0      	nop			; (mov r8, r8)
     774:	41004414 	.word	0x41004414
     778:	41004418 	.word	0x41004418

0000077c <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     77c:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     77e:	2501      	movs	r5, #1
     780:	b085      	sub	sp, #20
     782:	9103      	str	r1, [sp, #12]
     784:	0011      	movs	r1, r2
     786:	0c06      	lsrs	r6, r0, #16
     788:	9301      	str	r3, [sp, #4]
     78a:	b2f3      	uxtb	r3, r6
     78c:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     78e:	0e09      	lsrs	r1, r1, #24
     790:	0c14      	lsrs	r4, r2, #16
     792:	9002      	str	r0, [sp, #8]
     794:	9200      	str	r2, [sp, #0]
     796:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     798:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     79a:	2108      	movs	r1, #8
    uint8_t byte = 0x00;
     79c:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     79e:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     7a0:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7a2:	4c0a      	ldr	r4, [pc, #40]	; (7cc <byteIn+0x50>)
     7a4:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     7a6:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7a8:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     7aa:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7ac:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     7ae:	6a14      	ldr	r4, [r2, #32]

    for (uint8_t i = 0; i<8; ++i) {
        pinLow(SCK_PIN);
        byte = (byte << 1 ) | pinRead(MISO_PIN);
     7b0:	0040      	lsls	r0, r0, #1
     7b2:	402c      	ands	r4, r5
     7b4:	1e67      	subs	r7, r4, #1
     7b6:	41bc      	sbcs	r4, r7
     7b8:	3901      	subs	r1, #1
     7ba:	4304      	orrs	r4, r0
     7bc:	b2c9      	uxtb	r1, r1
     7be:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7c0:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
    uint8_t byte = 0x00;

    for (uint8_t i = 0; i<8; ++i) {
     7c2:	2900      	cmp	r1, #0
     7c4:	d1f2      	bne.n	7ac <byteIn+0x30>
        pinLow(SCK_PIN);
        byte = (byte << 1 ) | pinRead(MISO_PIN);
        pinHigh(SCK_PIN);
    }
    return byte;
}
     7c6:	b005      	add	sp, #20
     7c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	41004400 	.word	0x41004400

000007d0 <syncByte>:

uint8_t syncByte(Pin SCK_PIN, Pin MISO_PIN, Pin MOSI_PIN, uint8_t byte) {
     7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7d2:	0c15      	lsrs	r5, r2, #16
     7d4:	b089      	sub	sp, #36	; 0x24
     7d6:	0c07      	lsrs	r7, r0, #16
     7d8:	9107      	str	r1, [sp, #28]
     7da:	9305      	str	r3, [sp, #20]
     7dc:	0014      	movs	r4, r2
     7de:	9204      	str	r2, [sp, #16]
     7e0:	b2ea      	uxtb	r2, r5
     7e2:	ad0e      	add	r5, sp, #56	; 0x38
     7e4:	b2f9      	uxtb	r1, r7
     7e6:	78ae      	ldrb	r6, [r5, #2]
     7e8:	78ef      	ldrb	r7, [r5, #3]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     7ea:	2501      	movs	r5, #1
     7ec:	0e24      	lsrs	r4, r4, #24
     7ee:	40a5      	lsls	r5, r4
     7f0:	ab10      	add	r3, sp, #64	; 0x40
     7f2:	781b      	ldrb	r3, [r3, #0]
     7f4:	9501      	str	r5, [sp, #4]
     7f6:	4d1e      	ldr	r5, [pc, #120]	; (870 <syncByte+0xa0>)
     7f8:	01d4      	lsls	r4, r2, #7
     7fa:	9006      	str	r0, [sp, #24]
     7fc:	9300      	str	r3, [sp, #0]
     7fe:	0e00      	lsrs	r0, r0, #24
     800:	1964      	adds	r4, r4, r5
     802:	6825      	ldr	r5, [r4, #0]
    uint8_t byteIn = 0x00;

    while(pinRead(MISO_PIN) == true);
     804:	9b01      	ldr	r3, [sp, #4]
     806:	422b      	tst	r3, r5
     808:	d1fb      	bne.n	802 <syncByte+0x32>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     80a:	2501      	movs	r5, #1
     80c:	002c      	movs	r4, r5
     80e:	4084      	lsls	r4, r0
     810:	4b18      	ldr	r3, [pc, #96]	; (874 <syncByte+0xa4>)
     812:	9402      	str	r4, [sp, #8]
     814:	469c      	mov	ip, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     816:	2408      	movs	r4, #8
     818:	40bd      	lsls	r5, r7
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     81a:	01cf      	lsls	r7, r1, #7
     81c:	18f8      	adds	r0, r7, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     81e:	4b14      	ldr	r3, [pc, #80]	; (870 <syncByte+0xa0>)
     820:	01f6      	lsls	r6, r6, #7
     822:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     824:	44b4      	add	ip, r6
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     826:	18d2      	adds	r2, r2, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     828:	9b02      	ldr	r3, [sp, #8]
     82a:	6003      	str	r3, [r0, #0]

    for (uint8_t i = 0; i<8; ++i) {
        pinLow(SCK_PIN);
        if (byte & 0x80) {
     82c:	9b00      	ldr	r3, [sp, #0]
     82e:	061b      	lsls	r3, r3, #24
     830:	d503      	bpl.n	83a <syncByte+0x6a>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     832:	4b11      	ldr	r3, [pc, #68]	; (878 <syncByte+0xa8>)
     834:	18f1      	adds	r1, r6, r3
     836:	600d      	str	r5, [r1, #0]
     838:	e001      	b.n	83e <syncByte+0x6e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     83a:	4663      	mov	r3, ip
     83c:	601d      	str	r5, [r3, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     83e:	6813      	ldr	r3, [r2, #0]
     840:	3c01      	subs	r4, #1
     842:	9303      	str	r3, [sp, #12]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     844:	4b0c      	ldr	r3, [pc, #48]	; (878 <syncByte+0xa8>)
     846:	b2e4      	uxtb	r4, r4
     848:	18f9      	adds	r1, r7, r3
     84a:	9b02      	ldr	r3, [sp, #8]
     84c:	600b      	str	r3, [r1, #0]
        } else {
            pinLow(MOSI_PIN);
        }
        byteIn = (byte << 1 ) | pinRead(MISO_PIN);
        pinHigh(SCK_PIN);
        byte <<= 1;
     84e:	9b00      	ldr	r3, [sp, #0]
     850:	0059      	lsls	r1, r3, #1
     852:	b2cb      	uxtb	r3, r1
uint8_t syncByte(Pin SCK_PIN, Pin MISO_PIN, Pin MOSI_PIN, uint8_t byte) {
    uint8_t byteIn = 0x00;

    while(pinRead(MISO_PIN) == true);

    for (uint8_t i = 0; i<8; ++i) {
     854:	2c00      	cmp	r4, #0
     856:	d001      	beq.n	85c <syncByte+0x8c>
        } else {
            pinLow(MOSI_PIN);
        }
        byteIn = (byte << 1 ) | pinRead(MISO_PIN);
        pinHigh(SCK_PIN);
        byte <<= 1;
     858:	9300      	str	r3, [sp, #0]
     85a:	e7e5      	b.n	828 <syncByte+0x58>
    }
    return byteIn;
     85c:	9b01      	ldr	r3, [sp, #4]
     85e:	9803      	ldr	r0, [sp, #12]
     860:	4018      	ands	r0, r3
     862:	1e47      	subs	r7, r0, #1
     864:	41b8      	sbcs	r0, r7
     866:	0003      	movs	r3, r0
     868:	430b      	orrs	r3, r1
     86a:	b2d8      	uxtb	r0, r3
     86c:	b009      	add	sp, #36	; 0x24
     86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     870:	41004420 	.word	0x41004420
     874:	41004414 	.word	0x41004414
     878:	41004418 	.word	0x41004418

0000087c <sendreg>:

    volatile u8_t regirsterssss[200];

    volatile u8_t i;

    for (i = 0; i < cc1101_num_reg ; i++) {
     87c:	230e      	movs	r3, #14
     87e:	2200      	movs	r2, #0

};

u8_t cc1101_num_reg = (sizeof(cc1101_reg) / sizeof(cc1101_reg[0]));

void sendreg() {
     880:	b5f0      	push	{r4, r5, r6, r7, lr}
     882:	b0b9      	sub	sp, #228	; 0xe4

    volatile u8_t regirsterssss[200];

    volatile u8_t i;

    for (i = 0; i < cc1101_num_reg ; i++) {
     884:	a902      	add	r1, sp, #8
     886:	185b      	adds	r3, r3, r1
     888:	701a      	strb	r2, [r3, #0]
     88a:	260e      	movs	r6, #14
     88c:	ab02      	add	r3, sp, #8
     88e:	18f6      	adds	r6, r6, r3
     890:	4b2a      	ldr	r3, [pc, #168]	; (93c <sendreg+0xc0>)
     892:	7832      	ldrb	r2, [r6, #0]
     894:	7819      	ldrb	r1, [r3, #0]
     896:	4b2a      	ldr	r3, [pc, #168]	; (940 <sendreg+0xc4>)
     898:	4291      	cmp	r1, r2
     89a:	d94b      	bls.n	934 <sendreg+0xb8>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     89c:	2210      	movs	r2, #16
     89e:	615a      	str	r2, [r3, #20]

        cc1101_select();
        while(pinRead(spiMISO) == true);
     8a0:	2120      	movs	r1, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     8a2:	6a1a      	ldr	r2, [r3, #32]
     8a4:	420a      	tst	r2, r1
     8a6:	d1fb      	bne.n	8a0 <sendreg+0x24>
        byteOut(spiSCK, spiMOSI, i | 0x80);
     8a8:	2380      	movs	r3, #128	; 0x80
     8aa:	7832      	ldrb	r2, [r6, #0]
     8ac:	4c25      	ldr	r4, [pc, #148]	; (944 <sendreg+0xc8>)
     8ae:	4313      	orrs	r3, r2
     8b0:	9300      	str	r3, [sp, #0]
     8b2:	7863      	ldrb	r3, [r4, #1]
     8b4:	7820      	ldrb	r0, [r4, #0]
     8b6:	78a2      	ldrb	r2, [r4, #2]
     8b8:	021b      	lsls	r3, r3, #8
     8ba:	4303      	orrs	r3, r0
     8bc:	0412      	lsls	r2, r2, #16
     8be:	0019      	movs	r1, r3
     8c0:	0013      	movs	r3, r2
     8c2:	430b      	orrs	r3, r1
     8c4:	79a1      	ldrb	r1, [r4, #6]
     8c6:	7965      	ldrb	r5, [r4, #5]
     8c8:	0209      	lsls	r1, r1, #8
     8ca:	4329      	orrs	r1, r5
     8cc:	79e5      	ldrb	r5, [r4, #7]
     8ce:	0008      	movs	r0, r1
     8d0:	042d      	lsls	r5, r5, #16
     8d2:	0029      	movs	r1, r5
     8d4:	7a25      	ldrb	r5, [r4, #8]
     8d6:	78e2      	ldrb	r2, [r4, #3]
     8d8:	4301      	orrs	r1, r0
     8da:	062d      	lsls	r5, r5, #24
     8dc:	430d      	orrs	r5, r1
     8de:	0612      	lsls	r2, r2, #24
     8e0:	7a61      	ldrb	r1, [r4, #9]
     8e2:	431a      	orrs	r2, r3
     8e4:	0028      	movs	r0, r5
     8e6:	7923      	ldrb	r3, [r4, #4]
     8e8:	4f17      	ldr	r7, [pc, #92]	; (948 <sendreg+0xcc>)
     8ea:	9103      	str	r1, [sp, #12]
     8ec:	47b8      	blx	r7
        volatile u8_t reg_data = byteIn(spiSCK,spiMISO);
     8ee:	7ae3      	ldrb	r3, [r4, #11]
     8f0:	7aa0      	ldrb	r0, [r4, #10]
     8f2:	7b22      	ldrb	r2, [r4, #12]
     8f4:	021b      	lsls	r3, r3, #8
     8f6:	4303      	orrs	r3, r0
     8f8:	0412      	lsls	r2, r2, #16
     8fa:	0019      	movs	r1, r3
     8fc:	0013      	movs	r3, r2
     8fe:	7b62      	ldrb	r2, [r4, #13]
     900:	430b      	orrs	r3, r1
     902:	0612      	lsls	r2, r2, #24
     904:	431a      	orrs	r2, r3
     906:	9903      	ldr	r1, [sp, #12]
     908:	7ba3      	ldrb	r3, [r4, #14]
     90a:	0028      	movs	r0, r5
     90c:	4c0f      	ldr	r4, [pc, #60]	; (94c <sendreg+0xd0>)
     90e:	47a0      	blx	r4
     910:	220f      	movs	r2, #15
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     912:	2110      	movs	r1, #16
     914:	ab02      	add	r3, sp, #8
     916:	18d2      	adds	r2, r2, r3
     918:	4b09      	ldr	r3, [pc, #36]	; (940 <sendreg+0xc4>)
     91a:	7010      	strb	r0, [r2, #0]
     91c:	6199      	str	r1, [r3, #24]
        cc1101_deselect();

        regirsterssss[i] = reg_data;
     91e:	7833      	ldrb	r3, [r6, #0]
     920:	7812      	ldrb	r2, [r2, #0]
     922:	b2db      	uxtb	r3, r3
     924:	b2d2      	uxtb	r2, r2
     926:	a906      	add	r1, sp, #24
     928:	54ca      	strb	r2, [r1, r3]

    volatile u8_t regirsterssss[200];

    volatile u8_t i;

    for (i = 0; i < cc1101_num_reg ; i++) {
     92a:	7833      	ldrb	r3, [r6, #0]
     92c:	3301      	adds	r3, #1
     92e:	b2db      	uxtb	r3, r3
     930:	7033      	strb	r3, [r6, #0]
     932:	e7aa      	b.n	88a <sendreg+0xe>
     934:	2210      	movs	r2, #16
     936:	619a      	str	r2, [r3, #24]

    }
    cc1101_deselect();


}
     938:	b039      	add	sp, #228	; 0xe4
     93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     93c:	20000004 	.word	0x20000004
     940:	41004400 	.word	0x41004400
     944:	000019fb 	.word	0x000019fb
     948:	00000711 	.word	0x00000711
     94c:	0000077d 	.word	0x0000077d

00000950 <cc1101_get_status>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     950:	2210      	movs	r2, #16
     952:	4b22      	ldr	r3, [pc, #136]	; (9dc <cc1101_get_status+0x8c>)

u8_t cc1101_get_status() {
     954:	b5f0      	push	{r4, r5, r6, r7, lr}
     956:	615a      	str	r2, [r3, #20]

    cc1101_select();
    volatile u8_t status = syncByte(spiSCK, spiMISO, spiMOSI, 0x3d);
     958:	233d      	movs	r3, #61	; 0x3d
     95a:	4c21      	ldr	r4, [pc, #132]	; (9e0 <cc1101_get_status+0x90>)
    cc1101_deselect();


}

u8_t cc1101_get_status() {
     95c:	b089      	sub	sp, #36	; 0x24

    cc1101_select();
    volatile u8_t status = syncByte(spiSCK, spiMISO, spiMOSI, 0x3d);
     95e:	9302      	str	r3, [sp, #8]
     960:	0021      	movs	r1, r4
     962:	3a0b      	subs	r2, #11
     964:	4668      	mov	r0, sp
     966:	4b1f      	ldr	r3, [pc, #124]	; (9e4 <cc1101_get_status+0x94>)
     968:	4798      	blx	r3
     96a:	7ae3      	ldrb	r3, [r4, #11]
     96c:	7aa1      	ldrb	r1, [r4, #10]
     96e:	7b25      	ldrb	r5, [r4, #12]
     970:	021b      	lsls	r3, r3, #8
     972:	430b      	orrs	r3, r1
     974:	042d      	lsls	r5, r5, #16
     976:	001a      	movs	r2, r3
     978:	002b      	movs	r3, r5
     97a:	7b65      	ldrb	r5, [r4, #13]
     97c:	4313      	orrs	r3, r2
     97e:	062d      	lsls	r5, r5, #24
     980:	431d      	orrs	r5, r3
     982:	79a3      	ldrb	r3, [r4, #6]
     984:	7961      	ldrb	r1, [r4, #5]
     986:	1d67      	adds	r7, r4, #5
     988:	0026      	movs	r6, r4
     98a:	79e4      	ldrb	r4, [r4, #7]
     98c:	021b      	lsls	r3, r3, #8
     98e:	430b      	orrs	r3, r1
     990:	0424      	lsls	r4, r4, #16
     992:	001a      	movs	r2, r3
     994:	0023      	movs	r3, r4
     996:	78fc      	ldrb	r4, [r7, #3]
     998:	360a      	adds	r6, #10
     99a:	7936      	ldrb	r6, [r6, #4]
     99c:	793f      	ldrb	r7, [r7, #4]
     99e:	4313      	orrs	r3, r2
     9a0:	0624      	lsls	r4, r4, #24
     9a2:	431c      	orrs	r4, r3
     9a4:	9405      	str	r4, [sp, #20]
     9a6:	002a      	movs	r2, r5
     9a8:	0033      	movs	r3, r6
     9aa:	0039      	movs	r1, r7
     9ac:	0020      	movs	r0, r4
     9ae:	4c0e      	ldr	r4, [pc, #56]	; (9e8 <cc1101_get_status+0x98>)
     9b0:	47a0      	blx	r4
     9b2:	2316      	movs	r3, #22
     9b4:	aa02      	add	r2, sp, #8
     9b6:	189b      	adds	r3, r3, r2
     9b8:	7018      	strb	r0, [r3, #0]
    volatile u8_t status2 = byteIn(spiSCK, spiMISO);
     9ba:	002a      	movs	r2, r5
     9bc:	0033      	movs	r3, r6
     9be:	0039      	movs	r1, r7
     9c0:	9805      	ldr	r0, [sp, #20]
     9c2:	4c0a      	ldr	r4, [pc, #40]	; (9ec <cc1101_get_status+0x9c>)
     9c4:	47a0      	blx	r4
     9c6:	2317      	movs	r3, #23
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9c8:	2110      	movs	r1, #16
     9ca:	aa02      	add	r2, sp, #8
     9cc:	189b      	adds	r3, r3, r2
     9ce:	4a03      	ldr	r2, [pc, #12]	; (9dc <cc1101_get_status+0x8c>)
     9d0:	7018      	strb	r0, [r3, #0]
     9d2:	6191      	str	r1, [r2, #24]
    cc1101_deselect();

    return status2;
     9d4:	7818      	ldrb	r0, [r3, #0]
     9d6:	b2c0      	uxtb	r0, r0
}
     9d8:	b009      	add	sp, #36	; 0x24
     9da:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9dc:	41004400 	.word	0x41004400
     9e0:	000019fb 	.word	0x000019fb
     9e4:	00001999 	.word	0x00001999
     9e8:	000007d1 	.word	0x000007d1
     9ec:	0000077d 	.word	0x0000077d

000009f0 <write_cc1101_status_regersters>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     9f0:	2210      	movs	r2, #16

void write_cc1101_status_regersters() {
     9f2:	b5f0      	push	{r4, r5, r6, r7, lr}
     9f4:	4bf0      	ldr	r3, [pc, #960]	; (db8 <write_cc1101_status_regersters+0x3c8>)
     9f6:	b087      	sub	sp, #28
     9f8:	615a      	str	r2, [r3, #20]
     9fa:	9302      	str	r3, [sp, #8]

    cc1101_select();
    while(pinRead(spiMISO) == true);
     9fc:	2320      	movs	r3, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     9fe:	9a02      	ldr	r2, [sp, #8]
     a00:	4ded      	ldr	r5, [pc, #948]	; (db8 <write_cc1101_status_regersters+0x3c8>)
     a02:	6a12      	ldr	r2, [r2, #32]
     a04:	421a      	tst	r2, r3
     a06:	d1fa      	bne.n	9fe <write_cc1101_status_regersters+0xe>
    byteOut(spiSCK, spiMOSI, CC1101_IOCFG0);
     a08:	2302      	movs	r3, #2
     a0a:	4cec      	ldr	r4, [pc, #944]	; (dbc <write_cc1101_status_regersters+0x3cc>)
     a0c:	9300      	str	r3, [sp, #0]
     a0e:	7863      	ldrb	r3, [r4, #1]
     a10:	7821      	ldrb	r1, [r4, #0]
     a12:	021b      	lsls	r3, r3, #8
     a14:	430b      	orrs	r3, r1
     a16:	001a      	movs	r2, r3
     a18:	78a3      	ldrb	r3, [r4, #2]
     a1a:	7961      	ldrb	r1, [r4, #5]
     a1c:	041b      	lsls	r3, r3, #16
     a1e:	4313      	orrs	r3, r2
     a20:	78e2      	ldrb	r2, [r4, #3]
     a22:	7a67      	ldrb	r7, [r4, #9]
     a24:	0612      	lsls	r2, r2, #24
     a26:	431a      	orrs	r2, r3
     a28:	7923      	ldrb	r3, [r4, #4]
     a2a:	9203      	str	r2, [sp, #12]
     a2c:	9304      	str	r3, [sp, #16]
     a2e:	79a3      	ldrb	r3, [r4, #6]
     a30:	4ee3      	ldr	r6, [pc, #908]	; (dc0 <write_cc1101_status_regersters+0x3d0>)
     a32:	021b      	lsls	r3, r3, #8
     a34:	430b      	orrs	r3, r1
     a36:	001a      	movs	r2, r3
     a38:	79e3      	ldrb	r3, [r4, #7]
     a3a:	0039      	movs	r1, r7
     a3c:	041b      	lsls	r3, r3, #16
     a3e:	4313      	orrs	r3, r2
     a40:	7a22      	ldrb	r2, [r4, #8]
     a42:	0612      	lsls	r2, r2, #24
     a44:	431a      	orrs	r2, r3
     a46:	9205      	str	r2, [sp, #20]
     a48:	9b04      	ldr	r3, [sp, #16]
     a4a:	9a03      	ldr	r2, [sp, #12]
     a4c:	9805      	ldr	r0, [sp, #20]
     a4e:	47b0      	blx	r6
    byteOut(spiSCK, spiMOSI, RF_IOCFG0);
     a50:	2302      	movs	r3, #2
     a52:	9a03      	ldr	r2, [sp, #12]
     a54:	9300      	str	r3, [sp, #0]
     a56:	9805      	ldr	r0, [sp, #20]
     a58:	9b04      	ldr	r3, [sp, #16]
     a5a:	0039      	movs	r1, r7
     a5c:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a5e:	2310      	movs	r3, #16
    cc1101_deselect();


    cc1101_select();
    while(pinRead(spiMISO) == true);
     a60:	2220      	movs	r2, #32
     a62:	61ab      	str	r3, [r5, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a64:	616b      	str	r3, [r5, #20]
     a66:	0023      	movs	r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     a68:	9902      	ldr	r1, [sp, #8]
     a6a:	4dd3      	ldr	r5, [pc, #844]	; (db8 <write_cc1101_status_regersters+0x3c8>)
     a6c:	6a09      	ldr	r1, [r1, #32]
     a6e:	4211      	tst	r1, r2
     a70:	d1fa      	bne.n	a68 <write_cc1101_status_regersters+0x78>
    byteOut(spiSCK, spiMOSI, CC1101_FIFOTHR);
     a72:	2203      	movs	r2, #3
     a74:	9200      	str	r2, [sp, #0]
     a76:	785a      	ldrb	r2, [r3, #1]
     a78:	781e      	ldrb	r6, [r3, #0]
     a7a:	789c      	ldrb	r4, [r3, #2]
     a7c:	0212      	lsls	r2, r2, #8
     a7e:	4332      	orrs	r2, r6
     a80:	0424      	lsls	r4, r4, #16
     a82:	0011      	movs	r1, r2
     a84:	0022      	movs	r2, r4
     a86:	78dc      	ldrb	r4, [r3, #3]
     a88:	430a      	orrs	r2, r1
     a8a:	0624      	lsls	r4, r4, #24
     a8c:	1d58      	adds	r0, r3, #5
     a8e:	7959      	ldrb	r1, [r3, #5]
     a90:	4314      	orrs	r4, r2
     a92:	791a      	ldrb	r2, [r3, #4]
     a94:	799b      	ldrb	r3, [r3, #6]
     a96:	9203      	str	r2, [sp, #12]
     a98:	021b      	lsls	r3, r3, #8
     a9a:	430b      	orrs	r3, r1
     a9c:	001a      	movs	r2, r3
     a9e:	7883      	ldrb	r3, [r0, #2]
     aa0:	7907      	ldrb	r7, [r0, #4]
     aa2:	041b      	lsls	r3, r3, #16
     aa4:	4313      	orrs	r3, r2
     aa6:	78c2      	ldrb	r2, [r0, #3]
     aa8:	0039      	movs	r1, r7
     aaa:	0612      	lsls	r2, r2, #24
     aac:	431a      	orrs	r2, r3
     aae:	9204      	str	r2, [sp, #16]
     ab0:	9b03      	ldr	r3, [sp, #12]
     ab2:	0022      	movs	r2, r4
     ab4:	9804      	ldr	r0, [sp, #16]
     ab6:	4ec2      	ldr	r6, [pc, #776]	; (dc0 <write_cc1101_status_regersters+0x3d0>)
     ab8:	47b0      	blx	r6
    byteOut(spiSCK, spiMOSI, RF_FIFOTHR);
     aba:	234f      	movs	r3, #79	; 0x4f
     abc:	0022      	movs	r2, r4
     abe:	9300      	str	r3, [sp, #0]
     ac0:	9804      	ldr	r0, [sp, #16]
     ac2:	9b03      	ldr	r3, [sp, #12]
     ac4:	0039      	movs	r1, r7
     ac6:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ac8:	2310      	movs	r3, #16
     aca:	61ab      	str	r3, [r5, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     acc:	616b      	str	r3, [r5, #20]
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
     ace:	18db      	adds	r3, r3, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     ad0:	9a02      	ldr	r2, [sp, #8]
     ad2:	4db9      	ldr	r5, [pc, #740]	; (db8 <write_cc1101_status_regersters+0x3c8>)
     ad4:	6a12      	ldr	r2, [r2, #32]
     ad6:	421a      	tst	r2, r3
     ad8:	d1fa      	bne.n	ad0 <write_cc1101_status_regersters+0xe0>
    byteOut(spiSCK, spiMOSI, CC1101_PKTCTRL0);
     ada:	2308      	movs	r3, #8
     adc:	4cb7      	ldr	r4, [pc, #732]	; (dbc <write_cc1101_status_regersters+0x3cc>)
     ade:	9300      	str	r3, [sp, #0]
     ae0:	7863      	ldrb	r3, [r4, #1]
     ae2:	7821      	ldrb	r1, [r4, #0]
     ae4:	021b      	lsls	r3, r3, #8
     ae6:	430b      	orrs	r3, r1
     ae8:	001a      	movs	r2, r3
     aea:	78a3      	ldrb	r3, [r4, #2]
     aec:	7961      	ldrb	r1, [r4, #5]
     aee:	041b      	lsls	r3, r3, #16
     af0:	4313      	orrs	r3, r2
     af2:	78e2      	ldrb	r2, [r4, #3]
     af4:	7a67      	ldrb	r7, [r4, #9]
     af6:	0612      	lsls	r2, r2, #24
     af8:	431a      	orrs	r2, r3
     afa:	7923      	ldrb	r3, [r4, #4]
     afc:	9203      	str	r2, [sp, #12]
     afe:	9304      	str	r3, [sp, #16]
     b00:	79a3      	ldrb	r3, [r4, #6]
     b02:	4eaf      	ldr	r6, [pc, #700]	; (dc0 <write_cc1101_status_regersters+0x3d0>)
     b04:	021b      	lsls	r3, r3, #8
     b06:	430b      	orrs	r3, r1
     b08:	001a      	movs	r2, r3
     b0a:	79e3      	ldrb	r3, [r4, #7]
     b0c:	0039      	movs	r1, r7
     b0e:	041b      	lsls	r3, r3, #16
     b10:	4313      	orrs	r3, r2
     b12:	7a22      	ldrb	r2, [r4, #8]
     b14:	0612      	lsls	r2, r2, #24
     b16:	431a      	orrs	r2, r3
     b18:	9205      	str	r2, [sp, #20]
     b1a:	9b04      	ldr	r3, [sp, #16]
     b1c:	9a03      	ldr	r2, [sp, #12]
     b1e:	9805      	ldr	r0, [sp, #20]
     b20:	47b0      	blx	r6
    byteOut(spiSCK, spiMOSI, RF_PKTCTRL0);
     b22:	2305      	movs	r3, #5
     b24:	9a03      	ldr	r2, [sp, #12]
     b26:	9300      	str	r3, [sp, #0]
     b28:	9805      	ldr	r0, [sp, #20]
     b2a:	9b04      	ldr	r3, [sp, #16]
     b2c:	0039      	movs	r1, r7
     b2e:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b30:	2310      	movs	r3, #16
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
     b32:	2220      	movs	r2, #32
     b34:	61ab      	str	r3, [r5, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b36:	616b      	str	r3, [r5, #20]
     b38:	0023      	movs	r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     b3a:	9902      	ldr	r1, [sp, #8]
     b3c:	4d9e      	ldr	r5, [pc, #632]	; (db8 <write_cc1101_status_regersters+0x3c8>)
     b3e:	6a09      	ldr	r1, [r1, #32]
     b40:	4211      	tst	r1, r2
     b42:	d1fa      	bne.n	b3a <write_cc1101_status_regersters+0x14a>
    byteOut(spiSCK, spiMOSI, CC1101_FSCTRL1);
     b44:	220b      	movs	r2, #11
     b46:	9200      	str	r2, [sp, #0]
     b48:	785a      	ldrb	r2, [r3, #1]
     b4a:	781e      	ldrb	r6, [r3, #0]
     b4c:	789c      	ldrb	r4, [r3, #2]
     b4e:	0212      	lsls	r2, r2, #8
     b50:	4332      	orrs	r2, r6
     b52:	0424      	lsls	r4, r4, #16
     b54:	0011      	movs	r1, r2
     b56:	0022      	movs	r2, r4
     b58:	78dc      	ldrb	r4, [r3, #3]
     b5a:	430a      	orrs	r2, r1
     b5c:	0624      	lsls	r4, r4, #24
     b5e:	1d58      	adds	r0, r3, #5
     b60:	7959      	ldrb	r1, [r3, #5]
     b62:	4314      	orrs	r4, r2
     b64:	791a      	ldrb	r2, [r3, #4]
     b66:	799b      	ldrb	r3, [r3, #6]
     b68:	9203      	str	r2, [sp, #12]
     b6a:	021b      	lsls	r3, r3, #8
     b6c:	430b      	orrs	r3, r1
     b6e:	001a      	movs	r2, r3
     b70:	7883      	ldrb	r3, [r0, #2]
     b72:	7907      	ldrb	r7, [r0, #4]
     b74:	041b      	lsls	r3, r3, #16
     b76:	4313      	orrs	r3, r2
     b78:	78c2      	ldrb	r2, [r0, #3]
     b7a:	0039      	movs	r1, r7
     b7c:	0612      	lsls	r2, r2, #24
     b7e:	431a      	orrs	r2, r3
     b80:	9204      	str	r2, [sp, #16]
     b82:	9b03      	ldr	r3, [sp, #12]
     b84:	0022      	movs	r2, r4
     b86:	9804      	ldr	r0, [sp, #16]
     b88:	4e8d      	ldr	r6, [pc, #564]	; (dc0 <write_cc1101_status_regersters+0x3d0>)
     b8a:	47b0      	blx	r6
    byteOut(spiSCK, spiMOSI, RF_FSCTRL1);
     b8c:	2306      	movs	r3, #6
     b8e:	0022      	movs	r2, r4
     b90:	9300      	str	r3, [sp, #0]
     b92:	9804      	ldr	r0, [sp, #16]
     b94:	9b03      	ldr	r3, [sp, #12]
     b96:	0039      	movs	r1, r7
     b98:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b9a:	2310      	movs	r3, #16
     b9c:	61ab      	str	r3, [r5, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b9e:	616b      	str	r3, [r5, #20]
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
     ba0:	18db      	adds	r3, r3, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     ba2:	9a02      	ldr	r2, [sp, #8]
     ba4:	4e84      	ldr	r6, [pc, #528]	; (db8 <write_cc1101_status_regersters+0x3c8>)
     ba6:	6a12      	ldr	r2, [r2, #32]
     ba8:	421a      	tst	r2, r3
     baa:	d1fa      	bne.n	ba2 <write_cc1101_status_regersters+0x1b2>
    byteOut(spiSCK, spiMOSI, CC1101_FREQ2);
     bac:	230d      	movs	r3, #13
     bae:	4c83      	ldr	r4, [pc, #524]	; (dbc <write_cc1101_status_regersters+0x3cc>)
     bb0:	9300      	str	r3, [sp, #0]
     bb2:	7863      	ldrb	r3, [r4, #1]
     bb4:	7821      	ldrb	r1, [r4, #0]
     bb6:	021b      	lsls	r3, r3, #8
     bb8:	430b      	orrs	r3, r1
     bba:	001a      	movs	r2, r3
     bbc:	78a3      	ldrb	r3, [r4, #2]
     bbe:	7961      	ldrb	r1, [r4, #5]
     bc0:	041b      	lsls	r3, r3, #16
     bc2:	4313      	orrs	r3, r2
     bc4:	78e2      	ldrb	r2, [r4, #3]
     bc6:	7a67      	ldrb	r7, [r4, #9]
     bc8:	0612      	lsls	r2, r2, #24
     bca:	431a      	orrs	r2, r3
     bcc:	7923      	ldrb	r3, [r4, #4]
     bce:	9203      	str	r2, [sp, #12]
     bd0:	9304      	str	r3, [sp, #16]
     bd2:	79a3      	ldrb	r3, [r4, #6]
     bd4:	4d7a      	ldr	r5, [pc, #488]	; (dc0 <write_cc1101_status_regersters+0x3d0>)
     bd6:	021b      	lsls	r3, r3, #8
     bd8:	430b      	orrs	r3, r1
     bda:	001a      	movs	r2, r3
     bdc:	79e3      	ldrb	r3, [r4, #7]
     bde:	0039      	movs	r1, r7
     be0:	041b      	lsls	r3, r3, #16
     be2:	4313      	orrs	r3, r2
     be4:	7a22      	ldrb	r2, [r4, #8]
     be6:	0612      	lsls	r2, r2, #24
     be8:	431a      	orrs	r2, r3
     bea:	9205      	str	r2, [sp, #20]
     bec:	9b04      	ldr	r3, [sp, #16]
     bee:	9a03      	ldr	r2, [sp, #12]
     bf0:	9805      	ldr	r0, [sp, #20]
     bf2:	47a8      	blx	r5
    byteOut(spiSCK, spiMOSI, RF_FREQ2);
     bf4:	2510      	movs	r5, #16
     bf6:	9a03      	ldr	r2, [sp, #12]
     bf8:	9b04      	ldr	r3, [sp, #16]
     bfa:	0039      	movs	r1, r7
     bfc:	9500      	str	r5, [sp, #0]
     bfe:	9805      	ldr	r0, [sp, #20]
     c00:	4f6f      	ldr	r7, [pc, #444]	; (dc0 <write_cc1101_status_regersters+0x3d0>)
     c02:	47b8      	blx	r7
     c04:	0023      	movs	r3, r4
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
     c06:	2220      	movs	r2, #32
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c08:	61b5      	str	r5, [r6, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c0a:	6175      	str	r5, [r6, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c0c:	9902      	ldr	r1, [sp, #8]
     c0e:	4d6a      	ldr	r5, [pc, #424]	; (db8 <write_cc1101_status_regersters+0x3c8>)
     c10:	6a09      	ldr	r1, [r1, #32]
     c12:	4211      	tst	r1, r2
     c14:	d1fa      	bne.n	c0c <write_cc1101_status_regersters+0x21c>
    byteOut(spiSCK, spiMOSI, CC1101_FREQ1);
     c16:	220e      	movs	r2, #14
     c18:	9200      	str	r2, [sp, #0]
     c1a:	785a      	ldrb	r2, [r3, #1]
     c1c:	781e      	ldrb	r6, [r3, #0]
     c1e:	789c      	ldrb	r4, [r3, #2]
     c20:	0212      	lsls	r2, r2, #8
     c22:	4332      	orrs	r2, r6
     c24:	0424      	lsls	r4, r4, #16
     c26:	0011      	movs	r1, r2
     c28:	0022      	movs	r2, r4
     c2a:	78dc      	ldrb	r4, [r3, #3]
     c2c:	430a      	orrs	r2, r1
     c2e:	0624      	lsls	r4, r4, #24
     c30:	1d58      	adds	r0, r3, #5
     c32:	7959      	ldrb	r1, [r3, #5]
     c34:	4314      	orrs	r4, r2
     c36:	791a      	ldrb	r2, [r3, #4]
     c38:	799b      	ldrb	r3, [r3, #6]
     c3a:	9203      	str	r2, [sp, #12]
     c3c:	021b      	lsls	r3, r3, #8
     c3e:	430b      	orrs	r3, r1
     c40:	001a      	movs	r2, r3
     c42:	7883      	ldrb	r3, [r0, #2]
     c44:	7907      	ldrb	r7, [r0, #4]
     c46:	041b      	lsls	r3, r3, #16
     c48:	4313      	orrs	r3, r2
     c4a:	78c2      	ldrb	r2, [r0, #3]
     c4c:	0039      	movs	r1, r7
     c4e:	0612      	lsls	r2, r2, #24
     c50:	431a      	orrs	r2, r3
     c52:	9204      	str	r2, [sp, #16]
     c54:	9b03      	ldr	r3, [sp, #12]
     c56:	0022      	movs	r2, r4
     c58:	9804      	ldr	r0, [sp, #16]
     c5a:	4e59      	ldr	r6, [pc, #356]	; (dc0 <write_cc1101_status_regersters+0x3d0>)
     c5c:	47b0      	blx	r6
    byteOut(spiSCK, spiMOSI, RF_FREQ1);
     c5e:	23b3      	movs	r3, #179	; 0xb3
     c60:	0022      	movs	r2, r4
     c62:	9300      	str	r3, [sp, #0]
     c64:	9804      	ldr	r0, [sp, #16]
     c66:	9b03      	ldr	r3, [sp, #12]
     c68:	0039      	movs	r1, r7
     c6a:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c6c:	2310      	movs	r3, #16
     c6e:	61ab      	str	r3, [r5, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c70:	616b      	str	r3, [r5, #20]
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
     c72:	18db      	adds	r3, r3, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c74:	9a02      	ldr	r2, [sp, #8]
     c76:	4d50      	ldr	r5, [pc, #320]	; (db8 <write_cc1101_status_regersters+0x3c8>)
     c78:	6a12      	ldr	r2, [r2, #32]
     c7a:	421a      	tst	r2, r3
     c7c:	d1fa      	bne.n	c74 <write_cc1101_status_regersters+0x284>
    byteOut(spiSCK, spiMOSI, CC1101_FREQ0);
     c7e:	230f      	movs	r3, #15
     c80:	4c4e      	ldr	r4, [pc, #312]	; (dbc <write_cc1101_status_regersters+0x3cc>)
     c82:	9300      	str	r3, [sp, #0]
     c84:	7863      	ldrb	r3, [r4, #1]
     c86:	7821      	ldrb	r1, [r4, #0]
     c88:	021b      	lsls	r3, r3, #8
     c8a:	430b      	orrs	r3, r1
     c8c:	001a      	movs	r2, r3
     c8e:	78a3      	ldrb	r3, [r4, #2]
     c90:	7961      	ldrb	r1, [r4, #5]
     c92:	041b      	lsls	r3, r3, #16
     c94:	4313      	orrs	r3, r2
     c96:	78e2      	ldrb	r2, [r4, #3]
     c98:	7a67      	ldrb	r7, [r4, #9]
     c9a:	0612      	lsls	r2, r2, #24
     c9c:	431a      	orrs	r2, r3
     c9e:	7923      	ldrb	r3, [r4, #4]
     ca0:	9203      	str	r2, [sp, #12]
     ca2:	9304      	str	r3, [sp, #16]
     ca4:	79a3      	ldrb	r3, [r4, #6]
     ca6:	4e46      	ldr	r6, [pc, #280]	; (dc0 <write_cc1101_status_regersters+0x3d0>)
     ca8:	021b      	lsls	r3, r3, #8
     caa:	430b      	orrs	r3, r1
     cac:	001a      	movs	r2, r3
     cae:	79e3      	ldrb	r3, [r4, #7]
     cb0:	0039      	movs	r1, r7
     cb2:	041b      	lsls	r3, r3, #16
     cb4:	4313      	orrs	r3, r2
     cb6:	7a22      	ldrb	r2, [r4, #8]
     cb8:	0612      	lsls	r2, r2, #24
     cba:	431a      	orrs	r2, r3
     cbc:	9205      	str	r2, [sp, #20]
     cbe:	9b04      	ldr	r3, [sp, #16]
     cc0:	9a03      	ldr	r2, [sp, #12]
     cc2:	9805      	ldr	r0, [sp, #20]
     cc4:	47b0      	blx	r6
    byteOut(spiSCK, spiMOSI, RF_FREQ0);
     cc6:	2372      	movs	r3, #114	; 0x72
     cc8:	9a03      	ldr	r2, [sp, #12]
     cca:	9300      	str	r3, [sp, #0]
     ccc:	9805      	ldr	r0, [sp, #20]
     cce:	9b04      	ldr	r3, [sp, #16]
     cd0:	0039      	movs	r1, r7
     cd2:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cd4:	2310      	movs	r3, #16
     cd6:	61ab      	str	r3, [r5, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cd8:	616b      	str	r3, [r5, #20]
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
     cda:	18db      	adds	r3, r3, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     cdc:	9a02      	ldr	r2, [sp, #8]
     cde:	4e36      	ldr	r6, [pc, #216]	; (db8 <write_cc1101_status_regersters+0x3c8>)
     ce0:	6a12      	ldr	r2, [r2, #32]
     ce2:	421a      	tst	r2, r3
     ce4:	d1fa      	bne.n	cdc <write_cc1101_status_regersters+0x2ec>
    byteOut(spiSCK, spiMOSI, CC1101_MDMCFG4);
     ce6:	2710      	movs	r7, #16
     ce8:	78a5      	ldrb	r5, [r4, #2]
     cea:	7863      	ldrb	r3, [r4, #1]
     cec:	40bd      	lsls	r5, r7
     cee:	7821      	ldrb	r1, [r4, #0]
     cf0:	021b      	lsls	r3, r3, #8
     cf2:	430b      	orrs	r3, r1
     cf4:	001a      	movs	r2, r3
     cf6:	002b      	movs	r3, r5
     cf8:	78e5      	ldrb	r5, [r4, #3]
     cfa:	4313      	orrs	r3, r2
     cfc:	062d      	lsls	r5, r5, #24
     cfe:	431d      	orrs	r5, r3
     d00:	7923      	ldrb	r3, [r4, #4]
     d02:	7961      	ldrb	r1, [r4, #5]
     d04:	9303      	str	r3, [sp, #12]
     d06:	79a3      	ldrb	r3, [r4, #6]
     d08:	9700      	str	r7, [sp, #0]
     d0a:	021b      	lsls	r3, r3, #8
     d0c:	430b      	orrs	r3, r1
     d0e:	001a      	movs	r2, r3
     d10:	79e3      	ldrb	r3, [r4, #7]
     d12:	40bb      	lsls	r3, r7
     d14:	4313      	orrs	r3, r2
     d16:	7a22      	ldrb	r2, [r4, #8]
     d18:	0612      	lsls	r2, r2, #24
     d1a:	431a      	orrs	r2, r3
     d1c:	7a63      	ldrb	r3, [r4, #9]
     d1e:	9204      	str	r2, [sp, #16]
     d20:	9305      	str	r3, [sp, #20]
     d22:	002a      	movs	r2, r5
     d24:	9b03      	ldr	r3, [sp, #12]
     d26:	9804      	ldr	r0, [sp, #16]
     d28:	9905      	ldr	r1, [sp, #20]
     d2a:	4c25      	ldr	r4, [pc, #148]	; (dc0 <write_cc1101_status_regersters+0x3d0>)
     d2c:	47a0      	blx	r4
    byteOut(spiSCK, spiMOSI, RF_MDMCFG4);
     d2e:	23f5      	movs	r3, #245	; 0xf5
     d30:	002a      	movs	r2, r5
     d32:	9300      	str	r3, [sp, #0]
     d34:	9804      	ldr	r0, [sp, #16]
     d36:	9b03      	ldr	r3, [sp, #12]
     d38:	9905      	ldr	r1, [sp, #20]
     d3a:	47a0      	blx	r4
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
     d3c:	2320      	movs	r3, #32
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d3e:	61b7      	str	r7, [r6, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d40:	6177      	str	r7, [r6, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d42:	9a02      	ldr	r2, [sp, #8]
     d44:	4d1c      	ldr	r5, [pc, #112]	; (db8 <write_cc1101_status_regersters+0x3c8>)
     d46:	6a12      	ldr	r2, [r2, #32]
     d48:	421a      	tst	r2, r3
     d4a:	d1fa      	bne.n	d42 <write_cc1101_status_regersters+0x352>
    byteOut(spiSCK, spiMOSI, CC1101_MDMCFG3);
     d4c:	2311      	movs	r3, #17
     d4e:	4c1b      	ldr	r4, [pc, #108]	; (dbc <write_cc1101_status_regersters+0x3cc>)
     d50:	9300      	str	r3, [sp, #0]
     d52:	7863      	ldrb	r3, [r4, #1]
     d54:	7821      	ldrb	r1, [r4, #0]
     d56:	021b      	lsls	r3, r3, #8
     d58:	430b      	orrs	r3, r1
     d5a:	001a      	movs	r2, r3
     d5c:	78a3      	ldrb	r3, [r4, #2]
     d5e:	7961      	ldrb	r1, [r4, #5]
     d60:	041b      	lsls	r3, r3, #16
     d62:	4313      	orrs	r3, r2
     d64:	78e2      	ldrb	r2, [r4, #3]
     d66:	7a67      	ldrb	r7, [r4, #9]
     d68:	0612      	lsls	r2, r2, #24
     d6a:	431a      	orrs	r2, r3
     d6c:	7923      	ldrb	r3, [r4, #4]
     d6e:	9203      	str	r2, [sp, #12]
     d70:	9304      	str	r3, [sp, #16]
     d72:	79a3      	ldrb	r3, [r4, #6]
     d74:	4e12      	ldr	r6, [pc, #72]	; (dc0 <write_cc1101_status_regersters+0x3d0>)
     d76:	021b      	lsls	r3, r3, #8
     d78:	430b      	orrs	r3, r1
     d7a:	001a      	movs	r2, r3
     d7c:	79e3      	ldrb	r3, [r4, #7]
     d7e:	0039      	movs	r1, r7
     d80:	041b      	lsls	r3, r3, #16
     d82:	4313      	orrs	r3, r2
     d84:	7a22      	ldrb	r2, [r4, #8]
     d86:	0612      	lsls	r2, r2, #24
     d88:	431a      	orrs	r2, r3
     d8a:	9205      	str	r2, [sp, #20]
     d8c:	9b04      	ldr	r3, [sp, #16]
     d8e:	9a03      	ldr	r2, [sp, #12]
     d90:	9805      	ldr	r0, [sp, #20]
     d92:	47b0      	blx	r6
    byteOut(spiSCK, spiMOSI, RF_MDMCFG3);
     d94:	2383      	movs	r3, #131	; 0x83
     d96:	9a03      	ldr	r2, [sp, #12]
     d98:	9300      	str	r3, [sp, #0]
     d9a:	9805      	ldr	r0, [sp, #20]
     d9c:	9b04      	ldr	r3, [sp, #16]
     d9e:	0039      	movs	r1, r7
     da0:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     da2:	2310      	movs	r3, #16
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
     da4:	2220      	movs	r2, #32
     da6:	61ab      	str	r3, [r5, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     da8:	616b      	str	r3, [r5, #20]
     daa:	0023      	movs	r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     dac:	9902      	ldr	r1, [sp, #8]
     dae:	4d02      	ldr	r5, [pc, #8]	; (db8 <write_cc1101_status_regersters+0x3c8>)
     db0:	6a09      	ldr	r1, [r1, #32]
     db2:	4211      	tst	r1, r2
     db4:	d1fa      	bne.n	dac <write_cc1101_status_regersters+0x3bc>
     db6:	e005      	b.n	dc4 <write_cc1101_status_regersters+0x3d4>
     db8:	41004400 	.word	0x41004400
     dbc:	000019fb 	.word	0x000019fb
     dc0:	00000711 	.word	0x00000711
    byteOut(spiSCK, spiMOSI, CC1101_MDMCFG2);
     dc4:	2212      	movs	r2, #18
     dc6:	9200      	str	r2, [sp, #0]
     dc8:	785a      	ldrb	r2, [r3, #1]
     dca:	781e      	ldrb	r6, [r3, #0]
     dcc:	789c      	ldrb	r4, [r3, #2]
     dce:	0212      	lsls	r2, r2, #8
     dd0:	4332      	orrs	r2, r6
     dd2:	0424      	lsls	r4, r4, #16
     dd4:	0011      	movs	r1, r2
     dd6:	0022      	movs	r2, r4
     dd8:	78dc      	ldrb	r4, [r3, #3]
     dda:	430a      	orrs	r2, r1
     ddc:	0624      	lsls	r4, r4, #24
     dde:	1d58      	adds	r0, r3, #5
     de0:	7959      	ldrb	r1, [r3, #5]
     de2:	4314      	orrs	r4, r2
     de4:	791a      	ldrb	r2, [r3, #4]
     de6:	799b      	ldrb	r3, [r3, #6]
     de8:	9203      	str	r2, [sp, #12]
     dea:	021b      	lsls	r3, r3, #8
     dec:	430b      	orrs	r3, r1
     dee:	001a      	movs	r2, r3
     df0:	7883      	ldrb	r3, [r0, #2]
     df2:	7907      	ldrb	r7, [r0, #4]
     df4:	041b      	lsls	r3, r3, #16
     df6:	4313      	orrs	r3, r2
     df8:	78c2      	ldrb	r2, [r0, #3]
     dfa:	0039      	movs	r1, r7
     dfc:	0612      	lsls	r2, r2, #24
     dfe:	431a      	orrs	r2, r3
     e00:	9204      	str	r2, [sp, #16]
     e02:	9b03      	ldr	r3, [sp, #12]
     e04:	0022      	movs	r2, r4
     e06:	9804      	ldr	r0, [sp, #16]
     e08:	4ef2      	ldr	r6, [pc, #968]	; (11d4 <write_cc1101_status_regersters+0x7e4>)
     e0a:	47b0      	blx	r6
    byteOut(spiSCK, spiMOSI, RF_MDMCFG2);
     e0c:	2313      	movs	r3, #19
     e0e:	0022      	movs	r2, r4
     e10:	9300      	str	r3, [sp, #0]
     e12:	9804      	ldr	r0, [sp, #16]
     e14:	9b03      	ldr	r3, [sp, #12]
     e16:	0039      	movs	r1, r7
     e18:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     e1a:	2310      	movs	r3, #16
     e1c:	61ab      	str	r3, [r5, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e1e:	616b      	str	r3, [r5, #20]
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
     e20:	18db      	adds	r3, r3, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     e22:	9a02      	ldr	r2, [sp, #8]
     e24:	4dec      	ldr	r5, [pc, #944]	; (11d8 <write_cc1101_status_regersters+0x7e8>)
     e26:	6a12      	ldr	r2, [r2, #32]
     e28:	421a      	tst	r2, r3
     e2a:	d1fa      	bne.n	e22 <write_cc1101_status_regersters+0x432>
    byteOut(spiSCK, spiMOSI, CC1101_DEVIATN);
     e2c:	2315      	movs	r3, #21
     e2e:	4ceb      	ldr	r4, [pc, #940]	; (11dc <write_cc1101_status_regersters+0x7ec>)
     e30:	9300      	str	r3, [sp, #0]
     e32:	7863      	ldrb	r3, [r4, #1]
     e34:	7821      	ldrb	r1, [r4, #0]
     e36:	021b      	lsls	r3, r3, #8
     e38:	430b      	orrs	r3, r1
     e3a:	001a      	movs	r2, r3
     e3c:	78a3      	ldrb	r3, [r4, #2]
     e3e:	7961      	ldrb	r1, [r4, #5]
     e40:	041b      	lsls	r3, r3, #16
     e42:	4313      	orrs	r3, r2
     e44:	78e2      	ldrb	r2, [r4, #3]
     e46:	7a67      	ldrb	r7, [r4, #9]
     e48:	0612      	lsls	r2, r2, #24
     e4a:	431a      	orrs	r2, r3
     e4c:	7923      	ldrb	r3, [r4, #4]
     e4e:	9203      	str	r2, [sp, #12]
     e50:	9304      	str	r3, [sp, #16]
     e52:	79a3      	ldrb	r3, [r4, #6]
     e54:	4edf      	ldr	r6, [pc, #892]	; (11d4 <write_cc1101_status_regersters+0x7e4>)
     e56:	021b      	lsls	r3, r3, #8
     e58:	430b      	orrs	r3, r1
     e5a:	001a      	movs	r2, r3
     e5c:	79e3      	ldrb	r3, [r4, #7]
     e5e:	0039      	movs	r1, r7
     e60:	041b      	lsls	r3, r3, #16
     e62:	4313      	orrs	r3, r2
     e64:	7a22      	ldrb	r2, [r4, #8]
     e66:	0612      	lsls	r2, r2, #24
     e68:	431a      	orrs	r2, r3
     e6a:	9205      	str	r2, [sp, #20]
     e6c:	9b04      	ldr	r3, [sp, #16]
     e6e:	9a03      	ldr	r2, [sp, #12]
     e70:	9805      	ldr	r0, [sp, #20]
     e72:	47b0      	blx	r6
    byteOut(spiSCK, spiMOSI, RF_DEVIATN);
     e74:	2315      	movs	r3, #21
     e76:	9a03      	ldr	r2, [sp, #12]
     e78:	9300      	str	r3, [sp, #0]
     e7a:	9805      	ldr	r0, [sp, #20]
     e7c:	9b04      	ldr	r3, [sp, #16]
     e7e:	0039      	movs	r1, r7
     e80:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     e82:	2310      	movs	r3, #16
    cc1101_deselect();
	
    cc1101_select();
    while(pinRead(spiMISO) == true);
     e84:	2220      	movs	r2, #32
     e86:	61ab      	str	r3, [r5, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e88:	616b      	str	r3, [r5, #20]
     e8a:	0023      	movs	r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     e8c:	9902      	ldr	r1, [sp, #8]
     e8e:	4dd2      	ldr	r5, [pc, #840]	; (11d8 <write_cc1101_status_regersters+0x7e8>)
     e90:	6a09      	ldr	r1, [r1, #32]
     e92:	4211      	tst	r1, r2
     e94:	d1fa      	bne.n	e8c <write_cc1101_status_regersters+0x49c>
    byteOut(spiSCK, spiMOSI, CC1101_MCSM1);
     e96:	2217      	movs	r2, #23
     e98:	9200      	str	r2, [sp, #0]
     e9a:	785a      	ldrb	r2, [r3, #1]
     e9c:	781e      	ldrb	r6, [r3, #0]
     e9e:	789c      	ldrb	r4, [r3, #2]
     ea0:	0212      	lsls	r2, r2, #8
     ea2:	4332      	orrs	r2, r6
     ea4:	0424      	lsls	r4, r4, #16
     ea6:	0011      	movs	r1, r2
     ea8:	0022      	movs	r2, r4
     eaa:	78dc      	ldrb	r4, [r3, #3]
     eac:	430a      	orrs	r2, r1
     eae:	0624      	lsls	r4, r4, #24
     eb0:	1d58      	adds	r0, r3, #5
     eb2:	7959      	ldrb	r1, [r3, #5]
     eb4:	4314      	orrs	r4, r2
     eb6:	791a      	ldrb	r2, [r3, #4]
     eb8:	799b      	ldrb	r3, [r3, #6]
     eba:	9203      	str	r2, [sp, #12]
     ebc:	021b      	lsls	r3, r3, #8
     ebe:	430b      	orrs	r3, r1
     ec0:	001a      	movs	r2, r3
     ec2:	7883      	ldrb	r3, [r0, #2]
     ec4:	7907      	ldrb	r7, [r0, #4]
     ec6:	041b      	lsls	r3, r3, #16
     ec8:	4313      	orrs	r3, r2
     eca:	78c2      	ldrb	r2, [r0, #3]
     ecc:	0039      	movs	r1, r7
     ece:	0612      	lsls	r2, r2, #24
     ed0:	431a      	orrs	r2, r3
     ed2:	9204      	str	r2, [sp, #16]
     ed4:	9b03      	ldr	r3, [sp, #12]
     ed6:	0022      	movs	r2, r4
     ed8:	9804      	ldr	r0, [sp, #16]
     eda:	4ebe      	ldr	r6, [pc, #760]	; (11d4 <write_cc1101_status_regersters+0x7e4>)
     edc:	47b0      	blx	r6
    byteOut(spiSCK, spiMOSI, RF_MCSM0);
     ede:	2318      	movs	r3, #24
     ee0:	0022      	movs	r2, r4
     ee2:	9300      	str	r3, [sp, #0]
     ee4:	9804      	ldr	r0, [sp, #16]
     ee6:	9b03      	ldr	r3, [sp, #12]
     ee8:	0039      	movs	r1, r7
     eea:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     eec:	2310      	movs	r3, #16
     eee:	61ab      	str	r3, [r5, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ef0:	616b      	str	r3, [r5, #20]
    cc1101_deselect();


    cc1101_select();
    while(pinRead(spiMISO) == true);
     ef2:	18db      	adds	r3, r3, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     ef4:	9a02      	ldr	r2, [sp, #8]
     ef6:	4db8      	ldr	r5, [pc, #736]	; (11d8 <write_cc1101_status_regersters+0x7e8>)
     ef8:	6a12      	ldr	r2, [r2, #32]
     efa:	421a      	tst	r2, r3
     efc:	d1fa      	bne.n	ef4 <write_cc1101_status_regersters+0x504>
    byteOut(spiSCK, spiMOSI, CC1101_MCSM0);
     efe:	2318      	movs	r3, #24
     f00:	4cb6      	ldr	r4, [pc, #728]	; (11dc <write_cc1101_status_regersters+0x7ec>)
     f02:	9300      	str	r3, [sp, #0]
     f04:	7863      	ldrb	r3, [r4, #1]
     f06:	7821      	ldrb	r1, [r4, #0]
     f08:	021b      	lsls	r3, r3, #8
     f0a:	430b      	orrs	r3, r1
     f0c:	001a      	movs	r2, r3
     f0e:	78a3      	ldrb	r3, [r4, #2]
     f10:	7961      	ldrb	r1, [r4, #5]
     f12:	041b      	lsls	r3, r3, #16
     f14:	4313      	orrs	r3, r2
     f16:	78e2      	ldrb	r2, [r4, #3]
     f18:	7a67      	ldrb	r7, [r4, #9]
     f1a:	0612      	lsls	r2, r2, #24
     f1c:	431a      	orrs	r2, r3
     f1e:	7923      	ldrb	r3, [r4, #4]
     f20:	9203      	str	r2, [sp, #12]
     f22:	9304      	str	r3, [sp, #16]
     f24:	79a3      	ldrb	r3, [r4, #6]
     f26:	4eab      	ldr	r6, [pc, #684]	; (11d4 <write_cc1101_status_regersters+0x7e4>)
     f28:	021b      	lsls	r3, r3, #8
     f2a:	430b      	orrs	r3, r1
     f2c:	001a      	movs	r2, r3
     f2e:	79e3      	ldrb	r3, [r4, #7]
     f30:	0039      	movs	r1, r7
     f32:	041b      	lsls	r3, r3, #16
     f34:	4313      	orrs	r3, r2
     f36:	7a22      	ldrb	r2, [r4, #8]
     f38:	0612      	lsls	r2, r2, #24
     f3a:	431a      	orrs	r2, r3
     f3c:	9205      	str	r2, [sp, #20]
     f3e:	9b04      	ldr	r3, [sp, #16]
     f40:	9a03      	ldr	r2, [sp, #12]
     f42:	9805      	ldr	r0, [sp, #20]
     f44:	47b0      	blx	r6
    byteOut(spiSCK, spiMOSI, RF_MCSM0);
     f46:	2318      	movs	r3, #24
     f48:	9a03      	ldr	r2, [sp, #12]
     f4a:	9300      	str	r3, [sp, #0]
     f4c:	9805      	ldr	r0, [sp, #20]
     f4e:	9b04      	ldr	r3, [sp, #16]
     f50:	0039      	movs	r1, r7
     f52:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     f54:	2310      	movs	r3, #16
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
     f56:	2220      	movs	r2, #32
     f58:	61ab      	str	r3, [r5, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f5a:	616b      	str	r3, [r5, #20]
     f5c:	0023      	movs	r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f5e:	9902      	ldr	r1, [sp, #8]
     f60:	4d9d      	ldr	r5, [pc, #628]	; (11d8 <write_cc1101_status_regersters+0x7e8>)
     f62:	6a09      	ldr	r1, [r1, #32]
     f64:	4211      	tst	r1, r2
     f66:	d1fa      	bne.n	f5e <write_cc1101_status_regersters+0x56e>
    byteOut(spiSCK, spiMOSI, CC1101_FOCCFG);
     f68:	2219      	movs	r2, #25
     f6a:	9200      	str	r2, [sp, #0]
     f6c:	785a      	ldrb	r2, [r3, #1]
     f6e:	781e      	ldrb	r6, [r3, #0]
     f70:	789c      	ldrb	r4, [r3, #2]
     f72:	0212      	lsls	r2, r2, #8
     f74:	4332      	orrs	r2, r6
     f76:	0424      	lsls	r4, r4, #16
     f78:	0011      	movs	r1, r2
     f7a:	0022      	movs	r2, r4
     f7c:	78dc      	ldrb	r4, [r3, #3]
     f7e:	430a      	orrs	r2, r1
     f80:	0624      	lsls	r4, r4, #24
     f82:	1d58      	adds	r0, r3, #5
     f84:	7959      	ldrb	r1, [r3, #5]
     f86:	4314      	orrs	r4, r2
     f88:	791a      	ldrb	r2, [r3, #4]
     f8a:	799b      	ldrb	r3, [r3, #6]
     f8c:	9203      	str	r2, [sp, #12]
     f8e:	021b      	lsls	r3, r3, #8
     f90:	430b      	orrs	r3, r1
     f92:	001a      	movs	r2, r3
     f94:	7883      	ldrb	r3, [r0, #2]
     f96:	7907      	ldrb	r7, [r0, #4]
     f98:	041b      	lsls	r3, r3, #16
     f9a:	4313      	orrs	r3, r2
     f9c:	78c2      	ldrb	r2, [r0, #3]
     f9e:	0039      	movs	r1, r7
     fa0:	0612      	lsls	r2, r2, #24
     fa2:	431a      	orrs	r2, r3
     fa4:	9204      	str	r2, [sp, #16]
     fa6:	9b03      	ldr	r3, [sp, #12]
     fa8:	0022      	movs	r2, r4
     faa:	9804      	ldr	r0, [sp, #16]
     fac:	4e89      	ldr	r6, [pc, #548]	; (11d4 <write_cc1101_status_regersters+0x7e4>)
     fae:	47b0      	blx	r6
    byteOut(spiSCK, spiMOSI, RF_FOCCFG);
     fb0:	2316      	movs	r3, #22
     fb2:	0022      	movs	r2, r4
     fb4:	9300      	str	r3, [sp, #0]
     fb6:	9804      	ldr	r0, [sp, #16]
     fb8:	9b03      	ldr	r3, [sp, #12]
     fba:	0039      	movs	r1, r7
     fbc:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     fbe:	2310      	movs	r3, #16
     fc0:	61ab      	str	r3, [r5, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     fc2:	616b      	str	r3, [r5, #20]
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
     fc4:	18db      	adds	r3, r3, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     fc6:	9a02      	ldr	r2, [sp, #8]
     fc8:	4d83      	ldr	r5, [pc, #524]	; (11d8 <write_cc1101_status_regersters+0x7e8>)
     fca:	6a12      	ldr	r2, [r2, #32]
     fcc:	421a      	tst	r2, r3
     fce:	d1fa      	bne.n	fc6 <write_cc1101_status_regersters+0x5d6>
    byteOut(spiSCK, spiMOSI, CC1101_WORCTRL);
     fd0:	2320      	movs	r3, #32
     fd2:	4c82      	ldr	r4, [pc, #520]	; (11dc <write_cc1101_status_regersters+0x7ec>)
     fd4:	9300      	str	r3, [sp, #0]
     fd6:	7863      	ldrb	r3, [r4, #1]
     fd8:	7821      	ldrb	r1, [r4, #0]
     fda:	021b      	lsls	r3, r3, #8
     fdc:	430b      	orrs	r3, r1
     fde:	001a      	movs	r2, r3
     fe0:	78a3      	ldrb	r3, [r4, #2]
     fe2:	7961      	ldrb	r1, [r4, #5]
     fe4:	041b      	lsls	r3, r3, #16
     fe6:	4313      	orrs	r3, r2
     fe8:	78e2      	ldrb	r2, [r4, #3]
     fea:	7a67      	ldrb	r7, [r4, #9]
     fec:	0612      	lsls	r2, r2, #24
     fee:	431a      	orrs	r2, r3
     ff0:	7923      	ldrb	r3, [r4, #4]
     ff2:	9202      	str	r2, [sp, #8]
     ff4:	9303      	str	r3, [sp, #12]
     ff6:	79a3      	ldrb	r3, [r4, #6]
     ff8:	4e76      	ldr	r6, [pc, #472]	; (11d4 <write_cc1101_status_regersters+0x7e4>)
     ffa:	021b      	lsls	r3, r3, #8
     ffc:	430b      	orrs	r3, r1
     ffe:	001a      	movs	r2, r3
    1000:	79e3      	ldrb	r3, [r4, #7]
    1002:	0039      	movs	r1, r7
    1004:	041b      	lsls	r3, r3, #16
    1006:	4313      	orrs	r3, r2
    1008:	7a22      	ldrb	r2, [r4, #8]
    100a:	0612      	lsls	r2, r2, #24
    100c:	431a      	orrs	r2, r3
    100e:	9204      	str	r2, [sp, #16]
    1010:	9b03      	ldr	r3, [sp, #12]
    1012:	9a02      	ldr	r2, [sp, #8]
    1014:	9804      	ldr	r0, [sp, #16]
    1016:	47b0      	blx	r6
    byteOut(spiSCK, spiMOSI, RF_WORCTRL);
    1018:	23fb      	movs	r3, #251	; 0xfb
    101a:	9a02      	ldr	r2, [sp, #8]
    101c:	9300      	str	r3, [sp, #0]
    101e:	9804      	ldr	r0, [sp, #16]
    1020:	9b03      	ldr	r3, [sp, #12]
    1022:	0039      	movs	r1, r7
    1024:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1026:	2310      	movs	r3, #16
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
    1028:	2220      	movs	r2, #32
    102a:	61ab      	str	r3, [r5, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    102c:	616b      	str	r3, [r5, #20]
    102e:	0023      	movs	r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
    1030:	6a29      	ldr	r1, [r5, #32]
    1032:	4211      	tst	r1, r2
    1034:	d1fc      	bne.n	1030 <write_cc1101_status_regersters+0x640>
    byteOut(spiSCK, spiMOSI, CC1101_FSCAL3);
    1036:	2223      	movs	r2, #35	; 0x23
    1038:	9200      	str	r2, [sp, #0]
    103a:	785a      	ldrb	r2, [r3, #1]
    103c:	781d      	ldrb	r5, [r3, #0]
    103e:	789c      	ldrb	r4, [r3, #2]
    1040:	0212      	lsls	r2, r2, #8
    1042:	432a      	orrs	r2, r5
    1044:	0424      	lsls	r4, r4, #16
    1046:	0011      	movs	r1, r2
    1048:	0022      	movs	r2, r4
    104a:	1d58      	adds	r0, r3, #5
    104c:	791f      	ldrb	r7, [r3, #4]
    104e:	430a      	orrs	r2, r1
    1050:	78dc      	ldrb	r4, [r3, #3]
    1052:	7959      	ldrb	r1, [r3, #5]
    1054:	799b      	ldrb	r3, [r3, #6]
    1056:	0624      	lsls	r4, r4, #24
    1058:	021b      	lsls	r3, r3, #8
    105a:	430b      	orrs	r3, r1
    105c:	4314      	orrs	r4, r2
    105e:	001a      	movs	r2, r3
    1060:	7883      	ldrb	r3, [r0, #2]
    1062:	7906      	ldrb	r6, [r0, #4]
    1064:	041b      	lsls	r3, r3, #16
    1066:	4313      	orrs	r3, r2
    1068:	78c2      	ldrb	r2, [r0, #3]
    106a:	0031      	movs	r1, r6
    106c:	0612      	lsls	r2, r2, #24
    106e:	431a      	orrs	r2, r3
    1070:	9202      	str	r2, [sp, #8]
    1072:	003b      	movs	r3, r7
    1074:	0022      	movs	r2, r4
    1076:	9802      	ldr	r0, [sp, #8]
    1078:	4d56      	ldr	r5, [pc, #344]	; (11d4 <write_cc1101_status_regersters+0x7e4>)
    107a:	47a8      	blx	r5
    byteOut(spiSCK, spiMOSI, RF_FSCAL3);
    107c:	23e9      	movs	r3, #233	; 0xe9
    107e:	0022      	movs	r2, r4
    1080:	9300      	str	r3, [sp, #0]
    1082:	9802      	ldr	r0, [sp, #8]
    1084:	003b      	movs	r3, r7
    1086:	0031      	movs	r1, r6
    1088:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    108a:	2310      	movs	r3, #16
    108c:	4a52      	ldr	r2, [pc, #328]	; (11d8 <write_cc1101_status_regersters+0x7e8>)
    108e:	6193      	str	r3, [r2, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1090:	6153      	str	r3, [r2, #20]
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
    1092:	18db      	adds	r3, r3, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
    1094:	4d50      	ldr	r5, [pc, #320]	; (11d8 <write_cc1101_status_regersters+0x7e8>)
    1096:	6a2a      	ldr	r2, [r5, #32]
    1098:	421a      	tst	r2, r3
    109a:	d1fb      	bne.n	1094 <write_cc1101_status_regersters+0x6a4>
    byteOut(spiSCK, spiMOSI, CC1101_FSCAL2);
    109c:	2324      	movs	r3, #36	; 0x24
    109e:	4c4f      	ldr	r4, [pc, #316]	; (11dc <write_cc1101_status_regersters+0x7ec>)
    10a0:	9300      	str	r3, [sp, #0]
    10a2:	7863      	ldrb	r3, [r4, #1]
    10a4:	7821      	ldrb	r1, [r4, #0]
    10a6:	021b      	lsls	r3, r3, #8
    10a8:	430b      	orrs	r3, r1
    10aa:	001a      	movs	r2, r3
    10ac:	78a3      	ldrb	r3, [r4, #2]
    10ae:	7961      	ldrb	r1, [r4, #5]
    10b0:	041b      	lsls	r3, r3, #16
    10b2:	4313      	orrs	r3, r2
    10b4:	78e2      	ldrb	r2, [r4, #3]
    10b6:	7a67      	ldrb	r7, [r4, #9]
    10b8:	0612      	lsls	r2, r2, #24
    10ba:	431a      	orrs	r2, r3
    10bc:	7923      	ldrb	r3, [r4, #4]
    10be:	9202      	str	r2, [sp, #8]
    10c0:	9303      	str	r3, [sp, #12]
    10c2:	79a3      	ldrb	r3, [r4, #6]
    10c4:	4e43      	ldr	r6, [pc, #268]	; (11d4 <write_cc1101_status_regersters+0x7e4>)
    10c6:	021b      	lsls	r3, r3, #8
    10c8:	430b      	orrs	r3, r1
    10ca:	001a      	movs	r2, r3
    10cc:	79e3      	ldrb	r3, [r4, #7]
    10ce:	0039      	movs	r1, r7
    10d0:	041b      	lsls	r3, r3, #16
    10d2:	4313      	orrs	r3, r2
    10d4:	7a22      	ldrb	r2, [r4, #8]
    10d6:	0612      	lsls	r2, r2, #24
    10d8:	431a      	orrs	r2, r3
    10da:	9204      	str	r2, [sp, #16]
    10dc:	9b03      	ldr	r3, [sp, #12]
    10de:	9a02      	ldr	r2, [sp, #8]
    10e0:	9804      	ldr	r0, [sp, #16]
    10e2:	47b0      	blx	r6
    byteOut(spiSCK, spiMOSI, RF_FSCAL2);
    10e4:	232a      	movs	r3, #42	; 0x2a
    10e6:	9a02      	ldr	r2, [sp, #8]
    10e8:	9300      	str	r3, [sp, #0]
    10ea:	9804      	ldr	r0, [sp, #16]
    10ec:	9b03      	ldr	r3, [sp, #12]
    10ee:	0039      	movs	r1, r7
    10f0:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    10f2:	2310      	movs	r3, #16
    10f4:	61ab      	str	r3, [r5, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    10f6:	616b      	str	r3, [r5, #20]
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
    10f8:	18db      	adds	r3, r3, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
    10fa:	4e37      	ldr	r6, [pc, #220]	; (11d8 <write_cc1101_status_regersters+0x7e8>)
    10fc:	6a32      	ldr	r2, [r6, #32]
    10fe:	401a      	ands	r2, r3
    1100:	9202      	str	r2, [sp, #8]
    1102:	d1fa      	bne.n	10fa <write_cc1101_status_regersters+0x70a>
    byteOut(spiSCK, spiMOSI, CC1101_FSCAL1);
    1104:	2325      	movs	r3, #37	; 0x25
    1106:	9300      	str	r3, [sp, #0]
    1108:	7863      	ldrb	r3, [r4, #1]
    110a:	7821      	ldrb	r1, [r4, #0]
    110c:	78a5      	ldrb	r5, [r4, #2]
    110e:	021b      	lsls	r3, r3, #8
    1110:	430b      	orrs	r3, r1
    1112:	042d      	lsls	r5, r5, #16
    1114:	001a      	movs	r2, r3
    1116:	002b      	movs	r3, r5
    1118:	78e5      	ldrb	r5, [r4, #3]
    111a:	4313      	orrs	r3, r2
    111c:	062d      	lsls	r5, r5, #24
    111e:	431d      	orrs	r5, r3
    1120:	7923      	ldrb	r3, [r4, #4]
    1122:	7961      	ldrb	r1, [r4, #5]
    1124:	9303      	str	r3, [sp, #12]
    1126:	79a3      	ldrb	r3, [r4, #6]
    1128:	7a67      	ldrb	r7, [r4, #9]
    112a:	021b      	lsls	r3, r3, #8
    112c:	430b      	orrs	r3, r1
    112e:	001a      	movs	r2, r3
    1130:	79e3      	ldrb	r3, [r4, #7]
    1132:	0039      	movs	r1, r7
    1134:	041b      	lsls	r3, r3, #16
    1136:	4313      	orrs	r3, r2
    1138:	7a22      	ldrb	r2, [r4, #8]
    113a:	4c26      	ldr	r4, [pc, #152]	; (11d4 <write_cc1101_status_regersters+0x7e4>)
    113c:	0612      	lsls	r2, r2, #24
    113e:	431a      	orrs	r2, r3
    1140:	9204      	str	r2, [sp, #16]
    1142:	9b03      	ldr	r3, [sp, #12]
    1144:	002a      	movs	r2, r5
    1146:	9804      	ldr	r0, [sp, #16]
    1148:	47a0      	blx	r4
    byteOut(spiSCK, spiMOSI, RF_FSCAL1);
    114a:	9b02      	ldr	r3, [sp, #8]
    114c:	002a      	movs	r2, r5
    114e:	9300      	str	r3, [sp, #0]
    1150:	9804      	ldr	r0, [sp, #16]
    1152:	9b03      	ldr	r3, [sp, #12]
    1154:	0039      	movs	r1, r7
    1156:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1158:	2310      	movs	r3, #16
    115a:	61b3      	str	r3, [r6, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    115c:	6173      	str	r3, [r6, #20]
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
    115e:	18db      	adds	r3, r3, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
    1160:	4d1d      	ldr	r5, [pc, #116]	; (11d8 <write_cc1101_status_regersters+0x7e8>)
    1162:	6a2a      	ldr	r2, [r5, #32]
    1164:	421a      	tst	r2, r3
    1166:	d1fb      	bne.n	1160 <write_cc1101_status_regersters+0x770>
    byteOut(spiSCK, spiMOSI, CC1101_FSCAL0);
    1168:	2326      	movs	r3, #38	; 0x26
    116a:	4c1c      	ldr	r4, [pc, #112]	; (11dc <write_cc1101_status_regersters+0x7ec>)
    116c:	9300      	str	r3, [sp, #0]
    116e:	7863      	ldrb	r3, [r4, #1]
    1170:	7821      	ldrb	r1, [r4, #0]
    1172:	021b      	lsls	r3, r3, #8
    1174:	430b      	orrs	r3, r1
    1176:	001a      	movs	r2, r3
    1178:	78a3      	ldrb	r3, [r4, #2]
    117a:	7961      	ldrb	r1, [r4, #5]
    117c:	041b      	lsls	r3, r3, #16
    117e:	4313      	orrs	r3, r2
    1180:	78e2      	ldrb	r2, [r4, #3]
    1182:	7a67      	ldrb	r7, [r4, #9]
    1184:	0612      	lsls	r2, r2, #24
    1186:	431a      	orrs	r2, r3
    1188:	7923      	ldrb	r3, [r4, #4]
    118a:	9202      	str	r2, [sp, #8]
    118c:	9303      	str	r3, [sp, #12]
    118e:	79a3      	ldrb	r3, [r4, #6]
    1190:	4e10      	ldr	r6, [pc, #64]	; (11d4 <write_cc1101_status_regersters+0x7e4>)
    1192:	021b      	lsls	r3, r3, #8
    1194:	430b      	orrs	r3, r1
    1196:	001a      	movs	r2, r3
    1198:	79e3      	ldrb	r3, [r4, #7]
    119a:	0039      	movs	r1, r7
    119c:	041b      	lsls	r3, r3, #16
    119e:	4313      	orrs	r3, r2
    11a0:	7a22      	ldrb	r2, [r4, #8]
    11a2:	0612      	lsls	r2, r2, #24
    11a4:	431a      	orrs	r2, r3
    11a6:	9204      	str	r2, [sp, #16]
    11a8:	9b03      	ldr	r3, [sp, #12]
    11aa:	9a02      	ldr	r2, [sp, #8]
    11ac:	9804      	ldr	r0, [sp, #16]
    11ae:	47b0      	blx	r6
    byteOut(spiSCK, spiMOSI, RF_FSCAL0);
    11b0:	231f      	movs	r3, #31
    11b2:	9a02      	ldr	r2, [sp, #8]
    11b4:	9300      	str	r3, [sp, #0]
    11b6:	9804      	ldr	r0, [sp, #16]
    11b8:	9b03      	ldr	r3, [sp, #12]
    11ba:	0039      	movs	r1, r7
    11bc:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    11be:	2310      	movs	r3, #16
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
    11c0:	2220      	movs	r2, #32
    11c2:	61ab      	str	r3, [r5, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    11c4:	616b      	str	r3, [r5, #20]
    11c6:	0023      	movs	r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
    11c8:	4d03      	ldr	r5, [pc, #12]	; (11d8 <write_cc1101_status_regersters+0x7e8>)
    11ca:	6a29      	ldr	r1, [r5, #32]
    11cc:	4211      	tst	r1, r2
    11ce:	d1fb      	bne.n	11c8 <write_cc1101_status_regersters+0x7d8>
    11d0:	e006      	b.n	11e0 <write_cc1101_status_regersters+0x7f0>
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	00000711 	.word	0x00000711
    11d8:	41004400 	.word	0x41004400
    11dc:	000019fb 	.word	0x000019fb
    byteOut(spiSCK, spiMOSI, CC1101_TEST2);
    11e0:	222c      	movs	r2, #44	; 0x2c
    11e2:	9200      	str	r2, [sp, #0]
    11e4:	785a      	ldrb	r2, [r3, #1]
    11e6:	781e      	ldrb	r6, [r3, #0]
    11e8:	789c      	ldrb	r4, [r3, #2]
    11ea:	0212      	lsls	r2, r2, #8
    11ec:	4332      	orrs	r2, r6
    11ee:	0424      	lsls	r4, r4, #16
    11f0:	0011      	movs	r1, r2
    11f2:	0022      	movs	r2, r4
    11f4:	78dc      	ldrb	r4, [r3, #3]
    11f6:	430a      	orrs	r2, r1
    11f8:	0624      	lsls	r4, r4, #24
    11fa:	1d58      	adds	r0, r3, #5
    11fc:	7959      	ldrb	r1, [r3, #5]
    11fe:	4314      	orrs	r4, r2
    1200:	791a      	ldrb	r2, [r3, #4]
    1202:	799b      	ldrb	r3, [r3, #6]
    1204:	9202      	str	r2, [sp, #8]
    1206:	021b      	lsls	r3, r3, #8
    1208:	430b      	orrs	r3, r1
    120a:	001a      	movs	r2, r3
    120c:	7883      	ldrb	r3, [r0, #2]
    120e:	7907      	ldrb	r7, [r0, #4]
    1210:	041b      	lsls	r3, r3, #16
    1212:	4313      	orrs	r3, r2
    1214:	78c2      	ldrb	r2, [r0, #3]
    1216:	0039      	movs	r1, r7
    1218:	0612      	lsls	r2, r2, #24
    121a:	431a      	orrs	r2, r3
    121c:	9203      	str	r2, [sp, #12]
    121e:	9b02      	ldr	r3, [sp, #8]
    1220:	0022      	movs	r2, r4
    1222:	9803      	ldr	r0, [sp, #12]
    1224:	4e53      	ldr	r6, [pc, #332]	; (1374 <write_cc1101_status_regersters+0x984>)
    1226:	47b0      	blx	r6
    byteOut(spiSCK, spiMOSI, RF_TEST2);
    1228:	2381      	movs	r3, #129	; 0x81
    122a:	0022      	movs	r2, r4
    122c:	9300      	str	r3, [sp, #0]
    122e:	9803      	ldr	r0, [sp, #12]
    1230:	9b02      	ldr	r3, [sp, #8]
    1232:	0039      	movs	r1, r7
    1234:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1236:	2310      	movs	r3, #16
    1238:	61ab      	str	r3, [r5, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    123a:	616b      	str	r3, [r5, #20]
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
    123c:	18db      	adds	r3, r3, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
    123e:	4d4e      	ldr	r5, [pc, #312]	; (1378 <write_cc1101_status_regersters+0x988>)
    1240:	6a2a      	ldr	r2, [r5, #32]
    1242:	421a      	tst	r2, r3
    1244:	d1fb      	bne.n	123e <write_cc1101_status_regersters+0x84e>
    byteOut(spiSCK, spiMOSI, CC1101_TEST1);
    1246:	232d      	movs	r3, #45	; 0x2d
    1248:	4c4c      	ldr	r4, [pc, #304]	; (137c <write_cc1101_status_regersters+0x98c>)
    124a:	9300      	str	r3, [sp, #0]
    124c:	7863      	ldrb	r3, [r4, #1]
    124e:	7821      	ldrb	r1, [r4, #0]
    1250:	021b      	lsls	r3, r3, #8
    1252:	430b      	orrs	r3, r1
    1254:	001a      	movs	r2, r3
    1256:	78a3      	ldrb	r3, [r4, #2]
    1258:	7961      	ldrb	r1, [r4, #5]
    125a:	041b      	lsls	r3, r3, #16
    125c:	4313      	orrs	r3, r2
    125e:	78e2      	ldrb	r2, [r4, #3]
    1260:	7a67      	ldrb	r7, [r4, #9]
    1262:	0612      	lsls	r2, r2, #24
    1264:	431a      	orrs	r2, r3
    1266:	7923      	ldrb	r3, [r4, #4]
    1268:	9202      	str	r2, [sp, #8]
    126a:	9303      	str	r3, [sp, #12]
    126c:	79a3      	ldrb	r3, [r4, #6]
    126e:	4e41      	ldr	r6, [pc, #260]	; (1374 <write_cc1101_status_regersters+0x984>)
    1270:	021b      	lsls	r3, r3, #8
    1272:	430b      	orrs	r3, r1
    1274:	001a      	movs	r2, r3
    1276:	79e3      	ldrb	r3, [r4, #7]
    1278:	0039      	movs	r1, r7
    127a:	041b      	lsls	r3, r3, #16
    127c:	4313      	orrs	r3, r2
    127e:	7a22      	ldrb	r2, [r4, #8]
    1280:	0612      	lsls	r2, r2, #24
    1282:	431a      	orrs	r2, r3
    1284:	9204      	str	r2, [sp, #16]
    1286:	9b03      	ldr	r3, [sp, #12]
    1288:	9a02      	ldr	r2, [sp, #8]
    128a:	9804      	ldr	r0, [sp, #16]
    128c:	47b0      	blx	r6
    byteOut(spiSCK, spiMOSI, RF_TEST1);
    128e:	2335      	movs	r3, #53	; 0x35
    1290:	9a02      	ldr	r2, [sp, #8]
    1292:	9300      	str	r3, [sp, #0]
    1294:	9804      	ldr	r0, [sp, #16]
    1296:	9b03      	ldr	r3, [sp, #12]
    1298:	0039      	movs	r1, r7
    129a:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    129c:	2310      	movs	r3, #16
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
    129e:	2220      	movs	r2, #32
    12a0:	61ab      	str	r3, [r5, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    12a2:	616b      	str	r3, [r5, #20]
    12a4:	0023      	movs	r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
    12a6:	4d34      	ldr	r5, [pc, #208]	; (1378 <write_cc1101_status_regersters+0x988>)
    12a8:	6a29      	ldr	r1, [r5, #32]
    12aa:	4211      	tst	r1, r2
    12ac:	d1fb      	bne.n	12a6 <write_cc1101_status_regersters+0x8b6>
    byteOut(spiSCK, spiMOSI, CC1101_TEST0);
    12ae:	222e      	movs	r2, #46	; 0x2e
    12b0:	9200      	str	r2, [sp, #0]
    12b2:	785a      	ldrb	r2, [r3, #1]
    12b4:	781e      	ldrb	r6, [r3, #0]
    12b6:	789c      	ldrb	r4, [r3, #2]
    12b8:	0212      	lsls	r2, r2, #8
    12ba:	4332      	orrs	r2, r6
    12bc:	0424      	lsls	r4, r4, #16
    12be:	0011      	movs	r1, r2
    12c0:	0022      	movs	r2, r4
    12c2:	78dc      	ldrb	r4, [r3, #3]
    12c4:	430a      	orrs	r2, r1
    12c6:	0624      	lsls	r4, r4, #24
    12c8:	1d58      	adds	r0, r3, #5
    12ca:	7959      	ldrb	r1, [r3, #5]
    12cc:	4314      	orrs	r4, r2
    12ce:	791a      	ldrb	r2, [r3, #4]
    12d0:	799b      	ldrb	r3, [r3, #6]
    12d2:	9202      	str	r2, [sp, #8]
    12d4:	021b      	lsls	r3, r3, #8
    12d6:	430b      	orrs	r3, r1
    12d8:	001a      	movs	r2, r3
    12da:	7883      	ldrb	r3, [r0, #2]
    12dc:	7907      	ldrb	r7, [r0, #4]
    12de:	041b      	lsls	r3, r3, #16
    12e0:	4313      	orrs	r3, r2
    12e2:	78c2      	ldrb	r2, [r0, #3]
    12e4:	0039      	movs	r1, r7
    12e6:	0612      	lsls	r2, r2, #24
    12e8:	431a      	orrs	r2, r3
    12ea:	9203      	str	r2, [sp, #12]
    12ec:	9b02      	ldr	r3, [sp, #8]
    12ee:	0022      	movs	r2, r4
    12f0:	9803      	ldr	r0, [sp, #12]
    12f2:	4e20      	ldr	r6, [pc, #128]	; (1374 <write_cc1101_status_regersters+0x984>)
    12f4:	47b0      	blx	r6
    byteOut(spiSCK, spiMOSI, RF_TEST0);
    12f6:	2309      	movs	r3, #9
    12f8:	0022      	movs	r2, r4
    12fa:	9300      	str	r3, [sp, #0]
    12fc:	9803      	ldr	r0, [sp, #12]
    12fe:	9b02      	ldr	r3, [sp, #8]
    1300:	0039      	movs	r1, r7
    1302:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1304:	2310      	movs	r3, #16
    1306:	61ab      	str	r3, [r5, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1308:	616b      	str	r3, [r5, #20]
    cc1101_deselect();

    cc1101_select();
    while(pinRead(spiMISO) == true);
    130a:	18db      	adds	r3, r3, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
    130c:	4a1a      	ldr	r2, [pc, #104]	; (1378 <write_cc1101_status_regersters+0x988>)
    130e:	6a12      	ldr	r2, [r2, #32]
    1310:	421a      	tst	r2, r3
    1312:	d1fb      	bne.n	130c <write_cc1101_status_regersters+0x91c>
    byteOut(spiSCK, spiMOSI, 0x3E);
    1314:	223e      	movs	r2, #62	; 0x3e
    1316:	4b19      	ldr	r3, [pc, #100]	; (137c <write_cc1101_status_regersters+0x98c>)
    1318:	9200      	str	r2, [sp, #0]
    131a:	785a      	ldrb	r2, [r3, #1]
    131c:	781d      	ldrb	r5, [r3, #0]
    131e:	789c      	ldrb	r4, [r3, #2]
    1320:	0212      	lsls	r2, r2, #8
    1322:	432a      	orrs	r2, r5
    1324:	0424      	lsls	r4, r4, #16
    1326:	0011      	movs	r1, r2
    1328:	0022      	movs	r2, r4
    132a:	1d58      	adds	r0, r3, #5
    132c:	791f      	ldrb	r7, [r3, #4]
    132e:	430a      	orrs	r2, r1
    1330:	78dc      	ldrb	r4, [r3, #3]
    1332:	7959      	ldrb	r1, [r3, #5]
    1334:	799b      	ldrb	r3, [r3, #6]
    1336:	0624      	lsls	r4, r4, #24
    1338:	021b      	lsls	r3, r3, #8
    133a:	430b      	orrs	r3, r1
    133c:	4314      	orrs	r4, r2
    133e:	001a      	movs	r2, r3
    1340:	7883      	ldrb	r3, [r0, #2]
    1342:	7906      	ldrb	r6, [r0, #4]
    1344:	041b      	lsls	r3, r3, #16
    1346:	4313      	orrs	r3, r2
    1348:	78c2      	ldrb	r2, [r0, #3]
    134a:	0031      	movs	r1, r6
    134c:	0612      	lsls	r2, r2, #24
    134e:	431a      	orrs	r2, r3
    1350:	9202      	str	r2, [sp, #8]
    1352:	003b      	movs	r3, r7
    1354:	0022      	movs	r2, r4
    1356:	9802      	ldr	r0, [sp, #8]
    1358:	4d06      	ldr	r5, [pc, #24]	; (1374 <write_cc1101_status_regersters+0x984>)
    135a:	47a8      	blx	r5
    byteOut(spiSCK, spiMOSI, 0xC0);
    135c:	23c0      	movs	r3, #192	; 0xc0
    135e:	0022      	movs	r2, r4
    1360:	9300      	str	r3, [sp, #0]
    1362:	9802      	ldr	r0, [sp, #8]
    1364:	003b      	movs	r3, r7
    1366:	0031      	movs	r1, r6
    1368:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    136a:	2210      	movs	r2, #16
    136c:	4b02      	ldr	r3, [pc, #8]	; (1378 <write_cc1101_status_regersters+0x988>)
    136e:	619a      	str	r2, [r3, #24]
    cc1101_deselect();


    1370:	b007      	add	sp, #28
    1372:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1374:	00000711 	.word	0x00000711
    1378:	41004400 	.word	0x41004400
    137c:	000019fb 	.word	0x000019fb

00001380 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1380:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
    1382:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
    1384:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1386:	4916      	ldr	r1, [pc, #88]	; (13e0 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
    1388:	4a16      	ldr	r2, [pc, #88]	; (13e4 <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    138a:	00db      	lsls	r3, r3, #3
    138c:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
    138e:	6853      	ldr	r3, [r2, #4]
    1390:	4303      	orrs	r3, r0
    1392:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1394:	4b14      	ldr	r3, [pc, #80]	; (13e8 <GclkInit+0x68>)
    1396:	681a      	ldr	r2, [r3, #0]
    1398:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
    139a:	2a3f      	cmp	r2, #63	; 0x3f
    139c:	d100      	bne.n	13a0 <GclkInit+0x20>
        coarse = 0x1f;
    139e:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
    13a0:	4b12      	ldr	r3, [pc, #72]	; (13ec <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
    13a2:	4813      	ldr	r0, [pc, #76]	; (13f0 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
    13a4:	681b      	ldr	r3, [r3, #0]
    13a6:	059b      	lsls	r3, r3, #22
    13a8:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
    13aa:	4283      	cmp	r3, r0
    13ac:	d100      	bne.n	13b0 <GclkInit+0x30>
        fine = 0x1ff;
    13ae:	4b11      	ldr	r3, [pc, #68]	; (13f4 <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    13b0:	4811      	ldr	r0, [pc, #68]	; (13f8 <GclkInit+0x78>)
    13b2:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
    13b4:	2010      	movs	r0, #16
    13b6:	68cc      	ldr	r4, [r1, #12]
    13b8:	4204      	tst	r4, r0
    13ba:	d0fc      	beq.n	13b6 <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
    13bc:	0292      	lsls	r2, r2, #10
    13be:	4313      	orrs	r3, r2
    13c0:	4a07      	ldr	r2, [pc, #28]	; (13e0 <GclkInit+0x60>)
    13c2:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
    13c4:	2310      	movs	r3, #16
    13c6:	68ca      	ldr	r2, [r1, #12]
    13c8:	421a      	tst	r2, r3
    13ca:	d0fc      	beq.n	13c6 <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
    13cc:	4a0b      	ldr	r2, [pc, #44]	; (13fc <GclkInit+0x7c>)
    13ce:	4b04      	ldr	r3, [pc, #16]	; (13e0 <GclkInit+0x60>)
    13d0:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
    13d2:	2280      	movs	r2, #128	; 0x80
    13d4:	4b0a      	ldr	r3, [pc, #40]	; (1400 <GclkInit+0x80>)
    13d6:	0052      	lsls	r2, r2, #1
    13d8:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
    13da:	4a0a      	ldr	r2, [pc, #40]	; (1404 <GclkInit+0x84>)
    13dc:	605a      	str	r2, [r3, #4]
}
    13de:	bd10      	pop	{r4, pc}
    13e0:	40000800 	.word	0x40000800
    13e4:	41004000 	.word	0x41004000
    13e8:	00806024 	.word	0x00806024
    13ec:	00806028 	.word	0x00806028
    13f0:	000003ff 	.word	0x000003ff
    13f4:	000001ff 	.word	0x000001ff
    13f8:	00000522 	.word	0x00000522
    13fc:	000005a2 	.word	0x000005a2
    1400:	40000c00 	.word	0x40000c00
    1404:	00010700 	.word	0x00010700

00001408 <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
    */


    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
    1408:	4b27      	ldr	r3, [pc, #156]	; (14a8 <RtcInit+0xa0>)
    140a:	4a28      	ldr	r2, [pc, #160]	; (14ac <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
    140c:	4828      	ldr	r0, [pc, #160]	; (14b0 <RtcInit+0xa8>)
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
    */


    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
    140e:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_ADDR >>
    1410:	4a28      	ldr	r2, [pc, #160]	; (14b4 <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
    1412:	6999      	ldr	r1, [r3, #24]
    1414:	6812      	ldr	r2, [r2, #0]
    1416:	4001      	ands	r1, r0
    1418:	04d2      	lsls	r2, r2, #19
    141a:	0e52      	lsrs	r2, r2, #25
    141c:	0412      	lsls	r2, r2, #16
    141e:	4311      	orrs	r1, r2
    1420:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_ADDR >>
          FUSES_OSC32K_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
    1422:	4925      	ldr	r1, [pc, #148]	; (14b8 <RtcInit+0xb0>)
    1424:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
    1426:	6999      	ldr	r1, [r3, #24]
    1428:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_ADDR >>
          FUSES_OSC32K_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
    142a:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_ADDR >>
          FUSES_OSC32K_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
    142c:	4302      	orrs	r2, r0
    142e:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_ADDR >>
          FUSES_OSC32K_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
    1430:	699a      	ldr	r2, [r3, #24]
    1432:	430a      	orrs	r2, r1
    1434:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
    1436:	2204      	movs	r2, #4
    1438:	68d9      	ldr	r1, [r3, #12]
    143a:	4211      	tst	r1, r2
    143c:	d0fc      	beq.n	1438 <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
    143e:	2281      	movs	r2, #129	; 0x81
    1440:	4b1e      	ldr	r3, [pc, #120]	; (14bc <RtcInit+0xb4>)
    1442:	0052      	lsls	r2, r2, #1
    1444:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
    1446:	4a1e      	ldr	r2, [pc, #120]	; (14c0 <RtcInit+0xb8>)
    1448:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    144a:	785a      	ldrb	r2, [r3, #1]
    144c:	b252      	sxtb	r2, r2
    144e:	2a00      	cmp	r2, #0
    1450:	dbfb      	blt.n	144a <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
    1452:	4a1c      	ldr	r2, [pc, #112]	; (14c4 <RtcInit+0xbc>)
    1454:	4b19      	ldr	r3, [pc, #100]	; (14bc <RtcInit+0xb4>)
    1456:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
    1458:	2204      	movs	r2, #4
    145a:	4b1b      	ldr	r3, [pc, #108]	; (14c8 <RtcInit+0xc0>)
    145c:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    145e:	7a9a      	ldrb	r2, [r3, #10]
    1460:	4919      	ldr	r1, [pc, #100]	; (14c8 <RtcInit+0xc0>)
    1462:	09d2      	lsrs	r2, r2, #7
    1464:	d1fb      	bne.n	145e <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
    1466:	20a0      	movs	r0, #160	; 0xa0
    1468:	880a      	ldrh	r2, [r1, #0]
    146a:	00c0      	lsls	r0, r0, #3
    146c:	4302      	orrs	r2, r0
    146e:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    1470:	7a9a      	ldrb	r2, [r3, #10]
    1472:	09d2      	lsrs	r2, r2, #7
    1474:	d1fc      	bne.n	1470 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
    1476:	4915      	ldr	r1, [pc, #84]	; (14cc <RtcInit+0xc4>)
    1478:	4a13      	ldr	r2, [pc, #76]	; (14c8 <RtcInit+0xc0>)
    147a:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    147c:	7a99      	ldrb	r1, [r3, #10]
    147e:	4a12      	ldr	r2, [pc, #72]	; (14c8 <RtcInit+0xc0>)
    1480:	09c9      	lsrs	r1, r1, #7
    1482:	d1fb      	bne.n	147c <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
    1484:	8851      	ldrh	r1, [r2, #2]
    1486:	4812      	ldr	r0, [pc, #72]	; (14d0 <RtcInit+0xc8>)
    1488:	4301      	orrs	r1, r0
    148a:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
    148c:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
    148e:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
    1490:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
    1492:	8811      	ldrh	r1, [r2, #0]
    1494:	4301      	orrs	r1, r0
    1496:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    1498:	7a9a      	ldrb	r2, [r3, #10]
    149a:	09d2      	lsrs	r2, r2, #7
    149c:	d1fc      	bne.n	1498 <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    149e:	4b0d      	ldr	r3, [pc, #52]	; (14d4 <RtcInit+0xcc>)
    14a0:	3208      	adds	r2, #8
    14a2:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
    14a4:	4770      	bx	lr
    14a6:	46c0      	nop			; (mov r8, r8)
    14a8:	40000800 	.word	0x40000800
    14ac:	00000606 	.word	0x00000606
    14b0:	ff80ffff 	.word	0xff80ffff
    14b4:	00806024 	.word	0x00806024
    14b8:	00000604 	.word	0x00000604
    14bc:	40000c00 	.word	0x40000c00
    14c0:	00230002 	.word	0x00230002
    14c4:	00004204 	.word	0x00004204
    14c8:	40001400 	.word	0x40001400
    14cc:	000003e6 	.word	0x000003e6
    14d0:	00004010 	.word	0x00004010
    14d4:	e000e100 	.word	0xe000e100

000014d8 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    14d8:	230f      	movs	r3, #15
    14da:	4018      	ands	r0, r3
    14dc:	4b08      	ldr	r3, [pc, #32]	; (1500 <gclkEnable+0x28>)
    14de:	0212      	lsls	r2, r2, #8
    14e0:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    14e2:	23f8      	movs	r3, #248	; 0xf8
    14e4:	0209      	lsls	r1, r1, #8
    14e6:	015b      	lsls	r3, r3, #5
    14e8:	4019      	ands	r1, r3
    14ea:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    14ec:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    14ee:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    14f0:	4c04      	ldr	r4, [pc, #16]	; (1504 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    14f2:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    14f4:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    14f6:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    14f8:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    14fa:	6060      	str	r0, [r4, #4]
}
    14fc:	bd10      	pop	{r4, pc}
    14fe:	46c0      	nop			; (mov r8, r8)
    1500:	00ffff00 	.word	0x00ffff00
    1504:	40000c00 	.word	0x40000c00

00001508 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
    1508:	4b04      	ldr	r3, [pc, #16]	; (151c <delayInit+0x14>)
    150a:	4a05      	ldr	r2, [pc, #20]	; (1520 <delayInit+0x18>)
    150c:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
    150e:	2230      	movs	r2, #48	; 0x30
    1510:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1512:	4b04      	ldr	r3, [pc, #16]	; (1524 <delayInit+0x1c>)
    1514:	3a2b      	subs	r2, #43	; 0x2b
    1516:	601a      	str	r2, [r3, #0]
}
    1518:	4770      	bx	lr
    151a:	46c0      	nop			; (mov r8, r8)
    151c:	20000008 	.word	0x20000008
    1520:	0000bb80 	.word	0x0000bb80
    1524:	e000e010 	.word	0xe000e010

00001528 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    1528:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    152a:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    152c:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    152e:	4b08      	ldr	r3, [pc, #32]	; (1550 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    1530:	4a08      	ldr	r2, [pc, #32]	; (1554 <delay_ms+0x2c>)
    1532:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1534:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
    1536:	3801      	subs	r0, #1
    1538:	d308      	bcc.n	154c <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    153a:	2b00      	cmp	r3, #0
    153c:	d0fb      	beq.n	1536 <delay_ms+0xe>
    153e:	4e05      	ldr	r6, [pc, #20]	; (1554 <delay_ms+0x2c>)
        SysTick->LOAD = n;
    1540:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    1542:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1544:	6835      	ldr	r5, [r6, #0]
    1546:	4225      	tst	r5, r4
    1548:	d0fc      	beq.n	1544 <delay_ms+0x1c>
    154a:	e7f4      	b.n	1536 <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
    154c:	bd70      	pop	{r4, r5, r6, pc}
    154e:	46c0      	nop			; (mov r8, r8)
    1550:	20000008 	.word	0x20000008
    1554:	e000e010 	.word	0xe000e010

00001558 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    1558:	21fa      	movs	r1, #250	; 0xfa
    155a:	4a04      	ldr	r2, [pc, #16]	; (156c <RTC_Handler+0x14>)
    155c:	0089      	lsls	r1, r1, #2
    155e:	6813      	ldr	r3, [r2, #0]
    1560:	185b      	adds	r3, r3, r1
    1562:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    1564:	22ff      	movs	r2, #255	; 0xff
    1566:	4b02      	ldr	r3, [pc, #8]	; (1570 <RTC_Handler+0x18>)
    1568:	721a      	strb	r2, [r3, #8]
}
    156a:	4770      	bx	lr
    156c:	2000002c 	.word	0x2000002c
    1570:	40001400 	.word	0x40001400

00001574 <TC1Init>:



void TC1Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC1_GCLK_ID) |
    1574:	4a0c      	ldr	r2, [pc, #48]	; (15a8 <TC1Init+0x34>)
    1576:	4b0d      	ldr	r3, [pc, #52]	; (15ac <TC1Init+0x38>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC1;
    1578:	490d      	ldr	r1, [pc, #52]	; (15b0 <TC1Init+0x3c>)



void TC1Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC1_GCLK_ID) |
    157a:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC1;
    157c:	2240      	movs	r2, #64	; 0x40
    157e:	6a0b      	ldr	r3, [r1, #32]
    1580:	4313      	orrs	r3, r2
    1582:	620b      	str	r3, [r1, #32]

    TC1->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1584:	4b0b      	ldr	r3, [pc, #44]	; (15b4 <TC1Init+0x40>)
    1586:	490c      	ldr	r1, [pc, #48]	; (15b8 <TC1Init+0x44>)
    1588:	8019      	strh	r1, [r3, #0]

    TC1->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC1->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC1->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    158a:	2102      	movs	r1, #2

    TC1->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV1024;
    //TC1->COUNT8.PER.reg = 0x20; // 32.768kHz / 1024 / 32 = 1.0hz = every 1 sec
    TC1->COUNT8.PER.reg = 0x40; // 32.768kHz / 1024 / 64 = 0.5hz = every 2 sec
    158c:	751a      	strb	r2, [r3, #20]
    //TC1->COUNT8.PER.reg = 0x80; // 32.768kHz / 1024 / 128 = 0.25hz = every 4 sec
    //TC1->COUNT8.PER.reg = 0xFF; // 32.768kHz / 1024 / 255 = 0.125hz = every 8 sec

    TC1->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    158e:	3a3f      	subs	r2, #63	; 0x3f
    1590:	735a      	strb	r2, [r3, #13]

    TC1->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1592:	32ff      	adds	r2, #255	; 0xff
    1594:	815a      	strh	r2, [r3, #10]

    TC1->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1596:	881a      	ldrh	r2, [r3, #0]
    1598:	430a      	orrs	r2, r1
    159a:	801a      	strh	r2, [r3, #0]
    159c:	2280      	movs	r2, #128	; 0x80
    159e:	4b07      	ldr	r3, [pc, #28]	; (15bc <TC1Init+0x48>)
    15a0:	0192      	lsls	r2, r2, #6
    15a2:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC1_IRQn);
}
    15a4:	4770      	bx	lr
    15a6:	46c0      	nop			; (mov r8, r8)
    15a8:	00004212 	.word	0x00004212
    15ac:	40000c00 	.word	0x40000c00
    15b0:	40000400 	.word	0x40000400
    15b4:	42001800 	.word	0x42001800
    15b8:	00000f04 	.word	0x00000f04
    15bc:	e000e100 	.word	0xe000e100

000015c0 <TC1_Handler>:

void TC1_Handler( void ) {
    TC1->COUNT8.INTFLAG.reg = 0xFF;
    15c0:	22ff      	movs	r2, #255	; 0xff
    15c2:	4b03      	ldr	r3, [pc, #12]	; (15d0 <TC1_Handler+0x10>)
    15c4:	739a      	strb	r2, [r3, #14]
    myMessage.transmitMessage = true;
    15c6:	4b03      	ldr	r3, [pc, #12]	; (15d4 <TC1_Handler+0x14>)
    15c8:	3afe      	subs	r2, #254	; 0xfe
    15ca:	701a      	strb	r2, [r3, #0]
}
    15cc:	4770      	bx	lr
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	42001800 	.word	0x42001800
    15d4:	20000030 	.word	0x20000030

000015d8 <findNextComma>:
 */

#include <util.h>
#include <boardDefines.h>

u8_t findNextComma(char *message) {
    15d8:	0002      	movs	r2, r0

    u8_t nextComma = 0;

    for (u8_t i = 0;; i++) {
    15da:	2000      	movs	r0, #0
        nextComma = i;
        if (message[i] == 0x2C) {
    15dc:	5c13      	ldrb	r3, [r2, r0]
    15de:	2b2c      	cmp	r3, #44	; 0x2c
    15e0:	d002      	beq.n	15e8 <findNextComma+0x10>

u8_t findNextComma(char *message) {

    u8_t nextComma = 0;

    for (u8_t i = 0;; i++) {
    15e2:	1c43      	adds	r3, r0, #1
    15e4:	b2d8      	uxtb	r0, r3
        nextComma = i;
        if (message[i] == 0x2C) {
            break;
        }
    }
    15e6:	e7f9      	b.n	15dc <findNextComma+0x4>
    return nextComma;
}
    15e8:	4770      	bx	lr
	...

000015ec <sendUSARTMessage>:


void sendUSARTMessage(messageToSend myMessage) {
    15ec:	b084      	sub	sp, #16
    15ee:	b570      	push	{r4, r5, r6, lr}

    usartDataOut(USART1,0xA);
    15f0:	4c33      	ldr	r4, [pc, #204]	; (16c0 <sendUSARTMessage+0xd4>)
    }
    return nextComma;
}


void sendUSARTMessage(messageToSend myMessage) {
    15f2:	9004      	str	r0, [sp, #16]
    15f4:	9105      	str	r1, [sp, #20]

    usartDataOut(USART1,0xA);
    15f6:	2001      	movs	r0, #1
    15f8:	210a      	movs	r1, #10
    15fa:	2525      	movs	r5, #37	; 0x25
    }
    return nextComma;
}


void sendUSARTMessage(messageToSend myMessage) {
    15fc:	9206      	str	r2, [sp, #24]
    15fe:	9307      	str	r3, [sp, #28]

    usartDataOut(USART1,0xA);
    1600:	47a0      	blx	r4
    1602:	ae07      	add	r6, sp, #28
    1604:	446d      	add	r5, sp
    for (u8_t i = 0; i < 9; i++) {
        usartDataOut(USART1,myMessage.time[i]);
    1606:	7831      	ldrb	r1, [r6, #0]
    1608:	2001      	movs	r0, #1
    160a:	3601      	adds	r6, #1
    160c:	47a0      	blx	r4


void sendUSARTMessage(messageToSend myMessage) {

    usartDataOut(USART1,0xA);
    for (u8_t i = 0; i < 9; i++) {
    160e:	42ae      	cmp	r6, r5
    1610:	d1f9      	bne.n	1606 <sendUSARTMessage+0x1a>
        usartDataOut(USART1,myMessage.time[i]);
    }
    usartDataOut(USART1,0x2C);
    1612:	212c      	movs	r1, #44	; 0x2c
    1614:	2001      	movs	r0, #1
    1616:	262f      	movs	r6, #47	; 0x2f
    1618:	47a0      	blx	r4
    161a:	446e      	add	r6, sp


    for (u8_t i = 0; i < 10; i++) {
        usartDataOut(USART1,myMessage.lat[i]);
    161c:	7829      	ldrb	r1, [r5, #0]
    161e:	2001      	movs	r0, #1
    1620:	3501      	adds	r5, #1
    1622:	47a0      	blx	r4
        usartDataOut(USART1,myMessage.time[i]);
    }
    usartDataOut(USART1,0x2C);


    for (u8_t i = 0; i < 10; i++) {
    1624:	42b5      	cmp	r5, r6
    1626:	d1f9      	bne.n	161c <sendUSARTMessage+0x30>
        usartDataOut(USART1,myMessage.lat[i]);
    }
    usartDataOut(USART1,0x2C);
    1628:	212c      	movs	r1, #44	; 0x2c
    162a:	2001      	movs	r0, #1
    162c:	47a0      	blx	r4

    usartDataOut(USART1,myMessage.northSouth[0]);
    162e:	ab04      	add	r3, sp, #16
    1630:	7fd9      	ldrb	r1, [r3, #31]
    1632:	2001      	movs	r0, #1
    1634:	47a0      	blx	r4
    1636:	263b      	movs	r6, #59	; 0x3b
    usartDataOut(USART1,0x2C);
    1638:	212c      	movs	r1, #44	; 0x2c
    163a:	2001      	movs	r0, #1
    163c:	47a0      	blx	r4
    163e:	ad0c      	add	r5, sp, #48	; 0x30
    1640:	446e      	add	r6, sp

    for (u8_t i = 0; i < 11; i++) {
        usartDataOut(USART1,myMessage.longitude[i]);
    1642:	7829      	ldrb	r1, [r5, #0]
    1644:	2001      	movs	r0, #1
    1646:	3501      	adds	r5, #1
    1648:	47a0      	blx	r4
    usartDataOut(USART1,0x2C);

    usartDataOut(USART1,myMessage.northSouth[0]);
    usartDataOut(USART1,0x2C);

    for (u8_t i = 0; i < 11; i++) {
    164a:	42b5      	cmp	r5, r6
    164c:	d1f9      	bne.n	1642 <sendUSARTMessage+0x56>
        usartDataOut(USART1,myMessage.longitude[i]);
    }
    usartDataOut(USART1,0x2C);
    164e:	212c      	movs	r1, #44	; 0x2c
    1650:	2001      	movs	r0, #1
    1652:	47a0      	blx	r4

    usartDataOut(USART1,myMessage.eastWest[0]);
    1654:	7829      	ldrb	r1, [r5, #0]
    1656:	2001      	movs	r0, #1
    1658:	47a0      	blx	r4
    165a:	2543      	movs	r5, #67	; 0x43
    usartDataOut(USART1,0x2C);
    165c:	212c      	movs	r1, #44	; 0x2c
    165e:	2001      	movs	r0, #1
    1660:	264d      	movs	r6, #77	; 0x4d
    1662:	47a0      	blx	r4
    1664:	446d      	add	r5, sp
    1666:	446e      	add	r6, sp

    for (u8_t i = 0; i < 10; i++) {
        if (myMessage.altitude[i] == 0) {
    1668:	7829      	ldrb	r1, [r5, #0]
    166a:	2900      	cmp	r1, #0
    166c:	d105      	bne.n	167a <sendUSARTMessage+0x8e>
    166e:	2557      	movs	r5, #87	; 0x57
            break;
        }
        usartDataOut(USART1,myMessage.altitude[i]);
    }
    usartDataOut(USART1,0x2C);
    1670:	212c      	movs	r1, #44	; 0x2c
    1672:	2001      	movs	r0, #1
    1674:	47a0      	blx	r4
    1676:	446d      	add	r5, sp
    1678:	e00a      	b.n	1690 <sendUSARTMessage+0xa4>

    for (u8_t i = 0; i < 10; i++) {
        if (myMessage.altitude[i] == 0) {
            break;
        }
        usartDataOut(USART1,myMessage.altitude[i]);
    167a:	2001      	movs	r0, #1
    167c:	3501      	adds	r5, #1
    167e:	47a0      	blx	r4
    usartDataOut(USART1,0x2C);

    usartDataOut(USART1,myMessage.eastWest[0]);
    usartDataOut(USART1,0x2C);

    for (u8_t i = 0; i < 10; i++) {
    1680:	42ae      	cmp	r6, r5
    1682:	d1f1      	bne.n	1668 <sendUSARTMessage+0x7c>
    1684:	e7f3      	b.n	166e <sendUSARTMessage+0x82>

    for (u8_t i = 0; i < 10; i++) {
        if (myMessage.speedOverGround[i] == 0) {
            break;
        }
        usartDataOut(USART1,myMessage.speedOverGround[i]);
    1686:	2001      	movs	r0, #1
    1688:	3601      	adds	r6, #1
    168a:	47a0      	blx	r4
        }
        usartDataOut(USART1,myMessage.altitude[i]);
    }
    usartDataOut(USART1,0x2C);

    for (u8_t i = 0; i < 10; i++) {
    168c:	42b5      	cmp	r5, r6
    168e:	d002      	beq.n	1696 <sendUSARTMessage+0xaa>
        if (myMessage.speedOverGround[i] == 0) {
    1690:	7831      	ldrb	r1, [r6, #0]
    1692:	2900      	cmp	r1, #0
    1694:	d1f7      	bne.n	1686 <sendUSARTMessage+0x9a>
    1696:	2661      	movs	r6, #97	; 0x61
            break;
        }
        usartDataOut(USART1,myMessage.speedOverGround[i]);
    }
    usartDataOut(USART1,0x2C);
    1698:	212c      	movs	r1, #44	; 0x2c
    169a:	2001      	movs	r0, #1
    169c:	47a0      	blx	r4
    169e:	446e      	add	r6, sp
    16a0:	e004      	b.n	16ac <sendUSARTMessage+0xc0>

    for (u8_t i = 0; i < 10; i++) {
        if (myMessage.courseOverGround[i] == 0) {
            break;
        }
        usartDataOut(USART1,myMessage.courseOverGround[i]);
    16a2:	2001      	movs	r0, #1
    16a4:	3501      	adds	r5, #1
    16a6:	47a0      	blx	r4
        }
        usartDataOut(USART1,myMessage.speedOverGround[i]);
    }
    usartDataOut(USART1,0x2C);

    for (u8_t i = 0; i < 10; i++) {
    16a8:	42ae      	cmp	r6, r5
    16aa:	d002      	beq.n	16b2 <sendUSARTMessage+0xc6>
        if (myMessage.courseOverGround[i] == 0) {
    16ac:	7829      	ldrb	r1, [r5, #0]
    16ae:	2900      	cmp	r1, #0
    16b0:	d1f7      	bne.n	16a2 <sendUSARTMessage+0xb6>
            break;
        }
        usartDataOut(USART1,myMessage.courseOverGround[i]);
    }
    usartDataOut(USART1,0x2C);
    16b2:	212c      	movs	r1, #44	; 0x2c
    16b4:	2001      	movs	r0, #1
    16b6:	47a0      	blx	r4


}
    16b8:	bc70      	pop	{r4, r5, r6}
    16ba:	bc08      	pop	{r3}
    16bc:	b004      	add	sp, #16
    16be:	4718      	bx	r3
    16c0:	00001925 	.word	0x00001925

000016c4 <parseGPSMessage>:

void parseGPSMessage() {
    16c4:	b5f0      	push	{r4, r5, r6, r7, lr}

    if(sercom(USART0)->SPI.INTFLAG.bit.RXC == 1) {
    16c6:	4b5c      	ldr	r3, [pc, #368]	; (1838 <parseGPSMessage+0x174>)
    usartDataOut(USART1,0x2C);


}

void parseGPSMessage() {
    16c8:	b0c1      	sub	sp, #260	; 0x104

    if(sercom(USART0)->SPI.INTFLAG.bit.RXC == 1) {
    16ca:	7e1a      	ldrb	r2, [r3, #24]
    16cc:	001d      	movs	r5, r3
    16ce:	0753      	lsls	r3, r2, #29
    16d0:	d400      	bmi.n	16d4 <parseGPSMessage+0x10>
    16d2:	e0af      	b.n	1834 <parseGPSMessage+0x170>
    16d4:	2400      	movs	r4, #0

        u8_t message[255];
        u8_t messageLength = 0;

        for (u8_t i = 0; i < 255; i++) {
            while(sercom(USART0)->SPI.INTFLAG.bit.RXC == 0);
    16d6:	7e2b      	ldrb	r3, [r5, #24]
    16d8:	075b      	lsls	r3, r3, #29
    16da:	d5fc      	bpl.n	16d6 <parseGPSMessage+0x12>
            u8_t digit = usartDataIn(USART0);
    16dc:	2000      	movs	r0, #0
    16de:	4b57      	ldr	r3, [pc, #348]	; (183c <parseGPSMessage+0x178>)
    16e0:	4798      	blx	r3
            if (digit == 0x0D ) {
    16e2:	280d      	cmp	r0, #13
    16e4:	d104      	bne.n	16f0 <parseGPSMessage+0x2c>
        usartDataOut(USART1,0x2C);
        */

        char *msgToParse = message;

        if (message[4] == 0x47 && message[5] == 0x47) {
    16e6:	466b      	mov	r3, sp
    16e8:	791b      	ldrb	r3, [r3, #4]
    16ea:	2b47      	cmp	r3, #71	; 0x47
    16ec:	d16e      	bne.n	17cc <parseGPSMessage+0x108>
    16ee:	e005      	b.n	16fc <parseGPSMessage+0x38>
            while(sercom(USART0)->SPI.INTFLAG.bit.RXC == 0);
            u8_t digit = usartDataIn(USART0);
            if (digit == 0x0D ) {
                break;
            }
            message[i] = digit;
    16f0:	466b      	mov	r3, sp
    16f2:	5518      	strb	r0, [r3, r4]
    16f4:	3401      	adds	r4, #1
    if(sercom(USART0)->SPI.INTFLAG.bit.RXC == 1) {

        u8_t message[255];
        u8_t messageLength = 0;

        for (u8_t i = 0; i < 255; i++) {
    16f6:	2cff      	cmp	r4, #255	; 0xff
    16f8:	d1ed      	bne.n	16d6 <parseGPSMessage+0x12>
    16fa:	e7f4      	b.n	16e6 <parseGPSMessage+0x22>
        usartDataOut(USART1,0x2C);
        */

        char *msgToParse = message;

        if (message[4] == 0x47 && message[5] == 0x47) {
    16fc:	466b      	mov	r3, sp
    16fe:	795b      	ldrb	r3, [r3, #5]
    1700:	2b47      	cmp	r3, #71	; 0x47
    1702:	d000      	beq.n	1706 <parseGPSMessage+0x42>
    1704:	e096      	b.n	1834 <parseGPSMessage+0x170>

            u8_t nextComma = findNextComma(&message);
    1706:	4c4e      	ldr	r4, [pc, #312]	; (1840 <parseGPSMessage+0x17c>)
    1708:	4668      	mov	r0, sp
    170a:	47a0      	blx	r4

            msgToParse = strchr(msgToParse,',') + 1;
    170c:	4e4d      	ldr	r6, [pc, #308]	; (1844 <parseGPSMessage+0x180>)
    170e:	212c      	movs	r1, #44	; 0x2c
    1710:	4668      	mov	r0, sp
    1712:	47b0      	blx	r6
    1714:	1c47      	adds	r7, r0, #1
            nextComma = findNextComma(msgToParse);
    1716:	0038      	movs	r0, r7
    1718:	47a0      	blx	r4
            strncpy(myMessage.time,msgToParse,nextComma);
    171a:	4d4b      	ldr	r5, [pc, #300]	; (1848 <parseGPSMessage+0x184>)
        if (message[4] == 0x47 && message[5] == 0x47) {

            u8_t nextComma = findNextComma(&message);

            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
    171c:	0002      	movs	r2, r0
            strncpy(myMessage.time,msgToParse,nextComma);
    171e:	0039      	movs	r1, r7
    1720:	484a      	ldr	r0, [pc, #296]	; (184c <parseGPSMessage+0x188>)
    1722:	47a8      	blx	r5


            msgToParse = strchr(msgToParse,',') + 1;
    1724:	212c      	movs	r1, #44	; 0x2c
    1726:	0038      	movs	r0, r7
    1728:	47b0      	blx	r6
    172a:	1c47      	adds	r7, r0, #1
            nextComma = findNextComma(msgToParse);
    172c:	0038      	movs	r0, r7
    172e:	47a0      	blx	r4
            strncpy(myMessage.lat,msgToParse,nextComma);
    1730:	0039      	movs	r1, r7
            nextComma = findNextComma(msgToParse);
            strncpy(myMessage.time,msgToParse,nextComma);


            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
    1732:	0002      	movs	r2, r0
            strncpy(myMessage.lat,msgToParse,nextComma);
    1734:	4846      	ldr	r0, [pc, #280]	; (1850 <parseGPSMessage+0x18c>)
    1736:	47a8      	blx	r5

            msgToParse = strchr(msgToParse,',') + 1;
    1738:	212c      	movs	r1, #44	; 0x2c
    173a:	0038      	movs	r0, r7
    173c:	47b0      	blx	r6
    173e:	1c47      	adds	r7, r0, #1
            nextComma = findNextComma(msgToParse);
    1740:	0038      	movs	r0, r7
    1742:	47a0      	blx	r4
            strncpy(myMessage.northSouth,msgToParse,nextComma);
    1744:	0039      	movs	r1, r7
            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
            strncpy(myMessage.lat,msgToParse,nextComma);

            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
    1746:	0002      	movs	r2, r0
            strncpy(myMessage.northSouth,msgToParse,nextComma);
    1748:	4842      	ldr	r0, [pc, #264]	; (1854 <parseGPSMessage+0x190>)
    174a:	47a8      	blx	r5

            msgToParse = strchr(msgToParse,',') + 1;
    174c:	212c      	movs	r1, #44	; 0x2c
    174e:	0038      	movs	r0, r7
    1750:	47b0      	blx	r6
    1752:	1c47      	adds	r7, r0, #1
            nextComma = findNextComma(msgToParse);
    1754:	0038      	movs	r0, r7
    1756:	47a0      	blx	r4
            strncpy(myMessage.longitude,msgToParse,nextComma);
    1758:	0039      	movs	r1, r7
            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
            strncpy(myMessage.northSouth,msgToParse,nextComma);

            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
    175a:	0002      	movs	r2, r0
            strncpy(myMessage.longitude,msgToParse,nextComma);
    175c:	483e      	ldr	r0, [pc, #248]	; (1858 <parseGPSMessage+0x194>)
    175e:	47a8      	blx	r5

            msgToParse = strchr(msgToParse,',') + 1;
    1760:	212c      	movs	r1, #44	; 0x2c
    1762:	0038      	movs	r0, r7
    1764:	47b0      	blx	r6
    1766:	1c47      	adds	r7, r0, #1
            nextComma = findNextComma(msgToParse);
    1768:	0038      	movs	r0, r7
    176a:	47a0      	blx	r4
            strncpy(myMessage.eastWest,msgToParse,nextComma);
    176c:	0039      	movs	r1, r7
            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
            strncpy(myMessage.longitude,msgToParse,nextComma);

            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
    176e:	0002      	movs	r2, r0
            strncpy(myMessage.eastWest,msgToParse,nextComma);
    1770:	483a      	ldr	r0, [pc, #232]	; (185c <parseGPSMessage+0x198>)
    1772:	47a8      	blx	r5

            msgToParse = strchr(msgToParse,',') + 1;
    1774:	212c      	movs	r1, #44	; 0x2c
    1776:	0038      	movs	r0, r7
    1778:	47b0      	blx	r6
    177a:	1c47      	adds	r7, r0, #1
            nextComma = findNextComma(msgToParse);
    177c:	0038      	movs	r0, r7
    177e:	47a0      	blx	r4
            strncpy(myMessage.quality,msgToParse,nextComma);
    1780:	0039      	movs	r1, r7
            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
            strncpy(myMessage.eastWest,msgToParse,nextComma);

            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
    1782:	0002      	movs	r2, r0
            strncpy(myMessage.quality,msgToParse,nextComma);
    1784:	4836      	ldr	r0, [pc, #216]	; (1860 <parseGPSMessage+0x19c>)
    1786:	47a8      	blx	r5

            msgToParse = strchr(msgToParse,',') + 1;
    1788:	212c      	movs	r1, #44	; 0x2c
    178a:	0038      	movs	r0, r7
    178c:	47b0      	blx	r6
    178e:	1c47      	adds	r7, r0, #1
            nextComma = findNextComma(msgToParse);
    1790:	0038      	movs	r0, r7
    1792:	47a0      	blx	r4
            strncpy(myMessage.numSV,msgToParse,nextComma);
    1794:	0039      	movs	r1, r7
            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
            strncpy(myMessage.quality,msgToParse,nextComma);

            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
    1796:	0002      	movs	r2, r0
            strncpy(myMessage.numSV,msgToParse,nextComma);
    1798:	4832      	ldr	r0, [pc, #200]	; (1864 <parseGPSMessage+0x1a0>)
    179a:	47a8      	blx	r5

            msgToParse = strchr(msgToParse,',') + 1;
    179c:	212c      	movs	r1, #44	; 0x2c
    179e:	0038      	movs	r0, r7
    17a0:	47b0      	blx	r6
    17a2:	1c47      	adds	r7, r0, #1
            nextComma = findNextComma(msgToParse);
    17a4:	0038      	movs	r0, r7
    17a6:	47a0      	blx	r4
            strncpy(myMessage.HDOP,msgToParse,nextComma);
    17a8:	0039      	movs	r1, r7
            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
            strncpy(myMessage.numSV,msgToParse,nextComma);

            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
    17aa:	0002      	movs	r2, r0
            strncpy(myMessage.HDOP,msgToParse,nextComma);
    17ac:	482e      	ldr	r0, [pc, #184]	; (1868 <parseGPSMessage+0x1a4>)
    17ae:	47a8      	blx	r5

            msgToParse = strchr(msgToParse,',') + 1;
    17b0:	212c      	movs	r1, #44	; 0x2c
    17b2:	0038      	movs	r0, r7
    17b4:	47b0      	blx	r6
    17b6:	1c46      	adds	r6, r0, #1
            nextComma = findNextComma(msgToParse);
    17b8:	0030      	movs	r0, r6
    17ba:	47a0      	blx	r4
            strncpy(myMessage.altitude,msgToParse,nextComma);
    17bc:	0031      	movs	r1, r6
            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
            strncpy(myMessage.HDOP,msgToParse,nextComma);

            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
    17be:	0002      	movs	r2, r0
            strncpy(myMessage.altitude,msgToParse,nextComma);
    17c0:	482a      	ldr	r0, [pc, #168]	; (186c <parseGPSMessage+0x1a8>)
    17c2:	47a8      	blx	r5

            myMessage.messageReady = true;
    17c4:	2201      	movs	r2, #1
    17c6:	4b2a      	ldr	r3, [pc, #168]	; (1870 <parseGPSMessage+0x1ac>)
    17c8:	705a      	strb	r2, [r3, #1]
        usartDataOut(USART1,0x2C);
        */

        char *msgToParse = message;

        if (message[4] == 0x47 && message[5] == 0x47) {
    17ca:	e033      	b.n	1834 <parseGPSMessage+0x170>
            strncpy(myMessage.altitude,msgToParse,nextComma);

            myMessage.messageReady = true;


        } else if (message[4] == 0x52 && message[5] == 0x4d) {
    17cc:	2b52      	cmp	r3, #82	; 0x52
    17ce:	d131      	bne.n	1834 <parseGPSMessage+0x170>
    17d0:	466b      	mov	r3, sp
    17d2:	795b      	ldrb	r3, [r3, #5]
    17d4:	2b4d      	cmp	r3, #77	; 0x4d
    17d6:	d12d      	bne.n	1834 <parseGPSMessage+0x170>

            myMessage.messageReady = false;
    17d8:	2200      	movs	r2, #0
    17da:	4b25      	ldr	r3, [pc, #148]	; (1870 <parseGPSMessage+0x1ac>)

            u8_t nextComma = findNextComma(&message);
    17dc:	4e18      	ldr	r6, [pc, #96]	; (1840 <parseGPSMessage+0x17c>)
    17de:	4668      	mov	r0, sp
            myMessage.messageReady = true;


        } else if (message[4] == 0x52 && message[5] == 0x4d) {

            myMessage.messageReady = false;
    17e0:	705a      	strb	r2, [r3, #1]

            u8_t nextComma = findNextComma(&message);
    17e2:	47b0      	blx	r6

            msgToParse = strchr(msgToParse,',') + 1;
    17e4:	4c17      	ldr	r4, [pc, #92]	; (1844 <parseGPSMessage+0x180>)
    17e6:	212c      	movs	r1, #44	; 0x2c
    17e8:	4668      	mov	r0, sp
    17ea:	47a0      	blx	r4
            msgToParse = strchr(msgToParse,',') + 1;
    17ec:	212c      	movs	r1, #44	; 0x2c
    17ee:	3001      	adds	r0, #1
    17f0:	47a0      	blx	r4
            msgToParse = strchr(msgToParse,',') + 1;
    17f2:	212c      	movs	r1, #44	; 0x2c
    17f4:	3001      	adds	r0, #1
    17f6:	47a0      	blx	r4
            msgToParse = strchr(msgToParse,',') + 1;
    17f8:	212c      	movs	r1, #44	; 0x2c
    17fa:	3001      	adds	r0, #1
    17fc:	47a0      	blx	r4
            msgToParse = strchr(msgToParse,',') + 1;
    17fe:	212c      	movs	r1, #44	; 0x2c
    1800:	3001      	adds	r0, #1
    1802:	47a0      	blx	r4
            msgToParse = strchr(msgToParse,',') + 1;
    1804:	212c      	movs	r1, #44	; 0x2c
    1806:	3001      	adds	r0, #1
    1808:	47a0      	blx	r4
            msgToParse = strchr(msgToParse,',') + 1;
    180a:	212c      	movs	r1, #44	; 0x2c
    180c:	3001      	adds	r0, #1
    180e:	47a0      	blx	r4
    1810:	1c45      	adds	r5, r0, #1
            nextComma = findNextComma(msgToParse);
    1812:	0028      	movs	r0, r5
    1814:	47b0      	blx	r6
            strncpy(myMessage.speedOverGround,msgToParse,nextComma);
    1816:	0029      	movs	r1, r5
            msgToParse = strchr(msgToParse,',') + 1;
            msgToParse = strchr(msgToParse,',') + 1;
            msgToParse = strchr(msgToParse,',') + 1;
            msgToParse = strchr(msgToParse,',') + 1;
            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
    1818:	0002      	movs	r2, r0
            strncpy(myMessage.speedOverGround,msgToParse,nextComma);
    181a:	4f0b      	ldr	r7, [pc, #44]	; (1848 <parseGPSMessage+0x184>)
    181c:	4815      	ldr	r0, [pc, #84]	; (1874 <parseGPSMessage+0x1b0>)
    181e:	47b8      	blx	r7

            msgToParse = strchr(msgToParse,',') + 1;
    1820:	212c      	movs	r1, #44	; 0x2c
    1822:	0028      	movs	r0, r5
    1824:	47a0      	blx	r4
    1826:	1c44      	adds	r4, r0, #1
            nextComma = findNextComma(msgToParse);
    1828:	0020      	movs	r0, r4
    182a:	47b0      	blx	r6
            strncpy(myMessage.courseOverGround,msgToParse,nextComma);
    182c:	0021      	movs	r1, r4
            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
            strncpy(myMessage.speedOverGround,msgToParse,nextComma);

            msgToParse = strchr(msgToParse,',') + 1;
            nextComma = findNextComma(msgToParse);
    182e:	0002      	movs	r2, r0
            strncpy(myMessage.courseOverGround,msgToParse,nextComma);
    1830:	4811      	ldr	r0, [pc, #68]	; (1878 <parseGPSMessage+0x1b4>)
    1832:	47b8      	blx	r7

        }
    }
    1834:	b041      	add	sp, #260	; 0x104
    1836:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1838:	42000800 	.word	0x42000800
    183c:	0000193d 	.word	0x0000193d
    1840:	000015d9 	.word	0x000015d9
    1844:	000019ab 	.word	0x000019ab
    1848:	000019c7 	.word	0x000019c7
    184c:	2000003c 	.word	0x2000003c
    1850:	20000045 	.word	0x20000045
    1854:	2000004f 	.word	0x2000004f
    1858:	20000050 	.word	0x20000050
    185c:	2000005b 	.word	0x2000005b
    1860:	2000005c 	.word	0x2000005c
    1864:	2000005d 	.word	0x2000005d
    1868:	2000005f 	.word	0x2000005f
    186c:	20000063 	.word	0x20000063
    1870:	20000030 	.word	0x20000030
    1874:	2000006d 	.word	0x2000006d
    1878:	20000077 	.word	0x20000077

0000187c <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    187c:	b570      	push	{r4, r5, r6, lr}
    187e:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    1880:	2301      	movs	r3, #1
    1882:	1ca6      	adds	r6, r4, #2
    1884:	40b3      	lsls	r3, r6
    1886:	480d      	ldr	r0, [pc, #52]	; (18bc <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    1888:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    188a:	6a01      	ldr	r1, [r0, #32]
    188c:	430b      	orrs	r3, r1
    188e:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    1890:	2d00      	cmp	r5, #0
    1892:	d003      	beq.n	189c <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    1894:	2107      	movs	r1, #7
    1896:	0028      	movs	r0, r5
    1898:	4b09      	ldr	r3, [pc, #36]	; (18c0 <sercomClockEnable+0x44>)
    189a:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    189c:	23f0      	movs	r3, #240	; 0xf0
    189e:	2080      	movs	r0, #128	; 0x80
    18a0:	0229      	lsls	r1, r5, #8
    18a2:	011b      	lsls	r3, r3, #4
    18a4:	4019      	ands	r1, r3
    18a6:	01c0      	lsls	r0, r0, #7
    18a8:	4301      	orrs	r1, r0
    18aa:	0020      	movs	r0, r4
    18ac:	233f      	movs	r3, #63	; 0x3f
    18ae:	300e      	adds	r0, #14
    18b0:	4018      	ands	r0, r3
    18b2:	4b04      	ldr	r3, [pc, #16]	; (18c4 <sercomClockEnable+0x48>)
    18b4:	4308      	orrs	r0, r1
    18b6:	8058      	strh	r0, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    18b8:	bd70      	pop	{r4, r5, r6, pc}
    18ba:	46c0      	nop			; (mov r8, r8)
    18bc:	40000400 	.word	0x40000400
    18c0:	000014d9 	.word	0x000014d9
    18c4:	40000c00 	.word	0x40000c00

000018c8 <sercomReset>:




inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    18c8:	4b04      	ldr	r3, [pc, #16]	; (18dc <sercomReset+0x14>)
    18ca:	0280      	lsls	r0, r0, #10
    18cc:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    18ce:	2301      	movs	r3, #1
    18d0:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    18d2:	6802      	ldr	r2, [r0, #0]
    18d4:	421a      	tst	r2, r3
    18d6:	d1fc      	bne.n	18d2 <sercomReset+0xa>
}
    18d8:	4770      	bx	lr
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	42000800 	.word	0x42000800

000018e0 <sercomUartInit>:
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t BAUD) {
    18e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18e2:	0007      	movs	r7, r0
    18e4:	001e      	movs	r6, r3

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    18e6:	4b0c      	ldr	r3, [pc, #48]	; (1918 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t BAUD) {
    18e8:	000d      	movs	r5, r1
    18ea:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    18ec:	4798      	blx	r3
    18ee:	4b0b      	ldr	r3, [pc, #44]	; (191c <sercomUartInit+0x3c>)
    18f0:	02b8      	lsls	r0, r7, #10
    18f2:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    18f4:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    18f6:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    18f8:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = BAUD;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    18fa:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    18fc:	0529      	lsls	r1, r5, #20
    18fe:	0392      	lsls	r2, r2, #14
    1900:	4011      	ands	r1, r2
    1902:	4a07      	ldr	r2, [pc, #28]	; (1920 <sercomUartInit+0x40>)
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = BAUD;
    1904:	b2b6      	uxth	r6, r6
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    1906:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1908:	0424      	lsls	r4, r4, #16
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = BAUD;
    190a:	8186      	strh	r6, [r0, #12]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    190c:	4311      	orrs	r1, r2

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = BAUD;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    190e:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1910:	4023      	ands	r3, r4
    1912:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = BAUD;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    1914:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    1916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1918:	000018c9 	.word	0x000018c9
    191c:	42000800 	.word	0x42000800
    1920:	40000006 	.word	0x40000006

00001924 <usartDataOut>:
    1924:	4b04      	ldr	r3, [pc, #16]	; (1938 <usartDataOut+0x14>)
    1926:	0280      	lsls	r0, r0, #10
    1928:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    192a:	b289      	uxth	r1, r1
    192c:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    192e:	7e03      	ldrb	r3, [r0, #24]
    1930:	07db      	lsls	r3, r3, #31
    1932:	d5fc      	bpl.n	192e <usartDataOut+0xa>
}
    1934:	4770      	bx	lr
    1936:	46c0      	nop			; (mov r8, r8)
    1938:	42000800 	.word	0x42000800

0000193c <usartDataIn>:
    193c:	4b02      	ldr	r3, [pc, #8]	; (1948 <usartDataIn+0xc>)
    193e:	0280      	lsls	r0, r0, #10
    1940:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    1942:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    1944:	b2c0      	uxtb	r0, r0
}
    1946:	4770      	bx	lr
    1948:	42000800 	.word	0x42000800

0000194c <__libc_init_array>:
    194c:	4b0e      	ldr	r3, [pc, #56]	; (1988 <__libc_init_array+0x3c>)
    194e:	b570      	push	{r4, r5, r6, lr}
    1950:	2500      	movs	r5, #0
    1952:	001e      	movs	r6, r3
    1954:	4c0d      	ldr	r4, [pc, #52]	; (198c <__libc_init_array+0x40>)
    1956:	1ae4      	subs	r4, r4, r3
    1958:	10a4      	asrs	r4, r4, #2
    195a:	42a5      	cmp	r5, r4
    195c:	d004      	beq.n	1968 <__libc_init_array+0x1c>
    195e:	00ab      	lsls	r3, r5, #2
    1960:	58f3      	ldr	r3, [r6, r3]
    1962:	4798      	blx	r3
    1964:	3501      	adds	r5, #1
    1966:	e7f8      	b.n	195a <__libc_init_array+0xe>
    1968:	f000 f850 	bl	1a0c <_init>
    196c:	4b08      	ldr	r3, [pc, #32]	; (1990 <__libc_init_array+0x44>)
    196e:	2500      	movs	r5, #0
    1970:	001e      	movs	r6, r3
    1972:	4c08      	ldr	r4, [pc, #32]	; (1994 <__libc_init_array+0x48>)
    1974:	1ae4      	subs	r4, r4, r3
    1976:	10a4      	asrs	r4, r4, #2
    1978:	42a5      	cmp	r5, r4
    197a:	d004      	beq.n	1986 <__libc_init_array+0x3a>
    197c:	00ab      	lsls	r3, r5, #2
    197e:	58f3      	ldr	r3, [r6, r3]
    1980:	4798      	blx	r3
    1982:	3501      	adds	r5, #1
    1984:	e7f8      	b.n	1978 <__libc_init_array+0x2c>
    1986:	bd70      	pop	{r4, r5, r6, pc}
    1988:	00001a18 	.word	0x00001a18
    198c:	00001a18 	.word	0x00001a18
    1990:	00001a18 	.word	0x00001a18
    1994:	00001a1c 	.word	0x00001a1c

00001998 <memcpy>:
    1998:	2300      	movs	r3, #0
    199a:	b510      	push	{r4, lr}
    199c:	429a      	cmp	r2, r3
    199e:	d003      	beq.n	19a8 <memcpy+0x10>
    19a0:	5ccc      	ldrb	r4, [r1, r3]
    19a2:	54c4      	strb	r4, [r0, r3]
    19a4:	3301      	adds	r3, #1
    19a6:	e7f9      	b.n	199c <memcpy+0x4>
    19a8:	bd10      	pop	{r4, pc}

000019aa <strchr>:
    19aa:	0002      	movs	r2, r0
    19ac:	b2c9      	uxtb	r1, r1
    19ae:	7813      	ldrb	r3, [r2, #0]
    19b0:	2b00      	cmp	r3, #0
    19b2:	d003      	beq.n	19bc <strchr+0x12>
    19b4:	4299      	cmp	r1, r3
    19b6:	d004      	beq.n	19c2 <strchr+0x18>
    19b8:	3201      	adds	r2, #1
    19ba:	e7f8      	b.n	19ae <strchr+0x4>
    19bc:	0018      	movs	r0, r3
    19be:	2900      	cmp	r1, #0
    19c0:	d100      	bne.n	19c4 <strchr+0x1a>
    19c2:	0010      	movs	r0, r2
    19c4:	4770      	bx	lr

000019c6 <strncpy>:
    19c6:	0003      	movs	r3, r0
    19c8:	b530      	push	{r4, r5, lr}
    19ca:	2a00      	cmp	r2, #0
    19cc:	d00d      	beq.n	19ea <strncpy+0x24>
    19ce:	780c      	ldrb	r4, [r1, #0]
    19d0:	3301      	adds	r3, #1
    19d2:	1e5d      	subs	r5, r3, #1
    19d4:	3a01      	subs	r2, #1
    19d6:	702c      	strb	r4, [r5, #0]
    19d8:	3101      	adds	r1, #1
    19da:	2c00      	cmp	r4, #0
    19dc:	d1f5      	bne.n	19ca <strncpy+0x4>
    19de:	189a      	adds	r2, r3, r2
    19e0:	429a      	cmp	r2, r3
    19e2:	d002      	beq.n	19ea <strncpy+0x24>
    19e4:	701c      	strb	r4, [r3, #0]
    19e6:	3301      	adds	r3, #1
    19e8:	e7fa      	b.n	19e0 <strncpy+0x1a>
    19ea:	bd30      	pop	{r4, r5, pc}

000019ec <spiMOSI>:
    19ec:	0000 0800 0000                                   .....

000019f1 <spiSCK>:
    19f1:	0000 0900 0000                                   .....

000019f6 <spiMISO>:
    19f6:	0000 0500 0000                                   .....

000019fb <spiMOSI>:
    19fb:	0000 0800 0000                                   .....

00001a00 <spiSCK>:
    1a00:	0000 0900 0000                                   .....

00001a05 <spiMISO>:
    1a05:	0000 0500 0000 f800                              .......

00001a0c <_init>:
    1a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a0e:	46c0      	nop			; (mov r8, r8)
    1a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1a12:	bc08      	pop	{r3}
    1a14:	469e      	mov	lr, r3
    1a16:	4770      	bx	lr

00001a18 <__init_array_start>:
    1a18:	000000b5 	.word	0x000000b5

00001a1c <_fini>:
    1a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a1e:	46c0      	nop			; (mov r8, r8)
    1a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1a22:	bc08      	pop	{r3}
    1a24:	469e      	mov	lr, r3
    1a26:	4770      	bx	lr

00001a28 <__fini_array_start>:
    1a28:	0000008d 	.word	0x0000008d
